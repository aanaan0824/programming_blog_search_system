{"blogid": "120428084", "writerAge": "码龄2年", "writerBlogNum": "107", "writerCollect": "2527", "writerComment": "1392", "writerFan": "13476", "writerGrade": "6级", "writerIntegral": "5951", "writerName": "爱生活，爱代码", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_120428084.jpg", "writerRankTotal": "2374", "writerRankWeekly": "3215", "writerThumb": "2788", "writerVisitNum": "110549", "blog_read_count": "842", "blog_time": "于 2021-09-25 11:16:05 发布", "blog_title": "C语言篇 + 内存管理及柔性数组话题", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e3ecc4bccd404514835d93918fbf78da.png\"/></p>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#_3\">为什么存在动态内存分配</a></li><li><a href=\"#_21\">动态内存函数的介绍</a></li><li><ul><li><a href=\"#mallocfree_22\">malloc和free</a></li><li><a href=\"#free_35\">free函数的注意事项</a></li><li><ul><li><a href=\"#_41\">举例一</a></li><li><a href=\"#_53\">举例二</a></li></ul>\n</li><li><a href=\"#_67\">正确使用</a></li><li><a href=\"#calloc_113\">calloc</a></li><li><a href=\"#realloc_135\">realloc</a></li></ul>\n</li><li><a href=\"#_220\">常见的动态内存错误</a></li><li><ul><li><a href=\"#NULL_221\">对NULL指针的解引用操作</a></li><li><a href=\"#_233\">对动态开辟空间的越界访问</a></li><li><a href=\"#free_261\">对非动态开辟内存使用free释放</a></li><li><a href=\"#free_271\">使用free释放一块动态开辟内存的一部分</a></li><li><a href=\"#_285\">对同一块动态内存多次释放</a></li><li><a href=\"#_304\">动态开辟内存忘记释放（内存泄漏）</a></li></ul>\n</li><li><a href=\"#_323\">几个经典的笔试题</a></li><li><a href=\"#1_324\">题目1：</a></li><li><a href=\"#_373\">题目二</a></li><li><ul><li><a href=\"#3_387\">题目3：</a></li><li><a href=\"#4_402\">题目4：</a></li></ul>\n</li><li><a href=\"#CC_418\">C/C++程序的内存开辟</a></li><li><a href=\"#_431\">柔性数组</a></li><li><ul><li><a href=\"#_451\">柔性数组的特点</a></li><li><a href=\"#_467\">柔性数组的使用</a></li><li><a href=\"#_538\">总结：</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_3\"></a>为什么存在动态内存分配</h1>\n<p>为什么存在动态内存分配<br/> 首先我们先了解一下内存中的几个区域<br/> 栈区、堆区、静态区<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4cedd4e381ec4a339a2e91c276ce3683.png\"/></p>\n<p>我们已经掌握的内存开辟方式有：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//在栈空间上开辟四个字节</span>\n<span class=\"token keyword\">char</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//在栈空间上开辟10个字节的连续空间</span>\n</code></pre>\n<p>但是上述的开辟空间的方式有两个特点：</p>\n<ol><li>空间开辟大小是固定的。</li><li>数组在申明的时候，必须指定数组的长度，它所需要的内存在编译时分配。<br/> 但是对于空间的需求，不仅仅是上述的情况。有时候我们需要的空间大小在程序运行的时候才能知道，那数组的编<br/> 译时开辟空间的方式就不能满足了。 这时候就只能试试动态存开辟了。</li></ol>\n<h1><a id=\"_21\"></a>动态内存函数的介绍</h1>\n<h2><a id=\"mallocfree_22\"></a>malloc和free</h2>\n<p>C语言提供了一个动态内存开辟的函数，它的函数原型是这样的<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7ae8f55af2944f8cb31b1e0d4c4bb65f.png\"/></p>\n<blockquote>\n<p>这个函数向内存申请一块连续可用的空间，并返回指向这块空间的指针。 如果开辟成功，则返回一个指向开辟好空间的指针，并不会初始化空间。<br/> 如果开辟失败，则返回一个NULL指针，因此malloc的返回值一定要做检查。</p>\n<p>返回值的类型是 void* ，所以malloc函数并不知道开辟空间的类型，具体在使用的时候使用者自己来决定。 如果参数 size<br/> 为0，malloc的行为是标准是未定义的，取决于编译器。</p>\n</blockquote>\n<p>C语言提供了另外一个函数free，专门是用来做动态内存的释放和回收的，函数原型如下：<br/> C语言提供了一个动态内存释放的函数，它的函数原型是这样的<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2560ae1b08944e99a75778fadfbb2e5f.png\"/></p>\n<h2><a id=\"free_35\"></a>free函数的注意事项</h2>\n<ul><li>free函数用来释放动态开辟的内存。</li><li>如果参数 ptr 指向的空间不是动态开辟的，那free函数的行为是未定义的。</li><li>如果参数 ptr是NULL指针，则函数什么事都不做。</li></ul>\n<h3><a id=\"_41\"></a>举例一</h3>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//那free函数的行为是未定义的。 </span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//err</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_53\"></a>举例二</h3>\n<pre><code class=\"prism language-c\">\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//如果参数 ptr是NULL指针，则函数什么事都不做。</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_67\"></a>正确使用</h2>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//动态申请</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//申请失败</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"malloc file\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//申请成功</span>\n\t<span class=\"token keyword\">else</span> \n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//释放堆上的申请的空间，指针置空</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<blockquote>\n<p>值得一提的是，这里的释放完了必须得将指针置空，如果指针不置空，那么这个指针将会会成为野指针！野指针是一种很可怕的事情，并且错误不好排查，回到主体，很明显执行完free后内存已经释放了，内存也归还给操作系统了，可是指针还指向这块空间，不属于你的内存是不允许访问的，访问了就得受到惩罚(程序崩溃)<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e451525690d44ca89d281e7d7cfb60fe.png\"/><br/> 释放完了，习惯性地将指针置空，这样才是最安全的，指针间的关系已经被切断了<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cbae755b99204166baf16d769d582e9a.png\"/></p>\n</blockquote>\n<h2><a id=\"calloc_113\"></a>calloc</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1ec26785453345148b6df8f4a0c8820c.png\"/></p>\n<ul><li>函数的功能是为 num 个大小为 size 的元素开辟一块空间，并且把空间的每个字节初始化为0。</li><li>与函数 malloc 的区别只在于 calloc 会在返回地址之前把申请的空间的每个字节初始化为全0。</li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">mian</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//申请失败</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>函数的功能是为 num 个大小为 size 的元素开辟一块空间，并且把空间的每个字节初始化为0，从调试窗口中很好观察<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e877457a9b0546dfade3268d2a32eb47.png\"/></p>\n<h2><a id=\"realloc_135\"></a>realloc</h2>\n<p>realloc函数的出现让动态内存管理更加灵活。<br/> 有时会我们发现过去申请的空间太小了，有时候我们又会觉得申请的空间过大了，那为了合理的使用内存，<br/> 我们一定会对内存的大小做灵活的调整。那 realloc 函数就可以做到对动态开辟内存大小的调整。 函数原型<br/> 如下<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3c2e9968184a4355acec61ebec6cb628.png\"/></p>\n<blockquote>\n<p>在第一种情况下，释放原来的块。在第二种情况下，原始块没有变化。返回值指向一个存储空间，该存储空间保证对任何类型的对象进行适当的对齐<br/> 如果函数未能分配请求的内存块，则返回一个空指针，并且参数ptr指向的内存块没有被释放(<mark>它仍然有效，内容没有改变</mark>)。</p>\n</blockquote>\n<ul><li> <p>ptr是要调整的内存地址 size调整之后新大小 返回值为调整之后的内存起始位置。</p> </li><li> <p>这个函数调整原内存空间大小的基础上，还会将原来内存中的数据移动到 新 的空间。</p> <p>realloc在调整内存空间的是存在两种情况：<br/> 情况1：原有空间之后有足够大的空间<br/> 情况2：原有空间之后没有足够大的空间<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ccf5e54efbd741b0a79948cc0b91633a.png\"/></p> </li><li> <p>情况1 当是情况1 的时候，要扩展内存就直接原有内存之后直接追加空间，原来空间的数据不发生变化。</p> </li><li> <p>情况2 当 是情况2<br/> 的时候，原有空间之后没有足够多的空间时，扩展的方法是：在堆空间上另找一个合适大小的连续空间来 使用。这样函数返回的是一个新的内存地址。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\55075e74d91941e288c9778ab342c42c.png\"/></p> </li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//动态申请</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//申请失败</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"malloc file\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//申请成功</span>\n\t\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>pt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//申请成功</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pt <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//p去维护新的空间</span>\n\t\tp <span class=\"token operator\">=</span> pt<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">//初始化后面的10块空间</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//打印</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token comment\">//如果ptr开辟失败，p还是维护自己原本的空间</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\n\t\t<span class=\"token comment\">//打印</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">//释放空间，指针置空，防止内存泄漏和野指针</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>由于上述的两种情况，realloc函数的使用就要注意一些。</p>\n<h1><a id=\"_220\"></a>常见的动态内存错误</h1>\n<h2><a id=\"NULL_221\"></a>对NULL指针的解引用操作</h2>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>INT_MAX<span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//如果p的值是NULL，就会有问题</span>\n\t <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>未加检查，如果动态内存开辟失败返回的是NULL指针，对空指针解引用程序会崩，并且free也不会工作</p>\n</blockquote>\n<h2><a id=\"_233\"></a>对动态开辟空间的越界访问</h2>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//开辟失败</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> p<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//开辟成功</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token operator\">*</span>p<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//*(p + i) = i;   p自己没有变</span>\n\t\t<span class=\"token comment\">//p[i] = i;  等价上面</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//释放</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>这里的p++，使得p的指向发生了变化，他已经不再指向这块内存的起始地址了，跑远了，修正方法很简单*(p + i) = i，p自身并没有改变，只是p的步子越迈越大</p>\n</blockquote>\n<h2><a id=\"free_261\"></a>对非动态开辟内存使用free释放</h2>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//ok?</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>错误，free只能释放动态申请的内存</p>\n</blockquote>\n<h2><a id=\"free_271\"></a>使用free释放一块动态开辟内存的一部分</h2>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//p不再指向动态内存的起始位置</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>只是从第二块空间开始释放的<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a10c618507984b5e9237c60c8c958914.png\"/><br/> 前面这块空间并没有别释放，就会导致内存泄漏</p>\n</blockquote>\n<h2><a id=\"_285\"></a>对同一块动态内存多次释放</h2>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//错误写法，同一块内存不能释放多次</span>\n <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//重复释放</span>\n\n<span class=\"token comment\">//正确释放</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//p 为NULL free就不会执行</span>\n p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>同一块内存不能多次释放</p>\n</blockquote>\n<h2><a id=\"_304\"></a>动态开辟内存忘记释放（内存泄漏）</h2>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> p<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>test函数被调用完内存并未归还给操作系统，这是因为动态申请的内存没有释放free§ 后再将p置空</p>\n</blockquote>\n<h1><a id=\"_323\"></a>几个经典的笔试题</h1>\n<h1><a id=\"1_324\"></a>题目1：</h1>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">GetMemory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">GetMemory</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>看这一组，代码看上去有一种迷惑行为，先将str置空指针，再调用GetMemory(char *p)函数接受这个空指针，此时指针变量p也是指向空，值得一提的是一级指针传递给一级指针，形参是实参的一份临时拷贝，p的改变并不会影响外面的str，所以str还是一个空指针，<br/> strcpy(str, “hello world”);将hello world拷贝给str会对空指针解引用这就会导致程序崩溃，</p>\n</blockquote>\n<p>解决方案：二级指针</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">GetMemory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token comment\">//传址调用，改变外面的str指向</span>\n <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">GetMemory</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>传二级指针，里面的p的改变就会影响外面的str，strcpy(str, “hello world”);对str解引用就可行，</p>\n</blockquote>\n<p>解决方案：返回指针</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">GetMemory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n str <span class=\"token operator\">=</span> <span class=\"token function\">GetMemory</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>利用返回值改变str的指向，str不再指向空，</p>\n</blockquote>\n<h1><a id=\"_373\"></a>题目二</h1>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">GetMemory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">char</span> p<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n str <span class=\"token operator\">=</span> <span class=\"token function\">GetMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>str = GetMemory(); 这行代码是在调用GetMemory，当GetMemory调用完了就会返回一个指针变量，他是一个局部变量，局部变量出了作用域就会被销毁了，此时的GetMemory函数中的p在返回回来就是一个野指针了，野指针指向哪里是不确定的，当在打印的时候就会是随机值</p>\n</blockquote>\n<h2><a id=\"3_387\"></a>题目3：</h2>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">GetMemory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">GetMemory</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>str<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>这段代码并不存在导致程序崩溃的问题，但是有一个内存泄漏的问题，str指向的内存并没有被释放</p>\n</blockquote>\n<h2><a id=\"4_402\"></a>题目4：</h2>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>很明显这段程序的错误就是str指向的空间被释放了，但是str并没有置为空指针，但是str还是能够记得上一次存放的地址，继续将world存放进这段内存中，打印出来的是word，</p>\n</blockquote>\n<h1><a id=\"CC_418\"></a>C/C++程序的内存开辟</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0de13d6a6f3b4e20b82c03f2ee02201b.png\"/></p>\n<ul><li>C/C++程序内存分配的几个区域：</li><li>栈区（stack）：在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些 存储单元自动被释放。栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有 限。<br/> 栈区主要存放运行函数而分配的局部变量、函数参数、返回数据、返回地址等。</li><li>堆区（heap）：一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收 。分配方式类似 于链表。</li><li>数据段（静态区）（static）存放全局变量、静态数据。程序结束后由系统释放。</li><li>代码段：存放函数体（类成员函数和全局函数）的二进制代码</li></ul>\n<blockquote>\n<p>1、实际上普通的局部变量是在栈区分配空间的，栈区的特点是在上面创建的变量出了作用域就销毁。<br/> 2、但是被static修饰的变量存放在数据段（静态区），数据段的特点是在上面创建的变量，直到程序结束才销毁 所以生命周期变长。</p>\n</blockquote>\n<h1><a id=\"_431\"></a>柔性数组</h1>\n<ul><li>C99 中，结构中的最 后一个元素允许是未知大小的数组，这就叫做『柔性数组』成员</li></ul>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">st_type</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//柔性数组成员</span>\n<span class=\"token punctuation\">}</span>type_a<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>有些编译器会报错无法编译可以改成：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">st_type</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//柔性数组成员</span>\n<span class=\"token punctuation\">}</span>type_a<span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"_451\"></a>柔性数组的特点</h2>\n<p>结构中的柔性数组成员前面必须至少一个其他成员。<br/> sizeof 返回的这种结构大小不包括柔性数组的内存。<br/> 包含柔性数组成员的结构用malloc ()函数进行内存的动态分配，并且分配的内存应该大于结构的大小，以适应<br/> 柔性数组的预期大小。</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">st_type</span>\n<span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//柔性数组成员</span>\n<span class=\"token punctuation\">}</span>type_a<span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>type_a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//输出的是4</span>\n</code></pre>\n<blockquote>\n<p>首先可以看到这是一次包含柔性数组的结构体声明，并创建了一个结构体变量，包含柔性数组的结构体也存在内存对齐，并且在sizeof计算的时候，结构大小不包括柔性数组的内存。</p>\n</blockquote>\n<h2><a id=\"_467\"></a>柔性数组的使用</h2>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">st_type</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//柔性数组成员</span>\n<span class=\"token punctuation\">}</span>type_a<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">st_type</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">st_type</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">st_type</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//开辟失败</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//申请成功</span>\n\t<span class=\"token keyword\">else</span> \n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//初始化结构体成员</span>\n\t\tp<span class=\"token operator\">-&gt;</span>i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tp<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//打印</span>\n\t\ti <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token comment\">//想到扩容怎么办,注意这里扩容的话要扩容的是整个结构体大小，并不是只扩容数组的大小</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">st_type</span> <span class=\"token operator\">*</span>ptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">st_type</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">st_type</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//开辟成功，ptr去维护新的空间，旧的空间被释放</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ptr <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tptr<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tj <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> ptr<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//开辟失败，p继续维护旧的空间</span>\n\t<span class=\"token keyword\">else</span> \n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"扩容失败\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//p赋值给ptr</span>\n\t\tptr <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">//释放ptr所指向的内存空间,并将指针置空</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tptr <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<ul><li>使用柔性数组的好处在于不需要二次分配内存，如果我们把结构体的内存以及其成员要的内存一次性分配好了，并返回给用户一个结构体<br/> 指针，用户做一次free就可以把所有的内存也给释放掉。</li><li>连续的内存有益于提高访问速度，也有益于减少内存碎片(频繁malloc的次数多了也是会有内存消耗的)。</li></ul>\n<h2><a id=\"_538\"></a>总结：</h2>\n<p>柔性数组就是一个结构体的最后一个成员，可以是一个未知大小的数组，这个数组你想要让他变大变小可以配合着动态内存开辟来一起使用，这个时候这个成员就被称为柔性数组成员<br/> 完<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\14bcb28fcd6a47cea8315857491a0af1.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-09-25 11:16:05", "summary": "在这里插入图片描述目录为什么存在动态内存分配动态内存函数的介绍和函数的注意事项举例一举例二正确使用常见的动态内存错误对指针的解引用操作对动态开辟空间的越界访问对非动态开辟内存使用释放使用释放一块动态开"}