{"blogid": "123163479", "writerAge": "码龄6年", "writerBlogNum": "193", "writerCollect": "5263", "writerComment": "4758", "writerFan": "8887", "writerGrade": "7级", "writerIntegral": "13586", "writerName": "小王曾是少年", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123163479.jpg", "writerRankTotal": "774", "writerRankWeekly": "101", "writerThumb": "3798", "writerVisitNum": "358592", "blog_read_count": "1153", "blog_time": "于 2022-09-02 19:23:48 发布", "blog_title": "RocketMQ 消费者监听模型 解析——图解、源码级解析", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>🍊 Java学习：<a href=\"https://blog.csdn.net/HNU_Csee_wjw/article/details/108082426\">Java从入门到精通总结</a><br/> <br/></p>\n<p>🍊 深入浅出RocketMQ设计思想：<a href=\"https://blog.csdn.net/hnu_csee_wjw/category_11789299.html\">深入浅出RocketMQ设计思想</a><br/> <br/></p>\n<p>🍊 绝对不一样的职场干货：<a href=\"https://blog.csdn.net/hnu_csee_wjw/category_11693862.html\">大厂最佳实践经验指南</a><br/> <br/><br/> 📆 最近更新：2022年9月1日<br/> <br/></p>\n<p>🍊 个人简介：通信工程本硕💪、Java程序员🌕。做过科研paper，发过专利，优秀的程序员不应该只是CRUD<br/> <br/></p>\n<p>🍊 点赞 👍 收藏 ⭐留言 📝 都是我最大的动力！</p>\n</blockquote>\n<hr/>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_30\">消息接收模型</a></li><li><a href=\"#_42\">消费端监听模型</a></li><li><ul><li><a href=\"#_43\">监听器设计模式</a></li><li><a href=\"#_50\">注册监听器</a></li><li><a href=\"#_83\">启动消费者</a></li><li><a href=\"#ConsumeMessageConcurrentlyService_207\">`ConsumeMessageConcurrentlyService`类</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<p>前面已经把RocketMQ发送消息的主要流程梳理了一遍，接下来我将介绍消费者消费消息的源码及流程，主要包含但不仅限于一下内容：</p>\n<ul><li>消息消费模式</li><li>消息消费的流程</li><li>消费者负载均衡算法</li><li>消费失败如何进行重试</li><li>消息如何进行重新投递</li><li>…</li></ul>\n<h1><a id=\"_30\"></a>消息接收模型</h1>\n<p>Consumer消费者组消费消息时，受限从注册中心里获取Broker服务器中<code>Topic</code>的队列的地址，然后根据负载均衡算法进行消费。</p>\n<p>RocketMQ的消息推送方式有拉模式和推模式，但实际上推模式的底层也是用的拉模式。</p>\n<p>消费者组会将所有MQ分均分配给所有的组内消费者，同一个组内的消费者不能同时监听多个<code>Topic</code>，否则可能由于负载均衡算法是的部分消息无法被消费。</p>\n<p>如果消息消费失败则会进行重试，默认是重试6次，如果还是没有消费成功的话消息就会被放入死信队列。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7ebddfb1fc4a41ab84b1b03b09f5ad89.png\"/><br/> <br/><br/></p>\n<h1><a id=\"_42\"></a>消费端监听模型</h1>\n<h2><a id=\"_43\"></a>监听器设计模式</h2>\n<p>RocketMQ采用了设计模式中的监听器设计模式，类与类之间的继承关系如图：<br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\53484da853b8423497b27a720d17134e.png\"/><br/> <code>ConsumeMessageConcurrentlyService</code>就是监听器的执行类</p>\n<br/>\n<h2><a id=\"_50\"></a>注册监听器</h2>\n<p>编写自定义消费端并绑定监听器的代码如下：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 创建消费者对象，设置组名</span>\n    <span class=\"token class-name\">DefaultMQPushConsumer</span> consumer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultMQPushConsumer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Group A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 订阅消息主题target_topic下的消息，*表示所有消息</span>\n    consumer<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"target_topic\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 设置从上一次的位点开始消费</span>\n    consumer<span class=\"token punctuation\">.</span><span class=\"token function\">setConsumeFromWhere</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumeFromWhere</span><span class=\"token punctuation\">.</span>CONSUME_FROM_FIRST_OFFSET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 注册监听器</span>\n    consumer<span class=\"token punctuation\">.</span><span class=\"token function\">registerMessageListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageListenerConcurrently</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 消费消息的方法</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">ConsumeConcurrentlyStatus</span> <span class=\"token function\">consumeMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MessageExt</span><span class=\"token punctuation\">&gt;</span></span> msgs<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ConsumeConcurrentlyContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" Receive New Messages: \"</span> <span class=\"token operator\">+</span> msgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">ConsumeConcurrentlyStatus</span><span class=\"token punctuation\">.</span>CONSUME_SUCCESS<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 开启消费者</span>\n    consumer<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Consumer Started\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>步骤如下：</strong></p>\n<ol><li>创建消费者，指定所在的组</li><li>订阅主题<code>target_topic</code>，并消费所有消息</li><li>设置从上一次消费到的位置继续进行消费</li><li>注册监听器<code>MessageListenerConcurrently</code>，定义消费消息的逻辑<code>consumeMessage</code></li><li>启动消费者</li></ol>\n<br/>\n<h2><a id=\"_83\"></a>启动消费者</h2>\n<p>Consumer注册完监听器后，此时还没有开始消费，当Consumer调用了start方法之后才开始进行消费前的各种准备工作。</p>\n<pre><code class=\"prism language-java\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MQClientException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serviceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">case</span> CREATE_JUST<span class=\"token operator\">:</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the consumer [{}] start beginning. messageModel={}, isUnitMode={}\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQPushConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">getConsumerGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQPushConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">getMessageModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQPushConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">isUnitMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serviceState <span class=\"token operator\">=</span> <span class=\"token class-name\">ServiceState</span><span class=\"token punctuation\">.</span>START_FAILED<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 检查配置</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 复制订阅数据</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">copySubscription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 将InstanceName设置为pid（数字）</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQPushConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">getMessageModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">MessageModel</span><span class=\"token punctuation\">.</span>CLUSTERING<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQPushConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">changeInstanceNameToPID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mQClientFactory <span class=\"token operator\">=</span> <span class=\"token class-name\">MQClientManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getOrCreateMQClientInstance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQPushConsumer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rpcHook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 设置负载均衡的各种参数</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rebalanceImpl<span class=\"token punctuation\">.</span><span class=\"token function\">setConsumerGroup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQPushConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">getConsumerGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 默认为集群模式，每条消息被一个组内的某个消费者消费掉</span>\n                <span class=\"token comment\">// 还有广播模式，每条消息被同一个组内的所有消费者消费一次</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rebalanceImpl<span class=\"token punctuation\">.</span><span class=\"token function\">setMessageModel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQPushConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">getMessageModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 默认是均匀分配</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rebalanceImpl<span class=\"token punctuation\">.</span><span class=\"token function\">setAllocateMessageQueueStrategy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQPushConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">getAllocateMessageQueueStrategy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rebalanceImpl<span class=\"token punctuation\">.</span><span class=\"token function\">setmQClientFactory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mQClientFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 封装拉取消息的API</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pullAPIWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PullAPIWrapper</span><span class=\"token punctuation\">(</span>\n                        mQClientFactory<span class=\"token punctuation\">,</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQPushConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">getConsumerGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">isUnitMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pullAPIWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">registerFilterMessageHook</span><span class=\"token punctuation\">(</span>filterMessageHookList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 存储消费进度。集群模式下消费进度保存在Broker上，同一组内的消费者要共享消费进度，广播模式下保存在消费者本地</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQPushConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">getOffsetStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>offsetStore <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQPushConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">getOffsetStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQPushConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">getMessageModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">case</span> BROADCASTING<span class=\"token operator\">:</span>\n                            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>offsetStore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LocalFileOffsetStore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mQClientFactory<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQPushConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">getConsumerGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">case</span> CLUSTERING<span class=\"token operator\">:</span>\n                            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>offsetStore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RemoteBrokerOffsetStore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mQClientFactory<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQPushConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">getConsumerGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQPushConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">setOffsetStore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>offsetStore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>offsetStore<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 根据顺序监听还是并发监听创建相应的Service</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMessageListenerInner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MessageListenerOrderly</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>consumeOrderly <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>consumeMessageService <span class=\"token operator\">=</span>\n                            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConsumeMessageOrderlyService</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageListenerOrderly</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMessageListenerInner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMessageListenerInner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MessageListenerConcurrently</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>consumeOrderly <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>consumeMessageService <span class=\"token operator\">=</span>\n                            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConsumeMessageConcurrentlyService</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageListenerConcurrently</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMessageListenerInner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>consumeMessageService<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 检查是否注册成功，如果之前有重复的group名称则失败</span>\n                <span class=\"token keyword\">boolean</span> registerOK <span class=\"token operator\">=</span> mQClientFactory<span class=\"token punctuation\">.</span><span class=\"token function\">registerConsumer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQPushConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">getConsumerGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>registerOK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serviceState <span class=\"token operator\">=</span> <span class=\"token class-name\">ServiceState</span><span class=\"token punctuation\">.</span>CREATE_JUST<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>consumeMessageService<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span>defaultMQPushConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">getAwaitTerminationMillisWhenShutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MQClientException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The consumer group[\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQPushConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">getConsumerGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token operator\">+</span> <span class=\"token string\">\"] has been created before, specify another name please.\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">FAQUrl</span><span class=\"token punctuation\">.</span><span class=\"token function\">suggestTodo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FAQUrl</span><span class=\"token punctuation\">.</span>GROUP_NAME_DUPLICATE_URL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                            <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                mQClientFactory<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the consumer [{}] start OK.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQPushConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">getConsumerGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 设置服务状态</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serviceState <span class=\"token operator\">=</span> <span class=\"token class-name\">ServiceState</span><span class=\"token punctuation\">.</span>RUNNING<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> RUNNING<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">case</span> START_FAILED<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">case</span> SHUTDOWN_ALREADY<span class=\"token operator\">:</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MQClientException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The PushConsumer service state not OK, maybe started once, \"</span>\n                        <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serviceState\n                        <span class=\"token operator\">+</span> <span class=\"token class-name\">FAQUrl</span><span class=\"token punctuation\">.</span><span class=\"token function\">suggestTodo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FAQUrl</span><span class=\"token punctuation\">.</span>CLIENT_SERVICE_NOT_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 从注册中心获取TopicRouteData，更新TopicPublishInfo和MQ（周期性调用）</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateTopicSubscribeInfoWhenSubscriptionChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mQClientFactory<span class=\"token punctuation\">.</span><span class=\"token function\">checkClientInBroker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 向TopicRouteData中所有的Broker发送心跳，注册Consumer/Producer信息到Broker上（周期性调用）</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mQClientFactory<span class=\"token punctuation\">.</span><span class=\"token function\">sendHeartbeatToAllBrokerWithLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 唤醒MQ均衡服务，之后开始拉区消息</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mQClientFactory<span class=\"token punctuation\">.</span><span class=\"token function\">rebalanceImmediately</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>上面代码的执行流程如下：</strong></p>\n<p><font color=\"#33aaff\">1. 先判断服务状态，Consumer是否处于运行状态</font></p>\n<ul><li><code>CREATE_JUST</code>：Consumer刚创建，还没开始运行</li><li><code>RUNNING</code>：Consumer正在运行</li><li><code>SHUTDOWN_ALREADY</code>：Consumer已经关闭</li><li><code>START_FAILED</code>：Consumer启动失败</li></ul>\n<p><font color=\"#33aaff\">2. 如果Consumer刚刚创建，则进行一系列检查工作</font></p>\n<ul><li>如果是刚刚创建Consumer，则先把状态位设置为<code>START_FAILED</code>，等初始化流程执行完毕后再设置为<code>RUNNING</code></li><li>检查接收消息相关配置，如：组名格式是否正确等等</li><li>获取Consumer的唯一标识，格式为<code>ip@instanceName</code></li><li>设置负载均衡消费模式，指定负载均衡的组、消息消费的策略</li><li>对<font color=\"#33aa33\">拉取消息API</font>进行封装</li><li>创建消费进度处理器，集群模式下消费进度应该保存在Broker上，组内的消费者要共享进度、广播模式下的消费进度保存在Consumer</li><li>根据监听时顺序模式还是并发模式来创建相应的<code>ConsumerService</code>。消费就是这个类的实例来实现的</li></ul>\n<p><br/><br/></p>\n<h2><a id=\"ConsumeMessageConcurrentlyService_207\"></a><code>ConsumeMessageConcurrentlyService</code>类</h2>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ConsumeMessageOrderlyService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DefaultMQPushConsumerImpl</span> defaultMQPushConsumerImpl<span class=\"token punctuation\">,</span>\n                                    <span class=\"token class-name\">MessageListenerOrderly</span> messageListener<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 设置消息消费者对象</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQPushConsumerImpl <span class=\"token operator\">=</span> defaultMQPushConsumerImpl<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 设置注册监听器对象</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messageListener <span class=\"token operator\">=</span> messageListener<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 获取消息消费者</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQPushConsumer <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQPushConsumerImpl<span class=\"token punctuation\">.</span><span class=\"token function\">getDefaultMQPushConsumer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 获取消息消费者所在的组</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>consumerGroup <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQPushConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">getConsumerGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 创建消费者队列</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>consumeRequestQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 消费者线程池</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>consumeExecutor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQPushConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">getConsumeThreadMin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQPushConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">getConsumeThreadMax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>MILLISECONDS<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>consumeRequestQueue<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadFactoryImpl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ConsumeMessageThread_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scheduledExecutorService <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadScheduledExecutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadFactoryImpl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ConsumeMessageScheduledThread_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>消费者消费消息最终就是指定<code>ConsumeMessageConcurrentlyService</code>来进行消费：</p>\n<ul><li><code>MessageListenerOrderly</code>顺序消息监听器，使用<code>ConsumeMessageOrderlyService</code>对象来进行消息消费</li><li><code>MessageListenerConcurrently</code>并发消息监听器使用<code>ConsumeMessageConcurrentlyService</code>对象进行消息消费</li></ul>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-09-02 19:23:48", "summary": "学习：从入门到精通总结深入浅出设计思想：深入浅出设计思想绝对不一样的职场干货：大厂最佳实践经验指南最近更新：年月日个人简介：通信工程本硕、程序员。做过科研，发过专利，优秀的程序员不应该只是点赞收藏留言"}