{"blogid": "126316335", "writerAge": "码龄1年", "writerBlogNum": "54", "writerCollect": "254", "writerComment": "18", "writerFan": "298", "writerGrade": "3级", "writerIntegral": "673", "writerName": "是九九不是酒酒", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126316335.jpg", "writerRankTotal": "25301", "writerRankWeekly": "718", "writerThumb": "77", "writerVisitNum": "33009", "blog_read_count": "13318", "blog_time": "已于 2022-08-17 15:41:14 修改", "blog_title": "微信支付系统", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"-toc\" style=\"margin-left:0px;\"></p>\n<p id=\"1.%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E7%9A%84%E6%B5%81%E7%A8%8B-toc\" style=\"margin-left:0px;\"><a href=\"#1.%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E7%9A%84%E6%B5%81%E7%A8%8B\">1.微信支付的流程</a></p>\n<p id=\"2.%E5%BE%AE%E4%BF%A1%E7%9A%84%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3-toc\" style=\"margin-left:0px;\"><a href=\"#2.%E5%BE%AE%E4%BF%A1%E7%9A%84%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3\">2.微信的接口文档</a></p>\n<p id=\"3.%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AAspring-boot%E7%9A%84%E9%A1%B9%E7%9B%AE-toc\" style=\"margin-left:0px;\"><a href=\"#3.%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AAspring-boot%E7%9A%84%E9%A1%B9%E7%9B%AE\">3.新建一个spring-boot的项目</a></p>\n<p id=\"4.%E5%AF%BC%E5%85%A5%E9%9C%80%E8%A6%81%E7%9A%84%E4%BE%9D%E8%B5%96-toc\" style=\"margin-left:0px;\"><a href=\"#4.%E5%AF%BC%E5%85%A5%E9%9C%80%E8%A6%81%E7%9A%84%E4%BE%9D%E8%B5%96\">4.导入需要的依赖</a></p>\n<p id=\"5.%E9%85%8D%E7%BD%AEapplication%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:0px;\"><a href=\"#5.%E9%85%8D%E7%BD%AEapplication%E6%96%87%E4%BB%B6\">5.配置application文件</a></p>\n<p id=\"6.%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAHttpclient%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB-%E9%BB%98%E8%AE%A4%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%9B%E8%A1%8C%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8-toc\" style=\"margin-left:0px;\"><a href=\"#6.%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAHttpclient%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB-%E9%BB%98%E8%AE%A4%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%9B%E8%A1%8C%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8\">6.创建一个Httpclient的工具类-默认浏览器进行远程调用</a></p>\n<p id=\"7.%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%99%A8--%E5%B8%AE%E6%88%91%E4%BB%AC%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%B1%BB%2C%E6%8E%A5%E5%8F%A3%E7%AD%89-toc\" style=\"margin-left:0px;\"><a href=\"#7.%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%99%A8--%E5%B8%AE%E6%88%91%E4%BB%AC%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%B1%BB%2C%E6%8E%A5%E5%8F%A3%E7%AD%89\">7.自动生成器--帮我们自动生成类,接口等</a></p>\n<p id=\"8.%20%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:0px;\"><a href=\"#8.%20%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81\">8. 前端代码</a></p>\n<p id=\"8.1.%E6%96%B0%E5%BB%BAvue%E9%A1%B9%E7%9B%AE-toc\" style=\"margin-left:40px;\"><a href=\"#8.1.%E6%96%B0%E5%BB%BAvue%E9%A1%B9%E7%9B%AE\">8.1.新建vue项目</a></p>\n<p id=\"8.1.1.%E6%89%93%E5%BC%80cmd%E5%91%BD%E4%BB%A4%E7%AA%97%E5%8F%A3%2C%E8%BE%93%E5%85%A5%E5%91%BD%E4%BB%A4%E6%89%93%E5%BC%80%E7%AA%97%E5%8F%A3-toc\" style=\"margin-left:80px;\"><a href=\"#8.1.1.%E6%89%93%E5%BC%80cmd%E5%91%BD%E4%BB%A4%E7%AA%97%E5%8F%A3%2C%E8%BE%93%E5%85%A5%E5%91%BD%E4%BB%A4%E6%89%93%E5%BC%80%E7%AA%97%E5%8F%A3\">8.1.1.打开cmd命令窗口,输入命令打开窗口</a></p>\n<p id=\"8.1.2.%20%E6%96%B0%E5%BB%BA-toc\" style=\"margin-left:80px;\"><a href=\"#8.1.2.%20%E6%96%B0%E5%BB%BA\">8.1.2. 新建</a></p>\n<p id=\"8.2.%E5%AE%89%E8%A3%85element%E6%8F%92%E4%BB%B6%E5%92%8Caxios%E7%9A%84%E4%BE%9D%E8%B5%96(%E7%9C%81%E7%95%A5)-toc\" style=\"margin-left:40px;\"><a href=\"#8.2.%E5%AE%89%E8%A3%85element%E6%8F%92%E4%BB%B6%E5%92%8Caxios%E7%9A%84%E4%BE%9D%E8%B5%96%28%E7%9C%81%E7%95%A5%29\">8.2.安装element插件和axios的依赖(省略)</a></p>\n<p id=\"8.3.%E5%BC%95%E5%85%A5axios%E5%92%8C%E8%AE%BE%E7%BD%AEaxios%E5%9F%BA%E7%A1%80%E8%B7%AF%E5%BE%84-toc\" style=\"margin-left:40px;\"><a href=\"#8.3.%E5%BC%95%E5%85%A5axios%E5%92%8C%E8%AE%BE%E7%BD%AEaxios%E5%9F%BA%E7%A1%80%E8%B7%AF%E5%BE%84\">8.3.引入axios和设置axios基础路径</a></p>\n<p id=\"8.4.%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2-toc\" style=\"margin-left:40px;\"><a href=\"#8.4.%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2\">8.4.前端页面</a></p>\n<p id=\"9.%E6%A0%B9%E6%8D%AE%E8%AE%A2%E5%8D%95%E5%8F%B7%E5%88%9B%E5%BB%BA%E4%BA%8C%E7%BB%B4%E7%A0%81--%E5%90%8E%E7%AB%AF-toc\" style=\"margin-left:0px;\"><a href=\"#9.%E6%A0%B9%E6%8D%AE%E8%AE%A2%E5%8D%95%E5%8F%B7%E5%88%9B%E5%BB%BA%E4%BA%8C%E7%BB%B4%E7%A0%81--%E5%90%8E%E7%AB%AF\">9.根据订单号创建二维码--后端</a></p>\n<p id=\"9.1.controller%E5%B1%82-toc\" style=\"margin-left:40px;\"><a href=\"#9.1.controller%E5%B1%82\">9.1.controller层</a></p>\n<p id=\"9.2.Iservice-toc\" style=\"margin-left:40px;\"><a href=\"#9.2.Iservice\">9.2.Iservice</a></p>\n<p id=\"9.3.service%E5%B1%82-toc\" style=\"margin-left:40px;\"><a href=\"#9.3.service%E5%B1%82\">9.3.service层</a></p>\n<p id=\"9.4.%E5%AE%9E%E4%BD%93%E7%B1%BB-toc\" style=\"margin-left:40px;\"><a href=\"#9.4.%E5%AE%9E%E4%BD%93%E7%B1%BB\">9.4.实体类</a></p>\n<p id=\"9.4.1.CommonResult-toc\" style=\"margin-left:80px;\"><a href=\"#9.4.1.CommonResult\">9.4.1.CommonResult</a></p>\n<p id=\"9.4.2.Order-toc\" style=\"margin-left:80px;\"><a href=\"#9.4.2.Order\">9.4.2.Order</a></p>\n<p id=\"10.%E6%A0%B9%E6%8D%AE%E8%AE%A2%E5%8D%95%E7%8A%B6%E6%80%81%E6%9F%A5%E8%AF%A2%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E6%83%85%E5%86%B5-toc\" style=\"margin-left:0px;\"><a href=\"#10.%E6%A0%B9%E6%8D%AE%E8%AE%A2%E5%8D%95%E7%8A%B6%E6%80%81%E6%9F%A5%E8%AF%A2%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E6%83%85%E5%86%B5\">10.根据订单状态查询微信支付情况</a></p>\n<p id=\"10.1.%E5%89%8D%E7%AB%AF-toc\" style=\"margin-left:40px;\"><a href=\"#10.1.%E5%89%8D%E7%AB%AF\">10.1.前端</a></p>\n<p id=\"10.2.%E5%90%8E%E7%AB%AF-toc\" style=\"margin-left:40px;\"><a href=\"#10.2.%E5%90%8E%E7%AB%AF\">10.2.后端</a></p>\n<p id=\"10.2.1.controller-toc\" style=\"margin-left:80px;\"><a href=\"#10.2.1.controller\">10.2.1.controller</a></p>\n<p id=\"10.2.2.Iservice-toc\" style=\"margin-left:80px;\"><a href=\"#10.2.2.Iservice\">10.2.2.Iservice</a></p>\n<p id=\"10.2.3.service%E5%B1%82-toc\" style=\"margin-left:80px;\"><a href=\"#10.2.3.service%E5%B1%82\">10.2.3.service层</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 id=\"1.%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E7%9A%84%E6%B5%81%E7%A8%8B\">1.微信支付的流程</h1>\n<p><img alt=\"\" height=\"652\" src=\"..\\..\\static\\image\\4c2cecdbf6924910933848db11ba540e.png\" width=\"1200\"/></p>\n<h1 id=\"2.%E5%BE%AE%E4%BF%A1%E7%9A%84%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3\">2.微信的接口文档</h1>\n<p><a href=\"https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_1\" title=\"https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_1\">https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_1</a></p>\n<h1 id=\"3.%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AAspring-boot%E7%9A%84%E9%A1%B9%E7%9B%AE\">3.新建一个spring-boot的项目</h1>\n<p><img alt=\"\" height=\"556\" src=\"..\\..\\static\\image\\74c24dd9faef4246b2861dd0bc84a795.png\" width=\"463\"/></p>\n<h1 id=\"4.%E5%AF%BC%E5%85%A5%E9%9C%80%E8%A6%81%E7%9A%84%E4%BE%9D%E8%B5%96\">4.导入需要的依赖</h1>\n<pre><code class=\"language-html\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;2.3.12.RELEASE&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n    &lt;groupId&gt;springboot&lt;/groupId&gt;\n    &lt;artifactId&gt;demo&lt;/artifactId&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n    &lt;name&gt;WeChatPay&lt;/name&gt;\n    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;1.8&lt;/java.version&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n        &lt;!--微信需要的依赖--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.github.wxpay&lt;/groupId&gt;\n            &lt;artifactId&gt;wxpay-sdk&lt;/artifactId&gt;\n            &lt;version&gt;0.0.3&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!--java端发送的请求  在java端远程模拟浏览器能访问微信的接口--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;repMaven.org.apache.httpcomponents&lt;/groupId&gt;\n            &lt;artifactId&gt;httpclient&lt;/artifactId&gt;\n            &lt;version&gt;4.5.3&lt;/version&gt;\n        &lt;/dependency&gt;\n        \n        &lt;dependency&gt;\n            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;\n            &lt;version&gt;3.5.2&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.freemarker&lt;/groupId&gt;\n            &lt;artifactId&gt;freemarker&lt;/artifactId&gt;\n            &lt;version&gt;2.3.31&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!--mybatis-plus的依赖--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;3.5.2&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n            &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;1.2.8&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!--swagger的依赖--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;\n            &lt;artifactId&gt;swagger-bootstrap-ui&lt;/artifactId&gt;\n            &lt;version&gt;1.9.6&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!--spring的依赖--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.spring4all&lt;/groupId&gt;\n            &lt;artifactId&gt;swagger-spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;1.9.1.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;2.2.2&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n                &lt;configuration&gt;\n                    &lt;excludes&gt;\n                        &lt;exclude&gt;\n                            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n                            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n                        &lt;/exclude&gt;\n                    &lt;/excludes&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre>\n<h1 id=\"5.%E9%85%8D%E7%BD%AEapplication%E6%96%87%E4%BB%B6\">5.配置application文件</h1>\n<pre><code class=\"language-html\">server.port=8888\nspring.datasource.druid.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.datasource.username=root\nspring.datasource.druid.password=grt081141\nspring.datasource.druid.url=jdbc:mysql://localhost:3306/wechatpay?serverTimezone=Asia/Shanghai\n\n#微信app的id 商家的id 秘钥--我们自己没有办法申请，因为申请需要营业执照\nweixin.appid=wx8087d8149331d27c\nweixin.mch_id=1532192611\nweixin.api_key=Cc158380629071583806290715838062</code></pre>\n<h1 id=\"6.%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAHttpclient%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB-%E9%BB%98%E8%AE%A4%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%9B%E8%A1%8C%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8\">6.创建一个Httpclient的工具类-默认浏览器进行远程调用</h1>\n<pre><code class=\"language-java\">package springboot.util;\n\n\nimport org.apache.http.Consts;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.*;\nimport org.apache.http.conn.ssl.SSLConnectionSocketFactory;\nimport org.apache.http.conn.ssl.SSLContextBuilder;\nimport org.apache.http.conn.ssl.TrustStrategy;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.util.EntityUtils;\n\nimport javax.net.ssl.SSLContext;\nimport java.io.IOException;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.text.ParseException;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * http请求客户端\n * \n * @author 必须引入httpclient的依赖：在java端模拟浏览器的效果。\n * \n */\npublic class HttpClient {\n   private String url;\n   private Map&lt;String, String&gt; param;\n   private int statusCode;\n   private String content;\n   private String xmlParam;\n   private boolean isHttps;\n   public boolean isHttps() {\n      return isHttps;\n   }\n   public void setHttps(boolean isHttps) {\n      this.isHttps = isHttps;\n   }\n   public String getXmlParam() {\n      return xmlParam;\n   }\n   public void setXmlParam(String xmlParam) {\n      this.xmlParam = xmlParam;\n   }\n   public HttpClient(String url, Map&lt;String, String&gt; param) {\n      this.url = url;\n      this.param = param;\n   }\n   public HttpClient(String url) {\n      this.url = url;\n   }\n   public void setParameter(Map&lt;String, String&gt; map) {\n      param = map;\n   }\n   public void addParameter(String key, String value) {\n      if (param == null)\n         param = new HashMap&lt;String, String&gt;();\n      param.put(key, value);\n   }\n   public void post() throws ClientProtocolException, IOException {\n      HttpPost http = new HttpPost(url);\n      setEntity(http);\n      execute(http);\n   }\n   public void put() throws ClientProtocolException, IOException {\n      HttpPut http = new HttpPut(url);\n      setEntity(http);\n      execute(http);\n   }\n   public void get() throws ClientProtocolException, IOException {\n      if (param != null) {\n         StringBuilder url = new StringBuilder(this.url);\n         boolean isFirst = true;\n         for (String key : param.keySet()) {\n            if (isFirst)\n               url.append(\"?\");\n            else\n               url.append(\"&amp;\");\n            url.append(key).append(\"=\").append(param.get(key));\n         }\n         this.url = url.toString();\n      }\n      HttpGet http = new HttpGet(url);\n      execute(http);\n   }\n   /**\n    * set http post,put param\n    */\n   private void setEntity(HttpEntityEnclosingRequestBase http) {\n      if (param != null) {\n         List&lt;NameValuePair&gt; nvps = new LinkedList&lt;NameValuePair&gt;();\n         for (String key : param.keySet())\n            nvps.add(new BasicNameValuePair(key, param.get(key))); // 参数\n         http.setEntity(new UrlEncodedFormEntity(nvps, Consts.UTF_8)); // 设置参数\n      }\n      if (xmlParam != null) {\n         http.setEntity(new StringEntity(xmlParam, Consts.UTF_8));\n      }\n   }\n   private void execute(HttpUriRequest http) throws ClientProtocolException,\n         IOException {\n      CloseableHttpClient httpClient = null;\n      try {\n         if (isHttps) {\n            SSLContext sslContext = new SSLContextBuilder()\n                  .loadTrustMaterial(null, new TrustStrategy() {\n                     // 信任所有\n                     public boolean isTrusted(X509Certificate[] chain,\n                           String authType)\n                           throws CertificateException {\n                        return true;\n                     }\n                  }).build();\n            SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(\n                  sslContext);\n            httpClient = HttpClients.custom().setSSLSocketFactory(sslsf)\n                  .build();\n         } else {\n            httpClient = HttpClients.createDefault();\n         }\n         CloseableHttpResponse response = httpClient.execute(http);\n         try {\n            if (response != null) {\n               if (response.getStatusLine() != null)\n                  statusCode = response.getStatusLine().getStatusCode();\n               HttpEntity entity = response.getEntity();\n               // 响应内容\n               content = EntityUtils.toString(entity, Consts.UTF_8);\n            }\n         } finally {\n            response.close();\n         }\n      } catch (Exception e) {\n         e.printStackTrace();\n      } finally {\n         httpClient.close();\n      }\n   }\n   public int getStatusCode() {\n      return statusCode;\n   }\n   public String getContent() throws ParseException, IOException {\n      return content;\n   }\n}</code></pre>\n<h1 id=\"7.%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%99%A8--%E5%B8%AE%E6%88%91%E4%BB%AC%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%B1%BB%2C%E6%8E%A5%E5%8F%A3%E7%AD%89\">7.自动生成器--帮我们自动生成类,接口等</h1>\n<pre><code class=\"language-java\">public class Generator {\n    public static void main(String[] args) {\n        FastAutoGenerator.create(\"jdbc:mysql://localhost:3306/wechatpay?serverTimezone=Asia/Shanghai\", \"root\", \"grt081141\" +\n                \"\")\n                .globalConfig(builder -&gt; {\n                    builder.author(\"guan\") // 设置作者\n                            .enableSwagger() // 开启 swagger 模式\n                            .fileOverride() // 覆盖已生成文件\n                            .outputDir(\".\\\\src\\\\main\\\\java\\\\\"); // 指定输出目录\n                })\n                .packageConfig(builder -&gt; {\n                    builder.parent(\"springboot\") // 设置父包名\n                            .moduleName(\"system\") // 设置父包模块名\n                            .pathInfo(Collections.singletonMap(OutputFile.xml, \"src\\\\main\\\\resources\\\\mapper\\\\\")); // 设置mapperXml生成路径\n                })\n                .strategyConfig(builder -&gt; {\n                    builder.addInclude(\"t_order\")// 设置需要生成的表名\n                            .addTablePrefix(\"t_\"); // 设置过滤表前缀\n                })\n                .templateEngine(new FreemarkerTemplateEngine()) // 使用Freemarker引擎模板，默认的是Velocity引擎模板\n                .execute();\n\n    }\n</code></pre>\n<h1 id=\"8.%20%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81\">8. 前端代码</h1>\n<h2 id=\"8.1.%E6%96%B0%E5%BB%BAvue%E9%A1%B9%E7%9B%AE\">8.1.新建vue项目</h2>\n<h3 id=\"8.1.1.%E6%89%93%E5%BC%80cmd%E5%91%BD%E4%BB%A4%E7%AA%97%E5%8F%A3%2C%E8%BE%93%E5%85%A5%E5%91%BD%E4%BB%A4%E6%89%93%E5%BC%80%E7%AA%97%E5%8F%A3\">8.1.1.打开cmd命令窗口,输入命令打开窗口</h3>\n<blockquote>\n<p>vue ui</p>\n</blockquote>\n<h3 id=\"8.1.2.%20%E6%96%B0%E5%BB%BA\">8.1.2. 新建</h3>\n<p><img alt=\"\" height=\"181\" src=\"..\\..\\static\\image\\b1ca5414b1a045289196c74d19d20c58.png\" width=\"1046\"/></p>\n<p><img alt=\"\" height=\"786\" src=\"..\\..\\static\\image\\fc23ba30f0f5419c91db8642f0f7e27d.png\" width=\"1200\"/></p>\n<p></p>\n<h2 id=\"8.2.%E5%AE%89%E8%A3%85element%E6%8F%92%E4%BB%B6%E5%92%8Caxios%E7%9A%84%E4%BE%9D%E8%B5%96(%E7%9C%81%E7%95%A5)\">8.2.安装element插件和axios的依赖(省略)</h2>\n<h2 id=\"8.3.%E5%BC%95%E5%85%A5axios%E5%92%8C%E8%AE%BE%E7%BD%AEaxios%E5%9F%BA%E7%A1%80%E8%B7%AF%E5%BE%84\">8.3.引入axios和设置axios基础路径</h2>\n<blockquote>\n<pre>//引入axios\nimport axios from \"axios\";\nVue.config.productionTip = false\n//设置axios基础路径\naxios.defaults.baseURL=\"http://localhost:8888\"\n\nVue.prototype.axios=axios;</pre>\n</blockquote>\n<h2 id=\"8.4.%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2\">8.4.前端页面</h2>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div id=\"app\"&gt;\n    &lt;el-button type=\"primary\" @click=\"pay\"&gt;支付&lt;/el-button&gt;\n    &lt;!--二维码的弹出层--&gt;\n    &lt;el-dialog\n            title=\"收银台\"\n            :visible.sync=\"dislogVisible\"\n            width=\"30%\"&gt;\n      &lt;div style=\"text-align: center\"&gt;\n        &lt;p&gt;微信支付{<!-- -->{payResult.price}}元&lt;/p&gt;\n        &lt;div style=\"border: 1px solid #f3f3f3; width: 220px;padding: 0px;margin: 0px auto\"&gt;\n          &lt;!--使用vue-qr--&gt;\n          &lt;vue-qr\n                  :text=\"payResult.codeUrl\"\n                  :margin=\"0\"\n                  colorDark=\"green\"\n                  :logo=\"require('@/assets/logo.png')\"\n                  colorLight=\"#fff\"\n                  :size=\"200\"&gt;\n\n          &lt;/vue-qr&gt;\n        &lt;/div&gt;\n\n      &lt;/div&gt;\n      &lt;el-divider&gt;&lt;/el-divider&gt;\n      &lt;div style=\"font-size: 13px;\"&gt;\n        提示:&lt;br&gt;\n        二维码两小时内有效，请及时扫码支付&lt;br&gt;\n      &lt;/div&gt;\n\n    &lt;/el-dialog&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n&lt;script&gt;\n  //引入vue-qr\n  import vueQr from 'vue-qr'\n  export default {\n    name: 'app',\n    //注册vue-qr\n    components:{\n      vueQr\n    },\n    data(){\n      return{\n        orderNo:\"c60801fbdd2d45f9adg\",\n        codeUrl:\"\",\n        //定时器\n        timer1:\"\",\n        dislogVisible:false,\n        //得到响应的结果\n        payResult:{\n          //价格\n          price:0,\n          //二维码路径  借助vue-qr 可以把二维码地址转为二维码图片\n          codeUrl:\"\",\n\n          orderNo:\"\",\n        }\n\n      }\n    },\n    methods:{\n \n      pay(){\n        this.dislogVisible=true;\n        this.axios.post(\"/system/order/createNavite/\"+this.orderNo).then(result=&gt;{\n          if(result.data.code===2000){\n            console.log(result)\n            this.payResult=result.data.data;\n            //设置一个定时器任务,每隔3秒调用一次\n            this.timer1=setInterval(()=&gt;{\n              this.queryPayStatus(this.payResult.orderNo)\n            },3000);\n          }\n\n        })\n      }\n    }\n  }\n&lt;/script&gt;\n\n&lt;style&gt;\n\n\n&lt;/style&gt;</code></pre>\n<h1 id=\"9.%E6%A0%B9%E6%8D%AE%E8%AE%A2%E5%8D%95%E5%8F%B7%E5%88%9B%E5%BB%BA%E4%BA%8C%E7%BB%B4%E7%A0%81--%E5%90%8E%E7%AB%AF\">9.根据订单号创建二维码--后端</h1>\n<h2 id=\"9.1.controller%E5%B1%82\">9.1.controller层</h2>\n<pre><code class=\"language-java\">@CrossOrigin\n@RestController\n@RequestMapping(\"/system/order\")\npublic class OrderController {\n    //自动注入\n    @Autowired\n    private IOrderService orderService;\n    //根据订单号创建二维码\n    @RequestMapping(\"createNavite/{orderNo}\")\n    public CommonResult createNative(@PathVariable String orderNo){\n        return orderService.createNative(orderNo);\n    }\n   \n}</code></pre>\n<h2 id=\"9.2.Iservice\">9.2.Iservice</h2>\n<pre><code class=\"language-java\">CommonResult createNative(String orderNo);</code></pre>\n<h2 id=\"9.3.service%E5%B1%82\">9.3.service层</h2>\n<pre><code class=\"language-java\">@Service\npublic class OrderServiceImpl extends ServiceImpl&lt;OrderMapper, Order&gt; implements IOrderService {\n    @Autowired\n    private OrderMapper orderMapper;\n    @Value(\"${weixin.appid}\")\n    private String appId;\n    @Value(\"${weixin.mch_id}\")\n    private String mchId;\n    @Value(\"${weixin.api_key}\")\n    private String apikey;\n    @Override\n    public CommonResult createNative(String orderNo) {\n        //1.根据订单号查询出订单信息\n        QueryWrapper wrapper=new QueryWrapper();\n        //前端传过来的订单号跟数据库中的订单号一致\n        wrapper.eq(\"order_no\",orderNo);\n        //订单状态为0\n        wrapper.eq(\"status\",0);\n        Order order=orderMapper.selectOne(wrapper);\n        //判断订单信息不为空\n        if (order != null) {\n            try {\n                //接口里面的参数要的是xml类型\n                //设置请求的参数个数格式为xml格式\n                //将请求参数封装成map\n                Map&lt;String, String&gt; params = new HashMap&lt;&gt;();\n                //添加公众账号Id\n                params.put(\"appid\", appId);\n                //添加商品号\n                params.put(\"mch_id\", mchId);\n                //添加随机字符串--微信自带算法\n                params.put(\"nonce_str\", WXPayUtil.generateNonceStr());\n                //添加商品描述\n                params.put(\"body\", order.getCourseTitle());\n                //添加商品订单号\n                params.put(\"out_trade_no\", orderNo);\n                //添加标价金额 --单位是分，要转换\n                params.put(\"total_fee\", new BigDecimal(0.01).multiply(new BigDecimal(100)).longValue() + \"\");\n                //添加终端ip\n                params.put(\"spbill_create_ip\", \"127.0.0.1\");\n                //添加通知地址\n                params.put(\"notify_url\", \"http://localhost:8888/pay/back\");\n                //添加交易类型\n                params.put(\"trade_type\", \"NATIVE\");\n\n                //创建HttpClient对象--作用远程调用\n                HttpClient client = new HttpClient(\"https://api.mch.weixin.qq.com/pay/unifiedorder\");\n                //支持https协议\n                client.setHttps(true);\n                //将map转为xml格式--设置请求的参数\n                client.setXmlParam(WXPayUtil.generateSignedXml(params,apikey));\n                //发送请求\n                client.post();\n                //获取请求响应响应的结果\n                String content = client.getContent();\n                System.out.println(content);\n                //将String类型转换为map返货给前端\n                Map&lt;String, String&gt; map = WXPayUtil.xmlToMap(content);\n                if (map.get(\"result_code\").equals(\"SUCCESS\")){\n                    Map&lt;String,Object&gt; result=new HashMap&lt;&gt;();\n                    result.put(\"codeUrl\",map.get(\"code_url\"));\n                    result.put(\"price\",order.getTotalFee());\n                    result.put(\"orderNo\",orderNo);\n                    return new CommonResult(2000,\"生成二维码\",result);\n                }\n\n            }catch (Exception e){\n                e.printStackTrace();\n            }\n\n        }\n        return new CommonResult(5000,\"订单失效\",null);\n\n    }\n    }</code></pre>\n<h2 id=\"9.4.%E5%AE%9E%E4%BD%93%E7%B1%BB\">9.4.实体类</h2>\n<h3 id=\"9.4.1.CommonResult\">9.4.1.CommonResult</h3>\n<pre><code class=\"language-java\">@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@ApiModel(\"返回同一的信息\")\npublic class CommonResult {\n    @ApiModelProperty(\"状态码 2000成功，5000失败\")\n    private int code;\n    @ApiModelProperty(\"信息\")\n    private String msg;\n    @ApiModelProperty(\"数据\")\n    private Object data;\n}\n</code></pre>\n<h3 id=\"9.4.2.Order\">9.4.2.Order</h3>\n<pre><code class=\"language-java\">package springboot.system.entity;\n\nimport com.baomidou.mybatisplus.annotation.TableName;\nimport java.io.Serializable;\nimport java.math.BigDecimal;\nimport java.time.LocalDateTime;\nimport java.util.Date;\n\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n\n/**\n * &lt;p&gt;\n * 订单\n * &lt;/p&gt;\n *\n * @author guan\n * @since 2022-08-13\n */\n@TableName(\"t_order\")\n@ApiModel(value = \"Order对象\", description = \"订单\")\npublic class Order implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    private String id;\n\n    @ApiModelProperty(\"订单号\")\n    private String orderNo;\n\n    @ApiModelProperty(\"课程id\")\n    private String courseId;\n\n    @ApiModelProperty(\"课程名称\")\n    private String courseTitle;\n\n    @ApiModelProperty(\"课程封面\")\n    private String courseCover;\n\n    @ApiModelProperty(\"讲师名称\")\n    private String teacherName;\n\n    @ApiModelProperty(\"会员id\")\n    private String memberId;\n\n    @ApiModelProperty(\"会员昵称\")\n    private String nickname;\n\n    @ApiModelProperty(\"会员手机\")\n    private String mobile;\n\n    @ApiModelProperty(\"订单金额（分）\")\n    private BigDecimal totalFee;\n\n    @ApiModelProperty(\"支付类型（0：微信 1：支付宝）\")\n    private Integer payType;\n\n    @ApiModelProperty(\"订单状态（0：未支付 1：已支付）\")\n    private Integer status;\n\n    @ApiModelProperty(\"逻辑删除 1（true）已删除， 0（false）未删除\")\n    private Boolean isDeleted;\n\n    @ApiModelProperty(\"创建时间\")\n    private LocalDateTime gmtCreate;\n\n    @ApiModelProperty(\"更新时间\")\n    private LocalDateTime gmtModified;\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n    public String getOrderNo() {\n        return orderNo;\n    }\n\n    public void setOrderNo(String orderNo) {\n        this.orderNo = orderNo;\n    }\n    public String getCourseId() {\n        return courseId;\n    }\n\n    public void setCourseId(String courseId) {\n        this.courseId = courseId;\n    }\n    public String getCourseTitle() {\n        return courseTitle;\n    }\n\n    public void setCourseTitle(String courseTitle) {\n        this.courseTitle = courseTitle;\n    }\n    public String getCourseCover() {\n        return courseCover;\n    }\n\n    public void setCourseCover(String courseCover) {\n        this.courseCover = courseCover;\n    }\n    public String getTeacherName() {\n        return teacherName;\n    }\n\n    public void setTeacherName(String teacherName) {\n        this.teacherName = teacherName;\n    }\n    public String getMemberId() {\n        return memberId;\n    }\n\n    public void setMemberId(String memberId) {\n        this.memberId = memberId;\n    }\n    public String getNickname() {\n        return nickname;\n    }\n\n    public void setNickname(String nickname) {\n        this.nickname = nickname;\n    }\n    public String getMobile() {\n        return mobile;\n    }\n\n    public void setMobile(String mobile) {\n        this.mobile = mobile;\n    }\n    public BigDecimal getTotalFee() {\n        return totalFee;\n    }\n\n    public void setTotalFee(BigDecimal totalFee) {\n        this.totalFee = totalFee;\n    }\n    public Integer getPayType() {\n        return payType;\n    }\n\n    public void setPayType(Integer payType) {\n        this.payType = payType;\n    }\n    public Integer getStatus() {\n        return status;\n    }\n\n    public void setStatus(Integer status) {\n        this.status = status;\n    }\n    public Boolean getIsDeleted() {\n        return isDeleted;\n    }\n\n    public void setIsDeleted(Boolean isDeleted) {\n        this.isDeleted = isDeleted;\n    }\n    public LocalDateTime getGmtCreate() {\n        return gmtCreate;\n    }\n\n    public void setGmtCreate(LocalDateTime gmtCreate) {\n        this.gmtCreate = gmtCreate;\n    }\n    public LocalDateTime getGmtModified() {\n        return gmtModified;\n    }\n\n    public void setGmtModified(LocalDateTime gmtModified) {\n        this.gmtModified = gmtModified;\n    }\n\n    @Override\n    public String toString() {\n        return \"Order{\" +\n            \"id=\" + id +\n            \", orderNo=\" + orderNo +\n            \", courseId=\" + courseId +\n            \", courseTitle=\" + courseTitle +\n            \", courseCover=\" + courseCover +\n            \", teacherName=\" + teacherName +\n            \", memberId=\" + memberId +\n            \", nickname=\" + nickname +\n            \", mobile=\" + mobile +\n            \", totalFee=\" + totalFee +\n            \", payType=\" + payType +\n            \", status=\" + status +\n            \", isDeleted=\" + isDeleted +\n            \", gmtCreate=\" + gmtCreate +\n            \", gmtModified=\" + gmtModified +\n        \"}\";\n    }\n}\n</code></pre>\n<h1 id=\"10.%E6%A0%B9%E6%8D%AE%E8%AE%A2%E5%8D%95%E7%8A%B6%E6%80%81%E6%9F%A5%E8%AF%A2%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E6%83%85%E5%86%B5\">10.根据订单状态查询微信支付情况</h1>\n<h2 id=\"10.1.%E5%89%8D%E7%AB%AF\">10.1.前端</h2>\n<pre><code class=\"language-html\"> //根据订单号查询支付状态\n      queryPayStatus(orderNo){\n      this.axios.post(\"system/order/queryPayStatus/\"+orderNo).then(result=&gt;{\n        if (result.data.code===2000){\n\n          //清除定时器\n          clearInterval(this.timer1)\n          this.timer1=null;\n          this.$message.success(\"支付成功\")\n          //关闭弹出层\n          this.dislogVisible=false;\n        }\n      })\n      },</code></pre>\n<h2 id=\"10.2.%E5%90%8E%E7%AB%AF\">10.2.后端</h2>\n<h3 id=\"10.2.1.controller\">10.2.1.controller</h3>\n<pre><code class=\"language-java\"> @RequestMapping(\"queryPayStatus/{orderNo}\")\n    public CommonResult queryPayStatus(@PathVariable String orderNo){\n        return orderService.queryPayStatus(orderNo);\n    }</code></pre>\n<h3 id=\"10.2.2.Iservice\">10.2.2.Iservice</h3>\n<pre><code class=\"language-java\"> CommonResult queryPayStatus(String orderNo);</code></pre>\n<h3 id=\"10.2.3.service%E5%B1%82\">10.2.3.service层</h3>\n<pre><code class=\"language-java\"> @Override\n    public CommonResult queryPayStatus(String orderNo) {\n        //1.根据订单状态查询微信支付情况\n        try {\n            HttpClient client=new HttpClient(\"https://api.mch.weixin.qq.com/pay/orderquery\");\n            //设置参数--分装成map在转为xml格式\n            Map&lt;String, String&gt; params = new HashMap&lt;&gt;();\n            //添加公众账号Id\n            params.put(\"appid\", appId);\n            //添加商品号\n            params.put(\"mch_id\", mchId);\n            //添加商品订单号\n            params.put(\"out_trade_no\",orderNo);\n            //添加随机字符串\n            params.put(\"nonce_str\",WXPayUtil.generateNonceStr());\n            //支持Https\n            client.setHttps(true);\n            client.setXmlParam(WXPayUtil.generateSignedXml(params,apikey));\n            client.post();\n            String content = client.getContent();\n            //转换为map\n            Map&lt;String, String&gt; map = WXPayUtil.xmlToMap(content);\n            if (map.get(\"trade_state\").equals(\"SUCCESS\")){\n                //1.修改订单的状态\n                Order order=new Order();\n                order.setStatus(1);\n                order.setGmtModified(LocalDateTime.now() );\n                QueryWrapper&lt;Order&gt; wrapper=new QueryWrapper&lt;&gt;();\n                //根据订单号\n                wrapper.eq(\"order_no\",orderNo);\n                wrapper.eq(\"status\",0);\n                orderMapper.update(order,wrapper);\n                return new CommonResult(2000,\"支付成功\",null);\n            }\n\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n\n        return new CommonResult(5000,\"支付失败\",null);\n    }</code></pre>\n</div>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 1, "time": "2022-08-17 15:41:14", "summary": "目录微信支付的流程微信的接口文档新建一个的项目导入需要的依赖配置文件创建一个的工具类默认浏览器进行远程调用自动生成器帮我们自动生成类接口等前端代码新建项目打开命令窗口输入命令打开窗口新建安装插件和的依"}