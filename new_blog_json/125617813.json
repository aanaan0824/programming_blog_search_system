{"blogid": "125617813", "writerAge": "码龄1年", "writerBlogNum": "46", "writerCollect": "5", "writerComment": "3", "writerFan": "11", "writerGrade": "3级", "writerIntegral": "556", "writerName": "清风--", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125617813.jpg", "writerRankTotal": "34115", "writerRankWeekly": "21405", "writerThumb": "78", "writerVisitNum": "12194", "blog_read_count": "1054", "blog_time": "于 2022-07-05 14:18:16 发布", "blog_title": "bugku--never_give_up", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>考察知识点：</h1>\n<p>1.对编码的敏感度</p>\n<p>2.php伪协议（以及POST流）</p>\n<p>3.通配符</p>\n<p>4.弱比较</p>\n<p></p>\n<p></p>\n<h1>初步工作</h1>\n<p>进入页面，是这个样子：</p>\n<p><img alt=\"\" height=\"239\" src=\"..\\..\\static\\image\\996a27678fd64e3b8a1a786cd69c5b27.png\" width=\"1200\"/></p>\n<p></p>\n<p>查看源代码，发现有提示：</p>\n<p><img alt=\"\" height=\"323\" src=\"..\\..\\static\\image\\95f116c78edd42f2be309940affa5ac0.png\" width=\"890\"/> 那我们访问</p>\n<p>ip/1p.html        我这里就是<a href=\"http://114.67.175.224:10713/1p.html\" title=\"http://114.67.175.224:10713/1p.html\">http://114.67.175.224:10713/1p.html</a></p>\n<p>但是我们访问后，发现网站似乎<span style=\"color:#fe2c24;\">被重定向</span>了，是一个公网地址，我们要做的题目肯定不在公网ip里面，那我们就可以访问一下</p>\n<p>view-source:114.67.175.224:10713/1p.html</p>\n<p>可以看到源代码</p>\n<p><img alt=\"\" height=\"1200\" src=\"..\\..\\static\\image\\12232d0bb6554dc38beb394b4553e5c1.png\" width=\"1200\"/></p>\n<p></p>\n<blockquote>\n<p> 有一串字符，我们看到有点像url解码，又像base解码，我们可以先试着拿去url解码一下</p>\n</blockquote>\n<p>  </p>\n<p>解码完之后发现是这样的：</p>\n<p></p>\n<p><span style=\"color:#956fe7;\">\"&lt;script&gt;window.location.href='http://www.bugku.com';&lt;/script&gt; <br/> &lt;!--JTIyJTNCaWYoISUyNF9HRVQlNUInaWQnJTVEKSUwQSU3QiUwQSUwOWhlYWRlcignTG9jYXRpb24lM0ElMjBoZWxsby5waHAlM0ZpZCUzRDEnKSUzQiUwQSUwOWV4aXQoKSUzQiUwQSU3RCUwQSUyNGlkJTNEJTI0X0dFVCU1QidpZCclNUQlM0IlMEElMjRhJTNEJTI0X0dFVCU1QidhJyU1RCUzQiUwQSUyNGIlM0QlMjRfR0VUJTVCJ2InJTVEJTNCJTBBaWYoc3RyaXBvcyglMjRhJTJDJy4nKSklMEElN0IlMEElMDllY2hvJTIwJ25vJTIwbm8lMjBubyUyMG5vJTIwbm8lMjBubyUyMG5vJyUzQiUwQSUwOXJldHVybiUyMCUzQiUwQSU3RCUwQSUyNGRhdGElMjAlM0QlMjAlNDBmaWxlX2dldF9jb250ZW50cyglMjRhJTJDJ3InKSUzQiUwQWlmKCUyNGRhdGElM0QlM0QlMjJidWdrdSUyMGlzJTIwYSUyMG5pY2UlMjBwbGF0ZWZvcm0hJTIyJTIwYW5kJTIwJTI0aWQlM0QlM0QwJTIwYW5kJTIwc3RybGVuKCUyNGIpJTNFNSUyMGFuZCUyMGVyZWdpKCUyMjExMSUyMi5zdWJzdHIoJTI0YiUyQzAlMkMxKSUyQyUyMjExMTQlMjIpJTIwYW5kJTIwc3Vic3RyKCUyNGIlMkMwJTJDMSkhJTNENCklMEElN0IlMEElMDklMjRmbGFnJTIwJTNEJTIwJTIyZmxhZyU3QioqKioqKioqKioqJTdEJTIyJTBBJTdEJTBBZWxzZSUwQSU3QiUwQSUwOXByaW50JTIwJTIybmV2ZXIlMjBuZXZlciUyMG5ldmVyJTIwZ2l2ZSUyMHVwJTIwISEhJTIyJTNCJTBBJTdEJTBBJTBBJTBBJTNGJTNF--&gt;\" </span><br/>  </p>\n<blockquote>\n<p>这个&lt;!--  .....  --&gt;里面的内容就非常像base编码了，先试一下base64解码</p>\n</blockquote>\n<p></p>\n<p><span style=\"color:#956fe7;\">%22%3Bif(!%24_GET%5B'id'%5D)%0A%7B%0A%09header('Location%3A%20hello.php%3Fid%3D1')%3B%0A%09exit()%3B%0A%7D%0A%24id%3D%24_GET%5B'id'%5D%3B%0A%24a%3D%24_GET%5B'a'%5D%3B%0A%24b%3D%24_GET%5B'b'%5D%3B%0Aif(stripos(%24a%2C'.'))%0A%7B%0A%09echo%20'no%20no%20no%20no%20no%20no%20no'%3B%0A%09return%20%3B%0A%7D%0A%24data%20%3D%20%40file_get_contents(%24a%2C'r')%3B%0Aif(%24data%3D%3D%22bugku%20is%20a%20nice%20plateform!%22%20and%20%24id%3D%3D0%20and%20strlen(%24b)%3E5%20and%20eregi(%22111%22.substr(%24b%2C0%2C1)%2C%221114%22)%20and%20substr(%24b%2C0%2C1)!%3D4)%0A%7B%0A%09%24flag%20%3D%20%22flag%7B***********%7D%22%0A%7D%0Aelse%0A%7B%0A%09print%20%22never%20never%20never%20give%20up%20!!!%22%3B%0A%7D%0A%0A%0A%3F%3E--&gt;\" </span></p>\n<blockquote>\n<p>可以隐约看到有一些字母，但还是%22%3b什么的很多东西，很像url再解码一下,得到大致代码如下（小修改过）</p>\n</blockquote>\n<pre><code class=\"language-php\">&lt;?php\nif(!$_GET['id'])\n{\n\theader('Location: hello.php?id=1');\n\texit();\n}\n$id=$_GET['id'];\n$a=$_GET['a'];\n$b=$_GET['b'];\nif(stripos($a,'.'))\n{\n\techo 'no no no no no no no';\n\treturn ;\n}\n$data = @file_get_contents($a,'r');\nif($data==\"bugku is a nice plateform!\" and $id==0 and strlen($b)&gt;5 and eregi(\"111\".substr($b,0,1),\"1114\") and substr($b,0,1)!=4)\n{\n\t$flag = \"flag{***********}\"\n}\nelse\n{\n\tprint \"never never never give up !!!\";\n}\n\n\n?&gt;\n</code></pre>\n<h1></h1>\n<h1>代码分析： </h1>\n<p>可以看到如此我们只要满足</p>\n<pre><code class=\"language-php\">if($data==\"bugku is a nice plateform!\" and $id==0 and strlen($b)&gt;5 and eregi(\"111\".substr($b,0,1),\"1114\") and substr($b,0,1)!=4)</code></pre>\n<p>就可以得到flag，如何实现呢，一句句来分析</p>\n<pre><code class=\"language-php\">if(!$_GET['id'])\n{\n\theader('Location: hello.php?id=1');\n\texit();\n}</code></pre>\n<blockquote>\n<p>如果不存在GET传参的id就跳转到 hello.php?id=1并退出程序</p>\n</blockquote>\n<p>这个简单，我们直接给id传参就可以绕过</p>\n<hr/>\n<p> </p>\n<p></p>\n<pre><code class=\"language-php\">$id=$_GET['id'];\n$a=$_GET['a'];\n$b=$_GET['b'];\nif(stripos($a,'.'))// $a no have .\n{\n\techo 'no no no no no no no';\n\treturn ;\n}</code></pre>\n<blockquote>\n<p> 分别三个GET传参，然后匹配$a 中是否含有符号.(点)，绕过就是符号不含.就行</p>\n<p>stripos就是匹配 $a 中第一次匹配到的 .</p>\n</blockquote>\n<hr/>\n<p> </p>\n<pre><code class=\"language-php\">$data = @file_get_contents($a,'r');</code></pre>\n<blockquote>\n<p> 向变量$data写入$a的数据，就是$data=$a的意思，但是这里使用了file_get_contents这个函数，所以我们要利用地址的形式，形如http://  或者  php://</p>\n<p>其中php://就是php的伪协议</p>\n<p>伪协议就是小众协议的意思，比如php的伪协议只有php认识</p>\n</blockquote>\n<p>这次就利用php伪协议的一种</p>\n<blockquote>\n<p>php://input</p>\n</blockquote>\n<p>他接受POST流传输的数据，而不是POST表单，什么意思？</p>\n<p>我这里再仔细讲一遍：</p>\n<h2>关于POST流的问题</h2>\n<p> 这里使用BURP进行讲解</p>\n<p>正常GET传参数据包：</p>\n<p><img alt=\"\" height=\"522\" src=\"..\\..\\static\\image\\113c0a0a8fed4783a47ffcb657513db9.png\" width=\"1200\"/></p>\n<p> </p>\n<p>POST传参数据包：</p>\n<p><img alt=\"\" height=\"560\" src=\"..\\..\\static\\image\\695ef2691696418a81e840cf3e7144fb.png\" width=\"1200\"/></p>\n<p> </p>\n<p>POST流传参数据包：</p>\n<p> <img alt=\"\" height=\"554\" src=\"..\\..\\static\\image\\f101ec988d4e4a1cb186096f9bd63298.png\" width=\"1200\"/></p>\n<p>是不是觉得和POST传参数据包没有区别，注意看POST流数据包少了一句</p>\n<blockquote>\n<p> Content-Type: application/x-www-form-urlencoded</p>\n</blockquote>\n<p> 这个就是表单，所以区别POST传参和传输POST流的主要区别就是有无表单</p>\n<p></p>\n<p>所以接下来看下一句代码</p>\n<pre><code class=\"language-php\">if($data==\"bugku is a nice plateform!\" and $id==0 and strlen($b)&gt;5 and eregi(\"111\".substr($b,0,1),\"1114\") and substr($b,0,1)!=4)</code></pre>\n<p>只要满足这串代码就可以得到flag了</p>\n<blockquote>\n<p>$data=\"bugku is a nice plateform!\"</p>\n</blockquote>\n<p>这里使用php伪协议就可以实现。 </p>\n<hr/>\n<blockquote>\n<p>$id==0 因为传入id=0会被认为没有传参，所以我们传入id=0a就可以满足</p>\n<p>这里考到了弱比较</p>\n<p>”0aaaa“==\"0\"是成立的，因为数字和字母不可比较，只要字母前面的数字全一样就可以</p>\n<p>比如：</p>\n<p>”768sfaf“ == \"768\"</p>\n<p>\"123as\"  不等于  ”12asd“</p>\n</blockquote>\n<hr/>\n<blockquote>\n<p>strlen($b)&gt;5     就是变量$b的长度大于5 </p>\n</blockquote>\n<hr/>\n<blockquote>\n<p>eregi(\"111\".substr($b,0,1),\"1114\")   </p>\n<p>eregi()匹配函数，匹配到则是True</p>\n<p></p>\n<p>\"111\".substr($b,0,1)  -&gt;  拼接 “111”和  $b的第一个字符  （.是拼接字符串的意思）</p>\n<p>比如$b=4321    那么  \"111\".substr($b,0,1) 就是1114</p>\n</blockquote>\n<hr/>\n<blockquote>\n<p>substr($b,0,1)  -&gt;这就和上面一句矛盾了呀，第一个数字又要等于4又不能等于4怎么办？</p>\n<p></p>\n<p>方法一：</p>\n<p>使用*通配符   只要传入$b=*12345就可以满足啦</p>\n<p>*代表任意字符</p>\n<p></p>\n</blockquote>\n<h1>最终payload：</h1>\n<p><img alt=\"\" height=\"506\" src=\"..\\..\\static\\image\\5a6e9ead42ac480292da56a819e2a3d3.png\" width=\"1200\"/></p>\n<p> 不要漏掉最下面的bugku is a nice plateform!</p>\n<blockquote>\n<p>如果哪里写的不好，或者哪里不明白的欢迎评论区留言</p>\n</blockquote>\n<p> </p>\n<p> </p>\n</div>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 1, "time": "2022-07-05 14:18:16", "summary": "考察知识点：对编码的敏感度伪协议以及流通配符弱比较初步工作进入页面，是这个样子：查看源代码，发现有提示：那我们访问我这里就是但是我们访问后，发现网站似乎被重定向了，是一个公网地址，我们要做的题目肯定不"}