{"blogid": "126067318", "writerAge": "码龄2年", "writerBlogNum": "99", "writerCollect": "2167", "writerComment": "2490", "writerFan": "4215", "writerGrade": "6级", "writerIntegral": "6114", "writerName": "亦世凡华、", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126067318.jpg", "writerRankTotal": "2478", "writerRankWeekly": "30", "writerThumb": "2161", "writerVisitNum": "46325", "blog_read_count": "352", "blog_time": "于 2022-08-01 10:02:57 发布", "blog_title": "【JavaScript】回调地狱以及网页轮播图底层分析", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<blockquote>\n<p>🍈作者简介：大家好，我是亦世凡华、渴望知识储备自己的一名在校大学生</p>\n<p>🍇个人主页：<a class=\"link-info\" href=\"https://blog.csdn.net/qq_53123067?spm=1000.2115.3001.5343\" title=\"亦世凡华、的博客\">亦世凡华、的博客</a></p>\n<p>🍓系列专栏：<a class=\"link-info\" href=\"https://blog.csdn.net/qq_53123067/category_11818587.html?spm=1001.2014.3001.5482\" title=\"JavaScript专栏\">JavaScript专栏</a></p>\n<p>🥝推荐一款模拟面试刷题神器🔥：<a class=\"link-info\" href=\"https://www.nowcoder.com/link/pc_csdncpt_ysfh_qianduan\" title=\"点击跳转进入网站\">点击跳转进入网站</a></p>\n</blockquote>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%F0%9F%8F%8D%EF%B8%8F%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1-toc\" style=\"margin-left:40px;\"><a href=\"#%F0%9F%8F%8D%EF%B8%8F%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1\">🏍️回调地狱</a></p>\n<p id=\"%F0%9F%8D%87%E5%85%B7%E4%BD%93%E5%88%86%E6%9E%90-toc\" style=\"margin-left:80px;\"><a href=\"#%F0%9F%8D%87%E5%85%B7%E4%BD%93%E5%88%86%E6%9E%90\">🍇具体分析</a></p>\n<p id=\"%F0%9F%8D%88%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:80px;\"><a href=\"#%F0%9F%8D%88%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81\">🍈完整代码</a></p>\n<p id=\"%F0%9F%8F%83%E7%BD%91%E9%A1%B5%E8%BD%AE%E6%92%AD%E5%9B%BE-toc\" style=\"margin-left:40px;\"><a href=\"#%F0%9F%8F%83%E7%BD%91%E9%A1%B5%E8%BD%AE%E6%92%AD%E5%9B%BE\">🏃网页轮播图</a></p>\n<p id=\"%F0%9F%8D%89%E5%88%B6%E4%BD%9C%E8%BD%AE%E6%92%AD%E5%9B%BE%E7%9A%84%E7%A9%BA%E9%97%B4%E7%9B%92%E5%AD%90%EF%BC%8C%E7%94%A8%E6%9D%A5%E5%AD%98%E6%94%BE%E5%9B%BE%E7%89%87-toc\" style=\"margin-left:80px;\"><a href=\"#%F0%9F%8D%89%E5%88%B6%E4%BD%9C%E8%BD%AE%E6%92%AD%E5%9B%BE%E7%9A%84%E7%A9%BA%E9%97%B4%E7%9B%92%E5%AD%90%EF%BC%8C%E7%94%A8%E6%9D%A5%E5%AD%98%E6%94%BE%E5%9B%BE%E7%89%87\">🍉制作轮播图的空间盒子，用来存放图片</a></p>\n<p id=\"%F0%9F%8D%8A%E7%82%B9%E5%87%BB%E5%B0%8F%E5%9C%86%E5%9C%88%E5%8F%AF%E4%BB%A5%E6%92%AD%E6%94%BE%E7%9B%B8%E5%BA%94%E7%9A%84%E5%9B%BE%E7%89%87-toc\" style=\"margin-left:80px;\"><a href=\"#%F0%9F%8D%8A%E7%82%B9%E5%87%BB%E5%B0%8F%E5%9C%86%E5%9C%88%E5%8F%AF%E4%BB%A5%E6%92%AD%E6%94%BE%E7%9B%B8%E5%BA%94%E7%9A%84%E5%9B%BE%E7%89%87\">🍊点击小圆圈可以播放相应的图片</a></p>\n<p id=\"%F0%9F%8D%8B%E9%BC%A0%E6%A0%87%E4%B8%8D%E7%82%B9%E5%87%BB%EF%BC%8C%E8%BD%AE%E6%92%AD%E5%9B%BE%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%92%AD%E6%94%BE-toc\" style=\"margin-left:80px;\"><a href=\"#%F0%9F%8D%8B%E9%BC%A0%E6%A0%87%E4%B8%8D%E7%82%B9%E5%87%BB%EF%BC%8C%E8%BD%AE%E6%92%AD%E5%9B%BE%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%92%AD%E6%94%BE\">🍋鼠标不点击，轮播图会自动播放</a></p>\n<p id=\"%F0%9F%8D%8C%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:80px;\"><a href=\"#%F0%9F%8D%8C%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81\">🍌完整代码</a></p>\n<hr id=\"hr-toc\"/>\n<h2 id=\"%F0%9F%8F%8D%EF%B8%8F%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1\">🏍️回调地狱</h2>\n<h3 id=\"%F0%9F%8D%87%E5%85%B7%E4%BD%93%E5%88%86%E6%9E%90\">🍇具体分析</h3>\n<p>根据上文动画函数的讲解，今天更近一步加深<span style=\"color:#be191c;\"><strong>对回调函数的使用</strong></span>。</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;style&gt;\n        div {\n            width: 200px;\n            height: 200px;\n            background: #f00;\n            margin-top: 30px;\n            position: absolute;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button&gt;测试按钮&lt;/button&gt;\n    &lt;div&gt;&lt;/div&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;</code></pre>\n<p><img alt=\"\" height=\"346\" src=\"..\\..\\static\\image\\20e8ba3eb7e2443e8bfbdd30ab4426fc.png\" width=\"995\"/></p>\n<p>通过页面的内容，我想让盒子<strong>一次性实现<span style=\"color:#fe2c24;\">向左移动</span></strong>然后<span style=\"color:#b95514;\"><strong>变宽</strong></span>然后<span style=\"color:#1c7331;\"><strong>变高</strong></span>然后<span style=\"color:#1a439c;\"><strong>向下移动</strong></span>然后<span style=\"color:#511b78;\"><strong>向上移动</strong></span>，然后<span style=\"color:#b95514;\"><strong>向左移动</strong></span>。。。 如何做？？？，这里我们就需要借助回调函数不断调用定时器移动，通俗点讲，我们讲多个回调函数一起使用称为“回调地狱”。</p>\n<p>写JS第一步通常就是获取DOM元素，但是接下来的回调函数如何书写，请看如下代码及注释：</p>\n<pre><code class=\"language-javascript\">&lt;script&gt;\n    var btn = document.querySelector('button')\n    var div = document.querySelector('div')\n    function move (obj, attr, target, speed, callback) {\n        // 关闭上一个定时器\n        clearInterval(obj.timer);\n\n        // 获取元素当前位置\n        var current = parseInt(getStyle(obj, attr));\n        // 判断速度的正负值\n        if (current &gt; target) {\n            // 此时速度应为负值\n            speed = -speed;\n        }\n\n        // 开启一个定时器,用来执行动画效果\n        // 向执行动画的对象添加一个timer属性,用来保存它自己的定时器\n        obj.timer = setInterval(function () {\n            // 获取目标原来的left值\n            var oldValue = parseInt(getStyle(obj, attr));\n            // 在旧值的基础上增加\n            var newValue = oldValue + speed;\n            /* \n            向左移动时,需要判断newValue是否小于target\n            向右移动时,需要判断newValue是否大于target\n            */\n            if ((speed &lt; 0 &amp;&amp; newValue &lt; target) || (speed &gt; 0 &amp;&amp; newValue &gt; target)) {\n                newValue = target;\n            }\n            // 将新值赋予目标\n            obj.style[attr] = newValue + 'px';\n            // 当元素移动到target时,停止执行动画\n            if (newValue == target) {\n                // 达到目标关闭定时器\n                clearInterval(obj.timer);\n                // 动画执行完毕调用回调函数 callback\n                callback &amp;&amp; callback();\n            }\n\n        }, 30);\n    }\n    //定义一个函数,用来获取指定元素的当前样式\n    function getStyle (obj, name) {\n        if (window.getComputedStyle) {\n            // 正常浏览器的方式,具有getComputedStyle()方法\n            return getComputedStyle(obj, null)[name];\n        } else {\n            // IE8的方式,没有getComputedStyle()方法\n            return obj.currentStyle[name];\n        }\n    }\n&lt;/script&gt;</code></pre>\n<p>现在分别对代码里面的参数进行讲解：</p>\n<blockquote>\n<p><span style=\"color:#be191c;\"><strong>move参数</strong></span>:</p>\n<p>* obj:要执行动画的对象</p>\n<p>* attr:要执行动画的样式</p>\n<p>* target:执行动画的目标位置</p>\n<p>* speed:移动的速度(正数向右移,负数向左移)</p>\n<p>* callback:回调函数,这个函数将会在动画执行完毕以后执行</p>\n<p><span style=\"color:#be191c;\"><strong>getStyle参数</strong></span>:</p>\n<p>* obj:要获取样式的元素</p>\n<p>* name:要获取的样式名</p>\n</blockquote>\n<p>定时器书写完毕，我们开始调用move函数，可以看到move里面的callback回调函数里面在嵌套move，接着在回调函数里面在嵌套move，不停的在callback里面嵌套函数，达到连续的动画效果，称为“回调函数”，可以看一下效果，如下：</p>\n<pre><code class=\"language-javascript\">btn.addEventListener('click', function () {\n    move(div, \"left\", 300, 10, function () {\n        move(div,\"width\",500,10,function() {\n            move(div,\"height\",300,10,function(){\n                move(div,\"bottom\",100,10,function(){\n                    move(div,\"top\",100,10,function(){\n                        move(div,\"left\",-200,10,function(){})\n                    })\n                })\n            })\n        })\n    })\n})</code></pre>\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/b10dd8a2c9fd4ae99b04f5f58fe8ac85.gif\"/></p>\n<p>通过画面可以看到非常丝滑的动画效果，在这我们就要思考一下，是否可以<span style=\"color:#be191c;\"><strong>把这个动画函数封装在一个JS文件里</strong></span>，当我们想要实现动画效果时直接调用动画函数就可以了，答案是“可行的”。这样便于了代码的书写，大大提高了编程效率。接下来通过一个典型案例，在进行动画函数的学习。</p>\n<h3 id=\"%F0%9F%8D%88%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81\">🍈完整代码</h3>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;style&gt;\n        div {\n            width: 200px;\n            height: 200px;\n            background: #f00;\n            margin-top: 30px;\n            position: absolute;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button&gt;测试按钮&lt;/button&gt;\n    &lt;div&gt;&lt;/div&gt;\n    &lt;script&gt;\n        var btn = document.querySelector('button')\n        var div = document.querySelector('div')\n        function move (obj, attr, target, speed, callback) {\n            // 关闭上一个定时器\n            clearInterval(obj.timer);\n\n            // 获取元素当前位置\n            var current = parseInt(getStyle(obj, attr));\n            // 判断速度的正负值\n            if (current &gt; target) {\n                // 此时速度应为负值\n                speed = -speed;\n            }\n\n            // 开启一个定时器,用来执行动画效果\n            // 向执行动画的对象添加一个timer属性,用来保存它自己的定时器\n            obj.timer = setInterval(function () {\n                // 获取目标原来的left值\n                var oldValue = parseInt(getStyle(obj, attr));\n                // 在旧值的基础上增加\n                var newValue = oldValue + speed;\n                /* \n                向左移动时,需要判断newValue是否小于target\n                向右移动时,需要判断newValue是否大于target\n                */\n                if ((speed &lt; 0 &amp;&amp; newValue &lt; target) || (speed &gt; 0 &amp;&amp; newValue &gt; target)) {\n                    newValue = target;\n                }\n                // 将新值赋予目标\n                obj.style[attr] = newValue + 'px';\n                // 当元素移动到target时,停止执行动画\n                if (newValue == target) {\n                    // 达到目标关闭定时器\n                    clearInterval(obj.timer);\n                    // 动画执行完毕调用回调函数 callback\n                    callback &amp;&amp; callback();\n                }\n\n            }, 30);\n        }\n        function getStyle (obj, name) {\n            if (window.getComputedStyle) {\n                // 正常浏览器的方式,具有getComputedStyle()方法\n                return getComputedStyle(obj, null)[name];\n            } else {\n                // IE8的方式,没有getComputedStyle()方法\n                return obj.currentStyle[name];\n            }\n        }\n\n        btn.addEventListener('click', function () {\n            move(div, \"left\", 300, 10, function () {\n                move(div,\"width\",500,10,function() {\n                    move(div,\"height\",300,10,function(){\n                        move(div,\"bottom\",100,10,function(){\n                            move(div,\"top\",100,10,function(){\n                                move(div,\"left\",-200,10,function(){})\n                            })\n                        })\n                    })\n                })\n            })\n        })\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;</code></pre>\n<h2 id=\"%F0%9F%8F%83%E7%BD%91%E9%A1%B5%E8%BD%AE%E6%92%AD%E5%9B%BE\">🏃网页轮播图</h2>\n<p>轮播图也称为焦点图，是网页中比较常见的特效，今天做一下这个典型案例。</p>\n<h3 id=\"%F0%9F%8D%89%E5%88%B6%E4%BD%9C%E8%BD%AE%E6%92%AD%E5%9B%BE%E7%9A%84%E7%A9%BA%E9%97%B4%E7%9B%92%E5%AD%90%EF%BC%8C%E7%94%A8%E6%9D%A5%E5%AD%98%E6%94%BE%E5%9B%BE%E7%89%87\">🍉制作轮播图的空间盒子，用来存放图片</h3>\n<p>我们可以根据自己的喜好设置自己轮播图的相关样式，这里就就需要借助HTML和CSS了，讲真<span style=\"color:#be191c;\"><strong>HTML和CSS是重点基础</strong></span>，如果这两个没学好，是制作不出自己想要的样式，更别提后面的JS以及相关框架了，基础才是最重要的。</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;style&gt;\n        *{\n            margin: 0;\n            padding: 0;\n        }\n        /* 设置outer样式 */\n        #outer{\n            /* 设置宽高 */\n            width: 820px;\n            height: 452px;\n            /* 居中 */\n            margin: 50px auto;\n            /* 设置背景颜色 */\n            background-color: #008c8c;\n            /* 设置padding */\n            padding: 10px 0;\n            /* 开启相对定位 */\n            position: relative;\n            /* 溢出隐藏 */\n            overflow: hidden;\n\n        }\n        /* 设置imgList */\n        #imgList{\n            /* 去除项目符号 */\n            list-style: none;\n            /* 设置ul宽度 */\n            /* width: 3280px; */\n            /* 开启绝对定位 */\n            position: absolute;\n            /* 设置偏移量，每向左移动820px 就会显示下一张图片 */\n        }\n        /* 设置li */\n        #imgList li{\n            /* 设置浮动 */\n            float: left;\n            /* 设置左右外边距 */\n            margin: 0 10px;\n        }\n        /* 设置导航按钮 */\n        .navDiv{\n            /* 开启绝对定位 */\n            position: absolute;\n            /* 设置位置 */\n            bottom: 20px;\n            /* left: 35%; */\n        }\n        .navDiv a{\n            /* 设置浮动，浮动之后，行内元素就能设置宽高 */\n            float: left;\n            /* 设置宽高 */\n            width: 25px;\n            height: 25px;\n            /* 设置背景颜色 */\n            background-color: #f00;\n            /* 设置左右外边距 */\n            margin: 0 15px;\n            /* 设置半透明 */\n            opacity: .5;\n            /* 设置圆角 */\n            border-radius: 50%;\n        }\n        /* 设置鼠标移入效果 */\n        .navDiv a:hover{\n            background-color: green;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;!-- 创建一个外部的div作为一个大的容器 --&gt;\n    &lt;div id=\"outer\"&gt;\n        &lt;!-- 创建一个ul，用于放置图片 --&gt;\n        &lt;ul id=\"imgList\"&gt;\n\n            &lt;li&gt;&lt;img src=\"./01.jpeg\"&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;img src=\"./02.jpeg\"&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;img src=\"./03.jpeg\"&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;img src=\"./04.jpeg\"&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;img src=\"./01.jpeg\"&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n        &lt;!-- 设置导航按钮 --&gt;\n        &lt;div class=\"navDiv\"&gt;\n            &lt;a href=\"javascript:;\"&gt;&lt;/a&gt;\n            &lt;a href=\"javascript:;\"&gt;&lt;/a&gt;\n            &lt;a href=\"javascript:;\"&gt;&lt;/a&gt;\n            &lt;a href=\"javascript:;\"&gt;&lt;/a&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p><img alt=\"\" height=\"713\" src=\"..\\..\\static\\image\\33893630551f4d14ad435f9b6a41f836.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"601\" src=\"..\\..\\static\\image\\4b7c2c5a0ef24213a96a33003f657232.png\" width=\"1096\"/></p>\n<p> </p>\n<p><span style=\"color:#be191c;\"><strong>这里需要注意两点</strong></span>：</p>\n<p>轮播图的按钮是要通过JS来居中，因为如果借助CSS居中，就会写死，后期添加图片又要重新设置。</p>\n<p><strong>javascript:;</strong>是一个伪协议，加在超级链接上就可以防止 链接跳转，从而可以给链接JS上写自己想执行的代码。javascript:void(0) 表示一个死链接，执行空事件。</p>\n<h3 id=\"%F0%9F%8D%8A%E7%82%B9%E5%87%BB%E5%B0%8F%E5%9C%86%E5%9C%88%E5%8F%AF%E4%BB%A5%E6%92%AD%E6%94%BE%E7%9B%B8%E5%BA%94%E7%9A%84%E5%9B%BE%E7%89%87\">🍊点击小圆圈可以播放相应的图片</h3>\n<pre><code class=\"language-javascript\">&lt;script&gt;\n    window.addEventListener('load',function(){\n        // 获取ul标签\n        var ul = document.querySelector('#imgList')\n        // 获取ul下li的子元素的个数,并给ul动态赋予宽度值\n        ul.style.width = ul.children.length * 820 + 'px';\n\n        // 设置导航按钮动态居中\n        var navDiv = document.querySelector('.navDiv');\n        var outer = document.querySelector('#outer');\n        navDiv.style.left = (outer.offsetWidth - navDiv.offsetWidth) / 2 + 'px';\n\n        // 默认显示图片的索引\n        var index = 0;\n        // 获取所有的a\n        var aAll = document.querySelector('.navDiv').querySelectorAll('a');\n\n        // 为所有超链接绑定响应函数\n        for(var i = 0;i&lt;aAll.length;i++){\n            // 为每一个超链接都添加一个num属性\n            aAll[i].num = i;\n            // 为超链接绑定点击响应函数\n            aAll[i].addEventListener('click',function(){\n                \n                // 获取超链接的索引,并将其设置为index\n                index = this.num;\n                // 切换图片\n                imgList.style.left = -820*index + 'px';\n                setA();\n            })\n        }\n        // 创建一个方法用来选中a\n        function setA(){\n            for(var i = 0;i&lt;aAll.length;i++){\n                aAll[i].style.backgroundColor = '';\n            }\n            // 创建点击时的颜色\n            aAll[index].style.backgroundColor = 'green';\n        }   \n    })\n&lt;/script&gt;</code></pre>\n<p>通过JS书写动态给按钮进行居中，并设置一个点击事件，来进行图片的切换并且按钮样式虽图片的变化而变化，这里借用了“排他思想”，先干掉所有人，然后保留自己人。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/61805867a1b745c4ad97415774392946.gif\"/></p>\n<h3 id=\"%F0%9F%8D%8B%E9%BC%A0%E6%A0%87%E4%B8%8D%E7%82%B9%E5%87%BB%EF%BC%8C%E8%BD%AE%E6%92%AD%E5%9B%BE%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%92%AD%E6%94%BE\">🍋鼠标不点击，轮播图会自动播放</h3>\n<p>自动播放就涉及动画函数了，根据上文的回调地狱的讲解，将动画函数move进行封装。如下：</p>\n<pre><code class=\"language-javascript\">function move(obj,attr,target,speed,callback){\n    // 关闭上一个定时器\n    clearInterval(obj.timer);\n\n    // 获取元素当前位置\n    var current = parseInt(getStyle(obj,attr));\n    // 判断速度的正负值\n    if(current &gt; target){\n        // 此时速度应为负值\n        speed = -speed;\n    }\n\n    // 开启一个定时器,用来执行动画效果\n    // 向执行动画的对象添加一个timer属性,用来保存它自己的定时器\n    obj.timer = setInterval(function(){\n        // 获取目标原来的left值\n        var oldValue = parseInt(getStyle(obj,attr));\n        // 在旧值的基础上增加\n        var newValue = oldValue + speed;\n        /* \n        向左移动时,需要判断newValue是否小于target\n        向右移动时,需要判断newValue是否大于target\n        */\n        if((speed &lt; 0 &amp;&amp; newValue &lt; target) || (speed &gt; 0 &amp;&amp; newValue &gt; target)){\n            newValue = target;\n        }\n        // 将新值赋予目标\n        obj.style[attr] = newValue + 'px';\n        // 当元素移动到target时,停止执行动画\n        if(newValue == target){\n            // 达到目标关闭定时器\n            clearInterval(obj.timer);\n            // 动画执行完毕调用回调函数 callback\n            callback &amp;&amp; callback();\n        }\n\n    },30);\n}\nfunction getStyle(obj,name){\n    if(window.getComputedStyle){\n        // 正常浏览器的方式,具有getComputedStyle()方法\n        return getComputedStyle(obj,null)[name];\n    }else{\n        // IE8的方式,没有getComputedStyle()方法\n        return obj.currentStyle[name];\n    }\n}\n\n</code></pre>\n<p>接下里通过引入move函数实现动画效果。</p>\n<pre><code class=\"language-javascript\">&lt;script&gt;\n    window.addEventListener('load',function(){\n        // 获取ul标签\n        var ul = document.querySelector('#imgList')\n        // 获取ul下li的子元素的个数,并给ul动态赋予宽度值\n        ul.style.width = ul.children.length * 820 + 'px';\n\n        // 设置导航按钮动态居中\n        var navDiv = document.querySelector('.navDiv');\n        var outer = document.querySelector('#outer');\n        navDiv.style.left = (outer.offsetWidth - navDiv.offsetWidth) / 2 + 'px';\n\n        // 默认显示图片的索引\n        var index = 0;\n        // 获取所有的a\n        var aAll = document.querySelector('.navDiv').querySelectorAll('a');\n        // 设置默认选中效果\n        aAll[index].style.backgroundColor = 'green';\n\n        // 为所有超链接绑定响应函数\n        for(var i = 0;i&lt;aAll.length;i++){\n            // 为每一个超链接都添加一个num属性\n            aAll[i].num = i;\n            // 为超链接绑定点击响应函数\n            aAll[i].addEventListener('click',function(){\n                //关闭自动切换的定时器\n                clearInterval(stop);\n                \n                // 获取超链接的索引,并将其设置为index\n                index = this.num;\n                // 切换图片\n                // imgList.style.left = -820*index + 'px';\n                setA();\n                move(imgList,\"left\",-820*index,20,function(){\n                    //动画执行完毕，开启自动切换\n                    autoChange();\n                })\n            })\n        }\n        // // 开启自动切换图片\n        autoChange();\n        \n        // 创建一个方法用来选中a\n        function setA(){\n            // 判断当前索引是否是第一张\n            if(index &gt;= ul.children.length-1){\n                // 则将index设置为0\n                index = 0;\n                // 此时显示最后一张图片，而最后一张图片和第一张一模一样\n                // 通过CSS将最后一张切换成第一张\n                imgList.style.left = 0 + 'px';\n            }\n            for(var i = 0;i&lt;aAll.length;i++){\n                aAll[i].style.backgroundColor = '';\n            }\n            // 创建点击时的颜色\n            aAll[index].style.backgroundColor = 'green';\n        }   \n        // 创建一个函数,用来开启自动切换图片\n        // 定义一个自动切换的定时器的标识\n        var stop;\n        function autoChange(){\n            // 开启一个定时器,用来定时切换图片\n            stop = setInterval(function(){\n                // 使索引自增\n                index++;\n                \n                // 判断index的值\n                index %= ul.children.length;\n                \n                // 执行动画来切换图片\n                move(imgList,\"left\",-820*index,20,function(){\n                    // 设置导航点\n                    setA();\n                })\n            },3000);\n        };\n    })\n    \n&lt;/script&gt;\n&lt;script src=\"./move.js\"&gt;&lt;/script&gt;</code></pre>\n<p>可以看到代码中，我们设计了一个定时器实现自动切换图片，并设计<span style=\"color:#be191c;\"><strong>在点击函数中关闭定时器</strong></span>，这样就不会出现点击事件和自动播放发生冲突，造成图片的怪异播放现象。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/d30d177e7dc84af188c57b286a8ad402.gif\"/></p>\n<h3 id=\"%F0%9F%8D%8C%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81\">🍌完整代码</h3>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;style&gt;\n        *{\n            margin: 0;\n            padding: 0;\n        }\n        /* 设置outer样式 */\n        #outer{\n            /* 设置宽高 */\n            width: 820px;\n            height: 452px;\n            /* 居中 */\n            margin: 50px auto;\n            /* 设置背景颜色 */\n            background-color: #008c8c;\n            /* 设置padding */\n            padding: 10px 0;\n            /* 开启相对定位 */\n            position: relative;\n            /* 溢出隐藏 */\n            overflow: hidden;\n\n        }\n        /* 设置imgList */\n        #imgList{\n            /* 去除项目符号 */\n            list-style: none;\n            /* 设置ul宽度 */\n            /* width: 3280px; */\n            /* 开启绝对定位 */\n            position: absolute;\n            /* 设置偏移量，每向左移动820px 就会显示下一张图片 */\n        }\n        /* 设置li */\n        #imgList li{\n            /* 设置浮动 */\n            float: left;\n            /* 设置左右外边距 */\n            margin: 0 10px;\n        }\n        /* 设置导航按钮 */\n        .navDiv{\n            /* 开启绝对定位 */\n            position: absolute;\n            /* 设置位置 */\n            bottom: 20px;\n            /* left: 35%; */\n        }\n        .navDiv a{\n            /* 设置浮动，浮动之后，行内元素就能设置宽高 */\n            float: left;\n            /* 设置宽高 */\n            width: 25px;\n            height: 25px;\n            /* 设置背景颜色 */\n            background-color: #f00;\n            /* 设置左右外边距 */\n            margin: 0 15px;\n            /* 设置半透明 */\n            opacity: .5;\n            /* 设置圆角 */\n            border-radius: 50%;\n        }\n        /* 设置鼠标移入效果 */\n        .navDiv a:hover{\n            background-color: green;\n        }\n    &lt;/style&gt;\n    &lt;script&gt;\n        window.addEventListener('load',function(){\n            // 获取ul标签\n            var ul = document.querySelector('#imgList')\n            // 获取ul下li的子元素的个数,并给ul动态赋予宽度值\n            ul.style.width = ul.children.length * 820 + 'px';\n\n            // 设置导航按钮动态居中\n            var navDiv = document.querySelector('.navDiv');\n            var outer = document.querySelector('#outer');\n            navDiv.style.left = (outer.offsetWidth - navDiv.offsetWidth) / 2 + 'px';\n\n            // 默认显示图片的索引\n            var index = 0;\n            // 获取所有的a\n            var aAll = document.querySelector('.navDiv').querySelectorAll('a');\n            // 设置默认选中效果\n            aAll[index].style.backgroundColor = 'green';\n\n            // 为所有超链接绑定响应函数\n            for(var i = 0;i&lt;aAll.length;i++){\n                // 为每一个超链接都添加一个num属性\n                aAll[i].num = i;\n                // 为超链接绑定点击响应函数\n                aAll[i].addEventListener('click',function(){\n                    //关闭自动切换的定时器\n                    clearInterval(stop);\n                    \n                    // 获取超链接的索引,并将其设置为index\n                    index = this.num;\n                    // 切换图片\n                    // imgList.style.left = -820*index + 'px';\n                    setA();\n                    move(imgList,\"left\",-820*index,20,function(){\n                        //动画执行完毕，开启自动切换\n                        autoChange();\n                    })\n                })\n            }\n            // // 开启自动切换图片\n            autoChange();\n            \n            // 创建一个方法用来选中a\n            function setA(){\n                // 判断当前索引是否是第一张\n                if(index &gt;= ul.children.length-1){\n                    // 则将index设置为0\n                    index = 0;\n                    // 此时显示最后一张图片，而最后一张图片和第一张一模一样\n                    // 通过CSS将最后一张切换成第一张\n                    imgList.style.left = 0 + 'px';\n                }\n                for(var i = 0;i&lt;aAll.length;i++){\n                    aAll[i].style.backgroundColor = '';\n                }\n                // 创建点击时的颜色\n                aAll[index].style.backgroundColor = 'green';\n            }   \n            // 创建一个函数,用来开启自动切换图片\n            // 定义一个自动切换的定时器的标识\n            var stop;\n            function autoChange(){\n                // 开启一个定时器,用来定时切换图片\n                stop = setInterval(function(){\n                    // 使索引自增\n                    index++;\n                    \n                    // 判断index的值\n                    index %= ul.children.length;\n                    \n                    // 执行动画来切换图片\n                    move(imgList,\"left\",-820*index,20,function(){\n                        // 设置导航点\n                        setA();\n                    })\n                },3000);\n            };\n        })\n        \n    &lt;/script&gt;\n    &lt;script src=\"./tool.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;!-- 创建一个外部的div作为一个大的容器 --&gt;\n    &lt;div id=\"outer\"&gt;\n        &lt;!-- 创建一个ul，用于放置图片 --&gt;\n        &lt;ul id=\"imgList\"&gt;\n\n            &lt;li&gt;&lt;img src=\"./01.jpeg\"&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;img src=\"./02.jpeg\"&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;img src=\"./03.jpeg\"&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;img src=\"./04.jpeg\"&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;img src=\"./01.jpeg\"&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n        &lt;!-- 设置导航按钮 --&gt;\n        &lt;div class=\"navDiv\"&gt;\n            &lt;a href=\"javascript:;\"&gt;&lt;/a&gt;\n            &lt;a href=\"javascript:;\"&gt;&lt;/a&gt;\n            &lt;a href=\"javascript:;\"&gt;&lt;/a&gt;\n            &lt;a href=\"javascript:;\"&gt;&lt;/a&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<blockquote>\n<p>🍃JavaScript的学习还是要以多练习为主，想要练习JavaScript的朋友，推荐可以去牛客网看一看，链接：<a class=\"link-info\" href=\"https://www.nowcoder.com/link/pc_csdncpt_ysfh_qianduan\" title=\"牛客网\">牛客网</a> 里面的IT题库内容很丰富，属于国内做的很好的了，最重要的是里面的资源是免费的，是课程+刷题+面经+求职+讨论区分享，一站式求职学习网站，感兴趣的可以去看看。</p>\n</blockquote>\n<p><img alt=\"\" height=\"411\" src=\"..\\..\\static\\image\\f87201d0b7e944b1981610b85f21fd99.png\" width=\"1152\"/></p>\n<p>呜呜~，原创不易。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/66a72e63f9664352b7f7cabaf44804e5.webp\"/></p>\n</div>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-08-01 10:02:57", "summary": "作者简介：大家好，我是亦世凡华、渴望知识储备自己的一名在校大学生个人主页：亦世凡华、的博客亦世凡华、的博客系列专栏：专栏专栏推荐一款模拟面试刷题神器：点击跳转进入网站点击跳转进入网站目录回调地狱具体分"}