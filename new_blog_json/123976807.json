{"blogid": "123976807", "writerAge": "码龄156天", "writerBlogNum": "18", "writerCollect": "361", "writerComment": "54", "writerFan": "158", "writerGrade": "2级", "writerIntegral": "337", "writerName": "Sheenky", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123976807.jpg", "writerRankTotal": "43545", "writerRankWeekly": "487825", "writerThumb": "115", "writerVisitNum": "46424", "blog_read_count": "19092", "blog_time": "于 2022-04-06 21:37:19 发布", "blog_title": "Python直接使用plot()函数画图", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E4%B8%80%E3%80%81plot%EF%BC%88%EF%BC%89%E5%87%BD%E6%95%B0%E7%9A%84%E8%AE%A4%E8%AF%86-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81plot%EF%BC%88%EF%BC%89%E5%87%BD%E6%95%B0%E7%9A%84%E8%AE%A4%E8%AF%86\">一、plot（）函数的认识</a></p>\n<p id=\"%E4%BA%8C%E3%80%81plot()%E5%87%BD%E6%95%B0%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%94%A8-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81plot%28%29%E5%87%BD%E6%95%B0%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%94%A8\">二、plot()函数基本运用</a></p>\n<p id=\"%C2%A0%E4%B8%89%E3%80%81plot()%E5%87%BD%E6%95%B0%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%94%BB%E5%9B%BE%E4%BB%A5%E5%8F%8A%E5%9B%BE%E5%85%83%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0%E4%B8%89%E3%80%81plot%28%29%E5%87%BD%E6%95%B0%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%94%BB%E5%9B%BE%E4%BB%A5%E5%8F%8A%E5%9B%BE%E5%85%83%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE\"> 三、plot()函数数据可视化画图以及图元基本参数设置</a></p>\n<hr id=\"hr-toc\"/>\n<h1 id=\"%E4%B8%80%E3%80%81plot%EF%BC%88%EF%BC%89%E5%87%BD%E6%95%B0%E7%9A%84%E8%AE%A4%E8%AF%86\">一、plot()函数的认识</h1>\n<p>在使用Python进行数据可视化编程中matplotlib库是我们用来对数据进行画图常用的第三方库。其中含有各类函数也就是不同类型的图形，要使用matplotlib库中的函数就需要了解函数所需要数据的格式，这也是我们学习matplotlib库的重点。</p>\n<p>直接使用plot（）函数画图，是对于一般的简单数据。我们可以采用直接调用plot（）函数对列表数据进行直接画图。初期学习直接使用plot（）函数能便于我们对后面图形学习奠定函数的参数及基础。</p>\n<p id=\"matplotlib图的组成：\">matplotlib图的组成：</p>\n<ul><li>Figure （画布）</li><li>Axes (坐标系)</li><li>Axis (坐标轴)</li><li>图形（plot(),scatter(),bar(),...)</li><li>Title, Labels, ......</li></ul>\n<p>直接是用plot（）函数画图如法如下：</p>\n<pre><code class=\"language-python\">plt.plot(x, y, fmt='xxx', linestyle=, marker=, color=, linewidth=, markersize=, label=, )</code></pre>\n<p>其中x,y代表横纵坐标，fmt = '#color#linestyle#marker'即代表各类参数。</p>\n<p>（1）linestyle：此字段是线的样式，参数形式：字符串</p>\n<table align=\"center\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\"><caption>\n  linestyle(线的样式)\n </caption><tbody><tr><td>linestyle参数</td><td>线形</td></tr><tr><td>'-'</td><td>实线</td></tr><tr><td>'--'</td><td>虚线</td></tr><tr><td>'-.'</td><td>点划线</td></tr><tr><td>':'</td><td>点虚线</td></tr><tr><td>' '</td><td>无线</td></tr></tbody></table>\n<p>（2）linewidth：此参数是线的粗细，粗细程度和所定数值大小有关，参数形式：数值</p>\n<p>（3）marker：点的样式，字符串</p>\n<table align=\"center\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\"><caption>\n  marker（点的样式）\n </caption><tbody><tr><td>marker</td><td>标记点</td></tr><tr><td>'.'</td><td>店</td></tr><tr><td>','</td><td>像素</td></tr><tr><td>'^' 'v' '&gt;' '&lt;'</td><td>上下左右三角形</td></tr><tr><td>'1' '2' '3' '4'</td><td>上下左右三叉线</td></tr><tr><td>'o'</td><td>圆形</td></tr><tr><td>'s' 'D'</td><td>方形</td></tr><tr><td>'p'</td><td>五边形</td></tr><tr><td>'h' 'H'</td><td>六边形</td></tr><tr><td>'*'</td><td>五角星</td></tr><tr><td>'+' 'x'</td><td>十字交叉</td></tr><tr><td>'_'</td><td>横线</td></tr><tr><td>'</td><td>'</td></tr></tbody></table>\n<p>（4）markersize：点的大小，参数形式：数值</p>\n<p>（5）color：调节线条还有点的颜色 ，字符串，参数形式字符串</p>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\"><caption>\n  color（点、线颜色）\n </caption><tbody><tr><td>字符串</td><td>color</td></tr><tr><td>'r'</td><td>红</td></tr><tr><td>'g'</td><td>绿</td></tr><tr><td>'b'</td><td>蓝</td></tr><tr><td>'y'</td><td>黄</td></tr><tr><td>'c'</td><td>青</td></tr><tr><td>'m'</td><td>品</td></tr><tr><td>'k'</td><td>黑</td></tr><tr><td>'w'</td><td>白</td></tr></tbody></table>\n<p>此处颜色参数还可以有二进制，十进制等表示方法，同时对于颜色，RGB是三原色</p>\n<p>（6）label：图例，legend文字</p>\n<h1 id=\"%E4%BA%8C%E3%80%81plot()%E5%87%BD%E6%95%B0%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%94%A8\">二、plot()函数基本运用</h1>\n<p>使用plot()函数时需要导入对应的库,导入库后我们在未有数据的情况下直接画图，直接画图会隐式创建Figure，Axes对象。</p>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nplt.plot()</code></pre>\n<p class=\"img-center\"><img alt=\"\" height=\"385\" src=\"..\\..\\static\\image\\0711b1bc28d8491ba981d5c1055f3105.png\" width=\"578\"/></p>\n<p> 下面通过构造数据绘制简单图形</p>\n<p>首先数据构造，设置参数，参数也可以在将数据填入plot（）函数的时候设置。</p>\n<pre><code class=\"language-python\"># 导入包\nimport matplotlib.pyplot as plt\nimport numpy as np\n# 构造数据\n# 位置 （2维：x,y一一对应）\nx = np.linspace(0, 2 * np.pi, 200)  # 从0到2pi的200个值\ny = np.sin(x)                       # 从sin(0)到sin(2pi)的200个值\n# 颜色（0维）\nc = 'red'\nc = 'r'\nc = '#FF0000'\n# 大小（0维）: 线宽\nlw = 1</code></pre>\n<p>画出图形</p>\n<pre><code class=\"language-python\"># 生成一个Figure画布和一个Axes坐标系\nfig, ax = plt.subplots()\n# 在生成的坐标系下画折线图\nax.plot(x, y, c, linewidth=lw)\n# 显示图形\nplt.show()</code></pre>\n<p>图形展示：</p>\n<p><img alt=\"\" height=\"376\" src=\"..\\..\\static\\image\\1518891f48294df7b360f21d2b0be5c4.png\" width=\"586\"/></p>\n<p>给定两组数据，建立y与x的关系试，使用plot函数进行画图，本次画图线条选用点虚线形式，粗细选用1，点选用方形，点大小选用值为10，图例为‘1234’</p>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nx = [1,2,3]\ny = [1,2,3]\ny = x\nplt.plot(x,y,linestyle=':', linewidth=1, marker='d', markersize=10, label='1234')\nplt.legend()</code></pre>\n<p>作出图片如下;</p>\n<p class=\"img-center\"><img alt=\"\" height=\"383\" src=\"..\\..\\static\\image\\52cb7415ed924f819a1a1ec5819fc788.png\" width=\"558\"/></p>\n<p> 下面我们引用numpy的linspace函数生创建均匀分布序列，然后对x，y建立数值关系，由此来创建图画。</p>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(-100,100,10)\ny = x**2 + 2*x +1\nplt.plot(x,y,'g-.o')</code></pre>\n<p>作出如下图案，由此可见，我们对于图形的设置方面，在我们熟练以后如果没有粗细的设置可以直接缩减再一个字符串里面</p>\n<p><img alt=\"\" height=\"383\" src=\"..\\..\\static\\image\\1816d8c8509d43f593d79c9700480766.png\" width=\"577\"/></p>\n<p>以上都是简单图形的讲解，我们现在通过一个简单的对数据DataFrame进行作图，在往后的数据可视化中我们需要对数据进行处理后再进行可视化。下面我们通过正、余弦函数进行作图。</p>\n<pre><code class=\"language-python\">#导入包\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n#使用linspace（）方法构成数据\nx = np.linspace(0, 2 * np.pi, 50)  # \ny1 = np.sin(x)\ny2 = np.cos(x)\n#转化数据形式\ndf = pd.DataFrame([x,y1,y2]).T\n#对列重新命名\ndf.columns = ['x','sin(x)','cos(x)']\n#数据写入图像，命名图例\nplt.plot(df['x'],df['sin(x)'],label='sin(x)')\nplt.plot(df['x'],df['cos(x)'],label='cos(x)')\nplt.legend()</code></pre>\n<p>我们通过numpy的linspace方法生成数据再通过pandas对数据进行DataFrame化再带入plot()函数，此处需要讲的就是图例的命名方法，通过在函数中写入label参数，确定图例的标签，再通过legend（）函数生成图例，在后续的学习中也会讲到图例的位置、形式等的运用。</p>\n<p class=\"img-center\"><img alt=\"\" height=\"388\" src=\"..\\..\\static\\image\\614a1c75c63c42f98c9eeadbd2d204ee.png\" width=\"603\"/></p>\n<p style=\"text-align:center;\"> </p>\n<h1 id=\"%C2%A0%E4%B8%89%E3%80%81plot()%E5%87%BD%E6%95%B0%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%94%BB%E5%9B%BE%E4%BB%A5%E5%8F%8A%E5%9B%BE%E5%85%83%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE\"> 三、plot()函数数据可视化画图以及图元基本参数设置</h1>\n<p>通过绘制世界人口变化曲线图了解基本图元参数设置，本次绘图过程主要是先通过对人口数据导入，了解数据构造，再进配置画图参数最后完成图形的制作，其中基本的图元参数用于别的图形也适用，在这儿学会了我们只需要了解数据结构，构造成图形所要的数据结构就可以就行画出自己想要的图形。</p>\n<p>首先进行数据导入，了解数据结构形式。为了学习方便，选用jupyter notebook进行可视化图形讲解。</p>\n<pre><code class=\"language-python\">import pandas as pd\ndatafile = r'world_population.txt'  # 打开文件\ndf = pd.read_csv(datafile)  #读取数据\ndf.head()#展示前面部分数据</code></pre>\n<p>以下就是基本的数据样式，由年份和人口数量组成</p>\n<p class=\"img-center\"><img alt=\"\" height=\"225\" src=\"..\\..\\static\\image\\7bb992eddf954b20868f8b786551e6d9.png\" width=\"224\"/></p>\n<p> 这里做了基本的图元设计，也就是对于画布的设置，前面我们所学函数参数都是对于图形中间的设置，我们构成一个可视化界面是通过画布+画中图形样式组成一个完整的可视化界面。</p>\n<p>画布界面有画布大小，画布像素，画布界面，画布边框等设置。</p>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\n# 画布\nfig = plt.figure(figsize=(6,4),  # inches\n                 dpi=120, # dot-per-inch\n                 facecolor='#BBBBBB',\n                 frameon=True, # 画布边框\n                )  \nplt.plot(df['year'],df['population'])\n\n# 标题\nplt.title(\"1960-2009 World Population\")</code></pre>\n<p>构成一个完整的可视化图像除了图例还有图像的标题，我们可以通过title()方法设置英文标题，中文标题要通过以下代码才能实现，因此我们如果是做中文项目在导入包以后就可以写上设置中文代码的代码串。</p>\n<pre><code class=\"language-python\"># 设置中文字体\nplt.rcParams['font.sans-serif'] = 'SimHei'  # 设置字体为简黑（SimHei）\nplt.rcParams['font.sans-serif'] = 'FangSong'  # 设置字体为仿宋（FangSong）</code></pre>\n<p><img alt=\"\" height=\"228\" src=\"..\\..\\static\\image\\025d93f236a94139aee43dc4863d7e80.png\" width=\"325\"/><img alt=\"\" height=\"230\" src=\"..\\..\\static\\image\\2ec36ff464b743ae97eb65f56fa6d081.png\" width=\"323\"/></p>\n<p> 当然，除了这种比较简单的图形之外我们还能对图形进行优化设置，将数据显示的更加的精美和美观，对图形优化便于实际报告中的演示也是我们现在必不可少的的一环。</p>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\n\n# 设置中文字体\nplt.rcParams['axes.unicode_minus'] = False    # 不使用中文减号\nplt.rcParams['font.sans-serif'] = 'FangSong'  # 设置字体为仿宋（FangSong）\n\n# 画布\nfig = plt.figure(figsize=(6,4),  # inches\n                 dpi=120, # dot-per-inch\n                 facecolor='#BBBBBB',\n                 frameon=True, # 画布边框\n                )  \nplt.plot(df['year'],df['population'],'b:o',label='人口数')\n\n# 中文标题\nplt.title(\"1960-2009 世界人口\")\n\n# 字体字典\nfont_dict=dict(fontsize=8,\n              color='k',\n              family='SimHei',\n              weight='light',\n              style='italic',\n              )\n\n# X轴标签\nplt.xlabel(\"年份\", loc='center', fontdict=font_dict)   # loc: 左中右 left center right\n\n# Y轴标签\nplt.ylabel(\"人口数\",loc='top', fontdict=font_dict)  # loc: 上中下 top center bottom\n\n# X轴范围\nplt.xlim((2000,2010))  # X轴的起点和终点\n\n# Y轴范围\nplt.ylim(6e9,7e9) # Y轴的起点和终点\n\n# X轴刻度\nplt.xticks(np.arange(2000,2011))\n\n# X轴刻度\nplt.yticks(np.arange(6e9,7e9+1e8,1e8))\n\n# 图例\nplt.legend()\n# plt.legend(labels=['人口'])\n\n# 网格线\nplt.grid(axis='y')  # axis: 'both','x','y'</code></pre>\n<p> 上述代码，对x轴，y轴的刻度、标签、字体进行定义，对图例、网格线等也做出了参数的设置，最后做出的图形如下图：</p>\n<p><img alt=\"\" height=\"452\" src=\"..\\..\\static\\image\\9a856cfb2b1849ce80506e42c253f9d1.png\" width=\"654\"/></p>\n</div>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-04-06 21:37:19", "summary": "目录一、函数的认识二、函数基本运用三、函数数据可视化画图以及图元基本参数设置一、函数的认识在使用进行数据可视化编程中库是我们用来对数据进行画图常用的第三方库。其中含有各类函数也就是不同类型的图形，要使"}