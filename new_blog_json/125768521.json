{"blogid": "125768521", "writerAge": "码龄1年", "writerBlogNum": "47", "writerCollect": "584", "writerComment": "568", "writerFan": "653", "writerGrade": "5级", "writerIntegral": "1612", "writerName": "沃和莱特", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125768521.jpg", "writerRankTotal": "11287", "writerRankWeekly": "3169", "writerThumb": "357", "writerVisitNum": "76836", "blog_read_count": "9414", "blog_time": "已于 2022-07-27 21:22:04 修改", "blog_title": "C++学习——坚持（二）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"_0\"></a>前言</h1>\n<p><mark><font color=\"#1E90FF\" face=\"courier New\">努力不一定成功，但是坚持做好一件事一定很酷。</font></mark></p>\n<p>在上一篇文章 <a href=\"https://blog.csdn.net/weixin_64122448/article/details/125556171?spm=1001.2014.3001.5501\">C++学习——共勉（一）</a> 中学习了C++语言的特点和程序结构，这篇文章就简单看看面向对象的基本概念。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6bce345c79124f46a36b8272655589a9.png\"/></p>\n<h2><a id=\"_8\"></a>一：结构化程序设计</h2>\n<p>在面向对象程序设计方法出现之前，软件界流行的主流设计方法之一就是结构化程序设计方法，也称为面向对象的设计方法。<br/> 在机构化程序设计中，采用自顶向下、逐步求精以及模块化思想，有个著名的公式体现了这一思想：数据结构+算法=程序。可以说，程序基本上都含有顺序、选择、循环3种基本控制结构。</p>\n<blockquote>\n<p>一个完整的c++程序包括以下几个部分：</p>\n<ol><li>一个主函数，可以用来调用其他函数，也叫做主程序（关于主函数是否能被调用，我在网上也查了一些资料并实验了一下：如果不加约束条件去调用主函数的话就会死循环，这时候考虑用递归的思想去调用就能运行出来。但是一般情况下不会对主函数进行调用，个人觉得c++中主函数能否被调用应该还未定义，期待前辈们指点！）</li><li>自主定义的任意多个类和全局函数</li><li>全局说明，在所有函数和类定义之外的变量说明和函数原型</li><li>必要注释</li><li>头文件</li></ol>\n</blockquote>\n<p><mark>对于比较大的文件，可以根据主函数和所定义的各个类以及全局函数的功能和相互关系，可以将类和全局函数划分为几个程序文件，包括 <strong>cpp.</strong> 文件（源程序文件）和 <strong>.h</strong> 文件（头文件）。</mark></p>\n<h3><a id=\"1_22\"></a>1：面向对象的程序设计</h3>\n<p>对象就是数据+函数，也就是属性+操作。举个简单的例子：员工的姓名、职位、工资等就是一个个变量；员工进行加班、出差、摸鱼划水，或者获得提拔、炒鱿鱼等就是操作；而操作会施加于属性，比如“加班、出差、摸鱼划水”操作会修改“工资”属性；“提拔、炒鱿鱼“操作会修改”职位“属性。<br/> <mark>用对象名标识一个个对象，用数据表示对象的属性，再用函数实现操作。</mark><br/> C++中使用对象名、属性、操作三要素来描述对象。</p>\n<h3><a id=\"2_26\"></a>2：类模型结构</h3>\n<p>类模型结构和对象结构很相似，它们都含有属性和操作，<mark>唯一不同的是对象结构图中有对象名而没有类名；类模型结构图中有类名但没有对象名。</mark><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ffba5e944c83484a92cf5b86ebeb32dd.png\"/><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3c25730d51a143a4ae8efdb56fd04aac.png\"/></p>\n<h2><a id=\"_30\"></a>二：创建类对象的基本形式</h2>\n<p>定义一个普通对象，即类变量的基本方法有两种：<br/> <strong>方法一</strong></p>\n<blockquote>\n<p><code>类名 对象名;</code><br/> 或<br/> <code>类名 对象名（参数）;</code><br/> 或<br/> <code>类名 对象名 = 类名（参数）;</code></p>\n</blockquote>\n<blockquote>\n<p>可以扩展为对个对象：<br/> <code>类名 对象名1，对象名2，....;</code><br/> 或者<br/> <code>类名 对象名 1（参数1），对象名2(参数2）,...;</code></p>\n</blockquote>\n<p><strong>方法二</strong></p>\n<blockquote>\n<p><code>类名 *对象指针名 =new 类名;</code> //使用该方法调用函数时，调用无参的构造函数，如果这个构造函数是由编译器为类提供的，那么类中成员变量不进行初始化。<br/> 或者<br/> <code>类名 *对象指针名 =new 类名（）;</code> //在创建对象时调用无参的构造函数。如果这个构造函数时由编辑器为类提供的，那么对类中的成员变量进行初始化。<br/> 或者<br/> <code>类名 *对象名指针 =new 类名（参数）;</code><br/> 使用new创建对象时返回的是一个对象指针，这个指针指向本类刚创建的这个对象。使用new 创建的对象，必须用delete撤销。</p>\n</blockquote>\n<blockquote>\n<p>声明对象引用（变量别名）格式：<br/> <code>类名 &amp;对象引用名=对象;</code></p>\n</blockquote>\n<blockquote>\n<p>声明对象指针格式：<br/> <code>类名 *对象指针名=对象的地址;</code></p>\n</blockquote>\n<blockquote>\n<p>声明对象数组格式：<br/> <code>类名 对象数组名[数组大小];</code></p>\n</blockquote>\n<p>例如，我们定义了一个类 A：</p>\n<pre><code class=\"prism language-cpp\">A b1，c1；<span class=\"token comment\">//定义A类的对象b1和c1</span>\nA <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>b1<span class=\"token punctuation\">;</span><span class=\"token comment\">//定义一个类型为A类的指针，指向对象b1</span>\nA <span class=\"token operator\">&amp;</span>Q<span class=\"token operator\">=</span>c1；<span class=\"token comment\">//定义A类类型对象C1的引用Q</span>\nA B<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//定义A类类型对象的数组B，含有3个元素</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6ff70e9663da4554860e8d0c62cccba4.png\"/></p>\n<h2><a id=\"_73\"></a>三：类的初步知识</h2>\n<h3><a id=\"1_74\"></a>1：类的定义</h3>\n<p>面向对象方法中的类，是对具有相同属性中的同一类对象的抽象描述，其内部包括属性（本类的成员变量）和行为（本类的成员函数）两个主要部分，也就是类以数据为中心把相关的函数组成为一体。<br/> 在C++中，类定义的一般格式：</p>\n<pre><code class=\"prism language-c++\">   class 类名\n   {\n   访问范围说明符：\n   成员变量 1\n   成员变量 2\n   ...\n   成员函数声明 1\n   成员函数声明 2\n   ...\n   访问范围说明符：\n   更多成员变量\n   更多成员函数变量\n   }\n</code></pre>\n<blockquote>\n<p>类以关键字 class 开始，后面是类名。类名的定义遵循一般的标识符命名规则，也就是<mark>字母、数字、下划线的组合并且对大小写敏感，但不能使用数字开头，也不能和系统中使用的关键字完全相同。</mark><br/> 类是具有唯一标识符的实体，就是说类名不能完全 重复，类的定义以“ ；” 结束，大括号中的部分叫做类体。</p>\n</blockquote>\n<p>“成员变量”是类中的一类成员，代表对象的属性，个数不限，也称为数据成员。成员变量的声明方式和普通变量的声明方式相同。“成员函数“是类中的另一类成员，代表对该类对象所含数据操作的方法，个数不限，其声明方式和普通函数的相同。<br/> 成员变量和成员函数的出现次序没有限制，一个类的成员函数之可以相互调用，类中可以不含有任何成员变量和成员函数，这样的类叫做“空类”。<br/> 成员函数既可以在类体内定义，也可以在类体外定义。如果成员函数定义在类体内部，则默认是内联函数<br/> <mark>如果成员函数定义在类体外，则类体内必须要有函数原型，类体外函数定义的前面要有限定，格式为：</mark></p>\n<blockquote>\n<p>返回值类型 类名::成员函数名（参数列表）<br/> {<!-- --><br/> 成员函数的函数体<br/> }<br/> 类名是成员函数所属类的名字， 符号 :: 是类作用域的运算符，表明它后面的成员函数是属于类名标识的这个类的。返回值类型就是这个成员函数返回值的类型。</p>\n</blockquote>\n<h3><a id=\"2_105\"></a>2：类成员的可访问范围</h3>\n<p>访问范围说明符一共有三种 <mark>public（公有），private（私有），protect（保护）</mark>，在类的定义中可以以任意的次序出现多次。</p>\n<table><thead><tr><th>public</th><th>使用它修饰的类成员可以在程序任何地方被访问</th></tr></thead><tbody><tr><td>private</td><td>使用它修饰的类成员仅能在本类中被访问</td></tr><tr><td>protect</td><td>使用它修饰的类成员能在本类内和子类中被访问</td></tr></tbody></table>\n<blockquote>\n<p>成员的可访问范围由它之前离得最近的访问范围说明符决定，如果某个成员前面没有访问范围说明符，那么对于类来说，该成员默认为私有成员。</p>\n</blockquote>\n<pre><code class=\"prism language-cpp\">\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">//公有成员变量</span>\n\t\t<span class=\"token keyword\">int</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//公有成员函数</span>\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">;</span><span class=\"token comment\">//私有成员变量</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//私有成员函数</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">char</span> e<span class=\"token punctuation\">;</span><span class=\"token comment\">//公有成员变量</span>\n\t\t<span class=\"token keyword\">int</span> f<span class=\"token punctuation\">;</span><span class=\"token comment\">//公有成员变量</span>\n\t\t<span class=\"token keyword\">int</span> <span class=\"token function\">func3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//公有成员函数</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_129\"></a>类成员访问示例</h3>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* run this program using the console pauser or add your own getch, system(\"pause\") or input loop */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Staff</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span><span class=\"token comment\">//私有成员</span>\n\t\tstring name<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> salary<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><span class=\"token comment\">//公有成员</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstring <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">setSalary</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> <span class=\"token function\">getSalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> <span class=\"token function\">averageSalary</span><span class=\"token punctuation\">(</span>Staff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token class-name\">Staff</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>string myname<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tname<span class=\"token operator\">=</span>myname<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tstring <span class=\"token class-name\">Staff</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token class-name\">Staff</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setSalary</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> mysalary<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tsalary<span class=\"token operator\">=</span>mysalary<span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token class-name\">Staff</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getSalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> salary<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token class-name\">Staff</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">averageSalary</span><span class=\"token punctuation\">(</span>Staff s1<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>salary<span class=\"token operator\">+</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">getSalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tStaff sL<span class=\"token punctuation\">,</span>sS<span class=\"token punctuation\">;</span>\n\tsL<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Linda\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//name 是私有变量，不能直接访问，需要通过公有成员setName来访问</span>\n\tsL<span class=\"token punctuation\">.</span><span class=\"token function\">setSalary</span><span class=\"token punctuation\">(</span><span class=\"token number\">12345</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//salary 也是私有变量，需要借助公有成员 setSalary来访问</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"第一个员工的姓名和薪水是：\"</span><span class=\"token operator\">&lt;&lt;</span>sL<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\",\"</span><span class=\"token operator\">&lt;&lt;</span>sL<span class=\"token punctuation\">.</span><span class=\"token function\">getSalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\tsS<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Susan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsS<span class=\"token punctuation\">.</span><span class=\"token function\">setSalary</span><span class=\"token punctuation\">(</span><span class=\"token number\">54321</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"第二个员工的姓名和薪水是：\"</span><span class=\"token operator\">&lt;&lt;</span>sS<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\",\"</span><span class=\"token operator\">&lt;&lt;</span>sS<span class=\"token punctuation\">.</span><span class=\"token function\">getSalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"两个员工的平均薪水是：\"</span><span class=\"token operator\">&lt;&lt;</span>sL<span class=\"token punctuation\">.</span><span class=\"token function\">averageSalary</span><span class=\"token punctuation\">(</span>sS<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\448aafd81546419f97399321072c0d8d.png\"/></p>\n<h3><a id=\"3__183\"></a>3： 类的定义示例</h3>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//定义一个日期类myDate</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">myDate</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">myDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//构造函数 </span>\n\t<span class=\"token function\">myDate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//构造函数 </span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setDate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//设置日期 </span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setDate</span><span class=\"token punctuation\">(</span>myDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//设置日期 </span>\n\tmyDate <span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取日期 </span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setYear</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//设置年 </span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取月 </span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">printDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//打印日期  成员函数printDate（）需要使用const进行限定</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> year<span class=\"token punctuation\">,</span>month<span class=\"token punctuation\">,</span>day<span class=\"token punctuation\">;</span><span class=\"token comment\">//成员变量，表示年，月，日 </span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  \n</code></pre>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//在类体外定义成员函数</span>\n\tmyDate<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">myDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span> year<span class=\"token operator\">=</span><span class=\"token number\">2022</span><span class=\"token punctuation\">,</span>month<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>day<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token comment\">//构造函数</span>\n\tmyDate<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">myDate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\tyear<span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span>month<span class=\"token operator\">=</span>m<span class=\"token punctuation\">;</span>day<span class=\"token operator\">=</span>d<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token comment\">//构造函数</span>\n\t<span class=\"token keyword\">void</span> myDate<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setDate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\tyear<span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span>month<span class=\"token operator\">=</span>m<span class=\"token punctuation\">;</span>day<span class=\"token operator\">=</span>d<span class=\"token punctuation\">;</span>\n\t \t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token comment\">//设置日期</span>\n\t<span class=\"token keyword\">void</span> myDate<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setDate</span><span class=\"token punctuation\">(</span>myDate oneD<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\tyear<span class=\"token operator\">=</span>oneD<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">;</span>month<span class=\"token operator\">=</span>oneD<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">;</span>day<span class=\"token operator\">=</span>oneD<span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">;</span>\n\t <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token comment\">//设置日期</span>\n\tmyDate myDate<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\t<span class=\"token keyword\">return</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token comment\">//获取日期；*this是自身对象</span>\n\t<span class=\"token keyword\">void</span> myDate<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setYear</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\tyear<span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token comment\">//设置年</span>\n\t<span class=\"token keyword\">int</span> myDate<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\t<span class=\"token keyword\">return</span> month<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token comment\">//设置月</span>\n\t<span class=\"token keyword\">void</span> myDate<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">printDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span>\n\t<span class=\"token punctuation\">{<!-- --></span>  cout<span class=\"token operator\">&lt;&lt;</span>year<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">&lt;&lt;</span>month<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">&lt;&lt;</span>day<span class=\"token punctuation\">;</span>\n\t <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token comment\">//打印日期</span>\n</code></pre>\n<blockquote>\n<p>在myDate 类中定义了分别表示年、月、日的三个私有成员变量来访问year、month、day，并且定义了公有的访问成员函数，可用于访问这些成员变量。</p>\n</blockquote>\n<blockquote>\n<p>setDate（）是重载函数，使用不同类型的量设置一个日期。getDate（）用于获取函数。通常设置函数以set 为函数名前缀，获取函数以 get 为函数名前缀。<br/> 在C++语言中，当调用一个成员函数时，系统自动向它传递一个隐含的参数，这个参数是一个指向调用该函数的对象的指针，叫做 this 指针，从而使成员函数知道对哪个对象进行操作。在程序中，可以使用关键字 this 来引用该指针。例如：如果在A类中有成员变量 date 和成员函数 getDate（），通过类A的对象a 调用函数 getDate（），那么编译系统就会把对象a 的地址赋值给函数getDate（）中的this 指针，this 指针访问到的成员变量 date 就是属于对象a 的成员变量，也就是 this-&gt;date 就相当与<strong>a.date</strong>。</p>\n</blockquote>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//定义一个学生类Student</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">setStudent</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span>myDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//设置学生信息</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//设置姓名</span>\n\t\tstring <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取姓名</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">setBirthday</span><span class=\"token punctuation\">(</span>myDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//设置生日</span>\n\t\tmyDate <span class=\"token function\">getBirthday</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取生日</span>\n  \t    <span class=\"token keyword\">void</span> <span class=\"token function\">printStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//打印信息 </span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\tstring name<span class=\"token punctuation\">;</span>\n\t\tmyDate birthday<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//在类体外定义成员函数</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token class-name\">Student</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setStudent</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">,</span>myDate d<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\t name<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n\t\t birthday<span class=\"token punctuation\">.</span><span class=\"token function\">setDate</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token punctuation\">}</span>\n\t <span class=\"token keyword\">void</span> <span class=\"token class-name\">Student</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>string n<span class=\"token punctuation\">)</span>\n\t <span class=\"token punctuation\">{<!-- --></span>\t name<span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span>\n\t \t <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token punctuation\">}</span>\n\t string <span class=\"token class-name\">Student</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t <span class=\"token punctuation\">{<!-- --></span>\t <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n\t <span class=\"token punctuation\">}</span>\n\t <span class=\"token keyword\">void</span> <span class=\"token class-name\">Student</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setBirthday</span><span class=\"token punctuation\">(</span>myDate d<span class=\"token punctuation\">)</span>\n\t <span class=\"token punctuation\">{<!-- --></span> \tbirthday<span class=\"token punctuation\">.</span><span class=\"token function\">setDate</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  \t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t  <span class=\"token punctuation\">}</span>\n\t  myDate <span class=\"token class-name\">Student</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getBirthday</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t  <span class=\"token punctuation\">{<!-- --></span>\t <span class=\"token keyword\">return</span> birthday<span class=\"token punctuation\">;</span>\n\t  <span class=\"token punctuation\">}</span>\n\t <span class=\"token keyword\">void</span> <span class=\"token class-name\">Student</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">printStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n\t <span class=\"token punctuation\">{<!-- --></span>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"姓名\"</span><span class=\"token operator\">&lt;&lt;</span>name<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\t 生日\"</span><span class=\"token punctuation\">;</span>\n\t\tbirthday<span class=\"token punctuation\">.</span><span class=\"token function\">printDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//调用类myDate 的成员函数</span>\n\t \tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> \n\t <span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>定义类时，类的成员变量的类型不仅可以是系统内置的基本数据类型，还可以是类类型：定义学生类Student ，它包含姓名，生日，专业等属性，姓名可以用系统定义好的类string来表示生日可以用 定义好的类myDate 来表示。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\26378ad537094c8f9325c5e25bf97c7a.png\"/></p>\n<h2><a id=\"_288\"></a>四：访问对象的成员</h2>\n<h3><a id=\"1_289\"></a>1:使用对象访问成员变量与调用成员函数</h3>\n<p>定义了类和对象后就可以访问对象的成员。通过对象访问成员变量的一般格式：</p>\n<blockquote>\n<p><strong>对象名.成员变量名</strong></p>\n</blockquote>\n<p>调用成员函数的一般格式：</p>\n<blockquote>\n<p><strong>对象名.成员函数名（参数表）</strong></p>\n</blockquote>\n<h3><a id=\"_296\"></a>程序举例</h3>\n<p>验证Student 类功能的驱动程序</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span> </span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"myDate.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Student.h\"</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span> \n<span class=\"token comment\">/* run this program using the console pauser or add your own getch, system(\"pause\") or input loop */</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tStudent ss<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">;</span>\n\tstring name_<span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"请输入学生的姓名和生日\"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">&gt;&gt;</span>name_<span class=\"token operator\">&gt;&gt;</span>y<span class=\"token operator\">&gt;&gt;</span>m<span class=\"token operator\">&gt;&gt;</span>d<span class=\"token punctuation\">;</span>\n\tss<span class=\"token punctuation\">.</span><span class=\"token function\">setStudent</span><span class=\"token punctuation\">(</span>name_<span class=\"token punctuation\">,</span><span class=\"token function\">myDate</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//创建Student的对象 ss，这里要考虑到成员名的访问范围，需要通过类Student 提供的公有访问方法即setStudent（）才能将键盘读入的字符串赋值给对象ss。</span>\n\tss<span class=\"token punctuation\">.</span><span class=\"token function\">printStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c1fbf401237242d194170e5409f8ef05.png\"/></p>\n<h3><a id=\"2_320\"></a>2：使用指针访问对象的成员</h3>\n<p>我们将程序主函数修改一下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span> \tStudent ss<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">;</span>\n\t\tstring name_<span class=\"token punctuation\">;</span>\n\t\tStudent <span class=\"token operator\">*</span>st<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>ss<span class=\"token punctuation\">;</span><span class=\"token comment\">//指针st，指向ss，并使用&amp;ss给指针赋初值</span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"请输入学生的姓名和生日\"</span><span class=\"token punctuation\">;</span>\n\t\tcin<span class=\"token operator\">&gt;&gt;</span>name_<span class=\"token operator\">&gt;&gt;</span>y<span class=\"token operator\">&gt;&gt;</span>m<span class=\"token operator\">&gt;&gt;</span>d<span class=\"token punctuation\">;</span>\n\t\tst<span class=\"token operator\">-&gt;</span><span class=\"token function\">setStudent</span><span class=\"token punctuation\">(</span>name_<span class=\"token punctuation\">,</span><span class=\"token function\">myDate</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//指针操作符  指针名-&gt;成员名</span>\n\t\tst<span class=\"token operator\">-&gt;</span><span class=\"token function\">printStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"3_336\"></a>3：使用引用访问对象的成员</h3>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tStudent ss<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">;</span>\n\tstring name_<span class=\"token punctuation\">;</span>\n\tStudent <span class=\"token operator\">&amp;</span>sn<span class=\"token operator\">=</span>ss<span class=\"token punctuation\">;</span><span class=\"token comment\">//ss的别名sn,sn和ss成为同一个对象的不同名字</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"请输入学生的姓名和生日\"</span><span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">&gt;&gt;</span>name_<span class=\"token operator\">&gt;&gt;</span>y<span class=\"token operator\">&gt;&gt;</span>m<span class=\"token operator\">&gt;&gt;</span>d<span class=\"token punctuation\">;</span>\n\tsn<span class=\"token punctuation\">.</span><span class=\"token function\">setStudent</span><span class=\"token punctuation\">(</span>name_<span class=\"token punctuation\">,</span><span class=\"token function\">myDate</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//访问成员时采用点操作符 引用名.成员名</span>\n\tsn<span class=\"token punctuation\">.</span><span class=\"token function\">printStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\27edbfa1c97f4ba8b7ac970a6d6ab90e.png\"/></p>\n<h2><a id=\"_355\"></a>五：标识符的作用域与可见性</h2>\n<blockquote>\n<p>每个标识符都有各自的作用域（指的是标识符的有效范围，也就是它在程序中的存在区域）和可见性（是指在程序中的哪个区域里可以使用），对于同一个标识符来说，这两个区域可能是不完全重合的。类名、函数名、变量名等都是标识符。<br/> c++中的标识符的作用域有函数原型作用域、局部作用域（块作用域）、类作用域和命名空间作用域。</p>\n</blockquote>\n<h3><a id=\"1_359\"></a>1：函数原型作用域</h3>\n<p>在声明函数时原型时形参的作用范围就是函数原型作用域，这是c++程序中最小的作用域，生命周期最短：</p>\n<blockquote>\n<p>double area（double d）<br/> d为参数，作用域是原型作用域，即标识符d的作用范围在函数 area 形参列表的左右括号之间，在程序的其他地方不能应用这个标识符。</p>\n</blockquote>\n<p><mark>函数原型作用域的作用范围就在括号中</mark></p>\n<h3><a id=\"2_365\"></a>2：局部作用域</h3>\n<blockquote>\n<p>程序中使用相匹配的一对大括号括起来的一段程序叫做块。作用域局限在块内的叫做局部作用域：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0272d86560544c8aa6b41175840c26ce.png\"/></p>\n</blockquote>\n<h3><a id=\"3_369\"></a>3：类作用域</h3>\n<blockquote>\n<p>类可以被看作是一组有名字的成员的集合，类X的成员m具有类作用域，对m的访问方式有：<br/> 如果在类X 的成员函数中没有声明同名的局部作用域标识符，就可以在该函数内直接访问成员m；<br/> 在类外，可以通过表达式x.m或X::m进行访问；还可以通过ptr-&gt;来访问，其中ptr是指向类X的一个对象的指针</p>\n</blockquote>\n<h3><a id=\"4_374\"></a>4：命名空间作用域</h3>\n<p>命名空间是为了消除同名引起的歧义，具有命名空间作用域的变量也叫做全局变量。定义命名空间的一般格式：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">namespace</span> 命名空间名\n<span class=\"token punctuation\">{<!-- --></span>\n\t命名空间内的各种声明（函数声明等）\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>c++标准库中所有的标识符都定义在一个名为std 的命名空间中，因此在程序的示例部分中都出现了：<mark>using namespace std;</mark></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3808e1904afd4a76b059222613529099.png\"/></p>\n<h1><a id=\"_388\"></a>总结</h1>\n<p>当我们在实施自己的计划,追求自己的理想时,如果能够坚持下去,再坚持下去,或许我们在年老甚或离开人世的时候,会少一些遗憾。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\88ebb07964644fea98220aa2a19a9e51.png\"/></p>\n<p>如有不足，还请指正，感谢！</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-07-27 21:22:04", "summary": "前言努力不一定成功，但是坚持做好一件事一定很酷。在上一篇文章学习共勉一中学习了语言的特点和程序结构，这篇文章就简单看看面向对象的基本概念。在这里插入图片描述一：结构化程序设计在面向对象程序设计方法出现"}