{"blogid": "126338757", "writerAge": "码龄1年", "writerBlogNum": "41", "writerCollect": "1199", "writerComment": "1183", "writerFan": "2382", "writerGrade": "6级", "writerIntegral": "5220", "writerName": "啊Q老师", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126338757.jpg", "writerRankTotal": "3533", "writerRankWeekly": "194", "writerThumb": "1761", "writerVisitNum": "72756", "blog_read_count": "965", "blog_time": "于 2022-08-29 08:00:00 发布", "blog_title": "【NOWCODER】- Python：列表（三）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"NOWCODER_Python__0\"></a>【NOWCODER】- Python 刷题</h1>\n<blockquote>\n<p>😁作者：啊Q老师<br/> 🐬人生格言：昨日之深渊，今日之浅谈。路虽远，行则将至。事虽难，做则可成。<br/> 📰个人主页：<a href=\"https://blog.csdn.net/qq_56886142?type=blog\">啊Q老师的博客</a><br/> 📝系列专栏：<a href=\"https://blog.csdn.net/qq_56886142/category_11957433.html?spm=1001.2014.3001.5482\">【NOWCODER】-Python 刷题</a><br/> ✅推荐一款模拟刷题神器👉<a href=\"https://www.nowcoder.com/link/pc_csdncpt_aqls_python\">点击跳转一起刷题</a>🔍</p>\n</blockquote>\n<h1><a id=\"_8\"></a>🔥前言：</h1>\n<p><a href=\"https://www.nowcoder.com/link/pc_csdncpt_aqls_python\">牛客网</a>，有经典的面试题与各种语言的编程题，还有技术与经验的分享，资源全部免费，提供在线编程，帮助我们更好地通过面试与训练逻辑思维，提高我们的编程能力。今天还是继续刷Python列表的题目。<a href=\"https://www.nowcoder.com/link/pc_csdncpt_aqls_python\">点击跳转牛客网一起学习</a></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\57dc48175a7f47249c3cea8c3e6ec06f.png\"/></p>\n<h2><a id=\"Exercise_26__13\"></a>Exercise 26— 牛牛的反转列表</h2>\n<blockquote>\n<p><strong>描述：</strong><br/> 牛牛有一个列表记录了各个朋友的喜欢的数字，num = [3, 5, 9, 0, 1, 9, 0, 3]，请你帮他创建列表，然后使用reverse函数将列表反转输出。<br/> <strong>输入描述：</strong><br/> 无<br/> <strong>输出描述：</strong><br/> 输出反转后的列表。<br/> <strong>难度：</strong><br/> 简单</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#题解，创建num列表，用reverse()函数将列表反转输出。</span>\n<span class=\"token comment\">#reverse()函数将列表所有元素反向排列。</span>\nnum <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nnum<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"Exercise_27__32\"></a>Exercise 27— 朋友们的喜好</h2>\n<blockquote>\n<p><strong>描述：</strong><br/> 牛牛有一个name = [‘Niumei’, ‘YOLO’, ‘Niu Ke Le’, ‘Mona’] 记录了他最好的朋友们的名字，请创建一个二维列表friends，使用append函数将name添加到friends的第一行。假如Niumei最喜欢吃pizza，最喜欢数字3，YOLO最喜欢吃fish， 最喜欢数字6，Niu Ke Le最喜欢吃potato，最喜欢数字0，Mona最喜欢吃beef，最喜欢数字3。请再次创建一个列表food依次记录朋友们最喜欢吃的食物，并将创建好的列表使用append函数添加到friends的第二行；然后再创建一个列表number依次记录朋友们最喜欢的数字，并将创建好的列表使用append函数添加到friends的第三行。这样friends就是一个二维list，使用print函数直接打印这个二维list。<br/> <strong>输入描述：</strong><br/> 无<br/> <strong>输出描述：</strong><br/> [[‘Niumei’, ‘YOLO’, ‘Niu Ke Le’, ‘Mona’], [‘pizza’, ‘fish’, ‘potato’, ‘beef’], [3, 6, 0, 3]]<br/> <strong>难度：</strong><br/> 简单</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#题解，创建name列表通过append()函数添加到friends列表中，而这样friends就是一个二维list；</span>\n<span class=\"token comment\">#列表food与列表number同理，最后打印输出friends列表。</span>\n<span class=\"token comment\">#append()函数用于在列表末尾添加新的对象。</span>\nname <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Niumei'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'YOLO'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Niu Ke Le'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Mona'</span><span class=\"token punctuation\">]</span>\nfriends <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nfriends<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\nfood <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'pizza'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'fish'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'potato'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'beef'</span><span class=\"token punctuation\">]</span>\nfriends<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>food<span class=\"token punctuation\">)</span>\nnumber <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nfriends<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>friends<span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"Exercise_28__57\"></a>Exercise 28— 密码游戏</h2>\n<blockquote>\n<p><strong>描述：</strong><br/> 牛牛和牛妹一起玩密码游戏，牛牛作为发送方会发送一个4位数的整数给牛妹，牛妹接收后将对密码进行破解。<br/> 破解方案如下：<br/> 每位数字都要加上3再除以9的余数代替该位数字，然后将第1位和第3位数字交换，第2位和第4位数字交换。<br/> 请输出牛妹破解后的密码。<br/> <strong>输入描述：</strong><br/> 输入一个四位数的整数。<br/> <strong>输出描述：</strong><br/> 输出破解后的密码，以四位数的形式。<br/> <strong>难度：</strong><br/> 中等</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#题解，遍历input()函数的输入，将其转换成整数类型并且每位数字都要加上3再除以9的余数；</span>\n<span class=\"token comment\">#然后将第1位和第3位数字交换，第2位和第4位数字交换格式化输出。</span>\nnumber <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">9</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}{}{}{}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"Exercise_29__78\"></a>Exercise 29— 用列表实现栈</h2>\n<blockquote>\n<p><strong>描述：</strong><br/> 栈是一种先进后出的数据结构，类似我们生活中挤电梯，最后进入的肯定是先出来，现我们用Python的列表来模拟栈。假设初始的列表为 stack = [1, 2, 3, 4, 5]，请将其视作栈，使用pop函数弹出末尾两个元素，再使用append函数将输入元素加入到栈中，每次操作完成后都要输出整个列表。<br/> <strong>输入描述：</strong><br/> 输入要加入栈中的整数。如 输入：1 。<br/> <strong>输出描述：</strong><br/> 第一行输出第一次出栈后的列表；<br/> 第二行输出第二次出栈后的列表；<br/> 第三行输出元素入栈后的列表。<br/> 如 输出：<br/> [1, 2, 3, 4]<br/> [1, 2, 3]<br/> [1, 2, 3, 1]<br/> 说明：<br/> 第一次弹出末尾元素5，第二次弹出末尾元素4，第三次加入新增元素1 。<br/> <strong>难度：</strong><br/> 中等</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#题解，创建stack列表，再创建输入整数的变量，通过遍历使用两次pop()函数弹出末尾两个元素；</span>\n<span class=\"token comment\">#再使用append函数将输入元素加入到栈中，每次操作完成后都要输出整个列表。</span>\nstack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span>\nstack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"Exercise_30__109\"></a>Exercise 30— 用列表实现队列</h2>\n<blockquote>\n<p><strong>描述：</strong><br/> 队列是一种先进先出的数据结构，类似食堂排队打饭，先入队的元素当然要先出队，先请用Python列表模拟队列。现有一列表 queue = [1, 2, 3, 4, 5] 被视作队列，请使用pop函数连续两次取出队首元素，再使用append函数将输入元素添加到队尾，每次操作后都要输出完整的列表。<br/> <strong>输入描述：</strong><br/> 输入一个整数表示要添加到队列的元素。如 输入：8<br/> <strong>输出描述：</strong><br/> 第一行输出第一次取出队首后的列表；<br/> 第二行输出第二次取出队首后的列表；<br/> 第三行输出添加元素到队列后的列表。<br/> 如 输出：<br/> [2, 3, 4, 5]<br/> [3, 4, 5]<br/> [3, 4, 5, 8]<br/> 说明：<br/> 第一次弹出队首元素1，第二次弹出队首元素2，第三次加入数字8到队尾<br/> <strong>难度：</strong><br/> 中等</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#题解，与上同理，区别是pop()函数连续两次取出队首元素。</span>\n<span class=\"token comment\">#pop()函数默认为pop(-1)，即删除最后一个列表值；</span>\n<span class=\"token comment\">#而pop(0),删除第一个元素。</span>\nqueue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    queue<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span>\nqueue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"Exercise_31__141\"></a>Exercise 31— 团队分组</h2>\n<blockquote>\n<p><strong>描述：</strong><br/> 创建一个列表group_list，其中依次包含字符串 ‘Tom’, ‘Allen’, ‘Jane’, ‘William’, ‘Tony’ 表示这个小组成员的名字。现有三项任务需要他们去完成，根据不同任务的繁琐度和实际情况需要分别派2人、3人、2人来完成，他们决定通过对列表分片来分配任务。<br/> 使用print()语句和切片来打印列表group_list的前两个元素表示去做第一个任务的人的名字，<br/> 再使用print()语句和切片来打印列表group_list的中间三个元素表示去做第二个任务的人的名字，<br/> 再使用print()语句和切片来打印列表group_list的后两个元素表示去做第三个任务的人的名字。<br/> <strong>输入描述：</strong><br/> 无<br/> <strong>输出描述：</strong><br/> 按照题意输出<br/> [‘Tom’, ‘Allen’]<br/> [‘Allen’, ‘Jane’, ‘William’]<br/> [‘William’, ‘Tony’]<br/> <strong>难度：</strong><br/> 简单</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#题解，创建列表group_list，按要求切分；</span>\n<span class=\"token comment\">#list[start : end : step]，start为起始位置，end为截止位置，从0开始；</span>\n<span class=\"token comment\">#step为步长（即当step=2，相当于每隔空一个元素来获取元素）。</span>\ngroup_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Allen'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Jane'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'William'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tony'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>group_list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>group_list<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>group_list<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"_168\"></a>结束语</h1>\n<p>千里之行，始于足下。Python的学习还是以练习为主，想要学习Python的同学，推荐可以去 <a href=\"https://www.nowcoder.com/link/pc_csdncpt_aqls_python\">牛客网🔍</a>练习，提升自我。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-29 08:00:00", "summary": "刷题作者：啊老师人生格言：昨日之深渊，今日之浅谈。路虽远，行则将至。事虽难，做则可成。个人主页：啊老师的博客系列专栏：刷题推荐一款模拟刷题神器点击跳转一起刷题前言：牛客网，有经典的面试题与各种语言的编"}