{"blogid": "126078947", "writerAge": "码龄1年", "writerBlogNum": "72", "writerCollect": "2610", "writerComment": "4589", "writerFan": "8310", "writerGrade": "6级", "writerIntegral": "8326", "writerName": "codeMak1r.小新", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126078947.jpg", "writerRankTotal": "1737", "writerRankWeekly": "13", "writerThumb": "2774", "writerVisitNum": "208365", "blog_read_count": "10485", "blog_time": "已于 2022-08-05 23:23:52 修改", "blog_title": "【react-redux】多个组件数据共享", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/8a72d8404f9845abad7a320f1d7a5604.gif#pic_center\"/></p>\n<blockquote>\n<p><strong><font color=\"#FF7F50\"> 欢迎来到我的博客</font></strong><br/> <strong>📔博主是一名大学在读本科生，主要学习方向是前端。<br/> 🍭目前已经更新了<font color=\"#FF7F50\">【Vue】、【React–从基础到实战】、【TypeScript】等等系列专栏</font><br/> 🛠目前正在学习的是🔥<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n      \n       \n        \n         \n          R\n         \n         \n          e\n         \n         \n          a\n         \n         \n          c\n         \n         \n          t\n         \n         \n          框架\n         \n        \n        \n         React框架\n        \n       \n      </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0077em;\">R</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">t</span><span class=\"mord cjk_fallback\">框架</span></span></span></span></span>🔥，中间穿插了一些基础知识的回顾<br/> 🌈博客主页👉<a href=\"https://blog.csdn.net/Svik_zy?type=blog\">codeMak1r.小新的博客</a></strong></p>\n<p><strong><font color=\"#FF7F50\">本文被专栏<a href=\"https://blog.csdn.net/svik_zy/category_11671445.html?spm=1001.2014.3001.5482\">【React–从基础到实战】</a>收录</font></strong></p>\n</blockquote>\n<blockquote>\n<p><strong><font color=\"#FF7F50\">🕹坚持创作✏️，一起学习📖，码出未来👨🏻‍💻！</font></strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a8c60a7f66064f31b7f5bed6857f988c.png\"/></p>\n</blockquote>\n<h1><a id=\"_14\"></a>多个组件数据共享</h1>\n<p>我们之前讲解的一直都是只有一个组件需要向redux读取状态，也就是Count这个求和组件。那么我们在实际使用redux的场景中，当然是有很多组件一起共享数据才需要使用到redux进行状态管理啦，现在我们就来看看多个组件通过redux实现数据共享的场景吧～</p>\n<p>现在我们创建一个Person组件，同样的，Person组件的数据也交给redux管理。此时，Count组件也可以从redux中读取到Person组件的数据，Person组件也可以从redux中读取到Count组件之前存放在redux中的数据。是不是很方便呢？这就是redux集中式的状态管理中的多个组件的数据共享。</p>\n<blockquote>\n<p>项目结构：</p>\n<pre><code>src\n├─App.jsx\n├─index.js\n├─redux\n|   ├─constant.js\n|   ├─store.js\n|   ├─reducers\n|   |    ├─count.js\n|   |    └person.js\n|   ├─actions\n|   |    ├─count.js\n|   |    └person.js\n├─containers\n|     ├─Person\n|     |   └index.jsx\n|     ├─Count\n|     |   └index.jsx\n</code></pre>\n<p>项目展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/84d58a79e8e04b3ca6de8bb9083e911d.gif#pic_center\"/></p>\n</blockquote>\n<blockquote>\n<p>⚠️注意：Count组件部分内容已在前几篇文章中，在本文中注重的是新增的Person组件与之前的Count组件共享状态。</p>\n<p>阅读顺序：<br/> <a href=\"https://blog.csdn.net/Svik_zy/article/details/125795609?spm=1001.2014.3001.5502\">【Redux工作流程】</a><br/> <a href=\"https://blog.csdn.net/Svik_zy/article/details/125838979?spm=1001.2014.3001.5502\">【异步action】</a><br/> <a href=\"https://blog.csdn.net/Svik_zy/article/details/125951641?spm=1001.2014.3001.5502\">【react-redux基本使用与优化】</a></p>\n</blockquote>\n<ol><li>首先在<code>constant.js</code>中添加我们在Person组件中需要使用的类型：</li></ol>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">INCREMENT</span> <span class=\"token operator\">=</span> <span class=\"token string\">'increment'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">DECREMENT</span> <span class=\"token operator\">=</span> <span class=\"token string\">'decrement'</span>\n<span class=\"token operator\">+</span> <span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">ADD_PERSON</span> <span class=\"token operator\">=</span> <span class=\"token string\">'add_person'</span>\n</code></pre>\n<blockquote>\n<p>该模块是用于定义action对象中type类型的常量模块，便于管理的同时避免程序员单词拼写出错。</p>\n</blockquote>\n<ol start=\"2\"><li>编写Person组件的action文件，用于创建action动作对象以供Person组件使用：</li></ol>\n<p><code>/src/redux/actions/person.js</code></p>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">/* \n  该文件专门为Person组件生成action动作对象\n*/</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token constant\">ADD_PERSON</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../constant\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 创建增加一个person的action动作对象</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createAddPersonAction</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">personObj</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">ADD_PERSON</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> personObj <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ol start=\"3\"><li>编写Person组件的reducer文件，用于创建一个为Person组件服务的reducer函数</li></ol>\n<p><code>/src/redux/reducers/person.js</code></p>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">/* \n  1.该文件用于创建一个为Person组件服务的reducer函数\n  2.reducer函数会接收到两个参数，分别为之前的状态（prevState）和动作对象（action）\n*/</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token constant\">ADD_PERSON</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../constant\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> initState <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">001</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'tom'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">personReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevState <span class=\"token operator\">=</span> initState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span> type<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">ADD_PERSON</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>prevState<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> prevState\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"4\"><li>redux若只为一个组件服务，store内部存储的数据不需要任何的标识。但是store中若存放了多个组件的状态，那么就需要用一个对象将所有的状态囊括起来，每个状态都是一组key：value值。</li></ol>\n<p>比如，Count组件存储的状态为：<code>count:0</code>。Person组件存储的状态为：<code>persons:[]</code>。</p>\n<p><code>/src/redux/store.js</code></p>\n<pre><code class=\"prism language-js\"><span class=\"token operator\">-</span> <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> legacy_createStore <span class=\"token keyword\">as</span> createStore<span class=\"token punctuation\">,</span> applyMiddleware <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 引入combineReducers，用于合并reducer</span>\n<span class=\"token operator\">+</span> <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> legacy_createStore <span class=\"token keyword\">as</span> createStore<span class=\"token punctuation\">,</span> applyMiddleware<span class=\"token punctuation\">,</span> combineReducers <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> countReducer <span class=\"token keyword\">from</span> <span class=\"token string\">'./reducers/count'</span>\n<span class=\"token comment\">// 引入为Person组件服务的reducer</span>\n<span class=\"token operator\">+</span> <span class=\"token keyword\">import</span> personReducer <span class=\"token keyword\">from</span> <span class=\"token string\">'./reducers/person'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> thunk <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-thunk'</span>\n\n<span class=\"token operator\">+</span> <span class=\"token comment\">// 合并reducer</span>\n<span class=\"token operator\">+</span> <span class=\"token keyword\">const</span> allReducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token operator\">+</span>   count<span class=\"token operator\">:</span> countReducer<span class=\"token punctuation\">,</span>\n<span class=\"token operator\">+</span>   persons<span class=\"token operator\">:</span> personReducer\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 暴露store</span>\n<span class=\"token operator\">-</span> <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>countReducer<span class=\"token punctuation\">,</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>thunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">+</span> <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>allReducer<span class=\"token punctuation\">,</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>thunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>在原先的store中只存放了一个Count组件的状态数据，现在新增了Person组件需要使用redux，那么就应该对store.js进行一些修改。</p>\n<p>在store.js文件中，从redux中新引入combineReducers函数用于合并reducer；</p>\n<p>引入为Person组件服务的reducer；</p>\n<p>将原先的countReducer与新引入的personReducer合并，并且将合并后的allReducer传递给createStore函数作为第一个参数，目的是将这两个组件的状态用一个对象包裹起来，再传给store。</p>\n<ol start=\"5\"><li> <p>Person组件已经与redux建立起了联系，那么现在可以在Person组件中书写Person的UI组件以及Person的容器组件（使用react-redux）。</p> <pre><code class=\"prism language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> nanoid <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'nanoid'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> connect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> createAddPersonAction <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../../redux/actions/person'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{<!-- --></span>\n\n  <span class=\"token function-variable function\">addPerson</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nameNode<span class=\"token punctuation\">.</span>value\n    <span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ageNode<span class=\"token punctuation\">.</span>value\n    <span class=\"token keyword\">const</span> personObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token function\">nanoid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchAddPerson</span><span class=\"token punctuation\">(</span>personObj<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nameNode<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ageNode<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">&gt;</span>我是Person组件，上方组件求和为：<span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token parameter\">currentNode</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nameNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">}</span> \n               type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">'输入名字'</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token parameter\">currentNode</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ageNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">}</span> \n               type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">'输入年龄'</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>addPerson<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>添加<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">&gt;</span>\n          <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>personArr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">personObj</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n              <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>personObj<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>personObj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token punctuation\">{<!-- --></span>personObj<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">personArr</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>persons<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">dispatchAddPerson</span><span class=\"token operator\">:</span> createAddPersonAction <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span>\n</code></pre> </li><li> <p>同时修改Count组件内容，使Count组件可以显示Person组件的人数。</p> <pre><code class=\"prism language-js\"><span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">&gt;</span>我是Count组件，下方组件总人数为：<span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>person<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">&gt;</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">person</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>persons<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">jia</span><span class=\"token operator\">:</span> createIncrementAction<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">jian</span><span class=\"token operator\">:</span> createDecrementAction<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">jiaAsync</span><span class=\"token operator\">:</span> createIncrementAsyncAction\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Count<span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<p>注意：关于connect()()函数详解内容，点击：<a href=\"https://blog.csdn.net/Svik_zy/article/details/125951641?spm=1001.2014.3001.5502\">＜react-redux＞基本使用与优化</a></p>\n</blockquote> </li></ol>\n<blockquote>\n<p>总结：</p>\n<ol><li>定义一个Person组件，和Count组件通过redux共享数据；</li><li>为Person组件编写：reducer、action，配置constant常量；</li><li>重点：Person的reducer和Count的reducer要使用combineReducers进行合并，合并后的总状态是一个对象；</li><li>交给store的是总reducer。</li></ol>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-05 23:23:52", "summary": "在这里插入图片描述欢迎来到我的博客博主是一名大学在读本科生，主要学习方向是前端。目前已经更新了、从基础到实战、等等系列专栏目前正在学习的是框架框架框架，中间穿插了一些基础知识的回顾博客主页小新的博客本"}