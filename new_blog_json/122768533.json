{"blogid": "122768533", "writerAge": "码龄5年", "writerBlogNum": "157", "writerCollect": "1263", "writerComment": "440", "writerFan": "4713", "writerGrade": "5级", "writerIntegral": "3189", "writerName": "小满zs", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122768533.jpg", "writerRankTotal": "6067", "writerRankWeekly": "953", "writerThumb": "1102", "writerVisitNum": "383885", "blog_read_count": "17646", "blog_time": "已于 2022-03-07 10:41:29 修改", "blog_title": "学习Vue3 第一章", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>1.介绍vue</h1>\n<p>Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与<a href=\"https://cn.vuejs.org/v2/guide/single-file-components.html\" title=\"现代化的工具链\">现代化的工具链</a>以及各种<a href=\"https://github.com/vuejs/awesome-vue#libraries--plugins\" title=\"支持类库\">支持类库</a>结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>\n<p>MVVM（Model-View-ViewModel）架构</p>\n<ol><li>『View』：视图层（UI 用户界面）</li><li>『ViewModel』：业务逻辑层（一切 js 可视为业务逻辑）</li><li>『Model』：数据层（存储数据及对数据的处理如增删改查）</li></ol>\n<p><img alt=\"\" height=\"285\" src=\"..\\..\\static\\image\\a5c02dc81b9547a6bebfd9dbc3502687.png\" width=\"545\"/></p>\n<p></p>\n<p>官方文档地址   <a href=\"https://cn.vuejs.org/v2/guide/#Vue-js-%E6%98%AF%E4%BB%80%E4%B9%88\" title=\"介绍 — Vue.js\">介绍 — Vue.js</a></p>\n<p><a href=\"https://staging-cn.vuejs.org/guide/quick-start.html\" title=\"新版地址文档快速开始 | Vue.js\">新版地址文档快速开始 | Vue.js</a></p>\n<h1>2.回顾vue2 对比 vue3 </h1>\n<p>我们看如下图</p>\n<p>发现传统的vue2 逻辑比较分散 可读性差 可维护性差</p>\n<p>对比vue3 逻辑分明 可维护性 高</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\e8ad905d83aaec45451797517ef453aa.png\"/></p>\n<h1> 3.Vue3 新特性介绍</h1>\n<p><img alt=\"\" height=\"456\" src=\"..\\..\\static\\image\\f2c9d2e9576d46cf8a9a3e8abc5b31b2.png\" width=\"925\"/></p>\n<h1> 重写双向绑定</h1>\n<pre><code>vue2\n基于Object.defineProperty()实现\n\nvue3 基于Proxy\nproxy与Object.defineProperty(obj, prop, desc)方式相比有以下优势：\n\n//丢掉麻烦的备份数据\n//省去for in 循环\n//可以监听数组变化\n//代码更简化\n//可以监听动态新增的属性；\n//可以监听删除的属性 ；\n//可以监听数组的索引和 length 属性；\n\n    let proxyObj = new Proxy(obj,{\n        get : function (target,prop) {\n            return prop in target ? target[prop] : 0\n        },\n        set : function (target,prop,value) {\n            target[prop] = 888;\n        }\n    })</code></pre>\n<h1>Vue3 优化Vdom</h1>\n<p><strong>在Vue2中,每次更新diff,都是全量对比,Vue3则只对比带有标记的,这样大大减少了非动态内容的对比消耗</strong></p>\n<p><a href=\"https://vue-next-template-explorer.netlify.app/\" title=\"Vue Template Explorer\">Vue Template Explorer</a> 我们可以通过这个网站看到静态标记</p>\n<p><img alt=\"\" height=\"634\" src=\"..\\..\\static\\image\\0b5650888b95431c8682836a68e2ca98.png\" width=\"1200\"/></p>\n<h2><a name=\"t3\"></a>patch flag 优化静态树</h2>\n<pre><code>\n&lt;span&gt;Hello world!&lt;/span&gt;\n&lt;span&gt;Hello world!&lt;/span&gt;\n&lt;span&gt;Hello world!&lt;/span&gt;\n&lt;span&gt;Hello world!&lt;/span&gt;\n&lt;span&gt;{<!-- -->{msg}}/span&gt;\n&lt;span&gt;Hello world!&lt;/span&gt;\n&lt;span&gt;Hello world! &lt;/span&gt;\n</code></pre>\n<p><code>Vue3</code> 编译后的 <code>Vdom</code> 是这个样子的</p>\n<pre><code>export function render(_ctx，_cache，$props，$setup，$data，$options){return (_openBlock(),_createBlock(_Fragment,null，[\n_createvNode( \"span\", null,\"Hello world ! \"),\n_createvNode( \"span\",null，\"Hello world! \"),\n_createvNode( \"span\"，null，\"Hello world! \"),\n_createvNode( \"span\", null，\"Hello world! \"),\n_createVNode(\"span\", null，_toDisplaystring(_ctx.msg)，1/* TEXT */)，\n_createvNode( \"span\", null，\"Hello world! \"),\n_createvNode( \"span\", null，\"Hello world! \")]，64/*STABLE_FRAGMENT */))\n</code></pre>\n<p>新增了 patch flag 标记</p>\n<pre><code>TEXT = 1 // 动态文本节点\nCLASS=1&lt;&lt;1,1 // 2//动态class\nSTYLE=1&lt;&lt;2，// 4 //动态style\nPROPS=1&lt;&lt;3,// 8 //动态属性，但不包含类名和样式\nFULLPR0PS=1&lt;&lt;4,// 16 //具有动态key属性，当key改变时，需要进行完整的diff比较。\nHYDRATE_ EVENTS = 1 &lt;&lt; 5，// 32 //带有监听事件的节点\nSTABLE FRAGMENT = 1 &lt;&lt; 6, // 64 //一个不会改变子节点顺序的fragment\nKEYED_ FRAGMENT = 1 &lt;&lt; 7, // 128 //带有key属性的fragment 或部分子字节有key\nUNKEYED FRAGMENT = 1&lt;&lt; 8, // 256 //子节点没有key 的fragment\nNEED PATCH = 1 &lt;&lt; 9, // 512 //一个节点只会进行非props比较\nDYNAMIC_SLOTS = 1 &lt;&lt; 10 // 1024 // 动态slot\nHOISTED = -1 // 静态节点\nBALL = -2\n</code></pre>\n<p>我们发现创建动态 dom 元素的时候，Vdom 除了模拟出来了它的基本信息之外，还给它加了一个标记： 1 /* TEXT */</p>\n<p>这个标记就叫做 patch flag（补丁标记）</p>\n<p>patch flag 的强大之处在于，当你的 diff 算法走到 _createBlock 函数的时候，会忽略所有的静态节点，只对有标记的动态节点进行对比，而且在多层的嵌套下依然有效。</p>\n<p>尽管 JavaScript 做 Vdom 的对比已经非常的快，但是 patch flag 的出现还是让 Vue3 的 Vdom 的性能得到了很大的提升，尤其是在针对大组件的时候。</p>\n<h1><br/> Vue3 Fragment</h1>\n<p>vue3 允许我们支持多个根节点</p>\n<pre><code>\n&lt;template&gt;\n  &lt;div&gt;12&lt;/div&gt;\n  &lt;div&gt;23&lt;/div&gt;\n&lt;/template&gt;</code></pre>\n<p>同时支持render JSX 写法</p>\n<pre><code>render() {\n        return (\n            &lt;&gt;\n                {this.visable ? (\n                    &lt;div&gt;{this.obj.name}&lt;/div&gt;\n                ) : (\n                    &lt;div&gt;{this.obj.price}&lt;/div&gt;\n                )}\n                &lt;input v-model={this.val}&gt;&lt;/input&gt;\n                {[1, 2, 3].map((v) =&gt; {\n                   return &lt;div&gt;{v}-----&lt;/div&gt;;\n                })}\n            &lt;/&gt;\n        );\n    },\n\n</code></pre>\n<p>同时新增了Suspense  和  多 v-model 用法</p>\n<p></p>\n<h1>Vue3 Tree shaking</h1>\n<p>简单来讲，就是在保持代码运行结果不变的前提下，去除无用的代码</p>\n<p>在Vue2中，无论我们使用什么功能，它们最终都会出现在生产代码中。主要原因是Vue实例在项目中是单例的，捆绑程序无法检测到该对象的哪些属性在代码中被使用到</p>\n<p>而Vue3源码引入tree shaking特性，将全局 API 进行分块。如果你不使用其某些功能，它们将不会包含在你的基础包中</p>\n<p>就是比如你要用watch 就是import {watch} from 'vue' 其他的computed 没用到就不会给你打包减少体积<br/>  </p>\n<h1>Vue 3 Composition Api</h1>\n<p>Setup 函数式编程 也叫vue Hook</p>\n<p>例如 ref  reactive watch computed toRefs toRaws 我们会在下几个章节详解</p>\n</div>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-03-07 10:41:29", "summary": "介绍读音，类似于是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，被设计为可以自底向上逐层应用。的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具"}