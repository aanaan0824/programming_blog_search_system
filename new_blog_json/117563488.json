{"blogid": "117563488", "writerAge": "码龄4年", "writerBlogNum": "128", "writerCollect": "13037", "writerComment": "1797", "writerFan": "12245", "writerGrade": "7级", "writerIntegral": "10129", "writerName": "白鳯", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_117563488.jpg", "writerRankTotal": "1172", "writerRankWeekly": "746", "writerThumb": "3121", "writerVisitNum": "1379625", "blog_read_count": "202750", "blog_time": "已于 2022-06-21 19:08:00 修改", "blog_title": "《C++面向对象程序设计》✍千处细节、万字总结（建议收藏）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"C_0\"></a>《C++面向对象程序设计》✍千处细节、万字总结</h2>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#C_0\">《C++面向对象程序设计》✍千处细节、万字总结</a></li><li><ul><li><a href=\"#_3\">一、面向对象程序设计</a></li><li><a href=\"#C_28\">二、C++基础</a></li><li><ul><li><a href=\"#21_C_32\">2.1 C++的产生和特点</a></li><li><a href=\"#22__C_40\">2.2 一个简单的C++示例程序</a></li><li><a href=\"#23_CC_69\">2.3 C++在非面向对象方面对C语言的扩充</a></li><li><ul><li><a href=\"#font_colorpink_font_71\"><font color=\"pink\">输入和输出</font></a></li><li><a href=\"#font_colorpinkcinfont_86\"><font color=\"pink\">cin</font></a></li><li><a href=\"#font_colorpinkconstfont_95\"><font color=\"pink\">const修饰符</font></a></li><li><a href=\"#font_colorpinkvoidfont_138\"><font color=\"pink\">void型指针</font></a></li><li><a href=\"#font_colorpinkfont_155\"><font color=\"pink\">内联函数</font></a></li><li><a href=\"#font_colorpinkfont_185\"><font color=\"pink\">带有默认参数值的函数</font></a></li><li><a href=\"#font_colorpinkfont_204\"><font color=\"pink\">函数重载</font></a></li><li><a href=\"#font_colorpinkfont_263\"><font color=\"pink\">作用域标识符\"::\"</font></a></li><li><a href=\"#font_colorpinkfont_286\"><font color=\"pink\">强制类型转换</font></a></li><li><a href=\"#font_colorpinknewdeletefont_300\"><font color=\"pink\">new和delete运算符</font></a></li><li><a href=\"#font_colorpinkfont_342\"><font color=\"pink\">引用</font></a></li></ul>\n</li></ul>\n</li><li><a href=\"#_418\">三、类和对象（一）</a></li><li><ul><li><a href=\"#31__422\">3.1 类的构成</a></li><li><a href=\"#32__460\">3.2 成员函数的定义</a></li><li><a href=\"#33__548\">3.3 对象的定义和使用</a></li><li><a href=\"#34__612\">3.4 构造函数与析构函数</a></li><li><ul><li><a href=\"#font_colorpinkfont_614\"><font color=\"pink\">构造函数</font></a></li><li><a href=\"#font_colorpinkfont_662\"><font color=\"pink\">成员初始化列表</font></a></li><li><a href=\"#font_colorpinkfont_691\"><font color=\"pink\">带默认参数的构造函数</font></a></li><li><a href=\"#font_colorpinkfont_737\"><font color=\"pink\">析构函数</font></a></li><li><a href=\"#font_colorpinkfont_829\"><font color=\"pink\">默认的构造函数和析构函数</font></a></li><li><a href=\"#font_colorpinkfont_852\"><font color=\"pink\">构造函数的重载</font></a></li><li><a href=\"#font_colorpinkfont_869\"><font color=\"pink\">拷贝构造函数</font></a></li><li><a href=\"#font_colorpinkfont_926\"><font color=\"pink\">浅拷贝和深拷贝</font></a></li></ul>\n</li></ul>\n</li><li><a href=\"#_962\">四、类和对象（二）</a></li><li><ul><li><a href=\"#41_this_966\">4.1 自引用指针this</a></li><li><a href=\"#42__980\">4.2 对象数组与对象指针</a></li><li><a href=\"#43_string_1024\">4.3 string类</a></li><li><a href=\"#44__1059\">4.4 向函数传递对象</a></li><li><a href=\"#45__1118\">4.5 静态成员</a></li><li><a href=\"#46__1220\">4.6 友元</a></li><li><ul><li><a href=\"#font_colorpinkfont_1224\"><font color=\"pink\">友元函数</font></a></li><li><a href=\"#font_colorpinkfont_1369\"><font color=\"pink\">友元类</font></a></li></ul>\n</li><li><a href=\"#47__1388\">4.7 类的组合</a></li><li><a href=\"#48__1404\">4.8 共享数据的保护</a></li></ul>\n</li><li><a href=\"#_1497\">五、继承与派生</a></li><li><ul><li><a href=\"#51__1503\">5.1 继承与派生的概念</a></li><li><ul><li><a href=\"#font_colorpinkfont_1565\"><font color=\"pink\">基类成员在派生类中的访问属性</font></a></li><li><a href=\"#font_colorpinkfont_1575\"><font color=\"pink\">派生类对基类成员的访问规则</font></a></li></ul>\n</li><li><a href=\"#52__1586\">5.2 派生类的构造函数和析构函数</a></li><li><a href=\"#53__1665\">5.3 调整基类成员在派生类中的访问属性的其他方法</a></li><li><a href=\"#54__1696\">5.4 多继承</a></li><li><a href=\"#55__1715\">5.5 虚基类</a></li><li><a href=\"#56__1829\">5.6 赋值兼容规则</a></li></ul>\n</li><li><a href=\"#_1872\">六、多态性与虚函数</a></li><li><ul><li><a href=\"#61__1878\">6.1 多态性概述</a></li><li><a href=\"#62__1890\">6.2 虚函数</a></li><li><a href=\"#63__1981\">6.3 虚析构函数</a></li><li><a href=\"#64__2041\">6.4 纯虚函数</a></li><li><a href=\"#65__2051\">6.5 抽象类</a></li><li><a href=\"#66__2063\">6.6 示例：利用多态计算面积</a></li></ul>\n</li><li><a href=\"#_2142\">七、运算符重载</a></li><li><ul><li><a href=\"#71__2148\">7.1 运算符重载概述</a></li></ul>\n</li><li><a href=\"#_2207\">八、函数模板与类模板</a></li><li><ul><li><a href=\"#81__2213\">8.1 模板的概念</a></li><li><a href=\"#82__2242\">8.2 函数模板</a></li><li><a href=\"#83__2324\">8.3 类模板</a></li></ul>\n</li><li><a href=\"#C_2422\">九、C++的输入和输出</a></li><li><ul><li><a href=\"#91_C_2426\">9.1 C++为何建立自己的输入/输出系统</a></li><li><a href=\"#92_C_2434\">9.2 C++的流库及其基本结构</a></li><li><ul><li><a href=\"#font_colorpink_font_2442\"><font color=\"pink\">用于输入/输出的头文件</font></a></li><li><a href=\"#font_colorpinkfont_2451\"><font color=\"pink\">用于输入/输出的流类</font></a></li></ul>\n</li><li><a href=\"#93___2472\">9.3 预定义的流对象</a></li><li><a href=\"#94__2480\">9.4 输入/输出流的成员函数</a></li><li><a href=\"#95__2500\">9.5 预定义类型输入/输出的格式控制</a></li><li><a href=\"#96__2562\">9.6 文件的输入/输出</a></li><li><a href=\"#97__2579\">9.7 文件的打开与关闭</a></li><li><a href=\"#98__2601\">9.8 文本文件的读/写</a></li><li><a href=\"#99__2647\">9.9 二进制文件的读写</a></li><li><ul><li><a href=\"#font_colorpinkgetputfont_2649\"><font color=\"pink\">用get()函数和put()函数读/写二进制文件</font></a></li><li><a href=\"#font_colorpinkreadwritefont_2695\"><font color=\"pink\">用read()函数和write()函数读写二进制文件</font></a></li><li><a href=\"#font_colorpink_font_2761\"><font color=\"pink\">检测文件结束</font></a></li></ul>\n</li></ul>\n</li><li><a href=\"#_2789\">十、异常处理和命名空间</a></li><li><ul><li><a href=\"#101__2791\">10.1 异常处理</a></li><li><a href=\"#102__2839\">10.2 命名空间和头文件命名规则</a></li></ul>\n</li><li><a href=\"#STL_2856\">十一、STL标准模板库</a></li><li><ul><li><a href=\"#111_Vector_2860\">11.1 Vector</a></li><li><a href=\"#112_list_2894\">11.2 list容器</a></li><li><a href=\"#113_stack_2923\">11.3 stack</a></li><li><a href=\"#114_queue_2954\">11.4 queue</a></li><li><a href=\"#115_priority_queue_2977\">11.5 优先队列priority_queue</a></li><li><a href=\"#116_deque_3007\">11.6 双端队列deque</a></li><li><a href=\"#117_set_3026\">11.7 set</a></li><li><a href=\"#118_map_3052\">11.8 map</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h3><a id=\"_3\"></a>一、面向对象程序设计</h3>\n<p>面向对象程序设计（<code>Object-Oriented Programming</code>，<code>OOP</code>）是一种新的程序设计范型。程序设计范型是指设计程序的规范、模型和风格，它是一类程序设计语言的基础。</p>\n<p>面向过程程序设计范型是使用较广泛的面向过程性语言，其主要特征是：程序由<strong>过程定义</strong>和<strong>过程调用</strong>组成（简单地说，过程就是程序执行某项操作的一段代码，函数就是最常用的过程）。</p>\n<p>面向对象程序的基本元素是对象，面向对象程序的主要结构特点是：第一，程序一般由类的定义和类的使用两部分组成；第二，程序中的一切操作都是通过向对象发送消息来实现的，对象接收到消息后，启动有关方法完成相应的操作。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210604155010160.png\"/></p>\n<p><strong>对象</strong>：描述其属性的数据以及对这些数据施加的一组操作封装在一起构成的统一体。对象可认为是数据+操作。</p>\n<p><strong>类</strong>：类是具有相同的数据和相同的操作的一组对象的集合。</p>\n<p><strong>消息传递</strong>：对象之间的交互。</p>\n<p>**方法：**对象实现的行为称为方法。</p>\n<p><strong>面向对象程序设计的基本特征</strong>：抽象、封装、继承、多态。</p>\n<hr/>\n<h3><a id=\"C_28\"></a>二、C++基础</h3>\n<p>~</p>\n<h4><a id=\"21_C_32\"></a>2.1 C++的产生和特点</h4>\n<p>C++是美国贝尔实验室的<em>Bjarne Stroustrup</em>博士在C语言的基础上，弥补了C语言存在的一些缺陷，增加了面向对象的特征，于1980年开发出来的一种面向过程性与面向对象性相结合的程序设计语言。最初他把这种新的语言称为“含类的C”，到1983年才取名为C++。</p>\n<p>相比C语言，C++的主要特点是增加了<strong>面向对象</strong>机制。</p>\n<p>~</p>\n<h4><a id=\"22__C_40\"></a>2.2 一个简单的C++示例程序</h4>\n<p>详细创建步骤可参考博客<a href=\"https://blog.csdn.net/super828/article/details/92800608?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162217094316780264071896%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=162217094316780264071896&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-3-92800608.first_rank_v2_pc_rank_v29&amp;utm_term=vs2010%E6%96%B0%E5%BB%BAc%2B%2B%E9%A1%B9%E7%9B%AE&amp;spm=1018.2226.3001.4187\">【Visual Studio】 创建C/C++项目</a></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span>   <span class=\"token comment\">//编译预处理命令</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//使用命名空间</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">//函数原型说明</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//主函数</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter two numbers: \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcin <span class=\"token operator\">&gt;&gt;</span> x<span class=\"token punctuation\">;</span>\n\tcin <span class=\"token operator\">&gt;&gt;</span> y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The sum is : \"</span> <span class=\"token operator\">&lt;&lt;</span> sum <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\">//定义add()函数，函数值为整型</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>~</p>\n<h4><a id=\"23_CC_69\"></a>2.3 C++在非面向对象方面对C语言的扩充</h4>\n<h5><a id=\"font_colorpink_font_71\"></a><font color=\"pink\">输入和输出</font></h5>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> f<span class=\"token punctuation\">;</span>\ncin <span class=\"token operator\">&gt;&gt;</span> i<span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> f<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n连续读入\ncin <span class=\"token operator\">&gt;&gt;</span> a <span class=\"token operator\">&gt;&gt;</span> b <span class=\"token operator\">&gt;&gt;</span> c<span class=\"token punctuation\">;</span>\n</code></pre>\n<h5><a id=\"font_colorpinkcinfont_86\"></a><font color=\"pink\">cin</font></h5>\n<ul><li>在默认情况下，运算符“<code>&gt;&gt;</code>”将跳过空白符，然后读入后面与变量类型相对应的值。因此，给一组变量输入值时可用空格符、回车符、制表符将输入的数据间隔开。</li><li>当输入字符串（即类型为string的变量）时，提取运算符“<code>&gt;&gt;</code>”的作用是跳过空白字符，读入后面的非空白字符，直到遇到另一个空白字符为止，并在串尾放一个字符串结束标志‘<code>\\0</code>’。</li></ul>\n<p>~</p>\n<p>C++允许在代码块中的任何地方声明局部变量。</p>\n<h5><a id=\"font_colorpinkconstfont_95\"></a><font color=\"pink\">const修饰符</font></h5>\n<p>在C语言中，习惯使用<code>#define</code>来定义常量，例如<code>#define PI 3.14</code>，C++提供了一种更灵活、更安全的方式来定义常量，即使用<code>const</code>修饰符来定义常量。例如<code>const float PI = 3.14；</code></p>\n<p>const可以与指针一起使用，它们的组合情况复杂，可归纳为3种：指向常量的指针、常指针和指向常量的常指针。</p>\n<ul><li> <p><strong>指向常量的指针</strong>：一个指向常量的指针变量。</p> <pre><code class=\"prism language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pc <span class=\"token operator\">=</span> <span class=\"token string\">\"abcd\"</span><span class=\"token punctuation\">;</span>\n该方法不允许改变指针所指的变量，即\n    pc<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ‘x<span class=\"token number\">'</span><span class=\"token punctuation\">;</span>   是错误的，\n但是，由于pc是一个指向常量的普通指针变量，不是常指针，因此可以改变pc所指的地址，例如\n    pc <span class=\"token operator\">=</span> <span class=\"token string\">\"ervfs\"</span><span class=\"token punctuation\">;</span>\n该语句付给了指针另一个字符串的地址，改变了pc的值。\n</code></pre> </li><li> <p><strong>常指针</strong>：将指针变量所指的地址声明为常量</p> <pre><code class=\"prism language-cpp\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> pc <span class=\"token operator\">=</span> <span class=\"token string\">\"abcd\"</span><span class=\"token punctuation\">;</span>\n创建一个常指针，一个不能移动的固定指针，可更改内容，如\n    pc<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'x'</span><span class=\"token punctuation\">;</span>\n但不能改变地址，如\n    pc <span class=\"token operator\">=</span> <span class=\"token char\">'dsff'</span><span class=\"token punctuation\">;</span>  不合法\n</code></pre> </li><li> <p><strong>指向常量的常指针</strong>：这个指针所指的地址不能改变，它所指向的地址中的内容也不能改变。</p> <pre><code class=\"prism language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> pc <span class=\"token operator\">=</span> <span class=\"token string\">\"abcd\"</span><span class=\"token punctuation\">;</span>\n内容和地址均不能改变\n</code></pre> </li></ul>\n<blockquote>\n<p>说明：</p>\n<ol><li> <p>如果用const定义整型常量，关键字可以省略。即 <code>const in bufsize = 100</code> 与 <code>const bufsize = 100</code>等价；</p> </li><li> <p>常量一旦被建立，在程序的任何地方都不能再更改。</p> </li><li> <p>与#define不同，const定义的常量可以有自己的数据类型。</p> </li><li> <p>函数参数也可以用const说明，用于保证实参在该函数内不被改动。</p> </li></ol>\n</blockquote>\n<h5><a id=\"font_colorpinkvoidfont_138\"></a><font color=\"pink\">void型指针</font></h5>\n<p>void通常表示无值，但将void作为指针的类型时，它却表示不确定的类型。这种void型指针是一种通用型指针，也就是说<strong>任何类型的指针值都可以赋给void类型的指针变量</strong>。</p>\n<p>需要指出的是，这里说void型指针是通用指针，是指它可以接受任何类型的指针的赋值，但对已获值的void型指针，对它进行再处理，如输出或者传递指针值时，则必须再进行显式类型转换，否则会出错。</p>\n<pre><code class=\"prism language-cpp\">    <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> pc<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">;</span>\n    pc <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> pc <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>         <span class=\"token comment\">//输出指针地址006FF730</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pc <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//输出值123</span>\n    pc <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pc <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出值a</span>\n</code></pre>\n<h5><a id=\"font_colorpinkfont_155\"></a><font color=\"pink\">内联函数</font></h5>\n<p>在函数名前冠以关键字<code>inline</code>，该函数就被声明为<strong>内联函数</strong>。每当程序中出现对该函数的调用时，C++编译器使用函数体中的代码插入到调用该函数的语句之处，同时使用实参代替形参，以便在程序运行时不再进行函数调用。引入内联函数主要是为了消除调用函数时的系统开销，以提高运行速度。</p>\n<p><strong>说明</strong>：</p>\n<ul><li>内联函数在第一次被调用之前必须进行完整的定义，否则编译器将无法知道应该插入什么代码</li><li>在内联函数体内一般不能含有复杂的控制语句，如for语句和switch语句等</li><li>使用内联函数是一种空间换时间的措施，若内联函数较长，较复杂且调用较为频繁时不建议使用</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">double</span> <span class=\"token function\">circle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> r<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//内联函数</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">double</span> PI <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> PI <span class=\"token operator\">*</span> r <span class=\"token operator\">*</span> r<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"r = \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" area = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">circle</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>使用内联函数替代宏定义，能消除宏定义的不安全性</strong></p>\n<h5><a id=\"font_colorpinkfont_185\"></a><font color=\"pink\">带有默认参数值的函数</font></h5>\n<p>当进行函数调用时，编译器按从左到右的顺序将实参与形参结合，若未指定足够的实参，则编译器按顺序用函数原型中的默认值来补足所缺少的实参。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">init</span> <span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 100 ， 19</span>\n<span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 25, 10</span>\n<span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 5， 10</span>\n</code></pre>\n<ul><li> <p>在函数原型中，所有取默认值的参数都必须出现在不取默认值的参数的<strong>右边</strong>。</p> <pre><code class=\"prism language-cpp\">如    <span class=\"token keyword\">int</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> </li><li> <p>在函数调用时，若某个参数省略，则其后的参数皆应省略而采取默认值。不允许某个参数省略后，再给其后的参数指定参数值。</p> </li></ul>\n<h5><a id=\"font_colorpinkfont_204\"></a><font color=\"pink\">函数重载</font></h5>\n<p>在C++中，用户可以重载函数。这意味着，在同一作用域内，只要函数参数的类型不同，或者参数的个数不同，或者二者兼而有之，两个或者两个以上的函数可以使用相同的函数名。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> z<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> z<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10.334</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">8.9003</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>说明：</strong></p>\n<ul><li> <p>调用重载函数时，函数返回值类型不在参数匹配检查之列。因此，若两个函数的参数个数和类型都相同，而只有返回值类型不同，则不允许重载。</p> <pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> </li><li> <p>函数的重载与带默认值的函数一起使用时，有可能引起二义性。</p> <pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Drawcircle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Drawcircle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">Drawcircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> </li><li> <p>在调用函数时，如果给出的实参和形参类型不相符，C++的编译器会自动地做类型转换工作。如果转换成功，则程序继续执行，在这种情况下，有可能产生不可识别的错误。</p> <pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">f_a</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">f_a</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">f_a</span><span class=\"token punctuation\">(</span><span class=\"token number\">20.83</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> </li></ul>\n<h5><a id=\"font_colorpinkfont_263\"></a><font color=\"pink\">作用域标识符\"::\"</font></h5>\n<p>通常情况下，如果有两个同名变量，一个是全局的，另一个是局部的，那么局部变量在其作用域内具有较高的优先权，它将屏蔽全局变量。</p>\n<p>如果希望在局部变量的作用域内使用同名的全局变量，可以在该变量前加上“<code>::</code>”，此时<code>::value</code>代表全局变量value，“<code>::</code>”称为作用域标识符。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//定义全局变量value</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//定义局部变量value</span>\n\tvalue <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token double-colon punctuation\">::</span>value <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"local value : \"</span> <span class=\"token operator\">&lt;&lt;</span> value <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"global value : \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token double-colon punctuation\">::</span>value <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5><a id=\"font_colorpinkfont_286\"></a><font color=\"pink\">强制类型转换</font></h5>\n<p>可用强制类型转换将不同类型的数据进行转换。例如，要把一个整型数（int）转换为双精度型数（double），可使用如下的格式：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>i<span class=\"token punctuation\">;</span>\n或\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>以上两种方法C++都能接受，建议使用后一种方法。</p>\n<h5><a id=\"font_colorpinknewdeletefont_300\"></a><font color=\"pink\">new和delete运算符</font></h5>\n<p>程序运行时，计算机的内存被分为4个区：程序代码区、全局数据区、堆和栈。其中，堆可由用户分配和释放。C语言中使用函数<code>malloc()</code>和<code>free()</code>来进行动态内存管理。C++则提供了运算符<code>new</code>和<code>delete</code>来做同样的工作，而且后者比前者性能更优越，使用更灵活方便。</p>\n<pre><code class=\"prism language-cpp\">指针变量名 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> 类型\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n    p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> 指针变量名\n    <span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>下面对new和delete的使用再做一下几点说明：</p>\n<ul><li> <p>用运算符new分配的空间，使用结束后应该用也只能用delete显式地释放，否则这部分空间将不能回收而变成死空间。</p> </li><li> <p>在使用运算符new动态分配内存时，如果没有足够的内存满足分配要求，new将返回<strong>空指针</strong>（<code>NULL</code>）。</p> </li><li> <p>使用运算符new可以为数组动态分配内存空间，这时需要在类型后面加上数组大小。</p> <pre><code class=\"prism language-cpp\">指针变量名 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> 类型名<span class=\"token punctuation\">[</span>下标表达式<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>释放动态分配的数组存储区时，可使用delete运算符。</p> <pre><code class=\"prism language-cpp\"><span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>指针变量名<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span>\n</code></pre> </li><li> <p>new 可在为简单变量分配空间的同时，进行初始化</p> <pre><code class=\"prism language-cpp\">指针变量名 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> 类型名<span class=\"token punctuation\">(</span>初值<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\np <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n···\n<span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span>\n</code></pre> </li></ul>\n<h5><a id=\"font_colorpinkfont_342\"></a><font color=\"pink\">引用</font></h5>\n<p><strong>引用</strong>（<code>reference</code>）是C++对C的一个重要扩充。变量的引用就是变量的别名，因此引用又称<strong>别名</strong>。</p>\n<pre><code class=\"prism language-cpp\">类型 <span class=\"token operator\">&amp;</span>引用名 <span class=\"token operator\">=</span> 已定义的变量名\n</code></pre>\n<p>引用与其所代表的变量共享同一内存单元，系统并不为引用另外分配存储空间。实际上，编译系统使引用和其代表的变量具有相同的地址。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"i = \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" j = \"</span> <span class=\"token operator\">&lt;&lt;</span> j <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"i的地址为 \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"j的地址为 \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>j <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上面代码输出i和j的值相同，地址也相同。</p>\n<ul><li>引用并不是一种独立的数据类型，它必须与某一种类型的变量相联系。在声明引用时，必须立即对它进行初始化，不能声明完成后再赋值。</li><li>为引用提供的初始值，可以是一个变量或者另一个引用。</li><li>指针是通过地址间接访问某个变量，而引用则是通过别名直接访问某个变量。</li></ul>\n<p><font color=\"red\">引用作为函数参数、使用引用返回函数值</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n\ta <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n\tb <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//交换数字a和b</span>\n\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" b = \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//等价于输出元素a[2]的值</span>\n\t<span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">//等价于将a[2]的值赋为100;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font color=\"red\">对引用的进一步说明</font></p>\n<ul><li>不允许建立void类型的引用</li><li>不能建立引用的数组</li><li>不能建立引用的引用。不能建立指向引用的指针。引用本身不是一种数据类型，所以没有引用的引用，也没有引用的指针。</li><li>可以将引用的地址赋值给一个指针，此时指针指向的是原来的变量。</li><li>可以用const对引用加以限定，不允许改变该引用的值，但是它不阻止引用所代表的变量的值。</li></ul>\n<hr/>\n<h3><a id=\"_418\"></a>三、类和对象（一）</h3>\n<p>~</p>\n<h4><a id=\"31__422\"></a>3.1 类的构成</h4>\n<p>类声明中的内容包括数据和函数，分别称为数据成员和成员函数。按访问权限划分，数据成员和成员函数又可分为共有、保护和私有3种。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> 类名<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span>：\n        公有数据成员；\n        公有成员函数；\n    <span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n        保护数据成员；\n        保护成员函数；\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n        私有数据成员；\n        私有成员函数；\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>如成绩类</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Score</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setScore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> mid_exam<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> fin_exam<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>对一个具体的类来讲，类声明格式中的3个部分并非一定要全有，但至少要有其中的一个部分。一般情况下，一个类的数据成员应该声明为私有成员，成员函数声明为共有成员。这样，内部的数据整个隐蔽在类中，在类的外部根本就无法看到，使数据得到有效的保护，也不会对该类以外的其余部分造成影响，程序之间的相互作用就被降低到最小。</li><li>类声明中的关键字private、protected、public可以任意顺序出现。</li><li>若私有部分处于类的第一部分时，关键字private可以省略。这样，如果一个类体中没有一个访问权限关键字，则其中的数据成员和成员函数都默认为私有的。</li><li>不能在类声明中给数据成员赋初值。</li></ul>\n<p>~</p>\n<h4><a id=\"32__460\"></a>3.2 成员函数的定义</h4>\n<p><font color=\"pink\" size=\"4\"><strong>普通成员函数的定义</strong></font></p>\n<p>在类的声明中只给出成员函数的原型，而成员函数的定义写在类的外部。这种成员函数在类外定义的一般形式是：</p>\n<pre><code class=\"prism language-cpp\">返回值类型 类名<span class=\"token double-colon punctuation\">::</span>成员函数名<span class=\"token punctuation\">(</span>参数表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>    函数体<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>例如，表示分数的类Score可声明如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Score</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setScore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> mid_exam<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> fin_exam<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Score</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setScore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\tmid_exam <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n\tfin_exam <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Score</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"期中成绩: \"</span> <span class=\"token operator\">&lt;&lt;</span> mid_exam <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"期末成绩：\"</span> <span class=\"token operator\">&lt;&lt;</span> fin_exam <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font color=\"pink\" size=\"4\"><strong>内联成员函数的定义</strong></font></p>\n<ul><li><strong>隐式声明</strong>：将成员函数直接定义在类的内部</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Score</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setScore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tmid_exam <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n\t\tfin_exam <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"期中成绩: \"</span> <span class=\"token operator\">&lt;&lt;</span> mid_exam <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"期末成绩：\"</span> <span class=\"token operator\">&lt;&lt;</span> fin_exam <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> mid_exam<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> fin_exam<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li><strong>显式声明</strong>：在类声明中只给出成员函数的原型，而将成员函数的定义放在类的外部。</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Score</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setScore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> mid_exam<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> fin_exam<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Score</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setScore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\tmid_exam <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n\tfin_exam <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Score</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"期中成绩: \"</span> <span class=\"token operator\">&lt;&lt;</span> mid_exam <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"期末成绩：\"</span> <span class=\"token operator\">&lt;&lt;</span> fin_exam <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>说明</strong>：在类中，使用inline定义内联函数时，必须将类的声明和内联成员函数的定义都放在同一个文件（或同一个头文件）中，否则编译时无法进行代码置换。</p>\n<p>~</p>\n<h4><a id=\"33__548\"></a>3.3 对象的定义和使用</h4>\n<p>通常把具有共同属性和行为的事物所构成的集合称为类。</p>\n<p>类的对象可以看成该类类型的一个实例，定义一个对象和定义一个一般变量相似。</p>\n<p><font color=\"pink\" size=\"4\"><strong>对象的定义</strong></font></p>\n<ul><li>在声明类的同时，直接定义对象</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Score</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setScore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> mid_exam<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> fin_exam<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>op1<span class=\"token punctuation\">,</span> op2<span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>声明了类之后，在使用时再定义对象</li></ul>\n<pre><code class=\"prism language-cpp\">  Score op1<span class=\"token punctuation\">,</span> op2<span class=\"token punctuation\">;</span>\n</code></pre>\n<p><font color=\"pink\" size=\"4\"><strong>对象中成员的访问</strong></font></p>\n<pre><code class=\"prism language-cpp\">对象名<span class=\"token punctuation\">.</span>数据成员名对象名<span class=\"token punctuation\">.</span>成员函数名<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>参数表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>op1<span class=\"token punctuation\">.</span><span class=\"token function\">setScore</span><span class=\"token punctuation\">(</span><span class=\"token number\">89</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nop1<span class=\"token punctuation\">.</span><span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>说明</strong>：</p>\n<ul><li> <p>在类的内部所有成员之间都可以通过成员函数直接访问，但是类的外部不能访问对象的私有成员。</p> </li><li> <p>在定义对象时，若定义的是指向此对象的指针变量，则访问此对象的成员时，不能用“<code>.</code>”操作符，而应该使用“<code>-&gt;</code>“操作符。如</p> <pre><code class=\"prism language-cpp\">\tScore op<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>sc<span class=\"token punctuation\">;</span>\n\tsc <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>op<span class=\"token punctuation\">;</span>\n\tsc<span class=\"token operator\">-&gt;</span><span class=\"token function\">setScore</span><span class=\"token punctuation\">(</span><span class=\"token number\">99</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\top<span class=\"token punctuation\">.</span><span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> </li></ul>\n<p><font color=\"pink\" size=\"4\"><strong>类的作用域和类成员的访问属性</strong></font></p>\n<p>私有成员只能被类中的成员函数访问，不能在类的外部，通过类的对象进行访问。</p>\n<p>一般来说，公有成员是类的对外接口，而私有成员是类的内部数据和内部实现，不希望外界访问。将类的成员划分为不同的访问级别有两个好处：一是信息隐蔽，即实现封装，将类的内部数据与内部实现和外部接口分开，这样使该类的外部程序不需要了解类的详细实现；二是数据保护，即将类的重要信息保护起来，以免其他程序进行不恰当的修改。</p>\n<p><font color=\"pink\" size=\"4\"><strong>对象赋值语句</strong></font></p>\n<pre><code class=\"prism language-cpp\">\tScore op1<span class=\"token punctuation\">,</span> op2<span class=\"token punctuation\">;</span>\n\top1<span class=\"token punctuation\">.</span><span class=\"token function\">setScore</span><span class=\"token punctuation\">(</span><span class=\"token number\">99</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\top2 <span class=\"token operator\">=</span> op1<span class=\"token punctuation\">;</span>\n\top2<span class=\"token punctuation\">.</span><span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>~</p>\n<h4><a id=\"34__612\"></a>3.4 构造函数与析构函数</h4>\n<h5><a id=\"font_colorpinkfont_614\"></a><font color=\"pink\">构造函数</font></h5>\n<p>构造函数是一种特殊的成员函数，它主要用于为对象分配空间，进行初始化。构造函数的名字必须与类名相同，而不能由用户任意命名。它可以有任意类型的参数，但不能具有返回值。它不需要用户来调用，而是在建立对象时自动执行。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Score</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//构造函数</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setScore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> mid_exam<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> fin_exam<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Score</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tmid_exam <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n\tfin_exam <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在建立对象的同时，采用构造函数给数据成员赋值，通常由以下两种形式</p>\n<ul><li> <pre><code class=\"prism language-cpp\">类名 对象名<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>实参表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\nScore <span class=\"token function\">op1</span><span class=\"token punctuation\">(</span><span class=\"token number\">99</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nop1<span class=\"token punctuation\">.</span><span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> </li><li> <pre><code class=\"prism language-cpp\">类名 <span class=\"token operator\">*</span>指针变量名 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> 类名<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>实参表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\nScore <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\np <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token number\">99</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\np<span class=\"token operator\">-&gt;</span><span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\nScore <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token number\">99</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\np<span class=\"token operator\">-&gt;</span><span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> </li></ul>\n<p><strong>说明：</strong></p>\n<ul><li>构造函数的名字必须与类名相同，否则编译程序将把它当做一般的成员函数来处理。</li><li>构造函数没有返回值，在定义构造函数时，是不能说明它的类型的。</li><li>与普通的成员函数一样，构造函数的函数体可以写在类体内，也可写在类体外。</li><li>构造函数一般声明为共有成员，但它不需要也不能像其他成员函数那样被显式地调用，它是在定义对象的同时被自动调用，而且只执行一次。</li><li>构造函数可以不带参数。</li></ul>\n<h5><a id=\"font_colorpinkfont_662\"></a><font color=\"pink\">成员初始化列表</font></h5>\n<p>在声明类时，对数据成员的初始化工作一般在构造函数中用赋值语句进行。此外还可以用成员初始化列表实现对数据成员的初始化。</p>\n<pre><code class=\"prism language-cpp\">类名<span class=\"token double-colon punctuation\">::</span>构造函数名<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>参数表<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>成员初始化列表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//构造函数体</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> rx<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> pi<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">rx</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">pi</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">//成员初始化列表</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"x = \"</span> <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" rx = \"</span> <span class=\"token operator\">&lt;&lt;</span> rx <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" pi = \"</span> <span class=\"token operator\">&lt;&lt;</span> pi <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>**说明：**类成员是按照它们在类里被声明的顺序进行初始化的，与它们在成员初始化列表中列出的顺序无关。</p>\n<h5><a id=\"font_colorpinkfont_691\"></a><font color=\"pink\">带默认参数的构造函数</font></h5>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Score</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//带默认参数的构造函数</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setScore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> mid_exam<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> fin_exam<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Score</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">mid_exam</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">fin_exam</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"构造函数使用中...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Score</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setScore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\tmid_exam <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n\tfin_exam <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Score</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"期中成绩: \"</span> <span class=\"token operator\">&lt;&lt;</span> mid_exam <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"期末成绩：\"</span> <span class=\"token operator\">&lt;&lt;</span> fin_exam <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\tScore <span class=\"token function\">op1</span><span class=\"token punctuation\">(</span><span class=\"token number\">99</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tScore <span class=\"token function\">op2</span><span class=\"token punctuation\">(</span><span class=\"token number\">88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tScore op3<span class=\"token punctuation\">;</span>\n\top1<span class=\"token punctuation\">.</span><span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\top2<span class=\"token punctuation\">.</span><span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\top3<span class=\"token punctuation\">.</span><span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5><a id=\"font_colorpinkfont_737\"></a><font color=\"pink\">析构函数</font></h5>\n<p>析构函数也是一种特殊的成员函数。它执行与构造函数相反的操作，通常用于撤销对象时的一些清理任务，如释放分配给对象的内存空间等。析构函数有以下一些特点：</p>\n<ol><li>析构函数与构造函数名字相同，但它前面必须加一个波浪号（~）。</li><li>析构函数没有参数和返回值，也不能被重载，因此只有一个。</li><li>当撤销对象时，编译系统会自动调用析构函数。</li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Score</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">//析构函数</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> mid_exam<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> fin_exam<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Score</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">mid_exam</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">fin_exam</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"构造函数使用中...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Score</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"析构函数使用中...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>**说明：**在以下情况中，当对象的生命周期结束时，析构函数会被自动调用：</p>\n<ul><li>如果定义了一个全局对象，则在程序流程离开其作用域时，调用该全局对象的析构函数。</li><li>如果一个对象定义在一个函数体内，则当这个函数被调用结束时，该对象应该被释放，析构函数被自动调用。</li><li>若一个对象是使用<code>new</code>运算符创建的，在使用<code>delete</code>运算符释放它时，<code>delete</code>会自动调用析构函数。</li></ul>\n<p>如下示例：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>stu_no<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> score<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>stu_no1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> score1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">modify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> score1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Student</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>stu_no1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> score1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tname <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>name1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> name1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstu_no <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>stu_no1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>stu_no<span class=\"token punctuation\">,</span> stu_no1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tscore <span class=\"token operator\">=</span> score1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Student</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>stu_no<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Student</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">modify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> score1<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\tscore <span class=\"token operator\">=</span> score1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Student</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"姓名: \"</span> <span class=\"token operator\">&lt;&lt;</span> name <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"学号: \"</span> <span class=\"token operator\">&lt;&lt;</span> stu_no <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"成绩：\"</span> <span class=\"token operator\">&lt;&lt;</span> score <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tStudent <span class=\"token function\">stu</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"雪女\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2020199012\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstu<span class=\"token punctuation\">.</span><span class=\"token function\">modify</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstu<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5><a id=\"font_colorpinkfont_829\"></a><font color=\"pink\">默认的构造函数和析构函数</font></h5>\n<p>如果没有给类定义构造函数，则编译系统自动生成一个默认的构造函数。</p>\n<p><strong>说明：</strong></p>\n<ul><li> <p>对没有定义构造函数的类，其公有数据成员可以用初始值列表进行初始化。</p> <pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> no<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nA a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"chen\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span>no <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n</code></pre> </li><li> <p>只要一个类定义了一个构造函数（不一定是无参构造函数），系统将不再给它提供默认的构造函数。</p> </li></ul>\n<p>每个类必须有一个析构函数。若没有显示地为一个类定义析构函数，编译系统会自动生成一个默认的析构函数。</p>\n<h5><a id=\"font_colorpinkfont_852\"></a><font color=\"pink\">构造函数的重载</font></h5>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Score</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//构造函数</span>\n\t<span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setScore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> mid_exam<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> fin_exam<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>**注意：**在一个类中，当无参数的构造函数和带默认参数的构造函数重载时，有可能产生二义性。</p>\n<h5><a id=\"font_colorpinkfont_869\"></a><font color=\"pink\">拷贝构造函数</font></h5>\n<p>拷贝构造函数是一种特殊的构造函数，其形参是本类对象的引用。拷贝构造函数的作用是在建立一个新对象时，使用一个已存在的对象去初始化这个新对象。</p>\n<p>拷贝构造函数具有以下特点：</p>\n<ul><li>因为拷贝构造函数也是一种构造函数，所以其函数名与类名相同，并且该函数也没有返回值。</li><li>拷贝构造函数只有一个参数，并且是同类对象的引用。</li><li>每个类都必须有一个拷贝构造函数。可以自己定义拷贝构造函数，用于按照需要初始化新对象；如果没有定义类的拷贝构造函数，系统就会自动生成一个<strong>默认拷贝构造函数</strong>，用于复制出与数据成员值完全相同的新对象。</li></ul>\n<p><font color=\"red\">自定义拷贝构造函数</font></p>\n<pre><code class=\"prism language-cpp\">类名<span class=\"token double-colon punctuation\">::</span>类名<span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> 类名 <span class=\"token operator\">&amp;</span>对象名<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n    拷贝构造函数的函数体；\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Score</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//构造函数</span>\n\t<span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Score <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//拷贝构造函数</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">//析构函数</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setScore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> mid_exam<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> fin_exam<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Score</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tmid_exam <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n\tfin_exam <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Score</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Score <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tmid_exam <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>mid_exam<span class=\"token punctuation\">;</span>\n\tfin_exam <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>fin_exam<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n调用拷贝构造函数的一般形式为：\n    类名 对象<span class=\"token number\">2</span><span class=\"token punctuation\">(</span>对象<span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    类名 对象<span class=\"token number\">2</span> <span class=\"token operator\">=</span> 对象<span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nScore <span class=\"token function\">sc1</span><span class=\"token punctuation\">(</span><span class=\"token number\">98</span><span class=\"token punctuation\">,</span> <span class=\"token number\">87</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nScore <span class=\"token function\">sc2</span><span class=\"token punctuation\">(</span>sc1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//调用拷贝构造函数</span>\nScore sc3 <span class=\"token operator\">=</span> sc2<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//调用拷贝构造函数</span>\n</code></pre>\n<p><font color=\"red\">调用拷贝构造函数的三种情况：</font></p>\n<ul><li>当用类的一个对象去初始化该类的另一个对象时；</li><li>当函数的形参是类的对象，调用函数进行形参和实参结合时；</li><li>当函数的返回值是对象，函数执行完成返回调用者时。</li></ul>\n<h5><a id=\"font_colorpinkfont_926\"></a><font color=\"pink\">浅拷贝和深拷贝</font></h5>\n<p>浅拷贝，就是由默认的拷贝构造函数所实现的数据成员逐一赋值。通常默认的拷贝构造函数是能够胜任此工作的，但若类中含有<code>指针类型</code>的数据，则这种按数据成员逐一赋值的方法会产生错误。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> score1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> score<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n如下语句会产生错误\nStudent <span class=\"token function\">stu1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">89</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nStudent stu2 <span class=\"token operator\">=</span> stu1<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>上述错误是因为stu1和stu2所指的内存空间相同，在析构函数释放stu1所指的内存后，再释放stu2所指的内存会发生错误，因为此内存空间已被释放。解决方法就是重定义拷贝构造函数，为其变量重新生成内存空间。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token class-name\">Student</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Student<span class=\"token operator\">&amp;</span> stu<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    name <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> stu<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        score <span class=\"token operator\">=</span> stu<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h3><a id=\"_962\"></a>四、类和对象（二）</h3>\n<p>~</p>\n<h4><a id=\"41_this_966\"></a>4.1 自引用指针this</h4>\n<p><code>this</code>指针保存当前对象的地址，称为<strong>自引用指针</strong>。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">Sample</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>Sample<span class=\"token operator\">&amp;</span> xy<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>xy<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token operator\">=</span> xy<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>~</p>\n<h4><a id=\"42__980\"></a>4.2 对象数组与对象指针</h4>\n<p><strong>对象数组</strong></p>\n<pre><code class=\"prism language-cpp\">类名 数组名<span class=\"token punctuation\">[</span>下标表达式<span class=\"token punctuation\">]</span>\n用只有一个参数的构造函数给对象数组赋值\nExam ob<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">89</span><span class=\"token punctuation\">,</span> <span class=\"token number\">97</span><span class=\"token punctuation\">,</span> <span class=\"token number\">79</span><span class=\"token punctuation\">,</span> <span class=\"token number\">88</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n用不带参数和带一个参数的构造函数给对象数组赋值\nExam ob<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">89</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n用带有多个参数的构造函数给对象数组赋值\nScore rec<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token number\">87</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token number\">99</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>对象指针</strong></p>\n<p>每一个对象在初始化后都会在内存中占有一定的空间。因此，既可以通过对象名访问对象，也可以通过对象地址来访问对象。对象指针就是用于存放对象地址的变量。声明对象指针的一半语法形式为：<code>类名 *对象指针名</code></p>\n<pre><code class=\"prism language-cpp\">Score score<span class=\"token punctuation\">;</span>\nScore <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\np <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>score<span class=\"token punctuation\">;</span>\np<span class=\"token operator\">-&gt;</span>成员函数<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>用对象指针访问对象数组</p>\n<pre><code class=\"prism language-cpp\">Score score<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nscore<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setScore</span><span class=\"token punctuation\">(</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nscore<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setScore</span><span class=\"token punctuation\">(</span><span class=\"token number\">67</span><span class=\"token punctuation\">,</span> <span class=\"token number\">89</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nScore <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\np <span class=\"token operator\">=</span> score<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//将对象score的地址赋值给p</span>\np<span class=\"token operator\">-&gt;</span><span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\np<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//对象指针变量加1</span>\np<span class=\"token operator\">-&gt;</span><span class=\"token function\">showSccore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nScore <span class=\"token operator\">*</span>q<span class=\"token punctuation\">;</span>\nq <span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>score<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//将第二个数组元素的地址赋值给对象指针变量q</span>\n</code></pre>\n<p>~</p>\n<h4><a id=\"43_string_1024\"></a>4.3 string类</h4>\n<p>C++支持两种类型的字符串，第一种是C语言中介绍过的、包括一个结束符’<code>\\0</code>’（即以<code>NULL</code>结束）的字符数组，标准库函数提供了一组对其进行操作的函数，可以完成许多常用的字符串操作。</p>\n<p>C++标准库中声明了一种更方便的字符串类型，即字符串类string，类string提供了对字符串进行处理所需要的操作。使用string类必须在程序的开始包括头文件string，即要有以下语句：<code>#include &lt;string&gt;</code></p>\n<p>常用的string类运算符如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token operator\">=</span>、<span class=\"token operator\">+</span>、<span class=\"token operator\">+=</span>、<span class=\"token operator\">==</span>、<span class=\"token operator\">!=</span>、<span class=\"token operator\">&lt;</span>、<span class=\"token operator\">&lt;=</span>、<span class=\"token operator\">&gt;</span>、<span class=\"token operator\">&gt;=</span>、<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>（访问下标对应字符）、<span class=\"token operator\">&gt;&gt;</span>（输入）、<span class=\"token operator\">&lt;&lt;</span>（输出）\n</code></pre>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tstring str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"ABC\"</span><span class=\"token punctuation\">;</span>\n\tstring <span class=\"token function\">str2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dfdf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstring str3 <span class=\"token operator\">=</span> str1 <span class=\"token operator\">+</span> str2<span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"str1 = \"</span> <span class=\"token operator\">&lt;&lt;</span> str1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  str2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> str2 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  str3 = \"</span> <span class=\"token operator\">&lt;&lt;</span> str3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tstr2 <span class=\"token operator\">+=</span> str2<span class=\"token punctuation\">;</span>\n\tstr3 <span class=\"token operator\">+=</span> <span class=\"token string\">\"aff\"</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"str2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> str2 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  str3 = \"</span> <span class=\"token operator\">&lt;&lt;</span> str3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"str1[1] = \"</span> <span class=\"token operator\">&lt;&lt;</span> str1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  str1 == str2 ? \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>str1 <span class=\"token operator\">==</span> str2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tstring str <span class=\"token operator\">=</span> <span class=\"token string\">\"ABC\"</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"str == str1 ? \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>str <span class=\"token operator\">==</span> str1<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>~</p>\n<h4><a id=\"44__1059\"></a>4.4 向函数传递对象</h4>\n<ul><li><strong>使用对象作为函数参数</strong>：对象可以作为参数传递给函数，其方法与传递其他类型的数据相同。在向函数传递对象时，是通过“传值调用”的方法传递给函数的。因此，函数中对对象的任何修改均不影响调用该函数的对象（实参本身）。</li><li><strong>使用对象指针作为函数参数</strong>：对象指针可以作为函数的参数，使用对象指针作为函数参数可以实现传值调用，即在函数调用时使实参对象和形参对象指针变量指向同一内存地址，在函数调用过程中，形参对象指针所指的对象值的改变也同样影响着实参对象的值。</li><li><strong>使用对象引用作为函数参数</strong>：在实际中，使用对象引用作为函数参数非常普遍，大部分程序员喜欢使用对象引用替代对象指针作为函数参数。因为使用对象引用作为函数参数不但具有用对象指针做函数参数的优点，而且用对象引用作函数参数将更简单、更直接。</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y1<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>y1<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//成员初始化列表</span>\n    <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getDistance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">changePoint1</span><span class=\"token punctuation\">(</span>Point point<span class=\"token punctuation\">)</span>    <span class=\"token comment\">//使用对象作为函数参数</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tpoint<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tpoint<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">changePoint2</span><span class=\"token punctuation\">(</span>Point <span class=\"token operator\">*</span>point<span class=\"token punctuation\">)</span>   <span class=\"token comment\">//使用对象指针作为函数参数</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tpoint<span class=\"token operator\">-&gt;</span>x <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tpoint<span class=\"token operator\">-&gt;</span>y <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">changePoint3</span><span class=\"token punctuation\">(</span>Point <span class=\"token operator\">&amp;</span>point<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//使用对象引用作为函数参数</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tpoint<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tpoint<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tPoint point<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tPoint <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> point<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">changePoint1</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"the distance is \"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDistance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tp<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">changePoint2</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"the distance is \"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token operator\">-&gt;</span><span class=\"token function\">getDistance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">changePoint3</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"the distance is \"</span> <span class=\"token operator\">&lt;&lt;</span> point<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDistance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>~</p>\n<h4><a id=\"45__1118\"></a>4.5 静态成员</h4>\n<p><font color=\"pink\" size=\"5\">静态数据成员</font></p>\n<p>在一个类中，若将一个数据成员说明为<code>static</code>，则这种成员被称为<strong>静态数据成员</strong>。与一般的数据成员不同，无论建立多少个类的对象，都只有一个静态数据成员的拷贝。从而实现了同一个类的不同对象之间的数据共享。</p>\n<p>定义静态数据成员的格式如下：<code>static 数据类型 数据成员名;</code></p>\n<p><strong>说明：</strong></p>\n<ol><li> <p>静态数据成员的定义与普通数据成员相似，但前面要加上static关键字。</p> </li><li> <p>静态数据成员的初始化与普通数据成员不同。静态数据成员初始化应在类外单独进行，而且应在定义对象之前进行。一般在main()函数之前、类声明之后的特殊地带为它提供定义和初始化。</p> </li><li> <p>静态数据成员属于类（准确地说，是属于类中对象的集合），而不像普通数据成员那样属于某一对象，因此，可以使用“<code>类名::</code>”访问静态的数据成员。格式如下：<code>类名::静态数据成员名</code>。</p> </li><li> <p>静态数据成员与静态变量一样，是在编译时创建并初始化。它在该类的任何对象被建立之前就存在。因此，共有的静态数据成员可以在对象定义之前被访问。对象定以后，共有的静态数据成员也可以通过对象进行访问。其访问格式如下</p> <pre><code class=\"prism language-cpp\">对象名<span class=\"token punctuation\">.</span>静态数据成员名<span class=\"token punctuation\">;</span>\n对象指针<span class=\"token operator\">-&gt;</span>静态数据成员名<span class=\"token punctuation\">;</span>\n</code></pre> </li></ol>\n<p><font color=\"pink\" size=\"5\">静态成员函数</font></p>\n<p>在类定义中，前面有static说明的成员函数称为静态成员函数。静态成员函数属于整个类，是该类所有对象共享的成员函数，而不属于类中的某个对象。静态成员函数的作用不是为了对象之间的沟通，而是为了处理静态数据成员。定义静态成员函数的格式如下：</p>\n<p><code>static 返回类型 静态成员函数名（参数表）</code>；</p>\n<p>与静态数据成员类似，调用公有静态成员函数的一般格式有如下几种：</p>\n<pre><code class=\"prism language-cpp\">类名<span class=\"token double-colon punctuation\">::</span>静态成员函数名<span class=\"token punctuation\">(</span>实参表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n对象<span class=\"token punctuation\">.</span>静态成员函数名<span class=\"token punctuation\">(</span>实参表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n对象指针<span class=\"token operator\">-&gt;</span>静态成员函数名<span class=\"token punctuation\">(</span>实参表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>一般而言，静态成员函数不访问类中的非静态成员。若确实需要，静态成员函数只能通过对象名（或对象指针、对象引用）访问该对象的非静态成员。</p>\n<p>下面对静态成员函数的使用再做几点说明：</p>\n<ol><li>一般情况下，静态函数成员主要用来访问静态成员函数。当它与静态数据成员一起使用时，达到了对同一个类中对象之间共享数据的目的。</li><li>私有静态成员函数不能被类外部的函数和对象访问。</li><li>使用静态成员函数的一个原因是，可以用它在建立任何对象之前调用静态成员函数，以处理静态数据成员，这是普通成员函数不能实现的功能</li><li>编译系统将静态成员函数限定为内部连接，也就是说，与现行文件相连接的其他文件中的同名函数不会与该函数发生冲突，维护了该函数使用的安全性，这是使用静态成员函数的另一个原因。</li><li>静态成员函数是类的一部分，而不是对象的一部分。如果要在类外调用公有的静态成员函数，使用如下格式较好：<code>类名::静态成员函数名()</code></li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Score</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> mid_exam<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> fin_exam<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>     <span class=\"token comment\">//静态数据成员，用于统计学生人数</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">float</span> sum<span class=\"token punctuation\">;</span>     <span class=\"token comment\">//静态数据成员，用于统计期末累加成绩</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">float</span> ave<span class=\"token punctuation\">;</span>     <span class=\"token comment\">//静态数据成员，用于统计期末平均成绩</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show_count_sum_ave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//静态成员函数</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Score</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tmid_exam <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n\tfin_exam <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">++</span>count<span class=\"token punctuation\">;</span>\n\tsum <span class=\"token operator\">+=</span> fin_exam<span class=\"token punctuation\">;</span>\n\tave <span class=\"token operator\">=</span> sum <span class=\"token operator\">/</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Score</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*** 静态成员初始化 ***/</span>\n<span class=\"token keyword\">int</span> Score<span class=\"token double-colon punctuation\">::</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> Score<span class=\"token double-colon punctuation\">::</span>sum <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> Score<span class=\"token double-colon punctuation\">::</span>ave <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Score</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">show_count_sum_ave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"学生人数: \"</span> <span class=\"token operator\">&lt;&lt;</span> count <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"期末累加成绩: \"</span> <span class=\"token operator\">&lt;&lt;</span> sum <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"期末平均成绩: \"</span> <span class=\"token operator\">&lt;&lt;</span> ave <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tScore sco<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">89</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token number\">78</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token number\">89</span><span class=\"token punctuation\">,</span> <span class=\"token number\">88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tsco<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">show_count_sum_ave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Score</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">show_count_sum_ave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>~</p>\n<h4><a id=\"46__1220\"></a>4.6 友元</h4>\n<p>类的主要特点之一是数据隐藏和封装，即类的私有成员（或保护成员）只能在类定义的范围内使用，也就是说私有成员只能通过它的成员函数来访问。但是，有时为了访问类的私有成员而需要在程序中多次调用成员函数，这样会因为频繁调用带来较大的时间和空间开销，从而降低程序的运行效率。为此，C++提供了友元来对私有或保护成员进行访问。友元包括友元函数和友元类。</p>\n<h5><a id=\"font_colorpinkfont_1224\"></a><font color=\"pink\">友元函数</font></h5>\n<p>友元函数既可以是不属于任何类的非成员函数，也可以是另一个类的成员函数。友元函数不是当前类的成员函数，但它可以访问该类的所有成员，包括私有成员、保护成员和公有成员。</p>\n<p>在类中声明友元函数时，需要在其函数名前加上关键字friend。此声明可以放在公有部分，也可以放在保护部分和私有部分。友元函数可以定义在类内部，也可以定义在类外部。</p>\n<p>1、将非成员函数声明为友元函数</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Score</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> mid_exam<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> fin_exam<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">showScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span>Score <span class=\"token operator\">&amp;</span>ob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Score</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tmid_exam <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n\tfin_exam <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span>Score <span class=\"token operator\">&amp;</span>ob<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.3</span> <span class=\"token operator\">*</span> ob<span class=\"token punctuation\">.</span>mid_exam <span class=\"token operator\">+</span> <span class=\"token number\">0.7</span> <span class=\"token operator\">*</span> ob<span class=\"token punctuation\">.</span>fin_exam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tScore <span class=\"token function\">score</span><span class=\"token punctuation\">(</span><span class=\"token number\">98</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"成绩为: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>说明：</strong></p>\n<ol><li>友元函数虽然可以访问类对象的私有成员，但他毕竟不是成员函数。因此，在类的外部定义友元函数时，不必像成员函数那样，在函数名前加上“<code>类名::</code>”。</li><li>因为友元函数不是类的成员，所以它不能直接访问对象的数据成员，也不能通过this指针访问对象的数据成员，它必须通过作为<strong>入口参数</strong>传递进来的对象名（或对象指针、对象引用）来访问该对象的数据成员。</li><li>友元函数提供了不同类的成员函数之间、类的成员函数与一般函数之间进行数据共享的机制。尤其当一个函数需要访问多个类时，友元函数非常有用，普通的成员函数只能访问其所属的类，但是多个类的友元函数能够访问相关的所有类的数据。</li></ol>\n<p>例子：一个函数同时定义为两个类的友元函数</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Score</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//对Score类的提前引用说明</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tstring name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>string na<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nu<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tname <span class=\"token operator\">=</span> na<span class=\"token punctuation\">;</span>\n\t\tnumber <span class=\"token operator\">=</span> nu<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>Score <span class=\"token operator\">&amp;</span>sc<span class=\"token punctuation\">,</span> Student <span class=\"token operator\">&amp;</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Score</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> mid_exam<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> fin_exam<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tmid_exam <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n\t\tfin_exam <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>Score <span class=\"token operator\">&amp;</span>sc<span class=\"token punctuation\">,</span> Student <span class=\"token operator\">&amp;</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>Score <span class=\"token operator\">&amp;</span>sc<span class=\"token punctuation\">,</span> Student <span class=\"token operator\">&amp;</span>st<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"姓名：\"</span> <span class=\"token operator\">&lt;&lt;</span> st<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  学号：\"</span> <span class=\"token operator\">&lt;&lt;</span> st<span class=\"token punctuation\">.</span>number <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"期中成绩：\"</span> <span class=\"token operator\">&lt;&lt;</span> sc<span class=\"token punctuation\">.</span>mid_exam <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  期末成绩：\"</span> <span class=\"token operator\">&lt;&lt;</span> sc<span class=\"token punctuation\">.</span>fin_exam <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tScore <span class=\"token function\">sc</span><span class=\"token punctuation\">(</span><span class=\"token number\">89</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tStudent <span class=\"token function\">st</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12467</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">show</span><span class=\"token punctuation\">(</span>sc<span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>2、将成员函数声明为友元函数</p>\n<p>一个类的成员函数可以作为另一个类的友元，它是友元函数中的一种，称为<strong>友元成员函数</strong>。友元成员函数不仅可以访问自己所在类对象中的私有成员和公有成员，还可以访问friend声明语句所在类对象中的所有成员，这样能使两个类相互合作、协调工作，完成某一任务。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Score</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//对Score类的提前引用说明</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tstring name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>string na<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nu<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tname <span class=\"token operator\">=</span> na<span class=\"token punctuation\">;</span>\n\t\tnumber <span class=\"token operator\">=</span> nu<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>Score <span class=\"token operator\">&amp;</span>sc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Score</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> mid_exam<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> fin_exam<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Score</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tmid_exam <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n\t\tfin_exam <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Student</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span>Score <span class=\"token operator\">&amp;</span>sc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Student</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span>Score <span class=\"token operator\">&amp;</span>sc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"姓名：\"</span> <span class=\"token operator\">&lt;&lt;</span> name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  学号：\"</span> <span class=\"token operator\">&lt;&lt;</span> number <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"期中成绩：\"</span> <span class=\"token operator\">&lt;&lt;</span> sc<span class=\"token punctuation\">.</span>mid_exam <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  期末成绩：\"</span> <span class=\"token operator\">&lt;&lt;</span> sc<span class=\"token punctuation\">.</span>fin_exam <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tScore <span class=\"token function\">sc</span><span class=\"token punctuation\">(</span><span class=\"token number\">89</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tStudent <span class=\"token function\">st</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12467</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tst<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span>sc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>说明：</strong></p>\n<ol><li>一个类的成员函数作为另一个类的友元函数时，必须先定义这个类。并且在声明友元函数时，需要加上成员函数所在类的类名；</li></ol>\n<h5><a id=\"font_colorpinkfont_1369\"></a><font color=\"pink\">友元类</font></h5>\n<p>可以将一个类声明为另一个类的友元</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Y</span><span class=\"token punctuation\">{<!-- --></span>\n    ···\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">X</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">friend</span> Y<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//声明类Y为类X的友元类</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>当一个类被说明为另一个类的友元类时，它所有的成员函数都成为另一个类的友元函数，这就意味着作为友元类中的所有成员函数都可以访问另一个类中的所有成员。</p>\n<p>友元关系不具有<strong>交换性</strong>和<strong>传递性</strong>。</p>\n<p>~</p>\n<h4><a id=\"47__1388\"></a>4.7 类的组合</h4>\n<p>在一个类中内嵌另一个类的对象作为数据成员，称为类的组合。该内嵌对象称为对象成员，又称为<strong>子对象</strong>。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Y</span><span class=\"token punctuation\">{<!-- --></span>\n    ···\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">X</span><span class=\"token punctuation\">{<!-- --></span>\n    Y y<span class=\"token punctuation\">;</span>\n    ···\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>~</p>\n<h4><a id=\"48__1404\"></a>4.8 共享数据的保护</h4>\n<p>常类型的引入就是为了既保护数据共享又防止数据被改动。常类型是指使用类型修饰符const说明的类型，常类型的变量或对象成员的值在程序运行期间是不可改变的。</p>\n<p><font color=\"pink\" size=\"5\">常引用</font></p>\n<p>如果在说明引用时用const修饰，则被说明的引用为常引用。常引用所引用的对象不能被更新。如果用常引用做形参，便不会产生对实参的不希望的更改。</p>\n<p><code>const 类型&amp; 引用名</code></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n此时再对b赋值是非法的。\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> m <span class=\"token operator\">+</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n在此函数中对变量m和变量n更新时非法的\n</code></pre>\n<p><font color=\"pink\" size=\"5\">常对象</font></p>\n<p>如果在说明对象时用const修饰，则被说明的对象为常对象。常对象中的数据成员为常量且必须要有初值。</p>\n<p><code>类名 const 对象名[(参数表)];</code></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">const</span> Date <span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2021</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><font color=\"pink\" size=\"5\">常对象成员</font></p>\n<p>1、<strong>常数据成员</strong></p>\n<p>类的数据成员可以是常量或常引用，使用const说明的数据成员称为常数据成员。如果在一个类中说明了常数据成员，那么构造函数就<strong>只能通过成员初始化列表对该数据成员进行初始化</strong>，而任何其他函数都不能对该成员赋值。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> year<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> month<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> day<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">year</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">month</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">day</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>一旦某对象的常数据成员初始化后，该数据成员的值是不能改变的。</p>\n<p>2、<strong>常成员函数</strong></p>\n<p><code>类型 函数名(参数表) const;</code></p>\n<p>const是函数类型的一个组成部分，因此在声明函数和定义函数时都要有关键字const。在调用时不必加const。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> year<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> month<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> day<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">year</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">month</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">day</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">showDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">showDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Date</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">showDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//···</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Date</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">showDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//···</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>关键字const可以被用于对重载函数进行区分。</p>\n<p><strong>说明：</strong></p>\n<ol><li>常成员函数可以访问常数据成员，也可以访问普通数据成员。</li><li>常对象只能调用它的常成员对象，而不能调用普通成员函数。常成员函数是常对象唯一的对外接口。</li><li>常对象函数不能更新对象的数据成员，也不能调用该类的普通成员函数，这就保证了在常成员函数中绝不会更新数据成员的值。</li></ol>\n<hr/>\n<h3><a id=\"_1497\"></a>五、继承与派生</h3>\n<p>继承可以在已有类的基础上创建新的类，新类可以从一个或多个已有类中继承成员函数和数据成员，而且可以重新定义或加进新的数据和函数，从而形成类的层次或等级。其中，已有类称为<strong>基类</strong>或<strong>父类</strong>，在它基础上建立的新类称为<strong>派生类</strong>或<strong>子类</strong>。</p>\n<p>~</p>\n<h4><a id=\"51__1503\"></a>5.1 继承与派生的概念</h4>\n<p>类的继承是新的类从已有类那里得到已有的特性。从另一个角度来看这个问题，从已有类产生新类的过程就是类的派生。类的继承和派生机制较好地解决了代码重用的问题。</p>\n<p>关于基类和派生类的关系，可以表述为：派生类是基类的具体化，而基类则是派生类的抽象。</p>\n<p>使用继承的案例如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tstring name<span class=\"token punctuation\">;</span>\n\tstring id_number<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>string name1<span class=\"token punctuation\">,</span> string id_number1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tname <span class=\"token operator\">=</span> name1<span class=\"token punctuation\">;</span>\n\t\tid_number <span class=\"token operator\">=</span> id_number1<span class=\"token punctuation\">;</span>\n\t\tage <span class=\"token operator\">=</span> age1<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"姓名: \"</span> <span class=\"token operator\">&lt;&lt;</span> name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  身份证号: \"</span> <span class=\"token operator\">&lt;&lt;</span> id_number <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 年龄: \"</span> <span class=\"token operator\">&lt;&lt;</span> age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> credit<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>string name1<span class=\"token punctuation\">,</span> string id_number1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> credit1<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name1<span class=\"token punctuation\">,</span> id_number1<span class=\"token punctuation\">,</span> credit1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcredit <span class=\"token operator\">=</span> credit1<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token class-name\">Person</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"学分: \"</span> <span class=\"token operator\">&lt;&lt;</span> credit <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tStudent <span class=\"token function\">stu</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"110103**********23\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstu<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>从已有类派生出新类时，可以在派生类内完成以下几种功能：</p>\n<ol><li>可以增加新的数据成员和成员函数</li><li>可以对基类的成员进行重定义</li><li>可以改变基类成员在派生类中的访问属性</li></ol>\n<h5><a id=\"font_colorpinkfont_1565\"></a><font color=\"pink\">基类成员在派生类中的访问属性</font></h5>\n<p>派生类可以继承基类中除了构造函数与析构函数之外的成员，但是这些成员的访问属性在派生过程中是可以调整的。从基类继承来的成员在派生类中的访问属性也有所不同。</p>\n<table><thead><tr><th align=\"center\">基类中的成员</th><th align=\"center\">继承方式</th><th align=\"center\">基类在派生类中的访问属性</th></tr></thead><tbody><tr><td align=\"center\">private</td><td align=\"center\">public|protected|private</td><td align=\"center\">不可直接访问</td></tr><tr><td align=\"center\">public</td><td align=\"center\">public|protected|private</td><td align=\"center\">public|protected|private</td></tr><tr><td align=\"center\">protected</td><td align=\"center\">public|protected|private</td><td align=\"center\">protected|protected|private</td></tr></tbody></table>\n<h5><a id=\"font_colorpinkfont_1575\"></a><font color=\"pink\">派生类对基类成员的访问规则</font></h5>\n<p>基类的成员可以有public、protected、private3中访问属性，基类的成员函数可以访问基类中其他成员，但是在类外通过基类的对象，就只能访问该基类的公有成员。同样，派生类的成员也可以有public、protected、private3种访问属性，派生类的成员函数可以访问派生类中自己增加的成员，但是在派生类外通过派生类的对象，就只能访问该派生类的公有成员。</p>\n<p>派生类对基类成员的访问形式主要有以下两种：</p>\n<ul><li><strong>内部访问</strong>：由派生类中新增的成员函数对基类继承来的成员的访问。</li><li><strong>对象访问</strong>：在派生类外部，通过派生类的对象对从基类继承来的成员的访问。</li></ul>\n<p>~</p>\n<h4><a id=\"52__1586\"></a>5.2 派生类的构造函数和析构函数</h4>\n<p>构造函数的主要作用是对数据进行初始化。在派生类中，如果对派生类新增的成员进行初始化，就需要加入派生类的构造函数。与此同时，对所有从基类继承下来的成员的初始化工作，还是由基类的构造函数完成，但是基类的构造函数和析构函数不能被继承，因此必须在派生类的构造函数中对基类的构造函数所需要的参数进行设置。同样，对撤销派生类对象的扫尾、清理工作也需要加入新的析构函数来完成。</p>\n<p><font color=\"red\">调用顺序</font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"A类对象构造中...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"析构A类对象...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span></span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"B类对象构造中...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"析构B类对象...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tB b<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>代码运行结果如下：</p>\n<pre><code class=\"prism language-cpp\">A类对象构造中<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\nB类对象构造中<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n析构B类对象<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n析构A类对象<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n</code></pre>\n<p>可见：构造函数的调用严格地按照先调用基类的构造函数，后调用派生类的构造函数的顺序执行。析构函数的调用顺序与构造函数的调用顺序正好相反，先调用派生类的析构函数，后调用基类的析构函数。</p>\n<p><font color=\"pink\" size=\"5\">派生类构造函数和析构函数的构造规则</font></p>\n<pre><code class=\"prism language-cpp\">派生类构造函数的一般格式为：\n派生类名<span class=\"token punctuation\">(</span>参数总表<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>基类名<span class=\"token punctuation\">(</span>参数表<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    派生类新增数据成员的初始化语句\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n含有子对象的派生类的构造函数：\n派生类名<span class=\"token punctuation\">(</span>参数总表<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>基类名<span class=\"token punctuation\">(</span>参数表<span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>子对象名<span class=\"token number\">1</span><span class=\"token punctuation\">(</span>参数表<span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>子对象名<span class=\"token function\">n</span><span class=\"token punctuation\">(</span>参数表n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    派生类新增成员的初始化语句\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在定义派生类对象时，构造函数的调用顺序如下：</p>\n<p>调用基类的构造函数，对基类数据成员初始化。</p>\n<p>调用子对象的构造函数，对子对象的数据成员初始化。</p>\n<p>调用派生类的构造函数体，对派生类的数据成员初始化。</p>\n<p><strong>说明：</strong></p>\n<ol><li>当基类构造函数不带参数时，派生类不一定需要定义构造函数；然而当基类的构造函数哪怕只带有一个参数，它所有的派生类都必须定义构造函数，甚至所定义的派生类构造函数的函数体可能为空，它仅仅起参数的传递作用。</li><li>若基类使用默认构造函数或不带参数的构造函数，则在派生类中定义构造函数时可略去“<code>:基类构造函数名(参数表)</code>”，此时若派生类也不需要构造函数，则可不定义构造函数。</li><li>如果派生类的基类也是一个派生类，每个派生类只需负责其<strong>直接基类数据成员的初始化</strong>，依次上溯。</li></ol>\n<p>~</p>\n<h4><a id=\"53__1665\"></a>5.3 调整基类成员在派生类中的访问属性的其他方法</h4>\n<p>派生类可以声明与基类成员同名的成员。在没有虚函数的情况下，如果在派生类中定义了与基类成员同名的成员，则称派生类成员覆盖了基类的同名成员，在派生类中使用这个名字意味着访问在派生类中声明的成员。为了在派生类中使用与基类同名的成员，必须在该成员名之前加上基类名和作用域标识符“<code>::</code>”，即</p>\n<p><code>基类名::成员名</code></p>\n<p><font color=\"red\">访问声明</font></p>\n<p>访问声明的方法就是把基类的保护成员或共有成员直接写在私有派生类定义式中的同名段中，同时给成员名前冠以基类名和作用域标识符“::”。利用这种方法，该成员就成为派生类的保护成员或共有成员了。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">A</span></span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y1<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        y <span class=\"token operator\">=</span> y1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    A<span class=\"token double-colon punctuation\">::</span>show<span class=\"token punctuation\">;</span>               <span class=\"token comment\">//访问声明</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>访问声明在使用时应注意以下几点：</p>\n<ol><li>数据成员也可以使用访问声明。</li><li>访问声明中只含不带类型和参数的函数名或变量名。</li><li>访问声明不能改变成员在基类中的访问属性。</li><li>对于基类的重载函数名，访问声明将对基类中所有同名函数其起作用。</li></ol>\n<p>~</p>\n<h4><a id=\"54__1696\"></a>5.4 多继承</h4>\n<p>声明多继承派生类的一般形式如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> 派生类名<span class=\"token operator\">:</span>继承方式<span class=\"token number\">1</span> 基类名<span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>继承方式n 基类名n <span class=\"token punctuation\">{<!-- --></span>\n    派生类新增的数据成员和成员函数\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n默认的继承方式是<span class=\"token keyword\">private</span>\n</code></pre>\n<p>多继承派生类的构造函数与析构函数：</p>\n<p>与单继承派生类构造函数相同，多重继承派生类构造函数必须同时负责该派生类所有基类构造函数的调用。</p>\n<p>多继承构造函数的调用顺序与单继承构造函数的调用顺序相同，也是遵循先调用基类的构造函数，再调用对象成员的构造函数，最后调用派生类构造函数的原则。析构函数的调用与之相反。</p>\n<p>~</p>\n<h4><a id=\"55__1715\"></a>5.5 虚基类</h4>\n<p>虚基类的作用：如果一个类有多个直接基类，而这些直接基类又有一个共同的基类，则在最低层的派生类中会保留这个间接的共同基类数据成员的多份同名成员。在访问这些同名成员时，必须在派生类对象名后增加直接基类名，使其唯一地标识一个成员，以免产生二义性。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\ta <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Base1</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Base1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\ta <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base1 a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Base2</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Base2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\ta <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base2 a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Base2</span></span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Derived</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base1::a = \"</span> <span class=\"token operator\">&lt;&lt;</span> Base1<span class=\"token double-colon punctuation\">::</span>a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base2::a = \"</span> <span class=\"token operator\">&lt;&lt;</span> Base2<span class=\"token double-colon punctuation\">::</span>a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tDerived obj<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>代码执行结果如下</p>\n<pre><code class=\"prism language-c++\">Base a = 5\nBase1 a = 15\nBase a = 5\nBase2 a = 25\nBase1::a = 15\nBase2::a = 25\n</code></pre>\n<p><font color=\"red\">虚基类的声明：</font></p>\n<p>不难理解，如果在上列中类base只存在一个拷贝(即只有一个数据成员a)，那么对a的访问就不会产生二义性。在C++中，可以通过将这个公共的基类声明为虚基类来解决这个问题。这就要求从类base派生新类时，使用关键字<code>virtual</code>将base声明为虚基类。</p>\n<p>声明虚基类的语法形式如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> 派生类<span class=\"token operator\">:</span><span class=\"token keyword\">virtual</span> 继承方式 类名<span class=\"token punctuation\">{<!-- --></span>\n    ·····\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>上述代码修改如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base1</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Base1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\ta <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base1 a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Base2</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Base2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\ta <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base2 a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>运行结果如下：</p>\n<pre><code class=\"prism language-cpp\">Base a <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\nBase1 a <span class=\"token operator\">=</span> <span class=\"token number\">15</span>\nBase2 a <span class=\"token operator\">=</span> <span class=\"token number\">35</span>\nBase1<span class=\"token double-colon punctuation\">::</span>a <span class=\"token operator\">=</span> <span class=\"token number\">35</span>\nBase2<span class=\"token double-colon punctuation\">::</span>a <span class=\"token operator\">=</span> <span class=\"token number\">35</span>\n</code></pre>\n<p><font color=\"red\">虚基类的初始化：</font></p>\n<p>虚基类的初始化与一般的多继承的初始化在语法上是一样的，但构造函数的调用顺序不同。在使用虚基类机制时应该注意以下几点：</p>\n<ol><li>如果在虚基类中定义有带形参的构造函数，并且没有定义默认形式的构造函数，则整个继承结构中，所有直接或间接的派生类都必须在构造函数的成员初始化列表中列出对虚基类构造函数的调用，以初始化在虚基类中定义的数据成员。</li><li>建立一个对象时，如果这个对象中含有从虚基类继承来的成员，则虚基类的成员是由最远派生类的构造函数通过调用虚基类的构造函数进行初始化的。该派生类的其他基类对虚基类构造函数的调用都被自动忽略。</li><li>若同一层次中同时包含虚基类和非虚基类，应先调用虚基类的构造函数，再调用非虚基类的构造函数，最后调用派生类构造函数。</li><li>对于多个虚基类，构造函数的执行顺序仍然是先左后右，自上而下。</li><li>若虚基类由非虚基类派生而来，则仍然先调用基类构造函数，再调用派生类的构造函数。</li></ol>\n<p>~</p>\n<h4><a id=\"56__1829\"></a>5.6 赋值兼容规则</h4>\n<p>在一定条件下，不同类型的数据之间可以进行类型转换，如可以将整型数据赋值给双精度型变量。在赋值之前，先把整型数据转换成双精度数据，然后再把它赋给双精度变量。这种不同数据类型之间的自动转换和赋值，称为<strong>赋值兼容</strong>。在基类和派生类对象之间也存有赋值兼容关系，基类和派生类对象之间的赋值兼容规则是指<strong>在需要基类对象的任何地方，都可以用子类的对象代替</strong>。</p>\n<p>例如，下面声明的两个类：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span><span class=\"token punctuation\">{<!-- --></span>\n    ·····\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span><span class=\"token punctuation\">{<!-- --></span>\n    ·····\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>根据赋值兼容规则，在基类Base的对象可以使用的任何地方，都可以使用派生类Derived的对象来代替，但只能使用从基类继承来的成员。具体的表现在以下几个方面：</p>\n<ul><li> <p>派生类对象可以赋值给基类对象，即用派生类对象中从基类继承来的数据成员，逐个赋值给基类对象的数据成员。</p> <pre><code class=\"prism language-cpp\">Base b<span class=\"token punctuation\">;</span>\nDerived d<span class=\"token punctuation\">;</span>\nb <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span>\n</code></pre> </li><li> <p>派生类对象可以初始化基类对象的引用。</p> <pre><code class=\"prism language-cpp\">Derived d<span class=\"token punctuation\">;</span>\nBase <span class=\"token operator\">&amp;</span>br <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span>\n</code></pre> </li><li> <p>派生类对象的地址可以赋值给指向基类对象的指针。</p> <pre><code class=\"prism language-cpp\">Derived d<span class=\"token punctuation\">;</span>\nBase <span class=\"token operator\">*</span>bp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">;</span>\n</code></pre> </li></ul>\n<hr/>\n<h3><a id=\"_1872\"></a>六、多态性与虚函数</h3>\n<p>多态性是面向对象程序设计的重要特征之一。多态性机制不仅增加了面向对象软件系统的灵活性，进一步减少了冗余信息，而且显著提高了软件的可重用性和可扩充性。多态性的应用可以使编程显得更简洁便利，它为程序的模块化设计又提供了一种手段。</p>\n<p>~</p>\n<h4><a id=\"61__1878\"></a>6.1 多态性概述</h4>\n<p>所谓多态性就是不同对象收到相同的消息时，产生不同的动作。这样，就可以用同样的接口访问不同功能的函数，从而实现“<strong>一个接口，多种方法</strong>”。</p>\n<p>从实现的角度来讲，多态可以划分为两类：<strong>编译时的多态</strong>和<strong>运行时的多态</strong>。在C++中，多态的实现和连编这一概念有关。所谓<strong>连编</strong>就是把函数名与函数体的程序代码连接在一起的过程。静态连编就是在编译阶段完成的连编。编译时的多态是通过静态连编来实现的。静态连编时，系统用实参与形参进行匹配，对于同名的重载函数便根据参数上的差异进行区分，然后进行连编，从而实现了多态性。运行时的多态是用动态连编实现的。动态连编时运行阶段完成的，即当程序调用到某一函数名时，才去寻找和连接其程序代码，对面向对象程序设计而言，就是当对象接收到某一消息时，才去寻找和连接相应的方法。</p>\n<p>一般而言，编译型语言（如C，Pascal）采用静态连编，而解释型语言（如LISP）采用动态连编。<strong>静态连编</strong>要求在程序编译时就知道调用函数的全部信息。因此，这种连编类型的函数调用速度快、效率高，但缺乏灵活性；而<strong>动态连编</strong>方式恰好相反，采用这种连编方式，一直要到程序运行时才能确定调用哪个函数，它降低了程序的运行效率，但增强了程序的灵活性。纯粹的面向对象程序语言由于其执行机制是消息传递，所以只能采用动态连编。C++实际上采用了静态连编和动态连编相结合的方式。</p>\n<p>在C++中，<strong>编译时多态性主要是通过函数重载和运算符重载实现的</strong>；<strong>运行时多态性主要是通过虚函数来实现的</strong>。</p>\n<p>~</p>\n<h4><a id=\"62__1890\"></a>6.2 虚函数</h4>\n<p>虚函数的定义是在基类中进行的，它是在基类中需要定义为虚函数的成员函数的声明中冠以关键字virtual，从而提供一种接口界面。定义虚函数的方法如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">virtual</span> 返回类型 函数名<span class=\"token punctuation\">(</span>形参表<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    函数体\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在基类中的某个成员函数被声明为虚函数后，此虚函数就可以在一个或多个派生类中被重新定义。虚函数在派生类中重新定义时，其函数原型，包括返回类型、函数名、参数个数、参数类型的顺序，都必须与基类中的原型完全相同。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Family</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tstring flower<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Family</span><span class=\"token punctuation\">(</span>string name <span class=\"token operator\">=</span> <span class=\"token string\">\"鲜花\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">flower</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n\tstring <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> flower<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">like</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"家人喜欢不同的花: \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Mother</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Family</span></span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Mother</span><span class=\"token punctuation\">(</span>string name <span class=\"token operator\">=</span> <span class=\"token string\">\"月季\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">Family</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">like</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"妈妈喜欢\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Daughter</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Family</span></span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Daughter</span><span class=\"token punctuation\">(</span>string name <span class=\"token operator\">=</span> <span class=\"token string\">\"百合\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">Family</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">like</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"女儿喜欢\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tFamily <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\tFamily f<span class=\"token punctuation\">;</span>\n\tMother mom<span class=\"token punctuation\">;</span>\n\tDaughter dau<span class=\"token punctuation\">;</span>\n\tp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>f<span class=\"token punctuation\">;</span>\n\tp<span class=\"token operator\">-&gt;</span><span class=\"token function\">like</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>mom<span class=\"token punctuation\">;</span>\n\tp<span class=\"token operator\">-&gt;</span><span class=\"token function\">like</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>dau<span class=\"token punctuation\">;</span>\n\tp<span class=\"token operator\">-&gt;</span><span class=\"token function\">like</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>程序运行结果如下：</p>\n<pre><code class=\"prism language-cpp\">家人喜欢不同的花<span class=\"token operator\">:</span>\n妈妈喜欢月季\n女儿喜欢百合\n</code></pre>\n<p>C++规定，如果在派生类中，没有用virtual显式地给出虚函数声明，这时系统就会遵循以下的规则来判断一个成员函数是不是虚函数：该函数与基类的虚函数是否有相同的名称、参数个数以及对应的参数类型、返回类型或者满足赋值兼容的指针、引用型的返回类型。</p>\n<p>下面对虚函数的定义做几点<strong>说明</strong>：</p>\n<ul><li>由于虚函数使用的基础是赋值兼容规则，而赋值兼容规则成立的前提条件是派生类从其基类公有派生。因此，通过定义虚函数来使用多态性机制时，派生类必须从它的基类公有派生。</li><li>必须首先在基类中定义虚函数；</li><li>在派生类对基类中声明的虚函数进行重新定义时，关键字virtual可以写也可以不写。</li><li>虽然使用对象名和点运算符的方式也可以调用虚函数，如<strong>mom.like()可以调用虚函数Mother::like()</strong>。但是，这种调用是在编译时进行的静态连编，它没有充分利用虚函数的特性，<font color=\"red\">只有通过基类指针访问虚函数时才能获得运行时的多态性</font></li><li>一个虚函数无论被公有继承多少次，它仍然保持其虚函数的特性。</li><li>虚函数必须是其所在类的成员函数，而不能是友元函数，也不能是静态成员函数，因为虚函数调用要靠特定的对象来决定该激活哪个函数。</li><li>内联函数不能是虚函数，因为内联函数是不能在运行中动态确定其位置的。即使虚函数在类的内部定义，编译时仍将其看做非内联的。</li><li>构造函数不能是虚函数，但是析构函数可以是虚函数，而且通常说明为虚函数。</li></ul>\n<p>~</p>\n<p>在一个派生类中重新定义基类的虚函数是函数重载的另一种形式。</p>\n<p>多继承可以视为多个单继承的组合，因此，多继承情况下的虚函数调用与单继承下的虚函数调用由相似之处。</p>\n<p>~</p>\n<h4><a id=\"63__1981\"></a>6.3 虚析构函数</h4>\n<p>如果在主函数中用new运算符建立一个派生类的无名对象和定义一个基类的对象指针，并将无名对象的地址赋值给这个对象指针，当用delete运算符撤销无名对象时，系统<strong>只执行基类的析构函数</strong>，而不执行派生类的析构函数。</p>\n<pre><code class=\"prism language-cpp\">Base <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\np <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Derived<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n输出：调用基类Base的析构函数\n</code></pre>\n<p>原因是当撤销指针p所指的派生类的无名对象，而调用析构函数时，采用了静态连编方式，只调用了基类Base的析构函数。</p>\n<p>如果希望程序执行动态连编方式，在用delete运算符撤销派生类的无名对象时，先调用派生类的析构函数，再调用基类的析构函数，可以将基类的析构函数声明为<strong>虚析构函数</strong>。一般格式为</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span>类名<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    ·····\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>虽然派生类的析构函数与基类的析构函数名字不相同，但是如果将基类的析构函数定义为虚函数，由该类所派生的<strong>所有派生类的析构函数也都自动成为虚函数</strong>。示例如下，</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"调用基类Base的析构函数...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">Derived</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"调用派生类Derived的析构函数...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tBase <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\tp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Derived<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出如下：</p>\n<pre><code class=\"prism language-cpp\">调用派生类Derived的析构函数<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n调用基类Base的析构函数<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n</code></pre>\n<p>~</p>\n<h4><a id=\"64__2041\"></a>6.4 纯虚函数</h4>\n<p>纯虚函数是在声明虚函数时被“初始化为0的函数”，声明纯虚函数的一般形式如下：</p>\n<p><code>virtual 函数类型 函数名(参数表) = 0;</code></p>\n<p>声明为纯虚函数后，基类中就不再给出程序的实现部分。纯虚函数的作用是在基类中为其派生类保留一个函数的名字，以便派生类根据需要重新定义。</p>\n<p>~</p>\n<h4><a id=\"65__2051\"></a>6.5 抽象类</h4>\n<p>如果一个类至少有一个纯虚函数，那么就称该类为<strong>抽象类</strong>，对于抽象类的使用有以下几点规定：</p>\n<ul><li>由于抽象类中至少包含一个没有定义功能的纯虚函数。因此，抽象类只能作为其他类的基类来使用，不能建立抽象类对象。</li><li>不允许从具体类派生出抽象类。所谓具体类，就是不包含纯虚函数的普通类。</li><li>抽象类不能用作函数的参数类型、函数的返回类型或是显式转换的类型。</li><li>可以声明指向抽象类的指针或引用，此指针可以指向它的派生类，进而实现多态性。</li><li>如果派生类中没有定义纯虚函数的实现，而派生类中只是继承基类的纯虚函数，则这个派生类仍然是一个抽象类。如果派生类中给出了基类纯虚函数的实现，则该派生类就不再是抽象类了，它是一个可以建立对象的具体类了。</li></ul>\n<p>~</p>\n<h4><a id=\"66__2063\"></a>6.6 示例：利用多态计算面积</h4>\n<p>应用C++的多态性，计算三角形、矩形和圆的面积。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*** 定义一个公共基类 ***/</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Figure</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Figure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> b<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>  <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">//虚函数</span>\n\t<span class=\"token punctuation\">{<!-- --></span>  \n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"No area computation defind for this class.\\n\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Triangle</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Figure</span></span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Triangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> b<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">Figure</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>  <span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//虚函数重定义，用于求三角形的面积</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Triangle with height \"</span> <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" and base \"</span> <span class=\"token operator\">&lt;&lt;</span> y<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" has an area of \"</span> <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">*</span> y <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Figure</span></span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Square</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> b<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">Figure</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>  <span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//虚函数重定义，用于求矩形的面积</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Square with dimension \"</span> <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" and \"</span> <span class=\"token operator\">&lt;&lt;</span> y<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" has an area of \"</span> <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">*</span> y <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Figure</span></span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> a<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">Figure</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>  <span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//虚函数重定义，用于求圆的面积</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Circle with radius \"</span> <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" has an area of \"</span> <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">*</span> x <span class=\"token operator\">*</span> <span class=\"token number\">3.14</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\tFigure <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\tTriangle <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tSquare <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tCircle <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">;</span>\n\tp<span class=\"token operator\">-&gt;</span><span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">;</span>\n\tp<span class=\"token operator\">-&gt;</span><span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">;</span>\n\tp<span class=\"token operator\">-&gt;</span><span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>程序输出如下：</p>\n<pre><code class=\"prism language-cpp\">Triangle with height <span class=\"token number\">10</span> <span class=\"token operator\">and</span> base <span class=\"token number\">6</span> has an area of <span class=\"token number\">30</span>\nSquare with dimension <span class=\"token number\">10</span> <span class=\"token operator\">and</span> <span class=\"token number\">6</span> has an area of <span class=\"token number\">60</span>\nCircle with radius <span class=\"token number\">10</span> has an area of <span class=\"token number\">314</span>\n</code></pre>\n<hr/>\n<h3><a id=\"_2142\"></a>七、运算符重载</h3>\n<p>运算符重载是面向对象程序设计的重要特征。</p>\n<p>~</p>\n<h4><a id=\"71__2148\"></a>7.1 运算符重载概述</h4>\n<p>运算符重载是对已有的运算符赋予多重含义，使同一个运算符作用于不同类型的数据导致不同的行为。</p>\n<p>下面的案例实现<code>+号</code>运算符重载：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Complex</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">double</span> real<span class=\"token punctuation\">,</span> imag<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">real</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">imag</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">friend</span> Complex <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>Complex<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> Complex<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tComplex temp<span class=\"token punctuation\">;</span>\n\t\ttemp<span class=\"token punctuation\">.</span>real <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>real <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span>real<span class=\"token punctuation\">;</span>\n\t\ttemp<span class=\"token punctuation\">.</span>imag <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>imag <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span>imag<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> real<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>imag <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>imag <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> imag <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"i\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tComplex <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">;</span>\n\ta<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tb<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tc <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n\tc<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tc <span class=\"token operator\">=</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tc<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>程序输出结果如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token number\">2.3</span><span class=\"token operator\">+</span><span class=\"token number\">4.6</span>i\n<span class=\"token number\">3.6</span><span class=\"token operator\">+</span><span class=\"token number\">2.8</span>i\n<span class=\"token number\">5.9</span><span class=\"token operator\">+</span><span class=\"token number\">7.4</span>i\n<span class=\"token number\">5.9</span><span class=\"token operator\">+</span><span class=\"token number\">7.4</span>i\n</code></pre>\n<p>~</p>\n<p><font color=\"cyan\">这一章偷个懒😁</font></p>\n<hr/>\n<h3><a id=\"_2207\"></a>八、函数模板与类模板</h3>\n<p>利用模板机制可以显著减少冗余信息，能大幅度地节约程序代码，进一步提高面向对象程序的可重用性和可维护性。模板是实现代码重用机制的一种工具，它可以实现类型参数化，即把类型定义为参数，从而实现代码的重用，使得一段程序可以用于处理多种不同类型的对象，大幅度地提高程序设计的效率。</p>\n<p>~</p>\n<h4><a id=\"81__2213\"></a>8.1 模板的概念</h4>\n<p>在程序设计中往往存在这样的现象：两个或多个函数的函数体完全相同，差别仅在与它们的参数类型不同。</p>\n<p>例如：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">&gt;=</span> y <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">&gt;=</span> y <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>能否为上述这些函数只写出一套代码呢？解决这个问题的一种方式是使用宏定义</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">Max</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&gt;=</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> y<span class=\"token punctuation\">)</span></span></span>\n</code></pre>\n<p>宏定义带来的另一个问题是，可能在不该替换的地方进行了替换，而造成错误。事实上，由于宏定义会造成不少麻烦，所以在C++中不主张使用宏定义。解决以上问题的另一个方法就是使用模板。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210604155027468.png\"/></p>\n<p>~</p>\n<h4><a id=\"82__2242\"></a>8.2 函数模板</h4>\n<p>所谓函数模板，实际上是建立一个通用函数，其函数返回类型和形参类型不具体指定，用一个虚拟的类型来代表，这个通用函数就称为函数模板。在调用函数时，系统会根据实参的类型（模板实参）来取代模板中的虚拟类型，从而实现不同函数的功能。</p>\n<p>函数的声明格式如下</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> 类型参数<span class=\"token operator\">&gt;</span>\n返回类型 函数名<span class=\"token punctuation\">(</span>模板形参表<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    函数体\n<span class=\"token punctuation\">}</span>\n也可以定义为如下形式\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> 类型参数<span class=\"token operator\">&gt;</span>\n返回类型 函数名<span class=\"token punctuation\">(</span>模板形参表<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    函数体\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>实际上，<code>template</code>是一个声明模板的关键字，它表示声明一个模板。类型参数（通常用C++标识符表示，如T、type等）实际上是一个虚拟的类型名，使用前并未指定它是哪一种具体的类型，但使用函数模板时，必须将类型实例化。类型参数前需加关键字<code>typename</code>或<code>class</code>，<code>typename</code>和<code>class</code>的作用相同，都是表示一个虚拟的类型名（即类型参数）。</p>\n<p><strong>例1</strong>：一个与指针有关的函数模板</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\nT <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">*</span>array<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tT max <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\t<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> max<span class=\"token punctuation\">)</span> max <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> array_int<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">783</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">,</span> <span class=\"token number\">234</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> array_double<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">99.02</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21.9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23.90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12.89</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.09</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34.9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> imax <span class=\"token operator\">=</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span>array_int<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> dmax <span class=\"token operator\">=</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span>array_double<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"整型数组的最大值是：\"</span> <span class=\"token operator\">&lt;&lt;</span> imax <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"双精度型数组的最大值是：\"</span> <span class=\"token operator\">&lt;&lt;</span> dmax <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>例2</strong>：函数模板的重载</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Type</span><span class=\"token operator\">&gt;</span>\nType <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span>Type x<span class=\"token punctuation\">,</span> Type y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">&gt;</span> y <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Type</span><span class=\"token operator\">&gt;</span>\nType <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span>Type x<span class=\"token punctuation\">,</span> Type y<span class=\"token punctuation\">,</span> Type z<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tType t <span class=\"token operator\">=</span> x <span class=\"token operator\">&gt;</span> y <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> y<span class=\"token punctuation\">;</span>\n\tt <span class=\"token operator\">=</span> t <span class=\"token operator\">&gt;</span> z <span class=\"token operator\">?</span> t <span class=\"token operator\">:</span> z<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"33,66中最大值为 \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">66</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"33,66,44中最大值为 \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">66</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>注意：</strong></p>\n<ul><li>在函数模板中允许使用多个类型参数。但是，应当注意template定义部分的每个类型参数前必须有关键字typename或class。</li><li>在template语句与函数模板定义语句之间不允许插入别的语句。</li><li>同一般函数一样，函数模板也可以重载。</li><li>函数模板与同名的非模板函数可以重载。在这种情况下，调用的顺序是：首先寻找一个参数完全匹配的非模板函数，如果找到了就调用它；若没有找到，则寻找函数模板，将其实例化，产生一个匹配的模板参数，若找到了，就调用它。</li></ul>\n<p>~</p>\n<h4><a id=\"83__2324\"></a>8.3 类模板</h4>\n<p>所谓<strong>类模板</strong>，实际上就是建立一个通用类，其数据成员、成员函数的返回类型和形参类型不具体指定，用一个虚拟的类型来代表。使用类模板定义对象时，系统会根据实参的类型来取代类模板中虚拟类型，从而实现不同类的功能。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Three</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    T x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Three</span><span class=\"token punctuation\">(</span>T a<span class=\"token punctuation\">,</span> T b<span class=\"token punctuation\">,</span> T c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        x <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span> y <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span> z <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    T <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> z<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上面的例子中，成员函数（其中含有类型参数）是定义在类体内的。但是，类模板中的成员函数也可以在类模板体外定义。此时，若成员函数中有类型参数存在，则C++有一些特殊的规定：</p>\n<ol><li>需要在成员函数定义之前进行模板声明；</li><li>在成员函数名前要加上“类名&lt;类型参数&gt;::”;</li></ol>\n<p>在类模板体外定义的成员函数的一般形式如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> 类型参数<span class=\"token operator\">&gt;</span>\n函数类型 类名<span class=\"token operator\">&lt;</span>类型参数<span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span>成员函数名<span class=\"token punctuation\">(</span>形参表<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    ·····\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>例如，上例中成员函数sum()在类外定义时，应该写成</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\nT <span class=\"token class-name\">Three</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> z<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>**例子：**栈类模板的使用</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tT stack<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> top<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\ttop <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>T t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tT <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Stack</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>T t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">==</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Stack is full!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tstack<span class=\"token punctuation\">[</span>top<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\nT <span class=\"token class-name\">Stack</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Stack is empty!\"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> stack<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tStack<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> st<span class=\"token punctuation\">;</span>\n\tst<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tst<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tst<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h3><a id=\"C_2422\"></a>九、C++的输入和输出</h3>\n<p>~</p>\n<h4><a id=\"91_C_2426\"></a>9.1 C++为何建立自己的输入/输出系统</h4>\n<p>C++除了完全支持C语言的输入输出系统外，还定义了一套面向对象的输入/输出系统。C++的输入输出系统比C语言更安全、可靠。</p>\n<p>c++的输入/输出系统明显地优于C语言的输入/输出系统。首先，它是类型安全的、可以防止格式控制符与输入输出数据的类型不一致的错误。另外，C++可以通过重载运算符“&gt;&gt;”和\"&lt;&lt;\"，使之能用于用户自定义类型的输入和输出，并且向预定义类型一样有效方便。C++的输入/输出的书写形式也很简单、清晰，这使程序代码具有更好的可读性。</p>\n<p>~</p>\n<h4><a id=\"92_C_2434\"></a>9.2 C++的流库及其基本结构</h4>\n<p>“流”指的是数据从一个源流到一个目的的抽象，它负责在数据的生产者（源）和数据的消费者（目的）之间建立联系，并管理数据的流动。凡是数据从一个地方传输到另一个地方的操作都是流的操作，从流中提取数据称为输入操作（通常又称提取操作），向流中添加数据称为输出操作（通常又称插入操作）。</p>\n<p>C++的输入/输出是以字节流的形式实现的。在输入操作中，字节流从输入设备（如键盘、磁盘、网络连接等）流向内存；在输出操作中，字节流从内存流向输出设备（如显示器、打印机、网络连接等）。字节流可以是ASCII码、二进制形式的数据、图形/图像、音频/视频等信息。文件和字符串也可以看成有序的字节流，分别称为文件流和字符串流。</p>\n<p>~</p>\n<h5><a id=\"font_colorpink_font_2442\"></a><font color=\"pink\">用于输入/输出的头文件</font></h5>\n<p>C++编译系统提供了用于输入/输出的I/O类流库。I/O流类库提供了数百种输入/输出功能，I/O流类库中各种类的声明被放在相应的头文件中，用户在程序中用#include命令包含了有关的头文件就相当于在本程序中声明了所需要用到的类。常用的头文件有：</p>\n<ul><li><code>iostream</code>包含了对输入/输出流进行操作所需的基本信息。使用<code>cin</code>、<code>cout</code>等流对象进行针对标准设备的I/O操作时，须包含此头文件。</li><li><code>fstream</code>用于用户管理文件的I/O操作。使用文件流对象进行针对磁盘文件的操作，须包含此头文件。</li><li><code>strstream</code>用于字符串流的I/O操作。使用字符串流对象进行针对内存字符串空间的I/O操作，须包含此头文件。</li><li><code>iomanip</code>用于输入/输出的格式控制。在使用<code>setw</code>、<code>fixed</code>等大多数操作符进行格式控制时，须包含此头文件。</li></ul>\n<h5><a id=\"font_colorpinkfont_2451\"></a><font color=\"pink\">用于输入/输出的流类</font></h5>\n<p>I/O流类库中包含了许多用于输入/输出操作的类。其中，类<code>istream</code>支持流输入操作，类<code>ostream</code>支持流输出操作，类<code>iostream</code>同时支持流输入和输出操作。</p>\n<p>下表列出了<code>iostream</code>流类库中常用的流类，以及指出了这些流类在哪个头文件中声明。</p>\n<table><thead><tr><th>类名</th><th>类名</th><th>说明</th><th>头文件</th></tr></thead><tbody><tr><td>抽象流基类</td><td>ios</td><td>流基类</td><td>iostream</td></tr><tr><td>输入流类</td><td>istream</td><td>通用输入流类和其他输入流的基类</td><td>iostream</td></tr><tr><td>输入流类</td><td>ifstream</td><td>输入文件流类</td><td>fstream</td></tr><tr><td>输入流类</td><td>istrstream</td><td>输入字符串流类</td><td>strstream</td></tr><tr><td>输出流类</td><td>ostream</td><td>通用输出流类和其他输出流的基类</td><td>iostream</td></tr><tr><td>输出流类</td><td>ofstream</td><td>输出文件流类</td><td>fstream</td></tr><tr><td>输出流类</td><td>ostrstream</td><td>输出字符串流类</td><td>strstream</td></tr><tr><td>输入/输出流类</td><td>iostream</td><td>通用输入输出流类和其他输入/输出流的基类</td><td>iostream</td></tr><tr><td>输入/输出流类</td><td>fstream</td><td>输入/输出文件流类</td><td>fstream</td></tr><tr><td>输入/输出流类</td><td>strstream</td><td>输入/输出字符串流类</td><td>strstream</td></tr></tbody></table>\n<p>~</p>\n<h4><a id=\"93___2472\"></a>9.3 预定义的流对象</h4>\n<p>用流定义的对象称为流对象。与输入设备（如键盘）相关联的流对象称为输入流对象；与输出设备（如屏幕）相联系的流对象称为输出流对象。</p>\n<p>C++中包含几个预定义的流对象，它们是标准输入流对象<code>cin</code>、标准输出流对象<code>cout</code>、非缓冲型的标准出错流对象<code>cerr</code>和缓冲型的标准出错流对象<code>clog</code>。</p>\n<p>~</p>\n<h4><a id=\"94__2480\"></a>9.4 输入/输出流的成员函数</h4>\n<p>使用<code>istream</code>和类<code>ostream</code>流对象的一些成员函数，实现字符的输出和输入。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token number\">1</span>、<span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>函数\n    cout<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>单字符<span class=\"token operator\">/</span>字符形变量<span class=\"token operator\">/</span>ASCII码<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">2</span>、<span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>函数\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>函数在读入数据时可包括空白符，而提取运算符“<span class=\"token operator\">&gt;&gt;</span>”在默认情况下拒绝接收空白字符。\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>字符型变量<span class=\"token punctuation\">)</span>\n<span class=\"token number\">3</span>、<span class=\"token function\">getline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>函数\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>字符数组<span class=\"token punctuation\">,</span> 字符个数n<span class=\"token punctuation\">,</span> 终止标志字符<span class=\"token punctuation\">)</span>\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>字符指针<span class=\"token punctuation\">,</span> 字符个数n<span class=\"token punctuation\">,</span> 终止标志字符<span class=\"token punctuation\">)</span>\n<span class=\"token number\">4</span>、<span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>函数\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> 终止字符<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>函数的功能是跳过输入流中n个字符（默认个数为<span class=\"token number\">1</span>），或在遇到指定的终止字符<span class=\"token punctuation\">(</span>默认终止字符是<span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span>时提前结束。\n</code></pre>\n<p>~</p>\n<h4><a id=\"95__2500\"></a>9.5 预定义类型输入/输出的格式控制</h4>\n<p>在很多情况下，需要对预定义类型（如int、float、double型等）的数据的输入/输出格式进行控制。在C++中，仍然可以使用C中的<code>printf()</code>和<code>scanf()</code>函数进行格式化。除此之外，C++还提供了两种进行格式控制的方法：一种是使用ios类中有关格式控制的流成员函数进行格式控制；另一种是使用称为操作符的特殊类型的函数进行格式控制。</p>\n<p><font color=\"red\">1、用流成员函数进行输入/输出格式控制</font></p>\n<ol><li>设置状态标志的流成员函数<code>setf()</code></li><li>清除状态标志的流成员函数<code>unsetf()</code></li><li>设置域宽的流成员函数<code>width()</code></li><li>设置实数的精度流成员函数<code>precision()</code></li><li>填充字符的流成员函数<code>fill()</code></li></ol>\n<p><font color=\"red\">2、使用预定义的操作符进行输入/输出格式控制</font></p>\n<p><font color=\"red\">3、使用用户自定义的操作符进行输入/输出格式控制</font></p>\n<pre><code class=\"prism language-cpp\">若为输出流定义操作符函数，则定义形式如下：\nostream <span class=\"token operator\">&amp;</span>操作符名<span class=\"token punctuation\">(</span>ostream <span class=\"token operator\">&amp;</span>stream<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    自定义代码\n    <span class=\"token keyword\">return</span> stream<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n若为输入流定义操作符函数，则定义形式如下：\nistream <span class=\"token operator\">&amp;</span>操作符名<span class=\"token punctuation\">(</span>istream <span class=\"token operator\">&amp;</span>stream<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    自定义代码\n    <span class=\"token keyword\">return</span> stream<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>例如，</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iomanip&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\nostream <span class=\"token operator\">&amp;</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span>ostream <span class=\"token operator\">&amp;</span>stream<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tstream<span class=\"token punctuation\">.</span><span class=\"token function\">setf</span><span class=\"token punctuation\">(</span>ios<span class=\"token double-colon punctuation\">::</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstream <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> hex <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setfill</span><span class=\"token punctuation\">(</span><span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> stream<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">123</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> output <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">123</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token number\">123</span>\n<span class=\"token number\">7</span>b<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n</code></pre>\n<p>~</p>\n<h4><a id=\"96__2562\"></a>9.6 文件的输入/输出</h4>\n<p>所谓<strong>文件</strong>，一般指存放在外部介质上的数据的集合。</p>\n<p>文件流是以外存文件为输入/输出对象的数据流。输出文件流是从内存流向外存文件的数据，输入文件流是从外存流向内存的数据。</p>\n<p>根据文件中数据的组织形式，文件可分为两类：文本文件和二进制文件。</p>\n<p>在C++中进行文件操作的一般步骤如下：</p>\n<ol><li>为要进行操作的文件定义一个流对象。</li><li>建立（或打开）文件。如果文件不存在，则建立该文件。如果磁盘上已存在该文件，则打开它。</li><li>进行读写操作。在建立（或打开）的文件基础上执行所要求的输入/输出操作。</li><li>关闭文件。当完成输入/输出操作时，应把已打开的文件关闭。</li></ol>\n<p>~</p>\n<h4><a id=\"97__2579\"></a>9.7 文件的打开与关闭</h4>\n<p>为了执行文件的输入/输出，C++提供了3个文件流类。</p>\n<table><thead><tr><th>类名</th><th>说明</th><th>功能</th></tr></thead><tbody><tr><td><code>istream</code></td><td>输入文件流类</td><td>用于文件的输入</td></tr><tr><td><code>ofstream</code></td><td>输出文件流类</td><td>用于文件的输出</td></tr><tr><td><code>fstream</code></td><td>输入/输出文件流类</td><td>用于文件的输入/输出</td></tr></tbody></table>\n<p>这3个文件流类都定义在头文件<code>fstream</code>中。</p>\n<p>要执行文件的输入/输出，须完成以下几件工作：</p>\n<ol><li>在程序中包含头文件<code>fstream</code>。</li><li>建立流对象</li><li>使用成员函数<code>open()</code>打开文件。</li><li>进行读写操作。</li><li>使用<code>close()</code>函数将打开的文件关闭。</li></ol>\n<p>~</p>\n<h4><a id=\"98__2601\"></a>9.8 文本文件的读/写</h4>\n<p>**例子：**把字符串“I am a student.”写入磁盘文件text.txt中。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tofstream <span class=\"token function\">fout</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../test.txt\"</span><span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Cannot open output file.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tfout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"I am a student.\"</span><span class=\"token punctuation\">;</span>\n\tfout<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>**例子：**把磁盘文件test1.dat中的内容读出并显示在屏幕上。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tifstream <span class=\"token function\">fin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../test.txt\"</span><span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Cannot open output file.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">80</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tfin<span class=\"token punctuation\">.</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>str <span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> str <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\tfin<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>~</p>\n<h4><a id=\"99__2647\"></a>9.9 二进制文件的读写</h4>\n<h5><a id=\"font_colorpinkgetputfont_2649\"></a><font color=\"pink\">用get()函数和put()函数读/写二进制文件</font></h5>\n<p>**例子：**将a~z的26个英文字母写入文件，而后从该文件中读出并显示出来。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">cput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tofstream <span class=\"token function\">outf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>outf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Cannot open output file.\\n\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\toutf<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tch<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\toutf<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">cget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tfstream <span class=\"token function\">inf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>inf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Cannot open input file.\\n\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>inf<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> ch<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tinf<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">cput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">cget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//此处文件打不开，不知为什么。。。</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5><a id=\"font_colorpinkreadwritefont_2695\"></a><font color=\"pink\">用read()函数和write()函数读写二进制文件</font></h5>\n<p>有时需要读写一组数据（如一个结构变量的值），为此C++提供了两个函数read()和write()，用来读写一个数据块，这两个函数最常用的调用格式如下：</p>\n<pre><code class=\"prism language-cpp\">inf<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noutf<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>**例子：**将两门课程的课程名和成绩以二进制形式存放在磁盘文件中。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">list</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> course<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> score<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tlist ob<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"Computer\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"History\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tofstream <span class=\"token function\">out</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>out<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Cannot open output file.\\n\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//退出程序，作用与exit相同。</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tout<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>ob<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ob<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tout<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>**例子：**将上述例子以二进制形式存放在磁盘文件中的数据读入内存。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">list</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> course<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> score<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tlist ob<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tifstream <span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>in<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Cannot open input file.\\n\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tin<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>ob<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ob<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> ob<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>course <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> ob<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>score <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">}</span>\n\tin<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5><a id=\"font_colorpink_font_2761\"></a><font color=\"pink\">检测文件结束</font></h5>\n<p>在文件结束的地方有一个标志位，即为<code>EOF</code>。采用文件流方式读取文件时，使用成员函数<code>eof()</code>可以检测到这个结束符。如果<strong>该函数的返回值非零，表示到达文件尾</strong>。返回值为零表示未达到文件尾。该函数的原型是：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">eof</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n函数<span class=\"token function\">eof</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>的用法示例如下：\nifstream ifs<span class=\"token punctuation\">;</span>\n···\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ifs<span class=\"token punctuation\">.</span><span class=\"token function\">eof</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//尚未到达文件尾</span>\n    ···\n还有一个检测方法就是检查该流对象是否为零，为零表示文件结束。\nifstream ifs<span class=\"token punctuation\">;</span>\n···\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ifs<span class=\"token punctuation\">)</span>\n    ···\n如下例子：\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    cut<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n这是一个很通用的方法，就是检测文件流对象的某些成员函数的返回值是否为<span class=\"token number\">0</span>，为<span class=\"token number\">0</span>表示该流（亦即对应的文件）到达了末尾。\n</code></pre>\n<p>从键盘上输入字符时，其结束符是<code>Ctrl+Z</code>，也就是说，按下<code>【Ctrl+Z】</code>组合键，<code>eof()</code>函数返回的值为真。</p>\n<p>~</p>\n<hr/>\n<h3><a id=\"_2789\"></a>十、异常处理和命名空间</h3>\n<h4><a id=\"101__2791\"></a>10.1 异常处理</h4>\n<p>程序中常见的错位分为两大类：<strong>编译时错误</strong>和<strong>运行时错误</strong>。编译时的错误主要是语法错误，如关键字拼写错误、语句末尾缺分号、括号不匹配等。运行时出现的错误统称为<strong>异常</strong>，对异常的处理称为<strong>异常处理</strong>。</p>\n<p>C++处理异常的办法：如果在执行一个函数的过程中出现异常，可以不在本函数中立即处理，而是发出一个信息，传给它的上一级（即调用函数）来解决，如果上一级函数也不能处理，就再传给其上一级，由其上一级处理。如此逐级上传，如果到最高一级还无法处理，运行系统一般会自动调用系统函数<code>terminate()</code>，由它调用<code>abort</code>终止程序。</p>\n<p>**例子：**输入三角形的三条边长，求三角形的面积。当输入边的长度小于0时，或者当三条边都大于0时但不能构成三角形时，分别抛出异常，结束程序运行。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">triangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">double</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b <span class=\"token operator\">&lt;=</span> c <span class=\"token operator\">||</span> a <span class=\"token operator\">+</span> c <span class=\"token operator\">&lt;=</span> b <span class=\"token operator\">||</span> b <span class=\"token operator\">+</span> c <span class=\"token operator\">&lt;=</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">//语句throw抛出double异常</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">-</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">-</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">double</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入三角形的三个边长（a, b, c）: \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tcin <span class=\"token operator\">&gt;&gt;</span> a <span class=\"token operator\">&gt;&gt;</span> b <span class=\"token operator\">&gt;&gt;</span> c<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> b <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//语句throw抛出int异常</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" b = \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" c = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"三角形的面积 = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">triangle</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\tcin <span class=\"token operator\">&gt;&gt;</span> a <span class=\"token operator\">&gt;&gt;</span> b <span class=\"token operator\">&gt;&gt;</span> c<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> b <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"这三条边不能构成三角形...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"边长小于或等于0...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>~</p>\n<h4><a id=\"102__2839\"></a>10.2 命名空间和头文件命名规则</h4>\n<p><strong>命名空间</strong>：一个由程序设计者命名的内存区域。程序设计者可以根据需要指定一些有名字的命名空间，将各命名空间中声明的标识符与该命名空间标识符建立关联，保证不同命名空间的同名标识符不发生冲突。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token number\">1.</span>带扩展名的头文件的使用\n在C语言程序中头文件包括扩展名<span class=\"token punctuation\">.</span>h，使用规则如下面例子\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token number\">2.</span>不带扩展名的头文件的使用\nC<span class=\"token operator\">++</span>标准要求系统提供的头文件不包括扩展名<span class=\"token punctuation\">.</span>h，如string，string<span class=\"token punctuation\">.</span>h等。\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring&gt;</span></span>\n</code></pre>\n<hr/>\n<h3><a id=\"STL_2856\"></a>十一、STL标准模板库</h3>\n<p><strong>标准模板库</strong>（<code>Standard Template Library</code>）中包含了很多实用的组件，利用这些组件，程序员编程方便而高效。</p>\n<h4><a id=\"111_Vector_2860\"></a>11.1 Vector</h4>\n<p>vector容器与数组类似，包含一组地址连续的存储单元。对vector容器可以进行很多操作，包括查询、插入、删除等常见操作。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> nums<span class=\"token punctuation\">;</span>\n\tnums<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tnums<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tnums<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tnums<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">669</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n当前nums中元素为: \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tnums<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tnums<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n当前nums中元素为: \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>~</p>\n<h4><a id=\"112_list_2894\"></a>11.2 list容器</h4>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;list&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> number<span class=\"token punctuation\">;</span>\n\tlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span>iterator niter<span class=\"token punctuation\">;</span>\n\tnumber<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tnumber<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">234</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tnumber<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">345</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"链表内容：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>niter <span class=\"token operator\">=</span> number<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> niter <span class=\"token operator\">!=</span> number<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>niter<span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>niter <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tnumber<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"逆转后的链表内容：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>niter <span class=\"token operator\">=</span> number<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> niter <span class=\"token operator\">!=</span> number<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>niter<span class=\"token punctuation\">)</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>niter <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tnumber<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>~</p>\n<h4><a id=\"113_stack_2923\"></a>11.3 stack</h4>\n<p>**例子：**利用栈进行进制转换</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tstack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> st<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"100的八进制表示为：\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tst<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">%</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tnum <span class=\"token operator\">/=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tt <span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> t<span class=\"token punctuation\">;</span>\n\t\tst<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>~</p>\n<h4><a id=\"114_queue_2954\"></a>11.4 queue</h4>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tqueue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> qu<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t\tqu<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>qu<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> qu<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t\tqu<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>~</p>\n<h4><a id=\"115_priority_queue_2977\"></a>11.5 优先队列priority_queue</h4>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdlib&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctime&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tpriority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> pq<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span><span class=\"token punctuation\">)</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> t <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tpq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"优先队列的值：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tpq<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>~</p>\n<h4><a id=\"116_deque_3007\"></a>11.6 双端队列deque</h4>\n<pre><code class=\"prism language-cpp\"><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">maxsize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>~</p>\n<h4><a id=\"117_set_3026\"></a>11.7 set</h4>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tset<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> s<span class=\"token punctuation\">;</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ccc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"存在元素aaa\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tset<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span>iterator iter<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>iter <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>iter<span class=\"token punctuation\">)</span> \n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>iter <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>~</p>\n<h4><a id=\"118_map_3052\"></a>11.8 map</h4>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tmap<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> m<span class=\"token punctuation\">;</span>\n\tm<span class=\"token punctuation\">[</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">111</span><span class=\"token punctuation\">;</span>\n\tm<span class=\"token punctuation\">[</span><span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">222</span><span class=\"token punctuation\">;</span>\n\tm<span class=\"token punctuation\">[</span><span class=\"token string\">\"ccc\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">333</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"键aaa对应的值为\"</span> <span class=\"token operator\">&lt;&lt;</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"键aaa对应的值为\"</span> <span class=\"token operator\">&lt;&lt;</span> m<span class=\"token punctuation\">[</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<blockquote>\n<p>完结撒花~~~🌸🌸🌸🌸🌸</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210604154943250.png\"/></p>\n<blockquote>\n<p>博主就是在复习的过程中顺便总结下知识点，以便以后查看学习。</p>\n<p>注：本博客仅供学习和参考，内容较多，难免会有错误，请大家多多包涵。如有侵权敬请告知。</p>\n<p>参考资料《C++面向对象程序设计》陈维兴、林小茶编著</p>\n</blockquote>\n<p><font color=\"cyan\" face=\"华文彩云\" size=\"5\">读完本文的小可爱，恭喜您坚持到了最后❤</font></p>\n<p><font color=\"OrangeRed\" face=\"华文彩云\" size=\"5\">创作整理不易，如果对您有所帮助，还望多+点赞、收藏☚</font></p>\n<p><font color=\"OrangeRed\" face=\"华文彩云\" size=\"5\">欢迎在评论区留下您宝贵的建议😉😉😉</font></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-06-21 19:08:00", "summary": "《面向对象程序设计》千处细节、万字总结文章目录《面向对象程序设计》千处细节、万字总结一、面向对象程序设计二、基础的产生和特点一个简单的示例程序在非面向对象方面对语言的扩充输入和输出修饰符型指针内联函数"}