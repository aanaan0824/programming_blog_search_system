{"blogid": "125082911", "writerAge": "码龄1年", "writerBlogNum": "79", "writerCollect": "1313", "writerComment": "1103", "writerFan": "3617", "writerGrade": "6级", "writerIntegral": "4685", "writerName": "Yuucho", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125082911.jpg", "writerRankTotal": "3753", "writerRankWeekly": "4927", "writerThumb": "1522", "writerVisitNum": "48270", "blog_read_count": "1107", "blog_time": "已于 2022-06-03 08:11:38 修改", "blog_title": "C++之string", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p><strong>我等必将复起，古木已发新枝</strong></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\80e7d505717841879332005542ee367d.png\"/></p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#1Cstring_6\">💖1.为什么C++要出string类？</a></li><li><a href=\"#2string_16\">🌟2.标准库中的string类</a></li><li><a href=\"#3_42\">🔥3.编码问题</a></li><li><a href=\"#4_string_76\">☀️4 string类的常用接口说明</a></li><li><ul><li><a href=\"#41_string_78\">⚡️4.1. string类对象的常见构造</a></li><li><a href=\"#42_string_117\">🌊4.2. string类对象的赋值</a></li><li><a href=\"#43_string_132\">🐮4.3. string类对象的修改操作</a></li><li><a href=\"#44_string_162\">🐸4.4. string类对象的容量操作</a></li><li><a href=\"#45_string_229\">🌺4.5 string类对象的访问及遍历操作</a></li><li><a href=\"#46_atoperator_320\">🎃4.6. at和operator[]的区别</a></li><li><a href=\"#47__359\">🎉4.7 四种迭代器</a></li></ul>\n</li><li><a href=\"#5__415\">🎁5. 总结</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"1Cstring_6\"></a>💖1.为什么C++要出string类？</h1>\n<p>C++中我们要熟悉的第一个类就是<code>string</code>类，它是一个非常常用的类。<br/> C++为什么要给出一个<code>string</code>类呢？<br/> 因为C语言有很多用字符串不方便的地方：</p>\n<blockquote>\n<p><strong>字符串是以’\\0’结尾的一些字符的集合。为了操作方便，C标准库中提供了一些str系列的库函数，但是这些库函数与字符串是分离开的，不太符合OOP的思想，而且底层空间需要用户自己管理，稍不留神可能还会越界访问。</strong></p>\n</blockquote>\n<p>C++为了方便管理字符串就给出了<code>string</code>类。</p>\n<h1><a id=\"2string_16\"></a>🌟2.标准库中的string类</h1>\n<blockquote>\n<p><strong>string是表示字符序列的对象。</strong><br/> <strong>标准string类通过类似于标准字节容器的接口为此类对象提供支持，但添加了专门设计用于操作单字节字符串的特性。string类是basic_string类模板的一个实例化，它使用char(即bytes)作为其字符类型，其默认的char_traits和allocator类型(参见basic_string了解模板的更多信息)。注意,这类使用的独立处理字节编码:如果用于处理多字节序列或变长字符(比如utf- 8),这个类的所有成员(如长度或大小),以及它的迭代器,还是操作的字节(而不是实际的编码字符)。</strong></p>\n</blockquote>\n<p>要使用<code>string</code>就得包含<code>string</code>的头文件，且<code>string</code>定义在<code>std</code>这个命名空间内。定义一个<code>string</code>对象时有同学或多或少见过以下的代码：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tstring s1<span class=\"token punctuation\">;</span>\n\tstring <span class=\"token function\">s2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>有同学就要问了，不是说是<code>string</code>类吗，它又不是模板，为什么能这么玩？<br/> ok，<code>string</code>表面上不是模板，实际上它是模板实例化来的，它是被<code>typedef</code>过的。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\53446b236acc42bc8936173b4c0ba026.png\"/><br/> <code>string</code>是这个类模板实例化后类的其中之一，模板参数给的char：<code>basic_string&lt;char&gt;</code>。<br/> 这个类模板实例化后其实有四种类：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\eb914ae1fbeb46da9c6d80cab542fb81.png\"/></p>\n<h1><a id=\"3_42\"></a>🔥3.编码问题</h1>\n<p><code>basic_string</code>模板实例化后为什么有四种呢？这其实涉及到编码问题。<br/> 计算机里面只有0和1，为了能让计算机显示各个国家的文字，人们就设计了不同的编码表。常见的编码分为<code>ASCII、Unicode(utf-8、utf-16、utf-32)、gbk</code>等等。<br/> 这些编码表其实就是一种映射，映射再具体一点讲就是计算机底层存的<strong>值和显示值的映射表</strong>。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\567caf86ca8841b78f332f9f86884b5b.png\"/></p>\n<p>比如我们表示字母A：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> ch1 <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> ch2 <span class=\"token operator\">=</span> <span class=\"token number\">65</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>ch1、ch2</code>这两个变量的大小都是一个字节，那这个一个字节在内存里面存的值是什么？<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9cbe68181e114909967f78f2e70391a0.png\"/><br/> ok，<strong>存的是二进制的65</strong>，给A就去编码表找到对应的值存储起来。显示的时候也是通过用65去查这个编码表然后显示A。计算机中只有0和1。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3ed5bfc067684e57a5fa732ea4442c01.png\"/><br/> 有了ASCII表就可以显示英文。</p>\n<p>但是计算机要显示中文怎么办？不仅是中文，要显示各个国家的文字怎么办？<br/> ok，我们先不谈其他国家的文字，我们就谈中文。<br/> 英文是比较简洁的语言，用char(256)类型就完全够表示了。但是汉字博大精深，博主上网查了一下汉字有85568个，肯定不能用char类型存储，两个字符(256*256)大概是6万多也不够，3个字符就有点浪费了。<strong>所以咱们国家针对中文也写了一个编码表，叫gbk(国标)。Unicode的视角就更大了，它针对是全世界的文字，它的编码就十分复杂。</strong><br/> <strong>Windows显示汉字一般用gbk，Linux用utf-8。但是都要兼容ASCII。</strong></p>\n<p>常见的汉字用2个字节表示，不常见的汉字可能用3个或者4个字节：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1f63ae5797a24e21a818241b1089950d.png\"/><br/> 同音字编码时是编到一起的，王者荣耀把脏话屏蔽掉就会用到这一点。</p>\n<p><strong>大家再想一想string为什么要设计成模板？ok，就是因为编码问题。</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6cc5123417aa4152906564e8869c7373.png\"/></p>\n<h1><a id=\"4_string_76\"></a>☀️4 string类的常用接口说明</h1>\n<p>博主只会讲几种常用的接口，想了解更多请查看<a href=\"https://m.cplusplus.com/reference/string/string/string/\">文档。</a></p>\n<h2><a id=\"41_string_78\"></a>⚡️4.1. string类对象的常见构造</h2>\n<table><thead><tr><th>(constructor)函数名称</th><th>功能说明</th></tr></thead><tbody><tr><td>string() （重点）</td><td>构造空的string类对象，即空字符串</td></tr><tr><td>string(const char* s) （重点）</td><td>用C-string来构造string类对象</td></tr><tr><td>string(size_t n, char c)</td><td>string类对象中包含n个字符c</td></tr><tr><td>string(const string&amp;s) （重点）</td><td>拷贝构造函数</td></tr></tbody></table>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e354e16755504350a446bc8490101af6.png\"/><br/> 第七个要用到迭代器，暂时不讲。<br/> <code>string</code>管理动态增长的字符数组，这个字符串以<code>\"\\0\"</code>结尾。所以<strong>可以用字符串来构造且能实现增删查改</strong>等功能。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">test_string1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tstring s1<span class=\"token punctuation\">;</span>\n\tstring <span class=\"token function\">s2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstring <span class=\"token function\">s3</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstring s4 <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//前4个初始化</span>\n\tstring <span class=\"token function\">s5</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://m.cplusplus.com/reference/string/string/string/\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//用n个C初始化</span>\n\tstring <span class=\"token function\">s6</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//string (const string&amp; str, size_t pos, size_t len = npos);</span>\n\t<span class=\"token comment\">//static const size_t npos = -1;</span>\n\t<span class=\"token comment\">//npos表示如果取的字符超过剩余的字符数量，有多少取多少</span>\n\n\t<span class=\"token comment\">//从s2的第6个字符起，取3个字符初始化</span>\n\tstring <span class=\"token function\">s7</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//超过剩余的字符数量，有多少取多少</span>\n\tstring <span class=\"token function\">s8</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//不给第三个参数，默认参数是npos</span>\n\tstring <span class=\"token function\">s9</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>运行结果：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cf2d5dfce3a0412287e019ee421865fe.png\"/></p>\n<h2><a id=\"42_string_117\"></a>🌊4.2. string类对象的赋值</h2>\n<p>早期<code>string</code>的设计没有经验，设计了很多冗余的。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4d034bb01af142e2ab4313b558ac5e09.png\"/></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">test_string2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tstring <span class=\"token function\">s1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstring <span class=\"token function\">s2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\ts1 <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">;</span>\n\ts1 <span class=\"token operator\">=</span> <span class=\"token string\">\"yyy\"</span><span class=\"token punctuation\">;</span>\n\ts1 <span class=\"token operator\">=</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"43_string_132\"></a>🐮4.3. string类对象的修改操作</h2>\n<table><thead><tr><th>函数名称</th><th>功能说明</th></tr></thead><tbody><tr><td><a href=\"http://m.cplusplus.com/reference/string/string/push_back/\">push_back</a></td><td>在字符串后尾插字符c</td></tr><tr><td><a href=\"http://m.cplusplus.com/reference/string/string/append/\">append</a></td><td>在字符串后追加一个字符串</td></tr><tr><td><a href=\"http://m.cplusplus.com/reference/string/string/operator+=/\">operator+= (重点)</a></td><td>在字符串后追加字符串str</td></tr><tr><td><a href=\"http://www.cplusplus.com/reference/string/string/c_str/\">c_str</a></td><td>返回C格式字符串</td></tr><tr><td><a href=\"http://m.cplusplus.com/reference/string/string/find/\">find</a>+ <a href=\"http://www.cplusplus.com/reference/string/string/npos/\">npos(重点)</a></td><td>从字符串pos位置开始往后找字符c，返回该字符在字符串中的位置</td></tr><tr><td><a href=\"http://m.cplusplus.com/reference/string/string/rfind/\">rfind</a></td><td>从字符串pos位置开始往前找字符c，返回该字符在字符串中的位置</td></tr><tr><td><a href=\"http://m.cplusplus.com/reference/string/string/substr/\">substr</a></td><td>在str中从pos位置开始，截取n个字符，然后将其返回</td></tr></tbody></table>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">test_string6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tstring s<span class=\"token punctuation\">;</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstring <span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\ts <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">;</span>\n\ts <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n\ts <span class=\"token operator\">+</span><span class=\"token operator\">=</span> str<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>运行结果：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6548979d817f4f269d9f525e413939d3.png\"/></p>\n<h2><a id=\"44_string_162\"></a>🐸4.4. string类对象的容量操作</h2>\n<table><thead><tr><th>函数名称</th><th>功能说明</th></tr></thead><tbody><tr><td><a href=\"http://www.cplusplus.com/reference/string/string/size/\">size（重点）</a></td><td>返回字符串有效字符长度</td></tr><tr><td><a href=\"http://m.cplusplus.com/reference/string/string/length/\">length</a></td><td>返回字符串有效字符长度</td></tr><tr><td><a href=\"http://m.cplusplus.com/reference/string/string/capacity/\">capacity</a></td><td>返回空间总大小</td></tr><tr><td><a href=\"http://www.cplusplus.com/reference/string/string/empty/\">empty （重点）</a></td><td>检测字符串释放为空串，是返回true，否则返回false</td></tr><tr><td><a href=\"http://www.cplusplus.com/reference/string/string/clear/\">clear （重点）</a></td><td>清空有效字符</td></tr><tr><td><a href=\"http://www.cplusplus.com/reference/string/string/reserve/\">reserve （重点）</a></td><td>为字符串预留空间</td></tr><tr><td><a href=\"http://m.cplusplus.com/reference/string/string/resize/\">resize （重点）</a></td><td>将有效字符的个数该成n个，多出的空间用字符c填充</td></tr></tbody></table>\n<p><strong>string先于STL设计，所以string严格意义上不属于STL。length也是早期设计string类产生的。到了STL的出现，人们发现string和STL具有相同的性质，又设计了size接口。(而且后面的树还叫length就不合适了)，所以都推荐大家去用size。</strong></p>\n<p><code>push_back</code>扩容问题：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">test_string6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tstring s<span class=\"token punctuation\">;</span>\n\tsize_t sz <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"making s grow:\\n\"</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"capacity changed: \"</span> <span class=\"token operator\">&lt;&lt;</span> sz <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sz <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tsz <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"capacity changed: \"</span> <span class=\"token operator\">&lt;&lt;</span> sz <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>运行结果：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\387b6d0e32394ab7a777f384701fc5df.png\"/><br/> 扩容是有代价的，开新的空间要释放旧的空间，因为不一定都能原地扩容。那有没有什么方法可以减少扩容？有，<code>reserve</code>(提前把空间开好)。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">test_string6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tstring s<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//因为对齐的原因，可能会多开一点，申请空间都会自然对齐的</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsize_t sz <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"making s grow:\\n\"</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"capacity changed: \"</span> <span class=\"token operator\">&lt;&lt;</span> sz <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sz <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tsz <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"capacity changed: \"</span> <span class=\"token operator\">&lt;&lt;</span> sz <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\59dc7c71ca1c4ed38d6125e1d6accb63.png\"/><br/> <strong><code>resize</code>不仅会扩容还会改变size，还会初始化(如果不给第二个参数默认初始化为\\0)：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3c45df844768461c97ed75b0d95a16e9.png\"/><br/> 如果string已经有数据了，resize还有其他用法：不会改变原始数据，会在后面补上初始化的值(95个x)。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\65b9c7b921e9495e96aab8b5fab2e4f2.png\"/><br/> <strong>VS下<code>reserve</code>和<code>resize</code>都不会缩小容量，但是<code>resize</code>会缩小<code>size</code>：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\09446e2fa56d43ce8f878cd63b17a4ff.png\"/></p>\n<h2><a id=\"45_string_229\"></a>🌺4.5 string类对象的访问及遍历操作</h2>\n<p><code>string</code>管理动态增长的字符数组，我们能像数组一样对<code>string</code>对象进行访问和遍历。</p>\n<table><thead><tr><th>函数名称</th><th>功能说明</th></tr></thead><tbody><tr><td><a href=\"http://m.cplusplus.com/reference/string/string/operator%5B%5D/\">operator[] （重点）</a></td><td>返回pos位置的字符，const string类对象调用</td></tr><tr><td><a href=\"http://m.cplusplus.com/reference/string/string/begin/\">begin</a>+<a href=\"http://www.cplusplus.com/reference/string/string/end/\"> end</a></td><td>begin获取一个字符的迭代器 + end获取最后一个字符下一个位置的迭代器</td></tr><tr><td><a href=\"http://m.cplusplus.com/reference/string/string/rbegin/\">rbegin</a>+ <a href=\"http://m.cplusplus.com/reference/string/string/rend/\">rend</a></td><td>begin获取一个字符的迭代器 + end获取最后一个字符下一个位置的迭代器</td></tr><tr><td>范围for</td><td>C++11支持更简洁的范围for的新遍历方式</td></tr></tbody></table>\n<p>迭代器是类似指针的东西或者它就是指针，具体要看它的底层实现。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\055ae758d5924dc88ad8f8b9d934870b.png\"/></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">test_string3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 遍历string的每一个字符</span>\n\tstring <span class=\"token function\">s1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> s1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\ts1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 第一种方式，下标+[]</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">// s1.operator[](i);</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> s1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//const char* s2 = \"world\";</span>\n\t<span class=\"token comment\">//s2[i]; // *(s2+i)</span>\n\n\t<span class=\"token comment\">// 迭代器</span>\n\tstring<span class=\"token operator\">::</span>iterator it <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">++</span>it<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 范围for -- 原理：替换成迭代器</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> ch <span class=\"token operator\">:</span> s1<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> ch <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>运行结果：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b9b3cf1481a042a980e22a437efbb165.png\"/></p>\n<p>我们再随便找<a href=\"https://leetcode.cn/problems/reverse-only-letters/\">一道题</a>来看：<br/> 利用快排单排排序的思想，但这里不是找大找小，这里是找字母，然后交换。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c8f0a631112f490687dce98280c35194.png\"/></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> \n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">isLetter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">&gt;=</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">&gt;=</span> <span class=\"token string\">'A'</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'Z'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    string <span class=\"token function\">reverseOnlyLetters</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//cout&lt;&lt;left&lt;&lt;\":\"&lt;&lt;right&lt;&lt;endl;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">isLetter</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">++</span>left<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">isLetter</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">--</span>right<span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">++</span>left<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">--</span>right<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"46_atoperator_320\"></a>🎃4.6. at和operator[]的区别</h2>\n<p><code>at</code>也是<code>string</code>类早期设计的接口，它与<code>operator[]</code>的区别是：<code>operator[]</code>会报越界的检查(<strong>assert</strong>)，<code>at</code>会抛异常。<br/> 实际工作中，一般用<code>operator[]</code>用的多<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ec1c618e28bc4489b7a6e5526be99200.png\"/></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">test_string4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tstring <span class=\"token function\">s1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> string <span class=\"token function\">s2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//s1[6];</span>\n\t<span class=\"token comment\">//s2[6];</span>\n\ts1<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ts2<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\ts1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//s2[0] = 'x';</span>\n\ts1<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">try</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">test_string4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果：<br/> <strong>operator[]:</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\05780818be464f789ce2ea052b5f33f5.png\"/><br/> <strong>at:</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0508609a8f4d4f84a80db7b19fca1ff2.png\"/></p>\n<h2><a id=\"47__359\"></a>🎉4.7 四种迭代器</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3165990182a54c44bcc913f35310dfad.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0132f198dc48484bb6078bf8335c84fd.png\"/></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">test_string5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 正向迭代器</span>\n\tstring <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstring<span class=\"token operator\">::</span>iterator it <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">++</span>it<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 反向迭代器</span>\n\tstring<span class=\"token operator\">::</span>reverse_iterator rit <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rit <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>rit <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">++</span>rit<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>运行结果：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b782f70ce24d4869b35cdcfbd4f90246.png\"/></p>\n<p><strong>如果是const对象会调用相应的const迭代器：返回一个只读的迭代器对象。</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> rs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tstring<span class=\"token operator\">::</span>const_iterator it <span class=\"token operator\">=</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//*it += 1;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">++</span>it<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//string::const_reverse_iterator rit = rs.rbegin();</span>\n\t<span class=\"token keyword\">auto</span> rit <span class=\"token operator\">=</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rit <span class=\"token operator\">!=</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//(*rit) -= 1;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>rit <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">++</span>rit<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b2d22d3a15dc4a1388687a7bcc14242d.png\"/></p>\n<h1><a id=\"5__415\"></a>🎁5. 总结</h1>\n<p><strong>今天博主把string类常用的接口简单介绍了下，其余大家看文档应该也可以搞懂。大家尽量参考英文文档，不要有畏惧心理(如果你想吃这碗饭)。像STL中的vector、lsit、stack、queue大家都可以边查文档边练习，博主认为这是最高效的学习方法。<br/> 关于string的剩下内容和它的底层原理，博主会在下一篇模拟实现string的博客中讲解。</strong></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-06-03 08:11:38", "summary": "我等必将复起，古木已发新枝在这里插入图片描述文章目录为什么要出类？标准库中的类编码问题类的常用接口说明类对象的常见构造类对象的赋值类对象的修改操作类对象的容量操作类对象的访问及遍历操作和的区别四种迭代"}