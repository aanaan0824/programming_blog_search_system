{"blogid": "126667647", "writerAge": "码龄2年", "writerBlogNum": "502", "writerCollect": "438", "writerComment": "38", "writerFan": "12091", "writerGrade": "6级", "writerIntegral": "5433", "writerName": "良月生秋", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126667647.jpg", "writerRankTotal": "3164", "writerRankWeekly": "545", "writerThumb": "78", "writerVisitNum": "304556", "blog_read_count": "274", "blog_time": "于 2022-09-02 17:27:01 发布", "blog_title": "HDFS、YARN、MapReduce概述及三者之间的关系", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h3><a id=\"_2\"></a>文章目录</h3>\n<ul><li><a href=\"#HDFS_1\">一、HDFS架构概述</a></li><li>\n<ul><li><a href=\"#1HDFS_2\">1、HDFS定义</a></li><li><a href=\"#2HDFS_5\">2、HDFS组成</a></li><li><a href=\"#3HDFS_20\">3、HDFS文件块大小</a></li><li><a href=\"#4HDFS_28\">4、HDFS的优点</a></li><li><a href=\"#5HDFS_34\">5、HDFS的缺点</a></li><li><a href=\"#6HDFS_43\">6、HDFS读数据流程</a></li><li><a href=\"#7NameNode_48\">7、NameNode工作原理</a></li><li><a href=\"#8DataNode_74\">8、DataNode工作原理</a></li></ul> </li><li><a href=\"#YARN_82\">二、YARN架构概述</a></li><li>\n<ul><li><a href=\"#1yarn_83\">1、yarn概述</a></li><li><a href=\"#2yarn_85\">2、yarn构成组件</a></li></ul> </li><li><a href=\"#MapReduce_117\">三、MapReduce</a></li><li>\n<ul><li><a href=\"#1MapReduce_126\">1、MapReduce优点：</a></li><li><a href=\"#2MapReduce_131\">2、MapReduce缺点：</a></li></ul> </li><li><a href=\"#_135\">四、三者之间的关系</a></li></ul>\n<h1><a id=\"HDFS_21\"></a>一、HDFS架构概述</h1>\n<h2><a id=\"1HDFS_24\"></a>1、HDFS定义</h2>\n<p><code>HDFS</code>(Hadoop Distributed File System) 它是一个<code>文件系统</code>，用于存储文件，通过目录树来定位文件；其次，它是<code>分布式</code>的，由很多服务器联合起来实现其功能，集群中的服务器有各自的角色。<br/> <code>HDFS</code>的使用场景：适合一次写入，多次读出的场景。一个文件经过创建、写入和关闭之后就不需要改变。</p>\n<h2><a id=\"2HDFS_30\"></a>2、HDFS组成</h2>\n<p>1、NameNode（nn）: 就是Master，它是一个主管、管理者。存储文件的<code>元数据，如文件名、文件目录结构、文件属性</code>（生成时间、副本数、文件权限），以及每个文件的<code>块列表</code>和<code>块所在的DataNode</code>等。(告诉在哪存储，储存什么内容)</p>\n<ul><li>管理HDFS的名称空间 ;</li><li>配置副本策略；</li><li>管理数据块（Block）映射信息；</li><li>处理客户端读写请求。</li></ul>\n<p>2、DataNode : 就是slave，NameNode下达命令，DataNode执行实际的操作。</p>\n<ul><li>存储实际的数据块；</li><li>执行数据块的读、写操作</li></ul>\n<p>3、2nn：每隔一段时间对NameNode元数据备份<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b362d2d1482f4b96be554156888812c4.png\"/></p>\n<h2><a id=\"3HDFS_48\"></a>3、HDFS文件块大小</h2>\n<p>HDFS中的文件在物理上是分块存储（Block），块大小可以通过配置参数（dfs.blocksize）来规定，<code>默认大小在Hadoop2.x/3.x版本中是128M,1.x版本是64M</code><br/> 结论：<br/> （1）如果寻址时间约为10ms，即查找到目标block的时间为10ms<br/> （2）寻址时间为传输时间的1%时，则为最佳状态。即：10ms/10%=1000ms<br/> （3）而目前磁盘的传输速率普遍为100MB/s。因此块大小按最小单元设置为128M<br/> （4）HDFS的块设置<code>太小，会增加寻址时间</code>，程序一直在找块的开始位置；<br/> （5）HDFS的块设置<code>太大</code>，从<code>磁盘传输数据的时间</code>会明显大于<code>定位这个块开始位置的时间</code>。导致程序在处理这块数据时，会非常慢。</p>\n<h2><a id=\"4HDFS_59\"></a>4、HDFS的优点</h2>\n<p>1）高容错性：数据自动保存多个副本。它通过增加副本的形式，提高容错性。如果某个副本丢失以后，如果有机器，它可自动恢复。<br/> 2）适合处理大数据：<br/> 数据规模：能够处理数据规模达到GB、TB、甚至PB级别的数据；<br/> 文件规模：能够处理百万规模以上的文件数量，数量相当之大。<br/> 3）可构建在廉价机器上，通过多副本机制，提高可靠性。</p>\n<h2><a id=\"5HDFS_68\"></a>5、HDFS的缺点</h2>\n<p>1）不适合低延时数据访问，比如毫秒级的存储数据，是做不到的。<br/> 2）无法高效的对大量小文件进行存储。</p>\n<ul><li>存储大量小文件的话，它会占用NameNode大量的内存来存储文件目录和块信息，这样是不可取的，因为NameNode的内存总是有限的。</li><li>小文件存储的寻址时间会超过读取时间，它违反了HDFS的设计目标。</li></ul>\n<p>3）不支持并发写入、文件随机修改。</p>\n<ul><li>一个文件只能有一个写，不允许多个线程同时写；</li><li>仅支持数据append（追加），不支持文件的随机修改。</li></ul>\n<h2><a id=\"6HDFS_82\"></a>6、HDFS读数据流程</h2>\n<p>（1）client创建文件对象，请求NameNode确认是否有权限以及NameNode是否存在client需要的内容，如果有NameNode将返回给client文件的元数据；<br/> （2）client创建流去读DataNode的数据块，读取规则: 首先访问节点最近的block，其次保证负载均衡<br/> （3）同时访问多个DataNode，数据是串行存储到client，即数据追加<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\94442bedb4e34dcd94bdf5ff4cf1a247.png\"/></p>\n<h2><a id=\"7NameNode_90\"></a>7、NameNode工作原理</h2>\n<p>（1）服务器启动之后，edits和fsimage 加载编辑日志和镜像文件到内存中；<br/> （2）client 发起数据内容增删改请求对NameNode<br/> （3）edits_inprogress 先记录需要操作的内容，更新滚动日志, 记录到fsimages<br/> （4）操作内存进行数据的增删改<br/> （5）2nn: checkPoint触发条件：</p>\n<ul><li>到了设置的定时时间；</li><li>Edits中的数据满了<br/> 满足任一个条件，Secondary NameNode请求Namnode确实是否可同步，如果回应即可开始同步</li></ul>\n<p>（6）滚动正在写的Edits,为edits_inprogress_002,如果这个时间client正请求修改，将记录到edits_inprogress_002，完成之后修改名称为edits_001<br/> （7）拷贝edits_001到2nn，并拉取镜像fsimages<br/> （8）2nn加载edits_001和fsimages到内存，生成新得fsimages.chkpoint，并拷贝到NameNode上，并命名为fsimage.chkpoint, 保证数据是最新的<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\55eb3d7bb35a4c90981eb48dc606371c.png\"/><br/> （9）如果namenode 其中一台active挂了(ip:50070)，处理方法如下：<br/> 修改 hdfs-site.xml：中的内容，增加shell(/bin/true),update hadoop组件即可<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1c06ce4af4aa47f2a595deade160f7db.png\"/><br/> 具体看博客：https://blog.csdn.net/w892824196/article/details/100059674</p>\n<p>Fsimage 和 Edits概念：<br/> NameNode格式化之后，将在以下目录下生成文件：</p>\n<ul><li>Fsimage文件：HDFS文件系统元数据得一个永久性得检查点，其中包括HDFS文件系统的所有目录和文件inode的序列化信息；</li><li>Edits文件：存放HDFS文件系统的所有更新操作的路径，文件系统客户端执行的所有写操作首先会被记录到Edits文件中。</li><li>seen_txid：文件保存的是一个数据，就是最后一个edits_的数字<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8b7671f204fc47568bbe3228337b2852.png\"/></li></ul>\n<h2><a id=\"8DataNode_120\"></a>8、DataNode工作原理</h2>\n<p>（1）DataNode启动后向NameNode注册。<br/> （2）NameNode上标记注册成功；<br/> （3）DataNode每周期（6小时）上报所有块信息给NameNode<br/> （4）心跳每3s/次，心跳返回结果带有NameNode给当前DataNode的命令<br/> （5）超过10分钟+30秒没有收到DataNode2的心跳，则认为该节点不可用。NameNode将不会在存储数据到该节点。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a3bf5abc123c488098e85375064d6e1d.png\"/></p>\n<h1><a id=\"YARN_130\"></a>二、YARN架构概述</h1>\n<h2><a id=\"1yarn_133\"></a>1、yarn概述</h2>\n<p><code>Yarn</code>是一个资源调度平台，负责为运算程序提供服务器运算资源，相当于一个分布式的<code>操作平台</code>，而<code>MapReduce</code>等运算程序则相当于运行于<code>操作系统之上的应用程序</code>。</p>\n<h2><a id=\"2yarn_138\"></a>2、yarn构成组件</h2>\n<p>1、ResourceManager (RM) ：整个集群资源（内存、CPU等）的老大，通俗一点讲就是协调分配整个集群的内存和CPU。</p>\n<ul><li>处理客户端请求；</li><li>监控NodeManager</li><li>启动和监控ApplicationMaster</li><li>资源的分配和调度</li></ul>\n<p><code>查看rm的主备方法: 进入到容器，执行yarn rmadmin -getAllServiceState</code>, 手动停一台active的rm，standby一分钟左右自动切换到active。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\347af3434c4849e980c077cac0775a12.png\"/><br/> 2、NodeManager (NM) ：单个节点服务器资源老大。也就是单台机器该节点所需要的内存和cpu</p>\n<ul><li> <p>管理单个节点上的资源</p> </li><li> <p>处理来自ResourceManager的命令</p> </li><li> <p>处理来自ApplicationMaster的命令<br/> 3、ApplicationMaster (AM)：单个任务运行的老大</p> </li><li> <p>为应用程序申请资源并分配给内部的任务</p> </li><li> <p>任务的监控与容错<br/> 4、Container：容器，相当一台独立的服务器，</p> </li><li> <p>container是Yarn中的资源抽象，它封装了某个节点上的多维度资源，<code>如内存、CPU、磁盘、网络等</code>。<br/> 5、client就是客户端</p> </li><li> <p>文件切分。文件上传HDFS的时候，Client将文件切分成一个一个的Block(块)</p> </li><li> <p>与NameNode交互，获取文件的位置信息；</p> </li><li> <p>与DataNode交互，读取或者写入数据；</p> </li><li> <p>Client提供一些命令来管理HDFS, 比如NameNode格式化。</p> </li><li> <p>Client可以通过一些命令来访问HDFS, 比如对HDFS增啥改查操作。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\99747348a71f4e76bb2f46a67bb178fc.png\"/><br/> 注意：<br/> 1、客户端client可以有多个<br/> 2、集群上可以运行多个ApplicationMaster<br/> 3、每个NodeManager上可以有多个Container</p> </li></ul>\n<h1><a id=\"MapReduce_183\"></a>三、MapReduce</h1>\n<p>MapReduce进程：一个完整的MapReduce程序在分布式运行有三类实例进程：</p>\n<ul><li>MrAppMaster：负责整个程序的过程调度以及状态协调；</li><li>MapTask：负责Map阶段整个数据处理流程</li><li>ReduceTask:：负责Reduce阶段的整个数据处理流程<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a8f83999a60743c68e7c872a5315dda9.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\32a51c448eb745498521420cafcc6d28.png\"/></li></ul>\n<h2><a id=\"1MapReduce_194\"></a>1、MapReduce优点：</h2>\n<ul><li>易于编程。用户只关系业务逻辑，实现框架的接口。</li><li>良好扩展性。可以动态增加服务器，解决计算资源不够问题</li><li>高容错性。任何一台机器挂掉，可以将任务转移到其他节点。</li><li>适合海量数据计算，几千台服务器共同计算。</li></ul>\n<h2><a id=\"2MapReduce_202\"></a>2、MapReduce缺点：</h2>\n<ul><li>不擅长实时计算。Mysql</li><li>不擅长流式计算。Sparkstreaming flink</li><li>不擅长DAG有向无环图计算。</li></ul>\n<h1><a id=\"_209\"></a>四、三者之间的关系</h1>\n<p>客户端<code>Client</code>提交任务到<code>资源管理器（ResourceManager）</code>,<code>资源管理器</code>接收到任务之后去<code>NodeManager节点</code>开启任务（ApplicationMaster）, <code>ApplicationMaster向ResourceManager</code>申请资源, 若有资源ApplicationMaster负责开启任务即MapTask。开始干活了即分析任务，<code>每个map独立工作，各自负责检索各自对应的DataNode</code>，将结果记录到HDFS, DataNode负责存储，NameNode负责记录，2nn负责备份部分数据。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b1506da28f4843e78cddb4460d5de2ba.png\"/></p>\n<p>五 、面试题<br/> 1、常用端口<br/> hadoop 3.x<br/> HDFS NameNode 内部通常端口：8020/9000/9820<br/> HDFS NameNode 对用户得查询端口：9870<br/> Yarn查看任务运行情况：8088<br/> 历史服务器：19888<br/> hadoop 2.x<br/> HDFS NameNode 内部通常端口：8020/9000<br/> HDFS NameNode 对用户得查询端口：50070<br/> Yarn查看任务运行情况：8088<br/> 历史服务器：19888<br/> 2、常用的配置文件<br/> 3.x版本：<br/> core-site.xml hdfs-site.xml yarn-site.xml mapred-site.xml workers<br/> 2.x版本：<br/> core-site.xml hdfs-site.xml yarn-site.xml mapred-site.xml slaves</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2022-09-02 17:27:01", "summary": "文章目录一、架构概述、定义、组成、文件块大小、的优点、的缺点、读数据流程、工作原理、工作原理二、架构概述、概述、构成组件三、、优点：、缺点：四、三者之间的关系一、架构概述、定义它是一个文件系统，用于存"}