{"blogid": "124597667", "writerAge": "码龄5年", "writerBlogNum": "14", "writerCollect": "125", "writerComment": "9", "writerFan": "21", "writerGrade": "3级", "writerIntegral": "642", "writerName": "Leaderxin", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124597667.jpg", "writerRankTotal": "52447", "writerRankWeekly": "130752", "writerThumb": "40", "writerVisitNum": "47550", "blog_read_count": "1473", "blog_time": "于 2022-05-25 22:34:53 发布", "blog_title": "详解C#中的命名空间", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>详解C#中的命名空间</h3>\n<ul><li><a href=\"#_2\">命名空间</a></li><li><ul><li><a href=\"#namespace_6\">namespace</a></li><li><a href=\"#using_31\">using</a></li><li><a href=\"#using_static_44\">using static</a></li><li><a href=\"#_58\">命名空间中的规则</a></li><li><ul><li><a href=\"#_59\">名称范围</a></li><li><a href=\"#_94\">名称隐藏</a></li><li><a href=\"#_114\">重复的命名空间</a></li></ul>\n</li><li><a href=\"#_129\">命名空间别名</a></li><li><a href=\"#_147\">命名空间别名限定符</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_2\"></a>命名空间</h1>\n<p>C#中使用namespace关键字定义命名空间,命名空间类似我们电脑文件资源管理器中的文件夹,可自由命名且具有层级,命名空间中的各个类就像文件夹中的文件,通过各种命名及划分层级来分类存放</p>\n<h2><a id=\"namespace_6\"></a>namespace</h2>\n<p>命名空间通过关键字namespace定义,使用\".\"或者{}包含来定义嵌套的命名空间,如下面两段代码在语义上是等价的:</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Outer<span class=\"token punctuation\">.</span>Middle<span class=\"token punctuation\">.</span>Inner</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Class1</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Class2</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Outer</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Middle</span> \n    <span class=\"token punctuation\">{<!-- --></span> \n        <span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Inner</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">class</span> <span class=\"token class-name\">Class1</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">class</span> <span class=\"token class-name\">Class2</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><em>如果类型没有在任何命名空间中定义,则它存在于全局命名空间. 全局命名空间包含了顶层命名空间,如上例中的Outer命名空间</em></p>\n<h2><a id=\"using_31\"></a>using</h2>\n<p>using指令用于导入命名空间,可以避免使用完全限定名称来指代某种类型.以下例子导入了上述例子中的Outer.Middle.Inner命名空间:</p>\n<pre><code class=\"prism language-csharp\">    <span class=\"token keyword\">using</span> <span class=\"token namespace\">Outer<span class=\"token punctuation\">.</span>Middle<span class=\"token punctuation\">.</span>Inner</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Class1</span> c1<span class=\"token punctuation\">;</span> <span class=\"token comment\">//此处不需要一层层指定Class1的命名空间,因为已经通过using引入了</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"using_static_44\"></a>using static</h2>\n<p>使用using static可以引用命名空间中的静态成员,包括字段,属性及嵌套类型.如下例中我们引用Console类的静态成员后可直接调用WriteLine方法:</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Console</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>注意using static指令只能用于类型,不能用于命名空间(将产生一个编译错误)</strong><br/> <img alt=\"using static不能直接引入命名空间\" src=\"..\\..\\static\\image\\ebf6c40aec1d43c4aeb8d37b6e95e931.png\"/><br/> using static除了能导入静态成员外还能导入枚举类型:</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Windows<span class=\"token punctuation\">.</span>Visibility</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> textBox <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TextBox</span><span class=\"token punctuation\">{<!-- --></span> Visibility <span class=\"token operator\">=</span> Hidden<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//此处不需要指定Visibility.Hidden</span>\n</code></pre>\n<h2><a id=\"_58\"></a>命名空间中的规则</h2>\n<h3><a id=\"_59\"></a>名称范围</h3>\n<p>外层命名空间中声明的名称能够直接在内层命名空间中使用</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Outer</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OuterClass</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Middle</span> \n    <span class=\"token punctuation\">{<!-- --></span> \n        <span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Inner</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">class</span> <span class=\"token class-name\">Class1</span><span class=\"token punctuation\">:</span><span class=\"token type-list\"><span class=\"token class-name\">OuterClass</span></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>命名空间分层结构中不同分支中的类型需要使用部分限定名称</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Outer</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OuterClass</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Middle</span> \n    <span class=\"token punctuation\">{<!-- --></span> \n        <span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Inner</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">class</span> <span class=\"token class-name\">Class1</span><span class=\"token punctuation\">:</span><span class=\"token type-list\"><span class=\"token class-name\">OuterClass</span></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Inner2</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">class</span> <span class=\"token class-name\">Class2</span><span class=\"token punctuation\">:</span><span class=\"token type-list\"><span class=\"token class-name\">Inner<span class=\"token punctuation\">.</span>Class1</span></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">//此处不能直接使用Class1</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_94\"></a>名称隐藏</h3>\n<p>如果同一类型名称同时出现在外层和内层命名空间中,则内层名称优先.如果要使用外层类型,必须使用它的完全限定名称:</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Outer</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">One</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Inner</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">class</span> <span class=\"token class-name\">One</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">One</span> inner<span class=\"token punctuation\">;</span><span class=\"token comment\">// = Outer.Inner.One</span>\n            <span class=\"token class-name\">Outer<span class=\"token punctuation\">.</span>One</span> outer<span class=\"token punctuation\">;</span> <span class=\"token comment\">// =Outer.One</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>所有类型名称在编译时都会转化为完全限定名称.中间语言(IL)代码不包含非限定名称和部分限定名称.</p>\n<h3><a id=\"_114\"></a>重复的命名空间</h3>\n<p>只要命名空间中的类型名称不冲突就可以重复声明同一个命名空间:</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Outer</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Class1</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Outer</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Class2</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上述示例和在Outer命名空间中同时定义Class1和Class2语义上是一样的,上面两个类也可以分别定义在两个不同的源文件,编译到不同的程序集中去.</p>\n<h2><a id=\"_129\"></a>命名空间别名</h2>\n<p>导入命名空间可能会导致类型名称的冲突,这时我们可以为导入的类型或者命名空间创建别名,如下:</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token class-name\">Assembly2</span> <span class=\"token operator\">=</span><span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Reflection<span class=\"token punctuation\">.</span>Assembly</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//给命名空间中的指定类型创建别名</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Assembly2</span> asm<span class=\"token punctuation\">;</span> <span class=\"token comment\">//= System.Reflection.Assembly</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token class-name\">R</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Reflection</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//给整个命名空间创建别名</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">R<span class=\"token punctuation\">.</span>Assembly</span> asm<span class=\"token punctuation\">;</span> <span class=\"token comment\">//= System.Reflection.Assembly</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_147\"></a>命名空间别名限定符</h2>\n<p>之前提到,由于内层命名空间中的名称优先级更高会隐藏外层命名空间中的名称.有时即使使用类型的完全限定名称也无法解决冲突,如下示例:</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">N</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">A<span class=\"token punctuation\">.</span>B</span> b<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//此处虽然使用完全限定名称,但还是会拿到嵌套类B的实例,而不是A命名空间下的类B</span>\n        <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">A</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>要解决这样的冲突,可以使用全局命名空间global来限定命名空间中的名称:</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">N</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">global</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">A<span class=\"token punctuation\">.</span>B</span> b<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//通过global限定全局命名空间下的A命名空间中的类B</span>\n        <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">A</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-05-25 22:34:53", "summary": "详解中的命名空间命名空间命名空间中的规则名称范围名称隐藏重复的命名空间命名空间别名命名空间别名限定符命名空间中使用关键字定义命名空间命名空间类似我们电脑文件资源管理器中的文件夹可自由命名且具有层级命名"}