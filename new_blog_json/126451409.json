{"blogid": "126451409", "writerAge": "码龄3年", "writerBlogNum": "48", "writerCollect": "356", "writerComment": "304", "writerFan": "2012", "writerGrade": "4级", "writerIntegral": "1385", "writerName": "潇湘夜雨.", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126451409.jpg", "writerRankTotal": "13387", "writerRankWeekly": "19304", "writerThumb": "485", "writerVisitNum": "37244", "blog_read_count": "513", "blog_time": "已于 2022-08-28 23:48:00 修改", "blog_title": "基于 Spring boot + MyBatis 的在线音乐播放系统", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1 id=\"main-toc\"><span style=\"color:#0d0016;\"><strong>目录</strong></span></h1>\n<p><a href=\"#%E4%B8%80%E3%80%81%E9%A1%B9%E7%9B%AE%E6%88%AA%E5%9B%BE\">    一、项目截图</a></p>\n<p id=\"%C2%A0%E4%BA%8C%E3%80%81%E5%88%9B%E5%BB%BA%20SpringBoot%20%E9%A1%B9%E7%9B%AE-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0%E4%BA%8C%E3%80%81%E5%88%9B%E5%BB%BA%20SpringBoot%20%E9%A1%B9%E7%9B%AE\">    二、创建 SpringBoot 项目</a></p>\n<p id=\"1%E3%80%81%E5%9C%A8%20IDEA%20%E4%B8%AD%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%20SpringBoot%20%E9%A1%B9%E7%9B%AE-toc\" style=\"margin-left:40px;\"><a href=\"#1%E3%80%81%E5%9C%A8%20IDEA%20%E4%B8%AD%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%20SpringBoot%20%E9%A1%B9%E7%9B%AE\">1、在 IDEA 中创建一个 SpringBoot 项目</a></p>\n<p id=\"2%E3%80%81%E8%AE%BE%E7%BD%AE%E9%A1%B9%E7%9B%AE%E5%90%8D%E7%A7%B0-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81%E8%AE%BE%E7%BD%AE%E9%A1%B9%E7%9B%AE%E5%90%8D%E7%A7%B0\">2、设置项目名称</a></p>\n<p id=\"3%E3%80%81%E9%80%89%E6%8B%A9%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96-toc\" style=\"margin-left:40px;\"><a href=\"#3%E3%80%81%E9%80%89%E6%8B%A9%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96\">3、选择项目依赖</a></p>\n<p id=\"4%E3%80%81%E9%80%89%E6%8B%A9%E9%A1%B9%E7%9B%AE%E5%AD%98%E6%94%BE%E8%B7%AF%E5%BE%84%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%88%9B%E5%BB%BA%E5%87%BA%E4%B8%80%E4%B8%AA%20SpringBoot%20%E9%A1%B9%E7%9B%AE-toc\" style=\"margin-left:40px;\"><a href=\"#4%E3%80%81%E9%80%89%E6%8B%A9%E9%A1%B9%E7%9B%AE%E5%AD%98%E6%94%BE%E8%B7%AF%E5%BE%84%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%88%9B%E5%BB%BA%E5%87%BA%E4%B8%80%E4%B8%AA%20SpringBoot%20%E9%A1%B9%E7%9B%AE\">4、选择项目存放路径，就可以创建出一个 SpringBoot 项目</a></p>\n<p id=\"%E4%B8%89%E3%80%81%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8Cxml-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%89%E3%80%81%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8Cxml\">三、配置数据库和xml</a></p>\n<p id=\"1%E3%80%81%E6%89%93%E5%BC%80application.properties-toc\" style=\"margin-left:40px;\"><a href=\"#1%E3%80%81%E6%89%93%E5%BC%80application.properties\">1、打开application.properties</a></p>\n<p id=\"2%E3%80%81%E9%85%8D%E7%BD%AE%E5%A6%82%E4%B8%8B%E4%BF%A1%E6%81%AF-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81%E9%85%8D%E7%BD%AE%E5%A6%82%E4%B8%8B%E4%BF%A1%E6%81%AF\">2、配置如下信息</a></p>\n<p id=\"%E5%9B%9B%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%9B%9B%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1\">四、数据库设计</a></p>\n<p id=\"%E4%BA%94%E3%80%81%E5%B7%A5%E5%85%B7%E5%8C%85-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%94%E3%80%81%E5%B7%A5%E5%85%B7%E5%8C%85\">五、工具包</a></p>\n<p id=\"1%E3%80%81ResponseBodyMessage%20%E7%B1%BB-toc\" style=\"margin-left:40px;\"><a href=\"#1%E3%80%81ResponseBodyMessage%20%E7%B1%BB\">1、ResponseBodyMessage 类</a></p>\n<p id=\"2%E3%80%81Constant%20%E7%B1%BB-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81Constant%20%E7%B1%BB\">2、Constant 类</a></p>\n<p id=\"3%E3%80%81%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86-toc\" style=\"margin-left:40px;\"><a href=\"#3%E3%80%81%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86\">3、数据加密</a></p>\n<p id=\"1.%20MD5%20%E5%8A%A0%E5%AF%86-toc\" style=\"margin-left:80px;\"><a href=\"#1.%20MD5%20%E5%8A%A0%E5%AF%86\">1. MD5 加密</a></p>\n<p id=\"MD5%20%E7%9A%84%E4%BD%BF%E7%94%A8-toc\" style=\"margin-left:80px;\"><a href=\"#MD5%20%E7%9A%84%E4%BD%BF%E7%94%A8\">MD5 的使用</a></p>\n<p id=\"2.%20BCrypt%20%E5%8A%A0%E5%AF%86-toc\" style=\"margin-left:80px;\"><a href=\"#2.%20BCrypt%20%E5%8A%A0%E5%AF%86\">2. BCrypt 加密</a></p>\n<p id=\"Bcrypt%20%E7%9A%84%E4%BD%BF%E7%94%A8-toc\" style=\"margin-left:80px;\"><a href=\"#Bcrypt%20%E7%9A%84%E4%BD%BF%E7%94%A8\">Bcrypt 的使用</a></p>\n<p id=\"3.%20BCrypt%E5%8A%A0%E5%AF%86%E4%B8%8EMD5%E5%8A%A0%E5%AF%86%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#3.%20BCrypt%E5%8A%A0%E5%AF%86%E4%B8%8EMD5%E5%8A%A0%E5%AF%86%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9A\">3. BCrypt加密与MD5加密的区别：</a></p>\n<p id=\"%E5%85%AD%E3%80%81%E9%85%8D%E7%BD%AE%E6%8B%A6%E6%88%AA%E5%99%A8-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%85%AD%E3%80%81%E9%85%8D%E7%BD%AE%E6%8B%A6%E6%88%AA%E5%99%A8\">六、配置拦截器</a></p>\n<p id=\"1%E3%80%81%E5%88%9B%E5%BB%BA%20config%20%E5%8C%85%EF%BC%8C%E5%9C%A8%20config%20%E5%8C%85%E4%B8%AD%E5%88%9B%E5%BB%BA%20LoginInterceptor%20%E7%B1%BB-toc\" style=\"margin-left:40px;\"><a href=\"#1%E3%80%81%E5%88%9B%E5%BB%BA%20config%20%E5%8C%85%EF%BC%8C%E5%9C%A8%20config%20%E5%8C%85%E4%B8%AD%E5%88%9B%E5%BB%BA%20LoginInterceptor%20%E7%B1%BB\">1、创建 config 包，在 config 包中创建 LoginInterceptor 类</a></p>\n<p id=\"2%E3%80%81%E5%9C%A8%20config%20%E5%8C%85%E4%B8%AD%E5%88%9B%E5%BB%BA%20AppConfig%20%E7%B1%BB-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81%E5%9C%A8%20config%20%E5%8C%85%E4%B8%AD%E5%88%9B%E5%BB%BA%20AppConfig%20%E7%B1%BB\">2、在 config 包中创建 AppConfig 类</a></p>\n<p id=\"%E4%B8%83%E3%80%81%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E6%A8%A1%E5%9D%97-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%83%E3%80%81%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E6%A8%A1%E5%9D%97\">七、实现登录模块</a></p>\n<p id=\"1%E3%80%81%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%AE%BE%E8%AE%A1-toc\" style=\"margin-left:40px;\"><a href=\"#1%E3%80%81%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%AE%BE%E8%AE%A1\">1、登录功能的请求和响应设计</a></p>\n<p id=\"2%E3%80%81%E5%88%9B%E5%BB%BA%20User%20%E7%B1%BB-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81%E5%88%9B%E5%BB%BA%20User%20%E7%B1%BB\">2、创建 User 类</a></p>\n<p id=\"3%E3%80%81%E5%88%9B%E5%BB%BA%E5%AF%B9%E5%BA%94%E7%9A%84%20Mapper%20%E5%92%8C%20Controller-toc\" style=\"margin-left:40px;\"><a href=\"#3%E3%80%81%E5%88%9B%E5%BB%BA%E5%AF%B9%E5%BA%94%E7%9A%84%20Mapper%20%E5%92%8C%20Controller\">3、创建对应的 Mapper 和 Controller</a></p>\n<p id=\"1.%20%E5%88%9B%E5%BB%BA%E6%8E%A5%E5%8F%A3%20UserMapper-toc\" style=\"margin-left:80px;\"><a href=\"#1.%20%E5%88%9B%E5%BB%BA%E6%8E%A5%E5%8F%A3%20UserMapper\">1. 创建接口 UserMapper</a></p>\n<p id=\"2.%20%E5%88%9B%E5%BB%BA%20UserMapper.xml-toc\" style=\"margin-left:80px;\"><a href=\"#2.%20%E5%88%9B%E5%BB%BA%20UserMapper.xml\">2. 创建 UserMapper.xml</a></p>\n<p id=\"4%E3%80%81%E5%9C%A8%20UserMapper%20%E6%8E%A5%E5%8F%A3%E4%B8%AD%E6%96%B0%E5%A2%9E%20selectByName%20%E6%96%B9%E6%B3%95-toc\" style=\"margin-left:40px;\"><a href=\"#4%E3%80%81%E5%9C%A8%20UserMapper%20%E6%8E%A5%E5%8F%A3%E4%B8%AD%E6%96%B0%E5%A2%9E%20selectByName%20%E6%96%B9%E6%B3%95\">4、在 UserMapper 接口中新增 selectByName 方法</a></p>\n<p id=\"5%E3%80%81%E5%88%9B%E5%BB%BA%20UserController%20%E7%B1%BB-toc\" style=\"margin-left:40px;\"><a href=\"#5%E3%80%81%E5%88%9B%E5%BB%BA%20UserController%20%E7%B1%BB\">5、创建 UserController 类</a></p>\n<p id=\"6%E3%80%81%E7%99%BB%E5%BD%95%E6%88%90%E5%8A%9F%E6%B5%8B%E8%AF%95-toc\" style=\"margin-left:40px;\"><a href=\"#6%E3%80%81%E7%99%BB%E5%BD%95%E6%88%90%E5%8A%9F%E6%B5%8B%E8%AF%95\">6、登录成功测试</a></p>\n<p id=\"7%E3%80%81%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:40px;\"><a href=\"#7%E3%80%81%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81\">7、前端代码</a></p>\n<p id=\"%E5%85%AB%E3%80%81%E5%AE%9E%E7%8E%B0%E6%B3%A8%E5%86%8C%E6%A8%A1%E5%9D%97-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%85%AB%E3%80%81%E5%AE%9E%E7%8E%B0%E6%B3%A8%E5%86%8C%E6%A8%A1%E5%9D%97\">八、实现注册模块</a></p>\n<p id=\"1%E3%80%81%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%AE%BE%E8%AE%A1-toc\" style=\"margin-left:40px;\"><a href=\"#1%E3%80%81%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%AE%BE%E8%AE%A1\">1、注册功能的请求和响应设计</a></p>\n<p id=\"2%E3%80%81%E5%9C%A8%20UserMapper%20%E6%8E%A5%E5%8F%A3%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81%E5%9C%A8%20UserMapper%20%E6%8E%A5%E5%8F%A3%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95\">2、在 UserMapper 接口新增方法</a></p>\n<p id=\"3%E3%80%81UserMapper.xml%20%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:40px;\"><a href=\"#3%E3%80%81UserMapper.xml%20%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81\">3、UserMapper.xml 文件中添加代码</a></p>\n<p id=\"4%E3%80%81%E5%9C%A8%20UserController%20%E7%B1%BB%E4%B8%AD%E6%B7%BB%E5%8A%A0%20register%20%E6%96%B9%E6%B3%95-toc\" style=\"margin-left:40px;\"><a href=\"#4%E3%80%81%E5%9C%A8%20UserController%20%E7%B1%BB%E4%B8%AD%E6%B7%BB%E5%8A%A0%20register%20%E6%96%B9%E6%B3%95\">4、在 UserController 类中添加 register 方法</a></p>\n<p id=\"5%E3%80%81%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95-toc\" style=\"margin-left:40px;\"><a href=\"#5%E3%80%81%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95\">5、注册功能测试</a></p>\n<p id=\"6%E3%80%81%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:40px;\"><a href=\"#6%E3%80%81%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81\">6、前端代码</a></p>\n<p id=\"%E4%B9%9D%E3%80%81%E5%AE%9E%E7%8E%B0%E4%B8%8A%E4%BC%A0%E9%9F%B3%E4%B9%90%E6%A8%A1%E5%9D%97-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B9%9D%E3%80%81%E5%AE%9E%E7%8E%B0%E4%B8%8A%E4%BC%A0%E9%9F%B3%E4%B9%90%E6%A8%A1%E5%9D%97\">九、实现上传音乐模块</a></p>\n<p id=\"1%E3%80%81%E4%B8%8A%E4%BC%A0%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%AE%BE%E8%AE%A1-toc\" style=\"margin-left:40px;\"><a href=\"#1%E3%80%81%E4%B8%8A%E4%BC%A0%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%AE%BE%E8%AE%A1\">1、上传音乐功能的请求和响应设计</a></p>\n<p id=\"2%E3%80%81%E5%88%9B%E5%BB%BA%20Music%20%E7%B1%BB-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81%E5%88%9B%E5%BB%BA%20Music%20%E7%B1%BB\">2、创建 Music 类</a></p>\n<p id=\"3%E3%80%81%E5%88%9B%E5%BB%BA%E6%8E%A5%E5%8F%A3%20MusicMapper-toc\" style=\"margin-left:40px;\"><a href=\"#3%E3%80%81%E5%88%9B%E5%BB%BA%E6%8E%A5%E5%8F%A3%20MusicMapper\">3、创建接口 MusicMapper</a></p>\n<p id=\"4%E3%80%81%E5%88%9B%E5%BB%BA%20MusicMapper.xml-toc\" style=\"margin-left:40px;\"><a href=\"#4%E3%80%81%E5%88%9B%E5%BB%BA%20MusicMapper.xml\">4、创建 MusicMapper.xml</a></p>\n<p id=\"5%E3%80%81%E5%88%9B%E5%BB%BA%20MusicController%20%E7%B1%BB-toc\" style=\"margin-left:40px;\"><a href=\"#5%E3%80%81%E5%88%9B%E5%BB%BA%20MusicController%20%E7%B1%BB\">5、创建 MusicController 类</a></p>\n<p id=\"6%E3%80%81%E4%B8%8A%E4%BC%A0%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95-toc\" style=\"margin-left:40px;\"><a href=\"#6%E3%80%81%E4%B8%8A%E4%BC%A0%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95\">6、上传音乐功能测试</a></p>\n<p id=\"7%E3%80%81%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:40px;\"><a href=\"#7%E3%80%81%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81\">7、前端代码</a></p>\n<p id=\"%C2%A0%E5%8D%81%E3%80%81%E5%AE%9E%E7%8E%B0%E6%92%AD%E6%94%BE%E9%9F%B3%E4%B9%90%E6%A8%A1%E5%9D%97-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0%E5%8D%81%E3%80%81%E5%AE%9E%E7%8E%B0%E6%92%AD%E6%94%BE%E9%9F%B3%E4%B9%90%E6%A8%A1%E5%9D%97\">十、实现播放音乐模块</a></p>\n<p id=\"1%E3%80%81%E6%92%AD%E6%94%BE%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%AE%BE%E8%AE%A1-toc\" style=\"margin-left:40px;\"><a href=\"#1%E3%80%81%E6%92%AD%E6%94%BE%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%AE%BE%E8%AE%A1\">1、播放音乐功能的请求和响应设计</a></p>\n<p id=\"2%E3%80%81%E5%9C%A8%20MusicController%20%E7%B1%BB%E4%B8%AD%E6%B7%BB%E5%8A%A0%20playMusic%20%E6%96%B9%E6%B3%95-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81%E5%9C%A8%20MusicController%20%E7%B1%BB%E4%B8%AD%E6%B7%BB%E5%8A%A0%20playMusic%20%E6%96%B9%E6%B3%95\">2、在 MusicController 类中添加 playMusic 方法</a></p>\n<p id=\"3%E3%80%81%E6%92%AD%E6%94%BE%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95-toc\" style=\"margin-left:40px;\"><a href=\"#3%E3%80%81%E6%92%AD%E6%94%BE%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95\">3、播放音乐功能测试</a></p>\n<p id=\"4%E3%80%81%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:40px;\"><a href=\"#4%E3%80%81%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81\">4、前端代码</a></p>\n<p id=\"%E5%8D%81%E4%B8%80%E3%80%81%E5%AE%9E%E7%8E%B0%E5%88%A0%E9%99%A4%E9%9F%B3%E4%B9%90%E6%A8%A1%E5%9D%97-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%8D%81%E4%B8%80%E3%80%81%E5%AE%9E%E7%8E%B0%E5%88%A0%E9%99%A4%E9%9F%B3%E4%B9%90%E6%A8%A1%E5%9D%97\">十一、实现删除音乐模块</a></p>\n<p id=\"1%E3%80%81%E5%88%A0%E9%99%A4%E5%8D%95%E4%B8%AA%E9%9F%B3%E4%B9%90-toc\" style=\"margin-left:40px;\"><a href=\"#1%E3%80%81%E5%88%A0%E9%99%A4%E5%8D%95%E4%B8%AA%E9%9F%B3%E4%B9%90\">1、删除单个音乐</a></p>\n<p id=\"1.%20%E5%88%A0%E9%99%A4%E5%8D%95%E4%B8%AA%E9%9F%B3%E4%B9%90%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%AE%BE%E8%AE%A1-toc\" style=\"margin-left:80px;\"><a href=\"#1.%20%E5%88%A0%E9%99%A4%E5%8D%95%E4%B8%AA%E9%9F%B3%E4%B9%90%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%AE%BE%E8%AE%A1\">1. 删除单个音乐的请求和响应设计</a></p>\n<p id=\"2.%20%E5%9C%A8%20MusicMapper%20%E6%8E%A5%E5%8F%A3%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:80px;\"><a href=\"#2.%20%E5%9C%A8%20MusicMapper%20%E6%8E%A5%E5%8F%A3%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81\">2. 在 MusicMapper 接口中添加代码</a></p>\n<p id=\"3.%20MusicMapper.xml%20%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:80px;\"><a href=\"#3.%20MusicMapper.xml%20%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81\">3. MusicMapper.xml 文件中添加代码</a></p>\n<p id=\"4.%20%E5%9C%A8%20MusicController%20%E7%B1%BB%E4%B8%AD%E6%B7%BB%E5%8A%A0%20deleteByMusicId%20%E6%96%B9%E6%B3%95-toc\" style=\"margin-left:80px;\"><a href=\"#4.%20%E5%9C%A8%20MusicController%20%E7%B1%BB%E4%B8%AD%E6%B7%BB%E5%8A%A0%20deleteByMusicId%20%E6%96%B9%E6%B3%95\">4. 在 MusicController 类中添加 deleteByMusicId 方法</a></p>\n<p id=\"5.%20%E5%88%A0%E9%99%A4%E5%8D%95%E4%B8%AA%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95-toc\" style=\"margin-left:80px;\"><a href=\"#5.%20%E5%88%A0%E9%99%A4%E5%8D%95%E4%B8%AA%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95\">5. 删除单个音乐功能测试</a></p>\n<p id=\"6.%20%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:80px;\"><a href=\"#6.%20%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81\">6. 前端代码</a></p>\n<p id=\"2%E3%80%81%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%E9%80%89%E4%B8%AD%E7%9A%84%E9%9F%B3%E4%B9%90-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%E9%80%89%E4%B8%AD%E7%9A%84%E9%9F%B3%E4%B9%90\">2、批量删除选中的音乐</a></p>\n<p id=\"1.%20%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%E9%80%89%E4%B8%AD%E7%9A%84%E9%9F%B3%E4%B9%90%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%AE%BE%E8%AE%A1-toc\" style=\"margin-left:80px;\"><a href=\"#1.%20%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%E9%80%89%E4%B8%AD%E7%9A%84%E9%9F%B3%E4%B9%90%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%AE%BE%E8%AE%A1\">1. 批量删除选中的音乐的请求和响应设计</a></p>\n<p id=\"2.%20%E5%9C%A8%20MusicController%20%E7%B1%BB%E4%B8%AD%E6%B7%BB%E5%8A%A0%20deleteSelMusic%20%E6%96%B9%E6%B3%95-toc\" style=\"margin-left:80px;\"><a href=\"#2.%20%E5%9C%A8%20MusicController%20%E7%B1%BB%E4%B8%AD%E6%B7%BB%E5%8A%A0%20deleteSelMusic%20%E6%96%B9%E6%B3%95\">2. 在 MusicController 类中添加 deleteSelMusic 方法</a></p>\n<p id=\"3.%20%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%E9%80%89%E4%B8%AD%E7%9A%84%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95-toc\" style=\"margin-left:80px;\"><a href=\"#3.%20%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%E9%80%89%E4%B8%AD%E7%9A%84%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95\">3. 批量删除选中的音乐功能测试</a></p>\n<p id=\"4.%20%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:80px;\"><a href=\"#4.%20%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81\">4. 前端代码</a></p>\n<p id=\"%E5%8D%81%E4%BA%8C%E3%80%81%E5%AE%9E%E7%8E%B0%E6%9F%A5%E8%AF%A2%E9%9F%B3%E4%B9%90%E6%A8%A1%E5%9D%97-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%8D%81%E4%BA%8C%E3%80%81%E5%AE%9E%E7%8E%B0%E6%9F%A5%E8%AF%A2%E9%9F%B3%E4%B9%90%E6%A8%A1%E5%9D%97\">十二、实现查询音乐模块</a></p>\n<p id=\"1%E3%80%81%E6%9F%A5%E8%AF%A2%E9%9F%B3%E4%B9%90%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%AE%BE%E8%AE%A1-toc\" style=\"margin-left:40px;\"><a href=\"#1%E3%80%81%E6%9F%A5%E8%AF%A2%E9%9F%B3%E4%B9%90%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%AE%BE%E8%AE%A1\">1、查询音乐的请求和响应设计</a></p>\n<p id=\"2%E3%80%81%E5%9C%A8%20MusicMapper%20%E6%8E%A5%E5%8F%A3%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81%E5%9C%A8%20MusicMapper%20%E6%8E%A5%E5%8F%A3%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81\">2、在 MusicMapper 接口中添加代码</a></p>\n<p id=\"3%E3%80%81MusicMapper.xml%20%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:40px;\"><a href=\"#3%E3%80%81MusicMapper.xml%20%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81\">3、MusicMapper.xml 文件中添加代码</a></p>\n<p id=\"4%E3%80%81%E5%9C%A8%20MusicController%20%E7%B1%BB%E4%B8%AD%E6%B7%BB%E5%8A%A0%20findMusic%20%E6%96%B9%E6%B3%95-toc\" style=\"margin-left:40px;\"><a href=\"#4%E3%80%81%E5%9C%A8%20MusicController%20%E7%B1%BB%E4%B8%AD%E6%B7%BB%E5%8A%A0%20findMusic%20%E6%96%B9%E6%B3%95\">4、在 MusicController 类中添加 findMusic 方法</a></p>\n<p id=\"5%E3%80%81%E6%9F%A5%E8%AF%A2%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95-toc\" style=\"margin-left:40px;\"><a href=\"#5%E3%80%81%E6%9F%A5%E8%AF%A2%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95\">5、查询音乐功能测试</a></p>\n<p id=\"1.%20%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%E7%9A%84%E9%9F%B3%E4%B9%90-toc\" style=\"margin-left:80px;\"><a href=\"#1.%20%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%E7%9A%84%E9%9F%B3%E4%B9%90\">1. 查询所有的音乐</a></p>\n<p id=\"2.%20%E6%A8%A1%E7%B3%8A%E5%8C%B9%E9%85%8D%EF%BC%8C%E6%9F%A5%E8%AF%A2%E6%8C%87%E5%AE%9A%E7%9A%84%E9%9F%B3%E4%B9%90-toc\" style=\"margin-left:80px;\"><a href=\"#2.%20%E6%A8%A1%E7%B3%8A%E5%8C%B9%E9%85%8D%EF%BC%8C%E6%9F%A5%E8%AF%A2%E6%8C%87%E5%AE%9A%E7%9A%84%E9%9F%B3%E4%B9%90\">2. 模糊匹配，查询指定的音乐</a></p>\n<p id=\"6%E3%80%81%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:40px;\"><a href=\"#6%E3%80%81%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81\">6、前端代码</a></p>\n<p id=\"%E5%8D%81%E4%B8%89%E3%80%81%E5%AE%9E%E7%8E%B0%E6%94%B6%E8%97%8F%E9%9F%B3%E4%B9%90%E6%A8%A1%E5%9D%97-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%8D%81%E4%B8%89%E3%80%81%E5%AE%9E%E7%8E%B0%E6%94%B6%E8%97%8F%E9%9F%B3%E4%B9%90%E6%A8%A1%E5%9D%97\">十三、实现收藏音乐模块</a></p>\n<p id=\"1%E3%80%81%E6%94%B6%E8%97%8F%E9%9F%B3%E4%B9%90%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%AE%BE%E8%AE%A1-toc\" style=\"margin-left:40px;\"><a href=\"#1%E3%80%81%E6%94%B6%E8%97%8F%E9%9F%B3%E4%B9%90%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%AE%BE%E8%AE%A1\">1、收藏音乐的请求和响应设计</a></p>\n<p id=\"2%E3%80%81%E5%88%9B%E5%BB%BA%20LoveMusic%20%E7%B1%BB-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81%E5%88%9B%E5%BB%BA%20LoveMusic%20%E7%B1%BB\">2、创建 LoveMusic 类</a></p>\n<p id=\"3%E3%80%81%E5%88%9B%E5%BB%BA%E6%8E%A5%E5%8F%A3%20LoveMusicMapper-toc\" style=\"margin-left:40px;\"><a href=\"#3%E3%80%81%E5%88%9B%E5%BB%BA%E6%8E%A5%E5%8F%A3%20LoveMusicMapper\">3、创建接口 LoveMusicMapper</a></p>\n<p id=\"4%E3%80%81%E5%88%9B%E5%BB%BA%20LoveMusicMapper.xml-toc\" style=\"margin-left:40px;\"><a href=\"#4%E3%80%81%E5%88%9B%E5%BB%BA%20LoveMusicMapper.xml\">4、创建 LoveMusicMapper.xml</a></p>\n<p id=\"5%E3%80%81%E5%88%9B%E5%BB%BA%20LoveMusicController%20%E7%B1%BB-toc\" style=\"margin-left:40px;\"><a href=\"#5%E3%80%81%E5%88%9B%E5%BB%BA%20LoveMusicController%20%E7%B1%BB\">5、创建 LoveMusicController 类</a></p>\n<p id=\"6%E3%80%81%E6%94%B6%E8%97%8F%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95-toc\" style=\"margin-left:40px;\"><a href=\"#6%E3%80%81%E6%94%B6%E8%97%8F%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95\">6、收藏音乐功能测试</a></p>\n<p id=\"7%E3%80%81%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:40px;\"><a href=\"#7%E3%80%81%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81\">7、前端代码</a></p>\n<p id=\"%E5%8D%81%E5%9B%9B%E3%80%81%E5%AE%9E%E7%8E%B0%E6%9F%A5%E8%AF%A2%E6%94%B6%E8%97%8F%E7%9A%84%E9%9F%B3%E4%B9%90%E6%A8%A1%E5%9D%97-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%8D%81%E5%9B%9B%E3%80%81%E5%AE%9E%E7%8E%B0%E6%9F%A5%E8%AF%A2%E6%94%B6%E8%97%8F%E7%9A%84%E9%9F%B3%E4%B9%90%E6%A8%A1%E5%9D%97\">十四、实现查询收藏的音乐模块</a></p>\n<p id=\"1%E3%80%81%E6%9F%A5%E8%AF%A2%E6%94%B6%E8%97%8F%E9%9F%B3%E4%B9%90%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%AE%BE%E8%AE%A1-toc\" style=\"margin-left:40px;\"><a href=\"#1%E3%80%81%E6%9F%A5%E8%AF%A2%E6%94%B6%E8%97%8F%E9%9F%B3%E4%B9%90%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%AE%BE%E8%AE%A1\">1、查询收藏音乐的请求和响应设计</a></p>\n<p id=\"2%E3%80%81%E5%9C%A8%20LoveMusicMapper%20%E6%8E%A5%E5%8F%A3%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81%E5%9C%A8%20LoveMusicMapper%20%E6%8E%A5%E5%8F%A3%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81\">2、在 LoveMusicMapper 接口中添加代码</a></p>\n<p id=\"3%E3%80%81LoveMusicMapper.xml%20%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:40px;\"><a href=\"#3%E3%80%81LoveMusicMapper.xml%20%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81\">3、LoveMusicMapper.xml 文件中添加代码</a></p>\n<p id=\"4%E3%80%81%E5%9C%A8%20LoveMusicController%20%E7%B1%BB%E4%B8%AD%E6%B7%BB%E5%8A%A0%20findLoveMusic%20%E6%96%B9%E6%B3%95-toc\" style=\"margin-left:40px;\"><a href=\"#4%E3%80%81%E5%9C%A8%20LoveMusicController%20%E7%B1%BB%E4%B8%AD%E6%B7%BB%E5%8A%A0%20findLoveMusic%20%E6%96%B9%E6%B3%95\">4、在 LoveMusicController 类中添加 findLoveMusic 方法</a></p>\n<p id=\"5%E3%80%81%E6%9F%A5%E8%AF%A2%E6%94%B6%E8%97%8F%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95-toc\" style=\"margin-left:40px;\"><a href=\"#5%E3%80%81%E6%9F%A5%E8%AF%A2%E6%94%B6%E8%97%8F%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95\">5、查询收藏音乐功能测试</a></p>\n<p id=\"1.%20%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%E7%9A%84%E6%94%B6%E8%97%8F%E9%9F%B3%E4%B9%90-toc\" style=\"margin-left:80px;\"><a href=\"#1.%20%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%E7%9A%84%E6%94%B6%E8%97%8F%E9%9F%B3%E4%B9%90\">1. 查询所有的收藏音乐</a></p>\n<p id=\"2.%20%E6%A8%A1%E7%B3%8A%E5%8C%B9%E9%85%8D%EF%BC%8C%E6%9F%A5%E8%AF%A2%E6%8C%87%E5%AE%9A%E7%9A%84%E6%94%B6%E8%97%8F%E9%9F%B3%E4%B9%90-toc\" style=\"margin-left:80px;\"><a href=\"#2.%20%E6%A8%A1%E7%B3%8A%E5%8C%B9%E9%85%8D%EF%BC%8C%E6%9F%A5%E8%AF%A2%E6%8C%87%E5%AE%9A%E7%9A%84%E6%94%B6%E8%97%8F%E9%9F%B3%E4%B9%90\">2. 模糊匹配，查询指定的收藏音乐</a></p>\n<p id=\"6%E3%80%81%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:40px;\"><a href=\"#6%E3%80%81%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81\">6、前端代码</a></p>\n<p id=\"%E5%8D%81%E4%BA%94%E3%80%81%E5%AE%9E%E7%8E%B0%E5%8F%96%E6%B6%88%E6%94%B6%E8%97%8F%E9%9F%B3%E4%B9%90%E6%A8%A1%E5%9D%97-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%8D%81%E4%BA%94%E3%80%81%E5%AE%9E%E7%8E%B0%E5%8F%96%E6%B6%88%E6%94%B6%E8%97%8F%E9%9F%B3%E4%B9%90%E6%A8%A1%E5%9D%97\">十五、实现取消收藏音乐模块</a></p>\n<p id=\"1%E3%80%81%E5%8F%96%E6%B6%88(%E7%A7%BB%E9%99%A4)%E6%94%B6%E8%97%8F%E9%9F%B3%E4%B9%90%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%AE%BE%E8%AE%A1-toc\" style=\"margin-left:40px;\"><a href=\"#1%E3%80%81%E5%8F%96%E6%B6%88%28%E7%A7%BB%E9%99%A4%29%E6%94%B6%E8%97%8F%E9%9F%B3%E4%B9%90%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%AE%BE%E8%AE%A1\">1、取消(移除)收藏音乐的请求和响应设计</a></p>\n<p id=\"2%E3%80%81%E5%9C%A8%20LoveMusicMapper%20%E6%8E%A5%E5%8F%A3%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81%E5%9C%A8%20LoveMusicMapper%20%E6%8E%A5%E5%8F%A3%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81\">2、在 LoveMusicMapper 接口中添加代码</a></p>\n<p id=\"3%E3%80%81LoveMusicMapper.xml%20%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:40px;\"><a href=\"#3%E3%80%81LoveMusicMapper.xml%20%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81\">3、LoveMusicMapper.xml 文件中添加代码</a></p>\n<p id=\"4%E3%80%81%E5%9C%A8%20LoveMusicController%20%E7%B1%BB%E4%B8%AD%E6%B7%BB%E5%8A%A0%20removeLoveMusic%20%E6%96%B9%E6%B3%95-toc\" style=\"margin-left:40px;\"><a href=\"#4%E3%80%81%E5%9C%A8%20LoveMusicController%20%E7%B1%BB%E4%B8%AD%E6%B7%BB%E5%8A%A0%20removeLoveMusic%20%E6%96%B9%E6%B3%95\">4、在 LoveMusicController 类中添加 removeLoveMusic 方法</a></p>\n<p id=\"5%E3%80%81%E5%8F%96%E6%B6%88%E6%94%B6%E8%97%8F%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95-toc\" style=\"margin-left:40px;\"><a href=\"#5%E3%80%81%E5%8F%96%E6%B6%88%E6%94%B6%E8%97%8F%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95\">5、取消收藏音乐功能测试</a></p>\n<p id=\"6%E3%80%81%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:40px;\"><a href=\"#6%E3%80%81%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81\">6、前端代码</a></p>\n<p id=\"%E5%8D%81%E5%85%AD%E3%80%81%E5%AE%8C%E5%96%84%E5%88%A0%E9%99%A4%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%8D%81%E5%85%AD%E3%80%81%E5%AE%8C%E5%96%84%E5%88%A0%E9%99%A4%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD\">十六、完善删除音乐功能</a></p>\n<p id=\"1%E3%80%81%E5%9C%A8%20LoveMusicMapper%20%E6%8E%A5%E5%8F%A3%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:40px;\"><a href=\"#1%E3%80%81%E5%9C%A8%20LoveMusicMapper%20%E6%8E%A5%E5%8F%A3%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81\">1、在 LoveMusicMapper 接口中添加代码</a></p>\n<p id=\"2%E3%80%81LoveMusicMapper.xml%20%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81LoveMusicMapper.xml%20%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81\">2、LoveMusicMapper.xml 文件中添加代码</a></p>\n<p id=\"3%E3%80%81%E8%B0%83%E6%95%B4%20MusicController%20%E7%B1%BB%E4%B8%AD%E7%9A%84%20deleteMusicByMusicId%20%E5%92%8C%20deleteSelMusic%20%E6%96%B9%E6%B3%95-toc\" style=\"margin-left:40px;\"><a href=\"#3%E3%80%81%E8%B0%83%E6%95%B4%20MusicController%20%E7%B1%BB%E4%B8%AD%E7%9A%84%20deleteMusicByMusicId%20%E5%92%8C%20deleteSelMusic%20%E6%96%B9%E6%B3%95\">3、调整 MusicController 类中的 deleteMusicByMusicId 和 deleteSelMusic 方法</a></p>\n<p id=\"4%E3%80%81%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95-toc\" style=\"margin-left:40px;\"><a href=\"#4%E3%80%81%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95\">4、功能测试</a></p>\n<p id=\"1.%20%E6%9F%A5%E8%AF%A2%E5%B7%B2%E4%B8%8A%E4%BC%A0%E7%9A%84%E9%9F%B3%E4%B9%90-toc\" style=\"margin-left:80px;\"><a href=\"#1.%20%E6%9F%A5%E8%AF%A2%E5%B7%B2%E4%B8%8A%E4%BC%A0%E7%9A%84%E9%9F%B3%E4%B9%90\">1. 查询已上传的音乐</a></p>\n<p id=\"%C2%A02.%20%E6%9F%A5%E8%AF%A2%E5%B7%B2%E6%94%B6%E8%97%8F%E7%9A%84%E9%9F%B3%E4%B9%90-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A02.%20%E6%9F%A5%E8%AF%A2%E5%B7%B2%E6%94%B6%E8%97%8F%E7%9A%84%E9%9F%B3%E4%B9%90\"> 2. 查询已收藏的音乐</a></p>\n<p id=\"3.%20%E5%88%A0%E9%99%A4%E5%B7%B2%E4%B8%8A%E4%BC%A0%E7%9A%84%E9%9F%B3%E4%B9%90%EF%BC%88music%20%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%89-toc\" style=\"margin-left:80px;\"><a href=\"#3.%20%E5%88%A0%E9%99%A4%E5%B7%B2%E4%B8%8A%E4%BC%A0%E7%9A%84%E9%9F%B3%E4%B9%90%EF%BC%88music%20%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%89\">3. 删除已上传的音乐（music 表中的数据）</a></p>\n<p id=\"4.%20%E4%B8%8A%E4%BC%A0%E7%9A%84%E9%9F%B3%E4%B9%90%E5%88%A0%E9%99%A4%E5%90%8E%EF%BC%8C%E6%94%B6%E8%97%8F%E7%9A%84%E9%9F%B3%E4%B9%90%E4%B9%9F%E4%BC%9A%E8%A2%AB%E5%88%A0%E9%99%A4-toc\" style=\"margin-left:80px;\"><a href=\"#4.%20%E4%B8%8A%E4%BC%A0%E7%9A%84%E9%9F%B3%E4%B9%90%E5%88%A0%E9%99%A4%E5%90%8E%EF%BC%8C%E6%94%B6%E8%97%8F%E7%9A%84%E9%9F%B3%E4%B9%90%E4%B9%9F%E4%BC%9A%E8%A2%AB%E5%88%A0%E9%99%A4\">4. 上传的音乐删除后，收藏的音乐也会被删除</a></p>\n<hr id=\"hr-toc\"/>\n<h1><span style=\"color:#0d0016;\">一、项目截图</span></h1>\n<p><img alt=\"\" height=\"891\" src=\"..\\..\\static\\image\\9439698b51bc4a14b89cd6b8fedf171d.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"760\" src=\"..\\..\\static\\image\\37695452dd2c4abeafdc7001b53f0391.png\" width=\"1169\"/></p>\n<p><img alt=\"\" height=\"314\" src=\"..\\..\\static\\image\\d160b969673446e4b63843d5475ddf6b.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"369\" src=\"..\\..\\static\\image\\71c8eb6a55044981a7fe14e746e67115.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"925\" src=\"..\\..\\static\\image\\fffc5405833d4a66b59119350e0e6b3d.png\" width=\"1200\"/></p>\n<h1 id=\"%C2%A0%E4%BA%8C%E3%80%81%E5%88%9B%E5%BB%BA%20SpringBoot%20%E9%A1%B9%E7%9B%AE\"><span style=\"color:#0d0016;\">二、创建 SpringBoot 项目</span></h1>\n<h2 id=\"1%E3%80%81%E5%9C%A8%20IDEA%20%E4%B8%AD%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%20SpringBoot%20%E9%A1%B9%E7%9B%AE\"><span style=\"color:#0d0016;\">1、在 IDEA 中创建一个 SpringBoot 项目</span></h2>\n<p><img alt=\"\" height=\"998\" src=\"..\\..\\static\\image\\d47f9c81cb6b4e4281c64eac6d18c806.png\" width=\"984\"/></p>\n<h2 id=\"2%E3%80%81%E8%AE%BE%E7%BD%AE%E9%A1%B9%E7%9B%AE%E5%90%8D%E7%A7%B0\"><span style=\"color:#0d0016;\">2、设置项目名称</span></h2>\n<p><img alt=\"\" height=\"998\" src=\"..\\..\\static\\image\\d948bd1a9cf04ff28bcaf90688c2d8d0.png\" width=\"984\"/></p>\n<h2 id=\"3%E3%80%81%E9%80%89%E6%8B%A9%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96\"><span style=\"color:#0d0016;\">3、选择项目依赖</span></h2>\n<p><img alt=\"\" height=\"837\" src=\"..\\..\\static\\image\\035c27a99608473a84889edfbb0080a4.png\" width=\"1004\"/></p>\n<h2 id=\"4%E3%80%81%E9%80%89%E6%8B%A9%E9%A1%B9%E7%9B%AE%E5%AD%98%E6%94%BE%E8%B7%AF%E5%BE%84%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%88%9B%E5%BB%BA%E5%87%BA%E4%B8%80%E4%B8%AA%20SpringBoot%20%E9%A1%B9%E7%9B%AE\"><span style=\"color:#0d0016;\">4、选择项目存放路径，就可以创建出一个 SpringBoot 项目</span></h2>\n<p><img alt=\"\" height=\"998\" src=\"..\\..\\static\\image\\e4d416fa42624cc7952e2ee3e6d5c714.png\" width=\"984\"/></p>\n<h1 id=\"%E4%B8%89%E3%80%81%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8Cxml\"><span style=\"color:#0d0016;\">三、配置数据库和xml</span></h1>\n<h2 id=\"1%E3%80%81%E6%89%93%E5%BC%80application.properties\"><span style=\"color:#0d0016;\">1、打开application.properties</span></h2>\n<p><img alt=\"\" height=\"545\" src=\"..\\..\\static\\image\\e06b48c90c8c47e5b932ba94d9400d7e.png\" width=\"443\"/></p>\n<h2 id=\"2%E3%80%81%E9%85%8D%E7%BD%AE%E5%A6%82%E4%B8%8B%E4%BF%A1%E6%81%AF\">2、配置如下信息</h2>\n<pre><code class=\"language-R\">#配置数据库\nspring.datasource.url=jdbc:mysql://127.0.0.1:3306/onlinemusic?characterEncoding=utf8&amp;serverTimezone=UTC\nspring.datasource.username=你的用户名\nspring.datasource.password=你的密码\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n\n#配置xml\nmybatis.mapper-locations=classpath:mybatis/**Mapper.xml\n\n# 音乐上传后的路径\nmusic.local.path=E:/SaveMusic/(填写存放歌曲的路径)\n\n#配置springboot上传文件的大小，默认每个文件的配置最大为15Mb，单次请求的文件的总数不能大于100Mb\nspring.servlet.multipart.max-file-size = 15MB\nspring.servlet.multipart.max-request-size=100MB\n\n# 配置springboot日志调试模式是否开启\ndebug=true\n\n# 设置打印日志的级别，及打印sql语句\n#日志级别：trace,debug,info,warn,error\n#基本日志\nlogging.level.root=INFO\nlogging.level.com.example.onlinemusic.mapper=debug\n#扫描的包：druid.sql.Statement类和frank包\nlogging.level.druid.sql.Statement=DEBUG\nlogging.level.com.example=DEBUG</code></pre>\n<h1 id=\"%E5%9B%9B%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1\"><span style=\"color:#0d0016;\">四、数据库设计</span></h1>\n<p><img alt=\"\" height=\"682\" src=\"..\\..\\static\\image\\0d5ebad2baf34e69b9116d9a14fe9596.png\" width=\"946\"/></p>\n<pre><code class=\"language-sql\">-- 创建数据库\ndrop database if exists `onlinemusic`;\ncreate database if not exists `onlinemusic` character set utf8;\n-- 使用数据库\nuse `onlinemusic`;\n\n-- 用户表\nDROP TABLE IF EXISTS `user`;\nCREATE TABLE `user` (\n`userid` INT PRIMARY KEY AUTO_INCREMENT comment '用户id',\n`username` varchar(20) NOT NULL comment '用户名',\n`password` varchar(255) NOT NULL comment '密码'\n);\n\n-- 歌曲表\nDROP TABLE IF EXISTS `music`;\nCREATE TABLE `music` (\n`musicid` int PRIMARY KEY AUTO_INCREMENT comment '歌曲id',\n`title` varchar(50) NOT NULL comment '歌曲名称',\n`singer` varchar(30) NOT NULL comment '歌手',\n`time` varchar(13) NOT NULL comment '上传歌曲时间',\n`url` varchar(1000) NOT NULL comment '存放歌曲的路径',\n`userid` int(11) NOT NULL comment '上传歌曲的用户'\n);\n\n-- 歌曲收藏表\nDROP TABLE IF EXISTS `lovemusic`;\nCREATE TABLE `lovemusic` (\n`loveid` int PRIMARY KEY AUTO_INCREMENT comment '收藏歌曲的id',\n`user_id` int(11) NOT NULL comment '收藏歌曲的用户id',\n`music_id` int(11) NOT NULL comment '歌曲id'\n);</code></pre>\n<h1 id=\"%E4%BA%94%E3%80%81%E5%B7%A5%E5%85%B7%E5%8C%85\"><span style=\"color:#0d0016;\">五、工具包</span></h1>\n<blockquote>\n<p><span style=\"color:#0d0016;\">在 package com.example.musicserver 目录下创建一个 tools 包（工具包），在这个包中存放整个项目要使用的工具类。</span></p>\n</blockquote>\n<h2 id=\"1%E3%80%81ResponseBodyMessage%20%E7%B1%BB\"><span style=\"color:#0d0016;\">1、ResponseBodyMessage 类</span></h2>\n<blockquote>\n<ul><li><span style=\"color:#0d0016;\">设计统一的响应体工具类，因为做任何操作时都需要响应，所以封装一个通用的响应工具类，这个工具类设计成一个泛型类。</span></li></ul>\n</blockquote>\n<pre><code class=\"language-java\">package com.example.onlinemusic.tools;\n\nimport lombok.Data;\n\n@Data\npublic class ResponseBodyMessage &lt;T&gt;{\n    private int status; //状态码\n\n    private String message; // 返回的信息（出错的原因等）\n\n    private T data; // 返回给前端的数据（因为返回的数据类型不确定，可能是 String，boolea，int ...,因此使用泛型）\n\n    public ResponseBodyMessage(int status, String message, T data) {\n        this.status = status;\n        this.message = message;\n        this.data = data;\n    }\n}</code></pre>\n<h2 id=\"2%E3%80%81Constant%20%E7%B1%BB\"><span style=\"color:#0d0016;\">2、Constant 类</span></h2>\n<blockquote>\n<ul><li><span style=\"color:#0d0016;\">这个类用来存储不变的常量。 例如：设置 session 对象中的 key 值，key 是一个不变的字符串。</span></li><li><span style=\"color:#0d0016;\">如果在其他地方获取对应的 session 就可以通过这个类中的字符串进行获取。</span></li></ul>\n</blockquote>\n<pre><code class=\"language-java\">package com.example.onlinemusic.tools;\n\npublic class Constant {\n    public static final String USER_SESSION_KEY= \"USERINFO_SESSION_KEY\"; // 设置 session 中的 key 值\n}</code></pre>\n<h2 id=\"3%E3%80%81%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86\"><span style=\"color:#0d0016;\">3、数据加密</span></h2>\n<h3 id=\"1.%20MD5%20%E5%8A%A0%E5%AF%86\"><span style=\"color:#0d0016;\">1. MD5 加密</span></h3>\n<p><span style=\"color:#0d0016;\">MD5是一个安全的散列算法，输入两个不同的明文不会得到相同的输出值，根据输出值，不能得到原始的明文，即其过程不可逆； 但是虽然不可逆，但是不是说就是安全的。因为自从出现彩虹表后，这样的密码也\"不安全\"。</span></p>\n<blockquote>\n<ul><li><span style=\"color:#0d0016;\">彩虹表：彩虹表就是一个庞大的、针对各种可能的字母组合预先计算好的哈希值的集合，不一定是针对MD5算法的，各种算法的都有，有了它可以快速的破解各类密码。越是复杂的密码，需要的彩虹表就越大，现在主流的彩虹表都是100G以上。</span></li></ul>\n</blockquote>\n<p><span style=\"color:#0d0016;\">更安全的做法是加盐或者长密码等做法，让整个加密的字符串变的更长，破解时间变慢。密码学的应用安全，是建立在破解所要付出的成本远超出能得到的利益上的。</span></p>\n<blockquote>\n<ul><li><span style=\"color:#0d0016;\">加盐的做法：盐是在每个密码中加入一些单词来变成一个新的密码，存入数据库当中。</span></li></ul>\n</blockquote>\n<h3 id=\"MD5%20%E7%9A%84%E4%BD%BF%E7%94%A8\"><span style=\"color:#0d0016;\">MD5 的使用</span></h3>\n<p><span style=\"color:#0d0016;\">（1）在 pom.xml 文件中添加依赖（添加到 &lt;dependencies&gt; &lt;/dependencies&gt; 标签内）</span></p>\n<pre><code class=\"language-XML\">&lt;!-- md5 依赖 --&gt;\n&lt;dependency&gt;\n\t&lt;groupId&gt;commons-codec&lt;/groupId&gt;\n\t&lt;artifactId&gt;commons-codec&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n\t&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;\n\t&lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;\n\t&lt;version&gt;3.9&lt;/version&gt;\n&lt;/dependency&gt;</code></pre>\n<p><span style=\"color:#0d0016;\">（2）在 tools 包中创建 MD5Util 类</span></p>\n<pre><code class=\"language-java\">package com.example.onlinemusic.tools;\n\nimport org.apache.commons.codec.digest.DigestUtils;\n\npublic class MD5Util {\n    // 定义一个固定的盐值\n    private static final String salt = \"1j2a3v4a5\"; // 盐值可以自定义\n\n    public static String md5(String src) {\n        return DigestUtils.md5Hex(src);\n    }\n\n    /**\n     * 第一次加密 ：模拟前端自己加密，然后传到后端\n     *\n     * @param inputPass\n     * @return\n     */\n    public static String inputPassToFormPass(String inputPass) {\n        String str = \"\" + salt.charAt(1) + salt.charAt(3) + inputPass\n                + salt.charAt(5) + salt.charAt(6);\n        return md5(str);\n    }\n\n    /**\n     * 第2次MD5加密\n     *\n     * @param formPass 前端加密过的密码，传给后端进行第2次加密\n     * @param salt     用户数据库当中的盐值\n     * @return\n     */\n    public static String formPassToDBPass(String formPass, String salt) {\n        String str = \"\" + salt.charAt(0) + salt.charAt(2) + formPass + salt.charAt(5)\n                + salt.charAt(4);\n        return md5(str);\n    }\n\n    /**\n     * 上面两个函数合到一起进行调用\n     *\n     * @param saltDB\n     * @return\n     * @paraminputPass\n     */\n    public static String inputPassToDbPass(String inputPass, String saltDB) {\n        String formPass = inputPassToFormPass(inputPass);\n        String dbPass = formPassToDBPass(formPass, saltDB);\n        return dbPass;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"对用户输入密码进行第1次加密：\" + inputPassToFormPass(\"123456\"));\n        System.out.println(\"对用户输入密码进行第2次加密：\" + formPassToDBPass(inputPassToFormPass(\"123456\"), salt));\n        System.out.println(\"对用户输入密码进行第2次加密：\" + inputPassToDbPass(\"123456\", salt));\n    }\n}</code></pre>\n<p><span style=\"color:#0d0016;\">运行结果</span></p>\n<p><img alt=\"\" height=\"223\" src=\"..\\..\\static\\image\\4df5a24e4fe04cab801dda75609fcc04.png\" width=\"773\"/></p>\n<blockquote>\n<p><span style=\"color:#0d0016;\">不管运行多少次，这个密码是规定的。因为这里没有用随机盐值。当密码长度很大，盐值也是随机的情况下，密码的强度也加大了。破解成本也增加了。</span></p>\n</blockquote>\n<h3 id=\"2.%20BCrypt%20%E5%8A%A0%E5%AF%86\"><span style=\"color:#0d0016;\">2. BCrypt 加密</span></h3>\n<blockquote>\n<ul><li><span style=\"color:#0d0016;\">Bcrypt 就是一款加密工具，可以比较方便地实现数据的加密工作。也可以简单理解为它内部自己实现了随机加盐处理 。</span></li><li><span style=\"color:#0d0016;\">使用MD5加密，每次加密后的密文其实都是一样的，这样就方便了MD5通过大数据的方式进行破解。</span></li><li><span style=\"color:#0d0016;\">Bcrypt生成的密文是60位的，而MD5的是32位的，因此 Bcrypt 破解难度更大。</span></li></ul>\n</blockquote>\n<h3 id=\"Bcrypt%20%E7%9A%84%E4%BD%BF%E7%94%A8\"><span style=\"color:#0d0016;\">Bcrypt 的使用</span></h3>\n<p><span style=\"color:#0d0016;\">（1）在 pom.xml 文件中添加依赖（添加到 &lt;dependencies&gt; &lt;/dependencies&gt; 标签内）</span></p>\n<pre><code class=\"language-XML\">&lt;!-- security依赖包 （加密）--&gt;\n&lt;dependency&gt;\n\t&lt;groupId&gt;org.springframework.security&lt;/groupId&gt;\n\t&lt;artifactId&gt;spring-security-web&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n\t&lt;groupId&gt;org.springframework.security&lt;/groupId&gt;\n\t&lt;artifactId&gt;spring-security-config&lt;/artifactId&gt;\n&lt;/dependency&gt;</code></pre>\n<p><span style=\"color:#0d0016;\">（2）在springboot启动类添加下面的内容</span></p>\n<pre><code class=\"language-XML\">@SpringBootApplication(exclude =\n\t\t{org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration.class})</code></pre>\n<p><span style=\"color:#0d0016;\">（3）在 tools 包中创建 BCryptTest 测试类</span></p>\n<pre><code class=\"language-java\">package com.example.onlinemusic.tools;\n\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n\npublic class BCryptTest {\n    public static void main(String[] args) {\n        //模拟从前端获得的密码\n        String password = \"123456\";\n        BCryptPasswordEncoder bCryptPasswordEncoder = new BCryptPasswordEncoder();\n        String newPassword = bCryptPasswordEncoder.encode(password);\n        System.out.println(\"加密的密码为: \"+newPassword);\n\n         //使用matches方法进行密码的校验\n        boolean same_password_result = bCryptPasswordEncoder.matches(password,newPassword);\n\n        //返回true\n        System.out.println(\"加密的密码和正确密码对比结果: \"+same_password_result);\n        boolean other_password_result = bCryptPasswordEncoder.matches(\"987654\",newPassword);\n\n        //返回false\n        System.out.println(\"加密的密码和错误的密码对比结果: \" + other_password_result);\n    }\n}\n</code></pre>\n<p><span style=\"color:#0d0016;\">运行结果（每次运行的生成的密码都不一样）</span></p>\n<p><img alt=\"\" height=\"232\" src=\"..\\..\\static\\image\\10cc085abdc3493c9c07216662d30701.png\" width=\"940\"/></p>\n<blockquote>\n<ul><li><span style=\"color:#0d0016;\">encode方法：对用户密码进行加密。</span></li><li><span style=\"color:#0d0016;\">matches方法：参数一，待检验的未加密的密码 。参数二：从数据库中查询出的加密后密码 。</span></li></ul>\n</blockquote>\n<h3 id=\"3.%20BCrypt%E5%8A%A0%E5%AF%86%E4%B8%8EMD5%E5%8A%A0%E5%AF%86%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9A\"><span style=\"color:#0d0016;\">3. BCrypt加密与MD5加密的区别：</span></h3>\n<blockquote>\n<ul><li><span style=\"color:#0d0016;\">BCrypt加密： 一种加盐的单向Hash，不可逆的加密算法，同一种明文（plaintext），每次加密后的密文都不一样，而且不可反向破解生成明文，破解难度很大。</span></li><li><span style=\"color:#0d0016;\">MD5加密： 是不加盐的单向Hash，不可逆的加密算法，同一个密码经过hash的时候生成的是同一个hash值，在大多数的情况下，有些经过md5加密的方法将会被破解。</span></li><li><span style=\"color:#0d0016;\">Bcrypt生成的密文是60位的。而MD5的是32位的。</span></li><li><span style=\"color:#0d0016;\">目前，MD5和BCrypt比较流行。相对来说，BCrypt比MD5更安全，但加密更慢。</span></li><li><span style=\"color:#0d0016;\">虽然BCrpyt也是输入的字符串+盐，但是与MD5+盐的主要区别是：每次加的盐不同（BCrpyt 中的盐值是随即生成的），导致每次生成的结果也不相同。无法比对！</span></li></ul>\n</blockquote>\n<h1 id=\"%E5%85%AD%E3%80%81%E9%85%8D%E7%BD%AE%E6%8B%A6%E6%88%AA%E5%99%A8\"><span style=\"color:#0d0016;\">六、配置拦截器</span></h1>\n<ul><li><span style=\"color:#0d0016;\">未登录的情况下拦截其他页面，登录成功后才可以访问其他界面</span></li></ul>\n<h2 id=\"1%E3%80%81%E5%88%9B%E5%BB%BA%20config%20%E5%8C%85%EF%BC%8C%E5%9C%A8%20config%20%E5%8C%85%E4%B8%AD%E5%88%9B%E5%BB%BA%20LoginInterceptor%20%E7%B1%BB\"><span style=\"color:#0d0016;\">1、创建 config 包，在 config 包中创建 LoginInterceptor 类</span></h2>\n<pre><code class=\"language-java\">package com.example.onlinemusic.config;\n\nimport com.example.onlinemusic.tools.Constant;\nimport com.example.onlinemusic.tools.ResponseBodyMessage;\nimport org.springframework.web.servlet.HandlerInterceptor;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\npublic class LoginInterceptor implements HandlerInterceptor {\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        HttpSession session = request.getSession(false);\n        if(session == null || session.getAttribute(Constant.USER_SESSION_KEY)==null){\n            return false;\n        }\n        return true;\n    }\n}\n</code></pre>\n<h2 id=\"2%E3%80%81%E5%9C%A8%20config%20%E5%8C%85%E4%B8%AD%E5%88%9B%E5%BB%BA%20AppConfig%20%E7%B1%BB\"><span style=\"color:#0d0016;\">2、在 config 包中创建 AppConfig 类</span></h2>\n<pre><code class=\"language-java\">package com.example.onlinemusic.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class AppConfig implements WebMvcConfigurer {\n\n    @Bean\n    public BCryptPasswordEncoder getBCryptPasswordEncoder(){\n        return  new BCryptPasswordEncoder();\n    }\n\n    /**\n     * 添加拦截器\n     * @param registry\n     */\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        // 登录之后才可以访问其他页面\n        LoginInterceptor loginInterceptor = new LoginInterceptor();\n        registry.addInterceptor(loginInterceptor).\n                // 拦截所有的\n                addPathPatterns(\"/**\")\n                //排除所有的JS\n                .excludePathPatterns(\"/js/**.js\")\n                //排除images下所有的元素\n                .excludePathPatterns(\"/images/**\")\n                .excludePathPatterns(\"/css/**.css\")\n                .excludePathPatterns(\"/fronts/**\")\n                .excludePathPatterns(\"/player/**\")\n                .excludePathPatterns(\"/login.html\")\n                .excludePathPatterns(\"/register.html\")\n                //排除登录和注册接口\n                .excludePathPatterns(\"/user/login\")\n                .excludePathPatterns(\"/user/register\");\n    }\n}</code></pre>\n<h1 id=\"%E4%B8%83%E3%80%81%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E6%A8%A1%E5%9D%97\"><span style=\"color:#0d0016;\">七、实现登录模块</span></h1>\n<h2 id=\"1%E3%80%81%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%AE%BE%E8%AE%A1\"><span style=\"color:#0d0016;\">1、登录功能的请求和响应设计</span></h2>\n<pre><code class=\"language-javascript\">请求：\n{\n  post, // 使用 post 请求\n  /user/login // 请求路径\n  data:{ username, password } // 传入的数据\n}\n\n响应：\n{\n  \"status\": 200,\n   \"message\": \"登录成功\",\n   \"data\": {\n             \"id\": xxxxx,\n             \"username\": xxxxxx,\n             \"password\": xxxxxxxx\n   }\n\n}\n\n响应设计字段解释：\n{\n  状态码为 200 表示成功，-200表示失败\n  状态描述信息，描述此次请求成功或者失败的原因\n  返回的数据，请求成功后，需要给前端的数据信息（返回用户id，用户名）\n} </code></pre>\n<h2 id=\"2%E3%80%81%E5%88%9B%E5%BB%BA%20User%20%E7%B1%BB\"><span style=\"color:#0d0016;\">2、创建 User 类</span></h2>\n<ul><li><span style=\"color:#0d0016;\">在 package com.example.musicserver.model 包中创建User类</span></li></ul>\n<pre><code class=\"language-java\">package com.example.onlinemusic.model;\n\nimport lombok.Data;\n\n@Data\npublic class User {\n    private int userId; // 用户id\n    private String username; // 用户名\n    private String password; // 密码\n}</code></pre>\n<h2 id=\"3%E3%80%81%E5%88%9B%E5%BB%BA%E5%AF%B9%E5%BA%94%E7%9A%84%20Mapper%20%E5%92%8C%20Controller\"><span style=\"color:#0d0016;\">3、创建对应的 Mapper 和 Controller</span></h2>\n<h3 id=\"1.%20%E5%88%9B%E5%BB%BA%E6%8E%A5%E5%8F%A3%20UserMapper\"><span style=\"color:#0d0016;\">1. 创建接口 UserMapper</span></h3>\n<ul><li> <p><span style=\"color:#0d0016;\">在 package com.example.musicserver.mapper 包中创建 UserMapper 接口</span></p> </li></ul>\n<pre><code class=\"language-java\">package com.example.onlinemusic.mapper;\n\nimport com.example.onlinemusic.model.User;\nimport org.apache.ibatis.annotations.Mapper;\n\n@Mapper\npublic interface UserMapper {\n    User login(User loginUser);\n}</code></pre>\n<h3 id=\"2.%20%E5%88%9B%E5%BB%BA%20UserMapper.xml\"><span style=\"color:#0d0016;\">2. 创建 UserMapper.xml</span></h3>\n<ul><li><span style=\"color:#0d0016;\">在resource目录下，新建 mybatis 文件夹，新建 UserMapper.xml，在 UserMapper.xml 文件中添加配置。</span></li></ul>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;\n&lt;mapper namespace=\"com.example.onlinemusic.mapper.UserMapper\"&gt;\n    &lt;select id=\"login\" resultType=\"com.example.onlinemusic.model.User\"&gt;\n        select * from user where username=#{username} and password=#{password}\n    &lt;/select&gt;\n\n    &lt;select id=\"selectByName\" resultType=\"com.example.onlinemusic.model.User\"&gt;\n        select * from user where username=#{username};\n    &lt;/select&gt;\n\n&lt;/mapper&gt;</code></pre>\n<h2 id=\"4%E3%80%81%E5%9C%A8%20UserMapper%20%E6%8E%A5%E5%8F%A3%E4%B8%AD%E6%96%B0%E5%A2%9E%20selectByName%20%E6%96%B9%E6%B3%95\"><span style=\"color:#0d0016;\">4、在 UserMapper 接口中新增 selectByName 方法</span></h2>\n<pre><code class=\"language-java\">// 通过用户名查询用户是否存在（用户名是唯一的）\nUser selectByName(String username); </code></pre>\n<h2 id=\"5%E3%80%81%E5%88%9B%E5%BB%BA%20UserController%20%E7%B1%BB\"><span style=\"color:#0d0016;\">5、创建 UserController 类</span></h2>\n<ul><li><span style=\"color:#0d0016;\">在 package com.example.musicserver.controller 包下，创建 UserController 类</span></li></ul>\n<pre><code class=\"language-java\">package com.example.onlinemusic.controller;\n\nimport com.example.onlinemusic.mapper.UserMapper;\nimport com.example.onlinemusic.model.User;\nimport com.example.onlinemusic.tools.Constant;\nimport com.example.onlinemusic.tools.ResponseBodyMessage;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.servlet.http.HttpServletRequest;\n\n@RestController\n@RequestMapping(\"/user\")\npublic class UserController {\n    @Autowired\n    private UserMapper userMapper;\n\n    // 使用 BCrypt 对密码进行加密\n    @Autowired\n    private BCryptPasswordEncoder bCryptPasswordEncoder;\n\n    @RequestMapping(\"/login\")\n    // 传入用户名和密码\n    public ResponseBodyMessage&lt;User&gt; login(@RequestParam String username, @RequestParam String password, HttpServletRequest request){\n\n        // 调用 UserMapper 接口\n        User user = userMapper.selectByName(username);\n\n        // 判断是否登录成功\n        if(user != null){\n            System.out.println(\"登录成功\"); // 可以在控制台中打印登录信息\n\n            // 判断当前用户输入的密码(password) 与 数据库中查询到的密码(加密的密码，getPassword())是否匹配\n            boolean flag = bCryptPasswordEncoder.matches(password,user.getPassword());\n\n            if(!flag){\n                // 密码不匹配，登录失败\n                return new ResponseBodyMessage&lt;&gt;(-200,\"用户名或密码错误\",user);\n            }\n\n            // 如果登录成功就将信息写入到 session 中（在 session 中存储了一个用户信息对象,此后可以随时从 session 中将这个对象取出来进行一些操作）\n            request.getSession().setAttribute(Constant.USER_SESSION_KEY,user);\n            // 状态码为200,表示登录成功,并返回用户信息\n            return   new ResponseBodyMessage&lt;&gt;(200,\"登录成功\",user);\n        }else{\n            System.out.println(\"登录失败\");\n            // 状态码为500,表示登录失败,并返回用户信息\n            return   new ResponseBodyMessage&lt;&gt;(-200,\"用户名或密码错误\",user);\n\n        }\n    }\n}</code></pre>\n<h2 id=\"6%E3%80%81%E7%99%BB%E5%BD%95%E6%88%90%E5%8A%9F%E6%B5%8B%E8%AF%95\"><span style=\"color:#0d0016;\">6、登录成功测试</span></h2>\n<ul><li> <p><span style=\"color:#0d0016;\">在数据库中插入一条数据，启动项目，使用 postman 进行测试。</span></p> </li></ul>\n<p><img alt=\"\" height=\"837\" src=\"..\\..\\static\\image\\09ec75bd679d47ba9382d3c4304a99cf.png\" width=\"1200\"/></p>\n<h2 id=\"7%E3%80%81%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81\"><span style=\"color:#0d0016;\">7、前端代码</span></h2>\n<pre><code class=\"language-javascript\">    &lt;script&gt;\n        $(function(){\n            $(\"#submit\").click(function(){\n                // 点击登录按钮，获取用户名和密码\n                var username = $(\"#username\").val();\n                var password = $(\"#password\").val();\n\n                // 判断用户名和密码是否为空(使用 trim 方法，防止输入空格)\n                if(username.trim() == \"\" || password.trim() == \"\"){\n                    alert(\"账号或密码不能为空\");\n                    return;\n                }\n                // 如果用户名和密码不为空，使用 Ajax 传入请求\n                $.ajax({\n                    type:\"POST\",\n                    url:\"/user/login\",\n                    data:{\n                            \"username\":username,\n                            \"password\":password\n                    },\n                    // 服务器返回的数据类型\n                    dataType:\"json\",\n                    // 请求成功，服务器返回数据\n                    success:function(data){\n                        console.log(data);\n                        // 如果状态码为 200，表示登录成功\n                        if(data.status == 200){\n                            alert(\"登录成功\");\n                            // 跳转到指定页面\n                            window.location.href=\"list.html\";\n                        }else{\n                            alert(\"登录失败，账号或密码错误\");\n                            // 登录失败，将用户名或密码置空\n                            $(\"#username\").val(\"\");\n                            $(\"#password\").val(\"\");\n                        }\n                    }\n                });\n            });\n        });\n\n        $(function () {\n\t\t\t  $(\"#register\").click(function () {\n\t\t\t\t  window.location.href=\"register.html\";\n              });\n          });\n\n    &lt;/script&gt;</code></pre>\n<h1 id=\"%E5%85%AB%E3%80%81%E5%AE%9E%E7%8E%B0%E6%B3%A8%E5%86%8C%E6%A8%A1%E5%9D%97\"><span style=\"color:#0d0016;\">八、实现注册模块</span></h1>\n<h2 id=\"1%E3%80%81%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%AE%BE%E8%AE%A1\"><span style=\"color:#0d0016;\">1、注册功能的请求和响应设计</span></h2>\n<pre><code class=\"language-javascript\">请求：\n{\n  post, // 使用 post 请求\n  /user/register // 请求路径\n  data:{ username, password } // 传入的数据\n}\n\n响应：\n{\n  \"status\": 200,\n   \"message\": \"注册成功\",\n   \"data\": {\n             \"id\": xxxxx,\n             \"username\": xxxxxx,\n             \"password\": xxxxxxxx\n   }\n\n}\n\n响应设计字段解释：\n{\n  状态码为 200 表示成功，-200表示失败\n  状态描述信息，描述此次请求成功或者失败的原因\n  返回的数据，请求成功后，需要给前端的数据信息（返回用户id，用户名）\n} </code></pre>\n<h2 id=\"2%E3%80%81%E5%9C%A8%20UserMapper%20%E6%8E%A5%E5%8F%A3%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95\"><span style=\"color:#0d0016;\">2、在 UserMapper 接口新增方法</span></h2>\n<pre><code class=\"language-java\">    // 输入用户名和密码，注册账号\n    boolean insertInToValues(String username,String password);</code></pre>\n<h2 id=\"3%E3%80%81UserMapper.xml%20%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81\"><span style=\"color:#0d0016;\">3、UserMapper.xml 文件中添加代码</span></h2>\n<pre><code class=\"language-XML\">    &lt;insert id=\"insertInToValues\" &gt;\n        insert into user(username,password)\n        values(#{username},#{password});\n    &lt;/insert&gt;</code></pre>\n<h2 id=\"4%E3%80%81%E5%9C%A8%20UserController%20%E7%B1%BB%E4%B8%AD%E6%B7%BB%E5%8A%A0%20register%20%E6%96%B9%E6%B3%95\"><span style=\"color:#0d0016;\">4、在 UserController 类中添加 register 方法</span></h2>\n<pre><code class=\"language-java\">    /**\n     * 用户注册\n     * @param username\n     * @param password\n     * @return\n     */\n    @RequestMapping(\"/register\")\n    public ResponseBodyMessage&lt;Boolean&gt; register(@RequestParam String username,@RequestParam String password) {\n        User user1 = userMapper.selectByName(username);\n        if(user1 != null) {\n            return new ResponseBodyMessage&lt;&gt;(-1,\"当前用户已经存在\",false);\n        }else {\n            String newPassword = bCryptPasswordEncoder.encode(password);\n            boolean flag = userMapper.insertInToValues(username,newPassword);\n            if(flag == true){\n                return new ResponseBodyMessage&lt;&gt;(200,\"注册成功\",true);\n            }else{\n                return new ResponseBodyMessage&lt;&gt;(-200,\"注册失败\",false);\n            }\n        }\n    }</code></pre>\n<h2 id=\"5%E3%80%81%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95\"><span style=\"color:#0d0016;\">5、注册功能测试</span></h2>\n<p><img alt=\"\" height=\"596\" src=\"..\\..\\static\\image\\816c5ebb803d495e809781dbd0091f1d.png\" width=\"1200\"/></p>\n<h2 id=\"6%E3%80%81%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81\"><span style=\"color:#0d0016;\">6、前端代码</span></h2>\n<pre><code class=\"language-javascript\">    &lt;script&gt;\n        $(function(){\n            $(\"#register\").click(function(){\n                var username = $(\"#username\").val();\n                var password = $(\"#password\").val();\n                $.ajax({\n                 url: \"/user/register\",\n                 type: \"POST\",\n                 data:{\n                        \"username\":username,\n                        \"password\":password\n                    },\n                dataType:\"json\",\n                 success: function(data){\n                     console.log(data);\n                     if(data.status == 200) {\n                        alert(\"注册成功\");\n                        window.location.href=\"login.html\";\n                     }else{\n                        alert(\"注册失败\");\n                        $(\"#username\").val(\"\");\n                        $(\"#password\").val(\"\");\n                        $(\"#repassword\").val(\"\");\n                     }\n                 }\n             })\n            })\n        });\n    &lt;/script&gt;</code></pre>\n<h1 id=\"%E4%B9%9D%E3%80%81%E5%AE%9E%E7%8E%B0%E4%B8%8A%E4%BC%A0%E9%9F%B3%E4%B9%90%E6%A8%A1%E5%9D%97\"><span style=\"color:#0d0016;\">九、实现上传音乐模块</span></h1>\n<h2 id=\"1%E3%80%81%E4%B8%8A%E4%BC%A0%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%AE%BE%E8%AE%A1\"><span style=\"color:#0d0016;\">1、上传音乐功能的请求和响应设计</span></h2>\n<pre><code class=\"language-javascript\">请求：\n{\n    post, // 使用 post 请求\n    /music/upload // 请求路径\n    {singer，MultipartFile file}，//上传歌手，歌曲文件\n} \n\n响应：\n{\n    \"status\": 200, \n    \"message\": \"上传成功！\",\n    \"data\": true\n}\n\n响应设计字段解释：\n{\n  状态码为 200 表示成功，-200 表示失败\n  状态描述信息，描述此次请求成功或者失败的原因\n  返回的数据，请求成功后，需要给前端的数据信息，true 表示上传成功，false 表示上传失败\n} </code></pre>\n<h2 id=\"2%E3%80%81%E5%88%9B%E5%BB%BA%20Music%20%E7%B1%BB\"><span style=\"color:#0d0016;\">2、创建 Music 类</span></h2>\n<ul><li><span style=\"color:#0d0016;\">在 package com.example.musicserver.model 包中创建 Music 类</span></li></ul>\n<pre><code class=\"language-java\">package com.example.onlinemusic.model;\n\nimport lombok.Data;\n\n@Data\npublic class Music {\n    private int musicId; // 歌曲id\n    private String title; // 歌曲名称\n    private String singer; //歌手\n    private String time; // 上传歌曲的时间\n    private String url; // 上传歌曲的路径\n    private int userId; // 上传歌曲的用户\n}</code></pre>\n<h2 id=\"3%E3%80%81%E5%88%9B%E5%BB%BA%E6%8E%A5%E5%8F%A3%20MusicMapper\"><span style=\"color:#0d0016;\">3、创建接口 MusicMapper</span></h2>\n<ul><li><span style=\"color:#0d0016;\">在 package com.example.musicserver.mapper 包中创建 MusicMapper接口</span></li></ul>\n<pre><code class=\"language-java\">package com.example.onlinemusic.mapper;\n\nimport org.apache.ibatis.annotations.Mapper;\n\n@Mapper\npublic interface MusicMapper {\n    /**\n     *  插入音乐\n     * @param title\n     * @param singer\n     * @param time\n     * @param url\n     * @param userId\n     * @return\n     */\n    int insert(String title,String singer,String time,String url,int userId);\n\n    /**\n     *  查询歌曲名\n     * @param title\n     * @return\n     */\n    List&lt;Music&gt; selectBytitle(String title);\n}</code></pre>\n<h2 id=\"4%E3%80%81%E5%88%9B%E5%BB%BA%20MusicMapper.xml\"><span style=\"color:#0d0016;\">4、创建 MusicMapper.xml</span></h2>\n<ul><li><span style=\"color:#0d0016;\">在 package resources.mybatis 下创建 MusicMapper.xml 文件，在 MusicMapper.xml 文件中添加配置。</span></li></ul>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;\n&lt;mapper namespace=\"com.example.onlinemusic.mapper.UserMapper\"&gt;\n\n    &lt;insert id=\"insert\"&gt;\n        insert into music(title,singer,time,url,userId)\n        values(#(title),#(singer),#(time),#(url),#(userId));\n    &lt;/insert&gt;\n\n    &lt;select id=\"selectBytitle\" resultType=\"com.example.onlinemusic.model.Music\"&gt;\n        select * from music where title = #{title};\n    &lt;/select&gt;\n\n&lt;/mapper&gt;</code></pre>\n<h2 id=\"5%E3%80%81%E5%88%9B%E5%BB%BA%20MusicController%20%E7%B1%BB\"><span style=\"color:#0d0016;\">5、创建 MusicController 类</span></h2>\n<ul><li><span style=\"color:#0d0016;\">在 package com.example.musicserver.controller 包下，创建 MusicController 类</span></li></ul>\n<pre><code class=\"language-java\">package com.example.onlinemusic.controller;\n\nimport com.example.onlinemusic.mapper.LoveMusicMapper;\nimport com.example.onlinemusic.mapper.MusicMapper;\nimport com.example.onlinemusic.model.Music;\nimport com.example.onlinemusic.model.User;\nimport com.example.onlinemusic.tools.Constant;\nimport com.example.onlinemusic.tools.ResponseBodyMessage;\nimport org.apache.ibatis.binding.BindingException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.List;\n\n\n@RestController\n@RequestMapping(\"/music\")\npublic class MusicController {\n\n    // 在配置文件中添加歌曲路径\n    @Value(\"${music.local.path}\")\n    private String SAVE_PATH;\n\n    @Autowired\n    private MusicMapper musicMapper;\n\n    @Autowired\n    private LoveMusicMapper loveMusicMapper;\n\n    /**\n     *  上传音乐\n     *  请求路径：/music/upload\n     * @param singer 上传歌手\n     * @param file 上传歌曲\n     * @param request 请求，验证是否登录\n     * @return 返回true表示上传成功，返回false表示上传失败\n     */\n    @RequestMapping(\"/upload\")\n    public ResponseBodyMessage&lt;Boolean&gt; insertMusic(@RequestParam String singer, @RequestParam (\"filename\")MultipartFile file, HttpServletRequest request, HttpServletResponse response){\n\n        // 1. 检查是否登录\n        HttpSession session = request.getSession(false);\n        if(session == null || session.getAttribute(Constant.USER_SESSION_KEY)==null){\n            System.out.println(\"没有登录\");\n            return  new ResponseBodyMessage&lt;&gt;(-200,\"请登录后再进行上传\",false);\n        }\n\n        // 2. 获取的是文件的完整名称，包括文件名称+文件拓展名\n        String fileNameAndType = file.getOriginalFilename();\n\n        // 3. 查询数据库中是否存在当前要上传的音乐（歌曲名+歌手）\n        /**\n         *  获取标题（标题不包含后缀.mp3）\n         *  使用 lastIndexOf 从后向前找第一个 .\n         */\n        int index = fileNameAndType.lastIndexOf(\".\");\n        String title = fileNameAndType.substring(0,index);\n\n        // 使用 list 存放歌曲，获取歌曲名\n        List&lt;Music&gt; list = musicMapper.selectBytitle(title);\n        if(list != null){\n            for(Music music : list){\n                // 判断当前上传的歌曲+歌手在数据库中是否存在，如果存在则上传失败（歌曲名+歌手 不能重复）\n                if(music.getSinger().equals(singer)){\n                    return new ResponseBodyMessage&lt;&gt;(-200,\"上传失败，数据库中存在此歌曲，不能重复上传\",false);\n                }\n            }\n        }\n\n        // 2. 数据上传到服务器\n\n        // 上传文件路径\n        String path = SAVE_PATH+fileNameAndType;\n\n        // 上传文件\n        File dest = new File(path);\n        if(!dest.exists()){\n            //如果路径不存在就创建目录\n            dest.mkdir();\n        }\n        try {\n            // 将接收到的文件传输到给定目标路径\n            file.transferTo(dest);\n        } catch (IOException e) {\n            e.printStackTrace();\n            return new ResponseBodyMessage&lt;&gt;(-200,\"上传失败，服务器出现问题\",false);\n        }\n\n        // 3. 判断上传的文件是否为mp3文件（判断是否存在 TAG 字符）\n        File file1 = new File(path);\n        byte[] bytes = null;\n        try {\n            bytes = Files.readAllBytes(file1.toPath());\n            if(bytes == null){\n                return new ResponseBodyMessage&lt;&gt;(-200,\"上传失败，文件不存在\",false);\n            }\n            String str = new String(bytes);\n            if(!str.contains(\"TAG\")){\n                file1.delete();\n                return new ResponseBodyMessage&lt;&gt;(-200,\"上传的文件不是mp3文件\",false);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n            return new ResponseBodyMessage&lt;&gt;(-200,\"上传失败，服务器出现问题\",false);\n        }\n\n        // 4. 将数据上传到数据库中（1. 准备数据      2. 调用 insert）\n\n\n        /**\n         *  获取 userId\n         * 登录成功后将用户信息写到 session 中，通过 session 中key值(Constant.USERINFO) 就可以获取到对应的 value 值(用户信息)\n         */\n        User user = (User)session.getAttribute(Constant.USER_SESSION_KEY);\n        // 获取用户Id\n        int userId = user.getUserId();\n\n        /**\n         *  url 的作用： 播放音乐-&gt;发送 http 请求\n         */\n        String url = \"/music/get?path=\"+title; // 将 url 存入数据库时不用加后缀 .mp3，在取数据的时候加一个后缀就可以了\n\n        /**\n         *  获取上传的时间\n         *  将获取的时间格式化为：年-月-日 的形式\n         */\n        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n        String time = simpleDateFormat.format(new Date());\n\n        // 插入数据\n        try {\n            int ret = musicMapper.insert(title,singer,time,url,userId);\n            if(ret == 1){\n                // 数据插入成功\n                // 这里应该跳转到音乐列表页面\n                response.sendRedirect(\"/list.html\");\n                return new ResponseBodyMessage&lt;&gt;(200,\"数据库上传成功\",true);\n            }else{\n                // 数据插入失败\n                return new ResponseBodyMessage&lt;&gt;(-200,\"数据库上传失败\",false);\n            }\n        }catch (BindingException | IOException e){\n            // 数据库上传失败，将上传到文件夹中的数据删除\n            dest.delete();\n            e.printStackTrace();\n            return new ResponseBodyMessage&lt;&gt;(-200,\"数据库上传失败\",false);\n        }\n    }\n\n    /**\n     *  播放音乐\n     *  请求路径：/music/get?get=xxx.mp3\n     * @param path\n     * @return\n     */\n        @RequestMapping(\"/get\")\n        public ResponseEntity&lt;byte[]&gt; playMusic(@RequestParam String path) {\n        File file = new File(SAVE_PATH+path);\n        byte[] bytes = null;\n            try {\n                bytes  = Files.readAllBytes(file.toPath()); // 将文件路径中的文件以字节的形式读取，放到 bytes 数组中\n                if(bytes == null){\n                    // 如果没有读取的文件，则返回状态码 400\n                    return ResponseEntity.badRequest().build();\n                }\n                // 成功读取到文件\n                return ResponseEntity.ok(bytes);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            // 如果没有读取的文件，则返回状态码 400\n            return ResponseEntity.badRequest().build();\n    }\n\n    /**\n     * 删除单个音乐\n     * 请求路径：/music/delete?musicId=x\n     * @param musicId\n     * @return\n     */\n    @RequestMapping(\"/delete\")\n    public ResponseBodyMessage&lt;Boolean&gt; deleteMusicByMusicId(@RequestParam String musicId){\n        /**\n         * 1. 检查待删除的音乐是否存在\n         * 2. 如果存在要删除的音乐\n         *      1. 删除数据库中的数据\n         *      2. 删除服务器上的数据\n         */\n        // 检查待删除的音乐是否存在\n        Music music = musicMapper.findMusicById(Integer.parseInt(musicId));\n        if(music == null){\n            System.out.println(\"在控制台打印日志：没有要删除的音乐id\");\n            return new ResponseBodyMessage&lt;&gt;(-200,\"要删除的音乐不存在\",false);\n        }else{\n            // 调用 musicMapper 接口中的 deleteMusicById 方法删除数据库中的数据\n           int ret = musicMapper.deleteMusicById(Integer.parseInt(musicId));\n\n           if(ret == 1){\n               // 成功删除数据库中的数据\n               /*int index = music.getUrl().lastIndexOf(\"=\");\n               String fileName = music.getUrl().substring(index+1);*/\n\n               String fileName = music.getTitle();\n               // 根据存放音乐的路径删除服务器中的数据\n               File file = new File(SAVE_PATH+fileName+\".mp3\");\n               System.out.println(\"在控制台打印日志：当前音乐的路径：\"+file.getPath());\n                //对删除服务器中的数据进行判断\n               if(file.delete()){\n                   // 删除成功\n                   return new ResponseBodyMessage&lt;&gt;(200,\"音乐删除成功\",true);\n               }else{\n                   return new ResponseBodyMessage&lt;&gt;(-200,\"服务器中的音乐删除失败\",false);\n               }\n           }else{\n               return new ResponseBodyMessage&lt;&gt;(-200,\"数据库中的音乐删除失败\",false);\n           }\n        }\n    }\n\n    /**\n     *  批量删除选中的音乐\n     *  请求路径：/music/deleteSel\n     * @param musicId\n     * @return\n     */\n    @RequestMapping(\"/deleteSel\")\n    public ResponseBodyMessage&lt;Boolean&gt; deleteSelMusic(@RequestParam(\"musicId[]\") List&lt;Integer&gt; musicId) {\n        System.out.println(\"在控制台打印日志：所有音乐的 Id：\"+musicId);\n        int sum = 0; // 统计删除的音乐\n        for (int i = 0; i &lt; musicId.size(); i++) {\n            Music music = musicMapper.findMusicById(musicId.get(i));\n            if (music == null) {\n                System.out.println(\"没有要删除的音乐id\");\n                return new ResponseBodyMessage&lt;&gt;(-200, \"要删除的音乐不存在\", false);\n            }\n            int ret = musicMapper.deleteMusicById(musicId.get(i));\n            if (ret == 1) {\n                // 成功删除数据库中的数据\n                String fileName = music.getTitle();\n                // 根据存放音乐的路径删除服务器中的数据\n                File file = new File(SAVE_PATH + fileName + \".mp3\");\n                System.out.println(\"当前音乐的路径：\" + file.getPath());\n                //对删除服务器中的数据进行判断\n                if (file.delete()) {\n                    // 成功删除一条数据，sum 就加上 ret（数据库中成功删除）\n                    sum += ret;\n                } else {\n                    return new ResponseBodyMessage&lt;&gt;(-200, \"服务器中的音乐删除失败\", false);\n                }\n            }else{\n                return new ResponseBodyMessage&lt;&gt;(-200,\"数据库中的音乐删除失败\",false);\n            }\n        }\n        if(sum == musicId.size()){\n            // 选中的数据全部删除成功\n            System.out.println(\"在控制台打印日志：选择中的歌曲删除成功\");\n            return new ResponseBodyMessage&lt;&gt;(200,\"音乐删除成功\",true);\n        }else{\n            System.out.println(\"在控制台打印日志：选择中的歌曲删除失败\");\n            return new ResponseBodyMessage&lt;&gt;(-200,\"音乐删除失败\",false);\n        }\n    }\n\n    /**\n     *  查询音乐\n     * @param musicName\n     * @return\n     */\n    @RequestMapping(\"/findmusic\")\n    public ResponseBodyMessage&lt;List&lt;Music&gt;&gt; findMusic(@RequestParam(required = false) String musicName){\n        List&lt;Music&gt; musicList = null;\n        if(musicName != null){\n            // 模糊查询，根据歌曲名查询指定的歌曲\n            musicList = musicMapper.findMusicByName(musicName);\n        }else{\n            // 查询所有的音乐\n            musicList = musicMapper.findMusic();\n        }\n        // 查询成功，返回查询到的音乐信息\n        return new ResponseBodyMessage&lt;&gt;(200,\"查询成功\",musicList);\n    }\n}</code></pre>\n<h2 id=\"6%E3%80%81%E4%B8%8A%E4%BC%A0%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95\"><span style=\"color:#0d0016;\">6、上传音乐功能测试</span></h2>\n<p><img alt=\"\" height=\"792\" src=\"..\\..\\static\\image\\49a76da728d84cadb1e8d6ed7a868c70.png\" width=\"1200\"/></p>\n<h2><span style=\"color:#0d0016;\">7、前端代码</span></h2>\n<pre><code class=\"language-html\">    &lt;div class=\"upload-container\"&gt;\n        &lt;form method=\"post\" enctype=\"multipart/form-data\" action=\"/music/upload\"&gt;\n            &lt;div class=\"upload-dialog\"&gt;\n                &lt;strong&gt;上传本地音乐&lt;/strong&gt;\n                &lt;em&gt;XiaoXiangYeYu's music upload_music&lt;/em&gt;\n                &lt;div class=\"row\"&gt;\n                    &lt;span&gt;音乐&lt;/span&gt;\n                    &lt;input type=\"file\" id=\"file\" name=\"filename\" placeholder=\"上传歌曲\" class=\"upload_txtbx\"/&gt;\n                &lt;/div&gt;\n                &lt;div class=\"row\"&gt;\n                    &lt;span&gt;歌手&lt;/span&gt;\n                    &lt;input type=\"text\" id=\"singer\" name=\"singer\" placeholder=\"请输入歌手名\" class=\"upload_txtbx\"/&gt;\n                &lt;/div&gt;\n                &lt;div class=\"row\"&gt;\n                    &lt;input type=\"submit\" id=\"submit\" value=\"上传歌曲\" class=\"submit_btn\"/&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/form&gt;\n    &lt;/div&gt;</code></pre>\n<p><img alt=\"\" height=\"633\" src=\"..\\..\\static\\image\\66dd107b35a54cc4800581df3420fe18.png\" width=\"1094\"/></p>\n<h1 id=\"%C2%A0%E5%8D%81%E3%80%81%E5%AE%9E%E7%8E%B0%E6%92%AD%E6%94%BE%E9%9F%B3%E4%B9%90%E6%A8%A1%E5%9D%97\"><span style=\"color:#0d0016;\">十、实现播放音乐模块</span></h1>\n<h2 id=\"1%E3%80%81%E6%92%AD%E6%94%BE%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%AE%BE%E8%AE%A1\"><span style=\"color:#0d0016;\">1、播放音乐功能的请求和响应设计</span></h2>\n<pre><code class=\"language-javascript\">请求：\n{\n    get, // 使用 get 请求\n    /music/get?path=xxx.mp3 // 请求路径（数据库中存储的 url）\n} \n\n响应：\n{\n    音乐数据本身的字节信息 // 服务器将数据以字节的形式返回给客户端，客户端获取到信息后就可以进行解析，然后播放音乐\n}</code></pre>\n<h2 id=\"2%E3%80%81%E5%9C%A8%20MusicController%20%E7%B1%BB%E4%B8%AD%E6%B7%BB%E5%8A%A0%20playMusic%20%E6%96%B9%E6%B3%95\"><span style=\"color:#0d0016;\">2、在 MusicController 类中添加 playMusic 方法</span></h2>\n<pre><code class=\"language-java\">   /**\n     * 播放音乐\n     * 请求路径：/music/get?paht=xxx.mp3\n     * @param path\n     * @return\n     */\n        @RequestMapping(\"/get\")\n        public ResponseEntity&lt;byte[]&gt; playMusic(@RequestParam String path) {\n        File file = new File(SAVE_PATH+path);\n        byte[] bytes = null;\n            try {\n                bytes  = Files.readAllBytes(file.toPath()); // 将文件路径中的文件以字节的形式读取，放到 bytes 数组中\n                if(bytes == null){\n                    // 如果没有读取的文件，则返回状态码 400\n                    return ResponseEntity.badRequest().build();\n                }\n                // 成功读取到文件\n                return ResponseEntity.ok(bytes);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            // 如果没有读取的文件，则返回状态码 400\n            return ResponseEntity.badRequest().build();\n    }</code></pre>\n<h2 id=\"3%E3%80%81%E6%92%AD%E6%94%BE%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95\"><span style=\"color:#0d0016;\">3、播放音乐功能测试</span></h2>\n<p><img alt=\"\" height=\"893\" src=\"..\\..\\static\\image\\dd0aa4ca7c944b6b99bc13d298c00947.png\" width=\"1200\"/></p>\n<h2 id=\"4%E3%80%81%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81\"><span style=\"color:#0d0016;\">4、前端代码</span></h2>\n<pre><code class=\"language-javascript\">&lt;script&gt;\n    var audios = document.getElementsByTagName(\"audio\");\n    // 暂停函数\n    function pauseAll() {\n            var self = this;\n            [].forEach.call(audios, function (i) {\n            // 将audios中其他的audio全部暂停\n            i !== self &amp;&amp; i.pause();\n        })\n    }\n        // 给play事件绑定暂停函数\n        [].forEach.call(audios, function (i) {\n        i.addEventListener(\"play\", pauseAll.bind(i));\n    });\n&lt;/script&gt;</code></pre>\n<h1 id=\"%E5%8D%81%E4%B8%80%E3%80%81%E5%AE%9E%E7%8E%B0%E5%88%A0%E9%99%A4%E9%9F%B3%E4%B9%90%E6%A8%A1%E5%9D%97\"><span style=\"color:#0d0016;\">十一、实现删除音乐模块</span></h1>\n<h2 id=\"1%E3%80%81%E5%88%A0%E9%99%A4%E5%8D%95%E4%B8%AA%E9%9F%B3%E4%B9%90\"><span style=\"color:#0d0016;\">1、删除单个音乐</span></h2>\n<h3 id=\"1.%20%E5%88%A0%E9%99%A4%E5%8D%95%E4%B8%AA%E9%9F%B3%E4%B9%90%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%AE%BE%E8%AE%A1\"><span style=\"color:#0d0016;\">1. 删除单个音乐的请求和响应设计</span></h3>\n<pre><code class=\"language-java\">请求：\n{\n    post, // 使用 post 请求\n    /music/delete, // 请求路径\n    musicId // 要删除歌曲的 id\n} \n\n响应：\n{\n    \"status\": 200,\n    \"message\": \"删除成功！\",\n    \"data\": true\n}\n\n响应设计字段解释：\n{\n  状态码为 200 表示成功，-200 表示失败\n  状态描述信息，描述此次请求成功或者失败的原因\n  返回的数据，请求成功后，需要给前端的数据信息，true 表示删除成功，false 表示删除失败\n} </code></pre>\n<h3 id=\"2.%20%E5%9C%A8%20MusicMapper%20%E6%8E%A5%E5%8F%A3%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81\"><span style=\"color:#0d0016;\">2. 在 MusicMapper 接口中添加代码</span></h3>\n<pre><code class=\"language-java\">    /**\n     * 通过音乐 Id 查询当前音乐是否存在\n     * @param musicId\n     * @return\n     */\n    Music findMusicById(int musicId);\n\n    /**\n     * 通过当前音乐 Id 删除音乐\n     * @param musicId\n     * @return\n     */\n    int deleteMusicById(int musicId);</code></pre>\n<h3 id=\"3.%20MusicMapper.xml%20%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81\"><span style=\"color:#0d0016;\">3. MusicMapper.xml 文件中添加代码</span></h3>\n<pre><code class=\"language-XML\">    &lt;select id=\"findMusicById\" resultType=\"com.example.onlinemusic.model.Music\"&gt;\n        select * from music where musicid = #{musicid};\n    &lt;/select&gt;\n\n    &lt;delete id=\"deleteMusicById\" parameterType=\"java.lang.Integer\"&gt;\n        delete from music where musicid = #{musicid};\n    &lt;/delete&gt;</code></pre>\n<h3 id=\"4.%20%E5%9C%A8%20MusicController%20%E7%B1%BB%E4%B8%AD%E6%B7%BB%E5%8A%A0%20deleteByMusicId%20%E6%96%B9%E6%B3%95\"><span style=\"color:#0d0016;\">4. 在 MusicController 类中添加 deleteByMusicId 方法</span></h3>\n<pre><code class=\"language-java\">    /**\n     * 删除单个音乐\n     * 请求路径：/music/delete?musicId=x\n     * @param musicId\n     * @return\n     */\n    @RequestMapping(\"/delete\")\n    public ResponseBodyMessage&lt;Boolean&gt; deleteByMusicId(@RequestParam String musicId){\n        /**\n         * 1. 检查待删除的音乐是否存在\n         * 2. 如果存在要删除的音乐\n         *      1. 删除数据库中的数据\n         *      2. 删除服务器上的数据\n         */\n        // 检查待删除的音乐是否存在\n        Music music = musicMapper.findMusicById(Integer.parseInt(musicId));\n        if(music == null){\n            System.out.println(\"在控制台打印日志：没有要删除的音乐id\");\n            return new ResponseBodyMessage&lt;&gt;(-200,\"要删除的音乐不存在\",false);\n        }else{\n            // 调用 musicMapper 接口中的 deleteMusicById 方法删除数据库中的数据\n           int ret = musicMapper.deleteMusicById(Integer.parseInt(musicId));\n\n           if(ret == 1){\n               // 成功删除数据库中的数据\n               String fileName = music.getTitle();\n\n               // 根据存放音乐的路径删除服务器中的数据\n               File file = new File(SAVE_PATH+fileName+\".mp3\");\n               System.out.println(\"在控制台打印日志：当前音乐的路径：\"+file.getPath());\n\n               //对删除服务器中的数据进行判断\n               if(file.delete()){\n                   // 删除成功\n                   return new ResponseBodyMessage&lt;&gt;(200,\"音乐删除成功\",true);\n               }else{\n                   return new ResponseBodyMessage&lt;&gt;(-200,\"服务器中的音乐删除失败\",false);\n               }\n           }else{\n               return new ResponseBodyMessage&lt;&gt;(-200,\"数据库中的音乐删除失败\",false);\n           }\n        }\n    }</code></pre>\n<h3 id=\"5.%20%E5%88%A0%E9%99%A4%E5%8D%95%E4%B8%AA%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95\"><span style=\"color:#0d0016;\">5. 删除单个音乐功能测试</span></h3>\n<p><img alt=\"\" height=\"746\" src=\"..\\..\\static\\image\\c1a4216a40be46b0aa3eb9db4e067cec.png\" width=\"1200\"/></p>\n<h3 id=\"6.%20%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81\"><span style=\"color:#0d0016;\">6. 前端代码</span></h3>\n<pre><code class=\"language-javascript\">        function deleteInfo(obj){\n            console.log(obj);\n            $.ajax({\n                url:\"/music/delete\",\n                type:\"POST\",\n                data:{\n                    \"musicId\":obj\n                },\n                dataType:\"json\",\n\n                success:function(data){\n                    console.log(data);\n                    if(data.data == true){\n                        alert(\"删除成功，重新加载当前页面\");\n                        window.location.href = \"list.html\";\n                    }else{\n                        alert(\"删除失败\");\n                    }\n                }\n\n            });\n        }</code></pre>\n<h2 id=\"2%E3%80%81%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%E9%80%89%E4%B8%AD%E7%9A%84%E9%9F%B3%E4%B9%90\"><span style=\"color:#0d0016;\">2、批量删除选中的音乐</span></h2>\n<h3 id=\"1.%20%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%E9%80%89%E4%B8%AD%E7%9A%84%E9%9F%B3%E4%B9%90%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%AE%BE%E8%AE%A1\"><span style=\"color:#0d0016;\">1. 批量删除选中的音乐的请求和响应设计</span></h3>\n<pre><code class=\"language-java\">请求：\n{\n    post, // 使用 post 请求\n    /music/deleteSel, // 请求路径\n    data:{\n       \"id\":musicId // 要删除的歌曲 id 的数组\n    } \n} \n\n响应：\n{\n    \"status\": 200,\n    \"message\": \"批量删除成功！\",\n    \"data\": true\n}\n\n响应设计字段解释：\n{\n  状态码为 200 表示成功，-200 表示失败\n  状态描述信息，描述此次请求成功或者失败的原因\n  返回的数据，请求成功后，需要给前端的数据信息，true 表示删除成功，false 表示删除失败\n} </code></pre>\n<h3 id=\"2.%20%E5%9C%A8%20MusicController%20%E7%B1%BB%E4%B8%AD%E6%B7%BB%E5%8A%A0%20deleteSelMusic%20%E6%96%B9%E6%B3%95\"><span style=\"color:#0d0016;\">2. 在 MusicController 类中添加 deleteSelMusic 方法</span></h3>\n<pre><code class=\"language-java\">    /**\n     *  批量删除选中的音乐\n     *  请求路径：/music/deleteSel\n     * @param musicId\n     * @return\n     */\n    @RequestMapping(\"/deleteSel\")\n    public ResponseBodyMessage&lt;Boolean&gt; deleteSelMusic(@RequestParam(\"musicId[]\") List&lt;Integer&gt; musicId) {\n        System.out.println(\"在控制台打印日志：所有音乐的 Id：\"+musicId);\n        int sum = 0; // 统计删除的音乐\n        for (int i = 0; i &lt; musicId.size(); i++) {\n            Music music = musicMapper.findMusicById(musicId.get(i));\n            if (music == null) {\n                System.out.println(\"没有要删除的音乐id\");\n                return new ResponseBodyMessage&lt;&gt;(-200, \"要删除的音乐不存在\", false);\n            }\n            int ret = musicMapper.deleteMusicById(musicId.get(i));\n            if (ret == 1) {\n                // 成功删除数据库中的数据\n                String fileName = music.getTitle();\n                // 根据存放音乐的路径删除服务器中的数据\n                File file = new File(SAVE_PATH + fileName + \".mp3\");\n                System.out.println(\"当前音乐的路径：\" + file.getPath());\n                //对删除服务器中的数据进行判断\n                if (file.delete()) {\n                    // 成功删除一条数据，sum 就加上 ret（数据库中成功删除）\n                    sum += ret;\n                } else {\n                    return new ResponseBodyMessage&lt;&gt;(-200, \"服务器中的音乐删除失败\", false);\n                }\n            }else{\n                return new ResponseBodyMessage&lt;&gt;(-200,\"数据库中的音乐删除失败\",false);\n            }\n        }\n        if(sum == musicId.size()){\n            // 选中的数据全部删除成功\n            System.out.println(\"在控制台打印日志：整体删除成功\");\n            return new ResponseBodyMessage&lt;&gt;(200,\"音乐删除成功\",true);\n        }else{\n            System.out.println(\"在控制台打印日志：整体删除失败\");\n            return new ResponseBodyMessage&lt;&gt;(-200,\"音乐删除失败\",false);\n        }\n    }\n}</code></pre>\n<h3 id=\"3.%20%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%E9%80%89%E4%B8%AD%E7%9A%84%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95\"><span style=\"color:#0d0016;\">3. 批量删除选中的音乐功能测试</span></h3>\n<p><img alt=\"\" height=\"757\" src=\"..\\..\\static\\image\\32c92f28b81b434a8c3c2906c87b5c65.png\" width=\"1200\"/></p>\n<h3 id=\"4.%20%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81\"><span style=\"color:#0d0016;\">4. 前端代码</span></h3>\n<pre><code class=\"language-javascript\"> $(function(){\n            $(\"#submit1\").click(function(){\n                var name = $(\"#exampleInputName2\").val();\n                load(name);\n                // window.location.href = \"findMusic?musicName=\"+name;\n            });\n\n            $.when(load).done(function(){\n                $(\"#delete\").click(function(){\n                    var id = new Array(); // 音乐Id\n                    var i = 0; // 数组下标\n                    // 遍历checkbox\n                    $(\"input:checkbox\").each(function(){\n                        // 如果被选中,this代表发生事件的dom元素，&lt;input&gt;\n                        if($(this).is(\":checked\")){\n                            id[i] = $(this).attr(\"id\");\n                            i++;\n                        }\n                    });\n                    console.log(id);\n\n                    $.ajax({\n                        url:\"/music/deleteSel\",\n                        data:{\n                            \"musicId\":id\n                        },\n                        dataType:\"json\",\n                        type:\"POST\",\n\n                        success:function(obj){\n                            if(obj.data == true){\n                                alert(\"删除成功\");\n                                window.location.href = \"list.html\";\n                            }else{\n                                alert(\"删除失败\");\n                            }\n                        }\n                    });\n                });\n            });\n\n        });</code></pre>\n<h1 id=\"%E5%8D%81%E4%BA%8C%E3%80%81%E5%AE%9E%E7%8E%B0%E6%9F%A5%E8%AF%A2%E9%9F%B3%E4%B9%90%E6%A8%A1%E5%9D%97\"><span style=\"color:#0d0016;\">十二、实现查询音乐模块</span></h1>\n<h2 id=\"1%E3%80%81%E6%9F%A5%E8%AF%A2%E9%9F%B3%E4%B9%90%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%AE%BE%E8%AE%A1\"><span style=\"color:#0d0016;\">1、查询音乐的请求和响应设计</span></h2>\n<blockquote>\n<p><span style=\"color:#0d0016;\">此处查询需要满足两个功能：</span></p>\n<ol><li><span style=\"color:#0d0016;\">支持模糊查询</span></li><li><span style=\"color:#0d0016;\">支持传入参数为空，当参数为空时默认查询到所有的音乐</span></li></ol>\n</blockquote>\n<pre><code class=\"language-javascript\">请求：\n{\n    get, // 使用 get 请求\n    /music/findmusic, // 请求路径\n    data:{musicName:musicName}, // 根据歌曲名进行查询\n} \n\n响应：【不给musicName传参】// 如果不传参时默认查询到所有的音乐\n{\n    \"status\": 200,\n    \"message\": \"查询到了歌曲的信息\",\n    \"data\": [\n    {\n        \"id\": 19,\n        \"title\": \"张靓颖 - 我的梦\",\n        \"singer\": \"张靓颖\",\n        \"url\": \"/music/get?path=张靓颖 - 我的梦\",\n        \"time\": \"2022-08-20\",\n        \"userid\": 1\n    },\n    {\n        \"id\": 20,\n        \"title\": \"纯音乐 - Victory\",\n        \"singer\": \"张三\",\n        \"url\": \"/music/get?path=纯音乐 - Victory\",\n        \"time\": \"2022-03-20\",\n        \"userid\": 1\n    }]\n} \n\n响应：【给musicName传参】// 如果传入参数返回指定查询的歌曲\n{\n    \"status\": 200,\n    \"message\": \"查询到了歌曲的信息\",\n    \"data\": [\n    {\n        \"id\": 19,\n        \"title\": \"张靓颖 - 我的梦\",\n        \"singer\": \"张靓颖\",\n        \"url\": \"/music/get?path=张靓颖 - 我的梦\",\n        \"time\": \"2022-08-20\",\n        \"userid\": 1\n    }]\n}\n\n响应设计字段解释：\n{\n  状态码为 200 表示成功\n  状态描述信息，描述此次请求成功\n  返回的数据，请求成功后给前端的数据信息，返回查询到的音乐信息（歌曲id、歌曲名、歌手、存放歌曲的路径、上传时间、上传用户的id）\n} </code></pre>\n<h2 id=\"2%E3%80%81%E5%9C%A8%20MusicMapper%20%E6%8E%A5%E5%8F%A3%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81\"><span style=\"color:#0d0016;\">2、在 MusicMapper 接口中添加代码</span></h2>\n<pre><code class=\"language-java\">    /**\n     * 查询所有的音乐\n     * @return\n     */\n    List&lt;Music&gt; findMusic();\n\n    /**\n     * 模糊查询，根据歌曲名查询指定的歌曲\n     * @param musicName\n     * @return\n     */\n    List&lt;Music&gt; findMusicByName(String musicName);</code></pre>\n<h2 id=\"3%E3%80%81MusicMapper.xml%20%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81\"><span style=\"color:#0d0016;\">3、MusicMapper.xml 文件中添加代码</span></h2>\n<pre><code class=\"language-XML\">    &lt;select id=\"findMusic\" resultType=\"com.example.onlinemusic.model.Music\"&gt;\n        select * from music ;\n    &lt;/select&gt;\n\n    &lt;select id=\"findMusicByName\" resultType=\"com.example.onlinemusic.model.Music\"&gt;\n        select * from music where title like concat('%', #{musicName}, '%');\n    &lt;/select&gt;</code></pre>\n<h2 id=\"4%E3%80%81%E5%9C%A8%20MusicController%20%E7%B1%BB%E4%B8%AD%E6%B7%BB%E5%8A%A0%20findMusic%20%E6%96%B9%E6%B3%95\"><span style=\"color:#0d0016;\">4、在 MusicController 类中添加 findMusic 方法</span></h2>\n<pre><code class=\"language-java\">    /**\n     *  查询音乐\n     * @param musicName\n     * @return\n     */\n    @RequestMapping(\"/findmusic\")\n    public ResponseBodyMessage&lt;List&lt;Music&gt;&gt; findMusic(@RequestParam(required = false) String musicName){\n        List&lt;Music&gt; musicList = null;\n        if(musicName != null){\n            // 模糊查询，根据歌曲名查询指定的歌曲\n            musicList = musicMapper.findMusicByName(musicName);\n        }else{\n            // 查询所有的音乐\n            musicList = musicMapper.findMusic();\n        }\n        // 查询成功，返回查询到的音乐信息\n        return new ResponseBodyMessage&lt;&gt;(200,\"查询成功\",musicList);\n    }</code></pre>\n<h2 id=\"5%E3%80%81%E6%9F%A5%E8%AF%A2%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95\"><span style=\"color:#0d0016;\">5、查询音乐功能测试</span></h2>\n<h3 id=\"1.%20%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%E7%9A%84%E9%9F%B3%E4%B9%90\"><span style=\"color:#0d0016;\">1. 查询所有的音乐</span></h3>\n<p><img alt=\"\" height=\"890\" src=\"..\\..\\static\\image\\08085259661a4c5a8dfa7cb764b2f77b.png\" width=\"1200\"/></p>\n<h3 id=\"2.%20%E6%A8%A1%E7%B3%8A%E5%8C%B9%E9%85%8D%EF%BC%8C%E6%9F%A5%E8%AF%A2%E6%8C%87%E5%AE%9A%E7%9A%84%E9%9F%B3%E4%B9%90\"><span style=\"color:#0d0016;\">2. 模糊匹配，查询指定的音乐</span></h3>\n<p><img alt=\"\" height=\"760\" src=\"..\\..\\static\\image\\6d693d27c13640fc80aa8727e2548fe5.png\" width=\"1200\"/></p>\n<h2><span style=\"color:#0d0016;\">6、前端代码</span></h2>\n<pre><code class=\"language-javascript\">    &lt;script type=\"text/javascript\"&gt;\n        // 查询\n        $(function(){\n            load();\n        });\n\n        // musicName 可以传参(模糊匹配)，也可以不传参(不传参默认传入的是所有的音乐)\n        function load(musicName){\n\n        $.ajax({\n            type:\"GET\",\n            url:\"/music/findmusic\",\n            data:{\n                    \"musicName\":musicName\n            },\n            // 服务器返回的数据类型\n            dataType:\"json\",\n\n            // obj 查找存储的所有信息\n            success:function(obj){\n                console.log(obj);\n                // data数组，存放歌曲信息\n                var data = obj.data;\n\n                var s = '';\n                for(var i=0;i&lt;data.length;i++){\n                    \n                    var musicUrl = data[i].url+\".mp3\";\n                    console.log(musicUrl);\n                    s += '&lt;tr&gt;';\n                    s += '&lt;th&gt; &lt;input id=\"'+data[i].musicId+'\"type=\"checkbox\"&gt; &lt;/th&gt;';\n                    s += '&lt;td&gt;'+ data[i].title +'&lt;/td&gt;';\n                    s += '&lt;td&gt;'+ data[i].singer +'&lt;/td&gt;';\n                    s += \"&lt;td &lt;a href=\\\"\\\"&gt;  &lt;audio src= \\\"\"+ musicUrl+\"\\\"  + controls=\\\"controls\\\" preload=\\\"auto\\\" loop=\\\"loop\\\" class=\\\"audio_btn\\\"&gt;  &gt;\"  + \"&lt;/audio&gt; &lt;/a&gt; &lt;/td&gt;\";\n                    s += '&lt;td&gt; &lt;button class = \"btn btn-primary\" onclick=\"loveInfo('+data[i].musicId+')\"&gt; 收藏歌曲 &lt;/button&gt;' + '&lt;/td&gt;';\n                    s += '&lt;td&gt; &lt;button class=\"btn btn-primary\" onclick=\"deleteInfo('+ data[i].musicId +')\" &gt;删除歌曲&lt;/button&gt;'+'&lt;/td&gt;';\n                    s += '&lt;/tr&gt;';    \n                    }\n\n                    $(\"#info\").html(s);\n                }\n            });\n        }</code></pre>\n<h1 id=\"%E5%8D%81%E4%B8%89%E3%80%81%E5%AE%9E%E7%8E%B0%E6%94%B6%E8%97%8F%E9%9F%B3%E4%B9%90%E6%A8%A1%E5%9D%97\"><span style=\"color:#0d0016;\">十三、实现收藏音乐模块</span></h1>\n<h2 id=\"1%E3%80%81%E6%94%B6%E8%97%8F%E9%9F%B3%E4%B9%90%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%AE%BE%E8%AE%A1\"><span style=\"color:#0d0016;\">1、收藏音乐的请求和响应设计</span></h2>\n<pre><code class=\"language-javascript\">请求：\n{\n    post, // 使用 post 请求\n    /lovemusic/likeMusic // 请求路径\n    data: music_id //音乐id\n} \n\n响应：\n{\n    \"status\": 0,\n    \"message\": \"点赞音乐成功\",\n    \"data\": true\n}\n\n响应设计字段解释：\n{\n  状态码为 200 表示成功，-200 表示失败\n  状态描述信息，描述此次请求成功或者失败的原因\n  返回的数据，请求成功后，需要给前端的数据信息，true 表示收藏成功，false 表示收藏失败\n} </code></pre>\n<h2 id=\"2%E3%80%81%E5%88%9B%E5%BB%BA%20LoveMusic%20%E7%B1%BB\"><span style=\"color:#0d0016;\">2、创建 LoveMusic 类</span></h2>\n<ul><li><span style=\"color:#0d0016;\">在 package com.example.musicserver.model 包中创建 LoveMusic 类</span></li></ul>\n<pre><code class=\"language-java\">package com.example.onlinemusic.model;\n\nimport lombok.Data;\n\n@Data\npublic class LoveMusic {\n    private int loveId;\n    private int userId;\n    private int musicId;\n}</code></pre>\n<h2 id=\"3%E3%80%81%E5%88%9B%E5%BB%BA%E6%8E%A5%E5%8F%A3%20LoveMusicMapper\"><span style=\"color:#0d0016;\">3、创建接口 LoveMusicMapper</span></h2>\n<ul><li><span style=\"color:#0d0016;\">在 package com.example.musicserver.mapper 包中创建 LoveMusicMapper 接口</span></li></ul>\n<pre><code class=\"language-java\">package com.example.onlinemusic.mapper;\n\nimport com.example.onlinemusic.model.LoveMusic;\nimport org.apache.ibatis.annotations.Mapper;\n\n@Mapper\npublic interface LoveMusicMapper {\n\n    /**\n     * 查询是否已经收藏过该音乐\n     * @param userId\n     * @param musicId\n     * @return\n     */\n    LoveMusic findLoveMusic(int userId, int musicId);\n\n    /**\n     * 收藏音乐\n     * @param userId\n     * @param musicId\n     * @return\n     */\n    boolean insertLoveMusic(int userId,int musicId);\n\n}</code></pre>\n<h2 id=\"4%E3%80%81%E5%88%9B%E5%BB%BA%20LoveMusicMapper.xml\"><span style=\"color:#0d0016;\">4、创建 LoveMusicMapper.xml</span></h2>\n<ul><li><span style=\"color:#0d0016;\">在 package resources.mybatis 下创建 LoveMusicMapper.xml 文件，在 LoveMusicMapper.xml 文件中添加配置。</span></li></ul>\n<pre><code class=\"language-XML\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;\n&lt;mapper namespace=\"com.example.onlinemusic.mapper.LoveMusicMapper\"&gt;\n\n    &lt;select id=\"findLoveMusic\" resultType=\"com.example.onlinemusic.model.LoveMusic\"&gt;\n        select * from lovemusic where user_id = #{userId} and music_id = #{musicId};\n    &lt;/select&gt;\n\n    &lt;insert id=\"insertLoveMusic\"&gt;\n        insert into lovemusic(user_id,music_id) values(#{userId}, #{musicId});\n    &lt;/insert&gt;\n\n&lt;/mapper&gt;</code></pre>\n<h2 id=\"5%E3%80%81%E5%88%9B%E5%BB%BA%20LoveMusicController%20%E7%B1%BB\"><span style=\"color:#0d0016;\">5、创建 LoveMusicController 类</span></h2>\n<ul><li><span style=\"color:#0d0016;\">在 package com.example.musicserver.controller 包下，创建 LoveMusicController 类</span></li></ul>\n<pre><code class=\"language-java\">package com.example.onlinemusic.controller;\n\nimport com.example.onlinemusic.mapper.LoveMusicMapper;\nimport com.example.onlinemusic.model.LoveMusic;\nimport com.example.onlinemusic.model.Music;\nimport com.example.onlinemusic.model.User;\nimport com.example.onlinemusic.tools.Constant;\nimport com.example.onlinemusic.tools.ResponseBodyMessage;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/lovemusic\")\npublic class LoveMusicController {\n\n    @Autowired\n    private LoveMusicMapper loveMusicMapper;\n\n    /**\n     * 收藏音乐\n     * 请求路径：/lovemusic/likeMusic?music_id=x\n     * @param music_id 传入的音乐 id\n     * @param request\n     * @return\n     */\n    @RequestMapping(\"/likeMusic\")\n    public ResponseBodyMessage&lt;Boolean&gt; likeMusic(@RequestParam String music_id, HttpServletRequest request){\n\n        // 1. 检查是否登录\n        HttpSession session = request.getSession(false);\n        if(session == null || session.getAttribute(Constant.USER_SESSION_KEY)==null){\n            System.out.println(\"登录失败\");\n            return  new ResponseBodyMessage&lt;&gt;(-200,\"请登录后再进行收藏\",false);\n        }\n\n        // 2. 获取 usrId\n        User user = (User)session.getAttribute(Constant.USER_SESSION_KEY);\n        int userId = user.getUserId();\n        System.out.println(\"在控制台打印日志：user_id：\"+userId);\n\n        // 3. 将传入的 music_id 转换成整型（获取 musicId）\n        int musicId = Integer.parseInt(music_id);\n        System.out.println(\"在控制台打印日志：music_id：\"+musicId);\n\n        // 4. 判断当前歌曲是否被收藏过\n        LoveMusic loveMusic = loveMusicMapper.findLoveMusic(userId,musicId);\n        if(loveMusic != null){\n            // 之前收藏过这首歌曲\n            return new ResponseBodyMessage&lt;&gt;(-200,\"该歌曲已被收藏，请勿重复收藏\",false);\n        }else{\n           boolean ret =  loveMusicMapper.insertLoveMusic(userId,musicId);\n           if(ret){\n               return new ResponseBodyMessage&lt;&gt;(200,\"收藏成功\",true);\n           }else{\n               return new ResponseBodyMessage&lt;&gt;(-200,\"收藏失败\",false);\n           }\n        }\n    }\n}</code></pre>\n<h2 id=\"6%E3%80%81%E6%94%B6%E8%97%8F%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95\"><span style=\"color:#0d0016;\">6、收藏音乐功能测试</span></h2>\n<p><img alt=\"\" height=\"776\" src=\"..\\..\\static\\image\\e3b5e4f9b0464f049d84e6651f91d496.png\" width=\"1200\"/></p>\n<h2><span style=\"color:#0d0016;\">7、前端代码</span></h2>\n<pre><code class=\"language-javascript\">        function loveInfo(obj){\n            $.ajax({\n                type:\"POST\",\n                url:\"/lovemusic/likeMusic\",\n                data:{\n                    \"music_id\":obj\n                },\n                dataType:\"json\",\n\n                success:function(data){\n                    if(data.data == true){\n                        alert(\"收藏成功\");\n                        window.location.href = \"loveMusic.html\";\n                    }else{\n                        alert(\"收藏失败\");\n                    }\n                }\n            });\n        }</code></pre>\n<h1 id=\"%E5%8D%81%E5%9B%9B%E3%80%81%E5%AE%9E%E7%8E%B0%E6%9F%A5%E8%AF%A2%E6%94%B6%E8%97%8F%E7%9A%84%E9%9F%B3%E4%B9%90%E6%A8%A1%E5%9D%97\"><span style=\"color:#0d0016;\">十四、实现查询收藏的音乐模块</span></h1>\n<h2 id=\"1%E3%80%81%E6%9F%A5%E8%AF%A2%E6%94%B6%E8%97%8F%E9%9F%B3%E4%B9%90%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%AE%BE%E8%AE%A1\"><span style=\"color:#0d0016;\">1、查询收藏音乐的请求和响应设计</span></h2>\n<blockquote>\n<p><span style=\"color:#0d0016;\">此处查询需要满足两个功能：</span></p>\n<ol><li><span style=\"color:#0d0016;\">支持模糊查询</span></li><li><span style=\"color:#0d0016;\">支持传入参数为空，当参数为空时默认查询到所有的音乐</span></li></ol>\n</blockquote>\n<pre><code class=\"language-javascript\">请求：\n{\n    get, // 使用 get 请求\n    /lovemusic/findlovemusic, // 请求路径\n    data:{musicName:musicName}, // 根据歌曲名进行查询\n} \n\n响应：【不传入musicName参数】// 如果不传参时默认查询到所有的音乐\n{\n    \"status\": 200,\n    \"message\": \"查询到了所有的收藏的音乐\",\n    \"data\": [\n    {\n        \"id\": 19,\n        \"title\": \"张靓颖 - 我的梦\",\n        \"singer\": \"张靓颖\",\n        \"url\": \"/music/get?path=张靓颖 - 我的梦\",\n        \"time\": \"2022-08-20\",\n        \"userid\": 1\n    },\n    {\n        \"id\": 20,\n        \"title\": \"纯音乐 - Victory\",\n        \"singer\": \"张三\",\n        \"url\": \"/music/get?path=纯音乐 - Victory\",\n        \"time\": \"2022-03-20\",\n        \"userid\": 1\n    }]\n} \n\n响应：【传入musicName参数】// 如果传入参数返回指定查询的歌曲\n{\n    \"status\": 200,\n    \"message\": \"查询到了收藏歌曲的信息\",\n    \"data\": [\n    {\n        \"id\": 19,\n        \"title\": \"张靓颖 - 我的梦\",\n        \"singer\": \"张靓颖\",\n        \"url\": \"/music/get?path=张靓颖 - 我的梦\",\n        \"time\": \"2022-08-20\",\n        \"userid\": 1\n    }]\n}\n\n响应设计字段解释：\n{\n  状态码为 200 表示成功\n  状态描述信息，描述此次请求成功\n  返回的数据，请求成功后给前端的数据信息，返回查询到的音乐信息（歌曲id、歌曲名、歌手、存放歌曲的路径、上传时间、上传用户的id）\n} </code></pre>\n<h2 id=\"2%E3%80%81%E5%9C%A8%20LoveMusicMapper%20%E6%8E%A5%E5%8F%A3%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81\"><span style=\"color:#0d0016;\">2、在 LoveMusicMapper 接口中添加代码</span></h2>\n<pre><code class=\"language-java\">    /**\n     * 查询当前用户收藏的所有音乐\n     * @param userId\n     * @return\n     */\n    List&lt;Music&gt; findLoveMusicByUserId(int userId);\n\n    /**\n     * 模糊查询，根据歌曲名查询当前用户指定的收藏歌曲\n     * @param musicName\n     * @param userId\n     * @return\n     */\n    List&lt;Music&gt; findLoveMusicByMusicNameAndUserId(String musicName,int userId);</code></pre>\n<h2 id=\"3%E3%80%81LoveMusicMapper.xml%20%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81\"><span style=\"color:#0d0016;\">3、LoveMusicMapper.xml 文件中添加代码</span></h2>\n<pre><code class=\"language-XML\">    &lt;select id=\"findLoveMusicByUserId\" resultType=\"com.example.onlinemusic.model.Music\"&gt;\n        select music.*\n        from music,lovemusic\n        where music.musicid = lovemusic.music_id and user_id = #{userId};\n    &lt;/select&gt;\n\n    &lt;select id=\"findLoveMusicByMusicNameAndUserId\" resultType=\"com.example.onlinemusic.model.Music\"&gt;\n        select music.*\n        from music,lovemusic\n        where music.musicid = lovemusic.music_id and user_id = #{userId} and title like concat('%', #{musicName}, '%');\n    &lt;/select&gt;</code></pre>\n<h2 id=\"4%E3%80%81%E5%9C%A8%20LoveMusicController%20%E7%B1%BB%E4%B8%AD%E6%B7%BB%E5%8A%A0%20findLoveMusic%20%E6%96%B9%E6%B3%95\"><span style=\"color:#0d0016;\">4、在 LoveMusicController 类中添加 findLoveMusic 方法</span></h2>\n<pre><code class=\"language-java\">    @RequestMapping(\"findlovemusic\")\n    public ResponseBodyMessage&lt;List&lt;Music&gt;&gt; findLoveMusic(@RequestParam(required = false) String musicName,HttpServletRequest request){\n        // 1. 检查是否登录\n        HttpSession session = request.getSession(false);\n        if(session == null || session.getAttribute(Constant.USER_SESSION_KEY)==null){\n            System.out.println(\"登录失败\");\n            return  new ResponseBodyMessage&lt;&gt;(-200,\"请登录后再查找\",null);\n        }\n\n        // 2. 获取 usrId\n        User user = (User)session.getAttribute(Constant.USER_SESSION_KEY);\n        int user_id = user.getUserId();\n        System.out.println(\"在控制台打印日志：user_id：\"+user_id);\n\n        List&lt;Music&gt; musicList = null;\n        if(musicName == null){\n            //查询当前用户收藏的所有音乐\n            musicList = loveMusicMapper.findLoveMusicByUserId(user_id);\n        }else{\n            //模糊查询，根据歌曲名查询当前用户指定的收藏歌曲\n            musicList = loveMusicMapper.findLoveMusicByMusicNameAndUserId(musicName,user_id);\n        }\n        return new ResponseBodyMessage&lt;&gt;(200,\"查询成功\",musicList);\n    }</code></pre>\n<h2 id=\"5%E3%80%81%E6%9F%A5%E8%AF%A2%E6%94%B6%E8%97%8F%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95\"><span style=\"color:#0d0016;\">5、查询收藏音乐功能测试</span></h2>\n<h3 id=\"1.%20%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%E7%9A%84%E6%94%B6%E8%97%8F%E9%9F%B3%E4%B9%90\"><span style=\"color:#0d0016;\">1. 查询所有的收藏音乐</span></h3>\n<p><img alt=\"\" height=\"882\" src=\"..\\..\\static\\image\\2b56e8f1d92e423aa9534635ae23c543.png\" width=\"1200\"/></p>\n<h3 id=\"2.%20%E6%A8%A1%E7%B3%8A%E5%8C%B9%E9%85%8D%EF%BC%8C%E6%9F%A5%E8%AF%A2%E6%8C%87%E5%AE%9A%E7%9A%84%E6%94%B6%E8%97%8F%E9%9F%B3%E4%B9%90\"><span style=\"color:#0d0016;\">2. 模糊匹配，查询指定的收藏音乐</span></h3>\n<p><img alt=\"\" height=\"726\" src=\"..\\..\\static\\image\\de2f5e739f2d4bdeb8aa4b7ea2df4c3f.png\" width=\"1200\"/></p>\n<h2><span style=\"color:#0d0016;\">6、前端代码</span></h2>\n<pre><code class=\"language-javascript\">         $(function(){\n            load();\n        });\n\n        // musicName 可以传参(模糊匹配)，也可以不传参(不传参默认传入的是所有的音乐)\n        function load(musicName){\n\n        $.ajax({\n            type:\"GET\",\n            url:\"/lovemusic/findlovemusic\",\n            data:{\n                    \"musicName\":musicName\n            },\n            // 服务器返回的数据类型\n            dataType:\"json\",\n\n            // obj 查找存储的所有信息\n            success:function(obj){\n                console.log(obj);\n                // data数组，存放歌曲信息\n                var data = obj.data;\n\n                var s = '';\n                for(var i=0;i&lt;data.length;i++){\n                    var musicUrl = data[i].url+\".mp3\";\n                    s += '&lt;tr&gt;';\n                    s += '&lt;td&gt;'+ data[i].title +'&lt;/td&gt;';\n                    s += '&lt;td&gt;'+ data[i].singer +'&lt;/td&gt;';\n                    s += \"&lt;td &lt;a href=\\\"\\\"&gt;  &lt;audio src= \\\"\"+ musicUrl+\"\\\"  + controls=\\\"controls\\\" preload=\\\"auto\\\" loop=\\\"loop\\\" class=\\\"audio_btn\\\"&gt;  &gt;\"  + \"&lt;/audio&gt; &lt;/a&gt; &lt;/td&gt;\";\n                    s += '&lt;td&gt; &lt;button class=\"btn btn-primary\" onclick=\"deleteInfo('+ data[i].musicId +')\"&gt;取消收藏&lt;/button&gt;'+'&lt;/td&gt;';\n                    s += '&lt;/tr&gt;';    \n                    }\n\n                    $(\"#info\").html(s);\n                }\n            });\n        }</code></pre>\n<h1 id=\"%E5%8D%81%E4%BA%94%E3%80%81%E5%AE%9E%E7%8E%B0%E5%8F%96%E6%B6%88%E6%94%B6%E8%97%8F%E9%9F%B3%E4%B9%90%E6%A8%A1%E5%9D%97\"><span style=\"color:#0d0016;\">十五、实现取消收藏音乐模块</span></h1>\n<h2 id=\"1%E3%80%81%E5%8F%96%E6%B6%88(%E7%A7%BB%E9%99%A4)%E6%94%B6%E8%97%8F%E9%9F%B3%E4%B9%90%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%AE%BE%E8%AE%A1\"><span style=\"color:#0d0016;\">1、取消(移除)收藏音乐的请求和响应设计</span></h2>\n<pre><code class=\"language-java\">请求：\n{\n    post, // 使用 post 请求\n    /lovemusic/removelovemusic, // 请求路径\n    data:{id:music_id} // 根据收藏列表中音乐的 id 进行移除\n} \n\n响应：\n{\n    \"status\": 200,\n    \"message\": \"取消收藏成功！\",\n    \"data\": true\n}\n\n\n响应设计字段解释：\n{\n  状态码为 200 表示成功，-200 表示失败\n  状态描述信息，描述此次请求成功或者失败的原因\n  返回的数据，请求成功后，需要给前端的数据信息，true 表示移除收藏成功，false 表示移除收藏失败\n}</code></pre>\n<h2><span style=\"color:#0d0016;\">2、在 LoveMusicMapper 接口中添加代码</span></h2>\n<pre><code class=\"language-java\">    /**\n     *  移除某个用户收藏的引用\n     * @param userId 用户的 ID\n     * @param musicId 待移除音乐的 ID\n     * @return 受影响的行数\n     */\n    int removeLoveMusic(int userId,int musicId);</code></pre>\n<h2><span style=\"color:#0d0016;\">3、LoveMusicMapper.xml 文件中添加代码</span></h2>\n<pre><code class=\"language-XML\">    &lt;delete id=\"removeLoveMusic\" parameterType=\"java.lang.Integer\"&gt;\n        delete from lovemusic where user_id = #{userId} and music_id = #{musicId};\n    &lt;/delete&gt;</code></pre>\n<h2 id=\"4%E3%80%81%E5%9C%A8%20LoveMusicController%20%E7%B1%BB%E4%B8%AD%E6%B7%BB%E5%8A%A0%20removeLoveMusic%20%E6%96%B9%E6%B3%95\"><span style=\"color:#0d0016;\">4、在 LoveMusicController 类中添加 removeLoveMusic 方法</span></h2>\n<pre><code class=\"language-java\">    /**\n     * 移除收藏的音乐\n     * @param music_id\n     * @param request\n     * @return\n     */\n    @RequestMapping(\"/removelovemusic\")\n    public ResponseBodyMessage&lt;Boolean&gt; removeLoveMusic(@RequestParam String music_id,HttpServletRequest request){\n\n        // 1. 检查是否登录\n        HttpSession session = request.getSession(false);\n        if(session == null || session.getAttribute(Constant.USER_SESSION_KEY)==null){\n            System.out.println(\"登录失败\");\n            return  new ResponseBodyMessage&lt;&gt;(-200,\"请登录后再移除\",false);\n        }\n\n        // 2. 获取 usrId\n        User user = (User)session.getAttribute(Constant.USER_SESSION_KEY);\n        int userId = user.getUserId();\n        System.out.println(\"在控制台打印日志：user_id：\"+userId);\n\n        //  3. 将传入的 music_id 转换成整型（获取 musicId）\n        int musicId = Integer.parseInt(music_id);\n        System.out.println(\"在控制台打印日志：music_id：\"+musicId);\n\n        int ret = loveMusicMapper.removeLoveMusic(userId,musicId);\n        if(ret == 1){\n            return new ResponseBodyMessage&lt;&gt;(200,\"取消收藏成功\",true);\n        }else{\n            return new ResponseBodyMessage&lt;&gt;(-200,\"取消收藏失败\",false);\n        }\n    }</code></pre>\n<h2 id=\"5%E3%80%81%E5%8F%96%E6%B6%88%E6%94%B6%E8%97%8F%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95\"><span style=\"color:#0d0016;\">5、取消收藏音乐功能测试</span></h2>\n<p><img alt=\"\" height=\"631\" src=\"..\\..\\static\\image\\c1f0cd711f684c72933e7dcecad64687.png\" width=\"1200\"/></p>\n<h2><span style=\"color:#0d0016;\">6、前端代码</span></h2>\n<pre><code class=\"language-javascript\">       function deleteInfo(obj){\n            console.log(obj);\n            $.ajax({\n                url:\"/lovemusic/removelovemusic\",\n                type:\"POST\",\n                data:{\n                    \"music_id\":obj\n                },\n                dataType:\"json\",\n\n                success:function(data){\n                    console.log(data);\n                    if(data.data == true){\n                        alert(\"取消收藏成功，重新加载当前页面\");\n                        window.location.href = \"loveMusic.html\";\n                    }else{\n                        alert(\"取消收藏失败\");\n                    }\n                }\n\n            });\n        }</code></pre>\n<h1 id=\"%E5%8D%81%E5%85%AD%E3%80%81%E5%AE%8C%E5%96%84%E5%88%A0%E9%99%A4%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD\"><span style=\"color:#0d0016;\">十六、完善删除音乐功能</span></h1>\n<blockquote>\n<p><span style=\"color:#fe2c24;\">前面所完成的功能中存在一个BUG，当成功删除音乐表(music)中的音乐后，收藏表(lovemusic)中的音乐不会被删除。</span></p>\n</blockquote>\n<h2 id=\"1%E3%80%81%E5%9C%A8%20LoveMusicMapper%20%E6%8E%A5%E5%8F%A3%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81\"><span style=\"color:#0d0016;\">1、在 LoveMusicMapper 接口中添加代码</span></h2>\n<pre><code class=\"language-java\">    /**\n     * 根据音乐的ID进行删除\n     * @param musicId\n     * @return\n     */\n    int deleteLoveMusicByMusicId(int musicId);</code></pre>\n<h2 id=\"2%E3%80%81LoveMusicMapper.xml%20%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81\"><span style=\"color:#0d0016;\">2、LoveMusicMapper.xml 文件中添加代码</span></h2>\n<pre><code class=\"language-XML\">    &lt;delete id=\"deleteLoveMusicByMusicId\" parameterType=\"java.lang.Integer\"&gt;\n        delete from lovemusic where music_id = #{musicId};\n    &lt;/delete&gt;</code></pre>\n<h2 id=\"3%E3%80%81%E8%B0%83%E6%95%B4%20MusicController%20%E7%B1%BB%E4%B8%AD%E7%9A%84%20deleteMusicByMusicId%20%E5%92%8C%20deleteSelMusic%20%E6%96%B9%E6%B3%95\"><span style=\"color:#0d0016;\">3、调整 MusicController 类中的 deleteMusicByMusicId 和 deleteSelMusic 方法</span></h2>\n<pre><code class=\"language-java\">// 在 MusicController 注入 LoveMusicMapper \n    @Autowired\n    private LoveMusicMapper loveMusicMapper;\n\n// 调整后的 deleteMusicByMusicId 方法 和 deleteSelMusic 方法\n   /**\n     * 删除单个音乐\n     * 请求路径：/music/delete?musicId=x\n     * @param musicId\n     * @return\n     */\n    @RequestMapping(\"/delete\")\n    public ResponseBodyMessage&lt;Boolean&gt; deleteMusicByMusicId(@RequestParam String musicId){\n        /**\n         * 1. 检查待删除的音乐是否存在\n         * 2. 如果存在要删除的音乐\n         *      1. 删除数据库中的数据\n         *      2. 删除服务器上的数据\n         */\n        // 检查待删除的音乐是否存在\n        Music music = musicMapper.findMusicById(Integer.parseInt(musicId));\n        if(music == null){\n            System.out.println(\"在控制台打印日志：没有要删除的音乐id\");\n            return new ResponseBodyMessage&lt;&gt;(-200,\"要删除的音乐不存在\",false);\n        }else{\n            // 调用 musicMapper 接口中的 deleteMusicById 方法删除数据库中的数据\n           int ret = musicMapper.deleteMusicById(Integer.parseInt(musicId));\n\n           if(ret == 1){\n               // 成功删除数据库中的数据\n               String fileName = music.getTitle();\n\n               // 根据存放音乐的路径删除服务器中的数据\n               File file = new File(SAVE_PATH+fileName+\".mp3\");\n               System.out.println(\"在控制台打印日志：当前音乐的路径：\"+file.getPath());\n                //对删除服务器中的数据进行判断\n               if(file.delete()){\n                   // 同步删除 lovemusic 表中的音乐\n                   loveMusicMapper.deleteLoveMusicByMusicId(Integer.parseInt(musicId));\n                   // 删除成功\n                   return new ResponseBodyMessage&lt;&gt;(200,\"音乐删除成功\",true);\n               }else{\n                   return new ResponseBodyMessage&lt;&gt;(-200,\"服务器中的音乐删除失败\",false);\n               }\n           }else{\n               return new ResponseBodyMessage&lt;&gt;(-200,\"数据库中的音乐删除失败\",false);\n           }\n        }\n    }\n\n    /**\n     *  批量删除选中的音乐\n     *  请求路径：/music/deleteSel\n     * @param musicId\n     * @return\n     */\n    @RequestMapping(\"/deleteSel\")\n    public ResponseBodyMessage&lt;Boolean&gt; deleteSelMusic(@RequestParam(\"musicId[]\") List&lt;Integer&gt; musicId) {\n        System.out.println(\"在控制台打印日志：所有音乐的 Id：\"+musicId);\n        int sum = 0; // 统计删除的音乐\n        for (int i = 0; i &lt; musicId.size(); i++) {\n            Music music = musicMapper.findMusicById(musicId.get(i));\n            if (music == null) {\n                System.out.println(\"没有要删除的音乐id\");\n                return new ResponseBodyMessage&lt;&gt;(-200, \"要删除的音乐不存在\", false);\n            }\n            int ret = musicMapper.deleteMusicById(musicId.get(i));\n            if (ret == 1) {\n                // 成功删除数据库中的数据\n                String fileName = music.getTitle();\n                // 根据存放音乐的路径删除服务器中的数据\n                File file = new File(SAVE_PATH + fileName + \".mp3\");\n                System.out.println(\"当前音乐的路径：\" + file.getPath());\n                //对删除服务器中的数据进行判断\n                if (file.delete()) {\n                    // 同步删除 lovemusic 表中的音乐\n                    loveMusicMapper.deleteLoveMusicByMusicId(musicId.get(i));\n                    // 成功删除一条数据，sum 就加上 ret（数据库中成功删除）\n                    sum += ret;\n                } else {\n                    return new ResponseBodyMessage&lt;&gt;(-200, \"服务器中的音乐删除失败\", false);\n                }\n            }else{\n                return new ResponseBodyMessage&lt;&gt;(-200,\"数据库中的音乐删除失败\",false);\n            }\n        }\n        if(sum == musicId.size()){\n            // 选中的数据全部删除成功\n            System.out.println(\"在控制台打印日志：选择中的歌曲删除成功\");\n            return new ResponseBodyMessage&lt;&gt;(200,\"音乐删除成功\",true);\n        }else{\n            System.out.println(\"在控制台打印日志：选择中的歌曲删除失败\");\n            return new ResponseBodyMessage&lt;&gt;(-200,\"音乐删除失败\",false);\n        }\n    }</code></pre>\n<h2 id=\"4%E3%80%81%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95\"><span style=\"color:#0d0016;\">4、功能测试</span></h2>\n<h3 id=\"1.%20%E6%9F%A5%E8%AF%A2%E5%B7%B2%E4%B8%8A%E4%BC%A0%E7%9A%84%E9%9F%B3%E4%B9%90\"><span style=\"color:#0d0016;\">1. 查询已上传的音乐</span></h3>\n<p><img alt=\"\" height=\"887\" src=\"..\\..\\static\\image\\3e9cdfeb692b42eeba3d4393c86b6783.png\" width=\"1200\"/></p>\n<h3 id=\"%C2%A02.%20%E6%9F%A5%E8%AF%A2%E5%B7%B2%E6%94%B6%E8%97%8F%E7%9A%84%E9%9F%B3%E4%B9%90\"><span style=\"color:#0d0016;\"> 2. 查询已收藏的音乐</span></h3>\n<p><img alt=\"\" height=\"881\" src=\"..\\..\\static\\image\\83b326b87ebe4dad8b2e65ecd9f92eb1.png\" width=\"1200\"/></p>\n<h3 id=\"3.%20%E5%88%A0%E9%99%A4%E5%B7%B2%E4%B8%8A%E4%BC%A0%E7%9A%84%E9%9F%B3%E4%B9%90%EF%BC%88music%20%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%89\"><span style=\"color:#0d0016;\">3. 删除已上传的音乐（music 表中的数据）</span></h3>\n<p><img alt=\"\" height=\"741\" src=\"..\\..\\static\\image\\8aebd5f3f9444b4fbf38a1b9402f245f.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"160\" src=\"..\\..\\static\\image\\628284298bef4dbc9a230e6dd2aaea39.png\" width=\"1113\"/></p>\n<h3 id=\"4.%20%E4%B8%8A%E4%BC%A0%E7%9A%84%E9%9F%B3%E4%B9%90%E5%88%A0%E9%99%A4%E5%90%8E%EF%BC%8C%E6%94%B6%E8%97%8F%E7%9A%84%E9%9F%B3%E4%B9%90%E4%B9%9F%E4%BC%9A%E8%A2%AB%E5%88%A0%E9%99%A4\"><span style=\"color:#0d0016;\">4. 上传的音乐删除后，收藏的音乐也会被删除</span></h3>\n<p><img alt=\"\" height=\"730\" src=\"..\\..\\static\\image\\cf56d18be8224f25a50d3ed65a0bca50.png\" width=\"1200\"/></p>\n</div>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 1, "php": 0, "time": "2022-08-28 23:48:00", "summary": "目录一、项目截图二、创建项目、在中创建一个项目、设置项目名称、选择项目依赖、选择项目存放路径，就可以创建出一个项目三、配置数据库和、打开、配置如下信息四、数据库设计五、工具包、类、类、数据加密加密的使"}