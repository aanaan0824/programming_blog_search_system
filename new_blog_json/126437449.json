{"blogid": "126437449", "writerAge": "码龄2年", "writerBlogNum": "65", "writerCollect": "120", "writerComment": "17", "writerFan": "136", "writerGrade": "3级", "writerIntegral": "725", "writerName": "至尊绝伦", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126437449.jpg", "writerRankTotal": "24106", "writerRankWeekly": "3012", "writerThumb": "51", "writerVisitNum": "22374", "blog_read_count": "1135", "blog_time": "已于 2022-08-24 22:23:42 修改", "blog_title": "JavaScript防抖和节流（从认识到理解到手写）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>JavaScript是事件驱动的，大量的操作触发事件，加入到事件队列中处理。</p>\n<p>有一些比较<span style=\"color:#fe2c24;\">频繁的事件处理</span>就会<span style=\"color:#fe2c24;\">造成性能损耗</span>，我们就可以通过<strong><span style=\"color:#fe2c24;\">防抖和节流</span></strong>来<strong><span style=\"color:#fe2c24;\">限制事件频繁发生</span></strong>，所以防抖和节流也是<span style=\"color:#fe2c24;\">性能优化的方式</span>之一。</p>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"1.%E8%AE%A4%E8%AF%86%E9%98%B2%E6%8A%96debounce%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:0px;\"><a href=\"#1.%E8%AE%A4%E8%AF%86%E9%98%B2%E6%8A%96debounce%E5%87%BD%E6%95%B0\">1.认识防抖debounce函数</a></p>\n<p id=\"1.1.%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#1.1.%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%C2%A0\">1.1.防抖函数的应用场景 </a></p>\n<p id=\"1.2.%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E7%9A%84%E6%A1%88%E4%BE%8B%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#1.2.%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E7%9A%84%E6%A1%88%E4%BE%8B%C2%A0\">1.2.防抖函数的案例 </a></p>\n<p id=\"1.3.%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0-toc\" style=\"margin-left:40px;\"><a href=\"#1.3.%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0\">1.3.防抖函数的实现</a></p>\n<p id=\"1.3.1.%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E7%9A%84this%E6%8C%87%E5%90%91%E4%BC%98%E5%8C%96-toc\" style=\"margin-left:80px;\"><a href=\"#1.3.1.%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E7%9A%84this%E6%8C%87%E5%90%91%E4%BC%98%E5%8C%96\">1.3.1.防抖函数的this指向优化</a></p>\n<p id=\"1.3.2.%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96-toc\" style=\"margin-left:80px;\"><a href=\"#1.3.2.%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96\">1.3.2.防抖函数的参数优化</a></p>\n<p id=\"1.3.3.%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%96%E6%B6%88%E6%93%8D%E4%BD%9C%E4%BC%98%E5%8C%96-toc\" style=\"margin-left:80px;\"><a href=\"#1.3.3.%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%96%E6%B6%88%E6%93%8D%E4%BD%9C%E4%BC%98%E5%8C%96\">1.3.3.防抖函数的取消操作优化</a></p>\n<p id=\"1.3.4.%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E7%9A%84%E7%AB%8B%E5%8D%B3%EF%BC%88%E7%AC%AC%E4%B8%80%E6%AC%A1%EF%BC%89%E6%89%A7%E8%A1%8C%E6%95%88%E6%9E%9C%E4%BC%98%E5%8C%96-toc\" style=\"margin-left:80px;\"><a href=\"#1.3.4.%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E7%9A%84%E7%AB%8B%E5%8D%B3%EF%BC%88%E7%AC%AC%E4%B8%80%E6%AC%A1%EF%BC%89%E6%89%A7%E8%A1%8C%E6%95%88%E6%9E%9C%E4%BC%98%E5%8C%96\">1.3.4.防抖函数的立即（第一次）执行效果优化</a></p>\n<p id=\"2.%E8%AE%A4%E8%AF%86%E8%8A%82%E6%B5%81throttle%E5%87%BD%E6%95%B0%C2%A0-toc\" style=\"margin-left:0px;\"><a href=\"#2.%E8%AE%A4%E8%AF%86%E8%8A%82%E6%B5%81throttle%E5%87%BD%E6%95%B0%C2%A0\">2.认识节流throttle函数 </a></p>\n<p id=\"2.1.%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#2.1.%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%C2%A0\">2.1.节流函数的应用场景 </a></p>\n<p id=\"2.2.%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0%E7%9A%84%E6%A1%88%E4%BE%8B-toc\" style=\"margin-left:40px;\"><a href=\"#2.2.%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0%E7%9A%84%E6%A1%88%E4%BE%8B\">2.2.节流函数的案例</a></p>\n<p id=\"2.3.%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#2.3.%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0%C2%A0\">2.3.节流函数的实现 </a></p>\n<p id=\"2.3.1.%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0%E7%9A%84this%E6%8C%87%E5%90%91%E4%BC%98%E5%8C%96%C2%A0-toc\" style=\"margin-left:80px;\"><a href=\"#2.3.1.%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0%E7%9A%84this%E6%8C%87%E5%90%91%E4%BC%98%E5%8C%96%C2%A0\">2.3.1.节流函数的this指向优化 </a></p>\n<p id=\"2.3.2.%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96-toc\" style=\"margin-left:80px;\"><a href=\"#2.3.2.%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96\">2.3.2.节流函数的参数优化</a></p>\n<p id=\"1.3.underscore%E5%AE%9E%E7%8E%B0%E9%98%B2%E6%8A%96-toc\" style=\"margin-left:0px;\"><a href=\"#1.3.underscore%E5%AE%9E%E7%8E%B0%E9%98%B2%E6%8A%96\">3.underscore第三方库实现防抖和节流</a></p>\n<p id=\"3.1.underscore%E7%9A%84%E5%BC%95%E5%85%A5-toc\" style=\"margin-left:40px;\"><a href=\"#3.1.underscore%E7%9A%84%E5%BC%95%E5%85%A5\">3.1.underscore的引入</a></p>\n<p id=\"3.2.underscore%E7%9A%84%E4%BD%BF%E7%94%A8-toc\" style=\"margin-left:40px;\"><a href=\"#3.2.underscore%E7%9A%84%E4%BD%BF%E7%94%A8\">3.2.underscore的使用</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<p>前面说明了防抖和节流是用来限制事件频繁发生的，还不清除防抖和节流的概念，下面先来理解概念。</p>\n<h1 id=\"1.%E8%AE%A4%E8%AF%86%E9%98%B2%E6%8A%96debounce%E5%87%BD%E6%95%B0\">1.认识防抖debounce函数</h1>\n<p>我们先用一幅图来理解一下防抖的过程。 </p>\n<p><img alt=\"\" height=\"275\" src=\"..\\..\\static\\image\\d05437fc6b7344e7b469fbaf5dc0588c.png\" width=\"477\"/></p>\n<p>蓝色的柱子代表<strong><span style=\"color:#4da8ee;\">事件触发</span></strong>，而橙色的柱子代表<span style=\"color:#ff9900;\"><strong>响应函数触发</strong></span>。</p>\n<p>上图可以看到无论事件触发得多频繁，最后<span style=\"color:#fe2c24;\">响应函数</span>都是要<span style=\"color:#fe2c24;\">等待一段</span>固定的<span style=\"color:#fe2c24;\">时间</span>后<span style=\"color:#fe2c24;\">才会触发</span>。</p>\n<p><span style=\"color:#e6b223;\"><em>事件触发就好像在哭闹的小孩子闹的次数，只有小孩安静下来一段时间之后才可以给小孩糖吃。如果一直哭闹，就一直推后吃糖的时间。</em></span></p>\n<p><span style=\"color:#0d0016;\"><strong>总结：</strong></span> </p>\n<ul><li>当事件触发时，相应的函数并不会立即触发，而是会等待一定的时间；</li><li>当事件频繁触发时，函数的触发会被频繁地推迟；</li><li>只有等待一段时间没有事件触发，才会真正执行响应函数。</li></ul>\n<p><span style=\"color:#fe2c24;\"><strong>当事件被触发 n 秒后再执行回调，如果在 n 秒内又被触发，则重新计时</strong></span></p>\n<h2 id=\"1.1.%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%C2%A0\">1.1.防抖函数的应用场景 </h2>\n<p>防抖函数的应用场景有很多，有时候防抖和节流两种方案在同样的场景都可以实现性能优化，主要看具体的需求。</p>\n<p>适合防抖函数的场景：</p>\n<ol><li><strong><span style=\"color:#fe2c24;\">输入框</span><span style=\"color:#404040;\">中频繁的输入内容，</span><span style=\"color:#fe2c24;\">搜索</span><span style=\"color:#404040;\">或</span><span style=\"color:#404040;\">者</span><span style=\"color:#fe2c24;\">提交信息</span><span style=\"color:#404040;\">； </span></strong></li><li><span style=\"color:#404040;\">频繁的</span><span style=\"color:#fe2c24;\">点击按钮</span><span style=\"color:#404040;\">，触发某个事件； </span></li><li><span style=\"color:#404040;\">监听</span><span style=\"color:#fe2c24;\">浏览器滚动事件</span><span style=\"color:#404040;\">，完成某些特</span><span style=\"color:#404040;\">定操作； </span></li><li><span style=\"color:#404040;\">用户</span><span style=\"color:#fe2c24;\">缩放浏览器</span><span style=\"color:#404040;\">的resize事件；</span></li></ol>\n<p><span style=\"color:#fe2c24;\">输入框使用防抖函数</span>可能是<span style=\"color:#fe2c24;\">开发时应用比较多</span>的场景，下面举输入框场景的案例让对防抖函数的理解更深。</p>\n<h2 id=\"1.2.%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E7%9A%84%E6%A1%88%E4%BE%8B%C2%A0\">1.2.防抖函数的案例 </h2>\n<p> 我们都可能会遇到这样的场景，在一些<span style=\"color:#fe2c24;\">购物网站的搜索框输入想要的商品</span>。</p>\n<p> <img alt=\"\" height=\"303\" src=\"..\\..\\static\\image\\c70dd25726194d58b65ef46f000ca60f.png\" width=\"372\"/></p>\n<p><strong>在搜索框下面的联想商品是随着网站的加载一起下载下来的吗？</strong></p>\n<ul><li>不是的，商品的品类太多了，所以联想商品都是根据搜索框的值去服务器请求数据的。</li></ul>\n<p><strong>在上面输入JavaScript高级，单单JavaScript就10个单词了，难道需要发送10次网络请求吗？</strong></p>\n<ul><li>很明显是不现实的，如果这么高频率地发送网络请求，会大大损耗性能。</li></ul>\n<p>通过上面的两个问答可以得出，我们应该要在用户输入缓慢或者停下来一段时间再发送网络请求；</p>\n<p>比如用户在快速输入JavaScript的时候可以只发送一次网络请求，给用户输入内容的时间，用户在输入的时候没有结果也不会觉得奇怪。</p>\n<div>\n<strong><span style=\"color:#404040;\">这就是防抖的操作：只有在某个时间内，没有再次触发网络请求（某个函数）时，才真正的调用网络请求（这个函数）； </span></strong>\n</div>\n<h2 id=\"1.3.%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0\">1.3.防抖函数的实现</h2>\n<p>我们可以先实现简单的防抖函数，后面有其他的需求可以加上去。只要会实现基本的防抖函数就足够应对面试题了。</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\"&gt;\n&lt;script&gt;\n    function mydebounce(fn, delay) {\n      //1.用于记录上一次时间触发的timer\n      let timer = null\n      //2.触发事件时执行的函数\n      const _debounce = () =&gt; {\n        //2.1.如果有再次触发事件，需要取消上一次的事件\n        if(timer) clearTimeout(timer)\n        //2.2.延迟去执行对应的fn函数（传入的回调函数）\n        timer = setTimeout(()=&gt; {\n          fn()\n          timer = null // 执行函数之后，将timer重新置为null\n        }, delay)\n      }\n      \n      return _debounce\n    }\n&lt;/script&gt;\n&lt;script&gt;\n    const inputEl = document.querySelector(\"input\")\n    let count = 0\n    const inputChange = function() {\n      count++\n      console.log(\"发送网络请求\",count)\n    }\n    //实现防抖\n    inputEl.oninput = mydebounce(inputChange, 1000)\n&lt;/script&gt;</code></pre>\n<p>我们模拟搜索框发送网络请求的场景。</p>\n<ol><li>设置一个输入框。<img alt=\"\" height=\"28\" src=\"..\\..\\static\\image\\3ebfeda731444a8e93fa58f3e25c20eb.png\" width=\"247\"/></li><li>获取到这个输入框元素，count记录发送网络请求的次数，在inputChange函数里面模拟发送网络请求，并且发送网络请求次数count自增。<img alt=\"\" height=\"117\" src=\"..\\..\\static\\image\\a88fdb15fec240ffb3ce66801dd9fca4.png\" width=\"403\"/></li><li> 我们要实现防抖就需要传入两个参数，一个是<span style=\"color:#fe2c24;\">实现防抖的函数（fn）</span>，一个是<span style=\"color:#fe2c24;\">延迟时间（delay）</span>。还需要<span style=\"color:#fe2c24;\">返回一个新的函数（_debounce）</span>。<img alt=\"\" height=\"308\" src=\"..\\..\\static\\image\\fc79ff1c1c314449ba3fd4d3db105769.png\" width=\"436\"/><img alt=\"\" height=\"41\" src=\"..\\..\\static\\image\\ddccfeaff54144d592725c0643fc14ba.png\" width=\"390\"/></li><li>防抖的操作就是将要实现<span style=\"color:#fe2c24;\">防抖的函数（fn）</span>通过<span style=\"color:#fe2c24;\">setTimeout定时器设置延迟时间（delay）</span>再执行。<img alt=\"\" height=\"176\" src=\"..\\..\\static\\image\\b2da6ac25c674adf885a8115e555de2f.png\" width=\"418\"/></li><li>需要<span style=\"color:#fe2c24;\">不断触发fn时</span>，需要将前面设置的<span style=\"color:#fe2c24;\">定时器取消掉</span>，需要一个<span style=\"color:#fe2c24;\">变量timer来记录</span>定时器的id来取消对应的定时器。通过<span style=\"color:#fe2c24;\">clearTimeout取消</span>完前面的定时器后，依然会重新再设置一个定时器的。<img alt=\"\" height=\"295\" src=\"..\\..\\static\\image\\25e281de815a40e9a537a70edf17c9d7.png\" width=\"415\"/></li></ol>\n<p>至此，最基本的防抖函数就实现了，在输入框输入了内容，过了一段时间才发送了一次网络请求。</p>\n<p> <img alt=\"\" height=\"151\" src=\"..\\..\\static\\image\\c374eef8ec23496cb13bebfc37b63eed.png\" width=\"404\"/></p>\n<p>最基本的防抖函数便于理解防抖函数的原理，对于初学者来说，上面的理解完已经足够了。但是还有一些细节没有实现。这些优化应用场景比较少，或者说更高阶，可以只了解。</p>\n<h3 id=\"1.3.1.%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E7%9A%84this%E6%8C%87%E5%90%91%E4%BC%98%E5%8C%96\">1.3.1.防抖函数的this指向优化</h3>\n<pre><code class=\"language-javascript\">    function mydebounce(fn, delay) {\n      let timer = null\n      const _debounce = () =&gt; {\n        if(timer) clearTimeout(timer)\n        timer = setTimeout(()=&gt; {\n          fn()\n          timer = null\n        }, delay)\n      }\n      \n      return _debounce\n    }\n\n    //实现防抖\n    inputEl.oninput = mydebounce(function() {\n      count++\n      console.log(\"发送网络请求\", count, this.value)\n    }, 1000)</code></pre>\n<p>上面是自己实现防抖的函数，模拟发送网络请求的函数作为mydebounce的第一个参数（fn），fn在mydebounce函数中是独立调用的。<img alt=\"\" height=\"229\" src=\"..\\..\\static\\image\\46bfe78d119e4443a04ea9c8bb2d20d0.png\" width=\"268\"/></p>\n<p>所以this是指向window的，this.value为undefined，不想this指向window，我们需要自己绑定this。</p>\n<p> <img alt=\"\" height=\"124\" src=\"..\\..\\static\\image\\d43fe173e5bc4fd88380d8501d024d90.png\" width=\"407\"/></p>\n<p>如果不清楚this的绑定规则，可以先看一下<a href=\"https://blog.csdn.net/m0_51636525/article/details/124998226?spm=1001.2014.3001.5501\" title=\"JavaScript中this指向\">JavaScript中this指向</a>。</p>\n<p>_debounce是一个箭头函数，是没有this的，我们将_debounce改为普通函数，并且在fn的调用时通过apply显式绑定this。</p>\n<pre><code class=\"language-javascript\">function mydebounce(fn, delay) {\n      let timer = null\n      const _debounce = function(){\n        if(timer) clearTimeout(timer)\n        timer = setTimeout(()=&gt; {\n          fn.apply(this)\n        }, delay)\n      }\n      \n      return _debounce\n    }</code></pre>\n<p> <img alt=\"\" height=\"139\" src=\"..\\..\\static\\image\\81f7bdb9a7c1403eb857b12d9e7db45e.png\" width=\"401\"/></p>\n<p>这样this.value就有值了。 </p>\n<h3 id=\"1.3.2.%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96\">1.3.2.防抖函数的参数优化</h3>\n<p>有时候我们需要拿到event，但是自己实现的防抖函数没有event这个参数。</p>\n<p>其实oninput是将event传递到_debounce的参数了的，所以我们将其他参数（args）一起绑定到fn中。</p>\n<pre><code class=\"language-javascript\">   function mydebounce(fn, delay) {\n      let timer = null\n      const _debounce = function(...args) {\n        if(timer) clearTimeout(timer)\n        timer = setTimeout(()=&gt; {\n          fn.apply(this, [args])\n          timer = null\n        }, delay)\n      }\n      \n      return _debounce\n    }\n\n    //实现防抖\n    inputEl.oninput = mydebounce(function(event) {\n      count++\n      console.log(\"发送网络请求\", count, this.value, event)\n    }, 1000)</code></pre>\n<p><img alt=\"\" height=\"135\" src=\"..\\..\\static\\image\\bdabc204e7354dfeab8bc5ac0b2a387c.png\" width=\"503\"/></p>\n<p>event参数就有值了。</p>\n<h3 id=\"1.3.3.%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%96%E6%B6%88%E6%93%8D%E4%BD%9C%E4%BC%98%E5%8C%96\">1.3.3.防抖函数的取消操作优化</h3>\n<p>可以实现防抖函数，也需要实现防抖函数的取消，我们只需要拿到timer，取消掉timer就可以实现防抖函数的取消了。</p>\n<pre><code class=\"language-javascript\">   function mydebounce(fn, delay) {\n      let timer = null\n      const _debounce = function(...args) {\n        if(timer) clearTimeout(timer)\n        timer = setTimeout(()=&gt; {\n          fn.apply(this, [args])\n          timer = null\n        }, delay)\n      }\n         //3.给_debounce绑定一个取消的函数\n          _debounce.cancel = function() {\n            if(timer) clearTimeout(timer)\n            timer = null\n          }\n      \n      return _debounce\n    }\n\n    //实现防抖\n    const debounceFn = mydebounce(function(event) {\n      count++\n      console.log(\"发送网络请求\", count, this.value, event)\n    }, 1000)\n    inputEl.oninput = debounceFn</code></pre>\n<p>给_debounce绑定一个取消的函数，如果有定时器就清除定时器。 <img alt=\"\" height=\"101\" src=\"..\\..\\static\\image\\83857452bbfa4ee9b21abf0d29b89118.png\" width=\"302\"/></p>\n<p>在使用这个cancel函数的时候，可以用点击事件来触发取消。</p>\n<pre><code class=\"language-javascript\">cancelBtn.onclick = function() {\n    debounceFn.cancel()\n }</code></pre>\n<h3 id=\"1.3.4.%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E7%9A%84%E7%AB%8B%E5%8D%B3%EF%BC%88%E7%AC%AC%E4%B8%80%E6%AC%A1%EF%BC%89%E6%89%A7%E8%A1%8C%E6%95%88%E6%9E%9C%E4%BC%98%E5%8C%96\">1.3.4.防抖函数的立即（第一次）执行效果优化</h3>\n<p>有时候可能会有这种需求，想要用户在输入第一个内容的时候，就直接执行一次函数（比如发送一次网络请求），后面的内容再防抖。</p>\n<pre><code class=\"language-javascript\">function mydebounce(fn, delay, immediate = false) {\n      let timer = null\n      //isInvoke用来记录是否执行过\n      let isInvoke = false\n      const _debounce = function(...args){\n        if(timer) clearTimeout(timer)\n\n        //第一次操作不需要延迟\n        if(immediate &amp;&amp; !isInvoke) {\n          fn.apply(this, [args])\n          isInvoke = true\n          return\n        }\n\n        timer = setTimeout(()=&gt; {\n          fn.apply(this, [args])\n          timer = null \n          isInvoke = false //执行函数之后，将isInvoke重新置为false\n        }, delay)\n      }\n      //3.给_debounce绑定一个取消的函数\n      _debounce.cancel = function() {\n        if(timer) clearTimeout(timer)\n        timer = null\n        isInvoke = false\n      }\n      \n      return _debounce\n    }</code></pre>\n<p> 我们可以传入一个<span style=\"color:#fe2c24;\">immediate参数用来判断</span>是否要立即执行第一次函数，如果true，就立即执行第一次函数；false就不执行第一次函数。同时定义一个<span style=\"color:#fe2c24;\">isInvoke变量</span>来记录是否已经执行过第一次函数了。<img alt=\"\" height=\"119\" src=\"..\\..\\static\\image\\f3158f33f2984178bd9fe043179919d0.png\" width=\"615\"/></p>\n<p>在用户设置了immediate为true并且没有执行过第一次函数（即isInvoke为false）的时候，不设置定时器。<img alt=\"\" height=\"179\" src=\"..\\..\\static\\image\\aa9ce3627e4a45208e19289390947f83.png\" width=\"374\"/></p>\n<p>其他的函数执行完之后，isInvoke都要重新设置为false。<img alt=\"\" height=\"247\" src=\"..\\..\\static\\image\\b9f7889c555d4d65804100a9d3d6044d.png\" width=\"498\"/> </p>\n<p>当设置immediate为true的时候，就实现了这个功能。</p>\n<pre><code class=\"language-javascript\">inputEl.oninput =  mydebounce(function(event) {\n      count++\n      console.log(\"发送网络请求\", count, this.value, event)\n   }, 1000, true)</code></pre>\n<p><img alt=\"\" height=\"170\" src=\"..\\..\\static\\image\\cf51a13fd9654511b85c24dd87fb1d19.png\" width=\"437\"/></p>\n<h1 id=\"2.%E8%AE%A4%E8%AF%86%E8%8A%82%E6%B5%81throttle%E5%87%BD%E6%95%B0%C2%A0\">2.认识节流throttle函数 </h1>\n<p>相同的，我们依然先用一幅图来理解一下节流的过程。</p>\n<p><img alt=\"\" height=\"352\" src=\"..\\..\\static\\image\\58b0ecc26a94412abcfc56f5b1637f4f.png\" width=\"391\"/></p>\n<p>蓝色的柱子代表<span style=\"color:#4da8ee;\"><strong>事件触发</strong></span>，而橙色的柱子代表<span style=\"color:#ff9900;\"><strong>响应函数触发</strong></span>。</p>\n<p>上图可以看到第一次事件触发会触发响应函数，后面的事件触发无论触发多频繁，都需要等等待时间过后才会再次触发一次响应函数。<span style=\"color:#fe2c24;\">一段时间内只会触发一次响应函数</span>。</p>\n<p><span style=\"color:#e6b223;\"><em>事件触发就好像小孩子不断请求吃糖，第一次满足他吃糖的需求，后面再怎么请求，都不给他吃，要等第二天才能吃第二次糖。</em></span></p>\n<p><strong>总结：</strong></p>\n<ul><li><span style=\"color:#404040;\">当事件触发时，会执行这个事件的响应函数； </span></li><li><span style=\"color:#404040;\">如果这个事件会被频繁触发，那么节流函数会按照一定的频率来执行函数； </span></li><li><span style=\"color:#404040;\">不管在这个中间有多少次触发这个事件，执行函数的频繁总是固定的；</span></li></ul>\n<p><strong><span style=\"color:#fe2c24;\">在一个单位时间内，触发事件至多只能触发一次响应函数</span></strong></p>\n<h2 id=\"2.1.%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%C2%A0\">2.1.节流函数的应用场景 </h2>\n<p>不知道有没有喜欢玩游戏的同学有这样的感受，节流好像是普通攻击的内置cd（冷却）一样，不论你点普通攻击再快，在内置cd时间到之前，你也普攻不出去。</p>\n<p>还有一些其他的应用场景，比如：</p>\n<ol><li>监听页面的滚动事件；</li><li>鼠标移动事件；</li><li>用户频繁点击按钮操作；</li></ol>\n<h2 id=\"2.2.%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0%E7%9A%84%E6%A1%88%E4%BE%8B\">2.2.节流函数的案例</h2>\n<p>我们可能玩过这样的游戏：飞机大战。</p>\n<p><img alt=\"\" height=\"428\" src=\"..\\..\\static\\image\\84fd18a77c8e4e76a4cc30663e15ab9d.png\" width=\"252\"/></p>\n<p><strong>点击空格就发射出子弹，是不是按得越快发射的子弹越多？</strong></p>\n<ul><li>如果发射的频率比较慢的时候，确实是按得越快发射的子弹越多。如果超过了一定的频率，按得再快，一段时间内也只会发射一次。</li></ul>\n<p><strong><span style=\"color:#404040;\">这就是节流的操作：触发了多次事件，在单位时间内，响应函数只会触发一次。</span></strong></p>\n<h2 id=\"2.3.%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0%C2%A0\">2.3.节流函数的实现 </h2>\n<p>节流函数会比防抖函数难理解一点，我们使用按钮的点击来模拟飞机大战中频繁点击发射子弹的场景。</p>\n<p>和防抖函数一样，优先把节流函数的基本实现学习清楚， 再考虑节流函数的功能拓展。</p>\n<pre><code class=\"language-html\">&lt;button&gt;点击&lt;/button&gt;\n  &lt;script&gt;\n    function mythrottle(fn, interval) {\n      //1.设置上次触发的时间\n      let lastTime = 0\n      //2.触发事件时执行的函数\n      const _throttle = function() {\n        //2.1.获取当前时间\n        const nowTime = new Date().getTime()\n        console.log(nowTime)\n        //2.2.获取等待的时间  时间间隔-（当前时间 - 上次触发的时间）\n        const waitTime = interval - (nowTime - lastTime)\n\n        if(waitTime &lt;= 0){\n          fn()\n          //2.3.把当前时间赋值给上次响应的时间\n          lastTime = nowTime\n        }\n      }\n      return _throttle\n    }\n  &lt;/script&gt;\n  &lt;script&gt;\n    const buttonEl = document.querySelector(\"button\")\n    let count = 0\n\n    //实现节流\n    const throttleFn = function(){\n      count++\n      console.log(\"响应次数\", count)\n    }\n    \n    buttonEl.onclick = mythrottle(throttleFn, 1000)\n \n  &lt;/script&gt;</code></pre>\n<p>确实是比较难理解，请多点耐心。我们用点击按钮来模拟飞机大战时发射子弹高频触发的场景。<span style=\"color:#fe2c24;\">点击按钮是<strong>事件触发</strong>，比如点击许多次发射子弹的按钮，可以触发很多很多次但不响应；<strong>事件响应</strong>是实际响应，比如发射了子弹就是事件响应了。</span></p>\n<ol><li>设置一个按钮。<img alt=\"\" height=\"27\" src=\"..\\..\\static\\image\\93387187286e42918a298a61a2b54d5c.png\" width=\"268\"/></li><li>获取按钮的元素，count记录响应的次数，throttleFn函数模拟响应，比如发射子弹。<img alt=\"\" height=\"153\" src=\"..\\..\\static\\image\\95390561a81b46d2880f54d7e6fd983e.png\" width=\"337\"/></li><li>把自己实现节流的函数命名为<span style=\"color:#fe2c24;\">mythrottle，</span>返回一个新的函数_throttle可供按钮点击时触发。想要实现基本的节流函数需要传入两个参数，一个是要<span style=\"color:#fe2c24;\">实现节流的函数（fn）</span>，一个是<span style=\"color:#fe2c24;\">事件触发时间间隔（interval）</span>。<img alt=\"\" height=\"315\" src=\"..\\..\\static\\image\\d76e3c8e897843c78ab21e23e3f93705.png\" width=\"386\"/><img alt=\"\" height=\"30\" src=\"..\\..\\static\\image\\4aaccd013587472aa6aaf48829c7c21b.png\" width=\"381\"/></li><li>我们设置一个变量<span style=\"color:#fe2c24;\">上次事件响应时间(lastTime)</span>，在没有运行过之前，默认为0。获取当前时间，就是<span style=\"color:#fe2c24;\">事件触发时的时间(nowTime)</span>。<span style=\"color:#fe2c24;\">事件响应时间间隔为(interval)</span>。<span style=\"color:#fe2c24;\">事件响应还需要等待的时间为(waitTime)</span>。还需要等待的时间(waitTime)有点难理解，在下面分情况讨论。<img alt=\"\" height=\"287\" src=\"..\\..\\static\\image\\2005773bad1b402f80006886a5cf4ffe.png\" width=\"386\"/></li><li>当<span style=\"color:#fe2c24;\">还需要等待的时间(waitTime)小于等于0</span>的时候就可以<span style=\"color:#fe2c24;\">触发响应事件</span>了，根据waitTime的公式<img alt=\"\" height=\"45\" src=\"..\\..\\static\\image\\44b9cf7f9818409a99e8c279bff3d63f.png\" width=\"461\"/>说明上次响应时间已经等于或者大于interval的时间了。再把<span style=\"color:#fe2c24;\">当前事件触发时的时间（nowTime）赋值给上次事件响应时间（lastTime）</span>。<img alt=\"\" height=\"112\" src=\"..\\..\\static\\image\\5909cdc6d67345e0bd24d8e18a420073.png\" width=\"314\"/></li></ol>\n<p></p>\n<p>上面的公式<span style=\"color:#fe2c24;\"><strong>waitTime = interval - (nowTime - lastTime)</strong></span>太难理解了，我们分成三种情况讨论。</p>\n<p><span style=\"color:#0d0016;\"><strong>第一种情况是第一次触发：</strong></span></p>\n<ul><li>上一次事件响应时间<span style=\"color:#fe2c24;\">(lastTime)</span>设置<span style=\"color:#fe2c24;\">为0</span>，当前事件的触发时间<span style=\"color:#fe2c24;\">(nowTime)</span>是<span style=\"color:#fe2c24;\">通过new Date().getTime()获取</span>的，这个值很大。<img alt=\"\" height=\"62\" src=\"..\\..\\static\\image\\d86f11f4eab145d099a7ddb7b2b74b60.png\" width=\"214\"/>而(interval)一般都不可能设置超过(nowTime)的值。</li><li>所以根据公式<span style=\"color:#fe2c24;\">waitTime = interval - (nowTime - lastTime)</span>还需要等待的时间(waitTime)是不会超过0的，所以可以执行fn()，<strong>第一次触发是可以直接响应的。</strong></li><li>再把<span style=\"color:#fe2c24;\">当前事件触发时的时间（nowTime）赋值给上次事件响应时间（lastTime）</span>，用来记录上次事件响应时间（lastTime）。</li><li><img alt=\"\" height=\"186\" src=\"..\\..\\static\\image\\56cdcf6784ef4c6f95faa816ea226164.png\" width=\"503\"/>（假设interval为1000ms，nowTime为1661345294068，还需等待的时间waitTIme为负数，上面的单位皆为ms）</li></ul>\n<p><span style=\"color:#0d0016;\"><strong>第二种情况是未超过时间间隔触发：</strong></span></p>\n<ul><li> 上一次触发事件响应，响应完成之后都会把事件的响应时间由nowTime赋值记录到lastTime。<img alt=\"\" height=\"54\" src=\"..\\..\\static\\image\\161a6f4a59374d3c9a2c12dc4544a950.png\" width=\"335\"/></li><li><strong>当两次事件触发时间间隔小于interval的时候，不会响应事件。</strong><img alt=\"\" height=\"79\" src=\"..\\..\\static\\image\\a60a4ffb003648f78dcdf054019299a1.png\" width=\"255\"/>根据公式<span style=\"color:#fe2c24;\">waitTime = interval - (nowTime - lastTime)</span>，需要等待的时间超过0，所以不会执行fn()。</li><li><img alt=\"\" height=\"126\" src=\"..\\..\\static\\image\\53c7906dbb9a4b7c99afde79209884a9.png\" width=\"402\"/>（假设interval为1000ms，还需等待的时间waitTime为正数，上面的单位皆为ms）</li></ul>\n<p><span style=\"color:#0d0016;\"><strong>第三种情况是超过时间间隔触发：</strong></span></p>\n<ul><li>事件响应会记录上一次响应事件的时间(lastTime)。</li><li><strong>当两次事件触发时间间隔大于等于interval的时候，会响应事件。</strong><img alt=\"\" height=\"94\" src=\"..\\..\\static\\image\\13d90053295243618f340d9e73a5e59f.png\" width=\"236\"/>根据公式<span style=\"color:#fe2c24;\">waitTime = interval - （nowTime - lastTime）</span>，两次事件触发时间间隔大于等于interval就是nowTime - lastTime大于interval，所以waitTime小于等于0，可以响应事件，执行fn()。</li><li><img alt=\"\" height=\"155\" src=\"..\\..\\static\\image\\57e1402b838e4c8387c09f46cba9a3a3.png\" width=\"465\"/>（假设interval为1000ms，还需等待的时间waitTime为负数，上面的单位皆为ms）</li></ul>\n<p>上面的节流函数的解释我觉得已经很详细了，先把上面的理解了再学习怎么优化。</p>\n<h3 id=\"2.3.1.%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0%E7%9A%84this%E6%8C%87%E5%90%91%E4%BC%98%E5%8C%96%C2%A0\">2.3.1.节流函数的this指向优化 </h3>\n<pre><code class=\"language-javascript\">function mythrottle(fn, interval) {\n      let lastTime = 0\n      const _throttle = function() {\n        const nowTime = new Date().getTime()\n        const waitTime = interval - (nowTime - lastTime)\n\n        if(waitTime &lt;= 0){\n          fn()\n          lastTime = nowTime\n        }\n      }\n      return _throttle\n    }</code></pre>\n<p> 这是上面自己实现节流函数的代码，_throttle函数已经是普通函数了，有自己的this。所以在执行fn()函数的时候用apply显式绑定this。<img alt=\"\" height=\"30\" src=\"..\\..\\static\\image\\0acdd23c10704b049d24a67dab65efe2.png\" width=\"360\"/></p>\n<pre><code class=\"language-javascript\">function mythrottle(fn, interval) {\n      let lastTime = 0\n      const _throttle = function() {\n        const nowTime = new Date().getTime()\n        const waitTime = interval - (nowTime - lastTime)\n\n        if(waitTime &lt;= 0){\n          fn.apply(this)\n          lastTime = nowTime\n        }\n      }\n      return _throttle\n    }</code></pre>\n<p> 显式绑定了this，this就有值了。</p>\n<pre><code class=\"language-javascript\">//实现节流\n    const throttleFn = function(){\n      count++\n      console.log(\"响应次数\", count, this)\n    }\n    \n    buttonEl.onclick = mythrottle(throttleFn, 1000)</code></pre>\n<p><img alt=\"\" height=\"80\" src=\"..\\..\\static\\image\\926eb53aa4fc4a53a4bfaed6ea7fed96.png\" width=\"374\"/></p>\n<h3 id=\"2.3.2.%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96\">2.3.2.节流函数的参数优化</h3>\n<p>有时候我们需要拿到event，但是自己实现的节流函数没有event这个参数。</p>\n<p>其实onclick是将event传递到_throttle的参数了的，所以我们将其他参数（args）一起绑定到fn中。</p>\n<pre><code class=\"language-javascript\">function mythrottle(fn, interval) {\n      //1.上次触发的时间\n      let lastTime = 0\n      //2.触发事件时执行的函数\n      const _throttle = function(...args) {\n        //2.1.获取当前时间\n        const nowTime = new Date().getTime()\n        console.log(nowTime)\n        //2.2.获取等待的时间  时间间隔-（当前时间 - 开始时间）\n        const waitTime = interval - (nowTime - lastTime)\n\n        if(waitTime &lt;= 0){\n          fn.apply(this, [args])\n          //2.3.把当前时间赋值给开始时间\n          lastTime = nowTime\n        }\n      }\n      return _throttle\n    }\n</code></pre>\n<pre><code class=\"language-javascript\"> //实现节流\n    const throttleFn = function(event){\n      count++\n      console.log(\"响应次数\", count, this, event)\n    }\n    \n    buttonEl.onclick = mythrottle(throttleFn, 1000)</code></pre>\n<p><img alt=\"\" height=\"114\" src=\"..\\..\\static\\image\\9c69388abeb64c608eff36f789608d63.png\" width=\"581\"/></p>\n<p>这样就可以拿到event了，当然还有其他的参数。</p>\n<h1 id=\"1.3.underscore%E5%AE%9E%E7%8E%B0%E9%98%B2%E6%8A%96\">3.underscore第三方库实现防抖和节流</h1>\n<p>我们可以使用第三方库来实现防抖和节流操作；underscore还在维护而且功能也比较完善。</p>\n<p>Underscore的官网：<span style=\"color:#ad1f1f;\">https://underscorejs.org/ </span></p>\n<h2 id=\"3.1.underscore%E7%9A%84%E5%BC%95%E5%85%A5\">3.1.underscore的引入</h2>\n<p>Underscore有几种安装方式：</p>\n<p>1.下载Underscore，本地引入；</p>\n<p><img alt=\"\" height=\"215\" src=\"..\\..\\static\\image\\75a7da0142d14ffaa9b1208de622a218.png\" width=\"450\"/></p>\n<p>右键在新的标签页打开第一个链接。复制里面的内容。</p>\n<p><img alt=\"\" height=\"466\" src=\"..\\..\\static\\image\\fab8cb2f1d1341b9abb699e30bf9b022.png\" width=\"502\"/></p>\n<p> 创建一个js文件，把代码粘贴进去。</p>\n<p><img alt=\"\" height=\"418\" src=\"..\\..\\static\\image\\f691cdb04d37471e963f423021978dd2.png\" width=\"497\"/></p>\n<pre><code class=\"language-html\">&lt;script src=\"./防抖和节流.js\"&gt;&lt;/script&gt;</code></pre>\n<p>2.通过CDN直接引入；</p>\n<p><img alt=\"\" height=\"376\" src=\"..\\..\\static\\image\\c27072d302b242be907407840cbd1d79.png\" width=\"488\"/></p>\n<pre><code class=\"language-html\">&lt;script src=\"https://cdn.jsdelivr.net/npm/underscore@latest/underscore-umd-min.js\"&gt;&lt;/script&gt;</code></pre>\n<p>3.通过包管理工具（npm）管理安装 ；</p>\n<p><img alt=\"\" height=\"202\" src=\"..\\..\\static\\image\\55c4603d844e4e6eadbdde48a9652c50.png\" width=\"506\"/></p>\n<pre><code class=\"language-bash\">npm install underscore</code></pre>\n<h2 id=\"3.2.underscore%E7%9A%84%E4%BD%BF%E7%94%A8\">3.2.underscore的使用</h2>\n<p>我们编写一个案例来模拟一下搜索框的场景怎么使用防抖和节流函数。</p>\n<p><strong>防抖函数的使用</strong></p>\n<pre><code class=\"language-html\">&lt;input type=\"text\"&gt;\n  &lt;script src=\"https://cdn.jsdelivr.net/npm/underscore@latest/underscore-umd-min.js\"&gt; \n  &lt;/script&gt;\n  &lt;script&gt;\n    //获取input元素\n    const inputEl = document.querySelector(\"input\") \n    //记录网络请求的次数\n    let count = 0\n    const inputChange = function() {\n      count++\n      //模拟网络请求\n      console.log(\"发送网络请求\",count)\n    }\n    //实现防抖\n    inputEl.oninput = _.debounce(inputChange, 1000)\n\n  &lt;/script&gt;</code></pre>\n<p><span style=\"color:#fe2c24;\"><strong>_.debounce(要实现防抖的函数,延迟间隔ms) </strong></span></p>\n<p><img alt=\"\" height=\"138\" src=\"..\\..\\static\\image\\de95021682cd4ed7a25e6d415bafaa34.png\" width=\"420\"/></p>\n<p>在输入完成之后，等待了1秒才发送了网络请求，在实际开发中时间可以短一点，比如300ms就差不多了。</p>\n<p><strong>节流函数的使用 </strong></p>\n<pre><code class=\"language-html\">&lt;input type=\"text\"&gt;\n  &lt;script src=\"https://cdn.jsdelivr.net/npm/underscore@latest/underscore-umd-min.js\"&gt; \n  &lt;/script&gt;\n  &lt;script&gt;\n    //获取input元素\n    const inputEl = document.querySelector(\"input\") \n    //记录网络请求的次数\n    let count = 0\n    const inputChange = function() {\n      count++\n      //模拟网络请求\n      console.log(\"发送网络请求\",count)\n    }\n    //实现节流\n    inputEl.oninput = _.throttle(inputChange, 1000)\n\n  &lt;/script&gt;</code></pre>\n<p> <span style=\"color:#fe2c24;\"><strong>_.throttle(要实现节流的函数,间隔ms) </strong></span></p>\n<p> <img alt=\"\" height=\"220\" src=\"..\\..\\static\\image\\1767de6970d74cef8ac8a06aef1770c2.png\" width=\"355\"/></p>\n<p>输入第一个a后，发送了第一次网络请求，后面的1秒内不论输入了几个a，还是没有发送网络请求，等到1秒时间到的时候才发送了第二次网络请求。</p>\n</div>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-08-24 22:23:42", "summary": "是事件驱动的，大量的操作触发事件，加入到事件队列中处理。有一些比较频繁的事件处理就会造成性能损耗，我们就可以通过防抖和节流来限制事件频繁发生，所以防抖和节流也是性能优化的方式之一。目录认识防抖函数防抖"}