{"blogid": "124267835", "writerAge": "码龄1年", "writerBlogNum": "52", "writerCollect": "81", "writerComment": "3", "writerFan": "6", "writerGrade": "3级", "writerIntegral": "539", "writerName": "八二年的栗子", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124267835.jpg", "writerRankTotal": "63363", "writerRankWeekly": "105836", "writerThumb": "16", "writerVisitNum": "42920", "blog_read_count": "12830", "blog_time": "已于 2022-04-19 12:07:40 修改", "blog_title": "springmvc简述及实例", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h2>一、简述</h2>\n<p><strong>springmvc是spring的一个模块，一个“小弟”，用于web开发，可理解为servlet的升级版</strong></p>\n<p><strong>所以了解springmvc必须先了解之前的开发模式</strong></p>\n<p></p>\n<p><strong>---------------------------------------------------------------------------------------------------------------------------------</strong></p>\n<p>Java web的发展历史</p>\n<p>一.Model I和Model II</p>\n<p><strong>1.Model I开发模式</strong></p>\n<p>Model1的开发模式是：JSP+JavaBean的模式，它的核心是Jsp页面，在这个页面中，Jsp页面负责整合页面和JavaBean（业务逻辑），而且渲染页面，它的基本流程如下：</p>\n<p><img alt=\"\" height=\"294\" src=\"..\\..\\static\\image\\6df476d858d9485182b27461bca5516c.png\" width=\"734\"/></p>\n<p> 这样的设计模式到这一个jsp页面负责了视图的展示和业务流程（即html和servlet都是它干了）的控制高度耦合的结果是Jsp代码十分复杂，后期维护困难！</p>\n<p></p>\n<p><strong>2.Model II开发模式</strong></p>\n<p>在Model II的模式下。利用jsp页面、servlet和JavaBean组件分工协作共同完成系统的所有任务。其中jsp负责数据显示逻辑任务，servlet负责程序的流程控制任务，JavaBean负责处理业务逻辑任务。它的基本流程如下：</p>\n<p><img alt=\"\" height=\"243\" src=\"..\\..\\static\\image\\4e5e633204a44f4d806ca366e9c8a4ab.png\" width=\"734\"/></p>\n<p>Model2：相对于Model1来说，职责分工更为明确，在Model1的基础上，抽取了Servlet层，体现了一个分层的思想，适合大型的项目开发！（当时的评判标准是适合大型项目开发的，现在看起来已经过时了！）</p>\n<p></p>\n<p><strong>二. MVC模式</strong></p>\n<p>Spring mvc是基于Spring的一个模块，专门做web开发，可以理解为是Servlet的升级</p>\n<p>在Spring MVC框架当中，Controller替代Servlet担负控制器的职能，</p>\n<p>M：指model:模型层，指工程当中的Java Bean,作用是处理数据</p>\n<p>Java Bean分两类：</p>\n<ul><li>一类是实体类Bean:专门存储业务数据的</li><li>一类为业务处理Bean:指Servlet或Dao对象，专门处理业务逻辑和数据</li></ul>\n<p>V:View,视图层指项目当中的html或jsp等页面，作用是与用户进程交互，展示数据</p>\n<p>C:Contoller,控制层，指工程当中的servlet,作用是接受请求和响应数据</p>\n<p>MAC思想不是那个语言所特有的设计模式，也不是web应用所特有的思想，而是一种规范。MVC思想将一个应用分成三个基本部分：Model(模型)、View(视图)和Controller(控制器)，这三个部分以最少的耦合协同工作，从而提高了应用的可扩展性和可维护性。他们三者的关系如下图所示</p>\n<p><img alt=\"\" height=\"349\" src=\"..\\..\\static\\image\\9c67efe6738b44db9c3ceca103cac712.png\" width=\"670\"/></p>\n<p>简述完毕，接下来是实例。如何搭建springmvc </p>\n<h2> 二、如何搭建springmvc</h2>\n<p><img alt=\"\" height=\"667\" src=\"..\\..\\static\\image\\67dd174a15cb45878132aa8d0f002ab8.png\" width=\"818\"/></p>\n<p> 名字<img alt=\"\" height=\"667\" src=\"..\\..\\static\\image\\f129e85c55064023856e0da71ae13703.png\" width=\"818\"/></p>\n<p> 配置到你的maven安装地方</p>\n<p><img alt=\"\" height=\"667\" src=\"..\\..\\static\\image\\1a390dd4d319493faa9c2a38d749ca6a.png\" width=\"818\"/></p>\n<p><img alt=\"\" height=\"535\" src=\"..\\..\\static\\image\\5ea8163de1d244e38663f00f9bd1b7d9.png\" width=\"480\"/></p>\n<p> 弄到你的自己setting.xml配置文件。我的可能跟你们不一样，我配到这里了</p>\n<p></p>\n<p><img alt=\"\" height=\"768\" src=\"..\\..\\static\\image\\e744db9ebcbe4bf8bf0675d9dfdd842d.png\" width=\"1200\"/></p>\n<p> 来，我们继续</p>\n<p>在pom.xml里面配置安装依赖</p>\n<p></p>\n<pre><code>&lt;!--版本锁定--&gt;\n&lt;properties&gt;\n  &lt;spring.version&gt;5.0.2.RELEASE&lt;/spring.version&gt;\n&lt;/properties&gt;\n\n&lt;dependencies&gt;\n\n  &lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;\n    &lt;version&gt;${spring.version}&lt;/version&gt;\n  &lt;/dependency&gt;\n\n  &lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-web&lt;/artifactId&gt;\n    &lt;version&gt;${spring.version}&lt;/version&gt;\n  &lt;/dependency&gt;\n\n  &lt;!--SpringMVC--&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;\n    &lt;version&gt;${spring.version}&lt;/version&gt;\n  &lt;/dependency&gt;\n\n  &lt;!--servlet API--&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;\n    &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;\n    &lt;version&gt;2.5&lt;/version&gt;\n    &lt;scope&gt;provided&lt;/scope&gt;\n  &lt;/dependency&gt;\n\n  &lt;dependency&gt;\n    &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;\n    &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;\n    &lt;version&gt;2.0&lt;/version&gt;\n    &lt;scope&gt;provided&lt;/scope&gt;\n  &lt;/dependency&gt;\n\n  &lt;!--日志--&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;\n    &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;\n    &lt;version&gt;1.2.3&lt;/version&gt;\n  &lt;/dependency&gt;\n\n  &lt;dependency&gt;\n    &lt;groupId&gt;org.thymeleaf&lt;/groupId&gt;\n    &lt;artifactId&gt;thymeleaf-spring4&lt;/artifactId&gt;\n    &lt;version&gt;3.0.9.RELEASE&lt;/version&gt;\n  &lt;/dependency&gt;\n\n&lt;/dependencies&gt;</code></pre>\n<p><img alt=\"\" height=\"320\" src=\"..\\..\\static\\image\\3726921b49854444af1297f1ef4fe4b9.png\" width=\"597\"/></p>\n<p> <strong>多等会，这个时间比较长，起码比mybaits和spring配置的时候依赖要多</strong></p>\n<p><strong>配置web.xml</strong></p>\n<p><img alt=\"\" height=\"736\" src=\"..\\..\\static\\image\\5f42a354f8924b188801e382f5f7bf25.png\" width=\"1200\"/></p>\n<p></p>\n<pre><code>&lt;web-app version=\"3.0\" xmlns=\"http://java.sun.com/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\n   http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"&gt;\n\n&lt;/web-app&gt;\n\n</code></pre>\n<p><strong>④：配置DispatcheServlet</strong></p>\n<p><strong>Spring MVC是基于原生的servlet,通过强大的前端控制器DispatcheServlet，对请求和响应进行统一处理。</strong></p>\n<p><strong>Spring MVC的本质就是一个servlet,是对原生的servlet进行了封装。在以前我们浏览器的每一次请求都需要我们写一个对应的servlet,现在我们只需要将浏览器的请求和响应交给DispatcheServlet进行统一的处理。</strong></p>\n<p><strong>在web.xml配置文件中核心控制器DispatcherServlet</strong></p>\n<p></p>\n<p><strong>(这个DispatcherServlet老牛逼了)</strong></p>\n<p><img alt=\"\" height=\"441\" src=\"..\\..\\static\\image\\9dec787776f34e01ac7e1fc6d693f86b.png\" width=\"1200\"/></p>\n<p> （你看，绝大部分都要前端控制器进行交互操作）</p>\n<p><img alt=\"\" height=\"464\" src=\"..\\..\\static\\image\\e5df5384b91a4955bf7ded9f3d3f55d2.png\" width=\"858\"/></p>\n<p><strong> 把这个放进去刚刚的web.xml里面</strong></p>\n<pre><code>&lt;!--配置前端控制器，对浏览器发送的请求进行统一处理--&gt;\n&lt;servlet&gt;\n  &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;\n  &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n  &lt;!--加载springmvc.xml配置文件的位置和名称，配置的是Spring配置--&gt;\n  &lt;init-param&gt;\n    &lt;!--contextConfigLocation:上下文配置路径，固定值--&gt;\n    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n    &lt;!--classpath:类路径，值得是Java和resources文件夹--&gt;\n    &lt;!--springmvc.xml:指的是配置文件的名称：需要配置springmvc.xml，在下面--&gt;\n    &lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;\n  &lt;/init-param&gt;\n  &lt;!--配置启动加载--&gt;\n  &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n&lt;/servlet&gt;\n\n&lt;servlet-mapping&gt;\n  &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;\n  &lt;url-pattern&gt;*.do&lt;/url-pattern&gt;\n&lt;/servlet-mapping&gt;</code></pre>\n<p>有报错没关系，我们没创文件</p>\n<p>servlet-name：前端控制器的名字</p>\n<p>servlet-class：配置的类</p>\n<p>param-name：取的别名（跟每个人小名一样，天天叫姓名也麻烦）</p>\n<p>param-value：映射的配置文件</p>\n<p>load-on-startup：启动的先后顺序</p>\n<p>servlet-name：名字，一样的</p>\n<p>url-pattern：通配符</p>\n<p><img alt=\"\" height=\"219\" src=\"..\\..\\static\\image\\6bbef82cfb3649d2966a84f7d531c10d.png\" width=\"894\"/></p>\n<p></p>\n<p>来，说完我们继续。。。。。。。。。。。。。。。。。</p>\n<p><img alt=\"\" height=\"736\" src=\"..\\..\\static\\image\\b50ec02faa7d494f9a432fbb03db4b10.png\" width=\"1200\"/></p>\n<p>把java和resoures都弄上，不要弄错。在main里面弄</p>\n<p><img alt=\"\" height=\"736\" src=\"..\\..\\static\\image\\f4cb6d49b8954d2ca3923efc3e4cb63c.png\" width=\"1200\"/> 创建springmvc.xml文件，看图看图</p>\n<p><img alt=\"\" height=\"334\" src=\"..\\..\\static\\image\\abf2e792f02c4325a082d240119c657d.png\" width=\"360\"/></p>\n<p> 配置springmvc.xml</p>\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n                           http://www.springframework.org/schema/beans/spring-beans.xsd\n                           http://www.springframework.org/schema/context\n                           http://www.springframework.org/schema/context/spring-context.xsd\n        http://www.springframework.org/schema/mvc\n       http://www.springframework.org/schema/mvc/spring-mvc.xsd\"&gt;\n\n    &lt;context:component-scan base-package=\"com.qcby\"&gt;&lt;/context:component-scan&gt;\n    &lt;!--处理映射器--&gt;\n    &lt;bean class=\"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\"/&gt;\n\n    &lt;!--处理器适配器--&gt;\n    &lt;bean class=\"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter\"/&gt;\n\n    &lt;!--配置视图解析器--&gt;\n    &lt;bean id=\"viewResolver\" class=\"org.thymeleaf.spring4.view.ThymeleafViewResolver\"&gt;\n        &lt;property name=\"order\" value=\"1\"/&gt;\n        &lt;property name=\"characterEncoding\" value=\"UTF-8\"/&gt;\n        &lt;property name=\"templateEngine\" ref=\"templateEngine\"/&gt;\n    &lt;/bean&gt;\n    &lt;!-- templateEngine --&gt;\n    &lt;bean id=\"templateEngine\" class=\"org.thymeleaf.spring4.SpringTemplateEngine\"&gt;\n        &lt;property name=\"templateResolver\" ref=\"templateResolver\"/&gt;\n    &lt;/bean&gt;\n    &lt;bean id=\"templateResolver\" class=\"org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver\"&gt;\n        &lt;property name=\"prefix\" value=\"/html/\" /&gt;\n        &lt;property name=\"suffix\" value=\".html\" /&gt;\n        &lt;property name=\"templateMode\" value=\"HTML5\"/&gt;\n    &lt;/bean&gt;\n    &lt;!--配置spring开启注解mvc的支持  默认就是开启的 ，要想让其他组件（不包含映射器、适配器、处理器）生效就必须需要配置了--&gt;\n    &lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt;\n&lt;/beans&gt;</code></pre>\n<p>创建controller文件</p>\n<p><img alt=\"\" height=\"389\" src=\"..\\..\\static\\image\\2c9362984fc84a15a4965bd554038ac1.png\" width=\"766\"/></p>\n<p></p>\n<p> 创建HelloController</p>\n<p><img alt=\"\" height=\"372\" src=\"..\\..\\static\\image\\25ef58185dfe4a079ca71139caf589fa.png\" width=\"795\"/></p>\n<p></p>\n<pre><code>package com.qcby;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\npublic class HelloController {\n\n    @RequestMapping(path = \"/hello.do\")\n    public String sayHello(Model model){\n        System.out.println(\"入门方法执行222\");\n        model.addAttribute(\"msg\",\"hello,Springmvc\");\n        return \"suc\";\n    }\n}\n</code></pre>\n<p><img alt=\"\" height=\"736\" src=\"..\\..\\static\\image\\6dfc15661402405cbe3d0a233c4c824c.png\" width=\"1200\"/></p>\n<p></p>\n<p>创建html和css页面</p>\n<p><img alt=\"\" height=\"736\" src=\"..\\..\\static\\image\\1516185cf89a491e90610f3fdc633bb9.png\" width=\"1200\"/></p>\n<p> <img alt=\"\" height=\"409\" src=\"..\\..\\static\\image\\8e8c5659bcb648b38d46ee03fa2d35e4.png\" width=\"331\"/></p>\n<p></p>\n<p><img alt=\"\" height=\"736\" src=\"..\\..\\static\\image\\597651818fbc488a8b1e2018af00d0a0.png\" width=\"1200\"/></p>\n<p></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n\n    &lt;title&gt;成功&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Hello &lt;b th:text=\"${msg}\"&gt;&lt;/b&gt;&lt;/h1&gt;\n&lt;/body&gt;\n&lt;script&gt;\n&lt;/script&gt;\n&lt;/html&gt;</code></pre>\n<p>在web-app下创建index.html</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;入门程序&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h3&gt;入门&lt;/h3&gt;&lt;a href=\"/SpringMvcTest/hello.do\"&gt;入门程序&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p>代码问题就解决了，现在再配置一个tomcat就行了</p>\n<p><img alt=\"\" height=\"736\" src=\"..\\..\\static\\image\\3af0bb1162af4c50a1a2185e8a040d85.png\" width=\"1200\"/></p>\n<p> <img alt=\"\" height=\"684\" src=\"..\\..\\static\\image\\2681d9c055f34e35bdacf2355e86efa4.png\" width=\"1060\"/></p>\n<p><img alt=\"\" height=\"722\" src=\"..\\..\\static\\image\\c11fa77450af473f97aaa7c98cbba532.png\" width=\"1060\"/></p>\n<p> 选择“工件”</p>\n<p><img alt=\"\" height=\"159\" src=\"..\\..\\static\\image\\ad04e298b47a427f93a2359a90656107.png\" width=\"208\"/></p>\n<p><img alt=\"\" height=\"722\" src=\"..\\..\\static\\image\\bb857fc116a042acbca9379ad9cc7b64.png\" width=\"1060\"/></p>\n<p> 欧克，等着再启动就行了</p>\n<p><img alt=\"\" height=\"724\" src=\"..\\..\\static\\image\\b999d3ae4c6241859242e51a3aeedf3d.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"724\" src=\"..\\..\\static\\image\\beb8eb0159f34460a8a818f2a13392a9.png\" width=\"1200\"/></p>\n<h2>三、SpringMVC原理</h2>\n<p>SpringMVC中心控制器</p>\n<p>Spring的web框架围绕DispatcherServlet 【servlet调度】设计</p>\n<p>DispatcherServlet的作用是将请求发送到不同的处理器</p>\n<p><img alt=\"\" height=\"441\" src=\"..\\..\\static\\image\\3c86cf53e80d4262b36a1110046a8b5d.png\" width=\"1200\"/></p>\n<p>入门案例的执行流程</p>\n<p>1. 当启动Tomcat服务器的时候，因为配置了load-on-startup标签，所以会创建DispatcherServlet对象，就会加载springmvc.xml配置文件</p>\n<p>2. 开启了注解扫描，那么HelloController对象就会被创建</p>\n<p>3. 从index.jsp发送请求，请求会先到达DispatcherServlet核心控制器，根据配置@RequestMapping注解找到</p>\n<p>执行的具体方法</p>\n<p>4. 根据执行方法的返回值，再根据配置的视图解析器，去指定的目录下查找指定名称的JSP文件</p>\n<p>5. Tomcat服务器渲染页面，做出响应</p>\n<p>SpringMVC官方提供图形</p>\n<p><img alt=\"\" height=\"464\" src=\"..\\..\\static\\image\\5cc8efc803b44aeab94de9b572288206.png\" width=\"858\"/></p>\n<p>入门案例中的组件分析</p>\n<p>1. 前端控制器（DispatcherServlet）</p>\n<p>2. 处理器映射器（HandlerMapping）</p>\n<p>3. 处理器（Handler）</p>\n<p>4. 处理器适配器（HandlAdapter）</p>\n<p>5. 视图解析器（View Resolver）</p>\n<p>6. 视图（View）</p>\n<p></p>\n<h3>客户端（浏览器）发送请求，直接请求到DispatcherServlet。<br/><br/> DispatcherServlet根据请求信息调用HandlerMapping，解析请求对应的Handler。<br/><br/> 解析到对应的Handler后，开始由HandlerAdapter适配器处理。<br/><br/> HandlerAdapter会根据Handler来调用真正的处理器开处理请求，并处理相应的业务逻辑。<br/><br/> 处理器处理完业务后，会返回一个ModelAndView对象，Model是返回的数据对象，View是个逻辑上的View。<br/><br/> ViewResolver会根据逻辑View查找实际的View。<br/><br/> DispaterServlet把返回的Model传给View。<br/><br/> 通过View返回给请求者（浏览器）<br/>  </h3>\n</div>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-04-19 12:07:40", "summary": "一、简述是的一个模块，一个小弟，用于开发，可理解为的升级版所以了解必须先了解之前的开发模式的发展历史一和开发模式的开发模式是：的模式，它的核心是页面，在这个页面中，页面负责整合页面和业务逻辑，而且渲染"}