{"blogid": "126668950", "writerAge": "码龄179天", "writerBlogNum": "20", "writerCollect": "63", "writerComment": "101", "writerFan": "174", "writerGrade": "3级", "writerIntegral": "462", "writerName": "不秃头的萧哥", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126668950.jpg", "writerRankTotal": "33787", "writerRankWeekly": "6563", "writerThumb": "102", "writerVisitNum": "5653", "blog_read_count": "924", "blog_time": "已于 2022-09-03 09:17:25 修改", "blog_title": "基础数据结构万字详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night-eighties\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#1_1\">1.数据结构的定义</a></li><li><a href=\"#2__8\">2 线性表</a></li><li><a href=\"#3__11\">3 顺序表</a></li><li><ul><li><a href=\"#31__12\">3.1 概念及结构</a></li><li><a href=\"#32__20\">3.2 接口实现</a></li><li><a href=\"#33__218\">3.3 顺序表的问题及思考</a></li></ul>\n</li><li><a href=\"#4__226\">4 链表</a></li><li><ul><li><a href=\"#41__227\">4.1 链表的概念及结构</a></li><li><a href=\"#42__230\">4.2 链表的分类</a></li><li><a href=\"#43__244\">4.3 单向无头链表的实现</a></li><li><a href=\"#44__447\">4.4 顺序表和链表的区别</a></li></ul>\n</li><li><a href=\"#5__462\">5 栈</a></li><li><ul><li><a href=\"#51__463\">5.1 栈的概念及结构</a></li><li><a href=\"#52__470\">5.2 栈的实现</a></li></ul>\n</li><li><a href=\"#6__567\">6 队列</a></li><li><ul><li><a href=\"#61__568\">6.1 队列的概念及结构</a></li><li><a href=\"#62__573\">6.2 队列的实现</a></li></ul>\n</li><li><a href=\"#7__694\">7 树</a></li><li><ul><li><a href=\"#71__695\">7.1 树的概念</a></li><li><a href=\"#72__704\">7.2 树的相关概念</a></li><li><a href=\"#73__720\">7.3 树的表示</a></li><li><a href=\"#74__732\">7.4 树在实际中的运用（表示文件系统的目录树结构）</a></li></ul>\n</li><li><a href=\"#8__734\">8 二叉树</a></li><li><ul><li><a href=\"#81__735\">8.1 二叉树概念</a></li><li><a href=\"#82__745\">8.2 特殊的二叉树</a></li><li><a href=\"#83__750\">8.3 二叉树的存储结构</a></li><li><a href=\"#84__777\">8.4 二叉树的顺序结构</a></li><li><ul><li><a href=\"#85__782\">8.5 二叉树的链式结构</a></li><li><a href=\"#851__792\">8.5.1 二叉树的遍历</a></li><li><ul><li><a href=\"#8511__793\">8.5.1.1 前序、中序以及后序遍历</a></li><li><a href=\"#8512__798\">8.5.1.2 层序遍历</a></li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#9__801\">9 堆</a></li><li><ul><li><a href=\"#91__802\">9.1 堆的概念及结构</a></li><li><a href=\"#92__809\">9.2 堆的实现</a></li><li><ul><li><a href=\"#921__810\">9.2.1 堆向下调整算法</a></li><li><a href=\"#922__818\">9.2.2 堆的构建</a></li><li><a href=\"#923__831\">9.2.3 堆的代码实现</a></li></ul>\n</li><li><a href=\"#93__996\">9.3 堆的应用</a></li><li><ul><li><a href=\"#931__997\">9.3.1 堆排序</a></li><li><a href=\"#932_TOPK_1008\">9.3.2 TOP-K问题</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"1_1\"></a>1.数据结构的定义</h1>\n<p><strong>数据结构是一种具有一定逻辑关系，在计算机中应用某种存储结构，并且封装了相应操作的数据元素的集合。</strong></p>\n<ul><li>数据结构和数据库的区别？</li></ul>\n<p><strong>数据结构是在内存中操作数据，数据库是在外存中操作数据。</strong></p>\n<h1><a id=\"2__8\"></a>2 线性表</h1>\n<blockquote>\n<ul><li>线性表（linear list）是n个具有相同特性的数据元素的有限序列。 线性表是一种在实际中广泛使用的数据结构，常见的线性表：顺序表、链表、栈、队列、字符串…</li><li>线性表在逻辑上是线性结构，也就说是连续的一条直线。但是在物理结构上并不一定是连续的，线性表在物理上存储时，通常以数组和链式结构的形式存储</li></ul>\n</blockquote>\n<h1><a id=\"3__11\"></a>3 顺序表</h1>\n<h2><a id=\"31__12\"></a>3.1 概念及结构</h2>\n<blockquote>\n<p>顺序表是用一段物理地址连续的存储单元依次存储数据元素的线性结构，一般情况下采用数组存储。在数组上完成数据的增删查改。</p>\n</blockquote>\n<p>顺序表可以分为：</p>\n<ol><li>静态顺序表：使用定长数组存储元素。<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8ad2e420967e4dc78db7b2a705e2484c.png\"/></li><li>动态顺序表：使用动态开辟的数组存储。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d4e944186d9e46e8a6bbb51d76788f54.png\"/></li></ol>\n<h2><a id=\"32__20\"></a>3.2 接口实现</h2>\n<blockquote>\n<p>静态顺序表只适用于确定知道需要存多少数据的场景。静态顺序表的定长数组导致N定大了，空间开多了浪费，开少了不够用。所以现实中基本都是使用动态顺序表，根据需要动态的分配空间大小，所以下面我们实现动态顺序表。</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> SLDataType<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 顺序表的动态存储</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">SeqList</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tSLDataType<span class=\"token operator\">*</span> array<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指向动态开辟的数组</span>\n\t<span class=\"token class-name\">size_t</span> size <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 有效数据个数</span>\n\t<span class=\"token class-name\">size_t</span> capicity <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 容量空间的大小</span>\n<span class=\"token punctuation\">}</span>SeqList<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 基本增删查改接口</span>\n<span class=\"token comment\">// 顺序表初始化</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListInit</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 检查空间，如果满了，进行增容</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">CheckCapacity</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 顺序表尾插</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPushBack</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 顺序表尾删</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPopBack</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 顺序表头插</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPushFront</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 顺序表头删</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPopFront</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 顺序表查找</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">SeqListFind</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 顺序表在pos位置插入x</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListInsert</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> pos<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 顺序表删除pos位置的值</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListErase</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 顺序表销毁</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListDestory</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 顺序表打印</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPrint</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SeqListInit</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n\tps<span class=\"token operator\">-&gt;</span>a <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tps<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tps<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListDestroy</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ps<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tps<span class=\"token operator\">-&gt;</span>a <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tps<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">=</span> ps<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPrint</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ps<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> ps<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n \n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">void</span> <span class=\"token function\">CheckCacpity</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ps<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">==</span> ps<span class=\"token operator\">-&gt;</span>capacity<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token class-name\">size_t</span> newcapacity <span class=\"token operator\">=</span> ps<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">4</span> <span class=\"token operator\">:</span> ps<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\tps<span class=\"token operator\">-&gt;</span>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>SLDateType<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>ps<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">,</span> newcapacity<span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SLDateType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tps<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">=</span> newcapacity<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token comment\">// 以下几个接口先讲不复用Insert和Erase的实现，最后再讲复用实现</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPushBack</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">,</span> SLDateType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//assert(ps);</span>\n\t<span class=\"token comment\">//CheckCacpity(ps);</span>\n \n\t<span class=\"token comment\">//ps-&gt;a[ps-&gt;size] = x;</span>\n\t<span class=\"token comment\">//ps-&gt;size++;</span>\n \n\t<span class=\"token function\">SeqListInsert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">,</span> ps<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPushFront</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">,</span> SLDateType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n\t<span class=\"token comment\">/*CheckCacpity(ps);\n \n\tsize_t end = ps-&gt;size;\n\twhile (end &gt; 0)\n\t{\n\t\tps-&gt;a[end] = ps-&gt;a[end - 1];\n\t\t--end;\n\t}\n \n\tps-&gt;a[0] = x;\n\t++ps-&gt;size;*/</span>\n \n\t<span class=\"token function\">SeqListInsert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPopFront</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n\t<span class=\"token comment\">//size_t start = 0;</span>\n\t<span class=\"token comment\">//while (start &lt; ps-&gt;size-1)</span>\n\t<span class=\"token comment\">//{<!-- --></span>\n\t<span class=\"token comment\">//\tps-&gt;a[start] = ps-&gt;a[start + 1];</span>\n\t<span class=\"token comment\">//\t++start;</span>\n\t<span class=\"token comment\">//}</span>\n\t<span class=\"token comment\">//size_t start = 1;</span>\n\t<span class=\"token comment\">//while (start &lt; ps-&gt;size)</span>\n\t<span class=\"token comment\">//{<!-- --></span>\n\t<span class=\"token comment\">//\tps-&gt;a[start-1] = ps-&gt;a[start];</span>\n\t<span class=\"token comment\">//\t++start;</span>\n\t<span class=\"token comment\">//}</span>\n \n\t<span class=\"token comment\">//--ps-&gt;size;</span>\n\t<span class=\"token function\">SeqListErase</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPopBack</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n\t<span class=\"token comment\">//ps-&gt;a[ps-&gt;size - 1] = 0;</span>\n\t<span class=\"token comment\">//ps-&gt;size--;</span>\n\t<span class=\"token function\">SeqListErase</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">,</span> ps<span class=\"token operator\">-&gt;</span>size<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">int</span> <span class=\"token function\">SeqListFind</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">,</span> SLDateType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ps<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ps<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n \n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token comment\">// 顺序表在pos位置插入x</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListInsert</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> pos<span class=\"token punctuation\">,</span> SLDateType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;=</span> ps<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n\t<span class=\"token function\">CheckCacpity</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n\t<span class=\"token comment\">//int end = ps-&gt;size - 1;</span>\n\t<span class=\"token comment\">//while (end &gt;= (int)pos)</span>\n\t<span class=\"token comment\">//{<!-- --></span>\n\t<span class=\"token comment\">//\tps-&gt;a[end + 1] = ps-&gt;a[end];</span>\n\t<span class=\"token comment\">//\t--end;</span>\n\t<span class=\"token comment\">//}</span>\n \n\t<span class=\"token class-name\">size_t</span> end <span class=\"token operator\">=</span> ps<span class=\"token operator\">-&gt;</span>size <span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">&gt;</span> pos<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tps<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ps<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>end <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">--</span>end<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n \n \n\tps<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\tps<span class=\"token operator\">-&gt;</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token comment\">// 顺序表删除pos位置的值</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqListErase</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> pos<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps <span class=\"token operator\">&amp;&amp;</span> pos <span class=\"token operator\">&lt;</span> ps<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n\t<span class=\"token comment\">//size_t start = pos;</span>\n\t<span class=\"token comment\">//while (start &lt; ps-&gt;size-1)</span>\n\t<span class=\"token comment\">//{<!-- --></span>\n\t<span class=\"token comment\">//\tps-&gt;a[start] = ps-&gt;a[start + 1];</span>\n\t<span class=\"token comment\">//\t++start;</span>\n\t<span class=\"token comment\">//}</span>\n \n\t<span class=\"token class-name\">size_t</span> start <span class=\"token operator\">=</span> pos<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;</span> ps<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tps<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>start<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ps<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">++</span>start<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n \n\tps<span class=\"token operator\">-&gt;</span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"33__218\"></a>3.3 顺序表的问题及思考</h2>\n<blockquote>\n<p>问题：</p>\n<ol><li>中间/头部的插入删除，时间复杂度为O(N)</li><li>增容需要申请新空间，拷贝数据，释放旧空间。会有不小的消耗。</li><li>增容一般是呈2倍的增长，势必会有一定的空间浪费。例如当前容量为100，满了以后增容到200，我们再继续插入了5个数据，后面没有数据插入了，那么就浪费了95个数据空间。</li></ol>\n</blockquote>\n<p>思考：如何解决以上问题呢？下面给出了链表的结构来看看。</p>\n<h1><a id=\"4__226\"></a>4 链表</h1>\n<h2><a id=\"41__227\"></a>4.1 链表的概念及结构</h2>\n<blockquote>\n<p>概念：链表是一种物理存储结构上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的 。</p>\n</blockquote>\n<h2><a id=\"42__230\"></a>4.2 链表的分类</h2>\n<p>实际中链表的结构非常多样，以下情况组合起来就有8种链表结构：</p>\n<ol><li>单向或者双向<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\928ad8c76c64469794bb0dc0a5486673.png\"/></li><li>带头或者不带头 <br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\adc7fcbf6d6e4b5aac78462d3b0c9723.png\"/></li><li>循环或者非循环<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\538c5e08f5324358918961d59fbfb5bb.png\"/><br/> 虽然有这么多的链表的结构，但是我们实际中最常用还是两种结构：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c733333118f04a5d983d409b6bb7b457.png\"/></li></ol>\n<p>1.无头单向非循环链表：<strong>结构简单</strong>，一般不会单独用来存数据。实际中更多是作为其他数据结构的子结构，如哈希桶、图的邻接表等等。另外这种结构在<strong>笔试面试</strong>中出现很多。<br/> 2.带头双向循环链表：<strong>结构最复杂</strong>，一般用在单独存储数据。实际中使用的链表数据结构，都是带头双向循环链表。另外这个结构虽然结构复杂，但是使用代码实现以后会发现结构会带来很多优势，<strong>实现反而简单了</strong>，后面我们代码实现了就知道了。</p>\n<h2><a id=\"43__244\"></a>4.3 单向无头链表的实现</h2>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">// 1、无头+单向+非循环链表增删查改实现</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> SLTDateType<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">SListNode</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tSLTDateType data<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">SListNode</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>SListNode<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 动态申请一个结点</span>\nSListNode<span class=\"token operator\">*</span> <span class=\"token function\">BuySListNode</span><span class=\"token punctuation\">(</span>SLTDateType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 单链表打印</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListPrint</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> plist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 单链表尾插</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListPushBack</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> pplist<span class=\"token punctuation\">,</span> SLTDateType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 单链表的头插</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListPushFront</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> pplist<span class=\"token punctuation\">,</span> SLTDateType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 单链表的尾删</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListPopBack</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> pplist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 单链表头删</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListPopFront</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> pplist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 单链表查找</span>\nSListNode<span class=\"token operator\">*</span> <span class=\"token function\">SListFind</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> plist<span class=\"token punctuation\">,</span> SLTDateType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 单链表在pos位置之后插入x</span>\n<span class=\"token comment\">//为什么不在pos位置之前插入？</span>\n<span class=\"token comment\">//因为会大大降低链表的效率!</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListInsertAfter</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">,</span> SLTDateType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 单链表删除pos位置之后的值</span>\n<span class=\"token comment\">// 为什么不删除pos位置？</span>\n<span class=\"token comment\">// 同上</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListEraseAfter</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-c\">SListNode<span class=\"token operator\">*</span> <span class=\"token function\">BuySListNode</span><span class=\"token punctuation\">(</span>SLTDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tSListNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newnode <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BuySListNode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tnewnode<span class=\"token operator\">-&gt;</span>data <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\tnewnode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> newnode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListPrint</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> plist<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>plist <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d-&gt;\"</span><span class=\"token punctuation\">,</span> plist<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tplist <span class=\"token operator\">=</span> plist<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NULL\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListPushFront</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> pplist<span class=\"token punctuation\">,</span> SLTDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pplist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tSListNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> <span class=\"token function\">BuySListNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tnewnode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>pplist<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>pplist <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListPushBack</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> pplist<span class=\"token punctuation\">,</span> SLTDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pplist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pplist <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">SListPushFront</span><span class=\"token punctuation\">(</span>pplist<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tSListNode<span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>pplist<span class=\"token punctuation\">;</span>\n\t\tSListNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> <span class=\"token function\">BuySListNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ptr<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tptr <span class=\"token operator\">=</span> ptr<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tptr<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListPopBack</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> pplist<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pplist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pplist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pplist<span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">SListPopFront</span><span class=\"token punctuation\">(</span>pplist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tSListNode<span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>pplist<span class=\"token punctuation\">;</span>\n\tSListNode<span class=\"token operator\">*</span> del <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ptr<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tdel <span class=\"token operator\">=</span> ptr<span class=\"token punctuation\">;</span>\n\t\tptr <span class=\"token operator\">=</span> ptr<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tdel<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListPopFront</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> pplist<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pplist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pplist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tSListNode<span class=\"token operator\">*</span> del <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>pplist<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pplist<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pplist<span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>del<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tdel <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nSListNode<span class=\"token operator\">*</span> <span class=\"token function\">SListFind</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> plist<span class=\"token punctuation\">,</span> SLTDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>plist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>plist <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>plist<span class=\"token operator\">-&gt;</span>data <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> plist<span class=\"token punctuation\">;</span>\n\t\tplist <span class=\"token operator\">=</span> plist<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListInsertAfter</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">,</span> SLTDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tSListNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> <span class=\"token function\">BuySListNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tnewnode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> pos<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\tpos<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListInsert</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> pplist<span class=\"token punctuation\">,</span> SListNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">,</span> SLTDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pplist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pplist <span class=\"token operator\">==</span> pos<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">SListPushFront</span><span class=\"token punctuation\">(</span>pplist<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tSListNode<span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>pplist<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ptr<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">!=</span>  <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ptr<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">==</span> pos<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tSListNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> <span class=\"token function\">BuySListNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tptr<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n\t\t\tnewnode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tptr <span class=\"token operator\">=</span> ptr<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListEraseAfter</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tSListNode<span class=\"token operator\">*</span> del <span class=\"token operator\">=</span> pos<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\tpos<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> pos<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>del<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tdel <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListErase</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> pplist<span class=\"token punctuation\">,</span> SListNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pplist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pplist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pplist <span class=\"token operator\">==</span> pos<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">SListPopFront</span><span class=\"token punctuation\">(</span>pplist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tSListNode<span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>pplist<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ptr<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ptr<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">==</span> pos<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tSListNode<span class=\"token operator\">*</span> del <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span>\n\t\t\tptr<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> pos<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>del<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tdel <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tptr <span class=\"token operator\">=</span> ptr<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListDestroy</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> plist<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>plist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>plist<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tSListNode<span class=\"token operator\">*</span> del <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>plist<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">*</span>plist <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>plist<span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>del<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"44__447\"></a>4.4 顺序表和链表的区别</h2>\n<table><thead><tr><th>不同点</th><th>顺序表</th><th>链表</th></tr></thead><tbody><tr><td>存储空间上</td><td>物理上一定连续</td><td>逻辑上连续，但物理上不一定连续</td></tr><tr><td>随机访问</td><td>支持O(1)</td><td>不支持：O(N)</td></tr><tr><td>任意位置插入或者删除元素</td><td>可能需要搬移元素，效率低O(N)</td><td>只需修改指针指向</td></tr><tr><td>插入</td><td>动态顺序表，空间不够时需要扩容</td><td>没有容量的概念</td></tr><tr><td>应用场景</td><td>元素高效存储+频繁访问</td><td>任意位置插入和删除频繁</td></tr><tr><td>缓存利用率</td><td>高</td><td>低</td></tr></tbody></table>\n<p>备注：缓存利用率参考存储体系结构 以及 局部原理性。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0d4a738049164b5d82d339980f2081e4.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\630b5ff63f4e49dabb509cf3c7a7ed22.png\"/></p>\n<h1><a id=\"5__462\"></a>5 栈</h1>\n<h2><a id=\"51__463\"></a>5.1 栈的概念及结构</h2>\n<blockquote>\n<p>栈：一种特殊的线性表，其只允许在固定的一端进行插入和删除元素操作。进行数据插入和删除操作的一端称为栈顶，另一端称为栈底。栈中的数据元素遵守后进先出LIFO（Last In First Out）的原则。<br/> 压栈：栈的插入操作叫做进栈/压栈/入栈，入数据在栈顶。<br/> 出栈：栈的删除操作叫做出栈。出数据也在栈顶。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\abe45af91902428a94dcbf96b078edb3.png\"/></p>\n<h2><a id=\"52__470\"></a>5.2 栈的实现</h2>\n<p>栈的实现一般可以使用<strong>数组或者链表</strong>实现，相对而言数组的结构实现更优一些。因为数组在尾上插入数据的代价比较小。</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">// 下面是定长的静态栈的结构，实际中一般不实用，所以我们主要实现下面的支持动态增长的栈</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> STDataType<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">N</span> <span class=\"token expression\"><span class=\"token number\">10</span></span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stack</span>\n<span class=\"token punctuation\">{<!-- --></span>\nSTDataType _a<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> _top<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 栈顶</span>\n<span class=\"token punctuation\">}</span>Stack<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 支持动态增长的栈</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> STDataType<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stack</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tSTDataType<span class=\"token operator\">*</span> _a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _top<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 栈顶</span>\n\t<span class=\"token keyword\">int</span> _capacity<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 容量</span>\n<span class=\"token punctuation\">}</span>Stack<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 初始化栈</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">StackInit</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 入栈</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">StackPush</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">,</span> STDataType data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 出栈</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">StackPop</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取栈顶元素</span>\nSTDataType <span class=\"token function\">StackTop</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取栈中有效元素个数</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">StackSize</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 检测栈是否为空，如果为空返回非零结果，如果不为空返回0</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">StackEmpty</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 销毁栈</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">StackDestroy</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">StackInit</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tps<span class=\"token operator\">-&gt;</span>data <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tps<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tps<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">StackPush</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">,</span> STDataType data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ps<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">==</span> ps<span class=\"token operator\">-&gt;</span>capacity<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tps<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ps<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">4</span> <span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> ps<span class=\"token operator\">-&gt;</span>capacity<span class=\"token punctuation\">;</span>\n\t\tSTDataType<span class=\"token operator\">*</span> newdata <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>STDataType<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>ps<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>STDataType<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> ps<span class=\"token operator\">-&gt;</span>capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newdata <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"realloc fail\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tps<span class=\"token operator\">-&gt;</span>data <span class=\"token operator\">=</span> newdata<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tps<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>ps<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n\tps<span class=\"token operator\">-&gt;</span>top<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">StackPop</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tps<span class=\"token operator\">-&gt;</span>top<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\nSTDataType <span class=\"token function\">StackTop</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> ps<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>ps<span class=\"token operator\">-&gt;</span>top<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">StackSize</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> ps<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">StackEmpty</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>ps<span class=\"token operator\">-&gt;</span>top<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">StackDestroy</span><span class=\"token punctuation\">(</span>Stack<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ps<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tps<span class=\"token operator\">-&gt;</span>data <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tps<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tps<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"6__567\"></a>6 队列</h1>\n<h2><a id=\"61__568\"></a>6.1 队列的概念及结构</h2>\n<blockquote>\n<p>队列：只允许在一端进行插入数据操作，在另一端进行删除数据操作的特殊线性表，队列具有先进先出FIFO(First In First Out) 入队列：<br/> 进行插入操作的一端称为<strong>队尾</strong><br/> 出队列：进行删除操作的一端称为<strong>队头</strong></p>\n</blockquote>\n<h2><a id=\"62__573\"></a>6.2 队列的实现</h2>\n<blockquote>\n<p>队列也可以数组和链表的结构实现，使用链表的结构实现更优一些，因为如果使用数组的结构，出队列在数组头上出数据，效率会比较低。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7c948a6ff4e84bdb9e0c64149af3b2db.png\"/></p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">// 链式结构：表示队列</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">QListNode</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">QListNode</span><span class=\"token operator\">*</span> _pNext<span class=\"token punctuation\">;</span>\n\tQDataType _data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>QNode<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 队列的结构</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Queue</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tQNode<span class=\"token operator\">*</span> _front<span class=\"token punctuation\">;</span>\n\tQNode<span class=\"token operator\">*</span> _rear<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>Queue<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 初始化队列</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">QueueInit</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 队尾入队列</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">QueuePush</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> q<span class=\"token punctuation\">,</span> QDataType data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 队头出队列</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">QueuePop</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取队列头部元素</span>\nQDataType <span class=\"token function\">QueueFront</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取队列队尾元素</span>\nQDataType <span class=\"token function\">QueueBack</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取队列中有效元素个数</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">QueueSize</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 检测队列是否为空，如果为空返回非零结果，如果非空返回0</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">QueueEmpty</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 销毁队列</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">QueueDestroy</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">QueueInit</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> q<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tq<span class=\"token operator\">-&gt;</span>front <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tq<span class=\"token operator\">-&gt;</span>rear <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">QueuePush</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> q<span class=\"token punctuation\">,</span> QDataType data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tQNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>QNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>QNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newnode <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"malloc fail\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tnewnode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tnewnode<span class=\"token operator\">-&gt;</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q<span class=\"token operator\">-&gt;</span>rear <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tq<span class=\"token operator\">-&gt;</span>front <span class=\"token operator\">=</span> q<span class=\"token operator\">-&gt;</span>rear <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tq<span class=\"token operator\">-&gt;</span>rear<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n\t\tq<span class=\"token operator\">-&gt;</span>rear <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">QueuePop</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> q<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">-&gt;</span>front<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tQNode<span class=\"token operator\">*</span> del <span class=\"token operator\">=</span> q<span class=\"token operator\">-&gt;</span>front<span class=\"token punctuation\">;</span>\n\tq<span class=\"token operator\">-&gt;</span>front <span class=\"token operator\">=</span> q<span class=\"token operator\">-&gt;</span>front<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>del<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q<span class=\"token operator\">-&gt;</span>front <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tq<span class=\"token operator\">-&gt;</span>rear <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\nQDataType <span class=\"token function\">QueueFront</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> q<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">-&gt;</span>front<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> q<span class=\"token operator\">-&gt;</span>front<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nQDataType <span class=\"token function\">QueueBack</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> q<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">-&gt;</span>rear<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> q<span class=\"token operator\">-&gt;</span>rear<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">QueueEmpty</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> q<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q<span class=\"token operator\">-&gt;</span>front <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">QueueDestroy</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> q<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">-&gt;</span>front<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tQNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> q<span class=\"token operator\">-&gt;</span>front<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tQNode<span class=\"token operator\">*</span> del <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>del<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tq<span class=\"token operator\">-&gt;</span>rear <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>另外扩展了解一下，实际中我们有时还会使用一种队列叫循环队列。如操作系统课程讲解生产者消费者模型时可以就会使用循环队列。环形队列可以使用数组实现，也可以使用循环链表实现。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d181edf6ecab49318b70f6ecc7c77f05.png\"/><br/> <strong>这里有一个问题：如何判断一个循环是否为空？</strong><br/> 有两种方案：</p>\n<ol><li>在定义循环队列时，多定义一个元素，让其代表该队列的长度</li><li>将循环队列的容量改为需求的<strong>容量＋1</strong></li></ol>\n<h1><a id=\"7__694\"></a>7 树</h1>\n<h2><a id=\"71__695\"></a>7.1 树的概念</h2>\n<blockquote>\n<p>树是一种<strong>非线性</strong>的数据结构，它是由n（n&gt;=0）个有限结点组成一个具有<strong>层次关系的集合</strong>。<br/> 把它叫做树是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。</p>\n<ul><li>有一个特殊的结点，称为根结点，根节点没有前驱结点</li><li>除根节点外，**其余结点被分成M(M&gt;0)个互不相交的集合T1、T2、……、Tm，**其中每一个集合Ti(1&lt;= i&lt;= m)又是一棵结构与树类似的子树。每棵子树的根结点有且只有一个前驱，可以有0个或多个后继。</li><li>因此，树是递归定义的。</li></ul>\n</blockquote>\n<p><mark>注意：树形结构中，子树之间不能有交集，否则就不是树形结构</mark><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\41a3266835834f3d8c6ff5b008dc15ce.png\"/></p>\n<h2><a id=\"72__704\"></a>7.2 树的相关概念</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a76e8cd3f49f40c6a8eb3f3f09a534b7.png\"/></p>\n<ul><li><strong>节点的度</strong>：一个节点含有的子树的个数称为该节点的度； 如上图：A的为6</li><li><strong>叶节点或终端节点</strong>：度为0的节点称为叶节点； 如上图：B、C、H、I…等节点为叶节点</li><li><strong>非终端节点或分支节点</strong>：度不为0的节点； 如上图：D、E、F、G…等节点为分支节点</li><li><strong>双亲节点或父节点</strong>：若一个节点含有子节点，则这个节点称为其子节点的父节点； 如上图：A是B的父节点</li><li><strong>孩子节点或子节点</strong>：一个节点含有的子树的根节点称为该节点的子节点； 如上图：B是A的孩子节点</li><li><strong>兄弟节点</strong>：具有相同父节点的节点互称为兄弟节点； 如上图：B、C是兄弟节点</li><li><strong>树的度</strong>：一棵树中，最大的节点的度称为树的度； 如上图：树的度为6</li><li><strong>节点的层次</strong>：从根开始定义起，根为第1层，根的子节点为第2层，以此类推；</li><li><strong>树的高度或深度</strong>：树中节点的最大层次； 如上图：树的高度为4</li><li><strong>堂兄弟节点</strong>：双亲在同一层的节点互为堂兄弟；如上图：H、I互为兄弟节点</li><li><strong>节点的祖先</strong>：从根到该节点所经分支上的所有节点；如上图：A是所有节点的祖先</li><li><strong>子孙</strong>：以某节点为根的子树中任一节点都称为该节点的子孙。如上图：所有节点都是A的子孙</li><li><strong>森林</strong>：由m（m&gt;0）棵互不相交的树的集合称为森林；</li></ul>\n<h2><a id=\"73__720\"></a>7.3 树的表示</h2>\n<blockquote>\n<p>树结构相对线性表就比较复杂了，要存储表示起来就比较麻烦了，<strong>既然保存值域，也要保存结点和结点之间</strong>的关系，实际中树有很多种表示方式如：双亲表示法，孩子表示法、孩子双亲表示法以及孩子兄弟表示法等。我们这里就简单的了解其中最常用的<strong>孩子兄弟表示法</strong>。</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> DataType<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> _firstChild1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第一个孩子结点</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> _pNextBrother<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指向其下一个兄弟结点</span>\n\tDataType _data<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结点中的数据域</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"74__732\"></a>7.4 树在实际中的运用（表示文件系统的目录树结构）</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3743d8a808754ffe918bd10b8d94d475.png\"/></p>\n<h1><a id=\"8__734\"></a>8 二叉树</h1>\n<h2><a id=\"81__735\"></a>8.1 二叉树概念</h2>\n<blockquote>\n<p>一棵二叉树是结点的一个有限集合，该集合:</p>\n<ol><li>或者为空</li><li>由一个根节点加上两棵别称为左子树和右子树的二叉树组成<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a3799c3c1f8549cca7d4f9f7d368f62d.png\"/><br/> 从上图可以看出：</li></ol>\n</blockquote>\n<ol><li>二叉树不存在度大于2的结点</li><li>二叉树的子树有左右之分，次序不能颠倒，因此二叉树是有序树<br/> 注意：对于任意的二叉树都是由以下几种情况复合而成的：<br/> <img alt=\"x` \" src=\"..\\..\\static\\image\\bcfd3c28b01e49228a438b1d417a53de.png\"/></li></ol>\n<h2><a id=\"82__745\"></a>8.2 特殊的二叉树</h2>\n<ol><li>满二叉树：一个二叉树，如果每一个层的结点数都达到最大值，则这个二叉树就是满二叉树。也就是<br/> 说，如果一个二叉树的层数为K，且结点总数是 ，则它就是满二叉树。</li><li>完全二叉树：完全二叉树是效率很高的数据结构，完全二叉树是由满二叉树而引出来的。对于深度为K的，有n个结点的二叉树，当且仅当其每一个结点都与深度为K的满二叉树中编号从1至n的结点一一对应时称之为完全二叉树。 要注意的是满二叉树是一种特殊的完全二叉树。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\46617d3bee034c42b63f8cb21a9c0877.png\"/></li></ol>\n<h2><a id=\"83__750\"></a>8.3 二叉树的存储结构</h2>\n<p>二叉树一般可以使用两种结构存储，一种顺序结构，一种链式结构。<br/> <strong>1. 顺序存储</strong><br/> 顺序结构存储就是使用数组来存储，一般使用数组只适合表示完全二叉树，因为不是完全二叉树会有空间的浪费。而现实中使用中只有堆才会使用数组来存储。二叉树顺序存储在物理上是一个数组，在逻辑上是一颗二叉树。<br/> <strong>2. 链式存储</strong><br/> 二叉树的链式存储结构是指，用链表来表示一棵二叉树，即用链来指示元素的逻辑关系。 通常的方法是链表中每个结点由三个域组成，数据域和左右指针域，左右指针分别用来给出该结点左孩子和右孩子所在的链结点的存储地址 。链式结构又分为二叉链和三叉链。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5604444b5d3942b884e970df099e5491.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e68d0863beac4d0daf38f29a8db955d8.png\"/></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> BTDataType<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 二叉链</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">BinaryTreeNode</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">BinTreeNode</span><span class=\"token operator\">*</span> _pLeft<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指向当前节点左孩子</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">BinTreeNode</span><span class=\"token operator\">*</span> _pRight<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指向当前节点右孩子</span>\n\tBTDataType _data<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前节点值域</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 三叉链</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">BinaryTreeNode</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">BinTreeNode</span><span class=\"token operator\">*</span> _pParent<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指向当前节点的双亲</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">BinTreeNode</span><span class=\"token operator\">*</span> _pLeft<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指向当前节点左孩子</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">BinTreeNode</span><span class=\"token operator\">*</span> _pRight<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指向当前节点右孩子</span>\n\tBTDataType _data<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前节点值域</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"84__777\"></a>8.4 二叉树的顺序结构</h2>\n<p>普通的二叉树是不适合用数组来存储的，因为可能会存在大量的空间浪费。而完全二叉树更适合使用顺序结构存储。<mark><strong>现实中我们通常把堆(一种二叉树)使用顺序结构的数组来存储，需要注意的是这里的堆和操作系统虚拟进程地址空间中的堆是两回事，一个是数据结构，一个是操作系统中管理内存的一块区域分段。</strong></mark></p>\n<p>顺序结构的详解在下文的堆中展开</p>\n<h3><a id=\"85__782\"></a>8.5 二叉树的链式结构</h3>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> BTDataType<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BinaryTreeNode</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tBTDataType _data<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">BinaryTreeNode</span><span class=\"token operator\">*</span> _left<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">BinaryTreeNode</span><span class=\"token operator\">*</span> _right<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>BTNode<span class=\"token punctuation\">;</span>\t\n</code></pre>\n<h3><a id=\"851__792\"></a>8.5.1 二叉树的遍历</h3>\n<h4><a id=\"8511__793\"></a>8.5.1.1 前序、中序以及后序遍历</h4>\n<p>按照规则，二叉树的遍历有：<strong>前序/中序/后序的递归结构遍历：</strong></p>\n<ol><li>前序遍历(Preorder Traversal 亦称先序遍历)——访问根结点的操作发生在遍历其左右子树之前。</li><li>中序遍历(Inorder Traversal)——访问根结点的操作发生在遍历其左右子树之中（间）。</li><li>后序遍历(Postorder Traversal)——访问根结点的操作发生在遍历其左右子树之后。</li></ol>\n<h4><a id=\"8512__798\"></a>8.5.1.2 层序遍历</h4>\n<p>层序遍历：除了先序遍历、中序遍历、后序遍历外，还可以对二叉树进行层序遍历。<br/> 设二叉树的根节点所在层数为1，层序遍历就是从所在二叉树的根节点出发，首先访问第一层的树根节点，然后从左到右访问第2层上的节点，接着是第三层的节点，以此类推，自上而下，自左至右逐层访问树的结点的过程就是层序遍历。</p>\n<h1><a id=\"9__801\"></a>9 堆</h1>\n<h2><a id=\"91__802\"></a>9.1 堆的概念及结构</h2>\n<blockquote>\n<p>如果有一个关键码的集合K = { ， ， ，…， }，把它的所有元素按完全二叉树的顺序存储方式存储在一个一维数组中，并满足： &lt;= 且 &lt;= ( &gt;= 且 &gt;= ) i = 0，1，2…，则称为小堆(或大堆)。将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。</p>\n</blockquote>\n<p><mark>堆的性质：</mark></p>\n<ul><li>堆中某个节点的值总是不大于或不小于其父节点的值；</li><li>堆总是一棵完全二叉树</li></ul>\n<h2><a id=\"92__809\"></a>9.2 堆的实现</h2>\n<h3><a id=\"921__810\"></a>9.2.1 堆向下调整算法</h3>\n<blockquote>\n<p>现在我们给出一个数组，逻辑上看做一颗完全二叉树。我们通过从根节点开始的向下调整算法可以把它调整成一个小堆。<br/> <strong>向下调整算法有一个前提：左右子树必须是一个堆，才能调整。</strong></p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">27</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">65</span><span class=\"token punctuation\">,</span><span class=\"token number\">49</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">37</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\756670c9a2b54a5bae18b7ee26cd73c9.png\"/></p>\n<h3><a id=\"922__818\"></a>9.2.2 堆的构建</h3>\n<blockquote>\n<p>下面我们给出一个数组，这个数组逻辑上可以看做一颗完全二叉树，但是还不是一个堆，现在我们通过算法，把它构建成一个堆。根节点左右子树不是堆，我们怎么调整呢？这里我们从倒数的第一个非叶子节点的子树开始调整，一直调整到根节点的树，就可以调整成堆。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8681a7217e2b4bfab08ea5417c025cb8.png\"/><br/> 建堆有两种方法：</p>\n<ol><li>从树的第一层向上建堆</li><li>从树的倒数第二层向下建堆</li></ol>\n<p><strong>这两种方案哪个更好呢？</strong><br/> <mark>答案是从树的倒数第二层向下建堆</mark></p>\n<p><strong>众所周知，二叉树的层数越高，该层的节点数也就越多，第二种方案中省去了调整二叉树最后一层的时间，就使得该方案的效率大大提高了。</strong></p>\n<h3><a id=\"923__831\"></a>9.2.3 堆的代码实现</h3>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> HPDataType<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Heap</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tHPDataType<span class=\"token operator\">*</span> _a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _size<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _capacity<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>Heap<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 堆的构建</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">HeapCreate</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> hp<span class=\"token punctuation\">,</span> HPDataType<span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 堆的销毁</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">HeapDestory</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> hp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 堆的插入</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">HeapPush</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> hp<span class=\"token punctuation\">,</span> HPDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 堆的删除</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">HeapPop</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> hp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 取堆顶的数据</span>\nHPDataType <span class=\"token function\">HeapTop</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> hp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 堆的数据个数</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">HeapSize</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> hp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 堆的判空</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">HeapEmpty</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> hp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>HPDataType<span class=\"token operator\">*</span> x1<span class=\"token punctuation\">,</span> HPDataType<span class=\"token operator\">*</span> x2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tHPDataType x <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>x1<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>x1 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>x2<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>x2 <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">void</span> <span class=\"token function\">AdjustDown</span><span class=\"token punctuation\">(</span>HPDataType<span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> root<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> parent <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> child <span class=\"token operator\">=</span> parent<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">// 选左右孩纸中大的一个</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> n \n\t\t\t<span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>child<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> a<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token operator\">++</span>child<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n \n\t\t<span class=\"token comment\">//如果孩子大于父亲，进行调整交换 </span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> a<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tparent <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span>\n\t\t\tchild <span class=\"token operator\">=</span> parent<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">void</span> <span class=\"token function\">AdjustUp</span><span class=\"token punctuation\">(</span>HPDataType<span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> child<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tparent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>child<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//while (parent &gt;= 0)</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//如果孩子大于父亲，进行交换</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> a<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tchild <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\t\tparent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>child<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">void</span> <span class=\"token function\">HeapInit</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> hp<span class=\"token punctuation\">,</span> HPDataType<span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>hp <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\thp<span class=\"token operator\">-&gt;</span>_a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HPDataType<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>HPDataType<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\thp<span class=\"token operator\">-&gt;</span>_size <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n\thp<span class=\"token operator\">-&gt;</span>_capacity <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n \n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\thp<span class=\"token operator\">-&gt;</span>_a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n \n\t<span class=\"token comment\">// 建堆： 从最后一个非叶子节点开始进行调整</span>\n    <span class=\"token comment\">// 最后一个非叶子节点，按照规则： （最后一个位置索引 - 1） / 2</span>\n    <span class=\"token comment\">// 最后一个位置索引： n - 1</span>\n    <span class=\"token comment\">// 故最后一个非叶子节点位置： (n - 2) / 2</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">AdjustDown</span><span class=\"token punctuation\">(</span>hp<span class=\"token operator\">-&gt;</span>_a<span class=\"token punctuation\">,</span> hp<span class=\"token operator\">-&gt;</span>_size<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">void</span> <span class=\"token function\">HeapDestory</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> hp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>hp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>hp<span class=\"token operator\">-&gt;</span>_a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\thp<span class=\"token operator\">-&gt;</span>_a <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\thp<span class=\"token operator\">-&gt;</span>_size <span class=\"token operator\">=</span> hp<span class=\"token operator\">-&gt;</span>_capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">void</span> <span class=\"token function\">HeapPush</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> hp<span class=\"token punctuation\">,</span> HPDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>hp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//检查容量</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hp<span class=\"token operator\">-&gt;</span>_size <span class=\"token operator\">==</span> hp<span class=\"token operator\">-&gt;</span>_capacity<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\thp<span class=\"token operator\">-&gt;</span>_capacity <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\thp<span class=\"token operator\">-&gt;</span>_a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HPDataType<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>hp<span class=\"token operator\">-&gt;</span>_a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>HPDataType<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>hp<span class=\"token operator\">-&gt;</span>_capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//尾插</span>\n\thp<span class=\"token operator\">-&gt;</span>_a<span class=\"token punctuation\">[</span>hp<span class=\"token operator\">-&gt;</span>_size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\thp<span class=\"token operator\">-&gt;</span>_size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//向上调整</span>\n\t<span class=\"token function\">AdjustUp</span><span class=\"token punctuation\">(</span>hp<span class=\"token operator\">-&gt;</span>_a<span class=\"token punctuation\">,</span> hp<span class=\"token operator\">-&gt;</span>_size<span class=\"token punctuation\">,</span> hp<span class=\"token operator\">-&gt;</span>_size<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">void</span> <span class=\"token function\">HeapPop</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> hp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>hp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//交换</span>\n\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>hp<span class=\"token operator\">-&gt;</span>_a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>hp<span class=\"token operator\">-&gt;</span>_a<span class=\"token punctuation\">[</span>hp<span class=\"token operator\">-&gt;</span>_size<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\thp<span class=\"token operator\">-&gt;</span>_size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//向下调整</span>\n\t<span class=\"token function\">AdjustDown</span><span class=\"token punctuation\">(</span>hp<span class=\"token operator\">-&gt;</span>_a<span class=\"token punctuation\">,</span> hp<span class=\"token operator\">-&gt;</span>_size<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \nHPDataType <span class=\"token function\">HeapTop</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> hp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>hp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> hp<span class=\"token operator\">-&gt;</span>_a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">int</span> <span class=\"token function\">HeapSize</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> hp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> hp<span class=\"token operator\">-&gt;</span>_size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">int</span> <span class=\"token function\">HeapEmpty</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> hp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> hp<span class=\"token operator\">-&gt;</span>_size <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">void</span> <span class=\"token function\">HeapPrint</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> hp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> hp<span class=\"token operator\">-&gt;</span>_size<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> hp<span class=\"token operator\">-&gt;</span>_a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"93__996\"></a>9.3 堆的应用</h2>\n<h3><a id=\"931__997\"></a>9.3.1 堆排序</h3>\n<p>堆排序即利用堆的思想来进行排序，总共分为两个步骤：</p>\n<ol><li>建堆</li></ol>\n<ul><li>升序：建大堆</li><li>降序：建小堆</li></ul>\n<ol start=\"2\"><li>利用堆删除思想来进行排序</li></ol>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\abd630a9876544f78955f9d02acde15f.png\"/><br/> <mark>具体的代码实现将在后续的排序总结中涉及</mark></p>\n<h3><a id=\"932_TOPK_1008\"></a>9.3.2 TOP-K问题</h3>\n<p><strong>TOP-K问题：即求数据结合中前K个最大的元素或者最小的元素，一般情况下数据量都比较大。</strong><br/> 比如：专业前10名、世界500强、富豪榜、游戏中前100的活跃玩家等。<br/> 对于Top-K问题，能想到的最简单直接的方式就是排序，但是：如果数据量非常大，排序就不太可取了(可能数据都不能一下子全部加载到内存中)。最佳的方式就是用堆来解决，基本思路如下：</p>\n<ol><li><strong>用数据集合中前K个元素来建堆</strong><br/> 前k个最大的元素，则建小堆<br/> 前k个最小的元素，则建大堆</li><li><strong>用剩余的N-K个元素依次与堆顶元素来比较，不满足则替换堆顶元素</strong><br/> 将剩余N-K个元素依次与堆顶元素比完之后，堆中剩余的K个元素就是所求的前K个最小或者最大的元素。</li></ol>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-03 09:17:25", "summary": "文章目录数据结构的定义线性表顺序表概念及结构接口实现顺序表的问题及思考链表链表的概念及结构链表的分类单向无头链表的实现顺序表和链表的区别栈栈的概念及结构栈的实现队列队列的概念及结构队列的实现树树的概念"}