{"blogid": "121490654", "writerAge": "码龄2年", "writerBlogNum": "9", "writerCollect": "56", "writerComment": "0", "writerFan": "7", "writerGrade": "2级", "writerIntegral": "100", "writerName": "仓鼠毛吉", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_121490654.jpg", "writerRankTotal": "95502", "writerRankWeekly": "282893", "writerThumb": "10", "writerVisitNum": "16521", "blog_read_count": "4148", "blog_time": "于 2021-11-23 12:58:33 发布", "blog_title": "Unity粒子系统学习笔记", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><ul><li><a href=\"#_1\">粒子系统</a></li><li><a href=\"#_37\">粒子的基本参数</a></li><li><ul><li><a href=\"#_39\">粒子形状</a></li><li><a href=\"#_76\">粒子移动</a></li><li><a href=\"#_95\">粒子的发生</a></li></ul>\n</li><li><a href=\"#_167\">粒子发生器的形状</a></li><li><ul><li><a href=\"#Cone_178\">Cone发射器</a></li><li><a href=\"#Sphere_197\">Sphere发生器</a></li><li><a href=\"#Box_211\">Box发生器</a></li></ul>\n</li><li><a href=\"#_226\">粒子渐变</a></li><li><ul><li><a href=\"#_228\">颜色/透明度渐变</a></li><li><a href=\"#_244\">粒子大小渐变</a></li><li><a href=\"#_270\">粒子速度渐变</a></li><li><a href=\"#_299\">噪声干扰</a></li></ul>\n</li><li><a href=\"#_320\">练习：萤火虫</a></li><li><a href=\"#_353\">粒子动画</a></li><li><a href=\"#_406\">粒子进阶参数</a></li><li><ul><li><a href=\"#_418\">预热/粒子旋转</a></li><li><a href=\"#_432\">拉伸渲染</a></li></ul>\n</li><li><a href=\"#_468\">粒子着色器</a></li><li><ul><li><a href=\"#_489\">颜色叠加</a></li><li><a href=\"#_540\">背景叠加</a></li></ul>\n</li><li><a href=\"#_587\">爆炸效果</a></li><li><a href=\"#_627\">粒子与光照</a></li><li><a href=\"#_671\">拖尾效果</a></li><li><a href=\"#_719\">子发射器</a></li><li><a href=\"#_750\">粒子碰撞</a></li><li><ul><li><a href=\"#SendCollisionMessage_785\">SendCollisionMessage</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"_1\"></a>粒子系统</h2>\n<p>粒子系统ParticleSystem用于在Unity中模拟无形的，流动的物质，例如液体，烟雾，火焰，爆炸，魔法等。在Hierarchy层级栏中可以添加粒子系统：Effects/ParticleSystem。</p>\n<p>ParticleSystem会自动生成一个粒子发生器，Inspector中可以看到它包含一个主模块和22个子模块。</p>\n<p>Scene中会出现粒子预览窗口，方便调节。</p>\n<p>默认启用了Emission/Shape/Render三个模块，它们用来控制粒子的形状，速度，颜色等等。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\67acb74593cd4fbc96301704cafc94fb.png\"/></p>\n<p>对象的橘黄色框可以打开Gizmos，关掉SelectionOutline。字体可以通过Edit/Preferences/UIScaling调整</p>\n<p>粒子预览窗口：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0dea79689a6a4fdfa6ba627a396ca3b1.png\"/></p>\n<p>控制粒子发生的一些参数：</p>\n<p>PlaybackSpeed：粒子总体速度(生成速度，移动速度)</p>\n<p>PlaybackTime：已运行时间</p>\n<p>Particles：当前在屏幕中的粒子数</p>\n<p>SpeedRange：粒子速度上下限</p>\n<p>模块Module：默认启动了主模块Main，发生频率Emission，发生器形状Shape，粒子的显示Renderer</p>\n<h2><a id=\"_37\"></a>粒子的基本参数</h2>\n<h3><a id=\"_39\"></a>粒子形状</h3>\n<p>粒子的形状是在<strong>Render模块</strong>当中进行定义的，修改粒子的形状，需要先得到一份粒子的贴图，在Ps中制作或从浏览器寻找，将它制作成材质：</p>\n<p>需要材质的Shader方式为Particles/StandardSurface，RenderingMode改为Additive(叠加型渲染模式)</p>\n<p>进入ParticleSystem，将材质拖入即可完成粒子形状的修改。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3c4c303f21934c6abb61b12283966d79.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5fe880bd091346aa84c4c4f1eadbbb1a.png\"/></p>\n<p>粒子的大小在主模块当中进行修改，主模块当中的<strong>StartSize可以控制粒子初始的大小</strong>，也可以点击它右边的下拉栏让它变成在两个数的区间里随机的大小：选择RandomBetweenTwoConstants。可以明显看到粒子的大小变成了随机的。如果对粒子的形状仍然不满意的话，可以勾选3DStartSize来控制粒子在每个轴向的缩放大小。可以在<strong>Renderer模块</strong>下找到Pivot，修改每个粒子的轴心位置。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\078f6c5ec7a54387bde0856cd57b74b6.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e709737d1c494bf49c9cb9b9a70fdddc.png\"/></p>\n<p>另外，粒子的大小与它所使用的贴图大小是无关的，一个100像素的贴图与一个500像素的贴图绘制出来的同种粒子几乎差不多大，由此可见，<strong>StartSize规定了这个粒子的直径</strong>，而不是贴图缩放。将材质的渲染方式设置成Opaque(不透明模式)，可以发现两张这两种粒子的大小一样。</p>\n<p>粒子默认是以BillBoard模式显示的(2D渲染)，类似于Terrain中的花草。BillBoard(广告牌)会让物体永远正面对准镜头。</p>\n<p>粒子的颜色也可以在<strong>主模块</strong>中StartColor处设定，这个值可以是两个颜色之间的区间，也可以是随机色彩。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c601fddd3b384c83967136a0eefec0b4.png\"/></p>\n<p>值得注意的是，即便在StartColor中规定了粒子为绿色，显示出来的效果也不是纯绿色，粒子与粒子，天空，红色方块叠加的地方都变成了不一样的颜色，这是因为画<strong>面的最终显示效果是由着色器调控的</strong>，我们在设置粒子材质的时候，选择的RenderingMode为Additive(叠加的)，所以最终显示效果会受到粒子背后传来的光的影响从而发生变色。可以尝试选择不同的着色器选项观察变化。</p>\n<h3><a id=\"_76\"></a>粒子移动</h3>\n<p>粒子初始速度是在<strong>主模块</strong>定义的，<strong>StartSpeed</strong>就是控制这个速度的值，它也可以使用下拉栏，像规定粒子初始大小一样变成在两个数的区间里随机的速度。粒子的移动可以受到重力影响，同样在<strong>主模块</strong>中，可以使用GravityModifier规定这个粒子受到重力影响的系数(粒子无刚体，只能模拟)，同样它也可以被设定成两个数的区间里随机的系数。这样可以简单的达到有些粒子曲线移动的效果。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b3bf600be7c44fbb9f25247fd04616bc.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\203c798d700f4362a2b1972a0d178bbf.png\"/></p>\n<p>粒子的发射方向是由<strong>Shape模块</strong>决定的，打开Shape模块就可以看到现在的粒子是以什么方式发射的，是一个倒圆锥形向上发射的形式。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cc2f4773e5c440539674b0dd2c52d0b6.png\"/></p>\n<h3><a id=\"_95\"></a>粒子的发生</h3>\n<p>在<strong>主模块</strong>中,找到PlayOnAwake，这个参数控制这个粒子系统是否在对象初始化时就开始运行。我们可以使用代码来完成这个过程</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\56c09d62b6d4472bb0a62445965fce6b.png\"/></p>\n<pre><code class=\"prism language-c#\">public class ParticleCtrl : MonoBehaviour\n{\n    private ParticleSystem ps;\n    \n    void Start()\n    {\n        ps = GetComponent&lt;ParticleSystem&gt;();\n    }\n\n    void Update()\n    {\n        if (Input.GetButtonDown(\"Fire1\") &amp;&amp; !ps.isPlaying)\n        {\n            ps.Play();\n        }\n        else if(Input.GetButtonDown(\"Fire1\") &amp;&amp; ps.isPlaying)\n        {\n            ps.Stop();\n        }\n    }\n}\n</code></pre>\n<p><strong>主模块</strong>中的Looping表示这个粒子是否循环播放，如果不勾选，单词运行情况下Duration表示这个粒子系统运行时长。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\af620c366eab4e19b36bc7be47c26f1d.png\"/></p>\n<p><strong>主模块</strong>中的StartLifeTime控制每个粒子的生命周期，也就是<strong>粒子发生多长时间后消失</strong>，它可以是两个数字之间的随机值。根据数学理论，当前在场的粒子数量的平均值会是这两个数字间的中位数。</p>\n<p><strong>Emission模块</strong>中的RateOverTime可以控制该粒子系统每秒钟发射的粒子数量(匀速)，这个值也可以是两个数之间的随机值。</p>\n<p><strong>Emission模块</strong>中的Burst可以控制粒子爆发式产生：</p>\n<p>Time表示第一次爆发在生命周期的第几秒开始(如果这个值大于生命周期，则全程不爆发)</p>\n<p>Count表示每次爆发要生成多少粒子，它可以是两个数字之间的随机值</p>\n<p>Cycles表示在整个生命周期中最多爆发多少次，Infinite表示无限次</p>\n<p>Interval表示第一次爆发以后每次爆发的时间间隔</p>\n<p>Probability表示本次爆发有多大概率发生，是个概率</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\629452f607364542b47208a4ae7e6b82.png\"/></p>\n<p><strong>主模块</strong>中的MaxParticles可以控制该粒子系统承受的最大粒子数量，粒子超过这个数量后，<strong>不会销毁先出现的粒子，而是停止发生更多新粒子</strong>。</p>\n<p><strong>主模块</strong>中的SimulationSpace模拟粒子在生成后跟随哪个坐标系移动：</p>\n<p>Local：粒子生成后跟随粒子发生器坐标的移动而移动，这个模式下，粒子发生器的移动会表现在每个粒子上。</p>\n<p>World：粒子生成后不跟随粒子发生器，直接在世界坐标系中移动。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5d3d1d41da57436f810d351de21ab5d0.png\"/></p>\n<h2><a id=\"_167\"></a>粒子发生器的形状</h2>\n<p>粒子不可以只能向上发射，关于粒子发射的方向，坐标之类的设置是粒子发生器操控的，<strong>Shape模块</strong>控制了粒子发生器的形状，选中粒子系统，边缘的蓝色线框就是粒子发生器的形状，这个形状可以使用Shape参数来调控：发生器的方向暗示了粒子的发射方式</p>\n<p>Cone：圆锥型(手电筒) Sphere：球形(四面八方) Box：盒型(单方向发射)</p>\n<p>Shape模块中也可以设置形状的各种参数，比如Position，Rotation，Scale等，这个值是<strong>相对于该游戏物体Pivot的另外一个类似Transform的组件</strong>，不可以通过左上角的快捷工具修改它的值，那样只能修改该粒子系统的整体Transform。需要修改粒子发生器的PRS参数的话，Shape模块有自带的工具可以修改。如果只修改粒子系统的Transform，会看到生成的粒子也跟着变化了。但<strong>使用Shape模块改变粒子发生器的PRS就不会改变生成的粒子</strong>。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f948ec1cd8bc4412956440fd100fe9fb.png\"/></p>\n<h3><a id=\"Cone_178\"></a>Cone发射器</h3>\n<p>Cone圆锥形发射器：让粒子像手电筒的光一样从一点开始向一个圆型扇出。参数：</p>\n<p>Angle：圆锥体的倾斜角度</p>\n<p>Radius：圆锥体的底面半径</p>\n<p>RadiusThickne：径向厚度</p>\n<p>EmitFrom：从何处发射(Base：圆锥底部 Volume：圆锥体内部)</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-jleUN4jO-1637642506367)(E:\\Paintings\\UnityProject\\test3D\\pic\\image-20211120121143931.png)]</p>\n<p>关于径向厚度：表示下图<strong>内部圆锥相当于整个圆锥的半径的倍率</strong>，是0~1之间的值，如果设置了径向厚度，那么粒子只能在两个圆锥之间的空间内生成。(某些时候很有用)</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\46f11345e8b6464aafe2e0e49dce6ad0.png\"/></p>\n<h3><a id=\"Sphere_197\"></a>Sphere发生器</h3>\n<p>Sphere球型发生器可以向四面八方发射粒子，Hemisphere半球形发生器则是Sphere的一半。参数：</p>\n<p>Radius：控制Sphere球型的半径</p>\n<p>RadiusThickness：径向厚度(类似于Cone的径向厚度，也是控制粒子发生的范围)</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ee2633e43e114259b3a726202f8b6cd3.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\909e23623e1642eab3480eabe0f81ec1.png\"/></p>\n<h3><a id=\"Box_211\"></a>Box发生器</h3>\n<p>Box盒型发生器可以让所有粒子向单一方向发射，可以很好的模拟雨雪类粒子效果。参数：</p>\n<p>EmitFrom：盒型发生器内粒子的发生位置(Volume：体积内随机位置 Shell：表面随机位置 Edge：前后左右四个面随机位置)</p>\n<p>Box发生器最主要的是灵活使用PRS三个值，可以使用这个模拟很多雨雪类飘落，垂直上升等单方向的效果。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\006302c9f3e64bf4bf9556b472234655.png\"/></p>\n<p>其余的发生器都可以使用以上三种类推</p>\n<h2><a id=\"_226\"></a>粒子渐变</h2>\n<h3><a id=\"_228\"></a>颜色/透明度渐变</h3>\n<p>粒子的生成和消失如果都是瞬间发生的话，观感会下降，所以需要在粒子生成和销毁的过程中添加渐变。</p>\n<p>勾选<strong>ColorOverLifeTime模块</strong>(颜色随生命周期渐变)，点击内部的Color条，进入GradienEdit窗口。白条上方用来调整透明度渐变，下方用来调整颜色渐变。</p>\n<p>点击条上方、下方的空白处新建节点。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\551149c66c14430a97672e0636d2d096.png\"/></p>\n<p>让粒子在生成，销毁都有渐变：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d1f6a6688dff463091fdc87b5d3156ef.png\"/></p>\n<h3><a id=\"_244\"></a>粒子大小渐变</h3>\n<p>粒子在生成到销毁的过程中，大小可以通过贝塞尔曲线控制，勾选<strong>SizeOverLifeTime模块</strong>。模块内的Size就是大小渐变，它有三个模式：</p>\n<p>Curve：常规曲线 RandomBetweenTwoConstants：在两个数之间随机 RandomBetweenTwoCurves：在两个曲线间随机</p>\n<p>将曲线点红，下方出现ParticleSystemCurves栏可以调整贝塞尔曲线。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e8ddc7fa2196423aae8f84cfac646911.png\"/></p>\n<p>烟花式爆炸：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\329267e677da4360bbed58b6abad43d9.png\"/></p>\n<p>泡泡：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c6f1eb029ca7452b805be5d8d7298c13.png\"/></p>\n<p>烟雾消散：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1de068a7216a40adaf3d101adbd351ce.png\"/></p>\n<h3><a id=\"_270\"></a>粒子速度渐变</h3>\n<p>粒子在生成后的速度，移动方向，旋转都可以通过<strong>VelocityOverLifeTime模块</strong>进行控制。参数：</p>\n<p>Linear：线速度，这个值让粒子生成后可以向指定方向漂移</p>\n<p>Orbital：轨道速度，这个值可以让粒子生成后绕某个点转动</p>\n<p>Offset：Orbital所环绕的中心点的位置(粒子从发生器发射开始就绕这个点旋转，半径就是这个点到发生点的距离)</p>\n<p>Radial：径向速度(远离Offset点的速度，如果为负值则不断靠近Offset点)</p>\n<p>SpeedModifier：速度倍率(与StartSpeed相乘得到最终速度)</p>\n<p><strong>以上参数都可以设置为两个值之间随机数、曲线、两个曲线之间的随机曲线</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1ebc6c24271549a4a8a15ff2dfcbc157.png\"/></p>\n<p>如图：现在的Offset为20，粒子以x轴正方向2Unit远的点为圆心进行旋转。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\65db30b9377945fa8484f23b178578ea.png\"/></p>\n<p>如图：拉高粒子生成量，加大Orbital、Radial的值，Offset为20时生成的高速旋转图像：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b5d14d178e7344508c00fd14c902b9b6.png\"/></p>\n<h3><a id=\"_299\"></a>噪声干扰</h3>\n<p>噪声干扰意为使用<strong>噪声算法</strong>干预已经基本计算完毕的粒子的预定运动轨道，让其发生不规律的偏转，从而达到粒子随机移动的效果。</p>\n<p>重要的参数：</p>\n<p>Strength：噪声干扰对粒子作用的力度</p>\n<p>Frequency：干扰的频率(这个值越大，粒子的移动方向越多变)</p>\n<p>ScrollSpeed：噪声图的滚动速度</p>\n<p>SeparateAxes：是对三个轴向一同设置还是每个轴向单独设置</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0fc4ed10769447599df3e7f909ce14c5.png\"/></p>\n<p>干扰最好通过实地观察来判断并修改干扰参数。</p>\n<h2><a id=\"_320\"></a>练习：萤火虫</h2>\n<p>使用如下贴图制作模拟萤火虫的粒子系统</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fe94f6ec32234c399618f7d04bebb50f.png\"/></p>\n<p>材质的Shader：无光照影响的StandardUnlit，Additive叠加渲染模式</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\683335470f0b4a6f9e9db681a4fd1ef7.png\"/></p>\n<p>粒子系统使用Box形状：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1a4c209ab50f4ee2b713d4b0c5021175.png\"/></p>\n<p>初始速度设为0，设置VelocityOverLifeTime中Linear，让粒子生成后随机移动</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f46804062df9422aa24260a13de7ae70.png\"/></p>\n<p>设定StartSize，随机大小，StartColor，随机颜色</p>\n<p>设定ColorOverLifeTime，让粒子生成和消失都有透明度渐变</p>\n<p>设定SizeOverLifeTime，让粒子生命周期内大小渐变</p>\n<p>设定Noise</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\02715bebdc694faf9a00aa14d6215995.png\"/></p>\n<h2><a id=\"_353\"></a>粒子动画</h2>\n<p><strong>TextureSheetAnimation模块</strong>(纹理动画)是用来播放粒子动画的模块，粒子动画的原材料是一种纹理，它包含了一组<strong>帧动画</strong>，能够以动画方式渲染粒子。</p>\n<p>帧动画：使用多张图片，每张图片为一帧，构成一个完整的动画叫帧动画。或一张大图片，图片中包含了一个动画的所有帧的TIF图片(高质量位图)。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ce5a1a0162354f97b37a965543ced273.png\"/></p>\n<p>粒子动画材质：</p>\n<p>Shader：Particle/StandardUnlit</p>\n<p>RenderingMode：Fade(变暗)</p>\n<p>Albedo：纹理图片</p>\n<p>新建ParticleSystem，将纹理拖入，勾选TextureSheetAnimation，参数：</p>\n<p>Tiles：该材质的切割方式(共切割成几行几列)</p>\n<p>StartFrame：从第几帧开始播放，也可以设为两个帧间的随机值</p>\n<p>Cycles：表示这个帧动画在整个粒子的生命周期内播放几次，可以是小数</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\490aeda7d98948978763b181c16f3e12.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ccea555f57154484835a09d1838678b0.png\"/></p>\n<p>一些修改：</p>\n<p>火不能飞到天上，主模块中，将StartSpeed改为0，Shape改为Box，三个Scale都改为0，让火焰只在一个点生成。</p>\n<p>为了达到火的循环播放，需要<strong>让StartLifeTime生命周期与Emmision内的RateOverTime(每秒生成次数)相乘为1</strong>，这样可以保证前一个火焰消失的同时下一个火焰生成。Cycles(生命周期内播放次数)则可以调整速度。</p>\n<p>打开火焰的材质：选择Albedo右边的HDR可以调整贴图的颜色和亮度(Intensity)</p>\n<p>当我们需要同时预览多个粒子系统以观察总体效果时，不需要运行游戏来观察，可以使用父子关系来观察，当一个父级节点拥有ParticleSystem时，选中它可以同时观察它的所有子节点的ParticleSystem。即便父节点是个空对象+假ParticleSystem。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8043bcc5051b4efc9c05e594f9908d00.png\"/></p>\n<p>火焰2：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a3e4c6bf9f634aba80cee42137f10e51.png\"/></p>\n<h2><a id=\"_406\"></a>粒子进阶参数</h2>\n<p>明确一些基本参数：</p>\n<p>主模块中的Duration：粒子效果的持续时间(不勾选Looping的话这个时间一到就停止粒子发生)</p>\n<p>主模块中的StartLifeTime：粒子的生命周期(每个粒子在发生几秒后销毁)</p>\n<p>Emission模块中的RateOverTime：每秒钟生成多少个粒子</p>\n<p>TextureSheetAnimation模块中的Cycles：单次生命周期中该帧动画循环播放几次</p>\n<h3><a id=\"_418\"></a>预热/粒子旋转</h3>\n<p><strong>主模块</strong>中的Prewarm(预热)功能可以让粒子系统在启动前就提前渲染一个Duration，在开始播放后，可以观察到粒子系统不是从0开始发射粒子，而是突然出现一整个已经渲染好的粒子。(仅当Looping的时候有效)</p>\n<p><strong>主模块</strong>中的StartDelay(启动延迟)功能让粒子系统Play后延迟几秒启动。</p>\n<p><strong>主模块</strong>中的StartRotation控制粒子发生时的角度(粒子是二维图片，不需要轴向)，这个值可以是两个数之间的随机值。</p>\n<p><strong>主模块</strong>中的3DStartRotation可以控制粒子在各个轴向的旋转角度。</p>\n<p><strong>RotationOverLifeTime模块</strong>可以在粒子生命周期内动态的改变粒子的角速度。</p>\n<p><strong>主模块</strong>中的ScallingMode控制粒子的缩放方式，默认情况下是Local，粒子缩放会根据粒子系统的缩放而缩放，变扭曲。Hierarchy模式为根据父子节点的Scale综合计算，Shape模式下，粒子系统的缩放不影响粒子，只影响粒子发生器。</p>\n<h3><a id=\"_432\"></a>拉伸渲染</h3>\n<p>我们现在使用的粒子渲染模式为BillBoard广告牌模式，也就是说粒子会永远将正面朝向玩家；StretchedBillBoard拉伸广告牌模式下，粒子可以发生拉伸；HorizontalBillBoard模式下，粒子只会渲染水平方向；VerticalBillBoard模式下，粒子只会渲染垂直方向；</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2fbcdc6550034e7f86397df20f3c761d.png\"/></p>\n<p>StretchedBillBoard模式下的参数：</p>\n<p>CameraScale：随玩家摄像机移动发生拉伸(视觉残留)</p>\n<p>SpeedScale：向粒子移动方向，速度越大，拉伸越强</p>\n<p>LengthScale：根据粒子的移动方向，平行于移动方向的Scale比垂直于移动方向的Scale大多少倍</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3f477a689c16423bb1c1246897bb0305.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6cd8f997e031446bae79348a29acd789.png\"/></p>\n<p>HorizontalBillBoard：粒子只朝向水平方向，可以利用这个特性制作一些地面上的特效，例如标记，出生点等。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c1e978d066944605a4f4335bfc179b66.png\"/></p>\n<p>在Material中，可以勾选2D贴图的TwoSided，让其可以双面都得到渲染。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\578c1db8ef744b1d8304baaaa154683b.png\"/></p>\n<p>传送特效：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\730870c440a5489c8bc0b5addf89e9bd.png\"/></p>\n<h2><a id=\"_468\"></a>粒子着色器</h2>\n<p>打开材质的Shader选项，里面除了普通的Particles内的两个StandardSurface和StandardUnlit，还有几个地方能找到Particles的着色器：</p>\n<p>LegacyShaders/Particles下可以找到老版本遗留的粒子着色器；Mobile/Particles下可以找到适用于移动端低性能设备的粒子着色器。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e9d289a58d4b406195381dafc7d7e858.png\"/></p>\n<p>一般使用的粒子着色器：</p>\n<p>StandardSuface标准粒子着色器</p>\n<p>StandardUnlit(Un-Lighted)无光照运算粒子着色器</p>\n<p>也可以自己编写着色器</p>\n<p>00 00 00 ~ FF FF FF 为RGB颜色值</p>\n<h3><a id=\"_489\"></a>颜色叠加</h3>\n<p>颜色叠加为：粒子所使用的 <strong>材质的反照率贴图经过材质的HDR调整后的颜色</strong> 与 <strong>粒子系统内部的StartColor/ColorOverLifeTime所设定的颜色</strong> 的调和</p>\n<p>BlendingOptions(混合选项)中ColorMode(颜色叠加方式)下的系数：</p>\n<p>Multiply：重叠的两颜色相乘得到最终颜色 00 02 00 x 11 05 00 = 00 0A 00</p>\n<p>Additive：重叠的两颜色相加得到最终颜色 00 07 10 + 1A 54 11 = 1A 5B 21</p>\n<p>Subtractive：重叠的两颜色相减得到最终颜色 14 93 0A - 02 A1 55 = 12 02 05</p>\n<p>Overlay：提供更多与原始颜色的对比度，并将粒子贴图颜色与灰度值相加。与 Additive 相似，但保留原始颜色</p>\n<p>Color：使用粒子纹理的 Alpha 通道和粒子本身的贴图颜色。适用于改写相同颜色的粒子并同时保持其原始“形状”</p>\n<p>Differece：从纹理颜色中减去粒子贴图颜色，或从粒子贴图颜色中减去纹理颜色，从而获得正值。适用于想要更多动态颜色变化的一系列效果</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b6d7b46874a44467ade6e6e935357ce9.png\"/></p>\n<p>准备一个红色的粒子贴图，将贴图给Transparent+Additive的材质下，制作一个粒子系统输出：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\68850e17d3fc43a38e6da3d581c96979.png\"/></p>\n<p>白色方块是因为StartColor/ColorOverLifeTime现在是FF FF FF，与任何颜色的材质相加都得到FF FF FF(类似于 max + x = max)。</p>\n<p>将StartColor/ColorOverLifeTime设置为纯蓝色 00 00 FF，可以看到粒子贴图在StartColor/ColorOverLifeTime的叠加下变成了紫色。红色 FF 00 00 与蓝色 00 00 FF 相Additive得到了紫色 FF 00 FF</p>\n<p>Addictive：保留贴图中的白色，其他部分变暗。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7fb2d5ae37d04f0f8a52667c45721045.png\"/></p>\n<p>同样情况下当ColorMode改为Multiply后：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\673884438f25424499cacece4f48a4fe.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\beb204fd7d2b47b79e615024aaee9acf.png\"/></p>\n<p>红色 FF 00 00 与蓝色 00 00 FF 相Multiply得到了黑色 00 00 00 透明度由Shader内部进行修正</p>\n<p>贴图的黑色部分变成透明，其他颜色部分与StartColor做乘法得到最终颜色，如果StartColor为白色，则为原贴图。</p>\n<p>一般的纹理贴图都是黑白的</p>\n<h3><a id=\"_540\"></a>背景叠加</h3>\n<p>背景叠加为：<strong>从背景传到摄像机的颜色</strong>在经过材质时与<strong>材质的颜色</strong>所叠加形成的颜色</p>\n<p>新建一个材质，选择Shader为Particles/StandardUnlit，BlendingOptions(混合选项)中RenderingMode(背景叠加方式)下的系数：</p>\n<p>Opaque：默认，适合不透明对象</p>\n<p>Cutout：有透明效果，然而是二值的(只有完全透明和完全不透明两种)，适合衣物，布料，花草</p>\n<p>Transparent：逼真的透明材质(有透明值，还保留了反射和高光)，适合玻璃</p>\n<p>Fade：允许整个对象完全透明到不可见，无反射和高光，适用于淡出效果</p>\n<p><strong>Transparent和Fade模式下，还可以让阴影变透明</strong></p>\n<p>Additive：叠加，将背景颜色和最终粒子颜色相加，适合发光效果</p>\n<p>Subtractiv：相减，从背景中减去最终粒子颜色，适合蒸汽，浓雾等</p>\n<p>Modulate：相乘，将最终粒子颜色与背景颜色相乘，适合描绘光线</p>\n<p>当前贴图的Alpha通道(亮度越低，透明度越高)：黑色代表全透明，白色代表不透明</p>\n<p>也可以使用灰度取样模式，材质的AlphaSource改为FromGrayScale，自动通过灰度判断透明度。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5e8322d152174fe0ad4685a55f9a7724.png\"/></p>\n<p>Transparent：不管背景是什么颜色，都根据Alpha通道给定的透明度来：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\47d61dfbe96d49c29d6348acb45a824d.png\"/></p>\n<p>Additive：不管它是否透明，总会和背景颜色叠加产生新颜色，与透明度无关(原颜色上再加颜色，总会比原颜色亮)</p>\n<p><strong>使用Additive，可以将贴图的黑色背景去掉</strong>(任何颜色与黑色Additive都是原来的颜色，类似于 x + 0 = x)</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d77e63ac007d46d0bef8ac0776669a8f.png\"/></p>\n<p>红色 FF 00 00 与 蓝色方块 00 00 FF Additive 得到最终颜色 <strong>FF 00 FF</strong> (紫色)，红色 FF 00 00 与 黄色 FF FF 00 Additive 得到最终颜色 <strong>FF FF 00</strong> (黄色)</p>\n<h2><a id=\"_587\"></a>爆炸效果</h2>\n<p>爆炸特效的特点：一次性爆发数个粒子，生命周期较短，初速度较快</p>\n<p>Emission模块中选用Burst模式可以一次性爆发多个粒子。</p>\n<p>粒子的发射方向：</p>\n<p>发射粒子的Shape选用球形或者半球形，因为爆炸是从一个点迸发出来的。Renderer里选择RenderingMode为StretchedBillboard，让爆炸粒子在发生后面朝速度方向。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\566f7ed537f54cbebb962f811962e8e8.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b1e378eefd4c43c69997c8f212e35eb7.png\"/></p>\n<p>可以观察到，爆炸粒子的默认正面方向为材质的左面，如果材质不做成朝向左边的话：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f8e196144b544bd384d35f2f3564e518.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2bd9607bca504355b4b9495bd90cbacb.png\"/></p>\n<p>烟花：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/323e96ee8b6045e08f1d2e4eb1f13c3d.gif#pic_center\"/></p>\n<p>仿《只狼》刀剑碰撞：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/c6e62c1406d14854a5e6c7aeaa26a0e1.gif#pic_center\"/></p>\n<h2><a id=\"_627\"></a>粒子与光照</h2>\n<p>在Unity中，有一种能够发光的组件，光源组件Light，它也可以被直接创建在层级栏中，作为一个自动挂载了Light的游戏对象。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5bba84b07f1442c88cd749bf5b2b8d9b.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a486a487d5fd4268aad8018e698926ea.png\"/></p>\n<p>将点光源作为火焰的子对象并改变光色：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0566534030fe4273bfa86cadf2df4578.png\"/></p>\n<p>但是这样制作的光源不会晃动，没有火光的效果，所以需要让粒子发生后自带一个光源：</p>\n<p>粒子系统的<strong>Lights模块</strong>有这个功能：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9347311039c44458b71c9ce600d7f0e6.png\"/></p>\n<p>参数：</p>\n<p>Light：需要一个光源的Prefab，指定该粒子挂载什么样的光源</p>\n<p>Ratio：一个比例，表示有多少粒子会挂载Light，比如0.5表示有50%的粒子会携带光源</p>\n<p>MaximumLights：光源的最大数量，控制这个数量以免过载卡顿</p>\n<p>RandomDistribution：是否随机创建带光源的粒子</p>\n<p>UseParticleColor：使用粒子的颜色作为光源颜色(如果想自定义光源颜色就不要勾选)</p>\n<p>SizeAffectsRange：粒子大小影响光照范围</p>\n<p>AlphaAffectsIdensity：粒子贴图的Alpha值与光源强度成正比(越透明，光强度越小)</p>\n<p>RangeMultiplier：光照范围调节</p>\n<p>IntensityMultiplier：光照强度调节</p>\n<h2><a id=\"_671\"></a>拖尾效果</h2>\n<p>拖尾Trail是一种视觉效果，代表物体运动时在运动方向后方留下的尾巴。给粒子开启拖尾效果，首先需要一个拖尾材质，而且这个材质最好是前后能够无缝衔接的：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d3245c9b34dc465eb3ebaf6df969f276.png\"/></p>\n<p>勾选粒子系统的<strong>Trails模块</strong>，然后Renderer模块中就多出一个TrailMaterial，将拖尾的材质放入：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c9a3f19420ba48d08f54df2327cc472f.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4006ee808a454e02a274e7ffabf4e6a6.png\"/></p>\n<p>Trail模块的参数：</p>\n<p>LifeTime：拖尾的生命周期(其实是拖尾的长度)，这个值在0~1之间，如果为1，它在粒子的整个生命周期都不会消失任何一段，如果为0，它刚生成就消失了。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9b9e2075bc5249f58846ab54f4e43eb3.png\"/></p>\n<p>WidthOverTrail：拖尾的宽度渐变，这个值可以是两个数之间的随机值，也可以是关于生命周期的曲线，也可以是两个曲线之间的随机曲线。</p>\n<p>如果让拖尾宽度随生命周期减小：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ea0c537c943b4ba082b106c978998b4d.png\"/></p>\n<p>InheritParticleColor：拖尾颜色以粒子颜色为基础</p>\n<p>ColorOverTrail：拖尾的颜色渐变</p>\n<p>ColorOverLifeTime：拖尾的颜色随粒子的生命周期渐变</p>\n<p>Ratio：比例，有多少粒子生成后带有拖尾(如果不为1，有的粒子生成后不会带拖尾)</p>\n<p>DieWithParticles：随着粒子一同销毁(不勾选的话拖尾会逐一销毁)</p>\n<p>SizeAffectsWidth：粒子的大小影响拖尾的宽度</p>\n<p>MinimumVertexDistance：最小生成角距离，控制每个拖尾的旋转角度，可以让拖尾变得弯曲</p>\n<p>拖尾烟花：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\892fd9e9a5b74639ab601aaf6ed26222.png\"/></p>\n<h2><a id=\"_719\"></a>子发射器</h2>\n<p>子发射器SubEmitter，即二级发射器，一级发射器发射的粒子销毁、碰撞或发生一些事件时，子发射器发射二级粒子。</p>\n<p>勾选粒子系统的SubEmitter模块：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b384f96b7a5b4ff5bc85207febd019f3.png\"/></p>\n<p>SubEmitter模块可以控制多个子发射器，可以定制子发射器在一级粒子的什么情况下发射。而且发射时的位置为一级粒子事件发生时的位置。EmitProbability为1时，每个一级粒子都能创建一个子发射器，说明子发射器可能很多，它发射的二级粒子可能更多，可以使用子发射器的MaxParticles限制。</p>\n<p>何时发射二级粒子：</p>\n<p>Birth：一级粒子发生的同时附加子发射器，一级粒子进行时，二级发射器不断发射粒子，一级粒子销毁时，子发射器一并销毁；</p>\n<p>Collision：一级粒子碰撞时发射二级粒子；</p>\n<p>Death：一级粒子销毁时发射二级粒子；</p>\n<p>Trigger：一级粒子触发检测时发射二级粒子；</p>\n<p>想要发射二级粒子，就需要一个二级粒子的粒子系统，而且<strong>这个粒子系统必须是一级粒子系统的子对象</strong>。当选择Collision或Death事件触发子发射器时，一级发射器就必须使用Burst方式发射粒子。</p>\n<p>SubEmitter制作的烟花：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/41ea64a60e4d4816913b0f75d93c0bcf.gif#pic_center\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/fb9b61d71fa0455884b0cdc78103cecd.gif#pic_center\"/></p>\n<h2><a id=\"_750\"></a>粒子碰撞</h2>\n<p>粒子系统的<strong>Collision模块</strong>用于模拟粒子的碰撞效果，还可以在碰撞后触发一系列事件。参数：</p>\n<p>Type：碰撞类型 Planes：与指定<strong>平面</strong>(不是碰撞体)发生碰撞，无视其他类型 World：与世界中其他任何碰撞体发生碰撞</p>\n<p>Dampen：速度衰减量，代表发生碰撞后损失多少速度(%)</p>\n<p>Bounce：弹性系数</p>\n<p>CollidesWith：与哪些物体可以发生碰撞(以Layer分)</p>\n<p>LifeTimeLoss：生命周期衰减量，代表发生碰撞后缩短多少生命周期(%)</p>\n<p>MinKillSpeed：当速度小于此值时发生碰撞，粒子被销毁</p>\n<p>ColliderForce：碰撞力度<strong>的系数</strong> MultiplyByXXX：碰撞力度与XXX有关</p>\n<p>SendCollisionMessage：碰撞时调用事件函数OnParticleCollision</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d0aab14f55f54d47823edb5288e9bf10.png\"/></p>\n<p>碰撞后速度衰减：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\85d9ca425db54dcaa32966fdb0d969ef.png\"/></p>\n<p>弹性系数为0：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\05a40d16caa34288a785d2e895a337b4.png\"/></p>\n<p>这里的碰撞并没有物理系统的参与，只是粒子系统自己计算得出的。</p>\n<h3><a id=\"SendCollisionMessage_785\"></a>SendCollisionMessage</h3>\n<p>创建脚本，将它挂载到ParticleSystem下：</p>\n<pre><code class=\"prism language-c#\">public class MyEmitter : MonoBehaviour\n{\n    //子发射器的预制体\n    public GameObject subEffect;\n\n    private ParticleSystem ps;\n    //碰撞事件列表\n    private List&lt;ParticleCollisionEvent&gt; collisionEvents;\n\n    void Start()\n    {\n        ps = GetComponent&lt;ParticleSystem&gt;();\n        collisionEvents = new List&lt;ParticleCollisionEvent&gt;();\n    }\n\n    private void OnParticleCollision(GameObject other)\n    {\n        Debug.Log(\"OnParticleCollision \" + other.gameObject.name);\n\n        int numCollisionEvents = ps.GetCollisionEvents(other, collisionEvents);\n\n        //得到碰撞发生的位置并生成子发射器\n        for(int i = 0; i &lt; numCollisionEvents; i++)\n        {\n            //intersection:碰撞发生的位置\n            Vector3 pos = collisionEvents[i].intersection;\n            GameObject effect = Instantiate(subEffect, transform);\n            effect.transform.position = pos;\n            effect.GetComponent&lt;ParticleSystem&gt;().Play();\n        }\n    }\n}\n</code></pre>\n<p>将子发射器的预制体拖给脚本，子发生器的主模块：Looping设为false，PlayOnAwake设为false，StopAction设为Destroy，就可以模拟一级粒子碰撞到地面后溅起水花。主要是碰撞时获得一级粒子与地面发生碰撞的碰撞点坐标，然后在那个坐标生成子发射器。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6c240e54e86a442781432ba1a30bfecd.png\"/></p>\n<p>水面涟漪：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\830e7de3a01b4ce8ab367fe6b5fb8b86.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-11-23 12:58:33", "summary": "目录粒子系统粒子的基本参数粒子形状粒子移动粒子的发生粒子发生器的形状发射器发生器发生器粒子渐变颜色透明度渐变粒子大小渐变粒子速度渐变噪声干扰练习：萤火虫粒子动画粒子进阶参数预热粒子旋转拉伸渲染粒子着色"}