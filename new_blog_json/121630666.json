{"blogid": "121630666", "writerAge": "码龄11年", "writerBlogNum": "3785", "writerCollect": "5266", "writerComment": "522", "writerFan": "2659", "writerGrade": "9级", "writerIntegral": "63893", "writerName": "allway2", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_121630666.jpg", "writerRankTotal": "50", "writerRankWeekly": "1307", "writerThumb": "1069", "writerVisitNum": "4701363", "blog_read_count": "5591", "blog_time": "于 2021-11-30 13:38:43 发布", "blog_title": "在 Docker 中运行 PostgreSQL", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p style=\"margin-left:0;\"><span style=\"color:#000000;\"><span style=\"background-color:#ffffff;\"><strong>本教程将指导您完成如何在 Docker 容器内运行具有持久存储的 PostgreSQL 并连接到它的过程。</strong></span></span></p>\n<p style=\"margin-left:0;\"><span style=\"color:#000000;\"><span style=\"background-color:#ffffff;\"><strong>PostgreSQL</strong>是一个开源的对象关系数据库管理系统。它已经存在了 30 多年，并标榜自己是“世界上最先进的开源关系数据库”。</span></span></p>\n<p style=\"margin-left:0;\"><span style=\"color:#000000;\"><span style=\"background-color:#ffffff;\">在轻松打包、部署和运行分布式应用程序方面，<strong>Docker</strong>已成为 IT 行业的标准。Docker 容器让您可以快速启动新应用程序，而不会因依赖项而使您的系统变得混乱。</span></span></p>\n<p style=\"margin-left:0;\"><span style=\"color:#000000;\"><span style=\"background-color:#ffffff;\">您可以使用 Docker 在容器中运行 PostgreSQL 数据库，就像它是远程服务器一样。<a href=\"https://linuxiac.com/what-is-docker-container/\" title=\"Docker 容器\">Docker 容器</a>基于开放标准，使容器能够在所有主要<a href=\"https://linuxiac.com/category/distributions/\" title=\"Linux 发行版\">Linux 发行版</a>、MacOS 和 Microsoft Windows 上运行。</span></span></p>\n<p>  </p>\n<h2 id=\"h-run-postgresql-in-docker\" style=\"margin-left:0;\"><strong><span style=\"color:#309ee6;\"><span style=\"background-color:#ffffff;\">在 Docker 中运行 PostgreSQL</span></span></strong></h2>\n<p style=\"margin-left:0;\"><span style=\"color:#000000;\"><span style=\"background-color:#ffffff;\">我们在这里要做的是下载PostgreSQL镜像，检查镜像是否准备好，使用特定参数运行镜像，最后连接到正在运行的PostgreSQL实例。</span></span></p>\n<h3 style=\"margin-left:0;\"><strong><span style=\"color:#000000;\"><span style=\"background-color:#ffffff;\">1. 拉取一个 PostgreSQL 服务器 Docker 镜像</span></span></strong></h3>\n<p style=\"margin-left:0;\"><span style=\"color:#000000;\"><span style=\"background-color:#ffffff;\">首先，我们需要从<a href=\"https://hub.docker.com/_/postgres\" title=\"Docker Hub\">Docker Hub</a>获取现有的 PostgreSQL 官方镜像。镜像适用于 PostgreSQL 版本 9、10、11、12 和 13。如果您需要特定版本，<code>latest</code><em> </em>请将标签更改 为所需版本。</span></span></p>\n<p style=\"margin-left:0;\"><span style=\"color:#000000;\"><span style=\"background-color:#ffffff;\">现在让我们拉取图像：</span></span></p>\n<pre class=\"has\" style=\"margin-left:.5em;text-align:left;\"><code class=\"language-language-bash\">sudo docker pull postgres:latest\n</code></pre>\n<div></div>\n<p style=\"margin-left:0;\"><span style=\"color:#000000;\"><span style=\"background-color:#ffffff;\">使用上述命令将从 Docker Hub 存储库中提取最新可用版本的 PostgreSQL。</span></span></p>\n<h3 style=\"margin-left:0;\"><strong><span style=\"color:#000000;\"><span style=\"background-color:#ffffff;\">2. 从 PostgreSQL 服务器 Docker 镜像运行容器</span></span></strong></h3>\n<p style=\"margin-left:0;\"><span style=\"color:#000000;\"><span style=\"background-color:#ffffff;\">在部署之前，您需要设置一个 Docker 卷或绑定安装来持久化您的数据库。否则，当容器重新启动时，您的数据将丢失。安装应该 <code>/var/lib/postgresql/data</code> 在容器内的目录中。</span></span></p>\n<p style=\"margin-left:0;\"><span style=\"color:#000000;\"><span style=\"background-color:#ffffff;\">出于本指南的目的，我们将创建一个 docker 卷并将其附加到您的 PostgreSQL 容器。</span></span></p>\n<p style=\"margin-left:0;\"><span style=\"color:#000000;\"><span style=\"background-color:#ffffff;\">以下命令将在您的本地计算机中创建卷，您可以稍后与 PostgreSQL 容器连接：</span></span></p>\n<pre class=\"has\" style=\"margin-left:.5em;text-align:left;\"><code class=\"language-language-bash\">sudo docker volume create postgres-volume\n</code></pre>\n<div></div>\n<p style=\"margin-left:0;\"><span style=\"color:#000000;\"><span style=\"background-color:#ffffff;\">现在你的机器上有 PostgreSQL 镜像和一个用于保存数据的卷，你可以部署一个容器：</span></span></p>\n<pre class=\"has\" style=\"margin-left:.5em;text-align:left;\"><code class=\"language-language-bash\">sudo docker run -d --name=postgres13 -p 5432:5432 -v postgres-volume:/var/lib/postgresql/data -e POSTGRES_PASSWORD=your_password postgres\n</code></pre>\n<div></div>\n<p style=\"margin-left:0;\"><span style=\"color:#000000;\"><span style=\"background-color:#ffffff;\">该 <code>docker run</code> 命令将在 Docker 容器中创建一个正在运行的 PostgreSQL 数据库。</span></span></p>\n<p style=\"margin-left:0;\"><span style=\"color:#000000;\"><span style=\"background-color:#ffffff;\">让我们分解一下这个语法。以下是该命令中每个参数的含义：</span></span></p>\n<div id=\"google_ads_iframe_/1254144,22642593790/linuxiac_com-banner-1_0__container__\"></div>\n<p></p>\n<ul style=\"margin-left:0;\"><li><code>-d</code> 将以分离模式运行此容器，以便它在后台运行。</li><li><code>--name</code> 将名称“postgres13”分配给您的容器实例。</li><li><code>-p</code>会将 PostgreSQL 容器端口 5432 绑定到主机上的相同端口。您将能够<code>localhost:5432</code> 使用<code>psql</code>在您的主机上运行的PostgreSQL 客户端 ( )进行连接 。</li><li><code>-v</code>选项将容器卷 ( <code>/var/lib/postgresql</code>)内的数据文件夹绑定到<code>postgres-volume</code>您在上一步中创建的本地 Docker 卷 ( )。</li><li><code>-e</code>设置环境变量。在这种情况下，PostgreSQL 根密码。</li><li><code>postgres</code> 是我们用来创建容器的图像的名称。</li></ul>\n<p style=\"margin-left:0;\"><span style=\"color:#000000;\"><span style=\"background-color:#ffffff;\">您可以通过列出正在运行的容器来检查容器是否正在运行：</span></span></p>\n<pre class=\"has\" style=\"margin-left:.5em;text-align:left;\"><code class=\"language-language-bash\">sudo docker ps\n</code></pre>\n<pre class=\"has\" style=\"margin-left:.5em;\"><code class=\"language-wp-block-code\">CONTAINER ID   IMAGE   COMMAND   CREATED   STATUS   PORTS   NAMES\n6cb3293fe725   postgres   \"docker-entrypoint.s…\"   19 minutes ago   Up 19 minutes   0.0.0.0:5432-&gt;5432/tcp, :::5432-&gt;5432/tcp   postgres13</code></pre>\n<p style=\"margin-left:0;\"><span style=\"color:#000000;\"><span style=\"background-color:#ffffff;\">恭喜！您的新 PostgreSQL 实例现在正在 Docker 上运行。</span></span></p>\n<p style=\"margin-left:0;\"><span style=\"color:#000000;\"><span style=\"background-color:#ffffff;\">此外，您可以使用以下命令检查正在运行的 PostgreSQL 容器的日志文件：</span></span></p>\n<pre class=\"has\" style=\"margin-left:.5em;text-align:left;\"><code class=\"language-language-bash\">sudo docker logs postgres13</code></pre>\n<h3 style=\"margin-left:0;\"><strong><span style=\"color:#000000;\"><span style=\"background-color:#ffffff;\">3.连接到PostgreSQL服务器</span></span></strong></h3>\n<p style=\"margin-left:0;\"><span style=\"color:#000000;\"><span style=\"background-color:#ffffff;\">您可以通过附加到容器并运行<code>psql</code>命令来获得交互式 PostgreSQL shell 。这提供了完整的 PostgreSQL 命令行界面，因此您可以使用所有熟悉的命令和标志。</span></span></p>\n<pre class=\"has\" style=\"margin-left:.5em;text-align:left;\"><code class=\"language-language-bash\">sudo docker exec -it postgres13 psql -U postgres</code></pre>\n<div></div>\n<p style=\"margin-left:0;\"><span style=\"color:#000000;\"><span style=\"background-color:#ffffff;\"><code>psql</code>如果您在主机上预安装了PostgreSQL 客户端，您还可以使用PostgreSQL 客户端连接 PostgreSQL Docker 实例。</span></span></p>\n<pre class=\"has\" style=\"margin-left:.5em;text-align:left;\"><code class=\"language-language-bash\">psql -h localhost -U postgres\n</code></pre>\n<h2 style=\"margin-left:0;\"><strong><span style=\"color:#309ee6;\"><span style=\"background-color:#ffffff;\">结论</span></span></strong></h2>\n<p style=\"margin-left:0;\"><span style=\"color:#000000;\"><span style=\"background-color:#ffffff;\">使用 Docker 最重要的用例之一是可以轻松创建和访问在容器中构建的应用程序，而无需担心依赖项和安装。</span></span></p>\n<p style=\"margin-left:0;\"><span style=\"color:#000000;\"><span style=\"background-color:#ffffff;\">在本教程中，我们学习了使用 Docker 而不是实际主机来设置 PostgreSQL 服务器。</span></span></p>\n<p>  </p>\n<p style=\"margin-left:0;\"><span style=\"color:#000000;\"><span style=\"background-color:#ffffff;\">如今，随着不同微服务依赖于自己的数据库的微服务架构，将 PostgreSQL 服务器部署为 Docker 容器已成为一种非常普遍的做法。它还广泛用于任何本地执行或在隔离环境中运行端到端集成测试。</span></span></p>\n</div>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2021-11-30 13:38:43", "summary": "本教程将指导您完成如何在容器内运行具有持久存储的并连接到它的过程。是一个开源的对象关系数据库管理系统。它已经存在了多年，并标榜自己是世界上最先进的开源关系数据库。在轻松打包、部署和运行分布式应用程序方"}