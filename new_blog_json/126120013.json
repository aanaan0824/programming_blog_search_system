{"blogid": "126120013", "writerAge": "码龄4年", "writerBlogNum": "7", "writerCollect": "51", "writerComment": "10", "writerFan": "17", "writerGrade": "1级", "writerIntegral": "97", "writerName": "单胖", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126120013.jpg", "writerRankTotal": "87598", "writerRankWeekly": "692382", "writerThumb": "17", "writerVisitNum": "5003", "blog_read_count": "755", "blog_time": "已于 2022-08-02 12:50:13 修改", "blog_title": "【TensorRT】记一次使用C++接口TensorRT部署yolov5 v6.1模型的过程", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"CTensorRTyolov5_v61_0\"></a>记一次使用C++接口TensorRT部署yolov5 v6.1模型的过程</h1>\n<p>最近因为课题的原因，需要部署下YOLOv5的模型。之前一般部署YOLOv5的常规方法是直接使用Wangxinyu大佬的tensorrtx这个仓库去部署，因为之前的YOLOv5转trt真的非常费劲。现在YOLOv5推出了v6.1之后，支持直接使用官方repo里面的<code>export.py</code>脚本直接导出trt的engine，对部署党来说真的是喜大普奔。因此在捣鼓了半天之后，成功使用C++完成对YOLOv5模型的部署，正好最近看有同学在问这个事儿，因此在此记录下来。</p>\n<h2><a id=\"1_trt_engine_6\"></a>1. 导出trt engine</h2>\n<p>首先我们按照YOLOv5官方的Installation配置好环境，下载yolov5s.pt权重之后，在命令行运行<code>export.py</code>脚本：</p>\n<pre><code class=\"prism language-shell\">python3 export.py --weights ./yolov5s.pt --include engine --imgsz <span class=\"token number\">640</span> --device <span class=\"token number\">0</span> \n</code></pre>\n<p>解释下其中几个命令行参数：</p>\n<ul><li>–weights：YOLOv5的权重路径；</li><li>–include：需要将PyTorch模型转换成什么格式；</li><li>–imgsz：输入模型大小；</li><li>–device：在什么设备商运行。因为TensorRT跟硬件强相关，因此需要指定你使用的是机器里面的哪块卡。</li></ul>\n<p>经过一番操作之后，可以看到成功在路径下导出了<code>yolov5s.engine</code>文件，这就是TensorRT的推理引擎。</p>\n<h2><a id=\"2_TensorRT_25\"></a>2. 测试TensorRT推理引擎是否可用</h2>\n<p>YOLOv5的官方repo提供了<code>detect.py</code>脚本，可以供我们测试模型权重是否可用。我们在命令行运行<code>detect.py</code>脚本：</p>\n<pre><code class=\"prism language-shell\">python detect.py --weights yolov5s.engine --imgsz <span class=\"token number\">640</span> --device <span class=\"token number\">0</span>\n</code></pre>\n<p>运行后命令行会输出如下的信息，可以看到，推理只需要0.003s即可完成，即3ms，与使用PyTorch推理需要的13ms相比提升了很多。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c8e66837afdb4df1a0ceb08bf1a658a5.png\"/></p>\n<p>本来至此应该推理也就结束了，但是工业场景往往Python并不合适，因此我们使用C++完成推理部分。</p>\n<h2><a id=\"3_CTensorRT_43\"></a>3. C++部署TensorRT</h2>\n<h3><a id=\"1_TensorRT_45\"></a>(1) 初始化TensorRT引擎</h3>\n<p>在进行推理之前，首先需要先初始化TensorRT的引擎。代码如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">YOLOv5</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n  \t<span class=\"token function\">cudaSetDevice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>trtModelStream<span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    size_t size<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    std<span class=\"token double-colon punctuation\">::</span>ifstream <span class=\"token function\">file</span><span class=\"token punctuation\">(</span>mEnginePath<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>ios<span class=\"token double-colon punctuation\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[I] Detection model creating...\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">good</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        file<span class=\"token punctuation\">.</span><span class=\"token function\">seekg</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        size <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">tellg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        file<span class=\"token punctuation\">.</span><span class=\"token function\">seekg</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">.</span>beg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        trtModelStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>trtModelStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        file<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>trtModelStream<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        file<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    mRuntime <span class=\"token operator\">=</span> <span class=\"token function\">createInferRuntime</span><span class=\"token punctuation\">(</span>mGLogger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>mRuntime <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[I] Detection engine creating...\\n\"</span><span class=\"token punctuation\">;</span>\n    mEngine <span class=\"token operator\">=</span> mRuntime<span class=\"token operator\">-&gt;</span><span class=\"token function\">deserializeCudaEngine</span><span class=\"token punctuation\">(</span>trtModelStream<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>mEngine <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mContext <span class=\"token operator\">=</span> mEngine<span class=\"token operator\">-&gt;</span><span class=\"token function\">createExecutionContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>mContext <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> trtModelStream<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">auto</span> out_dims <span class=\"token operator\">=</span> mEngine<span class=\"token operator\">-&gt;</span><span class=\"token function\">getBindingDimensions</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    mBlob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">[</span>mInputSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    mProb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">[</span>mOutputSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Pointers to input and output device buffers to pass to engine.</span>\n    <span class=\"token comment\">// Engine requires exactly IEngine::getNbBindings() number of buffers.</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>mEngine<span class=\"token operator\">-&gt;</span><span class=\"token function\">getNbBindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[I] Cuda buffer creating...\\n\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// In order to bind the buffers, we need to know the names of the input and output tensors.</span>\n    <span class=\"token comment\">// Note that indices are guaranteed to be less than IEngine::getNbBindings()</span>\n    mInputIndex <span class=\"token operator\">=</span> mEngine<span class=\"token operator\">-&gt;</span><span class=\"token function\">getBindingIndex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"images\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>mEngine<span class=\"token operator\">-&gt;</span><span class=\"token function\">getBindingDataType</span><span class=\"token punctuation\">(</span>mInputIndex<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> nvinfer1<span class=\"token double-colon punctuation\">::</span>DataType<span class=\"token double-colon punctuation\">::</span>kFLOAT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mOutputIndex <span class=\"token operator\">=</span> mEngine<span class=\"token operator\">-&gt;</span><span class=\"token function\">getBindingIndex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"outputs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>mEngine<span class=\"token operator\">-&gt;</span><span class=\"token function\">getBindingDataType</span><span class=\"token punctuation\">(</span>mOutputIndex<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> nvinfer1<span class=\"token double-colon punctuation\">::</span>DataType<span class=\"token double-colon punctuation\">::</span>kFLOAT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Create GPU buffers on device</span>\n    <span class=\"token function\">checkStatus</span><span class=\"token punctuation\">(</span><span class=\"token function\">cudaMalloc</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mBuffers<span class=\"token punctuation\">[</span>mInputIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> mInputSize <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">checkStatus</span><span class=\"token punctuation\">(</span><span class=\"token function\">cudaMalloc</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mBuffers<span class=\"token punctuation\">[</span>mOutputIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> mOutputSize <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Create stream</span>\n    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[I] Cuda stream creating...\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">checkStatus</span><span class=\"token punctuation\">(</span><span class=\"token function\">cudaStreamCreate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[I] Detection engine created!\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>需要注意的是其中几个跟待部署模型强相关的参数：</p>\n<ul><li>mInputSize：模型输入的大小，由于我们这个场景一次输入进一张图像即可，yolov5s的输入就是<code>3 * 640 * 640</code>，因此我们的输入尺寸也应该是<code>1 * 3 * 640 * 640</code>，即我们要创建一个这么大的一维数组；</li><li>mOutputSize：模型输出的大小，YOLOv5的输出头一共有三个，每个输出头的大小分别为<code>20 * 20</code>、<code>40 * 40</code>、<code>80 * 80</code>，一共是有8400个栅格(grid)，每个栅格有3个anchor，每个anchor会输出85个信息（80个类别 + xywh + confidence）。YOLOv5的作者为了方便我们做后处理，因此在模型导出的时候，将三个输出头Concat在了一起，形成了<code>1 * 25200 * 85</code>大小的输出。其中25200就是<code>20 * 20 + 40 * 40 + 80 * 80</code>。</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d2906d840b6c497f94acb5eb3298f645.png\"/></p>\n<ul><li>mInputIndex和mOutputIndex：这两个要通过<code>mEngine-&gt;getBindingIndex</code>来获得索引，这个方法输入节点的name后可以返回索引，因此我们要清楚输入和输出的name分别是什么，用Netron打开ONNX看看就知道了，或者看看<code>export.py</code>的<code>export_onnx</code>函数看看设置的<code>input_names</code>和<code>output_names</code>分别是什么；</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\55f7eac4eb4643b2945475675b1e2725.png\"/></p>\n<h3><a id=\"2__122\"></a>(2) 预处理图像</h3>\n<p>图像在输入之前肯定要先做预处理，主要就是做resize和normalize。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">YOLOv5</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">preprocess</span><span class=\"token punctuation\">(</span>cv<span class=\"token double-colon punctuation\">::</span>Mat<span class=\"token operator\">&amp;</span> src<span class=\"token punctuation\">,</span> cv<span class=\"token double-colon punctuation\">::</span>Mat<span class=\"token operator\">&amp;</span> dst<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    mCvOriginSize <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    dst <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">cvtColor</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">,</span> cv<span class=\"token double-colon punctuation\">::</span>COLOR_BGR2RGB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">,</span> mCvInputSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    dst<span class=\"token punctuation\">.</span><span class=\"token function\">convertTo</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> CV_32FC3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    dst <span class=\"token operator\">=</span> dst <span class=\"token operator\">/</span> <span class=\"token number\">255.0f</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>非常简单，一共就这么几步：</p>\n<ul><li>通道顺序从BGR转为RGB（OpenCV默认输入图像后通道顺序是BGR）；</li><li>resize到640；</li><li>把矩阵转为Float32型（不然除以255可能会出问题）；</li><li>normalize（除以255）。</li></ul>\n<h3><a id=\"3__146\"></a>(3) 将输入的图像的每一个像素按顺序存入数组</h3>\n<p>TensorRT并不能够直接以OpenCV的Mat数据结构为输入，需要我们先将Mat里面的每一个像素存进数组内。我们先前已经声明了两个成员变量<code>mBlob</code>和<code>mProb</code>，我们现在就要将输入数据存入<code>mBlob</code>中。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">YOLOv5</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">blobFromImage</span><span class=\"token punctuation\">(</span>cv<span class=\"token double-colon punctuation\">::</span>Mat<span class=\"token operator\">&amp;</span> img<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">preprocess</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> channels <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span><span class=\"token function\">channels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> cols <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>cols<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> rows <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>rows<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> c <span class=\"token operator\">&lt;</span> channels<span class=\"token punctuation\">;</span> c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> row <span class=\"token operator\">&lt;</span> rows<span class=\"token punctuation\">;</span> row<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> col <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> col <span class=\"token operator\">&lt;</span> cols<span class=\"token punctuation\">;</span> col<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                mBlob<span class=\"token punctuation\">[</span>c <span class=\"token operator\">*</span> rows <span class=\"token operator\">*</span> cols <span class=\"token operator\">+</span> row <span class=\"token operator\">*</span> cols <span class=\"token operator\">+</span> col<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">at</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>cv<span class=\"token double-colon punctuation\">::</span>Vec3f<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>预处理之后，按照一行一行的顺序把图像的像素存入<code>mBlob</code>中即可，这一步也很简单。</p>\n<h3><a id=\"4__173\"></a>(4) 执行推理步骤</h3>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token class-name\">YOLOv5</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">doInference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">checkStatus</span><span class=\"token punctuation\">(</span><span class=\"token function\">cudaMemcpyAsync</span><span class=\"token punctuation\">(</span>mBuffers<span class=\"token punctuation\">[</span>mInputIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> mBlob<span class=\"token punctuation\">,</span> mInputSize <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cudaMemcpyHostToDevice<span class=\"token punctuation\">,</span> mStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mContext<span class=\"token operator\">-&gt;</span><span class=\"token function\">enqueueV2</span><span class=\"token punctuation\">(</span>mBuffers<span class=\"token punctuation\">,</span> mStream<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">checkStatus</span><span class=\"token punctuation\">(</span><span class=\"token function\">cudaMemcpyAsync</span><span class=\"token punctuation\">(</span>mProb<span class=\"token punctuation\">,</span> mBuffers<span class=\"token punctuation\">[</span>mOutputIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> mOutputSize <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cudaMemcpyDeviceToHost<span class=\"token punctuation\">,</span> mStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cudaStreamSynchronize</span><span class=\"token punctuation\">(</span>mStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>TensorRT的推理非常精简，一共就是三步走：</p>\n<ol><li>将<code>mBlob</code>里面的数据拷贝至显卡；</li><li>用<code>mContext-&gt;enqueueV2</code>方法执行推理；</li><li>将推理的结果拷贝至内存（也就是<code>mProb</code>里）。</li></ol>\n<h3><a id=\"5__193\"></a>(5) 后处理</h3>\n<p>这一步才是精髓。我们得到的结果应该包括以下部分：</p>\n<ol><li>类别概率，有25200 * 80个；</li><li>位置信息，是相对于Anchor和Grid的偏移量，有25200 * 4个；</li><li>置信度，有25200 * 1个；</li></ol>\n<p>但是YOLOv5团队为了方便我们做后处理，已经将第2点的位置信息的解码过程一并导出到了ONNX中，自然也随着ONNX一并转到了TensorRT里面。也就是说，Engine推理后输出的位置信息，就是真实的位置信息（相对于640 * 640而言），不需要我们再费劲写位置信息的解码过程。</p>\n<p>我们再明确下一共要干哪几件事情：</p>\n<ol><li>整理输出结果，置信度低于置信度阈值的不保留；</li><li>做NMS；</li></ol>\n<p>我们先做第一件事情：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Object</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    cv<span class=\"token double-colon punctuation\">::</span>Rect rect<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> label<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> conf<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nstd<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token operator\">&gt;</span> <span class=\"token class-name\">YOLOv5</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">argmax</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> vSingleProbs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token operator\">&gt;</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">auto</span> iter <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">max_element</span><span class=\"token punctuation\">(</span>vSingleProbs<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> vSingleProbs<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span>first <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>iter <span class=\"token operator\">-</span> vSingleProbs<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span>second <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>iter<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">YOLOv5</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">generate_proposals</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Object<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> objects<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> confThresh<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> nc <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">25200</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">float</span> conf <span class=\"token operator\">=</span> mProb<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>nc <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>conf <span class=\"token operator\">&gt;</span> confThresh<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Object obj<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> cx <span class=\"token operator\">=</span> mProb<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>nc <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> cy <span class=\"token operator\">=</span> mProb<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>nc <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> w  <span class=\"token operator\">=</span> mProb<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>nc <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> h  <span class=\"token operator\">=</span> mProb<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>nc <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            obj<span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>cx <span class=\"token operator\">-</span> w <span class=\"token operator\">*</span> <span class=\"token number\">0.5f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            obj<span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>cy <span class=\"token operator\">-</span> h <span class=\"token operator\">*</span> <span class=\"token number\">0.5f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            obj<span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            obj<span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">vSingleProbs</span><span class=\"token punctuation\">(</span>nc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> vSingleProbs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                vSingleProbs<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mProb<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> <span class=\"token number\">85</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span> <span class=\"token operator\">+</span> j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">auto</span> max <span class=\"token operator\">=</span> <span class=\"token function\">argmax</span><span class=\"token punctuation\">(</span>vSingleProbs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            obj<span class=\"token punctuation\">.</span>label <span class=\"token operator\">=</span> max<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n            obj<span class=\"token punctuation\">.</span>conf <span class=\"token operator\">=</span> conf<span class=\"token punctuation\">;</span>\n\n            objects<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>可以看到在generate_proposals函数内，我们做了这样的几件事情。</p>\n<ol><li>遍历所有结果，先取排在下标为4的置信度（顺序是x y w h conf），判断是否高于置信度的阈值；</li><li>如果高于阈值，按照顺序取xywh（注意是xy是中心点坐标，但是cv::Rect的xy是左上角点坐标）；</li><li>将xywh整理进cv::Rect数据结构内；</li><li>用argmax方法从后80个数据内获得类别的label，不需要多解释；</li></ol>\n<p>这样就完成了第一步的整理。但此时我们的框会有很多冗余，这在目前常用的目标检测算法里面非常常见。因为每一个Grid和每一个Anchor都会输出一个结果，而目标附近的Grid和Anchor输出的结果很大可能指的都是同一个目标，因此就会出现目标处会有很多框重叠在一起的情况。这就需要用nms算法去把框筛一下。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">YOLOv5</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">qsort_descent_inplace</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Object<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> objects<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> p <span class=\"token operator\">=</span> objects<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> j<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>objects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>conf <span class=\"token operator\">&gt;</span> p<span class=\"token punctuation\">)</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>objects<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>conf <span class=\"token operator\">&lt;</span> p<span class=\"token punctuation\">)</span>\n            j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> j<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// swap</span>\n            std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>objects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> objects<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">omp parallel sections</span></span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">omp section</span></span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span> <span class=\"token function\">qsort_descent_inplace</span><span class=\"token punctuation\">(</span>objects<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">omp section</span></span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token function\">qsort_descent_inplace</span><span class=\"token punctuation\">(</span>objects<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">YOLOv5</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">qsort_descent_inplace</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Object<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> objects<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>objects<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">qsort_descent_inplace</span><span class=\"token punctuation\">(</span>objects<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> objects<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">YOLOv5</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">nms_sorted_bboxes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Object<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> vObjects<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> picked<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> nms_threshold<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    picked<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> vObjects<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">areas</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        areas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> vObjects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span><span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">const</span> Object<span class=\"token operator\">&amp;</span> a <span class=\"token operator\">=</span> vObjects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> keep <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>picked<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">const</span> Object<span class=\"token operator\">&amp;</span> b <span class=\"token operator\">=</span> vObjects<span class=\"token punctuation\">[</span>picked<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// intersection over union</span>\n            <span class=\"token keyword\">float</span> inter_area <span class=\"token operator\">=</span> <span class=\"token function\">intersection_area</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> union_area <span class=\"token operator\">=</span> areas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> areas<span class=\"token punctuation\">[</span>picked<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> inter_area<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// float IoU = inter_area / union_area</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inter_area <span class=\"token operator\">/</span> union_area <span class=\"token operator\">&gt;</span> nms_threshold<span class=\"token punctuation\">)</span>\n                keep <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>keep<span class=\"token punctuation\">)</span>\n            picked<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>此处做nms的方法是嫖的NCNN的solution，ncnn yyds！</p>\n<p>我们将逻辑整理一下，形成<code>decodeOutputs</code>方法：</p>\n<pre><code class=\"prism language-cpp\">std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Object<span class=\"token operator\">&gt;</span> <span class=\"token class-name\">YOLOv5</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">decodeOutputs</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Object<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> objects<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">generate_proposals</span><span class=\"token punctuation\">(</span>objects<span class=\"token punctuation\">,</span> <span class=\"token number\">0.2f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">qsort_descent_inplace</span><span class=\"token punctuation\">(</span>objects<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> picked<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">nms_sorted_bboxes</span><span class=\"token punctuation\">(</span>objects<span class=\"token punctuation\">,</span> picked<span class=\"token punctuation\">,</span> <span class=\"token number\">0.45f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> picked<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> img_w <span class=\"token operator\">=</span> mCvOriginSize<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> img_h <span class=\"token operator\">=</span> mCvOriginSize<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> scaleH <span class=\"token operator\">=</span>  <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>mCvInputSize<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>img_h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> scaleW <span class=\"token operator\">=</span>  <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>mCvInputSize<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>img_w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Object<span class=\"token operator\">&gt;</span> results<span class=\"token punctuation\">;</span>\n    results<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        Object obj <span class=\"token operator\">=</span> objects<span class=\"token punctuation\">[</span>picked<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// adjust offset to original unpadded</span>\n        <span class=\"token keyword\">float</span> x0 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> scaleW<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> y0 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> scaleH<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> x1 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> obj<span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> scaleW<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> y1 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> obj<span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> scaleH<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// clip</span>\n        x0 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>x0<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>img_w <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        y0 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>y0<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>img_h <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        x1 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>img_w <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        y1 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>y1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>img_h <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        obj<span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>x0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        obj<span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>y0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        obj<span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>x1 <span class=\"token operator\">-</span> x0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        obj<span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">-</span> y0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        results<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>从代码中可以看到，首先调用了<code>generate_proposals</code>进行低置信度目标的过滤，接着调用<code>qsort_descent_inplace</code>方法做快速排序，再调用<code>nms_sorted_bboxes</code>方法做nms。然后我们获得640与原图的宽高的比例，将框映射回原图，最后纠正下过大的框和负数坐标即可。</p>\n<p>至此YOLOv5的TensorRT部署也就结束了，我们可以画个框看看：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2b6b09ba1d29453daaccd52a926bc69b.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 1, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-02 12:50:13", "summary": "记一次使用接口部署模型的过程最近因为课题的原因，需要部署下的模型。之前一般部署的常规方法是直接使用大佬的这个仓库去部署，因为之前的转真的非常费劲。现在推出了之后，支持直接使用官方里面的脚本直接导出的，"}