{"blogid": "122770539", "writerAge": "码龄3年", "writerBlogNum": "36", "writerCollect": "6123", "writerComment": "157", "writerFan": "1831", "writerGrade": "5级", "writerIntegral": "3043", "writerName": "INlinKC", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122770539.jpg", "writerRankTotal": "81005", "writerRankWeekly": "62588", "writerThumb": "1491", "writerVisitNum": "356339", "blog_read_count": "3695", "blog_time": "已于 2022-02-23 13:40:42 修改", "blog_title": "侯捷——STL源码剖析 笔记", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"STL__0\"></a>侯捷——STL源码剖析 笔记</h1>\n<h2><a id=\"1_1\"></a>1.总览</h2>\n<h3><a id=\"1STL_2\"></a>1.STL六大部件之间的关系</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6094727e90ae4f398abcb5a3286ef463.png\"/></p>\n<p>在下图中，我们使用了如下：<br/> 1.一个<strong>容器</strong>vector<br/> 2.使用vector时，使用<strong>分配器</strong>分配内存<br/> 3.使用vi.begin(),vi.end()即<strong>迭代器</strong>，作为算法的参数<br/> 4.使用count_if<strong>算法</strong><br/> 5.使用<strong>仿函数</strong>less()<br/> 6.使用函数<strong>适配器</strong>来对我们算法的结果进行进一步筛选（not1, bind2nd）<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d4e0e413d6c7455d9195530903d24b36.png\"/></p>\n<h3><a id=\"2_14\"></a>2.复杂度</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\756b30ceddd1452987ae2d4259d2ca2a.png\"/></p>\n<h3><a id=\"3_17\"></a>3.迭代器区间</h3>\n<p>迭代器是一个左开右闭的区间，也就是说迭代器的end是最后一个元素的下一个元素。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6c6e9abdbcde47bdbb902d9db1ae8cf3.png\"/></p>\n<h3><a id=\"4_21\"></a>4.容器的结构和分类</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\91745a9bbaa4457d926807935b79d80a.png\"/></p>\n<h2><a id=\"2_25\"></a>2.容器分类及测试</h2>\n<h3><a id=\"1_26\"></a>1.序列式容器</h3>\n<h5><a id=\"_27\"></a>序列式容器的特点是将数据放进容器之后，会按照用户放进去的顺序依次排列</h5>\n<table><thead><tr><th>序列式容器</th><th>特点</th><th>额外学习材料</th></tr></thead><tbody><tr><td>array</td><td>一段连续空间，不论是否使用，都会全部占用</td><td><a href=\"http://m.biancheng.net/view/6688.html\">array</a></td></tr><tr><td>vector</td><td>尾部可进可出，当空间不够时会自动扩充</td><td><a href=\"http://m.biancheng.net/view/6749.html\">vector</a></td></tr><tr><td>deque</td><td>双向都可扩充，两端都可进可出</td><td><a href=\"http://m.biancheng.net/view/6860.html\">deque</a></td></tr><tr><td>list</td><td>一个双向环状链表，有向前后和向后两个指针</td><td><a href=\"http://m.biancheng.net/view/6892.html\">list</a></td></tr><tr><td>forward_list</td><td>一个单向链表，仅有向后一个指针</td><td><a href=\"http://m.biancheng.net/view/6960.html\">forward_list</a></td></tr></tbody></table>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7b8e0c0060ed436cad57a83fa2877e1c.png\"/></p>\n<h3><a id=\"2_39\"></a>2.关联式容器</h3>\n<h5><a id=\"keyvalue_40\"></a>关联式容器类似于key-value，非常适合于查找操作</h5>\n<table><thead><tr><th>关联式容器名</th><th>特点</th><th>实现</th><th>注释</th><th>额外学习材料</th></tr></thead><tbody><tr><td>set/multiset</td><td>key和value是同一个，BST存储是有序的</td><td>红黑树</td><td>加上multi意味着可以重复键值对</td><td><a href=\"http://m.biancheng.net/view/7192.html\">set</a>，<a href=\"http://m.biancheng.net/view/7203.html\">multiset</a></td></tr><tr><td>map/multimap</td><td>每一个key对应一个value，BST存储是有序的</td><td>红黑树</td><td>加上multi意味着可以重复键值对</td><td><a href=\"http://m.biancheng.net/view/7173.html\">map</a>，<a href=\"http://m.biancheng.net/view/7190.html\">multimap</a></td></tr><tr><td>unordered_set/unordered_multiset</td><td>相对于set/multiset，存储是无序的</td><td>哈希表</td><td>加上multi意味着可以重复键值对</td><td><a href=\"http://m.biancheng.net/view/7250.html\">unordered_set</a>，<a href=\"http://m.biancheng.net/view/7251.html\">unordered_multiset</a></td></tr><tr><td>unordered_map/unordered_multimap</td><td>相对于map/multimap，存储是无序的</td><td>哈希表</td><td>加上multi意味着可以重复键值对</td><td><a href=\"http://m.biancheng.net/view/7231.html\">unordered_map</a>，<a href=\"http://m.biancheng.net/view/7248.html\">unordered_multimap</a></td></tr></tbody></table>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f3f8bd5d6bce4ad58084e92a717ef69d.png\"/></p>\n<h2><a id=\"3Allocator_51\"></a>3.分配器(Allocator)详解</h2>\n<h3><a id=\"1_52\"></a>1.总览</h3>\n<p>分配器的效率非常重要。因为容器必然会使用到分配器来负责内存的分配，它的性能至关重要。</p>\n<h5><a id=\"Cnewdelete_54\"></a>在C++中，内存分配和操作通过new和delete完成。</h5>\n<p>new中包含两个操作，第一步是使用operator new分配内存，第二步是调用构造函数；<br/> delete中包含两个操作，第一步是调用析构函数，第二步是使用operator delete释放内存。</p>\n<h4><a id=\"1malloc_57\"></a>1.分配器底层都会回到malloc</h4>\n<p>C++的内存分配动作最终都会回到malloc，malloc再根据不同的操作系统类型(Windows，Linux，Unix等)底层的系统API来获取内存</p>\n<h5><a id=\"malloc_59\"></a>同时我们可以看到，malloc分配之后的内存块中不是只有数据，而是还包含了其它很多数据。这样容易联想到如果分配次数越多，那么内存中数据越零散，这些额外的数据开销就越大。</h5>\n<h5><a id=\"_60\"></a>所以一个优秀的分配器，应当尽可能的让这些额外的空间占比更小，让速度更快。</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1b6da608b7e345d59da185a583cafb84.png\"/></p>\n<h4><a id=\"2VC6BC5GC29_63\"></a>2.VC6，BC5，GC2.9所带的标准库分配器源码分析</h4>\n<p>上面我们提到了分配器的评判标准，现在我们来看一下编译器自带的标准库中的分配器是如何实现的。<br/> VC6，BC5，GC2.9的标准库分配器并没有做特殊设计。就是调用malloc和free。<br/> 缺点如下：</p>\n<p>1.接口设计不方便。如果我们单独调用分配器，那么我们需要记住我们指向分配的那片内存空间的指针，以及分配的内存空间大小。不然我们无法使用deallocate来释放这份空间。虽然容器不会有影响。</p>\n<p>2.如果我们需要多次分配空间，默认的分配器由于每次分配的空间都很小，导致我们需要进行很多次内存分配的操作，同时需要很多额外空间。那么这个没有特殊设计过的分配器在这种情况下的效率就会变得低下，影响程序运行效率<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\22281e5dcffe4c4387b46fb1093a9206.png\"/></p>\n<p>BC5的分配器与VC6没有本质区别。BC5的优点是他的分配器第二参数有一个默认值，让我们在调用分配器时方便了一些。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8aef58a9e9e74cb3bf6dd0ba0ca84268.png\"/></p>\n<p>GC2.9自带的allocator也差不多<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\31f2bd67cbef498789c2b430ef3cbdc5.png\"/></p>\n<h5><a id=\"GC29_80\"></a>虽然GC2.9和上面也基本一致，但是它有额外声明不要使用这个标准库的分配器，同时这个标准库分配器没有被使用。它使用的分配器是自行修改的</h5>\n<p>GC2.9使用的是一个叫<strong>alloc</strong>的分配器<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1c246a97e1814191aff2c31f8b942abf.png\"/></p>\n<h3><a id=\"3GC29_84\"></a>3.GC2.9的分配器的效率提高思路</h3>\n<h4><a id=\"1_85\"></a>1.内存空间简介</h4>\n<p>通过面向对象高级编程(上)的学习，我们可以将malloc分配出的内存区块分为这几个部分。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4f3976df5b6644ab8816502dd3eb4a18.png\"/></p>\n<h4><a id=\"2G29_alloc_89\"></a>2.G2.9 分配器——alloc</h4>\n<p>从上面对内存空间的分析可以知道，malloc分配出的内存区块中需要有地方来存放这个内存区块的大小。然而对于同一个容器而言，它的内置类型应当是相同的，所以对于容器的分配器，我们可以对此作出优化。<br/> alloc创建了16条单向链表用来存放数据。这些单向链表用来存放不同元素大小的数据。<br/> 当容器需要内存时，alloc先查看自己是否已经申请过了这个大小的内存，如果已经申请过了，那么就继续放在对应的单向链表尾部。否则再调用malloc向系统申请一块内存空间。具体可以查看这里<a href=\"https://blog.csdn.net/ZLP_CSDN/article/details/106427351\">【C++内存管理】G2.9 std::alloc 运行模式</a><br/> 它的优点就是，由于每个链表都只有一种大小的元素，那么对于这条链表上的每一个元素，我们就不必再单独使用内存空间来记录它的大小。从而节省了内存空间<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b4cd0083c8d54ceb8f897077affee289.png\"/><br/> 在这张图中可以看到很多看起来非常杂乱的连线，这个实际上是alloc的内存申请机制影响的，alloc在申请内存时会考虑之前剩余下来的内存余量（这里存在pool当中），如果有内存余量的话在下一次申请空间时，会将上一次分配剩下来的内存空间按照需要的大小进行切割并挂载到对应的节点上。如果上一次剩余的大小不足以划分，那么会将这个剩余的内存空间挂到与它相等的内存空间大小的节点上去，然后重新分配内存。具体可以参考<a href=\"https://blog.csdn.net/qq_34269632/article/details/115636008\">这里</a><br/> 在G4.9中，分配器变成了new_allocator，旧的分配器alloc改名为_pool_alloc。</p>\n<h3><a id=\"4SGI_97\"></a>4.(补充)SGI的两级分配器</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7e187500ed164085a9c9b694c7f05875.png\"/></p>\n<p>STL的分配器用于封装STL容器在内存管理上的底层细节。在C++中，其内存配置和释放如下：</p>\n<h5><a id=\"new_101\"></a>new运算分两个阶段：</h5>\n<p>(1)调用::operator new配置内存;<br/> (2)调用对象构造函数构造对象内容</p>\n<h5><a id=\"delete_104\"></a>delete运算分两个阶段：</h5>\n<p>(1)调用对象析构函数；<br/> (2)调用::operator delete释放内存<br/> 为了精密分工，STL allocator将两个阶段操作区分开来：<br/> 内存配置有alloc::allocate()负责，内存释放由alloc::deallocate()负责；<br/> 对象构造由::construct()负责，对象析构由::destroy()负责。<br/> 同时为了提升内存管理的效率，减少申请小内存造成的内存碎片问题，SGI STL采用了两级配置器<br/> 当分配的空间大小超过128B时，会使用第一级空间配置器；当分配的空间大小小于128B时，将使用第二级空间配置器。<br/> 第一级空间配置器直接使用malloc()、realloc()、free()函数进行内存空间的分配和释放，而第二级空间配置器采用了内存池技术，通过空闲链表来管理内存。<br/> 当然，alloc也可以直接作为第一级分配器。</p>\n<h2><a id=\"4list_115\"></a>4.深度探索list</h2>\n<h3><a id=\"1list_116\"></a>1.list的基本组成</h3>\n<p>list是一个双向链表，它的基本组成就是</p>\n<table><thead><tr><th>成员</th><th>作用</th></tr></thead><tbody><tr><td>prev指针</td><td>指向上一个元素</td></tr><tr><td>next指针</td><td>指向下一个元素</td></tr><tr><td>data</td><td>用来保存数据</td></tr></tbody></table>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2f101f25e9a2456386ee08aad0c7fce9.png\"/></p>\n<h3><a id=\"2list_125\"></a>2.list的迭代器</h3>\n<p>由于人们一般习惯于：迭代器++是找到下一个元素，迭代器–是找到上一个元素。在双向链表list中，我们可以知道下一个元素就是next所指元素，上一个元素就是prev所指元素。<br/> 如果我们想要实现迭代器++的操作，就需要访问list节点对应的next指针。所以迭代器是一个类，需要为我们封装这些操作，或者更准确的说，迭代器类是一个<strong>智能指针</strong>。</p>\n<h5><a id=\"listlist_128\"></a>list的插入和接合操作都不会造成原有的list迭代器失效，对于删除操作，也只有”指向被删除元素“的那个迭代器失效，其它迭代器不受任何影响</h5>\n<h4><a id=\"1i__i_129\"></a>1.++i 和 i++的重载</h4>\n<h5><a id=\"QCii_130\"></a>Q：在C++中，由于++i和i++都只有一个参数，那么如何对这两种分别进行重载呢？</h5>\n<h5><a id=\"AC_131\"></a>A：在C++中，规定了带有参数的是后置++，没有参数的是前置++。比如说</h5>\n<pre><code class=\"prism language-C++\">operator++(int) {}; //对 i++ 进行重载\noperator++() {};    //对 ++i 进行重载\n</code></pre>\n<h4><a id=\"2_136\"></a>2.注意点：</h4>\n<p>1.后置++的* 操作符不是解引用，而是调用了拷贝构造函数来制造一个副本<br/> 2.为了模拟C++的整数不能进行如下操作：</p>\n<pre><code class=\"prism language-C++\">(i++)++;    //不允许\ni++++;     //不允许\n(++i)++;    //允许\n++++i;      //允许\n</code></pre>\n<p>C++允许前置++连续，但是不允许后置++连续，所以迭代器中，对于前置++，返回的是引用。而后置++运算符返回的不是reference，而是值；<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5bb4864788b54d67a455dfed09e3ff50.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8dc770364a3e4a99a5c38f2da7b4334f.png\"/></p>\n<h3><a id=\"3G49list_150\"></a>3.G4.9的list</h3>\n<h4><a id=\"1G49G29_151\"></a>1.G4.9对比G2.9的一些细节修正</h4>\n<h5><a id=\"1listvoid_152\"></a>1.list中指针的类型不再是void*</h5>\n<h5><a id=\"2T_T_TTtypedef_153\"></a>2.代器不再需要传一种类型的三个形式（T,* T,&amp; T），而是传入T之后再typedef。</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\78196a8e67194290bc4c6ee90677fe38.png\"/></p>\n<h4><a id=\"2G49list_156\"></a>2.G4.9的list更加复杂</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d14fd7e26faa4e848afa58d75982fce3.png\"/></p>\n<h2><a id=\"5_159\"></a>5.迭代器补充</h2>\n<h3><a id=\"1_160\"></a>1.迭代器的设计原则</h3>\n<p>迭代器是算法和容器之间的桥梁，所以算法会想知道迭代器的一些性质来辅助算法。<br/> 这些性质如下：</p>\n<table><thead><tr><th>五种迭代器中必须typedef的性质</th><th>解释</th></tr></thead><tbody><tr><td>iteratior_category</td><td>迭代器类型</td></tr><tr><td>value_type</td><td>迭代器所指对象的类型</td></tr><tr><td>difference_type</td><td>两个相邻的迭代器之间的距离</td></tr><tr><td>pointer</td><td>指向value type的指针</td></tr><tr><td>reference</td><td>对value type的引用</td></tr></tbody></table>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\45ff92e2421e49b2b2443e1bb75fce95.png\"/></p>\n<h3><a id=\"2iterator_traits_172\"></a>2.iterator traits的作用和设计</h3>\n<h4><a id=\"1_173\"></a>1.作用</h4>\n<p>由于上面的设计原则可以知道，迭代器必须typedef五个性质。但是如果这个指针不是一个class的指针，而就是一个普通的指针的话，这样的话，我们怎么分辨呢？iterator traits就用上了。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fe7f7500f3884137ac90ceec4d2ab8af.png\"/></p>\n<h4><a id=\"2_177\"></a>2.设计</h4>\n<p>设计一个中间层作在迭代器和算法中间作为媒介，这个中间层就是iterator traits</p>\n<h5><a id=\"C_179\"></a>实际上就是利用了C++中模板的偏特化来进行一个区分。</h5>\n<h5><a id=\"constconstconst_180\"></a>注意即使是const指针，为了它能够创建一个非const变量，我们也应当返回一个非const的类型。</h5>\n<p>图1这里仅仅是举例，完整在图2<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\80195a3479d648ba88fcd33d412341b1.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d8b8b29811c9484c9bf4938ebe28ed9a.png\"/></p>\n<h2><a id=\"6vector_185\"></a>6.深度探索vector</h2>\n<p>vector就是一个可以自动扩充的array。</p>\n<h3><a id=\"1_187\"></a>1.源码解析</h3>\n<p>vector主要是通过三个指针来维护的，分别是起点，当前终点，以及当前最大空间<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\baee9b15fc2848919b43e5b1f06f2ddf.png\"/></p>\n<h3><a id=\"2vector_191\"></a>2.vector的增长形式——两倍增长</h3>\n<p>vector每当遇到空间不同的情况，都会按照当前最大空间的两倍空间进行空间申请。vector每次扩张都会视本身元素个数多少而造成元素的拷贝，以及元素的删除。<br/> 如果申请不到两倍大的空间，生命就会自动结束。<br/> <a href=\"https://blog.csdn.net/qq_44918090/article/details/120583540\">面试题：C++vector的动态扩容，为何是1.5倍或者是2倍？</a></p>\n<h4><a id=\"1vector_195\"></a>1.自制的vector增长流程图：</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c2d5345254d24993827d507695c8c5a2.png\"/></p>\n<h4><a id=\"2_198\"></a>2.代码</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3c60201f3f944d0e966ae090df3f4c49.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ce133b22eba94bdca63279e3df5de52a.png\"/></p>\n<h3><a id=\"3vector_203\"></a>3.vector的迭代器</h3>\n<h5><a id=\"vector3_204\"></a>注意：插入操作可能造成vector的3个指针重新配置，导致原有的迭代器全部失效</h5>\n<h4><a id=\"1G29vector_205\"></a>1.G2.9版本的vector迭代器</h4>\n<p>由于vector本身就是连续的，内存也是连续的，所以正常来讲vector的迭代器不必设置的非常复杂，只需要一个指针就够了。事实上，G2.9中确实是这么做的。<br/> 在G2.9版本中，vector的迭代器就是一个指针。如果将它放入iterator traits当中的话，由于这个迭代器是单独的指针而不是一个类，所以会走偏特化的路线来为算法提供所需的性质。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ca3484f922f3490cae9264334a0a32f2.png\"/></p>\n<h4><a id=\"2G49vector_210\"></a>2.G4.9版本的vector迭代器</h4>\n<p>然而在G4.9中，vector的迭代器被设计的十分复杂，同时变成了一个类。所以G4.9之后的vector迭代器不会再走指针偏特化的iterator traits了。<br/> 但是这个操作十分的复杂，而且并没有影响最终的结果，也就是说<strong>G2.9和G4.9的迭代器并没有什么本质区别</strong>。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9ec69963415a4c05985cb6006f2641d0.png\"/></p>\n<h2><a id=\"7arrayforward_list_216\"></a>7.深度探索array与forward_list</h2>\n<p>array就是一个固定长度的数组。</p>\n<h5><a id=\"Qarray_218\"></a>Q：为什么要将array设计成一个容器类呢？</h5>\n<h5><a id=\"Aarrayarray_219\"></a>A：因为这样可以让array返回算法需要的五个性质，这样算法可以适配array来进行一些操作来提高算法性能。</h5>\n<h3><a id=\"1array_220\"></a>1.array源码解析</h3>\n<p>在TR1中，array的源代码比较简洁。<br/> 由于是连续空间，所以迭代器就用指针实现，通过iterator traits时走偏特化路线。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0747383044ad40d98700aba61289e5f2.png\"/></p>\n<p>在G4.9中，array的源代码和上面的vector一样变得复杂，它的迭代器变成了类<br/> 实际上和TR1中最终效果并没有区别。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\88b53f902742491c827cbb146b6d5773.png\"/></p>\n<h3><a id=\"2forward_list_229\"></a>2.forward_list源码解析</h3>\n<p>forward_list就是前面的list少一个向前的指针，参考前面的list即可<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c7e67fef4b84404f943dca7642f787cf.png\"/></p>\n<h2><a id=\"8dequequeuestack_234\"></a>8.深度探索deque，queue，stack</h2>\n<h3><a id=\"1deque_235\"></a>1.deque</h3>\n<h4><a id=\"1deque_236\"></a>1.deque结构总览</h4>\n<p>deque对外是连续的，但内部不是连续的。</p>\n<table><thead><tr><th>deque组件</th><th>作用</th></tr></thead><tbody><tr><td>一个vector</td><td>从来存放那些内存空间的迭代器位置，模仿“连续”</td></tr><tr><td>若干buffer大小的内存空间</td><td>用来保存数据</td></tr></tbody></table>\n<p>deque的迭代器中的四个指针的作用分析</p>\n<table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>cur</td><td>当前buffer上当前节点的位置</td></tr><tr><td>first</td><td>当前buffer上头部节点的位置</td></tr><tr><td>last</td><td>当前buffer上尾部节点的位置</td></tr><tr><td>node</td><td>当前buffer在map上的位置</td></tr></tbody></table>\n<p>当每一个buffer大小的内存空间不够用时，vector会在尾部创建一个迭代器指针并申请一个buffer大小的新空间来放元素。如果vector本身不够大，那么vector会自行扩容。扩容之后需要进行元素的重新拷贝，由于deque是一个<strong>双向</strong>队列，它会将原来的元素拷贝到扩充完了的vector的<strong>中段</strong>，这样的deque就同时拥有向左和向右扩张的能力了。vector扩容机制可以看前面的讲解<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8f5fdd11e0e848d2aa9b77fc71591032.png\"/></p>\n<h5><a id=\"deque40G29deque_252\"></a>一个deque自己会占用40字节大小；在G2.9中，deque可以自行指定缓冲区大小</h5>\n<p>这些大小的空间有：<br/> 1.start，finish两个迭代器。分别指向第一缓冲区的第一个元素和最后缓冲区的最后一个元素（的下一位置）<br/> 2.一个指向map的指针<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\99313f15fa774963ba46aa49d9619070.png\"/></p>\n<h4><a id=\"2dequeinsert_258\"></a>2.deque的insert操作解析</h4>\n<h5><a id=\"_259\"></a>判断顺序：</h5>\n<p>1.先是判断是否是头插或者尾插。是的话直接头尾插入元素即可。<br/> 2.如果不是头插或者尾插，那么计算这个节点到头结点和尾节点之间的距离。假如说离头部节点近，那么就让从头部节点到插入位置之间的节点全部向前挪动，然后插入节点；反之亦然。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d6a80e5578494739b0fe3c902729d3ab.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6b352b4553064212809e793e32fbbbfa.png\"/></p>\n<h4><a id=\"3deque_266\"></a>3.deque模拟连续空间的手法</h4>\n<h5><a id=\"dequebuffervectorbuffer_267\"></a>deque的长度需要考虑buffer的大小以及vector中buffer的个数</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ccefa143365b49bba898406e1e58bd4a.png\"/></p>\n<h5><a id=\"dequebuffer_270\"></a>deque的前进++和后退–操作需要额外判断是否超过当前buffer设定大小。</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d758a7f050174cdaba9429d3c3ed6851.png\"/></p>\n<h5><a id=\"_273\"></a>如果有一次前进多个的情况，那么相较于上一种情况会更加复杂，需要考虑缓冲区之间的切换</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f9f2cea1eef34a2a8098458829b6d21e.png\"/></p>\n<h4><a id=\"4G49deque_277\"></a>4.G4.9的deque</h4>\n<h5><a id=\"G49dequebuffer_size_278\"></a>在G4.9中，deque的大小没有变化。使用者无法再指定buffer size的大小。同时也变得更加复杂</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\82ff41a95acd4ac093d7e781f5fcd026.png\"/></p>\n<h3><a id=\"2queuestack_281\"></a>2.queue和stack</h3>\n<h4><a id=\"1queuestack_282\"></a>1.queue和stack的实现</h4>\n<p>对于queue和stack，它的功能只是deque的子集。实际上在STL中，queue和stack往往不被归类为容器，而被归类为<strong>容器适配器</strong><br/> queue和stack中含有一个deque，然后调用已经完成的deque来完成我们需要的操作。</p>\n<h4><a id=\"2queuestack_285\"></a>2.queue和stack的异同</h4>\n<h5><a id=\"_286\"></a>相同：</h5>\n<p>1.不允许遍历，不提供迭代器<br/> 2.可以使用deque或者list作为底层结构。不过一般使用deque，因为deque更加快<br/> 3.不可以使用set或者map作为底层结构。</p>\n<h5><a id=\"_290\"></a>不同：</h5>\n<p>queue不可以使用vector作为底层结构，而stack可以。</p>\n<h2><a id=\"9RBTreesetmultisetmapmultimap_293\"></a>9.深度探索红黑树（RB-Tree），以及以它为基础的set，multiset，map，multimap</h2>\n<h3><a id=\"1RBTree_294\"></a>1.红黑树（RB-Tree）</h3>\n<p>这里不涉及红黑树的具体实现细节。红黑树的实现看此<a href=\"https://blog.csdn.net/tanrui519521/article/details/80980135\">浅析红黑树（RBTree）原理及实现</a><br/> 红黑树保持了BST的性质，但是同时保证最长路径不超过最短路径的二倍，因而近似平衡，避免树左右失衡导致插入和查找效率降低。<br/> 因为红黑树是一颗BST，这样迭代器不应该修改那些已经排序插入的节点值。但是由于在C++中红黑树是作为set和map的底层，而map支持修改value，所以在C++中，红黑树<strong>没有阻止我们去修改节点值</strong>。<br/> 红黑树对外界提供了两种插入形式，insert_unique()和insert_equal()，前者代表key在这颗红黑树中是唯一的，否则插入失败；而后者不是。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1d3b9860a7ef4e3dbb32a07812490050.png\"/></p>\n<p>一个红黑树的例子如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6daedbf6980c45b3a9bc22b5dae503e2.png\"/></p>\n<h3><a id=\"2set__multiset_305\"></a>2.set 和 multiset</h3>\n<p>set和multiset其实也只是调用红黑树的部分函数，某种意义上它也只是一种适配器</p>\n<h4><a id=\"1_307\"></a>1.注意点：</h4>\n<p>1.set的key == value<br/> 2.虽然set/multiset底层的红黑树支持修改节点值，但是set/multiset的迭代器并<strong>不支持修改节点值</strong><br/> 3.set和multiset的插入函数不相同<br/> 4.虽然C++有全局泛化的::find()函数，但是它的效率远远不如set中定义的set::find()，我们<strong>应当尽量优先使用容器中定义的函数</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\74da3d4102324394b43f7c7220da66d4.png\"/></p>\n<h4><a id=\"2setmultiset_315\"></a>2.set和multiset的实现</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f3bbcae26043426b972f08d70f1ba463.png\"/></p>\n<h3><a id=\"3map__multimap_319\"></a>3.map 和 multimap</h3>\n<h4><a id=\"1_320\"></a>1.注意点：</h4>\n<p>1.map的key != value<br/> 2.map/multimap的迭代器禁止修改key，但是允许修改value<br/> 3.map和multimap的插入函数不相同</p>\n<h4><a id=\"2mapmultimap_324\"></a>2.map和multimap的实现</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9ed963de5c6345c39d8f3cd10d1a98d4.png\"/></p>\n<h4><a id=\"3mapmultimap_327\"></a>3.map和multimap独有的[]运算符设计</h4>\n<p>我们通过[]访问map/multimap，如果这个key不存在与map/multimap中，那么他会自动在map/multimap中创建并添加一个这个key对应的value的默认值，然后将其返回。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e77f5d44ee8142bbb2fd19fb41e18042.png\"/></p>\n<h2><a id=\"11hashtableunordered_setunordered_multisetunordered_mapunordered_multimap_332\"></a>11.深度探索哈希表（hashtable），以及以它为基础的unordered_set，unordered_multiset，unordered_map，unordered_multimap</h2>\n<h3><a id=\"1hashtable_333\"></a>1.哈希表（hashtable）</h3>\n<h4><a id=\"1_334\"></a>1.基础概念</h4>\n<p>哈希表是为了实现高效的<strong>存储</strong>以及高效<strong>查找</strong>而实现的。具体操作就是将我们需要存放的数据进行哈希运算之后得到哈希值，然后将哈希值取模，插入哈希表中对应的篮子（basket）中去。<br/> 哈希表的长度是一个<strong>质数</strong>；</p>\n<h5><a id=\"Separate_Chaining_337\"></a>Separate Chaining：当出现哈希碰撞时，将相同哈希值的节点组成一个链表挂在这个值对应的哈希值的后面。</h5>\n<h5><a id=\"Rehashing__vector_338\"></a>Rehashing：当哈希表中的总元素数量 &gt;= 哈希表长度时，将哈希表的长度扩展到它两倍原本大小的最近的质数（不是vector的两倍扩容，而是寻找离它两倍大小值最近的一个质数，作为新的大小），然后将元素重新插入。</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6a34863da1e545f3a4f7cb8a75ced8fa.png\"/></p>\n<h4><a id=\"2_341\"></a>2.容器分析</h4>\n<p>哈希表需要以下6个模板参数：</p>\n<table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>Value</td><td>和红黑树中一样，是键值的合成包</td></tr><tr><td>Key</td><td>键的类型</td></tr><tr><td>HashFcn</td><td>用来计算传入key的哈希值，得到hashcode，从而在哈希表中找到插入位置</td></tr><tr><td>ExtractKey</td><td>由于哈希表中存放元素也是key和value包，ExtractKey就是为了拿出这个包中的key值</td></tr><tr><td>EqualKey</td><td>告诉哈希表key“相等”的定义</td></tr><tr><td>Alloc</td><td>分配器</td></tr></tbody></table>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8df630e2ceda48cfbe89bfb6302a9451.png\"/></p>\n<h4><a id=\"3HashFcn_353\"></a>3.哈希函数（HashFcn）</h4>\n<p>C++中为我们封装好了一些已有的哈希函数。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8e1f40bb63a2434284d73a07d162114e.png\"/></p>\n<h3><a id=\"2unordered_357\"></a>2.无序容器(unordered容器)</h3>\n<p>和上面的有序容器相比，最大的区别就是底层实现变了。一个是红黑树，一个是哈希表。</p>\n<h3><a id=\"3_359\"></a>3.（补充）红黑树实现和哈希表实现的这四个容器的区别</h3>\n<p>1.map始终保证遍历的时候是按key的大小顺序的，这是一个主要的功能上的差异。（有序无序）<br/> 2.时间复杂度上，红黑树的插入删除查找性能都是O(logN)而哈希表的插入删除查找性能理论上都是O(1)，他是相对于稳定的，最差情况下都是高效的。哈希表的插入删除操作的理论上时间复杂度是常数时间的，这有个前提就是哈希表不发生数据碰撞。在发生碰撞的最坏的情况下，哈希表的插入和删除时间复杂度最坏能达到O(n)。注释：最坏情况就是所有的哈希值全部都在同一个链表上<br/> 3.map可以做范围查找，而unordered_map不可以。<br/> 4.unordered_map内存占用比map高。<br/> 5. 扩容导致迭代器失效。 map的iterator除非指向元素被删除，否则永远不会失效。unordered_map的iterator在对unordered_map修改时有时会失效。因为在操作 unordered_map 容器过程（尤其是向容器中添加新键值对）中，一旦当前容器的负载因子超过最大负载因子（默认值为 1.0），该容器就会适当增加桶的数量（通常是翻一倍），并自动执行 rehash() 成员方法，重新调整各个键值对的存储位置（此过程又称“重哈希”），此过程很可能导致之前创建的迭代器失效。<br/> <a href=\"https://zhuanlan.zhihu.com/p/358346216\">出处1</a><br/> <a href=\"http://c.biancheng.net/view/7236.html\">出处2</a></p>\n<h2><a id=\"12_369\"></a>12.算法</h2>\n<p>算法实际上看不到容器，它通过迭代器来进行运算。算法通过询问迭代器（之前有说迭代器需要提供的五个相关类型）来完成自己的工作。<br/> 算法在语言层面是是一个函数模板，具体是一个仿函数。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7bef4cfd1ede4a959d8b41eb0d9aea0e.png\"/></p>\n<h3><a id=\"1_374\"></a>1.迭代器</h3>\n<h4><a id=\"1iterator_category_375\"></a>1.各种容器的iterator_category</h4>\n<h5><a id=\"iterator_category_376\"></a>一共有五种iterator_category，它们的关系如图所示</h5>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-ftQ7gVZs-1643913242997)(en-resource://database/1125:1)]</p>\n<table><thead><tr><th>iterator_category</th><th>简述</th><th>容器</th></tr></thead><tbody><tr><td>forward_iterator_tag</td><td>仅单向前进</td><td>forward_list，unordered_set，unordered_map，unordered_multiset，unordered_multimap</td></tr><tr><td>bidirectional_iterator_tag</td><td>双向，允许前进和后退</td><td>list，set，map，multiset，multimap</td></tr><tr><td>random_access_iterator_tag</td><td>允许访问随机下标</td><td>array，vector，deque</td></tr></tbody></table>\n<p>另外有两种比较特殊，他们各自仅包含了一种迭代器</p>\n<table><thead><tr><th>iterator_category</th><th>包含的迭代器</th></tr></thead><tbody><tr><td>input_iterator_tag</td><td>istream_iterator</td></tr><tr><td>output_iterator_tag</td><td>ostream_iterator</td></tr></tbody></table>\n<h5><a id=\"typeiditerator_category_389\"></a>通过typeid()可以获取iterator_category</h5>\n<p>可以注意到这些打印出来的iterator_category名称前后有一些无规律字符和数字，这些是编译器中的库实现方法决定的，编译器不同，这些数据也不同。但是实际上为了符合C++标准，它的实际类型都是一样的。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6c1f013ded3c4f3ab24b8f8ad456e9a0.png\"/></p>\n<h4><a id=\"2_392\"></a>2.迭代器对算法的影响的四个实例</h4>\n<h5><a id=\"distance_393\"></a>distance</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7691c976df184dd6a22640b262f0357b.png\"/></p>\n<h5><a id=\"advancedistance_395\"></a>advance(和distance近似，略)</h5>\n<p>和distance的做法基本相同。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\81e5504145334cc9802db3579186443c.png\"/></p>\n<h5><a id=\"copy_399\"></a>copy</h5>\n<p>copy用了很多次泛化和特化，除了iterator traits以外还用了type traits。<br/> copy对其template参数所要求的条件非常宽松。其输入区间只需由inputIterators构成即可，输出区间只需要由OutputIterator构成即可。这意味着可以使用copy算法，将任何容器的任何一段区间的内容，复制到任何容器的任何一段区间上<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ca76b8fc172a4e438620f23ba736b6b7.png\"/></p>\n<h5><a id=\"destorycopy_404\"></a>destory(和copy近似，略)</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d41ee1f89d6244a4bcbad938c4585a4f.png\"/></p>\n<h4><a id=\"3_408\"></a>3.迭代器的特殊情况</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c62fbeeb169641b796dd0b7b70ab2353.png\"/></p>\n<h4><a id=\"4iterator_category_412\"></a>4.算法对迭代器中iterator_category的暗示</h4>\n<p>由于算法必须接受所有的迭代器，但是算法本身可以选择不对其进行处理。对于这些算法不想处理的迭代器，算法会在源代码中进行一些暗示。<br/> 比如说这里就是特意修改了模板参数名，来暗示使用者这个算法的适用范围<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\818107a8b7f74042b9f9830f03682031.png\"/></p>\n<h3><a id=\"2_418\"></a>2.算法实例</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f44fd66a97bd46d380af6c96d10c5195.png\"/></p>\n<h5><a id=\"QCC_421\"></a>Q：如何判断是C的算法还是C++中的算法？</h5>\n<h5><a id=\"ACstdC_422\"></a>A：首先C++的算法应该在标准库std中，其次查看它的形参，C++需要满足接受接受至少两个参数来表示迭代器。</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2fc87ff52a46435597ba27eeb2711481.png\"/></p>\n<h4><a id=\"_425\"></a>十一个算法</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\23c898068bdc4f76b1c57d5a34e8be04.png\"/></p>\n<h2><a id=\"13functor_427\"></a>13.仿函数functor</h2>\n<h4><a id=\"1functor_428\"></a>1.functor简介</h4>\n<p>functor为算法服务，当算法需要一些额外准则时，我们使用仿函数来辅助实现算法。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f7c4906234804ba8b9e032d9865a5924.png\"/></p>\n<h4><a id=\"2functorSTLadapter_432\"></a>2.让functor融入STL，允许被adapter改造</h4>\n<p>我们可以自行编写我们需要的functor，但是如果我们希望将它纳入STL，允许被adapter改造<br/> 那就就必须遵循STL的规范，让它继承一些东西。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9cfb0c66bdff476aa87f04a860cbadb2.png\"/></p>\n<h2><a id=\"14adapter_438\"></a>14.适配器adapter</h2>\n<h3><a id=\"1_439\"></a>1.适配器简介</h3>\n<p>适配器在STL组件的灵活组合运用功能上，扮演着轴承、转换器的角色<br/> STL所提供的各种适配器中：<br/> 1）改变仿函数接口者，称为函数适配器；<br/> 2）改变容器接口者，称为容器适配器；<br/> 3）改变迭代器接口者，称为迭代器适配器<br/> 对于函数适配器，适配器他也需要获得对应的仿函数一些信息。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7705fff585814055916ac664e7bf294a.png\"/></p>\n<h3><a id=\"2_449\"></a>2.容器适配器</h3>\n<p>STL提供两个容器适配器：queue和stack，它们修饰deque的接口而生成新的容器风貌stack的底层由deque构成。<br/> stack封锁住了所有的deque对外接口，只开放符合stack原则的几个函数<br/> queue的底层也由deque构成。queue封锁住了所有的deque对外接口，只开放符合queue原则的几个函数<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\01b06eaeae0147aa8fc73284f598feea.png\"/></p>\n<h3><a id=\"3_456\"></a>3.函数适配器</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\88cdbc4e6ee240cd9f110be318fb96c0.png\"/></p>\n<h4><a id=\"1bind2nd_459\"></a>1.bind2nd</h4>\n<h5><a id=\"bind2nd_460\"></a>从bind2nd这个函数，我们可以看到函数适配器的一些巧妙之处</h5>\n<p>这里先复习一些前置知识<br/> 对于模板，我们知道：<br/> 1.对于类模板，它必须指明类中元素的类型，而不能由类自己推导<br/> 2.对于函数模板，它有能力自己推导传入的参数类型。</p>\n<pre><code class=\"prism language-C++\">vector&lt;int&gt; vec;    //这个int表明我们必须声明类中元素类型\nmax(1,2);           //即使我们不声明参数1和2的类型，函数max也可以为我们自动推导出他们的类型。\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e882f60adce74a12ba707cac1525532a.png\"/></p>\n<h4><a id=\"2not1_471\"></a>2.not1</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ba5811f6d3cf4b0cbf352f4b28a32848.png\"/></p>\n<h4><a id=\"3bindC_11_474\"></a>3.bind和占位符（C++ 11）</h4>\n<p>在C++11中，之前的适配器有一些被重新取代了，如图<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a57bd4a460d54a53b3c940ae3e0a2e4b.png\"/></p>\n<h3><a id=\"4_479\"></a>4.迭代器适配器</h3>\n<h4><a id=\"1reverse_iterator_480\"></a>1.reverse_iterator</h4>\n<p>可以通过一个双向顺序容器调用rbegin()，和rend()来获取相应的逆向迭代器。只要双向顺序容器提供了begin(),end()，它的rbegin()和rend()就如同下面的形式。<br/> 单向顺序容器slist不可使用reserve iterators。有些容器如stack、queue、priority_queue并不提供begin()，end()，当然也就没有rbegin()和rend()<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9c2c17947d6944ef9199b37bfaac69ad.png\"/></p>\n<h4><a id=\"2insert_iterator_486\"></a>2.insert_iterator</h4>\n<p>insert iterators：可以将一般迭代的赋值操作转变为插入操作，可以分为下面几个<br/> insert iterators实现的主要观念是：每一个insert iterators内部都维护有一个容器（必须由用户指定）；容器当然有自己的迭代器，于是，当客户端对insert iterators做赋值操作时，就在insert iterators中被转为对该容器的迭代器做插入操作（也就是说，调用底层容器的push_front()或push_back()或insert()）</p>\n<table><thead><tr><th>insert iterator</th><th>作用</th></tr></thead><tbody><tr><td>back_insert_iterator</td><td>专门负责尾端的插入操作</td></tr><tr><td>front_insert_iterator</td><td>专门负责首部的插入操作</td></tr><tr><td>insert_iterator</td><td>可以从任意位置执行插入操作</td></tr></tbody></table>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b10d0dc4fd7349f89c6bf5dda5d0be63.png\"/></p>\n<h3><a id=\"5_497\"></a>5.未知适配器</h3>\n<p>iostream_iterator严格来说不属于上面任何一种适配器，所以我们这里称之为“未知适配器”</p>\n<h4><a id=\"1ostream_iterator_499\"></a>1.ostream_iterator</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f0c7ca62339447c58bf51a4d8eb5d717.png\"/></p>\n<h4><a id=\"2istream_iterator_502\"></a>2.istream_iterator</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4c52e15731224c199da11a7f498a14bf.png\"/></p>\n<h2><a id=\"15STL_505\"></a>15.STL的周边技术与应用</h2>\n<h3><a id=\"1_506\"></a>1.一个万用的哈希运算</h3>\n<p>在哈希表一章中，我们有提到我们需要提供一个哈希运算方法来计算hashcode，并且这个哈希运算得到的结果应当尽可能无序。<br/> 那么C++有没有自带这样一种函数，可以方便的为我们计算哈希值呢？<br/> 我们可以粗略的这样进行一下思考：不管我们自己定义了什么类，这些类中的基本数据类型都是常见的，比如说int，string等等，如果可以挨个将其进行哈希运算，这个哈希运算式不就是一个万用的哈希运算了吗？下面就将介绍这种函数。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f5e2ec3633524432b83084173ec6decc.png\"/></p>\n<h3><a id=\"2tuple_512\"></a>2.tuple</h3>\n<h4><a id=\"1tuple_513\"></a>1.tuple简介</h4>\n<p>tuple是C++11新标准里的类型。它是一个类似pair类型的模板。pair类型是每个成员变量各自可以是任意类型，但是只能有俩个成员，而tuple与pair不同的是它可以有任意数量的成员。但是每个确定的tuple类型的成员数目是固定的。</p>\n<table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>make_tuple(v1,v2,v3,v4…vn)</td><td>返回一个给定初始值初始化的tuple,类型从初始值推断</td></tr><tr><td>t1 == t2</td><td>2个tuple具有相同数量的成员且成员对应相等时返回true</td></tr><tr><td>get(t)</td><td>返回t的第i个数据成员</td></tr><tr><td>tuple_size::value</td><td>tuple中成员的数量</td></tr><tr><td>tuple_element::type</td><td>返回tuple中第i个元素的类型</td></tr></tbody></table>\n<h4><a id=\"2tuple_522\"></a>2.tuple实现</h4>\n<p>tuple的关键就是利用C++的可变模板参数，来实现的的这个层层继承的关系。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\380fab184cc84ead8fc86d300f496689.png\"/></p>\n<h3><a id=\"3type_traits_527\"></a>3.type traits</h3>\n<h4><a id=\"1type_traits_528\"></a>1.type traits简介</h4>\n<p>在G2.9中，我们如果想要使用type traits，那么我们需要通过模板偏特化，然后typedef一大堆属性，用来保证以后算法来问的时候可以回答。<br/> 问题可想而知，就是这些属性过多，写起来比较冗长<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bb4ba44c11264594b912a3c24becfd70.png\"/></p>\n<p>注：POD类型是C++中常见的概念，用来说明类/结构体的属性，具体来说它是指没有使用面相对象的思想来设计的类/结构体。POD的全称是Plain Old Data，Plain表明它是一个普通的类型，没有虚函数虚继承等特性；Old表明它与C兼容。<br/> 详细看此处<a href=\"https://zhuanlan.zhihu.com/p/56161728\">C++中的POD类型</a></p>\n<h5><a id=\"C11type_traitstype_traitsC11Ctype_traitstype_traits_535\"></a>在C++11中，这些type traits变得更加多，多达几十个，这样对于我们自己编写的类，要想使用type traits就变得更加冗长；但是在C++11中，不仅仅C++自带类可以自动提供自带的type traits，连我们自己编写的类都可以自动提供正确的type traits结果，不再需要我们自己编写，这是怎么实现的呢？</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e4fb1f8150d14af3b23cf89e5b70e823.png\"/></p>\n<h4><a id=\"2type_traits_539\"></a>2.type traits实现</h4>\n<h5><a id=\"traits_540\"></a>对于一些简单的traits，可以找到源代码，是通过模板偏特化来实现的</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b0f89517d999434eb09b1b881f3c9d4d.png\"/></p>\n<h5><a id=\"type_traitsC_543\"></a>然后对于一些复杂的type traits，无法在C++标准库中找到，猜测是编译器在运行期间推导出来的</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dc8b79e084af46319b4568436361affb.png\"/></p>\n<h3><a id=\"4cout_547\"></a>4.cout</h3>\n<p>cout之所以可以接受那么多类对象，是因为标准对操作符&lt;&lt;做出了非常多的重载<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0988d7050ee145a5a6e5fa883fa24da6.png\"/></p>\n<p>如果我们自己编写的类的对象想要进行打印，就需要自己对&lt;&lt;进行重载<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\425dee30b38441c7ab3bc6a26ba97bb7.png\"/></p>\n<h3><a id=\"5stdmove_556\"></a>5.std::move</h3>\n<p><a href=\"https://blog.csdn.net/p942005405/article/details/84644069\">c++ 之 std::move 原理实现与用法总结</a><br/> <a href=\"https://zhuanlan.zhihu.com/p/97128024\">c++ 左值引用与右值引用</a></p>\n<h2><a id=\"Reference_560\"></a>Reference</h2>\n<p>1.<a href=\"https://github.com/arkingc/note/blob/master/C++/STL%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90.md\">arkingc/note</a><br/> 2.<a href=\"http://c.biancheng.net/\">C语言中文网</a><br/> 3.<a href=\"https://github.com/tangtangcoding/C-C-\">超多电子书与视频资料分享</a><br/> 4.<a href=\"https://blog.csdn.net/qq_34269632/article/details/115636008\">C++内存分配详解四：std::alloc行为剖析</a><br/> 5.<a href=\"https://blog.csdn.net/u014303647/article/details/88362337\">C++11新特性占位符-std::placehoders</a><br/> 6.<a href=\"https://blog.csdn.net/qq_44918090/article/details/120583540\">面试题：C++vector的动态扩容，为何是1.5倍或者是2倍</a><br/> 7.<a href=\"https://blog.csdn.net/li1914309758/article/details/79916414\">C++虚函数表，虚表指针，内存分布</a><br/> 8.<a href=\"https://www.cnblogs.com/huangfuyuan/p/9238598.html\">C++中tuple类型</a><br/> 9.<a href=\"https://zhuanlan.zhihu.com/p/56161728\">C++中的POD类型</a><br/> 10.<a href=\"https://blog.csdn.net/p942005405/article/details/84644069\">c++ 之 std::move 原理实现与用法总结</a><br/> 11.<a href=\"https://zhuanlan.zhihu.com/p/97128024\">c++ 左值引用与右值引用</a><br/> 12.<a href=\"https://blog.csdn.net/qq_44918090/article/details/120583540\">面试题：C++vector的动态扩容，为何是1.5倍或者是2倍？</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-02-23 13:40:42", "summary": "侯捷源码剖析笔记总览六大部件之间的关系在这里插入图片描述在下图中，我们使用了如下：一个容器使用时，使用分配器分配内存使用即迭代器，作为算法的参数使用算法使用仿函数使用函数适配器来对我们算法的结果进行进"}