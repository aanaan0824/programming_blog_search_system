{"blogid": "118541570", "writerAge": "码龄4年", "writerBlogNum": "46", "writerCollect": "2474", "writerComment": "3969", "writerFan": "12553", "writerGrade": "8级", "writerIntegral": "35258", "writerName": "彼  方", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_118541570.jpg", "writerRankTotal": "1562712", "writerRankWeekly": "2630", "writerThumb": "4087", "writerVisitNum": "337981", "blog_read_count": "5856", "blog_time": "于 2021-07-09 08:43:07 发布", "blog_title": "C++ RTTI详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>C++ RTTI详解</h3>\n<ul><li><a href=\"#1RTTI_2\">1、RTTI简介</a></li><li><a href=\"#2typeid_16\">2、typeid详解</a></li><li><ul><li><a href=\"#21type_info_18\">2.1、type_info类介绍</a></li><li><a href=\"#22typeid_94\">2.2、typeid识别静态类型</a></li><li><a href=\"#23typeid_319\">2.3、typeid识别动态类型</a></li><li><a href=\"#24typeid_425\">2.4、typeid实现原理</a></li></ul>\n</li><li><a href=\"#3dynamic_cast_460\">3、dynamic_cast详解</a></li><li><a href=\"#4_463\">4、总结</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"1RTTI_2\"></a>1、RTTI简介</h1>\n<p>RTTI（Runtime Type Identification）是“运行时类型识别”的意思。C++引入这个机制是为了让程序在运行时能根据基类的指针或引用来获得该指针或引用所指的对象的实际类型。但是现在RTTI的类型识别已经不限于此了，它还能通过typeid操作符识别出所有的基本类型的变量对应的类型。为什么会出现RTTI这一机制呢？这和C++语言本身有关系，C++是一门静态类型语言，其数据类型是在编译期就确定的，不能在运行时更改。然而由于面向对象程序设计中多态性的要求，C++中的指针或引用本身的类型，可能与它实际代表的类型并不一致，有时我们需要将一个多态指针转换为其实际指向对象的类型，就需要知道运行时的类型信息，这就有了运行时类型识别需求。和Java相比，C++要想获得运行时类型信息，只能通过RTTI机制，并且C++最终生成的代码是直接与机器相关的。</p>\n<blockquote>\n<p>相关资料：Java中任何一个类都可以通过反射机制来获取类的基本信息（接口、父类、方法、属性、Annotation等），而且Java中还提供了一个关键字，可以在运行时判断一个类是不是另一个类的子类或者是该类的对象，Java可以生成字节码文件，再由JVM（Java虚拟机）加载运行，字节码文件中可以含有类的信息。</p>\n</blockquote>\n<p>C++通过以下两个关键字提供RTTI功能：</p>\n<ol><li>typeid：该运算符返回其表达式或类型名的实际类型</li><li>dynamic_cast：该运算符将基类的指针或引用安全地转换为派生类类型的指针或引用（也就是所谓的下行转换）</li></ol>\n<p>本文将重点介绍这两个关键字，在阅读后续内容之前建议读者先看一下以下三篇文章，对理解本文会有巨大帮助：</p>\n<ul><li><a href=\"https://blog.csdn.net/weixin_43798887/article/details/118196343\">一文读懂C++虚函数的内存模型</a></li><li><a href=\"https://blog.csdn.net/weixin_43798887/article/details/118369498\">一文读懂C++虚继承的内存模型</a></li><li><a href=\"https://blog.csdn.net/weixin_43798887/article/details/118424172\">深入理解C++中五种强制类型转换的使用场景</a></li></ul>\n<h1><a id=\"2typeid_16\"></a>2、typeid详解</h1>\n<h2><a id=\"21type_info_18\"></a>2.1、type_info类介绍</h2>\n<p><code>typeid</code>的返回值是<code>const type_info&amp;</code>类型的数据，下面是<code>type_info</code>在<code>gcc-4.9.0</code>中的定义（位于<code>libstdc++-v3\\libsupc++\\typeinfo</code>文件中）</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">type_info</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">type_info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> _GLIBCXX_NOEXCEPT\n    <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> __name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'*'</span> <span class=\"token operator\">?</span> __name <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> __name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> !__GXX_TYPEINFO_EQUALITY_INLINE</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> type_info<span class=\"token operator\">&amp;</span> __arg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> _GLIBCXX_NOEXCEPT<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> type_info<span class=\"token operator\">&amp;</span> __arg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> _GLIBCXX_NOEXCEPT<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n    <span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> !__GXX_MERGED_TYPEINFO_NAMES</span>\n        <span class=\"token keyword\">bool</span> <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> type_info<span class=\"token operator\">&amp;</span> __arg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> _GLIBCXX_NOEXCEPT\n        <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>__name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'*'</span> <span class=\"token operator\">&amp;&amp;</span> __arg<span class=\"token punctuation\">.</span>__name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span>\n              __name <span class=\"token operator\">&lt;</span> __arg<span class=\"token punctuation\">.</span>__name <span class=\"token operator\">:</span> __builtin_strcmp <span class=\"token punctuation\">(</span>__name<span class=\"token punctuation\">,</span> __arg<span class=\"token punctuation\">.</span>__name<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> type_info<span class=\"token operator\">&amp;</span> __arg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> _GLIBCXX_NOEXCEPT\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__name <span class=\"token operator\">==</span> __arg<span class=\"token punctuation\">.</span>__name<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n                <span class=\"token punctuation\">(</span>__name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'*'</span> <span class=\"token operator\">&amp;&amp;</span> __builtin_strcmp <span class=\"token punctuation\">(</span>__name<span class=\"token punctuation\">,</span> __arg<span class=\"token punctuation\">.</span>__name<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n        <span class=\"token keyword\">bool</span> <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> type_info<span class=\"token operator\">&amp;</span> __arg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> _GLIBCXX_NOEXCEPT\n        <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> __name <span class=\"token operator\">&lt;</span> __arg<span class=\"token punctuation\">.</span>__name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> type_info<span class=\"token operator\">&amp;</span> __arg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> _GLIBCXX_NOEXCEPT\n        <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> __name <span class=\"token operator\">==</span> __arg<span class=\"token punctuation\">.</span>__name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> type_info<span class=\"token operator\">&amp;</span> __arg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> _GLIBCXX_NOEXCEPT\n    <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span>__arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> __cplusplus &gt;= 201103L</span>\n    size_t <span class=\"token function\">hash_code</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">noexcept</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">#  <span class=\"token directive keyword\">if</span> !__GXX_MERGED_TYPEINFO_NAMES</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">_Hash_bytes</span><span class=\"token punctuation\">(</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">__builtin_strlen</span><span class=\"token punctuation\">(</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n             <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span>size_t<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xc70f6907UL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">#  <span class=\"token directive keyword\">else</span></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">reinterpret_cast</span><span class=\"token operator\">&lt;</span>size_t<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>__name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">#  <span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span> </span><span class=\"token comment\">// C++11</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">__is_pointer_p</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">__is_function_p</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">__do_catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> type_info <span class=\"token operator\">*</span>__thr_type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>__thr_obj<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">unsigned</span> __outer<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">__do_upcast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> __cxxabiv1<span class=\"token operator\">::</span>__class_type_info <span class=\"token operator\">*</span>__target<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>__obj_ptr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">explicit</span> <span class=\"token function\">type_info</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">__name</span><span class=\"token punctuation\">(</span>__n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    type_info<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> type_info<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">type_info</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> type_info<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>从源代码中可以看出以下几点内容：</p>\n<ol><li>有一个类成员<code>__name</code>，类型是<code>const char*</code>，这个指针最终会指向类型的名字</li><li>我们不能直接实例化类<code>type_info</code>的对象，因为该类的正常构造函数是保护的，要构造<code>type_info</code>对象的唯一方法就是使用<code>typeid</code>运算符。</li><li>由于重载的赋值运算符和拷贝构造函数也是私有的，因此我们不能自己去复制或分配类<code>type_info</code>的对象。</li><li>其余那些成员方法大家就自己看一下吧，都是一些从名字就能看出用法的函数，比如<code>name()</code>返回类型名，<code>__is_pointer_p()</code>返回是否是指针类型等等</li></ol>\n<h2><a id=\"22typeid_94\"></a>2.2、typeid识别静态类型</h2>\n<p>当<code>typeid</code>中的操作数是以下任意一种时，<code>typeid</code>得出的是静态类型，即编译时就确定的类型：</p>\n<ul><li>一个任意的类型名</li><li>一个基本内置类型的变量，或指向基本内置类型的指针或引用</li><li>一个任意类型的指针（指针就是指针，本身不体现多态，多指针解引用才有可能会体现多态）</li><li>一个具体的对象实例，无论对应的类有没有多态都可以直接在编译器确定</li><li>一个指向没有多态的类对象的指针的解引用</li><li>一个指向没有多态的类对象的引用</li></ul>\n<p>由于静态类型在程序的运行过程中并不会改变，所以并不需要等到程序运行时再去推算其类型，在编译时期就能根据操作数的静态类型，从而推导出其具体类型信息。我们先来看如下一段代码：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;typeinfo&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"----------\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"----------\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果如下（gcc-4.8.5）：</p>\n<blockquote>\n<p>c<br/> i<br/> d<br/>----------<br/> h<br/> j<br/>----------<br/> Ss<br/> St6vectorIfSaIfEE</p>\n</blockquote>\n<p>看完我有点怀疑我的智商和人生，不是，是码生了，前面几个还好，还能大概看出是什么类型，但是后面那几个是什么鬼，尤其是这个<code>St6vectorIfSaIfEE</code>，谁能看出是<code>std::vector&lt;float&gt;</code>了？这些其实是被编译器转换过后的类型名，<code>typeid</code>也只能获取这种形式的名称。由于直接看这个实在有点反人类，所以我们只能动用点非常手段了，修改代码如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;typeinfo&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cxxabi.h&gt;</span></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> __name <span class=\"token operator\">=</span> abi<span class=\"token operator\">::</span><span class=\"token function\">__cxa_demangle</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> __name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"----------\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"----------\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果如下，现在可以看到的内容就正常多了，这里其实就是用到了<code>abi::__cxa_demangle</code>这个方法获取类型的真实名称，关于这部分的内容这里就不细讲了，有兴趣的读者可以去看这篇文章《<a href=\"https://blog.csdn.net/weixin_43798887/article/details/117135849\">C++封装一个易用的打印backtrace信息的函数</a>》，里面就有相应的介绍。</p>\n<blockquote>\n<p>char<br/> int<br/> double<br/>----------<br/> unsigned char<br/> unsigned int<br/>----------<br/> std::string<br/> std::vector&lt;float, std::allocator &gt;</p>\n</blockquote>\n<p>有了前面小小的铺垫，我们可以着手编写测试代码了：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;typeinfo&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cxxabi.h&gt;</span></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> __name <span class=\"token operator\">=</span> abi<span class=\"token operator\">::</span><span class=\"token function\">__cxa_demangle</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> __name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"A\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> A\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"B\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"C\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> C\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"D\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"---------- 一个任意的类型名 ----------\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"----- 基本内置类型名 -----\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"----- 无多态的类型名 -----\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"----- 有多态的类型名 -----\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>iostream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\\n\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"---------- 一个基本内置类型的变量，或指向基本内置类型的指针或引用 ----------\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"----- 基本内置类型的变量 -----\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> type_long <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> type_double <span class=\"token operator\">=</span> <span class=\"token number\">1.23</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>type_long<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>type_double<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"----- 指向基本内置类型的指针或引用 -----\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span><span class=\"token operator\">*</span> type_long_ptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>type_long<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> type_double_ref <span class=\"token operator\">=</span> type_double<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>type_long_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>type_double_ref<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\\n\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"---------- 一个任意类型的指针 ----------\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"----- 一个指向没有多态类型的指针 -----\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    B b<span class=\"token punctuation\">;</span>\n    A<span class=\"token operator\">*</span> a_ptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>a_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"----- 一个指向具有多态类型的指针 -----\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    D d<span class=\"token punctuation\">;</span>\n    C<span class=\"token operator\">*</span> c_ptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>c_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\\n\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"---------- 一个具体的对象实例，无论对应的类有没有多态都可以直接在编译器确定 ----------\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"----- 无多态类的实例 -----\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>string type_string<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> type_vector<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>type_string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>type_vector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"----- 有多态类的实例 -----\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>iostream <span class=\"token function\">type_ios</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>type_ios<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\\n\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"---------- 一个指向没有多态的类对象的指针的解引用 ----------\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"----- 一个指向没有多态的类对象的指针的解引用 -----\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>a_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 推算出来的依然是A</span>\n\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\\n\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"---------- 一个指向没有多态的类对象的引用 ----------\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"----- 一个指向没有多态的类对象的引用 -----\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    A<span class=\"token operator\">&amp;</span> a_ref <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>a_ref<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 推算出来的依然是A</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果如下，前面讲的六种静态类型都涉及到了，大家看一下就能明白是怎么一回事了：</p>\n<blockquote>\n<p>---------- 一个任意的类型名 ----------<br/> ----- 基本内置类型名 -----<br/> char<br/> int<br/> ----- 无多态的类型名 -----<br/> std::string<br/> std::vector&lt;int, std::allocator &gt;<br/> ----- 有多态的类型名 -----<br/> std::iostream<br/><br/><br/> ---------- 一个基本内置类型的变量，或指向基本内置类型的指针或引用 ----------<br/> ----- 基本内置类型的变量 -----<br/> long<br/> double<br/> ----- 指向基本内置类型的指针或引用 -----<br/> long*<br/> double<br/><br/><br/> ---------- 一个任意类型的指针 ----------<br/> ----- 一个指向没有多态类型的指针 -----<br/> B*<br/> A*<br/> ----- 一个指向具有多态类型的指针 -----<br/> D*<br/> C*<br/><br/><br/> ---------- 一个具体的对象实例，无论对应的类有没有多态都可以直接在编译器确定 ----------<br/> ----- 无多态类的实例 -----<br/> std::string<br/> std::vector&lt;int, std::allocator &gt;<br/> ----- 有多态类的实例 -----<br/> std::iostream<br/><br/><br/> ---------- 一个指向没有多态的类对象的指针的解引用 ----------<br/> ----- 一个指向没有多态的类对象的指针的解引用 -----<br/> A<br/><br/><br/> ---------- 一个指向没有多态的类对象的引用 ----------<br/> ----- 一个指向没有多态的类对象的引用 -----<br/> A</p>\n</blockquote>\n<h2><a id=\"23typeid_319\"></a>2.3、typeid识别动态类型</h2>\n<p>当<code>typeid</code>中的操作数是以下任意一种时，<code>typeid</code>需要在程序运行时推算类型，因为其操作数的类型在编译时期是不能被确定的：</p>\n<ul><li>一个指向含有多态的类对象的指针的解引用</li><li>一个指向含有多态的类对象的引用</li></ul>\n<p>下面先来看一个典型错误案例，程序如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;typeinfo&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cxxabi.h&gt;</span></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> __name <span class=\"token operator\">=</span> abi<span class=\"token operator\">::</span><span class=\"token function\">__cxa_demangle</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> __name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"A\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> A\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"B\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> A\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"C\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> B<span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> C\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"D\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> d<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    D d<span class=\"token punctuation\">;</span>\n    A<span class=\"token operator\">*</span> a_ptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">;</span>\n    B<span class=\"token operator\">*</span> b_ptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">;</span>\n    C<span class=\"token operator\">*</span> c_ptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">;</span>\n\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>a_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>b_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">TypeToName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>c_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果如下：</p>\n<blockquote>\n<p>D<br/> A<br/> B<br/> C</p>\n</blockquote>\n<p>从运行结果可以看出上面的代码并没有体现出多态性，这里就有个疑问了，之前在这篇文章《<a href=\"https://blog.csdn.net/weixin_43798887/article/details/118369498\">一文读懂C++虚继承的内存模型</a>》不是说虚继承也有虚表吗，怎么到这里体现不出多态性了？很遗憾，因为单纯虚继承是无法体现出多态的，尽管它也会生成对应的虚表，要真正实现多态只能依靠虚函数来实现。<br/> 修改类A如下，其余不变：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"A\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>运行结果如下：</p>\n<blockquote>\n<p>D<br/> D<br/> D<br/> D</p>\n</blockquote>\n<p>可以看到给类A加了个虚析构函数之后，多态性就体现出来了，<code>typeid</code>也可以正确识别出<code>a_ptr</code>、<code>b_ptr</code>、<code>c_ptr</code>引用的真实类型了。</p>\n<h2><a id=\"24typeid_425\"></a>2.4、typeid实现原理</h2>\n<p>接下来我们就来探讨一下<code>typeid</code>的实现原理，我们之前从《<a href=\"https://blog.csdn.net/weixin_43798887/article/details/118196343\">一文读懂C++虚函数的内存模型</a>》和《<a href=\"https://blog.csdn.net/weixin_43798887/article/details/118369498\">一文读懂C++虚继承的内存模型</a>》这两篇文章中知道了虚函数表指针指向的前一个位置（也就是索引的-1项）存放的就是当前实际类型的<code>type_info</code>信息，当时还不知道这玩意到底有什么用，要怎么用，但现在就一目了然了，因为<code>typeid</code>的返回值类型就是<code>type_info</code>，所以我们可以很轻易写出如下程序（只修改main函数，其余代码与前面最后一个例子保持不变）：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    D d<span class=\"token punctuation\">;</span>\n    A<span class=\"token operator\">*</span> a_ptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">;</span>\n    B<span class=\"token operator\">*</span> b_ptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">;</span>\n    C<span class=\"token operator\">*</span> c_ptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">;</span>\n\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>a_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span><span class=\"token operator\">*</span> vtbl_A <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>a_ptr<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>type_info<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>vtbl_A <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>b_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span><span class=\"token operator\">*</span> vtbl_B <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>b_ptr<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>type_info<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>vtbl_B <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>c_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span><span class=\"token operator\">*</span> vtbl_C <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>c_ptr<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>type_info<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>vtbl_C <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果如下：</p>\n<blockquote>\n<p>1D<br/> 1D<br/><br/> 1D<br/> 1D<br/><br/> 1D<br/> 1D</p>\n</blockquote>\n<p>从运行结果可以看到，我们在程序中将虚函数表的-1项的值转换成一个<code>type_info</code>的指针类型，并调用<code>name()</code>成员函数的最终的输出为<code>1D</code>，与<code>typeid</code>的输出一致，从而可以知道，<code>typeid</code>关于多态类型的计算是通过基类指针或引用指向的对象（子对象）的虚函数表的-1项获得的。</p>\n<blockquote>\n<p>补充说明：在多继承或虚继承的情况下，派生类类有n（n&gt;1）个虚函数指针，分别指向其各个基类的虚函数表的具体位置（事实上只有一个表，这些表是链接在一起的），但是一个类的所有虚函数表的索引为-1项的值（type_info对象的地址）都是相等的，即它们都指向同一个type_info对象，这样就实现了无论使用了哪一个基类的指针或引用指向其派生类的对象，都能通过相应的虚函数表获取到相同的type_info对象，从而得到相同的类型信息。</p>\n</blockquote>\n<h1><a id=\"3dynamic_cast_460\"></a>3、dynamic_cast详解</h1>\n<p><code>dynamic_cast</code>获取运行时类型信息的原理和前面<code>typeid</code>是一样的，这里就不赘述了，关于<code>dynamic_cast</code>的使用问题大家可以看一下这篇文章《<a href=\"https://blog.csdn.net/weixin_43798887/article/details/118424172\">深入理解C++中五种强制类型转换的使用场景</a>》，里面有详细的介绍。</p>\n<h1><a id=\"4_463\"></a>4、总结</h1>\n<p>本文先是介绍了RTTI相关的背景知识，然后引出了C++中两个提供RTTI功能的关键字：<code>typeid</code>和<code>dynamic_cast</code>。后面通过对<code>typeid</code>的使用和原理进行分析来说明RTTI机制在C++中究竟是如何实现的。而<code>dynamic_cast</code>与<code>typeid</code>获取动态类型的方式是相同的，由于之前已经写过一篇文章介绍<code>dynamic_cast</code>了，所以这里就不赘述了。</p>\n<p><strong>最后，如果大家觉得本文写得好的话麻烦点赞收藏关注一下谢谢，也可以关注该专栏，以后会有更多优质文章输出的。</strong></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2021-07-09 08:43:07", "summary": "详解、简介、详解、类介绍、识别静态类型、识别动态类型、实现原理、详解、总结、简介是运行时类型识别的意思。引入这个机制是为了让程序在运行时能根据基类的指针或引用来获得该指针或引用所指的对象的实际类型。但"}