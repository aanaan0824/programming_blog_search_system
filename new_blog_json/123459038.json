{"blogid": "123459038", "writerAge": "码龄1年", "writerBlogNum": "73", "writerCollect": "555", "writerComment": "29", "writerFan": "5214", "writerGrade": "4级", "writerIntegral": "903", "writerName": "今晚务必早点睡", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123459038.jpg", "writerRankTotal": "18268", "writerRankWeekly": "1452", "writerThumb": "122", "writerVisitNum": "71907", "blog_read_count": "20252", "blog_time": "于 2022-03-13 15:57:55 发布", "blog_title": "PyQt5保姆级教程-- 从入门到精通", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h3><a id=\"PyQt5__0\"></a>PyQt5保姆级教程-- 从入门到精通</h3>\n<p>主要内容：</p>\n<table><thead><tr><th>1</th><th>Qt Designer</th></tr></thead><tbody><tr><td>2</td><td>PyQt5基本窗口控件(QMainWindow、Qwidget、Qlabel、QLineEdit、菜单、工具栏等)</td></tr><tr><td>3</td><td>PyQt5高级组件(QTableView、QListView、容器、线程等)</td></tr><tr><td>4</td><td>PyQt5布局管理(QBoxLayout、QGirdLayout、QFormLayout、嵌套布局等)</td></tr><tr><td>5</td><td>PyQt5信号与槽(事件处理、数据传递等)</td></tr><tr><td>6</td><td>PyQt5图形与特效(定制窗口风格、绘图、QSS与UI美化、不规则窗口、设置样式等)</td></tr><tr><td>7</td><td>PyQt5扩展应用(制作PyQt5安装程序、数据处理、第三方绘图库在PyQt5中的应用、UI自动化测试等)</td></tr></tbody></table>\n<p>搭建PyQt5开发环境</p>\n<p>工具：</p>\n<p>Python</p>\n<p>PyQt5模块</p>\n<p>PyCharm</p>\n<p>在PyCharm里面安装PyQt5</p>\n<pre><code>pip install PyQt5 -i https://pypi.douban.com/simple\n</code></pre>\n<p>在PyCharm里面安装Qt的工具包</p>\n<pre><code>pip install PyQt5-tools -i https://pypi.douban.com/simple\n</code></pre>\n<p>在安装tools时，报如下错误：</p>\n<h5><a id=\"1pip_install_PyQt5tools_41\"></a>1.pip install PyQt5-tools安装失败</h5>\n<pre><code>WARNING: Ignoring invalid distribution -yqt5 (e:\\venvs\\pyqt5_demo1\\lib\\site-packages)\nInstalling collected packages: pyqt5, click, qt5-tools, pyqt5-plugins, pyqt5-tools\nERROR: Could not install packages due to an OSError: [WinError 5] 拒绝访问。: 'e:\\\\venvs\\\\pyqt5_demo1\\\\Lib\\\\site-packages\\\\PyQt5\\\\QtCore.pyd'\nCheck the permissions.\n\n</code></pre>\n<p>解决办法：</p>\n<p>第一步：</p>\n<p>将<code>pip install ...</code>加入<code>--user</code>为<code>pip install --user ...</code>即可</p>\n<pre><code>pip install PyQt5-tools  -i https://pypi.douban.com/simple   --user\n</code></pre>\n<p>换个思路</p>\n<p>重启电脑，继续输入第一条命令安装</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\75fb6f90a1894923a49e53ee6238bfdb.png\"/></p>\n<p>原因分析，可能占用了进程。</p>\n<h5><a id=\"2Qt__Designer_70\"></a>2.配置Qt Designer</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2202ad57de0a4898b13698cbf25852ab.png\"/></p>\n<pre><code>Working directory：$FileDir$\n</code></pre>\n<h5><a id=\"3PyUIC_79\"></a>3.配置PyUIC</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b1d7851ad1f741ad961ea7b72bb96bb9.png\"/></p>\n<pre><code>Program：python的安装目录下的python.exe文件\nArguments：-m PyQt5.uic.pyuic  $FileName$ -o $FileNameWithoutExtension$.py\n</code></pre>\n<h5><a id=\"4Pyrcc_89\"></a>4.配置Pyrcc</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e4620d4987fd4e63966592a7cb05682e.png\"/></p>\n<pre><code>Program：python的安装目录下的Scripts文件夹的pyrcc5.exe文件\nArguments：$FileName$ -o $FileNameWithoutExtension$_rc.py\n</code></pre>\n<p>展示效果如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\202624091aea4408a6bc2c1fbf8e9e72.png\"/></p>\n<h5><a id=\"5uipy_104\"></a>5.ui转py的过程：</h5>\n<p>1.点击EXternal Tools里面的QTDesigner，会跳转到QT界面，</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9eae117b599443229477e77ab5c65013.png\"/></p>\n<p>拖动组件，调整好界面，保存为first文件，它会默认生成first.ui文件</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\025428cb114f4dc38280a56e7ec2cf1e.png\"/></p>\n<p>选中文件，鼠标右击，打开扩展，选择PyUIC,它会生成.py文件</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cb0c78526f3f4bcda9826e1a6914d10f.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\172074d6ea4f4653acdf72fb02891cc7.png\"/></p>\n<p>将.ui文件转化为.py文件的命令行方法：</p>\n<pre><code class=\"prism language-python\">python <span class=\"token operator\">-</span>m PyQt5<span class=\"token punctuation\">.</span>uic<span class=\"token punctuation\">.</span>pyuic demo<span class=\"token punctuation\">.</span>ui <span class=\"token operator\">-</span>o demo<span class=\"token punctuation\">.</span>py\n</code></pre>\n<h5><a id=\"6PyQt5_132\"></a>6.开发第一个基于PyQt5的桌面应用</h5>\n<p>必须使用两个类: QApplication和QWidget。都在PyQt5.QtWidgets。</p>\n<p>第一个类表示应用程序，第二个类表示窗口</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dde047fb07974da4bbb061790d6b2d7b.png\"/></p>\n<p>输入如下代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 开发第一个基于PyQt5的桌面应用</span>\n\n<span class=\"token keyword\">import</span> sys\n\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> QApplication<span class=\"token punctuation\">,</span>QWidget\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 创建QApplication类的实例</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建一个窗口</span>\n    w <span class=\"token operator\">=</span> QWidget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 设置窗口尺寸   宽度300，高度150</span>\n    w<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 移动窗口</span>\n    w<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 设置窗口的标题</span>\n    w<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'第一个基于PyQt5的桌面应用'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 显示窗口</span>\n    w<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 进入程序的主循环，并通过exit函数确保主循环安全结束(该释放资源的一定要释放)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b93204c862bf432db98cf036b515d377.png\"/></p>\n<p>也可以在命令行运行</p>\n<pre><code class=\"prism language-python\">python 文件名<span class=\"token punctuation\">.</span>py\n</code></pre>\n<h5><a id=\"7_182\"></a>7.基本操作</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fe7eecedc75f4278b0e8e8654297288c.png\"/></p>\n<p>左侧是可以选择的组件，右侧可以设定属性值，设置完成之后，可以在窗体选择预览，选择查看c++和python代码。</p>\n<h5><a id=\"8QtDesignerVertical_Layout_189\"></a>8.在QtDesigner中使用水平布局(Vertical Layout)</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b1b8b9c023d14ffe8448dd1a6fb67565.png\"/></p>\n<p>两种方式：</p>\n<h6><a id=\"1_196\"></a>(1)先移组件，再布局。</h6>\n<p>放置五个按钮，让这五个按钮等宽的，水平的排列</p>\n<p>（全部选中–&gt;鼠标右键–&gt;布局–&gt;水平布局 预览）</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b4b3532a6ce5465295ad170d342c904f.png\"/></p>\n<p>预览：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0b4aa6d43e164fb0adcaad71b8adbccd.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ab072fc31b86449c9c4770973678a26c.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\68d2967184fe49179d65997d06a83498.png\"/></p>\n<h6><a id=\"2_215\"></a>(2)先布局，再移组件。</h6>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\27355252d8054ef89bb43f06fe3d7382.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4073e703d05b4e65a75da819ddf71297.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3d363186f2854e0f80f5e227d5a2a427.png\"/></p>\n<p>生成demo1.ui文件</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c4a79644fd0146549ce0dd97bde26e2c.png\"/></p>\n<p>转成demo2.py文件，转成py文件，才能在程序里面调。</p>\n<p>生成的代码如下：</p>\n<pre><code class=\"prism language-html\"># -*- coding: utf-8 -*-\n\n# Form implementation generated from reading ui file 'demo1.ui'\n#\n# Created by: PyQt5 UI code generator 5.15.4\n#\n# WARNING: Any manual changes made to this file will be lost when pyuic5 is\n# run again.  Do not edit this file unless you know what you are doing.\n\n\nfrom PyQt5 import QtCore, QtGui, QtWidgets\n\n\nclass Ui_MainWindow(object):\n    def setupUi(self, MainWindow):\n        MainWindow.setObjectName(\"MainWindow\")\n        MainWindow.resize(800, 600)\n        self.centralwidget = QtWidgets.QWidget(MainWindow)\n        self.centralwidget.setObjectName(\"centralwidget\")\n        self.widget = QtWidgets.QWidget(self.centralwidget)\n        self.widget.setGeometry(QtCore.QRect(70, 50, 651, 51))\n        self.widget.setObjectName(\"widget\")\n        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget)\n        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout.setObjectName(\"horizontalLayout\")\n        self.pushButton = QtWidgets.QPushButton(self.widget)\n        self.pushButton.setObjectName(\"pushButton\")\n        self.horizontalLayout.addWidget(self.pushButton)\n        self.pushButton_2 = QtWidgets.QPushButton(self.widget)\n        self.pushButton_2.setObjectName(\"pushButton_2\")\n        self.horizontalLayout.addWidget(self.pushButton_2)\n        self.pushButton_3 = QtWidgets.QPushButton(self.widget)\n        self.pushButton_3.setObjectName(\"pushButton_3\")\n        self.horizontalLayout.addWidget(self.pushButton_3)\n        self.pushButton_4 = QtWidgets.QPushButton(self.widget)\n        self.pushButton_4.setObjectName(\"pushButton_4\")\n        self.horizontalLayout.addWidget(self.pushButton_4)\n        self.widget1 = QtWidgets.QWidget(self.centralwidget)\n        self.widget1.setGeometry(QtCore.QRect(110, 160, 578, 194))\n        self.widget1.setObjectName(\"widget1\")\n        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget1)\n        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout_2.setObjectName(\"horizontalLayout_2\")\n        self.listView = QtWidgets.QListView(self.widget1)\n        self.listView.setObjectName(\"listView\")\n        self.horizontalLayout_2.addWidget(self.listView)\n        self.pushButton_5 = QtWidgets.QPushButton(self.widget1)\n        self.pushButton_5.setObjectName(\"pushButton_5\")\n        self.horizontalLayout_2.addWidget(self.pushButton_5)\n        self.checkBox = QtWidgets.QCheckBox(self.widget1)\n        self.checkBox.setObjectName(\"checkBox\")\n        self.horizontalLayout_2.addWidget(self.checkBox)\n        self.radioButton = QtWidgets.QRadioButton(self.widget1)\n        self.radioButton.setObjectName(\"radioButton\")\n        self.horizontalLayout_2.addWidget(self.radioButton)\n        MainWindow.setCentralWidget(self.centralwidget)\n        self.menubar = QtWidgets.QMenuBar(MainWindow)\n        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))\n        self.menubar.setObjectName(\"menubar\")\n        MainWindow.setMenuBar(self.menubar)\n        self.statusbar = QtWidgets.QStatusBar(MainWindow)\n        self.statusbar.setObjectName(\"statusbar\")\n        MainWindow.setStatusBar(self.statusbar)\n\n        self.retranslateUi(MainWindow)\n        QtCore.QMetaObject.connectSlotsByName(MainWindow)\n\n    def retranslateUi(self, MainWindow):\n        _translate = QtCore.QCoreApplication.translate\n        MainWindow.setWindowTitle(_translate(\"MainWindow\", \"MainWindow\"))\n        self.pushButton.setText(_translate(\"MainWindow\", \"Button1\"))\n        self.pushButton_2.setText(_translate(\"MainWindow\", \"Button2\"))\n        self.pushButton_3.setText(_translate(\"MainWindow\", \"Button3\"))\n        self.pushButton_4.setText(_translate(\"MainWindow\", \"Button4\"))\n        self.pushButton_5.setText(_translate(\"MainWindow\", \"PushButton\"))\n        self.checkBox.setText(_translate(\"MainWindow\", \"CheckBox\"))\n        self.radioButton.setText(_translate(\"MainWindow\", \"RadioButton\"))\n\n</code></pre>\n<p>如何在程序里面调用，先新建一个Run_demo1.py文件</p>\n<p>代码如下：</p>\n<pre><code class=\"prism language-html\">import sys\nimport demo1\n\nfrom PyQt5.QtWidgets import QApplication,QMainWindow\n\nif __name__ == '__main__':\n    # 只有直接运行这个脚本，才会往下执行\n    # 别的脚本文件执行，不会调用这个条件句\n\n    # 实例化，传参\n    app = QApplication(sys.argv)\n\n    # 创建对象\n    mainWindow = QMainWindow()\n\n    # 创建ui，引用demo1文件中的Ui_MainWindow类\n    ui = demo1.Ui_MainWindow()\n    # 调用Ui_MainWindow类的setupUi，创建初始组件\n    ui.setupUi(mainWindow)\n    # 创建窗口\n    mainWindow.show()\n    # 进入程序的主循环，并通过exit函数确保主循环安全结束(该释放资源的一定要释放)\n    sys.exit(app.exec_())\n</code></pre>\n<p>运行：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8b3568d4dde54b638001f81f84a5cacd.png\"/></p>\n<p>弹出如下窗口：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f5de74e4ff614a55a77d43b3a19b7b05.png\"/></p>\n<p>此时出现了一个小问题：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b7832e8db1e14a3998b236a26907401c.png\"/></p>\n<p>如何解决： (将此目录生成源代码目录)</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9fc2092a9bf9493ca16d4b3e0e5d2a6b.png\"/></p>\n<p>设置完成之后，等待加载完成，导入文件名底下的红线消失</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\785b54d7e75b4d55832efba9583f0486.png\"/></p>\n<h5><a id=\"9QtDesignerHorizontal_Layout_371\"></a>9.在QtDesigner中使用垂直布局(Horizontal Layout)</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\65f36d35f64449c9ba50d1d21e4835f0.png\"/></p>\n<p>和水平布局的操作类似，也有两种布局方式：</p>\n<h6><a id=\"1__378\"></a>(1) 先移动组件，再布局</h6>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9216c62a80fa45fdb781c3f99a3ebc44.png\"/></p>\n<h6><a id=\"2__383\"></a>(2) 先布局，再移动组件</h6>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b663face943849df9c84a466655cade1.png\"/></p>\n<p>点击保存，生成垂直布局文件demo2.ui</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\24fccea0af5041729c602f8cf0b40961.png\"/></p>\n<p>右键demo2.ui,生成demo2.py文件</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0265a2a01e1e4b829a11b82c275c4217.png\"/></p>\n<p>demo2.py的代码如下：</p>\n<pre><code class=\"prism language-html\"># -*- coding: utf-8 -*-\n\n# Form implementation generated from reading ui file 'demo2.ui'\n#\n# Created by: PyQt5 UI code generator 5.15.4\n#\n# WARNING: Any manual changes made to this file will be lost when pyuic5 is\n# run again.  Do not edit this file unless you know what you are doing.\n\n\nfrom PyQt5 import QtCore, QtGui, QtWidgets\n\n\nclass Ui_MainWindow(object):\n    def setupUi(self, MainWindow):\n        MainWindow.setObjectName(\"MainWindow\")\n        MainWindow.resize(800, 600)\n        self.centralwidget = QtWidgets.QWidget(MainWindow)\n        self.centralwidget.setObjectName(\"centralwidget\")\n        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)\n        self.verticalLayoutWidget.setGeometry(QtCore.QRect(180, 150, 441, 371))\n        self.verticalLayoutWidget.setObjectName(\"verticalLayoutWidget\")\n        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)\n        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)\n        self.verticalLayout_2.setObjectName(\"verticalLayout_2\")\n        self.label = QtWidgets.QLabel(self.verticalLayoutWidget)\n        self.label.setObjectName(\"label\")\n        self.verticalLayout_2.addWidget(self.label)\n        self.pushButton_6 = QtWidgets.QPushButton(self.verticalLayoutWidget)\n        self.pushButton_6.setObjectName(\"pushButton_6\")\n        self.verticalLayout_2.addWidget(self.pushButton_6)\n        self.pushButton_5 = QtWidgets.QPushButton(self.verticalLayoutWidget)\n        self.pushButton_5.setObjectName(\"pushButton_5\")\n        self.verticalLayout_2.addWidget(self.pushButton_5)\n        self.pushButton_4 = QtWidgets.QPushButton(self.verticalLayoutWidget)\n        self.pushButton_4.setObjectName(\"pushButton_4\")\n        self.verticalLayout_2.addWidget(self.pushButton_4)\n        self.checkBox = QtWidgets.QCheckBox(self.verticalLayoutWidget)\n        self.checkBox.setObjectName(\"checkBox\")\n        self.verticalLayout_2.addWidget(self.checkBox)\n        self.widget = QtWidgets.QWidget(self.centralwidget)\n        self.widget.setGeometry(QtCore.QRect(40, 40, 95, 121))\n        self.widget.setObjectName(\"widget\")\n        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)\n        self.verticalLayout.setContentsMargins(0, 0, 0, 0)\n        self.verticalLayout.setObjectName(\"verticalLayout\")\n        self.pushButton = QtWidgets.QPushButton(self.widget)\n        self.pushButton.setObjectName(\"pushButton\")\n        self.verticalLayout.addWidget(self.pushButton)\n        self.pushButton_2 = QtWidgets.QPushButton(self.widget)\n        self.pushButton_2.setObjectName(\"pushButton_2\")\n        self.verticalLayout.addWidget(self.pushButton_2)\n        self.pushButton_3 = QtWidgets.QPushButton(self.widget)\n        self.pushButton_3.setObjectName(\"pushButton_3\")\n        self.verticalLayout.addWidget(self.pushButton_3)\n        MainWindow.setCentralWidget(self.centralwidget)\n        self.menubar = QtWidgets.QMenuBar(MainWindow)\n        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))\n        self.menubar.setObjectName(\"menubar\")\n        MainWindow.setMenuBar(self.menubar)\n        self.statusbar = QtWidgets.QStatusBar(MainWindow)\n        self.statusbar.setObjectName(\"statusbar\")\n        MainWindow.setStatusBar(self.statusbar)\n\n        self.retranslateUi(MainWindow)\n        QtCore.QMetaObject.connectSlotsByName(MainWindow)\n\n    def retranslateUi(self, MainWindow):\n        _translate = QtCore.QCoreApplication.translate\n        MainWindow.setWindowTitle(_translate(\"MainWindow\", \"MainWindow\"))\n        self.label.setText(_translate(\"MainWindow\", \"TextLabel\"))\n        self.pushButton_6.setText(_translate(\"MainWindow\", \"PushButton\"))\n        self.pushButton_5.setText(_translate(\"MainWindow\", \"PushButton\"))\n        self.pushButton_4.setText(_translate(\"MainWindow\", \"PushButton\"))\n        self.checkBox.setText(_translate(\"MainWindow\", \"CheckBox\"))\n        self.pushButton.setText(_translate(\"MainWindow\", \"PushButton\"))\n        self.pushButton_2.setText(_translate(\"MainWindow\", \"PushButton\"))\n        self.pushButton_3.setText(_translate(\"MainWindow\", \"PushButton\"))\n\n</code></pre>\n<p>在python程序里面调用，新建Run_demo2.py文件</p>\n<p>代码如下：</p>\n<pre><code class=\"prism language-html\">import sys\nimport demo2\n\nfrom PyQt5.QtWidgets import QApplication,QMainWindow\n\nif __name__ == '__main__':\n    # 只有直接运行这个脚本，才会往下执行\n    # 别的脚本文件执行，不会调用这个条件句\n\n    # 实例化，传参\n    app = QApplication(sys.argv)\n\n    # 创建对象\n    mainWindow = QMainWindow()\n\n    # 创建ui，引用demo1文件中的Ui_MainWindow类\n    ui = demo2.Ui_MainWindow()\n    # 调用Ui_MainWindow类的setupUi，创建初始组件\n    ui.setupUi(mainWindow)\n    # 创建窗口\n    mainWindow.show()\n    # 进入程序的主循环，并通过exit函数确保主循环安全结束(该释放资源的一定要释放)\n    sys.exit(app.exec_())\n</code></pre>\n<p>运行程序：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6436cbfd8d2d434686f9895c57c36768.png\"/></p>\n<h5><a id=\"10QtDesigner_516\"></a>10.在QtDesigner里面同时创建垂直布局和水平布局</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a3cb350f282e417096f51222b59720cc.png\"/></p>\n<p>新建一个 main window,点击 创建</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9ec38261c2d3499a983f1b78dc19df38.png\"/></p>\n<p>在布局的时候，windows里面，可以通过ctrl+上下左右进行微调。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\da23491d011c4e7db320d53b102e298a.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2fb71e1dba9d48fcb42b4bc3515dbcee.png\"/></p>\n<p>文件保存，命名为demo3.ui文件，同样用拓展工具，生成demo3.py文件。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6802b98fd22e4e91b159ec37f9463790.png\"/></p>\n<p>同样，新建运行文件Run_demo3.py文件，代码如下：</p>\n<pre><code class=\"prism language-html\">import sys\nimport demo3\n\nfrom PyQt5.QtWidgets import QApplication,QMainWindow\n\nif __name__ == '__main__':\n    # 只有直接运行这个脚本，才会往下执行\n    # 别的脚本文件执行，不会调用这个条件句\n\n    # 实例化，传参\n    app = QApplication(sys.argv)\n\n    # 创建对象\n    mainWindow = QMainWindow()\n\n    # 创建ui，引用demo1文件中的Ui_MainWindow类\n    ui = demo3.Ui_MainWindow()\n    # 调用Ui_MainWindow类的setupUi，创建初始组件\n    ui.setupUi(mainWindow)\n    # 创建窗口\n    mainWindow.show()\n    # 进入程序的主循环，并通过exit函数确保主循环安全结束(该释放资源的一定要释放)\n    sys.exit(app.exec_())\n</code></pre>\n<p>运行代码，结果如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\22bddffc9a114e1087a90357d431b896.png\"/></p>\n<h5><a id=\"11QtDesignerGrid_Layout_572\"></a>11.在QtDesigner中同时使用栅格布局(Grid Layout)</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\313d2b028d2544f3a8b3fe85dae21341.png\"/></p>\n<p>拖放四个按钮之后，选中栅格布局</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7624d37014564a25b0b9957a41b20467.png\"/></p>\n<p>选中之后，效果如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a7c751ed5b334ae89b611fc14a297c62.png\"/></p>\n<p>拖拽边角，可以放大：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b960b92c321a47c9bffd15d3b4f00d0e.png\"/></p>\n<p>练习：利用栅格布局实现计算器数字区域</p>\n<p>拖动button键调整好位置，全选之后选中布局，再选栅格布局</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7b7e99415b9c4a2fae9153449d2f55e1.png\"/></p>\n<p>点击栅格之后，效果如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cf24d63a1ad544faa0a164db20b2074b.png\"/></p>\n<p>保存，生成demo4.ui文件</p>\n<p>同样进行上述操作，转成demo4.py文件，新建Run_demo4.py文件，代码如下：</p>\n<pre><code>import sys\nimport demo4\n\nfrom PyQt5.QtWidgets import QApplication,QMainWindow\n\nif __name__ == '__main__':\n    # 只有直接运行这个脚本，才会往下执行\n    # 别的脚本文件执行，不会调用这个条件句\n\n    # 实例化，传参\n    app = QApplication(sys.argv)\n\n    # 创建对象\n    mainWindow = QMainWindow()\n\n    # 创建ui，引用demo1文件中的Ui_MainWindow类\n    ui = demo4.Ui_MainWindow()\n    # 调用Ui_MainWindow类的setupUi，创建初始组件\n    ui.setupUi(mainWindow)\n    # 创建窗口\n    mainWindow.show()\n    # 进入程序的主循环，并通过exit函数确保主循环安全结束(该释放资源的一定要释放)\n    sys.exit(app.exec_())\n</code></pre>\n<p>效果如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f5382d8dbdf2402fb1e5214ad4e00b71.png\"/></p>\n<p>栅格布局的注意点：摆放控件要尽可能的整齐，这样系统才会正确的识别。</p>\n<p>栅格布局和水平布局，垂直布局一样，可以后期添加控件。</p>\n<h5><a id=\"12_647\"></a>12.向栅格布局中拖动控件</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fe2713ebaff54c59954f2f6ebe795e87.png\"/></p>\n<h5><a id=\"13QtDesignerForm_Layout_652\"></a>13.在QtDesigner中使用表单布局(Form Layout)</h5>\n<p>新建一个 main window,点击 创建</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cef936470da9484c94ef7f81a359188d.png\"/></p>\n<p>选择需要的控件，进行如下操作：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\999f06f5185946b6a00518022717e21d.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c3cad0cadc8145d5b76a446e9e560f4b.png\"/></p>\n<p>调整好布局，保存文件为demo5.ui</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ab2abc926bc9463090f73698c54818da.png\"/></p>\n<p>利用pyUIC插件，生成python代码调试</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8cc53116e5534dc8af12eff6b1cd9e6e.png\"/></p>\n<p>创建Run_demo5.py文件，执行代码如下：</p>\n<pre><code class=\"prism language-html\">import sys\nimport demo5\n\nfrom PyQt5.QtWidgets import QApplication,QMainWindow\n\nif __name__ == '__main__':\n    # 只有直接运行这个脚本，才会往下执行\n    # 别的脚本文件执行，不会调用这个条件句\n\n    # 实例化，传参\n    app = QApplication(sys.argv)\n\n    # 创建对象\n    mainWindow = QMainWindow()\n\n    # 创建ui，引用demo1文件中的Ui_MainWindow类\n    ui = demo5.Ui_MainWindow()\n    # 调用Ui_MainWindow类的setupUi，创建初始组件\n    ui.setupUi(mainWindow)\n    # 创建窗口\n    mainWindow.show()\n    # 进入程序的主循环，并通过exit函数确保主循环安全结束(该释放资源的一定要释放)\n    sys.exit(app.exec_())\n</code></pre>\n<p>效果如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9e4f11c1b90d4e0ea1d2124712e3a3ff.png\"/></p>\n<h5><a id=\"14_712\"></a>14.在容器中完成布局</h5>\n<p>跟上面一样，新建一个MainWindow，添加对应的组件，鼠标右键点击，变形为对应的容器。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\70139f1fbcdc4f1fb4b01fd86786af29.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cb4a44c43387430cacb53a793f2d4591.png\"/></p>\n<p>同理，生成demo6.py文件，新建Run_demo6文档，添加代码</p>\n<pre><code>import sys\nimport demo6\n\nfrom PyQt5.QtWidgets import QApplication,QMainWindow\n\nif __name__ == '__main__':\n    # 只有直接运行这个脚本，才会往下执行\n    # 别的脚本文件执行，不会调用这个条件句\n\n    # 实例化，传参\n    app = QApplication(sys.argv)\n\n    # 创建对象\n    mainWindow = QMainWindow()\n\n    # 创建ui，引用demo1文件中的Ui_MainWindow类\n    ui = demo6.Ui_MainWindow()\n    # 调用Ui_MainWindow类的setupUi，创建初始组件\n    ui.setupUi(mainWindow)\n    # 创建窗口\n    mainWindow.show()\n    # 进入程序的主循环，并通过exit函数确保主循环安全结束(该释放资源的一定要释放)\n    sys.exit(app.exec_())\n</code></pre>\n<p>运行程序</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9c77e3f5e52c475f9071a1d4204384d2.png\"/></p>\n<p>15.在QtDesigner中使用绝对布局</p>\n<p>跟上面一样，新建一个MainWindow，添加对应的组件，</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\798351ab27344d46a1870e880d424630.png\"/></p>\n<p>同理，生成demo7.py文件，新建Run_demo7文档，添加代码(代码如上，略作修改)，PyCharm里运行如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d6acd731452b4652b9357e1d4b19b6c5.png\"/></p>\n<h5><a id=\"15QtDesigner_767\"></a>15.在QtDesigner中使用分割线与间隔</h5>\n<p>跟上面一样，新建一个MainWindow，</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\03217b1fa877429caafc23a71a6b8f58.png\"/></p>\n<p>新建4个按钮，设置水平间隔，新建3个按钮，设置垂直间隔</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\97dbaccf49a54166a5b74f90c50dec38.png\"/></p>\n<p>在A2和A3之间设立分割线，在B2和B3之间设立分割线</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a0df9f85acd244e093d9304245699bdd.png\"/></p>\n<p>保存文件为demo8.ui ,转为demo8.py代码，新建Run_demo8.py，添加代码(代码如上，略作修改)，PyCharm里运行如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b4ba74cf69424c26a1a108497f595d28.png\"/></p>\n<p>16.布局的最大尺寸和最小尺寸</p>\n<p>默认状态下，它的尺寸可以自由调节，跟上面一样，新建一个MainWindow，</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\951ee3a0268c46b4aa7edc23e5736298.png\"/></p>\n<p>可以看到，原本这个bushButton控件最小宽高可以到0，最大宽高可以到1677215</p>\n<p>通过改变右侧栏的值，就可以设置它不小于多少，不大于多少。</p>\n<h5><a id=\"16sizePolicy_800\"></a>16.尺寸策略(sizePolicy)</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a6224fc97933423ea414627a8f15daa9.png\"/></p>\n<p>对于大多数控件来说，sizeHint(期望尺寸)是只可读的，也就是说，你布局的时候不管拖拽多大，最后输出的还是默认值</p>\n<p>读取pushButton的期望尺寸：</p>\n<pre><code>self.pushButton.sizeHint().width()\nself.pushButton.sizeHint().height()\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8e17ddc21c2e4256b7fc4693bd19d21b.png\"/></p>\n<p>即可以看到，一个pushButton的期望尺寸，宽是41，高度是28</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\25c95c535e074650bc3e0d575b0ace9c.png\"/></p>\n<p>在demo7里进行上面操作，还是得到一样的数值。</p>\n<p>同理，也可以进行读取其他控件的操作，比如读取textBrowser的宽高，代码如下：</p>\n<pre><code class=\"prism language-html\">self.c.sizeHint().width()\nself.textBrowser.sizeHint().height()\n</code></pre>\n<p>效果如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f43b4d586ffe4957b09b49dfd2ba3fcc.png\"/></p>\n<p>即可以看到：控件textBrowser的默认宽高分别为256和192。</p>\n<p>同样，也可以看最小的期望尺寸，以pushButton为例，其代码如下：</p>\n<pre><code>self.pushButton.minimumSizeHint().width()\nself.pushButton.minimumSizeHint().height()\n</code></pre>\n<p>还是以demo7.py测试</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\86418445a5754a879a86f40229dcd9bd.png\"/></p>\n<p>可以看到，对于大部分控件来说，它的期望尺寸和最小期望尺寸是一样的</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\61bfd5a80e624492a01532ced8269ce3.png\"/></p>\n<p>为何使用尺寸策略：</p>\n<p>就是因为拓展的组件无论如何拖拽大小，经过布局设置之后，会回到默认的大小，为了让布局更有个性，采用尺寸策略，可以改变组件的期望尺寸。如图：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f8f826848a394d8a8973cf423ba2aaa4.png\"/></p>\n<p>练习，左侧放树，构造分栏效果</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d332dab4e20f494ba23dffc348abefd7.png\"/></p>\n<p>保存文档为demo9.ui,转为demo9.py代码，新建Run_demo9.py，添加代码(代码如上，略作修改)，PyCharm里运行如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1ec35dac9fc940279e07e1c6a53d968c.png\"/></p>\n<h5><a id=\"17QtDesigner_872\"></a>17.在QtDesigner里面设置控件之间的伙伴关系</h5>\n<p>即控件关联之后，可以通过一个控件来控制另外一个控件</p>\n<p>新建一个MainWindow，布局如下，保存为demo10.ui</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e8967b80980842e996e07ffbfaae7cf8.png\"/></p>\n<p>接着：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c56c70e7a7f84668bb2df69f4a9ba51c.png\"/></p>\n<p>如上图所示，水平布局后面的“H”为热键 ，Ctrl +1 为快捷键</p>\n<p>​ 垂直布局后面的“V”为热键 ，Ctrl +2 为快捷键</p>\n<p>热键：只有在这个菜单显示时，按“H”时，才会起作用。菜单关闭时，按“H”不起作用。“V”同理。</p>\n<p>然后给demo10.ui文件的lable添加热键：</p>\n<p>给姓名添加热键成：姓名(&amp;A):</p>\n<p>给年龄添加热键成：年龄(&amp;B):</p>\n<p>给邮箱添加热键成：邮箱(&amp;C):</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b7bfa595b4004a17bc4af5ae5f7f1949.png\"/></p>\n<p>然后打开编辑伙伴，按住鼠标左键，选中lable指向Line Edit</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\567ab23fb5774195a9f37bcd88499393.png\"/></p>\n<p>然后选择编辑窗口部件，会切回到正常的部件</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\50e6364bd99d486488f2020439e78b9a.png\"/></p>\n<p>保存文件为demo10.ui ,转为demo10.py代码，新建Run_demo10.py，添加代码(代码如上，略作修改)，PyCharm里运行如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\25b5c4adf931407aae741d6d9231ed53.png\"/></p>\n<p>再添加三个lable试一下效果，删除掉原来的demo10.py文件，用新保存的demo10.ui去生成新的demo10.py文件，点击运行查看效果</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a003a4a0a28f4c92b541022919506de2.png\"/></p>\n<p>果然，按住alt+a,alt+b,alt+c,alt+d,alt+e.alt+f分别在右边对应的的Line Edit里面有焦点光标。</p>\n<p>拓展：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\557438d5e83f4f7d9beba3d825c21ade.png\"/></p>\n<h5><a id=\"18Tab_929\"></a>18.如何修改控件的Tab顺序</h5>\n<p>新建一个MainWindow，布局如下，在Edit里面，选中 编辑 Tab顺序，在控件前端就会出现序号，这个序号就是顺序</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\63a2d94e750b45f68b18e1bf1ec787a7.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\194921b9d3744cc0bd223515da7b8dab.png\"/></p>\n<p>也可以选中从这里开始或者重新开始，依次点击形成顺序。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\82b3336c57dd431eb1f455bb5a849509.png\"/></p>\n<p>接下来选中统一的 Line Edit来演示</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1d5f25a1b47c444eb4842f69d76cd455.png\"/></p>\n<p>保存文档为demo11.ui,转为demo11.py代码，新建Run_demo11.py，添加代码(代码如上，略作修改)，PyCharm里运行如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5e339569cdd347f297d7f4721b3544ce.png\"/></p>\n<p>按Tab 键，焦点光标就会按照指定的顺序在Line Edit内跳转</p>\n<h5><a id=\"19QtDesigner_956\"></a>19.在QtDesigner中完成信号与槽的设置</h5>\n<p>信号(signal)与槽(slot)是Qt的核心机制，由于PyQt忠实的继承了Qt的所有特性，所有信号与槽也是PyQt的核心机制。</p>\n<p>信号：是由对象或控件发射出去的消息。可以理解为按钮的单击事件。</p>\n<p>当单击按钮时，按钮就会向外部发送单击的消息，这些发送出去的信号需要一些代码来拦截，这些代码就是槽</p>\n<p>槽本质上是一个函数或者方法，信号可以理解为事件，槽可以理解为事件函数</p>\n<p>信号与槽的设置：就是需要将信号和槽绑定</p>\n<p>一个信号可以和多个槽绑定，一个槽可以拦截多个信号。</p>\n<p>信号和槽绑定有两种方式，一种是用QtDesigner进行绑定，一种是在代码中进行绑定</p>\n<h6><a id=\"1QtDesigner_972\"></a>(1)用QtDesigner进行信号和槽绑定</h6>\n<p>需求：单机按钮，关闭窗口</p>\n<p>新建一个MainWindow，拖拽一个pashButton按钮，修改文本为“关闭窗口”</p>\n<p>在Edit里选择编辑信号/槽，点击pashButton按钮向外拖拽，</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0fa78e2e887849ceb5ee3bac6e6395f6.png\"/></p>\n<p>在Edit里选择编辑信号/槽，点击pashButton按钮向外拖拽，松开鼠标，左栏选择clicked(),勾选左下角“显示从QWidget”继承信号和槽，右栏选择close(),然后点击右下角ok.</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c5e0b8a3e7f64ee185a9a489623979a3.png\"/></p>\n<p>在Edit里面选择“编辑窗口部件”，对布局页面进行恢复。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5352384e5f3942c98b31221a255f31cf.png\"/></p>\n<p>在“窗体”里选择“预览于”，选择“Windows风格”</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\13571434159a4d4b860e3497f92b108c.png\"/></p>\n<p>此时点击页面的“关闭窗口”，则页面就会关闭</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9d7ee0f8a6a6460a9e78f01ff598ca52.png\"/></p>\n<p>练习</p>\n<p>添加两个CheckBox进行如下操作：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fa72b1a0aa44455ea3bd601fae79ce0d.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5bcd79b8fe344c6695ff5a9c1135ea84.png\"/></p>\n<p>给第一个CheckBox进行信号与槽的绑定</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7bfd18a9a7d84df2a56b38a42fce502d.png\"/></p>\n<p>给第二个CheckBox进行信号与槽的绑定</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\65532da4c9e343c286bd82a4a6a7cde9.png\"/></p>\n<p>在Edit里面选择\"编辑窗口部件\"进行恢复主窗口</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8957f8fbe80d4445a3464d830c1936b8.png\"/></p>\n<p>恢复完成后，窗口如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fc26d0a3ae7f413fa2c715b7d5965479.png\"/></p>\n<p>预览效果如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ada804264faa44319b4dcb7f96721ef4.png\"/></p>\n<p>取消勾选check box的选项，下面的line Edit视角效果也会相应的变换。</p>\n<p>保存文档为demo12.ui,转为demo12.py代码，新建Run_demo12.py，添加代码(代码如上，略作修改)，PyCharm里运行如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\53b75d00fd614a7e870938e1ddf73161.png\"/></p>\n<p>拓展：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\663a7c3aba10418abd85daf26be00894.png\"/></p>\n<h6><a id=\"2_1049\"></a>(2)用代码完成关闭主窗口</h6>\n<p>​ 见第23节</p>\n<h5><a id=\"20_QtDesigner_1053\"></a>20 在QtDesigner中为窗口添加菜单和工具栏</h5>\n<p>一个窗口，应该拥有菜单栏，工具栏，状态栏</p>\n<p>新建一个MainWindow，添加菜单栏，添加完成之后，也可以右键点击，选择移除，同理添加工具栏。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ff9b8b1cca524328bbd64599aa9bc0fc.png\"/></p>\n<p>给菜单栏添加内容：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\25b4b7a247ad4938ba91df9c763b14e8.png\"/></p>\n<p>在”窗体“里选择预览，效果如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0fd5ae35269f4d3795fb76d02c0ea0ea.png\"/></p>\n<p>在菜单和工具条里面如何添加按钮？</p>\n<p>不管是菜单还是工具条的按钮，是一个action的动作，添加步骤如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\024b09ab40d346c5a5f1c60cc57d64c4.png\"/></p>\n<p>在\"视图\"里，选择动作编辑器</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3a453764fdcf417fbb74d059a886487b.png\"/></p>\n<p>两个菜单自动生成两个动作，双击可用设置动作</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f1cb8208a5034fefb5a266e368dd584d.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cf06277bed5b4d6a8adc8d5be617f5c2.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9dd9d679a97b4f8a8084334290855ccb.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a9e17b62b9424becade0bcba002062e8.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\533f5037ad634bdaa74e3fabf27a1a47.png\"/></p>\n<p>点击\"ok\"之后，主窗口变化如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8031a1387d94447681d9fe32093170f8.png\"/></p>\n<p>保存文档为demo13.ui,转为demo13.py代码，新建Run_demo13.py，添加代码(代码如上，略作修改)，PyCharm里运行如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\564edc9880744ec99972d7b363df1833.png\"/></p>\n<h5><a id=\"21___1110\"></a>21 创建主窗口</h5>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a2c5e1c2516042a6a0755e4489ed1f80.png\"/></p>\n<p>主窗口类型，有三种窗口</p>\n<table><thead><tr><th>窗口类型</th><th>说明</th></tr></thead><tbody><tr><td>QMainWindow</td><td>可以包含菜单栏、工具栏、状态栏和标题栏，是最常见的窗口形式</td></tr><tr><td>QDialog</td><td>是对话窗口的基类。没有菜单栏、工具栏、状态栏</td></tr><tr><td>QWidget</td><td>不确定窗口的用途，就使用QWidget</td></tr></tbody></table>\n<p>如下图所示，新建一个controls文件夹，在controls里面新建images文件夹用来装图片，在controls里面新建</p>\n<p>FirstMainWin.py文件。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6a4a42833f8a4d5482e84d6d1411dd08.png\"/></p>\n<p>在FirstMainWin.py文件中，添加代码如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 第一个主窗口</span>\n<span class=\"token comment\"># 把所有和UI有关的代码都放在一个类里面，创建窗口只要创建类的实例就可以了</span>\n\n<span class=\"token keyword\">import</span> sys\n\n<span class=\"token comment\"># 从PyQt里面创建窗口和应用</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> QMainWindow<span class=\"token punctuation\">,</span>QApplication\n<span class=\"token comment\"># 用来添加图标</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> QIcon\n\n<span class=\"token comment\"># 定义一个类，这个类从QMainWindow里面继承</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FristMainWin</span><span class=\"token punctuation\">(</span>QMainWindow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\"># 初始化</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>parent<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>FristMainWin<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置主窗口的标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'第一个主窗口应用'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置窗口的尺寸</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 获得状态栏</span>\n        self<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>statusBar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 在状态栏上，设置消息的状态时间5000ms</span>\n        self<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">.</span>showMessage<span class=\"token punctuation\">(</span><span class=\"token string\">'只存在5秒的消息'</span><span class=\"token punctuation\">,</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 防止别的脚本调用，只有自己单独运行，才会调用下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\"># 创建app实例，并传入参数</span>\n    app <span class=\"token operator\">=</span>  QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 设置图标</span>\n    app<span class=\"token punctuation\">.</span>setWindowIcon<span class=\"token punctuation\">(</span>QIcon<span class=\"token punctuation\">(</span><span class=\"token string\">'images/horse.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> FristMainWin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 进入程序的主循环，并通过exit函数确保主循环安全结束(该释放资源的一定要释放)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n</code></pre>\n<p>运行代码，效果如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a949f9afcea3458e892d77c519ed54f7.png\"/></p>\n<p>五秒之后，页面效果如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\858254bb31a44ce997df46407c5c3eac.png\"/></p>\n<h5><a id=\"22_1192\"></a>22.让主窗口居中显示</h5>\n<p>计算窗口的左上角的坐标</p>\n<p>移动左上角的坐标，带动整个窗口的移动。</p>\n<p>左上角的横坐标就是窗口的左边距，左上角的纵坐标就是窗口的上边距到顶部的值</p>\n<p>新建CenterForm.py文件，执行代码：</p>\n<pre><code class=\"prism language-html\"># 让主窗口居中显示\n\n# 通过QDesktopWidget类相应的API可以得到整个屏幕的尺寸\n# 通过move方法移动窗口\nimport sys\n\n# 从PyQt里面创建窗口和应用\nfrom PyQt5.QtWidgets import QDesktopWidget,QMainWindow,QApplication\n# 用来添加图标\nfrom PyQt5.QtGui import QIcon\n\n# 定义一个类，这个类从QMainWindow里面继承\n\nclass CenterForm(QMainWindow):\n\n    # 初始化\n    def __init__(self,parent=None):\n        super(CenterForm,self).__init__(parent)\n\n        # 设置主窗口的标题\n        self.setWindowTitle('让窗口居中')\n\n        # 设置窗口的尺寸\n        self.resize(400,300)\n\n        # 添加center方法，作用就是让窗口居中\n        def center(self):\n            # 创建实例，获得屏幕对象,得到屏幕的坐标系\n            screen = QDesktopWidget().screenGeometry()\n\n            # 得到窗口的坐标系\n            size = self.geometry()\n\n            # 获取屏幕的宽度、高度\n            # 窗口左边缘的坐标等于(屏幕的宽度-窗口的宽度)/2\n            newLeft = (screen.width()-size.width()) / 2\n\n            # 屏幕上边缘的坐标等于(屏幕的高度-窗口的高度) / 2\n            newTop = (screen.height() - size.height()) / 2\n\n            # 移动窗口\n            self.move(newLeft,newTop)\n\n        #  获得状态栏\n        # self.status = self.statusBar()\n        #\n        # # 在状态栏上，设置消息的状态时间5000ms\n        # self.status.showMessage('只存在5秒的消息',5000)\n\n    # 防止别的脚本调用，只有自己单独运行，才会调用下面代码\nif __name__ == '__main__':\n\n    # 创建app实例，并传入参数\n    app =  QApplication(sys.argv)\n\n    # 设置图标\n    # app.setWindowIcon(QIcon('images/001.jpg'))\n\n    # 创建对象\n    main =CenterForm()\n\n    # 创建窗口\n    main.show()\n\n    # 进入程序的主循环，并通过exit函数确保主循环安全结束(该释放资源的一定要释放)\n    sys.exit(app.exec_())\n\n\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e9b2263763554cfc963b5c5ea7d90277.png\"/></p>\n<h5><a id=\"23_1277\"></a>23.如何退出应用程序</h5>\n<p>可以通过关闭主窗口，由于整个程序只有一个窗口，关闭主窗口之后，应用程序就会退出，之前在第19节演示过</p>\n<p>换个思路，通过代码，在窗口上添加一个pashButton,调用QApplication里面的click()方法，来实现退出应用程序，关闭所有窗口</p>\n<p>在controls文件夹里，新建QuitApplication.py文件，添加下列代码</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 退出应用程序</span>\n<span class=\"token comment\"># 用到了水平布局，引入QHBoxLayout</span>\n<span class=\"token comment\"># 需要一个控件，引入了QWidget</span>\n<span class=\"token comment\"># 需要butoon，引入了QPushButton</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> QHBoxLayout<span class=\"token punctuation\">,</span>QMainWindow<span class=\"token punctuation\">,</span>QApplication<span class=\"token punctuation\">,</span>QPushButton<span class=\"token punctuation\">,</span>QWidget\n<span class=\"token comment\"># 用来添加图标</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> QIcon\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QuitApplication</span><span class=\"token punctuation\">(</span>QMainWindow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\"># 初始化</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>QuitApplication<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设计窗口的尺寸</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置主窗口的标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'退出应用程序'</span><span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 添加Button</span>\n        <span class=\"token comment\"># 创建全局对象self.button1</span>\n        self<span class=\"token punctuation\">.</span>button1 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'退出应用程序'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 发送单击信号，执行对应的方法  (将信息与槽关联)</span>\n        self<span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>onClick_Button<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建水平布局</span>\n        layout <span class=\"token operator\">=</span> QHBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 将组件加到水平局部里面</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 放置一个主框架</span>\n        mainFrame <span class=\"token operator\">=</span> QWidget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 在主框架内添加水平布局</span>\n        mainFrame<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 把主框架放在窗口上</span>\n        self<span class=\"token punctuation\">.</span>setCentralWidget<span class=\"token punctuation\">(</span>mainFrame<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 按钮的单击事件的方法(自定义的槽)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">onClick_Button</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        sender <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'按钮被按下'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 得到实例</span>\n        app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 退出应用程序</span>\n        app<span class=\"token punctuation\">.</span>quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n    <span class=\"token comment\"># 防止别的脚本调用，只有自己单独运行，才会调用下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\"># 创建app实例，并传入参数</span>\n    app <span class=\"token operator\">=</span>  QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 设置图标</span>\n    app<span class=\"token punctuation\">.</span>setWindowIcon<span class=\"token punctuation\">(</span>QIcon<span class=\"token punctuation\">(</span><span class=\"token string\">'images/001.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> QuitApplication<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 进入程序的主循环，并通过exit函数确保主循环安全结束(该释放资源的一定要释放)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>运行代码，效果如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\38b4a35122b544fd8d3cd9bf27255133.png\"/></p>\n<p>点击“退出应用程序”</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\82f9b38203f34fada87b9a43343484f8.png\"/></p>\n<h5><a id=\"24_1366\"></a>24.屏幕坐标系</h5>\n<p>在controls文件夹里，新建ScreenGeometry.py文件，添加下列代码</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 屏幕坐标系</span>\n<span class=\"token comment\"># 它是以屏幕左上角为原点，划分的坐标系</span>\n\n<span class=\"token comment\"># 下面演示用面向过程的方式进行演示  （面向对象的方式需要创建类，创建方法）</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> QHBoxLayout<span class=\"token punctuation\">,</span>QMainWindow<span class=\"token punctuation\">,</span>QApplication<span class=\"token punctuation\">,</span>QPushButton<span class=\"token punctuation\">,</span>QWidget\n\n<span class=\"token comment\"># 创建实例</span>\napp <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 创建窗口</span>\nwidget <span class=\"token operator\">=</span> QWidget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 在窗口里放button</span>\nbtn <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span>widget<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 在button里面更改文本</span>\nbtn<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token string\">\"按钮\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 添加点击事件，让鼠标点击button后，打印出“onclick”</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">onClick_Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第一种方式获取各个值\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 窗口离屏幕原点到y轴的距离</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"widget.x() = %d\"</span> <span class=\"token operator\">%</span> widget<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 600 （以屏幕为原点的窗口横坐标）</span>\n    <span class=\"token comment\"># 窗口离屏幕原点到x轴的距离</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"widget.y() = %d\"</span> <span class=\"token operator\">%</span> widget<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 200  （以屏幕为原点的窗口纵坐标，不包含标题栏）</span>\n    <span class=\"token comment\"># 窗口本身的宽度</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"widget.width()=%d\"</span> <span class=\"token operator\">%</span> widget<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 300 (窗口宽度)</span>\n    <span class=\"token comment\"># 窗口本身的高度</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"widget.height()= %d\"</span> <span class=\"token operator\">%</span> widget<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 240  (工作区高度)</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第二种方式获取各个值\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 窗口离屏幕原点到y轴的距离</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"widget.geometry().x() = %d\"</span> <span class=\"token operator\">%</span> widget<span class=\"token punctuation\">.</span>geometry<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 601   （以屏幕为原点的窗口横坐标）</span>\n    <span class=\"token comment\"># 窗口离屏幕原点到x轴的距离</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"widget.geometry().y() = %d\"</span> <span class=\"token operator\">%</span> widget<span class=\"token punctuation\">.</span>geometry<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 238    （以屏幕为原点的窗口纵坐标，包含标题栏）</span>\n    <span class=\"token comment\"># 窗口本身的宽度</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"widget.geometry().width()=%d\"</span> <span class=\"token operator\">%</span> widget<span class=\"token punctuation\">.</span>geometry<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 300    (窗口宽度)</span>\n    <span class=\"token comment\"># 窗口本身的高度</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"widget.geometry().height()= %d\"</span> <span class=\"token operator\">%</span> widget<span class=\"token punctuation\">.</span>geometry<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 240    (工作区高度)</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第三种方式获取各个值\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 窗口离屏幕原点到y轴的距离</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"widget.frameGeometry().x() = %d\"</span> <span class=\"token operator\">%</span> widget<span class=\"token punctuation\">.</span>frameGeometry<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 600  （以屏幕为原点的窗口横坐标）</span>\n    <span class=\"token comment\"># 窗口离屏幕原点到x轴的距离</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"widget.frameGeometry().y() = %d\"</span> <span class=\"token operator\">%</span> widget<span class=\"token punctuation\">.</span>frameGeometry<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 200    （以屏幕为原点的窗口纵坐标，不包含标题栏）</span>\n    <span class=\"token comment\"># 窗口本身的宽度</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"widget.frameGeometry().width()=%d\"</span> <span class=\"token operator\">%</span> widget<span class=\"token punctuation\">.</span>frameGeometry<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 302   (窗口宽度)</span>\n    <span class=\"token comment\"># 窗口本身的高度</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"widget.frameGeometry().height()= %d\"</span> <span class=\"token operator\">%</span> widget<span class=\"token punctuation\">.</span>frameGeometry<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 279  (窗口高度，包含标题栏)</span>\n\n<span class=\"token comment\"># 将点击事件与槽绑定</span>\nbtn<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>onClick_Button<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 移动button到窗口内的相应位置</span>\nbtn<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span><span class=\"token number\">52</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 设置窗口的尺寸</span>\nwidget<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">240</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 设置工作区的尺寸</span>\n\n<span class=\"token comment\"># 移动窗口到屏幕的相应位置</span>\nwidget<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token number\">600</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 设置窗口的标题</span>\nwidget<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'屏幕坐标系'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 创建窗口</span>\nwidget<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 进入程序的主循环，并通过exit函数确保主循环安全结束(该释放资源的一定要释放)</span>\n<span class=\"token comment\"># 如果不添加下行代码，运行程序会闪退</span>\nsys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n</code></pre>\n<p>运行代码，效果如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\90c4143b90c44e2f87856e37e5a1cee7.png\"/></p>\n<p>点击窗口里面的“按钮”，效果如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\57af55f0e9754ef4ae0059ff33f1314a.png\"/></p>\n<p>分析代码：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5349e67a40b04496891fe14a73a27a9f.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\372b4dd4418a4e97a386c22f13eab5a7.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\88101695d22343f58f091035d63acdd3.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4d406d097abe400e8ab2cbe13296689e.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f49504ae6a124eeb87c7bbd76262eed2.png\"/></p>\n<p>有些许误差是因为在windows下窗体有边框，在mac下窗体无边框。</p>\n<h5><a id=\"25_1474\"></a>25.设置窗口和应用程序图标</h5>\n<p>在controls文件夹里，新建IconForm.py文件，执行代码：</p>\n<pre><code class=\"prism language-html\"># 设置窗口和应用程序图标\n\n# 窗口的setWindowIcon方法设置窗口的图标，只在Windows和linux中可用，mac不可用\n\n\nimport sys\n\n# 从PyQt里面创建窗口和应用\nfrom PyQt5.QtWidgets import QMainWindow,QApplication\n# 用来添加图标\nfrom PyQt5.QtGui import QIcon\n\n# 定义一个类，这个类从QMainWindow里面继承\n\nclass IconForm(QMainWindow):\n\n    # 初始化\n    def __init__(self,parent=None):\n        super(IconForm,self).__init__(parent)\n        self.initUI()\n\n    # 规范代码，初始化直接写在一个方法里\n    def initUI(self):\n        # 设置坐标系，可用同时设置窗口的尺寸和位置\n        self.setGeometry(400,400,250,450)\n        # 设置主窗口的标题\n        self.setWindowTitle('设置窗口图标')\n        # 设置窗口图标\n        self.setWindowIcon(QIcon('./images/001.jpg'))\n        # self.setWindowIcon(QIcon('/images/3.ico'))   这行代码失效，原因：图片路径表示问题\n        # # 设置窗口的尺寸\n        # self.resize(400,300)\n        # 获得状态栏\n        # self.status = self.statusBar()\n        #\n        # # 在状态栏上，设置消息的状态时间5000ms\n        # self.status.showMessage('只存在5秒的消息',5000)\n\n    # 防止别的脚本调用，只有自己单独运行，才会调用下面代码\nif __name__ == '__main__':\n\n    # 创建app实例，并传入参数\n    app =  QApplication(sys.argv)\n    # QApplication中的setWindowIcon方法用于设置主窗口的图标和应用程序图标，但调用了窗口的setWinodowIcon方法\n    # QApplication中的setWindowIcon方法就只能用于设置应用程序图标了\n    # 设置图标\n    # app.setWindowIcon(QIcon('images/horse.jpg'))\n\n    # 创建对象\n    main = IconForm()\n\n    # 创建窗口\n    main.show()\n\n    # 进入程序的主循环，并通过exit函数确保主循环安全结束(该释放资源的一定要释放)\n    sys.exit(app.exec_())\n\n</code></pre>\n<p>效果如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dffa9e543bde4e37bc05e76fc9f7df4e.png\"/></p>\n<h5><a id=\"26_1543\"></a>26.显示控件的提示信息</h5>\n<p>在controls文件夹里，新建Tooltip.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 显示控件的提示信息</span>\n\n<span class=\"token comment\"># 需要用到 QToolTip</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span>  QHBoxLayout<span class=\"token punctuation\">,</span>QMainWindow<span class=\"token punctuation\">,</span>QApplication<span class=\"token punctuation\">,</span>QToolTip<span class=\"token punctuation\">,</span>QPushButton<span class=\"token punctuation\">,</span>QWidget\n<span class=\"token comment\"># 提示信息需要设置字体</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> QFont\n\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TooltipForm</span><span class=\"token punctuation\">(</span>QMainWindow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 调用初始化ui的一个方法</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 编写初始化UI的方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置字体和字号</span>\n        QToolTip<span class=\"token punctuation\">.</span>setFont<span class=\"token punctuation\">(</span>QFont<span class=\"token punctuation\">(</span><span class=\"token string\">'SansSerif'</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给窗口设置提示，这个方法支持富文本</span>\n        self<span class=\"token punctuation\">.</span>setToolTip<span class=\"token punctuation\">(</span><span class=\"token string\">'今天是个&lt;b&gt;好日子&lt;/b&gt;'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口的位置和尺寸</span>\n        self<span class=\"token punctuation\">.</span>setGeometry<span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口的标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'设置控件提示消息'</span><span class=\"token punctuation\">)</span>\n\n\n\n<span class=\"token comment\"># 防止别的脚本调用，只有自己单独运行时，才会调用下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 创建app实例，并传入参数</span>\n    app<span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> TooltipForm<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 进入程序的主循环，并通过exit函数，确保主循环安全结束(该释放资源的释放资源)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n</code></pre>\n<p>效果如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\13d789cc72e74545b658c8b046ed7ab7.png\"/></p>\n<p>拓展，给窗口添加一个按钮，并显示提示信息</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 显示控件的提示信息</span>\n\n<span class=\"token comment\"># 需要用到 QToolTip</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span>  QHBoxLayout<span class=\"token punctuation\">,</span>QMainWindow<span class=\"token punctuation\">,</span>QApplication<span class=\"token punctuation\">,</span>QToolTip<span class=\"token punctuation\">,</span>QPushButton<span class=\"token punctuation\">,</span>QWidget\n<span class=\"token comment\"># 提示信息需要设置字体</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> QFont\n\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TooltipForm</span><span class=\"token punctuation\">(</span>QMainWindow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 调用初始化ui的一个方法</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 编写初始化UI的方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置字体和字号</span>\n        QToolTip<span class=\"token punctuation\">.</span>setFont<span class=\"token punctuation\">(</span>QFont<span class=\"token punctuation\">(</span><span class=\"token string\">'SansSerif'</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给窗口设置提示，这个方法支持富文本</span>\n        self<span class=\"token punctuation\">.</span>setToolTip<span class=\"token punctuation\">(</span><span class=\"token string\">'今天是个&lt;b&gt;好日子&lt;/b&gt;'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口的位置和尺寸</span>\n        self<span class=\"token punctuation\">.</span>setGeometry<span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口的标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'设置控件提示消息'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 添加butoon按钮并设置提示信息</span>\n\n        <span class=\"token comment\"># 添加Button</span>\n        <span class=\"token comment\"># 创建全局对象self.button1</span>\n        self<span class=\"token punctuation\">.</span>button1 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'我的按钮'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置按钮提示</span>\n        self<span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">.</span>setToolTip<span class=\"token punctuation\">(</span><span class=\"token string\">'这是按钮的提示信息'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 发送单击信号，执行对应的方法  (将信息与槽关联)</span>\n        self<span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>onClick_Button<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建水平布局</span>\n        layout <span class=\"token operator\">=</span> QHBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 将组件加到水平局部里面</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 放置一个主框架</span>\n        mainFrame <span class=\"token operator\">=</span> QWidget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 在主框架内添加水平布局</span>\n        mainFrame<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 把主框架放在窗口上</span>\n        self<span class=\"token punctuation\">.</span>setCentralWidget<span class=\"token punctuation\">(</span>mainFrame<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 按钮的单击事件的方法(自定义的槽)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">onClick_Button</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        sender <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'按钮被按下'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 得到实例</span>\n        app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 退出应用程序</span>\n        app<span class=\"token punctuation\">.</span>quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 防止别的脚本调用，只有自己单独运行时，才会调用下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 创建app实例，并传入参数</span>\n    app<span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> TooltipForm<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 进入程序的主循环，并通过exit函数，确保主循环安全结束(该释放资源的释放资源)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n</code></pre>\n<p>效果如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cde3f970613d4adeb5b0798d70cdd2b6.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7736e015c9454a58a9e71b8b61ad2870.png\"/></p>\n<h5><a id=\"27QLabel_1680\"></a>27.QLabel控件的基本用法</h5>\n<p>PyQt5常用控件之一，QLable控件，常用来展示文本信息</p>\n<table><thead><tr><th>控件方法</th><th>说明</th></tr></thead><tbody><tr><td>setAlignment()</td><td>设置文本的对齐方式</td></tr><tr><td>setIndent()</td><td>设置文本缩进</td></tr><tr><td>text()</td><td>获取文本内容</td></tr><tr><td>setBuddy()</td><td>设置伙伴关系</td></tr><tr><td>setText()</td><td>设置文本内容</td></tr><tr><td>selectedText()</td><td>返回所选择的字符</td></tr><tr><td>setWordWrap()</td><td>设置是否允许换行</td></tr></tbody></table>\n<p>QLabel常用的信号(事件)：<br/> 1.当鼠标划过QLabel控件时触发：linkHovered</p>\n<p>2.当鼠标单击QLabel控件时触发：linkActivated</p>\n<p>在controls文件夹里，新建QLabelDemo.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># QLabel控件的基本用法</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token comment\"># 导入QLabel模块  QVBoxLayout垂直布局  (QHBoxLayout 水平布局)</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> QVBoxLayout<span class=\"token punctuation\">,</span>QMainWindow<span class=\"token punctuation\">,</span>QApplication<span class=\"token punctuation\">,</span>QLabel<span class=\"token punctuation\">,</span>QWidget\n<span class=\"token comment\"># 导入调制板，调制QLabel背景色</span>\n<span class=\"token comment\"># 导入显示图片包QPixmap</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> QPixmap<span class=\"token punctuation\">,</span>QPalette\n<span class=\"token comment\"># 导入一些Qt的常量</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> Qt\n\n<span class=\"token comment\"># 编写一个类，从QWidget中继承</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QLabelDemo</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 调用初始化UI的一个方法</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 规范代码，初始化UI直接写在一个方法里</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 创建四个label控件</span>\n        label1 <span class=\"token operator\">=</span> QLabel<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        label2 <span class=\"token operator\">=</span> QLabel<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        label3 <span class=\"token operator\">=</span> QLabel<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        label4 <span class=\"token operator\">=</span> QLabel<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 给label1设置文本,支持html的标签</span>\n        label1<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;font color=purpel&gt;这是一个文本标签.&lt;/font&gt;\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 用调试板自动填充背景</span>\n        label1<span class=\"token punctuation\">.</span>setAutoFillBackground<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建调试板</span>\n        palette <span class=\"token operator\">=</span> QPalette<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给调试板设置背景色</span>\n        palette<span class=\"token punctuation\">.</span>setColor<span class=\"token punctuation\">(</span>QPalette<span class=\"token punctuation\">.</span>Window<span class=\"token punctuation\">,</span>Qt<span class=\"token punctuation\">.</span>blue<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 对label1使用调试板</span>\n        label1<span class=\"token punctuation\">.</span>setPalette<span class=\"token punctuation\">(</span>palette<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 让label1居中对齐</span>\n        label1<span class=\"token punctuation\">.</span>setAlignment<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>AlignCenter<span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 给label2设置&lt;a&gt;标签</span>\n        label2<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;a href='#'&gt;欢迎使用Python GUI程序&lt;/a&gt;\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 可以在a标签里触发事件或者跳转网页 二者选其一</span>\n\n        <span class=\"token comment\"># 给label3设置文本居中</span>\n        label3<span class=\"token punctuation\">.</span>setAlignment<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>AlignCenter<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给label3设置提示文本</span>\n        label3<span class=\"token punctuation\">.</span>setToolTip<span class=\"token punctuation\">(</span><span class=\"token string\">'这是一个图片标签'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 让label3显示图片</span>\n        label3<span class=\"token punctuation\">.</span>setPixmap<span class=\"token punctuation\">(</span>QPixmap<span class=\"token punctuation\">(</span><span class=\"token string\">\"./images/4.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 同级目录写法./images</span>\n\n        <span class=\"token comment\"># 给label4设置文本内容</span>\n        label4<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;a href='https://www.baidu.com/'&gt;打开百度&lt;/a&gt;\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># setText里面的内容要用双引号，单引号会报错</span>\n        <span class=\"token comment\"># 让label4打开链接</span>\n        <span class=\"token comment\"># 如果设为True,用浏览器打开网页，如果设为False,调用槽函数</span>\n        label4<span class=\"token punctuation\">.</span>setOpenExternalLinks<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 让label4的文本右对齐</span>\n        label4<span class=\"token punctuation\">.</span>setAlignment<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>AlignRight<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给label4设置提示文本</span>\n        label4<span class=\"token punctuation\">.</span>setToolTip<span class=\"token punctuation\">(</span><span class=\"token string\">'这是一个超链接'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建一个垂直布局</span>\n        vbox <span class=\"token operator\">=</span> QVBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 分别把这四个控件放到这个布局里面           布局函数 addWidget</span>\n        vbox<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>label1<span class=\"token punctuation\">)</span>\n        vbox<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>label2<span class=\"token punctuation\">)</span>\n        vbox<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>label3<span class=\"token punctuation\">)</span>\n        vbox<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>label4<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 将信号与槽绑定</span>\n        label2<span class=\"token punctuation\">.</span>linkHovered<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>linkHovered<span class=\"token punctuation\">)</span>\n        label4<span class=\"token punctuation\">.</span>linkActivated<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>linkClicked<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>vbox<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'QLabel控件演示'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置标题</span>\n\n\n    <span class=\"token comment\"># 槽有两个方法 1.滑过  2.单击</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">linkHovered</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当鼠标滑过label2标签时，触发事件\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">linkClicked</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当鼠标单击label4标签时，触发事件\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\"># 防止别的脚本调用，只有自己单独运行，才会调用下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\"># 创建app实例，并传入参数</span>\n    app <span class=\"token operator\">=</span>  QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 设置图标</span>\n    <span class=\"token comment\"># app.setWindowIcon(QIcon('images/001.jpg'))</span>\n\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> QLabelDemo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 进入程序的主循环，并通过exit函数确保主循环安全结束(该释放资源的一定要释放)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c53047517918474ca9bef25df332693a.png\"/></p>\n<p>注意：调整好图片的尺寸，防止它跳出屏幕外</p>\n<h5><a id=\"28QLabel_1813\"></a>28.如何设置QLabel控件和其他控件的伙伴关系</h5>\n<p>在controls文件夹里，新建QLabelBuddy.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># QLabel与伙伴控件</span>\n<span class=\"token comment\"># 1.通过setBuddy设置伙伴关系</span>\n<span class=\"token comment\"># 2.通过栅格布局来完成手动布局，依靠</span>\n<span class=\"token comment\"># mainLayout.addWidget(控件对象,rowIndex,columnIndex,row,column)   （行索引,索引,占用多少行,占用多少列）</span>\n\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QLabelBuddy</span><span class=\"token punctuation\">(</span>QDialog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 规范代码，初始化直接写在一个方法里</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置主窗口的标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'QLabel与伙伴控件'</span><span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 创建nameLabel控件</span>\n        <span class=\"token comment\">#添加热键   添加热键的方法&amp; + 英文字母  ，后面的英文字母就变成了热键。在可视化窗口里通过 \"Alt\" + 英文字母 就可以起作用</span>\n        nameLabel <span class=\"token operator\">=</span>QLabel<span class=\"token punctuation\">(</span><span class=\"token string\">'&amp;Name'</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建QLineEdit控件</span>\n        nameLineEdit <span class=\"token operator\">=</span> QLineEdit<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把nameLabel和nameLineEdit设置伙伴关系</span>\n        nameLabel<span class=\"token punctuation\">.</span>setBuddy<span class=\"token punctuation\">(</span>nameLineEdit<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建PasswordQLabel控件, 并添加热键</span>\n        passwordLabel <span class=\"token operator\">=</span> QLabel<span class=\"token punctuation\">(</span><span class=\"token string\">'&amp;Password'</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建PasswordLineEdit控件</span>\n        passwordLineEdit <span class=\"token operator\">=</span> QLineEdit<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把passwordLabel和passwordLineEdit设置成伙伴关系</span>\n        passwordLabel<span class=\"token punctuation\">.</span>setBuddy<span class=\"token punctuation\">(</span>passwordLineEdit<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建两个按钮，一个上面写OK,一个上面写Cancel</span>\n        btnOK <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'&amp;OK'</span><span class=\"token punctuation\">)</span>\n        btnCancel <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'&amp;Cancel'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 使用栅格布局</span>\n        mainLayout <span class=\"token operator\">=</span> QGridLayout<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 将nameLabel控件放到布局里面    第一行第一列</span>\n        mainLayout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>nameLabel<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 将nameLineEdit控件放到布局里面  第一行第二列，占用一行两列</span>\n        mainLayout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>nameLineEdit<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 将passwordLabel控件放到布局里面  第二行第一列</span>\n        mainLayout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>passwordLabel<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 将passwordLineEdit控件放到布局里面 第二行第一列，占用一行两列</span>\n        mainLayout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>passwordLineEdit<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 经过上面操作，此时有两行，每行有三列</span>\n\n\n        <span class=\"token comment\"># 放置按钮  第三行第二列</span>\n        mainLayout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>btnOK<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 放置按钮    第三行第三列</span>\n        mainLayout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>btnCancel<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 防止别的脚本调用，只有自己单独运行时，才会调用下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 创建app实例，并传入参数</span>\n    app<span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> QLabelBuddy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 进入程序的主循环，并通过exit函数，确保主循环安全结束(该释放资源的释放资源)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n</code></pre>\n<p>效果如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\09845e91a46f41e1ac0d7ea85272bb2c.png\"/></p>\n<h5><a id=\"28QLineEditEchoMode_1897\"></a>28.QLineEdit控件与回显模式(EchoMode)</h5>\n<p>在controls文件夹里，新建QLineEditEchoMode.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># QLineEdit控件与回显模式</span>\n<span class=\"token comment\"># QLineEdit控件的基本功能：1.输入单行的文本 2.设置回显模式EcoMode</span>\n\n<span class=\"token triple-quoted-string string\">\"\"\"\nEcoMode(回显模式)\n4种回显模式\n1.Normal 正常的显示\n2.Normal  不显示   类似于linux中输入密码没反应 但已经提交\n3，Password  密码式的显示   类似于输入密码出现小黑点或*号\n4，PasswordEchoOnEdit     密码显示编辑模式   常见于手机端，类似于  输入一个字母A,前两秒编辑框里显示的是A，过了一两秒编程框里变成的一个点或者*号\n\n\"\"\"</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token comment\"># 从QWidget窗口类里面继承</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QLineEditEchoMode</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>QLineEditEchoMode<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 编写初始化方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'文本输入框的回显模式'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建表单布局</span>\n        formLayout <span class=\"token operator\">=</span> QFormLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 根据4种回显模式，分别创建4种表单布局</span>\n\n        <span class=\"token comment\"># 第一种回显模式</span>\n        normalLineEdit <span class=\"token operator\">=</span> QLineEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 第二种回显模式</span>\n        noEchoLineEdit <span class=\"token operator\">=</span> QLineEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 第三种回显模式</span>\n        passwordLineEdit <span class=\"token operator\">=</span> QLineEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 第四种回显模式</span>\n        passwordEchoONEditLineEdit <span class=\"token operator\">=</span> QLineEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把这四个控件添加到表单布局里面</span>\n        formLayout<span class=\"token punctuation\">.</span>addRow<span class=\"token punctuation\">(</span><span class=\"token string\">\"Normal\"</span><span class=\"token punctuation\">,</span>normalLineEdit<span class=\"token punctuation\">)</span>\n        formLayout<span class=\"token punctuation\">.</span>addRow<span class=\"token punctuation\">(</span><span class=\"token string\">\"NoEcho\"</span><span class=\"token punctuation\">,</span>noEchoLineEdit<span class=\"token punctuation\">)</span>\n        formLayout<span class=\"token punctuation\">.</span>addRow<span class=\"token punctuation\">(</span><span class=\"token string\">\"Password\"</span><span class=\"token punctuation\">,</span>passwordLineEdit<span class=\"token punctuation\">)</span>\n        formLayout<span class=\"token punctuation\">.</span>addRow<span class=\"token punctuation\">(</span><span class=\"token string\">\"PasswordEchoOnEdit\"</span><span class=\"token punctuation\">,</span>passwordEchoONEditLineEdit<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 为每个文本框设置placeholdertext,就是当输入框没有输入时，以灰色字体显示这个文本框的提示</span>\n        normalLineEdit<span class=\"token punctuation\">.</span>setPlaceholderText<span class=\"token punctuation\">(</span><span class=\"token string\">\"Normal\"</span><span class=\"token punctuation\">)</span>\n        normalLineEdit<span class=\"token punctuation\">.</span>setPlaceholderText<span class=\"token punctuation\">(</span><span class=\"token string\">\"NoEcho\"</span><span class=\"token punctuation\">)</span>\n        passwordLineEdit<span class=\"token punctuation\">.</span>setPlaceholderText<span class=\"token punctuation\">(</span><span class=\"token string\">\"Password\"</span><span class=\"token punctuation\">)</span>\n        passwordEchoONEditLineEdit<span class=\"token punctuation\">.</span>setPlaceholderText<span class=\"token punctuation\">(</span><span class=\"token string\">\"PasswprdEchoOnEdit\"</span><span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 设置模式</span>\n        normalLineEdit<span class=\"token punctuation\">.</span>setEchoMode<span class=\"token punctuation\">(</span>QLineEdit<span class=\"token punctuation\">.</span>Normal<span class=\"token punctuation\">)</span>\n        noEchoLineEdit<span class=\"token punctuation\">.</span>setEchoMode<span class=\"token punctuation\">(</span>QLineEdit<span class=\"token punctuation\">.</span>NoEcho<span class=\"token punctuation\">)</span>\n        passwordLineEdit<span class=\"token punctuation\">.</span>setEchoMode<span class=\"token punctuation\">(</span>QLineEdit<span class=\"token punctuation\">.</span>Password<span class=\"token punctuation\">)</span>\n        passwordEchoONEditLineEdit<span class=\"token punctuation\">.</span>setEchoMode<span class=\"token punctuation\">(</span>QLineEdit<span class=\"token punctuation\">.</span>PasswordEchoOnEdit<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 应用表单布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>formLayout<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 防止别的脚本调用，只有自己单独运行时，才会调用下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 创建app实例，并传入参数</span>\n    app<span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> QLineEditEchoMode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 进入程序的主循环，并通过exit函数，确保主循环安全结束(该释放资源的释放资源)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n</code></pre>\n<p>效果如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5a996c2f9b524b9d989c7ff869e1d7ea.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1f1e89fc9732455297061496e8890d22.png\"/></p>\n<h5><a id=\"28QLineEdit_1985\"></a>28.限制QLineEdit控件的输入(校验器)</h5>\n<p>在controls文件夹里，新建QLineEditEValidator.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 限制QLineEdit控件的输入(校验器)   只能输入满足格式的数据</span>\n<span class=\"token comment\"># 如限制只能输入整数、浮点数或满足一定条件的字符串</span>\n\n<span class=\"token comment\"># 本次演示做三种限制： 1.整数  2.浮点数   3.字母或者数字</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token comment\"># 导入PyQt5的正则(三个校验器，第三个可自定义)</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> QIntValidator<span class=\"token punctuation\">,</span>QDoubleValidator<span class=\"token punctuation\">,</span>QRegExpValidator\n<span class=\"token comment\"># 导入PyQt5里正则表达式的一个类QRegExp</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> QRegExp\n\n\n<span class=\"token comment\"># 编写一个类，从QWidget窗口类里面继承</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QLineEditValidator</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>QLineEditValidator<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 编写初始化方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置一下窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'校验器'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建表单布局</span>\n        formLayout <span class=\"token operator\">=</span> QFormLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建三个文本输入框</span>\n        intLineEdit <span class=\"token operator\">=</span> QLineEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        doubleLineEdit <span class=\"token operator\">=</span> QLineEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        validatorLineEdit <span class=\"token operator\">=</span> QLineEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 将这三个控件添加到form表单布局里</span>\n        formLayout<span class=\"token punctuation\">.</span>addRow<span class=\"token punctuation\">(</span><span class=\"token string\">'整数类型'</span><span class=\"token punctuation\">,</span>intLineEdit<span class=\"token punctuation\">)</span>\n        formLayout<span class=\"token punctuation\">.</span>addRow<span class=\"token punctuation\">(</span><span class=\"token string\">'浮点类型'</span><span class=\"token punctuation\">,</span>doubleLineEdit<span class=\"token punctuation\">)</span>\n        formLayout<span class=\"token punctuation\">.</span>addRow<span class=\"token punctuation\">(</span><span class=\"token string\">'数字和字母'</span><span class=\"token punctuation\">,</span>validatorLineEdit<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 为每个文本框设置placeholdertext,就是当输入框没有输入时，以灰色字体显示这个文本框的提示</span>\n        intLineEdit<span class=\"token punctuation\">.</span>setPlaceholderText<span class=\"token punctuation\">(</span><span class=\"token string\">'整数'</span><span class=\"token punctuation\">)</span>\n        doubleLineEdit<span class=\"token punctuation\">.</span>setPlaceholderText<span class=\"token punctuation\">(</span><span class=\"token string\">'浮点型'</span><span class=\"token punctuation\">)</span>\n        validatorLineEdit<span class=\"token punctuation\">.</span>setPlaceholderText<span class=\"token punctuation\">(</span><span class=\"token string\">'字母和数字'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建整数校验器</span>\n        inValidator <span class=\"token operator\">=</span> QIntValidator<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置整数的范围 [1,99]</span>\n        inValidator<span class=\"token punctuation\">.</span>setRange<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建浮点校验器</span>\n        doubleValidator <span class=\"token operator\">=</span> QDoubleValidator<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置浮点校验器[-360,360]</span>\n        doubleValidator<span class=\"token punctuation\">.</span>setRange<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">360</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">360</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 小数点的表示</span>\n        doubleValidator<span class=\"token punctuation\">.</span>setNotation<span class=\"token punctuation\">(</span>QDoubleValidator<span class=\"token punctuation\">.</span>StandardNotation<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置精度，小数点2位</span>\n        doubleValidator<span class=\"token punctuation\">.</span>setDecimals<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建数字和字母的正则表达式</span>\n        reg <span class=\"token operator\">=</span> QRegExp<span class=\"token punctuation\">(</span><span class=\"token string\">'[a-zA-Z0-9]+$'</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 此时+表示至少有一个</span>\n        <span class=\"token comment\"># 创建数字和字母的校验器</span>\n        validator <span class=\"token operator\">=</span> QRegExpValidator<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 将正则表达式放置在校验器内</span>\n        validator<span class=\"token punctuation\">.</span>setRegExp<span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 设置校验器</span>\n        intLineEdit<span class=\"token punctuation\">.</span>setValidator<span class=\"token punctuation\">(</span>inValidator<span class=\"token punctuation\">)</span>\n        doubleLineEdit<span class=\"token punctuation\">.</span>setValidator<span class=\"token punctuation\">(</span>doubleValidator<span class=\"token punctuation\">)</span>\n        validatorLineEdit<span class=\"token punctuation\">.</span>setValidator<span class=\"token punctuation\">(</span>validator<span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 应用表单布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>formLayout<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 防止别的脚本调用，只有自己单独运行时，才会调用下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 创建app实例，并传入参数</span>\n    app<span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> QLineEditValidator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 进入程序的主循环，并通过exit函数，确保主循环安全结束(该释放资源的释放资源)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n</code></pre>\n<p>效果如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a5fb29862b6245b981c706568ba6a1da.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\746da678f8064952b4dd0bb3d9e2b892.png\"/></p>\n<h5><a id=\"29QLineEdit_2088\"></a>29.使用掩码限制QLineEdit控件的输入</h5>\n<table><thead><tr><th>掩码</th><th>说明</th></tr></thead><tbody><tr><td>A</td><td>ASCⅡ字母字符是必须输入的(A-Z、a-z)</td></tr><tr><td>a</td><td>ASCⅡ字母字符是允许输入的，但不是必需的(A-Z、a-z)</td></tr><tr><td>N</td><td>ASCⅡ字母字符是必须输入的(A-Z、a-z、0-9)</td></tr><tr><td>n</td><td>ASCⅡ字母的允许输入的，但不是必需的(A-Z、a-z、0-9)</td></tr><tr><td>X</td><td>任何字符都是必须输入的</td></tr><tr><td>x</td><td>任何字符都是允许输入的，但不是必需的</td></tr><tr><td>9</td><td>ASCⅡ数字字符是必须输入的(0-9)</td></tr><tr><td>0</td><td>ASCⅡ数字字符是允许输入的，但不是必需的(0-9)</td></tr><tr><td>D</td><td>ASCⅡ数字字符是必须输入的(1-9)</td></tr><tr><td>d</td><td>ASCⅡ数字字符是允许输入的，但不是必需的(1-9)</td></tr><tr><td>#</td><td>ASCⅡ数字字符或加减符号是允许输入的，但不是必需的</td></tr><tr><td>H</td><td>十六进制格式字符是必须输入的(A-F、a-f、0-9)</td></tr><tr><td>h</td><td>十六进制格式字符是允许输入的，但不是必需的(A-F、a-f、0-9)</td></tr><tr><td>B</td><td>二进制格式字符是必须输入 的(0,1)</td></tr><tr><td>b</td><td>二进制格式字符是允许输入的，但不是必需的(0,1)</td></tr><tr><td>&gt;</td><td>所有的字母字符都大写</td></tr><tr><td>&lt;</td><td>所有的字母字符都小写</td></tr><tr><td>!</td><td>关闭大小写转换</td></tr><tr><td>\\</td><td>使用\"\"转义上面列出的字符</td></tr></tbody></table>\n<p>在controls文件夹里，新建QLineEditMask.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 使用掩码限制QLineEdit控件的输入</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token comment\"># 从QWidget窗口类里面继承</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QLineEditMask</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>QLineEditMask<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 规范代码，初始化直接写在一个方法里</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置窗口的标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'用掩码限制QLineEdit控件的输入'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建表单布局</span>\n        formLayout <span class=\"token operator\">=</span> QFormLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建四个控件</span>\n        <span class=\"token comment\"># 第一个，IP控件   192.168.11.11</span>\n        ipLineEdit <span class=\"token operator\">=</span> QLineEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 第二个 mac地址 （mac地址也叫物理地址和局域网地址，主要用于确认网上设备的地址，类似于身份证号，具有唯一标识）</span>\n        <span class=\"token comment\"># 如：00-16-EA-AE-3C-40就是一个MAC地址</span>\n        macLineEdit <span class=\"token operator\">=</span> QLineEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 第三个 显示日期控件</span>\n        dataLineEdit <span class=\"token operator\">=</span> QLineEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 第四个 许可证</span>\n        licenseLineEdit <span class=\"token operator\">=</span> QLineEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置掩码，通过setInputMask方法</span>\n        ipLineEdit<span class=\"token punctuation\">.</span>setInputMask<span class=\"token punctuation\">(</span><span class=\"token string\">'000.000.000.000;_'</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 后面分号指如果没有输入时，显示为\"_\"</span>\n        macLineEdit<span class=\"token punctuation\">.</span>setInputMask<span class=\"token punctuation\">(</span><span class=\"token string\">'HH:HH:HH:HH:HH:HH;_'</span><span class=\"token punctuation\">)</span>\n        dataLineEdit<span class=\"token punctuation\">.</span>setInputMask<span class=\"token punctuation\">(</span><span class=\"token string\">'0000-00-00'</span><span class=\"token punctuation\">)</span>\n        licenseLineEdit<span class=\"token punctuation\">.</span>setInputMask<span class=\"token punctuation\">(</span><span class=\"token string\">'&gt;AAAAA-AAAAA-AAAAA-AAAAA-AAAAA;#'</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 后面# 号指如果没有输入时，显示为\"#\"</span>\n\n        <span class=\"token comment\"># 把这四个控件都添加到表单布局里面</span>\n        formLayout<span class=\"token punctuation\">.</span>addRow<span class=\"token punctuation\">(</span><span class=\"token string\">'数字掩码'</span><span class=\"token punctuation\">,</span>ipLineEdit<span class=\"token punctuation\">)</span>\n        formLayout<span class=\"token punctuation\">.</span>addRow<span class=\"token punctuation\">(</span><span class=\"token string\">'Mac掩码'</span><span class=\"token punctuation\">,</span>macLineEdit<span class=\"token punctuation\">)</span>\n        formLayout<span class=\"token punctuation\">.</span>addRow<span class=\"token punctuation\">(</span><span class=\"token string\">'日期掩码'</span><span class=\"token punctuation\">,</span>dataLineEdit<span class=\"token punctuation\">)</span>\n        formLayout<span class=\"token punctuation\">.</span>addRow<span class=\"token punctuation\">(</span><span class=\"token string\">\"许可证掩码\"</span><span class=\"token punctuation\">,</span>licenseLineEdit<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 应用于表单布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>formLayout<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 防止别的脚本调用，只有自己单独运行时，才会调用下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 创建app实例，并传入参数</span>\n    app<span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> QLineEditMask<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 进入程序的主循环，并通过exit函数，确保主循环安全结束(该释放资源的释放资源)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4558e2e2553941088c23715740183b1e.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\07bcd6029d784a649a030b8b3ee8e294.png\"/></p>\n<h5><a id=\"30QLineEdit_2180\"></a>30.QLineEdit控件综合案例</h5>\n<p>在controls文件夹里，新建QLineEditDemo.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># QLineEdit综合案例</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> Qt\n\n\n<span class=\"token comment\"># 创建一个类，从QWidget窗口类里面继承</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QLineEditDemo</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>QLineEditDemo<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 编写初始化方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n        <span class=\"token comment\"># 创建多个edit对象</span>\n\n        <span class=\"token comment\"># 创建第一个控件</span>\n        edit1 <span class=\"token operator\">=</span> QLineEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 使用int校验器</span>\n        edit1<span class=\"token punctuation\">.</span>setValidator<span class=\"token punctuation\">(</span>QIntValidator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置文本框最大长度(位数)，即不超过9999</span>\n        edit1<span class=\"token punctuation\">.</span>setMaxLength<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置文本右对齐</span>\n        edit1<span class=\"token punctuation\">.</span>setAlignment<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>AlignRight<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置文本字体为Arial 字号 20</span>\n        edit1<span class=\"token punctuation\">.</span>setFont<span class=\"token punctuation\">(</span>QFont<span class=\"token punctuation\">(</span><span class=\"token string\">'Arial'</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n\n        <span class=\"token comment\"># 创建第二个控件</span>\n        edit2 <span class=\"token operator\">=</span> QLineEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 使用浮点校验器  范围0.99-99.99 精度为2</span>\n        edit2<span class=\"token punctuation\">.</span>setValidator<span class=\"token punctuation\">(</span>QDoubleValidator<span class=\"token punctuation\">(</span><span class=\"token number\">0.99</span><span class=\"token punctuation\">,</span><span class=\"token number\">99.99</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 未设置字体字号，对齐方式</span>\n\n\n        <span class=\"token comment\"># 创建第三个控件</span>\n        edit3 <span class=\"token operator\">=</span> QLineEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 使用掩码    掩码9表示 ：ASCⅡ数字字符是必须输入的(0-9)</span>\n        edit3<span class=\"token punctuation\">.</span>setInputMask<span class=\"token punctuation\">(</span><span class=\"token string\">'99_9999_999999;#'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 后面'#'号指没有输入时，显示为'#'</span>\n\n       <span class=\"token comment\"># 创建第四个控件</span>\n        edit4 <span class=\"token operator\">=</span> QLineEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 绑定事件，当文本变化时，响应到槽</span>\n        edit4<span class=\"token punctuation\">.</span>textChanged<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>textChanged<span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 创建第五个控件</span>\n        edit5 <span class=\"token operator\">=</span> QLineEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置回显模式</span>\n        edit5<span class=\"token punctuation\">.</span>setEchoMode<span class=\"token punctuation\">(</span>QLineEdit<span class=\"token punctuation\">.</span>Password<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 绑定事件，当编辑完成时，响应到槽</span>\n        edit5<span class=\"token punctuation\">.</span>editingFinished<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>enterPress<span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 创建第六个控件</span>\n        edit6 <span class=\"token operator\">=</span>QLineEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设为只读</span>\n        edit6<span class=\"token punctuation\">.</span>setReadOnly<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n\n\n        <span class=\"token comment\"># 创建表单布局</span>\n        formLayout <span class=\"token operator\">=</span> QFormLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把控件添加到表单里</span>\n        formLayout<span class=\"token punctuation\">.</span>addRow<span class=\"token punctuation\">(</span><span class=\"token string\">'整数校验'</span><span class=\"token punctuation\">,</span>edit1<span class=\"token punctuation\">)</span>\n        formLayout<span class=\"token punctuation\">.</span>addRow<span class=\"token punctuation\">(</span><span class=\"token string\">'浮点数校验'</span><span class=\"token punctuation\">,</span>edit2<span class=\"token punctuation\">)</span>\n        formLayout<span class=\"token punctuation\">.</span>addRow<span class=\"token punctuation\">(</span><span class=\"token string\">'Input Mask'</span><span class=\"token punctuation\">,</span>edit3<span class=\"token punctuation\">)</span>\n        formLayout<span class=\"token punctuation\">.</span>addRow<span class=\"token punctuation\">(</span><span class=\"token string\">'文本变化'</span><span class=\"token punctuation\">,</span>edit4<span class=\"token punctuation\">)</span>\n        formLayout<span class=\"token punctuation\">.</span>addRow<span class=\"token punctuation\">(</span><span class=\"token string\">'密码'</span><span class=\"token punctuation\">,</span>edit5<span class=\"token punctuation\">)</span>\n        formLayout<span class=\"token punctuation\">.</span>addRow<span class=\"token punctuation\">(</span><span class=\"token string\">'只读'</span><span class=\"token punctuation\">,</span>edit6<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 应用于表单布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>formLayout<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置窗口的标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'QLineEdit综合案例'</span><span class=\"token punctuation\">)</span>\n\n\n\n    <span class=\"token comment\"># 当文本变化时，触发事件</span>\n    <span class=\"token comment\"># 定义槽一</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">textChanged</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'输入的文本：'</span> <span class=\"token operator\">+</span> text<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 定义槽二</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">enterPress</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'已输入值'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 防止别的脚本调用，只有自己单独运行时，才会调用下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 创建app实例，并传入参数</span>\n    app<span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> QLineEditDemo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 进入程序的主循环，并通过exit函数，确保主循环安全结束(该释放资源的释放资源)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c4b9196d86764251b11d4c622b4ac14d.png\"/></p>\n<h5><a id=\"31QTextEdit_2296\"></a>31.使用QTextEdit控件输入多行文本</h5>\n<p>在controls文件夹里，新建QTextEdit.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># QTextEdit控件</span>\n\n<span class=\"token comment\"># QTextLine只能输入一行文本，输入多行文本用QTextEdit  常用功能：获得文本和设置文本，除了支持普通的文本，还支持富文本(改变颜色，设置尺寸)</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token comment\"># 编写一个类，从QWidget里面继承</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QTextEditDemo</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>QTextEditDemo<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 编写初始化方法 规范代码，初始化写在一个方法里</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置窗口的标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'QTextEdit控件演示'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置窗口的尺寸</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建全局控件  为什么要创建去全局控件，在槽方法里需要调用</span>\n        self<span class=\"token punctuation\">.</span>textEdit <span class=\"token operator\">=</span> QTextEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建全局按钮</span>\n        <span class=\"token comment\"># 按钮一：显示文本</span>\n        <span class=\"token comment\"># buttonText = QPushButton('显示文本')</span>\n        self<span class=\"token punctuation\">.</span>buttonText <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'显示文本'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 按钮二：显示HTML</span>\n        <span class=\"token comment\"># buttonHTML = QPushButton('显示HTML')</span>\n        self<span class=\"token punctuation\">.</span>buttonHTML <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'显示HTML'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 按钮三：获取文本</span>\n        <span class=\"token comment\"># buttonToText = QPushButton('获取文本')</span>\n        self<span class=\"token punctuation\">.</span>buttonToText <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'获取文本'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 按钮四：获取HTML</span>\n        <span class=\"token comment\"># buttonToHTML = QPushButton('获取HTML')</span>\n        self<span class=\"token punctuation\">.</span>buttonToHTML <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'获取HTML'</span><span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 创建垂直布局</span>\n        layout <span class=\"token operator\">=</span> QVBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 把控件添加到垂直布局里面</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>textEdit<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># layout.addWidget(buttonText)</span>\n        <span class=\"token comment\"># layout.addWidget(buttonHTML)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>buttonText<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>buttonHTML<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>buttonToText<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>buttonToHTML<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 应用于垂直布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n\n    <span class=\"token comment\"># 把槽绑定到单击按钮信号上</span>\n    <span class=\"token comment\">#     buttonText.clicked.connect(self.onClick_ButtonText)</span>\n    <span class=\"token comment\">#     buttonHTML.clicked.connect(self.onClick_ButtonHTML)</span>\n        self<span class=\"token punctuation\">.</span>buttonText<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>onClick_ButtonText<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>buttonHTML<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>onClick_ButtonHTML<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>buttonToText<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>onClick_ButtonToText<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>buttonToHTML<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>onClick_ButtonToHTML<span class=\"token punctuation\">)</span>\n\n\n    <span class=\"token comment\"># 定义槽方法一</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">onClick_ButtonText</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 调用文本框设置普通文本</span>\n        self<span class=\"token punctuation\">.</span>textEdit<span class=\"token punctuation\">.</span>setPlainText<span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World,世界你好吗？'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 定义槽方法二</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">onClick_ButtonHTML</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 调用文本框设置HTML(富文本)</span>\n        self<span class=\"token punctuation\">.</span>textEdit<span class=\"token punctuation\">.</span>setHtml<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;font color=\"blue\" size=\"5\"&gt;Hello World&lt;/font&gt;'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 定义获取模块的两个槽</span>\n    <span class=\"token comment\"># 定义槽方法三</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">onClick_ButtonToText</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 调用文本框设置普通文本</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>textEdit<span class=\"token punctuation\">.</span>toPlainText<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 定义槽方法四</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">onClick_ButtonToHTML</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 调用文本框设置HTML(富文本)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>textEdit<span class=\"token punctuation\">.</span>toHtml<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\"># 防止别的脚本调用，只有自己单独运行，才会调用下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\"># 创建app实例，并传入参数</span>\n    app <span class=\"token operator\">=</span>  QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 设置图标</span>\n    <span class=\"token comment\"># app.setWindowIcon(QIcon('images/001.jpg'))</span>\n\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> QTextEditDemo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 进入程序的主循环，并通过exit函数确保主循环安全结束(该释放资源的一定要释放)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\734d612a162e4bfe8101a671bf1739b1.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6481de934600482abea61a8b67472bc5.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1ff105db3f574a5e83f48ea65b524056.png\"/></p>\n<h5><a id=\"32QPushButton_2417\"></a>32.按钮控件(QPushButton)</h5>\n<p>在controls文件夹里，新建QPushButtonDemo.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 按钮控件(QPushButton)</span>\n<span class=\"token comment\"># 按钮有多个控件，它的父类QAbstractButton</span>\n<span class=\"token comment\"># 子类有： QPushButton   AToolButton(工具条按钮) QRadioButton(单选按钮)  QCheckBox(复选按钮)</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token comment\"># QtCore是Qt的精髓（包括五大模块：元对象系统，属性系统，对象模型，对象树，信号槽）</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token comment\"># QtGui 显示应用程序图标，工具提示和各种鼠标光标。</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token comment\"># Qt Widgets模块提供了一组UI元素来创建经典的桌面风格的用户界面。</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n\n<span class=\"token comment\"># 创建一个类,基于QDialog    QDialog是对话窗口的基类。没有菜单栏、工具栏、状态栏</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QPushButtonDemo</span><span class=\"token punctuation\">(</span>QDialog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>QPushButtonDemo<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 编写初始化方法，规范代码，初始化写在一个方法里</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'QPushButton Demo'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建垂直布局</span>\n        layout <span class=\"token operator\">=</span> QVBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建四个button</span>\n        self<span class=\"token punctuation\">.</span>button1 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'第1个按钮'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 通过setText获得文本</span>\n        self<span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token string\">'First Button1'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置按钮按下自动弹起</span>\n        <span class=\"token comment\"># # 按钮可复选的，可核对的</span>\n        self<span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">.</span>setCheckable<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置开关</span>\n        self<span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">.</span>toggle<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 上面两行代码，此时setCheckable为True时，调用toggle方法，按钮为选中状态，再调一次toggle方法时，处于未选中状态</span>\n        <span class=\"token comment\"># 把槽绑定到单击按钮信号上</span>\n        <span class=\"token comment\"># 通过两种方式将信息和槽相连</span>\n        <span class=\"token comment\"># 信号和槽相连 方式一</span>\n        self<span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">:</span>self<span class=\"token punctuation\">.</span>whichButton<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 两个信号绑定到一个槽上   信号和槽是多对多的关系</span>\n        <span class=\"token comment\"># 信号和槽相连 方式二</span>\n        self<span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>buttonState<span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 创建button2控件  在文本前显示图像</span>\n        self<span class=\"token punctuation\">.</span>button2 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'图像按钮'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给button2设置图形</span>\n        self<span class=\"token punctuation\">.</span>button2<span class=\"token punctuation\">.</span>setIcon<span class=\"token punctuation\">(</span>QIcon<span class=\"token punctuation\">(</span>QPixmap<span class=\"token punctuation\">(</span><span class=\"token string\">'./images/4.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 把button2与槽连接</span>\n        self<span class=\"token punctuation\">.</span>button2<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span>self<span class=\"token punctuation\">.</span>whichButton<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 创建button3控件，让按钮不可用</span>\n        self<span class=\"token punctuation\">.</span>button3 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'不可用的按钮'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置按钮不可用</span>\n        self<span class=\"token punctuation\">.</span>button3<span class=\"token punctuation\">.</span>setEnabled<span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n\n\n       <span class=\"token comment\"># 创建button4控件，为默认按钮(点回车可以执行的按钮)，并给它加热键  按Alt + M 就可以直接调用这个button</span>\n        <span class=\"token comment\"># 默认按钮一个窗口只能有一个</span>\n        self<span class=\"token punctuation\">.</span>button4 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'&amp;MyButton'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置button4按钮为默认按钮</span>\n        self<span class=\"token punctuation\">.</span>button4<span class=\"token punctuation\">.</span>setDefault<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 把button4与槽连接</span>\n        self<span class=\"token punctuation\">.</span>button4<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">:</span>self<span class=\"token punctuation\">.</span>whichButton<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把控件添加到布局里</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button2<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button3<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button4<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 应用于垂直布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口尺寸</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 编写槽函数</span>\n    <span class=\"token comment\"># 多个按钮多个信号，同时使用一个槽，需要区分到底按了哪一个按钮</span>\n    <span class=\"token comment\"># 目前有两种方法</span>\n    <span class=\"token comment\">#第一种，用sender()方法</span>\n    <span class=\"token comment\"># def whichButton(self):</span>\n        <span class=\"token comment\"># self.sender()</span>\n    <span class=\"token comment\"># 第二种，传参数，比如</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">whichButton</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>btn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'被单击的按钮是&lt;'</span> <span class=\"token operator\">+</span> btn<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'&gt;'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 编写第二个槽</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">buttonState</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 判断是否被选中</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">.</span>isChecked<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'按钮1已经被选中'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'按钮1未被选中'</span><span class=\"token punctuation\">)</span>\n\n\n <span class=\"token comment\"># 防止别的脚本调用，只有自己单独运行，才会调用下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\"># 创建app实例，并传入参数</span>\n    app <span class=\"token operator\">=</span>  QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 设置图标</span>\n    <span class=\"token comment\"># app.setWindowIcon(QIcon('images/001.jpg'))</span>\n\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> QPushButtonDemo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 进入程序的主循环，并通过exit函数确保主循环安全结束(该释放资源的一定要释放)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\17d4b0b65ed74f838cc5859852b96de7.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fc64addb02c4482791571f5b850c8b03.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2a4e30059925415bb33c0d50f7af197a.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\573a5edbbde341628cac55f1e3cbe6d8.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\69258dce7aac4041b79d0ee7ee12f6d3.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c306cca9d5994fb7add4bb7b3a2a3c79.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d7bea24749a649c6a1f908c991bbbde5.png\"/></p>\n<h5><a id=\"33QRadioButton_2562\"></a>33.单选按钮控件(QRadioButton)</h5>\n<p>在controls文件夹里，新建QRadioButtonDemo.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n单选按钮控件(QRadioButton)\n\"\"\"</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token comment\"># QtCore是Qt的精髓（包括五大模块：元对象系统，属性系统，对象模型，对象树，信号槽）</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token comment\"># QtGui 显示应用程序图标，工具提示和各种鼠标光标。</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token comment\"># Qt Widgets模块提供了一组UI元素来创建经典的桌面风格的用户界面。</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RadioButtonDemo</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>RadioButtonDemo<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n        <span class=\"token comment\"># 设置窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'QRadioButton'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 把是所有的单选按钮都放在一个容器里，才能实现单选</span>\n\n\n        <span class=\"token comment\"># 创建水平布局</span>\n        layout <span class=\"token operator\">=</span> QHBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建button1控件</span>\n        self<span class=\"token punctuation\">.</span>button1 <span class=\"token operator\">=</span> QRadioButton<span class=\"token punctuation\">(</span><span class=\"token string\">'单选按钮1'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设button1默认为选中状态</span>\n        self<span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">.</span>setChecked<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 创建button2控件</span>\n        self<span class=\"token punctuation\">.</span>button2 <span class=\"token operator\">=</span> QRadioButton<span class=\"token punctuation\">(</span><span class=\"token string\">'单选按钮2'</span><span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 连接信息槽</span>\n        <span class=\"token comment\"># toggle是状态切换的信号</span>\n        self<span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">.</span>toggled<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>buttonState<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>button2<span class=\"token punctuation\">.</span>toggled<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>buttonState<span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 把控件添加到水平布局里</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button2<span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 应用于水平布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n\n    <span class=\"token comment\"># 编写槽</span>\n    <span class=\"token comment\"># def buttonState(self):</span>\n    <span class=\"token comment\">#     # 控件获取数据</span>\n    <span class=\"token comment\">#     radioButton = self.sender()</span>\n    <span class=\"token comment\">#     # 判断获取的数据的文本是否是‘单选按钮1’</span>\n    <span class=\"token comment\">#     if radioButton.text() == '单选按钮1':</span>\n    <span class=\"token comment\">#         # 判断获取的数据的文本是‘单选按钮1’的是否被选中</span>\n    <span class=\"token comment\">#         if radioButton.isChecked() == True:</span>\n    <span class=\"token comment\">#             # 如果被选中</span>\n    <span class=\"token comment\">#             print('&lt;' + radioButton.text() + '&gt;被选中' )</span>\n    <span class=\"token comment\">#         else:</span>\n    <span class=\"token comment\">#             print('&lt;' + radioButton.text() + '&gt;被取消选中状态')</span>\n    <span class=\"token comment\">#     # 判断获取的数据的文本是否是‘单选按钮2’</span>\n    <span class=\"token comment\">#     if radioButton.text() == '单选按钮2':</span>\n    <span class=\"token comment\">#         # 判断获取的数据的文本是‘单选按钮2’的是否被选中</span>\n    <span class=\"token comment\">#         if radioButton.isChecked() == True:</span>\n    <span class=\"token comment\">#             # 如果被选中</span>\n    <span class=\"token comment\">#             print('&lt;' + radioButton.text() + '&gt;被选中')</span>\n    <span class=\"token comment\">#         else:</span>\n    <span class=\"token comment\">#             print('&lt;' + radioButton.text() + '&gt;被取消选中状态')</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">buttonState</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 控件获取数据</span>\n        radioButton <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> radioButton<span class=\"token punctuation\">.</span>isChecked<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 如果被选中</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;'</span> <span class=\"token operator\">+</span> radioButton<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'&gt;被选中'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;'</span> <span class=\"token operator\">+</span> radioButton<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'&gt;被取消选中状态'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 防止别的脚本调用，只有自己单独运行时，才会调用下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 创建app实例，并传入参数</span>\n    app<span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> RadioButtonDemo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 进入程序的主循环，并通过exit函数，确保主循环安全结束(该释放资源的释放资源)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e6dd86bda91f4b088818f6eb6bbf54e9.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\41877403f292492dabfb8ce3d0961518.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\36ae3aecf76a422d9f38611e8e50fec2.png\"/></p>\n<h5><a id=\"34QCheckBox_2672\"></a>34.复选框控件(QCheckBox)</h5>\n<p>复选框控件也称为多选控件</p>\n<p>在controls文件夹里，新建QCheckBoxDemo.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n复选框控件(QCheckBox)\n作用：同时可选中多个控件\n复选框控件有三种状态：\n未选中： 0\n半选中： 1\n选中：   2\n\n\"\"\"</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token comment\"># QtCore是Qt的精髓（包括五大模块：元对象系统，属性系统，对象模型，对象树，信号槽）</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token comment\"># QtGui 显示应用程序图标，工具提示和各种鼠标光标。</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token comment\"># Qt Widgets模块提供了一组UI元素来创建经典的桌面风格的用户界面。</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> Qt\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QCheckBoxDemo</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>QCheckBoxDemo<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'复选框控件演示'</span><span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 创建水平布局</span>\n        layout <span class=\"token operator\">=</span> QHBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建checkBox1复选框控件</span>\n        self<span class=\"token punctuation\">.</span>checkBox1 <span class=\"token operator\">=</span> QCheckBox<span class=\"token punctuation\">(</span><span class=\"token string\">'复选框控件1'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#设置复选框默认为选中状态</span>\n        self<span class=\"token punctuation\">.</span>checkBox1<span class=\"token punctuation\">.</span>setChecked<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 创建checkBox2复选框控件</span>\n        <span class=\"token comment\"># 普通控件，状态是未选中</span>\n        self<span class=\"token punctuation\">.</span>checkBox2 <span class=\"token operator\">=</span> QCheckBox<span class=\"token punctuation\">(</span><span class=\"token string\">'复选框控件2'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建checkBox3复选框控件 状态是半选中</span>\n        self<span class=\"token punctuation\">.</span>checkBox3 <span class=\"token operator\">=</span> QCheckBox<span class=\"token punctuation\">(</span><span class=\"token string\">'复选框控件3'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 处于半选中状态，需要下面两行代码</span>\n        self<span class=\"token punctuation\">.</span>checkBox3<span class=\"token punctuation\">.</span>setTristate<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 需要单独导Qt包   from PyQt5.QtCore import Qt</span>\n        self<span class=\"token punctuation\">.</span>checkBox3<span class=\"token punctuation\">.</span>setCheckState<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>PartiallyChecked<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 应用于水平布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 将信号与槽绑定</span>\n        <span class=\"token comment\"># 状态变化信号</span>\n        self<span class=\"token punctuation\">.</span>checkBox1<span class=\"token punctuation\">.</span>stateChanged<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">.</span>checkboxState<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>checkBox1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>checkBox2<span class=\"token punctuation\">.</span>stateChanged<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">.</span>checkboxState<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>checkBox2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>checkBox3<span class=\"token punctuation\">.</span>stateChanged<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">.</span>checkboxState<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>checkBox3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把控件添加到水平布局里</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>checkBox1<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>checkBox2<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>checkBox3<span class=\"token punctuation\">)</span>\n\n\n\n\n    <span class=\"token comment\"># 编写槽方法</span>\n    <span class=\"token comment\"># 通过checkState可以设置三种状态</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">checkboxState</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        check1Status <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>checkBox1<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">', isChecked='</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>checkBox1<span class=\"token punctuation\">.</span>isChecked<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">',checkState='</span> <span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>checkBox1<span class=\"token punctuation\">.</span>checkState<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span>\n        check2Status <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>checkBox2<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">', isChecked='</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>checkBox2<span class=\"token punctuation\">.</span>isChecked<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">',checkState='</span> <span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>checkBox2<span class=\"token punctuation\">.</span>checkState<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span>\n        check3Status <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>checkBox3<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">', isChecked='</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>checkBox3<span class=\"token punctuation\">.</span>isChecked<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">',checkState='</span> <span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>checkBox3<span class=\"token punctuation\">.</span>checkState<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>check1Status <span class=\"token operator\">+</span> check2Status <span class=\"token operator\">+</span> check3Status<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 防止别的脚本调用，只有自己单独运行时，才会调用下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 创建app实例，并传入参数</span>\n    app<span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> QCheckBoxDemo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 进入程序的主循环，并通过exit函数，确保主循环安全结束(该释放资源的释放资源)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b3b88b20ae0b4f28bbc8de2ad12c12cb.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a190779536274897be255dbace8b7ac0.png\"/></p>\n<h5><a id=\"35QComboBox_2772\"></a>35.下拉列表控件(QComboBox)</h5>\n<p>在controls文件夹里，新建QComboBoxDemo.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n下拉列表控件\n\n需要了解3点\n1.如何将列表项添加到QComboBox控件中\n\n2.如何获取选中的列表项\n\n\"\"\"</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token comment\"># QtCore是Qt的精髓（包括五大模块：元对象系统，属性系统，对象模型，对象树，信号槽）</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token comment\"># QtGui 显示应用程序图标，工具提示和各种鼠标光标。</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token comment\"># Qt Widgets模块提供了一组UI元素来创建经典的桌面风格的用户界面。</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> Qt\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QComboBoxDemo</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>QComboBoxDemo<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 编写初始化方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n        <span class=\"token comment\"># 设置窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'下拉列表控件演示'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口尺寸</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建垂直布局</span>\n        layout <span class=\"token operator\">=</span> QVBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建label控件</span>\n        self<span class=\"token punctuation\">.</span>label <span class=\"token operator\">=</span> QLabel<span class=\"token punctuation\">(</span><span class=\"token string\">'请选择编程语言'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建QComboBox控件</span>\n        self<span class=\"token punctuation\">.</span>cb <span class=\"token operator\">=</span> QComboBox<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 用QComboBox里面的addItem添加</span>\n        self<span class=\"token punctuation\">.</span>cb<span class=\"token punctuation\">.</span>addItem<span class=\"token punctuation\">(</span><span class=\"token string\">'C++'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>cb<span class=\"token punctuation\">.</span>addItem<span class=\"token punctuation\">(</span><span class=\"token string\">'Python'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 也可以直接添加多个</span>\n        self<span class=\"token punctuation\">.</span>cb<span class=\"token punctuation\">.</span>addItems<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Java'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Go'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'C#'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 绑定信号和槽</span>\n        <span class=\"token comment\"># currentIndexChanged 当前索引变化，从0开始</span>\n        self<span class=\"token punctuation\">.</span>cb<span class=\"token punctuation\">.</span>currentIndexChanged<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>selectionChange<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把控件添加到垂直布局里</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>cb<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 应用于垂直布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 槽方法</span>\n    <span class=\"token comment\"># 默认传两个参数，一个是控件本身，一个是索引</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">selectionChange</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 得到当前选择的文本</span>\n        self<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>cb<span class=\"token punctuation\">.</span>currentText<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 调整尺寸</span>\n        self<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">.</span>adjustSize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 通过循环查看状态</span>\n        <span class=\"token keyword\">for</span> count <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>cb<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 根据索引，得到当前项的文本</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'item'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'='</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>cb<span class=\"token punctuation\">.</span>itemText<span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'current index'</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span><span class=\"token string\">'selection changed'</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>cb<span class=\"token punctuation\">.</span>currentText<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 防止别的脚本调用，只有自己单独运行时，才会调用下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 创建app实例，并传入参数</span>\n    app<span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> QComboBoxDemo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 进入程序的主循环，并通过exit函数，确保主循环安全结束(该释放资源的释放资源)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n\n</code></pre>\n<p>效果展示</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f372fb3579284efab40b7a3a47d498a8.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\71f8361c62474ec8914a21545349effa.png\"/></p>\n<h5><a id=\"36QSpinBox_2869\"></a>36.计数器控件(QSpinBox)</h5>\n<p>在controls文件夹里，新建QSpinBoxDemo.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n计数器控件(QSpinBox)\n用来控制一个数字的增加或减少\n\"\"\"</span>\n\n<span class=\"token comment\"># 显示数字，获取数字，查看数字变化</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token comment\"># QtCore是Qt的精髓（包括五大模块：元对象系统，属性系统，对象模型，对象树，信号槽）</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token comment\"># QtGui 显示应用程序图标，工具提示和各种鼠标光标。</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token comment\"># Qt Widgets模块提供了一组UI元素来创建经典的桌面风格的用户界面。</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QSpinBoxDemo</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>QSpinBoxDemo<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n    <span class=\"token comment\"># 编写初始化方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'QSpinBox演示'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口尺寸</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建垂直布局</span>\n        layout <span class=\"token operator\">=</span> QVBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建label控件</span>\n        self<span class=\"token punctuation\">.</span>label <span class=\"token operator\">=</span> QLabel<span class=\"token punctuation\">(</span><span class=\"token string\">'当前值'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置label控件的文字居中</span>\n        self<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">.</span>setAlignment<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>AlignCenter<span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 创建QSpinBox控件</span>\n        self<span class=\"token punctuation\">.</span>sb <span class=\"token operator\">=</span> QSpinBox<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#给控件设置默认值，从18开始变</span>\n        self<span class=\"token punctuation\">.</span>sb <span class=\"token punctuation\">.</span>setValue<span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#给控件设置范围，最小为19，最大为42</span>\n        self<span class=\"token punctuation\">.</span>sb<span class=\"token punctuation\">.</span>setRange<span class=\"token punctuation\">(</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 添加步长，让每次增2</span>\n        self<span class=\"token punctuation\">.</span>sb<span class=\"token punctuation\">.</span>setSingleStep<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 把控件添加到垂直布局里</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>sb<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 信号槽绑定</span>\n        <span class=\"token comment\"># 当value值发生变化时的方法</span>\n        self<span class=\"token punctuation\">.</span>sb<span class=\"token punctuation\">.</span>valueChanged<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>valueChange<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 应用于垂直布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 槽方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">valueChange</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 获得的字段</span>\n        self<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token string\">'当前值：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>sb<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 防止别的脚本调用，只有自己单独运行时，才会调用下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 创建app实例，并传入参数</span>\n    app<span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> QSpinBoxDemo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 进入程序的主循环，并通过exit函数，确保主循环安全结束(该释放资源的释放资源)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\56f3bae07d864974a00b497c940ba201.png\"/></p>\n<h5><a id=\"37QSlider_2956\"></a>37.滑块控件(QSlider)</h5>\n<p>在controls文件夹里，新建QSliderDemo.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n滑块控件\n通过滑块左右或者上下拉动来控制数字变化\n\"\"\"</span>\n<span class=\"token comment\"># 如何通过滑块标签来设置字体的大小</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token comment\"># QtCore是Qt的精髓（包括五大模块：元对象系统，属性系统，对象模型，对象树，信号槽）</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token comment\"># QtGui 显示应用程序图标，工具提示和各种鼠标光标。</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token comment\"># Qt Widgets模块提供了一组UI元素来创建经典的桌面风格的用户界面。</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QSliderDemo</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>QSliderDemo<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'滑块控件演示'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口尺寸</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建垂直布局</span>\n        layout <span class=\"token operator\">=</span> QVBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建label控件</span>\n        self<span class=\"token punctuation\">.</span>label <span class=\"token operator\">=</span> QLabel<span class=\"token punctuation\">(</span><span class=\"token string\">'你好，PyQt5'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 让label控件居中显示</span>\n        self<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">.</span>setAlignment<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>AlignCenter<span class=\"token punctuation\">)</span>\n\n\n\n\n        <span class=\"token comment\"># 创建滑块控件，有两种：水平和垂直</span>\n        <span class=\"token comment\"># 创建水平的滑块控件slider</span>\n        self<span class=\"token punctuation\">.</span>slider <span class=\"token operator\">=</span> QSlider<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>Horizontal<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建垂直的滑块控件slider1</span>\n        self<span class=\"token punctuation\">.</span>slider1 <span class=\"token operator\">=</span>   QSlider<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>Vertical<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置最小值12</span>\n        self<span class=\"token punctuation\">.</span>slider<span class=\"token punctuation\">.</span>setMinimum<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>slider1<span class=\"token punctuation\">.</span>setMinimum<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置最大值</span>\n        self<span class=\"token punctuation\">.</span>slider<span class=\"token punctuation\">.</span>setMaximum<span class=\"token punctuation\">(</span><span class=\"token number\">58</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>slider1<span class=\"token punctuation\">.</span>setMaximum<span class=\"token punctuation\">(</span><span class=\"token number\">58</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 步长</span>\n        self<span class=\"token punctuation\">.</span>slider<span class=\"token punctuation\">.</span>setSingleStep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>slider1<span class=\"token punctuation\">.</span>setSingleStep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置当前值</span>\n        self<span class=\"token punctuation\">.</span>slider<span class=\"token punctuation\">.</span>setValue<span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>slider1<span class=\"token punctuation\">.</span>setValue<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置刻度的位置，刻度在下方</span>\n        self<span class=\"token punctuation\">.</span>slider<span class=\"token punctuation\">.</span>setTickPosition<span class=\"token punctuation\">(</span>QSlider<span class=\"token punctuation\">.</span>TicksBelow<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置刻度的位置，刻度在左方</span>\n        self<span class=\"token punctuation\">.</span>slider1<span class=\"token punctuation\">.</span>setTickPosition<span class=\"token punctuation\">(</span>QSlider<span class=\"token punctuation\">.</span>TicksLeft<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置刻度的间隔</span>\n        self<span class=\"token punctuation\">.</span>slider<span class=\"token punctuation\">.</span>setTickInterval<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>slider1<span class=\"token punctuation\">.</span>setTickInterval<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把控件添加到垂直布局里</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>slider<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>slider1<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#信号槽的绑定</span>\n        self<span class=\"token punctuation\">.</span>slider<span class=\"token punctuation\">.</span>valueChanged<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>valueChange<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>slider1<span class=\"token punctuation\">.</span>valueChanged<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>valueChange<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 应用于垂直布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 槽方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">valueChange</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'当前值：%s'</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>slider<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'当前值：%s'</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>slider1<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 获得值</span>\n        size <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>slider<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        size <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>slider1<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置字体字号，让字号通过值发生变化</span>\n        self<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">.</span>setFont<span class=\"token punctuation\">(</span>QFont<span class=\"token punctuation\">(</span><span class=\"token string\">'Arial'</span><span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 防止别的脚本调用，只有自己单独运行时，才会调用下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 创建app实例，并传入参数</span>\n    app<span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> QSliderDemo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 进入程序的主循环，并通过exit函数，确保主循环安全结束(该释放资源的释放资源)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\70712e067126441f985c86d0ae0d5fe9.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bdf8940af6e64782b09a93a717cfb5bc.png\"/></p>\n<h5><a id=\"38QDialog_3067\"></a>38.对话框(QDialog)</h5>\n<p>在controls文件夹里，新建QDialogDemo.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n对话框的基类QDialog\n在基类基础上有五种对话框\nQMessageBox 消息对话框\nQColorDialog 颜色对话框\nQFileDialog  显示文件打开或保存对话框\nQFontDialog  设置字体对话框\nQInputDialog  输入信息对话框\n\n回顾：\nPyQt5的三种窗口\nQMainWindow  主窗口\nQWidget  不确定窗口的用途时\nQDialog  没有菜单的窗口，一个对话框\n\n\"\"\"</span>\n<span class=\"token comment\"># 如何在主窗口里面显示对话框</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token comment\"># QtCore是Qt的精髓（包括五大模块：元对象系统，属性系统，对象模型，对象树，信号槽）</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token comment\"># QtGui 显示应用程序图标，工具提示和各种鼠标光标。</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token comment\"># Qt Widgets模块提供了一组UI元素来创建经典的桌面风格的用户界面。</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QDialogDemo</span><span class=\"token punctuation\">(</span>QMainWindow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>QDialogDemo<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'QDialog案例'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口尺寸</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建button控件，直接把button放在窗口上</span>\n        self<span class=\"token punctuation\">.</span>button <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置button控件文本</span>\n        self<span class=\"token punctuation\">.</span>button<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token string\">'弹出对话框'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 移动button的位置</span>\n        self<span class=\"token punctuation\">.</span>button<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 将单击信号和槽绑定</span>\n        self<span class=\"token punctuation\">.</span>button<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>showDialog<span class=\"token punctuation\">)</span>\n\n\n    <span class=\"token comment\"># 槽方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">showDialog</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 创建对话框</span>\n        dialog <span class=\"token operator\">=</span> QDialog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 在对话框dialog里面放一个button</span>\n        button <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'确定'</span><span class=\"token punctuation\">,</span>dialog<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 点击button按钮关闭  现成的槽</span>\n        button<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>dialog<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 移动button</span>\n        button<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给dialog设置标题</span>\n        dialog<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'对话框'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置对话框为模式状态，模式状态：即模式状态开启时，对话框窗口里的所有控件不可用</span>\n        dialog<span class=\"token punctuation\">.</span>setWindowModality<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>ApplicationModal<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 显示对话框</span>\n        dialog<span class=\"token punctuation\">.</span><span class=\"token keyword\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 防止别的脚本调用，只有自己单独运行时，才会调用下面的代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 创建app实例，并传入参数</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> QDialogDemo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 进入程序的主循环，并通过exit函数，确保主循环安全结束(该释放资源的释放)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ba1cd19415a84ce695b21596b120da18.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c82ad25b09924aafba3994429f952d23.png\"/></p>\n<h5><a id=\"39QMessageBox_3157\"></a>39.消息对话框(QMessageBox)</h5>\n<p>在controls文件夹里，新建QMessageBoxDemo.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n消息对话框 QMessageBox\n\n主要用于显示版本和其他软件的信息\n\n常用的有以下集中对话框\n1.关于对话框\n2.错误对话框\n3.警告对话框\n4.提问对话框\n5.消息对话框\n\n以上对话框主要有以下两种差异\n1.显示的对话框图标可能不同\n2.显示的按钮个数，文字是不一样的\n\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token comment\"># QtCore是Qt的精髓（包括五大模块：元对象系统，属性系统，对象模型，对象树，信号槽）</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token comment\"># QtGui 显示应用程序图标，工具提示和各种鼠标光标。</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token comment\"># Qt Widgets模块提供了一组UI元素来创建经典的桌面风格的用户界面。</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QMessageBoxDemo</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>QMessageBoxDemo<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'QMessageBox演示'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口尺寸</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建垂直布局</span>\n        layout <span class=\"token operator\">=</span> QVBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建button1控件</span>\n        self<span class=\"token punctuation\">.</span>button1 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置button1的文本内容</span>\n        self<span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token string\">'显示关于对话框'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建button2控件</span>\n        self<span class=\"token punctuation\">.</span>button2 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置button2的文本内容</span>\n        self<span class=\"token punctuation\">.</span>button2<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token string\">'显示消息对话框'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建button3控件</span>\n        self<span class=\"token punctuation\">.</span>button3 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置button3的文本内容</span>\n        self<span class=\"token punctuation\">.</span>button3<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token string\">'显示警告对话框'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建button4控件</span>\n        self<span class=\"token punctuation\">.</span>button4 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置button4的文本内容</span>\n        self<span class=\"token punctuation\">.</span>button4<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token string\">'显示错误对话框'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建button5控件</span>\n        self<span class=\"token punctuation\">.</span>button5 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置button5的文本内容</span>\n        self<span class=\"token punctuation\">.</span>button5<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token string\">'显示提问对话框'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 信号与槽绑定  （本次演示，多个信号都绑定在一个槽上）</span>\n        self<span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>showDialog<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>button2<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>showDialog<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>button3<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>showDialog<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>button4<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>showDialog<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>button5<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>showDialog<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把控件添加到布局里</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button2<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button3<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button4<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button5<span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 应用于垂直布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n\n    <span class=\"token comment\"># 槽方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">showDialog</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        text <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> text <span class=\"token operator\">==</span> <span class=\"token string\">'显示关于对话框'</span><span class=\"token punctuation\">:</span>\n            QMessageBox<span class=\"token punctuation\">.</span>about<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span><span class=\"token string\">'关于'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'这是一个关于对话框'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> text <span class=\"token operator\">==</span> <span class=\"token string\">'显示消息对话框'</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 两个选项，一个YES,一个No,还有一个默认的值，按回车之后会Yes</span>\n            reply <span class=\"token operator\">=</span> QMessageBox<span class=\"token punctuation\">.</span>information<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span><span class=\"token string\">'消息'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'这是一个消息对话框'</span><span class=\"token punctuation\">,</span>QMessageBox<span class=\"token punctuation\">.</span>Yes <span class=\"token operator\">|</span> QMessageBox<span class=\"token punctuation\">.</span>No<span class=\"token punctuation\">,</span>QMessageBox<span class=\"token punctuation\">.</span>Yes<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>reply <span class=\"token operator\">==</span> QMessageBox<span class=\"token punctuation\">.</span>Yes<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> text <span class=\"token operator\">==</span> <span class=\"token string\">'显示警告对话框'</span><span class=\"token punctuation\">:</span>\n            QMessageBox<span class=\"token punctuation\">.</span>warning<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span><span class=\"token string\">'警告'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'这是一个警告对话框'</span><span class=\"token punctuation\">,</span>QMessageBox<span class=\"token punctuation\">.</span>Yes <span class=\"token operator\">|</span> QMessageBox<span class=\"token punctuation\">.</span>No<span class=\"token punctuation\">,</span>QMessageBox<span class=\"token punctuation\">.</span>Yes<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> text <span class=\"token operator\">==</span> <span class=\"token string\">'显示错误对话框'</span><span class=\"token punctuation\">:</span>\n            QMessageBox<span class=\"token punctuation\">.</span>critical<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token string\">'错误'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'这是一个错误对话框'</span><span class=\"token punctuation\">,</span> QMessageBox<span class=\"token punctuation\">.</span>Yes <span class=\"token operator\">|</span> QMessageBox<span class=\"token punctuation\">.</span>No<span class=\"token punctuation\">,</span> QMessageBox<span class=\"token punctuation\">.</span>Yes<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> text <span class=\"token operator\">==</span> <span class=\"token string\">'显示提问对话框'</span><span class=\"token punctuation\">:</span>\n            QMessageBox<span class=\"token punctuation\">.</span>question<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token string\">'提问'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'这是一个提问对话框'</span><span class=\"token punctuation\">,</span> QMessageBox<span class=\"token punctuation\">.</span>Yes <span class=\"token operator\">|</span> QMessageBox<span class=\"token punctuation\">.</span>No<span class=\"token punctuation\">,</span> QMessageBox<span class=\"token punctuation\">.</span>Yes<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    main <span class=\"token operator\">=</span> QMessageBoxDemo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fdfb47bc2eb946d5aa558b1341ada838.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f1b71c8cbac14a0bbc738269135994b4.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a188fd43d41346fca1e096f1c038c2fa.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\361a47fc1d5d499bbebfd94526e4d76e.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bdeed4ca362644218b768170aef97a21.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d710e3bece6f4b9a8ce923b0ae8fc1a8.png\"/></p>\n<h5><a id=\"40QInputDialog_3289\"></a>40.输入对话框(QInputDialog)</h5>\n<p>在controls文件夹里，新建QInputDialogDemo.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n输入对话框：QInputDialog\n提供了若干个静态方法\nQInputDialog.getItem  用来显示输入列表\nQInputDialog.getText   用来显示录入文本\nQInputDialog.getInt    用来显示输入整数的  计数器控件\n\n\"\"\"</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token comment\"># QtCore是Qt的精髓（包括五大模块：元对象系统，属性系统，对象模型，对象树，信号槽）</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token comment\"># QtGui 显示应用程序图标，工具提示和各种鼠标光标。</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token comment\"># Qt Widgets模块提供了一组UI元素来创建经典的桌面风格的用户界面。</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QInputDialogDemo</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>QInputDialogDemo<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 编写初始化方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'输入对话框'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口尺寸</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建form表单布局</span>\n        layout <span class=\"token operator\">=</span> QFormLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建button1控件</span>\n        self<span class=\"token punctuation\">.</span>button1 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'获取列表中的选项'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建lineEdit1控件，放置在button1的右侧  在布局添加的时候设置</span>\n        self<span class=\"token punctuation\">.</span>lineEdit1 <span class=\"token operator\">=</span>QLineEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建button2控件</span>\n        self<span class=\"token punctuation\">.</span>button2 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'获取字符串'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建lineEdit2控件，放置在button2的右侧 在布局添加的时候设置</span>\n        self<span class=\"token punctuation\">.</span>lineEdit2 <span class=\"token operator\">=</span> QLineEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建button3、lineEdit3控件</span>\n        self<span class=\"token punctuation\">.</span>button3 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'获取整数'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>lineEdit3 <span class=\"token operator\">=</span> QLineEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 绑定信号 槽</span>\n        self<span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>getItem<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>button2<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>getText<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>button3<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>getInt<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把控件添加到form表单布局里</span>\n        layout<span class=\"token punctuation\">.</span>addRow<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>lineEdit1<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addRow<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button2<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>lineEdit2<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addRow<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button3<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>lineEdit3<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 应用于form表单布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n     <span class=\"token comment\"># 槽方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 定义一个元组</span>\n        items <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'C++'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Ruby'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Python'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Java'</span><span class=\"token punctuation\">)</span>\n        item<span class=\"token punctuation\">,</span>ok <span class=\"token operator\">=</span> QInputDialog<span class=\"token punctuation\">.</span>getItem<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span><span class=\"token string\">'请选择编程语言'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'语言列表'</span><span class=\"token punctuation\">,</span>items<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> ok <span class=\"token operator\">and</span> item<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>lineEdit1<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getText</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        text<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">=</span> QInputDialog<span class=\"token punctuation\">.</span>getText<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span><span class=\"token string\">'文本输入框'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'输入姓名'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> ok <span class=\"token operator\">and</span> text<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>lineEdit2<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        num<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">=</span> QInputDialog<span class=\"token punctuation\">.</span>getInt<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span><span class=\"token string\">'整数输入框'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'输入数字'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> ok <span class=\"token operator\">and</span> num<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>lineEdit3<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    main <span class=\"token operator\">=</span> QInputDialogDemo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p>效果展示:</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2413a7d50f7c4246838e9625ad55fe7c.png\"/></p>\n<h5><a id=\"41QFontDialog_3382\"></a>41.字体对话框(QFontDialog)</h5>\n<p>在controls文件夹里，新建QFontDialogDemo.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n字体对话框 QFontDialog\n\n用来显示字体列表，并且选择某一个字体字号，然后返回\n\"\"\"</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QFontDialogDemo</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span>  <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>QFontDialogDemo<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'FontDialog演示'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口尺寸</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建一个垂直布局</span>\n        layout <span class=\"token operator\">=</span> QVBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建button控件</span>\n        self<span class=\"token punctuation\">.</span>fontButton <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'选择字体'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建label控件，用于接收设置的文本输入框</span>\n        self<span class=\"token punctuation\">.</span>fontLabel <span class=\"token operator\">=</span> QLabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Hello,测试字体例子'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 绑定信号和槽</span>\n        self<span class=\"token punctuation\">.</span>fontButton<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>getFont<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把控件添加到布局里</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>fontButton<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>fontLabel<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 应用于垂直布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 槽方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getFont</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 返回font对象，探测是否点ok或者cancel</span>\n        <span class=\"token comment\"># getFont返回两个值</span>\n        font<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">=</span> QFontDialog<span class=\"token punctuation\">.</span>getFont<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> ok<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>fontLabel<span class=\"token punctuation\">.</span>setFont<span class=\"token punctuation\">(</span>font<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    main <span class=\"token operator\">=</span> QFontDialogDemo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4d918309ef19452ea51683198f0c4d17.png\"/></p>\n<h5><a id=\"42QColorDialog_3448\"></a>42.颜色对话框(QColorDialog)</h5>\n<p>在controls文件夹里，新建QColorDialogDemo.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n颜色对话框 QColorDialog\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QColorDialogDemo</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>QColorDialogDemo<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 编写初始化方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置窗口标签</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'选择颜色'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建布局</span>\n        layout <span class=\"token operator\">=</span> QVBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建button控件</span>\n        self<span class=\"token punctuation\">.</span>colorButton <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'选择颜色'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建label控件，用于设置接收颜色的输入框</span>\n        self<span class=\"token punctuation\">.</span>colorLaber <span class=\"token operator\">=</span> QLabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Hello,测试颜色'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建Bgbutton控件，用来设置背景色</span>\n        self<span class=\"token punctuation\">.</span>colorBgButton <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'设置背景色'</span><span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 绑定信号 槽</span>\n        self<span class=\"token punctuation\">.</span>colorButton<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>getColor<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>colorBgButton<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>getBgColor<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 把控件放在布局里</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>colorButton<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>colorLaber<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>colorBgButton<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 应用布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 槽方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 返回color对象，探测是否点ok或者cancel</span>\n        <span class=\"token comment\"># getColor返回一个值</span>\n        color <span class=\"token operator\">=</span> QColorDialog<span class=\"token punctuation\">.</span>getColor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置文字颜色</span>\n        <span class=\"token comment\"># 调色板实例化</span>\n        p <span class=\"token operator\">=</span>QPalette<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        p<span class=\"token punctuation\">.</span>setColor<span class=\"token punctuation\">(</span>QPalette<span class=\"token punctuation\">.</span>WindowText<span class=\"token punctuation\">,</span>color<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置调色板</span>\n        self<span class=\"token punctuation\">.</span>colorLaber<span class=\"token punctuation\">.</span>setPalette<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 背景色槽方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getBgColor</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        color <span class=\"token operator\">=</span>  QColorDialog<span class=\"token punctuation\">.</span>getColor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 调色板设置</span>\n        p <span class=\"token operator\">=</span> QPalette<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        p<span class=\"token punctuation\">.</span>setColor<span class=\"token punctuation\">(</span>QPalette<span class=\"token punctuation\">.</span>Window<span class=\"token punctuation\">,</span>color<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置自动填充</span>\n        self<span class=\"token punctuation\">.</span>colorLaber<span class=\"token punctuation\">.</span>setAutoFillBackground<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置调色板</span>\n        self<span class=\"token punctuation\">.</span>colorLaber<span class=\"token punctuation\">.</span>setPalette<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 防止别的脚本调用，只有自己单独运行时，才会调用下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 创建app实例，并传入参数</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 把类实例化</span>\n    main <span class=\"token operator\">=</span> QColorDialogDemo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 设置窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 进入程序的主循环，通过exit函数，确保主循环安全结束</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示:</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\12a142389bf6470d8cbb325b7553647f.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\81968d95a51647edba582c86c7d17735.png\"/></p>\n<h5><a id=\"43QFileDialog_3536\"></a>43.文件对话框(QFileDialog)</h5>\n<p>在controls文件夹里，新建QFileDialogDemo.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n文件对话框 QFileDialog\n最常用的是打开文件和保存文件对话框\n\"\"\"</span>\n<span class=\"token comment\"># 需求：</span>\n<span class=\"token comment\"># 1.打开文件，显示到窗口上</span>\n<span class=\"token comment\"># 2.打开文本文件，将文本文件的内容显示到窗口上</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QFileDialogDemo</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>QFileDialogDemo<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 编写初始化方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'文件对话框演示'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建垂直布局</span>\n        layout <span class=\"token operator\">=</span> QVBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建button1控件，用于加载图片</span>\n        self<span class=\"token punctuation\">.</span>button1 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'加载图片'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建label控件，把图像显示到label控件上</span>\n        self<span class=\"token punctuation\">.</span>imageLabel <span class=\"token operator\">=</span> QLabel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建button2控件，用于加载文件</span>\n        self<span class=\"token punctuation\">.</span>button2 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'加载文本文件'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建QTextEdit控件，来显示文本加载的内容</span>\n        self<span class=\"token punctuation\">.</span>contents <span class=\"token operator\">=</span> QTextEdit<span class=\"token punctuation\">(</span><span class=\"token string\">'显示文本加载内容'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 连接信号槽</span>\n        self<span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>loadImage<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>button2<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>loadText<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把控件添加到垂直布局里</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>imageLabel<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button2<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>contents<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 应用于垂直布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 槽方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 打开单个文件对话框</span>\n        <span class=\"token comment\"># 下行代码第三个参数是默认路径，用 \".\"代替当前</span>\n        <span class=\"token comment\"># 第四个参数：'图形文件 (*.jpg)'改成选中两种类型时有问题 '图形文件 (*.png,*.jpg)'</span>\n        <span class=\"token comment\"># 弹出来的显示图片的窗口会随着图片尺寸大小的变化而变化</span>\n        fname<span class=\"token punctuation\">,</span>_ <span class=\"token operator\">=</span> QFileDialog<span class=\"token punctuation\">.</span>getOpenFileName<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span><span class=\"token string\">'打开文件'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'图形文件 (*.jpg)'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 得到图片文件名</span>\n        self<span class=\"token punctuation\">.</span>imageLabel<span class=\"token punctuation\">.</span>setPixmap<span class=\"token punctuation\">(</span>QPixmap<span class=\"token punctuation\">(</span>fname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">loadText</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 直接创建QFileDialog，第二种方法</span>\n        <span class=\"token comment\"># 创建对象</span>\n        dialog <span class=\"token operator\">=</span> QFileDialog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置文件创建模式</span>\n        dialog<span class=\"token punctuation\">.</span>setFileMode<span class=\"token punctuation\">(</span>QFileDialog<span class=\"token punctuation\">.</span>AnyFile<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 选择文件</span>\n        dialog<span class=\"token punctuation\">.</span>setFilter<span class=\"token punctuation\">(</span>QDir<span class=\"token punctuation\">.</span>Files<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#打开文件</span>\n        <span class=\"token keyword\">if</span> dialog<span class=\"token punctuation\">.</span><span class=\"token keyword\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 如果打开成功</span>\n            filename <span class=\"token operator\">=</span> dialog<span class=\"token punctuation\">.</span>selectedFiles<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 打开文件，可以打开多个，取第一个</span>\n            f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">,</span>mode<span class=\"token operator\">=</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 读取</span>\n            <span class=\"token comment\"># 使用with的原因，自动关闭，当with读取结束后，会自动调用f里面的close方法关闭文档</span>\n            <span class=\"token keyword\">with</span> f<span class=\"token punctuation\">:</span>\n                data <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                self<span class=\"token punctuation\">.</span>contents<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 防止别的脚本调用，只有自己单独运行时，才会调用下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># app实例化，并传递参数</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> QFileDialogDemo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 进入程序的主循环，通过exit函数</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9820a5e1d2244536abe4c2a08687c3ce.png\"/></p>\n<h5><a id=\"44API_3640\"></a>44.绘制API:绘制文本</h5>\n<p>新建drawing文件夹，在drawing文件夹里新建DrawText.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n绘制API:绘制文本\n\n绘制API主要有三种类型\n1.文本\n2.各种图形(直线、点、椭圆、弧、扇形、多边形等)\n3.图像\n\n绘制元素的类QPainter\n\n大致过程\npainter = QPainter()\npainter.begin()\npainter.drawText(...)\npainter.end()\n\n必须在paintEvent事件方法中绘制各种元素\n这个事件自动调用，在创建窗口时，以及窗口尺寸发生变化时，会重新绘制，很快\n\n本质上， 窗口尺寸改变时，窗口上的所有元素都会重新绘制\n\n\"\"\"</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span>  QApplication<span class=\"token punctuation\">,</span>QWidget\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> QPainter<span class=\"token punctuation\">,</span>QColor<span class=\"token punctuation\">,</span>QFont\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> Qt\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DrawText</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>DrawText<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'在窗口上绘制文本'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口尺寸</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">600</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置文本</span>\n        self<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"PyQt5从入门到精通\"</span>\n\n    <span class=\"token comment\"># 定义事件方法</span>\n    <span class=\"token comment\"># 参数两个，一个它自己，一个是event</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">paintEvent</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 创建QPainter对象</span>\n        painter <span class=\"token operator\">=</span> QPainter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        painter<span class=\"token punctuation\">.</span>begin<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aaaa'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置笔的颜色</span>\n        painter<span class=\"token punctuation\">.</span>setPen<span class=\"token punctuation\">(</span>QColor<span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span><span class=\"token number\">21</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置字体和字号</span>\n        painter<span class=\"token punctuation\">.</span>setFont<span class=\"token punctuation\">(</span>QFont<span class=\"token punctuation\">(</span><span class=\"token string\">'SimSun'</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 指定区域，设置对齐方式 居中</span>\n        painter<span class=\"token punctuation\">.</span>drawText<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>Qt<span class=\"token punctuation\">.</span>AlignCenter<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n        painter<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 防止别的脚本调用，只有自己单独运行时，才会执行下面的代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># app实例化，并传参</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> DrawText<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 进入主循环，调用exit方法</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\76758e2a8bd54a6d9d48b96be45f56df.png\"/></p>\n<h5><a id=\"45_3714\"></a>45.用像素点绘制正弦曲线</h5>\n<p>在drawing文件夹里新建DrawPoints.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n用像素点绘制正弦曲线\n\ndrawPoint(x,y)\n\"\"\"</span>\n<span class=\"token comment\"># 绘制两个周期的正弦曲线  -2Π到2Π</span>\n\n<span class=\"token keyword\">import</span> sys<span class=\"token punctuation\">,</span>math\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> Qt\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DrawPoints</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>DrawPoints<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口的大小</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'在窗口上用像素点绘制2个周期的正弦曲线'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">paintEvent</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        painter <span class=\"token operator\">=</span>QPainter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        painter<span class=\"token punctuation\">.</span>begin<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置笔的颜色 固定 方法二</span>\n        painter<span class=\"token punctuation\">.</span>setPen<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>blue<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 获得窗口尺寸</span>\n        size <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 对水平轴进行循环，循环一千次</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            x <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2.0</span> <span class=\"token operator\">*</span> i<span class=\"token operator\">/</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> size<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2.0</span>\n            <span class=\"token comment\"># pi 指的是Π</span>\n            y <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">50</span> <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>sin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> size<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>pi<span class=\"token operator\">/</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> size<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2.0</span>\n            painter<span class=\"token punctuation\">.</span>drawPoint<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span>\n\n\n        painter<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 防止别的脚本调用，只有自己单独运行时，才会执行下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># app实例化，并传参</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> DrawPoints<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 进入主循环，调用exit方法，确保主循环安全结束</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d380d2c43d0c41c690f507e8c27109ea.png\"/></p>\n<h5><a id=\"46_3773\"></a>46.绘制不同类型的直线</h5>\n<p>在drawing文件夹里新建DrawMultiLine.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n绘制不同类型的直线\n\n\"\"\"</span>\n<span class=\"token keyword\">import</span> sys<span class=\"token punctuation\">,</span>math\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> Qt\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DrawMultiLine</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>DrawMultiLine<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'设置Pen的样式'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">paintEvent</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        painter <span class=\"token operator\">=</span> QPainter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        painter<span class=\"token punctuation\">.</span>begin<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建画笔   设置颜色，粗细  类型(实线，虚线)</span>\n        pen <span class=\"token operator\">=</span> QPen<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>red<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>Qt<span class=\"token punctuation\">.</span>SolidLine<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置对象</span>\n        painter<span class=\"token punctuation\">.</span>setPen<span class=\"token punctuation\">(</span>pen<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 绘图</span>\n        painter<span class=\"token punctuation\">.</span>drawLine<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">250</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置虚线</span>\n        pen<span class=\"token punctuation\">.</span>setStyle<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>DashLine<span class=\"token punctuation\">)</span>\n        painter<span class=\"token punctuation\">.</span>setPen<span class=\"token punctuation\">(</span>pen<span class=\"token punctuation\">)</span>\n        painter<span class=\"token punctuation\">.</span>drawLine<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">250</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置点划线</span>\n        pen<span class=\"token punctuation\">.</span>setStyle<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>DashDotDotLine<span class=\"token punctuation\">)</span>\n        painter<span class=\"token punctuation\">.</span>setPen<span class=\"token punctuation\">(</span>pen<span class=\"token punctuation\">)</span>\n        painter<span class=\"token punctuation\">.</span>drawLine<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span><span class=\"token number\">250</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置虚线</span>\n        pen<span class=\"token punctuation\">.</span>setStyle<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>DashLine<span class=\"token punctuation\">)</span>\n        painter<span class=\"token punctuation\">.</span>setPen<span class=\"token punctuation\">(</span>pen<span class=\"token punctuation\">)</span>\n        painter<span class=\"token punctuation\">.</span>drawLine<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">160</span><span class=\"token punctuation\">,</span><span class=\"token number\">250</span><span class=\"token punctuation\">,</span><span class=\"token number\">160</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置自定义</span>\n        pen<span class=\"token punctuation\">.</span>setStyle<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>CustomDashLine<span class=\"token punctuation\">)</span>\n        pen<span class=\"token punctuation\">.</span>setDashPattern<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        painter<span class=\"token punctuation\">.</span>setPen<span class=\"token punctuation\">(</span>pen<span class=\"token punctuation\">)</span>\n        painter<span class=\"token punctuation\">.</span>drawLine<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n        size <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># 绘制结束</span>\n        painter<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 防止其他脚本调用，只有运行该脚本时，才会执行下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># app实例化，并传参</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> DrawMultiLine<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 进入主循环，调用exit方法，保证主循环安全结束</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fb56ee9596da41c59ec01fd2a210d058.png\"/></p>\n<h5><a id=\"47_3848\"></a>47.绘制各种图形</h5>\n<p>在drawing文件夹里新建DrawAll.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n绘制各种图形\n弧 圆形 矩形(正方形) 多边形 绘制图像\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> sys<span class=\"token punctuation\">,</span>math\n\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span>  PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span>  PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DrawAll</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>DrawAll<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span><span class=\"token number\">600</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'绘制各种图形'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 定义事件</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">paintEvent</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 创建一个Qpainter对象</span>\n        qp <span class=\"token operator\">=</span> QPainter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 绘制开始</span>\n        qp<span class=\"token punctuation\">.</span>begin<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置笔的颜色</span>\n        qp<span class=\"token punctuation\">.</span>setPen<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>blue<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 绘制弧</span>\n        <span class=\"token comment\">#  确定一个区域</span>\n        rect <span class=\"token operator\">=</span> QRect<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># alen:一个alen等于1/16度   所以表示45度，用45*16表示</span>\n        <span class=\"token comment\">#  画50度，用50*16表示  参数  起  终</span>\n        qp<span class=\"token punctuation\">.</span>drawArc<span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token operator\">*</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 通过弧绘制圆</span>\n        <span class=\"token comment\">#  更改笔的颜色</span>\n        qp<span class=\"token punctuation\">.</span>setPen<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>red<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 位置 从0 到360°</span>\n        qp<span class=\"token punctuation\">.</span>drawArc<span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">360</span><span class=\"token operator\">*</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 绘制带弦的弧</span>\n        <span class=\"token comment\"># 位置 从12°到130°</span>\n        qp<span class=\"token punctuation\">.</span>drawChord<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">130</span><span class=\"token operator\">*</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 绘制扇形</span>\n        <span class=\"token comment\">#  位置  从12°到130°</span>\n        qp<span class=\"token punctuation\">.</span>drawPie<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">240</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">130</span><span class=\"token operator\">*</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 椭圆</span>\n        <span class=\"token comment\">#  不需要指定开始角度和结束角度     宽和高不一样。 如果一样就成圆了</span>\n        qp<span class=\"token punctuation\">.</span>drawEllipse<span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 通过椭圆绘制圆   距窗口的宽  距窗口的高   宽  高</span>\n        qp<span class=\"token punctuation\">.</span>drawEllipse<span class=\"token punctuation\">(</span><span class=\"token number\">180</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 绘制五边形</span>\n        <span class=\"token comment\">#   需要指定五个点</span>\n        point1 <span class=\"token operator\">=</span> QPoint<span class=\"token punctuation\">(</span><span class=\"token number\">140</span><span class=\"token punctuation\">,</span><span class=\"token number\">380</span><span class=\"token punctuation\">)</span>\n        point2 <span class=\"token operator\">=</span> QPoint<span class=\"token punctuation\">(</span><span class=\"token number\">270</span><span class=\"token punctuation\">,</span><span class=\"token number\">420</span><span class=\"token punctuation\">)</span>\n        point3 <span class=\"token operator\">=</span> QPoint<span class=\"token punctuation\">(</span><span class=\"token number\">290</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span>\n        point4 <span class=\"token operator\">=</span> QPoint<span class=\"token punctuation\">(</span><span class=\"token number\">290</span><span class=\"token punctuation\">,</span><span class=\"token number\">588</span><span class=\"token punctuation\">)</span>\n        point5 <span class=\"token operator\">=</span> QPoint<span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">533</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#   创建一个多边形的对象</span>\n        polygon <span class=\"token operator\">=</span> QPolygon<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>point1<span class=\"token punctuation\">,</span>point2<span class=\"token punctuation\">,</span>point3<span class=\"token punctuation\">,</span>point4<span class=\"token punctuation\">,</span>point5<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#  开始绘制五边形</span>\n        qp<span class=\"token punctuation\">.</span>drawPolygon<span class=\"token punctuation\">(</span>polygon<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 绘制图像</span>\n        <span class=\"token comment\">#   装载图像</span>\n        image <span class=\"token operator\">=</span> QImage<span class=\"token punctuation\">(</span><span class=\"token string\">'../controls/images/5.png'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#   指定绘制图像的区域   把图片缩小到原来的三分之一</span>\n        <span class=\"token comment\">#    距离窗口的宽度  距离窗口的高度   宽缩小三分之一  高缩小三分之一</span>\n        rect <span class=\"token operator\">=</span> QRect<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span>image<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>image<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        image<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">'../controls/images/5.png'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 开始绘制图像</span>\n        qp<span class=\"token punctuation\">.</span>drawImage<span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">,</span>image<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 绘制结束</span>\n        qp<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 防止其他脚本调用，只有当这个脚本自己运行时，才会调用下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># app实例化，并传参</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> DrawAll<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 进入主循环，调用exit函数，确保主循环安全结束</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7f6e8322b74f42adb6f48d208e8a148f.png\"/></p>\n<h5><a id=\"48_3952\"></a>48.用画刷填充图形区域</h5>\n<p>在drawing文件夹里新建FillRect.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n用画刷填充图形区域\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> sys<span class=\"token punctuation\">,</span>math\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FillRect</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>FillRect<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'用画刷填充区域'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口尺寸</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">600</span><span class=\"token punctuation\">,</span><span class=\"token number\">600</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 定义事件</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">paintEvent</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 创建QPainter对象</span>\n        qp <span class=\"token operator\">=</span> QPainter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 绘制开始</span>\n        qp<span class=\"token punctuation\">.</span>begin<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建画刷对象  默认实心</span>\n        brush <span class=\"token operator\">=</span> QBrush<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>SolidPattern<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置画刷</span>\n        qp<span class=\"token punctuation\">.</span>setBrush<span class=\"token punctuation\">(</span>brush<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 绘制矩形，填充区域</span>\n        <span class=\"token comment\">#   距窗口的宽   距窗口的高    绘制矩形的宽   绘制矩形的高</span>\n        qp<span class=\"token punctuation\">.</span>drawRect<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建画刷</span>\n        brush1 <span class=\"token operator\">=</span> QBrush<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>Dense1Pattern<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置画刷</span>\n        qp<span class=\"token punctuation\">.</span>setBrush<span class=\"token punctuation\">(</span>brush1<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 绘制矩形，填充区域</span>\n        <span class=\"token comment\">#   距窗口的宽   距窗口的高    绘制矩形的宽   绘制矩形的高</span>\n        qp<span class=\"token punctuation\">.</span>drawRect<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建画刷</span>\n        brush2 <span class=\"token operator\">=</span> QBrush<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>Dense2Pattern<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置画刷</span>\n        qp<span class=\"token punctuation\">.</span>setBrush<span class=\"token punctuation\">(</span>brush2<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 绘制矩形，填充区域</span>\n        <span class=\"token comment\">#   距窗口的宽   距窗口的高    绘制矩形的宽   绘制矩形的高</span>\n        qp<span class=\"token punctuation\">.</span>drawRect<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建画刷</span>\n        brush3 <span class=\"token operator\">=</span> QBrush<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>Dense3Pattern<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置画刷</span>\n        qp<span class=\"token punctuation\">.</span>setBrush<span class=\"token punctuation\">(</span>brush3<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 绘制矩形，填充区域</span>\n        <span class=\"token comment\">#   距窗口的宽   距窗口的高    绘制矩形的宽   绘制矩形的高</span>\n        qp<span class=\"token punctuation\">.</span>drawRect<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">260</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建画刷</span>\n        brush4 <span class=\"token operator\">=</span> QBrush<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>HorPattern<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置画刷</span>\n        qp<span class=\"token punctuation\">.</span>setBrush<span class=\"token punctuation\">(</span>brush4<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 绘制矩形，填充区域</span>\n        <span class=\"token comment\">#   距窗口的宽   距窗口的高    绘制矩形的宽   绘制矩形的高</span>\n        qp<span class=\"token punctuation\">.</span>drawRect<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">340</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 绘制结束</span>\n        qp<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 防止其他脚本调用，单独调用此脚本，才会执行下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># app实例化，并传参</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> FillRect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 进入主循环，调用exit方法，确保主循环安全结束</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2e27d58d74314ceebbfc6f78046dc019.png\"/></p>\n<h5><a id=\"49_4041\"></a>49.让控件支持拖拽动作</h5>\n<p>新建drapclip文件夹，在drapclip文件夹里新建DrapDrop.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n让控件支持拖拽动作\n如果把A拖到B\nA.setDragEnabled(True)   让A可以拖动\nB.setAcceptDrops(True)   让B可以接收其他控件\nB需要两个事件\n1.dragEnterEvent    将A拖到B触发\n2.dropEvent         在B的区域放下A时触发\n\"\"\"</span>\n<span class=\"token comment\"># demo:将一个文本输入框里面的文字拖到一个QChickBox控件里面，(把文字追加到QChickBox里面)</span>\n\n<span class=\"token keyword\">import</span> sys<span class=\"token punctuation\">,</span>math\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n\n<span class=\"token comment\"># B</span>\n<span class=\"token comment\"># QComboBox 下拉框</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComboBox</span><span class=\"token punctuation\">(</span>QComboBox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>MyComboBox<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 把这个控件SetAcceptDrops为True,就可以接收别的控件了</span>\n        self<span class=\"token punctuation\">.</span>setAcceptDrops<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 别的控件拖进来，还没松鼠标，还没触发</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dragEnterEvent</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 查看接收的文本，如果有文本，进行处理</span>\n        <span class=\"token keyword\">if</span> e<span class=\"token punctuation\">.</span>mimeDate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hasText<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            e<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            e<span class=\"token punctuation\">.</span>ignore<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 把别的控件拖进来放下</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dropEvent</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># self指当前下拉列表控件</span>\n        <span class=\"token comment\"># 得到一个文本输入框的文本</span>\n        self<span class=\"token punctuation\">.</span>addItem<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>mimeDate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># A</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DrapDropDemo</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>DrapDropDemo<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建一个form表单布局</span>\n        formLayout <span class=\"token operator\">=</span> QFormLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 把控件添加到布局里</span>\n        formLayout<span class=\"token punctuation\">.</span>addRow<span class=\"token punctuation\">(</span>QLabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"请将左边的文本拖拽到右边的下拉列表中\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建文本输入框  在左侧显示</span>\n        lineEdit <span class=\"token operator\">=</span> QLineEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 被拖动的控件设置可以拖动  让QLineEdit控件可拖动</span>\n        lineEdit<span class=\"token punctuation\">.</span>setDragEnabled<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建下拉列表控件</span>\n        combo <span class=\"token operator\">=</span> MyComboBox<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 把控件添加到form布局里  左侧为lineEdit ,右侧为下拉列表控件</span>\n        formLayout<span class=\"token punctuation\">.</span>addRow<span class=\"token punctuation\">(</span>lineEdit<span class=\"token punctuation\">,</span>combo<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 应用于布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>formLayout<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'拖拽案例'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 防止别脚本调用，只有直接运行此脚本，才会执行下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># app实例化，并传参</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> DrapDropDemo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 进入主循环，调用exit方法，让主循环安全退出</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3343770472ee444f8f3c3d37a01d0377.png\"/></p>\n<p>bug：windows发生dragEnterEvent方法执行不了的问题，排查无果，待后期深入研究PyQt5之后再来填坑。</p>\n<h5><a id=\"50_4125\"></a>50.使用剪切板</h5>\n<p>在drapclip文件夹里新建ClipBoard.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n使用剪贴板\n\"\"\"</span>\n<span class=\"token keyword\">import</span> sys<span class=\"token punctuation\">,</span>math\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ClipBoard</span><span class=\"token punctuation\">(</span>QDialog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>ClipBoard<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建6个按钮组件</span>\n        textCopyButton <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'复制文本'</span><span class=\"token punctuation\">)</span>\n        textPasteButton <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'粘贴文本'</span><span class=\"token punctuation\">)</span>\n\n        htmlCopyButton <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'复制HTML'</span><span class=\"token punctuation\">)</span>\n        htmlPasteButton <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'粘贴HTML'</span><span class=\"token punctuation\">)</span>\n\n        imageCopyButton <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'复制图像'</span><span class=\"token punctuation\">)</span>\n        imagePasteButton <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'粘贴图像'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#  创建两个label控件，一个用来显示粘贴的文本   一个用来显示图像</span>\n        self<span class=\"token punctuation\">.</span>textLabel <span class=\"token operator\">=</span> QLabel<span class=\"token punctuation\">(</span><span class=\"token string\">'默认文本'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>imageLabel <span class=\"token operator\">=</span> QLabel<span class=\"token punctuation\">(</span><span class=\"token string\">'显示头像'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>imageLabel<span class=\"token punctuation\">.</span>setPixmap<span class=\"token punctuation\">(</span>QPixmap<span class=\"token punctuation\">(</span><span class=\"token string\">'../controls/images/5.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置栅格布局</span>\n        layout <span class=\"token operator\">=</span> QGridLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把控件添加到布局里</span>\n        <span class=\"token comment\"># 第一行第一列</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>textCopyButton<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 第一行第二列</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>imageCopyButton<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#第一行第三列</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>htmlCopyButton<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 第二行第一列</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>textPasteButton<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 第二行第二列</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>htmlPasteButton<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 第二行第三列</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>imagePasteButton<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 第三行第一列   占一行占两列</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>textLabel<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 第三行第三列</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>imageLabel<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 应用于栅格布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 绑定信号  槽</span>\n        <span class=\"token comment\"># 分别为这六个按钮指定单击事件</span>\n        <span class=\"token comment\"># 复制文本</span>\n        textCopyButton<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>copyText<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 粘贴文本</span>\n        textPasteButton<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>pasteText<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 复制HTML</span>\n        htmlCopyButton<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>copyHtml<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 粘贴HTML</span>\n        htmlPasteButton<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>pasteHtml<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 复制图像</span>\n        imageCopyButton<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>copyImage<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 粘贴图像</span>\n        imagePasteButton<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>pasteImage<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'剪贴板演示'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 槽方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">copyText</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置剪切板</span>\n        clipboard <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">.</span>clipboard<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置剪切板内容</span>\n        clipboard<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">pasteText</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置剪切板</span>\n        clipboard <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">.</span>clipboard<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置剪切板内容</span>\n        <span class=\"token comment\"># 把剪切板的内容直接放到label里</span>\n        self<span class=\"token punctuation\">.</span>textLabel<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span>clipboard<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">copyHtml</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 获取数据类型</span>\n        mimeData <span class=\"token operator\">=</span> QMimeData<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置HTML</span>\n        mimeData<span class=\"token punctuation\">.</span>setHtml<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;b&gt;Bold and &lt;font color=red&gt;Red&lt;/font&gt;&lt;/b&gt;'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 获得剪切板</span>\n        clipborad <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">.</span>clipboard<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 在剪切板设置数据</span>\n        clipborad<span class=\"token punctuation\">.</span>setMimeData<span class=\"token punctuation\">(</span>mimeData<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">pasteHtml</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 获得剪切板</span>\n        clipboard <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">.</span>clipboard<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 获得数据</span>\n        mimeData  <span class=\"token operator\">=</span> clipboard<span class=\"token punctuation\">.</span>mimeData<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 如果数据是html类型</span>\n        <span class=\"token keyword\">if</span> mimeData<span class=\"token punctuation\">.</span>hasHtml<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 把html数据放在剪切板上</span>\n            self<span class=\"token punctuation\">.</span>textLabel<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span>mimeData<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">copyImage</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置剪切板</span>\n        clipboard <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">.</span>clipboard<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置剪切板内容</span>\n        clipboard<span class=\"token punctuation\">.</span>setPixmap<span class=\"token punctuation\">(</span>QPixmap<span class=\"token punctuation\">(</span><span class=\"token string\">'../controls/images/5.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">pasteImage</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置剪切板</span>\n        clipboard <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">.</span>clipboard<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置剪切板的内容</span>\n        <span class=\"token comment\"># 把剪切板的内容直接放到label里</span>\n        self<span class=\"token punctuation\">.</span>imageLabel<span class=\"token punctuation\">.</span>setPixmap<span class=\"token punctuation\">(</span>clipboard<span class=\"token punctuation\">.</span>pixmap<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 防止其他脚本调用，只有单独运行此脚本，才会调用下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># app实例，并传参</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> ClipBoard<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 执行主循环，调用exit方法，确保主循环安全退出</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7bd7d320c21446f09528f144af1d0c49.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1c35200d123c495f835fdcf25f5d4f8a.png\"/></p>\n<h5><a id=\"51_4264\"></a>51.日历控件</h5>\n<p>新建calendar_time文件夹，在calendar_time文件夹里新建MyCalendar.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n日历控件\nQCalendarWidget\n\"\"\"</span>\n<span class=\"token comment\"># 允许用户选择日期</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCalendar</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>MyCalendar<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 编写初始化方法，规范代码，初始化写在一个方法里</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 创建日历控件，全局的，在单击事件里面调用</span>\n        self<span class=\"token punctuation\">.</span>cal <span class=\"token operator\">=</span> QCalendarWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建label控件，用于显示当前选择的日期</span>\n        <span class=\"token comment\"># 这个label用绝对布局</span>\n        self<span class=\"token punctuation\">.</span>label <span class=\"token operator\">=</span> QLabel<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 显示当前日期</span>\n        date <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>cal<span class=\"token punctuation\">.</span>selectedDate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">(</span><span class=\"token string\">'yyyy-MM-dd dddd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 移动label到相应的位置</span>\n        self<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置允许显示最小日期</span>\n        self<span class=\"token punctuation\">.</span>cal<span class=\"token punctuation\">.</span>setMinimumDate<span class=\"token punctuation\">(</span>QDate<span class=\"token punctuation\">(</span><span class=\"token number\">1988</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置允许显示的最大日期</span>\n        self<span class=\"token punctuation\">.</span>cal<span class=\"token punctuation\">.</span>setMaximumDate<span class=\"token punctuation\">(</span>QDate<span class=\"token punctuation\">(</span><span class=\"token number\">2088</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 绑定信号 槽</span>\n        self<span class=\"token punctuation\">.</span>cal<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>showDate<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 以网格形式显示</span>\n        self<span class=\"token punctuation\">.</span>cal<span class=\"token punctuation\">.</span>setGridVisible<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 移动日历的位置  移动到左上角</span>\n        self<span class=\"token punctuation\">.</span>cal<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置窗口大小</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'日历演示'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 添加单击事件</span>\n    <span class=\"token comment\"># 槽</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">showDate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 显示当前选择的日期</span>\n        <span class=\"token comment\"># 方式一  直接在事件里面获取</span>\n        <span class=\"token comment\"># self.label.setText((date.toString('yyyy-MM-dd dddd')))</span>\n        <span class=\"token comment\"># 方式二   直接通过日历，里面有个selcetedDate的方法获取</span>\n        self<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>cal<span class=\"token punctuation\">.</span>selectedDate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd dddd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 防止其他脚本调用，只有单独运行，才会调用下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># app实例化，传参</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> MyCalendar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 进入主循环，调用exit方法，确保主循环安全退出</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\abf315f48c374c9aad8d02dd82121dd2.png\"/></p>\n<h5><a id=\"52_4343\"></a>52.输入各种风格的日期和时间</h5>\n<p>在calendar_time文件夹里新建DateTimeEdit1.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n输入各种风格的日期和时间\n\nQDateTimeEdit\n\"\"\"</span>\n<span class=\"token comment\"># 只想显示当前所设置的时间和日期</span>\n\n<span class=\"token keyword\">import</span> sys<span class=\"token punctuation\">,</span>math\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DateTimeEdit1</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>DateTimeEdit1<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 编写初始化方法，规范代码，初始化写在一个方法里</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'设置不同风格的日期和时间'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口尺寸</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">150</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建垂直布局</span>\n        layout <span class=\"token operator\">=</span> QVBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建QDateTimeEdit控件</span>\n        <span class=\"token comment\"># 第一个</span>\n        dateTimeEdit1 <span class=\"token operator\">=</span> QDateTimeEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 第二个可以传入当前的时间和日期</span>\n        dateTimeEdit2 <span class=\"token operator\">=</span> QDateTimeEdit<span class=\"token punctuation\">(</span>QDateTime<span class=\"token punctuation\">.</span>currentDateTime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建单独显示日期的控件</span>\n        <span class=\"token comment\"># 第三个</span>\n        dateEdit <span class=\"token operator\">=</span> QDateTimeEdit<span class=\"token punctuation\">(</span>QDate<span class=\"token punctuation\">.</span>currentDate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建单独显示时间的控件</span>\n        <span class=\"token comment\"># 第四个</span>\n        timeEdit <span class=\"token operator\">=</span> QDateTimeEdit<span class=\"token punctuation\">(</span>QTime<span class=\"token punctuation\">.</span>currentTime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 分别给这是四个控件设置显示日期或者时间的格式</span>\n        dateTimeEdit1<span class=\"token punctuation\">.</span>setDisplayFormat<span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss\"</span><span class=\"token punctuation\">)</span>\n        dateTimeEdit2<span class=\"token punctuation\">.</span>setDisplayFormat<span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy/MM/dd HH-mm-ss\"</span><span class=\"token punctuation\">)</span>\n\n        dateEdit<span class=\"token punctuation\">.</span>setDisplayFormat<span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy.MM.dd\"</span><span class=\"token punctuation\">)</span>\n        timeEdit<span class=\"token punctuation\">.</span>setDisplayFormat<span class=\"token punctuation\">(</span><span class=\"token string\">\"HH:mm:ss\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把控件添加到垂直布局里</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>dateTimeEdit1<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>dateTimeEdit2<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>dateEdit<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>timeEdit<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 应用于垂直布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 防止其他脚本调用，直接运行此脚本，才会调用下面的代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># app实例化，并传参</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> DateTimeEdit1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 进入主循环，调用exit方法，确保主循环安全退出</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\aa485792f75a4373a4c98ff86d5090fe.png\"/></p>\n<p>拓展：</p>\n<p>日期和时间控件的高级操作</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n输入各种风格的日期和时间\n\nQDateTimeEdit\n\"\"\"</span>\n<span class=\"token comment\"># 只想显示当前所设置的时间和日期</span>\n\n<span class=\"token keyword\">import</span> sys<span class=\"token punctuation\">,</span>math\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DateTimeEdit1</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>DateTimeEdit1<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 编写初始化方法，规范代码，初始化写在一个方法里</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'设置不同风格的日期和时间'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口尺寸</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">150</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建垂直布局</span>\n        layout <span class=\"token operator\">=</span> QVBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建QDateTimeEdit控件</span>\n        <span class=\"token comment\"># 第一个</span>\n        dateTimeEdit1 <span class=\"token operator\">=</span> QDateTimeEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 第二个可以传入当前的时间和日期</span>\n        dateTimeEdit2 <span class=\"token operator\">=</span> QDateTimeEdit<span class=\"token punctuation\">(</span>QDateTime<span class=\"token punctuation\">.</span>currentDateTime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建单独显示日期的控件</span>\n        <span class=\"token comment\"># 第三个</span>\n        dateEdit <span class=\"token operator\">=</span> QDateTimeEdit<span class=\"token punctuation\">(</span>QDate<span class=\"token punctuation\">.</span>currentDate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建单独显示时间的控件</span>\n        <span class=\"token comment\"># 第四个</span>\n        timeEdit <span class=\"token operator\">=</span> QDateTimeEdit<span class=\"token punctuation\">(</span>QTime<span class=\"token punctuation\">.</span>currentTime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建button控件，目的：通过点击button获取当前的时间</span>\n        self<span class=\"token punctuation\">.</span>btn <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'获取日期和时间'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 分别给这是四个控件设置显示日期或者时间的格式</span>\n        dateTimeEdit1<span class=\"token punctuation\">.</span>setDisplayFormat<span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss\"</span><span class=\"token punctuation\">)</span>\n        dateTimeEdit2<span class=\"token punctuation\">.</span>setDisplayFormat<span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy/MM/dd HH-mm-ss\"</span><span class=\"token punctuation\">)</span>\n\n        dateEdit<span class=\"token punctuation\">.</span>setDisplayFormat<span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy.MM.dd\"</span><span class=\"token punctuation\">)</span>\n        timeEdit<span class=\"token punctuation\">.</span>setDisplayFormat<span class=\"token punctuation\">(</span><span class=\"token string\">\"HH:mm:ss\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把控件添加到垂直布局里</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>dateTimeEdit1<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>dateTimeEdit2<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>dateEdit<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>timeEdit<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#   把拓展里的按钮添加到布局里面</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>btn<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 应用于垂直布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 拓展</span>\n        <span class=\"token comment\"># 给dateTimeEdit1设置最大最小值</span>\n        <span class=\"token comment\"># QDate.currentDate().addDays(-365) 表示回退当前时间的365天</span>\n        <span class=\"token comment\"># dateTimeEdit1.setMinimumDate(QDate.currentDate().addDays(-365))</span>\n        <span class=\"token comment\"># QDate.currentDate().addDays(365)   表示增加当前时间的365天</span>\n        <span class=\"token comment\"># dateTimeEdit1.setMinimumDate(QDate.currentDate().addDays(365))</span>\n\n        <span class=\"token comment\"># 给dateTimeEdit2添加日历控件</span>\n        dateTimeEdit2<span class=\"token punctuation\">.</span>setCalendarPopup<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把这三个槽都绑定到第一个控件上</span>\n        dateTimeEdit1<span class=\"token punctuation\">.</span>dateChanged<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>onDateChanged<span class=\"token punctuation\">)</span>\n        dateTimeEdit1<span class=\"token punctuation\">.</span>timeChanged<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>onTimeChanged<span class=\"token punctuation\">)</span>\n        dateTimeEdit1<span class=\"token punctuation\">.</span>dateTimeChanged<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>onDateTimeChanged<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 如何来获取设置的日期和时间</span>\n\n\n\n        <span class=\"token comment\"># 绑定 信号  槽</span>\n        self<span class=\"token punctuation\">.</span>btn<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>onButtonClick<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置当前时间为dateTimeEdit1的时间</span>\n        self<span class=\"token punctuation\">.</span>dateTimeEdit <span class=\"token operator\">=</span> dateTimeEdit1\n\n\n    <span class=\"token comment\"># 事件</span>\n    <span class=\"token comment\"># 日期变化  时间变化  日期时间变化</span>\n    <span class=\"token comment\"># 槽</span>\n\n    <span class=\"token comment\"># 日期变化</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">onDateChanged</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 时间变化</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">onTimeChanged</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 日期和时间变化</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">onDateTimeChanged</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>datetime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 添加单击的槽</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">onButtonClick</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 获取当前日期时间</span>\n        datetime <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dateTimeEdit<span class=\"token punctuation\">.</span>dateTime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 获得最大日期</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>dateTimeEdit<span class=\"token punctuation\">.</span>maximumDate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 获得最大日期和时间</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>dateTimeEdit<span class=\"token punctuation\">.</span>maximumDateTime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 获得最小日期</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>dateTimeEdit<span class=\"token punctuation\">.</span>minimumDate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 获得最小日期和时间</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>dateTimeEdit<span class=\"token punctuation\">.</span>minimumDateTime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n\n\n\n\n<span class=\"token comment\"># 防止其他脚本调用，直接运行此脚本，才会调用下面的代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># app实例化，并传参</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> DateTimeEdit1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 进入主循环，调用exit方法，确保主循环安全退出</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\817f76aeedde47f1bbbf99e9ff5e76cf.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\411ee7e5b1a249be97a340b30ecc3377.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fd5e15cb05444ddb94c42a4f68e5667a.png\"/></p>\n<h5><a id=\"53_4577\"></a>53.创建和使用菜单</h5>\n<p>在menu_toolbar_statusbar文件夹里新建Menu.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n创建和使用菜单\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> sys<span class=\"token punctuation\">,</span>math\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Menu</span><span class=\"token punctuation\">(</span>QMainWindow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Menu<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置窗口尺寸</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 获取菜单栏</span>\n        bar <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>menuBar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 给菜单栏添加 \"文件\"</span>\n        <span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> bar<span class=\"token punctuation\">.</span>addMenu<span class=\"token punctuation\">(</span><span class=\"token string\">\"文件\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给文件添加动作 \"新建\"</span>\n        <span class=\"token comment\"># 第一种添加方式</span>\n        <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>addAction<span class=\"token punctuation\">(</span><span class=\"token string\">\"新建\"</span><span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 第二种添加方式  通过QAction</span>\n        <span class=\"token comment\"># 添加动作 \"保存\"</span>\n        save <span class=\"token operator\">=</span> QAction<span class=\"token punctuation\">(</span><span class=\"token string\">\"保存\"</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给保存添加快捷键</span>\n        save<span class=\"token punctuation\">.</span>setShortcut<span class=\"token punctuation\">(</span><span class=\"token string\">\"Ctrl + S\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 把\"保存\"动作添加到\"文件\"下面</span>\n        <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>addAction<span class=\"token punctuation\">(</span>save<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把save触发连接槽</span>\n        save<span class=\"token punctuation\">.</span>triggered<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 给菜单栏添加\"编辑\"菜单</span>\n        edit <span class=\"token operator\">=</span> bar<span class=\"token punctuation\">.</span>addMenu<span class=\"token punctuation\">(</span><span class=\"token string\">\"Edit\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给\"编辑\"添加\"复制\"动作</span>\n        edit<span class=\"token punctuation\">.</span>addAction<span class=\"token punctuation\">(</span><span class=\"token string\">\"copy\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给\"编辑\"添加\"粘贴\"动作</span>\n        edit<span class=\"token punctuation\">.</span>addAction<span class=\"token punctuation\">(</span><span class=\"token string\">\"paste\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建\"退出\"动作</span>\n        quit <span class=\"token operator\">=</span>QAction<span class=\"token punctuation\">(</span><span class=\"token string\">\"Quit\"</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 把\"退出\"添加到\"文件\"下面</span>\n        <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>addAction<span class=\"token punctuation\">(</span>quit<span class=\"token punctuation\">)</span>\n\n\n    <span class=\"token comment\"># 给动作添加事件</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 直接运行此脚本，才会调用下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># app实例化，并传参</span>\n    app <span class=\"token operator\">=</span>   QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> Menu<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 进入主循环，调用exit方法，确保主循环安全退出</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<h5><a id=\"54_4651\"></a>54.创建和使用工具栏</h5>\n<p>在menu_toolbar_statusbar文件夹里新建Toolbar.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n创建和使用工具栏\n\n三种显示状态   显示图标  显示文本   显示图标和文本\n图标和文本的关系：上下  左右\n\n使用addToolBar添加\nself.addToolBar()   传参  传工具栏的名字    可以创建任意多个工具栏     会从左向右排列\n\n工具栏默认按钮：只显示图标，将文本作为悬停提示展示\n\"\"\"</span>\n<span class=\"token keyword\">import</span> sys<span class=\"token punctuation\">,</span>math\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Toolbar</span><span class=\"token punctuation\">(</span>QMainWindow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Toolbar<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'工具栏例子'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置尺寸大小</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建工具栏</span>\n        tb1 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>addToolBar<span class=\"token punctuation\">(</span><span class=\"token string\">\"File\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 往工具栏添加按钮，添加动作</span>\n        <span class=\"token comment\"># 添加图标，添加文本</span>\n        <span class=\"token comment\"># self  表示放在当前的窗口上</span>\n        <span class=\"token comment\"># 工具栏默认按钮：只显示图标，将文本作为悬停提示展示</span>\n        new <span class=\"token operator\">=</span> QAction<span class=\"token punctuation\">(</span>QIcon<span class=\"token punctuation\">(</span><span class=\"token string\">'../controls/images/5.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"new\"</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 添加new动作</span>\n        tb1<span class=\"token punctuation\">.</span>addAction<span class=\"token punctuation\">(</span>new<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 在工具栏添加第二个按钮</span>\n        <span class=\"token builtin\">open</span> <span class=\"token operator\">=</span> QAction<span class=\"token punctuation\">(</span>QIcon<span class=\"token punctuation\">(</span><span class=\"token string\">'../controls/images/4.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"open\"</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 添加open动作</span>\n        tb1<span class=\"token punctuation\">.</span>addAction<span class=\"token punctuation\">(</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 在工具栏添加第三个按钮</span>\n        save <span class=\"token operator\">=</span> QAction<span class=\"token punctuation\">(</span>QIcon<span class=\"token punctuation\">(</span><span class=\"token string\">'../controls/images/3.ico'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"save\"</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span>\n        tb1<span class=\"token punctuation\">.</span>addAction<span class=\"token punctuation\">(</span>save<span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 设置既显示图标又显示文本</span>\n        <span class=\"token comment\"># 文本在图标的右侧显示</span>\n        <span class=\"token comment\"># tb1.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)</span>\n        <span class=\"token comment\"># 文本在图标的下侧显示</span>\n        tb1<span class=\"token punctuation\">.</span>setToolButtonStyle<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>ToolButtonTextUnderIcon<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 只显示文本</span>\n        <span class=\"token comment\"># tb1.setToolButtonStyle(Qt.ToolButtonTextOnly)</span>\n        <span class=\"token comment\"># 默认情况下只显示图标</span>\n\n\n        <span class=\"token comment\"># 给tb1添加动作 用来显示按了哪一个按钮</span>\n        <span class=\"token comment\"># 绑定信号 槽</span>\n        tb1<span class=\"token punctuation\">.</span>actionTriggered<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>toolbtnpressed<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 让有的按钮只显示图标，有的按钮只显示文本</span>\n        <span class=\"token comment\"># 通过创建多个工具条，一是可以将同类别的控件放在一起，二是可以控制每个工具栏相关的属性</span>\n\n        <span class=\"token comment\"># 创建工具栏</span>\n        tb2 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>addToolBar<span class=\"token punctuation\">(</span><span class=\"token string\">\"File1\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 往工具栏添加动作</span>\n        new1 <span class=\"token operator\">=</span> QAction<span class=\"token punctuation\">(</span>QIcon<span class=\"token punctuation\">(</span><span class=\"token string\">'../controls/images/5.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"new1\"</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 添加new1动作</span>\n        tb2<span class=\"token punctuation\">.</span>addAction<span class=\"token punctuation\">(</span>new1<span class=\"token punctuation\">)</span>\n        tb2<span class=\"token punctuation\">.</span>setToolButtonStyle<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>ToolButtonTextUnderIcon<span class=\"token punctuation\">)</span>\n        tb2<span class=\"token punctuation\">.</span>actionTriggered<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>toolbtnpressed<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 槽方法</span>\n    <span class=\"token comment\"># 显示按下的哪个按钮</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">toolbtnpressed</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"按下的工具栏按钮是\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 直接运行此脚本，才会执行下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># app实例化，并传参</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> Toolbar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 进入主循环，调用exit方法 ，确保主循环安全退出</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\97de3430be724cf7adc601ae1716353d.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f6b99921e9004bcabe4e6d2328a8a410.png\"/></p>\n<h5><a id=\"55_4756\"></a>55.创建和使用状态栏</h5>\n<p>在menu_toolbar_statusbar文件夹里新建StatusBar.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n创建和使用状态栏\n\n用于显示状态信息\n\n\"\"\"</span>\n<span class=\"token comment\"># 添加菜单 点击菜单会在状态栏里面显示五秒的信息，然后自动的消失</span>\n<span class=\"token keyword\">import</span> sys<span class=\"token punctuation\">,</span>math\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">StatusBar</span><span class=\"token punctuation\">(</span>QMainWindow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>StatusBar<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 编写初始化的方法，规范代码</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'状态栏演示'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置尺寸</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建状态栏</span>\n        self<span class=\"token punctuation\">.</span>statusBar <span class=\"token operator\">=</span> QStatusBar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置状态</span>\n        self<span class=\"token punctuation\">.</span>setStatusBar<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>statusBar<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 获得菜单栏</span>\n        bar <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>menuBar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 在菜单栏里面添加\"文件\"菜单</span>\n        <span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> bar<span class=\"token punctuation\">.</span>addMenu<span class=\"token punctuation\">(</span><span class=\"token string\">\"File\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给文件菜单添加动作  给\"文件\"菜单添加子菜单</span>\n        <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>addAction<span class=\"token punctuation\">(</span><span class=\"token string\">\"show\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 添加触发的动作</span>\n        <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>triggered<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>processTrigger<span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 放置一个中心控件</span>\n        self<span class=\"token punctuation\">.</span>setCentralWidget<span class=\"token punctuation\">(</span>QTextEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 槽方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">processTrigger</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> q<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"show\"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 文本显示五秒钟，自动关闭</span>\n            self<span class=\"token punctuation\">.</span>statusBar<span class=\"token punctuation\">.</span>showMessage<span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"菜单被点击了\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 防止别的脚本调用，只有单独执行此脚本时，才会调用下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># app实例化，并传参</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> StatusBar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 执行主循环，调用exit方法，确保主循环安全退出</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a1b9e700370b4b9a9266614ae891d6ee.png\"/></p>\n<h5><a id=\"56_4825\"></a>56.使用打印机</h5>\n<p>如何将数据输出到打印机</p>\n<p>新建printer文件，在printer文件夹里新建PrintSupport.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n使用打印机\n如何将数据输出到打印机\nQtPrintSupport\n以图像的形式输出\n\"\"\"</span>\n<span class=\"token comment\"># 创建button,点击button,将button里面的内容输出到打印机</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5 <span class=\"token keyword\">import</span> QtGui<span class=\"token punctuation\">,</span>QtWidgets<span class=\"token punctuation\">,</span>QtPrintSupport\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PrintSupport</span><span class=\"token punctuation\">(</span>QMainWindow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>PrintSupport<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置位置</span>\n        self<span class=\"token punctuation\">.</span>setGeometry<span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建button控件</span>\n        self<span class=\"token punctuation\">.</span>button <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'打印QTextEdit控件中的内容'</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置按钮的位置</span>\n        self<span class=\"token punctuation\">.</span>button<span class=\"token punctuation\">.</span>setGeometry<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">260</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建文本控件</span>\n        self<span class=\"token punctuation\">.</span>editor <span class=\"token operator\">=</span> QTextEdit<span class=\"token punctuation\">(</span><span class=\"token string\">'默认文本'</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#设置文本控件的位置</span>\n        self<span class=\"token punctuation\">.</span>editor<span class=\"token punctuation\">.</span>setGeometry<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span><span class=\"token number\">260</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 绑定信号 槽</span>\n        self<span class=\"token punctuation\">.</span>button<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">)</span>\n\n\n    <span class=\"token comment\"># 槽方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 创建打印对象</span>\n        printer <span class=\"token operator\">=</span> QtPrintSupport<span class=\"token punctuation\">.</span>QPrinter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 获得画</span>\n        painter <span class=\"token operator\">=</span> QtGui<span class=\"token punctuation\">.</span>QPainter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把数据绘制到printer里面</span>\n        <span class=\"token comment\"># 将绘制的目标重定向到打印机</span>\n        painter<span class=\"token punctuation\">.</span>begin<span class=\"token punctuation\">(</span>printer<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 获得editor屏幕的内容</span>\n        screen <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>editor<span class=\"token punctuation\">.</span>grab<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置绘制位置</span>\n        painter<span class=\"token punctuation\">.</span>drawPixmap<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>screen<span class=\"token punctuation\">)</span>\n        painter<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pass\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 直接运行该脚本，才会执行下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QtWidgets<span class=\"token punctuation\">.</span>QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    gui <span class=\"token operator\">=</span> PrintSupport<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    gui<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示:</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7f6e5ab56e9e4972a7759463c26ae1b4.png\"/></p>\n<h5><a id=\"57_4895\"></a>57.显示打印对话框</h5>\n<p>在printer文件夹里新建PrintDialog.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n显示打印对话框\n\"\"\"</span>\n\n<span class=\"token comment\"># 放置文本对话框，打开文档，显示页面设置对话框和打印文档对象框</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> QWidget<span class=\"token punctuation\">,</span>QApplication<span class=\"token punctuation\">,</span>QPushButton<span class=\"token punctuation\">,</span>QTextEdit<span class=\"token punctuation\">,</span>QFileDialog<span class=\"token punctuation\">,</span>QDialog\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtPrintSupport <span class=\"token keyword\">import</span> QPageSetupDialog<span class=\"token punctuation\">,</span>QPrintDialog<span class=\"token punctuation\">,</span>QPrinter\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PrintDialog</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>PrintDialog<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>printer <span class=\"token operator\">=</span> QPrinter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置位置</span>\n        self<span class=\"token punctuation\">.</span>setGeometry<span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'打印对话框'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建文本框组件</span>\n        self<span class=\"token punctuation\">.</span>editor <span class=\"token operator\">=</span> QTextEdit<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置位置</span>\n        self<span class=\"token punctuation\">.</span>editor<span class=\"token punctuation\">.</span>setGeometry<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">270</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建button1控件</span>\n        <span class=\"token comment\"># 打开按钮</span>\n        self<span class=\"token punctuation\">.</span>openButton <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'打开文件'</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置位置</span>\n        self<span class=\"token punctuation\">.</span>openButton<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token number\">350</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建button2控件</span>\n        <span class=\"token comment\"># 设置按钮</span>\n        self<span class=\"token punctuation\">.</span>settingsButton <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'打印设置'</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置位置</span>\n        self<span class=\"token punctuation\">.</span>settingsButton<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token number\">350</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建button3控件</span>\n        <span class=\"token comment\"># 打印按钮</span>\n        self<span class=\"token punctuation\">.</span>printButton <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'打印文档'</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置位置</span>\n        self<span class=\"token punctuation\">.</span>printButton<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token number\">350</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 绑定信号 槽</span>\n        self<span class=\"token punctuation\">.</span>openButton<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>openFile<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>settingsButton<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>showSettingDialog<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>printButton<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>showPrintDialog<span class=\"token punctuation\">)</span>\n\n\n    <span class=\"token comment\"># 槽方法</span>\n    <span class=\"token comment\"># 打开文件</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">openFile</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        fname <span class=\"token operator\">=</span> QFileDialog<span class=\"token punctuation\">.</span>getOpenFileName<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span><span class=\"token string\">'打开文本文件'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'./'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> fname<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>fname<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span>encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">,</span>errors<span class=\"token operator\">=</span><span class=\"token string\">'ignore'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>editor<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 显示打印设置对话框</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">showSettingDialog</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        printDialog <span class=\"token operator\">=</span> QPageSetupDialog<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>printer<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span>\n        printDialog<span class=\"token punctuation\">.</span><span class=\"token keyword\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 显示打印对话框</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">showPrintDialog</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        printdialog <span class=\"token operator\">=</span> QPrintDialog<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>printer<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> QDialog<span class=\"token punctuation\">.</span>Accepted <span class=\"token operator\">==</span> printdialog<span class=\"token punctuation\">.</span><span class=\"token keyword\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>editor<span class=\"token punctuation\">.</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>printer<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    gui <span class=\"token operator\">=</span> PrintDialog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    gui<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f60f963766414d1490c4b5ec4198052c.png\"/></p>\n<h5><a id=\"58QTableView_4983\"></a>58.显示二维表数据(QTableView控件)</h5>\n<p>新建table_tree文件夹，在table_tree文件夹里新建TableView.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n显示二维表数据(QTableView控件)\n\n对于QTableView控件，它的数据源是Model\n\n需要创建QTableView实例和一个数据源(Model),然后将两者关联\nMVC：Model  Viewer  Controller\nMVC的目的是将后端的数据和前端页面的耦合度降低\n\n\n\"\"\"</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TableView</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>TableView<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">\"QTableView表格视图控件演示\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口尺寸</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建QStandardItemModel对象  4行3列</span>\n        self<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> QStandardItemModel<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置字段</span>\n        self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>setHorizontalHeaderLabels<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'姓名'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'年龄'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建QTableView控件</span>\n        self<span class=\"token punctuation\">.</span>tableview <span class=\"token operator\">=</span> QTableView<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 关联模型</span>\n        self<span class=\"token punctuation\">.</span>tableview<span class=\"token punctuation\">.</span>setModel<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 添加数据</span>\n\n        item11 <span class=\"token operator\">=</span> QStandardItem<span class=\"token punctuation\">(</span><span class=\"token string\">'10'</span><span class=\"token punctuation\">)</span>\n        itme12 <span class=\"token operator\">=</span> QStandardItem<span class=\"token punctuation\">(</span><span class=\"token string\">'杰克'</span><span class=\"token punctuation\">)</span>\n        item13 <span class=\"token operator\">=</span> QStandardItem<span class=\"token punctuation\">(</span><span class=\"token string\">'18'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#  第一行第一列</span>\n        self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>item11<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#  第一行第二列</span>\n        self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>itme12<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#  第一行第三列</span>\n        self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>item13<span class=\"token punctuation\">)</span>\n\n\n\n        item31 <span class=\"token operator\">=</span> QStandardItem<span class=\"token punctuation\">(</span><span class=\"token string\">'99'</span><span class=\"token punctuation\">)</span>\n        itme32 <span class=\"token operator\">=</span> QStandardItem<span class=\"token punctuation\">(</span><span class=\"token string\">'酒桶'</span><span class=\"token punctuation\">)</span>\n        item33 <span class=\"token operator\">=</span> QStandardItem<span class=\"token punctuation\">(</span><span class=\"token string\">'21'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#  第一行第一列</span>\n        self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> item31<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#  第一行第二列</span>\n        self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> itme32<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#  第一行第三列</span>\n        self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> item33<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建垂直布局</span>\n        layout <span class=\"token operator\">=</span> QVBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把控件添加到布局里</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>tableview<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 应用于垂直布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    table <span class=\"token operator\">=</span> TableView<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    table<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\43bcc951933a485ab1b8e9fd2bab1daf.png\"/></p>\n<h5><a id=\"59QListView_5068\"></a>59.显示列表数据(QListView控件)</h5>\n<p>在table_tree文件夹里新建ListView.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n显示列表数据 (QListView控件)\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> QApplication<span class=\"token punctuation\">,</span>QWidget<span class=\"token punctuation\">,</span>QVBoxLayout<span class=\"token punctuation\">,</span>QListView<span class=\"token punctuation\">,</span>QMessageBox\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> QStringListModel\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ListViewDemo</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self <span class=\"token punctuation\">,</span>parent <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>ListViewDemo<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">\"QListView例子\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口尺寸</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">270</span><span class=\"token punctuation\">)</span>\n\n\n\n        <span class=\"token comment\"># 创建垂直布局</span>\n        layout <span class=\"token operator\">=</span> QVBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建QListView</span>\n        listview <span class=\"token operator\">=</span> QListView<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建字符串列表的模型</span>\n        <span class=\"token comment\"># model相当于一个数据源</span>\n        listModel <span class=\"token operator\">=</span> QStringListModel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建数据源</span>\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">list</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"列表项1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"列表项2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"列表项3\"</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\"># 把模型和列表绑定</span>\n        listModel<span class=\"token punctuation\">.</span>setStringList<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span>\n        listview<span class=\"token punctuation\">.</span>setModel<span class=\"token punctuation\">(</span>listModel<span class=\"token punctuation\">)</span>\n\n        listview<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把控件添加到布局里</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>listview<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 应用于垂直布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n\n\n    <span class=\"token comment\"># 槽</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">clicked</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        QMessageBox<span class=\"token punctuation\">.</span>information<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span><span class=\"token string\">\"QListView\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"您选择了：\"</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">.</span>row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    win <span class=\"token operator\">=</span> ListViewDemo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    win<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\553ba3f485b14889acaf38e2f9d0137e.png\"/></p>\n<h5><a id=\"60QListWidget_5138\"></a>60.扩展的列表控件(QListWidget)</h5>\n<p>在table_tree文件夹里新建ListWidget.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n扩展的列表控件(QListWidget)\nQListWidget是QListView的子类\n支持MVC 和 VMC\n\"\"\"</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ListWidgetDemo</span><span class=\"token punctuation\">(</span>QMainWindow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>parent<span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>ListWidgetDemo<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'QListWidget 例子'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口的尺寸</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">270</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建QListWidget控件</span>\n        self<span class=\"token punctuation\">.</span>listwidget <span class=\"token operator\">=</span> QListWidget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置的尺寸</span>\n        <span class=\"token comment\"># self.listwidget.resize(300,120)</span>\n\n\n        <span class=\"token comment\"># 给QListWidget控件添加数据项</span>\n        self<span class=\"token punctuation\">.</span>listwidget<span class=\"token punctuation\">.</span>addItem<span class=\"token punctuation\">(</span><span class=\"token string\">\"item1\"</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>listwidget<span class=\"token punctuation\">.</span>addItem<span class=\"token punctuation\">(</span><span class=\"token string\">\"item2\"</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>listwidget<span class=\"token punctuation\">.</span>addItem<span class=\"token punctuation\">(</span><span class=\"token string\">\"item3\"</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>listwidget<span class=\"token punctuation\">.</span>addItem<span class=\"token punctuation\">(</span><span class=\"token string\">\"item4\"</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>listwidget<span class=\"token punctuation\">.</span>addItem<span class=\"token punctuation\">(</span><span class=\"token string\">\"item5\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 给QListWidget控件设置标题</span>\n        self<span class=\"token punctuation\">.</span>listwidget<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">\"demo\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设为中心窗口</span>\n        self<span class=\"token punctuation\">.</span>setCentralWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>listwidget<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 连接信号 槽</span>\n        self<span class=\"token punctuation\">.</span>listwidget<span class=\"token punctuation\">.</span>itemClicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">)</span>\n\n\n    <span class=\"token comment\"># 槽方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">clicked</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>Index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        QMessageBox<span class=\"token punctuation\">.</span>information<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span><span class=\"token string\">\"QListWidget\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"您选择了：\"</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>listwidget<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>listwidget<span class=\"token punctuation\">.</span>row<span class=\"token punctuation\">(</span>Index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    win <span class=\"token operator\">=</span> ListWidgetDemo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    win<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fc375ce34ee54da7899aa678862b198c.png\"/></p>\n<h5><a id=\"61QTableWidget_5200\"></a>61.扩展的表格控件(QTableWidget)</h5>\n<p>在table_tree文件夹里新建TableWidget.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n扩展的表格控件(QTableWidget)\n是在QTableView上面进行扩展\n\n每一个Cell(单元格)是一个QTableWidgetItem\n\"\"\"</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">,</span> QTableWidget<span class=\"token punctuation\">,</span> QHBoxLayout<span class=\"token punctuation\">,</span> QApplication<span class=\"token punctuation\">,</span> QTableWidgetItem<span class=\"token punctuation\">,</span> QAbstractItemView<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TableWidgetDemo</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>TableWidgetDemo<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">\"QTableWidget演示\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口尺寸</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">430</span><span class=\"token punctuation\">,</span><span class=\"token number\">230</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建一个水平布局</span>\n        layout <span class=\"token operator\">=</span> QHBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建一个QTableWidget控件</span>\n        tableWidget <span class=\"token operator\">=</span> QTableWidget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置行数</span>\n        tableWidget<span class=\"token punctuation\">.</span>setRowCount<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置列数</span>\n        tableWidget<span class=\"token punctuation\">.</span>setColumnCount<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把控件添加到布局里</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>tableWidget<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设水平表头</span>\n        tableWidget<span class=\"token punctuation\">.</span>setHorizontalHeaderLabels<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"姓名\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"年龄\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"籍贯\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建第一个QTableWidgetItem对象</span>\n        nameItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 把nameItem放置在tablewidget里面</span>\n        <span class=\"token comment\"># 放置在第一行第一列</span>\n        tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>nameItem<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建第二个QTableWidgetItem对象</span>\n        ageItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">\"22\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 把nameItem放置在tablewidget里面</span>\n        <span class=\"token comment\"># 放置在第一行第二列</span>\n        tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> ageItem<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建第三个QTableWidgetItem对象</span>\n        jiguanItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">\"天津\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 把nameItem放置在tablewidget里面</span>\n        <span class=\"token comment\"># 放置在第一行第三列</span>\n        tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> jiguanItem<span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 禁止编辑</span>\n        tableWidget<span class=\"token punctuation\">.</span>setEditTriggers<span class=\"token punctuation\">(</span>QAbstractItemView<span class=\"token punctuation\">.</span>NoEditTriggers<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 让光标整行显示</span>\n        tableWidget<span class=\"token punctuation\">.</span>setSelectionBehavior<span class=\"token punctuation\">(</span>QAbstractItemView<span class=\"token punctuation\">.</span>SelectRows<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 调整列  根据内容调整</span>\n        tableWidget<span class=\"token punctuation\">.</span>resizeColumnsToContents<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 调整行  根据内容调整</span>\n        tableWidget<span class=\"token punctuation\">.</span>resizeRowsToContents<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 隐藏水平的头</span>\n        <span class=\"token comment\"># tableWidget.horizontalHeader().setVisible(False)</span>\n        <span class=\"token comment\"># 隐藏垂直的头</span>\n        <span class=\"token comment\"># tableWidget.verticalHeader().setVisible(False)</span>\n\n        <span class=\"token comment\"># 设置垂直的头</span>\n        tableWidget<span class=\"token punctuation\">.</span>setVerticalHeaderLabels<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 隐藏表格线</span>\n        tableWidget<span class=\"token punctuation\">.</span>setShowGrid<span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 应用于水平布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    example <span class=\"token operator\">=</span> TableWidgetDemo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    example<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\01a44c136e5b47cb9cbd4b39b5bf2a6f.png\"/></p>\n<h5><a id=\"62_5302\"></a>62.在单元格中放置控件</h5>\n<p>在table_tree文件夹里新建PlaceControlInCell.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n在单元格放置控件\nsetItem：将文本放到单元格中\nsetCellWidget:将控件放到单元格\nsetStyleSheet:设置控件的样式(QSS)\n\n\"\"\"</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">,</span>QTableWidget<span class=\"token punctuation\">,</span>QHBoxLayout<span class=\"token punctuation\">,</span>QApplication<span class=\"token punctuation\">,</span>QTableWidgetItem<span class=\"token punctuation\">,</span>QComboBox<span class=\"token punctuation\">,</span>QPushButton<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PlaceControlInCell</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>PlaceControlInCell<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">\"在单元格中放置控件\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口尺寸</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">430</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建水平布局</span>\n        layout <span class=\"token operator\">=</span> QHBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建一个QTableWiddget控件</span>\n        tableWidget <span class=\"token operator\">=</span> QTableWidget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 为QTableWiddget指定行</span>\n        tableWidget<span class=\"token punctuation\">.</span>setRowCount<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 为QTableWiddget指定列</span>\n        tableWidget<span class=\"token punctuation\">.</span>setColumnCount<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把控件添加到布局里</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>tableWidget<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 为 tableWidget 添加表格的头</span>\n        tableWidget<span class=\"token punctuation\">.</span>setHorizontalHeaderLabels<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'姓名'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'性别'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'体重（kg）'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建 QTableWidgetItem</span>\n        <span class=\"token comment\"># 放置文本</span>\n        textItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">'小明'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把文本项添加到tablewidget里面</span>\n        <span class=\"token comment\"># setItem 一般三个参数，行 列 传哪</span>\n        <span class=\"token comment\"># 将这个文本放到第一行第一列</span>\n        tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>textItem<span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 创建QComboBox对象</span>\n        combox <span class=\"token operator\">=</span> QComboBox<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给combox添加两个选项</span>\n        combox<span class=\"token punctuation\">.</span>addItem<span class=\"token punctuation\">(</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">)</span>\n        combox<span class=\"token punctuation\">.</span>addItem<span class=\"token punctuation\">(</span><span class=\"token string\">'女'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># QSS  类似于web里面的CSS  Qt StyleSheet</span>\n        <span class=\"token comment\"># 设置所有的combox控件，让它的边距是3px</span>\n        combox<span class=\"token punctuation\">.</span>setStyleSheet<span class=\"token punctuation\">(</span><span class=\"token string\">'QComboBox{margin:3px};'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 在单元格放置控件</span>\n        <span class=\"token comment\"># 防止第一行第二列</span>\n        tableWidget<span class=\"token punctuation\">.</span>setCellWidget<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>combox<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建一个button组件</span>\n        modifyButton <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'修改'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 默认是按下状态</span>\n        modifyButton<span class=\"token punctuation\">.</span>setDown<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 使用QSS设置样式  设置所有的QPushButton控件，让它的边距是3px</span>\n        modifyButton<span class=\"token punctuation\">.</span>setStyleSheet<span class=\"token punctuation\">(</span><span class=\"token string\">'QPushButton{margin:3px};'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 在单元格放置控件</span>\n        tableWidget<span class=\"token punctuation\">.</span>setCellWidget<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>modifyButton<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 应用于水平布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    example  <span class=\"token operator\">=</span>PlaceControlInCell<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    example<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\493d8cf41a164c688ebccd0cc42467e9.png\"/></p>\n<h5><a id=\"63_5391\"></a>63.在表格中快速定位到特定的样式</h5>\n<p>在table_tree文件夹里新建DataLocation.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n在表格中快速定位到特定的样式\n\n1. 数据的定位  findItems 返回一个列表   如果没查到，列表为空\n2.如果找到了满足条件的单元格，会定位到单元格所在的行 setSliderPosition(row)\n\n# 三个步骤\n1.在表格里面显示很多的数据\n2.通过findItems来找到所有满足条件的单元格\n3.通过setSliderPosition(row)定位到满足条件的这一行\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> sys\n\n<span class=\"token keyword\">from</span> PyQt5 <span class=\"token keyword\">import</span> QtCore\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> QColor<span class=\"token punctuation\">,</span>QBrush\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DataLocation</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>DataLocation<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'QTableWidget 例子'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口尺寸</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">600</span><span class=\"token punctuation\">,</span><span class=\"token number\">800</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建水平布局</span>\n        layout <span class=\"token operator\">=</span> QHBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建QTableWidget控件</span>\n        tableWidget <span class=\"token operator\">=</span> QTableWidget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给tableWidget设置行</span>\n        tableWidget<span class=\"token punctuation\">.</span>setRowCount<span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#给tableWidget设置列</span>\n        tableWidget<span class=\"token punctuation\">.</span>setColumnCount<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 将控件添加到布局里</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>tableWidget<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 对行循环 对列循环</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># 得到每个单元格的内容</span>\n                itemContent <span class=\"token operator\">=</span> <span class=\"token string\">'(%d,%d)'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span>\n                <span class=\"token comment\"># 把内容放到表格中</span>\n                tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>QTableWidgetItem<span class=\"token punctuation\">(</span>itemContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 搜索满足条件的Cell</span>\n        text <span class=\"token operator\">=</span> <span class=\"token string\">'(13,1)'</span>\n        <span class=\"token comment\"># 精确搜索</span>\n        items <span class=\"token operator\">=</span> tableWidget<span class=\"token punctuation\">.</span>findItems<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span>QtCore<span class=\"token punctuation\">.</span>Qt<span class=\"token punctuation\">.</span>MatchExactly<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            items <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n            <span class=\"token comment\"># 设置背景色</span>\n            items<span class=\"token punctuation\">.</span>setBackground<span class=\"token punctuation\">(</span>QBrush<span class=\"token punctuation\">(</span>QColor<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            items<span class=\"token punctuation\">.</span>setForeground<span class=\"token punctuation\">(</span>QBrush<span class=\"token punctuation\">(</span>QColor<span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># 获得当前项所在的行</span>\n            row <span class=\"token operator\">=</span> items<span class=\"token punctuation\">.</span>row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 定位到指定的行</span>\n            <span class=\"token comment\"># verticalScrollBar 获得滚动条</span>\n            tableWidget<span class=\"token punctuation\">.</span>verticalScrollBar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setSliderPosition<span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 搜索满足条件的Cell</span>\n        text <span class=\"token operator\">=</span> <span class=\"token string\">'(1'</span>\n        <span class=\"token comment\"># MatchStartsWit 以..开头</span>\n        items <span class=\"token operator\">=</span> tableWidget<span class=\"token punctuation\">.</span>findItems<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> QtCore<span class=\"token punctuation\">.</span>Qt<span class=\"token punctuation\">.</span>MatchStartsWith<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            items <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n            <span class=\"token comment\"># 设置背景色</span>\n            items<span class=\"token punctuation\">.</span>setBackground<span class=\"token punctuation\">(</span>QBrush<span class=\"token punctuation\">(</span>QColor<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            items<span class=\"token punctuation\">.</span>setForeground<span class=\"token punctuation\">(</span>QBrush<span class=\"token punctuation\">(</span>QColor<span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># 获得当前项所在的行</span>\n            row <span class=\"token operator\">=</span> items<span class=\"token punctuation\">.</span>row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 定位到指定的行</span>\n            <span class=\"token comment\"># verticalScrollBar 获得滚动条</span>\n            tableWidget<span class=\"token punctuation\">.</span>verticalScrollBar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setSliderPosition<span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 应用于布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># app实例化 传参</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    example <span class=\"token operator\">=</span> DataLocation<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    example<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 进入主循环</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e4e8845b92ec4a7ea2d317ec0fc277ac.png\"/></p>\n<h5><a id=\"64_5497\"></a>64.设置单元格字体和颜色</h5>\n<p>在table_tree文件夹里新建CellFontAndColor.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n设置单元格字体和颜色\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">,</span>QTableWidget<span class=\"token punctuation\">,</span>QHBoxLayout<span class=\"token punctuation\">,</span>QApplication<span class=\"token punctuation\">,</span>QTableWidgetItem<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> QBrush<span class=\"token punctuation\">,</span>QColor<span class=\"token punctuation\">,</span>QFont\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CellFontAndColor</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>CellFontAndColor<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">\"设置单元格字体和颜色\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口的尺寸</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">600</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建水平布局</span>\n        layout <span class=\"token operator\">=</span> QHBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建QTableWidget控件</span>\n        tableWidget <span class=\"token operator\">=</span> QTableWidget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置tableWidget的行</span>\n        tableWidget<span class=\"token punctuation\">.</span>setRowCount<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置tableWidget的列</span>\n        tableWidget<span class=\"token punctuation\">.</span>setColumnCount<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把控件放置在布局里</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>tableWidget<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设水平表头</span>\n        tableWidget<span class=\"token punctuation\">.</span>setHorizontalHeaderLabels<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'姓名'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'性别'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'体重(kg)'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 创建QTableWidgetItem控件</span>\n        newItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">'水手'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 字号 字体</span>\n        newItem<span class=\"token punctuation\">.</span>setFont<span class=\"token punctuation\">(</span>QFont<span class=\"token punctuation\">(</span><span class=\"token string\">'Times'</span><span class=\"token punctuation\">,</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span>QFont<span class=\"token punctuation\">.</span>Black<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置字颜色</span>\n        newItem<span class=\"token punctuation\">.</span>setForeground<span class=\"token punctuation\">(</span>QBrush<span class=\"token punctuation\">(</span>QColor<span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 添加到第一行第一列</span>\n        tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>newItem<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建QTableWidgetItem控件</span>\n        newItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">'大海'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置字的颜色</span>\n        newItem<span class=\"token punctuation\">.</span>setForeground<span class=\"token punctuation\">(</span>QBrush<span class=\"token punctuation\">(</span>QColor<span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置背景色</span>\n        newItem<span class=\"token punctuation\">.</span>setBackground<span class=\"token punctuation\">(</span>QBrush<span class=\"token punctuation\">(</span>QColor<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">220</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 添加到第一行第二列</span>\n        tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>newItem<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建QTableWidgetItem控件</span>\n        newItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">'你好'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置字的颜色</span>\n        newItem<span class=\"token punctuation\">.</span>setFont<span class=\"token punctuation\">(</span>QFont<span class=\"token punctuation\">(</span><span class=\"token string\">'Times'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> QFont<span class=\"token punctuation\">.</span>Black<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        newItem<span class=\"token punctuation\">.</span>setForeground<span class=\"token punctuation\">(</span>QBrush<span class=\"token punctuation\">(</span>QColor<span class=\"token punctuation\">(</span><span class=\"token number\">125</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置背景色</span>\n        newItem<span class=\"token punctuation\">.</span>setBackground<span class=\"token punctuation\">(</span>QBrush<span class=\"token punctuation\">(</span>QColor<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 添加到第一行第二列</span>\n        tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> newItem<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 应用于水平布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    example <span class=\"token operator\">=</span> CellFontAndColor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    example<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8afccd66432841208ec65dd47d1a20f5.png\"/></p>\n<h5><a id=\"65_5583\"></a>65.按列排序</h5>\n<p>在table_tree文件夹里新建ColumnSort.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n按列排序\n\n1.按那一列排序\n2.排序类型  升序或降序\n\nsortItems(columnIdex,orderType)\n\"\"\"</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ColumnSort</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>ColumnSort<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'按列排序'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口尺寸</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">600</span><span class=\"token punctuation\">,</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建垂直布局</span>\n        layout <span class=\"token operator\">=</span> QVBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建QTableWdiget控件</span>\n        self<span class=\"token punctuation\">.</span>tableWidget  <span class=\"token operator\">=</span> QTableWidget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置行数</span>\n        self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>setRowCount<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置列数</span>\n        self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>setColumnCount<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把控件添加到布局里</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置水平表头</span>\n        self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>setHorizontalHeaderLabels<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'姓名'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'性别'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'体重(kg)'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建QTableWidgetItem控件</span>\n        newItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 添加到第一行第一列</span>\n        self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>newItem<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建QTableWidgetItem控件</span>\n        newItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 添加到第一行第二列</span>\n        self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> newItem<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建QTableWidgetItem控件</span>\n        newItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">'178'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 添加到第一行第三列</span>\n        self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> newItem<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建QTableWidgetItem控件</span>\n        newItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 添加到第二行第一列</span>\n        self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> newItem<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建QTableWidgetItem控件</span>\n        newItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 添加到第二行第二列</span>\n        self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> newItem<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建QTableWidgetItem控件</span>\n        newItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">'172'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 添加到第二行第三列</span>\n        self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> newItem<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建QTableWidgetItem控件</span>\n        newItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">'花花'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 添加到第三行第一列</span>\n        self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> newItem<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建QTableWidgetItem控件</span>\n        newItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">'女'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 添加到第三行第二列</span>\n        self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> newItem<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建QTableWidgetItem控件</span>\n        newItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">'168'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 添加到第三行第三列</span>\n        self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> newItem<span class=\"token punctuation\">)</span>\n\n       <span class=\"token comment\"># 添加button按钮</span>\n        self<span class=\"token punctuation\">.</span>button <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'排序'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 绑定 信号 槽</span>\n        self<span class=\"token punctuation\">.</span>button<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>order<span class=\"token punctuation\">)</span>\n\n       <span class=\"token comment\"># 把控件放到布局里</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>button<span class=\"token punctuation\">)</span>\n\n       <span class=\"token comment\"># 设置当前的排序类型   降序排列</span>\n        self<span class=\"token punctuation\">.</span>orderType <span class=\"token operator\">=</span> Qt<span class=\"token punctuation\">.</span>DescendingOrder\n\n        <span class=\"token comment\"># 应用于布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 槽方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 如果当前排序是降序，则改为升序</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>orderType <span class=\"token operator\">==</span> Qt<span class=\"token punctuation\">.</span>DescendingOrder<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>orderType <span class=\"token operator\">=</span> Qt<span class=\"token punctuation\">.</span>AscendigOrder\n\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 如果是升序，改成降序</span>\n            self<span class=\"token punctuation\">.</span>orderType <span class=\"token operator\">=</span> Qt<span class=\"token punctuation\">.</span>DescendingOrder\n        <span class=\"token comment\"># 排序</span>\n        self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>sortItems<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>orderType<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    main <span class=\"token operator\">=</span> ColumnSort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建主程序</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7dee4ca63da94212bd4e23db60cc2447.png\"/></p>\n<p>ps:windows上，因为DescendingOrder方法问题，只能显示上图效果，点击排序按钮后，退出。待后续解决。</p>\n<h5><a id=\"66_5715\"></a>66.设置单元格的文本对齐方式</h5>\n<p>在table_tree文件夹里新建CellTextAlignment.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n设置单元格的文本对齐方式\n\n使用setTextAlignment方法\n里面有一些常量  Qt.AlignRight  Qt.AlignBottom\n\n\"\"\"</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">,</span>QTableWidget<span class=\"token punctuation\">,</span>QHBoxLayout<span class=\"token punctuation\">,</span>QApplication<span class=\"token punctuation\">,</span>QTableWidgetItem<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span>  Qt\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CellTextAlignment</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>CellTextAlignment<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 设置窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'设置单元格的文本对齐方式'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置尺寸</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">430</span><span class=\"token punctuation\">,</span><span class=\"token number\">230</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建水平布局</span>\n        layout <span class=\"token operator\">=</span> QHBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建QTableWidget控件</span>\n        tableWidget <span class=\"token operator\">=</span> QTableWidget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置行数</span>\n        tableWidget<span class=\"token punctuation\">.</span>setRowCount<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置列数</span>\n        tableWidget<span class=\"token punctuation\">.</span>setColumnCount<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把控件添加到布局里</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>tableWidget<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置水平表头</span>\n        tableWidget<span class=\"token punctuation\">.</span>setHorizontalHeaderLabels<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'姓名'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'性别'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'体重(kg)'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 添加字段</span>\n        <span class=\"token comment\"># 创建QTableWidgetItem控件</span>\n        newItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">'水生'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置文本为右对齐  默认单元格的顶端显示  可以设置为底端</span>\n        newItem<span class=\"token punctuation\">.</span>setTextAlignment<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>AlignRight <span class=\"token operator\">|</span> Qt<span class=\"token punctuation\">.</span>AlignBottom<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给tableWidget添加newItem字段   此时表内是空的</span>\n        <span class=\"token comment\">#  把newItem字段添加到第一行第一列</span>\n        tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>newItem<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 添加字段</span>\n        <span class=\"token comment\"># 创建QTableWidgetItem控件</span>\n        newItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">'28'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置文本为中心对齐  上下左右都对称    Qt.AlignBottom未起作用</span>\n        newItem<span class=\"token punctuation\">.</span>setTextAlignment<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>AlignCenter <span class=\"token operator\">|</span> Qt<span class=\"token punctuation\">.</span>AlignBottom<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给tableWidget添加newItem字段   此时表内是空的</span>\n        <span class=\"token comment\">#  把newItem字段添加到第一行第二列</span>\n        tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> newItem<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 添加字段</span>\n        <span class=\"token comment\"># 创建QTableWidgetItem控件</span>\n        newItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">'178'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置文本为右对齐  </span>\n        newItem<span class=\"token punctuation\">.</span>setTextAlignment<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>AlignRight<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给tableWidget添加newItem字段   此时表内是空的</span>\n        <span class=\"token comment\">#  把newItem字段添加到第一行第三列</span>\n        tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> newItem<span class=\"token punctuation\">)</span>\n\n\n\n        <span class=\"token comment\"># 应用于水平布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 单独执行此脚本，才会运行下面的代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># app实例化，并传参</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    example <span class=\"token operator\">=</span> CellTextAlignment<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    example<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 进入主循环，调用exit方法，确保主循环顺利退出</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\69a9bac68169408385cb88ec73a45e4e.png\"/></p>\n<h5><a id=\"67_5806\"></a>67.合并单元格</h5>\n<p>在table_tree文件夹里新建Span.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n合并单元格\nsetSpan(row,col,要合并的行数,要合并的列数)\n\n\"\"\"</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">,</span>QTableWidget<span class=\"token punctuation\">,</span>QHBoxLayout<span class=\"token punctuation\">,</span>QApplication<span class=\"token punctuation\">,</span>QTableWidgetItem<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Span</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Span<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'合并单元格'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">430</span><span class=\"token punctuation\">,</span><span class=\"token number\">230</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建水平布局</span>\n        layout <span class=\"token operator\">=</span> QHBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建表格控件</span>\n        tableWidget <span class=\"token operator\">=</span> QTableWidget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置表格的行数</span>\n        tableWidget<span class=\"token punctuation\">.</span>setRowCount<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置表格的列数</span>\n        tableWidget<span class=\"token punctuation\">.</span>setColumnCount<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把表格控件添加到布局里</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>tableWidget<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建水平表头</span>\n        tableWidget<span class=\"token punctuation\">.</span>setHorizontalHeaderLabels<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'姓名'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'年龄'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'身高'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建字段</span>\n        newItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">'大卫'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># newItem添加到表格里 第一行第一列</span>\n        tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>newItem<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 合并第一行第一列  ，合并3行，合并一列</span>\n        tableWidget<span class=\"token punctuation\">.</span>setSpan<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建字段</span>\n        newItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">'18'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># newItem添加到表格里  第一行第二列</span>\n        tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> newItem<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 合并第一行第二列   合并两行，合并一列</span>\n        tableWidget<span class=\"token punctuation\">.</span>setSpan<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建字段</span>\n        newItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">'180'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># newItem添加到表格里   第一行第三列</span>\n        tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> newItem<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 合并第一行第三列  合并4行 合并一列</span>\n        tableWidget<span class=\"token punctuation\">.</span>setSpan<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建字段</span>\n        newItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">'测试'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># newItem添加到表格里   第四行第一列</span>\n        tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> newItem<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 合并第四行第一  合并一行 合并两列</span>\n        tableWidget<span class=\"token punctuation\">.</span>setSpan<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 应用于水平布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 直接调用该脚本，执行下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># app实例化，并传参</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> Span<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 进入主循环，调用exit方法，确保主循环安全退出</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\58382cccad974bc4aa7fb19df1b6085b.png\"/></p>\n<h5><a id=\"68_5893\"></a>68.设置单元格的尺寸</h5>\n<p>在table_tree文件夹里新建CellSize.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n设置单元格尺寸\n\"\"\"</span>\n<span class=\"token keyword\">import</span> sys\n\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> QBrush<span class=\"token punctuation\">,</span> QColor<span class=\"token punctuation\">,</span> QFont\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">,</span>QTableWidget<span class=\"token punctuation\">,</span>QHBoxLayout<span class=\"token punctuation\">,</span>QApplication<span class=\"token punctuation\">,</span>QTableWidgetItem<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CellSize</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>CellSize<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'QTableWidget 例子'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">530</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建水平布局</span>\n        layout  <span class=\"token operator\">=</span> QHBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建表格控件</span>\n        tableWidget <span class=\"token operator\">=</span> QTableWidget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置表格控件的行</span>\n        tableWidget<span class=\"token punctuation\">.</span>setRowCount<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置表格控件的列</span>\n        tableWidget<span class=\"token punctuation\">.</span>setColumnCount<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建字段</span>\n        newItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">'活力'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置字体  字体大小</span>\n        newItem<span class=\"token punctuation\">.</span>setFont<span class=\"token punctuation\">(</span>QFont<span class=\"token punctuation\">(</span><span class=\"token string\">'Times'</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span>QFont<span class=\"token punctuation\">.</span>Black<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置字体颜色</span>\n        newItem<span class=\"token punctuation\">.</span>setForeground<span class=\"token punctuation\">(</span>QBrush<span class=\"token punctuation\">(</span>QColor<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">113</span><span class=\"token punctuation\">,</span><span class=\"token number\">150</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置单元格背景</span>\n        newItem<span class=\"token punctuation\">.</span>setBackground<span class=\"token punctuation\">(</span>QBrush<span class=\"token punctuation\">(</span>QColor<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">82</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把字段添加到表格里  第一行第一列</span>\n        tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>newItem<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建字段</span>\n        newItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">'18'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置字体  字体大小</span>\n        newItem<span class=\"token punctuation\">.</span>setFont<span class=\"token punctuation\">(</span>QFont<span class=\"token punctuation\">(</span><span class=\"token string\">'Times'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> QFont<span class=\"token punctuation\">.</span>Black<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#改变行的高度   第一个参数是行  第二个参数是设定值   第一行  高度80</span>\n        tableWidget<span class=\"token punctuation\">.</span>setRowHeight<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 把字段添加到表格里    第一行第二列</span>\n        tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> newItem<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建字段</span>\n        newItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">'167'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置字体  字体大小</span>\n        newItem<span class=\"token punctuation\">.</span>setFont<span class=\"token punctuation\">(</span>QFont<span class=\"token punctuation\">(</span><span class=\"token string\">'Times'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> QFont<span class=\"token punctuation\">.</span>Black<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 改变第三行的高度   第三行  高度80</span>\n        tableWidget<span class=\"token punctuation\">.</span>setRowHeight<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 改变列的高度   第一个参数是列  第二个参数是设定值   第三列  宽度120</span>\n        tableWidget<span class=\"token punctuation\">.</span>setColumnWidth<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">160</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 把字段添加到表格里   第一行第三列</span>\n        tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> newItem<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把表格控件添加到布局里</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>tableWidget<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#应用于表格控件</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 直接执行此脚本，才会调用下面代码</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># app实例化，并传参</span>\n    app <span class=\"token operator\">=</span>QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建对象</span>\n    main <span class=\"token operator\">=</span> CellSize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建窗口</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建主循环，调用exit方法，确保主循环安全退出</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\208b177e20bd4ac284732521d3a0adf1.png\"/></p>\n<h5><a id=\"69_5982\"></a>69.在单元格中实现图文混排的效果</h5>\n<p>在table_tree文件夹里新建CellImageText.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n在单元格中实现图文混排的效果\n\"\"\"</span>\n<span class=\"token comment\"># 让文本和图像 同时显示到一个单元格</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CellImageText</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>CellImageText<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'在单元格实现图文混排的效果'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">800</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建水平布局</span>\n        layout <span class=\"token operator\">=</span> QHBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建全局表格控件</span>\n        self<span class=\"token punctuation\">.</span>tableWidget <span class=\"token operator\">=</span> QTableWidget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给表格控件设置行</span>\n        self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>setRowCount<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给表格控件设置列</span>\n        self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>setColumnCount<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 给表格控件设置水平表头</span>\n        self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>setHorizontalHeaderLabels<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'姓名'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'性别'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'体重'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'显示图片'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建字段</span>\n        <span class=\"token comment\"># 添加QTableWidgetItem控件</span>\n        newItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">'黎明'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 把字段控件放到表格控件里  第一行第一列</span>\n        self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>newItem<span class=\"token punctuation\">)</span>\n\n\n        newItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 把字段控件放到表格控件里  第一行第二列</span>\n        self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> newItem<span class=\"token punctuation\">)</span>\n\n\n\n        newItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">'18'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 把字段控件放到表格控件里  第一行第三列</span>\n        self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> newItem<span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 第四列添加图片</span>\n        newItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span>QIcon<span class=\"token punctuation\">(</span><span class=\"token string\">'../controls/images/5.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'背包'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 把newItem控件放到表格控件里 第一行第四列</span>\n        self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>newItem<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把表格控件添加到水平布局里面</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 应用于水平布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span>QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    main <span class=\"token operator\">=</span> CellImageText<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\499c6a634d68459d89eaefa2fcedf973.png\"/></p>\n<h5><a id=\"70_6059\"></a>70.改变单元格中图片的尺寸</h5>\n<p>在table_tree文件夹里新建CellImageSize.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n改变单元格中的图片尺寸\n\nsetIconSize(QSize(width,height))\n\"\"\"</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CellImageSize</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>CellImageSize<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'改变单元格中图片的尺寸'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">800</span><span class=\"token punctuation\">,</span><span class=\"token number\">600</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建水平布局</span>\n        layout <span class=\"token operator\">=</span> QHBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建表格控件</span>\n        tablewidget <span class=\"token operator\">=</span> QTableWidget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置表格行</span>\n        tablewidget<span class=\"token punctuation\">.</span>setRowCount<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置表格列</span>\n        tablewidget<span class=\"token punctuation\">.</span>setColumnCount<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置表格内图像的尺寸</span>\n        tablewidget<span class=\"token punctuation\">.</span>setIconSize<span class=\"token punctuation\">(</span>QSize<span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置水平表头</span>\n        tablewidget<span class=\"token punctuation\">.</span>setHorizontalHeaderLabels<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'图片1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'图片2'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'图片3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 让列的宽度和图片的宽度相同</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            tablewidget<span class=\"token punctuation\">.</span>setColumnWidth<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 让行的高度和图片的高度相同</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            tablewidget<span class=\"token punctuation\">.</span>setRowHeight<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 添加图片</span>\n        <span class=\"token comment\"># 如果有15张图片</span>\n        <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            i <span class=\"token operator\">=</span> k <span class=\"token operator\">/</span> <span class=\"token number\">3</span>  <span class=\"token comment\"># 行</span>\n            j <span class=\"token operator\">=</span> k <span class=\"token operator\">%</span> <span class=\"token number\">3</span>  <span class=\"token comment\"># 列</span>\n            item <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            item<span class=\"token punctuation\">.</span>setIcon<span class=\"token punctuation\">(</span>QIcon<span class=\"token punctuation\">(</span><span class=\"token string\">'./images/00%s.jpg'</span><span class=\"token operator\">%</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            tablewidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>item<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把表格控件添加到水平布局里</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>tablewidget<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 应用于水平布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span>QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    main <span class=\"token operator\">=</span> CellImageSize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b8c7374c3dab4c169da612f8230d7568.png\"/></p>\n<h5><a id=\"71_6133\"></a>71.在表格中显示上下文菜单</h5>\n<p>在table_tree文件夹里新建TableWidgetContextMenu.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n在表格中显示上下文\n\n1.如何弹出菜单\n2.如何在满足条件的情况下弹出菜单 QMenu.exec_\n\n\n\"\"\"</span>\n<span class=\"token comment\"># 特定单元格点击鼠标右键弹出菜单</span>\n\n<span class=\"token keyword\">import</span> sys\n\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> Qt\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>QMenu<span class=\"token punctuation\">,</span>QPushButton<span class=\"token punctuation\">,</span>QWidget<span class=\"token punctuation\">,</span>QTableWidget<span class=\"token punctuation\">,</span>QHBoxLayout<span class=\"token punctuation\">,</span>QApplication<span class=\"token punctuation\">,</span>QTableWidgetItem<span class=\"token punctuation\">,</span>QHeaderView<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TableWidgetContextMenu</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>TableWidgetContextMenu<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'在表格中显示上下文菜单'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建水平布局</span>\n        layout <span class=\"token operator\">=</span> QHBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建全局的表格控件</span>\n        self<span class=\"token punctuation\">.</span>tableWidget <span class=\"token operator\">=</span> QTableWidget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 表格设置行</span>\n        self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>setRowCount<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 表格设置列</span>\n        self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>setColumnCount<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把表格添加到水平布局里</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置水平表格头</span>\n        self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>setHorizontalHeaderLabels<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'姓名'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'性别'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'体重'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 添加字段</span>\n        newItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 把字段添加到表格里 第一行第一列</span>\n        self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>newItem<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 添加字段</span>\n        newItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">'女'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 把字段添加到表格里  第一行第二列</span>\n        self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> newItem<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 添加字段</span>\n        newItem <span class=\"token operator\">=</span> QTableWidgetItem<span class=\"token punctuation\">(</span><span class=\"token string\">'28'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 把字段添加到表格里   第一行第三列</span>\n        self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>setItem<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> newItem<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置允许弹出菜单  单击右键响应事件</span>\n        self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>setContextMenuPolicy<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>CustomContextMenu<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 将信号请求连接到一个槽</span>\n        self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>customContextMenuRequested<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>generateMenu<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 应用于水平布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 槽方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">generateMenu</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># pos 为单击鼠标右键的坐标  相对于窗口</span>\n        <span class=\"token comment\"># 鼠标右键单击前两行弹出菜单，单击第三行没响应</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>selectionModel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>selection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>indexes<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 当前选中的行</span>\n            rowNum <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span>row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 如果选择的行索引小于2，弹出上下文菜单</span>\n        <span class=\"token keyword\">if</span> rowNum <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n            menu <span class=\"token operator\">=</span> QMenu<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            item1 <span class=\"token operator\">=</span> menu<span class=\"token punctuation\">.</span>addAction<span class=\"token punctuation\">(</span><span class=\"token string\">\"菜单项1\"</span><span class=\"token punctuation\">)</span>\n            item2 <span class=\"token operator\">=</span> menu<span class=\"token punctuation\">.</span>addAction<span class=\"token punctuation\">(</span><span class=\"token string\">\"菜单项2\"</span><span class=\"token punctuation\">)</span>\n            item3 <span class=\"token operator\">=</span> menu<span class=\"token punctuation\">.</span>addAction<span class=\"token punctuation\">(</span><span class=\"token string\">\"菜单项3\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 相对于窗口的坐标系转换为相对于屏幕的坐标系  映射到全局</span>\n            screePos <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>mapToGlobal<span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>screePos<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 被阻塞</span>\n            <span class=\"token comment\"># action = menu.exec(pos)</span>\n            action <span class=\"token operator\">=</span> menu<span class=\"token punctuation\">.</span><span class=\"token keyword\">exec</span><span class=\"token punctuation\">(</span>screePos<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> action <span class=\"token operator\">==</span> item1<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'选择了第1个菜单项'</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span>rowNum<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                       self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span>rowNum<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                       self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span>rowNum<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">elif</span> action <span class=\"token operator\">==</span> item1<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'选择了第2个菜单项'</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span>rowNum<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                       self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span>rowNum<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                       self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span>rowNum<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">elif</span> action <span class=\"token operator\">==</span> item1<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'选择了第3个菜单项'</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span>rowNum<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                       self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span>rowNum<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                       self<span class=\"token punctuation\">.</span>tableWidget<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span>rowNum<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app  <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    main <span class=\"token operator\">=</span> TableWidgetContextMenu<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cdf4f133307a47f5be0feb6fc1ed240b.png\"/></p>\n<h5><a id=\"72QTreeWidget_6250\"></a>72.树控件(QTreeWidget)</h5>\n<p>在table_tree文件夹里新建BasicTreeWidget.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n树控件(QTreeWidget)的基本用法\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> QIcon<span class=\"token punctuation\">,</span>QBrush<span class=\"token punctuation\">,</span>QColor\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> Qt\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BasicTreeWidget</span><span class=\"token punctuation\">(</span>QMainWindow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>parent<span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>BasicTreeWidget<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'树控件(QTreeWidget)的基本用法'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">600</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 创建树控件</span>\n        self<span class=\"token punctuation\">.</span>tree <span class=\"token operator\">=</span> QTreeWidget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 将树控件设为中心控件，充满整个屏幕</span>\n        self<span class=\"token punctuation\">.</span>setCentralWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>tree<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 为树控件指定列数    让它显示两列</span>\n        <span class=\"token comment\"># 每个都只能显示两列</span>\n        self<span class=\"token punctuation\">.</span>tree<span class=\"token punctuation\">.</span>setColumnCount<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 指定列标签</span>\n        self<span class=\"token punctuation\">.</span>tree<span class=\"token punctuation\">.</span>setHeaderLabels<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 根节点</span>\n        <span class=\"token comment\"># 类似于表格的创建字段</span>\n        root <span class=\"token operator\">=</span> QTreeWidgetItem<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>tree<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 将根阶段放置在第一列</span>\n        root<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">'根节点'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给根节点设置图标</span>\n        root<span class=\"token punctuation\">.</span>setIcon<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>QIcon<span class=\"token punctuation\">(</span><span class=\"token string\">'./images/000.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给第一列设置列宽</span>\n        self<span class=\"token punctuation\">.</span>tree<span class=\"token punctuation\">.</span>setColumnWidth<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">160</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 添加子节点1</span>\n        <span class=\"token comment\"># 让子节点child1指向root</span>\n        child1 <span class=\"token operator\">=</span> QTreeWidgetItem<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置子节点第一列文本</span>\n        child1<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">'子节点1'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置子节点第二列的文本</span>\n        child1<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"子节点1的数据\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置子节点第一列的图标</span>\n        child1<span class=\"token punctuation\">.</span>setIcon<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>QIcon<span class=\"token punctuation\">(</span><span class=\"token string\">'./images/001.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给子节点第一列添加复选框</span>\n        child1<span class=\"token punctuation\">.</span>setCheckState<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>Qt<span class=\"token punctuation\">.</span>Checked<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置子节点第二列的图标</span>\n        child1<span class=\"token punctuation\">.</span>setIcon<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> QIcon<span class=\"token punctuation\">(</span><span class=\"token string\">'./images/001.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 添加子节点2</span>\n        <span class=\"token comment\"># 让子节点child2指向root</span>\n        child2 <span class=\"token operator\">=</span> QTreeWidgetItem<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置子节点第一列文本</span>\n        child2<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">'子节点2'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置子节点第一列设置图标</span>\n        child2<span class=\"token punctuation\">.</span>setIcon<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>QIcon<span class=\"token punctuation\">(</span><span class=\"token string\">'./images/006.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 为子节点2再添加一个子节点</span>\n        <span class=\"token comment\"># 让子节点chil2_指向子节点chil2</span>\n        child2_ <span class=\"token operator\">=</span> QTreeWidgetItem<span class=\"token punctuation\">(</span>child2<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置子节点第一列文本</span>\n        child2_<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">'子节点2的子节点的第一列'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置子节点第一列文本</span>\n        child2_<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'子节点2的子节点的第二列'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置子节点第一列文本    由于设置了self.tree.setColumnCount(2)，所以没有第三列</span>\n        <span class=\"token comment\"># child2_.setText(2, '子节点2的子节点的第三列')</span>\n        <span class=\"token comment\"># 给子节点的第一列设置图标</span>\n        child2_<span class=\"token punctuation\">.</span>setIcon<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>QIcon<span class=\"token punctuation\">(</span><span class=\"token string\">'./images/008.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给子节点的第二列设置图标</span>\n        child2_<span class=\"token punctuation\">.</span>setIcon<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> QIcon<span class=\"token punctuation\">(</span><span class=\"token string\">'./images/001.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 将节点默认展开</span>\n        self<span class=\"token punctuation\">.</span>tree<span class=\"token punctuation\">.</span>expandAll<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    tree <span class=\"token operator\">=</span> BasicTreeWidget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    tree<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\70e198bcb5344ddcb3b40cf8be2cb625.png\"/></p>\n<h5><a id=\"73_6345\"></a>73.为树节点添加响应事件</h5>\n<p>在table_tree文件夹里新建TreeEvent.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n为树节点添加响应事件\n\"\"\"</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeEvent</span><span class=\"token punctuation\">(</span>QMainWindow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>parent<span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>TreeEvent<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'为树节点添加响应事件'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建一个树</span>\n        self<span class=\"token punctuation\">.</span>tree <span class=\"token operator\">=</span> QTreeWidget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给这个树创建列的数量</span>\n        self<span class=\"token punctuation\">.</span>tree<span class=\"token punctuation\">.</span>setColumnCount<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置头</span>\n        <span class=\"token comment\"># 指定列标签</span>\n        self<span class=\"token punctuation\">.</span>tree<span class=\"token punctuation\">.</span>setHeaderLabels<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Key'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建节点</span>\n        root <span class=\"token operator\">=</span> QTreeWidgetItem<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>tree<span class=\"token punctuation\">)</span>\n        root<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span>\n        root<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建子节点</span>\n        <span class=\"token comment\"># 让子节点child1指向root</span>\n        child1 <span class=\"token operator\">=</span> QTreeWidgetItem<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给子节点第一列设置文本</span>\n        child1<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"child1\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给子节点第二列设置文本</span>\n        child1<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建子节点</span>\n        <span class=\"token comment\"># 让子节点child2指向root</span>\n        child2 <span class=\"token operator\">=</span> QTreeWidgetItem<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给子节点第一列设置文本</span>\n        child2<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"child2\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给子节点第二列设置文本</span>\n        child2<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建子节点</span>\n        <span class=\"token comment\"># 让子节点child3指向child2</span>\n        child3 <span class=\"token operator\">=</span> QTreeWidgetItem<span class=\"token punctuation\">(</span>child2<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给子节点第一列设置文本</span>\n        child2<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"child3\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给子节点第二列设置文本</span>\n        child2<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 将树设置为中心控件，充满整个屏幕</span>\n        <span class=\"token comment\"># 这样在屏幕上就可以显示</span>\n        self<span class=\"token punctuation\">.</span>setCentralWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>tree<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 为树添加节点，用单击信号</span>\n        self<span class=\"token punctuation\">.</span>tree<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>onTreeClicked<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 槽方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">onTreeClicked</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 获得当前的单击项</span>\n        item <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>tree<span class=\"token punctuation\">.</span>currentItem<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 当前行</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">.</span>row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 输出当前单击节点的key</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'key=%s,value=%s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>item<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    tree <span class=\"token operator\">=</span> TreeEvent<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    tree<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\48b53a736c724b3cb8ccbd246ba67785.png\"/></p>\n<h5><a id=\"74_6430\"></a>74.添加，修改和删除树控件中的节点</h5>\n<p>在table_tree文件夹里新建ModifyTree.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n添加、修改和删除树控件中的节点\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> sys\n\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ModifyTree</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>parent<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>ModifyTree<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'TreeWidget  例子'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">600</span><span class=\"token punctuation\">,</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n\n        operatorLayout <span class=\"token operator\">=</span> QHBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建按钮控件</span>\n        addBtn <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'添加节点'</span><span class=\"token punctuation\">)</span>\n        updateBtn <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'修改节点'</span><span class=\"token punctuation\">)</span>\n        deleteBtn <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'删除节点'</span><span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 把控件添加到水平布局里</span>\n        operatorLayout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>addBtn<span class=\"token punctuation\">)</span>\n        operatorLayout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>updateBtn<span class=\"token punctuation\">)</span>\n        operatorLayout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>deleteBtn<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把这三个按钮绑定到相应的槽上</span>\n        addBtn<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>addNode<span class=\"token punctuation\">)</span>\n        updateBtn<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>updateNode<span class=\"token punctuation\">)</span>\n        deleteBtn<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>deleteNode<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#  下行代码不需要，一次应用于布局就可以了</span>\n        <span class=\"token comment\"># self.setLayout(operatorLayout)</span>\n        <span class=\"token comment\"># 创建一个树</span>\n        self<span class=\"token punctuation\">.</span>tree <span class=\"token operator\">=</span> QTreeWidget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给这个树创建列的数量</span>\n        self<span class=\"token punctuation\">.</span>tree<span class=\"token punctuation\">.</span>setColumnCount<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置头</span>\n        <span class=\"token comment\"># 指定列标签</span>\n        self<span class=\"token punctuation\">.</span>tree<span class=\"token punctuation\">.</span>setHeaderLabels<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Key'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#</span>\n        <span class=\"token comment\"># 创建节点</span>\n        root <span class=\"token operator\">=</span> QTreeWidgetItem<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>tree<span class=\"token punctuation\">)</span>\n        root<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span>\n        root<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建子节点</span>\n        <span class=\"token comment\"># 让子节点child1指向root</span>\n        child1 <span class=\"token operator\">=</span> QTreeWidgetItem<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给子节点第一列设置文本</span>\n        child1<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"child1\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给子节点第二列设置文本</span>\n        child1<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建子节点</span>\n        <span class=\"token comment\"># 让子节点child2指向root</span>\n        child2 <span class=\"token operator\">=</span> QTreeWidgetItem<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给子节点第一列设置文本</span>\n        child2<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"child2\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给子节点第二列设置文本</span>\n        child2<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建子节点</span>\n        <span class=\"token comment\"># 让子节点child3指向child2</span>\n        child3 <span class=\"token operator\">=</span> QTreeWidgetItem<span class=\"token punctuation\">(</span>child2<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给子节点第一列设置文本</span>\n        child2<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"child3\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给子节点第二列设置文本</span>\n        child2<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 将树设置为中心控件，充满整个屏幕</span>\n        <span class=\"token comment\"># 这样在屏幕上就可以显示</span>\n        <span class=\"token comment\"># self.setCentralWidget(self.tree)</span>\n\n        <span class=\"token comment\"># 为树添加节点，用单击信号</span>\n        self<span class=\"token punctuation\">.</span>tree<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>onTreeClicked<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建垂直布局</span>\n        mainLayout <span class=\"token operator\">=</span> QVBoxLayout<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 把按钮和树都放在垂直布局里</span>\n        <span class=\"token comment\"># 此时按钮在水平布局里面</span>\n        mainLayout<span class=\"token punctuation\">.</span>addLayout<span class=\"token punctuation\">(</span>operatorLayout<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># # 添加控件</span>\n        mainLayout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>tree<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 应用于垂直布局</span>\n        <span class=\"token comment\"># self.setLayout(mainLayout)</span>\n\n    <span class=\"token comment\"># 槽方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">onTreeClicked</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 获得当前的单击项</span>\n        item <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>tree<span class=\"token punctuation\">.</span>currentItem<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 当前行</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">.</span>row<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 输出当前单击节点的key</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'key=%s,value=%s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 槽方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">addNode</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'添加节点'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 获得当前的节点</span>\n        item <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>tree<span class=\"token punctuation\">.</span>currentItem<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 动态创建节点，指定父节点</span>\n        node <span class=\"token operator\">=</span> QTreeWidgetItem<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建node的第一列</span>\n        node<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">'新节点'</span><span class=\"token punctuation\">)</span>\n        node<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'新值'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建node的第二列</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">updateNode</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'修改节点'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 获得当前的节点</span>\n        item <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>tree<span class=\"token punctuation\">.</span>currentItem<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        item<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">'修改节点'</span><span class=\"token punctuation\">)</span>\n        item<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'值已经被修改'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">deleteNode</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'删除节点'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 获得当前的节点</span>\n        item <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>tree<span class=\"token punctuation\">.</span>currentItem<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 通过循环  得到当前选中的节点</span>\n        <span class=\"token comment\"># 获得不可见的根</span>\n        root <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>tree<span class=\"token punctuation\">.</span>invisibleRootItem<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>tree<span class=\"token punctuation\">.</span>selectedItems<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\">#  item.parent()和root只要有一个不为空，就不会出错</span>\n            <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>removeChild<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    main <span class=\"token operator\">=</span> ModifyTree<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fee36db0a96a40a7a9d65c9cf75c26f7.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\74fbc2b4b4fc4aa28cd1bd615b64d9cd.png\"/></p>\n<h5><a id=\"75QTreeView_6579\"></a>75.QTreeView控件与系统定制模式</h5>\n<p>在table_tree文件夹里新建TreeView.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\nQTreeView控件与系统定制模式\n\n与QTreeWidget的不同点： QTreeWiget装载数据的方式是通过Model,比如Model里面的QDirModel 用来显示当前操作系统的目录结构\nQTreeView  一般用于比较复杂的树\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 创建QDirModel控件</span>\n    model <span class=\"token operator\">=</span> QDirModel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建QTreeView控件</span>\n    tree <span class=\"token operator\">=</span> QTreeView<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 设置model</span>\n    tree<span class=\"token punctuation\">.</span>setModel<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 把树作为一个窗口</span>\n    tree<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'QTreeView'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 设置树窗口的尺寸</span>\n    tree<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">600</span><span class=\"token punctuation\">,</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 显示树</span>\n    tree<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n</code></pre>\n<p>效果展示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5c231531f538428eb95acd6574ccc064.png\"/></p>\n<h5><a id=\"76QTableWidget_6621\"></a>76选项卡控件(QTableWidget)</h5>\n<p>新建containers文件夹，在containers文件夹里面新建TabWidgetDemo.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n选项卡控件：QTabWidget\n\n目的：在屏幕上显示更多的控件  在页面中显示多页面\n\"\"\"</span>\n\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TabWidgetDemo</span><span class=\"token punctuation\">(</span>QTabWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>parent<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>TabWidgetDemo<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'选项卡控件:QTabWidget'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">600</span><span class=\"token punctuation\">,</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># QTableView的最终父类是QWidget  将整个窗口作为一个tab</span>\n\n        <span class=\"token comment\"># 创建多个窗口  每个窗口可以放置多个控件</span>\n        <span class=\"token comment\"># 创建用于显示控件的窗口</span>\n        <span class=\"token comment\"># 创建窗口tab1</span>\n        self<span class=\"token punctuation\">.</span>tab1 <span class=\"token operator\">=</span> QWidget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建窗口tab2</span>\n        self<span class=\"token punctuation\">.</span>tab2 <span class=\"token operator\">=</span> QWidget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建窗口tab3</span>\n        self<span class=\"token punctuation\">.</span>tab3 <span class=\"token operator\">=</span> QWidget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把每个窗口和选项卡绑定</span>\n        self<span class=\"token punctuation\">.</span>addTab<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>tab1<span class=\"token punctuation\">,</span><span class=\"token string\">'选项卡1'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>addTab<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>tab2<span class=\"token punctuation\">,</span><span class=\"token string\">'选项卡2'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>addTab<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>tab3<span class=\"token punctuation\">,</span><span class=\"token string\">'选项卡3'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 调用</span>\n        self<span class=\"token punctuation\">.</span>tab1UI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>tab2UI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>tab3UI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 为每个选项卡单独编写一个方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">tab1UI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 创建表单布局</span>\n        layout <span class=\"token operator\">=</span> QFormLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addRow<span class=\"token punctuation\">(</span><span class=\"token string\">'姓名'</span><span class=\"token punctuation\">,</span>QLineEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addRow<span class=\"token punctuation\">(</span><span class=\"token string\">'地址'</span><span class=\"token punctuation\">,</span>QLineEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>setTabText<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">'联系方式'</span><span class=\"token punctuation\">)</span>\n         <span class=\"token comment\"># 装载</span>\n        self<span class=\"token punctuation\">.</span>tab1<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">tab2UI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        layout <span class=\"token operator\">=</span> QFormLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        sex <span class=\"token operator\">=</span> QHBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        sex<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>QRadioButton<span class=\"token punctuation\">(</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        sex<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>QRadioButton<span class=\"token punctuation\">(</span><span class=\"token string\">'女'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addRow<span class=\"token punctuation\">(</span>QLabel<span class=\"token punctuation\">(</span><span class=\"token string\">'性别'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>sex<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addRow<span class=\"token punctuation\">(</span><span class=\"token string\">'生日'</span><span class=\"token punctuation\">,</span>QLineEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>setTabText<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'个人详细信息'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>tab2<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">tab3UI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 放置水平布局</span>\n        layout <span class=\"token operator\">=</span> QHBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>QLabel<span class=\"token punctuation\">(</span><span class=\"token string\">'科目'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>QCheckBox<span class=\"token punctuation\">(</span><span class=\"token string\">'物理'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>QCheckBox<span class=\"token punctuation\">(</span><span class=\"token string\">'高数'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>setTabText<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'教育程序'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>tab3<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span>QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    demo <span class=\"token operator\">=</span> TabWidgetDemo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    demo<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f6a4ef8000844f69b48b48c7562161cc.png\"/></p>\n<h5><a id=\"77QStakedWidget_6710\"></a>77.堆栈窗口控件(QStakedWidget)</h5>\n<p>在containers文件夹里面新建QStakedWidget.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n堆栈窗口控件(QStackedWidget)\n\n通过切换来显示不同页的控件\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">StackedExample</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>StackedExample<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 从屏幕宽500，高200的位置显示出一个宽300，高200的窗口</span>\n        self<span class=\"token punctuation\">.</span>setGeometry<span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">\"堆栈窗口控件(QStackedWidget)\"</span><span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 放置列表控件</span>\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">list</span> <span class=\"token operator\">=</span> QListWidget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 在列表的第一列添加 \"联系方式\"</span>\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>insertItem<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"联系方式\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 在列表的第二列添加  \"个人信息\"</span>\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>insertItem<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"个人信息\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 在列表的第三列添加  \"教育程序\"</span>\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>insertItem<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"教育程度\"</span><span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 创建三个页面</span>\n        self<span class=\"token punctuation\">.</span>stack1 <span class=\"token operator\">=</span> QWidget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>stack2 <span class=\"token operator\">=</span> QWidget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>stack3 <span class=\"token operator\">=</span> QWidget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 调用</span>\n        self<span class=\"token punctuation\">.</span>tab1UI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>tab2UI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>tab3UI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建堆栈窗口对象</span>\n        self<span class=\"token punctuation\">.</span>stack <span class=\"token operator\">=</span> QStackedWidget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 把这三个窗口添加到堆栈窗口里面</span>\n        self<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>stack1<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>stack2<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>stack3<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建水平布局 左侧显示列表  右侧显示堆栈页面</span>\n        hbox <span class=\"token operator\">=</span> QHBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        hbox<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span>\n        hbox<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 应用于水平布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>hbox<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 为列表添加事件  当前行变化 信号 槽绑定</span>\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>currentRowChanged<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>display<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 编写三个槽方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">tab1UI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        layout <span class=\"token operator\">=</span> QFormLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addRow<span class=\"token punctuation\">(</span><span class=\"token string\">'姓名'</span><span class=\"token punctuation\">,</span>QLineEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addRow<span class=\"token punctuation\">(</span><span class=\"token string\">'地址'</span><span class=\"token punctuation\">,</span>QLineEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>stack1<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">tab2UI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        layout <span class=\"token operator\">=</span> QFormLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        sex <span class=\"token operator\">=</span> QHBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        sex<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>QRadioButton<span class=\"token punctuation\">(</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        sex<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>QRadioButton<span class=\"token punctuation\">(</span><span class=\"token string\">'女'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addRow<span class=\"token punctuation\">(</span>QLabel<span class=\"token punctuation\">(</span><span class=\"token string\">'性别'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>sex<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addRow<span class=\"token punctuation\">(</span><span class=\"token string\">'生日'</span><span class=\"token punctuation\">,</span>QLineEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>stack2<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">tab3UI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        layout <span class=\"token operator\">=</span> QHBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>QLabel<span class=\"token punctuation\">(</span><span class=\"token string\">'科目'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>QCheckBox<span class=\"token punctuation\">(</span><span class=\"token string\">'物理'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>QCheckBox<span class=\"token punctuation\">(</span><span class=\"token string\">'高数'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>stack3<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># index 为当前项的变化</span>\n        <span class=\"token comment\"># 根据索引切换栈里面的页面</span>\n        self<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span>setCurrentIndex<span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    main <span class=\"token operator\">=</span> QStackedWidget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    main<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p>windows环境不能展示，待后期填坑</p>\n<h5><a id=\"78QDockWidget_6812\"></a>78.停靠控件(QDockWidget)</h5>\n<p>在containers文件夹里面新建DockWidget.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n停靠控件 (QDockWidget)\n\n这是一个窗口 可以悬浮 可以拖动\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DockDemo</span><span class=\"token punctuation\">(</span>QMainWindow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>parent<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>DockDemo<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'停靠控件 (QDockWidget)'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 水平布局</span>\n        layout <span class=\"token operator\">=</span> QHBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建停靠控件</span>\n        self<span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> QDockWidget<span class=\"token punctuation\">(</span><span class=\"token string\">'Dockable'</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建列表控件</span>\n        self<span class=\"token punctuation\">.</span>listWidget <span class=\"token operator\">=</span> QListWidget<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 为列表控件添加item</span>\n        self<span class=\"token punctuation\">.</span>listWidget<span class=\"token punctuation\">.</span>addItem<span class=\"token punctuation\">(</span><span class=\"token string\">'item1'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>listWidget<span class=\"token punctuation\">.</span>addItem<span class=\"token punctuation\">(</span><span class=\"token string\">'item2'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>listWidget<span class=\"token punctuation\">.</span>addItem<span class=\"token punctuation\">(</span><span class=\"token string\">'item3'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 将列表控件放到停靠(控件)窗口里面</span>\n        self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>setWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>listWidget<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置中心窗口</span>\n        self<span class=\"token punctuation\">.</span>setCentralWidget<span class=\"token punctuation\">(</span>QLineEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 添加停靠窗口  在右侧</span>\n        self<span class=\"token punctuation\">.</span>addDockWidget<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>RightDockWidgetArea<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 默认为停靠状态，可以设置为悬浮</span>\n        self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>setFloating<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    demo <span class=\"token operator\">=</span> DockDemo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    demo<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9339294090084b98b79c2bc1021bf2e2.png\"/></p>\n<h5><a id=\"79_6869\"></a>79.容纳多文档的窗口</h5>\n<p>在containers文件夹里面新建MultiWindows.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n容纳多文档的窗口\n\nQMdiArea  容纳多文档类\nQMdiSubWindow  多文档窗口类\n\n# 父窗口可以创建多个子窗口，子窗口不能离开父窗口\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MultiWindows</span><span class=\"token punctuation\">(</span>QMainWindow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 记录一下当前的窗口</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>parent<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>MultiWindows<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">\"容纳多文档的窗口\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 多文档有两种排列方式 一种是平铺，一种是层叠</span>\n        <span class=\"token comment\"># 创建容纳多文档对象</span>\n        self<span class=\"token punctuation\">.</span>mdi <span class=\"token operator\">=</span> QMdiArea<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 把多文档对象添加到布局里面</span>\n        self<span class=\"token punctuation\">.</span>setCentralWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>mdi<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建一个菜单</span>\n        bar <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>menuBar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 添加一个文件菜单</span>\n        <span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> bar<span class=\"token punctuation\">.</span>addMenu<span class=\"token punctuation\">(</span><span class=\"token string\">\"File\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 给文件菜单添加动作 \"New\"</span>\n        <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>addAction<span class=\"token punctuation\">(</span><span class=\"token string\">\"New\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口的排列方式</span>\n        <span class=\"token comment\"># 层叠</span>\n        <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>addAction<span class=\"token punctuation\">(</span><span class=\"token string\">\"cascade\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 平铺</span>\n        <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>addAction<span class=\"token punctuation\">(</span><span class=\"token string\">\"Tiled\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 连接菜单动作，触发信号</span>\n        <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>triggered<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>windowaction<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 槽方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">windowaction</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># q 是当前单击的菜单项</span>\n        <span class=\"token keyword\">if</span> q<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"New\"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 记录一下</span>\n            MultiWindows<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> MultiWindows<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            <span class=\"token comment\"># 创建一个子窗口</span>\n            sub <span class=\"token operator\">=</span> QMdiSubWindow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 在子窗口里面放置控件</span>\n            sub<span class=\"token punctuation\">.</span>setWidget<span class=\"token punctuation\">(</span>QTextEdit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 设置子窗口的标题</span>\n            sub<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'子窗口'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>MultiWindows<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 添加子窗口</span>\n            self<span class=\"token punctuation\">.</span>mdi<span class=\"token punctuation\">.</span>addSubWindow<span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 显示子窗口</span>\n            sub<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> q<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"cascade\"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 设置层叠方式</span>\n            self<span class=\"token punctuation\">.</span>mdi<span class=\"token punctuation\">.</span>cascadeSubWindows<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> q<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Tiled\"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 设置平铺方式</span>\n            self<span class=\"token punctuation\">.</span>mdi<span class=\"token punctuation\">.</span>tileSubWindows<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    demo <span class=\"token operator\">=</span> MultiWindows<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    demo<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dc51e2707f7e4727893b337787f6fca5.png\"/></p>\n<h5><a id=\"80QScrollBar_6950\"></a>80.滚动条控件(QScrollBar)</h5>\n<p>在containers文件夹里面新建ScrollBar.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n滚动条控件(QScrollBar)\n\n本身不是容器，但是可以起到容器的作用\nQScrollBar的作用：\n1.通过滚动条值的变化控制其他控件状态的变化\n2.通过滚动条值的变化控制控件位置的变化\n\n\"\"\"</span>\n<span class=\"token comment\"># 用三个滚动条控件控制文本的颜色变化</span>\n<span class=\"token comment\"># 用一个滚动条控件控制QLableEdit控件的上下移动</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ScrollBar</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>ScrollBar<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>initUI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">initUI</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 创建水平布局</span>\n        hbox <span class=\"token operator\">=</span> QHBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建label,用来控制文本的颜色以及移动</span>\n        self<span class=\"token punctuation\">.</span>label <span class=\"token operator\">=</span> QLabel<span class=\"token punctuation\">(</span><span class=\"token string\">'拖动滚动条去改变文字颜色'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把label添加到水平布局里</span>\n        hbox<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建三个滚动条控件</span>\n        <span class=\"token comment\"># 创建第一个滚动条</span>\n        self<span class=\"token punctuation\">.</span>scrollbar1 <span class=\"token operator\">=</span> QScrollBar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置第一个滚动条的最大值    最小为0</span>\n        self<span class=\"token punctuation\">.</span>scrollbar1<span class=\"token punctuation\">.</span>setMaximum<span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置信号 滚动条移动  这三个滚动条都使用同一个槽</span>\n        self<span class=\"token punctuation\">.</span>scrollbar1<span class=\"token punctuation\">.</span>sliderMoved<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>sliderMoved<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建第二个滚动条</span>\n        self<span class=\"token punctuation\">.</span>scrollbar2 <span class=\"token operator\">=</span> QScrollBar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置第一个滚动条的最大值    最小为0</span>\n        self<span class=\"token punctuation\">.</span>scrollbar2<span class=\"token punctuation\">.</span>setMaximum<span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置信号 滚动条移动  这三个滚动条都使用同一个槽</span>\n        self<span class=\"token punctuation\">.</span>scrollbar2<span class=\"token punctuation\">.</span>sliderMoved<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>sliderMoved<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建第三个滚动条</span>\n        self<span class=\"token punctuation\">.</span>scrollbar3 <span class=\"token operator\">=</span> QScrollBar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置第一个滚动条的最大值    最小为0</span>\n        self<span class=\"token punctuation\">.</span>scrollbar3<span class=\"token punctuation\">.</span>setMaximum<span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置信号 滚动条移动  这三个滚动条都使用同一个槽</span>\n        self<span class=\"token punctuation\">.</span>scrollbar3<span class=\"token punctuation\">.</span>sliderMoved<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>sliderMoved<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建第四个滚动条   用来移动位置</span>\n        self<span class=\"token punctuation\">.</span>scrollbar4 <span class=\"token operator\">=</span> QScrollBar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置第一个滚动条的最大值    最小为0</span>\n        self<span class=\"token punctuation\">.</span>scrollbar4<span class=\"token punctuation\">.</span>setMaximum<span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置信号 滚动条移动  这三个滚动条都使用同一个槽</span>\n        self<span class=\"token punctuation\">.</span>scrollbar4<span class=\"token punctuation\">.</span>sliderMoved<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>sliderMoved1<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把这三个滚动条都添加到水平布局里</span>\n        hbox<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>scrollbar1<span class=\"token punctuation\">)</span>\n        hbox<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>scrollbar2<span class=\"token punctuation\">)</span>\n        hbox<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>scrollbar3<span class=\"token punctuation\">)</span>\n        hbox<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>scrollbar4<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置当前窗口的位置坐标</span>\n        <span class=\"token comment\"># 距离屏幕宽300，高300的位置，创建一个宽300高200的窗口</span>\n        self<span class=\"token punctuation\">.</span>setGeometry<span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n\n\n\n        <span class=\"token comment\"># 应用于水平布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>hbox<span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 保留当前的坐标   用来移动位置</span>\n        self<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 槽方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sliderMoved</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 打印当前设的值</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>scrollbar1<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>scrollbar2<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>scrollbar3<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置调试板</span>\n        palette <span class=\"token operator\">=</span> QPalette<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置颜色</span>\n        c <span class=\"token operator\">=</span> QColor<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>scrollbar1<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>scrollbar2<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>scrollbar3<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n        palette<span class=\"token punctuation\">.</span>setColor<span class=\"token punctuation\">(</span>QPalette<span class=\"token punctuation\">.</span>Foreground<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">.</span>setPalette<span class=\"token punctuation\">(</span>palette<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 用button4演示移动</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sliderMoved1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># x轴坐标不变，用来垂直移动</span>\n        self<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>scrollbar4<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    demo<span class=\"token operator\">=</span> ScrollBar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    demo<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f93f9d04361347d9a70e308664e9ce81.png\"/></p>\n<h5><a id=\"81_7062\"></a>81.动态显示当前时间</h5>\n<p>涉及到PyQt5的多线程</p>\n<p>新建multithread文件夹，在multithread文件夹里新建ShowTime.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n动态显示当前时间\n\nQTimer  定时器  每隔一定时间会调用一次\nQThread\n\n多线程用于同时完成多个任务    在单CPU上是按顺序完成的(时间片切换)，从宏观上来看，还是同时完成的\n                         在多CPU上，是可以真正的同时完成\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> QWidget<span class=\"token punctuation\">,</span>QPushButton<span class=\"token punctuation\">,</span>QApplication<span class=\"token punctuation\">,</span>QListWidget<span class=\"token punctuation\">,</span>QGridLayout<span class=\"token punctuation\">,</span>QLabel\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> QTimer<span class=\"token punctuation\">,</span>QDateTime\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ShowTime</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>parent<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>ShowTime<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置窗口标题</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">\"动态显示当前时间\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建QLabel控件</span>\n        self<span class=\"token punctuation\">.</span>label <span class=\"token operator\">=</span> QLabel<span class=\"token punctuation\">(</span><span class=\"token string\">'显示当前时间'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建button按扭</span>\n        self<span class=\"token punctuation\">.</span>startBtn <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'开始'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建button按钮</span>\n        self<span class=\"token punctuation\">.</span>endBtn <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'结束'</span><span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 通过栅格布局，安排这三个控件的位置</span>\n        layout <span class=\"token operator\">=</span> QGridLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置定时器对象</span>\n        self<span class=\"token punctuation\">.</span>timer <span class=\"token operator\">=</span> QTimer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 时间的 信号 槽</span>\n        self<span class=\"token punctuation\">.</span>timer<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>showTime<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把这三个控件放到栅格布局里面</span>\n        <span class=\"token comment\"># 在第一行第一列   占用一行  占用两列</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 在第二行第一列</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>startBtn<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 在第二行第二列</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>endBtn<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 开始控件的信号 槽</span>\n        self<span class=\"token punctuation\">.</span>startBtn<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>startTimer<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 结束控件的信号 槽</span>\n        self<span class=\"token punctuation\">.</span>endBtn<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>endTimer<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 应用于栅格布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 槽方法</span>\n    <span class=\"token comment\"># 显示时间</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">showTime</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 获取当前的时间</span>\n        time <span class=\"token operator\">=</span> QDateTime<span class=\"token punctuation\">.</span>currentDateTime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置时间显示</span>\n        timeDisplay <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd hh:mm:ss dddd\"</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span>timeDisplay<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">startTimer</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 开始时间 1s</span>\n        self<span class=\"token punctuation\">.</span>timer<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 开始之后开始按钮关闭</span>\n        self<span class=\"token punctuation\">.</span>startBtn<span class=\"token punctuation\">.</span>setEnabled<span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 开始之后关闭按钮开始</span>\n        self<span class=\"token punctuation\">.</span>endBtn<span class=\"token punctuation\">.</span>setEnabled<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">endTimer</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>timer<span class=\"token punctuation\">.</span>stop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 开始之后开始按钮开始</span>\n        self<span class=\"token punctuation\">.</span>startBtn<span class=\"token punctuation\">.</span>setEnabled<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 开始之后关闭按钮关闭</span>\n        self<span class=\"token punctuation\">.</span>endBtn<span class=\"token punctuation\">.</span>setEnabled<span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    demo <span class=\"token operator\">=</span> ShowTime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    demo<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示:</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\695ccbf4f3e54a4cbc5a1fe327d2cc67.png\"/></p>\n<h5><a id=\"82_7158\"></a>82.让程序定时关闭</h5>\n<p>在multithread文件夹里新建AutoCloseWindow.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n让程序定时关闭\n\nQTimer.singleShot    在指定时间后只调用一次\n\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n\n    label <span class=\"token operator\">=</span>  QLabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;font color=red size=140&gt;&lt;b&gt;Hello World,窗口在5秒后自动关闭！&lt;/b&gt;&lt;/font&gt;\"</span><span class=\"token punctuation\">)</span>\n    label<span class=\"token punctuation\">.</span>setWindowFlags<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>SplashScreen <span class=\"token operator\">|</span> Qt<span class=\"token punctuation\">.</span>FramelessWindowHint<span class=\"token punctuation\">)</span>\n    label<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 设置五秒</span>\n    QTimer<span class=\"token punctuation\">.</span>singleShot<span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">,</span>app<span class=\"token punctuation\">.</span>quit<span class=\"token punctuation\">)</span>\n\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\95e1a52addb946fabceb4a98416ac370.png\"/></p>\n<h5><a id=\"83QThread_7193\"></a>83.使用线程类(QThread)编写计数器</h5>\n<p>在multithread文件夹里新建Counter.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n使用线程类(QThread)编写计数器\n\n基本原理\nQThread派生一个子类\n在这个子类里面定义一个run方法\ndef run(self):\n    while True:\n    # 每循环一次，休眠一秒钟\n        self.sleep(1)\n        # 当前循环等于5，直接退出\n        if sec == 5:\n            break;\n\nQLCDNumber控件\n\n\nWorkThread(QThread)\n用到自定义信号\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n\n<span class=\"token comment\"># 定义一个变量</span>\nsec <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WorkThread</span><span class=\"token punctuation\">(</span>QThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    timer <span class=\"token operator\">=</span> pyqtSignal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 每隔1秒发送一次信号</span>\n    end <span class=\"token operator\">=</span> pyqtSignal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\"># 计数完成后发送一次信号</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 休眠1秒</span>\n            <span class=\"token keyword\">if</span> sec <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">.</span>emit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 发送end信号</span>\n                <span class=\"token keyword\">break</span>\n            self<span class=\"token punctuation\">.</span>timer<span class=\"token punctuation\">.</span>emit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 发送timer信号</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>parent<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Counter<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">\"使用线程类(QThread)编写计数器\"</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建垂直布局</span>\n        layout <span class=\"token operator\">=</span> QVBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>lcdNumber <span class=\"token operator\">=</span> QLCDNumber<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>lcdNumber<span class=\"token punctuation\">)</span>\n\n        button <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'开始计数'</span><span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 创建工作线程对象</span>\n        self<span class=\"token punctuation\">.</span>workThread <span class=\"token operator\">=</span> WorkThread<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 绑定 信号 槽</span>\n        self<span class=\"token punctuation\">.</span>workThread<span class=\"token punctuation\">.</span>timer<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>countTime<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>workThread<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 槽和按钮的单击事件</span>\n        button<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>work<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 应用于垂直布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 槽方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">countTime</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># global 声明全局变量</span>\n        <span class=\"token keyword\">global</span> sec\n        sec <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        self<span class=\"token punctuation\">.</span>lcdNumber<span class=\"token punctuation\">.</span>display<span class=\"token punctuation\">(</span>sec<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        QMessageBox<span class=\"token punctuation\">.</span>information<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span><span class=\"token string\">'消息'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'计数结束'</span><span class=\"token punctuation\">,</span>QMessageBox<span class=\"token punctuation\">.</span>Ok<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>workThread<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    demo <span class=\"token operator\">=</span>Counter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    demo<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p>效果展示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d44d5218343747c3bd769d12064b96af.png\"/></p>\n<h5><a id=\"84WebQWebEngineView_7291\"></a>84.用Web浏览器控制(QWebEngineView)显示网页</h5>\n<p>新建web文件夹，在web文件夹里新建WebEngineView.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n用Web浏览器控件(QWebEngineView)显示网页\nPyQt5和Web的交互技术\n\n同时使用Python和web开发程序，混合开发\nPython + JavaScript + HTML5 + CSS\n\nQWebEngineView 控件，用来显示Web交互界面\n\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWebEngineWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WebEngineView</span><span class=\"token punctuation\">(</span>QMainWindow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>WebEngineView<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'打开外部网页例子'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 在距屏幕宽5px,高30px的坐标，创建一个宽1355，高730的窗口</span>\n        self<span class=\"token punctuation\">.</span>setGeometry<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">1355</span><span class=\"token punctuation\">,</span><span class=\"token number\">730</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>browser <span class=\"token operator\">=</span> QWebEngineView<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>browser<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>QUrl<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.baidu.com/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>setCentralWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>browser<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    win <span class=\"token operator\">=</span> WebEngineView<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    win<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>运行过程中，遇到了：No module named ‘PyQt5.QtWebEngineWidgets’</p>\n<p>解决办法：</p>\n<p>【方法一】 指定安装5.10.1版本的pyqt5</p>\n<pre><code>pip install pyqt5==5.10.1\n</code></pre>\n<p>【方法二】 单独安装WebEngine，安装命令为：</p>\n<pre><code>pip install PyQtWebEngine\n</code></pre>\n<p>效果展示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3f7981db8a4f4de5bcdea38f46c5e84b.png\"/></p>\n<h5><a id=\"85Web_7353\"></a>85.装载本地Web页面</h5>\n<p>在web文件夹新建test.html文件，添加代码如下：</p>\n<pre><code class=\"prism language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>测试<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>Hello PyQt5!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>晚上好<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>spam</span><span class=\"token punctuation\">&gt;</span></span>幸苦了<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>spam</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>在web文件夹里新建LocalHTML.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n装在本地Web页面\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWebEngineWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WebEngineView</span><span class=\"token punctuation\">(</span>QMainWindow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>WebEngineView<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">\"装载本地Web页面\"</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>setGeometry<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">1355</span><span class=\"token punctuation\">,</span><span class=\"token number\">730</span><span class=\"token punctuation\">)</span>\n        url <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/test.html'</span>\n        self<span class=\"token punctuation\">.</span>browser <span class=\"token operator\">=</span>  QWebEngineView<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>browser<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>QUrl<span class=\"token punctuation\">.</span>fromLocalFile<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>setCentralWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>browser<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span>    QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    demo <span class=\"token operator\">=</span> WebEngineView<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    demo<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2b4d1fe4f5e54d57851b679135251eab.png\"/></p>\n<h5><a id=\"86Web_7411\"></a>86.显示嵌入Web页面</h5>\n<p>在new文件里新建InnerHTML.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n显示嵌入Web页面\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWebEngineWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">InnerHTML</span><span class=\"token punctuation\">(</span>QMainWindow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>InnerHTML<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'显示嵌入Web页面'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>setGeometry<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">1355</span><span class=\"token punctuation\">,</span><span class=\"token number\">730</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>browsesr <span class=\"token operator\">=</span> QWebEngineView<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>browsesr<span class=\"token punctuation\">.</span>setHtml<span class=\"token punctuation\">(</span>\n            <span class=\"token triple-quoted-string string\">\"\"\"\n            &lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;测试显示&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hello PyQt5!&lt;/h1&gt;\n    &lt;div&gt;显示Web页面&lt;/div&gt;\n    &lt;spam&gt;幸苦了&lt;/spam&gt;\n&lt;/body&gt;\n&lt;/html&gt;          \n            \"\"\"</span>\n        <span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置成中心控件</span>\n        self<span class=\"token punctuation\">.</span>setCentralWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>browsesr<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span>QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    demo <span class=\"token operator\">=</span> InnerHTML<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    demo<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f09acd8902664138b799a3963007d18c.png\"/></p>\n<h6><a id=\"PyQt5web_7464\"></a>总结：PyQt5支持的三种装载web页面的方式：</h6>\n<p>1.通过标准的QUrl</p>\n<p>2.从本地装载Qurl.fromLocalFile(url)</p>\n<p>3.用setHtml直接装载HTML</p>\n<h5><a id=\"87PyQt5JavaScript_7472\"></a>87.PyQt5调用JavaScript代码</h5>\n<p>在web文件夹里新建demo1.html文件，添加如下代码：</p>\n<pre><code class=\"prism language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>测试页面<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script language-javascript\">\n        <span class=\"token keyword\">function</span> <span class=\"token function\">fullname</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;\"</span> <span class=\"token operator\">+</span> value <span class=\"token operator\">+</span> <span class=\"token string\">\"&gt;\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">var</span> firstname <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'firstname'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> lastname <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lastname'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> fullname <span class=\"token operator\">=</span> firstname <span class=\"token operator\">+</span> <span class=\"token string\">''</span> <span class=\"token operator\">+</span> lastname<span class=\"token punctuation\">;</span>\n\n            document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fullname'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> fullname<span class=\"token punctuation\">;</span>\n            document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'submit-btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">\"block\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> fullname<span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span>First Name:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>firstname<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>firstname<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>input</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span>First Name:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>lastname<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>lastname<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>input</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span>First Name:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fullname<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fullname<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>input</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submit-btn<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>在web文件夹里新建PyQtCallJS.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\nPyQt5调用JavaScript代码\n\nPyQt5和JavaScript交互\nPyQt5和JavaScript互相调用，互相传输数据\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWebEngineWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PyQtCallJS</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>PyQtCallJS<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'PyQt5调用JavaScript'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>setGeometry<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">1355</span><span class=\"token punctuation\">,</span><span class=\"token number\">730</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置垂直布局</span>\n        self<span class=\"token punctuation\">.</span>layout <span class=\"token operator\">=</span> QVBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 应用于垂直布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 设置Web页面控件</span>\n        self<span class=\"token punctuation\">.</span>browser <span class=\"token operator\">=</span>  QWebEngineView<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        url <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/demo1.html'</span>\n        self<span class=\"token punctuation\">.</span>browser<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>QUrl<span class=\"token punctuation\">.</span>fromLocalFile<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把web控件放到布局里</span>\n        self<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>browser<span class=\"token punctuation\">)</span>\n\n        button <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'设置全名'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 槽和信号绑定</span>\n        button<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>fullname<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 添加按钮的单击事件</span>\n    <span class=\"token comment\"># 前两个框自己输入，最后一个框自动相加</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">fullname</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'hello world'</span>\n        self<span class=\"token punctuation\">.</span>browser<span class=\"token punctuation\">.</span>page<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>runJavaScript<span class=\"token punctuation\">(</span><span class=\"token string\">'fullname(\"'</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span><span class=\"token string\">'\");'</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>js_callback<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 通过回调函数返回值</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">js_callback</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    demo <span class=\"token operator\">=</span> PyQtCallJS<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    demo<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果如下：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fdc2c1e6f60e4bb581149679736582ec.png\"/></p>\n<h5><a id=\"88JavaScriptPythonAPI_7576\"></a>88.JavaScript调用PythonAPI计算阶乘</h5>\n<p>在web文件夹里新建qwebchannel.is文件，添加代码：</p>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">/****************************************************************************\n**\n** Copyright (C) 2016 The Qt Company Ltd.\n** Copyright (C) 2016 Klar채lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Milian Wolff &lt;milian.wolff@kdab.com&gt;\n** Contact: https://www.qt.io/licensing/\n**\n** This file is part of the QtWebChannel module of the Qt Toolkit.\n**\n** $QT_BEGIN_LICENSE:LGPL$\n** Commercial License Usage\n** Licensees holding valid commercial Qt licenses may use this file in\n** accordance with the commercial license agreement provided with the\n** Software or, alternatively, in accordance with the terms contained in\n** a written agreement between you and The Qt Company. For licensing terms\n** and conditions see https://www.qt.io/terms-conditions. For further\n** information use the contact form at https://www.qt.io/contact-us.\n**\n** GNU Lesser General Public License Usage\n** Alternatively, this file may be used under the terms of the GNU Lesser\n** General Public License version 3 as published by the Free Software\n** Foundation and appearing in the file LICENSE.LGPL3 included in the\n** packaging of this file. Please review the following information to\n** ensure the GNU Lesser General Public License version 3 requirements\n** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.\n**\n** GNU General Public License Usage\n** Alternatively, this file may be used under the terms of the GNU\n** General Public License version 2.0 or (at your option) the GNU General\n** Public license version 3 or any later version approved by the KDE Free\n** Qt Foundation. The licenses are as published by the Free Software\n** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3\n** included in the packaging of this file. Please review the following\n** information to ensure the GNU General Public License requirements will\n** be met: https://www.gnu.org/licenses/gpl-2.0.html and\n** https://www.gnu.org/licenses/gpl-3.0.html.\n**\n** $QT_END_LICENSE$\n**\n****************************************************************************/</span>\n\n<span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> QWebChannelMessageTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    signal<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    propertyUpdate<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    init<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    idle<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n    debug<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n    invokeMethod<span class=\"token punctuation\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n    connectToSignal<span class=\"token punctuation\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n    disconnectFromSignal<span class=\"token punctuation\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n    setProperty<span class=\"token punctuation\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n    response<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">QWebChannel</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>transport<span class=\"token punctuation\">,</span> initCallback<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> transport <span class=\"token operator\">!==</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> transport<span class=\"token punctuation\">.</span>send <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The QWebChannel expects a transport object with a send function and onmessage callback property.\"</span> <span class=\"token operator\">+</span>\n                      <span class=\"token string\">\" Given is: transport: \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>transport<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", transport.send: \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>transport<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> channel <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transport <span class=\"token operator\">=</span> transport<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">send</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            data <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        channel<span class=\"token punctuation\">.</span>transport<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transport<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> message<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> data <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            data <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">case</span> QWebChannelMessageTypes<span class=\"token punctuation\">.</span>signal<span class=\"token punctuation\">:</span>\n                channel<span class=\"token punctuation\">.</span><span class=\"token function\">handleSignal</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> QWebChannelMessageTypes<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">:</span>\n                channel<span class=\"token punctuation\">.</span><span class=\"token function\">handleResponse</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> QWebChannelMessageTypes<span class=\"token punctuation\">.</span>propertyUpdate<span class=\"token punctuation\">:</span>\n                channel<span class=\"token punctuation\">.</span><span class=\"token function\">handlePropertyUpdate</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invalid message received:\"</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>execCallbacks <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>execId <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exec</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// if no callback is given, send directly</span>\n            channel<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">.</span>execId <span class=\"token operator\">===</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// wrap</span>\n            channel<span class=\"token punctuation\">.</span>execId <span class=\"token operator\">=</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MIN_VALUE</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot exec message with property id: \"</span> <span class=\"token operator\">+</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        data<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span>execId<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        channel<span class=\"token punctuation\">.</span>execCallbacks<span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> callback<span class=\"token punctuation\">;</span>\n        channel<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>objects <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">handleSignal</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">var</span> object <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">[</span>message<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            object<span class=\"token punctuation\">.</span><span class=\"token function\">signalEmitted</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span>signal<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unhandled signal: \"</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">.</span>object <span class=\"token operator\">+</span> <span class=\"token string\">\"::\"</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">.</span>signal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">handleResponse</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid response message received: \"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        channel<span class=\"token punctuation\">.</span>execCallbacks<span class=\"token punctuation\">[</span>message<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">delete</span> channel<span class=\"token punctuation\">.</span>execCallbacks<span class=\"token punctuation\">[</span>message<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">handlePropertyUpdate</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        message<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">var</span> object <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                object<span class=\"token punctuation\">.</span><span class=\"token function\">propertyUpdate</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>signals<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unhandled property update: \"</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">.</span>object <span class=\"token operator\">+</span> <span class=\"token string\">\"::\"</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">.</span>signal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        channel<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>type<span class=\"token punctuation\">:</span> QWebChannelMessageTypes<span class=\"token punctuation\">.</span>idle<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">debug</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        channel<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>type<span class=\"token punctuation\">:</span> QWebChannelMessageTypes<span class=\"token punctuation\">.</span>debug<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">:</span> message<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    channel<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>type<span class=\"token punctuation\">:</span> QWebChannelMessageTypes<span class=\"token punctuation\">.</span>init<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> objectName <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">QObject</span><span class=\"token punctuation\">(</span>objectName<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>objectName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// now unwrap properties, which might reference other registered objects</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> objectName <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            channel<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">[</span>objectName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrapProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initCallback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">initCallback</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        channel<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>type<span class=\"token punctuation\">:</span> QWebChannelMessageTypes<span class=\"token punctuation\">.</span>idle<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">QObject</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> webChannel<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>__id__ <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    webChannel<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// List of callbacks that get invoked upon signal emission</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>__objectSignals__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Cache of all properties, updated when a notify signal is emitted</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>__propertyCache__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> object <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ----------------------------------------------------------------------</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">unwrapQObject</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// support list of objects</span>\n            <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>qobj <span class=\"token operator\">=&gt;</span> object<span class=\"token punctuation\">.</span><span class=\"token function\">unwrapQObject</span><span class=\"token punctuation\">(</span>qobj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>response <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>response<span class=\"token punctuation\">[</span><span class=\"token string\">\"__QObject*__\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> response<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">var</span> jObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> propName <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                jObj<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> object<span class=\"token punctuation\">.</span><span class=\"token function\">unwrapQObject</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> jObj<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">var</span> objectId <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>webChannel<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">[</span>objectId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> webChannel<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">[</span>objectId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot unwrap unknown QObject \"</span> <span class=\"token operator\">+</span> objectId <span class=\"token operator\">+</span> <span class=\"token string\">\" without data.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">var</span> qObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QObject</span><span class=\"token punctuation\">(</span> objectId<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> webChannel <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        qObject<span class=\"token punctuation\">.</span>destroyed<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>webChannel<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">[</span>objectId<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> qObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">delete</span> webChannel<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">[</span>objectId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// reset the now deleted QObject to an empty {} object</span>\n                <span class=\"token comment\">// just assigning {} though would not have the desired effect, but the</span>\n                <span class=\"token comment\">// below also ensures all external references will see the empty map</span>\n                <span class=\"token comment\">// NOTE: this detour is necessary to workaround QTBUG-40021</span>\n                Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>qObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">delete</span> qObject<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// here we are already initialized, and thus must directly unwrap the properties</span>\n        qObject<span class=\"token punctuation\">.</span><span class=\"token function\">unwrapProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> qObject<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">unwrapProperties</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> propertyIdx <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>__propertyCache__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            object<span class=\"token punctuation\">.</span>__propertyCache__<span class=\"token punctuation\">[</span>propertyIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> object<span class=\"token punctuation\">.</span><span class=\"token function\">unwrapQObject</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>__propertyCache__<span class=\"token punctuation\">[</span>propertyIdx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">addSignal</span><span class=\"token punctuation\">(</span>signalData<span class=\"token punctuation\">,</span> isPropertyNotifySignal<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">var</span> signalName <span class=\"token operator\">=</span> signalData<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> signalIndex <span class=\"token operator\">=</span> signalData<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        object<span class=\"token punctuation\">[</span>signalName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n            connect<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad callback given to connect to signal \"</span> <span class=\"token operator\">+</span> signalName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                object<span class=\"token punctuation\">.</span>__objectSignals__<span class=\"token punctuation\">[</span>signalIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> object<span class=\"token punctuation\">.</span>__objectSignals__<span class=\"token punctuation\">[</span>signalIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                object<span class=\"token punctuation\">.</span>__objectSignals__<span class=\"token punctuation\">[</span>signalIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// only required for \"pure\" signals, handled separately for properties in propertyUpdate</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isPropertyNotifySignal<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// also note that we always get notified about the destroyed signal</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>signalName <span class=\"token operator\">===</span> <span class=\"token string\">\"destroyed\"</span> <span class=\"token operator\">||</span> signalName <span class=\"token operator\">===</span> <span class=\"token string\">\"destroyed()\"</span> <span class=\"token operator\">||</span> signalName <span class=\"token operator\">===</span> <span class=\"token string\">\"destroyed(QObject*)\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// and otherwise we only need to be connected only once</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>__objectSignals__<span class=\"token punctuation\">[</span>signalIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    webChannel<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n                        type<span class=\"token punctuation\">:</span> QWebChannelMessageTypes<span class=\"token punctuation\">.</span>connectToSignal<span class=\"token punctuation\">,</span>\n                        object<span class=\"token punctuation\">:</span> object<span class=\"token punctuation\">.</span>__id__<span class=\"token punctuation\">,</span>\n                        signal<span class=\"token punctuation\">:</span> signalIndex\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            disconnect<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad callback given to disconnect from signal \"</span> <span class=\"token operator\">+</span> signalName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                object<span class=\"token punctuation\">.</span>__objectSignals__<span class=\"token punctuation\">[</span>signalIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> object<span class=\"token punctuation\">.</span>__objectSignals__<span class=\"token punctuation\">[</span>signalIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">var</span> idx <span class=\"token operator\">=</span> object<span class=\"token punctuation\">.</span>__objectSignals__<span class=\"token punctuation\">[</span>signalIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot find connection of signal \"</span> <span class=\"token operator\">+</span> signalName <span class=\"token operator\">+</span> <span class=\"token string\">\" to \"</span> <span class=\"token operator\">+</span> callback<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                object<span class=\"token punctuation\">.</span>__objectSignals__<span class=\"token punctuation\">[</span>signalIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isPropertyNotifySignal <span class=\"token operator\">&amp;&amp;</span> object<span class=\"token punctuation\">.</span>__objectSignals__<span class=\"token punctuation\">[</span>signalIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">// only required for \"pure\" signals, handled separately for properties in propertyUpdate</span>\n                    webChannel<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n                        type<span class=\"token punctuation\">:</span> QWebChannelMessageTypes<span class=\"token punctuation\">.</span>disconnectFromSignal<span class=\"token punctuation\">,</span>\n                        object<span class=\"token punctuation\">:</span> object<span class=\"token punctuation\">.</span>__id__<span class=\"token punctuation\">,</span>\n                        signal<span class=\"token punctuation\">:</span> signalIndex\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Invokes all callbacks for the given signalname. Also works for property notify callbacks.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">invokeSignalCallbacks</span><span class=\"token punctuation\">(</span>signalName<span class=\"token punctuation\">,</span> signalArgs<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">var</span> connections <span class=\"token operator\">=</span> object<span class=\"token punctuation\">.</span>__objectSignals__<span class=\"token punctuation\">[</span>signalName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connections<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            connections<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                callback<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span> signalArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">propertyUpdate</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>signals<span class=\"token punctuation\">,</span> propertyMap<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// update property cache</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> propertyIndex <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>propertyMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">var</span> propertyValue <span class=\"token operator\">=</span> propertyMap<span class=\"token punctuation\">[</span>propertyIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            object<span class=\"token punctuation\">.</span>__propertyCache__<span class=\"token punctuation\">[</span>propertyIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrapQObject</span><span class=\"token punctuation\">(</span>propertyValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> signalName <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>signals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// Invoke all callbacks, as signalEmitted() does not. This ensures the</span>\n            <span class=\"token comment\">// property cache is updated before the callbacks are invoked.</span>\n            <span class=\"token function\">invokeSignalCallbacks</span><span class=\"token punctuation\">(</span>signalName<span class=\"token punctuation\">,</span> signals<span class=\"token punctuation\">[</span>signalName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">signalEmitted</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>signalName<span class=\"token punctuation\">,</span> signalArgs<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">invokeSignalCallbacks</span><span class=\"token punctuation\">(</span>signalName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrapQObject</span><span class=\"token punctuation\">(</span>signalArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">addMethod</span><span class=\"token punctuation\">(</span>methodData<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">var</span> methodName <span class=\"token operator\">=</span> methodData<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> methodIdx <span class=\"token operator\">=</span> methodData<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Fully specified methods are invoked by id, others by name for host-side overload resolution</span>\n        <span class=\"token keyword\">var</span> invokedMethod <span class=\"token operator\">=</span> methodName<span class=\"token punctuation\">[</span>methodName<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">')'</span> <span class=\"token operator\">?</span> methodIdx <span class=\"token punctuation\">:</span> methodName\n\n        object<span class=\"token punctuation\">[</span>methodName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> callback<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> errCallback<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">var</span> argument <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> argument <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span>\n                    callback <span class=\"token operator\">=</span> argument<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argument <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">QObject</span> <span class=\"token operator\">&amp;&amp;</span> webChannel<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">[</span>argument<span class=\"token punctuation\">.</span>__id__<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> undefined<span class=\"token punctuation\">)</span>\n                    args<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span> argument<span class=\"token punctuation\">.</span>__id__\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span>\n                    args<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">var</span> result<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// during test, webChannel.exec synchronously calls the callback</span>\n            <span class=\"token comment\">// therefore, the promise must be constucted before calling</span>\n            <span class=\"token comment\">// webChannel.exec to ensure the callback is set up</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>callback <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>Promise<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n              result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                callback <span class=\"token operator\">=</span> resolve<span class=\"token punctuation\">;</span>\n                errCallback <span class=\"token operator\">=</span> reject<span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            webChannel<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token string\">\"type\"</span><span class=\"token punctuation\">:</span> QWebChannelMessageTypes<span class=\"token punctuation\">.</span>invokeMethod<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">:</span> object<span class=\"token punctuation\">.</span>__id__<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"method\"</span><span class=\"token punctuation\">:</span> invokedMethod<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"args\"</span><span class=\"token punctuation\">:</span> args\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response <span class=\"token operator\">!==</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> object<span class=\"token punctuation\">.</span><span class=\"token function\">unwrapQObject</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errCallback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                  <span class=\"token punctuation\">(</span>errCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">bindGetterSetter</span><span class=\"token punctuation\">(</span>propertyInfo<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">var</span> propertyIndex <span class=\"token operator\">=</span> propertyInfo<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> propertyName <span class=\"token operator\">=</span> propertyInfo<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> notifySignalData <span class=\"token operator\">=</span> propertyInfo<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// initialize property cache with current value</span>\n        <span class=\"token comment\">// NOTE: if this is an object, it is not directly unwrapped as it might</span>\n        <span class=\"token comment\">// reference other QObject that we do not know yet</span>\n        object<span class=\"token punctuation\">.</span>__propertyCache__<span class=\"token punctuation\">[</span>propertyIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> propertyInfo<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>notifySignalData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>notifySignalData<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">// signal name is optimized away, reconstruct the actual name</span>\n                notifySignalData<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> propertyName <span class=\"token operator\">+</span> <span class=\"token string\">\"Changed\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">addSignal</span><span class=\"token punctuation\">(</span>notifySignalData<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">,</span> propertyName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n            configurable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">get</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">var</span> propertyValue <span class=\"token operator\">=</span> object<span class=\"token punctuation\">.</span>__propertyCache__<span class=\"token punctuation\">[</span>propertyIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propertyValue <span class=\"token operator\">===</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">// This shouldn't happen</span>\n                    console<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Undefined value in property cache for property \\\"\"</span> <span class=\"token operator\">+</span> propertyName <span class=\"token operator\">+</span> <span class=\"token string\">\"\\\" in object \"</span> <span class=\"token operator\">+</span> object<span class=\"token punctuation\">.</span>__id__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">return</span> propertyValue<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">set</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    console<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Property setter for \"</span> <span class=\"token operator\">+</span> propertyName <span class=\"token operator\">+</span> <span class=\"token string\">\" called with undefined value!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                object<span class=\"token punctuation\">.</span>__propertyCache__<span class=\"token punctuation\">[</span>propertyIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">var</span> valueToSend <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>valueToSend <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">QObject</span> <span class=\"token operator\">&amp;&amp;</span> webChannel<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">[</span>valueToSend<span class=\"token punctuation\">.</span>__id__<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> undefined<span class=\"token punctuation\">)</span>\n                    valueToSend <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span> valueToSend<span class=\"token punctuation\">.</span>__id__ <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                webChannel<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token string\">\"type\"</span><span class=\"token punctuation\">:</span> QWebChannelMessageTypes<span class=\"token punctuation\">.</span>setProperty<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">:</span> object<span class=\"token punctuation\">.</span>__id__<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"property\"</span><span class=\"token punctuation\">:</span> propertyIndex<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">:</span> valueToSend\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ----------------------------------------------------------------------</span>\n\n    data<span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>addMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    data<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>bindGetterSetter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    data<span class=\"token punctuation\">.</span>signals<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>signal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token function\">addSignal</span><span class=\"token punctuation\">(</span>signal<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>enums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//required for use with nodejs</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> module <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n        QWebChannel<span class=\"token punctuation\">:</span> QWebChannel\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在web文件夹里新建h.html文件，添加代码：</p>\n<pre><code class=\"prism language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>A Demo Page<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./qwebchannel.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">language</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script language-javascript\">\n\n        <span class=\"token keyword\">function</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"计算结果：\"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span>\n\n        <span class=\"token punctuation\">}</span>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DOMContentLoaded\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">QWebChannel</span><span class=\"token punctuation\">(</span> qt<span class=\"token punctuation\">.</span>webChannelTransport<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n                window<span class=\"token punctuation\">.</span>obj <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">;</span>\n\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">function</span>  <span class=\"token function\">onFactorial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> window<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    window<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>callback<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n\n            <span class=\"token punctuation\">}</span>\n\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span>请输入N:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>n<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>计算阶乘<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>onFactorial()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>在web文件夹里新建factorical.py文件，添加代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n用Python语言编写计算阶乘的类\n\"\"\"</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Factorial</span><span class=\"token punctuation\">(</span>QObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    @pyqtSlot<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>result<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">or</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>factorial<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> n\n\n\n</code></pre>\n<p>在web文件夹里新建PyFactorial.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\nJavaScript调用Python函数计算阶乘\n\n基本原理\n将Python的对象映射到JavaScript中，\n通过映射到JavaScript的对象，来调用Python对象的方法或者函数\n\n将槽函数映射到JavaScript中\n\n在Python类中定义若干个槽函数\n系统就会把槽函数连同JavaScript对象一起映射到JavaScript里面\n\n\n调用JS，都是采用异步的方式 加一个回调  window.obj.factorial(n,callback)\n\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> os\n\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWebChannel <span class=\"token keyword\">import</span> QWebChannel\n\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWebEngineWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">from</span> web<span class=\"token punctuation\">.</span>factorial <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\nchannel <span class=\"token operator\">=</span>QWebChannel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfactorial <span class=\"token operator\">=</span> Factorial<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PyFactorial</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>PyFactorial<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'Python计算阶乘'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">600</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n        layout <span class=\"token operator\">=</span> QVBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n        self<span class=\"token punctuation\">.</span>browser <span class=\"token operator\">=</span> QWebEngineView<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        url <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/h.html'</span>\n        self<span class=\"token punctuation\">.</span>browser<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>QUrl<span class=\"token punctuation\">.</span>fromLocalFile<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        channel<span class=\"token punctuation\">.</span>registerObject<span class=\"token punctuation\">(</span><span class=\"token string\">\"obj\"</span><span class=\"token punctuation\">,</span>factorial<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>browser<span class=\"token punctuation\">.</span>page<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setWebChannel<span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span>\n\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>browser<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    demo <span class=\"token operator\">=</span> PyFactorial<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    demo<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\15af9a0423fa47198f28af85690d25e3.png\"/></p>\n<h5><a id=\"89_8162\"></a>89.绝对布局</h5>\n<p>新建layout文件夹，在layout文件夹里面新建AbsoluteLayout.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n绝对布局\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> sys<span class=\"token punctuation\">,</span>math\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AbsoluteLayout</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>AbsoluteLayout<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'绝对布局'</span><span class=\"token punctuation\">)</span>\n\n\n        self<span class=\"token punctuation\">.</span>label1 <span class=\"token operator\">=</span> QLabel<span class=\"token punctuation\">(</span><span class=\"token string\">'欢迎'</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>label1<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>label2 <span class=\"token operator\">=</span> QLabel<span class=\"token punctuation\">(</span><span class=\"token string\">'学习'</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>label2<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>label3 <span class=\"token operator\">=</span> QLabel<span class=\"token punctuation\">(</span><span class=\"token string\">'PyQt5'</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>label3<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    demo <span class=\"token operator\">=</span> AbsoluteLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    demo<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bcb7845be7f74cd195cc1e39207eaf4d.png\"/></p>\n<h5><a id=\"90_8200\"></a>90.水平盒布局</h5>\n<p>在layout文件夹里面新建HBoxLayout.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n水平盒布局(QHBoxLayout)\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> sys<span class=\"token punctuation\">,</span>math\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HBoxLayout</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>HBoxLayout<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'水平盒布局'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建水平盒布局</span>\n        hlayout <span class=\"token operator\">=</span> QHBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 往布局里添加按钮控件</span>\n        hlayout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'按钮1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        hlayout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'按钮2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        hlayout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'按钮3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        hlayout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'按钮4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        hlayout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'按钮5'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 此时按钮就会在水平方向等距的排列</span>\n\n        <span class=\"token comment\"># 设置控件之间的间距</span>\n        hlayout<span class=\"token punctuation\">.</span>setSpacing<span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 应用水平盒布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>hlayout<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    demo <span class=\"token operator\">=</span> HBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    demo<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8c4397201bbc4acf9505c44cf3a06da0.png\"/></p>\n<h5><a id=\"91_8246\"></a>91.设置控件的对齐方式</h5>\n<p>在layout文件夹里面新建HBoxLayoutAlign.py文件，执行代码：</p>\n<pre><code>\"\"\"\n设置控件的对齐方式\n\n左对齐  右对齐  顶端对齐  底端对齐\n\"\"\"\n\nimport sys,math\nfrom PyQt5.QtWidgets import *\nfrom PyQt5.QtCore import Qt\n\n\nclass HBoxLayoutAlign(QWidget):\n    def __init__(self):\n        super(HBoxLayoutAlign, self).__init__()\n        self.setWindowTitle('设置控件的对齐方式')\n        # 创建水平盒布局\n        hlayout = QHBoxLayout()\n\n        # 往布局里添加按钮控件\n\n        # 按钮1设置左对齐 顶端对齐\n        hlayout.addWidget(QPushButton('按钮1'),1,Qt.AlignLeft | Qt.AlignTop)\n        hlayout.addWidget(QPushButton('按钮2'),2,Qt.AlignLeft | Qt.AlignTop)\n        hlayout.addWidget(QPushButton('按钮3'))\n        hlayout.addWidget(QPushButton('按钮4'),1,Qt.AlignLeft | Qt.AlignBottom)\n        hlayout.addWidget(QPushButton('按钮5'),1,Qt.AlignLeft | Qt.AlignBottom)\n\n        # 此时按钮就会在水平方向等距的排列\n\n        # 设置控件之间的间距\n        hlayout.setSpacing(40)\n\n        # 应用水平盒布局\n        self.setLayout(hlayout)\n\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    demo = HBoxLayoutAlign()\n    demo.show()\n    sys.exit(app.exec_())\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b97e230ce71b4fb089e061b5ef4ad9b6.png\"/></p>\n<p>92.垂直盒布局</p>\n<p>在layout文件夹里面新建VBoxLayout.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n垂直盒布局(QVBoxLayout)\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> sys<span class=\"token punctuation\">,</span>math\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HVoxLayout</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>HVoxLayout<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'垂直盒布局'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 创建水平盒布局</span>\n        hlayout <span class=\"token operator\">=</span> QVBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 往布局里添加按钮控件</span>\n        hlayout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'按钮1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        hlayout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'按钮2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        hlayout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'按钮3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        hlayout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'按钮4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        hlayout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'按钮5'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 此时按钮就会在水平方向等距的排列</span>\n\n        <span class=\"token comment\"># 设置控件之间的间距</span>\n        hlayout<span class=\"token punctuation\">.</span>setSpacing<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 应用水平盒布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>hlayout<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    demo <span class=\"token operator\">=</span> HVoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    demo<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a77fcd08a3fd46dfb691356922c4c1cc.png\"/></p>\n<h5><a id=\"92addStretch_8344\"></a>92.设置伸缩量(addStretch)</h5>\n<p>在layout文件夹里面新建Stretch.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n设置伸缩量(addStretch)\n\n有多种方式，\nHBoxLayoutAlign.py中\nhlayout.addWidget(QPushButton('按钮1'),1,Qt.AlignLeft | Qt.AlignTop) 中的第二个参数 1 就是伸缩量\n\"\"\"</span>\n\n\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Stretch</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Stretch<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">\"设置伸缩量\"</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">800</span><span class=\"token punctuation\">,</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 添加三个按钮</span>\n        btn1 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        btn2 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        btn3 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        btn4 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        btn5 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 分别设置文本</span>\n        btn1<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token string\">'按钮1'</span><span class=\"token punctuation\">)</span>\n        btn2<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token string\">'按钮2'</span><span class=\"token punctuation\">)</span>\n        btn3<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token string\">'按钮3'</span><span class=\"token punctuation\">)</span>\n        btn4<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token string\">'按钮4'</span><span class=\"token punctuation\">)</span>\n        btn5<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token string\">'按钮5'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 放置水平布局</span>\n        layout <span class=\"token operator\">=</span> QHBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 把三个按钮添加到布局里</span>\n        layout<span class=\"token punctuation\">.</span>addStretch<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>btn1<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>btn2<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>btn3<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>btn4<span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>btn5<span class=\"token punctuation\">)</span>\n\n\n        btnOK <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        btnOK<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token string\">\"确定\"</span><span class=\"token punctuation\">)</span>\n\n        layout<span class=\"token punctuation\">.</span>addStretch<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>btnOK<span class=\"token punctuation\">)</span>\n\n        btnCancel <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        btnCancel<span class=\"token punctuation\">.</span>setText<span class=\"token punctuation\">(</span><span class=\"token string\">\"取消\"</span><span class=\"token punctuation\">)</span>\n\n        layout<span class=\"token punctuation\">.</span>addStretch<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>btnCancel<span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 应用于水平布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    demo <span class=\"token operator\">=</span> Stretch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    demo<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2d04406f06644105b774dc541e96b7fe.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\56c3f5ab0ebc4e53a319ab18dc213852.png\"/></p>\n<h5><a id=\"93_8426\"></a>93.让按钮永远在窗口的右下角</h5>\n<p>在layout文件夹里面新建RightBottomButton.py文件，执行代码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n让按钮永远在窗口右下角\n\n基本原理：\n一分为二界面\n上面任意布局\n按钮放在水平布局里面\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RightBottomButton</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>RightBottomButton<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'让按钮永远在右下角'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 添加两个按钮</span>\n        okButton <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">\"确定\"</span><span class=\"token punctuation\">)</span>\n        cancelButton <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">\"取消\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 设置水平盒布局</span>\n        hbox <span class=\"token operator\">=</span> QHBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        hbox<span class=\"token punctuation\">.</span>addStretch<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        hbox<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>okButton<span class=\"token punctuation\">)</span>\n        hbox<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>cancelButton<span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 设置垂直盒布局</span>\n        vbox <span class=\"token operator\">=</span> QVBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        btn1 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'按钮1'</span><span class=\"token punctuation\">)</span>\n        btn2 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'按钮2'</span><span class=\"token punctuation\">)</span>\n        btn3 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'按钮3'</span><span class=\"token punctuation\">)</span>\n        btn4 <span class=\"token operator\">=</span>  QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'按钮4'</span><span class=\"token punctuation\">)</span>\n        btn5 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'按钮5'</span><span class=\"token punctuation\">)</span>\n\n        vbox<span class=\"token punctuation\">.</span>addStrut<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        vbox<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>btn1<span class=\"token punctuation\">)</span>\n        vbox<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>btn2<span class=\"token punctuation\">)</span>\n        vbox<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>btn3<span class=\"token punctuation\">)</span>\n        vbox<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>btn4<span class=\"token punctuation\">)</span>\n        vbox<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>btn5<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 把水平盒布局添加到垂直盒布局里</span>\n        vbox<span class=\"token punctuation\">.</span>addStrut<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        vbox<span class=\"token punctuation\">.</span>addLayout<span class=\"token punctuation\">(</span>hbox<span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 应用于垂直盒布局</span>\n        self<span class=\"token punctuation\">.</span>setLayout<span class=\"token punctuation\">(</span>vbox<span class=\"token punctuation\">)</span>\n\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n    demo <span class=\"token operator\">=</span> RightBottomButton<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    demo<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>效果展示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\63b44e18311c496183a02746e5af1acd.png\"/></p>\n<p>未完待续…</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 1, "csharp": 1, "python": 1, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-03-13 15:57:55", "summary": "保姆级教程从入门到精通主要内容：基本窗口控件、、、、菜单、工具栏等高级组件、、容器、线程等布局管理、、、嵌套布局等信号与槽事件处理、数据传递等图形与特效定制窗口风格、绘图、与美化、不规则窗口、设置样式"}