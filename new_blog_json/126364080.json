{"blogid": "126364080", "writerAge": "码龄11年", "writerBlogNum": "84", "writerCollect": "636", "writerComment": "1033", "writerFan": "1072", "writerGrade": "5级", "writerIntegral": "3542", "writerName": "yelangking1", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126364080.jpg", "writerRankTotal": "5393", "writerRankWeekly": "143", "writerThumb": "540", "writerVisitNum": "2057797", "blog_read_count": "715", "blog_time": "于 2022-08-16 13:15:14 发布", "blog_title": "基于Mybatis-Plus实现Geometry字段在PostGis空间数据库中的使用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"-toc\" style=\"margin-left:40px;\"></p>\n<p id=\"%E8%83%8C%E6%99%AF-toc\" style=\"margin-left:40px;\"><a href=\"#%E8%83%8C%E6%99%AF\">背景</a></p>\n<p id=\"%E4%B8%80%E3%80%81%E5%9C%A8pom.xml%E4%B8%AD%E5%BC%95%E5%85%A5postgis-jdbc%E7%9B%B8%E5%85%B3jar%E5%8C%85-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%B8%80%E3%80%81%E5%9C%A8pom.xml%E4%B8%AD%E5%BC%95%E5%85%A5postgis-jdbc%E7%9B%B8%E5%85%B3jar%E5%8C%85\">一、在pom.xml中引入postgis-jdbc相关jar包</a></p>\n<p id=\"%E4%BA%8C%E3%80%81%E9%9C%80%E8%A6%81%E8%87%AA%E5%AE%9A%E4%B9%89Handler%E7%B1%BB%E6%9D%A5%E6%89%A9%E5%B1%95%E5%AD%97%E6%AE%B5%E6%94%AF%E6%8C%81%E3%80%82-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BA%8C%E3%80%81%E9%9C%80%E8%A6%81%E8%87%AA%E5%AE%9A%E4%B9%89Handler%E7%B1%BB%E6%9D%A5%E6%89%A9%E5%B1%95%E5%AD%97%E6%AE%B5%E6%94%AF%E6%8C%81%E3%80%82\">二、需要自定义Handler类来扩展字段支持。</a></p>\n<p id=\"%E4%B8%89%E3%80%81%E5%9C%A8%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%88%9B%E5%BB%BA%E8%A1%A8%EF%BC%8C%E5%BB%BA%E8%A1%A8%E8%AF%AD%E5%8F%A5%E5%A6%82%E4%B8%8B%EF%BC%9A%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%B8%89%E3%80%81%E5%9C%A8%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%88%9B%E5%BB%BA%E8%A1%A8%EF%BC%8C%E5%BB%BA%E8%A1%A8%E8%AF%AD%E5%8F%A5%E5%A6%82%E4%B8%8B%EF%BC%9A%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B\">三、在数据中创建表，建表语句如下：</a></p>\n<p id=\"%E5%9B%9B%E3%80%81%E5%AE%9A%E4%B9%89Mybatis-plus%E5%AE%9E%E4%BD%93-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%9B%9B%E3%80%81%E5%AE%9A%E4%B9%89Mybatis-plus%E5%AE%9E%E4%BD%93\">四、定义Mybatis-plus实体</a></p>\n<p id=\"%E4%BA%94%E3%80%81%E5%AE%9A%E4%B9%89mapper%E6%9F%A5%E8%AF%A2%E5%99%A8-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BA%94%E3%80%81%E5%AE%9A%E4%B9%89mapper%E6%9F%A5%E8%AF%A2%E5%99%A8\">五、定义mapper查询器</a></p>\n<p id=\"%E5%85%AD%E3%80%81%E5%AE%9A%E4%B9%89service%E4%B8%9A%E5%8A%A1%E7%B1%BB-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%85%AD%E3%80%81%E5%AE%9A%E4%B9%89service%E4%B8%9A%E5%8A%A1%E7%B1%BB\">六、定义service业务类</a></p>\n<p id=\"%E5%85%AB%E3%80%81%E4%BD%BF%E7%94%A8pgadmin%E5%8F%AF%E4%BB%A5%E6%9F%A5%E7%9C%8B%E5%88%B0%E7%9B%B8%E5%BA%94%E7%9A%84%E7%82%B9%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%85%AB%E3%80%81%E4%BD%BF%E7%94%A8pgadmin%E5%8F%AF%E4%BB%A5%E6%9F%A5%E7%9C%8B%E5%88%B0%E7%9B%B8%E5%BA%94%E7%9A%84%E7%82%B9%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%EF%BC%9A\">八、使用pgadmin可以查看到相应的点数据，如下图所示：</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h2 id=\"%E8%83%8C%E6%99%AF\">背景</h2>\n<p>        之前的一些个人文章介绍了空间数据库，以及Mybatis-Plus快速操作数据库组件，以及空间数据库PostGis的相关介绍。现在基于在空间数据库中已经定义了一张空间表，需要在应用程序中使用Mybatis-Plus来进行空间数据的查询、插入等常规操作。</p>\n<p>        在OGC标准中，通常空间字段是由Geometry类型来表示。而一般编程语言中是没有这种数据类型的。以java为例，怎么操作这些数据，满足业务需求呢？跟着本文一起来学习吧。</p>\n<p>今天介绍基于postgis-jdbc的geometry属性的操作。</p>\n<h2 id=\"%E4%B8%80%E3%80%81%E5%9C%A8pom.xml%E4%B8%AD%E5%BC%95%E5%85%A5postgis-jdbc%E7%9B%B8%E5%85%B3jar%E5%8C%85\">一、在pom.xml中引入postgis-jdbc相关jar包</h2>\n<pre><code class=\"language-XML\">&lt;!-- PostgreSql 驱动包 add by wuzuhu on 2022-08-16 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;net.postgis&lt;/groupId&gt;\n\t&lt;artifactId&gt;postgis-jdbc&lt;/artifactId&gt;\n\t&lt;version&gt;2.5.0&lt;/version&gt;\n&lt;/dependency&gt;</code></pre>\n<h2 id=\"%E4%BA%8C%E3%80%81%E9%9C%80%E8%A6%81%E8%87%AA%E5%AE%9A%E4%B9%89Handler%E7%B1%BB%E6%9D%A5%E6%89%A9%E5%B1%95%E5%AD%97%E6%AE%B5%E6%94%AF%E6%8C%81%E3%80%82\">二、需要自定义Handler类来扩展字段支持。</h2>\n<pre><code class=\"language-java\">package com.hngtghy.framework.handler;\n\nimport java.sql.CallableStatement;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\nimport org.apache.ibatis.type.BaseTypeHandler;\nimport org.apache.ibatis.type.JdbcType;\nimport org.apache.ibatis.type.MappedTypes;\nimport org.postgis.Geometry;\nimport org.postgis.PGgeometry;\n\n@MappedTypes({String.class})\npublic class PgGeometryTypeHandler extends BaseTypeHandler&lt;String&gt; {\n\n    @Override\n    public void setNonNullParameter(PreparedStatement ps, int i, String parameter, JdbcType jdbcType) throws SQLException {\n        PGgeometry pGgeometry = new PGgeometry(parameter);\n        Geometry geometry = pGgeometry.getGeometry();\n        geometry.setSrid(4326);\n        ps.setObject(i, pGgeometry);\n    }\n\n    @Override\n    public String getNullableResult(ResultSet rs, String columnName) throws SQLException {\n        String string = rs.getString(columnName);\n        return getResult(string);\n    }\n\n    @Override\n    public String getNullableResult(ResultSet rs, int columnIndex) throws SQLException {\n        String string = rs.getString(columnIndex);\n        return getResult(string);\n    }\n\n    @Override\n    public String getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {\n        String string = cs.getString(columnIndex);\n        return getResult(string);\n    }\n\n\n    private String getResult(String string) throws SQLException {\n        PGgeometry pGgeometry = new PGgeometry(string);\n        String s = pGgeometry.toString();\n        return s.replace(\"SRID=4326;\", \"\");\n    }\n}\n\n</code></pre>\n<p>        注意，在getResult()中关于4326坐标系的定义，可以根据需要进行废弃。这里写上为了统一投影坐标系。</p>\n<h2 id=\"%E4%B8%89%E3%80%81%E5%9C%A8%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%88%9B%E5%BB%BA%E8%A1%A8%EF%BC%8C%E5%BB%BA%E8%A1%A8%E8%AF%AD%E5%8F%A5%E5%A6%82%E4%B8%8B%EF%BC%9A%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B\">三、在数据中创建表，建表语句如下：</h2>\n<pre><code class=\"language-sql\">create table biz_point_test(\n\tid int8 primary key,\n\tname varchar(100),\n\tgeom geometry(Point,4326)\n);</code></pre>\n<h2 id=\"%E5%9B%9B%E3%80%81%E5%AE%9A%E4%B9%89Mybatis-plus%E5%AE%9E%E4%BD%93\">四、定义Mybatis-plus实体</h2>\n<pre><code class=\"language-java\">package com.hngtghy.project.extend.student.domain;\n\nimport com.baomidou.mybatisplus.annotation.TableField;\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.annotation.TableName;\nimport com.hngtghy.framework.handler.PgGeometryTypeHandler;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\nimport lombok.ToString;\n\n@TableName(value =\"biz_point_test\",autoResultMap = true)\n@NoArgsConstructor\n@AllArgsConstructor\n@Setter\n@Getter\n@ToString\npublic class PointTest {\n\n\t@TableId\n\tprivate Long id;\n\t\n\tprivate String name;\n\t\n\t@TableField(typeHandler = PgGeometryTypeHandler.class)\n\tprivate String geom;\n\t\n\t@TableField(exist=false)\n\tprivate String geomJson;\n}\n</code></pre>\n<p>       提醒：1、在属性上使用@TableField(typeHandler=xxx)来指定对应的类型转换器。2、需要在实体上定义autoResultMap=true。否则配置不一定生效。</p>\n<h2 id=\"%E4%BA%94%E3%80%81%E5%AE%9A%E4%B9%89mapper%E6%9F%A5%E8%AF%A2%E5%99%A8\">五、定义mapper查询器</h2>\n<pre><code class=\"language-java\">package com.hngtghy.project.extend.student.mapper;\n\nimport org.apache.ibatis.annotations.Param;\nimport org.apache.ibatis.annotations.Select;\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport com.hngtghy.project.extend.student.domain.PointTest;\n\npublic interface PointTestMapper extends BaseMapper&lt;PointTest&gt;{\n\n\tstatic final String FIND_GEOJSON_SQL=\"&lt;script&gt;\"\n\t\t\t+ \"select st_asgeojson(geom) as geomJson from biz_point_test \"\n\t\t\t+ \"where id = #{id} \"\n\t\t\t+ \"&lt;if test='null != name'&gt;and p.name like concat('%', #{name}, '%')&lt;/if&gt;\"\n\t\t\t+ \"&lt;/script&gt;\";\n\t@Select(FIND_GEOJSON_SQL)\n\tPointTest findGeoJsonById(@Param(\"id\")Long id,@Param(\"name\")String name);\n\t\n}\n</code></pre>\n<h2 id=\"%E5%85%AD%E3%80%81%E5%AE%9A%E4%B9%89service%E4%B8%9A%E5%8A%A1%E7%B1%BB\">六、定义service业务类</h2>\n<pre><code class=\"language-java\">package com.hngtghy.project.extend.student.service.impl;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport com.hngtghy.project.extend.student.domain.PointTest;\nimport com.hngtghy.project.extend.student.mapper.PointTestMapper;\nimport com.hngtghy.project.extend.student.service.IPointTestService;\n\n@Service\npublic class PointTestServcieImpl extends ServiceImpl&lt;PointTestMapper, PointTest&gt; implements IPointTestService{\n\n\t@Autowired\n\tprivate PointTestMapper pointMapper;\n\t\n\t@Override\n\tpublic PointTest selectById(Long id) {\n\t\treturn pointMapper.selectById(id);\n\t}\n\n\t@Override\n\tpublic List&lt;PointTest&gt; selectList(PointTest point) {\n\t\tQueryWrapper&lt;PointTest&gt; queryWrapper = new QueryWrapper&lt;PointTest&gt;();\n\t\tqueryWrapper.select(\"id,name\");\n        return this.getBaseMapper().selectList(queryWrapper);\n\t}\n\n\t@Override\n\tpublic int insertPointTest(PointTest point) {\n\t\treturn pointMapper.insert(point);\n\t}\n\n\t@Override\n\tpublic int updatePoint(PointTest point) {\n\t\treturn pointMapper.updateById(point);\n\t}\n\n\t@Override\n\tpublic PointTest selectGeomById(Long id) {\n\t\tQueryWrapper&lt;PointTest&gt; queryWrapper = new QueryWrapper&lt;PointTest&gt;();\n\t\tqueryWrapper.select(\"geom\",\"st_asgeojson(geom) as geomJson\");\n\t\tqueryWrapper.eq(\"id\", id);\n        return this.getBaseMapper().selectOne(queryWrapper);\n\t}\n\n\t@Override\n\tpublic PointTest findGeoJsonById(Long id) {\n\t\treturn pointMapper.findGeoJsonById(id, null);\n\t}\n\n}\n</code></pre>\n<p>       这里添加了一个数据库不存在的字段geomJson,会将空间属性转变成geojson字段，方便于前台的如leaflet、openlayers、cesium等组件进行展示。所以使用postgis的st_asgeojson（xxx）进行函数转换。</p>\n<p><strong style=\"color:#4f4f4f;font-size:22px;font-weight:bold;\">七、相关方法调用</strong></p>\n<pre><code>//1、列表查询</code><code>List&lt;PointTest&gt; pointList = pointService.selectList(null);</code><code>System.out.println(pointList);</code>\n<code>[PointTest(id=1559371184090423297, name=中寨居委会, geom=null, geomJson=null), PointTest(id=2, name=禾滩村, geom=null, geomJson=null), PointTest(id=1559403683801796610, name=中寨居委会, geom=null, geomJson=null)]</code>\n<code>//2、插入</code><code>PointTest point = new PointTest();</code><code>point.setName(\"中寨居委会\");</code><code>point.setGeom(\"POINT(109.262605 27.200669)\");//POINT(lng,lat) 经度,纬度</code><code>pointService.insertPointTest(point);</code>\n<code>//3、查询数据</code><code> PointTest point = pointService.selectGeomById(1559371184090423297L);</code><code> PointTest json = pointService.findGeoJsonById(1559371184090423297L);</code>\n<code>PointTest(id=null, name=null, geom=POINT(109.262605 27.200669), geomJson={\"type\":\"Point\",\"coordinates\":[109.262605,27.200669]})</code><code>PointTest(id=null, name=null, geom=null, geomJson={\"type\":\"Point\",\"coordinates\":[109.262605,27.200669]})</code></pre>\n<h2 id=\"%E5%85%AB%E3%80%81%E4%BD%BF%E7%94%A8pgadmin%E5%8F%AF%E4%BB%A5%E6%9F%A5%E7%9C%8B%E5%88%B0%E7%9B%B8%E5%BA%94%E7%9A%84%E7%82%B9%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%EF%BC%9A\">八、使用pgadmin可以查看到相应的点数据，如下图所示：</h2>\n<p><img alt=\"\" height=\"635\" src=\"..\\..\\static\\image\\3e52052c4dca463fbfe82e2c1d7b79fc.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"1200\" src=\"..\\..\\static\\image\\35edc871cb9e4d508a413f29c3974178.png\" width=\"1200\"/>        总结：通过以上步骤可以实现在mybatis-plus中操作geometry空间字段，同时实现查询和插入操作。通过geojson，结合前端可视化组件即可完成矢量数据的空间可视化。希望本文可以帮到你，欢迎交流。</p>\n<p> </p>\n</div>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-08-16 13:15:14", "summary": "目录背景一、在中引入相关包二、需要自定义类来扩展字段支持。三、在数据中创建表，建表语句如下：四、定义实体五、定义查询器六、定义业务类八、使用可以查看到相应的点数据，如下图所示：背景之前的一些个人文章介"}