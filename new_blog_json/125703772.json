{"blogid": "125703772", "writerAge": "码龄15年", "writerBlogNum": "330", "writerCollect": "11424", "writerComment": "7547", "writerFan": "27456", "writerGrade": "8级", "writerIntegral": "34383", "writerName": "dvlinker", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125703772.jpg", "writerRankTotal": "145", "writerRankWeekly": "5", "writerThumb": "9870", "writerVisitNum": "4620895", "blog_read_count": "1086", "blog_time": "已于 2022-07-22 23:21:41 修改", "blog_title": "一文带你彻底搞懂C/C++编程中static与extern两关键字的使用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"1%E3%80%81%E6%A6%82%E8%BF%B0-toc\" style=\"margin-left:40px;\"><a href=\"#1%E3%80%81%E6%A6%82%E8%BF%B0\">1、概述</a></p>\n<p id=\"2%E3%80%81%E7%BC%96%E8%AF%91C%2B%2B%E4%BB%A3%E7%A0%81%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E5%8F%98%E9%87%8F%E5%8F%8A%E5%87%BD%E6%95%B0%E9%87%8D%E5%A4%8D%E5%AE%9A%E4%B9%89%E7%9A%84%E9%97%AE%E9%A2%98-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81%E7%BC%96%E8%AF%91C%2B%2B%E4%BB%A3%E7%A0%81%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E5%8F%98%E9%87%8F%E5%8F%8A%E5%87%BD%E6%95%B0%E9%87%8D%E5%A4%8D%E5%AE%9A%E4%B9%89%E7%9A%84%E9%97%AE%E9%A2%98\">2、编译C++代码时遇到的变量及函数重复定义的问题</a></p>\n<p id=\"3%E3%80%81%E7%94%A8%C2%A0extern%C2%A0%E5%A3%B0%E6%98%8E%E5%A4%96%E9%83%A8%E5%8F%98%E9%87%8F-toc\" style=\"margin-left:40px;\"><a href=\"#3%E3%80%81%E7%94%A8%C2%A0extern%C2%A0%E5%A3%B0%E6%98%8E%E5%A4%96%E9%83%A8%E5%8F%98%E9%87%8F\">3、用 extern 声明外部变量</a></p>\n<p id=\"4%E3%80%81extern%E4%B8%8E%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:40px;\"><a href=\"#4%E3%80%81extern%E4%B8%8E%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0\">4、extern与全局函数</a></p>\n<p id=\"5%E3%80%81%E4%B8%BA%E4%BD%95%E5%9C%A8%E5%8F%98%E9%87%8F%E5%92%8C%E5%87%BD%E6%95%B0%E5%89%8D%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AAstatic%E5%85%B3%E9%94%AE%E5%AD%97%E7%BC%96%E8%AF%91%E5%B0%B1%E6%B2%A1%E9%97%AE%E9%A2%98%E4%BA%86%E5%91%A2%EF%BC%9F-toc\" style=\"margin-left:40px;\"><a href=\"#5%E3%80%81%E4%B8%BA%E4%BD%95%E5%9C%A8%E5%8F%98%E9%87%8F%E5%92%8C%E5%87%BD%E6%95%B0%E5%89%8D%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AAstatic%E5%85%B3%E9%94%AE%E5%AD%97%E7%BC%96%E8%AF%91%E5%B0%B1%E6%B2%A1%E9%97%AE%E9%A2%98%E4%BA%86%E5%91%A2%EF%BC%9F\">5、为何在变量和函数前添加一个static关键字编译就没问题了呢？</a></p>\n<p id=\"6%E3%80%81%E9%9D%99%E6%80%81%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F-toc\" style=\"margin-left:40px;\"><a href=\"#6%E3%80%81%E9%9D%99%E6%80%81%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F\">6、静态局部变量</a></p>\n<p id=\"7%E3%80%81%E5%87%BD%E6%95%B0%E7%9A%84%E5%A3%B0%E6%98%8E%E4%B8%8E%E5%AE%9A%E4%B9%89%E9%83%BD%E6%94%BE%E7%BD%AE%E5%88%B0%E4%B8%80%E4%B8%AA%E5%A4%B4%E6%96%87%E4%BB%B6%E4%B8%AD%EF%BC%8C%E4%B8%8D%E4%BD%BF%E7%94%A8static%EF%BC%8C%E9%80%9A%E8%BF%87%E5%AE%8F%E6%8E%A7%E5%88%B6%E5%8E%BB%E5%AE%9E%E7%8E%B0-toc\" style=\"margin-left:40px;\"><a href=\"#7%E3%80%81%E5%87%BD%E6%95%B0%E7%9A%84%E5%A3%B0%E6%98%8E%E4%B8%8E%E5%AE%9A%E4%B9%89%E9%83%BD%E6%94%BE%E7%BD%AE%E5%88%B0%E4%B8%80%E4%B8%AA%E5%A4%B4%E6%96%87%E4%BB%B6%E4%B8%AD%EF%BC%8C%E4%B8%8D%E4%BD%BF%E7%94%A8static%EF%BC%8C%E9%80%9A%E8%BF%87%E5%AE%8F%E6%8E%A7%E5%88%B6%E5%8E%BB%E5%AE%9E%E7%8E%B0\">7、函数的声明与定义都放置到一个头文件中，不使用static，通过宏控制去实现</a></p>\n<hr id=\"hr-toc\"/>\n<p>       最近在帮同事排查一个与exrern、static相关的C++代码编译错误时，遇到了一些对基础C语言基础知识理解不到的问题。说来惭愧，虽然写了多年的C/C++代码，但对extern、static两关键字的使用与理解一直不够精准，于是借这次遇到的代码编译问题，详细地查阅了extern和static相关的内容，结合之前的项目代码，才彻底搞清楚这两个关键字相关的内容，今天在这里给大家分享一下。</p>\n<h2 id=\"1%E3%80%81%E6%A6%82%E8%BF%B0\">1、概述</h2>\n<p>       static和exrern是C语言中的关键字，C++语言中在处理C++类时做了一定的延伸。extern用来声明外部全局变量，static可以用来声明变量、全局函数及C++类的静态函数。</p>\n<p>       这次遇到这个编译的问题，我特意翻看了谭浩强老师的&lt;&lt;C语言程序设计&gt;&gt;一书，书中对extern和static两关键字有详细的说明。有多年开发经验后再回过头去看这本书，才理解很多上学时理解不了的内容，才感叹书中对extern和static关键字的表述是多么的精准到位，也许这就是这本书最经典的原因吧！现在回过头去看，基础知识确实比较重要啊！正是这本书中关于extern和static精准到位的表述，才破解了我们心头的疑惑，顺利地解决了这次遇到的编译问题。</p>\n<p>        下面我们就来通过这个问题来详细讲述一下static和exrern两关键字的相关内容。</p>\n<h2 id=\"2%E3%80%81%E7%BC%96%E8%AF%91C%2B%2B%E4%BB%A3%E7%A0%81%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E5%8F%98%E9%87%8F%E5%8F%8A%E5%87%BD%E6%95%B0%E9%87%8D%E5%A4%8D%E5%AE%9A%E4%B9%89%E7%9A%84%E9%97%AE%E9%A2%98\">2、编译C++代码时遇到的变量及函数重复定义的问题</h2>\n<p>       同事在一个头文件中增加了一个外部变量g_szLogFileName，如下所示：</p>\n<p class=\"img-center\"><img alt=\"\" height=\"517\" src=\"..\\..\\static\\image\\4244754b395942d59bf8adf1b069f5ca.png\" width=\"407\"/></p>\n<p>想把这个外部变量当成全局变量来使用，结果启动编译后报出了该变量重复定义的错误：</p>\n<p class=\"img-center\"><img alt=\"\" height=\"132\" src=\"..\\..\\static\\image\\235fad2c9f9041de8e3d5bd4081aa6a2.png\" width=\"584\"/></p>\n<p>在一个头文件中定义一个变量，在多个cpp中多次包含这个头文件，则会提示变量重复定义的问题。</p>\n<p>       后来看到下面的WriteWbLog接口也在头文件中，这个头文件被多个cpp包含（就像将代码拷贝过去编译一样），<span style=\"color:#1a439c;\"><strong>为啥这个接口没有报多次被定义的问题呢？难道是因为WriteWbLog函数前面有个static关键字？</strong></span>于是手动在g_szLogFileName变量前添加一个static，结果编译就不再报错了。如果将WriteWbLog函数前面的static去掉，编译就会报错：</p>\n<p class=\"img-center\"><img alt=\"\" height=\"189\" src=\"..\\..\\static\\image\\8edd3c0e2ea0412c87975911ff1f4932.png\" width=\"652\"/></p>\n<p>提示WriteWbLog函数多次被定义的问题：</p>\n<blockquote>\n<p>LNK2005 \"void __cdecl WriteWbLog(wchar_t const *,...)\" (?WriteWbLog@@YAXPB_WZZ) 已经在 entitytracker.obj 中定义            E:\\XXXXXX\\CElectronicPenCore.obj     </p>\n</blockquote>\n<p><span style=\"color:#1a439c;\"><strong>这里面牵涉到C语言中的几个概念：<br/> 1）外部变量与全局变量的区别；<br/> 2）C语言中static的作用；<br/> 3）C语言中extern关键字的作用。</strong></span></p>\n<h2 id=\"3%E3%80%81%E7%94%A8%C2%A0extern%C2%A0%E5%A3%B0%E6%98%8E%E5%A4%96%E9%83%A8%E5%8F%98%E9%87%8F\">3、用 extern 声明外部变量</h2>\n<p>      关于extern关键字，谭浩强老师的&lt;&lt;C语言程序设计&gt;&gt;中有一段精准而到位的表述：</p>\n<p class=\"img-center\"><img alt=\"\" height=\"342\" src=\"..\\..\\static\\image\\fb06ad52847444cba0b722b73d32cd2e.png\" width=\"575\"/></p>\n<p>       外部变量（即全局变量）函数外部定义的变量，它不属于哪一个函数，它属于一个源程<br/> 序文件。其作用域是整个源程序。<span style=\"color:#1a439c;\"><strong>外部变量实在函数外部定义的，它的作用域为从变量定义处开始，到本程序文件的末尾。如果外部变量不在文件的开头定义，其有效的作用范围只限于定义处到文件终了。</strong></span>如果在定义点之前的函数想引用该外部变量，则应该在引用之前用关键字 extern对该变量作“外部变量声明”。表示该变量是一个已经定义的外部变量。有了此声明，就可以从“声明”处起，合法地使用该外部变量。<br/>         文中给出了示例代码：用 extern 声明外部变量，扩展程序文件中的作用域。</p>\n<pre><code class=\"language-cpp\">int max(int x,int y)\n{\n    int z;\n    z = x &gt; y ? x : y;\n    return(z);\n}\n\nint main()\n{\n    extern A,B; \n    printf(\"%d\\n\",max(A,B));\n    return 0;\n}\n\nint A=13, B=-8;</code></pre>\n<p>假设这段代码放置在cpp中，int型变量A和B在cpp文件结尾定义的，它们的组用域从它们定义处到cpp文件结束。如果不在main函数中用extern声明一下这两个变量，因为不再这两个变量的作用域内，所以不能直接使用的。</p>\n<p>       如果定义的全局变量需要在多个cpp文件中使用，需要在一个公用的头文件用extern关键字声明一下这些全局变量，使用到这些全局变量时，只需要包含这个头文件即可。比如在VS创建的工程中一般都有个stdafx.h头文件，所有的cpp文件都需要包含这个头文件，所以可以在stdafx.h头文件中使用extern声明全局变量，也可以在一个公用的头文件（比如common.h）使用extern去声明，然后在使用到全局变量的cpp文件中包含stdafx.h头文件或者公用头文件（比如common.h）就可以了。</p>\n<blockquote>\n<p>比如在头文件中使用extern声明：<br/><strong>extern </strong>BOOL g_bFileLogOn;<br/> 在cpp文件中对变量进行定义并初始化：<br/> BOOL g_bFileLogOn = FALSE;</p>\n</blockquote>\n<p>       头文件可能会直接被多个cpp文件包含，或者间接的被多个cpp文件包含（比如在file-a.h头文件使用extern声明了全局变量，然后file-b.h中包含了file-a.h头文件，然后多个cpp文件包含了file-b.h头文件，即file-a.h被多次间接包含），所以会出现多次被extern声明的情况，声明多次是可以的，但定义只能有一次，否则就是重复定义了。</p>\n<h2 id=\"4%E3%80%81extern%E4%B8%8E%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0\">4、extern与全局函数</h2>\n<p>       对于全局函数， extern关键词的声明是可有可无的，因为函数本身不加修饰的话就是extern的。在引用全局函数时需要函数声明，可以直接声明函数，也可以使用#include去包含函数声明的头文件，比如：</p>\n<pre><code class=\"language-cpp\">int AddNum( int a, int b)\n\nint main()\n{\nextern A,B; \nprintf(\"%d\\n\",max(A,B));\n    return 0;\n}\n\nint AddNum( int a, int b)\n{\n    int nSum = a + b;\n    retrun nSum;\n}</code></pre>\n<p>       一般我们公用函数或者使用频繁的函数封装到一个.h文件和.cpp中，函数的声明放置在.h头文件中，函数的实现放在.cpp，要使用全局函数，只要包含对应的.h头文件即可。</p>\n<h2 id=\"5%E3%80%81%E4%B8%BA%E4%BD%95%E5%9C%A8%E5%8F%98%E9%87%8F%E5%92%8C%E5%87%BD%E6%95%B0%E5%89%8D%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AAstatic%E5%85%B3%E9%94%AE%E5%AD%97%E7%BC%96%E8%AF%91%E5%B0%B1%E6%B2%A1%E9%97%AE%E9%A2%98%E4%BA%86%E5%91%A2%EF%BC%9F\">5、为何在变量和函数前添加一个static关键字编译就没问题了呢？</h2>\n<p>       在 C 语言中，<span style=\"color:#1a439c;\"><strong>对于被声明为 static 的全局实体（包括变量和函数），在声明它的文件之外是不可见的。</strong></span>这句话来自于C++ Primer一书，如下所示：</p>\n<p class=\"img-center\"><img alt=\"\" height=\"451\" src=\"..\\..\\static\\image\\a793a93a66f84bfcb32d5598b497038f.png\" width=\"543\"/></p>\n<p><span style=\"color:#1a439c;\"><strong>在C语言编程中，static的一个作用就是信息屏蔽。</strong></span>比方说，你自己定义了一个文件，该文件中有一系列的函数以及变量的声明和定义，你希望该文件中的一些函数和变量只能被该文件中的函数使用，那么，你可以在该函数、变量的前面加上static，代表他们只能被当前文件中的函数使用，在其他文件中不能调用，即使在其他文件中声明这个函数都没用。所以，在不同文件中定义同名的staitc函数是没问题的，不会冲突的。</p>\n<p>       对于本例中，如果在变量和函数前添加一个static修饰，就不会再提示变量重复定义的问题。因为static限定的变量和函数只在包含头文件的cpp中是可见的，在其他cpp中不可见，所以多个cpp包含这个头文件多次去定义变量和函数，因为相互之间不可见，所以没有出现重复定义的问题。</p>\n<h2 id=\"6%E3%80%81%E9%9D%99%E6%80%81%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F\">6、静态局部变量</h2>\n<p>         关于静态局部变量，谭浩强老师的&lt;&lt;C语言程序设计&gt;&gt;中也有一段表述：</p>\n<p><img alt=\"\" height=\"456\" src=\"..\\..\\static\\image\\047a94796ac9483a8520b94393c66192.png\" width=\"708\"/></p>\n<p>有时希望函数中的局部变量的值在函数调用结束后不消失而保留原值，这时就应该指定局部变量为“静态局部变量”，用关键字 static 进行声明。在函数多次重入的情况下，该变量一直存在，且是有值的。<br/>        比如，实现打印 1 到 5 的阶乘值，对应的代码实现如下：</p>\n<pre><code class=\"language-cpp\">int fac(int n)\n{\n    static int f=1;\n    f=f*n;\n    return(f);\n}\n\nmain()\n{\n    int i;\n    for(i=1;i&lt;=5;i++)\n       printf(\"%d!=%d\\n\",i,fac(i));\n}</code></pre>\n<p>对静态局部变量的说明：</p>\n<blockquote>\n<p>1） 静态局部变量属于静态存储类别，在静态存储区内分配存储单元。在程序整个运行期间都不释放。而自动变量（即动态局部变量）属于动态存储类别，占动态存储空间，函数调用结束后即释放。<br/> 2)）静态局部变量在编译时赋初值，即只赋初值一次；而对自动变量赋初值是在函数调用时进行，每调用一次函数重新给一次初值，相当于执行一次赋值语句。<br/> 3） 如果在定义局部变量时不赋初值的话，则对静态局部变量来说，编译时自动赋初值 0（对<br/> 数值型变量）或空字符（对字符变量）。而对自动变量来说，如果不赋初值则它的值是一个不确定的值。</p>\n</blockquote>\n<h2 id=\"7%E3%80%81%E5%87%BD%E6%95%B0%E7%9A%84%E5%A3%B0%E6%98%8E%E4%B8%8E%E5%AE%9A%E4%B9%89%E9%83%BD%E6%94%BE%E7%BD%AE%E5%88%B0%E4%B8%80%E4%B8%AA%E5%A4%B4%E6%96%87%E4%BB%B6%E4%B8%AD%EF%BC%8C%E4%B8%8D%E4%BD%BF%E7%94%A8static%EF%BC%8C%E9%80%9A%E8%BF%87%E5%AE%8F%E6%8E%A7%E5%88%B6%E5%8E%BB%E5%AE%9E%E7%8E%B0\">7、函数的声明与定义都放置到一个头文件中，不使用static，通过宏控制去实现</h2>\n<p>       我们也可以将函数声明和函数实现放在一个头文件中，文件中分成两部分，一部分是函数声明，一部分是函数实现，函数实现部分通过宏去控制，如下所示：</p>\n<p class=\"img-center\"><img alt=\"\" height=\"603\" src=\"..\\..\\static\\image\\bcccbd171eee4254a95310ad73dfde27.png\" width=\"543\"/></p>\n<p>所有调用到头文件中的全局函数的地方包含这个头文件，用于编译。然后在任意一个cpp中定义头文件中的宏：</p>\n<blockquote>\n<p>#define HIS_CFG_FILE_DIR_CPP<br/> #include \"hiscfgdir.h\"</p>\n</blockquote>\n<p>然后包含头文件，保证在编译后obj文件中能有这些函数的实现，用于链接。只要在一个cpp文件中定义上述宏，如果在多个cpp中都定义这个宏，则会出现函数重复定义的问题。</p>\n</div>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-07-22 23:21:41", "summary": "目录、概述、编译代码时遇到的变量及函数重复定义的问题、用声明外部变量、与全局函数、为何在变量和函数前添加一个关键字编译就没问题了呢？、静态局部变量、函数的声明与定义都放置到一个头文件中，不使用，通过宏"}