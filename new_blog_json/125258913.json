{"blogid": "125258913", "writerAge": "码龄3年", "writerBlogNum": "12", "writerCollect": "37", "writerComment": "9", "writerFan": "22", "writerGrade": "2级", "writerIntegral": "151", "writerName": "lixiaoweia", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125258913.jpg", "writerRankTotal": "95793", "writerRankWeekly": "502246", "writerThumb": "24", "writerVisitNum": "13240", "blog_read_count": "1288", "blog_time": "于 2022-06-13 14:37:46 发布", "blog_title": "opencv C++ SVM模型训练与分类实现", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>最近想学习一下分类算法的内容，恰好opencv有SVM的函数，故先从这个下手。找了许多资料，发现要么是opencv2、3的，要么就没有具体实现代码，学习还是把代码与原理一起结合来看比较好。</p>\n<p>其中，我主要参考的是这一篇文章：</p>\n<p><a class=\"link-info has-card\" href=\"https://blog.csdn.net/chaipp0607/article/details/68067098\" title=\"学习SVM（一） SVM模型训练与分类的OpenCV实现\"><span class=\"link-card-box\"><span class=\"link-title\">学习SVM（一） SVM模型训练与分类的OpenCV实现</span><span class=\"link-link\"><img alt=\"icon-default.png?t=M4AD\" class=\"link-link-icon\" src=\"..\\..\\static\\image\\icon-default.png\"/>https://blog.csdn.net/chaipp0607/article/details/68067098</span></span></a>写得非常好！但是是2017年发布的文章，其中许多内容都做了更新，我用的是opencv 4.5.1版本，win10系统，vs2019作开发工具。具体opencv配置不说了，我对上面那篇文章的代码进行了更新。</p>\n<p>步骤一样.</p>\n<h1>一、数据准备</h1>\n<p>首先找到opencv库自带的digits图片，我的电脑上路径在：D:\\app\\opencv4.5.1\\opencv\\opencv\\sources\\samples\\data\\digits.png</p>\n<p>然后在D盘建立如下文件夹：</p>\n<p><img alt=\"\" height=\"88\" src=\"..\\..\\static\\image\\ea25725f10004ebcad0f9a98ef666fa2.png\" width=\"304\"/></p>\n<p>只需新建命名就好了，不用往里面放东西。接下来建立vs2019项目工程，新建源文件</p>\n<p class=\"img-center\"><img alt=\"\" height=\"172\" src=\"..\\..\\static\\image\\c7460054928b46739394e33901cb4c2d.png\" width=\"229\"/></p>\n<p>复制如下代码：</p>\n<pre><code class=\"language-cpp\">#include &lt;windows.h&gt;\n#include &lt;iostream&gt;\n#include &lt;opencv2/core/core.hpp&gt;\n#include &lt;opencv2/highgui/highgui.hpp&gt;\n#include &lt;opencv2/imgproc/imgproc.hpp&gt;\n#include &lt;opencv2/core/utils/logger.hpp&gt;\n#include &lt;thread&gt;\n#include &lt;time.h&gt;\n//#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\n\nusing namespace std;\nusing namespace cv;\n\nint main()\n{\n\tchar ad[128] = { 0 };\n\tint  filename = 0, filenum = 0;\n\tMat img = imread(\"digits.png\");\n\tMat gray;\n\tcvtColor(img, gray, COLOR_BGR2GRAY);\n\tint b = 20;\n\tint m = gray.rows / b;   //原图为1000*2000\n\tint n = gray.cols / b;   //裁剪为5000个20*20的小图块\n\n\tfor (int i = 0; i &lt; m; i++)\n\t{\n\t\tint offsetRow = i * b;  //行上的偏移量\n\t\tif (i % 5 == 0 &amp;&amp; i != 0)\n\t\t{\n\t\t\tfilename++;\n\t\t\tfilenum = 0;\n\t\t}\n\t\tfor (int j = 0; j &lt; n; j++)\n\t\t{\n\t\t\tint offsetCol = j * b; //列上的偏移量\n\t\t\tsprintf_s(ad, \"D:\\\\data\\\\%d\\\\%d.jpg\", filename, filenum++);\n\t\t\t//截取20*20的小块\n\t\t\tMat tmp;\n\t\t\tgray(Range(offsetRow, offsetRow + b), Range(offsetCol, offsetCol + b)).copyTo(tmp);\n\t\t\timwrite(ad, tmp);\n\t\t}\n\t}\n\treturn 0;\n\n\n}\n\n</code></pre>\n<p> 运行结束后，在刚刚新建的文件夹中，0、1文件夹内各有500张分割好的图片。</p>\n<p class=\"img-center\"><img alt=\"\" height=\"353\" src=\"..\\..\\static\\image\\7756b9fa2a4542218fa18617354559e1.png\" width=\"652\"/></p>\n<p>最后在test_image、train_image分别新建0、1文件夹。</p>\n<p>把data\\0中的0-399复制到data\\test_..\\..\\static\\image\\0,399-499复制到data\\train_..\\..\\static\\image\\0；</p>\n<p>把data\\1中的0-399复制到data\\test_..\\..\\static\\image\\1,399-499复制到data\\train_..\\..\\static\\image\\1。第一步完成。</p>\n<pre><code>--D：\n  --data\n    --0\n    --1\n    --train_image\n      --0（400张）\n      --1（400张）\n    --test_image\n      --0（100张）\n      --1（100张）\n</code></pre>\n<h1> 二、模型训练</h1>\n<p> 再新建一个源文件：SVM模型训练.cpp，将第一步的SVM数据准备文件从项目中移除。</p>\n<p class=\"img-center\"><img alt=\"\" height=\"161\" src=\"..\\..\\static\\image\\572c4628a22b49829139676a6e1716df.png\" width=\"239\"/></p>\n<p>复制上如下代码，其中最主要的就是opencv4中的SVM函数改变很大，配置参数上与原文完全不同</p>\n<pre><code class=\"language-cpp\">#include &lt;stdio.h&gt;  \n#include &lt;time.h&gt;  \n#include &lt;opencv2/opencv.hpp&gt;  \n\n#include &lt;iostream&gt; \n#include &lt;opencv2/core/core.hpp&gt;\n#include &lt;opencv2/highgui/highgui.hpp&gt;\n#include &lt;opencv2/imgproc/imgproc.hpp&gt;\n#include \"opencv2/imgcodecs.hpp\"\n#include &lt;opencv2/core/utils/logger.hpp&gt;\n#include &lt;opencv2/ml/ml.hpp&gt;  \n#include &lt;io.h&gt;\n\nusing namespace std;\nusing namespace cv;\nusing namespace cv::ml;\n\nvoid getFiles(string path, vector&lt;string&gt;&amp; files);\nvoid get_1(Mat&amp; trainingImages, vector&lt;int&gt;&amp; trainingLabels);\nvoid get_0(Mat&amp; trainingImages, vector&lt;int&gt;&amp; trainingLabels);\n\nint main()\n{\n\t//获取训练数据\n\tMat classes;\n\tMat trainingData;\n\tMat trainingImages;\n\tvector&lt;int&gt; trainingLabels;\n\tget_1(trainingImages, trainingLabels);\n\t//waitKey(2000);\n\tget_0(trainingImages, trainingLabels);\n\tMat(trainingImages).copyTo(trainingData);\n\ttrainingData.convertTo(trainingData, CV_32FC1);\n\tMat(trainingLabels).copyTo(classes);\n\t//配置SVM训练器参数\n\tPtr&lt;SVM&gt; svm = SVM::create();\n\tsvm-&gt;setType(SVM::C_SVC);\n\tsvm-&gt;setKernel(SVM::LINEAR);\n\tsvm-&gt;setDegree(0);\n\tsvm-&gt;setGamma(1);\n\tsvm-&gt;setCoef0(0);\n\tsvm-&gt;setC(1);\n\tsvm-&gt;setNu(0);\n\tsvm-&gt;setP(0);\n\tsvm-&gt;setTermCriteria(TermCriteria(TermCriteria::MAX_ITER, 1000, 0.01));\n\t//训练\n\tsvm-&gt;train(trainingData, ROW_SAMPLE, classes );\n\t//保存模型\n\tsvm-&gt;save(\"svm.xml\");\n\t\n\tcout &lt;&lt; \"训练好了！！！\" &lt;&lt; endl;\n\n\tgetchar();\n\treturn 0;\n}\nvoid getFiles(string path, vector&lt;string&gt;&amp; files)\n{\n\tlong long  hFile = 0;\n\tstruct _finddata_t fileinfo;\n\tstring p;\n\tif ((hFile = _findfirst(p.assign(path).append(\"\\\\*\").c_str(), &amp;fileinfo)) != -1)\n\t{\n\t\tdo\n\t\t{\n\t\t\tif ((fileinfo.attrib &amp; _A_SUBDIR))\n\t\t\t{\n\t\t\t\tif (strcmp(fileinfo.name, \".\") != 0 &amp;&amp; strcmp(fileinfo.name, \"..\") != 0)\n\t\t\t\t\tgetFiles(p.assign(path).append(\"\\\\\").append(fileinfo.name), files);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfiles.push_back(p.assign(path).append(\"\\\\\").append(fileinfo.name));\n\t\t\t}\n\t\t} while (_findnext(hFile, &amp;fileinfo) == 0);\n\n\t\t_findclose(hFile);\n\t}\n}\n\nvoid get_1(Mat&amp; trainingImages, vector&lt;int&gt;&amp; trainingLabels)\n{\n\tstring filePath = \"D:\\\\data\\\\train_..\\..\\static\\image\\\\1\";\n\tcout &lt;&lt; \"获取D:\\\\data\\\\1\" &lt;&lt; endl;\n\tvector&lt;string&gt; files;\n\tgetFiles(filePath, files);\n\tint number = files.size();\n\tfor (int i = 0; i &lt; number; i++)\n\t{\n\t\tMat  SrcImage = imread(files[i].c_str());\n\t\tSrcImage = SrcImage.reshape(1, 1);\n\t\ttrainingImages.push_back(SrcImage);\n\t\ttrainingLabels.push_back(1);\n\t}\n}\nvoid get_0(Mat&amp; trainingImages, vector&lt;int&gt;&amp; trainingLabels)\n{\n\tstring filePath = \"D:\\\\data\\\\train_..\\..\\static\\image\\\\0\";\n\tcout &lt;&lt; \"获取D:\\\\data\\\\0\" &lt;&lt; endl;\n\tvector&lt;string&gt; files;\n\tgetFiles(filePath, files);\n\tint number = files.size();\n\tfor (int i = 0; i &lt; number; i++)\n\t{\n\t\tMat  SrcImage = imread(files[i].c_str());\n\t\tSrcImage = SrcImage.reshape(1, 1);\n\t\ttrainingImages.push_back(SrcImage);\n\t\t\n\t\ttrainingLabels.push_back(0);\n\t}\n}\n</code></pre>\n<p> 训练完毕后，在这个解决方案文件夹下就生成了一个.xml文件，即是我们训练出来的模型。</p>\n<p>训练时还可以选择自动训练，会自己寻找最优参数，效果也很好。</p>\n<pre><code class=\"language-cpp\">//训练\n\tsvm-&gt;trainAuto(trainingData, ROW_SAMPLE, classes );</code></pre>\n<h1>三、加载模型实现分类</h1>\n<p>同样的，新建一个源文件：<img alt=\"\" height=\"123\" src=\"..\\..\\static\\image\\c7506169588e471ab56122c489eef446.png\" width=\"214\"/></p>\n<p>复制如下代码：</p>\n<pre><code class=\"language-cpp\">#include &lt;stdio.h&gt;  \n#include &lt;time.h&gt;  \n#include &lt;opencv2/opencv.hpp&gt;  \n\n#include &lt;iostream&gt; \n#include &lt;opencv2/core/core.hpp&gt;\n#include &lt;opencv2/highgui/highgui.hpp&gt;\n#include &lt;opencv2/imgproc/imgproc.hpp&gt;\n#include \"opencv2/imgcodecs.hpp\"\n#include &lt;opencv2/core/utils/logger.hpp&gt;\n#include &lt;opencv2/ml/ml.hpp&gt;  \n#include &lt;io.h&gt;\n\nusing namespace std;\nusing namespace cv;\nusing namespace cv::ml;\n\nvoid getFiles(string path, vector&lt;string&gt;&amp; files);\nint main()\n{\n\tint result = 0;\n\tstring filePath = \"D:\\\\data\\\\test_..\\..\\static\\image\\\\1\";\n\tvector&lt;string&gt; files;\n\tgetFiles(filePath, files);\n\tint number = files.size();\n\tcout &lt;&lt; number &lt;&lt; endl;\n\tstring modelpath = \"svm.xml\";\n\tcv::Ptr&lt;cv::ml::SVM&gt; svm;\n\tsvm = cv::Algorithm::load&lt;cv::ml::SVM&gt;(modelpath);\n\n\n\t/*CvSVM svm;\n\tsvm.clear();\n\tstring modelpath = \"svm.xml\";\n\tFileStorage svm_fs(modelpath, FileStorage::READ);\n\tif (svm_fs.isOpened())\n\t{\n\t\tsvm.load(modelpath.c_str());\n\t}*/\n\tfor (int i = 0; i &lt; number; i++)\n\t{\n\t\tMat inMat = imread(files[i].c_str());\n\t\tMat p = inMat.reshape(1, 1);\n\t\tp.convertTo(p, CV_32FC1);\n\t\tint response = (int)svm-&gt;predict(p);\n\t\tif (response == 1)//要预测1，如果用0来做测试集就改成response == 0\n\t\t{\n\t\t\tresult++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout &lt;&lt; files[i] &lt;&lt; endl;\n\t\t}\n\t}\n\tcout &lt;&lt; result &lt;&lt; endl;\n\tgetchar();\n\treturn  0;\n}\nvoid getFiles(string path, vector&lt;string&gt;&amp; files)\n{\n\tlong long   hFile = 0;\n\tstruct _finddata_t fileinfo;\n\tstring p;\n\tif ((hFile = _findfirst(p.assign(path).append(\"\\\\*\").c_str(), &amp;fileinfo)) != -1)\n\t{\n\t\tdo\n\t\t{\n\t\t\tif ((fileinfo.attrib &amp; _A_SUBDIR))\n\t\t\t{\n\t\t\t\tif (strcmp(fileinfo.name, \".\") != 0 &amp;&amp; strcmp(fileinfo.name, \"..\") != 0)\n\t\t\t\t\tgetFiles(p.assign(path).append(\"\\\\\").append(fileinfo.name), files);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfiles.push_back(p.assign(path).append(\"\\\\\").append(fileinfo.name));\n\t\t\t}\n\t\t} while (_findnext(hFile, &amp;fileinfo) == 0);\n\t\t_findclose(hFile);\n\t}\n}\n</code></pre>\n<p> 如果想要检测0的分类准确率就让第46行的response == 0。</p>\n<p class=\"img-center\"><img alt=\"\" height=\"237\" src=\"..\\..\\static\\image\\f59949eb3cba4d70a50ec372f7aac069.png\" width=\"454\"/></p>\n<p> 可以看到，100张1有99张被识别出来，有一张452没有识别成功。100张0都识别出来了。</p>\n</div>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-06-13 14:37:46", "summary": "最近想学习一下分类算法的内容，恰好有的函数，故先从这个下手。找了许多资料，发现要么是、的，要么就没有具体实现代码，学习还是把代码与原理一起结合来看比较好。其中，我主要参考的是这一篇文章：学习一模型训练"}