{"blogid": "126679925", "writerAge": "码龄4年", "writerBlogNum": "157", "writerCollect": "792", "writerComment": "52", "writerFan": "1117", "writerGrade": "5级", "writerIntegral": "2492", "writerName": "进击的程序猿~", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126679925.jpg", "writerRankTotal": "7319", "writerRankWeekly": "5817", "writerThumb": "143", "writerVisitNum": "106297", "blog_read_count": "133", "blog_time": "已于 2022-09-06 11:14:13 修改", "blog_title": "从0开始安装k8s1.25【最新k8s版本——20220904】", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#0k8s125_1\">从0开始安装k8s1.25</a></li><li><ul><li><a href=\"#_12\">一、准备工作</a></li><li><ul><li><a href=\"#1VmwareCentOS_14\">1、安装Vmware和虚拟机CentOS</a></li><li><a href=\"#2CentOS_19\">2、虚拟机CentOS环境初始化</a></li><li><a href=\"#3Containerd_24\">3、安装容器运行时Containerd</a></li></ul>\n</li><li><a href=\"#kubelet_kubeadm_kubectl_29\">二、安装kubelet kubeadm kubectl</a></li><li><ul><li><a href=\"#1_43\">1、使用阿里云镜像安装</a></li><li><a href=\"#2kubeadm_67\">2、使用kubeadm创建集群</a></li><li><a href=\"#3master_133\">3、初始化master节点</a></li><li><a href=\"#4_Pod__203\">4、安装 Pod 网络附加组件</a></li><li><a href=\"#5node_228\">5、加入node节点</a></li><li><a href=\"#6_278\">6、验证是否安装成功</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"0k8s125_1\"></a>从0开始安装k8s1.25</h1>\n<p>相关链接：<br/> VMware官网：<a href=\"https://www.vmware.com/\">https://www.vmware.com/</a><br/> containerd官网：<a href=\"https://containerd.io/\">https://containerd.io/</a><br/> kubernetes官网： <a href=\"https://kubernetes.io/\">https://kubernetes.io/</a><br/> 阿里云镜像官网：<a href=\"https://developer.aliyun.com/mirror/\">https://developer.aliyun.com/mirror/</a><br/> Caclio官网：<a href=\"https://www.tigera.io/project-calico/\">https://www.tigera.io/project-calico/</a><br/> Containerd【轻量级容器管理工具】：<a href=\"https://blog.csdn.net/qq_41822345/article/details/126677121\">https://blog.csdn.net/qq_41822345/article/details/126677121</a><br/> 安装高可用版k8s集群：<a href=\"https://mp.weixin.qq.com/s/lqasax-2-t4QpzgcCOqF-A\">https://mp.weixin.qq.com/s/lqasax-2-t4QpzgcCOqF-A</a></p>\n<h2><a id=\"_12\"></a>一、准备工作</h2>\n<h3><a id=\"1VmwareCentOS_14\"></a>1、安装Vmware和虚拟机CentOS</h3>\n<p>假设现在我们有了VMware，并在其中安装了三台虚拟机。<br/> 虚拟机安装流程：<a href=\"https://blog.csdn.net/qq_41822345/article/details/105567852\">https://blog.csdn.net/qq_41822345/article/details/105567852</a></p>\n<h3><a id=\"2CentOS_19\"></a>2、虚拟机CentOS环境初始化</h3>\n<p>下面进行系统环境的初始化。<br/> Linux系统初始化环境【docker安装部分可以选择跳过】：<a href=\"https://blog.csdn.net/qq_41822345/article/details/118096213\">https://blog.csdn.net/qq_41822345/article/details/118096213</a></p>\n<h3><a id=\"3Containerd_24\"></a>3、安装容器运行时Containerd</h3>\n<p>容器运行时containerd安装【弃用docker】，所有主机都需要安装 容器运行时。<br/> Containerd安装：<a href=\"https://blog.csdn.net/qq_41822345/article/details/126677121\">https://blog.csdn.net/qq_41822345/article/details/126677121</a></p>\n<h2><a id=\"kubelet_kubeadm_kubectl_29\"></a>二、安装kubelet kubeadm kubectl</h2>\n<p>所有主机都需要安装 kubelet和kubeadm</p>\n<p>kubernetes官网： <a href=\"https://kubernetes.io/\">https://kubernetes.io/</a><br/> 阿里云镜像官网：<a href=\"https://developer.aliyun.com/mirror/\">https://developer.aliyun.com/mirror/</a></p>\n<p>kubernetes官方镜像安装一般会报错【无法解析url】：</p>\n<pre><code>failure: repodata/repomd.xml from kubernetes: [Errno 256] No more mirrors to try.\nhttps://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64/repodata/repomd.xml: [Errno 14] curl#7 - \"Failed connect to packages.cloud.google.com:443; Connection refused\"\n</code></pre>\n<h3><a id=\"1_43\"></a>1、使用阿里云镜像安装</h3>\n<pre><code class=\"prism language-shell\"><span class=\"token comment\"># 阿里云最新镜像[2022-0901]</span>\n$ <span class=\"token function\">cat</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF<span class=\"token bash punctuation\"> <span class=\"token operator\">&gt;</span> /etc/yum.repos.d/kubernetes.repo</span>\n[kubernetes]\nname=Kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF</span>\n\n$ setenforce <span class=\"token number\">0</span>\n<span class=\"token comment\"># ps: 由于官网未开放同步方式, 可能会有索引gpg检查失败的情况, 这时需要跳过gpg检查</span>\n$ yum <span class=\"token function\">install</span> -y --nogpgcheck kubelet kubeadm kubectl\n$ systemctl <span class=\"token builtin class-name\">enable</span> kubelet <span class=\"token operator\">&amp;&amp;</span> systemctl start kubelet\n\n<span class=\"token comment\"># 安装完成验证</span>\n$ kubelet --version\nKubernetes v1.25.0\n</code></pre>\n<h3><a id=\"2kubeadm_67\"></a>2、使用kubeadm创建集群</h3>\n<p>先初始化一些必要配置【所有机器】</p>\n<pre><code class=\"prism language-shell\"><span class=\"token comment\"># 设计hostname</span>\n$ hostnamectl set-hostname k8s201\n$ hostnamectl set-hostname k8s202\n$ hostnamectl set-hostname k8s203\n\n$ <span class=\"token function\">hostname</span>\nk8s201\n$ <span class=\"token function\">hostname</span>\nk8s202\n$ <span class=\"token function\">hostname</span>\nk8s203\n\n<span class=\"token comment\">#以方便互相访问</span>\n$ <span class=\"token function\">cat</span> <span class=\"token operator\">&gt;&gt;</span>/etc/hosts<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF \n192.168.168.201 k8s201\n192.168.168.202 k8s202\n192.168.168.203 k8s203 \nEOF</span>\n\n<span class=\"token comment\">#关闭防火墙和关闭SELinux</span>\n$ systemctl stop firewalld\n$ systemctl disable firewalld\n$ setenforce <span class=\"token number\">0</span> <span class=\"token comment\"># 临时关闭</span>\n$ <span class=\"token function\">vim</span> /etc/sysconfig/selinux <span class=\"token comment\">#永久关闭</span>\n<span class=\"token comment\"># 改为SELINUX=disabled</span>\n\n<span class=\"token comment\"># 所有节点关闭swap</span>\n$ swapoff -a  <span class=\"token comment\">#临时关闭</span>\n$ <span class=\"token function\">vim</span> /etc/fstab <span class=\"token comment\">#永久关闭</span>\n<span class=\"token comment\">#注释掉以下字段</span>\n/dev/mapper/cl-swap swap swap defaults <span class=\"token number\">0</span> <span class=\"token number\">0</span>\n\n<span class=\"token comment\">#设置允许路由转发，不对bridge的数据进行处理，先创建文件</span>\n$ <span class=\"token function\">vim</span> /etc/sysctl.d/k8s.conf\n<span class=\"token comment\">#内容如下：</span>\nnet.bridge.bridge-nf-call-ip6tables <span class=\"token operator\">=</span> <span class=\"token number\">1</span> \nnet.bridge.bridge-nf-call-iptables <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nnet.ipv4.ip_forward <span class=\"token operator\">=</span> <span class=\"token number\">1</span> \nvm.swappiness <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token comment\"># 执行文件</span>\n$ sysctl -p /etc/sysctl.d/k8s.conf\n\n<span class=\"token comment\"># kube-proxy 开启ipvs的前置条件【极其重要】</span>\n<span class=\"token comment\"># 安装ipvsadm工具</span>\n$ yum <span class=\"token function\">install</span> ipset ipvsadm -y\n$ <span class=\"token function\">cat</span> <span class=\"token operator\">&gt;</span> /etc/sysconfig/modules/ipvs.modules <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF\n#!/bin/bash\nmodprobe -- ip_vs\nmodprobe -- ip_vs_rr\nmodprobe -- ip_vs_wrr\nmodprobe -- ip_vs_sh\nmodprobe -- nf_conntrack_ipv4\nEOF</span>\n<span class=\"token comment\"># 添加文件权限</span>\n$ <span class=\"token function\">chmod</span> <span class=\"token number\">755</span> /etc/sysconfig/modules/ipvs.modules <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">bash</span>\n$ /etc/sysconfig/modules/ipvs.modules <span class=\"token operator\">&amp;&amp;</span> lsmod <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> -e ip_vs -e nf_conntrack_ipv4\n\n<span class=\"token comment\"># 加载 br_netfilter模块【默认是不加载的，所以需要手动加载】</span>\n$ modprobe br_netfilter\n</code></pre>\n<h3><a id=\"3master_133\"></a>3、初始化master节点</h3>\n<p><code>kubeadm init</code> 首先运行一系列预检查以确保机器 准备运行 Kubernetes。这些预检查会显示警告并在错误时退出。然后 <code>kubeadm init</code> 下载并安装集群控制平面组件。这可能会需要几分钟。</p>\n<pre><code class=\"prism language-shell\">$ kubeadm init --help\n\n$ kubeadm init --kubernetes-version<span class=\"token operator\">=</span><span class=\"token number\">1.25</span>.0 <span class=\"token punctuation\">\\</span>\n--apiserver-advertise-address<span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.168.201 <span class=\"token punctuation\">\\</span>\n--image-repository registry.aliyuncs.com/google_containers <span class=\"token punctuation\">\\</span>\n--service-cidr<span class=\"token operator\">=</span><span class=\"token number\">10.1</span>.0.0/16 <span class=\"token punctuation\">\\</span>\n--pod-network-cidr<span class=\"token operator\">=</span><span class=\"token number\">10.244</span>.0.0/16\n\n<span class=\"token comment\">#注意：</span>\n<span class=\"token comment\"># kubernetes-version的值 即为 kubelet --version获得的值</span>\n<span class=\"token comment\"># apiserver-advertise-address这个地址必须是master机器的IP</span>\n\n<span class=\"token comment\"># 如果有报错，可以执行以下命令进行排查【一般都是因为外网原因拉取不到镜像，可以拉取国内镜像代替】</span>\n$ systemctl status kubelet -l\n$ systemctl status containerd -l\n\n<span class=\"token comment\"># 查看安装k8s所需的镜像列表</span>\n$ kubeadm config images list\n<span class=\"token comment\"># 通过查询拉取k8s所需的镜像，看缺哪些镜像</span>\n$ ctr -n k8s.io images <span class=\"token function\">ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> 镜像名\n<span class=\"token comment\"># 比如缺乏pause:3.6镜像</span>\n<span class=\"token comment\">### 由于k8s.gcr.io 需要连外网才可以拉取到，导致 k8s 的基础容器 pause 经常无法获取。k8s docker 可使用代理服拉取，再利用 docker tag 解决问题</span>\n$ <span class=\"token function\">docker</span> pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.6\n$ <span class=\"token function\">docker</span> tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.6 k8s.gcr.io/pause:3.6\n<span class=\"token comment\">#但是我们k8s集群中使用的CRI是containerd。所以只能通过 docker tag 镜像，再使用 ctr 导入镜像.</span>\n$ <span class=\"token function\">docker</span> save k8s.gcr.io/pause -o pause.tar\n$ ctr -n k8s.io images <span class=\"token function\">import</span> pause.tar\n\n\n<span class=\"token comment\"># 解决报错后，要再次运行 kubeadm init，必须首先卸载集群</span>\n$ kubeadm reset\n\n<span class=\"token comment\">#成功示例：</span>\nYour Kubernetes control-plane has initialized successfully<span class=\"token operator\">!</span>\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  <span class=\"token function\">mkdir</span> -p <span class=\"token environment constant\">$HOME</span>/.kube\n  <span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"token environment constant\">$HOME</span>/.kube/config\n  <span class=\"token function\">sudo</span> <span class=\"token function\">chown</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">id</span> -u<span class=\"token variable\">)</span></span><span class=\"token builtin class-name\">:</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">id</span> -g<span class=\"token variable\">)</span></span> <span class=\"token environment constant\">$HOME</span>/.kube/config\n\nAlternatively, <span class=\"token keyword\">if</span> you are the root user, you can run:\n\n  <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">KUBECONFIG</span><span class=\"token operator\">=</span>/etc/kubernetes/admin.conf\n\nYou should now deploy a pod network to the cluster.\nRun <span class=\"token string\">\"kubectl apply -f [podnetwork].yaml\"</span> with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nThen you can <span class=\"token function\">join</span> any number of worker nodes by running the following on each as root:\n<span class=\"token comment\"># 这一行生成的临时令牌[24h过期]是用来加入node节点</span>\nkubeadm <span class=\"token function\">join</span> <span class=\"token number\">192.168</span>.168.201:6443 --token pq5otc.ker47p9nails0xsf <span class=\"token punctuation\">\\</span>\n        --discovery-token-ca-cert-hash sha256:7a256694edafdbd21b52ca729b0b7ebc142c7fe8435657a6115b95019d2a3178\n</code></pre>\n<p>配置可以运行 kubectl，请运行以下命令：</p>\n<pre><code class=\"prism language-shell\">$ <span class=\"token function\">mkdir</span> -p <span class=\"token environment constant\">$HOME</span>/.kube\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"token environment constant\">$HOME</span>/.kube/config\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">chown</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">id</span> -u<span class=\"token variable\">)</span></span><span class=\"token builtin class-name\">:</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">id</span> -g<span class=\"token variable\">)</span></span> <span class=\"token environment constant\">$HOME</span>/.kube/config\n<span class=\"token comment\"># 验证</span>\n$ kubectl get pods --all-namespaces\n</code></pre>\n<h3><a id=\"4_Pod__203\"></a>4、安装 Pod 网络附加组件</h3>\n<p>每个集群只能安装一个 Pod 网络。这里安装calico网络。</p>\n<p>相关链接：<a href=\"https://www.tigera.io/project-calico\">https://www.tigera.io/project-calico</a></p>\n<pre><code class=\"prism language-shell\">$ <span class=\"token function\">curl</span> https://docs.projectcalico.org/manifests/calico.yaml -O\n<span class=\"token comment\"># 把calico.yaml里pod所在网段改成kubeadm init时选项--pod-network-cidr所指定的网段</span>\n$ <span class=\"token function\">sed</span> -i <span class=\"token string\">'s/192.168.0.0/10.244.0.0/g'</span> calico.yaml\n$ kubectl apply -f calico.yaml\n<span class=\"token comment\"># 验证</span>\n$ kubectl get pods --all-namespaces\nNAMESPACE     NAME                                       READY   STATUS    RESTARTS   AGE\nkube-system   calico-kube-controllers-58dbc876ff-bhmdv   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          2m39s\nkube-system   calico-node-9qppz                          <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          2m39s\nkube-system   coredns-c676cc86f-f4vwx                    <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          54m\nkube-system   coredns-c676cc86f-htq2v                    <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          54m\nkube-system   etcd-k8s201                                <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">1</span>          54m\nkube-system   kube-apiserver-k8s201                      <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          54m\nkube-system   kube-controller-manager-k8s201             <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">1</span>          54m\nkube-system   kube-proxy-pn4k7                           <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          54m\nkube-system   kube-scheduler-k8s201                      <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">1</span>          54m\n</code></pre>\n<h3><a id=\"5node_228\"></a>5、加入node节点</h3>\n<p>通过在 <code>kubectl get pods --all-namespaces</code> 输出中检查 CoreDNS Pod 是否 <code>Running</code> 来确认其是否正常运行。只有 CoreDNS Pod 启用并运行成功，才可以加入node节点。</p>\n<pre><code class=\"prism language-shell\">$ kubectl get <span class=\"token function\">node</span>\nNAME     STATUS   ROLES           AGE   VERSION\nk8s201   Ready    control-plane   54m   v1.25.0\n\n<span class=\"token comment\"># 执行master节点初始化成功后的输出</span>\n$ kubeadm <span class=\"token function\">join</span> <span class=\"token number\">192.168</span>.168.201:6443 --token pq5otc.ker47p9nails0xsf <span class=\"token punctuation\">\\</span>\n        --discovery-token-ca-cert-hash sha256:7a256694edafdbd21b52ca729b0b7ebc142c7fe8435657a6115b95019d2a3178\n\n<span class=\"token comment\"># 验证</span>\n$ kubectl get <span class=\"token function\">node</span>\nNAME     STATUS     ROLES           AGE   VERSION\nk8s201   Ready      control-plane   57m   v1.25.0\nk8s202   NotReady   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>          70s   v1.25.0\n\n<span class=\"token comment\"># 再加入一个node节点</span>\n$ kubeadm <span class=\"token function\">join</span> <span class=\"token number\">192.168</span>.168.201:6443 --token pq5otc.ker47p9nails0xsf <span class=\"token punctuation\">\\</span>\n        --discovery-token-ca-cert-hash sha256:7a256694edafdbd21b52ca729b0b7ebc142c7fe8435657a6115b95019d2a3178\n\n<span class=\"token comment\"># 验证</span>\n$ kubectl get po --all-namespaces\nNAMESPACE     NAME                                       READY   STATUS    RESTARTS   AGE\nkube-system   calico-kube-controllers-58dbc876ff-bhmdv   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          17m\nkube-system   calico-node-9qppz                          <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          17m\nkube-system   calico-node-j28p5                          <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          11m\nkube-system   calico-node-jbwn7                          <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          12m\nkube-system   coredns-c676cc86f-f4vwx                    <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          69m\nkube-system   coredns-c676cc86f-htq2v                    <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          69m\nkube-system   etcd-k8s201                                <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">1</span>          69m\nkube-system   kube-apiserver-k8s201                      <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          69m\nkube-system   kube-controller-manager-k8s201             <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">1</span>          69m\nkube-system   kube-proxy-8czn5                           <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          12m\nkube-system   kube-proxy-pn4k7                           <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          69m\nkube-system   kube-proxy-vcgwv                           <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          11m\nkube-system   kube-scheduler-k8s201                      <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">1</span>          69m\n$ kubectl get <span class=\"token function\">node</span>\nNAME     STATUS   ROLES           AGE   VERSION\nk8s201   Ready    control-plane   69m   v1.25.0\nk8s202   Ready    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>          12m   v1.25.0\nk8s203   Ready    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>          11m   v1.25.0\n</code></pre>\n<p>完成</p>\n<p>如果想安装高可用版k8s集群，可参考：<a href=\"https://mp.weixin.qq.com/s/lqasax-2-t4QpzgcCOqF-A\">https://mp.weixin.qq.com/s/lqasax-2-t4QpzgcCOqF-A</a></p>\n<h3><a id=\"6_278\"></a>6、验证是否安装成功</h3>\n<p>使用k8s启动一个deployment资源。</p>\n<pre><code class=\"prism language-shell\">$ <span class=\"token function\">vim</span> deploy-nginx.yaml \n$ <span class=\"token function\">cat</span> deploy-nginx.yaml \napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  replicas: <span class=\"token number\">3</span> <span class=\"token comment\"># 告知 Deployment 运行 3 个与该模板匹配的 Pod</span>\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: <span class=\"token number\">80</span>\n$ kubectl apply -f deploy-nginx.yaml \ndeployment.apps/nginx-deployment created\n$ kubectl get po\nNAME                                READY   STATUS    RESTARTS   AGE\nnginx-deployment-7fb96c846b-6xxw8   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          6s\nnginx-deployment-7fb96c846b-r2s9z   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          6s\nnginx-deployment-7fb96c846b-tsmhh   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          6s\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-06 11:14:13", "summary": "文章目录从开始安装一、准备工作、安装和虚拟机、虚拟机环境初始化、安装容器运行时二、安装、使用阿里云镜像安装、使用创建集群、初始化节点、安装网络附加组件、加入节点、验证是否安装成功从开始安装相关链接：官"}