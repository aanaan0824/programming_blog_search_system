{"blogid": "126368145", "writerAge": "码龄1年", "writerBlogNum": "17", "writerCollect": "637", "writerComment": "915", "writerFan": "358", "writerGrade": "5级", "writerIntegral": "1850", "writerName": "一起去看日落吗", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126368145.jpg", "writerRankTotal": "10439", "writerRankWeekly": "221", "writerThumb": "528", "writerVisitNum": "19491", "blog_read_count": "8265", "blog_time": "于 2022-08-17 09:07:34 发布", "blog_title": "【Linux】shell命令以及运行原理和Linux权限详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atelier-sulphurpool-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p><strong>🎇Linux：权限管理</strong></p>\n<hr/>\n<ul><li><strong>博客主页：</strong><a href=\"https://blog.csdn.net/m0_60338933?type=blog\">一起去看日落吗</a></li><li><strong>分享博主的在Linux中学习到的知识和遇到的问题</strong></li><li><strong><code>博主的能力有限，出现错误希望大家不吝赐教</code></strong></li><li><strong>分享给大家一句我很喜欢的话：</strong> 看似不起波澜的日复一日，一定会在某一天让你看见坚持的意义，祝我们都能在鸡零狗碎里找到闪闪的快乐🌿🌞🐾。</li></ul>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0c3f31bc6bb5460689d5e339f5299830.jpeg\"/></p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#1_shell_12\">🍁1. shell命令以及运行原理</a></li><li><a href=\"#2_Linux_43\">🍁2. Linux权限</a></li><li><ul><li><a href=\"#21__44\">🍂2.1 权限的概念</a></li><li><a href=\"#22__67\">🍂2.2 权限管理</a></li><li><a href=\"#23__126\">🍂2.3 文件权限值的表示方法</a></li><li><a href=\"#24__163\">🍂2.4 文件访问权限的相关设置方法</a></li><li><a href=\"#24__219\">🍂2.4 修改文件的掩码</a></li><li><a href=\"#25_file_249\">🍂2.5 file指令</a></li></ul>\n</li><li><a href=\"#3__264\">🍁3. 目录权限</a></li><li><a href=\"#4__277\">🍁4. 粘滞位</a></li><li><a href=\"#5__310\">🍁5. 总结</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"1_shell_12\"></a>🍁1. shell命令以及运行原理</h1>\n<blockquote>\n<p><strong>Linux严格意义上说的是一个操作系统，我们称之为“核心（kernel）“ ，但我们一般用户，不能直接使用kernel。而是通过kernel的“外壳”程序，也就是所谓的shell，来与kernel沟通。</strong></p>\n</blockquote>\n<ul><li><strong>如何理解？为什么不能直接使用kernel？</strong></li></ul>\n<blockquote>\n<p><strong>从技术角度，Shell的最简单定义：命令行解释器（command Interpreter）主要包含：</strong></p>\n<ul><li><code>将使用者的命令翻译给核心（kernel）处理。</code></li><li><code>同时，将核心的处理结果翻译给使用者。</code></li></ul>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\39962f8ab1b74e9a89c30fd9d835268e.png\"/></p>\n<blockquote>\n<p><strong>注意：shell 是所有外壳程序的统称，bash 是一种具体的shell。例如：centos 7外壳程序 ：bash</strong></p>\n</blockquote>\n<blockquote>\n<ul><li><strong>对比windows GUI</strong>，我们操作windows 不是直接操作windows内核，而是通过图形接口，点击，从而完成我们的操作<code>（比如进入D盘的操作，我们通常是双击D盘盘符.或者运行起来一个应用程序）</code>。</li><li><strong>shell 对于Linux</strong>，有相同的作用，主要是<code>对我们的指令进行解析，解析指令给Linux内核</code>。反馈结果在通过内核运行出结果，通过shell解析给用户。</li></ul>\n</blockquote>\n<ul><li><strong>shell运行原理</strong></li></ul>\n<blockquote>\n<ol><li><code>shell是做命令行解释的</code>，给操作系统解释,同时将结果翻译给用户</li><li>shell外壳会保护操作系统，并不是用户所有的命令都会传递到操作系统，<code>对系统有危害性的命令会被阻止从而保护操作系统</code></li><li>shell的运行原理：创建子进程，即子shell，子shell会从父shell中继承很多环境，如变量、命令全路径、文件描述符、当前工作目录、陷阱等等，<code>其好处为子进程出现任何问题都不会影响父进程shell</code></li></ol>\n</blockquote>\n<ul><li><strong>帮助理解：</strong></li></ul>\n<blockquote>\n<ul><li>如果说你是一个闷骚且害羞的程序员，那shell就像媒婆</li><li>操作系统内核就是你们村头漂亮的且有让你心动的MM小花。</li><li>你看上了小花，但是有不好意思直接表白，那就让你你家人找媒婆帮你提亲</li><li>所有的事情你都直接跟媒婆沟通，由媒婆转达你的意思给小花</li><li>而我们找到媒婆姓王，所以我们叫它王婆，它对应我们常使用的bash。</li></ul>\n</blockquote>\n<hr/>\n<h1><a id=\"2_Linux_43\"></a>🍁2. Linux权限</h1>\n<h2><a id=\"21__44\"></a>🍂2.1 权限的概念</h2>\n<ul><li><strong>Linux下有两种用户：超级用户（root）、普通用户。</strong></li></ul>\n<blockquote>\n<ul><li><strong>超级用户</strong>：可以再linux系统下做任何事情，不受限制</li><li><strong>普通用户</strong>：在linux下做有限的事情。</li><li><strong>超级用户的命令提示符是“#”，普通用户的命令提示符是“$”。</strong></li></ul>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\024dea1b10914e5bb30b5a507409fd3c.png\"/></p>\n<ul><li><strong>用户切换的命令</strong></li></ul>\n<blockquote>\n<p><strong>命令</strong>：<code>su [用户名]</code><br/> <strong>功能</strong>：切换用户。<br/> 例如，要从root用户切换到普通用户user，则使用 su user。 要从普通用户user切换到root用户则使用 suroot（root可以省略），此时系统会提示输入root用户的口令。</p>\n</blockquote>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\9ee855fe757c4b98b1ebc099d41956b1.png\"/></p>\n<blockquote>\n<ul><li><strong>切换到root</strong>：用su -，我们可以切换到root用户（<code>此时输入root账号密码，密码是不会回显在屏幕上的</code>）</li><li><strong>切换回普通用户</strong>：用su - 用户名 切回普通用户，（<code>此时不用输入密码，但是我们不建议这样切回，因为使用su -命令时，会创建更多的bash进程</code>）</li><li><strong>推荐的切换回普通用户</strong>：<code>输入exit或者敲击Ctrl+d</code>，回退到普通用户</li></ul>\n</blockquote>\n<hr/>\n<h2><a id=\"22__67\"></a>🍂2.2 权限管理</h2>\n<ul><li><strong>什么是权限</strong></li></ul>\n<blockquote>\n<p><strong>权限本质上是决定某件事情，某人能否做。</strong></p>\n<ul><li><strong>针对人：</strong> 例如我是这间房子的主人所以我可以自由进出这个房子</li><li><strong>针对事物：</strong> 我想去吃一台电脑、我想在面包上玩英雄联盟、看电影。面包能吃，但是电脑不能吃、你可以吃面包，但是不能吃电脑；这里面包括了两个属性。</li></ul>\n</blockquote>\n<blockquote>\n<p><strong>文件受人的影响和文件受本身自身特点 (事物属性) 的影响 所以<code>文件权限 = 人 + 事物属性</code></strong><br/> <strong>文件权限属性：r(读)、w(写)、x(执行权限)</strong><br/> <strong>人 (不是特定具体的人，而是一种角色)：拥有者、所属组、other (其它）</strong></p>\n</blockquote>\n<ul><li><strong>文件访问者的分类（人）</strong></li></ul>\n<blockquote>\n<ul><li>文件和文件目录的所有者：u—User（中国平民 法律问题）</li><li>文件和文件目录的所有者所在的组的用户：g—Group（不多说）</li><li>其它用户：o—Others （外国人）</li></ul>\n</blockquote>\n<ul><li><strong>文件类型和访问权限（事物属性）</strong></li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6ba3ee98361d4a608ef3da1f16ecc46f.png\"/></p>\n<blockquote>\n<p><strong>使用命令 ls -l (ll) 显示的多列属性的第一列对应的字符来区分它的文件类型。</strong></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\093bf94d7e814894b1f1cdba30e34d6c.png\"/></p>\n<blockquote>\n<p><strong>不需要列出other，因为不是拥有者和所属组的就是other了</strong></p>\n</blockquote>\n<ul><li><strong>帮助理解 - 拥有者和所属组</strong></li></ul>\n<blockquote>\n<p><strong>我们举个简单的例子，在一家公司内部，两个项目组，要完成同样的代码任务，他们之间彼此是互相竞争的关系，但是公司给他们提供的服务器只有一个，他们完成的代码要提交上去，这是你写的代码，肯定只是想让你和你的组员组长能看到，不想你的竞争对手组看到，这就产生了所属组的概念。</strong><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fc46273f0aa148fa91e5eb642827d672.png\"/></p>\n</blockquote>\n<ul><li><strong>文件类型</strong></li></ul>\n<blockquote>\n<p>d：文件夹<br/> -：普通文件<br/> l：软链接（类似Windows的快捷方式）<br/> b：块设备文件（例如硬盘、光驱等）<br/> p：管道文件<br/> c：字符设备文件（例如屏幕等串口设备）<br/> s：套接口文件</p>\n</blockquote>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\6dd413d1a10543969222b4542d50041c.png\"/></p>\n<ul><li><strong>基本权限</strong></li></ul>\n<blockquote>\n<p>i.读（r/4）：Read对文件而言，具有读取文件内容的权限；对目录来说，具有浏览该目录信息的权限<br/> ii.写（w/2）：Write对文件而言，具有修改文件内容的权限；对目录来说具有删除移动目录内文件的权限<br/> iii.执行（x/1）：execute对文件而言，具有执行文件的权限；对目录来说，具有进入目录的权限<br/> iv.“—”表示不具有该项权限</p>\n</blockquote>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\7728362777ae45caae858ae0d9a4f971.png\"/></p>\n<hr/>\n<h2><a id=\"23__126\"></a>🍂2.3 文件权限值的表示方法</h2>\n<p><code>字符表示方法</code></p>\n<table><thead><tr><th>Linux表示</th><th>说明</th><th>Linux</th><th>说明</th></tr></thead><tbody><tr><td>r - -</td><td>只读</td><td>- w -</td><td>仅可写</td></tr><tr><td>- - x</td><td>仅可执行</td><td>r w -</td><td>可读可写</td></tr><tr><td>- w x</td><td>可写可执行</td><td>r - x</td><td>可读可执行</td></tr><tr><td>r w x</td><td>可读可写可执行</td><td>- - -</td><td>无权限</td></tr></tbody></table>\n<p><code>八进制数值表示方法</code></p>\n<table><thead><tr><th>权限符号 (读写执行)</th><th>八进制</th><th>二进制</th></tr></thead><tbody><tr><td>r</td><td>4</td><td>1 0 0</td></tr><tr><td>w</td><td>2</td><td>0 1 0</td></tr><tr><td>x</td><td>1</td><td>0 0 1</td></tr><tr><td>r w</td><td>6</td><td>1 1 0</td></tr><tr><td>r x</td><td>5</td><td>1 0 1</td></tr><tr><td>w x</td><td>3</td><td>0 1 1</td></tr><tr><td>r w x</td><td>7</td><td>1 1 1</td></tr><tr><td>- - -</td><td>0</td><td>0 0 0</td></tr></tbody></table>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\aed846232f584cd998cbaa8cee5e780f.png\"/></p>\n<ul><li><strong>权限更改</strong></li></ul>\n<blockquote>\n<p><strong>$ chmod 777 text.c</strong><br/> <strong>$ chmod 000 text.c</strong><br/> <strong>$ chmod 640 text.c</strong></p>\n</blockquote>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\516d96a9ebe44428a97dae3387d561e7.png\"/></p>\n<hr/>\n<h2><a id=\"24__163\"></a>🍂2.4 文件访问权限的相关设置方法</h2>\n<p><strong><code>chmod</code></strong></p>\n<blockquote>\n<ul><li><strong>功能</strong>：设置文件的访问权限</li><li><strong>格式</strong>：chmod [参数] 权限 文件名</li></ul>\n</blockquote>\n<ul><li><strong>常用选项：</strong></li></ul>\n<blockquote>\n<p>R -&gt; 递归修改目录文件的权限<br/> 说明：只有文件的拥有者和root才可以改变文件的权限</p>\n</blockquote>\n<ul><li><strong>chmod命令权限值得格式</strong></li></ul>\n<blockquote>\n<p><strong>① 用户表示符+/-=权限字符</strong></p>\n<ul><li>+:向权限范围增加权限代号所表示的权限</li><li>-:向权限范围取消权限代号所表示的权限</li><li>=:向权限范围赋予权限代号所表示的权限<br/> <strong>用户符号：</strong></li><li>u：拥有者</li><li>g：拥有者同组用</li><li>o：其它用户</li><li>a：所有用户</li></ul>\n</blockquote>\n<p><strong>示例：</strong></p>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\b099254447fc4faabf645b1060146952.png\"/></p>\n<blockquote>\n<p><strong>注意：chmod可以给拥有者，所属组，其他用户同时修改权限，中间用逗号隔开</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>如果要修改不是自己的文件的时候需要sudo临时权限提升或者直接切成root身份</strong></p>\n<ul><li><code>sudo chmod 用户表示符+/-=权限字符 文件名</code></li></ul>\n</blockquote>\n<p><strong><code>chown</code></strong></p>\n<blockquote>\n<p><strong>功能</strong>：修改文件的拥有者<br/> <strong>格式</strong>：chown [参数] 用户名 文件名</p>\n</blockquote>\n<p><strong>实例：</strong></p>\n<blockquote>\n<p><strong>$ sudo chown root test.c//修改拥有者</strong><br/> <strong>$ sudo chown lighthouse test.c//修改拥有者</strong><br/> <strong>$ sudo chown :lighthouse test.c//修改所属组</strong><br/> <strong>$ sudo chown lighthouse:lighthouse test.c//可以将拥有者、所属组同时修改</strong><br/> <strong>$ sudo chown root:root test.c//可以将拥有者、所属组同时修改</strong></p>\n</blockquote>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\09fe955a7ba64d4ba957d3f0b7579e9b.png\"/></p>\n<p><strong><code>chgrp</code></strong></p>\n<blockquote>\n<p><strong>功能</strong>：<code>修改文件或目录的所属组</code><br/> <strong>格式</strong>：<code>chgrp [参数] 用户组名 文件名</code><br/> <strong>常用选项</strong>：<code>-R 递归修改文件或目录的所属组</code></p>\n</blockquote>\n<p><strong>实例：</strong></p>\n<blockquote>\n<p><strong>$ sudo chgrp root text.c</strong><br/> <strong>$ sudo chgrp lighthouse text.c</strong></p>\n</blockquote>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\72ab562057004b07946906748b7505bb.png\"/></p>\n<h2><a id=\"24__219\"></a>🍂2.4 修改文件的掩码</h2>\n<p><strong><code>umask</code></strong></p>\n<blockquote>\n<p><strong>功能：</strong> 查看或修改文件掩码<br/> <strong>语法：</strong> umask 权限值</p>\n</blockquote>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\1cd9c06202fa4fb4b00f61d6df9c5add.png\"/></p>\n<blockquote>\n<p><strong>新建文件夹默认权限=0666</strong><br/> <strong>新建目录默认权限=0777</strong></p>\n</blockquote>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\11002e1f7d8f41f183f6153e9dca681b.png\"/><br/> <strong>但是我们观察到，新建的文件和目录并不是默认的起始权限，这里是什么原因呢？</strong></p>\n<blockquote>\n<p>原因就是创建文件或目录的时候还要受到umask的影响。假设默认权限是mask，则实际创建的出来的文件权限是: <strong><code>umask &amp; ~umask</code></strong></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\31a6d95c9b624a44a660f2644377553b.png\"/></p>\n<ul><li><strong>我们也可以通过修改文件的umask码值来修改文件的权限:</strong></li></ul>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\5857e38de7ad4ec6b3e607de8ceb9771.png\"/></p>\n<blockquote>\n<p><strong>说明：</strong> 将现有的存取权限减去权限掩码后，即可产生建立文件时预设权限。超级用户默认掩码值为0022，普通用户默认为0002。</p>\n</blockquote>\n<hr/>\n<h2><a id=\"25_file_249\"></a>🍂2.5 file指令</h2>\n<p><code>file</code></p>\n<blockquote>\n<p><strong>功能说明</strong>：辨识文件类型。<br/> <strong>语法</strong>：file [选项] 文件或目录…</p>\n</blockquote>\n<p><strong>常用选项：</strong></p>\n<blockquote>\n<p>-c 详细显示指令执行过程，便于排错或分析程序执行的情形。<br/> -z 尝试去解读压缩文件的内容。</p>\n</blockquote>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\ff1ff067c81e484db2b52e038e3ae0b9.png\"/></p>\n<hr/>\n<h1><a id=\"3__264\"></a>🍁3. 目录权限</h1>\n<p><strong>🍃面试题：进入一个目录要什么权限？</strong></p>\n<blockquote>\n<ul><li><strong>可读权限</strong>: 如果目录没有可读权限, <code>则无法用ls等命令查看目录中的文件内容.</code></li><li><strong>可写权限</strong>: 如果目录没有可写权限,<code> 则无法在目录中创建文件, 也无法在目录中删除文件.</code></li><li><strong>可执行权限</strong>：如果没有目录可执行权限，<code>则无法cd到目录中</code></li></ul>\n</blockquote>\n<blockquote>\n<ul><li>进入一个目录，需要：<code>x</code></li><li>查看目录下的文件列表需要：<code>r</code></li><li>要在目录下创建文件或者目录：<code>w</code></li></ul>\n</blockquote>\n<hr/>\n<h1><a id=\"4__277\"></a>🍁4. 粘滞位</h1>\n<p><strong>🍃新发现：</strong></p>\n<blockquote>\n<p>就是只要用户具有目录的写权限, 用户就可以删除目录中的文件, 而不论这个用户是否有这个文件的写权限. <code>我创建的一个文件, 凭什么被你一个外人可以删掉</code></p>\n</blockquote>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\91522c24e93b4953b15186abe40b61cd.png\"/></p>\n<p><strong>结论：</strong></p>\n<blockquote>\n<p><code>如果目录本身对other具有w权限，other可以删掉任何目录下的东西</code><br/> <code>如果目录本身对other没有w权限，other则不可以删除</code></p>\n</blockquote>\n<p><strong>我们的需求：other可以在特定的目录下创建文件并写入，但是不想让任何人删除掉自己的文件</strong><br/> <code>这里为了解决这个不科学的问题，Linux引入了粘滞位的概念</code></p>\n<hr/>\n<p><strong><code>粘滞位</code></strong></p>\n<blockquote>\n<p><strong>语法</strong>： chmod +t 目录名<br/> <strong>功能</strong>： 给目录加上粘滞位</p>\n</blockquote>\n<p><strong>注意：</strong></p>\n<blockquote>\n<p><code>只能对目录设置</code>，一般是<code>限制other</code>权限的，对设置粘滞位的目录，在该目录下，<strong>只能有文件的拥有者和root用户可以删除</strong>，其他人不能删除</p>\n</blockquote>\n<p><strong>示例：</strong></p>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\678a2d4e20e94faf8e56997c7f21a511.png\"/></p>\n<blockquote>\n<p>有多个人或者系统会有很多的临时数据，所有的临时文件都放在系统的*/tmp*目录下。所有的权限需要放开，但是只想让文件的拥有者删除自己的文件，这需要设置粘滞位</p>\n</blockquote>\n<hr/>\n<h1><a id=\"5__310\"></a>🍁5. 总结</h1>\n<blockquote>\n<ul><li><strong>目录的可执行权限是表示你可否在目录下执行命令。</strong></li><li><strong>如果目录没有-x权限，则无法对目录执行任何命令，甚至无法cd 进入目, 即使目录仍然有-r 读权限（这个地方很容易犯错，认为有读权限就可以进入目录读取目录下的文件）</strong></li><li><strong>而如果目录具有-x权限，但没有-r权限，则用户可以执行命令，可以cd进入目录。但由于没有目录的读权限</strong></li><li><strong>所以在目录下，即使可以执行ls命令，但仍然没有权限读出目录下的文档。</strong></li></ul>\n</blockquote>\n<hr/>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-17 09:07:34", "summary": "：权限管理博客主页：一起去看日落吗分享博主的在中学习到的知识和遇到的问题博主的能力有限，出现错误希望大家不吝赐教分享给大家一句我很喜欢的话：看似不起波澜的日复一日，一定会在某一天让你看见坚持的意义，祝"}