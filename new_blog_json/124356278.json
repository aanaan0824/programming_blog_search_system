{"blogid": "124356278", "writerAge": "码龄8年", "writerBlogNum": "423", "writerCollect": "5040", "writerComment": "415", "writerFan": "1297", "writerGrade": "7级", "writerIntegral": "13664", "writerName": "牛奶咖啡13", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124356278.jpg", "writerRankTotal": "861", "writerRankWeekly": "7439", "writerThumb": "764", "writerVisitNum": "1615922", "blog_read_count": "1723", "blog_time": "已于 2022-04-23 15:04:37 修改", "blog_title": "C#实现对Sqlite数据库的通用操作", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>一、实现效果</h1>\n<h2>  1.1、实现功能</h2>\n<p>  ①实现创建Sqlite数据库;</p>\n<p>  ②实现创建指定Sqlite数据库的表;</p>\n<p>  ③实现给Sqlite数据库的指定表【插入、查询、更新、删除、分页查询】数据;</p>\n<p>  ④实现获取Sqlite数据库中的所有表名称及其表包含的所有列名称;</p>\n<p>  ⑤实现判断数据是否存在、获取最大Id；</p>\n<p>  ⑥实现内存版的sqlite数据库；</p>\n<h2>1.2、效果图</h2>\n<p><img alt=\"\" height=\"1200\" src=\"https://img-blog.csdnimg.cn/47bfd692d6454c46ab29cf787269f8b9.gif\" width=\"1200\"/></p>\n<h1>二、实现核心</h1>\n<h2>2.1、项目工程</h2>\n<p><strong><span style=\"color:#fe2c24;\">该项目的完整工程下载地址如下：</span></strong></p>\n<p><a class=\"has-card\" href=\"https://download.csdn.net/download/xiaochenXIHUA/85207095\" title=\"使用C#开发的Sqlite数据库创建、操作的源码项目工程\"><span class=\"link-card-box\"><span class=\"link-title\">使用C#开发的Sqlite数据库创建、操作的源码项目工程</span><span class=\"link-link\"><img alt=\"\" class=\"link-link-icon\" src=\"..\\..\\static\\image\\icon-default.png\"/>https://download.csdn.net/download/xiaochenXIHUA/85207095</span></span></a></p>\n<h2>2.2、添加引用</h2>\n<p>    正常情况下，如果不需要给Sqlite数据库加密，则直接添加【Microsoft.Data.Sqlite】的包引用即可；<span style=\"color:#fe2c24;\">但是如果是需要给Sqlite数据库加密，则需要移除【Microsoft.Data.Sqlite】包，然后在项目中添加【Microsoft.Data.Sqlite.Core】和【SQLitePCLRaw.bundle_e_sqlcipher】引用</span>，如下图所示。</p>\n<p><img alt=\"\" height=\"342\" src=\"..\\..\\static\\image\\15210f404d1c454a96c1f272981a5c55.png\" width=\"535\"/></p>\n<p><img alt=\"\" height=\"372\" src=\"..\\..\\static\\image\\b3985e6eaa374f4c98d20e88eca51ac0.png\" width=\"1200\"/></p>\n<h2>2.3、Sqlite数据库帮助类</h2>\n<p>这里Sqlite数据库帮助类的部分内容，如下所示：</p>\n<pre><code class=\"language-cs\">/***\n*\tTitle：\"轻量数据库\" 项目\n*\t\t主题：：Sqlite数据库帮助类【使用 Microsoft.Data.Sqlite 】\n*\tDescription：\n*\t\t功能：XXX\n*\tDate：2022\n*\tVersion：0.1版本\n*\tAuthor：Coffee\n*\tModify Recoder：\n*/\n\nusing LiteDBHelper.Model;\nusing Microsoft.Data.Sqlite;\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.IO;\nusing System.Text;\n\nnamespace LiteDBHelper\n{\n    public class SqliteDBHelper\n    {\n        #region   基础参数\n\n        //数据库连接字符串\n        private SqliteConnectionStringBuilder _ConnStr;\n\n        //获取到数据库连接字符串\n        public string ConnStr { get { return _ConnStr.ConnectionString; } }\n\n        #endregion\n\n\n        #region   构造函数\n\n        /// &lt;summary&gt;\n        /// 构造函数\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"connnection\"&gt;连接字符串&lt;/param&gt;\n        public SqliteDBHelper(string connnection)\n        {\n            if (string.IsNullOrEmpty(connnection)) return;\n\n            _ConnStr.ConnectionString = connnection;\n\n        }\n\n\n        /// &lt;summary&gt;\n        /// 构造函数（基础不加密连接）\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"sqliteFilePathAndName\"&gt;sqlite数据库文件的路径和名称（比如：@\"D:\\\\HalmEL\\\\2022-4-19.db\"）&lt;/param&gt;\n        /// &lt;param name=\"sqliteOpenMode\"&gt;sqlite数据库的打开模式&lt;/param&gt;\n        /// &lt;param name=\"sqliteCacheMode\"&gt;sqlite的缓存模式&lt;/param&gt;\n        /// &lt;param name=\"defaultTimeout\"&gt;默认超时时间（单位是：秒）&lt;/param&gt;\n        /// &lt;param name=\"isUseSharePool\"&gt;是否使用共享连接池（默认true表示使用）&lt;/param&gt;\n        public SqliteDBHelper(string sqliteFilePathAndName,SqliteOpenMode sqliteOpenMode, SqliteCacheMode sqliteCacheMode, \n            int defaultTimeout=30, bool isUseSharePool=true)\n        {\n            var connectionString = new SqliteConnectionStringBuilder()\n            {\n                DataSource=sqliteFilePathAndName,\n                Mode=sqliteOpenMode,\n                Cache=sqliteCacheMode,\n                //DefaultTimeout=defaultTimeout,\n                //Pooling= isUseSharePool\n            };\n\n            _ConnStr = connectionString;\n\n        }\n\n\n        /// &lt;summary&gt;\n        /// 构造函数（带加密连接）\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"sqliteFilePathAndName\"&gt;sqlite数据库文件的路径和名称（比如：@\"D:\\\\HalmEL\\\\2022-4-19.db\"）&lt;/param&gt;\n        /// &lt;param name=\"password\"&gt;数据库密码&lt;/param&gt;\n        /// &lt;param name=\"sqliteOpenMode\"&gt;sqlite数据库的打开模式&lt;/param&gt;\n        /// &lt;param name=\"sqliteCacheMode\"&gt;sqlite的缓存模式&lt;/param&gt;\n        /// &lt;param name=\"defaultTimeout\"&gt;默认超时时间（单位是：秒）&lt;/param&gt;\n        /// &lt;param name=\"isUseSharePool\"&gt;是否使用共享连接池（默认true表示使用）&lt;/param&gt;\n        public SqliteDBHelper(string sqliteFilePathAndName, string password, SqliteOpenMode sqliteOpenMode, SqliteCacheMode sqliteCacheMode, \n            int defaultTimeout = 30, bool isUseSharePool = true)\n        {\n            var connectionString = new SqliteConnectionStringBuilder()\n            {\n                DataSource = sqliteFilePathAndName,\n                Password = password,\n                Mode = sqliteOpenMode,\n                Cache = sqliteCacheMode,\n                //DefaultTimeout = defaultTimeout,\n                //Pooling = isUseSharePool\n            };\n\n            _ConnStr = connectionString;\n\n        }\n\n\n        #endregion\n\n        #region   创建Sqlite数据库、表及其字段\n\n        /// &lt;summary&gt;\n        /// 创建sqlite数据库\n        /// &lt;/summary&gt;\n        ///&lt;param name = \"sqliteFilePathAndName\" &gt; sqlite数据库文件的路径和名称（比如：@\"D:\\\\HalmEL\\\\2022-4-19.db\"）&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public ResultInfo CreateSqliteDataBase(string sqliteFilePathAndName)\n        {\n            ResultInfo resultInfo = new ResultInfo();\n\n            if (File.Exists(sqliteFilePathAndName))\n            {\n                resultInfo.ResultStatus = ResultStatus.Success;\n                resultInfo.Message = $\"{sqliteFilePathAndName} 文件已经存在！\";\n\n                return resultInfo;\n            }\n            try\n            {\n                //如果目录不存在，则创建目录\n                string folder = Path.GetDirectoryName(sqliteFilePathAndName);\n                if (!Directory.Exists(folder))\n                {\n                    Directory.CreateDirectory(folder);\n\n                }\n\n                if (!File.Exists(sqliteFilePathAndName))\n                {\n                    using (SqliteConnection sqliteConnection = new SqliteConnection(_ConnStr.ConnectionString))\n                    {\n                        sqliteConnection.Open();\n                    };\n                }\n\n                resultInfo.ResultStatus = ResultStatus.Success;\n                resultInfo.Message = $\"{sqliteFilePathAndName} 文件创建成功！\";\n            }\n            catch (Exception ex)\n            {\n                resultInfo.ResultStatus = ResultStatus.Error;\n                resultInfo.Message = $\"{ex.Message}\";\n            }\n\n            return resultInfo;\n        }\n\n        /// &lt;summary&gt;\n        /// 修改数据库密码\n        /// &lt;/summary&gt;\n        /// &lt;param name = \"sqliteFilePathAndName\" &gt; sqlite数据库文件的路径和名称（比如：@\"D:\\\\HalmEL\\\\2022-4-19.db\"）&lt;/param&gt;\n        /// &lt;param name=\"oldPassword\"&gt;旧密码&lt;/param&gt;\n        /// &lt;param name=\"newPassword\"&gt;新密码&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public ResultInfo ModifySqliteDBPassword(string sqliteFilePathAndName, string oldPassword, string newPassword)\n        {\n            ResultInfo resultInfo = new ResultInfo();\n\n            if (string.IsNullOrEmpty(sqliteFilePathAndName) || string.IsNullOrEmpty(oldPassword) ||\n                string.IsNullOrEmpty(newPassword))\n            {\n                resultInfo.SetContent(ResultStatus.Error, $\"内容为空\", null);\n\n                return resultInfo;\n            }\n\n            string baseConnectionString = $\"Data Source={sqliteFilePathAndName}\";\n            var connectionString = new SqliteConnectionStringBuilder(baseConnectionString)\n            {\n                Mode = SqliteOpenMode.ReadWriteCreate,\n                Password = oldPassword\n            };\n\n            try\n            {\n                using (var connection = new SqliteConnection(connectionString.ConnectionString))\n                {\n                    connection.Open();\n                    using (var command = connection.CreateCommand())\n                    {\n                        command.CommandText = \"SELECT quote($newPassword);\";\n                        command.Parameters.AddWithValue(\"$newPassword\", newPassword);\n                        var quotedNewPassword = (string)command.ExecuteScalar();\n\n                        command.CommandText = \"PRAGMA rekey = \" + quotedNewPassword;\n                        command.Parameters.Clear();\n                        command.ExecuteNonQuery();\n\n                        resultInfo.SetContent(ResultStatus.Success, $\"修改密码成功\", null);\n                    };\n                }\n\n                //重置当前连接密码为新密码\n                _ConnStr.Password = newPassword;\n\n            }\n            catch (Exception ex)\n            {\n                resultInfo.SetContent(ResultStatus.Error, $\"{ex.Message}\", null);\n            }\n           \n\n            return resultInfo;\n        }\n\n        /// &lt;summary&gt;\n        /// 创建sqlite表（可自定义字段类型）\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"tableName\"&gt;表名称&lt;/param&gt;\n        /// &lt;param name=\"fieldList\"&gt;字段列表&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public ResultInfo CreateSqliteTable(string tableName, List&lt;SqliteFieldInfo&gt; fieldList)\n        {\n            ResultInfo resultInfo = new ResultInfo();\n\n            if (string.IsNullOrEmpty(tableName) || fieldList == null || fieldList.Count &lt; 1)\n            {\n                resultInfo.SetContent(ResultStatus.Error, \"内容为空,请检查！\", null);\n                return resultInfo;\n            }\n\n            SqliteConnection sqliteConnection = new SqliteConnection(_ConnStr.ConnectionString);\n\n            try\n            {\n                //创建表的命令\n                string cmdText1 = $\"CREATE TABLE IF NOT EXISTS {tableName} ( \\n\";\n                string cmdText2 = string.Empty;\n\n                //给表添加字段\n                if (fieldList != null &amp;&amp; fieldList.Count &gt;= 1)\n                {\n                    int fieldCount = fieldList.Count;\n\n                    SqliteFieldInfo fieldInfo = new SqliteFieldInfo();\n                    for (int i = 0; i &lt; fieldCount; i++)\n                    {\n                        fieldInfo = fieldList[i];\n\n                        if (i&lt;fieldCount-1)\n                        {\n                            cmdText2 += AddField(fieldInfo)+\",\\n\";\n                        }\n                        if (i==fieldCount-1)\n                        {\n                            cmdText2 += AddField(fieldInfo)+\"\\n\";\n                        }\n                        \n                    }\n                    cmdText2 += $\");\";\n                }\n\n                if (sqliteConnection.State!=ConnectionState.Open)\n                {\n                    sqliteConnection.Open();\n                    using (SqliteCommand cmd = new SqliteCommand())\n                    {\n                        cmd.Connection = sqliteConnection;\n                        cmd.CommandText = cmdText1 + cmdText2;\n                        cmd.ExecuteNonQuery();\n                    }\n                }\n\n                resultInfo.SetContent(ResultStatus.Success, $\"创建：{tableName} 表成功\", null);\n            }\n            catch (Exception ex)\n            {\n                resultInfo.SetContent(ResultStatus.Error, $\"{ex.Message}\", null);\n            }\n            finally\n            {\n                //关闭连接\n                sqliteConnection.Close();\n            }\n\n            return resultInfo;\n        }\n\n\n        #endregion\n\n        #region   私有方法\n\n        /// &lt;summary&gt;\n        /// 添加字段\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"fieldInfo\"&gt;字段信息&lt;/param&gt;\n        /// &lt;returns&gt;返回添加字段结果&lt;/returns&gt;\n        private string AddField(SqliteFieldInfo fieldInfo)\n        {\n            string str = null;\n\n            if (fieldInfo == null) return null;\n\n            //设置指定类型的字段到表中\n            str = $\" {fieldInfo.Name}\";\n\n            if (fieldInfo.Length &gt; 0)\n            {\n                str += $\" {fieldInfo.DataType}({fieldInfo.Length})\";\n            }\n            else\n            {\n                str+= $\" {fieldInfo.DataType}\";\n            }\n\n            if (fieldInfo.IsNotEmpty)\n            {\n                str += $\" NOT NULL\";\n            }\n\n            if (fieldInfo.IsPrimaryKey)\n            {\n                str += $\" PRIMARY KEY\";\n            }\n\n            if (fieldInfo.IsAutoIncrement)\n            {\n                str += $\" AUTOINCREMENT\";\n            }\n\n            return str;\n        }\n\n\n        #endregion\n\n\n\n    }//Class_end\n\n\n}\n</code></pre>\n<h1>三、其他的相关资料</h1>\n<h2><a class=\"has-card\" href=\"https://docs.microsoft.com/zh-cn/dotnet/standard/data/sqlite/?tabs=netcore-cli\" title=\"概述 - Microsoft.Data.Sqlite | Microsoft Docs\"><span class=\"link-card-box\"><span class=\"link-title\">概述 - Microsoft.Data.Sqlite | Microsoft Docs</span><span class=\"link-link\"><img alt=\"\" class=\"link-link-icon\" src=\"..\\..\\static\\image\\icon-default.png\"/>https://docs.microsoft.com/zh-cn/dotnet/standard/data/sqlite/?tabs=netcore-cli</span></span></a><a class=\"has-card\" href=\"https://www.sqlite.org/index.html\" title=\"SQLite官网\"><span class=\"link-card-box\"><span class=\"link-title\">SQLite官网</span><span class=\"link-link\"><img alt=\"\" class=\"link-link-icon\" src=\"..\\..\\static\\image\\icon-default.png\"/>https://www.sqlite.org/index.html</span></span></a><a class=\"has-card\" href=\"https://github.com/dotnet/docs/blob/main/samples/snippets/standard/data/sqlite/InMemorySample/Program.cs\" title=\"sqlite内存数据库示例\"><span class=\"link-card-box\"><span class=\"link-title\">sqlite内存数据库示例</span><span class=\"link-link\"><img alt=\"\" class=\"link-link-icon\" src=\"..\\..\\static\\image\\icon-default.png\"/>https://github.com/dotnet/docs/blob/main/samples/snippets/standard/data/sqlite/InMemorySample/Program.cs</span></span></a><a class=\"has-card\" href=\"https://docs.microsoft.com/zh-cn/dotnet/standard/data/sqlite/encryption?tabs=netcore-cli\" title=\"Sqlite数据库的加密 - Microsoft.Data.Sqlite | Microsoft Docs\"><span class=\"link-card-box\"><span class=\"link-title\">Sqlite数据库的加密 - Microsoft.Data.Sqlite | Microsoft Docs</span><span class=\"link-link\"><img alt=\"\" class=\"link-link-icon\" src=\"..\\..\\static\\image\\icon-default.png\"/>https://docs.microsoft.com/zh-cn/dotnet/standard/data/sqlite/encryption?tabs=netcore-cli</span></span></a><a class=\"has-card\" href=\"https://www.sqlite.org/lang.html\" title=\"Sqlite的语法\"><span class=\"link-card-box\"><span class=\"link-title\">Sqlite的语法</span><span class=\"link-link\"><img alt=\"\" class=\"link-link-icon\" src=\"..\\..\\static\\image\\icon-default.png\"/>https://www.sqlite.org/lang.html</span></span></a></h2>\n</div>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2022-04-23 15:04:37", "summary": "一、实现效果、实现功能实现创建数据库实现创建指定数据库的表实现给数据库的指定表插入、查询、更新、删除、分页查询数据实现获取数据库中的所有表名称及其表包含的所有列名称实现判断数据是否存在、获取最大；实现"}