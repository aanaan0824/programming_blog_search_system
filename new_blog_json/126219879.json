{"blogid": "126219879", "writerAge": "码龄163天", "writerBlogNum": "80", "writerCollect": "2734", "writerComment": "3081", "writerFan": "3573", "writerGrade": "6级", "writerIntegral": "7846", "writerName": "北极的三哈", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126219879.jpg", "writerRankTotal": "1807", "writerRankWeekly": "16", "writerThumb": "2690", "writerVisitNum": "648858", "blog_read_count": "10125", "blog_time": "已于 2022-08-09 21:51:21 修改", "blog_title": "Python组合数据类型——序列类型：列表、元组", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>​<a href=\"https://app-blog.csdn.net/creatActivity?id=10170&amp;spm=1001.2101.3001.8632\">​#21天学习挑战赛—100天精通Python从入门到就业#</a><br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/4f047c5263c3424b9353a21c7f6ccf8b.gif#pic_center\"/></p>\n<blockquote>\n<p>🤵‍♂️ 个人主页: <a href=\"https://blog.csdn.net/m0_68744965?spm=1000.2115.3001.5343\">@Flyme awei 个主页</a><br/> 👨‍💻 作者简介：<code>Python</code>领域新星创作者。<br/> 📒 系列专栏：《<a href=\"https://blog.csdn.net/m0_68744965/category_11957439.html?spm=1001.2014.3001.5482\">在线编程-Python篇</a>》<br/> 🌐推荐一款<code>找工作神器</code>网站：《<a href=\"https://www.nowcoder.com/link/pc_csdncpt_flyme_python\">牛客网</a>》|<code>笔试题库</code>|<code>面试经验</code>|<br/> 🐋 希望大家多多支持😘一起进步呀！<br/> 📝 如果文章对你有帮助的话，欢迎评论 💬点赞 👍收藏 📂加关注</p>\n</blockquote>\n<h1><a id=\"_10\"></a>前言</h1>\n<blockquote>\n<p>  今天是《<a href=\"https://marketing.csdn.net/p/bdabfb52c5d56532133df2adc1a728fd\">CSDN21天学习挑战赛</a>》的第8天<br/>   昨天学习了【<a href=\"http://t.csdn.cn/Wvz9B\">Python语言程序的流程控制结构</a>】顺序、分支、循环结构。<br/>   今天将学习Python组合数据类型——序列类型：列表、元组。</p>\n</blockquote>\n<blockquote>\n<p>活动地址：<a href=\"https://marketing.csdn.net/p/bdabfb52c5d56532133df2adc1a728fd\">CSDN21天学习挑战赛</a></p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_10\">前言</a></li><li><a href=\"#Python_20\">Python序列类型--列表、元组</a></li><li><a href=\"#_21\">一、列表类型</a></li><li><ul><li><a href=\"#1_22\">1.列表的定义</a></li><li><a href=\"#2_49\">2.列表的特点</a></li><li><a href=\"#3_55\">3.列表的索引</a></li><li><a href=\"#4_91\">4.列表的切片</a></li></ul>\n</li><li><a href=\"#_119\">二、列表类型的操作</a></li><li><ul><li><a href=\"#1_120\">1.列表操作函数</a></li><li><a href=\"#2_144\">2.列表操作方法</a></li><li><ul><li><a href=\"#21_333\">2.1列表元素的增加操作</a></li><li><a href=\"#22_367\">2.2列表元素的删除操作</a></li><li><a href=\"#23_407\">2.3列表元素的修改操作</a></li><li><a href=\"#24_420\">2.4列表元素的排序操作</a></li></ul>\n</li><li><a href=\"#3_484\">3.列表生成式</a></li></ul>\n</li><li><a href=\"#_495\">三、元组类型</a></li><li><ul><li><a href=\"#1_496\">1.什么是元组</a></li><li><a href=\"#2_523\">2.元组的创建方式</a></li><li><a href=\"#3_581\">3.元组的遍历</a></li></ul>\n</li><li><a href=\"#_596\">四、总结</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"Python_20\"></a>Python序列类型–列表、元组</h1>\n<h1><a id=\"_21\"></a>一、列表类型</h1>\n<h2><a id=\"1_22\"></a>1.列表的定义</h2>\n<blockquote>\n<p>列表类型是包含0个或多个元素的有序序列，属于序列类型。列表可以进行元素的增加、删除、替换、查找等操作。列表没有长度限制，无素类型可以不同，不需要预定长度。</p>\n</blockquote>\n<blockquote>\n<p>列表类型用中括号<code>[]</code>表示，也可以通过<code>list(x)</code>函数将集合或字符串类型转换成列表类型。<code>list()</code>函数可生成空列表。</p>\n</blockquote>\n<blockquote>\n<p>列表需要使用中括号<code>[]</code>,元素之间使用英文的逗号进行分隔</p>\n</blockquote>\n<p><strong>列表示意图：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1948b10ea956405a8c11d84e6cf48645.png\"/><br/> <strong>列表创建方式</strong></p>\n<ol><li>使用<code>[]</code>方括号</li></ol>\n<pre><code class=\"prism language-python\">lst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n</code></pre>\n<ol start=\"2\"><li>使用内置函数<code>list()</code></li></ol>\n<pre><code class=\"prism language-python\">lst2 <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst2<span class=\"token punctuation\">)</span>\n</code></pre>\n<ol start=\"3\"><li>列表生成式</li></ol>\n<pre><code class=\"prism language-python\">lst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"2_49\"></a>2.列表的特点</h2>\n<ol><li>列表元素按顺序有序排列</li><li>索引映射唯一一个数据</li><li>列表可以存储重复数据</li><li>任意数据类型混存</li><li>根据需要动态分配内存空间</li></ol>\n<h2><a id=\"3_55\"></a>3.列表的索引</h2>\n<blockquote>\n<p>索引是列表的基本操作，用于获得列表第一个元素。该操作沿用序列类型的索引方式，即正向递增序号和反向递减序号，使用中括号作为索引操作符，索引序号不能超过列表的元素范围，否则会产生<code>IndexErrorr</code>的错误。</p>\n</blockquote>\n<p><strong>获取列表中指定元素索引</strong></p>\n<p>语法：<code>列表或列表变量.index（'要获取索引的元素',起始位置,结束位置）</code></p>\n<p>如果列表中含有相同元素，只返回相同元素的第一个元素的索引。</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 如果列表中含有相同元素，只返回相同元素的第一个元素的索引</span>\n\nlst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token string\">'java'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 5</span>\n</code></pre>\n<p>可以使用遍历循环对列表类型的元素进行遍历操作。</p>\n<p>语法：<code>for 迭代变量 in 列表名:</code></p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 列表元素的遍历</span>\n\nlst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> lst<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\noutput<span class=\"token punctuation\">:</span>\n<span class=\"token number\">10</span>\n<span class=\"token number\">20</span>\n<span class=\"token number\">30</span>\n<span class=\"token number\">40</span>\n<span class=\"token number\">50</span>\n<span class=\"token number\">60</span>\n<span class=\"token number\">70</span>\n<span class=\"token number\">80</span>\n</code></pre>\n<h2><a id=\"4_91\"></a>4.列表的切片</h2>\n<blockquote>\n<p>切片是列表的基本操作，用于获得列表的一个片段，即获得零个或多个元素。切片后的结果也是列表类型。<br/> 切片有两种使用方式：</p>\n<ul><li>列表或列表变量<code>[N:M]</code></li><li>列表或列表变量<code>[N:M:K]</code></li></ul>\n</blockquote>\n<p>根据索引获取元素值</p>\n<pre><code class=\"prism language-python\">lst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token triple-quoted-string string\">'''获取单个元素'''</span>\n<span class=\"token comment\"># 获取列表索引为 2的元素</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># java</span>\n\n<span class=\"token comment\"># 获取列表索引为-3的元素</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># hello</span>\n\n<span class=\"token triple-quoted-string string\">'''获取多个元素   返回值为一个列表'''</span>\n<span class=\"token comment\"># lst = [start(默认0开始) : stop（默认最后） : step（默认步长1）]</span>\n<span class=\"token comment\"># step 为负数时相反</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># ['hello', 'world', 'java', 'hello', 'world']</span>\n\n</code></pre>\n<h1><a id=\"_119\"></a>二、列表类型的操作</h1>\n<h2><a id=\"1_120\"></a>1.列表操作函数</h2>\n<table><thead><tr><th>操作函数</th><th>描述</th></tr></thead><tbody><tr><td><code>len(ls)</code></td><td>列表<code>ls</code>的元素个数（长度）</td></tr><tr><td><code>min(ls)</code></td><td>列表<code>ls</code>的最小元素</td></tr><tr><td><code>max(ls)</code></td><td>列表<code>ls</code>的最大元素</td></tr><tr><td><code>list(x)</code></td><td>将<code>x</code>转换为列表类型</td></tr></tbody></table>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token comment\"># @File  : 列表操作函数.py</span>\n<span class=\"token comment\"># @author: Flyme awei </span>\n<span class=\"token comment\"># @email : 1071505897@qq.com</span>\n<span class=\"token comment\"># @Time  : 2022/8/8 0:15</span>\n\nls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\33efbce7512c47b195cd5e02e747f3d0.png\"/></p>\n<h2><a id=\"2_144\"></a>2.列表操作方法</h2>\n<p><code>list类</code>源码：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Built-in mutable sequence.\n    \n    If no argument is given, the constructor creates a new empty list.\n    The argument must be an iterable if specified.\n    \"\"\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Append object to the end of the list. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Remove all items from list. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return a shallow copy of the list. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return number of occurrences of value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Extend list by appending elements from the iterable. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Return first index of value.\n        \n        Raises ValueError if the value is not present.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Insert object before index. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Remove and return item at index (default last).\n        \n        Raises IndexError if list is empty or index is out of range.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Remove first occurrence of value.\n        \n        Raises ValueError if the value is not present.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Reverse *IN PLACE*. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Sort the list in ascending order and return None.\n        \n        The sort is in-place (i.e. the list itself is modified) and stable (i.e. the\n        order of two equal elements is maintained).\n        \n        If a key function is given, apply it once to each list item and sort them,\n        ascending or descending, according to their function values.\n        \n        The reverse flag can be set to sort in descending order.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__add__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return self+value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__contains__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return key in self. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__delitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Delete self[key]. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__eq__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return self==value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__getattribute__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return getattr(self, name). \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__getitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown; restored from __doc__</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" x.__getitem__(y) &lt;==&gt; x[y] \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__ge__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return self&gt;=value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__gt__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return self&gt;value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__iadd__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Implement self+=value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__imul__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Implement self*=value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> seq<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># known special case of list.__init__</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Built-in mutable sequence.\n        \n        If no argument is given, the constructor creates a new empty list.\n        The argument must be an iterable if specified.\n        # (copied from class doc)\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__iter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Implement iter(self). \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return len(self). \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__le__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return self&lt;=value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__lt__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return self&lt;value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__mul__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return self*value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span> <span class=\"token comment\"># known case of __new__</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__new__</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Create and return a new object.  See help(type) for accurate signature. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__ne__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return self!=value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__repr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return repr(self). \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__reversed__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return a reverse iterator over the list. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__rmul__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return value*self. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__setitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Set self[key] to value. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__sizeof__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return the size of the list in memory, in bytes. \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    __hash__ <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    \n</code></pre>\n<p>列表类型的一些常用操作方法：</p>\n<table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>ls.append(x)</code></td><td>在列表<code>ls</code>末尾添加一个元素<code>x</code></td></tr><tr><td><code>ls.insert(i, x)</code></td><td>在列表<code>ls</code>的第i个位置增加元素<code>x</code></td></tr><tr><td><code>ls.clear()</code></td><td>删除列表<code>ls</code>所有元素</td></tr><tr><td><code>ls.pop(i)</code></td><td>将列表<code>ls</code>的第<code>i</code>个元素取出并从<code>ls</code>中删除该元素</td></tr><tr><td><code>ls.remove(x)</code></td><td>将列表中出现的第一个元素<code>x</code>删除</td></tr><tr><td><code>ls.reverse()</code></td><td>将列表<code>ls</code>中的元素反转</td></tr><tr><td><code>ls.copy()</code></td><td>生成一个新列表，复制<code>ls</code>中的所有元素</td></tr></tbody></table>\n<h3><a id=\"21_333\"></a>2.1列表元素的增加操作</h3>\n<table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>ls.append(x)</code></td><td>在列表<code>ls</code>末尾添加一个元素<code>x</code></td></tr><tr><td><code>ls.insert(i, x)</code></td><td>在列表<code>ls</code>的第<code>i</code>个位置增加元素<code>x</code></td></tr><tr><td><code>ls.extend()</code></td><td>在列表<code>ls</code>末尾至少添加一个元素</td></tr><tr><td>切片</td><td>在列表任意位置至少添加一个元素</td></tr></tbody></table>\n<pre><code class=\"prism language-python\">lst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span>\nlst1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"添加元素之前id:\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 1. append(要添加的元素)  在列表末尾添加一个元素</span>\nlst<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"添加元素之后id:\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2. extend() 在列表末尾至少添加一个元素</span>\nlst<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>lst1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3. insert(索引, 要添加的对象)在任意（指定索引）位置添加一个元素</span>\nlst<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 4.切片 在任意位置添加至少一个元素</span>\n<span class=\"token comment\"># lst[要切的位置索引 : 结束位置 : 步长默认为以1]=要添加的列表</span>\nlst<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lst1\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2fba7bb03a8d452d9bf38db9391751df.png\"/></p>\n<h3><a id=\"22_367\"></a>2.2列表元素的删除操作</h3>\n<table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>ls.remove(x)</code></td><td>将列表中出现的第一个元素<code>x</code>删除</td></tr><tr><td><code>pop()</code></td><td>删除一个指定索引位置上的元素</td></tr><tr><td>切片</td><td>一次至少删除一个元素</td></tr><tr><td><code>clear()</code></td><td>清空列表</td></tr><tr><td><code>del</code></td><td>删除列表</td></tr></tbody></table>\n<p>代码：</p>\n<pre><code class=\"prism language-python\">lst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 1. remove(要移除的元素)  从列表中移除一个元素，重复只删一个，元素不存抛异常</span>\nlst<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2. pop(索引)  删除一个指定索引上的元素，不指定索引删除最后一个元素，指定索引不存在抛异常</span>\nlst<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\nlst<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3. 切片操作 删除至少一个元素，将产生一个新的列表对象</span>\nnew_lst <span class=\"token operator\">=</span> lst<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 索引 1,2,3,产生一个新列表</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>new_lst<span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''不产生新的列表对象，而是删除原列表中的内容'''</span>\nlst<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 4. clear 清空列表</span>\nlst<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 5. del  删除列表</span>\n<span class=\"token keyword\">del</span> lst\n<span class=\"token comment\"># print(lst)</span>\n\n</code></pre>\n<p>运行结果：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c85568529dcf43feb56bd7c3329d2441.png\"/></p>\n<h3><a id=\"23_407\"></a>2.3列表元素的修改操作</h3>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 为指定索引的元素赋予一个新值</span>\nlst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">]</span>\nlst<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 为指定的切片赋予一个新值</span>\nlst<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0164cefe4cc24375aca8a48ffcbd8958.png\"/></p>\n<h3><a id=\"24_420\"></a>2.4列表元素的排序操作</h3>\n<p><code>sort()</code>方法</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Sort the list in ascending order and return None.\n        \n        The sort is in-place (i.e. the list itself is modified) and stable (i.e. the\n        order of two equal elements is maintained).\n        \n        If a key function is given, apply it once to each list item and sort them,\n        ascending or descending, according to their function values.\n        \n        The reverse flag can be set to sort in descending order.\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n</code></pre>\n<blockquote>\n<p>按升序对列表进行排序，返回<code>None</code>。<br/> 排序是原地的(即列表本身被修改)和稳定的(即<br/> 保持两个相等元素的顺序)。<br/> 如果给出了一个键函数，对每个列表项应用一次，并对它们进行排序，<br/> 根据它们的函数值升序或降序。<br/> 反向标志可以设置为降序排序。</p>\n</blockquote>\n<p>内置函数<code>sorted()</code></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># real signature unknown</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Return a new list containing all items from the iterable in ascending order.\n    \n    A custom key function can be supplied to customize the sort order, and the\n    reverse flag can be set to request the result in descending order.\n    \"\"\"</span>\n    <span class=\"token keyword\">pass</span>\n</code></pre>\n<blockquote>\n<p>返回一个新列表，其中包含可迭代对象中的所有项，按升序排列。<br/> 可以提供自定义键函数来自定义排序顺序<br/> 可以设置<code>reverse</code>标志，以降序请求结果。</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 1.调用 sort()方法，sort()方法默认是 升序 排序，在调用该方法后，列表中的元素会按照从小到大的顺序排列</span>\nlst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">46</span><span class=\"token punctuation\">,</span> <span class=\"token number\">67</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">]</span>\nlst<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2.如果我们想让其降序 排序，则可以通过指定关键字参数reverse</span>\nlst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">98</span><span class=\"token punctuation\">,</span> <span class=\"token number\">54</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'排序前的列表'</span><span class=\"token punctuation\">,</span> lst<span class=\"token punctuation\">)</span>\nlst<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'排序后的列表'</span><span class=\"token punctuation\">,</span> lst<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 升序</span>\nlst<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>reverse<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'排序后的列表'</span><span class=\"token punctuation\">,</span> lst<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 使用内置函数 sorted() 对列表进行排序，将产生一个新的对象</span>\nlst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">98</span><span class=\"token punctuation\">,</span> <span class=\"token number\">54</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 未指定升序</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 指定降序</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\17727d9818064523aa60f1374c677c0f.png\"/></p>\n<h2><a id=\"3_484\"></a>3.列表生成式</h2>\n<p>列表生成式： 简称列表生成的公式。</p>\n<p>语法格式：<br/> <code>lst = [列表元素表达式 for 自定义变量 in 可迭代对象]</code><br/> 例：<code>lst = [i for i in range(1, 11)]</code></p>\n<pre><code class=\"prism language-python\">lst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\79f8977e2c6c40a0a9ce840f630ee13e.png\"/></p>\n<h1><a id=\"_495\"></a>三、元组类型</h1>\n<h2><a id=\"1_496\"></a>1.什么是元组</h2>\n<p>元组：<code>Python</code>内置的数据结构之一，是一个不可变序列。</p>\n<p><strong>不可变序列与可变序列</strong></p>\n<ul><li>不变可变序:<code>字符串</code>、<code>元组</code><br/> 不变可变序列：没有增、删，改的操作</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 修改后对象地址会发生改变</span>\ns <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2533879685808</span>\ns <span class=\"token operator\">=</span> s <span class=\"token operator\">+</span> <span class=\"token string\">'world'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2533879671984</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># helloworld</span>\n</code></pre>\n<ul><li>可变序列:<code>列表</code>、<code>字典</code><br/> 可变序列：可以对序列执行增、删、改操作，对象地址不发生更改</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 可变序列：可以执行增删改操作，对象地址不发生改变</span>\nlst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlst<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\862bf0f64b9c4875864bcb5eae2007a0.png\"/></p>\n<h2><a id=\"2_523\"></a>2.元组的创建方式</h2>\n<ol><li>直接小括号<code>()</code></li></ol>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 1.使用（）</span>\nt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'python'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ('python', 'java')</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class 'tuple'&gt;</span>\n</code></pre>\n<ol start=\"2\"><li>使用内置函数<code>tuple()</code></li></ol>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 2.使用内置函数tuple()</span>\nt2 <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ('java', 'python')</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class 'tuple'&gt;</span>\n</code></pre>\n<ol start=\"3\"><li>只包含一个元组的元素需要使用逗号<code>,</code>和小括号<code>()</code></li></ol>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 3.只包含一个元素，需要使用逗号和小括号(只有一个元素的时候必须加上，)</span>\nt3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t3<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ('hello',)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>t3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class 'tuple'&gt;</span>\n</code></pre>\n<ol start=\"4\"><li>空元组创建方式</li></ol>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 空元组创建方式</span>\nt4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nt5 <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'空元组'</span><span class=\"token punctuation\">,</span> t4<span class=\"token punctuation\">,</span> t5<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 空元组 () ()</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'空列表'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 空列表 [] []</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'空字典'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 空字典 {} {}</span>\n<span class=\"token comment\"># print('空集合', {}, set())</span>\n</code></pre>\n<p><strong>为什么要将元组设计成不可变序列</strong></p>\n<blockquote>\n<p>在多任务环境下，同时操作对象时不需要加锁，因此，在程序中尽量使用不可变序列 。<br/> 注意事项：<strong>元组中存储的是对象的引用</strong></p>\n<ul><li>如果元组中对象本身不可对象，则不能再引用其它对象。</li><li>如果元组中的对象是可变对象，则可变对象的引用不允许改变，但数据可以改变。</li></ul>\n</blockquote>\n<blockquote>\n<p>这样设计的原因是，元组的不可变性保证了数据的完整性，这样如果有多个地方都用到了元组，我们可以保证它的数据不会被改变。并且，相较于列表，元组的读取速度更快，占用的内存空间更小，并且可以作为字典的<code>key</code>去使用。</p>\n</blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 这样设计的原因是，元组的不可变性保证了数据的完整性，这样如果有多个地方都用到了元组，我们可以保证它的数据不会被改变。</span>\n<span class=\"token comment\"># 并且，相较于列表，元组的读取速度更快，占用的内存空间更小，并且可以作为字典的key去使用。</span>\n\nt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (10, [20, 30], 40)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class 'tuple'&gt; 2972759079744</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 10 &lt;class 'int'&gt; 140726042761152</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [20, 30] &lt;class 'list'&gt; 2972768483776</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 40 &lt;class 'int'&gt; 140726042762112</span>\nt<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (10, [20, 30, 100], 40) 2972759079744</span>\n\n</code></pre>\n<h2><a id=\"3_581\"></a>3.元组的遍历</h2>\n<p>元组是<strong>可迭代对象</strong>，所以可以使用<code>for...in</code>进行遍历</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 元组遍历</span>\nt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> t<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\33b07a462dee462282fcc3f790830f4c.png\"/><br/> 列表类型覆盖了元组类型的所有主要功能。</p>\n<h1><a id=\"_596\"></a>四、总结</h1>\n<blockquote>\n<p>列表类型的一些常用操作方法：</p>\n</blockquote>\n<table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>ls.append(x)</code></td><td>在列表<code>ls</code>末尾添加一个元素<code>x</code></td></tr><tr><td><code>ls.insert(i, x)</code></td><td>在列表<code>ls</code>的第i个位置增加元素<code>x</code></td></tr><tr><td><code>ls.clear()</code></td><td>删除列表<code>ls</code>所有元素</td></tr><tr><td><code>ls.pop(i)</code></td><td>将列表<code>ls</code>的第<code>i</code>个元素取出并从<code>ls</code>中删除该元素</td></tr><tr><td><code>ls.remove(x)</code></td><td>将列表中出现的第一个元素<code>x</code>删除</td></tr><tr><td><code>ls.reverse()</code></td><td>将列表<code>ls</code>中的元素反转</td></tr><tr><td><code>ls.copy()</code></td><td>生成一个新列表，复制<code>ls</code>中的所有元素</td></tr></tbody></table>\n<p>​</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-08-09 21:51:21", "summary": "天学习挑战赛天精通从入门到就业在这里插入图片描述个人主页个主页作者简介：领域新星创作者。系列专栏：《在线编程篇》推荐一款找工作神器网站：《牛客网》笔试题库面试经验希望大家多多支持一起进步呀！如果文章对"}