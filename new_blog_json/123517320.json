{"blogid": "123517320", "writerAge": "码龄2年", "writerBlogNum": "27", "writerCollect": "452", "writerComment": "203", "writerFan": "129", "writerGrade": "3级", "writerIntegral": "461", "writerName": "追剧入迷人", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123517320.jpg", "writerRankTotal": "37505", "writerRankWeekly": "81529", "writerThumb": "59", "writerVisitNum": "72167", "blog_read_count": "15367", "blog_time": "于 2022-03-16 11:42:14 发布", "blog_title": "时间序列信号处理（五）——小波变换python实现", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h2>简介：</h2>\n<h3><span style=\"color:#0d0016;\">小波变换(wavelet transform，WT)相比短时傅里叶变换来说，由固定窗口大小变成了自适应的窗口大小去进行信号处理，能够提供一个随频率改变的“时间-频率”窗口，是进行信号时频分析和处理的理想工具。</span></h3>\n<p><span style=\"color:#0d0016;\"><img alt=\"w\\left ( a,b \\right )=\\frac{1}{\\sqrt{a}}\\cdot \\int_{-\\infty }^{\\dotplus \\infty }f\\left ( t \\right )\\cdot \\psi \\left ( \\frac{t-b}{a} \\right )dt\" class=\"mathcode\" src=\"https://latex.codecogs.com/gif.latex?w%5Cleft%20%28%20a%2Cb%20%5Cright%20%29%3D%5Cfrac%7B1%7D%7B%5Csqrt%7Ba%7D%7D%5Ccdot%20%5Cint_%7B-%5Cinfty%20%7D%5E%7B%5Cdotplus%20%5Cinfty%20%7Df%5Cleft%20%28%20t%20%5Cright%20%29%5Ccdot%20%5Cpsi%20%5Cleft%20%28%20%5Cfrac%7Bt-b%7D%7Ba%7D%20%5Cright%20%29dt\"/></span></p>\n<p><span style=\"color:#0d0016;\"><strong>不同于傅里叶变换，变量只有频率ω，小波变换有两个变量：</strong></span><span style=\"color:#fe2c24;\"><strong>尺度a和平移量 b</strong></span><span style=\"color:#0d0016;\"><strong>。尺度a控制小波函数的伸缩，平移量 b控制小波函数的平移。</strong></span><span style=\"color:#fe2c24;\"><strong>尺度就对应于频率（反比），平移量 b就对应于时间</strong>。</span></p>\n<h2>离散小波变换（Discrete <span style=\"color:#0d0016;\">Wavelet Transform，DWT)</span></h2>\n<p><span style=\"color:#0d0016;\">1.对于一般的时间序列来说，不是连续变换，而是一种离散信号，这就需要用到离散小波变换，离散小波变换就只是将</span><span style=\"color:#fe2c24;\">尺度参数a和平移参数b离散化</span><span style=\"color:#0d0016;\">。</span>小波变换很大程度上弥补了傅立叶分解在非平稳时间序列上的不足，通过将<span style=\"color:#fe2c24;\">傅立叶分解的正余弦波替换为一组可衰减的正交基，能较好地表达出序列中的突变和非平稳部分</span>。</p>\n<p>2.离散小波变换的核心：用不同频率的滤波器分析不同频率的信号，主要是高通滤波器和低通滤波器。<br/> DWT用小波基函数（wavelet fuction）和尺度函数（scale function）来分别分析高频信号和低频信号，也即高通滤波器和低通滤波器。<br/><strong>3.离散小波变换步骤：</strong></p>\n<ol><li>将信号x(n)通过具有脉冲响应h(n)的高通滤波器，过滤掉频率低于P/2的部分（信号最高频率为P），即为半带高通滤波。</li><li>根据奈奎斯特定理进行下采样，间隔一个剔除样本点，信号留下一半样本点，尺度翻倍，将这一半进行高通滤波。</li><li>进一步分解，就把高通滤波器的结果再次一分为二，进行高通滤波和低通滤波。</li><li>不断反复进行上述操作，根据自己要求调整。</li></ol>\n<p>经过上述操作，<span style=\"color:#fe2c24;\">保留了频率的时间位置信息</span>。</p>\n<p></p>\n<h3><span style=\"color:#0d0016;\">注意：傅里叶变换在处理</span><span style=\"color:#fe2c24;\">突变信号</span><span style=\"color:#0d0016;\">，</span><span style=\"color:#fe2c24;\">需要利用大量的三角波去拟合信号</span><span style=\"color:#0d0016;\">，也会导致计算复杂，信号特征提取效果降低；而小波变换是</span><span style=\"color:#fe2c24;\">一种自适应的三角波，就是一个三角波不断进行平移、伸缩，就可以契合信号的变换</span><span style=\"color:#0d0016;\">，从而更好提取特征。</span></h3>\n<h2><span style=\"color:#0d0016;\">小波变换python示例：</span></h2>\n<pre><code># 小波\nsampling_rate = 1024\nt = np.arange(0, 1.0, 1.0 / sampling_rate)\nf1 = 100\nf2 = 200\nf3 = 300\nf4 = 400\ndata = np.piecewise(t, [t &lt; 1, t &lt; 0.8, t &lt; 0.5, t &lt; 0.3],\n                    [lambda t: 400*np.sin(2 * np.pi * f4 * t),\n                     lambda t: 300*np.sin(2 * np.pi * f3 * t),\n                     lambda t: 200*np.sin(2 * np.pi * f2 * t),\n                     lambda t: 100*np.sin(2 * np.pi * f1 * t)])\nwavename = 'cgau8'\ntotalscal = 256\nfc = pywt.central_frequency(wavename)\ncparam = 2 * fc * totalscal\nscales = cparam / np.arange(totalscal, 1, -1)\n[cwtmatr, frequencies] = pywt.cwt(data, scales, wavename, 1.0 / sampling_rate)\nplt.figure(figsize=(8, 4))\nplt.subplot(211)\nplt.plot(t, data)\nplt.xlabel(\"t(s)\")\nplt.title('shipinpu',  fontsize=20)\nplt.subplot(212)\nplt.contourf(t, frequencies, abs(cwtmatr))\nplt.ylabel(u\"prinv(Hz)\")\nplt.xlabel(u\"t(s)\")\nplt.subplots_adjust(hspace=0.4)\nplt.show()</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\239e39b8517d4eddb314e937dd6998c7.png\"/></p>\n<h2>离散小波变换python示例：</h2>\n<h2> </h2>\n<pre><code>import pywt\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfs = 1000\nN = 200\nk = np.arange(200)\nfrq = k*fs/N\nfrq1 = frq[range(int(N/2))]\n\naa = []\nfor i in range(200):\n    aa.append(np.sin(0.3*np.pi*i))\nfor i in range(200):\n    aa.append(np.sin(0.13*np.pi*i))\nfor i in range(200):\n    aa.append(np.sin(0.05*np.pi*i))\ny = aa\n\nwavename = 'db5'\ncA, cD = pywt.dwt(y, wavename)\nya = pywt.idwt(cA, None, wavename, 'smooth')  # approximated component\nyd = pywt.idwt(None, cD, wavename, 'smooth')  # detailed component\nx = range(len(y))\nplt.figure(figsize=(12, 9))\nplt.subplot(311)\nplt.plot(x, y)\nplt.title('original signal')\nplt.subplot(312)\nplt.plot(x, ya)\nplt.title('approximated component')\nplt.subplot(313)\nplt.plot(x, yd)\nplt.title('detailed component')\nplt.tight_layout()\nplt.show()\n\n\n# 图像单边谱\nplt.figure(figsize=(12, 9))\nplt.subplot(311)\ndata_f = abs(np.fft.fft(cA))/N\ndata_f1 = data_f[range(int(N/2))]\nplt.plot(frq1, data_f1, 'red')\n\nplt.subplot(312)\ndata_ff = abs(np.fft.fft(cD))/N\ndata_f2 = data_ff[range(int(N/2))]\nplt.plot(frq1, data_f2, 'k')\n\n\nplt.xlabel('pinlv(hz)')\nplt.ylabel('amplitude')\n\nplt.show()</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\20062f9108cf459f927377fb53e879d1.png\"/></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\3ee89796e193424db5bf2f788b115327.png\"/> </p>\n<p> 离散小波变换把信号分成了低频近似和高频细节，分离信号高低频效果还可以。<span style=\"color:#fe2c24;\">可以设置阈值就可将信号高频分离出来。</span></p>\n<p><span style=\"color:#fe2c24;\">以上仅是个人理解！！！可以一起多多交流。</span></p>\n</div>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-16 11:42:14", "summary": "简介：小波变换，相比短时傅里叶变换来说，由固定窗口大小变成了自适应的窗口大小去进行信号处理，能够提供一个随频率改变的时间频率窗口，是进行信号时频分析和处理的理想工具。不同于傅里叶变换，变量只有频率，小"}