{"blogid": "123828306", "writerAge": "码龄3年", "writerBlogNum": "146", "writerCollect": "1619", "writerComment": "883", "writerFan": "6649", "writerGrade": "5级", "writerIntegral": "3666", "writerName": "渣渣ye", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123828306.jpg", "writerRankTotal": "5444", "writerRankWeekly": "3279", "writerThumb": "1165", "writerVisitNum": "231372", "blog_read_count": "12120", "blog_time": "已于 2022-04-14 15:32:30 修改", "blog_title": "Python进阶——网课不愁系列AI换脸技术", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<blockquote>\n<p>俗话说的好：<strong>网络一线牵，珍惜这段缘！</strong><br/> 网络的水很深，年轻人你把握不住，众所周知照片是可以P的，但是“视频”是“P”不了的（狗头保命）</p>\n<p>谁能想到AI换脸竟然如此便捷，在Python上小小拟合就可以完成<strong>实时视频换脸</strong>。</p>\n<p>请允许我小声介绍一下dlib库：</p>\n<p>Dlib是一个现代化的C ++工具箱，其中包含用于在C ++中创建复杂软件以解决实际问题的<a href=\"https://so.csdn.net/so/search?q=%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0&amp;spm=1001.2101.3001.7020\" title=\"机器学习\">机器学习</a>算法和工具。它广泛应用于工业界和学术界，包括机器人，嵌入式设备，移动电话和大型高性能计算环境。Dlib的<a href=\"https://www.dlib.net.cn/docs/license.html\" title=\"开源许可证\">开源许可证</a> 允许您在任何应用程序中免费使用它。</p>\n<p>Dlib有很长的时间，包含很多模块，近几年作者主要关注在机器学习、<a href=\"https://so.csdn.net/so/search?q=%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0&amp;spm=1001.2101.3001.7020\" title=\"深度学习\">深度学习</a>、图像处理等模块的开发。</p>\n</blockquote>\n<h2><strong>先看看效果图： </strong></h2>\n<p><img alt=\"\" height=\"623\" src=\"..\\..\\static\\image\\d71bb27255734860a8461938913b598a.png\" width=\"783\"/></p>\n<blockquote>\n<p>毫无违和感（就当作毫无违和感吧，人丑不普信别骂~🐕）</p>\n</blockquote>\n<h2><strong>上代码：</strong></h2>\n<pre><code># -*- coding: utf-8 -*-\n\nimport cv2\nimport dlib\nimport numpy as np\n\ndetector = dlib.get_frontal_face_detector()  # dlib的正向人脸检测器\npredictor = dlib.shape_predictor(r'shape_predictor_68_face_landmarks.dat')  # dlib的人脸形状检测器\n\n\ndef get_image_size(image):\n    \"\"\"\n    获取图片大小（高度,宽度）\n    :param image: image\n    :return: （高度,宽度）\n    \"\"\"\n    image_size = (image.shape[0], image.shape[1])\n    return image_size\n\n\ndef get_face_landmarks(image, face_detector, shape_predictor):\n    \"\"\"\n    获取人脸标志，68个特征点\n    :param image: image\n    :param face_detector: dlib.get_frontal_face_detector\n    :param shape_predictor: dlib.shape_predictor\n    :return: np.array([[],[]]), 68个特征点\n    \"\"\"\n    dets = face_detector(image, 1)\n\n    shape = shape_predictor(image, dets[0])\n    face_landmarks = np.array([[p.x, p.y] for p in shape.parts()])\n    return face_landmarks\n\n\ndef get_face_mask(image_size, face_landmarks):\n    \"\"\"\n    获取人脸掩模\n    :param image_size: 图片大小\n    :param face_landmarks: 68个特征点\n    :return: image_mask, 掩模图片\n    \"\"\"\n    mask = np.zeros(image_size, dtype=np.uint8)\n    points = np.concatenate([face_landmarks[0:16], face_landmarks[26:17:-1]])\n    cv2.fillPoly(img=mask, pts=[points], color=255)\n    return mask\n\n\ndef get_affine_image(image1, image2, face_landmarks1, face_landmarks2):\n    \"\"\"\n    获取图片1仿射变换后的图片\n    :param image1: 图片1, 要进行仿射变换的图片\n    :param image2: 图片2, 只要用来获取图片大小，生成与之大小相同的仿射变换图片\n    :param face_landmarks1: 图片1的人脸特征点\n    :param face_landmarks2: 图片2的人脸特征点\n    :return: 仿射变换后的图片\n    \"\"\"\n    three_points_index = [18, 8, 25]\n    M = cv2.getAffineTransform(face_landmarks1[three_points_index].astype(np.float32),\n                               face_landmarks2[three_points_index].astype(np.float32))\n    dsize = (image2.shape[1], image2.shape[0])\n    affine_image = cv2.warpAffine(image1, M, dsize)\n    return affine_image.astype(np.uint8)\n\n\ndef get_mask_center_point(image_mask):\n    \"\"\"\n    获取掩模的中心点坐标\n    :param image_mask: 掩模图片\n    :return: 掩模中心\n    \"\"\"\n    image_mask_index = np.argwhere(image_mask &gt; 0)\n    miny, minx = np.min(image_mask_index, axis=0)\n    maxy, maxx = np.max(image_mask_index, axis=0)\n    center_point = ((maxx + minx) // 2, (maxy + miny) // 2)\n    return center_point\n\n\ndef get_mask_union(mask1, mask2):\n    \"\"\"\n    获取两个掩模掩盖部分的并集\n    :param mask1: mask_image, 掩模1\n    :param mask2: mask_image, 掩模2\n    :return: 两个掩模掩盖部分的并集\n    \"\"\"\n    mask = np.min([mask1, mask2], axis=0)  # 掩盖部分并集\n    mask = ((cv2.blur(mask, (5, 5)) == 255) * 255).astype(np.uint8)  # 缩小掩模大小\n    mask = cv2.blur(mask, (3, 3)).astype(np.uint8)  # 模糊掩模\n    return mask\n\n\ndef skin_color_adjustment(im1, im2, mask=None):\n    \"\"\"\n    肤色调整\n    :param im1: 图片1\n    :param im2: 图片2\n    :param mask: 人脸 mask. 如果存在，使用人脸部分均值来求肤色变换系数；否则，使用高斯模糊来求肤色变换系数\n    :return: 根据图片2的颜色调整的图片1\n    \"\"\"\n    if mask is None:\n        im1_ksize = 55\n        im2_ksize = 55\n        im1_factor = cv2.GaussianBlur(im1, (im1_ksize, im1_ksize), 0).astype(np.float)\n        im2_factor = cv2.GaussianBlur(im2, (im2_ksize, im2_ksize), 0).astype(np.float)\n    else:\n        im1_face_image = cv2.bitwise_and(im1, im1, mask=mask)\n        im2_face_image = cv2.bitwise_and(im2, im2, mask=mask)\n        im1_factor = np.mean(im1_face_image, axis=(0, 1))\n        im2_factor = np.mean(im2_face_image, axis=(0, 1))\n\n    im1 = np.clip((im1.astype(np.float) * im2_factor / np.clip(im1_factor, 1e-6, None)), 0, 255).astype(np.uint8)\n    return im1\n\n\ndef main():\n    im1 = cv2.imread('1.png')  # face_image\n    im1 = cv2.resize(im1, (600, im1.shape[0] * 600 // im1.shape[1]))\n    landmarks1 = get_face_landmarks(im1, detector, predictor)  # 68_face_landmarks\n    if landmarks1 is None:\n        print('{}:检测不到人脸'.format(image_face_path))\n        exit(1)\n    im1_size = get_image_size(im1)  # 脸图大小\n    im1_mask = get_face_mask(im1_size, landmarks1)  # 脸图人脸掩模\n\n    cam = cv2.VideoCapture(0)\n    while True:\n        ret_val, im2 = cam.read()  # camera_image\n        landmarks2 = get_face_landmarks(im2, detector, predictor)  # 68_face_landmarks\n        if landmarks2 is not None:\n            im2_size = get_image_size(im2)  # 摄像头图片大小\n            im2_mask = get_face_mask(im2_size, landmarks2)  # 摄像头图片人脸掩模\n\n            affine_im1 = get_affine_image(im1, im2, landmarks1, landmarks2)  # im1（脸图）仿射变换后的图片\n            affine_im1_mask = get_affine_image(im1_mask, im2, landmarks1, landmarks2)  # im1（脸图）仿射变换后的图片的人脸掩模\n\n            union_mask = get_mask_union(im2_mask, affine_im1_mask)  # 掩模合并\n\n            affine_im1 = skin_color_adjustment(affine_im1, im2, mask=union_mask)  # 肤色调整\n            point = get_mask_center_point(affine_im1_mask)  # im1（脸图）仿射变换后的图片的人脸掩模的中心点\n            seamless_im = cv2.seamlessClone(affine_im1, im2, mask=union_mask, p=point, flags=cv2.NORMAL_CLONE)  # 进行泊松融合\n\n            cv2.imshow('seamless_im', seamless_im)\n        else:\n            cv2.imshow('seamless_im', im2)\n        if cv2.waitKey(1) == 27:  # 按Esc退出\n            break\n    cv2.destroyAllWindows()\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<p><span style=\"color:#fe2c24;\"><strong>要是dlib库有问题可在连接中下载：</strong></span><a href=\"https://download.csdn.net/download/yyfloveqcw/85052757\" title=\"python人脸识别环境下的两个dlib适配包，一个配合python3.7，一个配合python3.8-机器学习文档类资源-CSDN下载\">python人脸识别环境下的两个dlib适配包，一个配合python3.7，一个配合python3.8-机器学习文档类资源-CSDN下载</a></p>\n<p>（已设置免费） </p>\n<p><span style=\"color:#fe2c24;\"><strong>全部代码资源：</strong></span></p>\n<p>链接：https://pan.baidu.com/s/1CW1wC7XtzGWKyhNlfakEPQ <br/> 提取码：0329</p>\n</div>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-04-14 15:32:30", "summary": "俗话说的好：网络一线牵，珍惜这段缘！网络的水很深，年轻人你把握不住，众所周知照片是可以的，但是视频是不了的狗头保命谁能想到换脸竟然如此便捷，在上小小拟合就可以完成实时视频换脸。请允许我小声介绍一下库："}