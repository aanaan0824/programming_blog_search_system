{"blogid": "121877897", "writerAge": "码龄2年", "writerBlogNum": "30", "writerCollect": "115", "writerComment": "6", "writerFan": "8", "writerGrade": "2级", "writerIntegral": "361", "writerName": "MomentYY", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_121877897.jpg", "writerRankTotal": "94005", "writerRankWeekly": "120371", "writerThumb": "53", "writerVisitNum": "25898", "blog_read_count": "9586", "blog_time": "于 2021-12-11 19:12:52 发布", "blog_title": "js实现数组去重的方式(7种)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><ul><li><a href=\"#JS_2\">JS数组去重的方式</a></li><li><ul><li><a href=\"#1SetArrayfrom_12\">1.利用Set()+Array.from()</a></li><li><a href=\"#2splice_26\">2.利用两层循环+数组的splice方法</a></li><li><a href=\"#3indexOf_51\">3.利用数组的indexOf方法</a></li><li><a href=\"#4includes_74\">4.利用数组的includes方法</a></li><li><a href=\"#5filterindexOf_111\">5.利用数组的filter()+indexOf()</a></li><li><a href=\"#6Map_137\">6.利用Map()</a></li><li><a href=\"#7_166\">7.利用对象</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"JS_2\"></a>JS数组去重的方式</h2>\n<p>例：将下面数组去除重复元素（以多种数据类型为例）</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<h3><a id=\"1SetArrayfrom_12\"></a>1.利用Set()+Array.from()</h3>\n<ul><li><code>Set</code>对象：是<strong>值的集合</strong>，你可以按照插入的顺序<strong>迭代</strong>它的元素。 Set中的元素只会<strong>出现一次</strong>，即Set中的<strong>元素是唯一的</strong>。</li><li><code>Array.from()</code> 方法：对一个<strong>类似数组</strong>或<strong>可迭代对象</strong>创建一个新的，浅拷贝的数组实例。</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [ 1, 2, 'abc', true, false, undefined, NaN ]</span>\n</code></pre>\n<p><strong>注意</strong>：以上去方式对<code>NaN</code>和<code>undefined</code>类型去重也是有效的，是因为<code>NaN</code>和<code>undefined</code>都可以被存储在Set中， <code>NaN</code>之间被视为相同的值（尽管在js中：<code>NaN !== NaN</code>）。</p>\n<h3><a id=\"2splice_26\"></a>2.利用两层循环+数组的splice方法</h3>\n<blockquote>\n<p>通过两层循环对数组元素进行逐一比较，然后通过splice方法来删除重复的元素。此方法对NaN是无法进行去重的，因为进行比较时<code>NaN !== NaN</code>。</p>\n</blockquote>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">removeDuplicate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        len<span class=\"token operator\">--</span> <span class=\"token comment\">// 减少循环次数提高性能</span>\n        j<span class=\"token operator\">--</span> <span class=\"token comment\">// 保证j的值自加后不变</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> arr\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">removeDuplicate</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [ 1, 2, 'abc', true, false, undefined, NaN, NaN ]</span>\n</code></pre>\n<h3><a id=\"3indexOf_51\"></a>3.利用数组的indexOf方法</h3>\n<blockquote>\n<p>新建一个空数组，遍历需要去重的数组，将数组元素存入新数组中，存放前判断数组中是否已经含有当前元素，没有则存入。此方法也无法对<code>NaN</code>去重。</p>\n</blockquote>\n<ul><li><code>indexOf()</code> 方法：返回调用它的String对象中第一次出现的指定值的索引，从 <code>fromIndex</code> 处进行搜索。如果未找到该值，则返回 -1。</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">removeDuplicate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">const</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      newArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> newArr <span class=\"token comment\">// 返回一个新数组</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">removeDuplicate</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [ 1, 2, 'abc', true, false, undefined, NaN, NaN ]</span>\n</code></pre>\n<h3><a id=\"4includes_74\"></a>4.利用数组的includes方法</h3>\n<blockquote>\n<p>此方法逻辑与indexOf方法去重异曲同工，只是用includes方法来判断是否包含重复元素。</p>\n</blockquote>\n<ul><li><code>includes()</code>方法：用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 <code>true</code>，否则返回 <code>false</code>。</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">removeDuplicate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">const</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>newArr<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      newArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> newArr\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">removeDuplicate</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [ 1, 2, 'abc', true, false, undefined, NaN ]</span>\n</code></pre>\n<p><strong>注意</strong>：为什么<code>includes</code>能够检测到数组中包含<code>NaN</code>，其涉及到<code>includes</code>底层的实现。如下图为<code>includes</code>实现的部分代码，在进行判断是否包含某元素时会调用<code>sameValueZero方法</code>进行比较，如果为<code>NaN</code>，则会使用<code>isNaN()</code>进行转化。</p>\n<p>具体实现可参考：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8acc2f37937a4b6cb982b3ecc2febbe9.png\"/></p>\n<p>简单测试<code>includes()</code>对<code>NaN</code>的判断：</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> testArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>testArr<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n</code></pre>\n<h3><a id=\"5filterindexOf_111\"></a>5.利用数组的filter()+indexOf()</h3>\n<blockquote>\n<p>filter方法会对满足条件的元素存放到一个新数组中，结合indexOf方法进行判断。</p>\n</blockquote>\n<ul><li><code>filter()</code> 方法：会创建一个新数组，其包含<strong>通过所提供函数实现的测试</strong>的所有元素。</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">removeDuplicate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> index\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">removeDuplicate</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [ 1, 2, 'abc', true, false, undefined ]</span>\n</code></pre>\n<p><strong>注意</strong>：这里的输出结果中不包含<code>NaN</code>，是因为<code>indexOf()</code>无法对NaN进行判断，即<code>arr.indexOf(item) === index</code>返回结果为false。测试如下：</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> testArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>testArr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -1</span>\n</code></pre>\n<h3><a id=\"6Map_137\"></a>6.利用Map()</h3>\n<blockquote>\n<p>Map对象是JavaScript提供的一种数据结构，结构为键值对形式，将数组元素作为map的键存入，然后结合<code>has()</code>和<code>set()</code>方法判断键是否重复。</p>\n</blockquote>\n<ul><li><code>Map</code> 对象：用于保存键值对，并且能够记住键的原始插入顺序。任何值（对象或者原始值）都可以作为一个键或一个值。</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">removeDuplicate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">// has()用于判断map是否包为item的属性值</span>\n      map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用set()将item设置到map中，并设置其属性值为true</span>\n      newArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> newArr\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">removeDuplicate</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [ 1, 2, 'abc', true, false, undefined, NaN ]</span>\n</code></pre>\n<p><strong>注意</strong>：使用<code>Map()</code>也可对<code>NaN</code>去重，原因是Map进行判断时认为<code>NaN</code>是与<code>NaN</code>相等的，剩下所有其它的值是根据 <code>===</code> 运算符的结果判断是否相等。</p>\n<h3><a id=\"7_166\"></a>7.利用对象</h3>\n<blockquote>\n<p>其实现思想和<code>Map()</code>是差不多的，主要是利用了对象的属性名不可重复这一特性。</p>\n</blockquote>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">removeDuplicate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">const</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\n  arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>obj<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      newArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n      obj<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> newArr\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">removeDuplicate</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [ 1, 2, 'abc', true, false, undefined, NaN ]</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2021-12-11 19:12:52", "summary": "目录数组去重的方式利用利用两层循环数组的方法利用数组的方法利用数组的方法利用数组的利用利用对象数组去重的方式例：将下面数组去除重复元素以多种数据类型为例利用对象：是值的集合，你可以按照插入的顺序迭代它"}