{"blogid": "123086884", "writerAge": "码龄2年", "writerBlogNum": "54", "writerCollect": "39", "writerComment": "10", "writerFan": "8", "writerGrade": "3级", "writerIntegral": "567", "writerName": "秃头的eleven", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123086884.jpg", "writerRankTotal": "118158", "writerRankWeekly": "364356", "writerThumb": "7", "writerVisitNum": "65726", "blog_read_count": "2385", "blog_time": "于 2022-02-23 12:32:45 发布", "blog_title": "C#之基于winform窗体绘制简单图形", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>什么是窗体？</p>\n<p>可以理解为是一个自定义的控制台应用程序。</p>\n<p>假如需要仅仅是用vs制作游戏的话，那么vs中，我们平时所用到的控制台应用程序所呈现的窗口时远远不够用的。因此需要自定义窗体。</p>\n<p></p>\n<p>因此在新建项目时，我们不能再使用控制台应用程序，而是应该选择窗体：</p>\n<p><img alt=\"\" height=\"384\" src=\"..\\..\\static\\image\\3da3e83f0cb24615a30e1af8d744939f.png\" width=\"554\"/></p>\n<p>之后就完成了窗体的新建。</p>\n<p>这里可以给大家直接运行我们新建好地窗体：</p>\n<p><img alt=\"\" height=\"871\" src=\"..\\..\\static\\image\\24263b229de74930a8f682c515bef9d2.png\" width=\"1200\"/></p>\n<p>如下弹出地窗口就是我们新建好的窗体。由于我们没有对窗体进行任何操作，所以当前窗体是一片空白的。 </p>\n<p>其次，完成之后会在工程目录下发现如下几个文件：</p>\n<p><img alt=\"\" height=\"100\" src=\"..\\..\\static\\image\\45b6be1d24ab4536b50aca5bd6ea2ccd.png\" width=\"343\"/></p>\n<p style=\"margin-left:0;text-align:justify;\">Form1.cs中专门放置一些和交互响应时间、逻辑处理、业务相关的代码；</p>\n<p>Designer里面就是管理窗体的外观</p>\n<p></p>\n<p><span style=\"background-color:#f3f3f4;\">拓展1——设置窗体的生成位置：</span></p>\n<p><img alt=\"\" height=\"259\" src=\"..\\..\\static\\image\\a037a081f3634d73b5169714a3fffaf4.png\" width=\"554\"/></p>\n<p>如果需要自定义生成位置，可以使用manual方法，后面接窗体的生成坐标位置。</p>\n<p><span style=\"background-color:#f3f3f4;\">拓展2——窗体之中的控件</span></p>\n<p>什么是控件？</p>\n<p>对有Android studio开发经验的人来说控件并不陌生。所谓控件，就是类似于按钮这种可以响应事件并且能够进行相应处理的图形交互组件。</p>\n<p>vs窗体中控件的位置：</p>\n<p style=\"margin-left:0;text-align:justify;\">打开视图里面的工具栏：</p>\n<p style=\"margin-left:0;text-align:justify;\"><img alt=\"\" height=\"609\" src=\"..\\..\\static\\image\\491e3c7815724368b178cbbf44e49bcd.png\" width=\"1200\"/></p>\n<p style=\"margin-left:0;text-align:justify;\">右侧就会展开一个控件的列表，里面有各种各样的控件：</p>\n<p style=\"margin-left:0;text-align:justify;\"><img alt=\"\" height=\"693\" src=\"..\\..\\static\\image\\e4ba80e8f5fe444cb19f91e2ee6dc48c.png\" width=\"627\"/></p>\n<p style=\"margin-left:0;text-align:justify;\">我们开发游戏不会用到哪些控件，但是我们会用到一个图形设备接口GDI。简单来说，就是一个画图的技术，可以把图片画在winform上面。</p>\n<p style=\"margin-left:0;text-align:justify;\"><img alt=\"\" height=\"56\" src=\"..\\..\\static\\image\\09230e6300554ecca8f277ea0981be46.png\" width=\"408\"/></p>\n<p></p>\n<p></p>\n<p>  接下来介绍大家简易地用GDI画图。</p>\n<p>在绘制图形前，需要我们注意的时，这个窗体的坐标轴是以屏幕左上角为坐标原点的，这对于我们绘制图形，设置坐标点，十分重要，具体如下图所示：</p>\n<p><img alt=\"\" height=\"315\" src=\"..\\..\\static\\image\\10d8d09fae1541cfbcc0cec525392977.png\" width=\"730\"/></p>\n<p></p>\n<h3><span style=\"color:#79c6cd;\">简单直线的绘制</span></h3>\n<p>打开form1.cs文件，会有如下代码：</p>\n<p><img alt=\"\" height=\"435\" src=\"..\\..\\static\\image\\c0fe06daf4ba46739f533da533b8eb89.png\" width=\"938\"/></p>\n<p> 但是如果直接在form1的构造函数中绘制图形，窗口并不会进行相关绘制，这是因为在构造函数中绘制图形，此时窗体都并没有创建完成，因此也不会有图形的绘制。</p>\n<p>因此，我们需要在窗体创建好之后再绘制图形，操作步骤如下：</p>\n<p>再设计窗口中，右击——属性：</p>\n<p><img alt=\"\" height=\"736\" src=\"..\\..\\static\\image\\b620f4681ac245f1bd188b4f8367f1df.png\" width=\"962\"/></p>\n<p>找到paint，空白处点击，新建paint方法：</p>\n<p><img alt=\"\" height=\"854\" src=\"..\\..\\static\\image\\fec86e09349147a6bb142cc4f7182c7e.png\" width=\"350\"/></p>\n<p> 可以发现，再form1代码文件中会自动帮我们新建一个paint方法，我们直接在这个方法中绘制图形即可：</p>\n<p><img alt=\"\" height=\"605\" src=\"..\\..\\static\\image\\f8b3cf3d4bb54773bd790a95b91c57fb.png\" width=\"1099\"/></p>\n<p></p>\n<p>这一步可以理解为新建了一个绘图的画布：</p>\n<p><img alt=\"\" height=\"41\" src=\"..\\..\\static\\image\\03e9ad5974aa42cab597ee7dce29cf4a.png\" width=\"542\"/></p>\n<p> 绘制图形使用的是draw的一些方法，画直线则是用的drawLine:</p>\n<p><img alt=\"\" height=\"195\" src=\"..\\..\\static\\image\\568aac83837b43fd8a4203015b412f09.png\" width=\"554\"/></p>\n<p> 使用draw的方法需要传递关于画笔、起点以及原点相关信息，因此在此之前我们定义了一个画笔。</p>\n<p>最终编写代码、运行结果如下：</p>\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace ct1\n{\n    public partial class Form1 : Form\n    {\n        public Form1()\n        {\n            InitializeComponent();\n        }\n\n        private void Form1_Paint(object sender, PaintEventArgs e)\n        {\n            Graphics g = this.CreateGraphics();\n            Pen p = new Pen(Color .Blue);\n            g.DrawLine(p,new Point (1,1),new Point (100,100));\n        }\n    }\n}\n</code></pre>\n<p><img alt=\"\" height=\"490\" src=\"..\\..\\static\\image\\4c88d6293ee74cf0ab7d6478428a6b27.png\" width=\"752\"/></p>\n<p>为了验证之前的坐标，我设置的直线的起点坐标为（1，1）。可以看见，直线的（1，1）的位置是很接近屏幕左上角的。</p>\n<p>大家也可以进一步测试（0.00001，0.0000001 ）的坐标，结果应该是无限趋近窗体屏幕左上角的。</p>\n<p>但是值得注意的是，new的point类名的参数值类型为int型，但是大家可以使用强制转换类型来完成测试。</p>\n<p></p>\n<p></p>\n<h3><span style=\"color:#79c6cd;\">绘制简单字符串</span></h3>\n<p>其实绘制方法同上，只是由原本的drawline变成了drawstring:</p>\n<p><img alt=\"\" height=\"803\" src=\"..\\..\\static\\image\\db16e9fa2fb14489817d133bf74dd7c9.png\" width=\"1200\"/></p>\n<p> </p>\n<p> 传递的参数分别为要绘制的字符串、字体（字体形式，大小）、刷子(刷子颜色)、绘制坐标。</p>\n<p>完成效果如下：</p>\n<p><img alt=\"\" height=\"490\" src=\"..\\..\\static\\image\\3c5ef54a6e384a32ac7e2e60b13c1209.png\" width=\"752\"/></p>\n<p> </p>\n</div>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-02-23 12:32:45", "summary": "什么是窗体？可以理解为是一个自定义的控制台应用程序。假如需要仅仅是用制作游戏的话，那么中，我们平时所用到的控制台应用程序所呈现的窗口时远远不够用的。因此需要自定义窗体。因此在新建项目时，我们不能再使用"}