{"blogid": "125839704", "writerAge": "码龄1年", "writerBlogNum": "91", "writerCollect": "6675", "writerComment": "12511", "writerFan": "13016", "writerGrade": "7级", "writerIntegral": "19555", "writerName": "微凉秋意", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125839704.jpg", "writerRankTotal": "415", "writerRankWeekly": "1", "writerThumb": "7481", "writerVisitNum": "121082", "blog_read_count": "1118", "blog_time": "已于 2022-07-29 11:41:30 修改", "blog_title": "快速掌握Java中List和Set接口的基本使用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>✅作者简介：C/C++领域新星创作者，热爱编程<br/> ✨个人主页：<a href=\"https://blog.csdn.net/m0_58618795\">叶落秋白的主页</a><br/> 🔥系列专栏：<a href=\"https://blog.csdn.net/m0_58618795/category_11921771.html?\">JavaSE精品总结</a><br/> 📃推荐一款模拟面试、刷题神器👉<a href=\"https://www.nowcoder.com/link/pc_csdncpt_ylqb_c\">注册免费刷题</a></p>\n</blockquote>\n<p>🔥前言</p>\n<blockquote>\n<p>别看我是个<code>C/C++</code>领域的活跃博主，其实放假以来都在卷<code>java</code>，就在昨天学习了java的反射和设计模式，正式结束了第一阶段。因此需要对重点部分做分析和总结来巩固这些基础知识，那么今天的主题就是<code>List、Set</code>集合的概念和使用了，接下来就请大家开始享用干货吧！</p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_10\">集合的概念</a></li><li><ul><li><a href=\"#List_21\">List接口</a></li><li><ul><li><a href=\"#List_22\">List的存储特点</a></li><li><a href=\"#_25\">常用实现类</a></li><li><a href=\"#_115\">遍历方法</a></li></ul>\n</li><li><a href=\"#_180\">泛型</a></li><li><a href=\"#Set_210\">Set接口</a></li><li><ul><li><a href=\"#Set_223\">Set的存储特点</a></li><li><a href=\"#_227\">常用实现类</a></li><li><a href=\"#_246\">遍历方法</a></li><li><a href=\"#_261\">注意事项</a></li></ul>\n</li></ul>\n</li><li><a href=\"#Listset_302\">List和set的区别</a></li><li><ul><li><a href=\"#_304\">基本概念的区别</a></li><li><a href=\"#_314\">使用场景</a></li></ul>\n</li><li><a href=\"#_324\">📃结语</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_10\"></a>集合的概念</h1>\n<p>是一个<strong>工具类</strong>，作用为存储多个数据，通常用于替代数组</p>\n<p>集合的特点</p>\n<ul><li>只能存放<code>Object</code>对象 \n  <ul><li>只能存放引用类型</li><li>不能存放接口，只能存放接口实现类对象</li></ul> </li><li>来自<code>java.util</code>包</li></ul>\n<h2><a id=\"List_21\"></a>List接口</h2>\n<h3><a id=\"List_22\"></a>List的存储特点</h3>\n<ul><li><strong>有序、有下标、元素可以重复</strong></li></ul>\n<h3><a id=\"_25\"></a>常用实现类</h3>\n<ol><li><code>ArrayList</code> 最常用 \n  <ul><li>JDK1.2 底层数组实现 查询快、增删慢 线程不安全，效率高</li></ul> </li><li>一般不用 \n  <ul><li>JDK1.2 底层链表实现 增删快，查询慢 线程不安全，效率高</li></ul> </li><li>Vector 不用 \n  <ul><li>JDK1.0 底层数组实现 都慢 线程安全，效率低</li></ul> </li></ol>\n<p><strong>创建</strong></p>\n<ul><li> <p>通常使用多态</p> <p><code>List 集合名=new 实现类名();</code></p> </li></ul>\n<p><strong>常用方法</strong></p>\n<ul><li><strong>集合名.方法名</strong></li></ul>\n<ol><li><code>boolean add(元素)</code>：将元素添加至集合末尾</li><li><code>void add(下标，元素)</code>：将元素添加至指定下标位置</li><li><code>boolean addAll(集合名)</code>：将指定集合所有元素添加至当前集合末尾</li><li><code>boolean addAll(下标，集合名)</code>：将指定集合所有元素添加至当前集合指定下标位置</li><li><code>void clear()</code>：清空集合元素</li><li><code>int size()</code>：获取集合长度</li><li><code>boolean contains(元素)</code>：判断集合中是否包含指定元素</li><li><code>boolean containsAll(集合名)</code>：判断集合中是否包含指定集合的所有元素</li><li><code>元素 get(下标)</code>：获取指定下标位置上的元素</li><li><code>int indexOf(元素)</code>：获取指定元素第一次出现的下标，不存在返回-1</li><li><code>int lastIndexOf(元素)</code>：获取指定元素最后一次出现的下标，不存在返回-1</li><li><code>boolean isEmpty()</code>：判断集合元素是否为空，不能判比null值</li><li><code>元素 remove(下标)</code>：移除指定下标的元素，返回该元素</li><li><code>元素 set(下标，新值)</code>：将指定下标位置的值替换为新值，返回旧值</li><li><code>void sort(比较器实现类对象)</code>：对集合元素按照指定规则排序</li><li><code>Object[] toArray()</code>：将集合转换为数组</li></ol>\n<p><strong>代码示例</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">List</span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">66</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">77</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//66 5 77</span>\n    \n            list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">44</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//66 5 44 77</span>\n    \n            <span class=\"token class-name\">List</span> list2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            list2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            list2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n            list<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//66 5 44 77 2 1</span>\n            list<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//66 2 1 5 44 77 2 1</span>\n    \n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"清空之前：\"</span><span class=\"token operator\">+</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token comment\">// list.clear();</span>\n           <span class=\"token comment\">// System.out.println(\"清空之后：\"+list.size());</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//t</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">containsAll</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//t</span>\n    \n            <span class=\"token class-name\">List</span> list3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            list3<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">66</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            list3<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">77</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            list3<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">containsAll</span><span class=\"token punctuation\">(</span>list3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//f</span>\n    \n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//5</span>\n    \n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//-1</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//6</span>\n    \n            <span class=\"token comment\">//list.clear();</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">List</span> list4<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//System.out.println(list4.isEmpty()); 空指针异常</span>\n    \n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//66 2 1 44 77 2 1</span>\n            <span class=\"token comment\">// System.out.println(list.remove(2));</span>\n    \n            list<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//66 88 1 44 77 2 1</span>\n    \n            <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> os<span class=\"token operator\">=</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>os<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_115\"></a>遍历方法</h3>\n<ul><li><strong>for+get()</strong></li></ul>\n<pre><code class=\"prism language-java\"> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> 集合名<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token comment\">//i代表当前下标</span>\n       <span class=\"token comment\">//通过集合名.get(i)的方式获取当前元素</span>\n   <span class=\"token punctuation\">}</span>\n   如：\n <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li><strong>迭代器遍历</strong>\n<ul><li><code>hasNext()</code>：判断是否存在下一元素</li><li><code>next()</code>：指针后移，获取下一元素<br/> //获取迭代器对象<br/> Iterator it=集合名.iterator();<br/> while(it.hasNext()){//集合存在下一元素则继续后续操作<br/> //通过it.next()使指针后移，得到元素<br/> }<br/> 如：<br/> Iterator it=list.iterator();<br/> while(it.hasNext()){<!-- --><br/> System.out.print(it.next()+\" \");<br/> }<br/> System.out.println();</li></ul> </li></ul>\n<p><strong>tips：迭代过程中不允许对集合进行增删操作</strong></p>\n<ul><li> <p><strong>外遍历forEach</strong><br/> for(数据类型 元素名(随便起) ： 集合名){<!-- --><br/> //元素名就代表当前元素<br/> }<br/> 如：<br/> for (Object o: list) {<!-- --><br/> System.out.print(o+\" \");<br/> }<br/> System.out.println();</p>\n<ul><li>本质也是迭代器遍历，内部不允许进行增删操作</li><li>JDK5.0</li></ul> </li><li> <p><strong>自遍历forEach</strong><br/> //匿名内部类<br/> 集合名.forEach(new Consumer() {<!-- --><br/> @Override<br/> public void accept(Object o) {<!-- --><br/> //o就代表当前元素<br/> }<br/> });</p> <pre><code> //lambda简化\n         集合名.forEach(o-&gt; {o就代表当前元素});\n 如：\n         list.forEach(new Consumer() {\n             @Override\n             public void accept(Object o) {\n                 System.out.print(o + \" \");\n             }\n         });\n         System.out.println();\n \n         // lambda\n         list.forEach(o-&gt; System.out.print(o+\" \"));\n</code></pre>\n<ul><li>JDK8.0</li></ul> </li></ul>\n<h2><a id=\"_180\"></a>泛型</h2>\n<p>作用</p>\n<p>用于集合中，可以约束集合存储的数据类型</p>\n<p>语法</p>\n<pre><code>List&lt;数据类型&gt; 集合名=new 实现类名&lt;数据类型&gt;();\n</code></pre>\n<p>使用</p>\n<p><strong>1. 如果集合中存放基本类型，则泛型必须声明为其包装类型<br/> 2. 声明泛型之后，集合中不允许存放其他类型的数据<br/> 3. 前后类型声明必须一致<br/> 4. 等号后边的泛型不声明，语法不规范<br/> 5. 等号前边的泛型不声明，泛型无意义</strong></p>\n<pre><code>List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();\n        list.add(66);\n        list.add(88);\n       /* list.add(\"abc\");\n        list.add(5.5);*/\n        list.forEach(new Consumer&lt;Integer&gt;() {\n            @Override\n            public void accept(Integer i) {\n                System.out.println(i);\n            }\n        });\n</code></pre>\n<h2><a id=\"Set_210\"></a>Set接口</h2>\n<p><strong>Collection</strong></p>\n<ul><li>是一个接口</li><li>是<code>List</code>和<code>Set</code>的父接口</li><li>所有集合都由<code>Collection</code>或<code>Map</code>派生</li></ul>\n<p>特点</p>\n<ol><li>存放着List和Set的共有方法</li><li>没有自己的直接实现类</li></ol>\n<h3><a id=\"Set_223\"></a>Set的存储特点</h3>\n<ul><li><strong>无序、无下标、元素不可重复</strong></li></ul>\n<h3><a id=\"_227\"></a>常用实现类</h3>\n<ol><li><code>HashSet</code>\n<ul><li>JDK1.2 底层哈希表实现(数组+链表 又名散列表) 线程不安全，效率高</li></ul> </li><li><code>LinkedHashSet</code>\n<ul><li>JDK1.2 是HashSet的子类，底层哈希表实现 线程不安全，效率高</li></ul> </li><li><code>TreeSet</code>\n<ul><li>JDK1.2 是SortedSet的实现类，底层红黑树实现 线程不安全，效率高</li></ul> </li></ol>\n<p><strong>创建</strong></p>\n<ul><li> <p>利用多态</p> <p><code>Set&lt;泛型类型&gt; 集合名 = new 实现类名&lt;泛型类型&gt;();</code></p> </li></ul>\n<p><strong>常用方法</strong></p>\n<ul><li>全部继承自<code>Collection</code></li></ul>\n<h3><a id=\"_246\"></a>遍历方法</h3>\n<ol><li>Iterator迭代器遍历</li><li>外遍历forEach</li><li>自遍历forEach</li></ol>\n<p><strong>哈希表的去重过程</strong></p>\n<blockquote>\n<p>先通过调用元素的<code>hashCode()</code>方法得到哈希码值<br/> 然后通过哈希码值<code>%</code>数组长度得到存放下标<br/> 若该下标位置未存放元素，则直接存放<br/> 若已存有元素，则调用当前元素的equals()方法与其位置的所有元素进行值的比较<br/> 都不相同，则链表存放<br/> 若有相同，舍弃当前元素</p>\n</blockquote>\n<h3><a id=\"_261\"></a>注意事项</h3>\n<ol><li>当集合中存放的为自定义类型时，必须重写<code>hashCode</code>和<code>equals</code>才能保证去重</li><li><code>LinkedHashSet</code>能够保证元素存入和取出顺序一致</li><li><code>TreeSet</code>可以实现对元素进行默认的升序排序 \n  <ul><li>如果存放的为自定义类型，必须重写排序规则</li><li>两种排序方式： \n    <ol><li>实现Comparable接口，重写compareTo方法 \n      <ul><li>要对谁排，就让谁实现</li><li>原理：让当前对象与参数对象进行比较</li><li>返回值规则： \n        <ol><li>从小到大：this的值&gt;o的值,返回正数</li><li>从大到小：this的值&gt;o的值,返回负数</li><li>相等返回0</li></ol> </li></ul> </li><li>实现Comparator接口，重写compare方法 \n      <ul><li>在集合创建处的小括号内传入该接口的实现类对象</li></ul> </li></ol> </li></ul> </li></ol>\n<pre><code class=\"prism language-java\">          <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test2</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Student</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token comment\">//根据学生年龄从大到小排序</span>\n                        <span class=\"token keyword\">return</span> o2<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>o1<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lisi\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lisi\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wangwu\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"maliu\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                set<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>默认识别第一种排序方式</li><li>第二种排序方式优先级高于第一种</li></ul>\n<h1><a id=\"Listset_302\"></a>List和set的区别</h1>\n<h2><a id=\"_304\"></a>基本概念的区别</h2>\n<blockquote>\n<p><code>List</code> 接口是一个有序的 <code>Collection</code>，使用此接口能够精确的控制每个元素插入的位置，能够通过索引(元素在List中位置，类似于数组的下标)来访问List中的元素，第一个元素的索引为 0，而且允许有相同的元素。List 接口存储一组不唯一，有序的对象。</p>\n</blockquote>\n<blockquote>\n<p><code>Set</code> 具有与 <code>Collection</code> 完全一样的接口，只是行为上不同，Set 不保存重复的元素。Set 接口存储一组唯一，无序的对象。</p>\n</blockquote>\n<ul><li>1.Set 接口实例存储的是无序的, 不重复的数据, List 接口实例存储的是有序的，可以重复的元素;</li><li>2.Set检索效率低下, 删除和插入效率高, 插入和删除不会引起元素位置改变</li><li>3.List和数组类似, 可以动态增长, 根据实际存储的数据的长度自动增长List的长度, 查找元素效率高, 插入删除效率低, 因为会引起其他元素位置改变 &lt;实现类有ArrayList,LinkedList,Vector&gt; ;</li></ul>\n<h2><a id=\"_314\"></a>使用场景</h2>\n<p><strong>List</strong></p>\n<ul><li>常用的实现类有 <code>ArrayList</code>、<code>LinkedList</code> 和 <code>Vector</code>。ArrayList 最为流行，它提供了使用索引的随意访问，而 LinkedList 则对于经常需要从 List 中添加或删除元素的场合更为合适。</li></ul>\n<p><strong>set</strong></p>\n<ul><li>Set 接口最流行的几个实现类是 <code>HashSet</code>、<code>LinkedHashSet</code> 以及 <code>TreeSet</code>。最流行的是基于 <code>HashMap</code> 实现的 HashSet；TreeSet 还实现了 <code>SortedSet</code> 接口，因此 TreeSet 是一个根据其 <code>compare()</code> 和 <code>compareTo()</code> 的定义进行排序的有序容器。</li></ul>\n<h1><a id=\"_324\"></a>📃结语</h1>\n<p><code>这篇博客就分析三个集合中的两个，下一篇博客总结Map接口的基本使用并附带一些面试的老生常谈问题。码文不易，觉得帮助到你了就给个三连呗~</code></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-07-29 11:41:30", "summary": "作者简介：领域新星创作者，热爱编程个人主页：叶落秋白的主页系列专栏：精品总结推荐一款模拟面试、刷题神器注册免费刷题前言别看我是个领域的活跃博主，其实放假以来都在卷，就在昨天学习了的反射和设计模式，正式"}