{"blogid": "124585851", "writerAge": "码龄4年", "writerBlogNum": "318", "writerCollect": "1455", "writerComment": "206", "writerFan": "1420", "writerGrade": "7级", "writerIntegral": "9475", "writerName": "子不语", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124585851.jpg", "writerRankTotal": "1518", "writerRankWeekly": "9516", "writerThumb": "304", "writerVisitNum": "813067", "blog_read_count": "1915", "blog_time": "已于 2022-05-14 14:41:09 修改", "blog_title": "C#编程，图像转换灰度图的几种方法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>为加快处理速度，在图像处理算法中，往往需要把彩色图像抓换成灰色图像，24位彩色图像每个像素用3个字节表示，每个字节对应着R、G、B分量的亮度(红、绿、蓝)。当R、G、B分量值不同是，表示为彩色图像；当R、G、B分量值相同时，表现为灰度图像，也就是求这个值。</p>\n</blockquote>\n<p>黑白处理原理：彩色图像处理成黑白效果通常有3种算法；<br/> （1）.最大值法：使每个像素点的R，G，B值等于原像素点的RGB（颜色值）中最大的一个；<br/> （2）.平均值法：使用每个像素点的R，G，B值等于原像素点的RGB值的平均值；<br/> （3）.加权平均值法：对每个像素点的R，G，B值进行加权；</p>\n<h2><a id=\"_7\"></a>公式</h2>\n<p>一般来说，转换工式有3个。</p>\n<ul><li>第一种转换公式为：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\340562aa091a44ceb8533e530dc267da.png\"/><br/> 其中，Gray(i,j)为转换后的灰度图像在(i,j)点处的灰度值。该方面虽然简单，但人眼对颜色的感应是不同的。</li><li>第二种转换公式：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1904dcc5a227412d87c618d6861c0610.png\"/><br/> 观察上面的公司，发现绿色所占的比重最大，所以转换时可以直接使用G 值作为转换后的灰度：</li></ul>\n<h2><a id=\"Bitmap_17\"></a>Bitmap类介绍</h2>\n<p>Bitmap对象封装了GDI+中的一个位图，该位图由图形图像及其属性的像素数据组成。因此Bitmap是用于处理由像素数据定义的图像的对象。该类的主要方法和属性如下：</p>\n<p>GetPixel方法和 SetPixel方法: 获取和设置一个图像的指定像素的颜色。<br/> PixelFormat : 返回图像的像素格式<br/> Palette : 获取或设置图像所使用的颜色调色板<br/> Height 、Width : 返回图像的高度和宽度<br/> LockBits 、UnlockBits : 分别锁定和解锁系统内存中的位图像素。</p>\n<p>在基于像素点的图像处理方法中使用LockBits 和 UnlockBits是一个很好的方式，这两种方法可以使我们通过指定像素的范围来控制位图的任意一部分，从而消除了通过循环对位图的像素逐个进行处理的需要。每次调用LockBits之后都应该调用一次UnlockBits。</p>\n<h2><a id=\"BitmapData_28\"></a>BitmapData类介绍</h2>\n<p>BitmapData对象指定了位图的属性：<br/> Height属性，被锁定位图的高度。<br/> Width属性，被锁定位图的宽度。<br/> PixelFormat属性，数据的实际像素格式。<br/> Scan0属性，被锁定数组的首字节地址。<br/> Stride属性，步幅，也称扫描宽度。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\15653e24783e477984ca5991c5236d0e.png\"/><br/> 如上图所示，数组的长度并不一定等于图像像素数组的长度，还有一部分未用区域，这涉及到位图的数据结构，系统要保证每行的字节数必须为4的倍数。</p>\n<p>假设有一张图片宽度为6，因为是Format24bppRgb格式（每像素3字节。在以下的讨论中，除非特别说明，否则Bitmap都被认为是24位RGB）的，显然，每一行需要6<em>3=18个字节存储。<br/> 对于Bitmap就是如此。但对于BitmapData，虽然BitmapData.Width还是等于Bitmap.Width，但大概是出于显示性能的考虑，每行的实际的字节数将变成大于等于它的那个离它最近的4的整倍数，此时的实际字节数就是Stride。<br/> 就此例而言，18不是4的整倍数，而比18大的离18最近的4的倍数是20，所以这个BitmapData.Stride=20。<br/> 显然，当宽度本身就是4的倍数时，BitmapData.Stride=Bitmap.Width</em>3。</p>\n<p>BitmapData.Width*3+每行未使用空间（上图的XX）=BitmapData.Stride</p>\n<h2><a id=\"3_44\"></a>图像处理的3种方法</h2>\n<h3><a id=\"_45\"></a>提取像素法</h3>\n<p>该方法使用的是GDI+中的 Bitmap.GetPixel和 Bitmap.SetPixel方法。为了将位图的颜色设置为灰度或其他颜色，就需要使用GetPixel来读取当前像素的颜色，再计算灰度值，最后使用SetPixel来应用新的颜色。代码如下:</p>\n<pre><code class=\"prism language-csharp\">            <span class=\"token comment\">//加载图像</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> curBitmap <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Bitmap<span class=\"token punctuation\">)</span>Image<span class=\"token punctuation\">.</span><span class=\"token function\">FromFile</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Color</span> curColor<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> ret<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//循环读取像素转换灰度值</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> curBitmap<span class=\"token punctuation\">.</span>Width<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> curBitmap<span class=\"token punctuation\">.</span>Height <span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    curColor <span class=\"token operator\">=</span> curBitmap<span class=\"token punctuation\">.</span><span class=\"token function\">GetPixel</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>curColor<span class=\"token punctuation\">.</span>R <span class=\"token operator\">*</span> <span class=\"token number\">0.299</span> <span class=\"token operator\">+</span> curColor<span class=\"token punctuation\">.</span>G <span class=\"token operator\">*</span> <span class=\"token number\">0.587</span> <span class=\"token operator\">+</span> curColor<span class=\"token punctuation\">.</span>B <span class=\"token operator\">*</span> <span class=\"token number\">0.114</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    curBitmap<span class=\"token punctuation\">.</span><span class=\"token function\">SetPixel</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">.</span><span class=\"token function\">FromArgb</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这里提一下，在循环次数控制时尽量不要用icurBitmap.Width做循环条件，而是应当将其取出保存到一个变量中，这样循环时不用每次从curBitmp中取Width属性，从而提高性能。</p>\n<h3><a id=\"_66\"></a>内存法</h3>\n<p>该方法就是把图像数据直接复制到内存中，这样就使程序的运行速度大大提高。 代码如下:</p>\n<pre><code class=\"prism language-csharp\">   <span class=\"token comment\">//加载图像</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> curBitmap <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Bitmap<span class=\"token punctuation\">)</span>Image<span class=\"token punctuation\">.</span><span class=\"token function\">FromFile</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">Rectangle</span> rect <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> curBitmap<span class=\"token punctuation\">.</span>Width<span class=\"token punctuation\">,</span> curBitmap<span class=\"token punctuation\">.</span>Height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Drawing<span class=\"token punctuation\">.</span>Imaging<span class=\"token punctuation\">.</span>BitmapData</span> bmpData <span class=\"token operator\">=</span> curBitmap<span class=\"token punctuation\">.</span><span class=\"token function\">LockBits</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">,</span> System<span class=\"token punctuation\">.</span>Drawing<span class=\"token punctuation\">.</span>Imaging<span class=\"token punctuation\">.</span>ImageLockMode<span class=\"token punctuation\">.</span>ReadWrite<span class=\"token punctuation\">,</span> curBitmap<span class=\"token punctuation\">.</span>PixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">IntPtr</span> ptr <span class=\"token operator\">=</span> bmpData<span class=\"token punctuation\">.</span>Scan0<span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> bytes <span class=\"token operator\">=</span> curBitmap<span class=\"token punctuation\">.</span>Width <span class=\"token operator\">*</span> curBitmap<span class=\"token punctuation\">.</span>Height <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> rgbValues <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">byte</span></span><span class=\"token punctuation\">[</span>bytes<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>InteropServices<span class=\"token punctuation\">.</span>Marshal<span class=\"token punctuation\">.</span><span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">,</span> rgbValues<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> colorTemp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> rgbValues<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    colorTemp <span class=\"token operator\">=</span> rgbValues<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.299</span> <span class=\"token operator\">+</span> rgbValues<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.587</span> <span class=\"token operator\">+</span> rgbValues<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.114</span><span class=\"token punctuation\">;</span>\n                    rgbValues<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rgbValues<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rgbValues<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span>colorTemp<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>InteropServices<span class=\"token punctuation\">.</span>Marshal<span class=\"token punctuation\">.</span><span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>rgbValues<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ptr<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                curBitmap<span class=\"token punctuation\">.</span><span class=\"token function\">UnlockBits</span><span class=\"token punctuation\">(</span>bmpData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_88\"></a>指针法</h3>\n<p>该方法与内存法相似，开始都是通过LockBits方法来获取位图的首地址。但该方法更简洁，直接应用指针对位图进行操作。<br/> 为了保持类型安全，在默认情况下，C#是不支持指针运算的，因为使用指针会带来相关的风险。所以C#只允许在特别标记的代码块中使用指针。通过使用unsafe关键字，可以定义可使用指针的不安全上下文。</p>\n<pre><code class=\"prism language-csharp\">                <span class=\"token comment\">//加载图像</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> curBitmap <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Bitmap<span class=\"token punctuation\">)</span>Image<span class=\"token punctuation\">.</span><span class=\"token function\">FromFile</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">Rectangle</span> rect <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> curBitmap<span class=\"token punctuation\">.</span>Width<span class=\"token punctuation\">,</span> curBitmap<span class=\"token punctuation\">.</span>Height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Drawing<span class=\"token punctuation\">.</span>Imaging<span class=\"token punctuation\">.</span>BitmapData</span> bmpData <span class=\"token operator\">=</span> curBitmap<span class=\"token punctuation\">.</span><span class=\"token function\">LockBits</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">,</span> System<span class=\"token punctuation\">.</span>Drawing<span class=\"token punctuation\">.</span>Imaging<span class=\"token punctuation\">.</span>ImageLockMode<span class=\"token punctuation\">.</span>ReadWrite<span class=\"token punctuation\">,</span> curBitmap<span class=\"token punctuation\">.</span>PixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">byte</span></span> temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">unsafe</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">byte</span><span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>bmpData<span class=\"token punctuation\">.</span>Scan0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> bmpData<span class=\"token punctuation\">.</span>Height<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> bmpData<span class=\"token punctuation\">.</span>Width<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">{<!-- --></span>\n                            temp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.299</span> <span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.587</span> <span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.114</span> <span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            ptr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ptr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ptr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n                            ptr <span class=\"token operator\">+=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        ptr <span class=\"token operator\">+=</span> bmpData<span class=\"token punctuation\">.</span>Stride <span class=\"token operator\">-</span> bmpData<span class=\"token punctuation\">.</span>Width <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                curBitmap<span class=\"token punctuation\">.</span><span class=\"token function\">UnlockBits</span><span class=\"token punctuation\">(</span>bmpData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>效果预览</p>\n<h2><a id=\"_117\"></a>总结</h2>\n<p>内存法和指针法比提取像素法要快得多。提取像素法应用GDI+中的方法，易于理解，方法简单，很适合于C#的初学者使用，但它的运行速度最慢，效率最低。内存法把图像复制到内存中，直接对内存中的数据进行处理，速度明显提高,程序难度也不大。<br/> 指针法直接应用指针来对图像进行处理，所以速度最快。但在C#中，是不建议使用指针的，因为使用指针，代码不仅难以编写和调试，而且无法通过 CLR的内存类型安全检查，不能发挥C#的特长。只有对C#和指针有了充分的理解，才能用好该方法。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6f8e09b44bbd4f65b4f42471a6618dd9.png\"/></p>\n<p>究竟要使用哪种方法，还要看具体情况而定。但3种方法都能有效地对图像进行处理。</p>\n<p>参考链接：<a href=\"https://www.cnblogs.com/zh7791/p/16194609.html\">https://www.cnblogs.com/zh7791/p/16194609.html</a></p>\n<p>参考链接：<a href=\"http://www.360doc.com/content/17/0414/20/39573434_645648120.shtml\">http://www.360doc.com/content/17/0414/20/39573434_645648120.shtml</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-05-14 14:41:09", "summary": "为加快处理速度，在图像处理算法中，往往需要把彩色图像抓换成灰色图像，位彩色图像每个像素用个字节表示，每个字节对应着、、分量的亮度红、绿、蓝。当、、分量值不同是，表示为彩色图像；当、、分量值相同时，表现"}