{"blogid": "126743866", "writerAge": "码龄14年", "writerBlogNum": "1162", "writerCollect": "6887", "writerComment": "2314", "writerFan": "33850", "writerGrade": "8级", "writerIntegral": "26193", "writerName": "梁云亮", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126743866.jpg", "writerRankTotal": "258", "writerRankWeekly": "415", "writerThumb": "5613", "writerVisitNum": "1457902", "blog_read_count": "15", "blog_time": "于 2022-09-07 13:32:07 发布", "blog_title": "Docker 操作镜像", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_0\"></a>获取镜像</h2>\n<p>之前提到过，<a href=\"https://hub.docker.com/explore/\">Docker Hub</a> 上有大量的高质量的镜像可以用，这里我们就说一下怎么获取这些镜像。</p>\n<p>从 Docker 镜像仓库获取镜像的命令是 <code>docker pull</code>。其命令格式为：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">docker</span> pull <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>Docker Registry 地址<span class=\"token punctuation\">[</span>:端口号<span class=\"token punctuation\">]</span>/<span class=\"token punctuation\">]</span>仓库名<span class=\"token punctuation\">[</span>:标签<span class=\"token punctuation\">]</span>\n</code></pre>\n<p>具体的选项可以通过 <code>docker pull --help</code> 命令看到，这里我们说一下镜像名称的格式。</p>\n<ul><li><strong>镜像仓库地址：</strong> 地址的格式一般是 <code>&lt;域名/IP&gt;[:端口号]</code>。默认地址是 Docker Hub。</li><li><strong>仓库名：</strong> 如之前所说，这里的仓库名是两段式名称，即 <code>&lt;用户名&gt;/&lt;软件名&gt;</code>。对于 Docker Hub，如果不给出用户名，则默认为 <code>library</code>，也就是官方镜像。</li></ul>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">docker</span> pull nginx\n\n<span class=\"token comment\"># 输出如下</span>\nUsing default tag: latest\nlatest: Pulling from library/nginx\nfc7181108d40: Pull complete \nc4277fc40ec2: Pull complete \n780053e98559: Pull complete \nDigest: sha256:bdbf36b7f1f77ffe7bd2a32e59235dff6ecf131e3b6b5b96061c652f30685f3a\nStatus: Downloaded newer image <span class=\"token keyword\">for</span> nginx:latest\n</code></pre>\n<h2><a id=\"_28\"></a>列出镜像</h2>\n<p>要想列出已经下载下来的镜像，可以使用 <code>docker image ls</code> 命令。</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">docker</span> image <span class=\"token function\">ls</span>\n\n<span class=\"token comment\"># 输出如下</span>\nREPOSITORY           TAG                 IMAGE ID            CREATED             SIZE\nredis                latest              5f515359c7f8        <span class=\"token number\">5</span> days ago          <span class=\"token number\">183</span> MB\nnginx                latest              05a60462f8ba        <span class=\"token number\">5</span> days ago          <span class=\"token number\">181</span> MB\nmongo                <span class=\"token number\">3.2</span>                 fe9198c04d62        <span class=\"token number\">5</span> days ago          <span class=\"token number\">342</span> MB\n<span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>               <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>              00285df0df87        <span class=\"token number\">5</span> days ago          <span class=\"token number\">342</span> MB\nubuntu               <span class=\"token number\">16.04</span>               f753707788c5        <span class=\"token number\">4</span> weeks ago         <span class=\"token number\">127</span> MB\nubuntu               latest              f753707788c5        <span class=\"token number\">4</span> weeks ago         <span class=\"token number\">127</span> MB\nubuntu               <span class=\"token number\">14.04</span>               1e0c3dd64ccd        <span class=\"token number\">4</span> weeks ago         <span class=\"token number\">188</span> MB\n</code></pre>\n<p>列表包含了 <code>仓库名</code>、<code>标签</code>、<code>镜像 ID</code>、<code>创建时间</code> 以及 <code>所占用的空间</code>。</p>\n<p>其中仓库名、标签在之前的基础概念章节已经介绍过了。<strong>镜像 ID</strong> 则是镜像的唯一标识，一个镜像可以对应多个<strong>标签</strong>。因此，在上面的例子中，我们可以看到 <code>ubuntu:16.04</code> 和 <code>ubuntu:latest</code> 拥有相同的 ID，因为它们对应的是同一个镜像。</p>\n<h2><a id=\"_50\"></a>镜像体积</h2>\n<p>如果仔细观察，会注意到，这里标识的所占用空间和在 Docker Hub 上看到的镜像大小不同。比如，<code>ubuntu:16.04</code> 镜像大小，在这里是 <code>127 MB</code>，但是在 Docker Hub 显示的却是 <code>50 MB</code>。这是因为 Docker Hub 中显示的体积是压缩后的体积。在镜像下载和上传过程中镜像是保持着压缩状态的，因此 Docker Hub 所显示的大小是网络传输中更关心的流量大小。而 <code>docker image ls</code> 显示的是镜像下载到本地后，展开的大小，准确说，是展开后的各层所占空间的总和，因为镜像到本地后，查看空间的时候，更关心的是本地磁盘空间占用的大小。</p>\n<p>另外一个需要注意的问题是，<code>docker image ls</code> 列表中的镜像体积总和并非是所有镜像实际硬盘消耗。由于 Docker 镜像是多层存储结构，并且可以继承、复用，因此不同镜像可能会因为使用相同的基础镜像，从而拥有共同的层。由于 Docker 使用 Union FS，相同的层只需要保存一份即可，因此实际镜像硬盘占用空间很可能要比这个列表镜像大小的总和要小的多。</p>\n<p>你可以通过以下命令来便捷的查看镜像、容器、数据卷所占用的空间。</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">docker</span> system <span class=\"token function\">df</span>\n\n<span class=\"token comment\"># 输出如下</span>\nTYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE\nImages              <span class=\"token number\">24</span>                  <span class=\"token number\">0</span>                   <span class=\"token number\">1</span>.992GB             <span class=\"token number\">1</span>.992GB <span class=\"token punctuation\">(</span><span class=\"token number\">100</span>%<span class=\"token punctuation\">)</span>\nContainers          <span class=\"token number\">1</span>                   <span class=\"token number\">0</span>                   <span class=\"token number\">62</span>.82MB             <span class=\"token number\">62</span>.82MB <span class=\"token punctuation\">(</span><span class=\"token number\">100</span>%<span class=\"token punctuation\">)</span>\nLocal Volumes       <span class=\"token number\">9</span>                   <span class=\"token number\">0</span>                   <span class=\"token number\">652</span>.2MB             <span class=\"token number\">652</span>.2MB <span class=\"token punctuation\">(</span><span class=\"token number\">100</span>%<span class=\"token punctuation\">)</span>\nBuild Cache                                                 0B                  0B\n</code></pre>\n<h2><a id=\"_69\"></a>虚悬镜像</h2>\n<p>上面的镜像列表中，还可以看到一个特殊的镜像，这个镜像既没有仓库名，也没有标签，均为 <code>&lt;none&gt;</code></p>\n<pre><code class=\"prism language-bash\"><span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>               <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>              00285df0df87        <span class=\"token number\">5</span> days ago          <span class=\"token number\">342</span> MB\n</code></pre>\n<p>这个镜像原本是有镜像名和标签的，原来为 <code>mongo:3.2</code>，随着官方镜像维护，发布了新版本后，重新 <code>docker pull mongo:3.2</code> 时，<code>mongo:3.2</code> 这个镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了 <code>&lt;none&gt;</code>。除了 <code>docker pull</code> 可能导致这种情况，<code>docker build</code> 也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 <code>&lt;none&gt;</code> 的镜像。这类无标签镜像也被称为 <strong>虚悬镜像(dangling image)</strong> ，可以用下面的命令专门显示这类镜像：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">docker</span> image <span class=\"token function\">ls</span> -f <span class=\"token assign-left variable\">dangling</span><span class=\"token operator\">=</span>true\n\n<span class=\"token comment\"># 输出如下</span>\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n<span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>              <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>              00285df0df87        <span class=\"token number\">5</span> days ago          <span class=\"token number\">342</span> MB\n</code></pre>\n<p>一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除。</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">docker</span> image prune\n</code></pre>\n<h2><a id=\"_93\"></a>中间层镜像</h2>\n<p>为了加速镜像构建、重复利用资源，Docker 会利用 <strong>中间层镜像</strong>。所以在使用一段时间后，可能会看到一些依赖的中间层镜像。默认的 <code>docker image ls</code> 列表中只会显示顶层镜像，如果希望显示包括中间层镜像在内的所有镜像的话，需要加 <code>-a</code> 参数。</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">docker</span> image <span class=\"token function\">ls</span> -a\n</code></pre>\n<p>这样会看到很多无标签的镜像，与之前的虚悬镜像不同，这些无标签的镜像很多都是中间层镜像，是其它镜像所依赖的镜像。这些无标签镜像不应该删除，否则会导致上层镜像因为依赖丢失而出错。实际上，这些镜像也没必要删除，因为之前说过，相同的层只会存一遍，而这些镜像是别的镜像的依赖，因此并不会因为它们被列出来而多存了一份，无论如何你也会需要它们。只要删除那些依赖它们的镜像后，这些依赖的中间层镜像也会被连带删除。</p>\n<h2><a id=\"_103\"></a>删除镜像</h2>\n<p>如果要删除本地的镜像，可以使用 <code>docker image rm</code> 命令，其格式为：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">docker</span> image <span class=\"token function\">rm</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>镜像<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>镜像<span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span> <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span>\n</code></pre>\n<h3><a id=\"_ID_111\"></a>用 ID、镜像名、摘要删除镜像</h3>\n<p>其中，<code>&lt;镜像&gt;</code> 可以是 <code>镜像短 ID</code>、<code>镜像长 ID</code>、<code>镜像名</code> 或者 <code>镜像摘要</code>。</p>\n<p>比如我们有这么一些镜像：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">docker</span> image <span class=\"token function\">ls</span>\n\n<span class=\"token comment\"># 输出如下</span>\nREPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE\ncentos                      latest              0584b3d2cf6d        <span class=\"token number\">3</span> weeks ago         <span class=\"token number\">196.5</span> MB\nredis                       alpine              501ad78535f0        <span class=\"token number\">3</span> weeks ago         <span class=\"token number\">21.03</span> MB\n<span class=\"token function\">docker</span>                      latest              cf693ec9b5c7        <span class=\"token number\">3</span> weeks ago         <span class=\"token number\">105.1</span> MB\nnginx                       latest              e43d811ce2f4        <span class=\"token number\">5</span> weeks ago         <span class=\"token number\">181.5</span> MB\n</code></pre>\n<p>我们可以用镜像的完整 ID，也称为 <strong>长 ID</strong>，来删除镜像。使用脚本的时候可能会用长 ID，但是人工输入就太累了，所以更多的时候是用 <strong>短 ID</strong> 来删除镜像。<code>docker image ls</code> 默认列出的就已经是短 ID 了，一般取前 3 个字符以上，只要足够区分于别的镜像就可以了。</p>\n<p>比如这里，如果我们要删除 <code>redis:alpine</code> 镜像，可以执行：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">docker</span> image <span class=\"token function\">rm</span> <span class=\"token number\">501</span>\n\n<span class=\"token comment\"># 输出如下</span>\nUntagged: redis:alpine\nUntagged: redis@sha256:f1ed3708f538b537eb9c2a7dd50dc90a706f7debd7e1196c9264edeea521a86d\nDeleted: sha256:501ad78535f015d88872e13fa87a828425117e3d28075d0c117932b05bf189b7\nDeleted: sha256:96167737e29ca8e9d74982ef2a0dda76ed7b430da55e321c071f0dbff8c2899b\nDeleted: sha256:32770d1dcf835f192cafd6b9263b7b597a1778a403a109e2cc2ee866f74adf23\nDeleted: sha256:127227698ad74a5846ff5153475e03439d96d4b1c7f2a449c7a826ef74a2d2fa\nDeleted: sha256:1333ecc582459bac54e1437335c0816bc17634e131ea0cc48daa27d32c75eab3\nDeleted: sha256:4fc455b921edf9c4aea207c51ab39b10b06540c8b4825ba57b3feed1668fa7c7\n</code></pre>\n<p>我们也可以用<code>镜像名</code>，也就是 <code>&lt;仓库名&gt;:&lt;标签&gt;</code>，来删除镜像。</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">docker</span> image <span class=\"token function\">rm</span> centos\n\n<span class=\"token comment\"># 输出如下</span>\nUntagged: centos:latest\nUntagged: centos@sha256:b2f9d1c0ff5f87a4743104d099a3d561002ac500db1b9bfa02a783a46e0d366c\nDeleted: sha256:0584b3d2cf6d235ee310cf14b54667d889887b838d3f3d3033acd70fc3c48b8a\nDeleted: sha256:97ca462ad9eeae25941546209454496e1d66749d53dfa2ee32bf1faabd239d38\n</code></pre>\n<p>当然，更精确的是使用 <code>镜像摘要</code> 删除镜像。</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">docker</span> image <span class=\"token function\">ls</span> --digests\n\n<span class=\"token comment\"># 输出如下</span>\nREPOSITORY                  TAG                 DIGEST                                                                    IMAGE ID            CREATED             SIZE\n<span class=\"token function\">node</span>                        slim                sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228   6e0c4c8e3913        <span class=\"token number\">3</span> weeks ago         <span class=\"token number\">214</span> MB\n\n<span class=\"token function\">docker</span> image <span class=\"token function\">rm</span> node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228\n\n<span class=\"token comment\"># 输出如下</span>\nUntagged: node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228\n</code></pre>\n<h3><a id=\"_docker_image_ls__173\"></a>用 docker image ls 命令来配合</h3>\n<p>像其它可以承接多个实体的命令一样，可以使用 <code>docker image ls -q</code> 来配合使用 <code>docker image rm</code>，这样可以成批的删除希望删除的镜像。我们在“镜像列表”章节介绍过很多过滤镜像列表的方式都可以拿过来使用。</p>\n<p>比如，我们需要删除所有仓库名为 <code>redis</code> 的镜像：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">docker</span> image <span class=\"token function\">rm</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">docker</span> image <span class=\"token function\">ls</span> -q redis<span class=\"token variable\">)</span></span>\n</code></pre>\n<p>或者删除所有在 <code>mongo:3.2</code> 之前的镜像：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">docker</span> image <span class=\"token function\">rm</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">docker</span> image <span class=\"token function\">ls</span> -q -f <span class=\"token assign-left variable\">before</span><span class=\"token operator\">=</span>mongo:3.2<span class=\"token variable\">)</span></span>\n</code></pre>\n<p>充分利用你的想象力和 Linux 命令行的强大，你可以完成很多非常赞的功能。</p>\n<h2><a id=\"_191\"></a>扩展阅读</h2>\n<h3><a id=\"_193\"></a>列出部分镜像</h3>\n<p>不加任何参数的情况下，<code>docker image ls</code> 会列出所有顶级镜像，但是有时候我们只希望列出部分镜像。<code>docker image ls</code> 有好几个参数可以帮助做到这个事情。</p>\n<p>根据仓库名列出镜像</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">docker</span> image <span class=\"token function\">ls</span> ubuntu\n\n<span class=\"token comment\"># 输出如下</span>\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nubuntu              <span class=\"token number\">16.04</span>               f753707788c5        <span class=\"token number\">4</span> weeks ago         <span class=\"token number\">127</span> MB\nubuntu              latest              f753707788c5        <span class=\"token number\">4</span> weeks ago         <span class=\"token number\">127</span> MB\nubuntu              <span class=\"token number\">14.04</span>               1e0c3dd64ccd        <span class=\"token number\">4</span> weeks ago         <span class=\"token number\">188</span> MB\n</code></pre>\n<p>列出特定的某个镜像，也就是说指定仓库名和标签</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">docker</span> image <span class=\"token function\">ls</span> ubuntu:16.04\n\n<span class=\"token comment\"># 输出如下</span>\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nubuntu              <span class=\"token number\">16.04</span>               f753707788c5        <span class=\"token number\">4</span> weeks ago         <span class=\"token number\">127</span> MB\n</code></pre>\n<p>除此以外，<code>docker image ls</code> 还支持强大的过滤器参数 <code>--filter</code>，或者简写 <code>-f</code>。之前我们已经看到了使用过滤器来列出虚悬镜像的用法，它还有更多的用法。比如，我们希望看到在 <code>mongo:3.2</code> 之后建立的镜像，可以用下面的命令：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">docker</span> image <span class=\"token function\">ls</span> -f <span class=\"token assign-left variable\">since</span><span class=\"token operator\">=</span>mongo:3.2\n\n<span class=\"token comment\"># 输出如下</span>\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nredis               latest              5f515359c7f8        <span class=\"token number\">5</span> days ago          <span class=\"token number\">183</span> MB\nnginx               latest              05a60462f8ba        <span class=\"token number\">5</span> days ago          <span class=\"token number\">181</span> MB\n</code></pre>\n<p>想查看某个位置之前的镜像也可以，只需要把 <code>since</code> 换成 <code>before</code> 即可。</p>\n<p>此外，如果镜像构建时，定义了 <code>LABEL</code>，还可以通过 <code>LABEL</code> 来过滤。</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">docker</span> image <span class=\"token function\">ls</span> -f <span class=\"token assign-left variable\">label</span><span class=\"token operator\">=</span>com.example.version<span class=\"token operator\">=</span><span class=\"token number\">0.1</span>\n</code></pre>\n<h3><a id=\"_238\"></a>以特定格式显示</h3>\n<p>默认情况下，<code>docker image ls</code> 会输出一个完整的表格，但是我们并非所有时候都会需要这些内容。比如，刚才删除虚悬镜像的时候，我们需要利用 <code>docker image ls</code> 把所有的虚悬镜像的 ID 列出来，然后才可以交给 <code>docker image rm</code> 命令作为参数来删除指定的这些镜像，这个时候就用到了 <code>-q</code> 参数。</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">docker</span> image <span class=\"token function\">ls</span> -q\n\n<span class=\"token comment\"># 输出如下</span>\n5f515359c7f8\n05a60462f8ba\nfe9198c04d62\n00285df0df87\nf753707788c5\nf753707788c5\n1e0c3dd64ccd\n</code></pre>\n<p><code>--filter</code> 配合 <code>-q</code> 产生出指定范围的 ID 列表，然后送给另一个 <code>docker</code> 命令作为参数，从而针对这组实体成批的进行某种操作的做法在 Docker 命令行使用过程中非常常见，不仅仅是镜像，将来我们会在各个命令中看到这类搭配以完成很强大的功能。因此每次在文档看到过滤器后，可以多注意一下它们的用法。</p>\n<p>另外一些时候，我们可能只是对表格的结构不满意，希望自己组织列；或者不希望有标题，这样方便其它程序解析结果等，这就用到了 <a href=\"https://gohugo.io/templates/go-templates/\">Go 的模板语法</a>。</p>\n<p>比如，下面的命令会直接列出镜像结果，并且只包含镜像 ID 和仓库名：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">docker</span> image <span class=\"token function\">ls</span> --format <span class=\"token string\">\"{<!-- -->{.ID}}: {<!-- -->{.Repository}}\"</span>\n\n<span class=\"token comment\"># 输出如下</span>\n5f515359c7f8: redis\n05a60462f8ba: nginx\nfe9198c04d62: mongo\n00285df0df87: <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>\nf753707788c5: ubuntu\nf753707788c5: ubuntu\n1e0c3dd64ccd: ubuntu\n</code></pre>\n<p>或者打算以表格等距显示，并且有标题行，和默认一样，不过自己定义列：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">docker</span> image <span class=\"token function\">ls</span> --format <span class=\"token string\">\"table {<!-- -->{.ID}}<span class=\"token entity\" title=\"\\t\">\\t</span>{<!-- -->{.Repository}}<span class=\"token entity\" title=\"\\t\">\\t</span>{<!-- -->{.Tag}}\"</span>\n\n<span class=\"token comment\"># 输出如下</span>\nIMAGE ID            REPOSITORY          TAG\n5f515359c7f8        redis               latest\n05a60462f8ba        nginx               latest\nfe9198c04d62        mongo               <span class=\"token number\">3.2</span>\n00285df0df87        <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>              <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">&gt;</span>\nf753707788c5        ubuntu              <span class=\"token number\">16.04</span>\nf753707788c5        ubuntu              latest\n1e0c3dd64ccd        ubuntu              <span class=\"token number\">14.04</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-07 13:32:07", "summary": "获取镜像之前提到过，上有大量的高质量的镜像可以用，这里我们就说一下怎么获取这些镜像。从镜像仓库获取镜像的命令是。其命令格式为：选项地址端口号仓库名标签具体的选项可以通过命令看到，这里我们说一下镜像名称"}