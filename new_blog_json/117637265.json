{"blogid": "117637265", "writerAge": "码龄6年", "writerBlogNum": "6", "writerCollect": "147", "writerComment": "8", "writerFan": "6", "writerGrade": "1级", "writerIntegral": "99", "writerName": "乖乖去学习", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_117637265.jpg", "writerRankTotal": "720429", "writerRankWeekly": "1021372", "writerThumb": "22", "writerVisitNum": "12798", "blog_read_count": "9062", "blog_time": "于 2021-06-13 23:21:56 发布", "blog_title": "c++数据结构——链表", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"1_0\"></a>1.链表基础知识：</h1>\n<ol><li>链表分类：单链表、双链表、循环链表</li><li>链表的存储：散乱分布，通过指针域的指针链接在一起</li><li>链表的定义：此处给出单链表的c++定义</li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span> <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 节点上存储的元素</span>\n   ListNode <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指向下一个节点的指针</span>\n   <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>  <span class=\"token comment\">// 节点的构造函数</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ol start=\"4\"><li>链表初始化及调用：</li></ol>\n<pre><code class=\"prism language-cpp\">ListNode<span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//使用上述定义中的构造函数来初始化</span>\n</code></pre>\n<pre><code class=\"prism language-cpp\">ListNode<span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//使用c++默认构造函数来初始化</span>\nhead <span class=\"token operator\">-&gt;</span> val <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> head <span class=\"token operator\">-&gt;</span> val<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//调用的方式</span>\nListNode<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//head其实是链表的首地址，有了首地址就有了整个链表</span>\ntemp <span class=\"token operator\">=</span> head <span class=\"token operator\">-&gt;</span> next<span class=\"token punctuation\">;</span>\n</code></pre>\n<ol start=\"5\"><li>链表的操作：删除节点、增加节点<br/> <img alt=\"删除节点\" src=\"..\\..\\static\\image\\20210606215426786.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210606215448995.png\"/></li><li>性能分析<br/> 链表的查询都是要从头节点开始遍历的，所以时间复杂度是O(n)，但是空间复杂度较低，一般都是O(1)<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210607163811999.png\"/></li></ol>\n<h1><a id=\"2_38\"></a>2.典型题</h1>\n<h2><a id=\"21_40\"></a>2.1删除节点</h2>\n<p>leetcode地址：<a href=\"https://leetcode-cn.com/problems/remove-linked-list-elements/\">https://leetcode-cn.com/problems/remove-linked-list-elements/</a></p>\n<h3><a id=\"211__42\"></a>2.1.1 直接删除</h3>\n<p>直接用原链表进行删除操作（在删除头节点时需要一段单独的逻辑去判断和操作），注意在c++中内存是要自己释放的，用delete关键字。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">removeElements</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//删除头节点</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">-&gt;</span>val <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//不是空链表且头节点的值与目标值相等</span>\n            ListNode<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n            head <span class=\"token operator\">=</span> head<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">delete</span> temp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//删除非头节点</span>\n        ListNode<span class=\"token operator\">*</span>  cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//头节点不动，</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//不是空链表且不是尾部节点</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">-&gt;</span>val <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//如果下一个节点的值等于目标值，跳过，且删除</span>\n                ListNode<span class=\"token operator\">*</span>  temp <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">//</span>\n                cur<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">delete</span> temp<span class=\"token punctuation\">;</span> \n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n                cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"212__72\"></a>2.1.2 虚拟头节点</h3>\n<p>设置一个虚拟头节点再进行删除操作。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210607085900688.png\"/></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">//虚拟头节点的方法</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">removeElements</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        ListNode<span class=\"token operator\">*</span> dummynode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//新建一个链表，虚拟头节点</span>\n        dummynode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>   \n        ListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> dummynode<span class=\"token punctuation\">;</span> <span class=\"token comment\">//</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>  \n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">-&gt;</span>val <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                ListNode<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n                cur<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">delete</span> temp<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n                cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        head <span class=\"token operator\">=</span> dummynode<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//改变链表头节点的位置，还原链表</span>\n        <span class=\"token keyword\">delete</span> dummynode<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//虚拟的头节点要删除掉</span>\n        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>       \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"22_98\"></a>2.2设计链表</h2>\n<p>leetcode地址：<a href=\"https://leetcode-cn.com/problems/design-linked-list/\">https://leetcode-cn.com/problems/design-linked-list/</a><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210607090441365.png\"/><br/> 这道题目设计链表的五个接口：</p>\n<ul><li>获取链表第index个节点的数值</li><li>在链表的最前面插入一个节点</li><li>在链表的最后面插入一个节点</li><li>在链表第index个节点前面插入一个节点</li><li>删除链表的第index个节点</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyLinkedList</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">// 定义链表节点结构体</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LinkedNode</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n        LinkedNode<span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">LinkedNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 初始化链表</span>\n    <span class=\"token function\">MyLinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        _dummyHead <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">LinkedNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里定义的头结点 是一个虚拟头结点，而不是真正的链表头结点</span>\n        _size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 获取到第index个节点数值，如果index是非法数值直接返回-1， 注意index是从0开始的，第0个节点就是头结点</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>_size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        LinkedNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _dummyHead<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">// 如果--index 就会陷入死循环</span>\n            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> cur<span class=\"token operator\">-&gt;</span>val<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 在链表最前面插入一个节点，插入完成后，新插入的节点为链表的新的头结点</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">addAtHead</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        LinkedNode<span class=\"token operator\">*</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">LinkedNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        newNode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> _dummyHead<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        _dummyHead<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n        _size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 在链表最后面添加一个节点</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">addAtTail</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        LinkedNode<span class=\"token operator\">*</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">LinkedNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        LinkedNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _dummyHead<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        cur<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n        _size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 在第index个节点之前插入一个新节点，例如index为0，那么新插入的节点为链表的新头节点。</span>\n    <span class=\"token comment\">// 如果index 等于链表的长度，则说明是新插入的节点为链表的尾结点</span>\n    <span class=\"token comment\">// 如果index大于链表的长度，则返回空</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">addAtIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&gt;</span> _size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        LinkedNode<span class=\"token operator\">*</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">LinkedNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        LinkedNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _dummyHead<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        newNode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        cur<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n        _size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 删除第index个节点，如果index 大于等于链表的长度，直接return，注意index是从0开始的</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">deleteAtIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&gt;=</span> _size <span class=\"token operator\">||</span> index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        LinkedNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _dummyHead<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            cur <span class=\"token operator\">=</span> cur <span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        LinkedNode<span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        cur<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">delete</span> tmp<span class=\"token punctuation\">;</span>\n        _size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 打印链表</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">printLinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        LinkedNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _dummyHead<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            cout <span class=\"token operator\">&lt;&lt;</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">-&gt;</span>val <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> _size<span class=\"token punctuation\">;</span>\n    LinkedNode<span class=\"token operator\">*</span> _dummyHead<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"23_205\"></a>2.3反转链表</h2>\n<p>leetcode地址：<a href=\"https://leetcode-cn.com/problems/reverse-linked-list/\">https://leetcode-cn.com/problems/reverse-linked-list/</a></p>\n<h3><a id=\"231_207\"></a>2.3.1双指针法</h3>\n<p>初始化如下图，再定义一个中间链表节点temp，接收cur节点。cur做翻转节点，将next指向pre。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210607110709169.png\"/></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        ListNode<span class=\"token operator\">*</span> pre <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//初始化一个 null指针的节点</span>\n        pre <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n        ListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        ListNode<span class=\"token operator\">*</span> temp<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            temp <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//</span>\n            cur<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span>\n            pre <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n            cur <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> pre<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"232_230\"></a>2.3.2递归法</h3>\n<h2><a id=\"24__233\"></a>2.4 两两交换链表中的节点</h2>\n<p>leetcode地址：<a href=\"https://leetcode-cn.com/problems/swap-nodes-in-pairs/\">https://leetcode-cn.com/problems/swap-nodes-in-pairs/</a><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210607153740266.png\"/><br/> 还是要虚拟一个头节点比较好做，指向原始节点，这样就是以3个节点为一个单元进行操作。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>    <span class=\"token comment\">//空间复杂度 O(1), 时间复杂度O(n) </span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">swapPairs</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        ListNode<span class=\"token operator\">*</span> temp<span class=\"token punctuation\">;</span>\n        ListNode<span class=\"token operator\">*</span> temp1<span class=\"token punctuation\">;</span>\n        ListNode<span class=\"token operator\">*</span> dummynode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dummynode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//虚拟头节点指向 原始头节点</span>\n        ListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> dummynode<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">!=</span><span class=\"token keyword\">nullptr</span> <span class=\"token operator\">&amp;&amp;</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">!=</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            temp <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//保存临时节点</span>\n            temp1 <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n            \n            cur<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> temp<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//step1</span>\n            cur<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//step2</span>\n            temp<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//step3</span>\n            cur <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>            <span class=\"token comment\">//准备下一轮</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dummynode<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"25_n_258\"></a>2.5 删除倒数第n个节点</h2>\n<p>leetcode地址：<a href=\"https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/\">https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/</a><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210607172627601.png\"/></p>\n<h3><a id=\"251__261\"></a>2.5.1 两次扫描</h3>\n<p>第一次计算节点个数，第二次删除节点</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>   <span class=\"token comment\">//空间复杂度 O(1), 时间复杂度O(n) </span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">removeNthFromEnd</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        ListNode<span class=\"token operator\">*</span> dummynode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dummynode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//还是要虚拟一个头节点，因为有可能删除的是头节点</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> time <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        ListNode<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> dummynode<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//第一轮计数用</span>\n        ListNode<span class=\"token operator\">*</span> temp2 <span class=\"token operator\">=</span> dummynode<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 第二轮扫描</span>\n        ListNode<span class=\"token operator\">*</span> temp1<span class=\"token punctuation\">;</span> <span class=\"token comment\">//删除节点用</span>\n        \n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">//第一轮扫描确定链表元素个数</span>\n            temp <span class=\"token operator\">=</span> temp<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">//  printf(\"%d\", count);  //测试计数值</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp2<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            time<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>time <span class=\"token operator\">==</span> count<span class=\"token operator\">-</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>   \n               <span class=\"token comment\">// printf(\"%d\", time); //测试判断是否正确</span>\n                temp1 <span class=\"token operator\">=</span> temp2<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n                temp2<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> temp1<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">delete</span> temp1<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n                temp2 <span class=\"token operator\">=</span> temp2<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dummynode<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"252__296\"></a>2.5.2 单次扫描完成</h3>\n<p>双指针法，其实也不止扫描了一次，快指针一次，慢指针一次，但是在时间上是有所重叠的。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">removeNthFromEnd</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        ListNode<span class=\"token operator\">*</span> dummyHead <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//虚拟头节点，便于删除真实头节点</span>\n        dummyHead<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        ListNode<span class=\"token operator\">*</span> slow <span class=\"token operator\">=</span> dummyHead<span class=\"token punctuation\">;</span>\n        ListNode<span class=\"token operator\">*</span> fast <span class=\"token operator\">=</span> dummyHead<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span> <span class=\"token operator\">&amp;&amp;</span> fast <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">//fast指针走n步</span>\n            fast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        fast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// fast再提前走一步，因为需要让slow指向删除节点的上一个节点</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            fast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n            slow <span class=\"token operator\">=</span> slow<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        slow<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> slow<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> dummyHead<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//有虚拟头节点的程序，返回的都应该是虚拟头节点下面一个指向</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"26__321\"></a>2.6 链表相交</h2>\n<p>leetcoed地址：<a href=\"https://leetcode-cn.com/problems/intersection-of-two-linked-lists-lcci/\">https://leetcode-cn.com/problems/intersection-of-two-linked-lists-lcci/</a><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210607223639749.png\"/><br/> 长链表与短链表头部对齐再往下对比是否相等。相交，即是同一节点，值、指针都相等才行。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210608101257600.png\"/></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    ListNode <span class=\"token operator\">*</span><span class=\"token function\">getIntersectionNode</span><span class=\"token punctuation\">(</span>ListNode <span class=\"token operator\">*</span>headA<span class=\"token punctuation\">,</span> ListNode <span class=\"token operator\">*</span>headB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        ListNode<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> headA<span class=\"token punctuation\">;</span>\n        ListNode<span class=\"token operator\">*</span> temp1 <span class=\"token operator\">=</span> headB<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> lenA <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> lenB <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> temp<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//计算链表A的长度，要判断空链表的情况</span>\n            lenA<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>  \n            temp <span class=\"token operator\">=</span> temp<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//printf(\"%d\", lenA);</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp1 <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span>temp1<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">//计算链表B的长度，要判断空链表的情况</span>\n            lenB<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            temp1 <span class=\"token operator\">=</span> temp1<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>    \n        <span class=\"token comment\">//printf(\"%d\", lenB);   </span>\n        temp <span class=\"token operator\">=</span> headA<span class=\"token punctuation\">;</span>\n        temp1 <span class=\"token operator\">=</span> headB<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>lenB <span class=\"token operator\">&gt;</span> lenA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>lenA<span class=\"token punctuation\">,</span>lenB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span>temp1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n       <span class=\"token keyword\">int</span> dlen <span class=\"token operator\">=</span> lenA<span class=\"token operator\">-</span>lenB<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>dlen<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            temp <span class=\"token operator\">=</span> temp<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> temp1 <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//要一直走到空指针，空链表的判断一个都不能少。</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">==</span> temp1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            temp <span class=\"token operator\">=</span> temp<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n            temp1 <span class=\"token operator\">=</span> temp1<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"27__366\"></a>2.7 环形链表</h2>\n<p>leetcode地址：<a href=\"https://leetcode-cn.com/problems/linked-list-cycle-ii/\">https://leetcode-cn.com/problems/linked-list-cycle-ii/</a><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2021060810161898.png\"/><br/> 解题分析链接：<a href=\"https://github.com/youngyangyang04/leetcode-master/blob/master/problems/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.md\">https://github.com/youngyangyang04/leetcode-master/blob/master/problems/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.md</a></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    ListNode <span class=\"token operator\">*</span><span class=\"token function\">detectCycle</span><span class=\"token punctuation\">(</span>ListNode <span class=\"token operator\">*</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        ListNode<span class=\"token operator\">*</span> fast <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        ListNode<span class=\"token operator\">*</span> slow <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>fast <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> fast<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            slow <span class=\"token operator\">=</span> slow<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n            fast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 快慢指针相遇，此时从head 和 相遇点，同时查找直至相遇</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>slow <span class=\"token operator\">==</span> fast<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                ListNode<span class=\"token operator\">*</span> index1 <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">;</span>\n                ListNode<span class=\"token operator\">*</span> index2 <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>index1 <span class=\"token operator\">!=</span> index2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    index1 <span class=\"token operator\">=</span> index1<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n                    index2 <span class=\"token operator\">=</span> index2<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">return</span> index2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回环的入口</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-06-13 23:21:56", "summary": "链表基础知识：链表分类：单链表、双链表、循环链表链表的存储：散乱分布，通过指针域的指针链接在一起链表的定义：此处给出单链表的定义节点上存储的元素指向下一个节点的指针节点的构造函数链表初始化及调用：使用"}