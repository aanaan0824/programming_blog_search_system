{"blogid": "126498758", "writerAge": "码龄1年", "writerBlogNum": "54", "writerCollect": "180", "writerComment": "109", "writerFan": "241", "writerGrade": "4级", "writerIntegral": "947", "writerName": "没有BUG就是最大的BUG", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126498758.jpg", "writerRankTotal": "20195", "writerRankWeekly": "536", "writerThumb": "157", "writerVisitNum": "17681", "blog_read_count": "4526", "blog_time": "已于 2022-08-29 11:14:26 修改", "blog_title": "【Docker】傻瓜式开发", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p><strong>一、Docker下载安装</strong></p>\n<p>1.首先执行卸载docker命令(不管之前有没有装过doker卸载一遍总是没错的)</p>\n<pre><code class=\"language-bash\">sudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine</code></pre>\n<p> <img alt=\"\" height=\"273\" src=\"..\\..\\static\\image\\6af7da11177b46dd9a27568edf2b4928.png\" width=\"536\"/></p>\n<p> 2.安装docker的依赖包</p>\n<pre><code class=\"language-bash\">sudo yum install -y yum-utils</code></pre>\n<p><img alt=\"\" height=\"212\" src=\"..\\..\\static\\image\\bc30ddfb9ee24e72b79da36be316f033.png\" width=\"812\"/></p>\n<p> 3.告诉liunx安装docker从哪里安装</p>\n<pre><code class=\"language-bash\">sudo yum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo</code></pre>\n<p><img alt=\"\" height=\"113\" src=\"..\\..\\static\\image\\3de531231ab54d3fa2ff37aece68e5ea.png\" width=\"864\"/></p>\n<p> 4.安装docker（docker的引擎、操作docker的客户端、docker容器）</p>\n<pre><code class=\"language-bash\">sudo yum install docker-ce docker-ce-cli containerd.io</code></pre>\n<p><img alt=\"\" height=\"642\" src=\"..\\..\\static\\image\\934749698b8c4455b45931041f4a277e.png\" width=\"850\"/></p>\n<p> 5.启动doker服务</p>\n<pre><code class=\"language-bash\">sudo systemctl start docker</code></pre>\n<p>6.查看docker的版本，也确保一下安装是否成功</p>\n<pre><code class=\"language-bash\">docker -v</code></pre>\n<p><img alt=\"\" height=\"35\" src=\"..\\..\\static\\image\\b52c4629c7014441803841622a789c69.png\" width=\"725\"/></p>\n<p> 7.查看docker里有没有下载的应用镜像</p>\n<pre><code class=\"language-bash\">sudo docker images</code></pre>\n<p><img alt=\"\" height=\"34\" src=\"..\\..\\static\\image\\02f04da97a4e457baa4b2a2888185a91.png\" width=\"795\"/></p>\n<p> 8.给docker设置开机自动启动，省得以后每次启动输入启动命令</p>\n<pre><code class=\"language-bash\">sudo systemctl enable docker</code></pre>\n<p><img alt=\"\" height=\"39\" src=\"..\\..\\static\\image\\5df26d1852ed4f2a8d4bb07b8ce41229.png\" width=\"1200\"/></p>\n<p> 9.给docker配置应用镜像下载加速</p>\n<pre><code class=\"language-bash\">#创建文件目录\nsudo mkdir -p /etc/docker</code></pre>\n<pre><code class=\"language-bash\">#配置镜像加速地址\nsudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'\n{\n  \"registry-mirrors\": [\"https://kru7klna.mirror.aliyuncs.com\"]\n}\nEOF</code></pre>\n<p> <img alt=\"\" height=\"138\" src=\"..\\..\\static\\image\\3f2c317f881741a5a763c758a73c344d.png\" width=\"688\"/></p>\n<p>10.重启docker的后台线程</p>\n<pre><code class=\"language-bash\">sudo systemctl daemon-reload</code></pre>\n<p>11.重启docker服务</p>\n<pre><code class=\"language-bash\">sudo systemctl restart docker</code></pre>\n<p><strong>二、docker安装mysql</strong></p>\n<p>1.使用命令下载</p>\n<pre><code class=\"language-bash\">sudo docker pull mysql:5.7</code></pre>\n<p><img alt=\"\" height=\"244\" src=\"..\\..\\static\\image\\41d5ce12d8f948909071887be830059b.png\" width=\"661\"/></p>\n<p> 2.使用命令查看已经下载好的mysql镜像</p>\n<pre><code class=\"language-bash\">sudo docker images</code></pre>\n<p><img alt=\"\" height=\"53\" src=\"..\\..\\static\\image\\2a5e1bf79e564528ba9a6ed61bd70078.png\" width=\"693\"/></p>\n<p> 3.启动mysql镜像</p>\n<pre><code class=\"language-bash\"># --name指定容器名字 -v目录挂载 -p指定端口映射  -e设置mysql参数 -d后台运行\n \nsudo docker run -p 3306:3306 --name mysql \\\n-v /mydata/mysql/log:/var/log/mysql \\\n-v /mydata/mysql/data:/var/lib/mysql \\\n-v /mydata/mysql/conf:/etc/mysql \\\n-e MYSQL_ROOT_PASSWORD=root \\\n-d mysql:5.7</code></pre>\n<p><img alt=\"\" height=\"95\" src=\"..\\..\\static\\image\\3f39c171197947ee85b7dc2aa5eb8c66.png\" width=\"597\"/></p>\n<p>4.查看正在运行中的镜像</p>\n<pre><code class=\"language-bash\">sudo docker ps</code></pre>\n<p><img alt=\"\" height=\"76\" src=\"..\\..\\static\\image\\c579645fe04a45ebb14db04ec188c465.png\" width=\"1121\"/></p>\n<p> 5.navicat连接测试</p>\n<p><img alt=\"\" height=\"823\" src=\"..\\..\\static\\image\\c3126a1407ae42ab87b5e2379bd9bc12.png\" width=\"691\"/></p>\n<p>6.修改mysql配置</p>\n<pre><code class=\"language-bash\">#进入conf\ncd /mydata/mysql/conf</code></pre>\n<pre><code class=\"language-bash\">#创建my.cnf文件\nsudo vi my.cnf</code></pre>\n<pre><code class=\"language-bash\">#编辑文件输入配置信息\n[client]\ndefault-character-set=utf8\n[mysql]\ndefault-character-set=utf8\n[mysqld]\ninit_connect='SET collation_connection = utf8_unicode_ci'\ninit_connect='SET NAMES utf8'\ncharacter-set-server=utf8\ncollation-server=utf8_unicode_ci\nskip-character-set-client-handshake\nskip-name-resolve</code></pre>\n<p> <img alt=\"\" height=\"325\" src=\"..\\..\\static\\image\\b6db96b1b9e94b37853270f21d64aab5.png\" width=\"623\"/></p>\n<p>7.重启mysql应用新的配置</p>\n<pre><code class=\"language-bash\">sudo docker restart mysql</code></pre>\n<p><img alt=\"\" height=\"54\" src=\"..\\..\\static\\image\\8d32fbf682fb4bcd8407d06e0829f3cf.png\" width=\"528\"/></p>\n<p><strong> 三、doker安装redis</strong></p>\n<p>1.下载redis镜像</p>\n<pre><code class=\"language-bash\">docker pull redis</code></pre>\n<p><img alt=\"\" height=\"187\" src=\"..\\..\\static\\image\\2037601bd9504386b29c28795d478845.png\" width=\"720\"/></p>\n<p> 2.查看已经下载好的redis镜像</p>\n<pre><code class=\"language-bash\">docker images</code></pre>\n<p><img alt=\"\" height=\"69\" src=\"..\\..\\static\\image\\c2d13c6558804482853cdcc2acd786e9.png\" width=\"665\"/></p>\n<p>3.创建redis配置文件目录</p>\n<pre><code class=\"language-bash\">mkdir -p /mydata/redis/conf</code></pre>\n<p>4.进入新创建的redis配置文件目录</p>\n<pre><code class=\"language-bash\">cd /mydata/redis/conf</code></pre>\n<p>5.创建redis的配置文件</p>\n<pre><code class=\"language-bash\">touch redis.conf</code></pre>\n<p>6.执行redis的启动命令</p>\n<pre><code class=\"language-bash\">docker run -p 6379:6379 --name redis \\\n-v /mydata/redis/data:/data \\\n-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \\\n-d redis redis-server /etc/redis/redis.conf</code></pre>\n<p><img alt=\"\" height=\"100\" src=\"..\\..\\static\\image\\b06261299aa34236bed70159c0f52f5d.png\" width=\"610\"/></p>\n<p> 7.查看doker中已经启动的镜像</p>\n<pre><code class=\"language-bash\">docker ps</code></pre>\n<p><img alt=\"\" height=\"87\" src=\"..\\..\\static\\image\\29f809f0028f4ac6b73d32726151d0ff.png\" width=\"1046\"/></p>\n<p> 8.修改redis配置文件，使其可以<strong>aof</strong>持久化</p>\n<pre><code class=\"language-bash\">vi redis.conf</code></pre>\n<p><img alt=\"\" height=\"69\" src=\"..\\..\\static\\image\\e86ea87e568449ef839097aa335dd432.png\" width=\"383\"/></p>\n<p> 9.重启redis镜像使用新的配置</p>\n<pre><code class=\"language-bash\">docker restart redis</code></pre>\n<p><img alt=\"\" height=\"38\" src=\"..\\..\\static\\image\\5e63e53fc8bf4e81ba49ba1ee8e9929a.png\" width=\"518\"/></p>\n<p> 10.连接测试</p>\n<p><img alt=\"\" height=\"725\" src=\"..\\..\\static\\image\\70343ef174204aa7a9b60f4d81f6abd6.png\" width=\"606\"/></p>\n<p><strong>四、doker安装nginx</strong></p>\n<p>1.下载nginx镜像</p>\n<pre><code class=\"language-bash\">docker pull nginx</code></pre>\n<p> <img alt=\"\" height=\"186\" src=\"..\\..\\static\\image\\c00aa44374b943d5b2d4c95d0733eb9d.png\" width=\"651\"/></p>\n<p></p>\n<p>2.查看已经下载好的nginx镜像</p>\n<pre><code class=\"language-bash\">docker images</code></pre>\n<p><img alt=\"\" height=\"103\" src=\"..\\..\\static\\image\\669e026b48934012a14615860d6aa520.png\" width=\"534\"/></p>\n<p> 3.创建nginx配置文件</p>\n<pre><code class=\"language-bash\"># 创建挂载目录\nmkdir -p /home/nginx/conf\nmkdir -p /home/nginx/log\nmkdir -p /home/nginx/html</code></pre>\n<p><img alt=\"\" height=\"80\" src=\"..\\..\\static\\image\\3ed04ac5badb40309bf2a750697a362c.png\" width=\"495\"/></p>\n<p> 4.容器中的nginx.conf文件和conf.d文件夹复制到宿主机</p>\n<pre><code class=\"language-bash\"># 生成容器\ndocker run --name nginx -p 9001:80 -d nginx\n# 将容器nginx.conf文件复制到宿主机\ndocker cp nginx:/etc/nginx/nginx.conf /home/nginx/conf/nginx.conf\n# 将容器conf.d文件夹下内容复制到宿主机\ndocker cp nginx:/etc/nginx/conf.d /home/nginx/conf/conf.d\n# 将容器中的html文件夹复制到宿主机\ndocker cp nginx:/usr/share/nginx/html /home/nginx/</code></pre>\n<p><img alt=\"\" height=\"99\" src=\"..\\..\\static\\image\\699cbf55d55d4af2add3a7ac0bc6b3c1.png\" width=\"704\"/></p>\n<p> <img alt=\"\" height=\"287\" src=\"..\\..\\static\\image\\1bf631269eff4b9788890014ee63578d.png\" width=\"473\"/></p>\n<p> 5.启动doker中的nginx镜像</p>\n<pre><code class=\"language-bash\">docker run \\\n-p 9002:80 \\\n--name nginx \\\n-v /home/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\\n-v /home/nginx/conf/conf.d:/etc/nginx/conf.d \\\n-v /home/nginx/log:/var/log/nginx \\\n-v /home/nginx/html:/usr/share/nginx/html \\\n-d nginx:latest</code></pre>\n<p><img alt=\"\" height=\"180\" src=\"..\\..\\static\\image\\f975bf1d92f14dd48b6b96a2e283e5cf.png\" width=\"1200\"/></p>\n<p> 6.验证nginx是否配置成功</p>\n<p><img alt=\"\" height=\"482\" src=\"..\\..\\static\\image\\cacec2b013f14d1caec2757313823c6c.png\" width=\"1200\"/></p>\n<p><strong>五、docker安装JDK</strong></p>\n<p>1.下载JDK8</p>\n<pre><code class=\"language-bash\">docker pull java:8</code></pre>\n<p><img alt=\"\" height=\"204\" src=\"..\\..\\static\\image\\12d816e40ee54e82b32a1fa5291f73ab.png\" width=\"703\"/></p>\n<p> 2.查看镜像</p>\n<pre><code class=\"language-bash\">docker images</code></pre>\n<p><img alt=\"\" height=\"122\" src=\"..\\..\\static\\image\\2ea02a78772a4370985013121a966ced.png\" width=\"540\"/></p>\n<p><strong> 六、在docker中运行jar包</strong></p>\n<p>1.创建Dockerflie</p>\n<pre><code class=\"language-bash\">touch Dockerfile</code></pre>\n<p>2.编写Dockerfile文件</p>\n<pre><code class=\"language-bash\">#依赖的父镜像\nFROM java:8\n#作者\nMAINTAINER lzw\n#jar包添加到镜像中\nADD project.jar project.jar\n#容器暴露的端口 即jar程序在容器中运行的端口\nEXPOSE 18188\n#容器启动之后要执行的命令\nENTRYPOINT [\"java\",\"-jar\",\"project.jar\"]\n</code></pre>\n<p>3.上传jar包(注意jar包需要和Dockerfile在同级目录)</p>\n<p><img alt=\"\" height=\"34\" src=\"..\\..\\static\\image\\04c3ac0d00bc46e0ad4043aa6eced12b.png\" width=\"736\"/></p>\n<p>4.使用当前目录的 Dockerfile 创建镜像，标签为 wgs/product 重点注意后面的点</p>\n<pre><code class=\"language-bash\">docker build -t wgs/product .</code></pre>\n<p> <img alt=\"\" height=\"307\" src=\"..\\..\\static\\image\\b73b7225fc754a028a97c2c79bf65c03.png\" width=\"670\"/></p>\n<p>5.运行镜像(前面的18188是访问端口 后面的18188的jar包中server.port=18188)</p>\n<pre><code class=\"language-bash\">docker run -d --name myproduct -p 18188:18188  wgs/product</code></pre>\n<p><img alt=\"\" height=\"35\" src=\"..\\..\\static\\image\\16649b2506034eb6875fb4c91a74c23f.png\" width=\"854\"/></p>\n<p>6.查看日志</p>\n<pre><code class=\"language-bash\">docker logs myproduct</code></pre>\n<p><img alt=\"\" height=\"802\" src=\"..\\..\\static\\image\\1e9950e1e17b46a099cc1f5f13181344.png\" width=\"1200\"/></p>\n<p>7.测试是否能正常访问</p>\n<p><img alt=\"\" height=\"690\" src=\"..\\..\\static\\image\\945c0ad8034e4f269c9e76fbf351f1fc.png\" width=\"1200\"/></p>\n<p><span style=\"color:#fe2c24;\"><strong> 总结:整体完成了docker的安装、mysql的安装、nginx的安装、redis的安装、jdk的安装、jar包的发布，可以满足绝大多数应用场景!</strong></span></p>\n</div>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-08-29 11:14:26", "summary": "一、下载安装首先执行卸载命令不管之前有没有装过卸载一遍总是没错的安装的依赖包告诉安装从哪里安装安装的引擎、操作的客户端、容器启动服务查看的版本，也确保一下安装是否成功查看里有没有下载的应用镜像给设置开"}