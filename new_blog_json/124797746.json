{"blogid": "124797746", "writerAge": "码龄3年", "writerBlogNum": "118", "writerCollect": "5268", "writerComment": "4592", "writerFan": "30934", "writerGrade": "7级", "writerIntegral": "12168", "writerName": "Bug 终结者", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124797746.jpg", "writerRankTotal": "867", "writerRankWeekly": "4", "writerThumb": "3978", "writerVisitNum": "250459", "blog_read_count": "4541", "blog_time": "已于 2022-05-23 08:02:12 修改", "blog_title": "RabbitMQ入门 -- 阿里云服务器安装RabbitMQ", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>📢📢📢📣📣📣<br/><br/> <strong>哈喽！大家好</strong>，我是【<strong>Bug 终结者</strong>】 <strong>，【CSDNJava领域优质创作者】🏆，阿里云专家博主🏆，51CTO人气博主🏆，InfoQ写作专家🏆</strong> <br/><br/> 一位上进心十足，拥有极强学习力的【<strong>Java领域博主</strong>】😜😜😜 <br/><br/> 🏅【Bug 终结者】博客的领域是【面向后端技术】的学习，未来会持续更新更多的【后端技术】以及【学习心得】。 <strong>偶尔会分享些前端基础知识，会更新实战项目，面向企业级开发应用</strong>！<br/> 🏅 如果有对【后端技术】、【前端领域】感兴趣的【小可爱】，欢迎关注【Bug 终结者】💞💞💞<br/> <br/><br/> ❤️❤️❤️ <strong>感谢各位大可爱小可爱！</strong> ❤️❤️❤️</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e5c0ed64d45242d992f75ddd15a367bf.png\"/></p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#MQ_13\">一、什么是MQ？</a></li><li><a href=\"#RabbitMQ_27\">二、什么是RabbitMQ？</a></li><li><a href=\"#RabbitMQ_36\">三、使用RabbitMQ的好处</a></li><li><ul><li><a href=\"#_38\">☁️解耦</a></li><li><a href=\"#_58\">⛄异步</a></li><li><a href=\"#_74\">⚡削峰/限流</a></li></ul>\n</li><li><a href=\"#LinuxRabbitMQ_80\">四、Linux环境下手动安装RabbitMQ</a></li><li><ul><li><a href=\"#_82\">🚡环境准备</a></li><li><a href=\"#RabbitMQ_153\">♻️安装并启动RabbitMQ</a></li></ul>\n</li><li><a href=\"#RabbitMQWeb_191\">五、手动安装RabbitMQWeb管理界面和授权</a></li><li><ul><li><a href=\"#RabbitMQ_193\">⌛安装并启动RabbitMQ管理插件</a></li><li><a href=\"#_223\">😃添加账户</a></li><li><a href=\"#_234\">✳️再次测试访问</a></li></ul>\n</li><li><a href=\"#LinuxDockerRabbitMQ_241\">六、Linux环境下Docker安装RabbitMQ</a></li><li><ul><li><a href=\"#Docker_243\">⌛安装Docker</a></li><li><a href=\"#_295\">🗳️配置阿里云加速镜像</a></li><li><a href=\"#RabbitMQ_340\">♨️安装并启动RabbitMQ</a></li><li><a href=\"#RabbitMQ_350\">❇️测试RabbitMQ</a></li></ul>\n</li><li><a href=\"#_360\">⛵小结</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"MQ_13\"></a>一、什么是MQ？</h1>\n<blockquote>\n<p>消息队列（Message Queue，简称MQ），从字面意思上看，本质是个队列，FIFO先入先出，只不过队列中存放的内容是message而已。</p>\n</blockquote>\n<p>其主要用途：<strong>不同进程Process/线程Thread之间通信。</strong></p>\n<p><strong>队列是一种先进先出的结构：<code>FIFO</code></strong></p>\n<p><strong>把要传输的数据放在队列中</strong>。</p>\n<p>把数据放到消息队列叫<strong>生产者</strong></p>\n<p>从消息队列取出消息叫做<strong>消费者</strong></p>\n<h1><a id=\"RabbitMQ_27\"></a>二、什么是RabbitMQ？</h1>\n<blockquote>\n<p><strong>RabbitMQ</strong>是一套开源（MPL）的<strong>消息队列服务软件</strong>，是由 LShift 提供的一个 Advanced Message Queuing Protocol (AMQP) 的开源实现，由以高性能、健壮以及可伸缩性出名的 Erlang 写成。</p>\n</blockquote>\n<p><strong>RabbitMQ的特性</strong></p>\n<blockquote>\n<ul><li>可伸缩性：集群服务</li><li>消息持久化：从内存持久化消息到硬盘，再从硬盘加载到内存</li></ul>\n</blockquote>\n<h1><a id=\"RabbitMQ_36\"></a>三、使用RabbitMQ的好处</h1>\n<h2><a id=\"_38\"></a>☁️解耦</h2>\n<p>系统A在代码中直接调用系统B和系统C的代码，如果将来D系统接入，系统A还需要修改代码，过于麻烦！</p>\n<p><strong>系统A可以生成一个id，然后系统B需要这个id，系统A去调用了系统B</strong></p>\n<p><strong>过了段时间，系统C说也要系统A的id，那么这时接触系统B的引用，去讲id传给系统C</strong></p>\n<p><strong>这时又来了系统D，系统D也要系统A的id，系统A又解除了系统C，去调用了系统D，反反复复，很麻烦</strong></p>\n<p>系统A的负责人觉得改来改去太麻烦了，没意思，跑路了。</p>\n<p>过段时间，公司来了位大佬，大佬说将系统A的id，存入消息队列，谁需要谁去拿，这样系统A就不用来回改动了，完美解决了参数调用问题！</p>\n<p><strong>系统A不关心谁去调用id，只负责生产数据并存入消息队列，其它系统即使挂了或请求超时，也跟系统A没有任何关系</strong></p>\n<p><code>这样就实现了系统A、B、C、D之间的解耦！</code></p>\n<h2><a id=\"_58\"></a>⛄异步</h2>\n<p><strong>再来看看这种情况，系统A还是直接调用系统B、C、D</strong></p>\n<p>系统A：主要业务</p>\n<p>系统B：短信业务</p>\n<p>系统C：邮箱业务</p>\n<p>系统D：处理后续业务</p>\n<p><strong>系统A下单成功后会去调用系统B，但是如果一个一个的调用，会大大的降低效率，假设每个业务执行时间100ms，那么4个业务执行完毕就是400ms，这种就被称为<code>阻塞执行</code></strong></p>\n<p><strong>那么我们的消息队列采用了异步机制，当我们下单完成后，会去异步的调用其它业务，会极大的降低系统的执行时间，提升效率！</strong></p>\n<h2><a id=\"_74\"></a>⚡削峰/限流</h2>\n<p>例如：双十一大促销，这时的流量是很大很大的，并发很高，比如每秒5000个请求，假设现在又3台机器处理，并且每台机器每秒只能处理1500次请求，那么多出来的请求500请求，会将系统搞垮的，这时我们可以将多出来的请求放入消息队列中</p>\n<p>这样即使每秒有10000个请求，也不会将系统搞垮，会在消息队列中等待，由系统去分配请求处理</p>\n<h1><a id=\"LinuxRabbitMQ_80\"></a>四、Linux环境下手动安装RabbitMQ</h1>\n<h2><a id=\"_82\"></a>🚡环境准备</h2>\n<p><strong>阿里云Centos7.6服务器</strong></p>\n<pre><code class=\"prism language-bash\">lsb_release -a\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7ea6d840d6c74c95bfd79726bc7ba231.png\"/></p>\n<p><strong>在2022年5月，RabbitMQ官方发布推文宣称最新的版本已经不支持Centos7.x系列，但是我们可以通过下载之前支持的版本来部署！</strong></p>\n<blockquote>\n<p><strong>下载RabbitMQ RPM包</strong></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/rabbitmq/rabbitmq-server/releases/tag/v3.8.13\">RabbitMQ下载</a></strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\94de3fff87504ad2b0b512476461660a.png\"/></p>\n<p><strong>下载成功如下</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a7fcb172c8f3440fa85f1a3d52dd78eb.png\"/></p>\n<blockquote>\n<p><strong>下载ErLang RPM包</strong></p>\n</blockquote>\n<p><strong>这里需要注意，下载的版本要和RabbitMQ对应，必须支持下载的ErLang版本</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\13d3b527413d4f19bd79ef609eec9751.png\"/></p>\n<p><strong>我们找到下载的是 3.8.13 ，支持的最低是 22.3 最高是 23.x</strong></p>\n<p><strong><a href=\"https://packagecloud.io/rabbitmq/erlang/packages/el/7/erlang-23.2.7-2.el7.x86_64.rpm\">下载ErLange</a></strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a83b1fd5e7fa43f4875b92c113aaa52a.png\"/></p>\n<p><strong>点击Download下载或单机wget复制下在Linux下 下载</strong></p>\n<blockquote>\n<p><strong>使用FileZilla上传至阿里云服务器</strong></p>\n</blockquote>\n<p><strong>阿里云服务器在 /usr/local 下新建 rabbitmq 文件夹</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\baeb1c915bc347299b52a55c89057492.png\"/></p>\n<p><strong>上传完成</strong></p>\n<blockquote>\n<p><strong>安装ErLang</strong></p>\n</blockquote>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 解压erlang文件</span>\n<span class=\"token function\">rpm</span> -Uvh erlang-23.2.7-2.el7.x86_64.rpm\n<span class=\"token comment\">#安装erlang</span>\nyum <span class=\"token function\">install</span> -y erlang\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\08735640ff434c518e7f4f0c6204409f.png\"/></p>\n<blockquote>\n<p><strong>查看erlang版本</strong></p>\n</blockquote>\n<pre><code class=\"prism language-bash\">erl -v\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\052be3cf12a24b42872ba34dce282928.png\"/></p>\n<h2><a id=\"RabbitMQ_153\"></a>♻️安装并启动RabbitMQ</h2>\n<p>在安装RabbitMQ之前要安装一个插件</p>\n<pre><code class=\"prism language-bash\">yum <span class=\"token function\">install</span> -y socat\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\85fe2df7345842838e066127a5478f90.png\"/></p>\n<blockquote>\n<p><strong>解压并安装RabbitMQ</strong></p>\n</blockquote>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 解压</span>\n<span class=\"token function\">rpm</span> -Uvh rabbitmq-server-3.8.13-1.el8.noarch.rpm\n<span class=\"token comment\"># 安装</span>\nyum <span class=\"token function\">install</span> -y rabbitmq-server\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ae7b71744fb148bcaa0948394c807af6.png\"/></p>\n<blockquote>\n<p><strong>启动RabbitMQ服务</strong></p>\n</blockquote>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 启动服务</span>\nsystemctl start rabbitmq-server\n<span class=\"token comment\"># 查看当前的运行状态</span>\nsystemctl status rabbitmq-server\n<span class=\"token comment\"># 重启服务</span>\nsystemctl restart rabbitmq-server\n<span class=\"token comment\"># 停止服务</span>\nsystemctl stop rabbitmq-server\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c8b6b1674c784b1ca4bb6d27760d4790.png\"/></p>\n<p><strong>可以看到，启动成功！</strong></p>\n<h1><a id=\"RabbitMQWeb_191\"></a>五、手动安装RabbitMQWeb管理界面和授权</h1>\n<h2><a id=\"RabbitMQ_193\"></a>⌛安装并启动RabbitMQ管理插件</h2>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 安装RabbitMQWeb管理插件</span>\nrabbitmq-plugins <span class=\"token builtin class-name\">enable</span> rabbitmq_management\n<span class=\"token comment\"># 安装完成后重启rabbitmq服务</span>\nsystemctl restart rabbitmq-server\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2c6427ddc8ce4fc484e5eaaa0e72fe9c.png\"/></p>\n<p><strong>启动成功，默认Web页面占用端口为 15672，我们去阿里云服务器控制台开放此端口</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b855e4af6c904483810e5b5bba0be4c3.png\"/></p>\n<blockquote>\n<p><strong>测试访问</strong></p>\n</blockquote>\n<p><strong>浏览器输入 http://您的ip地址:15672</strong></p>\n<p>出现如下界面</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2145b25613464068a3674fe6135d0378.png\"/></p>\n<p>默认登录账号密码 guest guest <strong>登录测试</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e80fa0e9299f478ea22fbdfbb77ad63d.png\"/></p>\n<p><strong>这个意思是我们只能通过本地来登录guest 账户</strong></p>\n<p><strong>下面给出解决方案</strong></p>\n<h2><a id=\"_223\"></a>😃添加账户</h2>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 添加一个用户</span>\nrabbitmqctl add_user admin admin\n<span class=\"token comment\"># 将用户设置为admin权限</span>\nrabbitmqctl set_user_tags admin administrator\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f25b245c4a5a4df98750dffff9c05931.png\"/></p>\n<h2><a id=\"_234\"></a>✳️再次测试访问</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\06092a7cd3f34488a932a6035311ceb4.png\"/></p>\n<p><strong>访问成功，手动安装成功！</strong></p>\n<h1><a id=\"LinuxDockerRabbitMQ_241\"></a>六、Linux环境下Docker安装RabbitMQ</h1>\n<h2><a id=\"Docker_243\"></a>⌛安装Docker</h2>\n<blockquote>\n<p><strong>先查看本机是否存在Docker，删除旧版本Docker</strong></p>\n</blockquote>\n<p><strong>查看docker 版本</strong></p>\n<pre><code class=\"prism language-bash\"><span class=\"token function\">docker</span> version\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c6d0ae8927824438b695a3749ab87739.png\"/></p>\n<p><strong>没有docker，我们执行以下命令，删除残余文件</strong></p>\n<pre><code class=\"prism language-bash\">yum remove <span class=\"token function\">docker</span> <span class=\"token punctuation\">\\</span>\n               docker-client <span class=\"token punctuation\">\\</span>\n               docker-client-latest <span class=\"token punctuation\">\\</span>\n               docker-common <span class=\"token punctuation\">\\</span>\n               docker-latest <span class=\"token punctuation\">\\</span>\n               docker-latest-logrotate <span class=\"token punctuation\">\\</span>\n               docker-logrotate <span class=\"token punctuation\">\\</span>\n               docker-engine\n\n</code></pre>\n<p><strong>进入Linux根目录，安装Docker</strong></p>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 安装yum-utils包（提供yum-config-manager 实用程序）并设置稳定的存储库。</span>\nyum <span class=\"token function\">install</span> -y yum-utils\n\n<span class=\"token comment\"># 安装阿里云配置</span>\nyum-config-manager <span class=\"token punctuation\">\\</span>\n     --add-repo <span class=\"token punctuation\">\\</span>\n     http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n</code></pre>\n<p><strong>安装Docker 最新引擎</strong></p>\n<pre><code class=\"prism language-bash\">yum <span class=\"token function\">install</span> docker-ce docker-ce-cli containerd.io\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\feefe4f24d6448acb89e0563fb024b16.png\"/></p>\n<p><strong>输入y确认即可！</strong></p>\n<h2><a id=\"_295\"></a>🗳️配置阿里云加速镜像</h2>\n<p><strong>打开阿里云控制台，弹性计算 --&gt; 容器与镜像服务</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e03ac357681f4e7fa78b47ffca9c42f5.png\"/></p>\n<p><strong>打开之后选择 镜像工具 --&gt; 镜像加速器，复制内容即可</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a9807e4bbe064b3f90fb574e10e6324c.png\"/></p>\n<hr/>\n<blockquote>\n<p><strong>进入Linux服务器根据步骤配置镜像加速器</strong></p>\n</blockquote>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 创建docker文件夹</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> -p /etc/docker\n\n<span class=\"token comment\"># 打开文件并配置内容</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> /etc/docker/daemon.json <span class=\"token operator\">&lt;&lt;-</span><span class=\"token string\">'EOF'\n{\n  \"registry-mirrors\": [\"https://pfjide5p.mirror.aliyuncs.com\"]\n}\nEOF</span>\n\n<span class=\"token comment\"># 重启服务</span>\n<span class=\"token function\">sudo</span> systemctl daemon-reload\n<span class=\"token comment\"># 启动docker</span>\n<span class=\"token function\">sudo</span> systemctl restart <span class=\"token function\">docker</span>\n</code></pre>\n<p><strong>新建文件夹</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9608cae1c1e249d7a2a9b830ff0f591e.png\"/></p>\n<p><strong>配置内容，并重启服务</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\278f179d0305475da46d1f938fc6c8c1.png\"/></p>\n<p><strong>根据步骤一步步创建即可！</strong></p>\n<h2><a id=\"RabbitMQ_340\"></a>♨️安装并启动RabbitMQ</h2>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 获取镜像，这个是带着web页面的</span>\n<span class=\"token function\">docker</span> pull rabbitmq:management\n<span class=\"token comment\"># 运行 rabbitmq 并映射端口 设置默认账户密码admin</span>\n<span class=\"token function\">docker</span> run -di --name myrabbit -e <span class=\"token assign-left variable\">RABBITMQ_DEFAULT_USER</span><span class=\"token operator\">=</span>admin -e <span class=\"token assign-left variable\">RABBITMQ_DEFAULT_PASS</span><span class=\"token operator\">=</span>admin -p <span class=\"token number\">15672</span>:15672 -p <span class=\"token number\">5672</span>:5672 -p <span class=\"token number\">25672</span>:25672 -p <span class=\"token number\">61613</span>:61613 -p <span class=\"token number\">1883</span>:1883 rabbitmq:management\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fc8b8a77eb3c496fbde2346831314825.png\"/></p>\n<h2><a id=\"RabbitMQ_350\"></a>❇️测试RabbitMQ</h2>\n<p><strong>浏览器输入 http://您的ip地址:15672</strong> 并输入admin admin</p>\n<p>出现如下界面</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ff41938790ef4608ab043448d401f7e1.png\"/></p>\n<p><strong>至此，在Docker内安装RabbitMQ完成！</strong></p>\n<h1><a id=\"_360\"></a>⛵小结</h1>\n<p>以上就是【<strong>Bug 终结者</strong>】对<strong>RabbitMQ入门 – 阿里云服务器安装RabbitMQ</strong>简单的概述，<strong>RabbitMQ是很常用的中间件</strong>，使用它，可<strong>提高程序的性能，底层使用通道，多路复用</strong>等，<strong>完美的利用CPU完成任务，RabbitMQ可承受高并发，拥有高性能，可谓是开发利器！</strong></p>\n<blockquote>\n<p>如果这篇【文章】有帮助到你，希望可以给【<strong>Bug 终结者</strong>】点个赞👍，创作不易，如果有对【<strong>后端技术</strong>】、【<strong>前端领域</strong>】感兴趣的小可爱，也欢迎关注❤️❤️❤️ 【<strong>Bug 终结者</strong>】❤️❤️❤️，我将会给你带来巨大的【收获与惊喜】💝💝💝！</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-05-23 08:02:12", "summary": "哈喽！大家好，我是终结者，领域优质创作者，阿里云专家博主，人气博主，写作专家一位上进心十足，拥有极强学习力的领域博主终结者博客的领域是面向后端技术的学习，未来会持续更新更多的后端技术以及学习心得。偶尔"}