{"blogid": "124970579", "writerAge": "码龄5年", "writerBlogNum": "118", "writerCollect": "585", "writerComment": "35", "writerFan": "50", "writerGrade": "4级", "writerIntegral": "1445", "writerName": "架相", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124970579.jpg", "writerRankTotal": "16296", "writerRankWeekly": "163430", "writerThumb": "58", "writerVisitNum": "90791", "blog_read_count": "2284", "blog_time": "于 2022-05-25 20:47:15 发布", "blog_title": "C++实现http发起GET/POST请求", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#HTTP_2\">HTTP请求报文解析</a></li><li><a href=\"#HTTP_61\">HTTP响应报文解析</a></li><li><a href=\"#ChttpGET_78\">C++实现http发起GET请求</a></li></ul>\n</div>\n<br/> HTTP（Hyper Text Transfer Protocol，HTTP） 超文本传输协议，是一个简单的请求-响应协议。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。HTTP 是基于 TCP/IP 通信协议来传递数据的（HTML 文件、图片文件、查询结果等），默认工作在 TCP 协议 80 端口。\n<p></p>\n<h1><a id=\"HTTP_2\"></a>HTTP请求报文解析</h1>\n<p>http请求报文由3部分组成：请求行、请求头、请求体。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3ea7e110809e4666af1dc87dbf15a914.png\"/></p>\n<p>①是请求方法，GET和POST是最常见的HTTP方法，除此以外还包括DELETE、HEAD、OPTIONS、PUT、TRACE。不过，当前的大多数浏览器只支持GET和POST，Spring 3.0提供了一个HiddenHttpMethodFilter，允许你通过“_method”的表单参数指定这些特殊的HTTP方法（实际上还是通过POST提交表单）。服务端配置了HiddenHttpMethodFilter后，Spring会根据_method参数指定的值模拟出相应的HTTP方法，这样，就可以使用这些HTTP方法对处理方法进行映射了。<br/> ②为请求对应的URL地址，它和报文头的Host属性组成完整的请求URL。<br/> ③是协议名称及版本号。<br/> ④是HTTP的报文头，报文头包含若干个属性，格式为“属性名:属性值”，服务端据此获取客户端的信息。<br/> ⑤是报文体，它将一个页面表单中的组件值通过param1=value1&amp;m2=value2的键值对形式编码成一个格式化串，它承载多个请求参数的数据。不但报文体可以传递请求参数，请求URL也可以通过类似于“/chapter15/user.html? param1=value1&amp;m2=value2”的方式传递请求参数。</p>\n<p>对照上面的请求报文，我们把它进一步分解，你可以看到一幅更详细的结构图：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\54d59d04c1c94678ba2ab0ba21bef482.png\"/></p>\n<p>常见的HTTP请求报文头属性<br/> <strong>Accept</strong> -请求报文通过一个Accept报文属性告诉服务器，客户端接收什么类型的响应；Accept属性的值可以为一个或多个MIME类型的值，MIME格式：大类型/小类型[;参数]<br/> Accept:text/plain<br/> 比如：<br/> text/html,html文件<br/> text/css,css文件<br/> text/javascript,js文件<br/> image/*，所有图片文件</p>\n<p><strong>Cookie</strong> --客户端的cookie就是通过这个报文头属性传给服务器端<br/> Cookie: $Version=1; Skin=new;jsessionid=5F4771183629C9834F8382E23BE13C4C<br/> 服务端是怎么知道客户端的多个请求是隶属于一个Session呢？注意到后台的那个jsessionid=5F4771183629C9834F8382E23BE13C4C木有？原来就是通过HTTP请求报文头的Cookie属性的jsessionid的值关联起来的！（当然也可以通过重写URL的方式将会话ID附带在每个URL的后面哦）。</p>\n<p><strong>Referer</strong>：表示这个请求是从哪个URL过来的，假如你通过google搜索出一个商家的广告页面，你对这个广告页面感兴趣，鼠标一点发送一个请求报文到商家的网站，这个请求报文的Referer报文头属性值就是http://www.google.com。</p>\n<p><strong>Cache-Control</strong><br/> 对缓存进行控制，如一个请求希望响应返回的内容在客户端要被缓存一年，或不希望被缓存就可以通过这个报文头达到目的。<br/> 如以下设置，相当于让服务端将对应请求返回的响应内容不要在客户端缓存：<br/> Cache-Control: no-cache<br/> User-Agent:浏览器通知服务器，客户端浏览器与操作系统相关信息</p>\n<p><strong>ser-Agent</strong>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) uChrome/69.0.3497.100 Safari/537.36</p>\n<p><strong>Connection</strong>:表示客户端与服务连接类型；Keep-Alive表示持久连接，close已关闭<br/> Connection: keep-alive</p>\n<p><strong>Content-Length</strong>:请求体的长度</p>\n<pre><code class=\"prism language-html\">POST http://39.108.107.149:8080/vk/app/rest/ddp/iModelServiceImpl/findModelByType HTTP/1.1\nUser-Agent: Fiddler\nHost: 39.108.107.149:8080\nContent-Length: 11\n</code></pre>\n<p><strong>Host</strong>:请求的服务器主机名</p>\n<p><strong>Content-Type</strong>:请求的与实体对应的MIME信息。如果是post请求,会有这个头,默认值为application/x-www-form-urlencoded，表示请求体内容使用url编码<br/> Content-Type: application/x-www-form-urlencoded</p>\n<p><strong>Accept-Encoding</strong>：浏览器通知服务器，浏览器支持的数据压缩格式。如GZIP压缩<br/> Accept-Encoding: gzip, deflate</p>\n<p><strong>Accept-Language</strong>：浏览器通知服务器，浏览器支持的语言。各国语言(国际化i18n)<br/> Accept-Language: zh-CN,zh;q=0.9</p>\n<h1><a id=\"HTTP_61\"></a>HTTP响应报文解析</h1>\n<p>HTTP的响应报文也由三部分组成（ 响应行+响应头+响应体 ）：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d9b91899f80045e99c0d588aa0c52aa3.png\"/><br/> ①报文协议及版本；<br/> ②状态码及状态描述；<br/> ③响应报文头，也是由多个属性组成；<br/> ④响应报文体，即我们真正要的“干货”。</p>\n<p>响应状态码–和请求报文相比，响应报文多了一个’响应状态码’，它以’清晰明确’的语言告诉客户端本次请求的处理结果：<br/> 1xx 消息，一般是告诉客户端，请求已经收到了，正在处理，别急…<br/> 2xx 处理成功，一般表示：请求收悉、我明白你要的、请求已受理、已经处理完成等信息.<br/> 3xx 重定向到其它地方。它让客户端再发起一个请求以完成整个处理。<br/> 4xx 处理发生错误，责任在客户端，如客户端的请求一个不存在的资源，客户端未被授权，禁止访问等。<br/> 5xx 处理发生错误，责任在服务端，如服务端抛出异常，路由出错，HTTP版本不支持等。</p>\n<p>常见的HTTP响应报文头属性<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\80727254677f4c9fbb9fa829dbbb2f47.png\"/></p>\n<h1><a id=\"ChttpGET_78\"></a>C++实现http发起GET请求</h1>\n<p>获取城市天气信息，打印并保存本地txt文件</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;WinSock2.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\nDWORD g_dwErr<span class=\"token punctuation\">;</span><span class=\"token comment\">//用于取得错误信息</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MAX_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">40960</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//保存数组的大小</span>\n<span class=\"token keyword\">int</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">dealHttp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/* 初始化 */</span>\n    WSADATA wsdata<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">WSAStartup</span><span class=\"token punctuation\">(</span><span class=\"token function\">MAKEWORD</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>wsdata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> hostname <span class=\"token operator\">=</span> <span class=\"token string\">\"www.weather.com.cn\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">hostent</span><span class=\"token operator\">*</span> host <span class=\"token operator\">=</span> <span class=\"token function\">gethostbyname</span><span class=\"token punctuation\">(</span>hostname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* 初始化一个连接服务器的结构体 */</span>\n    sockaddr_in serveraddr<span class=\"token punctuation\">;</span>\n    serveraddr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span>\n    serveraddr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* 此处也可以不用这么做，不需要用gethostbyname，把网址ping一下，得出IP也是可以的 */</span>\n    serveraddr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>S_un<span class=\"token punctuation\">.</span>S_addr <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>host<span class=\"token operator\">-&gt;</span>h_addr_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> sock <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sock <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"socket error\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"socket succeed\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>sock<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>serveraddr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sockaddr_in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        g_dwErr <span class=\"token operator\">=</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"connect error\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">closesocket</span><span class=\"token punctuation\">(</span>sock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"connect succeed\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* GET请求 */</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> bufSned <span class=\"token operator\">=</span> <span class=\"token string\">\"GET http://www.weather.com.cn/data/sk/101190101.html\\r\\n\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* 发送GET请求 */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>sock<span class=\"token punctuation\">,</span> bufSned<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>bufSned<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"send succeed\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        g_dwErr <span class=\"token operator\">=</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"send error, 错误编号： \"</span><span class=\"token operator\">&lt;&lt;</span> g_dwErr <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">closesocket</span><span class=\"token punctuation\">(</span>sock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/* 文件，用于把HTML源码保存起来，没什么用处，只是为了自己看一下源码而已 */</span>\n    FILE <span class=\"token operator\">*</span>fp<span class=\"token punctuation\">;</span>\n    fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">char</span> BufRecv<span class=\"token punctuation\">[</span>MAX_SIZE<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> nLen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    string HtmlData<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* 开始接收数据 */</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nLen <span class=\"token operator\">=</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>sock<span class=\"token punctuation\">,</span> BufRecv<span class=\"token punctuation\">,</span> MAX_SIZE<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">/* 写文件 */</span>\n        <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span>BufRecv<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> nLen<span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/* 把数组拼接成string类型，方便下面的处理 */</span>\n        HtmlData <span class=\"token operator\">+=</span> BufRecv<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BufRecv=%s\\n\"</span><span class=\"token punctuation\">,</span>BufRecv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">closesocket</span><span class=\"token punctuation\">(</span>sock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 1, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-05-25 20:47:15", "summary": "目录请求报文解析响应报文解析实现发起请求，超文本传输协议，是一个简单的请求响应协议。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。是基于通信协议来传递数据的文件、图片文件、查询结果等"}