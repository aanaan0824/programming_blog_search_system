{"blogid": "122922532", "writerAge": "码龄3年", "writerBlogNum": "20", "writerCollect": "97", "writerComment": "17", "writerFan": "8", "writerGrade": "2级", "writerIntegral": "301", "writerName": "变瘦的鹏少", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122922532.jpg", "writerRankTotal": "144540", "writerRankWeekly": "169991", "writerThumb": "15", "writerVisitNum": "20893", "blog_read_count": "3815", "blog_time": "已于 2022-02-18 09:33:55 修改", "blog_title": "c#学习—JSON文件及解析", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"JSON_0\"></a>一、JSON文件介绍</h2>\n<p>JSON是存储和交换文本的语法，类似于XML<br/> 但比XML更小，更容易解析，于XML一样是一种数据格式<br/> JSON是一种轻量级的数据交换格式，采用完全独立于语言的文本格式，更容易编写以及解析<br/> 例如</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token punctuation\">[</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"星河爆破\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">999</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"九星连珠\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"一语成谶\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">999</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n</code></pre>\n<h2><a id=\"JSO_12\"></a>二、JSO语法规则</h2>\n<p>数据保存在键值对中<br/> 数据由逗号分割<br/> 花括号保存对象<br/> 方括号保存数组</p>\n<h2><a id=\"JSON_17\"></a>三、引入JSON库文件</h2>\n<p>JSON解析器和JSON库支持许多不同的编程语言<br/> 能对json文件进行解析的有很多，详见JSON官网，http://www.json.org/json-en.html<br/> 在主要是使用的是LitJSON或者Newtonsoft.Json，LitJSON使用NuGet安装，界面如下<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9db0239cc38842dda208f788f4f37286.png\"/></p>\n<h2><a id=\"JSONMapperJSON_23\"></a>四、利用JSON.Mapper去解析JSON文件</h2>\n<h3><a id=\"41_JSON_24\"></a>4.1 JSON为数组</h3>\n<p><strong>原始json内容</strong><br/> <strong>json.txt：</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token punctuation\">[</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"星河爆破\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">999</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"九星连珠\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"一语成谶\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">999</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n</code></pre>\n<p><strong>思想：</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token number\">1</span><span class=\"token punctuation\">.</span>利用File去读取json文件\n<span class=\"token number\">2</span><span class=\"token punctuation\">.</span>通过JsonMapper转为对象（jsondata）\n<span class=\"token number\">3</span><span class=\"token punctuation\">.</span>使用索引，遍历jsondata进行输出\n</code></pre>\n<p><strong>代码：</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//引入LitJson</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">LitJson</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> json操作\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//JsonMapper类</span>\n            <span class=\"token comment\">//ToObject方法可以将一个json字符串进行解析，</span>\n            <span class=\"token comment\">//解析的结果是json.date</span>\n            <span class=\"token comment\">//我们使用jsonMapper去解析json文本</span>\n            <span class=\"token comment\">//jsondata代表一个数据或者对象</span>\n            <span class=\"token comment\">//json217.txt为数组[],所以jsonData为数组</span>\n            <span class=\"token comment\">//注意json文件位置，需要在bug目录下</span>\n            <span class=\"token class-name\">JsonData</span> jsonData <span class=\"token operator\">=</span>JsonMapper<span class=\"token punctuation\">.</span><span class=\"token function\">ToObject</span><span class=\"token punctuation\">(</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAllText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"json217.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//使用foreach去遍历数组信息</span>\n            <span class=\"token comment\">//temp也是jsondata类型的，但是temp是一个对象</span>\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonData</span> temp <span class=\"token keyword\">in</span> jsonData<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//通过索引其去取得temp中的value</span>\n                <span class=\"token comment\">//返回值还是jsondata类型</span>\n                <span class=\"token class-name\">JsonData</span> idvalue <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">[</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">JsonData</span> namevalue <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">JsonData</span> numbervalue <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">[</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">//将jsondata转化为字符串进行输出</span>\n                <span class=\"token comment\">//name本身就为str，所以不用转换</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> id <span class=\"token operator\">=</span> Int32<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>idvalue<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> number <span class=\"token operator\">=</span> Int32<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>numbervalue<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">//输出</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span> namevalue <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>运行结果</strong>：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\03b04942c3ac4283a0e7bd0e2002cf09.png\"/></p>\n<h3><a id=\"42_JSON_95\"></a>4.2 JSON为数组，使用实体类</h3>\n<p><strong>原始json内容</strong><br/> <strong>json217.txt：</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token punctuation\">[</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"星河爆破\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">999</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"九星连珠\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"一语成谶\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">999</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n</code></pre>\n<p><strong>思想：</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token number\">1</span><span class=\"token punctuation\">.</span>根据JSON文件格式，建立实体类，例如根据json217<span class=\"token punctuation\">.</span>txt建立实体类Magic，包含id、name、number三个字段以及一个方法\n<span class=\"token number\">2</span><span class=\"token punctuation\">.</span>根据json格式，新建list，使用Magic实体类作为泛型，新建magicList类\n<span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>Magic<span class=\"token punctuation\">&gt;</span></span> magicList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Magic<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">3</span><span class=\"token punctuation\">.</span>通过JsonMapper转为对象（jsondata），赋值到magicList中\n<span class=\"token number\">4</span><span class=\"token punctuation\">.</span>对magicList进行遍历输出\n</code></pre>\n<p><strong>新建一个Magic实体类用于解析</strong><br/> <strong>Magic.cs</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> json操作\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Magic</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> id<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> number<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id:{0},name:{1},numebr:{2}\"</span><span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>代码：</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//引入LitJson</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">LitJson</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Newtonsoft<span class=\"token punctuation\">.</span>Json</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Newtonsoft<span class=\"token punctuation\">.</span>Json<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> json操作\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//因为json文件为集合，所以新建一个集合</span>\n            <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>Magic<span class=\"token punctuation\">&gt;</span></span> magicList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Magic<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//依旧使用JsonMapper去进行解析</span>\n            <span class=\"token class-name\">JsonData</span> jsonData <span class=\"token operator\">=</span> JsonMapper<span class=\"token punctuation\">.</span><span class=\"token function\">ToObject</span><span class=\"token punctuation\">(</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAllText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"json217.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonData</span> temp <span class=\"token keyword\">in</span> jsonData<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//创建一个新对象</span>\n                <span class=\"token class-name\">Magic</span> magic <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Magic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">//通过索引其去取得temp中的value</span>\n                <span class=\"token comment\">//返回值还是jsondata类型</span>\n                <span class=\"token class-name\">JsonData</span> idvalue <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">[</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">JsonData</span> namevalue <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">JsonData</span> numbervalue <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">[</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">//将jsondata转化为字符串进行输出</span>\n                <span class=\"token comment\">//name本身就为str，所以不用转换</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> id <span class=\"token operator\">=</span> Int32<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>idvalue<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> number <span class=\"token operator\">=</span> Int32<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>numbervalue<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                magic<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n                magic<span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> number<span class=\"token punctuation\">;</span>\n                magic<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> namevalue<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                magicList<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>magic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> temp <span class=\"token keyword\">in</span> magicList<span class=\"token punctuation\">)</span>     \n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>运行结果</strong>：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\03b04942c3ac4283a0e7bd0e2002cf09.png\"/><br/> 可以发现，结果是一样的，但是如此做会增加代码量，不够方便，下面介绍通过泛型去解析JSON</p>\n<h2><a id=\"JsonMApperJSON_200\"></a>五、利用Json.MApper结合泛型去解析JSON文件</h2>\n<h3><a id=\"51JSON_202\"></a>5.1JSON为数组</h3>\n<p><strong>原始json内容</strong><br/> <strong>json217.txt：</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token punctuation\">[</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"星河爆破\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">999</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"九星连珠\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"一语成谶\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">999</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n</code></pre>\n<p><strong>思想：</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token number\">1</span><span class=\"token punctuation\">.</span>对JSON文件进行解析，发现为外层为数组格式，可以认为是一个Magic对象数组\n<span class=\"token number\">2</span><span class=\"token punctuation\">.</span>使用泛型去解析，用<span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span>表示泛型，如下一个Magic对象数组表示为Magic<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nJsonMapper<span class=\"token punctuation\">.</span>ToObject<span class=\"token operator\">&lt;</span>Magic<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span>\n注意：json里面的键必须与实体类对应\n<span class=\"token number\">3</span><span class=\"token punctuation\">.</span>遍历Magic<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p><strong>代码：</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">namespace</span> json操作\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//使用泛型去解析json</span>\n            <span class=\"token comment\">//因为读取的文件格式为magic实体类的数组，所以返回是个magic的数组</span>\n            <span class=\"token comment\">//注意实体类需要对应上，</span>\n            <span class=\"token class-name\">Magic<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> magicArray<span class=\"token operator\">=</span>JsonMapper<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ToObject</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Magic<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAllText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"json217.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> temp <span class=\"token keyword\">in</span> magicArray<span class=\"token punctuation\">)</span> \n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>运行结果：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\581df57df0244cdeb3b07cae0b264972.png\"/></p>\n<h3><a id=\"52JSON_244\"></a>5.2JSON为数组，使用集合去解析</h3>\n<p><strong>思想：</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token number\">1</span><span class=\"token punctuation\">.</span>对JSON文件进行解析，发现为外层为数组格式，也可以认为是个集合\n<span class=\"token number\">2</span><span class=\"token punctuation\">.</span>使用泛型去解析，用<span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span>表示泛型，如下一个Magic对象数组表示为Magic<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nJsonMapper<span class=\"token punctuation\">.</span>ToObject<span class=\"token operator\">&lt;</span>Magic<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span>改为JsonMapper<span class=\"token punctuation\">.</span>ToObject<span class=\"token operator\">&lt;</span>List<span class=\"token operator\">&lt;</span>Magic<span class=\"token operator\">&gt;&gt;</span>\n注意：json里面的键必须与实体类对应\n<span class=\"token number\">3</span><span class=\"token punctuation\">.</span>遍历List<span class=\"token operator\">&lt;</span>Magic\n</code></pre>\n<p><strong>代码：</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//引入LitJson</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">LitJson</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">namespace</span> json操作\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//任何可以数组的地方都可以使用一个集合</span>\n            <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>Magic<span class=\"token punctuation\">&gt;</span></span> magicklist <span class=\"token operator\">=</span> JsonMapper<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ToObject</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>List<span class=\"token punctuation\">&lt;</span>Magic<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAllText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"json217.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> temp <span class=\"token keyword\">in</span> magicklist<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>运行结果：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\581df57df0244cdeb3b07cae0b264972.png\"/></p>\n<h3><a id=\"53JSON_285\"></a>5.3JSON为对象</h3>\n<p><strong>原始json内容</strong><br/> <strong>TextFlie.txt：</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n <span class=\"token string\">\"apiId\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"89757\"</span><span class=\"token punctuation\">,</span>\n <span class=\"token string\">\"date\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2022 / 01 / 24 13: 12: 10\"</span><span class=\"token punctuation\">,</span>\n <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n <span class=\"token string\">\"devicelist\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token string\">\"productcode\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"126345\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">\"devicecode\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"15632478\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"http://sssss/sssss/ssss/ssss\"</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token string\">\"productcode\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"222222\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">\"devicecode\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"222222\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"http://sssss/sssss/ssss/ssss\"</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token string\">\"productcode\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"333333\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">\"devicecode\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"333333\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"http://sssss/sssss/ssss/ssss\"</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>思想：</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token number\">1</span><span class=\"token punctuation\">.</span>对JSON文件进行解析，发现为整体为对象，对象中包括status、apiId、date、message、devicelist属性\n<span class=\"token number\">2</span><span class=\"token punctuation\">.</span>建立实体类模型，新建类IotDevice类，分为IotDevice类和DevicelistItem类\nIotDevice类包含：status、apiId、date、message、devicelist（继承与DevicelistItem）\nDevicelistItem类包含：productcode、devicecode、url\n有点像俄罗斯套娃的感觉\n<span class=\"token number\">3</span><span class=\"token punctuation\">.</span>使用json<span class=\"token punctuation\">.</span>mapper<span class=\"token operator\">&lt;</span>实体类<span class=\"token operator\">&gt;</span>进行解析，返回值为实体类的对象\n重点：建立实体类\n\n</code></pre>\n<p><strong>IotDevice.cs</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> json操作\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DevicelistItem</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> productcode <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> devicecode <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> url <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"productcode:{0},devicecode:{1},url:{2}\"</span><span class=\"token punctuation\">,</span> productcode<span class=\"token punctuation\">,</span> devicecode<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IotDevice</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> status <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> apiId <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> date <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> message <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span>DevicelistItem<span class=\"token punctuation\">&gt;</span></span> devicelist <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status:{0},apiId:{1},date:{2},message:{3},devicelist:{4},\"</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">,</span> apiId<span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> devicelist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>代码：</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//引入LitJson</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">LitJson</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">namespace</span> _032json操作\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//json文档整体为IotDevice类型，所以转换的时候泛型为&lt;IotDevice&gt;</span>\n            <span class=\"token comment\">//返回值为IotDevice对象</span>\n            <span class=\"token class-name\">IotDevice</span> iotdevice <span class=\"token operator\">=</span> JsonMapper<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ToObject</span> <span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IotDevice<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAllText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TextFile1.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>iotdevice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> temp <span class=\"token keyword\">in</span> iotdevice<span class=\"token punctuation\">.</span>devicelist<span class=\"token punctuation\">)</span> \n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>运行结果：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b0bd3c1580524406abbe81394b4ffc5e.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3f38751e1076445ca339d1b808e8c498.png\"/></p>\n<h3><a id=\"54JSON_402\"></a>5.4复杂的JSON文件解析</h3>\n<p><strong>原始json内容</strong><br/> <strong>TextFlie2.txt：</strong></p>\n<pre><code class=\"prism language-csharp\">在这里插入代码片\n</code></pre>\n<h2><a id=\"JSON_431\"></a>六、字符串转化为JSON</h2>\n<p><strong>代码：</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//引入LitJson</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">LitJson</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Newtonsoft<span class=\"token punctuation\">.</span>Json</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Newtonsoft<span class=\"token punctuation\">.</span>Json<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> json操作\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//新建IotDevice的实体类</span>\n            <span class=\"token class-name\">IotDevice</span> device1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">IotDevice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            device1<span class=\"token punctuation\">.</span>date <span class=\"token operator\">=</span> <span class=\"token string\">\"2022/02/17\"</span><span class=\"token punctuation\">;</span>\n            device1<span class=\"token punctuation\">.</span>apiId <span class=\"token operator\">=</span> <span class=\"token string\">\"89757\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//转为json的字符串</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> json <span class=\"token operator\">=</span> JsonMapper<span class=\"token punctuation\">.</span><span class=\"token function\">ToJson</span><span class=\"token punctuation\">(</span>device1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>运行结果：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cf8a53ed7644479fbc03005c1744927f.png\"/></p>\n<h2><a id=\"JSON_469\"></a>七、JSON常用工具</h2>\n<h3><a id=\"1JSON_470\"></a>1.JSON格式校验工具</h3>\n<p>可以用来对写的JSON文档进行校验，确保书写正确<br/> 地址：https://www.bejson.com/<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d2f15b37f91f4d92bc4afd9347459c1a.png\"/></p>\n<h3><a id=\"2JSONc_476\"></a>2.JSON数据生成c#实体类</h3>\n<p>当JSON设计多层时，可以使用工具，自动生成实体类模板<br/> 地址：https://www.bejson.com/convert/json2csharp/<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0fd29d09b793450ca115a60682a52704.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-02-18 09:33:55", "summary": "一、文件介绍是存储和交换文本的语法，类似于但比更小，更容易解析，于一样是一种数据格式是一种轻量级的数据交换格式，采用完全独立于语言的文本格式，更容易编写以及解析例如星河爆破九星连珠一语成谶二、语法规则"}