{"blogid": "126225061", "writerAge": "码龄3年", "writerBlogNum": "59", "writerCollect": "442", "writerComment": "356", "writerFan": "382", "writerGrade": "5级", "writerIntegral": "1877", "writerName": "进击的博仔", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126225061.jpg", "writerRankTotal": "11373", "writerRankWeekly": "165", "writerThumb": "529", "writerVisitNum": "17956", "blog_read_count": "379", "blog_time": "已于 2022-08-19 10:56:52 修改", "blog_title": "【C++】超详细入门——lambda表达式", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>lambda表达式</h3>\n<ul><li><a href=\"#1_14\">1、可调用对象</a></li><li><a href=\"#2_28\">2、谓词</a></li><li><a href=\"#3_40\">3、尾置返回类型</a></li><li><a href=\"#4lambda_58\">4、lambda表达式</a></li><li><ul><li><a href=\"#41lambda_73\">4.1无参lambda表达式</a></li><li><a href=\"#42lambda_85\">4.2有参lambda表达式</a></li><li><a href=\"#43capture_list_117\">4.3使用capture list</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<blockquote>\n<p><font size=\"3\">⚓️作者简介：即将大四的北京某能源高校学生。<br/>  <br/> <font size=\"3\">📚座右铭：<em>“九层之台，起于垒土”</em> 。所以学习技术须脚踏实地。<br/>  <br/> <font size=\"3\">📖这里推荐一款刷题、模拟面试神器，可助你斩获大厂offer：[点我免费刷题、模拟面试]</font></font></font></p>\n</blockquote>\n<hr/>\n<h1><a id=\"1_14\"></a>1、可调用对象</h1>\n<p>如果一个对象或表达式可以使用调用运算符（<code>()</code>），则可以称它为可调用对象。</p>\n<p>可调用对象共有四种：</p>\n<ul><li>函数</li><li>函数指针</li><li>重载了函数调用运算符的类</li><li>lambda表达式</li></ul>\n<p>可调用对象用途很广，包括在调用泛型算法函数（sort()，find_if()等）时，可以传入可调用对象，来指明泛型算法要对指定范围内的元素进行哪种操作。</p>\n<hr/>\n<h1><a id=\"2_28\"></a>2、谓词</h1>\n<p>再来看一下谓词的概念。</p>\n<p>谓词是一个可调用的表达式，其返回结果是一个能用作条件的值。标准库算法所使用的的谓词分两类：</p>\n<ul><li>一元谓词：只接受单一参数。</li><li>二元谓词：接受两个参数。</li></ul>\n<p>一般来说，可调用对象在泛型算法中都被用作谓词传入函数。可以说谓词是可调用对象的一种，也可以说可调用对象可以当做谓词。</p>\n<hr/>\n<h1><a id=\"3_40\"></a>3、尾置返回类型</h1>\n<p>介绍lambda表达式之前，最后再引入一个概念：尾置返回类型。</p>\n<p>C++11 中<strong>尾置返回类型</strong>用来简化函数声明，以一个跟在形参列表后面的 <code>-&gt;</code> 开头，函数名前需要用 <code>auto</code> 来表明该函数的返回类型是用尾置返回类型表示的。</p>\n<p>尾置返回类型尤其对于返回类型比较复杂的函数最有效，比如数组的指针或数组的引用：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//返回整型数组指针的函数，形参为一个int。</span>\n<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//使用类型别名</span>\n<span class=\"token keyword\">auto</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这样看来使用类型别名声明复杂函数就更简洁明了吧。</p>\n<hr/>\n<h1><a id=\"4lambda_58\"></a>4、lambda表达式</h1>\n<p>终于到它了——lambda表达式。</p>\n<p>lambda表达式又称匿名函数，可以把他理解为未命名的内联函数。它必须使用尾置返回类型来定义，其定义形式为：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token punctuation\">[</span>capture list<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>parameter list<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token keyword\">return</span> type <span class=\"token punctuation\">{<!-- --></span>function body<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>各部分解释：<br/> <em>capture list</em>：是 lambda 所在函数中定义的局部变量的列表（一般不用）；<br/> <em>return type</em>：返回类型；<br/> <em>parameter list</em>：参数列表；<br/> <em>function body</em>：函数体。</p>\n<h2><a id=\"41lambda_73\"></a>4.1无参lambda表达式</h2>\n<p>lambda表达式中可以忽略参数列表和返回类型，忽略参数列表相当于空参数列表，忽略返回类型可以从 return 语句中推断出返回类型：</p>\n<p><strong>例子：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">auto</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">auto</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//等价定义</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这里定义了一个可调用对象 f，不接受参数，返回 0。</p>\n<h2><a id=\"42lambda_85\"></a>4.2有参lambda表达式</h2>\n<p>与普通函数一样 lambda 的形参使用实参初始化。实参和形参的类型必须匹配，而且不能有默认参数。</p>\n<p><strong>例一：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">bool</span> <span class=\"token function\">is_shorter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span>s2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> is_shorter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//等价定义</span>\n</code></pre>\n<p>接受二元谓词的 <code>sort</code> 用传入的谓词替代 <code>&lt;</code> 操作。</p>\n<p>第一个 sort 中把 is_shorter 函数作为二元谓词传入，将 vector&lt;string&gt; 按照字符串长度排序。<br/> 第二个把 lambda 表达式作为二元谓词传入，与上一个等价。</p>\n<p><strong>例二：</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">bool</span> <span class=\"token function\">is_large</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> string<span class=\"token double-colon punctuation\">::</span>size_type sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> sz<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">auto</span> iter <span class=\"token operator\">=</span> <span class=\"token function\">find_if</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> is_large<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">auto</span> iter <span class=\"token operator\">=</span> <span class=\"token function\">find_if</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n\t<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> string<span class=\"token double-colon punctuation\">::</span>size_type sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> sz<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>这段代码看似是返回 vector&lt;string&gt; 中指向第一个长度大于 sz 的元素的迭代器，但是编译起来却会报错，这是因为 find_if 接受的参数是一元谓词，这里的 is_large 却是二元谓词。</p>\n<p>别着急，利用<em>capture list</em>可以解决传入多个参数的问题。</p>\n<h2><a id=\"43capture_list_117\"></a>4.3使用capture list</h2>\n<p>当 lambda 表达式出现在函数中，就可以使用函数中的局部变量，我们需要通过 capture list 指出将会使用的变量。</p>\n<p>这样我们就可以直接使用局部变量 sz，而不用通过传参使用它了：</p>\n<pre><code class=\"prism language-cpp\">string<span class=\"token double-colon punctuation\">::</span>size_type sz <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">auto</span> iter <span class=\"token operator\">=</span> <span class=\"token function\">find_if</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n\t<span class=\"token punctuation\">[</span>sz<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> sz<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<p>🎉到此 lambda 表达式的讲解就结束了，从今天开始更新 C++ 的基础知识，后面应该会讲解一下标准容器，并手动实现。<br/> 希望大家多多关注，三连支持。你们的支持是我源源不断创作的动力。</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-19 10:56:52", "summary": "表达式、可调用对象、谓词、尾置返回类型、表达式无参表达式有参表达式使用作者简介：即将大四的北京某能源高校学生。座右铭：九层之台，起于垒土。所以学习技术须脚踏实地。这里推荐一款刷题、模拟面试神器，可助你"}