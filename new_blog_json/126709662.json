{"blogid": "126709662", "writerAge": "码龄5年", "writerBlogNum": "46", "writerCollect": "25", "writerComment": "3", "writerFan": "5", "writerGrade": "3级", "writerIntegral": "573", "writerName": "协奏曲❤", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126709662.jpg", "writerRankTotal": "31804", "writerRankWeekly": "141651", "writerThumb": "5", "writerVisitNum": "18453", "blog_read_count": "77", "blog_time": "已于 2022-09-05 21:46:27 修改", "blog_title": "Spring-03-AOP面向切面编程", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_0\"></a>代理模式</h2>\n<p>为什么要学习代理模式？因为这个SpringAOP的底层！【SpringAOP 和 SpringMVC】</p>\n<blockquote>\n<p>代理模式的分类：<br/> ···静态代理<br/> ···动态代理</p>\n</blockquote>\n<h3><a id=\"_6\"></a>静态代理</h3>\n<p>角色分析<br/> 抽象角色：一般会使用接口或者抽象类来解决<br/> 真实角色：被代理的角色<br/> 代理角色：代理真实角色，代理真实角色后，一般会做一些附属操作<br/> 客户：访问代理对象的人</p>\n<blockquote>\n<p>代码步骤<br/> 1、接口<br/> 2、真实角色<br/> 3、代理角色<br/> 4、客户端访问代理角色</p>\n</blockquote>\n<p>代理模式的好处：<br/> ···可以使真实角色的操作更加纯粹，不用去关注一些公共的业务<br/> ···公共也就交给代理角色，实现了业务的分工<br/> ···公共业务发生扩展的时候，方便集中管理<br/> 缺点：<br/> ···一个真实角色就会产生一个代理角色；代码量会翻倍，开发效率会变低</p>\n<h3><a id=\"_25\"></a>动态代理</h3>\n<p>动态代理和静态代理角色一样<br/> 动态代理类是动态生成的，不是直接写好的<br/> 动态代理分为两大类，基于接口的动态代理，基于类的动态代理<br/> ···基于接口—JDK代理【这里使用】<br/> ···基于类：chlib<br/> ···java字节码实现：javassist</p>\n<p>需要了解两个类：Proxy：代理、InvocationHandler：调用处理程序</p>\n<h2><a id=\"AOP_35\"></a>AOP</h2>\n<h3><a id=\"AOP_36\"></a>什么是AOP</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f7dc5a2da37a4d8a89daff97adf4a492.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f58f051aa1b047489c835ae6a140c034.png\"/></p>\n<h3><a id=\"AOPSpring_39\"></a>AOP在Spring的作用</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4c5234326706450dae7696eed2a36be3.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3f57261f3700405d8edb2c95b68e4d1e.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\77c2d6f9791d4e99b20296d85dfb75d7.png\"/></p>\n<h3><a id=\"SpringAOP_44\"></a>使用Spring实现AOP</h3>\n<p>【重点】使用AOP，需要导入一个依赖包</p>\n<pre><code class=\"prism language-xml\"> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.aspectj<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>aspectjweaver<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.9.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<blockquote>\n<p>方式一：使用Spring的API接口</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-09-05 21:46:27", "summary": "代理模式为什么要学习代理模式？因为这个的底层！和代理模式的分类：静态代理动态代理静态代理角色分析抽象角色：一般会使用接口或者抽象类来解决真实角色：被代理的角色代理角色：代理真实角色，代理真实角色后，一"}