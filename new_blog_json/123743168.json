{"blogid": "123743168", "writerAge": "码龄1年", "writerBlogNum": "103", "writerCollect": "597", "writerComment": "43", "writerFan": "1278", "writerGrade": "4级", "writerIntegral": "1024", "writerName": "half~", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123743168.jpg", "writerRankTotal": "52621", "writerRankWeekly": "12174", "writerThumb": "89", "writerVisitNum": "100895", "blog_read_count": "1623", "blog_time": "于 2022-03-25 19:10:13 发布", "blog_title": "CTF赛题-[网鼎杯2020青龙组]AreUSerialz", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>CTF赛题-[网鼎杯2020青龙组]AreUSerialz</h3>\n<ul><li><a href=\"#_1\">代码审计</a></li><li><a href=\"#_255\">构造函数</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>代码审计</h1>\n<pre><code class=\"prism language-cpp\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>php\n\n<span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flag.php\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FileHandler</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">protected</span> $op<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> $filename<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> $content<span class=\"token punctuation\">;</span>\n\n    function <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        $op <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n        $filename <span class=\"token operator\">=</span> <span class=\"token string\">\"/tmp/tmpfile\"</span><span class=\"token punctuation\">;</span>\n        $content <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span>\n        $<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> function <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>$<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>op <span class=\"token operator\">==</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            $<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>$<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>op <span class=\"token operator\">==</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            $res <span class=\"token operator\">=</span> $<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            $<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span>$res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            $<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad Hacker!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> function <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isset</span><span class=\"token punctuation\">(</span>$<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>filename<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isset</span><span class=\"token punctuation\">(</span>$<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span>$<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>content<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                $<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Too long!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">die</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            $res <span class=\"token operator\">=</span> <span class=\"token function\">file_put_contents</span><span class=\"token punctuation\">(</span>$<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>filename<span class=\"token punctuation\">,</span> $<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>$res<span class=\"token punctuation\">)</span> $<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Successful!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> $<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            $<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> function <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        $res <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isset</span><span class=\"token punctuation\">(</span>$<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            $res <span class=\"token operator\">=</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span>$<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> $res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> function <span class=\"token function\">output</span><span class=\"token punctuation\">(</span>$s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        echo <span class=\"token string\">\"[Result]: &lt;br&gt;\"</span><span class=\"token punctuation\">;</span>\n        echo $s<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    function <span class=\"token function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>$<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>op <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span>\n            $<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>op <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n        $<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>content <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        $<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\nfunction <span class=\"token function\">is_valid</span><span class=\"token punctuation\">(</span>$s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>$i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> $i <span class=\"token operator\">&lt;</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>$s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> $i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token function\">ord</span><span class=\"token punctuation\">(</span>$s<span class=\"token punctuation\">[</span>$i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">32</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">ord</span><span class=\"token punctuation\">(</span>$s<span class=\"token punctuation\">[</span>$i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">125</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isset</span><span class=\"token punctuation\">(</span>$_GET<span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'str'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    $str <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span>$_GET<span class=\"token punctuation\">[</span><span class=\"token string\">'str'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_valid</span><span class=\"token punctuation\">(</span>$str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        $obj <span class=\"token operator\">=</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span>$str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>FileHandler类实现<br/> protected变量<br/> \\x00 + * + \\x00 + 变量名<br/> 可以用S:5:\"\\00*\\00op\"来代替s:5:\"?*?op\"类文件的读和写</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FileHandler</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">protected</span> $op<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> $filename<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> $content<span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>构造函数：__construct()，PHP 允许开发者在一个类中定义一个方法作为构造函数。具有构造函数的类会在每次创建新对象时先调用此方法，所以非常适合在使用对象之前做一些初始化工作。<br/> 所以该函数只是初始化一下<br/> 进入process()函数</p>\n<pre><code class=\"prism language-cpp\">\n    function <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        $op <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n        $filename <span class=\"token operator\">=</span> <span class=\"token string\">\"/tmp/tmpfile\"</span><span class=\"token punctuation\">;</span>\n        $content <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span>\n        $<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n</code></pre>\n<p>进入process函数后，在process()函数中，如果op==“1”，则进入write函数<br/> 若op==“2”，则进入read函数，并输出res<br/> 否则输出Bad Hacker!<br/> 注意，这里op与字符串的比较是弱类型比较==</p>\n<pre><code class=\"prism language-cpp\"> <span class=\"token keyword\">public</span> function <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>$<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>op <span class=\"token operator\">==</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            $<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>$<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>op <span class=\"token operator\">==</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            $res <span class=\"token operator\">=</span> $<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            $<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span>$res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            $<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad Hacker!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>进入write函数</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">private</span> function <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isset</span><span class=\"token punctuation\">(</span>$<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>filename<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isset</span><span class=\"token punctuation\">(</span>$<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span>$<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>content<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                $<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Too long!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">die</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            $res <span class=\"token operator\">=</span> <span class=\"token function\">file_put_contents</span><span class=\"token punctuation\">(</span>$<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>filename<span class=\"token punctuation\">,</span> $<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>$res<span class=\"token punctuation\">)</span> $<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Successful!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> $<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            $<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>进入read函数</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">private</span> function <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        $res <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isset</span><span class=\"token punctuation\">(</span>$<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            $res <span class=\"token operator\">=</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span>$<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> $res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>如果op===“2”，则op=“1”<br/> content为空<br/> 进入process()函数<br/> 注意，这里是强类型比较</p>\n<pre><code class=\"prism language-cpp\">function <span class=\"token function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>$<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>op <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span>\n            $<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>op <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n        $<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span>content <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        $<span class=\"token keyword\">this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>public，protected，private下序列化对象的区别</p>\n<p>php v7.x反序列化的时候对访问类别不敏感</p>\n<p>public变量<br/> 直接变量名反序列化出来</p>\n<p>protected变量<br/> \\x00 + * + \\x00 + 变量名<br/> 可以用S:5:\"\\00*\\00op\"来代替s:5:\"?*?op\"</p>\n<p>private变量<br/> \\x00 + 类名 + \\x00 + 变量名</p>\n<p>题目中的三个属性都是protected类型的，构造protected类型的序列化字符串会出现以下结果。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5ea69a76f1cd4c0699d60cc1952ceb89.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\87e6e25676c14b799e72672a5cb16f41.png\"/><br/> 构造private类型的序列化字符串会出现以下结果。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d5b5ad315fbb4b7cae6d2269f2cdb5e6.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7ed95331c6f34f9ca73b6b1402a593b7.png\"/></p>\n<p>是因为题目要求传入的字符的ascii值要大于等于32且小于等于125，多了\\x00*\\x00，但\\x00的ascii的值是0，所以不符合要求，同理private会多出一个\\x00同样不符合要求。</p>\n<pre><code class=\"prism language-cpp\">function <span class=\"token function\">is_valid</span><span class=\"token punctuation\">(</span>$s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>$i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> $i <span class=\"token operator\">&lt;</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>$s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> $i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token function\">ord</span><span class=\"token punctuation\">(</span>$s<span class=\"token punctuation\">[</span>$i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">32</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">ord</span><span class=\"token punctuation\">(</span>$s<span class=\"token punctuation\">[</span>$i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">125</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h1><a id=\"_255\"></a>构造函数</h1>\n<p>所以我们用public修饰属性</p>\n<p>content不为空，随意构造</p>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\90bbd4fc6d884124a34a2b284cb077a9.png\"/></p>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\f680ece0a98b4dc49fcfd469ccb49a88.png\"/></p>\n<p>得到flag<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\683ef0462a874a739cc6ff97b9c84308.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\30222323af3b49609cc8e06d021945a2.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 1, "time": "2022-03-25 19:10:13", "summary": "赛题网鼎杯青龙组代码审计构造函数代码审计"}