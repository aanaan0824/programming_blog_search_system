{"blogid": "124635486", "writerAge": "码龄135天", "writerBlogNum": "96", "writerCollect": "374", "writerComment": "12", "writerFan": "2674", "writerGrade": "4级", "writerIntegral": "989", "writerName": "百度测试开发", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124635486.jpg", "writerRankTotal": "18546", "writerRankWeekly": "1833", "writerThumb": "20", "writerVisitNum": "31887", "blog_read_count": "7784", "blog_time": "于 2022-05-07 20:23:14 发布", "blog_title": "全网最牛，JMeter性能测试步骤与结果分析（压力 / 负载测试）详全，精品太干了", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录：导读</h3>\n<ul><li><ul><li><a href=\"#_1\">一、前言</a></li><li><a href=\"#_13\">二、负载、压力、可靠性（非常重要）</a></li><li><a href=\"#_20\">三、压力测试实战</a></li><li><a href=\"#_38\">四、负载测试实战</a></li><li><a href=\"#_56\">五、资源监控</a></li><li><ul><li><a href=\"#1Windows_59\">1、Windows自带的资源监工具</a></li><li><a href=\"#2Jmeter_67\">2、Jmeter里面的第三方监理插件</a></li><li><a href=\"#3Linux_70\">3、Linux资源监控</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"_1\"></a>一、前言</h2>\n<p>1、负载：模拟业务操作对服务器造成压力的过程，比如模拟100个用户进行发帖</p>\n<p>在一定软硬件环境下，通过不断加大负载（不同虚拟用户量）来确定在满足性能指标情况下能够承受的最大用户数</p>\n<p>简单说，可以帮我们对系统进行定容 定量，找出系统性能的拐点，给予生产环境规划建议。这里的性能指标包括TPS （每秒事务数）、RT（事务平均响应时间）、CPU Using（CPU利用率）、Mem Using（内存使用情况）等软硬件指标</p>\n<p>从操作层面来说，负载测试也是一种性 能测试手段，比如下面的配置测试就需要变换不同的负载来进行测试</p>\n<p>2、压力、强度测试：<br/> 在一定软硬件环境下，通过高负载的手段来使服务器资源（强调服务器资源， 硬件资源）处于极限状态，测试系统在极限状态下长时间运行是否稳定，确定是 否稳定的指标包括TPS、RT、CPU Using、Mem Using等</p>\n<h2><a id=\"_13\"></a>二、负载、压力、可靠性（非常重要）</h2>\n<table><thead><tr><th>场景类型</th><th>用户数量（线程数）</th><th>思考时间（固定定时器或高斯随机定时器）</th><th>集合点（同步定时器）</th><th>场景加压（加压时间）</th><th>运行时间（循环次数或配置调度器）</th><th>判定场景成功/失败条件</th></tr></thead><tbody><tr><td>压力（狭义并发）</td><td>50,60, 70, 80…</td><td>禁用</td><td>开启</td><td>一次完成</td><td>一次</td><td>服务是否崩溃</td></tr><tr><td>负载</td><td>50</td><td>开启高斯随机定时器</td><td>关闭</td><td>2-5分钟内完成</td><td>20分钟–2小时<br/>启用调度器</td><td>1.事务通过率<br/> 2.事务时间</td></tr><tr><td>可靠</td><td>10</td><td>开启高斯随机定时器</td><td>关闭</td><td>2-6分钟内完成 启用调度器</td><td>24小时 <br/>36小时 <br/>72小时</td><td>1.内存泄漏(30分钟记录一次内存) <br/>2.服务器是否崩溃</td></tr></tbody></table>\n<h2><a id=\"_20\"></a>三、压力测试实战</h2>\n<p>1、线程组设置，这里的线程数与同步定时器的用户数量一样<br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\aacee6660af343489fc1b12a40afbc63.png\"/><br/> 2、添加HTTP cookie管理器<br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\a160c3e6cb5d4c7fa35c1eaedaa2f3f3.png\"/><br/> 3、默认请求值<br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\f3c012d46eb74bc0971caef26189ef77.png\"/><br/> 4、添加一个事务控制器，可以当作一个业务<img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\4a457a618e0b4ffaba629ad247dfb01e.png\"/><br/> 5、在事务控制器下添加，<strong>同步定时器</strong><br/> 设置用户数量，这里与线程组的线程数一样，超时时间可设置<br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\a9bc406b338749c2824787c1740c3092.png\"/><br/> 6、添加脚本（http请求）<br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\9fc5790fd1fa4741a40a6099bf80ba2f.png\"/><br/> 7、添加查看结果树<img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\1c1a90dc38404b8d93e2712669d064e4.png\"/><br/> 8、添加jp@gc - PerfMon Metrics Collector进行监控CPU、Memory、Disks I/O、Network I/O等。添加处：添加-&gt;监听器<br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\6b010ee893294d92a2dd1f53d0cfe11c.png\"/><br/> 9、在最后添加一个聚合报告，添加处：添加-&gt;监听器<br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\7820873debff4eeb87fc4939a2417d52.png\"/></p>\n<h2><a id=\"_38\"></a>四、负载测试实战</h2>\n<p>1、线程组的<strong>设置50个用户</strong>（持续时间：按秒计算，这里300=60*5，意思就是运行时长为5分钟）<br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\39f2a827a1ce4e9290796f541d3c4962.png\"/><br/> 2、添加HTTP cookie管理器<br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\9045ed42270844e7a6404e5070cacdc2.png\"/><br/> 3、默认请求值<br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\8112223a0d6e48c3a5ed91224b0e2ce7.png\"/><br/> 4、添加一个<strong>事务控制器，可以当作一个业务</strong><br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\27c6f05985864c3199c9fe719a6405ba.png\"/><br/> 5、在事务控制器下添加，<strong>高斯随机定时器</strong><br/> 总的延时 = 固定延迟时间 + 高斯随机生成的偏差值（说明：单位都是毫秒，固定延迟300ms，偏差100ms，意思是时间延迟300-400ms之间）<br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\5b46a411b8944e6f8a4f4eeef33dd20a.png\"/><br/> 6、添加脚本（http请求）<br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\2441f881d6fe4fa2828ea358b089c280.png\"/><br/> 7、添加jp@gc - PerfMon Metrics Collector进行监控CPU、Memory、Disks I/O、Network I/O等。添加处：添加-&gt;监听器<br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\129ef76d4fd94dfe8052e6bd6ddf7190.png\"/><br/> 8、在最后添加一个<strong>聚合报告</strong>，添加处：添加-&gt;监听器<br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\1812504cbf0246df9969b8915b369f0a.png\"/></p>\n<h2><a id=\"_56\"></a>五、资源监控</h2>\n<p><strong>聚合报告、jmeter监控服务器资源</strong></p>\n<h3><a id=\"1Windows_59\"></a>1、Windows自带的资源监工具</h3>\n<p><strong>5个主要指标：</strong><br/> 1.CPU使用率<br/> 2.队列长度<br/> 3.可用内度<br/> 4.硬盘读写时间<br/> 5.网络带宽</p>\n<h3><a id=\"2Jmeter_67\"></a>2、Jmeter里面的第三方监理插件</h3>\n<p>Perfmon插件</p>\n<h3><a id=\"3Linux_70\"></a>3、Linux资源监控</h3>\n<p>1.CPU：top （在命令行输入）<br/> 或</p>\n<pre><code class=\"prism language-powershell\">more <span class=\"token operator\">/</span>proc/cpuinfo\n</code></pre>\n<p>2.内存：</p>\n<pre><code class=\"prism language-powershell\">free <span class=\"token operator\">-</span>m\n</code></pre>\n<p>vmstat 刷新频率<br/> 例如：</p>\n<pre><code class=\"prism language-powershell\">vmstat 15    \n</code></pre>\n<p>（说明：15秒刷新频率）</p>\n<p>3.硬盘大小：</p>\n<pre><code class=\"prism language-powershell\">df <span class=\"token operator\">-</span>m\nfdisk <span class=\"token operator\">-</span>l\n</code></pre>\n<p><strong>注意：</strong><br/> 1.Error错误率<br/> 2.看CPU、内存<br/> 3.看聚合报告里面的请求时间</p>\n<hr/>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\0f4a55526a5d45bcb747374cbd031468.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-05-07 20:23:14", "summary": "目录：导读一、前言二、负载、压力、可靠性非常重要三、压力测试实战四、负载测试实战五、资源监控、自带的资源监工具、里面的第三方监理插件、资源监控一、前言、负载：模拟业务操作对服务器造成压力的过程，比如模"}