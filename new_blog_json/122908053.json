{"blogid": "122908053", "writerAge": "码龄1年", "writerBlogNum": "155", "writerCollect": "126", "writerComment": "30", "writerFan": "412", "writerGrade": "5级", "writerIntegral": "1660", "writerName": "STATICHIT静砸", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122908053.jpg", "writerRankTotal": "11895", "writerRankWeekly": "3809", "writerThumb": "66", "writerVisitNum": "60574", "blog_read_count": "10578", "blog_time": "已于 2022-07-25 14:54:49 修改", "blog_title": "c++ 优先队列(priority_queue)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<blockquote>\n<p>优先队列的本质是堆，但它具有队列的所有操作特性，与普通队列不同的地方就是出队的时候按照优先级顺序出队，这个优先级即最大堆或最小堆的规则（即大的为top优先出队或小的为top优先出队），在队列的基础上加了个堆排序。</p>\n<p>以O(log n) 的效率查找一个队列中的最大值或者最小值，其中是最大值还是最小值是根据创建的优先队列的性质来决定的。</p>\n</blockquote>\n<h1>priority_queue</h1>\n<p>对于这个模板类priority_queue，它是STL所提供的一个非常有效的容器。</p>\n<p>作为队列的一个延伸，<a href=\"https://so.csdn.net/so/search?q=%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97&amp;spm=1001.2101.3001.7020\" title=\"优先队列\">优先队列</a>包含在<strong>头文件 <code>&lt;queue&gt;</code></strong> 中</p>\n<p>C ++中的优先队列是STL中的派生容器，它仅考虑最高优先级元素。队列遵循FIFO策略，而优先队列根据优先级弹出元素，即，优先级最高的元素首先弹出。</p>\n<p>它在某些方面类似于普通队列，但在以下方面有所<strong>不同</strong>：</p>\n<blockquote>\n<ul><li> <p>在优先队列中，队列中的每个元素都与某个优先级相关联，但是优先级在队列数据结构中不存在。</p> </li><li> <p>优先队列中具有最高优先级的元素将被首先删除，而队列遵循<strong>FIFO（先进先出）</strong>策略，这意味着<strong>先</strong>插入的元素将被首先删除。</p> </li><li> <p>如果存在多个具有相同优先级的元素，则将考虑该元素在队列中的顺序。</p> </li></ul>\n</blockquote>\n<p>注意：优先队列是普通队列的扩展版本，但优先级最高的元素将首先从优先队列中删除。</p>\n<blockquote>\n<h3>优先队列的语法</h3>\n<p><strong>priority_queue&lt;Type, Container, Functional&gt; </strong>   </p>\n<p> 其中Type 为数据类型， Container 为保存数据的容器，Functional 为元素比较方式。</p>\n<p><strong> 1.</strong>在STL中，默认情况下（不加后面两个参数）是以vector为容器，以 operator&lt; 为比较方式，所以<strong>在只使用第一个参数时</strong>，优先队列默认是一个最大堆，每次输出的堆顶元素是此时堆中的最大元素。</p>\n<p> <strong>2.</strong>用到最小堆，则一般要把模板的三个参数都带进去。</p>\n<p>STL里面定义了一个仿函数 greater&lt;&gt;，对于基本类型可以用这个仿函数声明最小堆(升序)</p>\n</blockquote>\n<h1>大顶堆与小顶堆</h1>\n<h3><br/> 大顶堆（降序）</h3>\n<blockquote>\n<p>//构造一个空的优先队列（此优先队列默认为大顶堆）<br/> priority_queue&lt;int&gt; big_heap;   </p>\n<p>//另一种构建大顶堆的方法<br/> priority_queue&lt;int,vector&lt;int&gt;,less&lt;int&gt; &gt; big_heap2;   </p>\n</blockquote>\n<h3><br/> 小顶堆（升序）</h3>\n<blockquote>\n<p>//构造一个空的优先队列,此优先队列是一个小顶堆<br/> priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt; &gt; small_heap;   </p>\n</blockquote>\n<blockquote>\n<p>注意事项<br/> 需要注意的是，如果使用<strong>less</strong>和<strong>greater</strong>，需要头文件：</p>\n<p>#include &lt;functional&gt;</p>\n</blockquote>\n<p>我们通过使用push()函数插入元素，并且插入操作与普通队列相同。但是，当我们使用pop()函数从队列中删除元素时，优先级最高的元素将首先被删除。</p>\n<h2>优先队列的成员函数</h2>\n<table><tbody><tr><th>函数</th><th>描述</th></tr><tr><td><strong>push()</strong></td><td>它将新元素插入优先队列。</td></tr><tr><td><strong>pop()</strong></td><td>它将优先级最高的元素从队列中删除。</td></tr><tr><td><strong>top()</strong></td><td>此函数用于寻址优先队列的最顶层元素。</td></tr><tr><td><strong>size()</strong></td><td>返回优先队列的大小。</td></tr><tr><td><strong>empty()</strong></td><td>它验证队列是否为空。基于验证，它返回队列的状态。</td></tr><tr><td><strong>swap()</strong></td><td>它将优先队列的元素与具有相同类型和大小的另一个队列交换。</td></tr><tr><td><strong>emplace()</strong></td><td>它在优先队列的顶部插入一个新元素。</td></tr></tbody></table>\n<p>具体用法：</p>\n<blockquote>\n<p>假设type类型为int，则：</p>\n<ul><li>bool empty() const 返回值为true，说明队列为空；</li><li>int size() const 返回优先队列中元素的数量；</li><li>void pop() 删除队列顶部的元素，也即根节点</li><li>int top() 返回队列中的顶部元素，但不删除该元素；</li><li>void push(int arg) 将元素arg插入到队列之中；</li></ul>\n</blockquote>\n<p></p>\n<p><strong>让我们创建一个简单的优先队列程序。</strong></p>\n<p>示例</p>\n<pre><code>#include &lt;iostream&gt;\n#include&lt;queue&gt;\nusing namespace std;\nint main()\n{\n priority_queue&lt;int&gt; p;  // 变量声明.\n p.push(10); // 插入 10 到队列, top=10\n p.push(30); // 插入 30 到队列, top=30\n p.push(20); // 插入 20 到队列, top=20\n cout&lt;&lt;\"可用元素的数量 到 'p' :\"&lt;&lt;p.size()&lt;&lt;endl;\n while(!p.empty())\n {\n     cout &lt;&lt; p.top() &lt;&lt;endl; \n     p.pop();\n }\n return 0;\n}</code></pre>\n<blockquote>\n<p>注意其中的<strong>priority_queue&lt;int&gt; p; // 变量声明，&lt;&gt;中只有第一个参数，所以是最大堆优先级</strong></p>\n</blockquote>\n<p>在上面的代码中，我们创建了一个优先队列，在其中插入三个元素，即10、30、20。在插入这些元素之后，我们使用while循环显示优先队列的所有元素。</p>\n<p><strong>输出结果</strong></p>\n<pre><code>可用元素的数量 到 'p' :3\n30\n20\n10</code></pre>\n<p><strong>让我们看看优先队列的另一个示例。</strong></p>\n<p>示例</p>\n<pre><code>#include &lt;iostream&gt;\n#include&lt;queue&gt;\nusing namespace std;\nint main()\n{\n   priority_queue&lt;int&gt; p;  //优先队列声明\n   priority_queue&lt;int&gt; q;  //优先队列声明\n   p.push(1); // 插入 '1' 到 p.\n   p.push(2); // 插入 '2' 到 p.\n   p.push(3); // 插入 '3' 到 p.\n   p.push(4); // 插入 '4' 到 p.\n   q.push(5); // 插入 '5' 到 q.\n   q.push(6); // 插入 '6' 到 q.\n   q.push(7); // 插入 '7' 到 q.\n   q.push(8); // 插入 '8' 到 q.\n   p.swap(q);\n   cout &lt;&lt; \"p队列元素是 : \" &lt;&lt;endl;\n   while(!p.empty())\n   {\n      cout &lt;&lt; p.top() &lt;&lt;endl;\n       p.pop();\n   }\n   cout &lt;&lt; \"q优先队列元素是 :\" &lt;&lt;endl;\n    while(!q.empty())\n   {\n     cout &lt;&lt; q.top() &lt;&lt;endl;\n       q.pop();\n   }\n    return 0;\n}</code></pre>\n<p>在上面的代码中，我们声明了两个优先队列，即p和q。我们在“ p”优先队列中插入了四个元素，在“ q”优先队列中插入了四个元素。插入元素之后，我们<strong>使用swap()函数将'p'队列的元素与'q'队列交换。</strong></p>\n<p><strong>输出结果</strong>                                                                                </p>\n<pre><code>p优先队列元素是 :   \n\n8                                                                                                                               \n7                                                                                                                               \n6                                                                                                                               \n5     \n\n\nq优先队列元素是 :      \n\n4                                                                                                                               \n3                                                                                                                               \n2                                                                                                                               \n1                                                                                    </code></pre>\n<ul><li> <pre><strong>如果要按照最小堆优先级</strong></pre> </li></ul>\n<p><strong>priority_queue&lt;Type, Container, Functional&gt; </strong>   </p>\n<p>写入程序中就是<strong>priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; &gt; q;</strong></p>\n<pre><code>#include&lt;bits/stdc++.h&gt; \nusing namespace std;\nint main(){\n    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; &gt; q;\n    for( int i= 0; i&lt; 10; ++i ) \n    {\n\t\tint temp;\n\t\tcin&gt;&gt;temp; \n\t\tq.push(temp);\n\t}\n    while( !q.empty() ){\n        cout &lt;&lt; q.top() &lt;&lt; endl;\n        q.pop();\n    }     \n    getchar();\n    return 0;\n}</code></pre>\n<p>参考资料：<a href=\"https://www.nhooo.com/cpp/priority-queue-in-cpp.html\" title=\"c++ 优先队列(priority_queue) - 基础教程在线\">c++ 优先队列(priority_queue) - 基础教程在线</a></p>\n<p><a href=\"https://www.nhooo.com/cpp/priority-queue-in-cpp.html\" title=\"c++ 优先队列(priority_queue) - 基础教程在线\">c++ 优先队列(priority_queue) - 基础教程在线</a></p>\n</div>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-07-25 14:54:49", "summary": "优先队列的本质是堆，但它具有队列的所有操作特性，与普通队列不同的地方就是出队的时候按照优先级顺序出队，这个优先级即最大堆或最小堆的规则即大的为优先出队或小的为优先出队，在队列的基础上加了个堆排序。以的"}