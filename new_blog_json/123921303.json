{"blogid": "123921303", "writerAge": "码龄3年", "writerBlogNum": "33", "writerCollect": "1506", "writerComment": "1529", "writerFan": "4255", "writerGrade": "6级", "writerIntegral": "4924", "writerName": "寄一片海给你", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123921303.jpg", "writerRankTotal": "14747", "writerRankWeekly": "42965", "writerThumb": "1619", "writerVisitNum": "82110", "blog_read_count": "1577", "blog_time": "已于 2022-04-02 21:56:24 修改", "blog_title": "【C++】STL中stack和queue的模拟实现&&deque讲解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atelier-sulphurpool-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>往期回顾</p>\n<table><thead><tr><th>链接</th><th>内容</th></tr></thead><tbody><tr><td><a href=\"https://blog.csdn.net/weixin_46016019/article/details/123460829?spm=1001.2014.3001.5502\">string模拟实现</a></td><td>STL中string的模拟实现</td></tr><tr><td><a href=\"https://blog.csdn.net/weixin_46016019/article/details/123485624?spm=1001.2014.3001.5502\">vector模拟实现</a></td><td>STL中vector的模实现</td></tr><tr><td>list模拟实现</td><td>list的模拟实现下星期补上来🤨</td></tr></tbody></table>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#stackqueue_8\">🌌stack和queue的认识</a></li><li><a href=\"#stackqueue_14\">🌌stack和queue的底层</a></li><li><a href=\"#deque_55\">🌌deque的原理</a></li><li><a href=\"#deque_73\">🌀deque的优缺点</a></li><li><ul><li><a href=\"#deque_81\">🌀选择deque的原因</a></li></ul>\n</li><li><a href=\"#stackqueue_94\">🌀stack和queue的模拟实现</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"stackqueue_8\"></a>🌌stack和queue的认识</h1>\n<p>stack和queue相必大家并不陌生，那么STL是如何实现的呢？它们俩虽然可以存放元素，但被归列在Container adaptors容器适配器中，先来认识一下什么是适配器<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\88bd65efeca94935a69bea3426bc465c.png\"/></p>\n<blockquote>\n<p><font color=\"#00BFFF\" size=\"3\">适配器是一种设计模式(设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结)，该种模式是将一个类的接口转换成客户希望的另外一个接口。<br/> 简单来说就是将别人的东西贴上自己的标签变成自己的东西（套娃）<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\de035a3f694a45fdb4cf21ddd700f765.png\"/></font></p>\n</blockquote>\n<h1><a id=\"stackqueue_14\"></a>🌌stack和queue的底层</h1>\n<p>既然stack和queue是适配器，那么它们俩的底层就是对其他容器的接口进行封装变为自己的接口。</p>\n<ul><li>stack是后进先出LIFO，尾插尾删list和vector都可以实现</li><li>queue是先进先出FIFO，尾插头删用list更合适</li></ul>\n<p>那么stack的底层是不是这样呢</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">namespace</span> k\n<span class=\"token punctuation\">{<!-- --></span>\t\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">stack</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> <span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\tvector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> _v<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>或是这样，给个缺省参数vector&lt;T&gt;或是list&lt;T&gt;</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">namespace</span> king\n<span class=\"token punctuation\">{<!-- --></span>\t\n\t<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Container</span> <span class=\"token operator\">=</span> vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;&gt;</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">stack</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> <span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\tContainer<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> _con<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>stack的底层确实是这样的，但是缺省参数不是vector也不是list而是<code>deque（双端队列）</code></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Container</span> <span class=\"token operator\">=</span> deque<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> <span class=\"token operator\">&gt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">stack</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h1><a id=\"deque_55\"></a>🌌deque的原理</h1>\n<blockquote>\n<p><font size=\"3\">deque的出现实际上是为了<code>融合list和vector的优点</code>，从而代替它们，显然vector和list并没有被代替</font></p>\n<ul><li><strong><font size=\"3\">vector的优点：支持下标随机访问，尾插尾删效率高，CPU高速缓存命中率高</font></strong></li><li><strong><font size=\"3\"> vector的缺点：不适合头插头删，时间复杂度O(N)，可能存在空间浪费，需要异地扩容时效率低 </font></strong></li><li><strong><font size=\"3\"> list的优点：按需申请空间，不存在空间浪费，任意位置插入删除的时间复杂度O(1)</font></strong></li><li><strong><font size=\"3\">list的缺点：不支持下标随机访问，频繁的申请空间</font></strong></li></ul>\n</blockquote>\n<blockquote>\n<p><font size=\"3\"><code>deque(双端队列)</code>：是一种双开口的<code>\"连续\"</code>空间的数据结构，双开口的含义是：可以在头尾两端进行插入和删除操作，且时间复杂度为O(1)，与vector比较，头插效率高，不需要搬移元素；与list比较，空间利用率比较高，不需要存储额外字段。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\89c48e8a7a404f16a3f10d7a5a2a5977.png\"/></font></p>\n</blockquote>\n<p>但deque并不是真正的连续空间（空间连续了但没完全连续），而是由一段段连续的小空间拼接而成的，实际deque类似于一个动态的二维数组，其底层结构如下图所示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0ca65d5c899441e7b705e7cc887b3d02.png\"/>当然为了能够支持随机访问，deque的iterator迭代器就设计的十分复杂了<br/> deque的迭代器封装了四个指针，first和last用来指向buffer的头尾，cur用来遍历buffer，然后将node指向中控数组对应位置<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\59899129afaf4334bde84ffc61210444.png\"/></p>\n<p>最后还有指向头尾buffer的start和first<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4f046c22bc5c4113bd89bc9c1fb990e1.png\"/></p>\n<h1><a id=\"deque_73\"></a>🌀deque的优缺点</h1>\n<p><code>vector的随机访问</code>和<code>list的任意位置插入删除O(1)的时间复杂度</code>做到了极致，而deque的中间位置的插入删除和随机访问的效率都差强人意，所以deque是无法替代vector和list的</p>\n<blockquote>\n<ul><li><font size=\"3\">与vector相比，deque的优势：头部插入和删除时不需要搬移元素，效率特别高，而且在扩容时，直接开新的buffer，顶多是中控数组需要扩容，也不需要搬移大量的元素因此其效率是必vector高的。</font></li><li><font size=\"3\">与list相比，deque的优势：其底层是连续空间，空间利用率比较高，不需要存储额外字段（prev和next）</font></li></ul>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF8C00\" size=\"3\">但deque有一个致命的缺点：<code>不适合遍历</code>，因为在遍历时，deque的迭代器要频繁的去检测其是否移动到某段小空间的边界，导致效率低下，还不如直接拷贝到vector中再遍历，但是对stack和queue来说恰好是不需要遍历，所以STL将<code>deque用其作为stack和queue的底层数据结构</code></font></p>\n</blockquote>\n<h2><a id=\"deque_81\"></a>🌀选择deque的原因</h2>\n<p>stack是LIFO的结构，因此只需要有push_back和pop_back操作都可以作为stack的结构，如vector和list<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9ddfbf96125f416eb1d7a7408b8791ce.png\"/>queue是FIFO的结构，因此只需要有push_back和pop_front操作都可以作为queue的结构，如list<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a39c86d77d7847ad9eb0571e2afa9099.png\"/><br/> 但为何选择deque呢？</p>\n<blockquote>\n<ul><li><font size=\"3\">stack和queue不需要遍历（没有迭代器），刚好不需要用到deque的缺点，只需要固定的一端（stack）或两端（queue）操作</font></li><li><font size=\"3\">在stack中扩容时，deque比vector的效率高(扩容时不需要搬移大量数据)；queue中扩容时，deque不仅效率高，而且cache命中率高，内存使用率高，不会存在很多内存碎片</font></li></ul>\n</blockquote>\n<p>所以deque虽然没能代替vector和list，但是适合stack和queue使用</p>\n<p>既然是容器适配器，那么实现起来就非常简单了，只需要调用deque的接口就可以了，和调用vector和list的接口类似</p>\n<h1><a id=\"stackqueue_94\"></a>🌀stack和queue的模拟实现</h1>\n<p>插入1 2 3 4后stack和queue的pop顺序<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d422b1fe22ec45ca8f28de69de3eec03.png\"/></p>\n<p>Stack.h</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span>\n<span class=\"token comment\">//#include &lt;vector&gt;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> king\n<span class=\"token punctuation\">{<!-- --></span>\t\n\t<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Container</span><span class=\"token operator\">=</span>deque<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;&gt;</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">stack</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t_con<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t_con<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> <span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _con<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tT<span class=\"token operator\">&amp;</span> <span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _con<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _con<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _con<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\tContainer _con<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">stack_test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//stack的第二的参数默认是deque，但我们也可以用vector</span>\n\t\t<span class=\"token comment\">//不过还是用deque好</span>\n\t\t<span class=\"token comment\">//stack&lt;int, std::vector&lt;int&gt;&gt; st;</span>\n\t\tstack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> st<span class=\"token punctuation\">;</span>\n\t\tst<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tst<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tst<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tst<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"stack-&gt;  \"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\t\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t\t\tst<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>Queue.h</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> king\n<span class=\"token punctuation\">{<!-- --></span>\t\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Container</span><span class=\"token operator\">=</span>deque<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;&gt;</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">queue</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t_con<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t_con<span class=\"token punctuation\">.</span><span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _con<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _con<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> <span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _con<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _con<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t    T<span class=\"token operator\">&amp;</span> <span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _con<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tT<span class=\"token operator\">&amp;</span> <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> _con<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\tContainer _con<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">queue_test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tqueue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> q<span class=\"token punctuation\">;</span>\n\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"queue-&gt;  \"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\t\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Test.cpp</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Stack.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Queue.h\"</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\t\n\tking<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">stack_test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tking<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">queue_test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-04-02 21:56:24", "summary": "往期回顾链接内容模拟实现中的模拟实现模拟实现中的模实现模拟实现的模拟实现下星期补上来文章目录和的认识和的底层的原理的优缺点选择的原因和的模拟实现和的认识和相必大家并不陌生，那么是如何实现的呢？它们俩虽"}