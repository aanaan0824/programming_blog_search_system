{"blogid": "126698759", "writerAge": "码龄4年", "writerBlogNum": "103", "writerCollect": "223", "writerComment": "57", "writerFan": "53", "writerGrade": "4级", "writerIntegral": "1225", "writerName": "play maker", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126698759.jpg", "writerRankTotal": "38481", "writerRankWeekly": "289756", "writerThumb": "56", "writerVisitNum": "96117", "blog_read_count": "112", "blog_time": "已于 2022-09-05 19:50:40 修改", "blog_title": "linux系统只给某个用户安装软件", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p style=\"margin-left:.0001pt;text-align:justify;\">因为经常需要操作线上的服务器，有些命令使用公共的版本可能会遇到一些问题，如服务器python3版本为3.5，调用re库时容易出错，这个问题在3.6版本就修复了。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">因此有必要给当前用户配置一个私用的python环境，下载python库时也只给当前用户下载。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong>方法1：</strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">重新编译代码，从而修改安装路径。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">首先获取源码</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">以下载git为例</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">wget https://www.kernel.org/pub/software/scm/git/git-2.9.4.tar.xz</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">解压源码，进入源码文件夹，执行下面命令，<span style=\"background-color:#ffff00;\">--prefix=$HOME/myapps 制定了安装位置。</span></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">./configure --prefix=$HOME/myapps</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">接下来进行编译安装</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">make</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">make install</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">设置环境变量，并让其生效。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">编辑<span style=\"background-color:#ffff00;\">$HOME/.bashrc</span> ，添加下面一行：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">export<span style=\"background-color:#ffff00;\"> PATH=$HOME/myapps/bin:$PATH</span></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">source ~/.bashrc</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">注意本方法的本质是，<span style=\"background-color:#ffff00;\">拿到一个python可执行包解压好，然后修改当前用户的.bashrc文件，让python命令指向自定义的python可执行文件，而不是系统的python可执行文件。</span></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong>方法2：</strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">那么，就可以通过包管理工具来下载得到可执行程序到特定路径，而不是默认安装到系统的路径下。比如说yum通过--installroot参数，dpkg通过-x参数。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">yum/dnf --installroot=/opt/c-root/ install package-name</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">dpkg -x package-name</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">下面进行实验：</p>\n<h2><strong>方法</strong><strong>1</strong><strong>：</strong><strong>编译安装</strong></h2>\n<p><strong><strong>在ubuntu上使用第一种方法</strong></strong>安装一个独立的python环境。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">注记：由于dpkg安装时使用的deb包需要自己找，而不是直接一条命令行就能下载安装，所以还不如使用这种编译安装的方法。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">到官网下载最新的稳定版本Python-3.10.6.tgz</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">wget <a href=\"https://www.python.org/ftp/python/3.10.6/Python-3.10.6.tgz\" title=\"https://www.python.org/ftp/python/3.10.6/Python-3.10.6.tgz\">https://www.python.org/ftp/python/3.10.6/Python-3.10.6.tgz</a></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">解压后进入目录Python-3.10.6，执行下面命令：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">./configure --prefix=$HOME<span style=\"background-color:#ffff00;\">/my</span><span style=\"background-color:#ffff00;\">Python</span></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">make</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">make install</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">编译完成后得到目录myPython的内容。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"44\" src=\"..\\..\\static\\image\\8269cdb647b0455da215d9dcc449311c.png\" width=\"533\"/></p>\n<p>可以看到，编译完成后，二进制程序都有了。 </p>\n<p><img alt=\"\" height=\"619\" src=\"..\\..\\static\\image\\c1cd76583300479db9e38df20f634353.png\" width=\"1200\"/></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">但是现在直接使用python3命令，还是会使用系统全局的python版本3.6</p>\n<p> <img alt=\"\" height=\"126\" src=\"..\\..\\static\\image\\cb3cb513b8ff403ca08a4b4e8e75939e.png\" width=\"524\"/></p>\n<p>但是可以在bin目录下，直接使用可执行文件来启动编译成功的python3，证明编译没问题。 </p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"72\" src=\"..\\..\\static\\image\\8702f1f044524edb94dd4a6b13adce58.png\" width=\"580\"/></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">设置<span style=\"background-color:#ffff00;\">用户个人的</span>环境变量，并让其生效。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">编辑<span style=\"background-color:#ffff00;\">$HOME/.bashrc</span> ，添加下面一行：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">export<span style=\"background-color:#ffff00;\"> PATH=$HOME/my</span><span style=\"background-color:#ffff00;\">Python</span><span style=\"background-color:#ffff00;\">/bin:$PATH</span></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">source ~/.bashrc</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">注记：是先写<span style=\"background-color:#ffff00;\">$HOME/my</span><span style=\"background-color:#ffff00;\">Python</span><span style=\"background-color:#ffff00;\">/bin</span>，<span style=\"background-color:#ffff00;\">然后再写$PATH，从而覆盖掉原来的python3.</span></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">执行完之后，test用户执行python3命令就是使用python3.10.</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"68\" src=\"..\\..\\static\\image\\0379e6168874445a98c53d8833767139.png\" width=\"536\"/></p>\n<p> 其他用户还是使用的系统全局的python3.6</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"144\" src=\"..\\..\\static\\image\\6018cf3f1852440281dac30b7e839c8a.png\" width=\"477\"/></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<h2><strong>方法</strong><strong>2</strong><strong>：</strong><strong>使用包管理工具（dnf、yum等）</strong></h2>\n<p>下面<strong><strong>使用第二种方法在centos上</strong></strong>安装python</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">因为新装的centos8系统本身就没有python，先给系统全局装一个python。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">dnf search python</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"21\" src=\"..\\..\\static\\image\\cf5c023f155544969d015be18d367ad2.png\" width=\"498\"/></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"23\" src=\"..\\..\\static\\image\\0918d931213448369b07cd11d44fad54.png\" width=\"493\"/></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">执行sudo dnf install python39</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"205\" src=\"..\\..\\static\\image\\f582f9c9f34d4294bbacaf14838509b2.png\" width=\"1200\"/></p>\n<p>可以看到安装成功了。 </p>\n<p><img alt=\"\" height=\"117\" src=\"..\\..\\static\\image\\ac61f69304064c6d8720055fff084da0.png\" width=\"558\"/></p>\n<p><img alt=\"\" height=\"108\" src=\"..\\..\\static\\image\\2bb8a818065f43449157f28354e72d06.png\" width=\"549\"/></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">这样test用户也能使用系统全局的python3.</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"119\" src=\"..\\..\\static\\image\\3be209e68ac042b98349056789ea27b8.png\" width=\"546\"/></p>\n<p></p>\n<p></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">下面开始给test用户设置一个独立的python3.6环境。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">下面这条命令会报错，因为必须使用绝对路径。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">dnf --installroot=~/myPython install python36</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">执行下面这条命令又要求有sudoer权限。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">dnf --installroot=$HOME/myPython install python36</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"171\" src=\"..\\..\\static\\image\\32dd6999f915473b88a8561e70874169.png\" width=\"1200\"/></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">由其他特权用户帮test执行这条命令。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">sudo dnf --installroot=<span style=\"background-color:#ffff00;\">/home/test/myPython</span> install python36</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">执行完可以看到，myPython文件夹下面有内容了。</p>\n<p></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">修改完.bashrc文件后，<span style=\"background-color:#ffff00;\">发现执行python3竟然还是3.9，而不是3.6！</span></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">export<span style=\"background-color:#ffff00;\"> PATH=$HOME/my</span><span style=\"background-color:#ffff00;\">Python</span><span style=\"background-color:#ffff00;\">/bin:$PATH</span></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">source ~/.bashrc</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"105\" src=\"..\\..\\static\\image\\88550edd2e2740689b845d86b638baff.png\" width=\"474\"/></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">排查问题，发现myPython/bin下面的python3指向的是全局的/etc/alternatives/python3</p>\n<p><img alt=\"\" height=\"152\" src=\"..\\..\\static\\image\\1ac365fd557a4afc9679a71c5109c461.png\" width=\"1200\"/></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">而不是当前目录下的python3.6</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">dnf这样做的目的可能是觉得，优先使用系统的python版本，然后<span style=\"background-color:#ffff00;\">也支持使用命令python3.6的方式来调用自定义的python版本。</span></p>\n<p><img alt=\"\" height=\"99\" src=\"..\\..\\static\\image\\cc34eed80a22489789e52180a0a4ece1.png\" width=\"450\"/></p>\n<p></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">当然如果要实现test用户使用python3就执行自定义版本也是可以的，把那个软连接python3改成指向python3.6，而不是系统的版本就行。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">ln -s /home/test/myPython/bin/python3.6 /home/test/myPython/bin/python3</p>\n<p><img alt=\"\" height=\"289\" src=\"..\\..\\static\\image\\669ee1b51d154047a002cc1a3be24bc2.png\" width=\"1200\"/> <span style=\"background-color:#ffff00;\">接下来test用户执行python3，调用的就是3.6的版本了！</span></p>\n<p> <img alt=\"\" height=\"98\" src=\"..\\..\\static\\image\\6baf80582f0642168c615b1db5ccfb0e.png\" width=\"435\"/></p>\n<p></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n</div>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-05 19:50:40", "summary": "因为经常需要操作线上的服务器，有些命令使用公共的版本可能会遇到一些问题，如服务器版本为，调用库时容易出错，这个问题在版本就修复了。因此有必要给当前用户配置一个私用的环境，下载库时也只给当前用户下载。方"}