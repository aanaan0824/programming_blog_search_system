{"blogid": "126565768", "writerAge": "码龄3年", "writerBlogNum": "179", "writerCollect": "1665", "writerComment": "1592", "writerFan": "2524", "writerGrade": "6级", "writerIntegral": "4728", "writerName": "前端杂货铺", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126565768.jpg", "writerRankTotal": "3710", "writerRankWeekly": "50", "writerThumb": "1079", "writerVisitNum": "94713", "blog_read_count": "1075", "blog_time": "已于 2022-08-31 16:50:45 修改", "blog_title": "web前端面试高频考点——Vue原理（diff算法、模板编译、组件渲染和更新、JS实现路由）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"_0\"></a>系列文章目录</h1>\n<table><thead><tr><th>内容</th><th>参考链接</th></tr></thead><tbody><tr><td>Vue基本使用</td><td><a href=\"https://blog.csdn.net/qq_45902692/article/details/126415651?spm=1001.2014.3001.5501\">Vue的基本使用（一文掌握Vue最基础的知识点）</a></td></tr><tr><td>Vue通信和高级特性</td><td><a href=\"https://blog.csdn.net/qq_45902692/article/details/126453192?spm=1001.2014.3001.5501\">Vue组件间的通信及高级特性（多种组件间的通信、自定义v-model、nextTick、插槽）</a></td></tr><tr><td>Vue高级特性</td><td><a href=\"https://blog.csdn.net/qq_45902692/article/details/126478821?spm=1001.2014.3001.5501\">Vue的高级特性（动态组件、异步加载、keep-alive、mixin、Vuex、Vue-Router）</a></td></tr><tr><td>Vue原理1</td><td><a href=\"https://blog.csdn.net/qq_45902692/article/details/126516912?spm=1001.2014.3001.5501\">Vue原理（理解MVVM模型、深度/监听data变化、监听数组变化、深入了解虚拟DOM）</a></td></tr><tr><td>Vue原理2</td><td><a href=\"https://blog.csdn.net/qq_45902692/article/details/126565768?spm=1001.2014.3001.5501\">Vue原理（diff算法、模板编译、组件渲染和更新、JS实现路由）</a></td></tr><tr><td>Vue面试题</td><td><a href=\"https://blog.csdn.net/qq_45902692/article/details/126588149?spm=1001.2014.3001.5502\">web前端面试高频考点——Vue面试题</a></td></tr></tbody></table>\n<hr/>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_0\">系列文章目录</a></li><li><ul><li><a href=\"#_DOM__diff__16\">一、虚拟 DOM - diff 算法概述</a></li><li><a href=\"#_43\">二、模板编译</a></li><li><ul><li><a href=\"#1__with__44\">1、模板编译 - with 语法</a></li><li><a href=\"#2vue_81\">2、vue模板被编译成什么</a></li><li><a href=\"#3vue__render__template_187\">3、vue 组件中使用 render 代替 template</a></li><li><a href=\"#4___214\">4、总结组件 渲染/更新 过程</a></li></ul>\n</li><li><a href=\"#vue_229\">三、vue组件是如何渲染和更新的</a></li><li><ul><li><a href=\"#1_230\">1、初次渲染过程</a></li><li><a href=\"#2_render__getter_234\">2、执行 render 函数会触发 getter</a></li><li><a href=\"#3_249\">3、更新过程</a></li><li><a href=\"#4vue_255\">4、vue组件如何进行异步渲染</a></li></ul>\n</li><li><a href=\"#_JS__hash__260\">四、如何用 JS 实现 hash 路由</a></li><li><ul><li><a href=\"#1_url__263\">1、网页 url 组成部分</a></li><li><a href=\"#2hash__276\">2、hash 的特点</a></li><li><a href=\"#3hash__281\">3、hash 变化示例</a></li></ul>\n</li><li><a href=\"#_JS__H5_history__312\">五、如何用 JS 实现 H5 history 路由</a></li><li><ul><li><a href=\"#1_316\">1、示例</a></li><li><a href=\"#2_350\">2、如何选择</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<hr/>\n<h2><a id=\"_DOM__diff__16\"></a>一、虚拟 DOM - diff 算法概述</h2>\n<p><a href=\"https://juejin.cn/post/6994959998283907102\">diff 算法参考链接</a></p>\n<ul><li>diff 算法是 vdom 中最核心、最关键的部分</li><li>diff 算法能在日常使用 vue react 中体现出来（如 key）</li></ul>\n<p><strong>diff 算法概述：</strong></p>\n<ul><li>diff 即对比，是一个广泛的概念，如 linux diff 命令，git diff 命令</li><li>两个 js 对象也可以做 diff</li><li>两棵树做 diff，如这里的 vdom diff</li></ul>\n<p>出处：https://coding.imooc.com/lesson/419.html#mid=33875</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d35b5500f62245b9b3a03e6b515ebd64.png\"/><br/> <strong>树 diff 的时间复杂度 O（n^3）</strong></p>\n<ul><li>第一，遍历 tree1</li><li>第二，遍历 tree2</li><li>第三，排序</li><li>100个节点，要计算100万次，算法不可用</li></ul>\n<p><strong>优化时间复杂度到O（n）</strong></p>\n<ul><li>只比较同一层级，不跨级比较</li><li>tag 不相同，则直接删掉重建，不再深度比较</li><li>tag 和 key，两者都相同，则认为是相同节点，不再深度比较</li></ul>\n<p>出处：https://coding.imooc.com/lesson/419.html#mid=33875<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\00881dba54bc4d428641a178a9b8bf21.png\"/></p>\n<h2><a id=\"_43\"></a>二、模板编译</h2>\n<h3><a id=\"1__with__44\"></a>1、模板编译 - with 语法</h3>\n<ul><li>模板是 vue 开发中最常用的部分，即与使用相关联的原理</li><li>它不是 html，有指令、插值、JS表达式，到底是什么？</li></ul>\n<p><strong>模板编译：</strong></p>\n<ul><li>前置知识：JS 的 with 语法</li><li>vue template complier 将模板编译为 render 函数</li><li>执行 render 函数生成 vnode</li></ul>\n<p><strong>with 语法：</strong></p>\n<ul><li>改变 {} 内自由变量的查找规则，当作 obj 属性来查找</li><li>如果找不到匹配的 obj 属性，就会报错</li><li>with 要慎用，它打破了作用域规则，易读性差</li></ul>\n<p>示例：不使用 with，对象里没有定义的属性为 undefined</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 100</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 200</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\n</code></pre>\n<p>使用 with，对象里没有定义的属性会报错</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 使用 with，能改变 {} 内自由变量的查找方式</span>\n<span class=\"token comment\">// 将 {} 内自由变量，当作 obj 的属性来查找</span>\n<span class=\"token keyword\">with</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 100</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 200</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Uncaught ReferenceError: c is not defined</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"2vue_81\"></a>2、vue模板被编译成什么</h3>\n<p><strong>模板编译：</strong></p>\n<ul><li>模板不是 html，有指令、插值、JS 表达式，能实现判断、循环</li><li>html 是标签语言，只有 JS 才能实现判断、循环</li><li>因此，模板一定是转换为某种 JS 代码，即模板编译</li></ul>\n<p><strong>示例：</strong></p>\n<p>（1）安装 <mark>vue-template-compiler</mark></p>\n<pre><code class=\"prism language-javascript\">npm i vue<span class=\"token operator\">-</span>template<span class=\"token operator\">-</span>compiler <span class=\"token operator\">--</span>save\n</code></pre>\n<p>（2）创建 index.js 文件</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> compiler <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'vue-template-compiler'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n\n<span class=\"token comment\">// 编译</span>\n<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> compiler<span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>（3）演示（以下演示均在 index.js 文件的 … 中）</p>\n<p><mark>插值：</mark></p>\n<ul><li>打印结果即：创建一个 p 标签，子元素是 TextVNode，为一个字符串</li><li>_c：createElement，创建元素</li><li>_v：createTextVNode，创建文本节点</li><li>_s：toString，转为字符串类型</li><li>this：const vm = new Vue({…})，即 vm 实例</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 插值</span>\n<span class=\"token keyword\">const</span> template <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;p&gt;{<!-- -->{message}}&lt;/p&gt;</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token comment\">// with(this){return _c('p',['p',[_v(_s(message))]])}</span>\n<span class=\"token comment\">// h -&gt; vnode</span>\n<span class=\"token comment\">// createElement -&gt; vnode</span>\n</code></pre>\n<p><mark>表达式：</mark></p>\n<ul><li>template 里面的表达式就是被当成 JS 代码执行</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 表达式</span>\n<span class=\"token keyword\">const</span> template <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;p&gt;{<!-- -->{flag ? message : 'no message found'}}&lt;/p&gt;</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token comment\">//with(this){return _c('p',[_v(_s(flag ? message : 'no message found'))])}</span>\n</code></pre>\n<p><mark>属性和动态属性：</mark></p>\n<ul><li>container，div1 是静态字符串，所以编译后需要用引号包裹</li><li>imgUrl 是动态属性，是个变量，所以编译后不用引号包裹</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 属性和动态属性</span>\n<span class=\"token keyword\">const</span> template <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n     &lt;div id=\"div1\" class=\"container\"&gt;\n         &lt;img :src=\"imgUrl\"/&gt;\n     &lt;/div&gt;\n </span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token comment\">// with(this){return _c('div',</span>\n<span class=\"token comment\">//      {staticClass:\"container\",attrs:{\"id\":\"div1\"}},</span>\n<span class=\"token comment\">//      [_c('img',{attrs:{\"src\":imgUrl}})]</span>\n<span class=\"token comment\">// )}</span>\n</code></pre>\n<p><mark>条件：</mark></p>\n<ul><li>转换成一个三元表达式</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 条件</span>\n<span class=\"token keyword\">const</span> template <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;div&gt;\n        &lt;p v-if=\"flag === 'a'\"&gt;A&lt;/p&gt;\n        &lt;p v-else&gt;B&lt;/p&gt;\n    &lt;/div&gt;\n</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token comment\">// with(this){return _c('div',[(flag === 'a')?_c('p',[_v(\"A\")]):_c('p',[_v(\"B\")])])}</span>\n</code></pre>\n<p><mark>循环：</mark></p>\n<ul><li>_l：renderList，渲染列表</li><li>第二个 return，返回的第一个参数是 tag，第二个参数是属性，第三个参数是子元素</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 循环</span>\n<span class=\"token keyword\">const</span> template <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;ul&gt;\n        &lt;li v-for=\"item in list\" :key=\"item.id\"&gt;{<!-- -->{item.title}}&lt;/li&gt;\n    &lt;/ul&gt;\n</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token comment\">// with(this){return _c('ul',_l((list),function(item){return _c('li',{key:item.id},[_v(_s(item.title))])}),0)}</span>\n</code></pre>\n<p><mark>事件：</mark></p>\n<ul><li>on 里面是事件，函数的名字是变量，没有引号包裹</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 事件</span>\n<span class=\"token keyword\">const</span> template <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;button @click=\"clickHandler\"&gt;submit&lt;/button&gt;\n</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token comment\">// with(this){return _c('button',{on:{\"click\":clickHandler}},[_v(\"submit\")])}</span>\n</code></pre>\n<p><mark>v-model：</mark></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// v-model</span>\n<span class=\"token keyword\">const</span> template <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;input type=\"text\" v-model=\"name\"&gt;</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token comment\">// 主要看 input 事件</span>\n<span class=\"token comment\">// with(this){return _c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(name),expression:\"name\"}],attrs:{\"type\":\"text\"},domProps:{\"value\":(name)},on:{\"input\":function($event){if($event.target.composing)return;name=$event.target.value}}})}</span>\n</code></pre>\n<p><strong>编译模板：</strong></p>\n<ul><li>模板编译为 render 函数，执行 render 函数返回 vnode</li><li>基于 vnode 再执行 patch 和 diff</li><li>使用 webpack vue-loader，会在开发环境下编译模板</li></ul>\n<h3><a id=\"3vue__render__template_187\"></a>3、vue 组件中使用 render 代替 template</h3>\n<ul><li>有些复杂情况中，不能用 template，可以考虑用 render</li><li>react 一直都用 render（没有模板）</li></ul>\n<pre><code class=\"prism language-javascript\">Vue<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">'heading'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// template: `xxx`,</span>\n    <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">createElement</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">'h'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>level<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span>\n                <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token literal-property property\">attrs</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'headerId'</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token literal-property property\">href</span><span class=\"token operator\">:</span> <span class=\"token string\">'#'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'headerId'</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'this is a tag'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>总结：</strong></p>\n<ul><li>with 语法</li><li>模板到 render 函数，再到 vnode，再到渲染和更新</li><li>vue 组件可以用 render 代替 template</li></ul>\n<h3><a id=\"4___214\"></a>4、总结组件 渲染/更新 过程</h3>\n<ul><li>一个组件渲染到页面，修改 data 触发更新（数据驱动视图）</li><li>其背后原理是什么，需要掌握哪些要点？</li><li>考察对流程了解的全面程度</li></ul>\n<p><strong>三大知识点：</strong></p>\n<ul><li>响应式：监听 data 属性 getter setter</li><li>模板编译：模板到 render 函数，再到 vnode</li><li>vdom：patch(elem,vnode) 和 patch(vnode, newVnode)</li></ul>\n<p><strong>三个过程：</strong></p>\n<ul><li>初次渲染过程</li><li>更新过程</li><li>异步渲染</li></ul>\n<h2><a id=\"vue_229\"></a>三、vue组件是如何渲染和更新的</h2>\n<h3><a id=\"1_230\"></a>1、初次渲染过程</h3>\n<ul><li>解析模板为 render 函数（或在开发环境已完成，vue-loader）</li><li>触发响应式，监听 data 属性 getter setter</li><li>执行 render 函数，生成 vnode，patch(elem, vnode)</li></ul>\n<h3><a id=\"2_render__getter_234\"></a>2、执行 render 函数会触发 getter</h3>\n<ul><li>模板中使用到的会触发 get</li><li>模板中没有使用到的不会触发 get，因为和视图没有关系</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span>message<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'杂货铺'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 会触发 get</span>\n      <span class=\"token literal-property property\">city</span><span class=\"token operator\">:</span> <span class=\"token string\">'北京'</span> <span class=\"token comment\">// 不会触发 get，因为模板没用到，即和视图没关系</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"3_249\"></a>3、更新过程</h3>\n<ul><li>修改 data，触发 setter（此前在 getter 中已被监听）</li><li>重新执行 render 函数，生成 newVnode</li><li>patch(vnode, newVnode)</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2558b92fa9fa44c786f2592f92bd5b5b.png\"/></p>\n<h3><a id=\"4vue_255\"></a>4、vue组件如何进行异步渲染</h3>\n<ul><li>$nextTick 是异步的</li><li>汇总 data 的修改，一次性更新视图</li><li>减少 DOM 操作次数，提高性能</li></ul>\n<h2><a id=\"_JS__hash__260\"></a>四、如何用 JS 实现 hash 路由</h2>\n<ul><li>vue-router 的路由模式：hash模式，H5 history</li></ul>\n<h3><a id=\"1_url__263\"></a>1、网页 url 组成部分</h3>\n<pre><code class=\"prism language-javascript\"><span class=\"token literal-property property\">http</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">8881</span><span class=\"token operator\">/</span><span class=\"token number\">01</span><span class=\"token operator\">-</span>hash<span class=\"token punctuation\">.</span>html<span class=\"token operator\">?</span>a<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token operator\">&amp;</span>b<span class=\"token operator\">=</span><span class=\"token number\">20</span>#<span class=\"token operator\">/</span>aaa<span class=\"token operator\">/</span>bbb\n\nlocation<span class=\"token punctuation\">.</span>protocol <span class=\"token comment\">// 'http:' 【协议】</span>\nlocation<span class=\"token punctuation\">.</span>hostname <span class=\"token comment\">// '127.0.0.1' 【IP地址/域名】</span>\nlocation<span class=\"token punctuation\">.</span>host <span class=\"token comment\">// '127.0.0.1:8881' 【IP地址带端口】</span>\nlocation<span class=\"token punctuation\">.</span>port <span class=\"token comment\">// '8881' 【端口】</span>\nlocation<span class=\"token punctuation\">.</span>pathname <span class=\"token comment\">// '/01-hash.html' 【文件路径名】</span>\nlocation<span class=\"token punctuation\">.</span>search <span class=\"token comment\">// '?a=100&amp;b=20' 【参数】</span>\nlocation<span class=\"token punctuation\">.</span>hash <span class=\"token comment\">// '#/aaa/bbb' 【#及后面的部分】</span>\n</code></pre>\n<h3><a id=\"2hash__276\"></a>2、hash 的特点</h3>\n<ul><li>hash 变化会触发网页跳转，即浏览器的前进、后退</li><li>hash 变化不会刷新页面，SPA 必需的特点</li><li>hash 永远不会提交到 server 端（前端自生自灭）</li></ul>\n<h3><a id=\"3hash__281\"></a>3、hash 变化示例</h3>\n<ul><li>onhashchange：用来监听 hash 值的变化</li><li>href 属性是一个可读可写的字符串，可设置或返回当前显示的文档的完整 URL</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span>hash test<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>button id<span class=\"token operator\">=</span><span class=\"token string\">\"btn1\"</span><span class=\"token operator\">&gt;</span>修改 hash<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n\n<span class=\"token comment\">// hash 变化，包括</span>\n<span class=\"token comment\">// a. JS 修改 url</span>\n<span class=\"token comment\">// b. 手动修改 url 的 hash</span>\n<span class=\"token comment\">// c. 浏览器前进、后退</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onhashchange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'old url'</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>oldURL<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new url'</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>newURL<span class=\"token punctuation\">)</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hash'</span><span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 页面初次加载，获取 hash</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DOMContentLoaded'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hash:'</span><span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// JS 修改 url</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'btn1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">'#/user'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9ff3aa26237e41588b85e4e06192f341.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bdd0614b44aa4be4a555fcbaef3c2cdb.png\"/></p>\n<h2><a id=\"_JS__H5_history__312\"></a>五、如何用 JS 实现 H5 history 路由</h2>\n<ul><li>用 url 规范的路由，但跳转时不刷新页面</li><li>history.pushState</li><li>window.onpopstate</li></ul>\n<h3><a id=\"1_316\"></a>1、示例</h3>\n<ul><li>history.pushState(state,title,url)</li><li>state：一个与指定网址相关的状态对象，popstate 事件触发时，该对象会传入回调函数。如果不需要这个对象，此处可以填null</li><li>title：新页面的标题，但是所有浏览器目前都忽略这个值，因此这里可以填null</li><li>url：新的网址，必须与当前页面处在同一个域。浏览器的地址栏将显示这个网址</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span>history <span class=\"token constant\">API</span> test<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>button id<span class=\"token operator\">=</span><span class=\"token string\">\"btn1\"</span><span class=\"token operator\">&gt;</span>修改 url<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n\n<span class=\"token comment\">// 页面初次加载，获取 path</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DOMContentLoaded'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'load'</span><span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 打开一个新的路由</span>\n<span class=\"token comment\">// 【注意】用 pushState 方式，浏览器不会刷新页面</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'btn1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'page1'</span><span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'切换路由到'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'page1'</span><span class=\"token punctuation\">)</span>\n    history<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'page1'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 监听浏览器前进、后退‘</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onpopstate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'onpopstate'</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3c991522bfab40078c9d2da8c68e033f.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\07fab7ca1296411f9dc9b8657858bbe6.png\"/></p>\n<h3><a id=\"2_350\"></a>2、如何选择</h3>\n<ul><li>to B（面向企业或特定用户群体） 的系统推荐用 hash，简单易用，对 url 规范不敏感</li><li>to C（面向个体消费者）的系统，可以考虑选择 H5 history，但需要服务端支持</li><li>能选择简单的，就不要用复杂的，要考虑成本和利益</li></ul>\n<p><code>不积跬步无以至千里，不积小流无以成江海</code></p>\n<p><mark>点个关注不迷路，持续更新中…</mark></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-08-31 16:50:45", "summary": "系列文章目录内容参考链接基本使用的基本使用一文掌握最基础的知识点通信和高级特性组件间的通信及高级特性多种组件间的通信、自定义、、插槽高级特性的高级特性动态组件、异步加载、、、、原理原理理解模型、深度监"}