{"blogid": "125055526", "writerAge": "码龄14年", "writerBlogNum": "634", "writerCollect": "2509", "writerComment": "212", "writerFan": "387", "writerGrade": "7级", "writerIntegral": "11649", "writerName": "wohu1104", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125055526.jpg", "writerRankTotal": "1130", "writerRankWeekly": "4377", "writerThumb": "591", "writerVisitNum": "800588", "blog_read_count": "140", "blog_time": "于 2022-08-31 22:48:35 发布", "blog_title": "Python 标准库之 fileinput 和 文件迭代器", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night-eighties\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"1__fileinput__0\"></a>1. 使用 fileinput 进行迭代</h1>\n<p><code>fileinput</code> 模块可以对一个或多个文件中的内容进行迭代、遍历等操作。该模块的 <code>input()</code> 函数有点类似文件 <code>readlines</code> 函数，但区别明显：</p>\n<ul><li><code>readlines</code> 是一次性读取文件中的全部内容，如果文件较大的话，会占用大量内存；</li><li><code>input</code> 返回的则是一个迭代对象，结合 <code>for</code> 循环使用，典型用法如下：</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> fileinput\n\n<span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> fileinput<span class=\"token punctuation\">.</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    process<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>实例</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> fileinput\n\n<span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> fileinput<span class=\"token punctuation\">.</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/Users/data.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>注意，<code>input</code> 函数有多个参数：分别设置读取文件路径、读写模式、编码方式、缓冲区大小、备份文件扩展名等。</p>\n<p>此外，<code>fileinput</code> 模块还有很多常用的函数，这里介绍几个最常用的。</p>\n<p>函数名 说明</p>\n<ul><li><code>fileinput.input()</code> 返回能够用于 <code>for</code> 循环遍历的对象</li><li><code>fileinput.filename()</code> 返回当前文件的名称</li><li><code>fileinput.lineno()</code> 返回当前已经读取的行的数量（或者序号）</li><li><code>fileinput.filelineno()</code> 回当前读取的行的行号</li><li><code>fileinput.isfirstline()</code> 检查当前行是否是文件的第一行</li><li><code>fileinput.isstdin()</code> 判断最后一行是否从 <code>stdin</code> 中读取</li><li><code>fileinput.close()</code> 关闭队列</li></ul>\n<h1><a id=\"2__30\"></a>2. 文件迭代器</h1>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#打开文件，一次写入多行内容</span>\nf <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/Users/data.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span>\ncontent <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'append information1\\n'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'append information2'</span><span class=\"token punctuation\">]</span>\nf<span class=\"token punctuation\">.</span>writelines<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span>\nf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#打开文件，通过文件迭代器遍历文件</span>\nf <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/Users/data.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'content:'</span><span class=\"token punctuation\">,</span>line<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 或者 将读取内容转化为字符串列表 效果类似 readlines</span>\nlines <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#关闭文件</span>\nf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>执行结果（省略空行）：</p>\n<pre><code class=\"prism language-shell\">content: append information1\ncontent: append information2\n</code></pre>\n<h1><a id=\"3__setdefault__55\"></a>3. 字典的 setdefault 方法使用举例</h1>\n<p>如果仅当字典中不存在某个键值对时，才插入到字典中；如果存在，不必插入(也就不会修改键值对)。</p>\n<p>这种场景，使用字典自带方法 <code>setdefault</code> :</p>\n<pre><code class=\"prism language-python\">In <span class=\"token punctuation\">[</span><span class=\"token number\">35</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> d <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">36</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> r <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>setdefault<span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># r: 3</span>\n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">37</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> r\nOut<span class=\"token punctuation\">[</span><span class=\"token number\">37</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">38</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> d\nOut<span class=\"token punctuation\">[</span><span class=\"token number\">38</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\n\n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">39</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> r <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>setdefault<span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># r:3，已经存在'c':3的键值对，所以setdefault时d无改变</span>\n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> r\nOut<span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">41</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> d\nOut<span class=\"token punctuation\">[</span><span class=\"token number\">41</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-31 22:48:35", "summary": "使用进行迭代模块可以对一个或多个文件中的内容进行迭代、遍历等操作。该模块的函数有点类似文件函数，但区别明显：是一次性读取文件中的全部内容，如果文件较大的话，会占用大量内存；返回的则是一个迭代对象，结合"}