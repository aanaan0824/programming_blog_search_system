{"blogid": "122190636", "writerAge": "码龄6年", "writerBlogNum": "107", "writerCollect": "105", "writerComment": "14", "writerFan": "217", "writerGrade": "5级", "writerIntegral": "1699", "writerName": "Ijiran", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122190636.jpg", "writerRankTotal": "48290", "writerRankWeekly": "160477", "writerThumb": "46", "writerVisitNum": "153158", "blog_read_count": "4834", "blog_time": "于 2021-11-01 00:01:26 发布", "blog_title": "RedisTemplate中的execute方法如何使用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<div style=\"font-size: 16px;\">\n<hr/>\n<h2>theme: vue-pro</h2>\n<p>这是我参与11月更文挑战的第1天，活动详情查看：<a href=\"https://juejin.cn/post/7023643374569816095/\" title=\"https://juejin.cn/post/7023643374569816095/\">2021最后一次更文挑战</a></p>\n<h3>温故才能知新(复习一下)</h3>\n<p>上篇文章我们学习了RedisTemplate中的execute的概念，理解了execute的概念。</p>\n<p>execute提供了基础的操作Redis方法的实现，为其他特定数据类型操作方法提供了基础方法的实现。</p>\n<p>今天我们是要来学习一下RedisTemplate中的execute方法具体使用方法，并且提供出相应的代码实现，一起来学习吧。</p>\n<h3>如何正确使用execute方法</h3>\n<h4>execute(RedisCallback\\\n  \n    action)\n  </h4>\n<p><code> public &lt;T&gt; T execute(RedisCallback&lt;T&gt; action) </code></p>\n<p>此方法需要传入的参数时一个RedisCallback对象实例，实际是一个Redis连接成功的回调方法，一般都是以下方式去调用的。</p>\n<p>通过Redis的链接来操作Redis数据库中的键值。</p>\n<p>代码使用：</p>\n<p><code> redisTemplate.execute((connection) -&gt; { return connection.del(new byte[][]{\"redis-key\"}); }); </code></p>\n<h4>execute(RedisCallback\\\n  \n    action, boolean exposeConnection)\n  </h4>\n<p><code> public &lt;T&gt; T execute(RedisCallback&lt;T&gt; action, boolean exposeConnection) </code></p>\n<p>大家可以看得出来，这个方法同上面的方法，只是多了一个exposeConnection的布尔类型参数，那么这个参数是干什么的？有什么作用呢？</p>\n<p>exposeConnection参数的含义是是否要暴露connection，如果为true，那么就可以在回调函数中使用当前连接connection对象。</p>\n<p>代码使用：</p>\n<p><code> redisTemplate.execute((connection) -&gt; { return connection.del(new byte[][]{\"redis-key\"}); }, true); </code></p>\n<h4>execute(RedisCallback\\\n  \n    action, boolean exposeConnection, boolean pipeline)\n  </h4>\n<p><code> public &lt;T&gt; T execute(RedisCallback&lt;T&gt; action, boolean exposeConnection, boolean pipeline) </code></p>\n<p>如果你看了这几个方法的源码，你就会发现，前面三个execute方法的核心其实就是这个，因为前两个方法依然会调用这个方法，只不过多了两个参数值而已。</p>\n<p>exposeConnection我们已经说过了，pipeline的含义则是是否开启管道，管道是可以承载一定数据的链路。</p>\n<p>代码使用：</p>\n<p><code> redisTemplate.execute((connection) -&gt; { return connection.del(new byte[][]{\"redis-key\"}); }, true, false); </code></p>\n<h4>execute(SessionCallback\\\n  \n    session)\n  </h4>\n<p><code> public &lt;T&gt; T execute(SessionCallback&lt;T&gt; session) </code></p>\n<p>这个方法有所不同，因为参数和前三个参数不一样了，之前的回调函数是RedisCallback，这个方法的回调是SessionCallback回调对象。</p>\n<p>是可以传入SessionCallback回调对象的方法。</p>\n<h3>注意</h3>\n<p>这里要注意一点，虽然execute方法是底层方法，但是并不代表一定要用，我们在日常开发中其实最好还是使用基于execute方法封装的一些特定数据类型的操作Redis方法，因为execute方法使用起来并没有其他的方法简单，反而更容易出错。</p>\n<h3>小结</h3>\n<p>今天学习了RedisTemplate的execute相关的几个重载方法是如何使用的，不知道大家有什么样的心得呢？</p>\n</div>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-11-01 00:01:26", "summary": "这是我参与月更文挑战的第天，活动详情查看：最后一次更文挑战温故才能知新复习一下上篇文章我们学习了中的的概念，理解了的概念。提供了基础的操作方法的实现，为其他特定数据类型操作方法提供了基础方法的实现。今"}