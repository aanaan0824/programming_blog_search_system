{"blogid": "126591571", "writerAge": "码龄2年", "writerBlogNum": "60", "writerCollect": "1848", "writerComment": "2531", "writerFan": "2339", "writerGrade": "6级", "writerIntegral": "6550", "writerName": "头发没有代码多", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126591571.jpg", "writerRankTotal": "2533", "writerRankWeekly": "93", "writerThumb": "2283", "writerVisitNum": "45533", "blog_read_count": "425", "blog_time": "已于 2022-09-03 10:38:21 修改", "blog_title": "C++——类和对象3|日期类型|Cout运算符重载|Cin运算符重载|const成员|", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E6%97%A5%E6%9C%9F%E7%B1%BB%E5%9E%8B%C2%A0-toc\" style=\"margin-left:0px;\"><a href=\"#%E6%97%A5%E6%9C%9F%E7%B1%BB%E5%9E%8B%C2%A0\">日期类型 </a></p>\n<p id=\"Date.h%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#Date.h%C2%A0\">Date.h </a></p>\n<p id=\"Date.cpp%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#Date.cpp%C2%A0\">Date.cpp </a></p>\n<p id=\"Test.cpp%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#Test.cpp%C2%A0\">Test.cpp </a></p>\n<p id=\"%E5%AE%9E%E7%8E%B0Cout%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD%C2%A0-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%AE%9E%E7%8E%B0Cout%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD%C2%A0\">实现Cout运算符重载 </a></p>\n<p id=\"%E5%AE%9E%E7%8E%B0Cin%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD%C2%A0-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%AE%9E%E7%8E%B0Cin%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD%C2%A0\">实现Cin运算符重载 </a></p>\n<p id=\"%E6%A0%B9%E6%8D%AE%E6%97%A5%E6%9C%9F%E7%AE%97%E6%98%9F%E6%9C%9F%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%A0%B9%E6%8D%AE%E6%97%A5%E6%9C%9F%E7%AE%97%E6%98%9F%E6%9C%9F%C2%A0\">根据日期算星期 </a></p>\n<p id=\"%E4%BF%AE%E6%94%B9%E5%90%8E%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81%C2%A0%C2%A0-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BF%AE%E6%94%B9%E5%90%8E%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81%C2%A0%C2%A0\">修改后完整代码  </a></p>\n<p id=\"Date.h%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#Date.h%C2%A0\">Date.h </a></p>\n<p id=\"Date.cpp%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#Date.cpp%C2%A0\">Date.cpp </a></p>\n<p id=\"const%E6%88%90%E5%91%98-toc\" style=\"margin-left:0px;\"><a href=\"#const%E6%88%90%E5%91%98\">const成员</a></p>\n<p id=\"%C2%A0%E5%8F%96%E5%9C%B0%E5%9D%80%E5%8F%8Aconst%E5%8F%96%E5%9C%B0%E5%9D%80%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E5%8F%96%E5%9C%B0%E5%9D%80%E5%8F%8Aconst%E5%8F%96%E5%9C%B0%E5%9D%80%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD\"> 取地址及const取地址操作符重载</a></p>\n<p id=\"%E4%B9%A0%E9%A2%98%C2%A0%20%E8%AE%A1%E7%AE%97%E6%97%A5%E6%9C%9F%E5%88%B0%E5%A4%A9%E6%95%B0%E8%BD%AC%E6%8D%A2%C2%A0-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B9%A0%E9%A2%98%C2%A0%20%E8%AE%A1%E7%AE%97%E6%97%A5%E6%9C%9F%E5%88%B0%E5%A4%A9%E6%95%B0%E8%BD%AC%E6%8D%A2%C2%A0\">习题  计算日期到天数转换 </a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<p id=\"%C2%A0%E5%8F%96%E5%9C%B0%E5%9D%80%E5%8F%8Aconst%E5%8F%96%E5%9C%B0%E5%9D%80%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD-toc\" style=\"margin-left:40px;\"></p>\n<hr/>\n<p></p>\n<p></p>\n<h1 id=\"%E6%97%A5%E6%9C%9F%E7%B1%BB%E5%9E%8B%C2%A0\">日期类型 </h1>\n<h2 id=\"Date.h%C2%A0\">Date.h </h2>\n<p><img alt=\"\" height=\"150\" src=\"..\\..\\static\\image\\e6f816dade524aee941326d2275b0add.png\" width=\"846\"/></p>\n<p></p>\n<pre><code class=\"language-cpp\">#include&lt;iostream&gt;\nusing namespace std;\nclass Date\n{\npublic:\n\t// 获取某年某月的天数\n\tint GetMonthDay(int year, int month)\n\t{\n\t\tstatic int days[13] = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\n\t\tint day = days[month];\n\t\tif (month == 2\n\t\t\t&amp;&amp; ((year % 4 == 0 &amp;&amp; year % 100 != 0) || (year % 400 == 0)))\n\t\t{\n\t\t\tday += 1;\n\t\t}\n\t\treturn day;\n\t}\n\tDate(int year = 1900, int month = 1, int day = 1)\n\t{\n\t\t_year = year;\n\t\t_month = month;\n\t\t_day = day;\n\t}\n\tvoid Print();\n\n\tbool operator==(const Date&amp; d);\n\tbool operator!=(const Date&amp; d);\n\tbool operator&gt;(const Date&amp; d);\n\tbool operator&lt;(const Date&amp; d);\n\tbool operator&gt;=(const Date&amp; d);\n\tbool operator&lt;=(const Date&amp; d);\n\tDate operator+(int day);\n\tDate&amp; operator++();//默认是前置++，返回+完后的值，用引用返回\n\tDate operator++(int i);//后前置++，里面要写一个参数，这里的参数可以不用形参接收，括号里直接写int就行，但加了参数也无所谓,这里的参数只是为了区分\n\t//C++为了区分前后置++，使用重载进行区分，后置++重载增加一个int参数跟前置构成函数重载进行区分\n\tDate&amp; operator+=(int day);\n\tDate operator-(int day);\n\tDate&amp; operator-= (int day);\n\tDate&amp; operator--();\n\tDate  operator--(int);\n\tint operator-(const Date&amp; d);\nprivate:\n\tint _year;\n\tint _month;\n\tint _day;\n};\n</code></pre>\n<h2 id=\"Date.cpp%C2%A0\">Date.cpp </h2>\n<pre><code class=\"language-cpp\">#include\"date.h\"\nbool Date::operator==(const Date&amp; d)\n{\n\treturn _year == d._year &amp;&amp;\n\t\t_month == d._month &amp;&amp;\n\t\t_day == d._day;\n}\nbool Date::operator!=(const Date&amp; d)\n{\n\treturn !(*this == d);\n}\nbool Date::operator&gt;(const Date&amp; d)\n{\n\tif (_year &gt; d._year)\n\t\treturn true;\n\telse if (_year == d._year &amp;&amp; _month &gt; d._month)\n\t{\n\t\treturn true;\n\t}\n\telse if (_year == d._year &amp;&amp; _month == d._month &amp;&amp; _day &gt; d._day)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t\treturn false;\n}\nbool Date::operator&lt;(const Date&amp; d)\n{\n\treturn !(*this &gt;= d);\n}\nbool Date::operator&gt;=(const Date&amp; d)\n{\n\treturn (*this &gt; d) || (*this == d);\n}\nbool Date::operator&lt;=(const Date&amp; d)\n{\n\treturn !(*this &gt; d);\n}\n// 自身要改变\nDate&amp;  Date::operator+=(int day)\n{\n\t_day += day;\n\twhile (_day &gt; GetMonthDay(_year, _month))\n\t{\n\t\t_day -= GetMonthDay(_year, _month);\n\t\t_month++;\n\t\tif (_month == 13)\n\t\t{\n\t\t\t_month = 1;\n\t\t\t_year ++;\n\t\t}\n\t}\n\treturn *this;\n}\n//自身不改变\nDate  Date::operator+(int day)\n{\n\tDate ret(*this);//拷贝构造\n\t//Date ret= *this;在这里，这条语句是拷贝构造，拿*this初始化ret，已经存在的对线才是赋值\n\tret += day;\n\treturn ret;//传值返回的时候，会生成一份拷贝\n}\nvoid  Date::Print()\n{\n\tcout &lt;&lt; _year&lt;&lt;\"/\" &lt;&lt; _month&lt;&lt;\"/\"&lt;&lt;_day &lt;&lt; endl;\n}\nDate&amp; Date::operator++()//前置\n{\n\t*this += 1;\n\treturn *this;\n}\nDate Date::operator++(int)//后置,返回++之前的值\n{\n\tDate tmp(*this);\n\t*this += 1;\n\treturn tmp;\n}\nDate&amp; Date::operator-= (int day)\n{\n\t_day -= day;\n\twhile (_day &lt;= 0)\n\t{\n\t\t--_month;\n\t\tif (_month == 0)\n\t\t{\n\t\t\t--_year;\n\t\t\t_month = 12;\n\t\t}\n\t\t_day += GetMonthDay(_year,_month);\n\t}\n\treturn *this;\n}\nDate Date::operator-(int day)\n{\n\tDate ret = *this;\n\tret -= day;\n\treturn ret;\n}\nDate&amp; Date::operator--()//前置--\n{\n\t*this -= 1;\n\treturn *this;\n}\nDate   Date::operator--(int)//后置--\n{\n\tDate tmp = *this;\n\t*this -= 1;\n\treturn tmp;\n}\nint  Date::operator-(const Date&amp; d)//日期相减\n{\n\tint flag = 1;\n\tDate max = *this;\n\tDate min = d;\n\tif (*this &lt; d)\n\t{\n\t\tmin = *this;\n\t\tmax = d;\n\t\tflag = -1;\n\t}\n\tint n = 0;\n\twhile (min != max)\n\t{\n\t\t++min;\n\t\t++n;\n\t}\n\treturn n*flag;\n}\n</code></pre>\n<h2 id=\"Test.cpp%C2%A0\">Test.cpp </h2>\n<pre><code class=\"language-cpp\">int main()\n{\n\tDate d1(2001, 1, 3);\n\tDate d2(2023, 7, 23);\n\t\n\tDate d3(2022, 6, 23);\n\tcout &lt;&lt; (d1 &lt; d2) &lt;&lt; endl;\n\tcout &lt;&lt; (d1 &gt; d2) &lt;&lt; endl;\n\tcout &lt;&lt; (d1 == d2) &lt;&lt; endl;\n\tcout &lt;&lt; (d1 &lt; d3) &lt;&lt; endl;\n\tcout &lt;&lt; (d1 &gt; d3) &lt;&lt; endl;\n\tcout &lt;&lt; (d1 == d3) &lt;&lt; endl;\n\tDate ret1 = d1 + 100;\n\tret1.Print();\n\tDate ret2=++d1;//转换为d1.operator++(&amp;d1)\n\tret2.Print();\n\tDate ret3=d2++;//转换为d1.operator++(&amp;d2,0)\n\tret3.Print();\n\td1 += 100;\n\td1.Print();\n\td1 -= 100;\n\td1.Print();\n\tDate ret4 = d1 - 1000;\n\tret4.Print();\n\tint ret5 = d1 - d2;\n\tcout &lt;&lt; ret5 &lt;&lt; endl;\n\treturn 0;\n}</code></pre>\n<p> <img alt=\"\" height=\"294\" src=\"..\\..\\static\\image\\32b9cb36c5de480c99176949f7c9ce6c.png\" width=\"676\"/></p>\n<blockquote>\n<p> 一个类到底可以重载哪些运算符，要看哪些运算符对这个类型有意义</p>\n<p>日期减天数思路:先给天减，如果不够（&lt;=0）就借位</p>\n<p>程序有缺陷，构造这里出现了问题</p>\n<p><img alt=\"\" height=\"542\" src=\"..\\..\\static\\image\\2ff28ee55fc942e391e3096b614a1347.png\" width=\"819\"/></p>\n<p>我们在类里面加上判断日期的函数即可或者用assert去判</p>\n<pre><code class=\"language-cpp\">\tDate(int year = 1900, int month = 1, int day = 1)\n\t{\n\t\t_year = year;\n\t\t_month = month;\n\t\t_day = day;\n         //assert(CheckDate());\n\t\tif (!CheckDate())\n\t\t{\n\t\t\tPrint();\n\t\t\tcout &lt;&lt; \"日期非法\" &lt;&lt; endl;\n\t\t}\n\t}\n\tbool CheckDate()\n\t{\n\t\tif (_year &gt;= 1 &amp;&amp; _month &lt; 13 &amp;&amp; _month&gt;0 &amp;&amp; _day &gt; 0 &amp;&amp; _day &lt;= GetMonthDay(_year, _month))\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}</code></pre>\n<p>                <img alt=\"\" height=\"268\" src=\"..\\..\\static\\image\\95008d8119c84c05889f1c5a29ff57a8.png\" width=\"915\"/>      </p>\n<p>加一个负数会报错，我们只需在+=里面进行调整就行，因为+是通过+=实现的</p>\n<p></p>\n<p></p>\n<pre><code class=\"language-cpp\">Date&amp;  Date::operator+=(int day)\n{\n\tif (day &lt; 0)\n\t{\n\t\treturn *this -= -day;\n\t}\n\t_day += day;\n\twhile (_day &gt; GetMonthDay(_year, _month))\n\t{\n\t\t_day -= GetMonthDay(_year, _month);\n\t\t_month++;\n\t\tif (_month == 13)\n\t\t{\n\t\t\t_month = 1;\n\t\t\t_year ++;\n\t\t}\n\t}\n\treturn *this;\n}</code></pre>\n<p><img alt=\"\" height=\"162\" src=\"..\\..\\static\\image\\743d0277c0bf406fa6c48c7f3bc8cdf5.png\" width=\"751\"/></p>\n<p> <img alt=\"\" height=\"279\" src=\"..\\..\\static\\image\\0e0af85c8582408e8260ae6c2e86a3b0.png\" width=\"881\"/><img alt=\"\" height=\"459\" src=\"..\\..\\static\\image\\ac126feef57046729573a65530a3c044.png\" width=\"785\"/></p>\n<p></p>\n<p>同理对-=也修改，如果天数小于0，-=之后 会因为负负得正，给加几天，我们此时调整一下即可</p>\n</blockquote>\n<h1 id=\"%E5%AE%9E%E7%8E%B0Cout%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD%C2%A0\">实现Cout运算符重载 </h1>\n<blockquote>\n<p></p>\n<p>C++ cout和cin能自动识别的原因：</p>\n<p>1.库里面写好了运算符重载</p>\n<p>2.自动识别类型，它们构成重载函数 </p>\n<p><img alt=\"\" height=\"569\" src=\"..\\..\\static\\image\\5755a81e42294300991494b2ca2b9046.png\" width=\"1200\"/></p>\n<p>运算符重载：让自定义类型对象可以用运算符，转换成调用这个重载函数</p>\n<p>函数重载：支持函数名相同的函数同时存在</p>\n<p>虽然俩者都是重载，但它们俩者没有关系</p>\n<p>但如果这样使用cout和cin会报错</p>\n<p><img alt=\"\" height=\"188\" src=\"..\\..\\static\\image\\06ce98140e5841fd974a6ddc6621874e.png\" width=\"505\"/></p>\n<p> 此时我们自己在类里面写运算重载符就可以解决这个问题</p>\n<p>cout是ostream类型对象，cin是istream类型对象</p>\n<pre><code class=\"language-cpp\">void Date::operator&lt;&lt;(ostream&amp; out)\n{\n\tout &lt;&lt; _year &lt;&lt; \"-\" &lt;&lt; _month &lt;&lt; _day;\n}</code></pre>\n<p>此时如果写成这个样子，还是会报错</p>\n<p><img alt=\"\" height=\"192\" src=\"..\\..\\static\\image\\513ae5dc84714e0eb3ec959ce4892383.png\" width=\"383\"/></p>\n<p>但这样可以</p>\n<p><img alt=\"\" height=\"270\" src=\"..\\..\\static\\image\\11897c495810404fa3dd7a452121b3cc.png\" width=\"539\"/></p>\n<p> 运算符有多个操作数的时候，第一个参数是左操作数，第二个参数是右操作数</p>\n<p><img alt=\"\" height=\"225\" src=\"..\\..\\static\\image\\2befdbc3d69a46af943bb8b84c402414.png\" width=\"586\"/></p>\n<p>d1是第一个操作数（左操作数），cout是第二个操作数 （右操作数）</p>\n<p>cout&lt;&lt;d1转换为cout.operatpr(d1)，所以会报错</p>\n<p>若想通过cout&lt;&lt;d1来打印，则不能修改上面的运算符重载，因为类对象抢占了第一个数，默认是this，所以无法通过修改运算符重载来实现该语句</p>\n<p></p>\n<p>此时把该运算符重载写到外面，当作一个函数，不能当成员函数使用，out就会是第一个操作数</p>\n<p><img alt=\"\" height=\"173\" src=\"..\\..\\static\\image\\c6632dd825e742c19ce2db34c22356ec.png\" width=\"532\"/></p>\n<p> 但会有一个缺陷，私有变量无法访问</p>\n<p><img alt=\"\" height=\"108\" src=\"..\\..\\static\\image\\29b1aa710c424d61b3aebed2d70f75ad.png\" width=\"559\"/></p>\n<p> 这里可以通过友元进行修改</p>\n<p><img alt=\"\" height=\"341\" src=\"..\\..\\static\\image\\8fdc4d03bebb4821a426a682265482f4.png\" width=\"984\"/></p>\n<p>此时就可以访问这些私有成员</p>\n<p><img alt=\"\" height=\"217\" src=\"..\\..\\static\\image\\117b551b547245c4baf95e997f912d09.png\" width=\"803\"/></p>\n<p> 但此时这样写又会不支持</p>\n<p><img alt=\"\" height=\"218\" src=\"..\\..\\static\\image\\f6f63a7d31104786bc9d24e3ecb988af.png\" width=\"610\"/></p>\n<p> 这里需要返回值，返回值就是cout,这样才能连续的插入</p>\n<p></p>\n<p><img alt=\"\" height=\"389\" src=\"..\\..\\static\\image\\e51b479076f9486188a5115d3cb82bfc.png\" width=\"948\"/></p>\n<p>此时可正常打印</p>\n<p><img alt=\"\" height=\"111\" src=\"..\\..\\static\\image\\545314c5290243b48091008c679e58c7.png\" width=\"601\"/></p>\n<p><img alt=\"\" height=\"137\" src=\"..\\..\\static\\image\\dafa040db24c4c8a89e16709790595b1.png\" width=\"671\"/></p>\n<p></p>\n<p><img alt=\"\" height=\"238\" src=\"..\\..\\static\\image\\aee01f94a4da45d8a672432212d74d3d.png\" width=\"792\"/></p>\n<p> 这个函数可能会被频繁调用，可能输出多行，因此搞成内联函数最好</p>\n<p><img alt=\"\" height=\"221\" src=\"..\\..\\static\\image\\df86f2be53fc4662b26a7556b9801bdf.png\" width=\"682\"/></p>\n<p> 但是此时声明在.h定义在.cpp，声明和定义分离，链接时报错</p>\n<p><img alt=\"\" height=\"256\" src=\"..\\..\\static\\image\\f7c5189621df46f98ed91fb50905ae40.png\" width=\"1080\"/></p>\n<p>直接在.h里面定义好就行 </p>\n</blockquote>\n<h1 id=\"%E5%AE%9E%E7%8E%B0Cin%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD%C2%A0\">实现Cin运算符重载 </h1>\n<blockquote>\n<p>cin是istream类型对象，流提取，cout不需要改变Date，但Cin需要改变Date</p>\n<p>因为这是要从流里面提取出年月日参数，放到日期里面</p>\n<p><img alt=\"\" height=\"153\" src=\"..\\..\\static\\image\\f864c176720f4b0395af877422c0528e.png\" width=\"534\"/></p>\n<p> <img alt=\"\" height=\"242\" src=\"..\\..\\static\\image\\62bb5691c97c4911a66a097ef63561ae.png\" width=\"815\"/></p>\n<p>但此时输入非法日期不报错</p>\n<p><img alt=\"\" height=\"249\" src=\"..\\..\\static\\image\\4f1cb18e5df8421c803845aaf074b0cc.png\" width=\"681\"/> 此时在加个判断</p>\n<p><img alt=\"\" height=\"184\" src=\"..\\..\\static\\image\\94273345ecde4ba381fc2ace89ed3f57.png\" width=\"516\"/></p>\n<p></p>\n<p></p>\n<p></p>\n</blockquote>\n<h2 id=\"%E6%A0%B9%E6%8D%AE%E6%97%A5%E6%9C%9F%E7%AE%97%E6%98%9F%E6%9C%9F%C2%A0\">根据日期算星期 </h2>\n<blockquote>\n<p> 以1年1月1日星期六为参考对象，输入一个日期后，俩日期相减，然后对7取模就行</p>\n<p>0相当于周天，1-5对应周一到周六</p>\n<pre><code class=\"language-cpp\">void DateSwap()\n{\n\tconst char* WeekDayToStr[] = { \"周一\",\"周二\",\"周三\",\"周四\",\"周五\",\"周六\",\"周日\" };\n\tDate d1;\n\tDate start(1, 1, 1);\n\tcout &lt;&lt; \"请输入日期\";\n\tcin &gt;&gt; d1;\n\tint n = d1 - start;\n\tint weekDay = 0;\n\tweekDay += n;\n\tcout &lt;&lt; WeekDayToStr[ weekDay % 7] &lt;&lt; endl;\n}</code></pre>\n</blockquote>\n<h1 id=\"%E4%BF%AE%E6%94%B9%E5%90%8E%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81%C2%A0%C2%A0\">修改后完整代码  </h1>\n<h2>Date.h </h2>\n<pre><code class=\"language-cpp\">#include&lt;iostream&gt;\n#include&lt;assert.h&gt;\nusing namespace std;\nclass Date\n{\n\tfriend ostream&amp; operator&lt;&lt;(ostream&amp; out, const Date&amp; d);\n\tfriend istream&amp; operator&gt;&gt;(istream&amp; in, Date&amp; d);\npublic:\n\t// 获取某年某月的天数\n\tint GetMonthDay(int year, int month)\n\t{\n\t\tstatic int days[13] = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\n\t\tint day = days[month];\n\t\tif (month == 2\n\t\t\t&amp;&amp; ((year % 4 == 0 &amp;&amp; year % 100 != 0) || (year % 400 == 0)))\n\t\t{\n\t\t\tday += 1;\n\t\t}\n\t\treturn day;\n\t}\n\tDate(int year = 1900, int month = 1, int day = 1)\n\t{\n\t\t_year = year;\n\t\t_month = month;\n\t\t_day = day;\n\t\tif (!CheckDate())\n\t\t{\n\t\t\tPrint();\n\t\t\tcout &lt;&lt; \"日期非法\" &lt;&lt; endl;\n\t\t}\n\t}\n\tbool CheckDate()\n\t{\n\t\tif (_year &gt;= 1 &amp;&amp; _month &lt; 13 &amp;&amp; _month&gt;0 &amp;&amp; _day &gt; 0 &amp;&amp; _day &lt;= GetMonthDay(_year, _month))\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\tvoid Print();\n\tbool operator==(const Date&amp; d);\n\tbool operator!=(const Date&amp; d);\n\tbool operator&gt;(const Date&amp; d);\n\tbool operator&lt;(const Date&amp; d);\n\tbool operator&gt;=(const Date&amp; d);\n\tbool operator&lt;=(const Date&amp; d);\n\tDate operator+(int day);\n\tDate&amp; operator++();//默认是前置++，返回+完后的值，用引用返回\n\tDate operator++(int i);//后前置++，里面要写一个参数，这里的参数可以不用形参接收，括号里直接写int就行，但加了参数也无所谓,这里的参数只是为了区分\n\t//C++为了区分前后置++，使用重载进行区分，后置++重载增加一个int参数跟前置构成函数重载进行区分\n\tDate&amp; operator+=(int day);\n\tDate operator-(int day);\n\tDate&amp; operator-= (int day);\n\tDate&amp; operator--();\n\tDate  operator--(int);\n\tint operator-(const Date&amp; d);\n\t\nprivate:\n\tint _year;\n\tint _month;\n\tint _day;\n};\ninline ostream&amp; operator&lt;&lt;(ostream&amp; out, const Date&amp; d)\n{\n\tout &lt;&lt; d._year &lt;&lt;\"年\" &lt;&lt; d._month&lt;&lt; \"月\" &lt;&lt; d._day&lt;&lt;\"日\" &lt;&lt; endl;\n\treturn out;\n}\ninline istream&amp; operator&gt;&gt;(istream &amp; in, Date &amp; d)\n{\n\tassert(d.CheckDate());\n\t\tin &gt;&gt; d._year &gt;&gt; d._month &gt;&gt; d._day;\n\t\treturn in;\n}\nvoid DateSwap();</code></pre>\n<h2>Date.cpp </h2>\n<pre><code class=\"language-cpp\">#include\"date.h\"\nbool Date::operator==(const Date&amp; d)\n{\n\treturn _year == d._year &amp;&amp;\n\t\t_month == d._month &amp;&amp;\n\t\t_day == d._day;\n}\nbool Date::operator!=(const Date&amp; d)\n{\n\treturn !(*this == d);\n}\nbool Date::operator&gt;(const Date&amp; d)\n{\n\tif (_year &gt; d._year)\n\t\treturn true;\n\telse if (_year == d._year &amp;&amp; _month &gt; d._month)\n\t{\n\t\treturn true;\n\t}\n\telse if (_year == d._year &amp;&amp; _month == d._month &amp;&amp; _day &gt; d._day)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t\treturn false;\n}\nbool Date::operator&lt;(const Date&amp; d)\n{\n\treturn !(*this &gt;= d);\n}\nbool Date::operator&gt;=(const Date&amp; d)\n{\n\treturn (*this &gt; d) || (*this == d);\n}\nbool Date::operator&lt;=(const Date&amp; d)\n{\n\treturn !(*this &gt; d);\n}\n// 自身要改变\nDate&amp;  Date::operator+=(int day)\n{\n\tif (day &lt; 0)\n\t{\n\t\treturn *this -= -day;\n\t}\n\t_day += day;\n\twhile (_day &gt; GetMonthDay(_year, _month))\n\t{\n\t\t_day -= GetMonthDay(_year, _month);\n\t\t_month++;\n\t\tif (_month == 13)\n\t\t{\n\t\t\t_month = 1;\n\t\t\t_year ++;\n\t\t}\n\t}\n\treturn *this;\n}\n//自身不改变\nDate  Date::operator+(int day)\n{\n\tDate ret(*this);//拷贝构造\n\t//Date ret= *this;在这里，这条语句是拷贝构造，拿*this初始化ret，已经存在的对线才是赋值\n\tret += day;\n\treturn ret;//传值返回的时候，会生成一份拷贝\n}\nvoid  Date::Print()\n{\n\tcout &lt;&lt; _year&lt;&lt;\"/\" &lt;&lt; _month&lt;&lt;\"/\"&lt;&lt;_day &lt;&lt; endl;\n}\nDate&amp; Date::operator++()//前置\n{\n\t*this += 1;\n\treturn *this;\n}\nDate Date::operator++(int)//后置,返回++之前的值\n{\n\tDate tmp(*this);\n\t*this += 1;\n\treturn tmp;\n}\nDate&amp; Date::operator-= (int day)\n{\n\tif (day &lt; 0)\n\t{\n\t\treturn *this += -day;\n\t}\n\t_day -= day;\n\twhile (_day &lt;= 0)\n\t{\n\t\t--_month;\n\t\tif (_month == 0)\n\t\t{\n\t\t\t--_year;\n\t\t\t_month = 12;\n\t\t}\n\t\t_day += GetMonthDay(_year,_month);\n\t}\n\treturn *this;\n}\nDate Date::operator-(int day)\n{\n\tDate ret = *this;\n\tret -= day;\n\treturn ret;\n}\nDate&amp; Date::operator--()//前置--\n{\n\t*this -= 1;\n\treturn *this;\n}\nDate   Date::operator--(int)//后置--\n{\n\tDate tmp = *this;\n\t*this -= 1;\n\treturn tmp;\n}\nint  Date::operator-(const Date&amp; d)//日期相减\n{\n\tint flag = 1;\n\tDate max = *this;\n\tDate min = d;\n\tif (*this &lt; d)\n\t{\n\t\tmin = *this;\n\t\tmax = d;\n\t\tflag = -1;\n\t}\n\tint n = 0;\n\twhile (min != max)\n\t{\n\t\t++min;\n\t\t++n;\n\t}\n\treturn n*flag;\n}\nvoid DateSwap()\n{\n\tconst char* WeekDayToStr[] = { \"周一\",\"周二\",\"周三\",\"周四\",\"周五\",\"周六\",\"周日\" };\n\tDate d1;\n\tDate start(1, 1, 1);\n\tcout &lt;&lt; \"请输入日期\";\n\tcin &gt;&gt; d1;\n\tint n = d1 - start;\n\tint weekDay = 0;\n\tweekDay += n;\n\tcout &lt;&lt; WeekDayToStr[ weekDay % 7] &lt;&lt; endl;\n}\n\n//void Date::operator&lt;&lt;(ostream&amp; out)\n//{\n//\tout &lt;&lt; _year &lt;&lt; \"-\" &lt;&lt; _month &lt;&lt;\"-\" &lt;&lt; _day;\n//}\n</code></pre>\n<h1 id=\"const%E6%88%90%E5%91%98\">const成员</h1>\n<blockquote>\n<p> <img alt=\"\" height=\"632\" src=\"..\\..\\static\\image\\a39e072b3d224b68b414ac9a9da04ad6.png\" width=\"1200\"/></p>\n<p>这种情况下会报错 ，会把const Date转换为Date</p>\n<p>这是因为this指针在传参的时候是这样的</p>\n<p><img alt=\"\" height=\"299\" src=\"..\\..\\static\\image\\be0192e49f8f4b569592f6e04fec70ff.png\" width=\"1200\"/></p>\n<p>参数里的const修饰this指针本身 </p>\n<p>d1.Print();传参的时候是将d1的地址传过去，&amp;d1,类型是Date*</p>\n<p>d2.Print();&amp;d2 传不过去，因为传过去的是const Date*类型，而形参是Date*类型</p>\n<p><img alt=\"\" height=\"671\" src=\"..\\..\\static\\image\\cb6582a77e6a4e1b8e32bb8744e63d47.png\" width=\"1100\"/></p>\n<p>d1&lt;d2可以，d2&lt;d1不可以</p>\n<p> <img alt=\"\" height=\"255\" src=\"..\\..\\static\\image\\6febb869e4de45eba96d207a89805892.png\" width=\"1107\"/></p>\n<p> d1&lt;d2，d1是Date *可以传过去</p>\n<p>d2&lt;d1,d2是const Date *不能传给this，所以会报错</p>\n<p>如果要改变这种错误，就要给this加上const，Date *const this变为const Date *const this</p>\n<p>把const加在这个位置</p>\n<p><img alt=\"\" height=\"128\" src=\"..\\..\\static\\image\\c0dbd56acbee435997416fac72a93e57.png\" width=\"932\"/></p>\n<p></p>\n<p><img alt=\"\" height=\"367\" src=\"..\\..\\static\\image\\6e02ef314a96491bad66bd652e3a9c61.png\" width=\"866\"/></p>\n<p> 但是对于d1，本来是Date *const this变为了const Date *const this 把权限缩小了，这样d1就不能给赋值了</p>\n<p><img alt=\"\" height=\"173\" src=\"..\\..\\static\\image\\8ab4cfbe2f994a809ca804c0dd599a69.png\" width=\"845\"/></p>\n<p></p>\n</blockquote>\n<h2 id=\"%C2%A0%E5%8F%96%E5%9C%B0%E5%9D%80%E5%8F%8Aconst%E5%8F%96%E5%9C%B0%E5%9D%80%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD\"> 取地址及const取地址操作符重载</h2>\n<blockquote>\n<p> 权限可以缩小，平移，不能放大</p>\n<p>这里可以写俩个Print，构成函数重载</p>\n<p><img alt=\"\" height=\"673\" src=\"..\\..\\static\\image\\6e65e803bd034590adff9157addb580c.png\" width=\"1119\"/></p>\n<p> <img alt=\"\" height=\"626\" src=\"..\\..\\static\\image\\f342ac4a9d25445d827ee66912048559.png\" width=\"1200\"/></p>\n<p> 编译器在调用的时候会自动匹配，当取地址情况下需要它们同时存在</p>\n<pre><code class=\"language-cpp\">Date* operator&amp;()\n\t{\n\t\treturn this;\n\t}\n\tconst Date* operator&amp;()const\n\t{\n\t\treturn this;\n\t}</code></pre>\n<p>一个返回Date *，一个返回const Date *</p>\n<p><img alt=\"\" height=\"585\" src=\"..\\..\\static\\image\\7294a5dc92244210b9c6ede26d9a2880.png\" width=\"1200\"/></p>\n<p> 调用相对应的</p>\n<p>如果不写编译器会自动生成</p>\n<p><img alt=\"\" height=\"456\" src=\"..\\..\\static\\image\\9c2c7e6550674ebeaed7c931a433db32.png\" width=\"1200\"/></p>\n<p> <img alt=\"\" height=\"225\" src=\"..\\..\\static\\image\\32e9154e3db44ec18e33178e90a6776f.png\" width=\"548\"/></p>\n<p> 这两个运算符一般不需要重载，使用编译器生成的默认取地址的重载即可，只有特殊情况，才需要重载，比如想让别人获取到指定的内容</p>\n<p>如果不想让别人取地址，一般自己写一个，返回nullptr即可</p>\n</blockquote>\n<h1 id=\"%E4%B9%A0%E9%A2%98%C2%A0%20%E8%AE%A1%E7%AE%97%E6%97%A5%E6%9C%9F%E5%88%B0%E5%A4%A9%E6%95%B0%E8%BD%AC%E6%8D%A2%C2%A0\">习题  计算日期到天数转换 </h1>\n<blockquote>\n<p><a href=\"https://www.nowcoder.com/questionTerminal/769d45d455fe40b385ba32f97e7bcded\" title=\"计算日期到天数转换__牛客网 (nowcoder.com)\">计算日期到天数转换__牛客网 (nowcoder.com)</a> </p>\n<p><img alt=\"\" height=\"402\" src=\"..\\..\\static\\image\\5575cf04e5c84214bd5db6063ff11f43.png\" width=\"776\"/></p>\n<p> </p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\nusing namespace std;\n\nint main(){\nint year,month,day;\n    cin&gt;&gt;year&gt;&gt;month&gt;&gt;day;\n    int monthDays[13]={0,31,59,90,120,151,181,212,243,273,304,334,365};\n    int n=monthDays[month-1]+day;\n    if(month&gt;2&amp;&amp;((year%4==0&amp;&amp;year%100!=0)||(year%400==0)))\n        n+=1;\n       cout&lt;&lt;n&lt;&lt;endl;\n    return 0;\n}</code></pre>\n<p></p>\n</blockquote>\n</div>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-03 10:38:21", "summary": "目录日期类型实现运算符重载实现运算符重载根据日期算星期修改后完整代码成员取地址及取地址操作符重载习题计算日期到天数转换日期类型获取某年某月的天数默认是前置，返回完后的值，用引用返回后前置，里面要写一个"}