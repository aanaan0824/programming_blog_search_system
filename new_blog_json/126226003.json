{"blogid": "126226003", "writerAge": "码龄1年", "writerBlogNum": "91", "writerCollect": "6675", "writerComment": "12511", "writerFan": "13014", "writerGrade": "7级", "writerIntegral": "19555", "writerName": "微凉秋意", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126226003.jpg", "writerRankTotal": "415", "writerRankWeekly": "1", "writerThumb": "7481", "writerVisitNum": "121052", "blog_read_count": "638", "blog_time": "已于 2022-08-17 22:55:32 修改", "blog_title": "【学习挑战赛】经典算法之折半查找", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>活动地址：<a href=\"https://marketing.csdn.net/p/bdabfb52c5d56532133df2adc1a728fd\">CSDN21天学习挑战赛</a></p>\n</blockquote>\n<blockquote>\n<p>✅作者简介：C/C++领域新星创作者，为C++和java奋斗中<br/> ✨个人社区：<a href=\"http://t.csdn.cn/4h8pd\">微凉秋意社区</a><br/> 🔥系列专栏：<a href=\"https://blog.csdn.net/m0_58618795/category_11956378.html?spm=1001.2014.3001.5482\">基础算法</a><br/> 📃推荐一款模拟面试、刷题神器👉<a href=\"https://www.nowcoder.com/link/pc_csdncpt_ylqb_c\">注册免费刷题</a></p>\n</blockquote>\n<p>🔥前言</p>\n<blockquote>\n<p>书接上文，今天带来算法基础中的折半查找，一个相比于顺序查找效率更高的算法。这已经是基础算法专栏的第四篇文章了，感兴趣的小伙伴可以订阅专栏，学习经典算法。</p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_12\">折半查找算法解析</a></li><li><ul><li><a href=\"#_13\">一、什么是折半查找？</a></li><li><a href=\"#_19\">二、折半算法思想</a></li><li><a href=\"#_26\">三、构造折半查找实例</a></li><li><a href=\"#_36\">四、多种代码形式实现</a></li><li><a href=\"#_94\">五、时间复杂度分析</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_12\"></a>折半查找算法解析</h1>\n<h2><a id=\"_13\"></a>一、什么是折半查找？</h2>\n<p>折半查找又称二分查找，它要求待查找的数据元素必须是<strong>按关键字大小有序排列</strong>的。给定已排好序的n个元素s1,…,sn，现要在这n个元素中找出一特定元素x。</p>\n<ul><li>首先较容易想到使用顺序查找方法，逐个比较s1,…,sn，直至找出元素x或搜索遍整个序列后确定x不在其中。</li><li>显然，该方法没有很好地利用n个元素<strong>已排好序</strong>这个条件。因此，在最坏情况下，顺序查找方法需要O(n)次比较。</li></ul>\n<h2><a id=\"_19\"></a>二、折半算法思想</h2>\n<p>假定元素序列已经由小到大排好序，将有序序列分成规模大致相等的两部分，然后取中间元素与特定查找元素x进行比较：</p>\n<ul><li>如果x等于中间元素，则算法终止；</li><li>如果x小于中间元素，则在序列的左半部继续查找，即在序列的左半部重复分解和治理操作；</li><li>否则，在序列的右半部继续查找，即在序列的右半部重复分解和治理操作。</li><li>二分查找算法重复利用了元素间的次序关系。</li></ul>\n<h2><a id=\"_26\"></a>三、构造折半查找实例</h2>\n<p>创建数组并随机赋值，定义low为数组左边界high为数组右边界（数组长度-1）middle为数组长度的一半。middle=(low+high)/2，即指示中间元素；我们需要通过代码来每次折半查找我们需要的元素值。</p>\n<p>图示：(假设想要查找15)</p>\n<ul><li>第一次二分查找，找到25<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\021e6e0691f04162b785e0dea5875892.png\"/></li><li>第二次二分查找，找到15<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7c2d4e578aa543a99161230a3dbc6bd3.png\"/></li></ul>\n<h2><a id=\"_36\"></a>四、多种代码形式实现</h2>\n<p><em>非递归实现：</em></p>\n<ol><li>twoFind1()</li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">twoFind1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> A<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> K<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> low <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> high <span class=\"token operator\">=</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>middle<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&gt;</span> high<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;=</span> high<span class=\"token punctuation\">)</span><span class=\"token comment\">//包含等于的情况</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tmiddle <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">+</span> high<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>K <span class=\"token operator\">==</span> A<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> middle<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>K <span class=\"token operator\">&gt;</span> A<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> low <span class=\"token operator\">=</span> middle <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> high <span class=\"token operator\">=</span> middle <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"2\"><li>twoFind2()</li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">twoFind2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> A<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> K<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> low <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> high <span class=\"token operator\">=</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>middle<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&gt;</span> high<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;</span> high<span class=\"token punctuation\">)</span><span class=\"token comment\">//不含等于的情况，并在最后做判断</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tmiddle <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">+</span> high<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>K <span class=\"token operator\">==</span> A<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> middle<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>K <span class=\"token operator\">&gt;</span> A<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> low <span class=\"token operator\">=</span> middle <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> high <span class=\"token operator\">=</span> middle <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">==</span> high <span class=\"token operator\">&amp;&amp;</span> A<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> K<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> low<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><em>递归实现：</em></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">twoFind3</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> A<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> high<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> middle<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&gt;</span> high<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//递归结束条件</span>\n\tmiddle <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">+</span> high<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>low<span class=\"token operator\">==</span>high <span class=\"token operator\">&amp;&amp;</span> A<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> k<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> middle<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;</span> high<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">)</span>      <span class=\"token keyword\">return</span>  <span class=\"token function\">twoFind3</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> middle <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>k<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">return</span> middle<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>                    <span class=\"token keyword\">return</span>  <span class=\"token function\">twoFind3</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> middle <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>建议大家用纸笔配合代码执行过程来分析每一步的运行情况，这样理解起来尤为快也不容易忘记。</p>\n</blockquote>\n<h2><a id=\"_94\"></a>五、时间复杂度分析</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f5b076dfdb7d4f3b8ae5a27056807639.png\"/></p>\n<p><code>本文算法基础之折半查找结束，期待大家的支持~</code></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-08-17 22:55:32", "summary": "活动地址：天学习挑战赛作者简介：领域新星创作者，为和奋斗中个人社区：微凉秋意社区系列专栏：基础算法推荐一款模拟面试、刷题神器注册免费刷题前言书接上文，今天带来算法基础中的折半查找，一个相比于顺序查找效"}