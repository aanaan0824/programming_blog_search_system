{"blogid": "123287490", "writerAge": "码龄4年", "writerBlogNum": "298", "writerCollect": "544", "writerComment": "139", "writerFan": "1594", "writerGrade": "6级", "writerIntegral": "5048", "writerName": "菜菜的大数据开发之路", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123287490.jpg", "writerRankTotal": "5319", "writerRankWeekly": "2827", "writerThumb": "223", "writerVisitNum": "141947", "blog_read_count": "15324", "blog_time": "已于 2022-07-03 21:54:43 修改", "blog_title": "Mysql 窗口函数", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"_MySQl_80__0\"></a>一, MySQl 8.0 窗口函数</h1>\n<blockquote>\n<p>窗口函数适用场景: <code>对分组统计结果中的每一条记录进行计算</code>的场景下, 使用窗口函数更好, 注意, 是<strong>每一条</strong>!! 因为MySQL的普通聚合函数的结果(如 group by)是<code>每一组只有一条记录</code>!!!</p>\n</blockquote>\n<blockquote>\n<p>可以跟Hive的对比着看: <a href=\"https://blog.csdn.net/nmsLLCSDN/article/details/119566694\">点我</a>, 特么的花了一晚上整理, 没想到跟Hive 的基本一致, 还不因为好久没复习博客了, 淦</p>\n<blockquote>\n<p>注意: <code>mysql 因为没有array数据结构, 无法像Hive一样 行列进行转换</code>;</p>\n</blockquote>\n</blockquote>\n<h1><a id=\"11__6\"></a>1.1 窗口函数分类</h1>\n<ul><li>MySQL从8.0版本开始支持窗口函数。窗口函数的作用类似于<code>在查询中对数据进行分组</code>，不同的是，分组操作会把分组的结果聚合成一条记录，而窗口函数是<code>将分组的结果置于每一条数据记录中</code>。</li><li>窗口函数可以分为<code>静态窗口函数</code>和<code>动态窗口函数</code>\n<ul><li>静态窗口函数的窗口大小是固定的, 不会因为记录的不同而不同;</li><li>动态窗口函数的窗口大小会随着记录的不同而变化;</li></ul> </li></ul>\n<blockquote>\n<p>窗口函数总体上可以分为<strong>序号函数, 分布函数, 前后函数, 首尾函数和其他函数</strong>;</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4e98d1f734da4e80abbd94c91a5d139e.png\"/></p>\n<h1><a id=\"12__18\"></a>1.2 语法结构</h1>\n<ul><li>窗口函数的语法结构: \n  <ul><li><kbd> 函数 OVER ([PARTITION BY 字段名 ORDER BY 字段名 ASC|DESC]) <kbd></kbd></kbd></li><li>或者是 <kbd> 函数 OVER 窗口名 … WInDOW 窗口名 AS ([PARTITION BY 字段名 ORDER BY 字段名 ASC|DESC]) <kbd></kbd></kbd></li></ul> </li></ul>\n<blockquote>\n<p>OVER 关键字指定窗口的范围;</p>\n<ul><li>如果省略后面括号中的内容，则窗口会包含满足WHERE条件的所有记录，窗口函数会基于所有满足WHERE条件的记录进行计算。</li><li>如果OVER关键字后面的括号不为空，则可以使用如下语法设置窗口。</li></ul>\n<blockquote>\n<p><kbd>PARTITION BY</kbd> 子句: 指定窗口函数<strong>按照哪些字段进行分组</strong>, <code>分组后, 窗口函数可以在每个分组中分别执行</code>;<br/> <kbd>ORDER BY</kbd> 子句: 指定窗口函数<strong>按照哪些字段进行排序</strong>, 执行排序操作使<strong>窗口函数按照排序后的数据记录的顺序进行编号</strong>;<br/> <kbd>FRAME</kbd> 子句: 为分区中的某个子集定义规则, 可以用来作为滑动窗口使用;</p>\n</blockquote>\n</blockquote>\n<hr/>\n<h1><a id=\"13__33\"></a>1.3 窗口函数🌰</h1>\n<blockquote>\n<p>准备表和数据:</p>\n</blockquote>\n<ul><li>创建表:</li></ul>\n<pre><code class=\"prism language-sql\">\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> goods<span class=\"token punctuation\">(</span>\n\n    id <span class=\"token keyword\">INT</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\n    category_id <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span>\n    category <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    NAME <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    price <span class=\"token keyword\">DECIMAL</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    stock <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span>\n    upper_time <span class=\"token keyword\">DATETIME</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>插入数据:</li></ul>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> goods<span class=\"token punctuation\">(</span>category_id<span class=\"token punctuation\">,</span>category<span class=\"token punctuation\">,</span>NAME<span class=\"token punctuation\">,</span>price<span class=\"token punctuation\">,</span>stock<span class=\"token punctuation\">,</span>upper_time<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">VALUES</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'女装/女士精品'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'T恤'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">39.90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2020-11-10 00:00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'女装/女士精品'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'连衣裙'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">79.90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2020-11-10 00:00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'女装/女士精品'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'卫衣'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">89.90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2020-11-10 00:00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'女装/女士精品'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'牛仔裤'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">89.90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2020-11-10 00:00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'女装/女士精品'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'百褶裙'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29.90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2020-11-10 00:00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'女装/女士精品'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'呢绒外套'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">399.90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2020-11-10 00:00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'户外运动'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'自行车'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">399.90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2020-11-10 00:00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'户外运动'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'山地自行车'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1399.90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2020-11-10 00:00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'户外运动'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'登山杖'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59.90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2020-11-10 00:00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'户外运动'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'骑行装备'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">399.90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2020-11-10 00:00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'户外运动'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'运动外套'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">799.90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2020-11-10 00:00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'户外运动'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'滑板'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">499.90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2020-11-10 00:00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>下面针对goods表中的数据来验证每个窗口函数的功能。</p>\n<h3><a id=\"1__73\"></a>1. 序号函数</h3>\n<p>序号函数是按照一定的分组规则<code>对每一组的数据排序并创建一个序号列</code></p>\n<h4><a id=\"11_row_number___76\"></a>1.1 <code>row_number()</code> - 单纯的对<code>每一组</code>数据编号</h4>\n<table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td><kbd>row_number() </kbd></td><td><strong>对数据中的序号进行顺序显示</strong></td></tr><tr><td></td><td></td></tr></tbody></table>\n<p><strong>[案例]</strong></p>\n<blockquote>\n<p>1.1 查询 goods 数据表中每个商品分类下价格降序排列的各个商品信息。</p>\n</blockquote>\n<pre><code class=\"prism language-sql\">\n<span class=\"token keyword\">SELECT</span> \n\t<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>\n\tROW_NUMBER<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> category <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> price <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> row_num\n<span class=\"token keyword\">FROM</span> goods<span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\99ebb3a95d9a4416867c6e9f08126213.png\"/></p>\n<blockquote>\n<p>1.2 查询 goods 数据表中每个商品分类下价格最高的3种商品信息。</p>\n</blockquote>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SELECT</span> \n\t<span class=\"token operator\">*</span>\t\n<span class=\"token keyword\">FROM</span> \n\t<span class=\"token punctuation\">(</span>\n\t<span class=\"token keyword\">SELECT</span> \n\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>\n\t\tROW_NUMBER<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> category <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> price <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> top3Price \n\t<span class=\"token keyword\">FROM</span> goods\n\t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> t\n\n<span class=\"token keyword\">WHERE</span> \n\ttop3Price <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0ae82165f1fd4e339d00c2a94efc06f2.png\"/></p>\n<p>在名称为“女装/女士精品”的商品类别中，有两款商品的价格为89.90元，分别是卫衣和牛仔裤。两款商品的序号都应该为2，而不是一个为2，另一个为3。此时，可以使用RANK()函数和DENSE_RANK()函数解决;</p>\n<h4><a id=\"12_rank____120\"></a>1.2 <code>rank()</code> - 排序每一组的某一字段, 同等级同序号前后不连续</h4>\n<table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td><kbd>rank()</kbd></td><td><strong>对序号进行并列排序, 指定字段数值相同(同一等级)，则会产生相同序号记录，且产生序号间隙,</strong></td></tr><tr><td></td><td>如, 1,1,3,4 而不会是 1,2,3,4(row_number的结果), 也不是 1,1,2,3,4 (dense_rank的结果)</td></tr><tr><td></td><td>rank函数没有参数，但需要指定按照那个字段进行排名，所以<code>使用rank函数必须用order by参数，order by的排序字段就是排名字段</code></td></tr></tbody></table>\n<blockquote>\n<p>1.3</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8d7dd7fc294345988496834dba9427fc.png\"/></p>\n<blockquote>\n<p>1.4 使用RANK()函数获取 goods 数据表中类别为“女装/女士精品”的价格最高的4款商品信息。</p>\n</blockquote>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">// 常规思路</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">FROM</span> goods\n<span class=\"token keyword\">WHERE</span> category <span class=\"token operator\">=</span> <span class=\"token string\">'女装/女士精品'</span>\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> price <span class=\"token keyword\">DESC</span>\n<span class=\"token keyword\">LIMIT</span> <span class=\"token number\">4</span>\n\n<span class=\"token comment\">#窗口函数rank: 并列</span>\n<span class=\"token keyword\">SELECT</span> \n\t<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>\n\tRANK<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> category <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> price <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> top4Price\n<span class=\"token keyword\">FROM</span> \n\tgoods\n<span class=\"token keyword\">WHERE</span> \n\tcategory <span class=\"token operator\">=</span> <span class=\"token string\">'女装/女士精品'</span>\n<span class=\"token keyword\">LIMIT</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bf0ad167ede74a8f9eb9810fa70b9126.png\"/></p>\n<h4><a id=\"13_dense_rank____156\"></a>1.3 <code>dense_rank()</code> - 排序每一组的某一字段, 同等级同序号前后也连续</h4>\n<table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td><kbd>dense_rank()</kbd></td><td><strong>对序号进行并列排序, 指定字段数值相同(同一等级)，则会产生相同序号记录，且产生序号间隙,</strong></td></tr></tbody></table>\n<blockquote>\n<p>1.5</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3e7cefd389b44c68b845e118141d4619.png\"/></p>\n<blockquote>\n<p>1.6</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fb05f8b1f25041b8a969f1248bcd4c40.png\"/></p>\n<p>可以看到，使用DENSE_RANK()函数得出的行号为1、2、2、3，相同价格的商品序号相同，且后面的商品序号是连续的</p>\n<h3><a id=\"2__174\"></a>2. 分布函数</h3>\n<h4><a id=\"21_percent_rank___rank__1_rows__1_176\"></a>2.1 <code>percent_rank()</code> - 等级值百分比, (rank - 1)/ (rows - 1)</h4>\n<table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td><kbd>percent_rank()</kbd></td><td>计算分区或结果集中行的百分位数排名</td></tr><tr><td></td><td>每行按照公式<code>(rank-1)/ (rows-1)</code>进行计算。其中，<code>rank</code>为RANK()函数产生的<code>序号</code>，<code>rows</code>为<code>当前窗口(当前组)的总行数</code></td></tr></tbody></table>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\33e9fd420ed4450d86062e2598ce0e5d.png\"/></p>\n<h4><a id=\"22_cume_dist___rank___186\"></a>2.2 <code>cume_dist()</code> - 累积分布值, <code>&lt;=当前rank值的行数</code> / <code>分组内总行数</code></h4>\n<table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td><kbd>cume_dist()</kbd></td><td>分组内<code>&lt;=当前rank值的行数</code> / <code>分组内总行数</code></td></tr><tr><td></td><td></td></tr></tbody></table>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f2809767d6b342e9b026d1fce14867ca.png\"/></p>\n<h3><a id=\"3__197\"></a>3. 前后函数</h3>\n<h4><a id=\"31_LAGexpr_n__nexpr_199\"></a>3.1 <code>LAG(expr, n)</code> - 返回当前行的前n行(本组内)的expr值</h4>\n<table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td><kbd>LAG(expr, n)</kbd></td><td>返回当前行的前n行(本组)的expr值</td></tr><tr><td></td><td>lag允许你在每一个分组内, 从当前行向前看n行数据</td></tr><tr><td></td><td>n(也叫offset)是从当前行偏移的行数，以获取值。offset必须是一个非负整数。如果offset为零，则LAG()函数计算当前行的值。如果省略 offset，则LAG()函数默认使用n=1, 向前看一个数据。</td></tr></tbody></table>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\54f197afe3574a5bb53182fbd1ac1bb1.png\"/></p>\n<h4><a id=\"32_LEADexpr_n_211\"></a>3.2 <code>LEAD(expr, n)</code></h4>\n<table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td><kbd>LEAD(expr, n)</kbd></td><td>返回当前行的后n行(本组)的expr值</td></tr><tr><td></td><td></td></tr></tbody></table>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b19781cb9d0c432783b38b669c137d15.png\"/></p>\n<h3><a id=\"4__221\"></a>4. 首位函数</h3>\n<h4><a id=\"41_first_valueexpr__last_valueexpr_223\"></a>4.1 <code>first_value(expr)</code> , <code>last_value(expr)</code></h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\099a88908aba42769ada0e41f48f1b26.png\"/></p>\n<h3><a id=\"5__228\"></a>5. 其他函数</h3>\n<h4><a id=\"51_nth_valueexpr_n_230\"></a>5.1 <code>nth_value(expr, n)</code></h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\48671785f14845669e0f0b43c547d08f.png\"/></p>\n<h4><a id=\"52_ntilen_234\"></a>5.2 <code>ntile(n)</code></h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a48c95a75bcc4169a17166dd222fe927.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2022-07-03 21:54:43", "summary": "一窗口函数窗口函数适用场景对分组统计结果中的每一条记录进行计算的场景下使用窗口函数更好注意是每一条因为的普通聚合函数的结果如是每一组只有一条记录可以跟的对比着看点我特么的花了一晚上整理没想到跟的基本一"}