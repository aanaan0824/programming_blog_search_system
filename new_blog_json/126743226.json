{"blogid": "126743226", "writerAge": "码龄39天", "writerBlogNum": "176", "writerCollect": "9", "writerComment": "2", "writerFan": "16", "writerGrade": "5级", "writerIntegral": "1917", "writerName": "快乐的小荣荣", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126743226.jpg", "writerRankTotal": "13017", "writerRankWeekly": "7832", "writerThumb": "4", "writerVisitNum": "14433", "blog_read_count": "12", "blog_time": "于 2022-09-07 12:34:23 发布", "blog_title": "神经网络如何进行预测,神经网络预测值都一样", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h2>BP神经网络模型怎么找出不符合期望输出的预测输出值</h2>\n<p>首先要知道你建立的这个模型的内部逻辑关系。。1，确定隐层数，画出简要模型图。2，确定采用什么样的神经网络来建立模型3.通过测试数据来训练模型。。</p>\n<p>4.根据测试训练得到的数据和实际数据进行比对，或者算出误差。从而修改隐层中的权值和阀值。反复重复3-4.。最后得到一个最优的模型。</p>\n<p><strong>谷歌人工智能写作项目：神经网络伪原创</strong></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\1343ebe46ee142b89e7d10fa2aee3b80.png\"/></p>\n<h2>神经网络算法如何确定期望输出值？新手求教，谢谢。</h2>\n<h2>BP神经网络预测模型在matlab下编程如何显示出它的预测值</h2>\n<p>。</p>\n<p>%画出预测输出结果和期望输出结果图figure;plot(output_fore,':og');holdon;plot(output2_lianghua','-*');legend('预测输出','期望输出');title('BP网络预测输出','fontsize',12);ylabel('函数输出','fontsize',12);xlabel('样本','fontsize',12);%画出预测结果误差图figureplot(error,'-*')title('BP网络预测误差','fontsize',12)ylabel('误差','fontsize',12)xlabel('样本','fontsize',12)。</p>\n<h2>神经网络的准确率是怎么计算的？</h2>\n<p>其实神经网络的准确率的标准是自己定义的。我把你的例子赋予某种意义讲解：1，期望输出[1001]，每个元素代表一个属性是否存在。</p>\n<p>像着4个元素分别表示：是否肺炎，是否肝炎，是否肾炎，是否胆炎，1表示是，0表示不是。2，你的神经网络输出必定不可能全部都是输出只有0,1的输出。</p>\n<p>绝大部分是像[0.99680.00000.00010.9970]这样的输出，所以只要输出中的某个元素大于一定的值，例如0.7，我们就认为这个元素是1，即是有某种炎。</p>\n<p>否则为0，所以你的[0.99680.00000.00010.9970]可以看成是[1,0,0,1],。</p>\n<p>3，所以一般神经网络的输出要按一定的标准定义成另一种输出（像上面说的），看调整后的输出和期望输出是否一致，一致的话算正确，不一致算错误。</p>\n<p>4，用总量为n的检验样本对网络进行评价，输出调整后的输出，统计错误的个数，记为m。所以检验正确率可以定义为n/m。</p>\n<h2>BP人工神经网络方法</h2>\n<p>（一）方法原理人工神经网络是由大量的类似人脑神经元的简单处理单元广泛地相互连接而成的复杂的网络系统。理论和实践表明，在信息处理方面，神经网络方法比传统模式识别方法更具有优势。</p>\n<p>人工神经元是神经网络的基本处理单元，其接收的信息为x1，x2，…，xn，而ωij表示第i个神经元到第j个神经元的连接强度或称权重。</p>\n<p>神经元的输入是接收信息X＝（x1，x2，…，xn）与权重W＝｛ωij｝的点积，将输入与设定的某一阈值作比较，再经过某种神经元激活函数f的作用，便得到该神经元的输出Oi。</p>\n<p>常见的激活函数为Sigmoid型。</p>\n<p>人工神经元的输入与输出的关系为地球物理勘探概论式中：xi为第i个输入元素，即n维输入矢量X的第i个分量；ωi为第i个输入与处理单元间的互联权重；θ为处理单元的内部阈值；y为处理单元的输出。</p>\n<p>常用的人工神经网络是BP网络，它由输入层、隐含层和输出层三部分组成。BP算法是一种有监督的模式识别方法，包括学习和识别两部分，其中学习过程又可分为正向传播和反向传播两部分。</p>\n<p>正向传播开始时，对所有的连接权值置随机数作为初值，选取模式集的任一模式作为输入，转向隐含层处理，并在输出层得到该模式对应的输出值。每一层神经元状态只影响下一层神经元状态。</p>\n<p>此时，输出值一般与期望值存在较大的误差，需要通过误差反向传递过程，计算模式的各层神经元权值的变化量。这个过程不断重复，直至完成对该模式集所有模式的计算，产生这一轮训练值的变化量Δωij。</p>\n<p>在修正网络中各种神经元的权值后，网络重新按照正向传播方式得到输出。实际输出值与期望值之间的误差可以导致新一轮的权值修正。正向传播与反向传播过程循环往复，直到网络收敛，得到网络收敛后的互联权值和阈值。</p>\n<p>（二）BP神经网络计算步骤（1）初始化连接权值和阈值为一小的随机值，即W（0）＝任意值，θ（0）＝任意值。（2）输入一个样本X。</p>\n<p>（3）正向传播，计算实际输出，即根据输入样本值、互联权值和阈值，计算样本的实际输出。</p>\n<p>其中输入层的输出等于输入样本值，隐含层和输出层的输入为地球物理勘探概论输出为地球物理勘探概论式中：f为阈值逻辑函数，一般取Sigmoid函数，即地球物理勘探概论式中：θj表示阈值或偏置；θ0的作用是调节Sigmoid函数的形状。</p>\n<p>较小的θ0将使Sigmoid函数逼近于阈值逻辑单元的特征，较大的θ0将导致Sigmoid函数变平缓，一般取θ0＝1。</p>\n<p>（4）计算实际输出与理想输出的误差地球物理勘探概论式中：tpk为理想输出；Opk为实际输出；p为样本号；k为输出节点号。</p>\n<p>（5）误差反向传播，修改权值地球物理勘探概论式中：地球物理勘探概论地球物理勘探概论（6）判断收敛。若误差小于给定值，则结束，否则转向步骤（2）。</p>\n<p>（三）塔北雅克拉地区BP神经网络预测实例以塔北雅克拉地区S4井为已知样本，取氧化还原电位，放射性元素Rn、Th、Tc、U、K和地震反射构造面等7个特征为识别的依据。</p>\n<p>构造面反映了局部构造的起伏变化，其局部隆起部位应是油气运移和富集的有利部位，它可以作为判断含油气性的诸种因素之一。</p>\n<p>在该地区投入了高精度重磁、土壤微磁、频谱激电等多种方法，一些参数未入选为判别的特征参数，是因为某些参数是相关的。</p>\n<p>在使用神经网络方法判别之前，还采用K-L变换（Karhaem-Loeve）来分析和提取特征。S4井位于测区西南部5线25点，是区内唯一已知井。</p>\n<p>该井在5390.6m的侏罗系地层获得40.6m厚的油气层，在5482m深的震旦系地层中获58m厚的油气层。</p>\n<p>取S4井周围9个点，即4～6线的23～25点作为已知油气的训练样本；由于区内没有未见油的钻井，只好根据地质资料分析，选取14～16线的55～57点作为非油气的训练样本。</p>\n<p>BP网络学习迭代17174次，总误差为0.0001，学习效果相当满意。以学习后的网络进行识别，得出结果如图6-2-4所示。</p>\n<p>图6-2-4塔北雅克拉地区BP神经网络聚类结果（据刘天佑等，1997）由图6-2-4可见，由预测值大于0.9可得5个大封闭圈远景区，其中测区南部①号远景区对应着已知油井S4井；②、③号油气远景区位于地震勘探所查明的托库1、2号构造，该两个构造位于沙雅隆起的东段，其西段即为1984年钻遇高产油气流的Sch2井，应是含油气性好的远景区；④、⑤号远景区位于大涝坝构造，是yh油田的组成部分。</p>\n<h2>关于RBF神经网络预测的问题</h2>\n<p>。</p>\n<p>给你个RBF预测的程序，你根据程序自己改下就可以了clearall;x=[];T=[];x(1)=0.22;k=4;n=900;N=400;%产生logistic序列，前100个去除fori=1:nx(i+1)=k*x(i)*(1-x(i));endX(1:800)=x(101:900);%用X的前400个数据训练RBF神经网络forj=1:NP(1:8,j)=X(j:j+7)';endT=X(9:408);%目标数据net1=newrb(P,T,0.001,1);%训练RBF神经网络N1=300;%选取X的400—700个数据进行RBF神经网络检验forj=1:N1P1(1:8,j)=X(j+400:j+7+400)';endT1=X(409:708);%目标数据%仿真验证a=sim(net1,P1);%对检验数据的预测结果%sim是仿真该网络的意思e=T1-a;%一步预测误差mse=sqrt(e*e')/size(e,2)%均方误差MeanSquareError%画图描绘仿真结果figure(2)plot(X(1:200));axis([1200-0.11.1]);title('logistic混沌序列');xlabel('t');ylabel('magnitude');figure(3)plot(1:300,T1,'b',1:300,a,'r*');h=legend('混沌序列','RBF神经网络一步预测值');axis([1300-0.51.5]);holdontitle('混沌序列与一步预测值');xlabel('t');ylabel('magnitude');figure(4);plot(e,'b-');axis([1300-0.020.02]);title('预测误差e');xlabel('t');ylabel('magnitude');至于你要K均值聚类的话：%一个最基本的rbf算法，学习算法采用伪逆函数%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%clearall;closeall;clc;%定义用到的变量r=1;%领域半径，人为设定nodenum=0;%隐层节点数，由实际数据与r共同决定inputdata=[];%输入矩阵inputpath='';%存储原始输入数据的路径nodeout=[];%隐层输入阵netout=[];%网络输出阵weight=[];%输出权值阵，也是唯一的权值inputnum=0;%输入维数outputnum=0;%输出维数center=[];%聚类中心numtrain=0;%学习样本的个数row=0;%学习样本的个数simrow=0;%全部样本的个数numtest=0;%泛化样本的个数strength=1;%归一化处理时用到的范围，一般为1yout=[];%输出的期望值%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%变量的初始化r=1;inputnum=9;inputpath='e:\\yinjia\\data\\';outputnum=1;simrow=290;source=load(inputpath);%保存一个source的副本，为反归一化做准备copysource=source;%归一化处理source=normalize(source,strength);yout=source(inputnum+1:simrow+inputnum);inputdata=phasespace(source,inputnum,simrow);row=250;numtrain=row;numtest=simrow-row;%把第一人输入变量定为初始的中心%中心的位置在初始化后，不会再变化center=inputdata(1,:)';%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%开始进行简单的聚类%其基本思想是：给定一个固定的邻域半径，在中心点邻域半径内的点就算作%是该邻域的点；半径外的点，取第一个不是半径内的点做为新的中心点%设计一个函数iscenter,来计算一个点是否为中心点。</p>\n<p>forstep=2:rowifiscenter(inputdata(step,:)',center,r)center=[centerinputdata(step,:)'];nodenum=nodenum+1;end%thisendforiscenter(inputdata(step,:))end%thisendforstep=2:row%聚类完成.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%准备进行神经网络的前向计算[centerrownodenum]=size(center);%网络的初始化nodeout=zeros(row,nodenum);netout=zeros(row,outputnum);weight=zeros(nodenum,outputnum);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%网络的计算forstep=1:rowforstep1=1:nodenumnodeout(step,step1)=GaussRadialBasisFunction(inputdata(step,:)',...center(:,step1),r);end%thisendforstep1=1:nodenumend%thisendforstep=1:row%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%用伪逆来计算权值weight=pinv(nodeout)*yout(1:250);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%进行仿真forstep=1:simrowforstep1=1:nodenumnodeout(step,step1)=GaussRadialBasisFunction(inputdata(step,:)',...center(:,step1),r);end%thisendforstep1=1:nodenumend%thisendforstep=1:simrowmydata=nodeout*weight;%反归一化mydata=unnomal(mydata,copysource,strength);rldata=copysource(inputnum+1:inputnum+simrow);plot(rldata);holdon;plot(mydata,'r');%计算一个评价函数rmsetest=(norm(rldata(numtrain+1:simrow)-mydata(numtrain+1:simrow))...^2/(numtest-1))^0.5还有几段小程序，你应该可以自己编写出来的。</p>\n<h2>如何人工神经网络来预测下一个数值</h2>\n<p>newff函数建立BP神经网络，历史数据作为样本，例如前n个数据作为输入，输入节点为n。当前数据作为p，输出节点为1。隐层节点根据试凑法得到。</p>\n<p>通过matlab的train函数，得到训练好的BP神经网络。再将当前预测点的前n个数据作为输入，输出即为当前的预测值。</p>\n<h2>神经网络测试样本集，训练样本集怎么理解，编程目的是让 测试样本输出跟踪目标输出么？谢谢指导~~~不懂~</h2>\n<p>训练样本是用来训练学习机的，测试样本是学习机要识别的对象。</p>\n<p>比如你想让一台电脑能识别茶杯，首先你要准备一个茶杯(训练样本)，然后把茶杯给计算机看(数据输入)，并告诉电脑说这样的东东是茶杯(期望输出)，电脑看到茶杯后它认为是花盆，但看到你的期望是茶杯，他就不停训练自己这个是茶杯不是花盆，直到电脑他自己认为茶杯是茶杯后结束（这个过程叫学习），然后你把另一只茶杯(测试样本)放在电脑面前，并问他这是什么东东，电脑通过运算后告诉你是茶杯(这个过程叫识别)。</p>\n<p>神经网络的原理是输入层的数据经过多个神经元后的输出值尽量接近给出的期望值，如果输出值与期望值误差大，则反复修改神经元的权，直到输出值与期望值的误差在可接受范围。</p>\n<p> </p>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-07 12:34:23", "summary": "神经网络模型怎么找出不符合期望输出的预测输出值首先要知道你建立的这个模型的内部逻辑关系。。，确定隐层数，画出简要模型图。，确定采用什么样的神经网络来建立模型通过测试数据来训练模型。。根据测试训练得到的"}