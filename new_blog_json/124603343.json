{"blogid": "124603343", "writerAge": "码龄3年", "writerBlogNum": "235", "writerCollect": "3676", "writerComment": "3519", "writerFan": "30153", "writerGrade": "7级", "writerIntegral": "10271", "writerName": "秃秃爱健身", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124603343.jpg", "writerRankTotal": "1231", "writerRankWeekly": "22", "writerThumb": "3026", "writerVisitNum": "267767", "blog_read_count": "5126", "blog_time": "于 2022-05-09 19:07:09 发布", "blog_title": "Idea中为java程序添加启动参数（含：VM options、Program arguments、Environment variable）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"Java_0\"></a>一、运行Java程序</h1>\n<p>我们运行Java程序的时候，一般可以通过下列方式：</p>\n<ul><li>运行某个Class类（class表示的是包含main函数的class名称(含包名)）</li></ul>\n<pre><code class=\"prism language-powershell\">java <span class=\"token namespace\">[options]</span> <span class=\"token keyword\">class</span> <span class=\"token namespace\">[arguments]</span>\n</code></pre>\n<ul><li>运行某个jar包（jar和xxx.jar配对使用，-jar指示用jar方式启动，而xxx.jar表示的时jar文件的名称）</li></ul>\n<pre><code class=\"prism language-powershell\">java <span class=\"token namespace\">[options]</span> <span class=\"token operator\">-</span>jar xxx<span class=\"token punctuation\">.</span>jar <span class=\"token namespace\">[arguments]</span>\n</code></pre>\n<p>其中<code>[options]</code>表示Java运行环境的<font color=\"red\">可选配置信息</font>，其<strong>会影响到java运行环境</strong>，是性能调优的关键所在，并且可以传多个选择项。</p>\n<p><code>[arguments]</code>表示的是程序自身的参数，会被<font color=\"red\">传到main函数的参数数组</font>里面，为程序自己所使用。</p>\n<h2><a id=\"1Javaoptions_16\"></a>1、Java启动命令可选项(options)</h2>\n<p>Java启动命令可选项(options)大致可分为<strong>标准</strong>和<strong>非标准</strong>两种，非标准的可选项不保证在所有平台上都实现，并且在未来的某个版本中可能会被修改且不告知，相对而言比较不稳定(Unstable)。<br/> 从具体使用上而言可以分为三种，分别为：标准可选项(Standard options)、非标准可选项(Nonstandard Options) 和 不稳定(Unstable)的选项。</p>\n<h3><a id=\"1Standard_Options_19\"></a>1）Standard Options</h3>\n<p>标准可选项常用的为<code>-Dkey=value</code>，通过其可以<strong>设定系统属性值</strong>，比如编码-Dfile.encoding=UTF-8。可以通过<code>System.getProperty(\"keyname\")</code>来获取系统属性的值。</p>\n<p>详细可以参考博文：<a href=\"https://blog.csdn.net/Saintmm/article/details/123990279\">Java程序启动时-D指定参数详解</a></p>\n<h3><a id=\"2Nonstandard_Options_24\"></a>2）Nonstandard Options</h3>\n<p>非标准可选项都以 <code>-X</code> 开始，常见于JVM调优配置，比如：</p>\n<ul><li><code>-Xms&lt;size&gt;</code><br/> 设置Java堆的初始化大小。例如 -Xms1024m，Java堆的初始化大小就设置为1G。</li><li><code>-Xmx&lt;size&gt;</code><br/> 设置Java堆的最大值。例如 -Xmx3072m，Java堆的最大值就设置为3G。</li><li><code>-Xss&lt;size&gt;</code><br/> 设置Java线程栈的值。例如 -Xss128m，Java线程栈的值就设置为128兆。</li><li><code>..........</code></li></ul>\n<h3><a id=\"3Unstable_Options_34\"></a>3）Unstable Options</h3>\n<p>不稳定的选项也是非标准的，其相当于非标准可选项的一个子集，都以<code>-XX</code>开头；同样常见于JVM调优配置，比如：</p>\n<ul><li> <p><code>-XX:+UseG1GC</code><br/> 使用G1垃圾回收器。</p> </li><li> <p><code>-XX:+PrintGCDetails</code><br/> GC日志中输入垃圾回收的详细信息。</p> </li><li> <p><code>-XX:OnOutOfMemoryError</code><br/> OOM时输出dump文件。</p> </li><li> <p><code>..........</code></p> </li></ul>\n<h2><a id=\"2arguments_45\"></a>2、程序参数(arguments)</h2>\n<p>class或者jar文件之后的字符串（<code>--k=v</code>）会传到 <code>main</code> 函数的 <code>String[]</code> 类型的 <code>args</code> 参数，多个参数用空格隔开；</p>\n<ul><li>如果某一个参数包含多个单词，那么需要用引号包起来；</li></ul>\n<p><strong>比如：</strong></p>\n<pre><code class=\"prism language-powershell\">java <span class=\"token operator\">-</span>jar test-0<span class=\"token punctuation\">.</span>0<span class=\"token punctuation\">.</span>1-SNAPSHOT<span class=\"token punctuation\">.</span>jar <span class=\"token operator\">--</span>server<span class=\"token punctuation\">.</span>port=8099\n</code></pre>\n<p><strong>效果图：</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9f32619f13e440eaa0e0bc579680e856.png\"/></p>\n<h1><a id=\"_59\"></a>二、添加启动参数的步骤</h1>\n<h3><a id=\"1_60\"></a>1、打开需要添加启动参数的对话框</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\929854729c974a89b411886c80d8f33a.png\"/></p>\n<h3><a id=\"2_63\"></a>2、配置启动参数</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0ebd5dba44c842539f853d8c7788c70d.png\"/><br/> 系统环境变量不能直接以空格分隔，要点击最右侧的图标，进入设置：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\63d07f6b4cdc438787801d9b55d8c3c5.png\"/><br/> 其实就是，系统环境变量之间要以<code>;</code>分隔</p>\n<h1><a id=\"_69\"></a>三、启动参数示例解析</h1>\n<p>在Run/Debug Configurations页面主动有三个内容需要被关注：<code>VM options</code>、<code>Program arguments</code>、<code>Environment variable</code>。</p>\n<blockquote>\n<p><strong>1&gt; VM options</strong></p>\n<ul><li>设置JVM参数 或 系统属性，需要以 -D 或 -X 或 -XX 开头，每个参数使用空格隔开；</li></ul>\n<p><strong>2&gt; Program arguments</strong></p>\n<ul><li>设置运行参数，以<code>--k=v</code>的方式设置一个参数，每个参数需要以空格隔开；</li></ul>\n<p><strong>3&gt; Environment variable</strong></p>\n<ul><li>设置环境变量，多个以<code>;</code>分隔；</li></ul>\n</blockquote>\n<h2><a id=\"0_80\"></a>0、样例</h2>\n<p>结合上图的应用启动参数设置，在main函数中输入如下内容：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StartApplication</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StartApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// todo 下面的内容放在SpringApplication.run()前后都可以</span>\n        <span class=\"token comment\">//打印传进来的 program arguments</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> arg <span class=\"token operator\">:</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> myEnv <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myEnv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"System.getenv(\\\"myEnv\\\") = \"</span> <span class=\"token operator\">+</span> myEnv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> myEnv2 <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getenv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myEnv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"System.getenv(\\\"myEnv\\\") = \"</span> <span class=\"token operator\">+</span> myEnv2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> myProp <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getenv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myProp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"System.getenv(\\\"myProp\\\") = \"</span> <span class=\"token operator\">+</span> myProp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>运行结果如下：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f79d913b6f574cbfb7decf27dfe7def6.png\"/></p>\n<h2><a id=\"1VM_options_115\"></a>1、VM options</h2>\n<p>针对VM options中通过<code>-D</code>设置的系统属性值，可以在代码中通过<code>System.getProperty(String key)</code>方法获取；如上述代码中的：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> myEnv <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myEnv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>此外：<code>System#getProperty()</code> 方法返回所有系统属性值；</p>\n<h2><a id=\"2Environment_variable_123\"></a>2、Environment variable</h2>\n<p>针对Environment variable中设置的系统环境变量值，可以在代码中通过<code>System.getEnv(String key)</code>方法获取；如上述代码中的：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> myEnv2 <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getenv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myEnv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>此外：<code>System#getenv()</code> 方法返回所有系统环境变量值；</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-05-09 19:07:09", "summary": "一、运行程序我们运行程序的时候，一般可以通过下列方式：运行某个类表示的是包含函数的名称含包名运行某个包和配对使用，指示用方式启动，而表示的时文件的名称其中表示运行环境的可选配置信息，其会影响到运行环境"}