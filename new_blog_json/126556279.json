{"blogid": "126556279", "writerAge": "码龄1年", "writerBlogNum": "94", "writerCollect": "1869", "writerComment": "3069", "writerFan": "978", "writerGrade": "6级", "writerIntegral": "5864", "writerName": "lxw-pro", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126556279.jpg", "writerRankTotal": "2882", "writerRankWeekly": "197", "writerThumb": "1853", "writerVisitNum": "42173", "blog_read_count": "798", "blog_time": "于 2022-08-29 20:35:02 发布", "blog_title": "【数模之数据分析-1】", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>数据分析之Numpy</h3>\n<ul><li><a href=\"#Array_6\">Array数组：</a></li><li><ul><li><a href=\"#_45\">相关程序运行如下：</a></li></ul>\n</li><li><a href=\"#python0_65\">索引与切片：与python大同小异，还是从0开始</a></li><li><ul><li><a href=\"#_153\">相关程序运行如下：</a></li></ul>\n</li><li><a href=\"#array_194\">数值运算--array数组</a></li><li><ul><li><a href=\"#_321\">相关程序运行如下：</a></li></ul>\n</li><li><a href=\"#_358\">排序操作：</a></li><li><ul><li><a href=\"#_384\">相关程序运行如下：</a></li></ul>\n</li><li><a href=\"#_405\">数组形状操作</a></li><li><ul><li><a href=\"#_443\">相关程序运行如下：</a></li></ul>\n</li><li><a href=\"#_473\">数组的连接：</a></li><li><ul><li><a href=\"#_507\">相关程序运行如下：</a></li></ul>\n</li><li><a href=\"#_527\">数组生成--构造出来一个数组</a></li><li><ul><li><a href=\"#_595\">相关程序运行如下：</a></li><li><a href=\"#_657\">*一切都在变好的路上*</a></li><li><ul><li><a href=\"#1_658\">1、熬夜</a></li><li><a href=\"#2_664\">2、没有节制地书刷手机</a></li><li><a href=\"#3_667\">3、相对于刷短视频</a></li><li><a href=\"#4_671\">4、不断地缅怀过去</a></li><li><a href=\"#5_681\">5、反复拖延</a></li><li><a href=\"#6_692\">6、不懂得拒绝</a></li><li><a href=\"#7_699\">7、为了合群而合群</a></li><li><a href=\"#8_706\">8、尽量“解决”以上“问题”...</a></li></ul>\n</li><li><a href=\"#_710\">每日一言：</a></li><li><ul><li><a href=\"#_718\">持续更新中...</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<hr/>\n<blockquote>\n<p>个人昵称：<a href=\"https://blog.csdn.net/m0_66318554?type=blog\">lxw-pro</a><br/> 个人主页：欢迎关注 <a href=\"https://blog.csdn.net/m0_66318554?type=blog\">我的主页</a><br/> 个人感悟： “失败乃成功之母”，这是不变的道理，在失败中总结，在失败中成长，才能成为IT界的一代宗师。</p>\n</blockquote>\n<h1><a id=\"Array_6\"></a>Array数组：</h1>\n<pre><code># 对于ndarray结构老说，里面所有的 元素必须是同一类型的，如果不是的话，会自动的向下进行转换。\nimport numpy as np\n\nlxw = [1, 2, 3, 4, 5]\nlxw2 = np.array([1, 2, 3, 4, 5])\nprint(lxw2)\nprint(type(lxw2))\n\nlxw3 = lxw2 + 1\nprint(lxw2)\nprint(lxw3)\nprint(lxw3+lxw2)\n\nprint(lxw3[3])\nprint(lxw3.shape)\n\nlxw4 = np.array([\n    [1, 3, 5],\n    [2, 4, 6]\n])\nprint(lxw4)\n\n# 类型\nprint(lxw4.dtype)\n\nprint(lxw4.itemsize)\n\n# 数组个数\nprint(lxw4.size)\n\n# 维度\nprint(lxw4.ndim)\n\n# 以0填充\nlxw4.fill(0)\nprint(lxw4)\n</code></pre>\n<h2><a id=\"_45\"></a>相关程序运行如下：</h2>\n<pre><code>[1 2 3 4 5]\n&lt;class 'numpy.ndarray'&gt;\n[1 2 3 4 5]\n[2 3 4 5 6]\n[ 3  5  7  9 11]\n5\n(5,)\n[[1 3 5]\n [2 4 6]]\nint32\n4\n6\n2\n[[0 0 0]\n [0 0 0]]\n</code></pre>\n<hr/>\n<h1><a id=\"python0_65\"></a>索引与切片：与python大同小异，还是从0开始</h1>\n<pre><code>lxw_array = np.array(lxw)\nprint(lxw_array[0])\n\nprint(lxw_array[1:4])\n\nprint(lxw_array[-3:])\n\n\n# 矩阵格式【即多维的形式】\nlxw_array2 = np.array([\n    [9, 8, 7],\n    [6, 5, 4],\n    [3, 2, 1]\n])\n\nprint(lxw_array2)\n\n# 几行几列\nprint(lxw_array2.shape)\n\n# 数组个数\nprint(lxw_array2.size)\n\n# 维度几维\nprint(lxw_array2.ndim)\n\n# 取矩阵行\nprint(lxw_array2[1])\n\n# 取矩阵列\nprint(lxw_array2[:, 1])\n\n# 取第二行的第一二个\nprint(lxw_array2[1, 0:2])\n\n# 修改矩阵最中间的数\nlxw_array2[1, 1] = 20\nprint(lxw_array2)\n\n# 复制矩阵\nlxw_array3 = lxw_array2.copy()\nprint(lxw_array3)\n\n# 修改复制矩阵最中间的数\nlxw_array3[1, 1] = 52\nprint(lxw_array3)\n\n\ngs = np.arange(0, 100, 10)\nprint(gs)\n\n\nmask = np.array([0, 1, 1, 0, 0, 1, 0, 1, 0, 1], dtype=bool)\nprint(mask)\n\nprint(gs[mask])\n\n\nran_arr = np.random.rand(8)\nprint(ran_arr)\n\nmask = ran_arr &gt; 0.5\nprint(mask)\n\nsz = np.array([12, 23, 34, 45, 56])\nprint(sz &gt; 36)\n\n# 大于该数的为True，反之，则是False\nprint(np.where(sz &gt; 36))\n\n# 字节个数\nprint(sz.nbytes)\n\n# 整数，小数，字符同时存在\nsz2 = np.array([1, 23, 6.2, 'str'], dtype=np.object)\nprint(sz2)\nprint(sz2*2)\n\n# 转化为浮点型\nsz3 = np.asarray(sz, dtype=np.float32)\nprint(sz3)\n\n# 法2（上）\nsz3 = sz.astype(np.float32)\nprint(sz3)\n</code></pre>\n<h2><a id=\"_153\"></a>相关程序运行如下：</h2>\n<pre><code>1\n[2 3 4]\n[3 4 5]\n[[9 8 7]\n [6 5 4]\n [3 2 1]]\n(3, 3)\n9\n2\n[6 5 4]\n[8 5 2]\n[6 5]\n[[ 9  8  7]\n [ 6 20  4]\n [ 3  2  1]]\n[[ 9  8  7]\n [ 6 20  4]\n [ 3  2  1]]\n[[ 9  8  7]\n [ 6 52  4]\n [ 3  2  1]]\n[ 0 10 20 30 40 50 60 70 80 90]\n[False  True  True False False  True False  True False  True]\n[10 20 50 70 90]\n[0.07407331 0.46338347 0.50051622 0.89459322 0.02400678 0.10385683\n 0.78564635 0.37998512]\n[False False  True  True False False  True False]\n[False False False  True  True]\n(array([3, 4], dtype=int32),)\n20\n[1 23 6.2 'str']\n[2 46 12.4 'strstr']\n[12. 23. 34. 45. 56.]\n[12. 23. 34. 45. 56.]\n\n</code></pre>\n<hr/>\n<h1><a id=\"array_194\"></a>数值运算–array数组</h1>\n<pre><code>szjs = np.array([\n    [5, 2, 0],\n    [1, 3, 2]\n])\n\n# 数组内全数相加\nprint(np.sum(szjs))\n\n# 指定要进行的操作是沿着什么轴（维度）\n# 列加：\nprint(np.sum(szjs, axis=0))\n\n# 法二（同上）：\nlj = szjs.sum(axis=0)\nprint(lj)\n\n# 行加：\nprint(np.sum(szjs, axis=1))\n\n# 法二（同上）：\nhj = szjs.sum(axis=1)\nprint(hj)\n\n# 列乘：\nlc = szjs.prod(axis=0)\nprint(lc)\n\n# 行乘：\nhc = szjs.prod(axis=1)\nprint(hc)\n\n# szjs当中最小值：\nzxz = szjs.min()\nprint(zxz)\n\n# 哪个位置的数最小\nargx = szjs.argmin()\nprint(argx)\n\n# 列最小值：\nlzxz = szjs.min(axis=0)\nprint(lzxz)\n\n# 行最小值：\nhzxz = szjs.min(axis=1)\nprint(hzxz)\n\n# szjs当中最大值\nzdz = szjs.max()\nprint(zdz)\n\n# 哪个位置的数最大\nargd = szjs.argmax()\nprint(argd)\n\n# 列最大值：\nlzdz = szjs.max(axis=0)\nprint(lzdz)\n\n# 行最大值：\nhzdz = szjs.max(axis=1)\nprint(hzdz)\n\nlargd = szjs.argmax(axis=0)\nprint(largd)\n\nhargd = szjs.argmax(axis=1)\nprint(hargd)\n\n\nlargx = szjs.argmin(axis=0)\nprint(largx)\n\nlargx = szjs.argmin(axis=1)\nprint(largx)\n\n# 均值：\njz = szjs.mean()\nprint(jz)\n\n# 列均值：\nljz = szjs.mean(axis=0)\nprint(ljz)\n\n# 行均值：\nhjz = szjs.mean(axis=1)\nprint(hjz)\n\n\n# 标准差:\nbzc = szjs.std()\nprint(bzc)\n\n# 列标准差：\nlbzc = szjs.std(axis=0)\nprint(lbzc)\n\n# 行标准差：\nhbzc = szjs.std(axis=1)\nprint(hbzc)\n\n\n# 方差：\nfc = szjs.var()\nprint(fc)\n\n# 列方差\nlfc = szjs.var(axis=0)\nprint(lfc)\n\n# 行方差\nhfc = szjs.var(axis=1)\nprint(hfc)\n\n# 限制,大于该数的用指定最大数表示，反之也一样【在区间内的不用管】\nxz = szjs.clip(0, 3)\nprint(xz)\n\n# 小数四舍五入成整数\nxsz = np.array([2.6, 1.46, 8.41])\nprint(xsz.round())\n\n# 四舍五入中指定小数点\nprint(xsz.round(decimals=1))\n</code></pre>\n<h2><a id=\"_321\"></a>相关程序运行如下：</h2>\n<pre><code>13\n[6 5 2]\n[6 5 2]\n[7 6]\n[7 6]\n[5 6 0]\n[0 6]\n0\n2\n[1 2 0]\n[0 1]\n5\n0\n[5 3 2]\n[5 3]\n[0 1 1]\n[0 1]\n[1 0 0]\n[2 0]\n2.1666666666666665\n[3.  2.5 1. ]\n[2.33333333 2.        ]\n1.5723301886761007\n[2.  0.5 1. ]\n[2.05480467 0.81649658]\n2.4722222222222223\n[4.   0.25 1.  ]\n[4.22222222 0.66666667]\n[[3 2 0]\n [1 3 2]]\n[3. 1. 8.]\n[2.6 1.5 8.4]\n</code></pre>\n<hr/>\n<h1><a id=\"_358\"></a>排序操作：</h1>\n<pre><code>pxsz = np.array([\n    [3, 8, 2],\n    [9, 4, 1],\n    [3, 9, 1]\n])\n# 默认axis=1排序\nprint(np.sort(pxsz))\n\nprint(np.sort(pxsz, axis=0))\n\n# 行逆转\nprint(np.sort(pxsz)[::-1])\n\n# 排序前的位置\nwz = np.argsort(pxsz)\nprint(wz)\n\n# 插数\npxarr = np.linspace(0, 10, 8)\nprint(pxarr)\n\nxszz = np.array([5.2, 6.6, 8.9])\nprint(np.searchsorted(pxarr, xszz))\n</code></pre>\n<h2><a id=\"_384\"></a>相关程序运行如下：</h2>\n<pre><code>[[2 3 8]\n [1 4 9]\n [1 3 9]]\n[[3 4 1]\n [3 8 1]\n [9 9 2]]\n[[1 3 9]\n [1 4 9]\n [2 3 8]]\n[[2 0 1]\n [2 1 0]\n [2 0 1]]\n[ 0.          1.42857143  2.85714286  4.28571429  5.71428571  7.14285714\n  8.57142857 10.        ]\n[4 5 7]\n\n</code></pre>\n<hr/>\n<h1><a id=\"_405\"></a>数组形状操作</h1>\n<pre><code>larr = np.arange(10)\nprint(larr)\n\nprint(larr.shape)\n\nlarr.shape = 2, 5\nprint(larr)\n\n# 仔细感受其间的区别：\nres = larr.reshape(1, 10)\nprint(res)\nprint(res.shape)\n\nres2 = res[np.newaxis, :]\nprint(res2)\nprint(res2.shape)\n\nres3 = res[:, np.newaxis]\nprint(res3)\nprint(res3.shape)\n\nres4 = res[:, np.newaxis, np.newaxis]\nprint(res4)\nprint(res4.shape)\n\n# 压缩：\nres5 = res4.squeeze()\nprint(res5)\n\n# 转置列行：\nprint(larr.transpose())\n\n# 法二（同上）：\nprint(larr.T)\n</code></pre>\n<h2><a id=\"_443\"></a>相关程序运行如下：</h2>\n<pre><code>[0 1 2 3 4 5 6 7 8 9]\n(10,)\n[[0 1 2 3 4]\n [5 6 7 8 9]]\n[[0 1 2 3 4 5 6 7 8 9]]\n(1, 10)\n[[[0 1 2 3 4 5 6 7 8 9]]]\n(1, 1, 10)\n[[[0 1 2 3 4 5 6 7 8 9]]]\n(1, 1, 10)\n[[[[0 1 2 3 4 5 6 7 8 9]]]]\n(1, 1, 1, 10)\n[0 1 2 3 4 5 6 7 8 9]\n[[0 5]\n [1 6]\n [2 7]\n [3 8]\n [4 9]]\n[[0 5]\n [1 6]\n [2 7]\n [3 8]\n [4 9]]\n</code></pre>\n<hr/>\n<h1><a id=\"_473\"></a>数组的连接：</h1>\n<pre><code>lj1 = np.array([\n    [213, 324, 543],\n    [23, 65, 865]\n])\n\nlj2 = np.array([\n    [343, 654, 234],\n    [54, 75, 54]\n])\n\n# 列拼接：\nllj = np.concatenate((lj1, lj2))\nprint(llj)\n\nllj2 = np.vstack((lj1, lj2))\nprint(llj2)\n\n# 行拼接：\nhlj = np.concatenate((lj1, lj2), axis=1)\nprint(hlj)\n\nhlj2 = np.hstack((lj1, lj2))\nprint(hlj2)\n\n# 拉平：\nlp = hlj.flatten()\nprint(lp)\n\nlp2 = llj.ravel()\nprint(lp2)\n</code></pre>\n<h2><a id=\"_507\"></a>相关程序运行如下：</h2>\n<pre><code>[[213 324 543]\n [ 23  65 865]\n [343 654 234]\n [ 54  75  54]]\n[[213 324 543]\n [ 23  65 865]\n [343 654 234]\n [ 54  75  54]]\n[[213 324 543 343 654 234]\n [ 23  65 865  54  75  54]]\n[[213 324 543 343 654 234]\n [ 23  65 865  54  75  54]]\n[213 324 543 343 654 234  23  65 865  54  75  54]\n[213 324 543  23  65 865 343 654 234  54  75  54]\n</code></pre>\n<hr/>\n<h1><a id=\"_527\"></a>数组生成–构造出来一个数组</h1>\n<pre><code>sz1 = np.array([5, 2, 0])\nprint(sz1)\n\nsz2 = np.arange(10)\nprint(sz2)\n\nsz3 = np.arange(2, 20, 2)\nprint(sz3)\n\nsz4 = np.arange(2, 20, 2, dtype=np.float32)\nprint(sz4)\n\n# 区间内构造n个数：\ngzs = np.linspace(0, 8, 20)\nprint(gzs)\n\n# 默认是以10为底的\ns = np.logspace(0, 1, 5)\nprint(s)\n\nx = np.linspace(-10, 10, 5)\nprint(x)\n\ny = np.linspace(-10, 10, 5)\nprint(y)\n\n# 构造网格：\nx, y = np.meshgrid(x, y)\nprint(x)\nprint(y)\n\nhxl = np.r_[0:10:1]\nprint(hxl)\n\nlxl = np.c_[0:10:1]\nprint(lxl)\n\n# 更常用的zeros、ones\noo = np.zeros(3)\nprint(oo)\n\noo0 = np.zeros((3, 3))\nprint(oo0)\n\noo1 = np.ones((3, 3))\nprint(oo1)\n\noo8 = np.ones((3, 3)) * 8\nprint(oo8)\n\noo5 = np.ones((3, 3), dtype=np.float32)\nprint(oo5)\n\nk = np.empty(6)\nprint(k)\n\nk.fill(1)\nprint(k)\n\no = np.ones_like(sz1)\nprint(o)\n\n# 构造矩阵：\nprint(np.identity(5))\n</code></pre>\n<h2><a id=\"_595\"></a>相关程序运行如下：</h2>\n<pre><code>[5 2 0]\n[0 1 2 3 4 5 6 7 8 9]\n[ 2  4  6  8 10 12 14 16 18]\n[ 2.  4.  6.  8. 10. 12. 14. 16. 18.]\n[0.         0.42105263 0.84210526 1.26315789 1.68421053 2.10526316\n 2.52631579 2.94736842 3.36842105 3.78947368 4.21052632 4.63157895\n 5.05263158 5.47368421 5.89473684 6.31578947 6.73684211 7.15789474\n 7.57894737 8.        ]\n[ 1.          1.77827941  3.16227766  5.62341325 10.        ]\n[-10.  -5.   0.   5.  10.]\n[-10.  -5.   0.   5.  10.]\n[[-10.  -5.   0.   5.  10.]\n [-10.  -5.   0.   5.  10.]\n [-10.  -5.   0.   5.  10.]\n [-10.  -5.   0.   5.  10.]\n [-10.  -5.   0.   5.  10.]]\n[[-10. -10. -10. -10. -10.]\n [ -5.  -5.  -5.  -5.  -5.]\n [  0.   0.   0.   0.   0.]\n [  5.   5.   5.   5.   5.]\n [ 10.  10.  10.  10.  10.]]\n[0 1 2 3 4 5 6 7 8 9]\n[[0]\n [1]\n [2]\n [3]\n [4]\n [5]\n [6]\n [7]\n [8]\n [9]]\n[0. 0. 0.]\n[[0. 0. 0.]\n [0. 0. 0.]\n [0. 0. 0.]]\n[[1. 1. 1.]\n [1. 1. 1.]\n [1. 1. 1.]]\n[[8. 8. 8.]\n [8. 8. 8.]\n [8. 8. 8.]]\n[[1. 1. 1.]\n [1. 1. 1.]\n [1. 1. 1.]]\n[2.33333333 2.33333333 2.33333333 2.         2.         2.        ]\n[1. 1. 1. 1. 1. 1.]\n[1 1 1]\n[[1. 0. 0. 0. 0.]\n [0. 1. 0. 0. 0.]\n [0. 0. 1. 0. 0.]\n [0. 0. 0. 1. 0.]\n [0. 0. 0. 0. 1.]]\n\n进程已结束，退出代码为 0\n\n</code></pre>\n<p>—————————————————————————————————</p>\n<h2><a id=\"_657\"></a><em>一切都在变好的路上</em></h2>\n<h3><a id=\"1_658\"></a>1、熬夜</h3>\n<p>很多人以为熬夜只是影响作息，伤害身体。<br/> 事实上，它也在慢慢偷走你的时间。<br/> 为什么周末的时间过得这么快，<br/> 这是因为你昨晚熬夜，导致起床晚，错过了美好的早晨。<br/> 【醒来的时候都快中午了】</p>\n<h3><a id=\"2_664\"></a>2、没有节制地书刷手机</h3>\n<p>现代人已经离不开手机了。路上、候车、吃饭，无论男女老少，每个人都随处可见地刷着手机。<br/> 短视频真的很精彩，在你欲罢不能时，已有大把时间从你手中溜走了。</p>\n<h3><a id=\"3_667\"></a>3、相对于刷短视频</h3>\n<p>沉迷于游戏更可怕。<br/> 因为丢掉的不止是时间，<br/> 它可能已经同时影响到了你的工作或学习。</p>\n<h3><a id=\"4_671\"></a>4、不断地缅怀过去</h3>\n<p>纠结过去的某件错事，<br/> 在脑海中一遍遍地批判自己。<br/> 时间长了，思想负担。<br/> 像滚雪球一样越滚越大。<br/> 要尝试放过自己，<br/> 别用现在的标准来要求以前的自己，<br/> 过去的就让它过去吧，<br/> 每一天都是崭新的，<br/> 做人就应该要往前看。</p>\n<h3><a id=\"5_681\"></a>5、反复拖延</h3>\n<p>今天的事推明天，明天的推到后天。<br/> 72小时定律告诉我们，<br/> 当你决定做一件事，<br/> 如果72小时内没有做，<br/> 那你做这件事的几率趋近于零。<br/> 拖延症是破坏我们计划的最大敌人，<br/> 但实际上它又是一场与自己的博弈。<br/> 所以我们需要培养自己的执行力，<br/> 每一次果断，每一次行动，<br/> 都是打败那个在干扰你的敌人。</p>\n<h3><a id=\"6_692\"></a>6、不懂得拒绝</h3>\n<p>这类人有一个明显得特征，<br/> 不知道自己时间的宝贵，<br/> 对别人有求必应。<br/> 平时帮别人做一些小事，<br/> 结果往往不但没有落得好名声，<br/> 还费力不讨好。</p>\n<h3><a id=\"7_699\"></a>7、为了合群而合群</h3>\n<p>盲目地区融入不适合自己的圈子。<br/> 看似成群结队，受人欢迎了，<br/> 其实是在浪费时间，<br/> 放弃提升自己的机会。<br/> 千万别等着别人过上理想生活时，<br/> 才后悔 为什么没有早点努力！</p>\n<h3><a id=\"8_706\"></a>8、尽量“解决”以上“问题”…</h3>\n<hr/>\n<h2><a id=\"_710\"></a>每日一言：</h2>\n<ul><li></li></ul>\n<blockquote>\n<p><em><strong>把寄予他人的希望收回来放在自己身上，倒也温馨。</strong></em></p>\n</blockquote>\n<ul><li></li></ul>\n<hr/>\n<h3><a id=\"_718\"></a>持续更新中…</h3>\n<blockquote>\n<p><mark>点赞</mark>，你的认可是我创作的<code>动力</code>！<br/> <mark>收藏</mark>，你的青睐是我努力的<code>方向</code>！<br/> <mark>评论</mark>，你的意见是我进步的<code>财富</code>！<br/> <mark>关注</mark>，你的喜欢是我长久的<code>坚持</code>！<br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/a92cae37affa4c1d870cc0f3ade0e3ff.gif\"/></p>\n</blockquote>\n<p>欢迎关注<mark>微信公众号</mark>【<a href=\"https://u.r.sn.cn/RsGk6d\">程序人生6</a>】，一起探讨学习哦！！！</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-29 20:35:02", "summary": "数据分析之数组：相关程序运行如下：索引与切片：与大同小异，还是从开始相关程序运行如下：数值运算数组相关程序运行如下：排序操作：相关程序运行如下：数组形状操作相关程序运行如下：数组的连接：相关程序运行如"}