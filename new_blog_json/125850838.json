{"blogid": "125850838", "writerAge": "码龄3年", "writerBlogNum": "89", "writerCollect": "859", "writerComment": "1117", "writerFan": "1391", "writerGrade": "5级", "writerIntegral": "4115", "writerName": "小呆鸟_coding", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125850838.jpg", "writerRankTotal": "4488", "writerRankWeekly": "710", "writerThumb": "1205", "writerVisitNum": "19754", "blog_read_count": "564", "blog_time": "已于 2022-09-04 21:21:58 修改", "blog_title": "【c ++ primer 笔记】第8章 IO库", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7edc0d0158b0497f9196d0827afc660c.jpeg\"/></p>\n<blockquote>\n<p>🎉作者简介:👓<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          博主在读机器人研究生，目前研一。对计算机后端感兴趣，喜欢\n         \n         \n          c\n         \n         \n          +\n         \n         \n          +\n         \n         \n          ,\n         \n         \n          g\n         \n         \n          o\n         \n         \n          ,\n         \n         \n          p\n         \n         \n          y\n         \n         \n          t\n         \n         \n          h\n         \n         \n          o\n         \n         \n          n\n         \n         \n          ,\n         \n         \n          目前熟悉\n         \n         \n          c\n         \n         \n          +\n         \n         \n          +\n         \n         \n          ，\n         \n         \n          g\n         \n         \n          o\n         \n         \n          语言，数据库，网络编程，了解分布式等相关内容\n         \n        \n       \n       \n        \\textcolor{orange}{博主在读机器人研究生，目前研一。对计算机后端感兴趣，喜欢c++,go,python,目前熟悉c++，go语言，数据库，网络编程，了解分布式等相关内容}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.7667em; vertical-align: -0.0833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: orange;\">博主在读机器人研究生，目前研一。对计算机后端感兴趣，喜欢</span><span class=\"mord mathnormal\" style=\"color: orange;\">c</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\" style=\"color: orange;\">+</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.8889em; vertical-align: -0.1944em;\"></span><span class=\"mord\" style=\"color: orange;\">+</span><span class=\"mpunct\" style=\"color: orange;\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0359em; color: orange;\">g</span><span class=\"mord mathnormal\" style=\"color: orange;\">o</span><span class=\"mpunct\" style=\"color: orange;\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord mathnormal\" style=\"color: orange;\">p</span><span class=\"mord mathnormal\" style=\"margin-right: 0.0359em; color: orange;\">y</span><span class=\"mord mathnormal\" style=\"color: orange;\">t</span><span class=\"mord mathnormal\" style=\"color: orange;\">h</span><span class=\"mord mathnormal\" style=\"color: orange;\">o</span><span class=\"mord mathnormal\" style=\"color: orange;\">n</span><span class=\"mpunct\" style=\"color: orange;\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord cjk_fallback\" style=\"color: orange;\">目前熟悉</span><span class=\"mord mathnormal\" style=\"color: orange;\">c</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\" style=\"color: orange;\">+</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.8778em; vertical-align: -0.1944em;\"></span><span class=\"mord\" style=\"color: orange;\">+</span><span class=\"mord cjk_fallback\" style=\"color: orange;\">，</span><span class=\"mord mathnormal\" style=\"margin-right: 0.0359em; color: orange;\">g</span><span class=\"mord mathnormal\" style=\"color: orange;\">o</span><span class=\"mord cjk_fallback\" style=\"color: orange;\">语言，数据库，网络编程，了解分布式等相关内容</span></span></span></span></span><br/> 📃<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          个人主页：\n         \n        \n       \n       \n        \\textcolor{gray}{个人主页：}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: gray;\">个人主页：</span></span></span></span></span> <a href=\"https://blog.csdn.net/weixin_45043334?spm=1011.2266.3001.5343\">小呆鸟_coding</a><br/> 🔎<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          支持\n         \n         \n          :\n         \n        \n       \n       \n        \\textcolor{gray}{支持:}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: gray;\">支持</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\" style=\"color: gray;\">:</span></span></span></span></span><span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          如果觉得博主的文章还不错或者您用得到的话，可以免费的关注一下博主，如果三连收藏支持就更好啦\n         \n        \n       \n       \n        \\textcolor{green}{如果觉得博主的文章还不错或者您用得到的话，可以免费的关注一下博主，如果三连收藏支持就更好啦}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: green;\">如果觉得博主的文章还不错或者您用得到的话，可以免费的关注一下博主，如果三连收藏支持就更好啦</span></span></span></span></span>👍<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          就是给予我最大的支持！\n         \n        \n       \n       \n        \\textcolor{green}{就是给予我最大的支持！}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: green;\">就是给予我最大的支持！</span></span></span></span></span>🎁<br/> 💛本文摘要💛</p>\n<table><tbody><tr><td bgcolor=\"Pink\">本专栏主要是对c++ primer这本圣经的总结，以及每章的相关笔记。目前正在复习这本书。同时希望能够帮助大家一起，学完这本书。 本文主要讲解第8章 IO类 </td></tr></tbody></table>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#81_IO_28\">💕8.1 IO类</a></li><li><ul><li><a href=\"#810IO_29\">⭐️8.1.0前面章节使用的IO库</a></li><li><a href=\"#811_IO_63\">⭐️8.1.1 IO对象无拷贝或赋值</a></li><li><a href=\"#812__72\">⭐️8.1.2 条件状态</a></li><li><a href=\"#813__116\">⭐️8.1.3 管理输出缓冲区</a></li></ul>\n</li><li><a href=\"#82__154\">💕8.2 文件输入输出</a></li><li><ul><li><a href=\"#821__178\">⭐️8.2.1 使用文件流对象</a></li><li><a href=\"#822__216\">⭐️8.2.2 文件模式</a></li></ul>\n</li><li><a href=\"#83_string_240\">💕8.3 string流</a></li><li><ul><li><a href=\"#832_ostringstream_262\">⭐️8.3.2 使用ostringstream</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<br/>\n<strong><code>c++ primer 第五版 系列文章：可面试可复习</code></strong>\n<p></p>\n<p><a href=\"https://blog.csdn.net/weixin_45043334/article/details/126293098\">第2章 变量和基本类型</a><br/> <a href=\"https://blog.csdn.net/weixin_45043334/article/details/125402340\">第3章 字符串、向量和数组</a><br/> <a href=\"https://blog.csdn.net/weixin_45043334/article/details/125449009\">第4章 表达式</a><br/> <a href=\"https://blog.csdn.net/weixin_45043334/article/details/125647293\">第5章 语句</a><br/> <a href=\"https://blog.csdn.net/weixin_45043334/article/details/125751253\">第6章 函数</a><br/> <a href=\"https://blog.csdn.net/weixin_45043334/article/details/125850838\">第8章 IO库</a><br/> <a href=\"https://blog.csdn.net/weixin_45043334/article/details/125947865\">第9章 顺序容器</a><br/> <a href=\"https://blog.csdn.net/weixin_45043334/article/details/126002739\">第10章 泛型算法</a><br/> <a href=\"https://blog.csdn.net/weixin_45043334/article/details/126246260\">第11章 关联容器</a><br/> <a href=\"https://blog.csdn.net/weixin_45043334/article/details/126297355\">第12章 动态内存</a><br/> <a href=\"https://blog.csdn.net/weixin_45043334/article/details/126394732\">第13章 拷贝控制</a><br/> <a href=\"https://blog.csdn.net/weixin_45043334/article/details/126679427\">第 14章 重载运算符</a></p>\n</blockquote>\n<ul><li>本章主要介绍函数传参及函数返回结果、函数重载、重载函数应该选择哪个进行调用。</li></ul>\n<h2><a id=\"81_IO_28\"></a>💕8.1 IO类</h2>\n<h3><a id=\"810IO_29\"></a>⭐️8.1.0前面章节使用的IO库</h3>\n<ul><li><strong>istream</strong>：输入流类型，提供输入操作。</li><li><strong>ostream</strong>：输出流类型，提供输出操作</li><li><strong>cin</strong>：一个<code>istream</code>对象，从标准输入读取数据。</li><li><strong>cout</strong>：一个<code>ostream</code>对象，向标准输出写入数据。</li><li><strong>cerr</strong>：一个<code>ostream</code>对象，向标准错误写入消息。</li><li><strong>&gt;&gt;运算符</strong>：用来从一个<code>istream</code>对象中读取输入数据。</li><li><strong>&lt;&lt;运算符</strong>：用来向一个<code>ostream</code>对象中写入输出数据。</li><li><strong>getline函数</strong>：从一个给定的<code>istream</code>对象中读取一行数据，存入到一个给定的<code>string</code>对象中。</li></ul>\n<table><thead><tr><th align=\"center\"></th><th align=\"left\">IO库类型和头文件</th></tr></thead><tbody><tr><td align=\"center\"><strong>头文件</strong></td><td align=\"left\"><strong>类型</strong></td></tr><tr><td align=\"center\"></td><td align=\"left\"><strong>istream, wistream（从流中读取）</strong></td></tr><tr><td align=\"center\"><strong>iostream</strong></td><td align=\"left\"><strong>ostream，wostream（写到流中去）</strong></td></tr><tr><td align=\"center\"></td><td align=\"left\"><strong>iostream，wiostream（对流进行读写）</strong></td></tr><tr><td align=\"center\"></td><td align=\"left\"></td></tr><tr><td align=\"center\"></td><td align=\"left\"><strong>ifstream，wifstream（从文件中读取）</strong></td></tr><tr><td align=\"center\"><strong>fstream</strong></td><td align=\"left\"><strong>ofstream，wofstream（写到文件中去）</strong></td></tr><tr><td align=\"center\"></td><td align=\"left\"><strong>fstream，wfstream（读写文件）</strong></td></tr><tr><td align=\"center\"></td><td align=\"left\"></td></tr><tr><td align=\"center\"></td><td align=\"left\"><strong>istringstream, wistringstream（从string对象中读取）</strong></td></tr><tr><td align=\"center\"><strong>sstream</strong></td><td align=\"left\"><strong>ostringstream, wostringstream（写到string对象中去）</strong></td></tr><tr><td align=\"center\"></td><td align=\"left\"><strong>stringstream, wstringstream（对string对象进行读写）</strong></td></tr></tbody></table>\n<ul><li>其中带<code> w 前缀</code>的类型用来操作<code>宽字符语言</code>(wchar_t)。宽字符版本的类型和函数前都有一个 w，如 wcin, wcout, wcerr。</li><li><code>fstream </code>和 <code>sstream</code> 中的类型都继承自 iostream 中的类型。</li><li>可以将一个派生类对象当成基类对象来使用。</li><li>所有这些输入输出流对象的 <code>&gt;&gt; </code>操作都是<code>读取一个单词</code>。</li></ul>\n<p><strong>理解：</strong></p>\n<ul><li><code>输入流</code>和<code>输出流</code>都是<code>流对象</code>，输入流就是要用<code> &gt;&gt;</code> 把流对象中的内容保存到变量中，输出流就是要用<code>&lt;&lt;</code>把变量保存到<code>流对象</code>中。一个流是和控制台窗口或一个文件或字符串等相关联的，如 <code>cin、cout </code>都和<code>控制台窗口</code>相关联。</li></ul>\n<h3><a id=\"811_IO_63\"></a>⭐️8.1.1 IO对象无拷贝或赋值</h3>\n<ul><li>IO对象不能存在容器里.</li><li><code>不能拷贝或对 IO 对象赋值</code></li><li><code>形参或返回类型不能设置成流类型。</code></li><li>进行 IO 操作的函数通常<code>以引用形式传递和返回流</code>。（形参和返回类型一般是流的引用。）</li><li>读写 IO 对象会改变其状态，因此引用不能是 const 的。</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\989ef1f2dfe548ff812d23cd5679e928.png\"/></p>\n<h3><a id=\"812__72\"></a>⭐️8.1.2 条件状态</h3>\n<ul><li>IO操作可能会发生不可预知的错误，一些错误是课恢复的，一些操作是不可恢复的，<code>我们在使用一个流之前，应该检查它是否处于良好状态。</code></li><li><code>条件状态用来查看流状态</code></li></ul>\n<p><strong>IO 库的状态</strong></p>\n<table><thead><tr><th>状态</th><th>解释</th></tr></thead><tbody><tr><td><code>strm:iostate</code></td><td>作为位集合来使用，可以表达流的完整状态。通过位运算符可以一次性检测或设置多个标志位。</td></tr><tr><td>`strm:badbit</td><td>表示流已崩溃，是系统及错误或不可恢复的读写错误。流无法再使用。</td></tr><tr><td><code>strm:failbit </code></td><td>表示一个 IO 操作失败了，是可恢复错误。修正后流可以继续使用。</td></tr><tr><td><code>strm:eofbit</code></td><td>用来指出流到达了文件结束</td></tr><tr><td><code>strm:goodbit</code></td><td>用来指出流未处于错误状态，此值保证为零</td></tr><tr><td><code>s.eof()</code></td><td>若流<code>s</code>的<code>eofbit</code>置位，则返回<code>true</code></td></tr><tr><td><code>s.fail()</code></td><td>若流<code>s</code>的<code>failbit</code>置位，则返回<code>true</code></td></tr><tr><td><code>s.bad()</code></td><td>若流<code>s</code>的<code>badbit</code>置位，则返回<code>true</code></td></tr><tr><td><code>s.good()</code></td><td>若流<code>s</code>处于有效状态，则返回<code>true</code></td></tr><tr><td><code>s.clear()</code></td><td>将流<code>s</code>中所有条件状态位复位，将流的状态设置成有效，返回<code>void</code></td></tr><tr><td><code>s.clear(flags)</code></td><td>将流<code>s</code>中指定的条件状态位<code>复位</code>，返回<code>void</code></td></tr><tr><td><code>s.setstate(flags)</code></td><td>根据给定的标志位，将流<code>s</code>中对应的条件状态位<code>置位</code>，返回<code>void</code></td></tr><tr><td><code>s.rdstate()</code></td><td>返回流<code>s</code>的当前条件状态，返回值类型为<code>strm::iostate</code></td></tr></tbody></table>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cfca2f45570749cd887e9df0319cf644.png\"/></p>\n<p><strong>检查流的状态</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin <span class=\"token operator\">&gt;&gt;</span> word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &gt;&gt; 表达式返回流的状态</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">good</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 意义同上</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 意义同上。</span>\n</code></pre>\n<p><strong>管理条件状态</strong></p>\n<pre><code class=\"prism language-c\">cin<span class=\"token punctuation\">.</span><span class=\"token function\">rdstate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//返回一个 iostate 值表示当前状态。</span>\ncin<span class=\"token punctuation\">.</span><span class=\"token function\">setstate</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//接受一个 iostate 类型的参数，将给定条件位置位。</span>\ncin<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">//清除（复位）所有错误标志位，cin.clear() 后，cin.good() 会返回 true</span>\ncin<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//接受一个 iostate 类型的参数，设为流的新状态。</span>\n</code></pre>\n<p><strong>设置某个标志位的方式</strong></p>\n<pre><code class=\"prism language-c\">cin<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">rdstate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span>cin<span class=\"token punctuation\">.</span>failbit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将 failbit 复位</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\411ae7173e8348c79d026e6266305987.png\"/></p>\n<h3><a id=\"813__116\"></a>⭐️8.1.3 管理输出缓冲区</h3>\n<ul><li><code>每个输出流都管理一个缓冲区，执行输出的代码，文本串可能立即打印出来，也可能被操作系统保存在缓冲区内，随后再打印。</code></li></ul>\n<p><strong>缓冲刷新（即数据真正写到设备或文件）的原因：</strong></p>\n<ul><li>程序正常结束，作为main函数的return操作的一部分，缓冲刷新被执行。</li><li>缓冲区满</li><li>使用操纵符如 <code>endl</code>, <code>flush</code>, <code>ends </code>来显示刷新缓冲区</li><li>一个输出流可能关联到另一个流。<code>当读写被关联的流时，关联到的流的缓冲区就会被刷新</code>如读 cin 或写 cerr 都会刷新 cout 的缓冲区</li><li>使用操纵符<code>unitbuf</code>设置流的内部状态来清空缓冲区。</li></ul>\n<p><code>操纵符 endl, flush, ends</code><br/> <code>unitbuf：告诉流接下来每次写操作之后都进行一次 flush 操作</code><br/> <code>nounitbuf：重置流，恢复正常的刷新机制</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\64f90933f3f343519854e23b8e2eaf70.jpeg\"/></p>\n<p><strong>注意</strong>：如果程序异常终止，将不会刷新缓冲区，即此时相应的输出操作已执行但没有打印。</p>\n<p><strong>关联输入和输出流</strong></p>\n<ul><li><code>当一个输入流关联到一个输出流，每次从该输入流读取数据前都会先刷新关联的输出流。</code></li><li><code>标准库将 cin 和 cout 关联在一起</code>。</li></ul>\n<pre><code class=\"prism language-c\">cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"我是小呆鸟\"</span><span class=\"token punctuation\">;</span>\ncin <span class=\"token operator\">&gt;&gt;</span> ival<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// cin 和 cout 关联在一起，导致cout的缓冲区被刷新(也就是我是小呆鸟这句话先输出，然后再输入ival值。如果不同步的话（不关联）那么光标会一直闪烁)</span>\n</code></pre>\n<p><strong>输入流的成员函数 tie 可以用来查看关联的输出流或关联到输出流：</strong></p>\n<pre><code class=\"prism language-c\">cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//返回指向关联到 cin 的输出流的指针，如果没有关联的输出流，返回空指针。</span>\ncin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>cerr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//接受一个指向输出流 cerr 的指针作为参数，将 cin 与 cerr 关联在一起</span>\ncin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//cin 不再与其他流关联</span>\n</code></pre>\n<p><code>每个流最多关联到一个输出流，但一个输出流可以被多个流关联。</code></p>\n<h2><a id=\"82__154\"></a>💕8.2 文件输入输出</h2>\n<ul><li> <p><strong>头文件</strong><code>fstream</code></p> <p>定义了三个类型来支持文件IO：</p>\n<ul><li><code>ifstream</code>从一个给定文件读取数据。</li><li><code>ofstream</code>向一个给定文件写入数据。</li><li><code>fstream</code>可以读写给定文件。</li></ul> </li><li> <p><strong>文件流</strong>：需要读写文件时，必须定义自己的文件流对象，并绑定在需要的文件上。</p> </li><li> <p><code>fstream</code>继承了<code>iostream</code>类型外，还有自己特有操作</p> </li></ul>\n<table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>fstream fstrm;</code></td><td>创建一个未绑定的文件流。</td></tr><tr><td><code>fstream fstrm(s);</code></td><td>创建一个文件流，并打开名为<code>s</code>的文件，<code>s</code>可以是<code>string</code>也可以是<code>char</code>指针</td></tr><tr><td><code>fstream fstrm(s, mode);</code></td><td>与前一个构造函数类似，但按指定<code>mode</code>打开文件</td></tr><tr><td><code>fstrm.open(s)</code></td><td>打开名为<code>s</code>的文件，并和<code>fstrm</code>绑定</td></tr><tr><td><code>fstrm.close()</code></td><td>关闭和<code>fstrm</code>绑定的文件</td></tr><tr><td><code>fstrm.is_open()</code></td><td>返回一个<code>bool</code>值，指出与<code>fstrm</code>关联的文件是否成功打开且尚未关闭</td></tr></tbody></table>\n<p>上表中，<code>fstream</code>是头文件<code>fstream</code>中定义的一个类型，<code>fstrm</code>是一个文件流对象。</p>\n<h3><a id=\"821__178\"></a>⭐️8.2.1 使用文件流对象</h3>\n<ul><li><strong>当想要读写一个文件时，可以定义一个文件流对象，并将对象与文件关联起来</strong></li></ul>\n<p><strong>fstream 定义和初始化</strong></p>\n<pre><code class=\"prism language-c\">fstream fs<span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// 创建一个未绑定的文件流 fs</span>\nfstream <span class=\"token function\">fs</span><span class=\"token punctuation\">(</span><span class=\"token char\">'data.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 创建一个绑定到文件 data.txt 的文件流 fs,并打开文件 data.txt</span>\nfstream <span class=\"token function\">fs</span><span class=\"token punctuation\">(</span><span class=\"token char\">'data.txt'</span><span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 与上一个构造函数类似，但是按指定模式 mode 打开文件</span>\n</code></pre>\n<p><strong>fstream 特有操作</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>ifs<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 从一个输入流 ifs 读取一行字符串存入 s 中</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token char\">'data.ext'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 将 fs 与文件 data.txt 绑定并打开该文件。如果已打开会发生错误。</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 关闭 fs 绑定的文件。</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">is_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 返回一个 bool 值，指出关联文件是否成功打开。</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7241cf9745304964a5a597fd4296f62c.png\"/></p>\n<ul><li>当定义了一个空的文件流对象，使用 open 函数将其与文件关联并打开文件。</li><li>如果 open 失败，failebit 会被置位，<code>建议每次 open 后检测 open 是否成功</code>。</li><li>不能对已打开的文件流调用 open。</li><li><code>当文件关闭后，可以将文件流关联到另一个文件</code>。</li><li>当一个 <code>fstream</code> 对象被销毁时，close 函数会自动被调用。</li></ul>\n<p><strong>用 fstream 代替 iostream</strong></p>\n<ul><li>使用 iostream 类型的引用作为函数参数的地方，都可以使用 fstream 来代替。(在使用基类型对象的地方，也可以用继承类型的对象文件)</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9134d1cea381469fbc028e64c2b2a59a.png\"/><br/> 可以与p229页程序做对比</p>\n<p><strong>自动构造和析构</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d4dc7c15bed14c4ba988b3c5a026523c.png\"/></p>\n<h3><a id=\"822__216\"></a>⭐️8.2.2 文件模式</h3>\n<ul><li>每次打开文件都以某种模式打开，如未指定即以该文件流类型的默认模式打开。</li><li>每个流都有一个关联的文件模式，用来指出如何使用文件</li></ul>\n<table><thead><tr><th>文件模式</th><th>解释</th></tr></thead><tbody><tr><td><code>in</code></td><td>以读的方式打开</td></tr><tr><td><code>out</code></td><td>以写的方式打开</td></tr><tr><td><code>app</code></td><td>每次写操作前均定位到文件末尾</td></tr><tr><td><code>ate</code></td><td>打开文件后立即定位到文件末尾</td></tr><tr><td><code>trunc</code></td><td>截断文件</td></tr><tr><td><code>binary</code></td><td>以二进制方式进行IO操作。</td></tr></tbody></table>\n<p><strong>文件模式的使用</strong></p>\n<ul><li>每个流对象都有默认的文件模式，ifstream 默认 in 模式打开文件，ofstream 默认 out，fstream 默认 in 和 out。</li><li><code>对 ifstream 对象不能设置 out 模式，对 ofstream 对象不能设置 in 模式</code></li><li>只有设置了 out 才能设置 trunc 模式，只设置 out 模式会默认也设置 trunc 模式</li><li>设置了 trunc 就不能再设置 app 模式</li><li><code>默认情况下以 out 模式打开文件会使文件内容被清空，如果要保留文件内容需要同时指定 app 模式或 in 模式。</code></li><li><code>app 模式下，会将写入的数据追加写到文件末尾</code></li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5310b41e8f294c2aa6e3d4b1e488a310.png\"/></p>\n<h2><a id=\"83_string_240\"></a>💕8.3 string流</h2>\n<ul><li> <p>从string读写数据，就像string是一个IO流一样</p> </li><li> <p><code>stringstream</code>继承了<code>iostream</code>但是自己也有一些独特的操作</p> </li><li> <p>头文件<code>sstream</code>定义了三个类型来支持内存IO：</p>\n<ul><li><code>istringstream</code>从<code>string</code>读取数据。</li><li><code>ostringstream</code>向<code>string</code>写入数据。</li><li><code>stringstream</code>可以读写给定<code>string</code>。</li></ul> </li></ul>\n<p><strong>string的一些操作</strong></p>\n<table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>sstream strm</code></td><td>定义一个未绑定的<code>stringstream</code>对象</td></tr><tr><td><code>sstream strm(s)</code></td><td>定义一个 <code>stringstream</code> 对象 <code>strm</code>，<code>strm</code> 中保存着 <code>string s</code> 的拷贝。</td></tr><tr><td><code>strm.str()</code></td><td>返回<code>strm</code>所保存的<code>str</code>的拷贝</td></tr><tr><td><code>strm.str(s)</code></td><td>将 <code>string s</code> 拷贝到<code>strm</code>中，返回 <code>void</code></td></tr></tbody></table>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a9f4c3a4e66244d69ddd9e4ac6b87a6a.png\"/></p>\n<ul><li><code>istringstream</code>作为数据源，将<code>line</code>的内容拷贝到<code>istringstream</code>流里面去，绑定刚读入的行。</li><li>此时张三和电话就保存到了流中，在通过流把张三和电话存起来。</li></ul>\n<h3><a id=\"832_ostringstream_262\"></a>⭐️8.3.2 使用ostringstream</h3>\n<p>可以想象成<code>cin</code> 和 <code>cout</code>，只不过<code>cin</code>和<code>cout</code>的操作对象是控制台.</p>\n<ul><li><code>istringstream</code> 是输入流，即读操作，要将流中的内容输入到字符串中，因此定义和使用 <code>istringstream</code> 时流内必须有内容，所以<code>在使用前要提前在流内保存一个字符串</code></li><li><code>ostringstream</code> 是输出流，即写操作，将流中的内容输出到字符串中，<code>ostringstream 可以在定义时即在流中保存一个字符串，也可以通过 &lt;&lt; 操作符获得字符串</code>。</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cf1ca41cb1ed481c8357a7557f3e1008.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a512fc06b05a47c68b22fff8ca155485.jpeg\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\355f9920f73c40608ed1031aa9dfee63.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 1, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-04 21:21:58", "summary": "在这里插入图片描述作者简介博主在读机器人研究生，目前研一。对计算机后端感兴趣，喜欢目前熟悉，语言，数据库，网络编程，了解分布式等相关内容博主在读机器人研究生，目前研一。对计算机后端感兴趣，喜欢目前熟悉"}