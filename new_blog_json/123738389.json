{"blogid": "123738389", "writerAge": "码龄4年", "writerBlogNum": "35", "writerCollect": "121", "writerComment": "5", "writerFan": "11", "writerGrade": "2级", "writerIntegral": "327", "writerName": "Aiolei", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123738389.jpg", "writerRankTotal": "46168", "writerRankWeekly": "690119", "writerThumb": "20", "writerVisitNum": "33883", "blog_read_count": "14619", "blog_time": "已于 2022-03-25 16:17:44 修改", "blog_title": "C++中vector使用方法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#1__11\">1. 基本操作</a></li><li><a href=\"#2__75\">2. 算法</a></li><li><a href=\"#3_vector_109\">3. 输出vector的中的元素（三种方法）</a></li></ul>\n</div>\n<br/> 在C++中，vector是一个十分有用的容器，是一个能够存放任意类型的动态数组，能够增加和压缩数据。\n<p></p>\n<p><b>vector的优点:</b><br/> （1）可将容器中元素翻转、复制元素、找到元素值对应的位置<br/> （2）迭代器可以按照不同的方式遍历容器<br/> （3）可在容器的末尾增加或删除元素<br/> （4）可在任意位置插入数据<br/> 与数组相比，容器在自动处理容量的大小时会消耗更多的内存，但能很好的调整存储空间大小。<br/> <br/></p>\n<h1><a id=\"1__11\"></a>1. 基本操作</h1>\n<p>(1) 头文件:</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector&gt;</span></span>\n</code></pre>\n<p>(2) 创建vector对象:</p>\n<pre><code class=\"prism language-cpp\">vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> array<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>(3) 向量尾部插入/删除元素：</p>\n<pre><code class=\"prism language-cpp\">array<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//尾部插入数字a</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//删除向量的最后一个元素</span>\n</code></pre>\n<p>(4) 使用下标访问元素:</p>\n<pre><code class=\"prism language-cpp\">array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token comment\">//使用at(),当这个函数越界时会抛出一个异常</span>\n</code></pre>\n<p>(5) 使用迭代器访问元素:</p>\n<pre><code class=\"prism language-cpp\">vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator it<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">=</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">!=</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span>it<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>(6) 插入元素：</p>\n<pre><code class=\"prism language-cpp\">array<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//在第i+1个元素前面插入a;</span>\n</code></pre>\n<p>(7) 删除元素：</p>\n<pre><code class=\"prism language-cpp\">array<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//删除第3个元素</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//删除区间[i,j-1],区间从0开始</span>\n</code></pre>\n<p>(8) 向量大小: <code>array.size();</code><br/> (9) 清空: <code>array.clear();</code><br/> (10) 判空：</p>\n<pre><code class=\"prism language-cpp\">array<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//当元素个数为0时返回true，否则为false</span>\n</code></pre>\n<p>(11) 返回最后一个元素：<code>array.back();</code><br/> (12) 返回第一个元素：<code>array.front();</code><br/> (13) 返回内存中总共可以容纳的元素个数：<code>array.capacity();</code><br/> (14) 调整元素个数：</p>\n<pre><code class=\"prism language-cpp\">a<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将a的现有元素个数调至10个，多则删，少则补，其值随机</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将a的现有元素个数调至10个，多则删，少则补，其值为2</span>\n</code></pre>\n<p>(15）扩充容量：</p>\n<pre><code class=\"prism language-cpp\">a<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将a的容量（capacity）扩充至100</span>\n</code></pre>\n<p>(16）两向量交换：</p>\n<pre><code class=\"prism language-cpp\">a<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将a中的元素和b中的元素进行整体性交换</span>\n</code></pre>\n<p>(17）向量的比较：</p>\n<pre><code class=\"prism language-cpp\">向量的比较操作 <span class=\"token operator\">==</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">&gt;=</span> <span class=\"token operator\">&lt;=</span> <span class=\"token operator\">&gt;</span> <span class=\"token operator\">&lt;</span>  \na<span class=\"token operator\">==</span>b<span class=\"token punctuation\">;</span>\n</code></pre>\n<p><b>重要说明：</b>vector的元素不仅仅可以是int,double,string,还可以是结构体，但是要注意：结构体要定义为全局的，否则会出错。&gt;重要说明：vector的元素不仅仅可以是int,double,string,还可以是结构体，但是要注意：结构体要定义为全局的，否则会出错。<br/> <br/></p>\n<h1><a id=\"2__75\"></a>2. 算法</h1>\n<p>注意：进行如下操作需要加头文件</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;algorithm&gt;</span></span>\n</code></pre>\n<p>(1) 使用reverse将元素翻转：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将元素翻转，即逆序排列</span>\n</code></pre>\n<p><b>注：</b>在vector中，如果一个函数中需要两个迭代器，一般后一个都不包含.</p>\n<p>(2) 使用sort排序：<br/> 默认升序：<code>sort(array.begin(),array.end());</code><br/> 降序则调用: <code>sort(array.begin(),array.end(),Comp);</code></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">bool</span> <span class=\"token function\">Comp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> a<span class=\"token operator\">&gt;</span>b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>(3) 复制向量的元素：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">//把a中的从a.begin()（包括它）到a.end()（不包括它）的元素复制到b中，从b.begin()+1的位置（包括它）开始复制，覆盖掉原有元素</span>\n</code></pre>\n<p>(4) 查找元素的位置：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">//在a中的从a.begin()（包括它）到a.end()（不包括它）的元素中查找10，若存在返回其在向量中的位置</span>\n</code></pre>\n<br/>\n<h1><a id=\"3_vector_109\"></a>3. 输出vector的中的元素（三种方法）</h1>\n<pre><code class=\"prism language-cpp\">vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">&gt;</span> vecClass<span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">int</span> nSize <span class=\"token operator\">=</span> vecClass<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n\n<span class=\"token comment\">//方法一（下标方式）打印vecClass </span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>nSize<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>    \n<span class=\"token punctuation\">{<!-- --></span>    \n   cout<span class=\"token operator\">&lt;&lt;</span>vecClass<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"     \"</span><span class=\"token punctuation\">;</span>    \n<span class=\"token punctuation\">}</span>    \ncout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>   \n   \n<span class=\"token comment\">//方法二（下标方式）打印vecClass     </span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>nSize<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>    \n<span class=\"token punctuation\">{<!-- --></span>    \n   cout<span class=\"token operator\">&lt;&lt;</span>vecClass<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"     \"</span><span class=\"token punctuation\">;</span>    \n<span class=\"token punctuation\">}</span>    \ncout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>    \n   \n<span class=\"token comment\">//方法三（遍历器方式）打印vecClass：输出某一指定的数值时不方便</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator it <span class=\"token operator\">=</span> vecClass<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">!=</span>vecClass<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>    \n<span class=\"token punctuation\">{<!-- --></span>    \n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span>it<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"   \"</span><span class=\"token punctuation\">;</span>    \n<span class=\"token punctuation\">}</span>    \ncout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>    \n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-25 16:17:44", "summary": "目录基本操作算法输出的中的元素三种方法在中，是一个十分有用的容器，是一个能够存放任意类型的动态数组，能够增加和压缩数据。的优点可将容器中元素翻转、复制元素、找到元素值对应的位置迭代器可以按照不同的方式"}