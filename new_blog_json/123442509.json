{"blogid": "123442509", "writerAge": "码龄3年", "writerBlogNum": "29", "writerCollect": "50", "writerComment": "6", "writerFan": "3", "writerGrade": "2级", "writerIntegral": "345", "writerName": "WilhelmLiu", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123442509.jpg", "writerRankTotal": "45765", "writerRankWeekly": "277695", "writerThumb": "47", "writerVisitNum": "26892", "blog_read_count": "2225", "blog_time": "于 2022-03-12 15:18:57 发布", "blog_title": "C# 数据流的读取操作", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"C__0\"></a>C# 数据流的读取操作</h1>\n<blockquote>\n<p>数据流一般具有读写操作。<br/> 1、读（Read）操作：读出流对象中的数据，并把它存放到另一个数据结构中。<br/> 2、写（Write）操作：从另一种数据结构中读取数据并存放到流对象中。</p>\n</blockquote>\n<h2><a id=\"1_6\"></a>1、所有文件类型的读取和写入</h2>\n<blockquote>\n<p>文件流（FileStream）类，是用来实现对文件的读取和写入的。</p>\n</blockquote>\n<p>FileStream类的构造有多种形式，最常用的一种如下所示：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token function\">FileStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> path<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FileMode</span> mode<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FileAccess</span> access<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code>其中，path表示将要操作的文件路径，而参数mode和access都是一个枚举值。\n</code></pre>\n<p>FileMode类的枚举成员：</p>\n<table><thead><tr><th>枚举值</th><th>文件存在说明</th><th>文件不存在说明</th></tr></thead><tbody><tr><td>Append</td><td>打开并定位结尾</td><td>创建新文件</td></tr><tr><td>Create</td><td>改写文件</td><td>创建新文件</td></tr><tr><td>CreateNew</td><td>异常</td><td>创建新文件</td></tr><tr><td>Open</td><td>打开文件</td><td>异常</td></tr><tr><td>OpenOrCreate</td><td>打开文件</td><td>创建新文件</td></tr><tr><td>Truncate</td><td>将文件截断到0字节</td><td>异常</td></tr></tbody></table>\n<p>FileAccess类的枚举成员：</p>\n<table><thead><tr><th>枚举值</th><th>说明</th></tr></thead><tbody><tr><td>Read</td><td>只读模式</td></tr><tr><td>Write</td><td>只写模式</td></tr><tr><td>ReadWrite</td><td>读写模式</td></tr></tbody></table>\n<p><strong>复制</strong>C#入门基础.pdf<strong>文件案例</strong>：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">string</span> path <span class=\"token operator\">=</span> <span class=\"token string\">@\"C:\\Users\\Administrator\\Desktop\\C#入门基础.pdf\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">string</span> copyPath <span class=\"token operator\">=</span> <span class=\"token string\">@\"C:\\Users\\Administrator\\Desktop\\C#入土教程.pdf\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">FileStream</span> fsRead <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileStream</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> FileMode<span class=\"token punctuation\">.</span>OpenOrCreate<span class=\"token punctuation\">,</span> FileAccess<span class=\"token punctuation\">.</span>Read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">FileStream</span> fsWriter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileStream</span><span class=\"token punctuation\">(</span>copyPath<span class=\"token punctuation\">,</span> FileMode<span class=\"token punctuation\">.</span>OpenOrCreate<span class=\"token punctuation\">,</span> FileAccess<span class=\"token punctuation\">.</span>Write<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//一次读取5M内容</span>\n    <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> fsRead<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//实际读取的有效字节数</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//读到最后内容</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//以ANSI默认格式读取文本内容</span>\n    <span class=\"token comment\">//string tempStr = Encoding.Default.GetString(buffer, 0, r);</span>\n    <span class=\"token comment\">//Console.WriteLine(tempStr);</span>\n\n    fsWriter<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//关闭流</span>\nfsWriter<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//释放流占用的资源</span>\nfsWriter<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//关闭流</span>\nfsRead<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//释放流占用的资源</span>\nfsRead<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"复制完成.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>C#采用【<strong>using</strong>】来自动关闭流并释放流占用的资源。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">string</span> path <span class=\"token operator\">=</span> <span class=\"token string\">@\"C:\\Users\\Administrator\\Desktop\\C#入门基础.pdf\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">string</span> copyPath <span class=\"token operator\">=</span> <span class=\"token string\">@\"C:\\Users\\Administrator\\Desktop\\C#入土教程.pdf\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//将创建文件流对象的过程写在using当中，会自动关闭流并释放流占用的资源</span>\n<span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileStream</span> fsRead <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileStream</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> FileMode<span class=\"token punctuation\">.</span>OpenOrCreate<span class=\"token punctuation\">,</span> FileAccess<span class=\"token punctuation\">.</span>Read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileStream</span> fsWrite <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileStream</span><span class=\"token punctuation\">(</span>copyPath<span class=\"token punctuation\">,</span> FileMode<span class=\"token punctuation\">.</span>OpenOrCreate<span class=\"token punctuation\">,</span> FileAccess<span class=\"token punctuation\">.</span>Write<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> fsRead<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            fsWrite<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"复制完成.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"2_95\"></a>2、文本文件的读取和写入</h2>\n<blockquote>\n<p>对于文本文件，通常采用以下两个类进行处理。<br/> <strong>StreamReader</strong>类，可以直接读取文本文件的内容。<br/> <strong>StreamWriter</strong>类，允许直接将字符和字符串写入文件，因此一般用来对文本文件的写入。</p>\n</blockquote>\n<p>StreamRead读取文本文件：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">string</span> path <span class=\"token operator\">=</span> <span class=\"token string\">@\"C:\\Users\\Administrator\\Desktop\\a.txt\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//采用默认ANSI编码格式进行读取</span>\n<span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StreamReader</span> sr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StreamReader</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> Encoding<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//在读取末端进行判断，并循环读取</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sr<span class=\"token punctuation\">.</span>EndOfStream<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//输出每一行读取的内容</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>sr<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>StreamWriter写入文本文件：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">string</span> path <span class=\"token operator\">=</span> <span class=\"token string\">@\"C:\\Users\\Administrator\\Desktop\\a.txt\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//第二参数：默认false，可以不写，表示覆盖内容。true表示为文件追加内容</span>\n<span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StreamWriter</span> sw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StreamWriter</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    sw<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"追加内容\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    sw<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"追加内容\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"写入完成.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"3_130\"></a>3、二进制文件的读取和写入</h2>\n<blockquote>\n<p>对于二进制文件，通常采用下面两个类进行处理。<br/> <strong>BinaryReader</strong>类，用于二进制文件的读取，且处理的<strong>必须</strong>是二进制文件。<br/> <strong>BinaryWriter</strong>类，用于二进制文件的写入。写入的文件可以不是二进制文件。</p>\n</blockquote>\n<p>BinaryReader读取二进制文件：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">string</span> path <span class=\"token operator\">=</span> <span class=\"token string\">@\"C:\\Users\\Administrator\\Desktop\\a.txt\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BinaryWriter</span> bw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BinaryWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileStream</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> FileMode<span class=\"token punctuation\">.</span>OpenOrCreate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    bw<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"写入内容.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"写入成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>BinaryWriter写入文件：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">string</span> path <span class=\"token operator\">=</span> <span class=\"token string\">@\"C:\\Users\\Administrator\\Desktop\\a.txt\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BinaryReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BinaryReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileStream</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> FileMode<span class=\"token punctuation\">.</span>OpenOrCreate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">ReadString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>因为作者精力有限，文章中难免出现一些错漏，敬请广大专家和网友批评、指正。</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-12 15:18:57", "summary": "数据流的读取操作数据流一般具有读写操作。、读操作：读出流对象中的数据，并把它存放到另一个数据结构中。、写操作：从另一种数据结构中读取数据并存放到流对象中。、所有文件类型的读取和写入文件流类，是用来实现"}