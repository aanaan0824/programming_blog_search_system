{"blogid": "123654066", "writerAge": "None", "writerBlogNum": "47", "writerCollect": "26", "writerComment": "0", "writerFan": "39", "writerGrade": "3级", "writerIntegral": "502", "writerName": "MASA team", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123654066.jpg", "writerRankTotal": "33609", "writerRankWeekly": "23078", "writerThumb": "5", "writerVisitNum": "27879", "blog_read_count": "2466", "blog_time": "于 2022-03-22 11:39:24 发布", "blog_title": "MASA Blazor入门这一篇就够了", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"1Blazor___1\"></a>1.什么是Blazor? 有什么优势？</h2>\n<p><a href=\"https://docs.microsoft.com/zh-cn/aspnet/core/blazor/?view=aspnetcore-6.0\">ASP.NET Core Blazor 简介</a></p>\n<p>Blazor 是一个使用 Blazor 生成交互式客户端 Web UI 的框架：</p>\n<ol><li>使用 C# 代替 JavaScript 来创建信息丰富的交互式 UI。</li><li>共享使用 .NET 编写的服务器端和客户端应用逻辑。</li><li>将 UI 呈现为 HTML 和 CSS，以支持众多浏览器，其中包括移动浏览器。</li><li>与新式托管平台（如 Docker）集成。</li></ol>\n<p>Blazor 优势：</p>\n<pre><code>  1. 使用 C# 代替 JavaScript 来编写代码。\n  2. 利用现有的 .NET 库生态系统。\n  3. 在服务器和客户端之间共享应用逻辑。\n  4. 受益于 .NET 的性能、可靠性和安全性。\n  5. 在 Windows、Linux 和 macOS 上使用 Visual Studio 保持高效工作。\n  6. 以一组稳定、功能丰富且易用的通用语言、框架和工具为基础来进行生成。\n</code></pre>\n<h2><a id=\"2MASA_Blazor_22\"></a>2.为什么选择MASA Blazor？能用来干什么？</h2>\n<p>MASA Blazor是一个基于 Blazor Component 和 Material Design 的 UI 组件库。<br/> dotNET开发者不需要懂得javascript就能开发一个企业级中后台系统。<br/> MASA Blazor优势：</p>\n<ul><li>丰富组件：包含Vuetify 1:1还原的基础组件，以及很多实用的预置组件和.Net深度集成功能，包括Url、面包 屑、导航三联动，高级搜索，i18n等。</li><li>UI设计语言：设计风格现代，UI 多端体验设计优秀。</li><li>简易上手：丰富详细的上手文档，免费的视频教程（制作中）。</li><li>社区活跃鼓励：用户参与实时互动，做出贡献加入我们，构建最开放的开源社区。</li><li>长期支持：全职团队维护，并提供企业级支持。</li><li>专业示例：MASA Blazor Pro提供多种常见场景的预设布局。</li></ul>\n<p>MASA Blazor Pro预设布局示例：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\be50be9c5a11b3e9afeb8ba2a01e7d30.png\"/><br/> <img alt=\"\" src=\"..\\..\\static\\image\\080706e2c2b6f84db01cbf2821250f0b.png\"/></p>\n<p>看到这里是不是有同学对此感兴趣起来了呢！那么这样的布局页面是怎么构建出来的呢？我们自己能不能也搭建一个这样的布局呢！嘿嘿！不要着急、我们接着往下看。</p>\n<h2><a id=\"3MASA_BlazorBlazor_40\"></a>3.使用MASA Blazor模板创建第一个Blazor程序</h2>\n<h3><a id=\"1MasaTemplate_42\"></a>1.首先安装Masa.Template模板</h3>\n<p>（1）检查本机.Net SDK版本，请确保已安装.NET6.0</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\2a87daca24d7735a42d843ccf4fb5269.png\"/></p>\n<p>（2）安装 Masa.Template模板,包含 MASA 系列所有项目模板<br/> dotnet new --install Masa.Template<br/> <img alt=\"\" src=\"..\\..\\static\\image\\f6af51ef032718258f4f4e6c945959c8.png\"/></p>\n<h3><a id=\"2_52\"></a>2.创建项目</h3>\n<p>dotnet new masab -o MasaBlazorApp<br/> 默认为Server模式 可通过参数–Mode WebAssembly 创建 WebAssembly 模式项目</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\db3f437cdcf28a946edd674b2f121c2c.png\"/></p>\n<h3><a id=\"3_MASA_Blazordotnet_run__58\"></a>3.配置 MASA Blazor（由于我这里使用了模板，以下配置在模板中都已经帮我们配好了，安装模板后直接dotnet run 即可；未安装模板的同学，按下面步骤配置即可）</h3>\n<p>（1）安装NuGet包</p>\n<pre><code>dotnet add package Masa.Blazor\n</code></pre>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\31cf6f280e35138201bbb38f55bff104.png\"/></p>\n<p>（2）引入资源文件（我这里为Blazor Server）</p>\n<p>在 Pages/_Layout.cshtml 中引入资源文件<br/> <img alt=\"\" src=\"..\\..\\static\\image\\a7cd5fa459e5c5d7871fae267aadb96c.png\"/></p>\n<p>（3）注入相关服务</p>\n<p>在 Program.cs 中添加 Masa.Blazor 相关服务</p>\n<pre><code>builder.Services.AddMasaBlazor();\n</code></pre>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\06f86bb7fdb7ab72e3e9ee98a506b18b.png\"/></p>\n<p>（4）修改 _Imports.razor 文件,添加以下内容:</p>\n<pre><code>  @using Masa.Blazor\n</code></pre>\n<p>（5）运行项目<br/> <img alt=\"\" src=\"..\\..\\static\\image\\1e04d425930d4c4ee4a85157b39e0cee.png\"/></p>\n<p>到这里一个简单的MASA Blazor项目就搭建完成啦。当然这只是最基础的，接下来我们将一步一步使用MASA Blazor项目组件来丰富我们的项目。</p>\n<h3><a id=\"3MASA_Blazor_88\"></a>3.使用MASA Blazor组件配置项目</h3>\n<p>示例：<br/> <img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/c85ab4f917f66c93ff27bab5b5b564eb.gif\"/></p>\n<h4><a id=\"1Blazor_91\"></a>（1）Blazor应用结构介绍</h4>\n<p>首先我们先来看看Blazor项目结构，分析主要几个文件的作用。（概念定义比较枯燥，想直接体验的同学可以直接跳过此部分，直接上手实践即可，但不推荐这么做，有句话说得好“磨刀不误砍柴工”</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\92c5cb822f80d22e1cf705bc68402456.png\"/></p>\n<p><strong>Program.cs</strong></p>\n<blockquote>\n<p>Blazor服务器应用的入口点在Program.cs文件中定义，与控制台应用一样。当应用执行时，它会使用特定于 Web 应用的默认值创建并运行 Web 主机实例。 Web 主机会管理 Blazor 服务器应用的生命周期，并设置主机级别服务。</p>\n<p>在 <strong>Blazor 服务器应用</strong>中，显示的 Program.cs 文件用于为 Blazor 在客户端浏览器与服务器之间使用的实时连接设置终结点。<br/> 在 <strong>BlazorWebAssembly 应用</strong>中，Program.cs 文件定义应用的根组件及其呈现位置：</p>\n</blockquote>\n<p>在Program.cs文件中我们先主要关注几个点：</p>\n<p>1.在依赖注入中，因为我们利用了Razor来实现C#和html的混合编码以及我们使用的是ServerSide的Blazor，注入代码如下：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\92809675d5b5e3ddf2e218d1292854ac.png\"/><br/> 中间件如下：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\0043451b7bd68417290abfc29cbf3c19.png\"/></p>\n<p><strong>_Host.cshtml</strong></p>\n<blockquote>\n<p>在Blazor服务器应用中，根组件的主机页面在_Host.cshtml文件中定义。这个文件定义一个Razor页面，而不是一个组件。Razor Pages 使用 Razor 语法定义服务器可寻址页面。</p>\n</blockquote>\n<p>在Program.cs文件中会自动去我们配置的_Host.cshtml文件中寻找根组件<br/> 这是默认使用App组件作为根组件（这是启动Blazor应用的必要条件之一）<br/> <img alt=\"\" src=\"..\\..\\static\\image\\36717f539bcf2300fa2dc26aa9281606.png\"/></p>\n<p>那么render-mode 特性是用来干什么的呢?<br/> 让我们来看看官方文档解释：</p>\n<blockquote>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\de6e65cab05f668591ba8ed3c73a2da6.png\"/></p>\n</blockquote>\n<p><strong>App.razor</strong><br/> Blazor应用的根组件，里面通常包含Router组件用来处理Blazor中的路由<br/> <img alt=\"\" src=\"..\\..\\static\\image\\7d955390b44d3319b3ddf6e01b1fb284.png\"/></p>\n<p>那么Router组件中的这些参数比如AppAssembly、Found、NotFound都有什么作用呢？</p>\n<p>通过阅读官方文档我们可以发现：</p>\n<blockquote>\n<p>Router 组件会在指定的 AppAssembly 和 AdditionalAssemblies（可选）中发现可路由组件。 浏览器进行导航时，如果有路由与地址匹配，Router 会拦截导航并呈现其 Found 参数的内容和提取的 RouteData，否则 Router 会呈现其 NotFound 参数。</p>\n<p>RouteView 组件负责呈现由 RouteData 指定的匹配组件及其布局（如果有）。 如果匹配组件没有布局，则使用可选择指定的 DefaultLayout。</p>\n<p>LayoutView 组件在指定布局内呈现其子内容</p>\n</blockquote>\n<p>也就是说我们在配置完.razor页面的路由后，Router组件会在浏览器进行导航时将路由与地址匹配，能够匹配到的，Router就会拦截导航并呈现其Found参数指定的匹配组件和布局（我们这里指定MainLayout布局页面），反之，则呈现NotFound参数。<br/> <img alt=\"\" src=\"..\\..\\static\\image\\0178d8ca992a8b3693c21598af68296b.png\"/></p>\n<p>_Layout.cshtml</p>\n<p>在之前的_Host.cshtml文件中我们默认指定启用了_Layout.cshtml布局页<br/> <img alt=\"\" src=\"..\\..\\static\\image\\8860010e79cd33f043026278c4fb4140.png\"/><br/> _Layout.cshtml是Blazor应用的主机页（相当于一个根页面布局文件），里面包含应用的初始化HTML 及其组件，它使得我们所有页面布局保持的外观变得更加的容易。</p>\n<p><strong>MainLayout.razor</strong></p>\n<p>在Blazor中，使用布局组件处理页面布局。布局组件继承自LayoutComponentBase,后者定义类型RenderFragment 的单个 Body 属性，该属性可用于呈现页面的内容。<br/> <img alt=\"\" src=\"..\\..\\static\\image\\c8f078b0d6e6ac4a8514723058b3cc54.png\"/></p>\n<p><strong>_Imports.razor</strong><br/> 全局导入配置，在这里使用using引入后，相当于在所有razor文件中都进行了引入。<br/> <img alt=\"\" src=\"..\\..\\static\\image\\454ba9d04f6217be163812519eab0160.png\"/></p>\n<p>好了，废话有点多, 到这里Blazor应用部分主要结构概念差不多已经介绍完了，感兴趣的同学可自行移步官网进行阅读 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/architecture/blazor-for-web-forms-developers/\">面向 Web Forms ASP.NET Web Forms 开发人员的 Blazor</a><br/> 接下来我们直接开始撸代码</p>\n<h4><a id=\"2App_barsNavigation_drawers_157\"></a>（2）使用App bars（应用栏）与Navigation drawers（导航抽屉）配置导航栏与菜单栏</h4>\n<p>上述页面展示中我们看到了三个菜单页面，这几个页面都分别配置了对应路由<br/> Home对应页面为Index.razor、路由为\"/\"<br/> <img alt=\"\" src=\"..\\..\\static\\image\\c253bbacf263ef1817cfd077785ed852.png\"/><br/> <img alt=\"\" src=\"..\\..\\static\\image\\1904091ac48dd65df726e2b314cfe2f3.png\"/></p>\n<p>Counter对应页面为Counter.razor、路由为\"/counter\"<br/> <img alt=\"\" src=\"..\\..\\static\\image\\4171902c82d3459ee48174ac1a50db93.png\"/><br/> <img alt=\"\" src=\"..\\..\\static\\image\\0a8707bff840309c4495b89165f7c83d.png\"/></p>\n<p>Fetch Data页面对应FetchData.razor页面路由，路由为\"/fetchdata\"<br/> 在Shared/MainLayout.razor页面中我们可以看到配置。<br/> <img alt=\"\" src=\"..\\..\\static\\image\\ebd4288319d462f10454c6965ef5f419.png\"/></p>\n<p>接下来我们直接移步<a href=\"https://blazor.masastack.com\">MASA Blazor 官网地址</a>找到我们需要的组件示例：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\2ce5512e2201f5a7f185cd9127a72adf.png\"/><br/> <img alt=\"\" src=\"..\\..\\static\\image\\c86ce8e1fd0a165596006dee56f60416.png\"/></p>\n<p>我们直接将示例代码拷贝至Shared/MainLayout.razor页面中的MAppBar组件中即可<br/> <img alt=\"\" src=\"..\\..\\static\\image\\245da26f3213a6349cb0dd4aa6b32c3c.png\"/></p>\n<p>dotnet run 看下效果<br/> <img alt=\"\" src=\"..\\..\\static\\image\\25145349004c21612e7575f71378e1be.png\"/></p>\n<p>接下来我们MASA Blazor组件库中找到Navigation drawers组件，将razor页面代码与C#代码拷贝至组件中即可<br/> <img alt=\"\" src=\"..\\..\\static\\image\\5f3fabe6f76a1767bee07eccb37e734b.png\"/><br/> <img alt=\"\" src=\"..\\..\\static\\image\\d7906554bd0e90ca4958daa80fc67748.png\"/></p>\n<p>我们对代码稍作修改<br/> <img alt=\"\" src=\"..\\..\\static\\image\\8dbe5ae3127db2b2a48fe48653b0ef4f.png\"/></p>\n<p>dotnet run 看下效果<br/> <img alt=\"\" src=\"..\\..\\static\\image\\88f21aec2de14c5013751102c7e6d33d.png\"/></p>\n<p>下一步我们来实现动态菜单栏伸缩功能 找到Navigation drawers组件的迷你模式<br/> <img alt=\"\" src=\"..\\..\\static\\image\\794e7771a0582d52353aeeae7342e97b.png\"/></p>\n<p>接下来我们来改造我们的代码<br/> <img alt=\"\" src=\"..\\..\\static\\image\\584f56238c3d92ccbba0c4e10884760b.png\"/><br/> <img alt=\"\" src=\"..\\..\\static\\image\\4dcc1ccedc3d03af092928387edfa0b5.png\"/></p>\n<p>dotnet run 看下效果<br/> <img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/23221e8e263702982645cce50777d4ce.gif\"/></p>\n<p>是不是感觉超级简单呢！当然这只是入门写法，抛砖引玉，感兴趣的同学可以动手试试，举一反三解锁更多组件的用法与写法</p>\n<h4><a id=\"3DataTableDialog_204\"></a>（3）使用DataTable、Dialog等组件实现一个基础的数据交互页</h4>\n<p>首先我们先初始化Fetch.razor，只留一个最简单组件<br/> <img alt=\"\" src=\"..\\..\\static\\image\\35838230bef11f575343e82fe719a18f.png\"/></p>\n<p>DataTable组件需要至少绑定一个Headers（表头）和数据源<br/> 所以下一步我们先定义Headers与Items（实际调用API获取数据即可，这里默认死数据仅作参考）<br/> 我们先建一个Fetch.razor页的分部类，定义部分代码<br/> <img alt=\"\" src=\"..\\..\\static\\image\\7c9968b62e626f17f1307332655dcb8b.png\"/></p>\n<p>dotnet run 看看效果<br/> <img alt=\"\" src=\"..\\..\\static\\image\\c3a582ee454e6c62a5ff7c227149e0a2.png\"/></p>\n<p>在上述代码截图中会发现我们用到了OnInitializedAsync()方法，那么这个方法是用来干什么的呢？说到这个问题，我们需要先了解了解Razor组件的生命周期<a href=\"https://docs.microsoft.com/en-us/aspnet/core/blazor/components/lifecycle?view=aspnetcore-6.0#when-parameters-are-set-setparametersasync\">ASP.NET Core Razor 组件生命周期</a></p>\n<p>先来看个 Component lifecycle diagram（组件生命周期图）</p>\n<blockquote>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\abbab887dbcc0452b7cf70685e02ed7c.png\"/></p>\n</blockquote>\n<p><strong>SetParametersAsync - 设置参数时</strong></p>\n<blockquote>\n<p>每当父级呈现时，都会执行此方法。<br/> 传入组件的参数包含在<code>ParameterView</code>中。这是根据传入组件的状态对服务器进行异步调用(例如)的好时机。<br/> 在重写中调用<code>base.SetParametersAsync(Parameters)</code>时，会为组件的<code>[Parameter]</code>属性赋值。<br/> <strong>它也是指定默认参数值的正确位置。</strong></p>\n</blockquote>\n<p><strong>OnInitialized / OnInitializedAsync - 组件初始化</strong></p>\n<blockquote>\n<p>将<code>ParameterCollection</code>中的状态分配给组件的<code>[Parameter]</code>属性后，将执行这些方法。这与<code>SetParametersAsync</code>的用法相同，不同之处在于可以使用组件的状态。</p>\n</blockquote>\n<blockquote>\n<p>该方法仅在组件首次创建时执行一次。如果父级稍后更改组件的参数，则跳过此方法。<br/> 注意：当组件是@page，并且Blazor应用程序导航到呈现同一页面的新URL时，Blazor将为该页面重用当前对象实例。因为该对象是同一实例，所以Blazor不会对该对象调用IDisposable.Dispose，也不会再次执行其OnInitialized方法。</p>\n</blockquote>\n<p><strong>OnParametersSet / OnParametersSetAsync - 参数设置后</strong></p>\n<blockquote>\n<p>如果这是组件的新实例，则此方法将在<code>OnInitializedAsync</code>之后立即执行。如果它是因为其父组件正在重新呈现而正在重新呈现的现有组件，则不会执行<code>OnInitialized*</code>方法，而是在<code>SetParametersAsync</code>之后立即执行此方法。</p>\n</blockquote>\n<p><strong>OnAfterRender / OnAfterRenderAsync - 组件渲染后</strong></p>\n<blockquote>\n<p>这两个方法在Blazor每次重新生成组件的<br/> <a href=\"https://blazor-university.com/components/render-trees/\">RenderTree</a><br/> 时执行。这可能是因为组件的父级重新呈现、用户与组件交互(例如，鼠标单击)，或者如果组件执行其StateHasChanged方法来调用重新呈现。</p>\n</blockquote>\n<p>了解Razor组件的生命周期后，我们来继续撸代码</p>\n<p>我们给数据表格增加操作列<br/> <img alt=\"\" src=\"..\\..\\static\\image\\db1575836032b5d9de403c5a28f1c561.png\"/><br/> <img alt=\"\" src=\"..\\..\\static\\image\\b8bead3507993213213561f83779512c.png\"/></p>\n<p>看下效果：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\b7a48601053522ce741f3636b88b1de8.png\"/><br/> 接下来我们给增加一个MDialog 对话框 用来做增加修改操作<br/> 直接将官网的示例拿过来即可<br/> <img alt=\"\" src=\"..\\..\\static\\image\\e74a0e03157452d551863084b40b509e.png\"/><br/> <img alt=\"\" src=\"..\\..\\static\\image\\648251b74916f815a7ee688435c8515c.png\"/></p>\n<p>在这过程中我们需要给Dialog组件以及组件中的其他组件使用Bind-Value（双向绑定）绑上值。<br/> <img alt=\"\" src=\"..\\..\\static\\image\\f2c42730970ae12cc0c357179472ec3e.png\"/><br/> <img alt=\"\" src=\"..\\..\\static\\image\\794e959fccabfbc2f5cdca945176c9ed.png\"/></p>\n<p>接下来我们给数据表格的Action操作列增加OnClick点击事件<br/> <img alt=\"\" src=\"..\\..\\static\\image\\492f13af2dd136efae8fde4f2b7969bb.png\"/></p>\n<p>对应绑定分部类中EditItem方法<br/> <img alt=\"\" src=\"..\\..\\static\\image\\14b451f651bfa5b05fe855f7d2e44b06.png\"/></p>\n<p>我们先运行看下效果：<br/> <img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/ddf6581edbce761cfe0f643ea1936ddb.gif\"/></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\7e93a984e78f0734ea4a86572d0c25d2.png\"/><br/> 这两个按钮分别对应两个Button<br/> <img alt=\"\" src=\"..\\..\\static\\image\\82251c06c0af59e62fe132f954a2165e.png\"/></p>\n<p>Close直接绑定后台关闭Dialog方法</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\2b4f9dd5ce441f67659cbfe620fc3fe2.png\"/></p>\n<p>Save方法则是用来做最终修改数据等操作DB的方法这里就不做演示，感兴趣的同学可自行结合业务做相应的操作。</p>\n<h4><a id=\"4_282\"></a>（4）使用预置组件应对常用业务的场景</h4>\n<p>在我们实际项目中，难免会碰到需要你开发多个模块或者多个管理页面，这样一来每个页面不可避免的会有一些需要你重复编码的地方，那么你是选择每个页面copy一份相同的代码还是选择封装一个业务组件呢？毫无疑问，聪明的同学肯定会选择后者，当然新入门的同学可以先来看看MASA Blazor提供预置组件，拿来即用，后期同学们登堂入室后可自行根据当前业务封装业务组件。</p>\n<p>我们先来看看通用页头预置组件：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\5302c408a7aec8e958affc4e6c49c821.png\"/><br/> 直接copy代码看看效果：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\02561c8905f00f0b98758788de3bb7aa.png\"/></p>\n<p>当我们数据表格中数据内容长度过长时可以使用封装好的预置组件：<br/> 看看效果：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\0d70d187275d84bc9ff115166f231c4d.png\"/></p>\n<p>使用方法很简单且支持复制效果：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\4aedd05995fa5cc248e1cb6263072676.png\"/><br/> 当然还有其他常用的预置组件，由于本文篇幅有限，只做个别组件使用介绍，使用方法都大差不差，感兴趣的同学可自行去官网查阅。</p>\n<h3><a id=\"_298\"></a>结尾</h3>\n<p>本文介绍内容只针对刚入门的同学，抛砖引玉，对于封装组件技巧以及组件高深用法感兴趣的同学可以关注我们同系列其他同学的文章或者直接去官网查看源码：</p>\n<p><a href=\"https://www.cnblogs.com/capdiem/p/15989345.html\">使用MASA Blazor开发一个标准的查询表格页以及封装技巧介绍</a></p>\n<h4><a id=\"_303\"></a>参考资源</h4>\n<ul><li><a href=\"https://blazor.masastack.com/\">https://blazor.masastack.com/</a></li><li><a href=\"https://github.com/BlazorComponent/MASA.Blazor\">https://github.com/BlazorComponent/MASA.Blazor</a></li><li><a href=\"https://gitee.com/blazorcomponent/MASA.Blazor\">https://gitee.com/blazorcomponent/MASA.Blazor</a></li><li><a href=\"https://blazor-pro.masastack.com/dashboards/ecommerce\">https://blazor-pro.masastack.com/dashboards/ecommerce</a></li><li><a href=\"https://github.com/BlazorComponent/MASA.Blazor.Pro\">https://github.com/BlazorComponent/MASA.Blazor.Pro</a></li><li><a href=\"https://blazor-university.com/\">https://blazor-university.com/</a></li><li><a href=\"https://github.com/capdiem/MASA.Blazor.Experimental.Components/blob/main/src/Components/GenericColumnRender/GenericColumnRender.razor\">https://github.com/capdiem/MASA.Blazor.Experimental.Components</a></li></ul>\n<h2><a id=\"_313\"></a>开源地址</h2>\n<p>MASA.BuildingBlocks：https://github.com/masastack/MASA.BuildingBlocks</p>\n<p>MASA.Contrib：https://github.com/masastack/MASA.Contrib</p>\n<p>MASA.Utils：https://github.com/masastack/MASA.Utils</p>\n<p>MASA.EShop：https://github.com/masalabs/MASA.EShop</p>\n<p>MASA.Blazor：https://github.com/BlazorComponent/MASA.Blazor</p>\n<p>如果你对我们的 MASA Framework 感兴趣，无论是代码贡献、使用、提 Issue，欢迎联系我们</p>\n<p><img alt=\"16373211753064.png\" src=\"..\\..\\static\\image\\83d6e7c7af28b5f4dd26a475a87bd0b2.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 1, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-03-22 11:39:24", "summary": "什么是有什么优势？简介是一个使用生成交互式客户端的框架：使用代替来创建信息丰富的交互式。共享使用编写的服务器端和客户端应用逻辑。将呈现为和，以支持众多浏览器，其中包括移动浏览器。与新式托管平台如集成。"}