{"blogid": "126689622", "writerAge": "码龄15年", "writerBlogNum": "312", "writerCollect": "572", "writerComment": "278", "writerFan": "1764", "writerGrade": "6级", "writerIntegral": "6530", "writerName": "与自己作战", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126689622.jpg", "writerRankTotal": "2688", "writerRankWeekly": "383", "writerThumb": "375", "writerVisitNum": "385438", "blog_read_count": "285", "blog_time": "已于 2022-09-05 13:28:48 修改", "blog_title": "Java 进阶IO流(二)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_1\">一、字符流</a></li><li><ul><li><a href=\"#1FileReader_2\">1、FileReader文件字符写入流</a></li><li><a href=\"#2FIleWriter_44\">2、FIleWriter文件字符输出流</a></li></ul>\n</li><li><a href=\"#_106\">二、缓冲流</a></li><li><ul><li><a href=\"#1_107\">1、概念</a></li><li><a href=\"#2_111\">2、优化原理</a></li><li><a href=\"#3_115\">3、体系图</a></li><li><a href=\"#4_117\">4、字节缓冲流</a></li><li><ul><li><a href=\"#1BufferedInputStream_118\">1）BufferedInputStream字节缓冲输入流</a></li><li><a href=\"#2BufferedOutputStream_121\">2）BufferedOutputStream字节缓存输出流</a></li></ul>\n</li><li><a href=\"#5_168\">5、字符缓冲流</a></li><li><ul><li><a href=\"#1BufferedReader_169\">1）BufferedReader字符缓冲输入流</a></li><li><a href=\"#2BufferedWriter_180\">2）BufferedWriter字符缓冲输出流</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_223\">三、转换流</a></li><li><ul><li><a href=\"#1InputStreamReader_225\">1、InputStreamReader字符输入转换流</a></li><li><a href=\"#2OutputStreamWriter_263\">2、OutputStreamWriter字符输出转换流</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>一、字符流</h1>\n<h2><a id=\"1FileReader_2\"></a>1、FileReader文件字符写入流</h2>\n<blockquote>\n<p>把磁盘中的数据以字符的形式读入到内存中</p>\n</blockquote>\n<table><thead><tr><th>构造器</th><th>解释</th></tr></thead><tbody><tr><td><code>public FileReader​(File file)</code></td><td>创建字符输入流管道与源文件对象接通</td></tr><tr><td><code>public FileReader​(String pathname)</code></td><td>创建字符输入流管道与源文件路径接通</td></tr></tbody></table>\n<table><thead><tr><th>方法名</th><th>解释</th></tr></thead><tbody><tr><td><code>public int read()</code></td><td>每次读取一个字符，没有字符返回-1</td></tr><tr><td><code>public int read(char[] buffer)</code></td><td>每次读取一个字符数组，没有字符返回-1</td></tr></tbody></table>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4e1dcbaa6b45458cb1181319305108c6.png\"/></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassStructure</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> read <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//创建一个读入数据的相对路径的流</span>\n        <span class=\"token class-name\">FileReader</span> fileReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data/access.log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//直接读取字符输出</span>\n<span class=\"token comment\">//        while((read = fileReader.read()) != -1){<!-- --></span>\n<span class=\"token comment\">//            System.out.printf(\"%c\",read);</span>\n<span class=\"token comment\">//        }</span>\n\n        <span class=\"token comment\">//根据数组存储要求输出</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> by <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>read <span class=\"token operator\">=</span> fileReader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>by<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>by<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//关闭读入流</span>\n        fileReader<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n</code></pre>\n<h2><a id=\"2FIleWriter_44\"></a>2、FIleWriter文件字符输出流</h2>\n<blockquote>\n<p>把内存中的数据以字符的形式写出到磁盘中</p>\n</blockquote>\n<ul><li>构造器</li></ul>\n<table><thead><tr><th align=\"left\">构造器</th><th>解释</th></tr></thead><tbody><tr><td align=\"left\"><code>public FileWriter(File file)</code></td><td>创建字符输出流管道与源文件对象接通</td></tr><tr><td align=\"left\"><code>public FileWriter​(File file，boolean append)</code></td><td>创建字符输出流管道与源文件对象接通，<br/>可追加数据</td></tr><tr><td align=\"left\"><code>public FileWriter​(String filepath)</code></td><td>创建字符输出流管道与源文件路径接通</td></tr><tr><td align=\"left\"><code>public FileWriter​(String filepath，boolean append)</code></td><td>创建字符输出流管道与源文件路径接通，<br/>可追加数据</td></tr></tbody></table>\n<ul><li>常用方法</li></ul>\n<table><thead><tr><th>方法名</th><th>解释</th></tr></thead><tbody><tr><td><code>void write​(int c)</code></td><td>写一个字符</td></tr><tr><td><code>void write​(char[] cbuf)</code></td><td>写入一个字符数组</td></tr><tr><td><code>void write​(char[] cbuf, int off, int len)</code></td><td>写入字符数组的一部分</td></tr><tr><td><code>void write​(String str)</code></td><td>写一个字符串</td></tr><tr><td><code>void write​(String str, int off, int len)</code></td><td>写一个字符串的一部分</td></tr><tr><td><code>flush()</code></td><td>刷新流，可以继续写数据</td></tr><tr><td><code>close()</code></td><td>关闭流，释放资源，但是在关闭之前会先刷新流；<br/>一旦关闭，就不能再写数据</td></tr></tbody></table>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6401acbbe6c5493fab05ec8cd68db602.png\"/></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassStructure</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> read <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//创建一个读入数据的相对路径的流</span>\n        <span class=\"token class-name\">FileReader</span> fileReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data/access.log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">FileWriter</span> fileWriter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data/access1.log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//直接读取字符输出</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>read <span class=\"token operator\">=</span> fileReader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            fileWriter<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">//根据数组存储要求输出</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ch <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>read <span class=\"token operator\">=</span> fileReader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            fileWriter<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"复制OK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        fileWriter<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//关闭读入流</span>\n        fileReader<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//关闭写出</span>\n        fileWriter<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n</code></pre>\n<ul><li>场景</li></ul>\n<blockquote>\n<p>字节流适合做文件数据的拷贝（音视频，文本）<br/> 字节流不适合读取中文内容输出<br/> 字符流适合做文本文件的操作（读，写）</p>\n</blockquote>\n<h1><a id=\"_106\"></a>二、缓冲流</h1>\n<h2><a id=\"1_107\"></a>1、概念</h2>\n<blockquote>\n<p>缓冲流是高效流或者高级流，前面学习的字节流算原始流<br/> 作用：缓冲流自带缓冲区、可以提高原始字节流、字符流读写性能</p>\n</blockquote>\n<h2><a id=\"2_111\"></a>2、优化原理</h2>\n<blockquote>\n<p>字节缓冲输入流默认有8KB缓冲池，直接从缓冲池读取数据，性能较好。<br/> 字节缓冲输入流默认有8KB缓冲池，数据直接写入缓冲池中，提高写数据性能</p>\n</blockquote>\n<h2><a id=\"3_115\"></a>3、体系图</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8b39e65ed3a7404198a1f01d97d548f9.png\"/></p>\n<h2><a id=\"4_117\"></a>4、字节缓冲流</h2>\n<h3><a id=\"1BufferedInputStream_118\"></a>1）BufferedInputStream字节缓冲输入流</h3>\n<blockquote>\n<p>提高字节输入流读取数据的性能</p>\n</blockquote>\n<h3><a id=\"2BufferedOutputStream_121\"></a>2）BufferedOutputStream字节缓存输出流</h3>\n<blockquote>\n<p>提高字节输出流读取数据的性能</p>\n</blockquote>\n<table><thead><tr><th>构造器</th><th>解释</th></tr></thead><tbody><tr><td><code>public BufferedInputStream​(InputStream is)</code></td><td>创建一个新的缓冲输入流</td></tr><tr><td><code>public BufferedOutputStream​(OutputStream os)</code></td><td>创建一个新的缓冲输出流</td></tr></tbody></table>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\caef6aeefbb84c6896a7cb666fdf16e1.png\"/></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>nio<span class=\"token punctuation\">.</span>charset<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassStructure</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> read <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//创建一个读入数据的相对路径的流</span>\n        <span class=\"token class-name\">InputStream</span> inputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data/access.log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//创建带有缓存的输入流</span>\n        <span class=\"token class-name\">BufferedInputStream</span> bis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedInputStream</span><span class=\"token punctuation\">(</span>inputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//创建一个数组</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> by <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//判断是否还有数据</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>read <span class=\"token operator\">=</span> bis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>by<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//转换字符串</span>\n            <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>by<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//关闭写出</span>\n        bis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//关闭读入流</span>\n        inputStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//创建一个输出数据的相对路径的流</span>\n        <span class=\"token class-name\">OutputStream</span> outputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data/access1.log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//创建带有缓存的输出流</span>\n        <span class=\"token class-name\">BufferedOutputStream</span> bos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedOutputStream</span><span class=\"token punctuation\">(</span>outputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//直接写入内容，设置编码格式</span>\n        bos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span>UTF_8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        outputStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n</code></pre>\n<h2><a id=\"5_168\"></a>5、字符缓冲流</h2>\n<h3><a id=\"1BufferedReader_169\"></a>1）BufferedReader字符缓冲输入流</h3>\n<blockquote>\n<p>提高字符输入流读取数据的性能，可以按行读取数据</p>\n</blockquote>\n<table><thead><tr><th>构造器</th><th>解释</th></tr></thead><tbody><tr><td><code>public BufferedReader​(Reader r)</code></td><td>创建一个新的字符缓冲输入流</td></tr></tbody></table>\n<table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td><code>public String readLine()</code></td><td>读取一行数据，没有数据返回null</td></tr></tbody></table>\n<h3><a id=\"2BufferedWriter_180\"></a>2）BufferedWriter字符缓冲输出流</h3>\n<blockquote>\n<p>提高字符输出流写取数据的性能，可以换行</p>\n</blockquote>\n<table><thead><tr><th>构造器</th><th>解释</th></tr></thead><tbody><tr><td><code>public BufferedWriter​(Writer w)</code></td><td>写入一行数据</td></tr></tbody></table>\n<table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td><code>public void newLine()</code></td><td>换行</td></tr></tbody></table>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7b26eddf3817436db42ef89d7b6507c9.png\"/></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassStructure</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//创建一个字符输入流</span>\n        <span class=\"token class-name\">FileReader</span> fr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data/access.log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//创建一个字符输入缓冲流</span>\n        <span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span>fr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//判断是不是最后一行</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>msg <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//关闭输入缓冲流</span>\n        br<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//创建一个字符输出流</span>\n        <span class=\"token class-name\">FileWriter</span> fw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data/access1.log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//创建一个字符输出缓冲流</span>\n        <span class=\"token class-name\">BufferedWriter</span> bw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">(</span>fw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//字符写入的内容</span>\n        bw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"china\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//关闭字符缓冲流</span>\n        bw<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n</code></pre>\n<h1><a id=\"_223\"></a>三、转换流</h1>\n<blockquote>\n<p>文件和代码编码不一致，会出现乱码</p>\n</blockquote>\n<h2><a id=\"1InputStreamReader_225\"></a>1、InputStreamReader字符输入转换流</h2>\n<blockquote>\n<p>把原始的字节流按照指定编码转换成字符输入流</p>\n</blockquote>\n<table><thead><tr><th>构造器</th><th>解释</th></tr></thead><tbody><tr><td><code>public InputStreamReader(InputStream is)</code></td><td>字节流按照代码默认编码转换成字符输入流</td></tr><tr><td><code>public InputStreamReader(InputStream is ，String charset)</code></td><td>原始的字节流按照指定编码转换成字符输入流，不会出现乱码</td></tr></tbody></table>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fafd906711c44ee8b61e59f8e87f3a22.png\"/></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassStructure</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//创建一个InputStreamReader对象，FileInputStream构造一个原始的字节流按照指定编码转换成字符输入流</span>\n        <span class=\"token class-name\">InputStreamReader</span> gbk <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data/access1.log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"GBK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//判断是不是最后一行</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">=</span> gbk<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//释放资源</span>\n        gbk<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">InputStreamReader</span> utf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data/access1.log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"utf8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">=</span> utf<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        utf<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"2OutputStreamWriter_263\"></a>2、OutputStreamWriter字符输出转换流</h2>\n<blockquote>\n<p>把字节输出流按照指定编码转换成字符输出流</p>\n</blockquote>\n<table><thead><tr><th>构造器</th><th>解释</th></tr></thead><tbody><tr><td><code>public OutputStreamWriter(OutputStream os)</code></td><td>原始的字节输出流按照代码默认编码转换成字符输出流</td></tr><tr><td><code>public OutputStreamWriter(OutputStream os，String charset)</code></td><td>原始的字节输出流按照指定编码转换成字符输出流，不会出现乱码</td></tr></tbody></table>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e9c5adb0ec324bc7818a09a9da481d0d.png\"/></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassStructure</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token comment\">//字节输出流指定编码格式</span>\n        <span class=\"token class-name\">OutputStreamWriter</span> gbk <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data/access1.log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GBK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//写入内容</span>\n        gbk<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"china,我爱你!!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//释放资源</span>\n        gbk<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">OutputStreamWriter</span> gbk1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data/access2.log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        gbk1<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"china,我爱你!!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        gbk1<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-09-05 13:28:48", "summary": "文章目录一、字符流、文件字符写入流、文件字符输出流二、缓冲流、概念、优化原理、体系图、字节缓冲流字节缓冲输入流字节缓存输出流、字符缓冲流字符缓冲输入流字符缓冲输出流三、转换流、字符输入转换流、字符输出"}