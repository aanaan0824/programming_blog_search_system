{"blogid": "126617187", "writerAge": "码龄25天", "writerBlogNum": "111", "writerCollect": "20", "writerComment": "3", "writerFan": "16", "writerGrade": "5级", "writerIntegral": "1655", "writerName": "油腻的程序猿啊", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126617187.jpg", "writerRankTotal": "14639", "writerRankWeekly": "5278", "writerThumb": "3", "writerVisitNum": "7329", "blog_read_count": "267", "blog_time": "于 2022-08-31 09:28:36 发布", "blog_title": "深入Spring Boot ：打包解决方案", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>最近有位网友私信我咨询一个SpringBoot项目打包的问题。</p>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\ceee5ca1fbb0a80bcbc7d421d76f5bd8.png\"/></p>\n<p>​</p>\n<p></p>\n<p></p>\n<p>这位朋友说网络上有很多重复、不可用的技术文章，这个倒是事实，更糟糕的一些自媒体为了流量抄来抄去，增加我们查找解决方案的时间成本，我也尝试去搜索了一下“SpringBoot打包”，结果不尽人意，所以，总结了这篇打包解决方案。</p>\n<p>基于SpringBoot开发的项目代码可以打包成可执行jar，也可以打包成war，这个视不同需求而定，下面以SpringBoot2.4.0版本为例，分别列举了不同使用方式下的jar和war打包操作。</p>\n<h2></h2>\n<p>构建可执行jar包</p>\n<p>SpringBoot推荐将应用系统构建成可执行jar包，使用内置应用服务器运行项目代码。</p>\n<p>继承 spring-boot-starter-parent</p>\n<p>如果项目配置了pom继承spring-boot-starter-parent，就像下面这样：</p>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\e0099589eff7a99a140a30dde1b242c0.png\"/></p>\n<p>​</p>\n<p></p>\n<p></p>\n<p>此时要把项目代码打包成jar，需要在pom中配置packaging=jar，就是下面这样：</p>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\af05a9fba6d9059fc6819e1b576927d0.png\"/></p>\n<p>​</p>\n<p></p>\n<p></p>\n<p>接着，使用finalName标签配置最终jar包的名字，然后配置spring-boot-maven-plugin插件，例如如下配置：</p>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\af2e71b90cf8f35721a21fba557a90a0.png\"/></p>\n<p>​</p>\n<p></p>\n<p></p>\n<p>以上就是pom中的配置了，接下来执行jar打包操作，如果使用IDEA图形化工具打包，双击执行Maven窗口下Lifecycle中的package，即执行打jar包。</p>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\74bc98258226a156ff66cef5d88527d3.jpeg\"/></p>\n<p>​</p>\n<p></p>\n<p></p>\n<p>如果想通过执行mvn指令打jar，需要cd到源码根目录，即pom.xml所在的目录，然后执行mvn clean package，即执行打jar包。</p>\n<p>不继承 spring-boot-starter-parent</p>\n<p>如果项目pom文件没有继承spring-boot-starter-parent，要想将项目代码构建成可执行jar包，同样需要在pom中配置packaging=jar，就是下面这样：</p>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\c7cd68803073fd4f038d25372e2f84c3.png\"/></p>\n<p>​</p>\n<p></p>\n<p></p>\n<p>接着，使用finalName标签配置最终jar包的名字，然后配置spring-boot-maven-plugin插件，这里不一样的是需要配置goal=repackage，例如如下配置：</p>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\91fc6168d9b917b66b6b1d9deedf71fe.png\"/></p>\n<p>​</p>\n<p></p>\n<p></p>\n<p>以上就是pom中的配置了，接下来执行jar打包操作，如果使用IDEA图形化工具打包，双击执行Maven窗口下Lifecycle中的package，即执行打jar包；如果想通过执行mvn指令打jar，需要cd到源码根目录，即pom.xml所在的目录，然后执行mvn clean package，即执行打jar包。</p>\n<h2></h2>\n<p>构建可部署war包</p>\n<p>如果需要将项目代码构建成war包，可参考如下两个不同的方式。不过需要注意，对于web应用，SpringBoot2.4使用Servlet3，所以war包需要部署在支持Servlet3的应用服务器上，例如tomcat8.0及以上版本。</p>\n<p>继承 spring-boot-starter-parent</p>\n<p>如果配置了项目pom继承spring-boot-starter-parent，就像下面这样：</p>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\fe4bb510ea812ba17a789dd736d40bdb.png\"/></p>\n<p>​</p>\n<p></p>\n<p></p>\n<p>此时要把项目代码打包成jar，需要在pom中配置packaging=war，就是下面这样：</p>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\0a597b1371f7ac671fff7a411c9c0adc.png\"/></p>\n<p>​</p>\n<p></p>\n<p></p>\n<p>接着，使用finalName标签配置最终war包的名字，然后配置spring-boot-maven-plugin插件，例如如下配置：</p>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\806d8574fab2eeb29ace1361c7d7e978.png\"/></p>\n<p>​</p>\n<p></p>\n<p></p>\n<p>以上就是pom中的配置了，接下来执行war打包操作，如果使用IDEA图形化工具打包，双击执行Maven窗口下Lifecycle中的package，即执行打war包；如果想通过执行mvn指令打war，需要cd到源码根目录，即pom.xml所在的目录，然后执行mvn clean package，即执行打war包。</p>\n<p>不继承 spring-boot-starter-parent</p>\n<p>如果项目pom文件没有继承spring-boot-starter-parent，要想将项目代码构建成war包，同样需要在pom中配置packaging=war，就是下面这样：</p>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\766b6ad734203fc07af191889be68cbd.png\"/></p>\n<p>​</p>\n<p></p>\n<p></p>\n<p>接着，使用finalName标签配置最终war包的名字，然后配置构建war包需要使用到的插件，spring-boot-maven-plugin中同样需要配置goal=repackage，例如如下配置：</p>\n<pre>\n</pre>\n<pre>\n</pre>\n<pre><code> &lt;build&gt;\n\t&lt;finalName&gt;demo&lt;/finalName&gt;\n\t&lt;plugins&gt;\n\t\t&lt;plugin&gt;\n\t\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;maven-antrun-plugin&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;1.8&lt;/version&gt;\n\t\t&lt;/plugin&gt;\n\t\t&lt;plugin&gt;\n\t\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;3.3.0&lt;/version&gt;\n\t\t&lt;/plugin&gt;\n\t\t&lt;plugin&gt;\n\t\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;3.1.0&lt;/version&gt;\n\t\t&lt;/plugin&gt;\n\t\t&lt;plugin&gt;\n\t\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;3.8.1&lt;/version&gt;\n\t\t&lt;/plugin&gt;\n\t\t&lt;plugin&gt;\n\t\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;3.1.2&lt;/version&gt;\n\t\t&lt;/plugin&gt;\n\t\t&lt;plugin&gt;\n\t\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;2.8.2&lt;/version&gt;\n\t\t&lt;/plugin&gt;\n\t\t&lt;plugin&gt;\n\t\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;maven-enforcer-plugin&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;3.0.0-M3&lt;/version&gt;\n\t\t&lt;/plugin&gt;\n\t\t&lt;plugin&gt;\n\t\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;maven-failsafe-plugin&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;2.22.2&lt;/version&gt;\n\t\t&lt;/plugin&gt;\n\t\t&lt;plugin&gt;\n\t\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;maven-help-plugin&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;3.2.0&lt;/version&gt;\n\t\t&lt;/plugin&gt;\n\t\t&lt;plugin&gt;\n\t\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;2.5.2&lt;/version&gt;\n\t\t&lt;/plugin&gt;\n\t\t&lt;plugin&gt;\n\t\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;maven-invoker-plugin&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;3.2.1&lt;/version&gt;\n\t\t&lt;/plugin&gt;\n\t\t&lt;plugin&gt;\n\t\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;3.2.0&lt;/version&gt;\n\t\t&lt;/plugin&gt;\n\t\t&lt;plugin&gt;\n\t\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;maven-javadoc-plugin&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;3.2.0&lt;/version&gt;\n\t\t&lt;/plugin&gt;\n\t\t&lt;plugin&gt;\n\t\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;3.2.0&lt;/version&gt;\n\t\t&lt;/plugin&gt;\n\t\t&lt;plugin&gt;\n\t\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;3.2.4&lt;/version&gt;\n\t\t&lt;/plugin&gt;\n\t\t&lt;plugin&gt;\n\t\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;3.2.1&lt;/version&gt;\n\t\t&lt;/plugin&gt;\n\t\t&lt;plugin&gt;\n\t\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;2.22.2&lt;/version&gt;\n\t\t&lt;/plugin&gt;\n\t\t&lt;plugin&gt;\n\t\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;3.3.1&lt;/version&gt;\n\t\t&lt;/plugin&gt;\n\t\t&lt;plugin&gt;\n\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;2.4.0&lt;/version&gt;\n\t\t\t&lt;executions&gt;\n\t\t\t\t&lt;execution&gt;\n\t\t\t\t\t&lt;goals&gt;\n\t\t\t\t\t\t&lt;goal&gt;repackage&lt;/goal&gt;\n\t\t\t\t\t&lt;/goals&gt;\n\t\t\t\t&lt;/execution&gt;\n\t\t\t&lt;/executions&gt;\n\t\t&lt;/plugin&gt;\n\t&lt;/plugins&gt;\n&lt;/build&gt;</code></pre>\n<p>以上配置中的插件版本号参考自SpringBoot2.4.0中的 spring-boot-dependencies-2.4.0.pom，它是spring-boot-starter-parent的父文件。</p>\n<p>以上就是pom中的配置了，接下来执行war打包操作，如果使用IDEA图形化工具打包，双击执行Maven窗口下Lifecycle中的package，即执行打war包；如果想通过执行mvn指令打war，需要cd到源码根目录，即pom.xml所在的目录，然后执行mvn clean package，即执行打war包。</p>\n<h2></h2>\n<p>小结</p>\n<p>从上述操作可以看到，是否继承spring-boot-starter-parent，打包配置还是有些不同的。因为spring-boot-starter-parent pom.xml中已经帮我们管理好了打包需要用到的spring-boot-maven-plugin插件和它需要依赖的其它插件，所以通过继承可以直接使用spring-boot-maven-plugin。有时，我们的项目有自己的parent pom.xml，此时没有继承spring-boot-starter-parent，那么如果还要想使用spring-boot-maven-plugin插件，就需要自定义管理它所依赖的maven插件。</p>\n</div>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-08-31 09:28:36", "summary": "最近有位网友私信我咨询一个项目打包的问题。这位朋友说网络上有很多重复、不可用的技术文章，这个倒是事实，更糟糕的一些自媒体为了流量抄来抄去，增加我们查找解决方案的时间成本，我也尝试去搜索了一下打包，结果"}