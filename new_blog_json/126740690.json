{"blogid": "126740690", "writerAge": "码龄2年", "writerBlogNum": "61", "writerCollect": "2015", "writerComment": "2660", "writerFan": "3837", "writerGrade": "6级", "writerIntegral": "7078", "writerName": "Binaire-沐辰", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126740690.jpg", "writerRankTotal": "2113", "writerRankWeekly": "80", "writerThumb": "2011", "writerVisitNum": "43677", "blog_read_count": "107", "blog_time": "于 2022-09-07 11:08:41 发布", "blog_title": "猿创征文｜Spring Boot运行原理及功能实现方式", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atelier-sulphurpool-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#_4\">前言</a></li><li><a href=\"#pomxml_14\">pom.xml文件分析</a></li><li><a href=\"#starter_50\">启动器starter</a></li><li><a href=\"#_112\">启动引导类</a></li><li><ul><li><a href=\"#SpringBootApplication_148\">@SpringBootApplication注解</a></li></ul>\n</li><li><a href=\"#_158\">内置的服务器</a></li><li><ul><li><a href=\"#Tomcat_175\">内嵌Tomcat定义位置</a></li><li><a href=\"#tomcat_191\">tomcat运行原理</a></li><li><a href=\"#_197\">修改服务器</a></li><li><ul><li><a href=\"#_223\">添加服务器</a></li><li><a href=\"#_239\">更换内嵌服务器</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_4\"></a>前言</h1>\n<blockquote>\n<p>快速入门程序编写完了,我们发现springBoot程序开发比spring程序编写起来容易的多。配置简洁，依赖关系简单，启动运行容易。那么结下了我们我们就要思考一下入门程序中的这些功能是怎么实现的。<br/> 接下来我们从以下几个方面研究:</p>\n</blockquote>\n<ul><li>SpringBoot的启动依赖</li><li>启动器starter有什么作用</li><li>启动引导类是怎么运行的</li><li>内置的tomcat服务器原理</li></ul>\n<h1><a id=\"pomxml_14\"></a>pom.xml文件分析</h1>\n<p>我们应用配置第一个就是依赖,这个依赖的作用到底是什么我们仔细来分析一下。</p>\n<ol><li>项目中的pom.xml中继承了一个坐标</li></ol>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.7.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>relativePath</span><span class=\"token punctuation\">/&gt;</span></span> <span class=\"token comment\">&lt;!-- lookup parent from repository --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p><code>注意：</code>这里parent的坐标被工程继承了，相当于这是一个父类，我们创建的工程是一个子类，用到了父类的东西。</p>\n<ol start=\"2\"><li>打开<code>spring-boot-starter-parent</code>之后，发现他又继承了一个坐标。</li></ol>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b32834b847274144a81c603edf9ff64e.png\"/></p>\n<ol start=\"3\"><li>继续打开<code>spring-boot-dependencies</code>之后，发现该文件中主要定义了两组信息，分别是各种依赖的版本号和所有依赖的坐标信息，并对声明的版本号做了一个引用。我们打开发现这里有两千多行，所有能配置的版本基本都包含了。</li></ol>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\80cb496454cd4a55a35a900f2b7bbfd8.png\"/></p>\n<ol start=\"4\"><li>由于Spring Boot工程使用到了maven的聚合工程，所以这里我们可以认为<code>spring-boot-dependencies</code>就是父工程，子工程就是我们自己的项目。当我们子工程中使用<code>&lt;parent&gt;</code>继承父类之后，所有的版本就都由父类决定了。</li></ol>\n<p><img alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-itRPv1pB-1662518250431)(C:\\Users\\19737\\AppData\\Local\\Temp\\1662427371065.png)]\" src=\"..\\..\\static\\image\\c7435b8bebc348d3bad0248d8584936f.png\"/></p>\n<p>可以看到子工程当中我们没有声明版本号，是因为所有的版本都由父类决定，这样做的好处是什么：<mark>解决了版本冲突</mark>。不同模块、不同功能之间使用的版本是不一样的，因此spring boot就为我们将所有的<mark>版本统一化了</mark>。</p>\n<h1><a id=\"starter_50\"></a>启动器starter</h1>\n<blockquote>\n<p>SpringBoot官方给出了好多个starter的定义，方便我们使用，而且名称都是如下格式<br/> <code>命名规则: spring-boot-starter-技术名称</code></p>\n</blockquote>\n<p>starter定义了使用某种技术时对于依赖的固定搭配格式，也是一种最佳解决方案，<strong>使用starter可以帮助开发者减少依赖配置</strong></p>\n<ul><li>项目中的pom.xml定义了使用springMVC技术，但是并没有写SpringMVC的坐标，而是添加了一个名字中包含starter的依赖</li></ul>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<ul><li>在spring-boot-starter-web中又定义了若干个具体依赖的坐标</li></ul>\n<pre><code class=\"prism language-pom\">&lt;dependencies&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;\n    &lt;version&gt;2.7.3&lt;/version&gt;\n    &lt;scope&gt;compile&lt;/scope&gt;\n  &lt;/dependency&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-json&lt;/artifactId&gt;\n    &lt;version&gt;2.7.3&lt;/version&gt;\n    &lt;scope&gt;compile&lt;/scope&gt;\n  &lt;/dependency&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;\n    &lt;version&gt;2.7.3&lt;/version&gt;\n    &lt;scope&gt;compile&lt;/scope&gt;\n  &lt;/dependency&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-web&lt;/artifactId&gt;\n    &lt;version&gt;5.3.22&lt;/version&gt;\n    &lt;scope&gt;compile&lt;/scope&gt;\n  &lt;/dependency&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;\n    &lt;version&gt;5.3.22&lt;/version&gt;\n    &lt;scope&gt;compile&lt;/scope&gt;\n  &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>\n<ul><li>然后你可以继续打开任意一个依赖，发现里面又会包含一些依赖。</li></ul>\n<blockquote>\n<p>我们可以发现，这个starter中又包含了若干个坐标，其实就是使用SpringMVC开发通常都会使用到Json，使用json又离不开这里面定义的这些坐标，看来还真是方便，SpringBoot把我们开发中使用的东西能用到的都给提前做好了。你仔细看完会发现，里面有一些你没用过的。的确会出现这种过量导入的可能性，没关系，可以通过maven中的排除依赖剔除掉一部分。不过你不管它也没事，大不了就是过量导入呗。</p>\n</blockquote>\n<p><strong>总结:</strong><br/> <mark>使用starter可以帮开发者快速配置依赖关系</mark>。以前写依赖3个坐标的，现在写导入一个就搞定了，就是加速依赖配置的。</p>\n<h1><a id=\"_112\"></a>启动引导类</h1>\n<blockquote>\n<p>目前程序运行的入口就是SpringBoot工程创建时自带的那个类了，带有main方法的那个类，运行这个类就可以启动springBoot工程的运行</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Spring Boot本身就是为了加速Spring程序而开发的，而Spring程序运行的基础是需要创建自己的Spring容器对象，并将所有的对象管理在容器里面，这时候你可能会疑惑，Spring boot加速了Spring程序，那spring boot中有没有容器呢，或者说这个容器还存在吗？答案是存在，我们可以修改上面的代码来验证一下。</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">ConfigurableApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Application</span> bean <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这里的ConfigurableApplicationContext继承了ApplicationContext，说明他就是一个容器，拿到容器之后再通过getBean()来拿到bean，打印在控制台。</p>\n<p><img alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-1zqdg6S9-1662518250432)(C:\\Users\\19737\\AppData\\Local\\Temp\\1662510958074.png)]\" src=\"..\\..\\static\\image\\e3178a431fe6452e955c47a7b89ea5f1.png\"/></p>\n<p>可以看到控制台打印出来了对应的地址，说明它就是c从容器中拿到的一个对象，说明spring boot中存在一个容器，而<code>SpringApplication.run(Application.class, args);</code>就是运行Spring Boot容器，</p>\n<h2><a id=\"SpringBootApplication_148\"></a>@SpringBootApplication注解</h2>\n<p>接下来我们看一下<code>@SpringBootApplication</code>注解</p>\n<p><img alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Qzk2IRaR-1662518250433)(C:\\Users\\19737\\AppData\\Local\\Temp\\1662514364320.png)]\" src=\"..\\..\\static\\image\\413802b77b7a4038876b209647fff496.png\"/></p>\n<p>根据箭头打开注解可以看到有Spring Boot配置以及自动配置，自动配置包等等，因此当程序加了<code>@SpringBootApplication</code>注解，他就会扫描这个类所在包下和子包下面的所有类。并且他还是spring boot的配置类，所以spring的一些配置文件就不用写了，配置类自动搞定了。</p>\n<p><code>总结一下：</code>这个启动引导类，创建了一个容器并将该容器运行起来，做了一个配置类，里面有一些自动配置的东西，然后我们创建的对象就可以放在引导类的包以及子包中，就可以扫描到了。</p>\n<h1><a id=\"_158\"></a>内置的服务器</h1>\n<blockquote>\n<p>我们在创建spring boot项目时，会勾选需要的依赖，然后导入对应的starter</p>\n</blockquote>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>内置的tomcat服务器来研究几个问题</p>\n<ul><li>这个服务器在什么位置定义的</li><li>这个服务器是怎么运行的</li><li>这个服务器如果想换怎么换</li></ul>\n<h2><a id=\"Tomcat_175\"></a>内嵌Tomcat定义位置</h2>\n<p>说到定义的位置，我们可以通过两种方式来查看：</p>\n<ul><li>第一种</li></ul>\n<p><img alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-7GMr6Pr0-1662518250433)(C:\\Users\\19737\\AppData\\Local\\Temp\\1662515446182.png)]\" src=\"..\\..\\static\\image\\06c50350153646f79f15eaa0143aea03.png\"/></p>\n<ul><li>第二种</li></ul>\n<p><img alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-BUDnNDd1-1662518250434)(C:\\Users\\19737\\AppData\\Local\\Temp\\1662516134847.png)]\" src=\"..\\..\\static\\image\\d427e452278447269e8fc34d802b887a.png\"/></p>\n<h2><a id=\"tomcat_191\"></a>tomcat运行原理</h2>\n<p>tomcat本身就是一个Java项目，那么可不可以将tomcat中的一些东西直接放回项目中，让他变成一个Java代码？</p>\n<p><mark>当然可以，这里spring boot将tomcat以jar包的形式放到spring容器中让他变成一种对象，然后运行这个对象，把我们的项目启动起来，这就是它能够启动并且运行的原理。</mark></p>\n<h2><a id=\"_197\"></a>修改服务器</h2>\n<blockquote>\n<p>如果我们不想用他提供的版本能不能修改呢？可以，我们可以通过<code>&lt;exclusions&gt;</code>标签来排除提供的版本，或者内置服务器，然后在再重新添加依赖来达到修改服务器版本或者更换服务器的目的。</p>\n</blockquote>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusions</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusion</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-tomcat<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusion</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusions</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p><img alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-4HGRzH7B-1662518250434)(C:\\Users\\19737\\AppData\\Local\\Temp\\1662516484395.png)]\" src=\"..\\..\\static\\image\\5be1b19488ae46eea66251318abbf000.png\"/></p>\n<p>当添加<code>&lt;exclusions&gt;</code>标签之后，就把内置的tomcat的服务器排除了，这时候你在启动项目，在控制台就不会看到tomcat相关的信息了，并且网页也无法访问了。</p>\n<h3><a id=\"_223\"></a>添加服务器</h3>\n<p>这时候你再添加你想要的使用的服务器，只需添加对应的坐标即可</p>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-tomcat<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p><img alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-5sj6Rsa2-1662518250434)(C:\\Users\\19737\\AppData\\Local\\Temp\\1662517237602.png)]\" src=\"..\\..\\static\\image\\4474c0ff87c3468eb6315b83f1298789.png\"/></p>\n<p>同样在控制台就会看到服务器相关的信息了，并且网页也可以正常访问了。不过这样就显得有点多此一举了，好好的东西不用，非要自己搞这些，所以还是建议使用内置的服务器。</p>\n<h3><a id=\"_239\"></a>更换内嵌服务器</h3>\n<blockquote>\n<p>那我们是否可以换个服务器呢?必须的嘛。根据SpringBoot的工作机制，用什么技术，加入什么依赖就行了。SpringBoot提供了3款内置的服务器</p>\n</blockquote>\n<ul><li>tomcat(默认): apache出品，粉丝多，应用面广，负载了若干较重的组件</li><li>jetty:更轻量级，负载性能远不及tomcat</li><li>undertow:负载性能勉强跑赢tomcatI</li></ul>\n<p>想用哪个，加个坐标就OK。前提是把tomcat排除掉，因为tomcat是默认加载的。</p>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusions</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusion</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-tomcat<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusion</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusions</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-jetty<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>现在就已经成功替换了web服务器，它的核心思想就是加入对应的坐标就可以了。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-09-07 11:08:41", "summary": "目录前言文件分析启动器启动引导类注解内置的服务器内嵌定义位置运行原理修改服务器添加服务器更换内嵌服务器前言快速入门程序编写完了我们发现程序开发比程序编写起来容易的多。配置简洁，依赖关系简单，启动运行容"}