{"blogid": "126108285", "writerAge": "码龄4年", "writerBlogNum": "139", "writerCollect": "1868", "writerComment": "2021", "writerFan": "4043", "writerGrade": "6级", "writerIntegral": "6448", "writerName": "不会压弯的小飞侠", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126108285.jpg", "writerRankTotal": "2406", "writerRankWeekly": "35", "writerThumb": "1697", "writerVisitNum": "159244", "blog_read_count": "7166", "blog_time": "已于 2022-08-19 11:51:54 修改", "blog_title": "登录功能和退出功能(瑞吉外卖)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/0aaf846fa14440719e8aead94c49d3e2.gif#pic_center\"/><br/> 🍁<code>博客主页：</code>👉<a href=\"https://blog.csdn.net/qq_43514330?type=blog\">@不会压弯的小飞侠</a><br/> ✨<code>欢迎关注：</code>👉<code>点赞</code>👍<code>收藏</code>⭐<code>留言</code>✒<br/> ✨<code>系列专栏：</code>👉<a href=\"https://blog.csdn.net/qq_43514330/category_11944103.html?spm=1001.2014.3001.5482\">瑞吉外卖</a><br/> ✨<code>知足上进，不负野心。</code><br/> 🔥<code>欢迎大佬指正，一起学习！一起加油！</code></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/f9e7290d231c413fbc3f595656951ea9.gif#pic_center\"/></p>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#_12\">🍁知识总结</a></li><li><a href=\"#_49\">🍁登录页面测试</a></li><li><a href=\"#_57\">🍁代码开发</a></li><li><ul><li><a href=\"#Employeeemployee_58\">🔥创建实体类Employee和employee表进行映射</a></li><li><a href=\"#EmployeeMapper_106\">🔥编写EmployeeMapper接口</a></li><li><a href=\"#EmployeeService_123\">🔥编写EmployeeService接口</a></li><li><a href=\"#EmployeeServiceImpl_138\">🔥编写EmployeeServiceImpl实现类</a></li><li><a href=\"#R_157\">🔥编写返回结果类R</a></li><li><a href=\"#EmployeeController_204\">🔥编写EmployeeController类</a></li></ul>\n</li><li><a href=\"#_270\">🍁登录功能测试</a></li><li><a href=\"#_292\">🍁退出功能</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_12\"></a>🍁知识总结</h1>\n<ul><li> <p><code>@Log4j</code></p> </li><li> <p>注解在类上，为类提供一个属性名为log的log4j日志对象</p> </li><li> <p><code>MP</code></p>\n<ul><li>Mapper层的接口,需要继承<code>BaseMapper&lt;T&gt;</code>,并使用泛型!MP简化了单表CRUD的SQL操作,多表最好还是要自己写 SQL的。</li><li>service层需要继承<code>IService&lt;T&gt;</code>实现层也要继承对应的实现类。</li><li>实现层继承<code>ServiceImpl&lt;M extends BaseMapper, T&gt;</code>并实现<code>Service</code>接口</li><li>( 泛型：M 是 mapper 对象，T 是实体 ）</li></ul> </li><li> <p><code>密码md5加密</code></p>\n<ul><li>在使用Spring框架的时候，会对一些重要的密码进行加密可以使用MD5，其工具类是DigestUtils；</li><li>Spring框架继承的：</li></ul> </li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>DigestUtils<span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-java\"> String inputMD <span class=\"token operator\">=</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">;</span>\n DigestUtils<span class=\"token punctuation\">.</span><span class=\"token function\">md5DigestAsHex</span><span class=\"token punctuation\">(</span>inputMD<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li> <p><code>掌握MyBatis-Plus 之LambdaQueryWrapper的使用</code> 可以在MyBatis-plus专栏学习。</p> </li><li> <p><code>@Controller注解</code></p>\n<ul><li>在一个类上添加@Controller注解，表明了这个类是一个控制器类。</li></ul> </li><li> <p><code>@ResponseBody注解</code></p>\n<ul><li>@ResponseBody表示方法的返回值直接以指定的格式写入Http response body中，而不是解析为跳转路径。格式的转换是通过HttpMessageConverter中的方法实现的，因为它是一个接口，因此由其实现类完成转换。如果要求方法返回的是json格式数据，而不是跳转页面，可以直接在类上标注，@RestController，而不用在每个方法中标注，@ResponseBody，简化了开发过程。</li></ul> </li><li> <p><code>@Controller和@RestController的区别:</code></p>\n<ul><li>@Controller:在对应的方法上，视图解析器可以解析return的jsp,html页面，并且跳转到相应页面，若返回json等内容到页面，则需要加@ResponseBody注解</li><li>@RestController:相当于@Controller+@ResponseBody两个注解的结合，返回json数据不需要在方法前面@ResponseBody注解了，但使用@RestController这个注解，就不能返回jsp,html页面，视图解析器无法解析jsp,html页面</li></ul> </li><li> <p><code>Controller 方法参数引入 HttpServletRequest</code></p>\n<ul><li>在 Controller 方法开始处理请求时，Spring 会将 HttpServletRequest 对象自动赋值到方法参数中。除 HttpServletRequest 对象外，还有很多其它参数可以通过此方法获取。</li></ul> </li><li> <p><code>比如访问一个网站，登录后用户信息被保存到session中，在session过期之前或者用户关闭页面之前，用户信息可以通过request.getSession().getAttribute()方式 获得</code></p> </li><li> <p><code>request.getSession().removeAttribute()</code></p>\n<ul><li>作用：<code>销毁当前会话域中的一个属性。</code></li></ul> </li></ul>\n<h1><a id=\"_49\"></a>🍁登录页面测试</h1>\n<ul><li>通过浏览器调试工具(<code>F12快捷键</code>)，点击登陆后，页面会发送请求</li><li>请求地址为：<code>localhost:8080/employee/login</code></li><li>请求方式：<code>post</code></li><li>提交参数：<code>username，password</code></li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a6133974c74e497185b72c1615ed1db9.jpeg\"/></p>\n<h1><a id=\"_57\"></a>🍁代码开发</h1>\n<h2><a id=\"Employeeemployee_58\"></a>🔥创建实体类Employee和employee表进行映射</h2>\n<ul><li>编写实体类，放在entity包下</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>jkj<span class=\"token punctuation\">.</span>reggie<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span>FieldFill<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span>TableField<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> lombok<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>Serializable<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span>LocalDateTime<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">1</span>L<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> Long id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> String username<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> String password<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> String phone<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> String sex<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> String idNumber<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> Integer status<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> LocalDateTime createTime<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> LocalDateTime updateTime<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>fill <span class=\"token operator\">=</span> FieldFill<span class=\"token punctuation\">.</span>INSERT<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> Long createUser<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>fill <span class=\"token operator\">=</span> FieldFill<span class=\"token punctuation\">.</span>INSERT_UPDATE<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> Long updateUser<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"EmployeeMapper_106\"></a>🔥编写EmployeeMapper接口</h2>\n<ul><li>EmployeeMapper接口，放在mapper包下</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>jkj<span class=\"token punctuation\">.</span>reggie<span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span>BaseMapper<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>jkj<span class=\"token punctuation\">.</span>reggie<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span>Employee<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>annotations<span class=\"token punctuation\">.</span>Mapper<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Mapper</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">EmployeeMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Employee<span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"EmployeeService_123\"></a>🔥编写EmployeeService接口</h2>\n<ul><li>EmployeeService接口放在service包下</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>jkj<span class=\"token punctuation\">.</span>reggie<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>extension<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>IService<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>jkj<span class=\"token punctuation\">.</span>reggie<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span>Employee<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">EmployeeService</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">IService</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Employee<span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"EmployeeServiceImpl_138\"></a>🔥编写EmployeeServiceImpl实现类</h2>\n<ul><li>EmployeeServiceImpl实现类放在impl包下</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>jkj<span class=\"token punctuation\">.</span>reggie<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>impl<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>extension<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>impl<span class=\"token punctuation\">.</span>ServiceImpl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>jkj<span class=\"token punctuation\">.</span>reggie<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span>Employee<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>jkj<span class=\"token punctuation\">.</span>reggie<span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span>EmployeeMapper<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>jkj<span class=\"token punctuation\">.</span>reggie<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>EmployeeService<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span>Service<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmployeeServiceImpl</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceImpl</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>EmployeeMapper<span class=\"token punctuation\">,</span> Employee<span class=\"token punctuation\">&gt;</span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">EmployeeService</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"R_157\"></a>🔥编写返回结果类R</h2>\n<ul><li>此类是一个通用结果类，服务端响应的所有结果最终都会包装成此种类型，返回给前端页面</li><li>放在common包下</li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>jkj<span class=\"token punctuation\">.</span>reggie<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> lombok<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>HashMap<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">R</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">private</span> Integer code<span class=\"token punctuation\">;</span> <span class=\"token comment\">//编码：1成功，0和其它数字为失败</span>\n\n    <span class=\"token keyword\">private</span> String msg<span class=\"token punctuation\">;</span> <span class=\"token comment\">//错误信息</span>\n\n    <span class=\"token keyword\">private</span> T data<span class=\"token punctuation\">;</span> <span class=\"token comment\">//数据</span>\n\n    <span class=\"token keyword\">private</span> Map map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//动态数据</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> R<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span>T object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        R<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">R</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> object<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> R<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span>String msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        R r <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">.</span>msg <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> R<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>String key<span class=\"token punctuation\">,</span> Object value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"EmployeeController_204\"></a>🔥编写EmployeeController类</h2>\n<ul><li>处理逻辑 \n  <ul><li>1、将页直提交的密码password进行md5加密处理</li><li>2、根据页面提交的用户名username查询数据库</li><li>3、如果没有查询到则返回登录失败结果</li><li>4、密码比对，如果不一致则返回登录失败结果</li><li>5、查看员工状态，如果为已禁用状态，则返回员工已禁用结果、登录成功，将员工id存入Session并返回登录成功结果</li></ul> </li></ul>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/employee\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmployeeController</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> EmployeeService employeeService<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token comment\">/**\n     * 员工登录\n     * @param request\n     * @param employee\n     * @return\n     */</span>\n    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> R<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Employee<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span>HttpServletRequest request<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@RequestBody</span> Employee employee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token comment\">//1、将页面提交的密码password进行md5加密处理</span>\n        String password <span class=\"token operator\">=</span> employee<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        password <span class=\"token operator\">=</span> DigestUtils<span class=\"token punctuation\">.</span><span class=\"token function\">md5DigestAsHex</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//2、根据页面提交的用户名username查询数据库</span>\n        LambdaQueryWrapper<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Employee<span class=\"token punctuation\">&gt;</span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>Employee<span class=\"token operator\">:</span><span class=\"token operator\">:</span>getUsername<span class=\"token punctuation\">,</span>employee<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Employee emp <span class=\"token operator\">=</span> employeeService<span class=\"token punctuation\">.</span><span class=\"token function\">getOne</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//3、如果没有查询到则返回登录失败结果</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>emp <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> R<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登录失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">//4、密码比对，如果不一致则返回登录失败结果</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>emp<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> R<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登录失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">//5、查看员工状态，如果为已禁用状态，则返回员工已禁用结果</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>emp<span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> R<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"账号已禁用\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">//6、登录成功，将员工id存入Session并返回登录成功结果</span>\n        request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"employee\"</span><span class=\"token punctuation\">,</span>emp<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> R<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>emp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/**\n     * 员工退出\n     * @param request\n     * @return\n     */</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h1><a id=\"_270\"></a>🍁登录功能测试</h1>\n<ul><li>启动项目之后，在浏览器输入<code>localhost:8080/backend/page/login/login.html</code></li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\682cdf4267dc41fcad464be725b678c3.jpeg\"/></p>\n<ul><li><code>登录成功</code></li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\72ab7deea06b4bb0ad6c4c997f02aace.jpeg\"/></p>\n<ul><li><code>密码错误的情况下，会提示登录失败</code></li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ab220fe4f039419098045b9a68905e9f.jpeg\"/></p>\n<ul><li><code>用户名错误的情况下，会提示登录失败</code></li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3a4ccfe73847454ea1f174f862a6ac24.jpeg\"/></p>\n<ul><li><code>将用户status属性修改为0，提示账号已禁用信息</code></li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0e338f5b30344d6fa30461353ece80be.jpeg\"/></p>\n<h1><a id=\"_292\"></a>🍁退出功能</h1>\n<ul><li>在系统首页右上角，点击关机按钮，可以退出本系统，跳转到登录页面。</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6fe2ec64d0a949a28c58f66a2f6a84ee.jpeg\"/></p>\n<ul><li>通过浏览器调试工具(<code>F12快捷键</code>)，点击关机按钮后，页面会发送请求</li><li>请求地址为：<code>localhost:8080/employee/logout</code></li><li>请求方式：<code>post</code></li><li>逻辑： \n  <ul><li><code>清理session中的id</code></li><li><code>返回结果</code></li></ul> </li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\85edfca255954a708431fb9405a0945a.jpeg\"/></p>\n<ul><li>编写退出方法</li></ul>\n<pre><code class=\"prism language-java\"> <span class=\"token comment\">/**\n     * 员工退出\n     * @param request\n     * @return\n     */</span>\n    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/logout\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> R<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">logout</span><span class=\"token punctuation\">(</span>HttpServletRequest request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//清理Session中保存的当前登录员工的id</span>\n        request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"employee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> R<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"退出成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-08-19 11:51:54", "summary": "在这里插入图片描述博客主页：不会压弯的小飞侠欢迎关注：点赞收藏留言系列专栏：瑞吉外卖知足上进，不负野心。欢迎大佬指正，一起学习！一起加油！在这里插入图片描述目录知识总结登录页面测试代码开发创建实体类和"}