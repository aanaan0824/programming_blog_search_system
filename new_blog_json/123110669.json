{"blogid": "123110669", "writerAge": "码龄14年", "writerBlogNum": "61", "writerCollect": "115", "writerComment": "37", "writerFan": "1167", "writerGrade": "3级", "writerIntegral": "693", "writerName": "猫头鹰数据分析", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123110669.jpg", "writerRankTotal": "92936", "writerRankWeekly": "14197", "writerThumb": "47", "writerVisitNum": "51898", "blog_read_count": "869", "blog_time": "于 2022-03-07 20:07:07 发布", "blog_title": "最新Centos7 + .Net6 + Docker 配置镜像发布详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>    今天带给大家一篇文章，想大家介绍下在Centos7下，如何在docker环境部署一个简单的基于.Net6的.NetCore应用，也就是打包项目镜像，并在Linux下使用打包的镜像运行一个容器。</p>\n<h1>一 环境准备</h1>\n<h2>1.1虚拟机</h2>\n<p>我们准备一台Centos虚拟机，我这里是7.6.虚拟机安装我就不介绍了，可以参考我的一篇文章</p>\n<p><a class=\"link-info\" href=\"https://blog.csdn.net/suwei825/article/details/114987673\" title=\"大数据分析学习第一课 准备虚拟机环境\">大数据分析学习第一课 准备虚拟机环境</a>来了解下虚拟机的配置</p>\n<p>下面的虚拟机可以看到，没有.Net环境</p>\n<p><img alt=\"\" height=\"618\" src=\"..\\..\\static\\image\\993b31f9c96f4bdc8a39537573c8a3a2.png\" width=\"848\"/></p>\n<h2>1.2 安装SdK</h2>\n<p>参考我的博文</p>\n<h2>1.3 新建项目</h2>\n<p>这里我们选择webapi</p>\n<p><img alt=\"\" height=\"850\" src=\"..\\..\\static\\image\\240805aa375b4fccac18cee0a225c31b.png\" width=\"1200\"/></p>\n<p>项目建好后如下，会默认一个天气信息的控制器</p>\n<p><img alt=\"\" height=\"393\" src=\"..\\..\\static\\image\\d9151231cb9149f995698148a4a120a3.png\" width=\"681\"/></p>\n<p> 我们稍微修改下，加一个run by docker标识</p>\n<pre><code class=\"language-cs\">namespace DockerSample.Controllers\n{\n    [ApiController]\n    [Route(\"[controller]\")]\n    public class WeatherForecastController : ControllerBase\n    {\n        private static readonly string[] Summaries = new[]\n        {\n        \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\"\n    };\n\n        private readonly ILogger&lt;WeatherForecastController&gt; _logger;\n\n        public WeatherForecastController(ILogger&lt;WeatherForecastController&gt; logger)\n        {\n            _logger = logger;\n        }\n\n        [HttpGet(Name = \"GetWeatherForecast\")]\n        public IEnumerable&lt;WeatherForecast&gt; Get()\n        {\n            return Enumerable.Range(1, 5).Select(index =&gt; new WeatherForecast\n            {\n                Date = DateTime.Now.AddDays(index),\n                TemperatureC = Random.Shared.Next(-20, 55),\n                Summary = Summaries[Random.Shared.Next(Summaries.Length)] + \"【run by docker】\"\n            })\n            .ToArray();\n        }\n    }\n}</code></pre>\n<p> 项目运行后，会打开swagger文档，是webapi内置好的，我们测试一下，会看到结果</p>\n<p><img alt=\"\" height=\"714\" src=\"..\\..\\static\\image\\98fcafe136a048f0ad9a805a2cc1d02e.png\" width=\"1200\"/></p>\n<p> 可以看到我们加的标识了<img alt=\"\" height=\"820\" src=\"..\\..\\static\\image\\a7e963fc36524ab295b1167d2427de9f.png\" width=\"821\"/></p>\n<h2> 1.4 配置docker</h2>\n<p>我们右键项目，添加=》添加Docker支持，这里选Linux</p>\n<p><img alt=\"\" height=\"220\" src=\"..\\..\\static\\image\\6ba50d7b739345dfad4d429eb1b9987a.png\" width=\"475\"/></p>\n<p> 确定后会生成一个Dockerfile文件，我们调整下内容</p>\n<p><img alt=\"\" height=\"484\" src=\"..\\..\\static\\image\\4ccd76ed61d3432289fa44eb1ed418df.png\" width=\"820\"/></p>\n<p> 这里我给出了每行配置的说明</p>\n<pre><code># 环境运行时基础镜像\nFROM mcr.microsoft.com/dotnet/aspnet:6.0\n#将当前目录内容 copy到镜像目录\nCOPY .  /DockerSample\n#设置工作目录\nWORKDIR /DockerSample\n#对外暴露端口 \n#（注：EXPOSE并不会让容器的端口访问到主机。\n#要使其可访问，需要在docker run运行容器时通过-p来发布这些端口，\n#或通过-P参数来发布EXPOSE导出的所有端口）\nEXPOSE 80\nEXPOSE 443\n#运行镜像入口命令和可执行文件名称\nENTRYPOINT [\"dotnet\", \"DockerSample.dll\"]</code></pre>\n<h2> 1.5 发布项目</h2>\n<p>因为我主机是win10，没有开启Hyper-V，所以我把项目发布后，上传到linux打包镜像，发布流程就按普通的web项目，发布到一个文件夹就好</p>\n<p>发布前注意，修改下 Dockerfile的属性，设置为始终复制，这样就不用手动复制了</p>\n<p><img alt=\"\" height=\"864\" src=\"..\\..\\static\\image\\fd9b0942388540cd8058b80ab48f97ef.png\" width=\"688\"/></p>\n<h2><img alt=\"\" height=\"455\" src=\"..\\..\\static\\image\\9cdbf618b46348dbae9dcb73087f5a85.png\" width=\"948\"/><br/>  1.6生成docker镜像</h2>\n<p>我们把刚才发布目录上传到前面准备的Linux服务器</p>\n<p><img alt=\"\" height=\"260\" src=\"..\\..\\static\\image\\8160bdf888b44dfaa72b506f9ac90d0b.png\" width=\"478\"/></p>\n<p>cd进入该目录</p>\n<p><img alt=\"\" height=\"329\" src=\"..\\..\\static\\image\\133befc755bc4502b0d25d285ef1724b.png\" width=\"765\"/></p>\n<p> 现在开始生成镜像，我们先看下docker已有镜像列表，等下可以对比新生成镜像</p>\n<p><img alt=\"\" height=\"362\" src=\"..\\..\\static\\image\\f4d134cec6ea441ab1824d33663e06d9.png\" width=\"1101\"/></p>\n<p> 接下来，执行</p>\n<pre><code>docker build -t dockersample-image/1.0 -f Dockerfile .</code></pre>\n<p><span style=\"background-color:#fe2c24;\">（注意 . 是必须的，代表当前目录）</span></p>\n<p><img alt=\"\" height=\"648\" src=\"..\\..\\static\\image\\14f3f33f1e7a48249732dd42d460f1eb.png\" width=\"746\"/></p>\n<p> 再查看下镜像，可以看到镜像已经生成成功了</p>\n<p><img alt=\"\" height=\"400\" src=\"..\\..\\static\\image\\4ce59e31ad404ead90368a6e9ea04786.png\" width=\"1071\"/></p>\n<p> 生成的镜像，可以push到国内的镜像仓库，或者本地局域网的私服仓库，用于测试、生产等环境的发布使用</p>\n<h2>1.7 运行容器</h2>\n<p>有了镜像，我们就可以使用了</p>\n<p>执行 </p>\n<pre><code>docker run -d -p 8001:80 --name dockersample1 dockersample-image/1.0</code></pre>\n<p><img alt=\"\" height=\"266\" src=\"..\\..\\static\\image\\585667e76b4241919d2098d5a980acb4.png\" width=\"1200\"/></p>\n<p>我们浏览器访问服务器的8001端口 <a href=\"http://node2:8001/\" title=\"http://node2:8001/\">http://node2:8001/</a>，发现报404了</p>\n<p><img alt=\"\" height=\"653\" src=\"..\\..\\static\\image\\72ca657123374edab869ec34a8758346.png\" width=\"1030\"/></p>\n<p> 仔细检查了发布流程，发现没问题，最后检查配置发现了问题，原来默认只有在调试环境，才会开启Swagger文档</p>\n<p><img alt=\"\" height=\"510\" src=\"..\\..\\static\\image\\8c44a24dae0c43f9a0e8d026ca8dac94.png\" width=\"891\"/></p>\n<p> 这样的话，我们就直接访问接口地址吧，<a href=\"http://node2:8001/WeatherForecast\" title=\"http://node2:8001/WeatherForecast\">http://node2:8001/WeatherForecast</a>，数据出来了</p>\n<p><img alt=\"\" height=\"181\" src=\"..\\..\\static\\image\\4a6a0d8516a94f9d94b4ee616d9545ec.png\" width=\"1200\"/></p>\n<p> 我们再新开一个容器试试</p>\n<pre><code>docker run -d -p 8002:80 --name dockersample2 dockersample-image/1.0</code></pre>\n<p><img alt=\"\" height=\"80\" src=\"..\\..\\static\\image\\1fb087cf550340dea02012c2b5844a0a.png\" width=\"1200\"/></p>\n<p>  访问下接口地址8002，<a href=\"http://node2:8001/WeatherForecast\" title=\"http://node2:8002/WeatherForecast\">http://node2:8002/WeatherForecast</a>，数据也出来了</p>\n<p><img alt=\"\" height=\"171\" src=\"..\\..\\static\\image\\7368ca0ceed84d208a0387d4df395dc3.png\" width=\"1200\"/></p>\n<p><span style=\"color:#9c8ec1;\">总结<br/>         感谢能看到这里的朋友😉</span></p>\n<p><span style=\"color:#9c8ec1;\">        本次的分享就到这里，猫头鹰数据致力于为大家分享技术干货😎</span></p>\n<p><span style=\"color:#9c8ec1;\">        如果以上过程中出现了任何的纰漏错误，烦请大佬们指正😅</span></p>\n<p><span style=\"color:#9c8ec1;\">        受益的朋友或对技术感兴趣的伙伴记得点赞关注支持一波🙏</span></p>\n<p><span style=\"color:#9c8ec1;\">        也可以扫描二维码或搜索关注我的微信公众号【猫头鹰数据分析】，留言交流🙏</span></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\d1ab78f440ea4b10bff546a77f6819fb.jpg\"/></p>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-07 20:07:07", "summary": "今天带给大家一篇文章，想大家介绍下在下，如何在环境部署一个简单的基于的应用，也就是打包项目镜像，并在下使用打包的镜像运行一个容器。一环境准备虚拟机我们准备一台虚拟机，我这里是虚拟机安装我就不介绍了，可"}