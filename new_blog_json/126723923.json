{"blogid": "126723923", "writerAge": "码龄1年", "writerBlogNum": "45", "writerCollect": "1240", "writerComment": "2448", "writerFan": "1834", "writerGrade": "5级", "writerIntegral": "4189", "writerName": "蜡笔雏田学前端", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126723923.jpg", "writerRankTotal": "4551", "writerRankWeekly": "58", "writerThumb": "1291", "writerVisitNum": "122764", "blog_read_count": "160", "blog_time": "于 2022-09-07 08:11:44 发布", "blog_title": "【前端进阶】-TypeScript高级类型 | 交叉类型、索引签名类型、映射类型", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><strong>前言</strong></p>\n<blockquote>\n<p>博主主页👉🏻<a href=\"https://blog.csdn.net/xuxuii?spm=1011.2415.3001.5343\">蜡笔雏田学代码</a><br/> 专栏链接👉🏻<a href=\"https://blog.csdn.net/xuxuii/category_11979920.html\">【TypeScript专栏】</a><br/> 上篇文章讲解了TypeScript部分高级类型<br/> 详细内容请阅读如下：🔽<br/> <a href=\"https://blog.csdn.net/xuxuii/article/details/126656135?spm=1001.2014.3001.5501\">【前端进阶】-TypeScript高级类型 | 类的初始化、构造函数、继承、成员可见性</a><br/> 今天来学习TypeScript另外一些高级类型！<br/> 感兴趣的小伙伴一起来看看吧~🤞</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a193dba2548e435180bd4fe7a44c8d74.jpeg\"/></p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_13\">类型兼容性</a></li><li><ul><li><a href=\"#_46\">对象之间的类型兼容性</a></li><li><a href=\"#_82\">接口之间的类型兼容性</a></li><li><a href=\"#_112\">函数之间的类型兼容性</a></li></ul>\n</li><li><a href=\"#_222\">交叉类型</a></li><li><ul><li><a href=\"#_252\">交叉类型和接口继承的对比</a></li></ul>\n</li><li><a href=\"#_290\">索引签名类型</a></li><li><a href=\"#in_337\">映射类型(in）</a></li><li><ul><li><a href=\"#1__407\">索引查询类型（1 基本使用）</a></li><li><a href=\"#2__427\">索引查询类型（2 同时查询多个）</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_13\"></a>类型兼容性</h1>\n<p>两种类型系统：</p>\n<blockquote>\n<ol><li>Structural Type System（<mark>结构化类型系统</mark>）</li><li>Nominal Type System（<mark>标明类型系统</mark>）</li></ol>\n</blockquote>\n<p><strong>TS采用的是结构化类型系统</strong>，也叫做ducktyping（鸭子类型），<strong>类型检查关注的是值所具有的形状</strong>。</p>\n<p>也就是说，在结构类型系统中，如果<strong>两个对象具有相同的形状</strong>，则认为它们属于<strong>同一类型</strong>。</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token comment\">//两个类的兼容性演示</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{<!-- --></span>\n    x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n    y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Point2D</span> <span class=\"token punctuation\">{<!-- --></span>\n    x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n    y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> p<span class=\"token operator\">:</span> Point <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point2D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>解释：</p>\n<blockquote>\n<ol><li>Point和Point2D是两个名称不同的类。</li><li>变量p的类型被显示标注为Point类型，但是，它的值却是Point2D的实例，并且没有类型错误。</li><li>因为<code>TS是结构化类型系统</code>，只检查Point和Point2D的结构是否相同（相同，都具有x和y两个属性，属性类型也相同）。</li><li>但是，如果在<strong>Nominal Type System</strong>中（比如，C#，Java等），它们是<strong>不同的类</strong>，<strong>类型无法兼容</strong>。</li></ol>\n</blockquote>\n<hr/>\n<h2><a id=\"_46\"></a>对象之间的类型兼容性</h2>\n<p>注意：在结构化类型系统中，如果两个对象具有相同的形状，则认为它们数属于同一类型，这种说法并不准确。</p>\n<p><strong>更准确的说法：对于对象类型来说，y的成员至少与x相同，则x兼容y（成员多的可以赋值给少的）。</strong></p>\n<pre><code class=\"prism language-typescript\"><span class=\"token comment\">//两个类的兼容性演示</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{<!-- --></span>\n    x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n    y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Point2D</span> <span class=\"token punctuation\">{<!-- --></span>\n    x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n    y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> p<span class=\"token operator\">:</span> Point <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point2D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Point3D</span> <span class=\"token punctuation\">{<!-- --></span>\n    x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n    y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n    z<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> p1<span class=\"token operator\">:</span> Point <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point3D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 错误演示：</span>\n<span class=\"token comment\">// const p2: Point3D = new Point()  类型 \"Point\" 中缺少属性 \"z\"，但类型 \"Point3D\" 中需要该属性。</span>\n</code></pre>\n<p>解释：</p>\n<blockquote>\n<ol><li>Point3D的成员<strong>至少</strong>与Point相同，则Point兼容Point3D。</li><li>所以，<code>成员多的Point3D可以赋值给成员少的Point</code>。</li></ol>\n</blockquote>\n<hr/>\n<h2><a id=\"_82\"></a>接口之间的类型兼容性</h2>\n<p>除了class之外，TS中的其他类型也存在相互兼容的情况，包括：1、接口兼容性 2、函数兼容性等。</p>\n<ul><li>接口之间的兼容性，类似于class。并且，<code>class和interface之间也可以兼容。（成员多的可以赋值给少的）</code></li></ul>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{<!-- --></span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point2D</span> <span class=\"token punctuation\">{<!-- --></span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point3D</span> <span class=\"token punctuation\">{<!-- --></span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> z<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> p1<span class=\"token operator\">:</span> Point\n<span class=\"token keyword\">let</span> p2<span class=\"token operator\">:</span> Point2D\n<span class=\"token keyword\">let</span> p3<span class=\"token operator\">:</span> Point3D\n\np1 <span class=\"token operator\">=</span> p2\np1 <span class=\"token operator\">=</span> p3\np2 <span class=\"token operator\">=</span> p3\n<span class=\"token comment\">// 错误演示：</span>\n<span class=\"token comment\">// p3 = p1    类型 \"Point\" 中缺少属性 \"z\"，但类型 \"Point3D\" 中需要该属性。</span>\n</code></pre>\n<pre><code class=\"prism language-typescript\"><span class=\"token comment\">// 类和接口之间也是兼容的</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Point4D</span> <span class=\"token punctuation\">{<!-- --></span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> z<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\np2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point4D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<hr/>\n<h2><a id=\"_112\"></a>函数之间的类型兼容性</h2>\n<ul><li><strong>函数之间兼容性比较复杂</strong>，需要考虑：1、参数个数 2、参数类型 3、返回值类型。</li></ul>\n<p><strong>A. 参数个数</strong>，参数多的兼容参数少的（或者说，<code>参数少的可以赋值给多的</code>）。</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token comment\">// 1 参数个数：参数少的可以赋值给参数多的</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">F1</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">F2</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span>\n\n<span class=\"token keyword\">let</span> f1<span class=\"token operator\">:</span> <span class=\"token constant\">F1</span>\n<span class=\"token keyword\">let</span> f2<span class=\"token operator\">:</span> <span class=\"token constant\">F2</span>\n\nf2 <span class=\"token operator\">=</span> f1\n<span class=\"token comment\">// 错误演示：</span>\n<span class=\"token comment\">// f1 = f2</span>\n</code></pre>\n<pre><code class=\"prism language-typescript\"><span class=\"token comment\">// 演示类型兼容性：</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span>\n\narr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>解释：</p>\n<blockquote>\n<ol><li><mark>参数少的可以赋值给参数多的</mark>，所以，f1可以赋值给f2。</li><li>数组forEach方法的第一个参数是回调函数，该实例中类型为：<strong>（value: string, index: number, array: string[]）=&gt;void</strong>。</li><li><code>在JS中省略用不到的函数参数实际上是很常见的，这样的使用方式，促成了TS中函数类型之间的兼容性</code>。</li><li>并且因为回调函数是有类型的，所以，TS会自动推导出参数item，index，array的类型。</li></ol>\n</blockquote>\n<hr/>\n<p><strong>B. 参数类型</strong>，相同位置的参数类型要相同（原始类型）或兼容（对象类型）。</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token comment\">// 参数为原始类型</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">F1</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">F2</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span>\n<span class=\"token keyword\">let</span> f1<span class=\"token operator\">:</span> <span class=\"token constant\">F1</span>\n<span class=\"token keyword\">let</span> f2<span class=\"token operator\">:</span> <span class=\"token constant\">F2</span>\nf1 <span class=\"token operator\">=</span> f2\nf2 <span class=\"token operator\">=</span> f1\n</code></pre>\n<p>解释：函数类型F2兼容函数类型F1，因为F1和F2的第一个参数类型相同。</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token comment\">// 参数为对象类型</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point2D</span> <span class=\"token punctuation\">{<!-- --></span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point3D</span> <span class=\"token punctuation\">{<!-- --></span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> z<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">F2</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> Point2D<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span> <span class=\"token comment\">//相当于有2个参数</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">F3</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> Point3D<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span> <span class=\"token comment\">//相当于有3个参数</span>\n\n<span class=\"token keyword\">let</span> f2<span class=\"token operator\">:</span> <span class=\"token constant\">F2</span>\n<span class=\"token keyword\">let</span> f3<span class=\"token operator\">:</span> <span class=\"token constant\">F3</span>\n\nf3 <span class=\"token operator\">=</span> f2\n<span class=\"token comment\">// 错误示范：</span>\n<span class=\"token comment\">// f2 = f3</span>\n</code></pre>\n<p>解释：</p>\n<blockquote>\n<ol><li>注意，此处与前面讲到的接口兼容性冲突。</li><li>技巧：<strong>将对象拆开，把每个属性看做一个个参数</strong>，则，<strong>参数少的（f2）可以赋值给参数多的</strong>（f3）。</li></ol>\n</blockquote>\n<hr/>\n<p><strong>C. 返回值类型</strong>，只关注返回值类型本身即可：</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token comment\">// 3 返回值类型，只需要关注返回值类型本身即可</span>\n<span class=\"token comment\">// 原始类型：</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">F5</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token builtin\">string</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">F6</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token builtin\">string</span>\n\n<span class=\"token keyword\">let</span> f5<span class=\"token operator\">:</span> <span class=\"token constant\">F5</span>\n<span class=\"token keyword\">let</span> f6<span class=\"token operator\">:</span> <span class=\"token constant\">F6</span>\n\nf6 <span class=\"token operator\">=</span> f5\nf5 <span class=\"token operator\">=</span> f6\n\n<span class=\"token comment\">// 对象类型：</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">F7</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">F8</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> f7<span class=\"token operator\">:</span> <span class=\"token constant\">F7</span>\n<span class=\"token keyword\">let</span> f8<span class=\"token operator\">:</span> <span class=\"token constant\">F8</span>\n\nf7 <span class=\"token operator\">=</span> f8\n<span class=\"token comment\">// 错误演示：</span>\n<span class=\"token comment\">// f8 = f7</span>\n</code></pre>\n<p>解释：</p>\n<blockquote>\n<ol><li>如果返回值类型是<strong>原始类型</strong>，此时<strong>两个类型要相同</strong>，比如，左侧类型F5和F6。</li><li>如果返回值类型是<strong>对象类型</strong>，此时<strong>成员多的可以赋值给成员少的</strong>，比如，右侧类型F7和F8。</li></ol>\n</blockquote>\n<h1><a id=\"_222\"></a>交叉类型</h1>\n<p><strong>交叉类型（&amp;）</strong>：功能类似于<strong>接口继承</strong>（extends），<code>用于组合多个类型为一个类型</code>（<strong>常用于对象类型</strong>）。</p>\n<p>比如，</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n    <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Contact</span> <span class=\"token punctuation\">{<!-- --></span>\n    phone<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PersonDetail</span> <span class=\"token operator\">=</span> Person <span class=\"token operator\">&amp;</span> Contact \n<span class=\"token keyword\">let</span> obj<span class=\"token operator\">:</span> PersonDetail <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'jack'</span><span class=\"token punctuation\">,</span>\n    phone<span class=\"token operator\">:</span> <span class=\"token string\">'aaa'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>解释：使用交叉类型后，新的类型PersonDetail就同时具备了Person和Contact的所有属性类型。</p>\n<p>相当于，</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">PersonDetail</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> phone<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_252\"></a>交叉类型和接口继承的对比</h2>\n<ul><li>相同点：都可以实现对象类型的组合。</li><li>不同点：两种方式实现类型组合时，对于<strong>同名属性之间，处理类型冲突的方式不同</strong>。</li></ul>\n<pre><code class=\"prism language-typescript\"><span class=\"token comment\">// 对比：</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span> value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span> value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//接口继承会报错：不能将类型“(value: string) =&gt; string”分配给类型“(value: number) =&gt; string”。</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span> value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token builtin\">string</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span> value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token builtin\">string</span>\n    <span class=\"token punctuation\">}</span>   \n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">A</span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">B</span>\n</code></pre>\n<p>说明：以上代码，接口继承会报错（类型不兼容）；交叉类型没有错误，可以简单地理解为：</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">let</span> c<span class=\"token operator\">:</span> <span class=\"token constant\">C</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'1'</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//let c: C</span>\n<span class=\"token comment\">//c.fn('a')</span>\n<span class=\"token comment\">//c.fn(6)</span>\n</code></pre>\n<h1><a id=\"_290\"></a>索引签名类型</h1>\n<p>绝大多数情况下，我们都可以在使用对象前就确定对象的结构，并为对象添加准确的类型。</p>\n<p>使用场景：<strong>当无法确定对象中有哪些属性</strong>（或者说<strong>对象中可以出现任意多个属性</strong>），此时，<strong>就用到索引签名类型了</strong>。</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">AnyObject</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> obj<span class=\"token operator\">:</span> AnyObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  cscs<span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>解释：</p>\n<blockquote>\n<ol><li>使用<code>[key: string]</code>来约束该接口中允许出现的属性名称。<strong>表示只要是string类型的属性名称，都可以出现在对象中。</strong></li><li>这样，对象obj中就可以出现任意多个属性（比如，a，b等）。</li><li><strong>key只是一个占位符</strong>，可以换成任意合法的变量名称。</li><li>隐藏的前置知识：<strong>JS中对象（{}）的键是string类型的</strong>。</li></ol>\n</blockquote>\n<hr/>\n<p>在JS中数组是一类特殊的对象，<code>特殊在数组的键（索引）是数值类型</code>。</p>\n<p>并且，<strong>数组也可以出现任意多个元素</strong>。所以，在<strong>数组对应的泛型接口</strong>中，<strong>也用到了索引签名类型</strong>。</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">MyArray<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token punctuation\">[</span>index<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> arr1<span class=\"token operator\">:</span> MyArray<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\narr1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p>解释：</p>\n<blockquote>\n<ol><li>MyArray接口模拟原生的数组接口，并使用<code>[n: number]</code>来作为索引签名类型。</li><li>该索引签名类型表示：只要是number类型的键（索引）都可以出现在数组中，或者说数组中可以有任意多个元素。</li><li>同时也符合数组索引是number类型这一前提。</li></ol>\n</blockquote>\n<h1><a id=\"in_337\"></a>映射类型(in）</h1>\n<p>映射类型：<strong>基于旧类型创建新类型（对象类型）</strong>，减少重复，提升开发效率。</p>\n<p>比如，类型PropKeys有x/y/z，另一个类型Type1中也有x/y/z，并且Type1中x/y/z的类型相同：</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">PropKeys</span> <span class=\"token operator\">=</span> <span class=\"token string\">'X'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'y'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'z'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Type1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> x<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> z<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这样书写没错，但x/y/z重复书写了两次。像这种情况，就可以使用映射类型来进行简化。</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">PropKeys</span> <span class=\"token operator\">=</span> <span class=\"token string\">'x'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'y'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'z'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Type2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">[</span>Key <span class=\"token keyword\">in</span> PropKeys<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>解释：</p>\n<blockquote>\n<ol><li><code>映射类型是基于索引签名类型的</code>，所以，该语法类似于索引签名类型，也使用了[]。</li><li><strong>Key in PropKeys</strong>表示<strong>Key可以是PropKeys联合类型中的任意一个</strong>，类似于forin（let k in obj）。</li><li>使用映射类型创建的新对象类型Type2和类型Type1结构完全相同。</li><li>注意：<mark>映射类型只能在类型别名中使用，不能在接口中使用。</mark></li></ol>\n</blockquote>\n<hr/>\n<p>映射类型除了根据<strong>联合类型</strong>创建新类型外，还可以根据<strong>对象类型</strong>来创建：<strong>(keyof)</strong></p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Props</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> c<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Type3</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> Props<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>解释：</p>\n<blockquote>\n<ol><li>首先，先执行<strong>keyof Props</strong>获取到对象类型Props中所有键的联合类型即，‘a’ | ‘b’ | ‘c’。</li><li>然后，<code>Key in ...</code>就表示Key可以是Props中所有的键名称中的任意一个。</li></ol>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0497a920098e46e69ed770b78cb838b6.png\"/></p>\n<hr/>\n<p><strong>分析泛型工具类型Partial的实现：</strong></p>\n<p>实际上，前面讲到的<strong>泛型工具类型</strong>（比如，Partial都是<strong>基于映射类型实现的</strong>）。</p>\n<p>比如，Partial的实现：</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Partial<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Props</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> c<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PartialProps</span> <span class=\"token operator\">=</span> Partial<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>解释：</p>\n<blockquote>\n<ol><li><strong>keyof T</strong>即<strong>keyof Props表示获取Props的所有键</strong>，也就是：‘a’ | ‘b’ | ‘c’。</li><li>在[]后面添加？（问号），表示将这些属性变为<strong>可选</strong>的，以此来实现Partial的功能。</li><li>冒号后面的<code>T[P]表示获取T中每个键对应的类型</code>。比如，如果是’a’则类型是number；如果是’b’则类型是string。</li><li>最终，新类型PartialProps和旧类型Props结构完全相同，只是让所有类型都变为可选了。</li></ol>\n</blockquote>\n<h2><a id=\"1__407\"></a>索引查询类型（1 基本使用）</h2>\n<p>刚刚用到的<code>T[P]语法</code>，在TS中叫做<strong>索引查询（访问）类型</strong>。</p>\n<p>作用：<strong>用来查询属性的类型。</strong></p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Props</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> c<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TypeA</span> <span class=\"token operator\">=</span> Props<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span>   <span class=\"token comment\">//type TypeA = number</span>\n</code></pre>\n<p>解释：<strong>Props[‘a’]<strong>表示</strong>查询类型Props中属性’a’对应的类型number</strong>。所以，TypeA的类型为number。</p>\n<p>注意：<code>[]中的属性必须存在于被查询类型中</code>，否则就会报错。</p>\n<hr/>\n<h2><a id=\"2__427\"></a>索引查询类型（2 同时查询多个）</h2>\n<p><strong>索引查询类型</strong>的其他使用方式：<strong>同时查询多个索引的类型。</strong></p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Props</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> c<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TypeA</span> <span class=\"token operator\">=</span> Props<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p>解释：使用字符串字面量的联合类型，获取属性a和b对应的类型，结果为：string|number。</p>\n<pre><code class=\"prism language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TypeA</span> <span class=\"token operator\">=</span> Props<span class=\"token punctuation\">[</span><span class=\"token keyword\">keyof</span> Props<span class=\"token punctuation\">]</span>  <span class=\"token comment\">//string | number | boolean</span>\n</code></pre>\n<p>解释：<strong>使用keyof操作符获取Props中所有键对应的类型</strong>，结果为：string|number|boolean。</p>\n<blockquote>\n<p><span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          今天的分享就到这里啦✨\n         \n        \n       \n       \n        \\textcolor{red}{今天的分享就到这里啦✨}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: red;\">今天的分享就到这里啦</span><span class=\"mord\" style=\"color: red;\">✨</span></span></span></span></span> <br/><br/> <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          原创不易，还希望各位大佬支持一下\n         \n        \n       \n       \n        \\textcolor{blue}{原创不易，还希望各位大佬支持一下}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: blue;\">原创不易，还希望各位大佬支持一下</span></span></span></span></span> <br/><br/> 🤞 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          点赞，你的认可是我创作的动力！\n         \n        \n       \n       \n        \\textcolor{green}{点赞，你的认可是我创作的动力！}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: green;\">点赞，你的认可是我创作的动力！</span></span></span></span></span> <br/><br/> ⭐️ <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          收藏，你的青睐是我努力的方向！\n         \n        \n       \n       \n        \\textcolor{green}{收藏，你的青睐是我努力的方向！}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: green;\">收藏，你的青睐是我努力的方向！</span></span></span></span></span> <br/><br/> ✏️ <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          评论，你的意见是我进步的财富！\n         \n        \n       \n       \n        \\textcolor{green}{评论，你的意见是我进步的财富！}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: green;\">评论，你的意见是我进步的财富！</span></span></span></span></span> <br/></p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-09-07 08:11:44", "summary": "前言博主主页蜡笔雏田学代码专栏链接专栏上篇文章讲解了部分高级类型详细内容请阅读如下：前端进阶高级类型类的初始化、构造函数、继承、成员可见性今天来学习另外一些高级类型！感兴趣的小伙伴一起来看看吧在这里插"}