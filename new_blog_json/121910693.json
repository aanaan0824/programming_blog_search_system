{"blogid": "121910693", "writerAge": "码龄1年", "writerBlogNum": "1", "writerCollect": "47", "writerComment": "13", "writerFan": "7", "writerGrade": "1级", "writerIntegral": "22", "writerName": "凉粉皮", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_121910693.jpg", "writerRankTotal": "272496", "writerRankWeekly": "519944", "writerThumb": "5", "writerVisitNum": "2726", "blog_read_count": "2720", "blog_time": "于 2021-12-14 11:02:44 发布", "blog_title": "c#：vs2019制作温度上位机详细教程", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>所用的软件：vs2019</h1>\n<h1>1、创建一个新项目</h1>\n<p>打开vs2019，选择创建一个新项目，点击下一步：</p>\n<p><img alt=\"\" height=\"759\" src=\"..\\..\\static\\image\\a3759cb730f64b6c851a69e3c8412b54.png\" width=\"1200\"/></p>\n<p> 搜索“窗体”，找到“Windows窗体应用（.NET Framework）”w项目，点击下一步：<img alt=\"\" height=\"759\" src=\"..\\..\\static\\image\\f88018383f794a058ac749898951efb3.png\" width=\"1200\"/></p>\n<p> 更改项目名称和位置（可不做更改），最后点击创建：<img alt=\"\" height=\"759\" src=\"..\\..\\static\\image\\d507f7628be94bbb8c6bcb4bfd3a236d.png\" width=\"1200\"/></p>\n<p> 最后生成这样一个界面：<img alt=\"\" height=\"1040\" src=\"..\\..\\static\\image\\2a49d6ff9c6d4cf29457e3adf17f3cf2.png\" width=\"1200\"/></p>\n<p>然后修改窗口的名字，点击窗口，在右侧属性里找到“Text”，修改文字：</p>\n<p><img alt=\"\" height=\"1040\" src=\"..\\..\\static\\image\\4e27a60239ed485dbc5ef0f2681c17f6.png\" width=\"1200\"/></p>\n<h1>2、在窗口中添加控件</h1>\n<p>点击左侧的工具箱，并搜索添加button、label、comboBox、GroupBox、panle和serialPort这几个控件：</p>\n<p><img alt=\"\" height=\"1040\" src=\"..\\..\\static\\image\\9362879cf1dc444a8f40020a1f91a9cc.png\" width=\"1200\"/></p>\n<p>在添加的控件上点击右键，进入属性，找到“Text”属性，将button1~button3改成搜索串口、打开串口和关闭串口；将label1~label6改为串口号、波特率、校验位、数据位和停止位；</p>\n<p><img alt=\"\" height=\"256\" src=\"..\\..\\static\\image\\53f3ad232c2a4b5fa0eb892a9366db11.png\" width=\"424\"/></p>\n<p> 添加comboBox2中的元素，选中控件，右键，在属性中找到“Item”属性：</p>\n<p><img alt=\"\" height=\"1032\" src=\"..\\..\\static\\image\\96026e0b66044e03a3ec863c72bbd662.png\" width=\"1200\"/></p>\n<p></p>\n<p> 点击，并添加波特率元素：<img alt=\"\" height=\"406\" src=\"..\\..\\static\\image\\e3ce1b5657314d579baa9a5f5a8d5a1e.png\" width=\"570\"/></p>\n<p>相似的，然后在comboBox3~comboBox5中分别添加校验位、数据位和停止位的元素：</p>\n<p>校验位：</p>\n<p><img alt=\"\" height=\"406\" src=\"..\\..\\static\\image\\ec00f69a72834850b9fb38f7782f7370.png\" width=\"570\"/></p>\n<p> 数据位：</p>\n<p><img alt=\"\" height=\"406\" src=\"..\\..\\static\\image\\a421afd2589246e3bedd2e5ead3b1953.png\" width=\"570\"/></p>\n<p> 停止位：</p>\n<p><img alt=\"\" height=\"406\" src=\"..\\..\\static\\image\\3866a33e649a406aaf2532ffa05e437c.png\" width=\"570\"/></p>\n<p>接下来，双击搜索串口按钮，进入到Form1.cs进行编程：</p>\n<p><img alt=\"\" height=\"102\" src=\"..\\..\\static\\image\\31d9dc1e2214472ea2dc40bfe61fd04a.png\" width=\"675\"/></p>\n<p>在该事件下面编写下面程序，搜索并获取当前可用的串口：</p>\n<pre><code class=\"language-cs\">string[] portname = SerialPort.GetPortNames();//定义一个字符串来获取串口\nthis.comboBox_port.Items.Clear();//清空comboBox1中的值\nforeach (string port in portname)//遍历串口\n{\nvar serialPort = new SerialPort();//把串口赋给定义的var变量\nserialPort.PortName = port;\nserialPort.Open();//打开串口\nthis.comboBox_port.Items.Add(port);//打开成功，则添加至下拉框\nserialPort.Close();//关闭串口\n}</code></pre>\n<p> 同样的，双击打开串口：</p>\n<pre><code class=\"language-cs\">if (serialPort1.IsOpen)//如果串口是打开的\n{\n     try\n     {\n          serialPort1.Close();//先判断运行之前串口是否打开，若打开则要先关闭\n     }\n     catch\n     {\n\n     }\n}\nelse\n{\n     try\n     {\n         serialPort1.PortName = comboBox_port.Text;//选中串口\n         serialPort1.Open();//打开选中的串口\n         button_openport.Enabled = false;//此时打开串口按钮失效\n         comboBox_port.Enabled = false;//选择串口下拉框失效\n         comboBox_baud.Enabled = false;//选择波特率下拉框失效\n         comboBox_parity.Enabled = false;//选择校验位下拉框失效\n         comboBox_data.Enabled = false;//选择数据位下拉框失效\n         comboBox_stop.Enabled = false;//选择停止位下拉框失效\n         button_searchport.Enabled = false;//搜索串口按钮失效\n         button_closeport.Enabled = true;//关闭串口按钮可用\n     }\n     catch//若上面有错误操作，则返回下面的信息\n     {\n           MessageBox.Show(\"串口打开失败\", \"错误\");\n     }\n}</code></pre>\n<p> 双击关闭串口按钮：</p>\n<pre><code class=\"language-cs\">            try\n            {\n                serialPort1.Close();//关闭串口\n                button_openport.Enabled = true;//可用\n                comboBox_port.Enabled = true;//可用\n                comboBox_baud.Enabled = true;//可用\n                comboBox_parity.Enabled = true;//可用\n                comboBox_data.Enabled = true;//可用\n                comboBox_stop.Enabled = true;//可用\n                button_searchport.Enabled = true;//可用\n                button_closeport.Enabled = false;//失效\n                \n            }\n            catch (Exception err)//一般情况下关闭串口不会出错，加上以防万一\n            {\n                MessageBox.Show(err.Message);\n            }</code></pre>\n<p>接下来，双击窗体，配置默认参数：</p>\n<p><img alt=\"\" height=\"78\" src=\"..\\..\\static\\image\\62fa003695d94473a82e77736b2555c5.png\" width=\"839\"/></p>\n<p> <img alt=\"\" height=\"115\" src=\"..\\..\\static\\image\\88fc0a63a2604fe59dd4914adaca87b7.png\" width=\"503\"/></p>\n<p>接下来，添加下图中的控件，其中实时温度为label；发送、停止和修改温度为按钮，按照上面的方法添加就好；这里面多了一个显示实时温度的Text文本框和二选一的RadioButton按钮： </p>\n<p><img alt=\"\" height=\"136\" src=\"..\\..\\static\\image\\7ce63388d8124522b87ae184d0a3ff31.png\" width=\"390\"/></p>\n<p><img alt=\"\" height=\"927\" src=\"..\\..\\static\\image\\4b4b522b505341dab7cfd75012dbd01b.png\" width=\"306\"/></p>\n<p>接下来就是重点了，双击发送按钮： </p>\n<pre><code class=\"language-cs\">private void button_sendorder_Click(object sender, EventArgs e)//（button_sendorder就是添加的发送按钮）\n{\n     this.sendCommand();//声明一个函数，用来执行发送按钮命令\n}\n\nprivate void sendCommand()//构造发送指令函数\n{\n    if (this.serialPort1.IsOpen == true &amp;&amp; (!radioButton2.Checked||!radioButton1.Checked ))//判断串口是否打开  与上  （获取测量实时温度 \n   或   修改温度的设定值），若为真，则执行下面代码\n    {\n        try\n        {\n            //81 81 52 00 00 00 53 00（读指令：地址（基础值+仪表地址）+地址+固定格式+参数代号+默认值+默认值+CRC校验码（注：该读指令是根据自己所要控制的仪器的通讯协议而定，例如我的就是一个测量温度的仪表，该仪表的读指令就是上面的值）\n            string[] commandString = new string[] { \"81\", \"81\", \"52\", \"00\", \"00\", \"00\", \"53\", \"00\" };//将读指令或写指令传入字符串commandString中\n            byte[] commandByte = new byte[commandString.Length];//定义一个与commandString长度相同的字节数组\n            try\n            {\n                 for (int i = 0; i &lt; commandString.Length; i++)//以十六进制发送\n                 {\n                      commandByte[i] = Convert.ToByte(commandString[i], 16);//将字符串变成字节数组\n                 }\n            }\n\n            catch (Exception er)//若上面有错误，则返回以下信息\n            {\n                  MessageBox.Show(er.Message);//这个信息是系统自返回的\n            }\n            this.serialPort1.Write(commandByte, 0, commandByte.Length);//转换完成之后，发送给下位机指令\n            System.Threading.Thread.Sleep(this.delayTime);//线程睡眠\n            if (this.serialPort1.BytesToRead &lt;= 10)//接收仪表返回的数据，并判断数据长度\n            {\n                 byte[] byteReceive = new byte[this.serialPort1.BytesToRead];//定义字节数据接收数据\n                 this.serialPort1.Read(byteReceive, 0, byteReceive.Length);//读取缓冲区中的数据\n                 string text_R = \"\";//定义一个字符串\n                 text_R = Convert.ToString((byteReceive[0] + byteReceive[1] * 256) * 0.1).ToString() ;//只读取测量温度（该仪表返回的前两个字节为温度字节，所以只用到了byteReceive[0] 和 byteReceive[1]）\n         \n                 textBox_RT.Text = text_R.ToUpper();//显示并大写 实时温度的文本框的内容（textBox_RT就是添加的TextBox）\n                        \n              }\n        }\n        catch\n        {\n             //MessageBox.Show(er.Message);\n        }\n    }\n }</code></pre>\n<p> 至此，读取数据编码已完成。接下来把读取的数据以实时曲线的方式展现出来。</p>\n<p>在这里，先在工具箱添加一个JYTEK工具；具体添加步骤可在B站视频查看：</p>\n<p><a href=\"https://www.bilibili.com/video/BV1sp4y1z7ha?spm_id_from=333.999.0.0\" title=\"SeeSharp基础篇 — 第一个 C# WinForm 程序_哔哩哔哩_bilibili\">SeeSharp基础篇 — 第一个 C# WinForm 程序_哔哩哔哩_bilibili</a></p>\n<p><img alt=\"\" height=\"931\" src=\"..\\..\\static\\image\\5b99adfa618a49dba3409735716109ba.png\" width=\"306\"/></p>\n<p> 添加好上述工具之后，我们在窗体中添加listbox、EasyChartX、folderBrowserDialog这三个控件：</p>\n<p><img alt=\"\" height=\"544\" src=\"..\\..\\static\\image\\c44f93f9d09542e5864ebe33a47e8d75.png\" width=\"515\"/></p>\n<p> 然后在，发送按钮指令下，添加以下代码用来在listbox中显示实时温度；在EasyChartX中绘制实时曲线：（注：这里要先添加<img alt=\"\" height=\"18\" src=\"..\\..\\static\\image\\c7f97ca71e364e9b83fc7c100128c00c.png\" width=\"256\"/>这个是B站简仪科技的一个GUI图像，跟着视频添加引用，这里不再赘述）</p>\n<p></p>\n<pre><code class=\"language-cs\">listBox1.Items.Add ( text_R.ToUpper());//在listBox中显示实时数据\nlistBox1.SelectedIndex = listBox1.Items.Count - 1;//使滚动条一直在最下方\nforeach(var item in this.listBox1.Items)\n{\ntemp.Add(item.ToString());//将listBox中的数组赋值给定义的列表数组temp（temp为自己定义的一个列表数组：List&lt;string&gt; temp = new List&lt;string&gt;();）\n}\nint len = listBox1.Items.Count;\nstring[] str = new string[len];\nfor (int i = 0; i &lt; len; i++)\n{\n    str[i] = listBox1.Items[i].ToString();\n}\ndouble[] doubleArray = Array.ConvertAll&lt;string, double&gt;(str, delegate (string s) { return double.Parse(s); });\neasyChartX1.Plot(doubleArray);//EasyChartX绘制实时曲线</code></pre>\n<p> 最后生成excel报表，来记录历史数据温度，在窗体中添加label1、label2并改为“写入温度数据”、”路径“；添加一个按钮button1、button2并改为“开始”、”浏览“；添加一个Textbox文本框用来显示保存路径：</p>\n<p><img alt=\"\" height=\"153\" src=\"..\\..\\static\\image\\56cbda637e5646678cb2bc451c3ea5c2.png\" width=\"423\"/></p>\n<p> 双击开始按钮，添加如下代码：（注这里要先添加<img alt=\"\" height=\"18\" src=\"..\\..\\static\\image\\102c136db9a94fd981593611f32f2280.png\" width=\"242\"/>这个是B站简仪科技的一个报表生成，跟着视频添加引用，这里不再赘述）</p>\n<pre><code class=\"language-cs\">if(textBox_path.Text == string.Empty)\n            {\n                MessageBox.Show(\"请选择保存路径\");\n                return;\n            }\n            excel = new ExcelReport();\n            //excel.Show();//显示创建的表格\n            excel.WriteTextToReport(\"A1\", DateTime.Now.Date.ToLongDateString());\n\n            int len = listBox1.Items.Count;\n            string[] str = new string[len];\n            for (int i = 0;i&lt;len;i++)\n            {\n                str[i] = listBox1.Items[i].ToString();\n            }\n            \n            excel.WriteArrayToReport(\"A2\", str);\n            excel.SaveAs(textBox_path.Text + @\"\\dataReport\", ExcelSaveFormat.xlsx);\n            excel.Close();</code></pre>\n<p> 然后，双击浏览按钮：</p>\n<pre><code class=\"language-cs\">if(folderBrowserDialog1.ShowDialog() ==DialogResult.OK)\n            {\n                textBox_path.Text = folderBrowserDialog1.SelectedPath;//设置保存路径\n            }</code></pre>\n<p>添加好之后的界面如下图所示：<img alt=\"\" height=\"1032\" src=\"..\\..\\static\\image\\8451b934d67443cfa1a79e94e5926017.png\" width=\"1200\"/></p>\n<p> 这里可根据自己的需要来添加定时器（是否需要实时采集温度数据）。</p>\n<p>运行界面如下图所示：<img alt=\"\" height=\"581\" src=\"..\\..\\static\\image\\a55428d9adb3401aa03c11e0ed5c7575.png\" width=\"1200\"/></p>\n<p>最后附上完整程序代码： </p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\nusing System.IO.Ports;\nusing System.Windows.Forms.DataVisualization.Charting;\nusing SeeSharpTools.JY.Report;\nusing SeeSharpTools.JY.ArrayUtility;\n\nnamespace 第一个优化的温度测量程序\n{\n    public partial class Form1 : Form\n    {\n        int count;//定义一个整型count，用于定时器1\n        ExcelReport excel;\n        public Form1()\n        {\n            InitializeComponent();\n            button_closeport.Enabled = false;\n            button_sendorder.Enabled = false;\n            \n        }\n\n        List&lt;string&gt; temp = new List&lt;string&gt;();\n        private int delayTime = 200;\n\n        private void Form1_Load(object sender, EventArgs e)\n        {\n            comboBox_port.Text = \"COM1\";\n            comboBox_baud.Text = \"9600\";\n            comboBox_parity.Text = \"None\";\n            comboBox_data.Text = \"8\";\n            comboBox_stop.Text = \"Two\";\n            timer1.Stop();//暂停计时   \n        }\n        \n        private void button_searchport_Click(object sender, EventArgs e)//搜索可用串口\n        {\n            string[] portname = SerialPort.GetPortNames();//定义一个字符串来获取串口\n            this.comboBox_port.Items.Clear();//清空comboBox1中的值\n            foreach (string port in portname)//遍历串口\n            {\n                var serialPort = new SerialPort();//把串口赋给定义的var变量\n                serialPort.PortName = port;\n                serialPort.Open();//打开串口\n                this.comboBox_port.Items.Add(port);//打开成功，则添加至下拉框\n                serialPort.Close();//关闭串口\n            }\n        }\n\n        private void button_openport_Click(object sender, EventArgs e)//打开所选择的串口\n        {\n            if (serialPort1.IsOpen)//如果串口是打开的\n            {\n                try\n                {\n                    serialPort1.Close();//先判断运行之前串口是否打开，若打开则要先关闭\n                }\n                catch\n                {\n\n                }\n            }\n            else\n            {\n                try\n                {\n                    serialPort1.PortName = comboBox_port.Text;//选中串口\n                    serialPort1.Open();//打开选中的串口\n                    button_openport.Enabled = false;//此时打开串口按钮失效\n                    comboBox_port.Enabled = false;//选择串口下拉框失效\n                    comboBox_baud.Enabled = false;//选择波特率下拉框失效\n                    comboBox_parity.Enabled = false;//选择校验位下拉框失效\n                    comboBox_data.Enabled = false;//选择数据位下拉框失效\n                    comboBox_stop.Enabled = false;//选择停止位下拉框失效\n                    button_searchport.Enabled = false;//搜索串口按钮失效\n                    button_closeport.Enabled = true;//关闭串口按钮可用\n                }\n                catch//若上面有错误操作，则返回下面的信息\n                {\n                    MessageBox.Show(\"串口打开失败\", \"错误\");\n                }\n            }\n        }\n\n        private void button_closeport_Click(object sender, EventArgs e)//关闭所选择的串口\n        {\n            try\n            {\n                serialPort1.Close();\n                button_openport.Enabled = true;\n                comboBox_port.Enabled = true;\n                comboBox_baud.Enabled = true;\n                comboBox_parity.Enabled = true;\n                comboBox_data.Enabled = true;\n                comboBox_stop.Enabled = true;\n                button_searchport.Enabled = true;\n                button_closeport.Enabled = false;\n                \n            }\n            catch (Exception err)//一般情况下关闭串口不会出错，加上以防万一\n            {\n                MessageBox.Show(err.Message);\n            }\n        }\n\n        private void timer1_Tick(object sender, EventArgs e)//定时器\n        {\n            button_sendorder_Click(button_sendorder, null);\n            if (serialPort1.IsOpen)   //如果串口已经打开\n            {\n                count++;    \n            }\n\n        }\n\n        private void button_sendorder_Click(object sender, EventArgs e)\n        {\n            this.sendCommand();\n            button_sendorder.Enabled = false;\n            timer1.Start();\n            timer2.Start();\n        }\n\n        private void sendCommand()//构造发送指令函数\n        {\n            if (this.serialPort1.IsOpen == true &amp;&amp; (!radioButton2.Checked||!radioButton1.Checked ))\n            {\n                try\n                {\n                    //81 81 52 00 00 00 53 00（读指令：地址（基础值+仪表地址）+地址+固定格式+参数代号+默认值+默认值+CRC校验码\n                    string[] commandString = new string[] { \"81\", \"81\", \"52\", \"00\", \"00\", \"00\", \"53\", \"00\" };//将读指令或写指令传入字符串commandString中\n\n                    byte[] commandByte = new byte[commandString.Length];//将字符串变成字节数组\n                    try\n                    {\n                        for (int i = 0; i &lt; commandString.Length; i++)//以十六进制发送\n                        {\n                            commandByte[i] = Convert.ToByte(commandString[i], 16);\n\n                        }\n                    }\n\n                    catch (Exception er)\n                    {\n                        MessageBox.Show(er.Message);\n                    }\n                    this.serialPort1.Write(commandByte, 0, commandByte.Length);\n                    System.Threading.Thread.Sleep(this.delayTime);\n                    if (this.serialPort1.BytesToRead &lt;= 10)\n                    {\n                        byte[] byteReceive = new byte[this.serialPort1.BytesToRead];//定义字节数据接收数据\n                        this.serialPort1.Read(byteReceive, 0, byteReceive.Length);//读取缓冲区中的数据\n                        string text_R = \"\";\n                        text_R = Convert.ToString((byteReceive[0] + byteReceive[1] * 256) * 0.1).ToString() ;//只读取测量温度\n\n                        textBox_RT.Text = text_R.ToUpper();\n                        listBox1.Items.Add ( text_R.ToUpper());\n                        listBox1.SelectedIndex = listBox1.Items.Count - 1;\n                        foreach(var item in this.listBox1.Items)\n                        {\n                            temp.Add(item.ToString());\n                        }\n                        int len = listBox1.Items.Count;\n                        string[] str = new string[len];\n                        for (int i = 0; i &lt; len; i++)\n                        {\n                            str[i] = listBox1.Items[i].ToString();\n                        }\n                        double[] doubleArray = Array.ConvertAll&lt;string, double&gt;(str, delegate (string s) { return double.Parse(s); });\n                        easyChartX1.Plot(doubleArray);\n                    }\n                }\n                catch\n                {\n                    //MessageBox.Show(er.Message);\n                }\n            }\n        }\n\n        private void chart1_Click(object sender, EventArgs e)//双击chart事件来显示滑动条\n        {\n            \n        }\n\n\n        private void timer2_Tick(object sender, EventArgs e)\n        {\n            //series = chart1.Series[0];\n            //foreach (var item in this.listBox1.Items)\n            //{\n            //    temp.Add(item.ToString());\n            //}\n            //chart1.Series[0].Points.DataBindXY(DateTime.TryParseExact,temp);            \n        }\n\n        private void button_modifytemperature_Click(object sender, EventArgs e)//声明修改参数函数\n        {\n            this.modifyTemperature();\n            button_sendorder.Enabled = true;\n\n        }\n        private void modifyTemperature()//构造修改参数函数\n        {\n            if (this.serialPort1.IsOpen == true &amp;&amp; !radioButton1.Checked)\n            {\n                try\n                {\n                    //81 81 43 00 00 00 44 00（写指令：地址（基础值+仪表地址）+地址+固定格式+参数代号+低字节（要改写参数值的低字节）+高字节（要改写参数值的高字节）+CRC校验码\n                    double modifydata = Convert.ToInt32(textBox_modify.Text);\n                    byte modifyhigh = 0xff, modifylow = 0xff, crchigh = 0xff, crclow = 0xff;\n                    modifyhigh = (byte)((int)modifydata * 10 / 256);\n                    modifylow = (byte)((int)modifydata * 10 % 256);\n                    crchigh = (byte)((68 + modifydata * 10) / 256);\n                    crclow = (byte)((68 + modifydata * 10) % 256);\n                    //string[] commandString = new string[] { \"81\", \"81\", \"43\", \"00\", \"modifylow\", \"modifyhigh\", \"crclow\", \"crchigh\" };//将读指令或写指令传入字符串commandString中\n                    //byte[] commandByte = new byte[commandString.Length];//将字符串变成字节数组\n                    byte[] commandByte = new byte[] { 0x81, 0x81, 0x43, 0x00, modifylow, modifyhigh, crclow, crchigh };\n\n\n                    this.serialPort1.Write(commandByte, 0, commandByte.Length);\n                    serialPort1.DiscardOutBuffer();\n                    System.Threading.Thread.Sleep(this.delayTime);\n                }\n                catch\n                {\n                    //MessageBox.Show(er.Message);\n                }\n            }\n        }\n\n        private void button1_Click(object sender, EventArgs e)\n        {\n            button_sendorder.Enabled = true;\n            timer1.Stop();\n        }\n\n        private void radioButton1_CheckedChanged(object sender, EventArgs e)\n        {\n            button_sendorder.Enabled = true;\n        }\n\n        private void radioButton2_CheckedChanged(object sender, EventArgs e)\n        {\n\n        }\n\n        private void button_writedata_Click(object sender, EventArgs e)\n        {\n           if(textBox_path.Text == string.Empty)\n            {\n                MessageBox.Show(\"请选择保存路径\");\n                return;\n            }\n            excel = new ExcelReport();\n            //excel.Show();//显示创建的表格\n            excel.WriteTextToReport(\"A1\", DateTime.Now.Date.ToLongDateString());\n\n            int len = listBox1.Items.Count;\n            string[] str = new string[len];\n            for (int i = 0;i&lt;len;i++)\n            {\n                str[i] = listBox1.Items[i].ToString();\n            }\n            \n            excel.WriteArrayToReport(\"A2\", str);\n            excel.SaveAs(textBox_path.Text + @\"\\dataReport\", ExcelSaveFormat.xlsx);\n            excel.Close();\n            \n        }\n\n        private void button_browse_Click(object sender, EventArgs e)\n        {\n            if(folderBrowserDialog1.ShowDialog() ==DialogResult.OK)\n            {\n                textBox_path.Text = folderBrowserDialog1.SelectedPath;\n            }\n        }\n    }\n}\n</code></pre>\n<p></p>\n</div>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-12-14 11:02:44", "summary": "所用的软件：、创建一个新项目打开，选择创建一个新项目，点击下一步：搜索窗体，找到窗体应用项目，点击下一步：更改项目名称和位置可不做更改，最后点击创建：最后生成这样一个界面：然后修改窗口的名字，点击窗口"}