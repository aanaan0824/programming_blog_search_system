{"blogid": "122935621", "writerAge": "码龄4年", "writerBlogNum": "52", "writerCollect": "601", "writerComment": "50", "writerFan": "158", "writerGrade": "4级", "writerIntegral": "1435", "writerName": "mikechen的互联网架构", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122935621.jpg", "writerRankTotal": "14575", "writerRankWeekly": "12956", "writerThumb": "180", "writerVisitNum": "111174", "blog_read_count": "28125", "blog_time": "于 2022-02-15 08:35:57 发布", "blog_title": "Java泛型详解，史上最全图文详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d59582e32b874ab494faa5b3886fd51d.png\"/></p>\n<p>泛型在java中有很重要的地位，无论是开源框架还是JDK源码都能看到它。</p>\n<p><strong>毫不夸张的说，泛型是通用设计上必不可少的元素，所以真正理解与正确使用泛型，是一门必修课。</strong></p>\n<h2><a id=\"_7\"></a>一：泛型本质</h2>\n<p>Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。</p>\n<p>泛型的本质是参数化类型，即给类型指定一个参数，然后在使用时再指定此参数具体的值，那样这个类型就可以在使用时决定了。这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。</p>\n<p><img alt=\"Java泛型详解，史上最全图文详解！-mikechen的互联网架构\" src=\"..\\..\\static\\image\\5320f006cb635c0195e03831afb9b019.png\"/></p>\n<h2><a id=\"_15\"></a>二：为什么使用泛型</h2>\n<p>泛型的好处是在编译的时候检查类型安全，并且所有的强制转换都是自动和隐式的，提高代码的重用率。</p>\n<p><img alt=\"Java泛型详解，史上最全图文详解！-mikechen的互联网架构\" src=\"..\\..\\static\\image\\8dcb51aa95dcbb37bd796ae583c53758.png\"/></p>\n<p><strong>（1）保证了类型的安全性。</strong></p>\n<p>在没有泛型之前，从集合中读取到的每一个对象都必须进行类型转换，如果不小心插入了错误的类型对象，在运行时的转换处理就会出错。</p>\n<p>比如：没有泛型的情况下使用集合：</p>\n<pre><code>public static void noGeneric() {\nArrayList names = new ArrayList();\nnames.add(\"mikechen的互联网架构\");\nnames.add(123); //编译正常\n}\n</code></pre>\n<p>有泛型的情况下使用集合：</p>\n<pre><code>public static void useGeneric() {\nArrayList&lt;String&gt; names = new ArrayList&lt;&gt;();\nnames.add(\"mikechen的互联网架构\");\nnames.add(123); //编译不通过\n}\n</code></pre>\n<p>有了泛型后，定义好的集合names在编译的时候add(123)就会编译不通过。</p>\n<p>相当于告诉编译器每个集合接收的对象类型是什么，编译器在编译期就会做类型检查，告知是否插入了错误类型的对象，使得程序更加安全，增强了程序的健壮性。</p>\n<p><strong>（2） 消除强制转换</strong></p>\n<p>泛型的一个附带好处是，消除源代码中的许多强制类型转换，这使得代码更加可读，并且减少了出错机会。<br/> 还是举例说明，以下没有泛型的代码段需要强制转换：</p>\n<pre><code>List list = new ArrayList();\nlist.add(\"hello\");\nString s = (String) list.get(0);\n</code></pre>\n<p>当重写为使用泛型时，代码不需要强制转换：</p>\n<pre><code>List&lt;String&gt; list = new ArrayList&lt;String&gt;();\nlist.add(\"hello\");\nString s = list.get(0); // no cast\n</code></pre>\n<p><strong>（3）避免了不必要的装箱、拆箱操作，提高程序的性能</strong></p>\n<p>在非泛型编程中，将筒单类型作为Object传递时会引起Boxing（装箱）和Unboxing（拆箱）操作，这两个过程都是具有很大开销的。引入泛型后，就不必进行Boxing和Unboxing操作了，所以运行效率相对较高，特别在对集合操作非常频繁的系统中，这个特点带来的性能提升更加明显。</p>\n<p>泛型变量固定了类型，使用的时候就已经知道是值类型还是引用类型，避免了不必要的装箱、拆箱操作。</p>\n<pre><code>object a=1;//由于是object类型，会自动进行装箱操作。\n \nint b=(int)a;//强制转换，拆箱操作。这样一去一来，当次数多了以后会影响程序的运行效率。\n</code></pre>\n<p>使用泛型之后</p>\n<pre><code>public static T GetValue&lt;T&gt;(T a)\n \n{\n　　return a;\n}\n \npublic static void Main()\n \n{\n　　int b=GetValue&lt;int&gt;(1);//使用这个方法的时候已经指定了类型是int，所以不会有装箱和拆箱的操作。\n}\n</code></pre>\n<p><strong>（4）提高了代码的重用性。</strong></p>\n<h2><a id=\"_98\"></a>三：如何使用泛型</h2>\n<p>泛型有三种使用方式，分别为：泛型类、泛型接口和泛型方法。</p>\n<p><img alt=\"Java泛型详解，史上最全图文详解！-mikechen的互联网架构\" src=\"..\\..\\static\\image\\2dc13535ff35f8b493440a56fca6b306.png\"/></p>\n<h3><a id=\"1_104\"></a>1、泛型类</h3>\n<p>泛型类：把泛型定义在类上</p>\n<p>定义格式：<br/> <img alt=\"Java泛型详解，史上最全图文详解！-mikechen的互联网架构\" src=\"..\\..\\static\\image\\1db3182a6d057494269abdce8295bc36.png\"/></p>\n<pre><code>public class 类名 &lt;泛型类型1,...&gt; {\n    \n}\n</code></pre>\n<p>注意事项：泛型类型必须是引用类型（非基本数据类型）</p>\n<p>定义泛型类，在类名后添加一对尖括号，并在尖括号中填写类型参数，参数可以有多个，多个参数使用逗号分隔：</p>\n<p>public class GenericClass&lt;ab,a,c&gt; {}</p>\n<p>当然，这个后面的参数类型也是有规范的，不能像上面一样随意，通常类型参数我们都使用大写的单个字母表示：</p>\n<blockquote>\n<p>T：任意类型 type<br/> E：集合中元素的类型 element<br/> K：key-value形式 key<br/> V： key-value形式 value<br/> 示例代码：</p>\n</blockquote>\n<p>泛型类：</p>\n<pre><code>public class GenericClass&lt;T&gt; {\n    private T value;\n \n \n    public GenericClass(T value) {\n        this.value = value;\n    }\n    public T getValue() {\n        return value;\n    }\n    public void setValue(T value) {\n        this.value = value;\n    }\n}\n</code></pre>\n<p>测试类：</p>\n<pre><code>//TODO 1:泛型类\nGenericClass&lt;String&gt; name = new GenericClass&lt;&gt;(\"mikechen的互联网架构\");\nSystem.out.println(name.getValue());\n \n \nGenericClass&lt;Integer&gt; number = new GenericClass&lt;&gt;(123);\nSystem.out.println(number.getValue());\n</code></pre>\n<p>运行结果：</p>\n<p><img alt=\"Java泛型详解，史上最全图文详解！-mikechen的互联网架构\" src=\"..\\..\\static\\image\\6f304f380f77128aa0b4059953de4501.png\"/></p>\n<h3><a id=\"2_166\"></a>2、泛型接口</h3>\n<p>泛型方法概述：把泛型定义在方法上<br/> <img alt=\"Java泛型详解，史上最全图文详解！-mikechen的互联网架构\" src=\"..\\..\\static\\image\\ed46d1a9cd3bd4a129b4cefffb49a7ef.png\"/><br/> 定义格式：</p>\n<pre><code>public &lt;泛型类型&gt; 返回类型 方法名（泛型类型 变量名） {\n    \n}\n</code></pre>\n<p>注意要点：</p>\n<ul><li>\n<ul><li>方法声明中定义的形参只能在该方法里使用，而接口、类声明中定义的类型形参则可以在整个接口、类中使用。当调用fun()方法时，根据传入的实际对象，编译器就会判断出类型形参T所代表的实际类型。</li></ul> </li></ul>\n<pre><code>public interface GenericInterface&lt;T&gt; {\nvoid show(T value);}\n}\npublic class StringShowImpl implements GenericInterface&lt;String&gt; {\n@Override\npublic void show(String value) {\nSystem.out.println(value);\n}}\n \npublic class NumberShowImpl implements GenericInterface&lt;Integer&gt; {\n@Override\npublic void show(Integer value) {\nSystem.out.println(value);\n}}\n</code></pre>\n<p>注意：使用泛型的时候，前后定义的泛型类型必须保持一致，否则会出现编译异常：</p>\n<pre><code>GenericInterface&lt;String&gt; genericInterface = new NumberShowImpl();//编译异常\n</code></pre>\n<p>或者干脆不指定类型，那么 new 什么类型都是可以的：</p>\n<pre><code>GenericInterface g1 = new NumberShowImpl();\nGenericInterface g2 = new StringShowImpl();\n</code></pre>\n<p>3、泛型方法</p>\n<p>泛型方法，是在调用方法的时候指明泛型的具体类型 。<br/> <img alt=\"Java泛型详解，史上最全图文详解！-mikechen的互联网架构\" src=\"..\\..\\static\\image\\cbd36e763feb3d7b14c3820a3457d8bc.png\"/></p>\n<ul><li>定义格式：</li></ul>\n<blockquote>\n<p>修饰符 &lt;代表泛型的变量&gt; 返回值类型 方法名(参数){ }</p>\n</blockquote>\n<p>例如：</p>\n<pre><code>/**\n     *\n     * @param t 传入泛型的参数\n     * @param &lt;T&gt; 泛型的类型\n     * @return T 返回值为T类型\n     * 说明：\n     *   1）public 与 返回值中间&lt;T&gt;非常重要，可以理解为声明此方法为泛型方法。\n     *   2）只有声明了&lt;T&gt;的方法才是泛型方法，泛型类中的使用了泛型的成员方法并不是泛型方法。\n     *   3）&lt;T&gt;表明该方法将使用泛型类型T，此时才可以在方法中使用泛型类型T。\n     *   4）与泛型类的定义一样，此处T可以随便写为任意标识，常见的如T、E等形式的参数常用于表示泛型。\n     */\n    public &lt;T&gt; T genercMethod(T t){\n        System.out.println(t.getClass());\n        System.out.println(t);\n        return t;\n    }\n \n \npublic static void main(String[] args) {\n    GenericsClassDemo&lt;String&gt; genericString  = new GenericsClassDemo(\"helloGeneric\"); //这里的泛型跟下面调用的泛型方法可以不一样。\n    String str = genericString.genercMethod(\"hello\");//传入的是String类型,返回的也是String类型\n    Integer i = genericString.genercMethod(123);//传入的是Integer类型,返回的也是Integer类型\n}\n \n \nclass java.lang.String\nhello\n \n \nclass java.lang.Integer\n123\n</code></pre>\n<p>这里可以看出，泛型方法随着我们的传入参数类型不同，他得到的类型也不同。泛型方法能使方法独立于类而产生变化。</p>\n<h2><a id=\"_259\"></a>四：泛型通配符</h2>\n<p><strong>Java泛型的通配符是用于解决泛型之间引用传递问题的特殊语法, 主要有以下三类:</strong></p>\n<p><img alt=\"Java泛型详解，史上最全图文详解！-mikechen的互联网架构\" src=\"..\\..\\static\\image\\dd75905a8af533dd3f90a52877e8c84b.png\"/></p>\n<pre><code>//表示类型参数可以是任何类型\npublic class Apple&lt;?&gt;{}\n \n//表示类型参数必须是A或者是A的子类\npublic class Apple&lt;T extends A&gt;{}\n \n//表示类型参数必须是A或者是A的超类型\npublic class Apple&lt;T supers A&gt;{}\n</code></pre>\n<p><strong>1. 无边界的通配符(Unbounded Wildcards), 就是&lt;?&gt;, 比如List&lt;?&gt;</strong></p>\n<p>无边界的通配符的主要作用就是让泛型能够接受未知类型的数据.</p>\n<p><strong>2. 固定上边界的通配符(Upper Bounded Wildcards)，采用&lt;? extends E&gt;的形式</strong></p>\n<p>使用固定上边界的通配符的泛型, 就能够接受指定类及其子类类型的数据。</p>\n<p>要声明使用该类通配符, 采用&lt;? extends E&gt;的形式, 这里的E就是该泛型的上边界。</p>\n<p>注意: 这里虽然用的是extends关键字, 却不仅限于继承了父类E的子类, 也可以代指显现了接口E的类</p>\n<p><strong>3. 固定下边界的通配符(Lower Bounded Wildcards)，采用&lt;? super E&gt;的形式</strong></p>\n<p>使用固定下边界的通配符的泛型, 就能够接受指定类及其父类类型的数据.。</p>\n<p>要声明使用该类通配符, 采用&lt;? super E&gt;的形式, 这里的E就是该泛型的下边界.。</p>\n<p>注意: 你可以为一个泛型指定上边界或下边界, 但是不能同时指定上下边界。</p>\n<h2><a id=\"KTVE_298\"></a>五：泛型中KTVE的含义</h2>\n<p>果点开JDK中一些泛型类的源码，我们会看到下面这些代码：</p>\n<pre><code>public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt; implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable{\n...\n}\npublic class HashMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt; implements Map&lt;K,V&gt;, Cloneable, Serializable {\n...\n}\n</code></pre>\n<p>上面这些泛型类定义中的泛型参数E、K和V都是什么意思呢？其实这些参数名称是可以任意指定，就想方法的参数名一样可以任意指定，但是我们通常会起一个有意义的名称，让别人一看就知道是什么意思。泛型参数也一样，E一般是指元素，用来集合类中。</p>\n<p><strong>常见泛型参数名称有如下：</strong></p>\n<p>E： Element (在集合中使用，因为集合中存放的是元素)<br/> T：Type（Java 类）<br/> K： Key（键）<br/> V： Value（值）<br/> N： Number（数值类型）<br/> ？： 表示不确定的java类型</p>\n<h2><a id=\"_322\"></a>六：泛型的实现原理</h2>\n<p>泛型本质是将数据类型参数化，它通过擦除的方式来实现，即编译器会在编译期间「擦除」泛型语法并相应的做出一些类型转换动作。</p>\n<p>看一个例子就应该清楚了，例如：</p>\n<pre><code>public class Caculate&lt;T&gt; {\nprivate T num;\n}\n</code></pre>\n<p>我们定义了一个泛型类，定义了一个属性成员，该成员的类型是一个泛型类型，这个 T 具体是什么类型，我们也不知道，它只是用于限定类型的。</p>\n<p>反编译一下这个 Caculate 类：</p>\n<pre><code>public class Caculate{\npublic Caculate(){}\nprivate Object num;\n}\n</code></pre>\n<p>发现编译器擦除 Caculate 类后面的两个尖括号，并且将 num 的类型定义为 Object 类型。</p>\n<p>那么是不是所有的泛型类型都以 Object 进行擦除呢？大部分情况下，泛型类型都会以 Object 进行替换，而有一种情况则不是。那就是使用到了extends和super语法的有界类型，如：</p>\n<pre><code>public class Caculate&lt;T extends String&gt; {\nprivate T num;\n}\n</code></pre>\n<p>这种情况的泛型类型，num 会被替换为 String 而不再是 Object。</p>\n<p>这是一个类型限定的语法，它限定 T 是 String 或者 String 的子类，也就是你构建 Caculate 实例的时候只能限定 T 为 String 或者 String 的子类，所以无论你限定 T 为什么类型，String 都是父类，不会出现类型不匹配的问题，于是可以使用 String 进行类型擦除。</p>\n<p>实际上编译器会正常的将使用泛型的地方编译并进行类型擦除，然后返回实例。但是除此之外的是，如果构建泛型实例时使用了泛型语法，那么编译器将标记该实例并关注该实例后续所有方法的调用，每次调用前都进行安全检查，非指定类型的方法都不能调用成功。</p>\n<p>实际上编译器不仅关注一个泛型方法的调用，它还会为某些返回值为限定的泛型类型的方法进行强制类型转换，由于类型擦除，返回值为泛型类型的方法都会擦除成 Object 类型，当这些方法被调用后，编译器会额外插入一行 checkcast 指令用于强制类型转换，这一个过程就叫做『泛型翻译』。</p>\n<h2><a id=\"_363\"></a>七：最后</h2>\n<p>以上我就分别从Java泛型的诞生，再到泛型的使用，以及泛型的实现原理等六个方面进行了完整详解，希望对你有所用！</p>\n<hr/>\n<p>关于作者：<a href=\"https://mikechen.cc/\">mikechen</a>，十余年BAT架构经验，资深技术专家，曾任职阿里、淘宝、百度。</p>\n<p>欢迎关注个人公众号：<a href=\"https://shimo.im/docs/pjrtkWhhVq6KwgJ6\">mikechen的互联网架构</a>，十余年BAT架构经验倾囊相授！</p>\n<p>在公众号菜单栏对话框回复【<strong>架构</strong>】关键词，即可查看我<strong>原创的300期+BAT架构技术系列文章与1000+大厂面试题答案合集。</strong><br/> <img alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-QvA19Abs-1642131270867)(/img/bVcXnzj)]\" src=\"..\\..\\static\\image\\010a61f523274cea918c24f29e2b290e.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-02-15 08:35:57", "summary": "在这里插入图片描述泛型在中有很重要的地位，无论是开源框架还是源码都能看到它。毫不夸张的说，泛型是通用设计上必不可少的元素，所以真正理解与正确使用泛型，是一门必修课。一：泛型本质泛型是中引入的一个新特性"}