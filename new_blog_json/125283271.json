{"blogid": "125283271", "writerAge": "码龄4年", "writerBlogNum": "159", "writerCollect": "472", "writerComment": "65", "writerFan": "47", "writerGrade": "5级", "writerIntegral": "2534", "writerName": "木白星枝", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125283271.jpg", "writerRankTotal": "14129", "writerRankWeekly": "34112", "writerThumb": "112", "writerVisitNum": "201116", "blog_read_count": "11681", "blog_time": "于 2022-06-14 18:04:08 发布", "blog_title": "python读取文件的几种方式", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>下面是不同场景较为合适的数据读取方法：</p>\n<p>1.python内置方法（read、readline、readlines）</p>\n<p>纯文本格式或非格式化、非结构化的数据，常用语自然语言处理、非结构文本解析、应用正则表达式等后续应用场景下，Python默认的三种方法更为合适。<br/> 1.1 read() ： 一次性读取整个文件内容。推荐使用read(size)方法，size越大运行时间越长</p>\n<p>读取整个文件，将文件内容放到一个字符串变量中，如果文件大于可用内存，不能使用这种处理。</p>\n<pre><code>file_object = open(\"test.py\",'r') #创建一个文件对象，也是一个可迭代对象\ntry:\n    all_the_text = file_object.read()  #结果为str类型\n    print (type(all_the_text))\n    print (\"all_the_text=\",all_the_text)\nfinally:\n    file_object.close()\n</code></pre>\n<p>1.2readline() ：每次读取一行内容。内存不够时使用，一般不太用</p>\n<p>readline()每次读取一行，比readlines()慢得多，返回的是一个字符串对象，保存当前行的内容</p>\n<pre><code>file_object1 = open(\"test.py\",'r')\ntry:\n  while True:\n      line = file_object1.readline()\n      if line:\n          print (\"line=\",line)\n      else:\n          break\nfinally:\n    file_object1.close()\n</code></pre>\n<p>1.3readlines() ：一次性读取整个文件内容，并按行返回到list，方便我们遍历</p>\n<pre><code>file_object2 = open(\"test.py\",'r')\ntry:\n  lines = file_object2.readlines()\n  print \"type(lines)=\",type(lines) #type(lines)= &lt;type 'list'&gt;\n  for line in lines:\n      print (\"line=\",line)  \nfinally:\n    file_object2.close()\n</code></pre>\n<p>2.numpy库</p>\n<p>结构化、纯数值型的数据，并且主要用于矩阵计算、数据建模的，使用Numpy的loadtxt更方便。<br/> 对于二进制的数据处理，使用Numpy的load和fromfile方法更为合适。</p>\n<p><a href=\"https://blog.csdn.net/qq_42759120/article/details/125130389?spm=1001.2014.3001.5501\" title=\"Numpy库的学习_木白星枝的博客-CSDN博客\">Numpy库的学习_木白星枝的博客-CSDN博客</a></p>\n<p>3.pandas库<br/> 对于结构化的、探索性数据统计和分析场景，使用pandas方法进行读取，因为其提供了数据框，对数据进行任意翻转、切片、关联都很方便。</p>\n<p><a href=\"https://blog.csdn.net/qq_42759120/article/details/125190614?spm=1001.2014.3001.5501\" title=\"Pandas库的学习_木白星枝的博客-CSDN博客\">Pandas库的学习_木白星枝的博客-CSDN博客</a></p>\n<p></p>\n</div>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-06-14 18:04:08", "summary": "下面是不同场景较为合适的数据读取方法：内置方法、、纯文本格式或非格式化、非结构化的数据，常用语自然语言处理、非结构文本解析、应用正则表达式等后续应用场景下，默认的三种方法更为合适。：一次性读取整个文件"}