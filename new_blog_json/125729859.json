{"blogid": "125729859", "writerAge": "码龄1年", "writerBlogNum": "80", "writerCollect": "3729", "writerComment": "3288", "writerFan": "5916", "writerGrade": "7级", "writerIntegral": "9815", "writerName": "knighthood2001", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125729859.jpg", "writerRankTotal": "1343", "writerRankWeekly": "41", "writerThumb": "3241", "writerVisitNum": "158595", "blog_read_count": "2027", "blog_time": "于 2022-07-14 06:00:00 发布", "blog_title": "python查找与排序算法详解（示意图+代码、看完基础不成问题）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<blockquote>\n<p> 🔝🔝🔝🔝🔝🔝🔝🔝🔝🔝🔝🔝 </p>\n<p><strong>🥰 博客首页：<strong><a href=\"https://blog.csdn.net/knighthood2001?type=lately\" title=\"knighthood2001\">knighthood2001</a></strong></strong></p>\n<p><strong>😗 欢迎点赞👍评论🗨️</strong></p>\n<p><strong>❤️ 热爱python，期待与大家一同进步成长！！❤️</strong></p>\n<p><strong>👀<a href=\"https://www.nowcoder.com/link/pc_csdncpt_knight_python\" title=\"给大家推荐一款很火爆的刷题、面试求职网站\">给大家推荐一款很火爆的刷题、面试求职网站</a>👀</strong></p>\n</blockquote>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E6%9F%A5%E6%89%BE-toc\" style=\"margin-left:40px;\"><strong><a href=\"#%E6%9F%A5%E6%89%BE\"><span style=\"color:#956fe7;\"><span style=\"background-color:#fefcd8;\">查找</span></span></a></strong></p>\n<p id=\"%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE-toc\" style=\"margin-left:80px;\"><strong><a href=\"#%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE\"><span style=\"color:#faa572;\"><span style=\"background-color:#fefcd8;\">二分查找</span></span></a></strong></p>\n<p id=\"%E7%BA%BF%E6%80%A7%E6%9F%A5%E6%89%BE-toc\" style=\"margin-left:80px;\"><strong><a href=\"#%E7%BA%BF%E6%80%A7%E6%9F%A5%E6%89%BE\"><span style=\"color:#1c7331;\"><span style=\"background-color:#fefcd8;\">线性查找</span></span></a></strong></p>\n<p id=\"%E6%8E%92%E5%BA%8F%C2%A0-toc\" style=\"margin-left:40px;\"><strong><a href=\"#%E6%8E%92%E5%BA%8F%C2%A0\"><span style=\"color:#956fe7;\"><span style=\"background-color:#fefcd8;\">排序 </span></span></a></strong></p>\n<p id=\"%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F-toc\" style=\"margin-left:80px;\"><strong><a href=\"#%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F\"><span style=\"color:#1c7331;\"><span style=\"background-color:#fefcd8;\">插入排序</span></span></a></strong></p>\n<p id=\"%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-toc\" style=\"margin-left:80px;\"><strong><a href=\"#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F\"><span style=\"color:#1c7331;\"><span style=\"background-color:#fefcd8;\">快速排序</span></span></a></strong></p>\n<p id=\"%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F-toc\" style=\"margin-left:80px;\"><strong><a href=\"#%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F\"><span style=\"color:#faa572;\"><span style=\"background-color:#fefcd8;\">选择排序</span></span></a></strong></p>\n<p id=\"%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F-toc\" style=\"margin-left:80px;\"><strong><a href=\"#%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F\"><span style=\"color:#faa572;\"><span style=\"background-color:#fefcd8;\">冒泡排序</span></span></a></strong></p>\n<p id=\"%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F-toc\" style=\"margin-left:80px;\"><strong><a href=\"#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F\"><span style=\"color:#1c7331;\"><span style=\"background-color:#fefcd8;\">归并排序</span></span></a></strong></p>\n<p id=\"%E5%A0%86%E6%8E%92%E5%BA%8F-toc\" style=\"margin-left:80px;\"><strong><a href=\"#%E5%A0%86%E6%8E%92%E5%BA%8F\"><span style=\"color:#1c7331;\"><span style=\"background-color:#fefcd8;\">堆排序</span></span></a></strong></p>\n<p id=\"%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F-toc\" style=\"margin-left:80px;\"><strong><a href=\"#%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F\"><span style=\"color:#1c7331;\"><span style=\"background-color:#fefcd8;\">计数排序</span></span></a></strong></p>\n<p id=\"%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F-toc\" style=\"margin-left:80px;\"><strong><a href=\"#%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F\"><span style=\"color:#1c7331;\"><span style=\"background-color:#fefcd8;\">希尔排序</span></span></a></strong></p>\n<p id=\"%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F-toc\" style=\"margin-left:80px;\"><strong><a href=\"#%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F\"><span style=\"color:#1c7331;\"><span style=\"background-color:#fefcd8;\">拓扑排序</span></span></a></strong></p>\n<p id=\"%E6%80%BB%E7%BB%93-toc\" style=\"margin-left:40px;\"><strong><a href=\"#%E6%80%BB%E7%BB%93\"><span style=\"color:#956fe7;\"><span style=\"background-color:#fefcd8;\">总结</span></span></a></strong></p>\n<hr id=\"hr-toc\"/>\n<p>        笔者最近在找一些经典算法，这时候发现牛客网中有许多，笔者根据源码并进行了一下细微的调整，现将整理好的代码及运行结果写出来，需要进行刷题的可以<a class=\"link-info\" href=\"https://www.nowcoder.com/link/pc_csdncpt_knight_python\" title=\"点此进行注册，开启刷题之旅！！\">点此进行注册，开启刷题之旅！！</a></p>\n<p>        当然，牛客网中有些代码所展示出来的格式不太好 ，比如print ()而不是print()、有些会在行后面加‘;’，不太符合python的写法。不过这些不是最主要的，<span style=\"color:#98c091;\"><strong>接下来开启python查找与排序之旅吧！！ </strong></span></p>\n<hr/>\n<h2 id=\"%E6%9F%A5%E6%89%BE\"><span style=\"color:#956fe7;\"><strong>查找</strong></span></h2>\n<h3 id=\"%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE\"><strong>二分查找</strong></h3>\n<p>        <strong>二分搜索</strong>是一种在有序数组中查找某一特定元素的搜索算法。搜索过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜索过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组为空，则代表找不到。这种搜索算法每一次比较都使搜索范围缩小一半。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\5f16c36c81c7425999d31ca70fcaba55.png\"/></p>\n<pre><code class=\"language-python\"># 返回 x 在 arr 中的索引，如果不存在返回 -1\ndef binarySearch (arr, l, r, x):\n    # 基本判断\n    if r &gt;= l:\n        mid = int(l + (r - l)/2)\n        # 元素整好的中间位置\n        if arr[mid] == x:\n            return mid\n        # 元素小于中间位置的元素，只需要再比较左边的元素\n        elif arr[mid] &gt; x:\n            return binarySearch(arr, l, mid-1, x)\n        # 元素大于中间位置的元素，只需要再比较右边的元素\n        else:\n            return binarySearch(arr, mid+1, r, x)\n    else:\n        # 不存在\n        return -1\n\n# 测试数组\narr = [ 2, 3, 4, 10, 40]\nx = int(input('请输入元素：'))\n# 函数调用\nresult = binarySearch(arr, 0, len(arr)-1, x)\n\nif result != -1:\n    print(\"元素在数组中的索引为 %d\" % result)\nelse:\n    print(\"元素不在数组中\")</code></pre>\n<p><strong>        运行结果： </strong></p>\n<pre><code>请输入元素：4\n元素在数组中的索引为 2</code></pre>\n<pre><code>请输入元素：5\n元素不在数组中</code></pre>\n<h3 id=\"%E7%BA%BF%E6%80%A7%E6%9F%A5%E6%89%BE\"><strong>线性查找</strong></h3>\n<p>        <strong>线性查找</strong>指按一定的顺序检查数组中每一个元素，直到找到所要寻找的特定值为止。 </p>\n<pre><code class=\"language-python\">def search(arr, n, x):\n    for i in range (0, n):\n        if (arr[i] == x):\n            return i\n    return -1\n\n# 在数组 arr 中查找字符 D\narr = [ 'A', 'B', 'C', 'D', 'E' ]\nx = input(\"请输入要查找的元素：\")\nn = len(arr)\nresult = search(arr, n, x)\nif(result == -1):\n    print(\"元素不在数组中\")\nelse:\n    print(\"元素在数组中的索引为\", result)</code></pre>\n<p><strong>        运行结果： </strong></p>\n<pre><code>请输入要查找的元素：A\n元素在数组中的索引为 0\n</code></pre>\n<pre><code class=\"language-python\">请输入要查找的元素：a\n元素不在数组中</code></pre>\n<h2 id=\"%E6%8E%92%E5%BA%8F%C2%A0\"><span style=\"color:#956fe7;\"><strong>排序</strong></span> </h2>\n<h3 id=\"%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F\"><strong>插入排序</strong></h3>\n<p>        <strong>插入排序（Insertion Sort）</strong>是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/4350e9600ff448a68588e3da8177c046.gif\"/></p>\n<pre><code class=\"language-python\">def insertionSort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i-1\n        while j &gt;= 0 and key &lt; arr[j]:\n                arr[j+1] = arr[j]\n                j -= 1\n        arr[j+1] = key\n\narr = [12, 11, 13, 5, 6, 7, 9, 9, 17]\ninsertionSort(arr)\nprint(\"排序后的数组:\")\nprint(arr)\n</code></pre>\n<p><strong>        运行结果：  </strong></p>\n<pre><code>排序后的数组:\n[5, 6, 7, 9, 9, 11, 12, 13, 17]</code></pre>\n<p>当然也可以这样写，更简洁</p>\n<pre><code class=\"language-python\">list1 = [12, 11, 13, 5, 6, 7, 9, 9, 17]\nfor i in range(len(list1)-1, 0, -1):\n    for j in range(0, i):\n        if list1[i] &lt; list1[j]:\n            list1[i], list1[j] = list1[j], list1[i]\nprint(list1)</code></pre>\n<h3 id=\"%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F\"><strong>快速排序</strong></h3>\n<p>        <strong>快速排序</strong>使用<span style=\"color:#956fe7;\"><strong>分治法（Divide and conquer）</strong></span>策略来把一个序列（list）分为较小和较大的2个子序列，然后递归地排序两个子序列。</p>\n<p><strong>步骤为：</strong></p>\n<ul><li>挑选基准值：从数列中挑出一个元素，称为\"基准\"（pivot）;</li><li>分割：重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（与基准值相等的数可以到任何一边）。在这个分割结束之后，对基准值的排序就已经完成;</li><li>递归排序子序列：递归地将小于基准值元素的子序列和大于基准值元素的子序列排序。</li></ul>\n<p>递归到最底部的判断条件是数列的大小是零或一，此时该数列显然已经有序。</p>\n<p>选取基准值有数种具体方法，此选取方法对排序的时间性能有决定性影响。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/40769194694e4a7785c055fdd2b29c89.gif\"/></p>\n<pre><code class=\"language-python\">def partition(arr, low, high):\n    i = (low-1)         # 最小元素索引\n    pivot = arr[high]\n\n    for j in range(low, high):\n        # 当前元素小于或等于 pivot\n        if arr[j] &lt;= pivot:\n            i = i+1\n            arr[i], arr[j] = arr[j], arr[i]\n\n    arr[i+1], arr[high] = arr[high], arr[i+1]\n    return (i+1)\n\n# arr[] --&gt; 排序数组\n# low  --&gt; 起始索引\n# high  --&gt; 结束索引\n\n# 快速排序函数\ndef quickSort(arr, low, high):\n    if low &lt; high:\n        pi = partition(arr, low, high)\n        quickSort(arr, low, pi-1)\n        quickSort(arr, pi+1, high)\n    return arr\n\narr = [10, 7, 8, 9, 1, 5]\nn = len(arr)\n\nprint(\"排序后的数组:\")\nprint(quickSort(arr, 0, n-1))</code></pre>\n<p><strong>        运行结果：  </strong> </p>\n<pre><code>排序后的数组:\n[1, 5, 7, 8, 9, 10]</code></pre>\n<h3 id=\"%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F\"><strong>选择排序</strong></h3>\n<p>       <strong> 选择排序（Selection sort）</strong>是一种简单直观的排序算法。它的工作原理如下。</p>\n<p>        首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/d374241a9ceb47e8bc8faa4e0a0cd112.gif\"/></p>\n<pre><code class=\"language-python\">A = [64, 25, 12, 22, 11]\nfor i in range(len(A)): \n    min_idx = i\n    for j in range(i+1, len(A)):\n        if A[min_idx] &gt; A[j]:\n            min_idx = j\n\n    A[i], A[min_idx] = A[min_idx], A[i]\n\nprint(\"排序后的数组：\")\nprint(A)</code></pre>\n<p><strong>        运行结果：  </strong> </p>\n<pre><code>排序后的数组：\n[11, 12, 22, 25, 64]</code></pre>\n<h3 id=\"%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F\"><strong>冒泡排序</strong></h3>\n<p>        <strong>冒泡排序（Bubble Sort）</strong>也是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢\"浮\"到数列的顶端。<img alt=\"\" src=\"https://img-blog.csdnimg.cn/a44c7f0053084058b89adefa285548a7.gif\"/></p>\n<pre><code class=\"language-python\">def bubbleSort(arr):\n    n = len(arr)\n    # 遍历所有数组元素\n    for i in range(n):\n        # Last i elements are already in place\n        for j in range(0, n-i-1):\n\n            if arr[j] &gt; arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\narr = [64, 34, 25, 12, 22, 11, 90]\n\nprint(\"排序后的数组:\")\nprint(bubbleSort(arr))</code></pre>\n<p><strong>        运行结果：  </strong> </p>\n<pre><code>排序后的数组:\n[11, 12, 22, 25, 34, 64, 90]</code></pre>\n<h3 id=\"%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F\"><strong>归并排序</strong></h3>\n<p>        <strong>归并排序（Merge sort，或mergesort）</strong>，是创建在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。</p>\n<p><span style=\"color:#1c7892;\"><strong>分治法:</strong></span></p>\n<ul><li>分割：递归地把当前序列平均分割成两半。</li><li>集成：在保持元素顺序的同时将上一步得到的子序列集成到一起（归并）。</li></ul>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/d79f9368647648eca7bee66c829d9875.gif\"/></p>\n<pre><code class=\"language-python\">def merge(arr, l, m, r):\n    n1 = m - l + 1\n    n2 = r - m\n\n    # 创建临时数组\n    L = [0] * (n1)\n    R = [0] * (n2)\n\n    # 拷贝数据到临时数组 arrays L[] 和 R[]\n    for i in range(0, n1):\n        L[i] = arr[l + i]\n\n    for j in range(0, n2):\n        R[j] = arr[m + 1 + j]\n\n    # 归并临时数组到 arr[l..r]\n    i = 0     # 初始化第一个子数组的索引\n    j = 0     # 初始化第二个子数组的索引\n    k = l     # 初始归并子数组的索引\n\n    while i &lt; n1 and j &lt; n2:\n        if L[i] &lt;= R[j]:\n            arr[k] = L[i]\n            i += 1\n        else:\n            arr[k] = R[j]\n            j += 1\n        k += 1\n\n    # 拷贝 L[] 的保留元素\n    while i &lt; n1:\n        arr[k] = L[i]\n        i += 1\n        k += 1\n\n    # 拷贝 R[] 的保留元素\n    while j &lt; n2:\n        arr[k] = R[j]\n        j += 1\n        k += 1\n\ndef mergeSort(arr, l, r):\n    if l &lt; r:\n        m = int((l+(r-1))/2)\n        mergeSort(arr, l, m)\n        mergeSort(arr, m+1, r)\n        merge(arr, l, m, r)\n    return arr\n\nprint (\"给定的数组\")\narr = [12, 11, 13, 5, 6, 7, 13]\nprint(arr)\nn = len(arr)\nmergeSort(arr, 0, n-1)\nprint(\"排序后的数组\")\nprint(arr)</code></pre>\n<p><strong>        运行结果：  </strong> </p>\n<pre><code>给定的数组\n[12, 11, 13, 5, 6, 7, 13]\n排序后的数组\n[5, 6, 7, 11, 12, 13, 13]</code></pre>\n<h3 id=\"%E5%A0%86%E6%8E%92%E5%BA%8F\"><strong>堆排序</strong></h3>\n<p>       <strong> 堆排序（Heapsort）</strong>是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。堆排序可以说是一种利用堆的概念来排序的选择排序。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/335fd6dbe0284b85ae36096768fb8cd5.gif\"/></p>\n<pre><code class=\"language-python\">def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1     # left = 2*i + 1\n    r = 2 * i + 2     # right = 2*i + 2\n\n    if l &lt; n and arr[i] &lt; arr[l]:\n        largest = l\n\n    if r &lt; n and arr[largest] &lt; arr[r]:\n        largest = r\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]  # 交换\n\ndef heapSort(arr):\n    n = len(arr)\n    # Build a maxheap.\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n\n    # 一个个交换元素\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]   # 交换\n        heapify(arr, i, 0)\n    return arr\n\narr = [12, 11, 13, 5, 6, 7, 13, 18]\nheapSort(arr)\nprint(\"排序后的数组\")\nprint(heapSort(arr))\n</code></pre>\n<p><strong>        运行结果：  </strong> </p>\n<pre><code class=\"language-python\">排序后的数组\n[5, 6, 7, 12, 11, 13, 13, 18]</code></pre>\n<h3 id=\"%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F\"><strong>计数排序</strong></h3>\n<p>        <strong>计数排序</strong>的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/7cb600d83e03429eae3738a677de240f.gif\"/></p>\n<p></p>\n<pre><code class=\"language-python\">def countSort(arr):\n\n    output = [0 for i in range(256)]\n\n    count = [0 for i in range(256)]\n\n    ans = [\"\" for _ in arr]\n\n    for i in arr:\n        count[ord(i)] += 1\n\n    for i in range(256):\n        count[i] += count[i-1] \n\n    for i in range(len(arr)):\n        output[count[ord(arr[i])]-1] = arr[i]\n        count[ord(arr[i])] -= 1\n\n    for i in range(len(arr)):\n        ans[i] = output[i]\n    return ans\n\narr = \"wwwnowcodercom\"\nans = countSort(arr)\nprint(\"字符数组排序 %s\" %(\"\".join(ans)))</code></pre>\n<p><strong>        运行结果：  </strong> </p>\n<pre><code>字符数组排序 ccdemnooorwwww</code></pre>\n<h3 id=\"%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F\"><strong>希尔排序</strong></h3>\n<p>        <strong>希尔排序</strong>，也称<strong>递减增量排序算法</strong>，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。</p>\n<p>        希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录\"基本有序\"时，再对全体记录进行依次直接插入排序。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/f3ad32daf88840ef85fadb04d9049b1e.gif\"/></p>\n<pre><code class=\"language-python\">def shellSort(arr):\n    n = len(arr)\n    gap = int(n/2)\n\n    while gap &gt; 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j &gt;= gap and arr[j-gap] &gt; temp:\n                arr[j] = arr[j-gap]\n                j -= gap\n            arr[j] = temp\n        gap = int(gap/2)\n    return arr\n\narr = [12, 34, 54, 2, 3, 2, 5]\n\nprint(\"排序前:\")\nprint(arr)\nprint(\"排序后:\")\nprint(shellSort(arr))</code></pre>\n<p><strong>        运行结果：  </strong> </p>\n<pre><code>排序前:\n[12, 34, 54, 2, 3, 2, 5]\n排序后:\n[2, 2, 3, 5, 12, 34, 54]\n</code></pre>\n<h3 id=\"%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F\"><strong>拓扑排序</strong></h3>\n<p>        对一个有向无环图(Directed Acyclic Graph简称DAG)G进行拓扑排序，是将G中所有顶点排成一个线性序列，使得图中任意一对顶点u和v，若边(u,v)∈E(G)，则u在线性序列中出现在v之前。通常，这样的线性序列称为满足拓扑次序(Topological Order)的序列，简称拓扑序列。简单的说，由某个集合上的一个偏序得到该集合上的一个全序，这个操作称之为拓扑排序。</p>\n<p>        在图论中，由一个有向无环图的顶点组成的序列，当且仅当满足下列条件时，称为该图的一个拓扑排序（英语：Topological sorting）：</p>\n<ul><li>每个顶点出现且只出现一次；</li><li>若A在序列中排在B的前面，则在图中不存在从B到A的路径。</li></ul>\n<p class=\"img-center\"><img alt=\"\" height=\"374\" src=\"..\\..\\static\\image\\5010fb54f87a42f4b67fe1c978986a12.png\" width=\"485\"/></p>\n<pre><code class=\"language-python\">from collections import defaultdict\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n\n    def addEdge(self, u, v):\n        self.graph[u].append(v)\n\n    def topologicalSortUtil(self, v, visited, stack):\n\n        visited[v] = True\n\n        for i in self.graph[v]:\n            if visited[i] == False:\n                self.topologicalSortUtil(i, visited, stack)\n\n        stack.insert(0,v)\n\n    def topologicalSort(self):\n        visited = [False]*self.V\n        stack = []\n\n        for i in range(self.V):\n            if visited[i] == False:\n                self.topologicalSortUtil(i, visited, stack)\n\n        print(stack)\n\ng= Graph(6)\ng.addEdge(5, 2)\ng.addEdge(5, 0)\ng.addEdge(4, 0)\ng.addEdge(4, 1)\ng.addEdge(2, 3)\ng.addEdge(3, 1)\n\nprint(\"拓扑排序结果：\")\ng.topologicalSort()</code></pre>\n<p><strong>        运行结果：  </strong> </p>\n<pre><code>拓扑排序结果：\n[5, 4, 2, 3, 1, 0]\n</code></pre>\n<h2 id=\"%E6%80%BB%E7%BB%93\"><strong>总结</strong></h2>\n<p>        以上全部内容全部来自<a class=\"link-info\" href=\"https://www.nowcoder.com/link/pc_csdncpt_knight_python\" title=\"牛客网\">牛客网</a>，以上很多代码笔者更改过，并且全部检验过，可以运行且能得出目标结果，使得结果更加贴近我们平时所需，以上有些排序比较重要与热门，比如vb中也会学到的二分查找、选择排序、冒泡排序，以上代码如有错误，请指正。</p>\n<p></p>\n<p></p>\n</div>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-07-14 06:00:00", "summary": "博客首页：欢迎点赞评论热爱，期待与大家一同进步成长！！给大家推荐一款很火爆的刷题、面试求职网站给大家推荐一款很火爆的刷题、面试求职网站目录查找二分查找线性查找排序插入排序快速排序选择排序冒泡排序归并排"}