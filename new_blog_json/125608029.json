{"blogid": "125608029", "writerAge": "码龄4年", "writerBlogNum": "137", "writerCollect": "3421", "writerComment": "3426", "writerFan": "10432", "writerGrade": "7级", "writerIntegral": "11210", "writerName": "@魏大大", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125608029.jpg", "writerRankTotal": "1405", "writerRankWeekly": "174", "writerThumb": "3586", "writerVisitNum": "134364", "blog_read_count": "1571", "blog_time": "已于 2022-07-05 19:54:31 修改", "blog_title": "Node.js中9种必须要掌握的fs模块文件操作方法、文件夹递归删除知识，文末提供源码", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8b4a4855fe7444ba859925a594c3791b.jpeg\"/><br/> 本文主要介绍了<code>Node.js</code>常用的文件操作方法，以及常见的处理场景，文件追加，文件夹递归删除等。</p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#Nodejs9_4\">Node.js中9种必须要掌握的文件操作方法</a></li><li><ul><li><a href=\"#_6\">一、前言</a></li><li><a href=\"#fsmkdir_20\">二、fs.mkdir()创建文件夹</a></li><li><ul><li><a href=\"#21__39\">2.1 最简单的案例</a></li><li><a href=\"#22__58\">2.2 递归创建文件夹</a></li></ul>\n</li><li><a href=\"#fswirteFile_80\">三、fs.wirteFile()创建、写文件</a></li><li><ul><li><a href=\"#31__105\">3.1 创建并写入一个文件</a></li><li><a href=\"#32__123\">3.2 重写文件并指定编码</a></li><li><a href=\"#33_GBK_143\">3.3 写入GBK格式的文件</a></li></ul>\n</li><li><a href=\"#fsappendFile_166\">四、fs.appendFile()文件后追加内容</a></li><li><ul><li><a href=\"#41__186\">4.1 使用追加的方式创建并写入内容</a></li><li><a href=\"#42__202\">4.2 追加内容</a></li></ul>\n</li><li><a href=\"#fsstat_218\">五、fs.stat()判断路径是目录还是文件</a></li><li><ul><li><a href=\"#51__236\">5.1 判断文件案例</a></li></ul>\n</li><li><a href=\"#fsreadFile_255\">六、fs.readFile()读取文件内容</a></li><li><ul><li><a href=\"#61__275\">6.1 以默认格式读取文件</a></li><li><a href=\"#62_GBK_295\">6.2 以指定格式（这里是GBK）读取文件</a></li></ul>\n</li><li><a href=\"#fsreaddir_315\">七、fs.readdir()读取文件夹中的内容</a></li><li><ul><li><a href=\"#71__334\">7.1 读取文件夹案例</a></li><li><a href=\"#72__363\">7.2 获取文件类型</a></li></ul>\n</li><li><a href=\"#fsraname_392\">八、fs.raname()重命名、移动文件</a></li><li><ul><li><a href=\"#81__406\">8.1 重命名文件</a></li><li><a href=\"#82__443\">8.2 移动文件</a></li></ul>\n</li><li><a href=\"#fsunlink_476\">九、fs.unlink()删除文件</a></li><li><ul><li><a href=\"#91__480\">9.1 删除文件案例</a></li></ul>\n</li><li><a href=\"#fsrmdir_512\">十、fs.rmdir()删除文件夹</a></li><li><ul><li><a href=\"#101__533\">10.1 删除空的文件夹</a></li><li><a href=\"#102__585\">10.2 删除非空的文件夹</a></li></ul>\n</li><li><a href=\"#_620\">十一、总结</a></li><li><a href=\"#_634\">十二、本文源码</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"Nodejs9_4\"></a>Node.js中9种必须要掌握的文件操作方法</h1>\n<h2><a id=\"_6\"></a>一、前言</h2>\n<ol><li>fs.mkdir()</li><li>fs.writeFile()</li><li>fs.appendFile()</li><li>fs.stat()</li><li>fs.readFile()</li><li>fs.readdir()</li><li>fs.rename()</li><li>fs.unlink()</li><li>fs.rmdir()</li></ol>\n<h2><a id=\"fsmkdir_20\"></a>二、fs.mkdir()创建文件夹</h2>\n<p>异步的创建一个文件夹。</p>\n<p>语法：</p>\n<pre><code class=\"prism language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>options<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>callback<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/**\n * path &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt;\n * options &lt;Object&gt; | &lt;integer&gt;\n * recursive &lt;boolean&gt; 默认值: false\n * mode &lt;string&gt; | &lt;integer&gt; Windows 上不支持。 默认值: 0o777。\n * callback &lt;Function&gt;\n * err &lt;Error&gt;\n * path &lt;string&gt; | &lt;undefined&gt; 仅当创建目录时将 recursive 设置为 true。\n */</span>\n</code></pre>\n<h3><a id=\"21__39\"></a>2.1 最简单的案例</h3>\n<p>最简单的案例，在当前目录下创建一个<code>temp</code>文件夹：</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./temp'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> \n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'创建文件夹成功'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>代码执行结果：</p>\n<p><img alt=\"image-20220704150029913\" src=\"..\\..\\static\\image\\be69dd98726bb7d3b83bb5ee6d37a428.png\"/></p>\n<h3><a id=\"22__58\"></a>2.2 递归创建文件夹</h3>\n<p>使用参数<code>{recursive:true}</code>创建多层次的文件夹。</p>\n<pre><code class=\"prism language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./parent/son/grandson'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token literal-property property\">recursive</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>path</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> \n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'递归创建文件夹成功'</span><span class=\"token punctuation\">,</span>path<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>代码执行结果：</p>\n<p><img alt=\"image-20220704150941247\" src=\"..\\..\\static\\image\\e51b637a7b57d82801ff01767e50ac66.png\"/></p>\n<p><strong>注意：</strong> 在使用<code>{recursive:true}</code>参数时，回调对应的会增加一个<code>path</code>参数，其他情况下没有。</p>\n<h2><a id=\"fswirteFile_80\"></a>三、fs.wirteFile()创建、写文件</h2>\n<p>当 <code>file</code> 是文件名时，将数据异步地写入文件，如果文件已存在则替换该文件。 <code>data</code> 可以是字符串或缓冲区。</p>\n<p>当 <code>file</code> 是文件描述符时，其行为类似于直接调用 <code>fs.write()</code>（<strong>本文不涉及这种情况</strong>）。</p>\n<p>语法：</p>\n<pre><code class=\"prism language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/**\n * file &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt; | &lt;integer&gt; 文件名或文件描述符\n * data &lt;string&gt; | &lt;Buffer&gt; | &lt;TypedArray&gt; | &lt;DataView&gt; | &lt;Object&gt;\n * options &lt;Object&gt; | &lt;string&gt;\n * encoding &lt;string&gt; | &lt;null&gt; 默认值: 'utf8'\n * mode &lt;integer&gt; 默认值: 0o666\n * flag &lt;string&gt; 请参阅对文件系统 flags 的支持。 默认值: 'w'。\n * signal &lt;AbortSignal&gt; 允许中止正在进行的写入文件\n * callback &lt;Function&gt;\n * err &lt;Error&gt; | &lt;AggregateError&gt;\n */</span>\n</code></pre>\n<h3><a id=\"31__105\"></a>3.1 创建并写入一个文件</h3>\n<p>创建一个名为<code>index.html</code>的文件，并写入一行字符串。</p>\n<pre><code class=\"prism language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./index.html'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"&lt;h1&gt;你好，中国&lt;/h1&gt;\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> \n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"创建写入文件成功\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>代码执行结果如下：</p>\n<p><img alt=\"image-20220704152812122\" src=\"..\\..\\static\\image\\b31267acb94357a626436e8847607309.png\"/></p>\n<h3><a id=\"32__123\"></a>3.2 重写文件并指定编码</h3>\n<p>重写<code>index.html</code>，并为文件指定编码：</p>\n<pre><code class=\"prism language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./index.html'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'&lt;h2&gt;面朝大海，春暖花开&lt;/h2&gt;'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> \n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'写入指定格式文件成功'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>代码执行效果如下：</p>\n<p><img alt=\"image-20220704154454936\" src=\"..\\..\\static\\image\\24950b5e1ab21a99b4d2489a646b72cd.png\"/></p>\n<p>原文件内容被覆盖。</p>\n<h3><a id=\"33_GBK_143\"></a>3.3 写入GBK格式的文件</h3>\n<p><code>Node.js</code>仅支持<code>utf8 ucs2 ascii binary base64 hex</code>这几种格式，对于<code>GBK</code>，<code>GB2312</code>等特殊格式需要使用额外的库（这里使用<code>iconv-lite</code>）。</p>\n<p>案例：</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> iconv <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'iconv-lite'</span><span class=\"token punctuation\">)</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./style.css'</span><span class=\"token punctuation\">,</span>iconv<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'面朝大海，春暖花开'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'gbk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> \n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"以GBK格式写入成功\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>代码执行结果：</p>\n<p><img alt=\"image-20220704171140551\" src=\"..\\..\\static\\image\\eaa495defbbead03997e6e916a8c83c1.png\"/></p>\n<p>注意底部的编码格式，如果使用<code>utf-8</code>打开文件会乱码的呦！</p>\n<h2><a id=\"fsappendFile_166\"></a>四、fs.appendFile()文件后追加内容</h2>\n<p>异步地将数据追加到文件，如果该文件尚不存在，则创建该文件。</p>\n<p>语法：</p>\n<pre><code class=\"prism language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">appendFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/**\n * path &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt; | &lt;number&gt; 文件名或文件描述符\n * data &lt;string&gt; | &lt;Buffer&gt;\n * options &lt;Object&gt; | &lt;string&gt;\n * encoding &lt;string&gt; | &lt;null&gt; 默认值: 'utf8'\n * mode &lt;integer&gt; 默认值: 0o666\n * flag &lt;string&gt; 请参阅对文件系统 flags 的支持。 默认值: 'a'。\n * callback &lt;Function&gt;\n * err &lt;Error&gt;\n */</span>\n</code></pre>\n<h3><a id=\"41__186\"></a>4.1 使用追加的方式创建并写入内容</h3>\n<pre><code class=\"prism language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">appendFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./test.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'测试写入'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"使用追加的方式创建并写入文件\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>代码执行结果：</p>\n<p><img alt=\"image-20220704194103819\" src=\"..\\..\\static\\image\\8ab1544bc3ca1098780336b359c7b970.png\"/></p>\n<h3><a id=\"42__202\"></a>4.2 追加内容</h3>\n<pre><code class=\"prism language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">appendFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./test.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n追加测试\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'在已经存在的文件中追加内容'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>代码执行结果：</p>\n<p><img alt=\"image-20220704194010770\" src=\"..\\..\\static\\image\\5211044dab3a881d79d47e2a6bf8cce9.png\"/></p>\n<h2><a id=\"fsstat_218\"></a>五、fs.stat()判断路径是目录还是文件</h2>\n<p>判断路径是文件还是目录。</p>\n<p>语法：</p>\n<pre><code class=\"prism language-js\"> fs<span class=\"token punctuation\">.</span><span class=\"token function\">stat</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/**\n * path &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt;\n * options &lt;Object&gt;\n * bigint &lt;boolean&gt; 返回的 &lt;fs.Stats&gt; 对象中的数值是否应为 bigint。 默认值: false。\n * callback &lt;Function&gt;\n * err &lt;Error&gt;\n * stats &lt;fs.Stats&gt;\n */</span>\n</code></pre>\n<h3><a id=\"51__236\"></a>5.1 判断文件案例</h3>\n<p>判断<code>index.html</code>是文件还是目录。</p>\n<pre><code class=\"prism language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">stat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./index.html'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>stats</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> \n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">./index.html是文件：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>stats<span class=\"token punctuation\">.</span><span class=\"token function\">isFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">./index.html是目录：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>stats<span class=\"token punctuation\">.</span><span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>代码执行效果：</p>\n<p><img alt=\"image-20220704155406486\" src=\"..\\..\\static\\image\\a976be40ebb7f3c1a8674370ad3d79b4.png\"/></p>\n<h2><a id=\"fsreadFile_255\"></a>六、fs.readFile()读取文件内容</h2>\n<p>异步地读取文件的全部内容。</p>\n<p>语法：</p>\n<pre><code class=\"prism language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/**\n * path &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt; | &lt;integer&gt; 文件名或文件描述符\n * options &lt;Object&gt; | &lt;string&gt;\n * encoding &lt;string&gt; | &lt;null&gt; 默认值: null\n * flag &lt;string&gt; 请参阅对文件系统 flags 的支持。 默认值: 'r'。\n * signal &lt;AbortSignal&gt; 允许中止正在进行的读取文件\n * callback &lt;Function&gt;\n * err &lt;Error&gt; | &lt;AggregateError&gt;\n * data &lt;string&gt; | &lt;Buffer&gt;\n */</span>\n</code></pre>\n<h3><a id=\"61__275\"></a>6.1 以默认格式读取文件</h3>\n<p>以默认的格式（<code>utf-8</code>）读取文件内容：</p>\n<pre><code class=\"prism language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./index.html'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> \n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">读取文件成功，文件内容是：\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>代码执行结果：</p>\n<p><img alt=\"image-20220704162501845\" src=\"..\\..\\static\\image\\6a4e002678c486b4de8423b37b4c75f3.png\"/></p>\n<p>如果要读取的文件不是<code>utf-8</code>格式，就会出现乱码，这时就需要指定读取格式。</p>\n<h3><a id=\"62_GBK_295\"></a>6.2 以指定格式（这里是GBK）读取文件</h3>\n<p>遗憾的是，<code>node.js</code>不支持除了<code>utf8 ucs2 ascii binary base64 hex</code>之外的编码，我们需要使用额外的包（<code>iconv-lite</code>）读取<code>GBK</code>文件：</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> iconv <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'iconv-lite'</span><span class=\"token punctuation\">)</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./index.html'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> \n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">读取文件成功，文件内容是：\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取文件成功，文件内容是：\\n\"</span><span class=\"token punctuation\">,</span>iconv<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token string\">'gbk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>代码执行结果如下：</p>\n<p><img alt=\"image-20220704170140585\" src=\"..\\..\\static\\image\\09e3aecf0b356f9005cfc9f11a064183.png\"/></p>\n<h2><a id=\"fsreaddir_315\"></a>七、fs.readdir()读取文件夹中的内容</h2>\n<p>读取目录的内容。 回调有两个参数 <code>(err, files)</code>，其中 <code>files</code> 是目录中文件名的数组，不包括 <code>'.'</code> 和 <code>'..'</code>。</p>\n<p>语法：</p>\n<pre><code class=\"prism language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">readdir</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/**\n * path &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt;\n * options &lt;string&gt; | &lt;Object&gt;\n * encoding &lt;string&gt; 默认值: 'utf8'\n * withFileTypes &lt;boolean&gt; 默认值: false\n * callback &lt;Function&gt;\n * err &lt;Error&gt;\n * files &lt;string[]&gt; | &lt;Buffer[]&gt; | &lt;fs.Dirent[]&gt;\n */</span>\n</code></pre>\n<h3><a id=\"71__334\"></a>7.1 读取文件夹案例</h3>\n<p>读取当前文件夹下所有的文件。</p>\n<pre><code class=\"prism language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">readdir</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>files</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> \n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>代码执行结果：</p>\n<pre><code class=\"prism language-bash\">PS D:<span class=\"token punctuation\">\\</span>Code<span class=\"token punctuation\">\\</span>Study<span class=\"token punctuation\">\\</span>Node<span class=\"token punctuation\">\\</span>demos<span class=\"token operator\">&gt;</span> <span class=\"token function\">node</span> .<span class=\"token punctuation\">\\</span>01-fs.js\n<span class=\"token punctuation\">[</span>\n  <span class=\"token string\">'01-fs.js'</span>,\n  <span class=\"token string\">'index.html'</span>,       \n  <span class=\"token string\">'node_modules'</span>,     \n  <span class=\"token string\">'package-lock.json'</span>,\n  <span class=\"token string\">'package.json'</span>,     \n  <span class=\"token string\">'style.css'</span>,\n  <span class=\"token string\">'temp'</span>\n<span class=\"token punctuation\">]</span>\n</code></pre>\n<h3><a id=\"72__363\"></a>7.2 获取文件类型</h3>\n<p>我们可以在读取文件列表的时候，获取文件的类型。</p>\n<pre><code class=\"prism language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">readdir</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token literal-property property\">withFileTypes</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>files</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> \n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>代码执行结果：</p>\n<pre><code class=\"prism language-bash\">PS D:<span class=\"token punctuation\">\\</span>Code<span class=\"token punctuation\">\\</span>Study<span class=\"token punctuation\">\\</span>Node<span class=\"token punctuation\">\\</span>demos<span class=\"token operator\">&gt;</span> <span class=\"token function\">node</span> .<span class=\"token punctuation\">\\</span>01-fs.js\n<span class=\"token punctuation\">[</span>\n  Dirent <span class=\"token punctuation\">{<!-- --></span> name: <span class=\"token string\">'01-fs.js'</span>, <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>,\n  Dirent <span class=\"token punctuation\">{<!-- --></span> name: <span class=\"token string\">'index.html'</span>, <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>,\n  Dirent <span class=\"token punctuation\">{<!-- --></span> name: <span class=\"token string\">'node_modules'</span>, <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>,\n  Dirent <span class=\"token punctuation\">{<!-- --></span> name: <span class=\"token string\">'package-lock.json'</span>, <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>,\n  Dirent <span class=\"token punctuation\">{<!-- --></span> name: <span class=\"token string\">'package.json'</span>, <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>,\n  Dirent <span class=\"token punctuation\">{<!-- --></span> name: <span class=\"token string\">'style.css'</span>, <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>,\n  Dirent <span class=\"token punctuation\">{<!-- --></span> name: <span class=\"token string\">'temp'</span>, <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n</code></pre>\n<h2><a id=\"fsraname_392\"></a>八、fs.raname()重命名、移动文件</h2>\n<p>将 <code>oldPath</code> 处的文件异步重命名为作为 <code>newPath</code> 提供的路径名。 如果 <code>newPath</code> 已经存在，则它将被覆盖。 如果在 <code>newPath</code> 中有目录，则会引发错误。 除了可能的异常之外，没有为完成回调提供任何参数。</p>\n<pre><code class=\"prism language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">rename</span><span class=\"token punctuation\">(</span>oldPath<span class=\"token punctuation\">,</span> newPath<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/**\n * oldPath &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt;\n * newPath &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt;\n * callback &lt;Function&gt;\n * err &lt;Error&gt;\n */</span>\n</code></pre>\n<h3><a id=\"81__406\"></a>8.1 重命名文件</h3>\n<p>将<code>index.html</code>重命名为<code>main.html</code>。</p>\n<pre><code class=\"prism language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">rename</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./index.html'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'./main.html'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'重命名成功'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>代码执行结果：</p>\n<pre><code class=\"prism language-bash\">PS E:<span class=\"token punctuation\">\\</span>Code<span class=\"token punctuation\">\\</span>Node<span class=\"token punctuation\">\\</span>demos<span class=\"token operator\">&gt;</span> <span class=\"token function\">node</span> .<span class=\"token punctuation\">\\</span>01-fs.js\n重命名成功\nPS E:<span class=\"token punctuation\">\\</span>Code<span class=\"token punctuation\">\\</span>Node<span class=\"token punctuation\">\\</span>demos<span class=\"token operator\">&gt;</span> <span class=\"token function\">ls</span>\n\n\n    目录: E:<span class=\"token punctuation\">\\</span>Code<span class=\"token punctuation\">\\</span>Node<span class=\"token punctuation\">\\</span>demos\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\nd-----          <span class=\"token number\">2022</span>/7/4     <span class=\"token number\">18</span>:43                node_modules\nda----          <span class=\"token number\">2022</span>/7/4     <span class=\"token number\">17</span>:33                temp\n-a----          <span class=\"token number\">2022</span>/7/4     <span class=\"token number\">19</span>:48           <span class=\"token number\">6210</span> 01-fs.js\n-a----          <span class=\"token number\">2022</span>/7/4     <span class=\"token number\">16</span>:23             <span class=\"token number\">27</span> main.html         <span class=\"token punctuation\">(</span>*<span class=\"token punctuation\">)</span>\n-a----          <span class=\"token number\">2022</span>/7/4     <span class=\"token number\">16</span>:58           <span class=\"token number\">1455</span> package-lock.json\n-a----          <span class=\"token number\">2022</span>/7/4     <span class=\"token number\">16</span>:57             <span class=\"token number\">55</span> package.json\n-a----          <span class=\"token number\">2022</span>/7/4     <span class=\"token number\">17</span>:05             <span class=\"token number\">18</span> style.css\n-a----          <span class=\"token number\">2022</span>/7/4     <span class=\"token number\">19</span>:40             <span class=\"token number\">12</span> test.txt\n</code></pre>\n<h3><a id=\"82__443\"></a>8.2 移动文件</h3>\n<p>将<code>./main.html</code>移动到<code>./temp/main.html</code>。</p>\n<pre><code class=\"prism language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">rename</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./main.html'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'./temp/main.html'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'移动文件成功'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>代码执行结果：</p>\n<pre><code class=\"prism language-bash\">PS E:<span class=\"token punctuation\">\\</span>Code<span class=\"token punctuation\">\\</span>Node<span class=\"token punctuation\">\\</span>demos<span class=\"token operator\">&gt;</span> <span class=\"token function\">node</span> .<span class=\"token punctuation\">\\</span>01-fs.js\n移动文件成功\nPS E:<span class=\"token punctuation\">\\</span>Code<span class=\"token punctuation\">\\</span>Node<span class=\"token punctuation\">\\</span>demos<span class=\"token operator\">&gt;</span> <span class=\"token function\">ls</span> .<span class=\"token punctuation\">\\</span>temp<span class=\"token punctuation\">\\</span>     \n\n\n    目录: E:<span class=\"token punctuation\">\\</span>Code<span class=\"token punctuation\">\\</span>Node<span class=\"token punctuation\">\\</span>demos<span class=\"token punctuation\">\\</span>temp\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a----          <span class=\"token number\">2022</span>/7/4     <span class=\"token number\">16</span>:23             <span class=\"token number\">27</span> main.html\n\n\nPS E:<span class=\"token punctuation\">\\</span>Code<span class=\"token punctuation\">\\</span>Node<span class=\"token punctuation\">\\</span>demos<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h2><a id=\"fsunlink_476\"></a>九、fs.unlink()删除文件</h2>\n<p>异步地删除文件或符号链接。 除了可能的异常之外，没有为完成回调提供任何参数。</p>\n<h3><a id=\"91__480\"></a>9.1 删除文件案例</h3>\n<pre><code class=\"prism language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./temp/main.html'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除文件成功\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>代码执行结果：</p>\n<pre><code class=\"prism language-bash\">PS E:<span class=\"token punctuation\">\\</span>Code<span class=\"token punctuation\">\\</span>Node<span class=\"token punctuation\">\\</span>demos<span class=\"token operator\">&gt;</span> <span class=\"token function\">ls</span> .<span class=\"token punctuation\">\\</span>temp<span class=\"token punctuation\">\\</span>\n\n\n    目录: E:<span class=\"token punctuation\">\\</span>Code<span class=\"token punctuation\">\\</span>Node<span class=\"token punctuation\">\\</span>demos<span class=\"token punctuation\">\\</span>temp\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a----          <span class=\"token number\">2022</span>/7/4     <span class=\"token number\">20</span>:03              <span class=\"token number\">0</span> main.html\n\n\nPS E:<span class=\"token punctuation\">\\</span>Code<span class=\"token punctuation\">\\</span>Node<span class=\"token punctuation\">\\</span>demos<span class=\"token operator\">&gt;</span> <span class=\"token function\">node</span> .<span class=\"token punctuation\">\\</span>01-fs.js\n删除文件成功\nPS E:<span class=\"token punctuation\">\\</span>Code<span class=\"token punctuation\">\\</span>Node<span class=\"token punctuation\">\\</span>demos<span class=\"token operator\">&gt;</span> <span class=\"token function\">ls</span> .<span class=\"token punctuation\">\\</span>temp<span class=\"token punctuation\">\\</span>\nPS E:<span class=\"token punctuation\">\\</span>Code<span class=\"token punctuation\">\\</span>Node<span class=\"token punctuation\">\\</span>demos<span class=\"token operator\">&gt;</span> \n</code></pre>\n<h2><a id=\"fsrmdir_512\"></a>十、fs.rmdir()删除文件夹</h2>\n<p>删除指定路径的文件夹。</p>\n<p>语法：</p>\n<pre><code class=\"prism language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">rmdir</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/**\n * path &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt;\n * options &lt;Object&gt;\n * maxRetries &lt;integer&gt; 如果遇到 EBUSY、EMFILE、ENFILE、ENOTEMPTY 或 EPERM 错误，\n *           Node.js 将在每次尝试时以 retryDelay 毫秒的线性退避等待时间重试该操作。 \n *           此选项表示重试次数。 如果 recursive 选项不为 true，则忽略此选项。 默认值: 0。\n * recursive &lt;boolean&gt; 如果为 true，则执行递归目录删除。 在递归模式下，操作将在失败时重试。 默认值: false。 已弃用。\n * retryDelay &lt;integer&gt; 重试之间等待的时间（以毫秒为单位）。 如果 recursive 选项不为 true，则忽略此选项。 默认值: 100。\n * callback &lt;Function&gt;\n * err &lt;Error&gt;\n */</span>\n</code></pre>\n<h3><a id=\"101__533\"></a>10.1 删除空的文件夹</h3>\n<p>删除<code>./temp</code>文件夹。</p>\n<pre><code class=\"prism language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">rmdir</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./temp'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'删除空的文件夹'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>代码执行结果：</p>\n<pre><code class=\"prism language-bash\">PS E:<span class=\"token punctuation\">\\</span>Code<span class=\"token punctuation\">\\</span>Node<span class=\"token punctuation\">\\</span>demos<span class=\"token operator\">&gt;</span> <span class=\"token function\">ls</span> <span class=\"token builtin class-name\">.</span>      \n\n\n    目录: E:<span class=\"token punctuation\">\\</span>Code<span class=\"token punctuation\">\\</span>Node<span class=\"token punctuation\">\\</span>demos\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\nd-----          <span class=\"token number\">2022</span>/7/4     <span class=\"token number\">18</span>:43                node_modules\nda----          <span class=\"token number\">2022</span>/7/4     <span class=\"token number\">20</span>:03                temp\n-a----          <span class=\"token number\">2022</span>/7/4     <span class=\"token number\">20</span>:09           <span class=\"token number\">7666</span> 01-fs.js\n-a----          <span class=\"token number\">2022</span>/7/4     <span class=\"token number\">16</span>:58           <span class=\"token number\">1455</span> package-lock.json\n-a----          <span class=\"token number\">2022</span>/7/4     <span class=\"token number\">16</span>:57             <span class=\"token number\">55</span> package.json\n-a----          <span class=\"token number\">2022</span>/7/4     <span class=\"token number\">17</span>:05             <span class=\"token number\">18</span> style.css\n-a----          <span class=\"token number\">2022</span>/7/4     <span class=\"token number\">19</span>:40             <span class=\"token number\">12</span> test.txt\n\n\nPS E:<span class=\"token punctuation\">\\</span>Code<span class=\"token punctuation\">\\</span>Node<span class=\"token punctuation\">\\</span>demos<span class=\"token operator\">&gt;</span> <span class=\"token function\">node</span> .<span class=\"token punctuation\">\\</span>01-fs.js\n删除空的文件夹\nPS E:<span class=\"token punctuation\">\\</span>Code<span class=\"token punctuation\">\\</span>Node<span class=\"token punctuation\">\\</span>demos<span class=\"token operator\">&gt;</span> <span class=\"token function\">ls</span>\n\n\n    目录: E:<span class=\"token punctuation\">\\</span>Code<span class=\"token punctuation\">\\</span>Node<span class=\"token punctuation\">\\</span>demos\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\nd-----          <span class=\"token number\">2022</span>/7/4     <span class=\"token number\">18</span>:43                node_modules\n-a----          <span class=\"token number\">2022</span>/7/4     <span class=\"token number\">20</span>:09           <span class=\"token number\">7666</span> 01-fs.js\n-a----          <span class=\"token number\">2022</span>/7/4     <span class=\"token number\">16</span>:58           <span class=\"token number\">1455</span> package-lock.json\n-a----          <span class=\"token number\">2022</span>/7/4     <span class=\"token number\">16</span>:57             <span class=\"token number\">55</span> package.json\n-a----          <span class=\"token number\">2022</span>/7/4     <span class=\"token number\">17</span>:05             <span class=\"token number\">18</span> style.css\n-a----          <span class=\"token number\">2022</span>/7/4     <span class=\"token number\">19</span>:40             <span class=\"token number\">12</span> test.txt\n</code></pre>\n<h3><a id=\"102__585\"></a>10.2 删除非空的文件夹</h3>\n<p>这里使用的是同步的文件处理函数，用于递归的删除文件夹。</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">emptyDir</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> files <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readdirSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//同步读取文件夹</span>\n    files<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>             <span class=\"token comment\">//删除文件夹中的所有文件/夹</span>\n        <span class=\"token keyword\">const</span> filePath <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>path<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>file<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> stats <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">statSync</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stats<span class=\"token punctuation\">.</span><span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">emptyDir</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            fs<span class=\"token punctuation\">.</span><span class=\"token function\">unlinkSync</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">删除</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>file<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">文件成功</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">rmdirSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>                  <span class=\"token comment\">//删除文件夹</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">emptyDir</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./node_modules'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>代码执行结果：</p>\n<pre><code class=\"prism language-bash\">PS E:<span class=\"token punctuation\">\\</span>Code<span class=\"token punctuation\">\\</span>Node<span class=\"token punctuation\">\\</span>demos<span class=\"token operator\">&gt;</span> <span class=\"token function\">node</span> .<span class=\"token punctuation\">\\</span>01-fs.js\n删除.package-lock.json文件成功\n删除dependabot.yml文件成功\n删除codeStyleConfig.xml文件成功\n删除Project.xml文件成功\n删除iconv-lite.iml文件成功\n<span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">..</span>.\n</code></pre>\n<h2><a id=\"_620\"></a>十一、总结</h2>\n<p>本文总结了<code>Node.js</code>常用的文件操作方法，以及常见的文件处理场景。主要包括：</p>\n<ol><li>fs.mkdir()</li><li>fs.writeFile()</li><li>fs.appendFile()</li><li>fs.stat()</li><li>fs.readFile()</li><li>fs.readdir()</li><li>fs.rename()</li><li>fs.unlink()</li><li>fs.rmdir()</li></ol>\n<h2><a id=\"_634\"></a>十二、本文源码</h2>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">/**\n * fs.mkdir(path[,options],callback)\n * path &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt;\n * options &lt;Object&gt; | &lt;integer&gt;\n * recursive &lt;boolean&gt; 默认值: false\n * mode &lt;string&gt; | &lt;integer&gt; Windows 上不支持。 默认值: 0o777。\n * callback &lt;Function&gt;\n * err &lt;Error&gt;\n * path &lt;string&gt; | &lt;undefined&gt; 仅当创建目录时将 recursive 设置为 true。\n */</span>\n\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 1. 最简单的测试案例</span>\n<span class=\"token comment\">// fs.mkdir('./temp',(err)=&gt;{<!-- --></span>\n<span class=\"token comment\">//     if(err){<!-- --></span>\n<span class=\"token comment\">//         console.log(err.message)</span>\n<span class=\"token comment\">//         return</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">//     console.log('创建文件夹成功')</span>\n<span class=\"token comment\">// })</span>\n\n<span class=\"token comment\">// 2. 递归创建文件夹</span>\n<span class=\"token comment\">// fs.mkdir('./parent/son/grandson',{recursive:true},(err,path)=&gt;{<!-- --></span>\n<span class=\"token comment\">//     if(err){<!-- --></span>\n<span class=\"token comment\">//         console.log(err.message)</span>\n<span class=\"token comment\">//         return</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">//     console.log('递归创建文件夹成功',path)</span>\n<span class=\"token comment\">// })</span>\n\n<span class=\"token comment\">/**-------------------------------------------------------------------------------------- */</span>\n<span class=\"token comment\">/**-------------------------------------------------------------------------------------- */</span>\n<span class=\"token comment\">/**-------------------------------------------------------------------------------------- */</span>\n\n<span class=\"token comment\">/**\n * fs.writeFile(file, data[, options], callback)\n * file &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt; | &lt;integer&gt; 文件名或文件描述符\n * data &lt;string&gt; | &lt;Buffer&gt; | &lt;TypedArray&gt; | &lt;DataView&gt; | &lt;Object&gt;\n * options &lt;Object&gt; | &lt;string&gt;\n * encoding &lt;string&gt; | &lt;null&gt; 默认值: 'utf8'\n * mode &lt;integer&gt; 默认值: 0o666\n * flag &lt;string&gt; 请参阅对文件系统 flags 的支持。 默认值: 'w'。\n * signal &lt;AbortSignal&gt; 允许中止正在进行的写入文件\n * callback &lt;Function&gt;\n * err &lt;Error&gt; | &lt;AggregateError&gt;\n */</span>\n\n<span class=\"token comment\">// 1. 创建并写入一个文件</span>\n<span class=\"token comment\">// fs.writeFile('./index.html',\"&lt;h1&gt;你好，中国&lt;/h1&gt;\",(err)=&gt;{<!-- --></span>\n<span class=\"token comment\">//     if(err){<!-- --></span>\n<span class=\"token comment\">//         console.log(err.message)</span>\n<span class=\"token comment\">//         return</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">//     console.log(\"创建写入文件成功\")</span>\n<span class=\"token comment\">// })</span>\n\n<span class=\"token comment\">// 2. 指定文件格式</span>\n<span class=\"token comment\">// fs.writeFile('./index.html','&lt;h2&gt;面朝大海，春暖花开&lt;/h2&gt;','utf-8',(err)=&gt;{<!-- --></span>\n<span class=\"token comment\">//     if(err){<!-- --></span>\n<span class=\"token comment\">//         console.log(err.message)</span>\n<span class=\"token comment\">//         return</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">//     console.log('写入指定格式文件成功')</span>\n<span class=\"token comment\">// })</span>\n\n<span class=\"token comment\">// 3. 写gbk文件</span>\n<span class=\"token comment\">// const iconv = require('iconv-lite')</span>\n<span class=\"token comment\">// fs.writeFile('./style.css',iconv.encode('面朝大海，春暖花开','gbk'),(err)=&gt;{<!-- --></span>\n<span class=\"token comment\">//     if(err){<!-- --></span>\n<span class=\"token comment\">//         console.log(err.message)</span>\n<span class=\"token comment\">//         return</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">//     console.log(\"以GBK格式写入成功\")</span>\n<span class=\"token comment\">// })</span>\n\n\n<span class=\"token comment\">/**\n * fs.appendFile(path, data[, options], callback)\n * path &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt; | &lt;number&gt; 文件名或文件描述符\n * data &lt;string&gt; | &lt;Buffer&gt;\n * options &lt;Object&gt; | &lt;string&gt;\n * encoding &lt;string&gt; | &lt;null&gt; 默认值: 'utf8'\n * mode &lt;integer&gt; 默认值: 0o666\n * flag &lt;string&gt; 请参阅对文件系统 flags 的支持。 默认值: 'a'。\n * callback &lt;Function&gt;\n * err &lt;Error&gt;\n */</span>\n\n<span class=\"token comment\">// 1. 创建文件并写入内容</span>\n<span class=\"token comment\">// fs.appendFile('./test.txt', '测试写入', (err) =&gt; {<!-- --></span>\n<span class=\"token comment\">//     if (err) {<!-- --></span>\n<span class=\"token comment\">//         console.log(err.message)</span>\n<span class=\"token comment\">//         return</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">//     console.log(\"使用追加的方式创建并写入文件\")</span>\n<span class=\"token comment\">// })</span>\n\n<span class=\"token comment\">// 2. 追加内容</span>\n<span class=\"token comment\">// fs.appendFile('./test.txt', \"\\n追加测试\", (err) =&gt; {<!-- --></span>\n<span class=\"token comment\">//     if (err) {<!-- --></span>\n<span class=\"token comment\">//         console.log(err.message)</span>\n<span class=\"token comment\">//         return</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">//     console.log('在已经存在的文件中追加内容')</span>\n<span class=\"token comment\">// })</span>\n\n<span class=\"token comment\">/** =============================================================================== */</span>\n\n\n<span class=\"token comment\">/**\n * fs.stat(path[, options], callback)\n * path &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt;\n * options &lt;Object&gt;\n * bigint &lt;boolean&gt; 返回的 &lt;fs.Stats&gt; 对象中的数值是否应为 bigint。 默认值: false。\n * callback &lt;Function&gt;\n * err &lt;Error&gt;\n * stats &lt;fs.Stats&gt;\n */</span>\n\n<span class=\"token comment\">// 1. 判断路径是目录还是文件</span>\n<span class=\"token comment\">// fs.stat('./index.html',(err,stats)=&gt;{<!-- --></span>\n<span class=\"token comment\">//     if(err){<!-- --></span>\n<span class=\"token comment\">//         console.log(err.message)</span>\n<span class=\"token comment\">//         return</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">//     console.log(`./index.html是文件：${stats.isFile()}`)</span>\n<span class=\"token comment\">//     console.log(`./index.html是目录：${stats.isDirectory()}`)</span>\n<span class=\"token comment\">// })</span>\n\n\n<span class=\"token comment\">/**\n * fs.readFile(path[, options], callback)\n * path &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt; | &lt;integer&gt; 文件名或文件描述符\n * options &lt;Object&gt; | &lt;string&gt;\n * encoding &lt;string&gt; | &lt;null&gt; 默认值: null\n * flag &lt;string&gt; 请参阅对文件系统 flags 的支持。 默认值: 'r'。\n * signal &lt;AbortSignal&gt; 允许中止正在进行的读取文件\n * callback &lt;Function&gt;\n * err &lt;Error&gt; | &lt;AggregateError&gt;\n * data &lt;string&gt; | &lt;Buffer&gt;\n */</span>\n\n<span class=\"token comment\">// 1. 读取文件内容</span>\n<span class=\"token comment\">// fs.readFile('./index.html',(err,data)=&gt;{<!-- --></span>\n<span class=\"token comment\">//     if(err){<!-- --></span>\n<span class=\"token comment\">//         console.log(err.message)</span>\n<span class=\"token comment\">//         return</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">//     console.log(`读取文件成功，文件内容是：\\n${data}`)</span>\n<span class=\"token comment\">// })</span>\n\n<span class=\"token comment\">// 2. 以指定格式读取文件</span>\n<span class=\"token comment\">// const iconv = require('iconv-lite')</span>\n<span class=\"token comment\">// fs.readFile('./index.html',(err,data)=&gt;{<!-- --></span>\n<span class=\"token comment\">//     if(err){<!-- --></span>\n<span class=\"token comment\">//         console.log(err.message)</span>\n<span class=\"token comment\">//         return</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">//     console.log(`读取文件成功，文件内容是：\\n${data}`)</span>\n<span class=\"token comment\">//     console.log(\"读取文件成功，文件内容是：\\n\",iconv.decode(data,'gbk'))</span>\n<span class=\"token comment\">// })</span>\n\n\n<span class=\"token comment\">/**================================================================================ */</span>\n\n<span class=\"token comment\">/**\n * fs.readdir(path[, options], callback)\n * path &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt;\n * options &lt;string&gt; | &lt;Object&gt;\n * encoding &lt;string&gt; 默认值: 'utf8'\n * withFileTypes &lt;boolean&gt; 默认值: false\n * callback &lt;Function&gt;\n * err &lt;Error&gt;\n * files &lt;string[]&gt; | &lt;Buffer[]&gt; | &lt;fs.Dirent[]&gt;\n *\n */</span>\n<span class=\"token comment\">// 1. 读取当前目录下所有的文件</span>\n<span class=\"token comment\">// fs.readdir('./',(err,files)=&gt;{<!-- --></span>\n<span class=\"token comment\">//     if(err){<!-- --></span>\n<span class=\"token comment\">//         console.log(err.message)</span>\n<span class=\"token comment\">//         return</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">//     console.log(files)</span>\n<span class=\"token comment\">// })</span>\n\n<span class=\"token comment\">// 2. 获取文件类型</span>\n<span class=\"token comment\">// fs.readdir('./', { withFileTypes: true }, (err, files) =&gt; {<!-- --></span>\n<span class=\"token comment\">//     if (err) {<!-- --></span>\n<span class=\"token comment\">//         console.log(err.message)</span>\n<span class=\"token comment\">//         return</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">//     console.log(files)</span>\n<span class=\"token comment\">// })</span>\n\n\n\n<span class=\"token comment\">/**\n * fs.rename(oldPath, newPath, callback)\n * oldPath &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt;\n * newPath &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt;\n * callback &lt;Function&gt;\n * err &lt;Error&gt;\n */</span>\n\n<span class=\"token comment\">// fs.rename('./index.html', './main.html', (err) =&gt; {<!-- --></span>\n<span class=\"token comment\">//     if (err) {<!-- --></span>\n<span class=\"token comment\">//         console.log(err.message)</span>\n<span class=\"token comment\">//         return</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">//     console.log('重命名成功')</span>\n<span class=\"token comment\">// })</span>\n\n<span class=\"token comment\">// fs.rename('./main.html', './temp/main.html', (err) =&gt; {<!-- --></span>\n<span class=\"token comment\">//     if (err) {<!-- --></span>\n<span class=\"token comment\">//         console.log(err.message)</span>\n<span class=\"token comment\">//         return</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">//     console.log('移动文件成功')</span>\n<span class=\"token comment\">// })</span>\n\n<span class=\"token comment\">/**\n * fs.unlink(path, callback)\n * path &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt;\n * callback &lt;Function&gt;\n * err &lt;Error&gt;\n */</span>\n\n<span class=\"token comment\">// fs.unlink('./temp/main.html', (err) =&gt; {<!-- --></span>\n<span class=\"token comment\">//     if (err) {<!-- --></span>\n<span class=\"token comment\">//         console.log(err.message)</span>\n<span class=\"token comment\">//         return</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">//     console.log(\"删除文件成功\")</span>\n<span class=\"token comment\">// })</span>\n\n<span class=\"token comment\">/**\n * fs.rmdir(path[, options], callback)\n * path &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt;\n * options &lt;Object&gt;\n * maxRetries &lt;integer&gt; 如果遇到 EBUSY、EMFILE、ENFILE、ENOTEMPTY 或 EPERM 错误，\n *           Node.js 将在每次尝试时以 retryDelay 毫秒的线性退避等待时间重试该操作。 \n *           此选项表示重试次数。 如果 recursive 选项不为 true，则忽略此选项。 默认值: 0。\n * recursive &lt;boolean&gt; 如果为 true，则执行递归目录删除。 在递归模式下，操作将在失败时重试。 默认值: false。 已弃用。\n * retryDelay &lt;integer&gt; 重试之间等待的时间（以毫秒为单位）。 如果 recursive 选项不为 true，则忽略此选项。 默认值: 100。\n * callback &lt;Function&gt;\n * err &lt;Error&gt;\n */</span>\n<span class=\"token comment\">// fs.rmdir('./temp', (err) =&gt; {<!-- --></span>\n<span class=\"token comment\">//     if (err) {<!-- --></span>\n<span class=\"token comment\">//         console.log(err.message)</span>\n<span class=\"token comment\">//         return</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">//     console.log('删除空的文件夹')</span>\n<span class=\"token comment\">// })</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">emptyDir</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> files <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readdirSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//同步读取文件夹</span>\n    files<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>             <span class=\"token comment\">//删除文件夹中的所有文件/夹</span>\n        <span class=\"token keyword\">const</span> filePath <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>path<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>file<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> stats <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">statSync</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stats<span class=\"token punctuation\">.</span><span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">emptyDir</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            fs<span class=\"token punctuation\">.</span><span class=\"token function\">unlinkSync</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">删除</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>file<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">文件成功</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">rmdirSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>                  <span class=\"token comment\">//删除文件夹</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">emptyDir</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./node_modules'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-07-05 19:54:31", "summary": "在这里插入图片描述本文主要介绍了常用的文件操作方法，以及常见的处理场景，文件追加，文件夹递归删除等。文章目录中种必须要掌握的文件操作方法一、前言二、创建文件夹最简单的案例递归创建文件夹三、创建、写文件"}