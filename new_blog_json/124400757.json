{"blogid": "124400757", "writerAge": "码龄3年", "writerBlogNum": "714", "writerCollect": "2256", "writerComment": "153", "writerFan": "164", "writerGrade": "7级", "writerIntegral": "11599", "writerName": "liming89", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124400757.jpg", "writerRankTotal": "6510", "writerRankWeekly": "116144", "writerThumb": "421", "writerVisitNum": "926541", "blog_read_count": "3753", "blog_time": "于 2022-04-25 11:19:03 发布", "blog_title": "vue项目中使用ts（typescript）入门教程", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>文章来源： <a href=\"http://www.bdgxy.com/\">学习通</a>http://www.bdgxy.com/</p>\n<p><br/> </p>\n<div id=\"navCategory\">\n<h5 class=\"catalogue\">目录</h5>\n<ul class=\"first_class_ul\"><li><a href=\"#_label0\">1、引入Typescript</a></li><li><a href=\"#_label1\">2、配置文件webpack配置</a></li><li><a href=\"#_label2\">3、让项目识别.ts</a></li><li><a href=\"#_label3\">4、vue组件的编写</a></li><li><ul class=\"second_class_ul\"><li><a href=\"#_lab2_3_0\">data()中定义数据</a></li><li><a href=\"#_lab2_3_1\">props传值</a></li></ul>\n</li><li><a href=\"#_label4\">完整代码案例</a></li><li><ul class=\"second_class_ul\"></ul>\n</li></ul>\n</div>\n<p></p>\n<p>最近项目需要将原vue项目结合ts的使用进行改造，这个后面应该是中大型项目的发展趋势，看到一篇不错的入门教程，结合它并进行了一点拓展记录之。本文从安装到vue组件编写进行了说明，适合入门。</p>\n<p class=\"maodian\"></p>\n<h2>1、引入Typescript</h2>\n<div class=\"jb51code\">\n<pre class=\"brush:bash;\">npm install vue-class-component vue-property-decorator --save\nnpm install ts-loader typescript tslint tslint-loader tslint-config-standard --save-dev</pre>\n</div>\n<p><code>vue-class-component</code>：扩展vue支持typescript，将原有的vue语法通过声明的方式来支持ts</p>\n<p><code>vue-property-decorator</code>：基于vue-class-component扩展更多装饰器</p>\n<p><code>ts-loader</code>：让webpack能够识别ts文件</p>\n<p><code>tslint-loader</code>：tslint用来约束文件编码</p>\n<p><code>tslint-config-standard</code>： tslint 配置 standard风格的约束</p>\n<p class=\"maodian\"></p>\n<h2>2、配置文件webpack配置</h2>\n<p>根据项目的不同配置的地方不同，如果是vue cli 3.0创建的项目需要在vue.config.js中配置，如果是3.0以下版本的话，需要webpack.base.conf中配置。(以下说明是在webpack.base.conf文件中更改)</p>\n<p>在resolve.extensions中增加.ts，目的是在代码中引入ts文件不用写.ts后缀</p>\n<div class=\"jb51code\">\n<pre class=\"brush:js;\">  resolve: {\n    extensions: ['.js', '.vue', '.json', '.ts'],\n    alias: {}\n  }</pre>\n</div>\n<p>在module.rules中增加ts的rules</p>\n<div class=\"jb51code\">\n<pre class=\"brush:js;\">module: {\n    rules: [\n      {\n        test: /\\.ts$/,\n        exclude: /node_modules/,\n        enforce: 'pre',\n        loader: 'tslint-loader'\n      },\n      {\n        test: /\\.tsx?$/,\n        loader: 'ts-loader',\n        exclude: /node_modules/,\n        options: {\n          appendTsSuffixTo: [/\\.vue$/]\n        }\n      }\n    ]\n  }</pre>\n</div>\n<p>tsconfig.json配置<br/> ts-loader会检索文件中的tsconfig.json.以其中的规则来解析ts文件，详细的配置可以参考<a href=\"https://www.tslang.cn/docs/handbook/tsconfig-json.html\" rel=\"noopener noreferrer\" target=\"_blank\">https://www.tslang.cn/docs/handbook/tsconfig-json.html</a><br/> 贴上测试项目tsconfig.json文件</p>\n<div class=\"jb51code\">\n<pre class=\"brush:js;\">{\n  // 编译选项\n  \"compilerOptions\": {\n    // 输出目录\n    \"outDir\": \"./output\",\n    // 是否包含可以用于 debug 的 sourceMap\n    \"sourceMap\": true,\n    // 以严格模式解析\n    \"strict\": false,\n    // 采用的模块系统\n    \"module\": \"esnext\",\n    // 如何处理模块\n    \"moduleResolution\": \"node\",\n    // 编译输出目标 ES 版本\n    \"target\": \"es5\",\n    // 允许从没有设置默认导出的模块中默认导入\n    \"allowSyntheticDefaultImports\": true,\n    // 将每个文件作为单独的模块\n    \"isolatedModules\": false,\n    // 启用装饰器\n    \"experimentalDecorators\": true,\n    // 启用设计类型元数据（用于反射）\n    \"emitDecoratorMetadata\": true,\n    // 在表达式和声明上有隐含的any类型时报错\n    \"noImplicitAny\": false,\n    // 不是函数的所有返回路径都有返回值时报错。\n    \"noImplicitReturns\": true,\n    // 从 tslib 导入外部帮助库: 比如__extends，__rest等\n    \"importHelpers\": true,\n    // 编译过程中打印文件名\n    \"listFiles\": true,\n    // 移除注释\n    \"removeComments\": true,\n    \"suppressImplicitAnyIndexErrors\": true,\n    // 允许编译javascript文件\n    \"allowJs\": true,\n    // 解析非相对模块名的基准目录\n    \"baseUrl\": \"./\",\n    // 指定特殊模块的路径\n    \"paths\": {\n      \"jquery\": [\n        \"node_modules/jquery/dist/jquery\"\n      ]\n    },\n    // 编译过程中需要引入的库文件的列表\n    \"lib\": [\n      \"dom\",\n      \"es2015\",\n      \"es2015.promise\"\n    ]\n  }\n}</pre>\n</div>\n<p>tslint.json配置<br/> 在目录中新增tslint.json文件，由于我们前面安装了tslint-config-standard，所以可以直接用tslint-config-standard中规则，文件如下:</p>\n<div class=\"jb51code\">\n<pre class=\"brush:js;\">  {\n    \"extends\": \"tslint-config-standard\",\n    \"globals\": {\n      \"require\": true\n    }\n  }</pre>\n</div>\n<p class=\"maodian\"></p>\n<h2>3、让项目识别.ts</h2>\n<p>由于 TypeScript 默认并不支持 *.vue 后缀的文件，所以在 vue 项目中引入的时候需要创建一个 vue-shim.d.ts 文件，放在根目录下</p>\n<div class=\"jb51code\">\n<pre class=\"brush:js;\">declare module '*.vue' {\n  import Vue from 'vue';\n  export default Vue;\n}</pre>\n</div>\n<p class=\"maodian\"></p>\n<h2>4、vue组件的编写</h2>\n<p>vue组件里大多数的方法改成通过@xxx（装饰器）来表明当前定义的为什么数据，类似ng中的注入。而业务逻辑js的部分就可以直接采用ts的写法了。</p>\n<p>基本写法</p>\n<p>模板<code>template</code>和样式<code>style</code>的写法不变，<code>script</code>的模块进行了改变，基本写法如下：</p>\n<div class=\"jb51code\">\n<pre class=\"brush:js;\">&lt;script lang=\"ts\"&gt;\nimport { Component, Vue } from \"vue-property-decorator\";\n@Component\nexport default class Test extends Vue {\n</pre>\n</div>\n<p>};<br/> &lt;/script&gt;</p>\n<ul><li><code>lang=\"ts\"</code>：<code>script</code>张声明下当前的语言是<code>ts</code></li><li><code>@Component</code>：注明此类为一个vue组件</li><li><code>export default class Test extends Vue</code>： export当前组件类是继承vue的</li></ul>\n<p class=\"maodian\"></p>\n<h3>data()中定义数据</h3>\n<p>data中的数据由原来的<code>data()</code>方法改成直接在对象中定义</p>\n<div class=\"jb51code\">\n<pre class=\"brush:js;\">export default class Test extends Vue {\n public message1: string = \"heimayu\";\n public message2: string = \"真好看\";\n}</pre>\n</div>\n<p class=\"maodian\"></p>\n<h3>props传值</h3>\n<p>props的话就没有data那么舒服了，因为他需要使用装饰器了，写法如下</p>\n<div class=\"jb51code\">\n<pre class=\"brush:js;\">@Prop()\npropA:string\n</pre>\n</div>\n<p>@Prop()<br/> propB:number</p>\n<p>$emit传值</p>\n<p>不带参数</p>\n<div class=\"jb51code\">\n<pre class=\"brush:js;\"> // 原来写法：this.$emit('bindSend')\n  // 现在直接写 this.bindSend()\n  // 多个定义\n  @Emit()\n  bindSend():string{\n      return this.message\n  }</pre>\n</div>\n<p>方法带参数</p>\n<div class=\"jb51code\">\n<pre class=\"brush:js;\">  // 原来写法：this.$emit('bindSend', msg)\n  // 现在直接写： this.bindSend(msg)\n  // 多个下面的定义\n  @Emit()\n  bindSend(msg:string){\n      // to do something\n  }</pre>\n</div>\n<p>emit带参数</p>\n<div class=\"jb51code\">\n<pre class=\"brush:js;\">  // 这里的test是改变组件引用的@事件名称这时候要写@test 而不是@bindSend2\n  @Emit('test)\n  private bindSend2(){\n</pre>\n</div>\n<p>}</p>\n<p>watch观察数据</p>\n<div class=\"jb51code\">\n<pre class=\"brush:js;\">  // 原来的写法 watch:{}\n</pre>\n</div>\n<p>@Watch(‘propA’,{<!-- --><br/> deep:true<br/> })<br/> test(newValue:string,oldValue:string){<!-- --><br/> console.log(‘propA值改变了’ + newValue);<br/> }</p>\n<p>computed计算属性</p>\n<div class=\"jb51code\">\n<pre class=\"brush:js;\">public get computedMsg(){\n      return '这里是计算属性' + this.message;\n }\npublic set computedMsg(message:string){\n }</pre>\n</div>\n<p class=\"maodian\"></p>\n<h2>完整代码案例</h2>\n<div class=\"jb51code\">\n<pre class=\"brush:js;\">&lt;template&gt;\n  &lt;div class=\"test-container\"&gt;\n    {<!-- -->{message}}\n    &lt;input type=\"button\" value=\"点击触发父级方法\" @click=\"bindSend\"/&gt;\n    &lt;input type=\"button\" value=\"点击触发父级方法\" @click=\"handleSend\"/&gt;\n    &lt;input type=\"button\" value=\"点击触发父级方法\" @click=\"bindSend2\"/&gt;\n    &lt;!-- &lt;Hello&gt;&lt;/Hello&gt; --&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n&lt;script lang=\"ts\"&gt;\nimport { Component, Prop, Vue, Watch, Emit } from \"vue-property-decorator\";\nimport Hello from \"./HelloWorld.vue\";\n// 注明此类为一个vue组件\n@Component({\n  components: {\n    Hello\n  }\n})\nexport default class Test extends Vue {\n  // 原有data中的数据在这里展开编写\n public message: string = \"asd\";\n  //原有props中的数据展开编写\n  @Prop({\n    type: Number,\n    default: 1,\n    required: false\n  })\n  propA?: number\n  @Prop()\n  propB:string\n  //原有computed\n  public get computedMsg(){\n      return '这里是计算属性' + this.message;\n  }\n  public set computedMsg(message:string){\n  }\n  //原有的watch属性\n  @Watch('propA',{\n      deep:true\n  })\n  public test(newValue:string,oldValue:string){\n      console.log('propA值改变了' + newValue);\n  }\n  // 以前需要给父级传值的时候直接方法中使用emit就行了，当前需要通过emit来处理\n  @Emit()\n  private bindSend():string{\n      return this.message\n  }\n  @Emit()\n  private bindSend1(msg:string,love:string){\n      // 如果不处理可以不写下面的，会自动将参数回传\n    //   msg += 'love';\n    //   return msg;\n  }\n  //原有放在methods中的方法平铺出来\n  public handleSend():void {\n      this.bindSend1(this.message,'love');\n  }\n  // 这里的emit中的参数是表明父级通过什么接受，类似以前的$emit('父级定义的方法')\n  @Emit('test')\n  private bindSend2(){\n      return '这个可以用test接受';\n  }\n}\n&lt;/script&gt;</pre>\n</div>\n<p>到此这篇关于vue项目中使用ts（typescript）入门教程 的文章就介绍到这了,更多相关vue typescript入门内容请搜索菜鸟教程www.piaodoo.com以前的文章或继续浏览下面的相关文章希望大家以后多多支持菜鸟教程www.piaodoo.com！</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-04-25 11:19:03", "summary": "文章来源：学习通目录、引入、配置文件配置、让项目识别、组件的编写中定义数据传值完整代码案例最近项目需要将原项目结合的使用进行改造，这个后面应该是中大型项目的发展趋势，看到一篇不错的入门教程，结合它并进"}