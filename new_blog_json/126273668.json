{"blogid": "126273668", "writerAge": "码龄1年", "writerBlogNum": "14", "writerCollect": "346", "writerComment": "599", "writerFan": "750", "writerGrade": "4级", "writerIntegral": "1297", "writerName": "几分醉意.", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126273668.jpg", "writerRankTotal": "14744", "writerRankWeekly": "125", "writerThumb": "414", "writerVisitNum": "7340", "blog_read_count": "458", "blog_time": "于 2022-08-10 21:18:38 发布", "blog_title": "【JAVA进阶篇】内部类的详细介绍", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>Java学习</h3>\n<ul><li><a href=\"#_1\">内部类</a></li><li><ul><li><a href=\"#_2\">概念</a></li><li><a href=\"#_7\">分类</a></li><li><a href=\"#_11\">成员内部类的定义</a></li><li><a href=\"#_28\">成员内部类的使用</a></li><li><a href=\"#_40\">内部类的同名变量访问</a></li><li><a href=\"#_43\">局部内部类的定义与使用</a></li><li><a href=\"#final_48\">局部内部类的final问题</a></li><li><a href=\"#_50\">匿名内部类</a></li><li><a href=\"#_64\">匿名内部类注意事项</a></li><li><a href=\"#_71\">类作为成员变量类型</a></li><li><a href=\"#_165\">接口作为成员变量类型</a></li><li><a href=\"#_168\">接口作为方法的参数或返回值</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>内部类</h1>\n<h2><a id=\"_2\"></a>概念</h2>\n<blockquote>\n<p>如果一个事物的内部包含另一个事物，那么这就是一个类内部包含另一个类。<br/> 例如:身体和心脏的关系。又如:汽车和发动机的关系。</p>\n</blockquote>\n<h2><a id=\"_7\"></a>分类</h2>\n<blockquote>\n<p>1.成员内部类<br/> 2.局部内部类(包含匿名内部类)</p>\n</blockquote>\n<h2><a id=\"_11\"></a>成员内部类的定义</h2>\n<pre><code class=\"prism language-java\">成员内部类定义格式<span class=\"token operator\">:</span>\n\n修饰符 <span class=\"token keyword\">class</span> 外部类名称<span class=\"token punctuation\">{<!-- --></span>\n\t修饰符 <span class=\"token keyword\">class</span> 内部类名称<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//...</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>注意：内用外，随意访问；外用内，需要内部类对象。</p>\n</blockquote>\n<p><strong>举例配合理解：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2d7221bb83844d16a1dc1ce8d8fd0dce.png\"/></p>\n<h2><a id=\"_28\"></a>成员内部类的使用</h2>\n<blockquote>\n<p>如何使用成员内部类?<br/> 有两种方式:<br/> 1.间接方式:在外部类的方法当中，使用内部类;然后main只是调用外部类的方法。<br/> 2.直接方式，公式:<br/> 类名称 对象名 = new 类名称();<br/> 【外部类名称.内部类名称 对象名 = new 外部类名称().new 内部类名称();】</p>\n</blockquote>\n<p><strong>举例配合理解：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a75b63707c144bd5b9f06d4ce01e73db.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\45a6d0a6953a44a79f1c57c47b01c03a.png\"/></p>\n<h2><a id=\"_40\"></a>内部类的同名变量访问</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0496575400214fdc8d5b97d1e5307398.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\baf1f0dc541f4c6e96af31e444c62220.png\"/></p>\n<h2><a id=\"_43\"></a>局部内部类的定义与使用</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8def69eb968a40b29e89f88c9bc46152.png\"/><br/> <strong>举例配合理解：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bf27fbf3d4074b598a601d5e357a6e13.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3b492362a76a471980b54b3383cc7ae1.png\"/></p>\n<h2><a id=\"final_48\"></a>局部内部类的final问题</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\875a7452d9654506ad4af870ec861606.png\"/></p>\n<h2><a id=\"_50\"></a>匿名内部类</h2>\n<blockquote>\n<p><strong>如果接口的实现类(或者是父类的子类)只需要使用唯一的一次， 那么这种情况下就可以省略掉该类的定义，而改为使用【匿名内部类】。</strong><br/> <strong>说白了就是想用一个接口，就必须有个实现类，在覆盖重写里面的抽象方法，而如果匿名内部类，那么就不需要实现类，直接在主方法里面new接口，补上大括号，重写抽象方法即可。</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>匿名内部类的定义格式:<br/> <code>接口名称 对象名 = new 接口名称(){ //覆盖重写所有抽象方法};</code></strong><br/> <strong>小细节：注意大括号后面要有分号，不要忘记。</strong></p>\n</blockquote>\n<p><strong>举例配合理解:</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c7eca57981b4420ea655cbcc8bffabf0.png\"/></p>\n<h2><a id=\"_64\"></a>匿名内部类注意事项</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\efcd4ad30702425fa818f82681e528f4.png\"/></p>\n<blockquote>\n<p><strong>学习匿名内部类主要是让大家以后在阅读别人代码的时候，能够理解。并不代表以后都要这样写。因为匿名内部类有两个缺点:<br/> 缺点1:太复杂，太乱，可读性差。<br/> 缺点2:类没有名字，以后想重复使用，不能用。</strong></p>\n</blockquote>\n<h2><a id=\"_71\"></a>类作为成员变量类型</h2>\n<p><strong>代码举例：</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Weapon</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> code<span class=\"token punctuation\">;</span> <span class=\"token comment\">//武器的代号</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Weapon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Weapon</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> code<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hero</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span> <span class=\"token comment\">//英雄名字</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span> <span class=\"token comment\">//年龄</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Weapon</span> weapon<span class=\"token punctuation\">;</span> <span class=\"token comment\">//武器  类作为成员变量类型</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Hero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Hero</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Weapon</span> weapon<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weapon <span class=\"token operator\">=</span> weapon<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//age 和 name, 可以直接往里面拼，但是weapon是一个对象，它是一个类，需要get它里面的代号（一定要把code拿出来，在往里面拼）</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"年龄为\"</span><span class=\"token operator\">+</span>age<span class=\"token operator\">+</span><span class=\"token string\">\"的\"</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"正在用\"</span><span class=\"token operator\">+</span>weapon<span class=\"token punctuation\">.</span><span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"疯狂杀敌，渐渐的杀红眼!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Weapon</span> <span class=\"token function\">getWeapon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> weapon<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setWeapon</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Weapon</span> weapon<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weapon <span class=\"token operator\">=</span> weapon<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> 主方法 <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//创建一个英雄角色</span>\n        <span class=\"token class-name\">Hero</span> hero <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//为英雄起一个名字，并且设置年龄</span>\n        hero<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"飞飞\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hero<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//创建一个武器对象</span>\n        <span class=\"token class-name\">Weapon</span> weapon<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Weapon</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"七星剑\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//为英雄配备武器</span>\n        hero<span class=\"token punctuation\">.</span><span class=\"token function\">setWeapon</span><span class=\"token punctuation\">(</span>weapon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        hero<span class=\"token punctuation\">.</span><span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//调用attack方法</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n执行结果：年龄为<span class=\"token number\">20</span>的飞飞正在用七星剑疯狂杀敌，渐渐的杀红眼<span class=\"token operator\">!</span><span class=\"token operator\">!</span>\n</code></pre>\n<h2><a id=\"_165\"></a>接口作为成员变量类型</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6a478b01e5894648a8cee08e62d90c01.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0e33d7e78a3a4deb86b0282e2a55f4e8.png\"/></p>\n<h2><a id=\"_168\"></a>接口作为方法的参数或返回值</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6ddd915799a3450ab3fa8ba25243caa1.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-08-10 21:18:38", "summary": "学习内部类概念分类成员内部类的定义成员内部类的使用内部类的同名变量访问局部内部类的定义与使用局部内部类的问题匿名内部类匿名内部类注意事项类作为成员变量类型接口作为成员变量类型接口作为方法的参数或返回值"}