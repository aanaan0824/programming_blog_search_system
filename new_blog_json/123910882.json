{"blogid": "123910882", "writerAge": "码龄1年", "writerBlogNum": "22", "writerCollect": "825", "writerComment": "1765", "writerFan": "4116", "writerGrade": "5级", "writerIntegral": "3617", "writerName": "Елена_", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123910882.jpg", "writerRankTotal": "18348", "writerRankWeekly": "46632", "writerThumb": "1249", "writerVisitNum": "29151", "blog_read_count": "2100", "blog_time": "于 2022-04-02 04:15:00 发布", "blog_title": "[数据结构]我滴双链表完成辣，Ура", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>这个是一个标题哦</h3>\n<ul><li><a href=\"#_6\">双链表</a></li><li><a href=\"#_15\">那么，开始准备吧</a></li><li><ul><li><a href=\"#_16\">双链表的本体</a></li><li><a href=\"#_30\">初始化</a></li><li><a href=\"#_45\">得到一个节点</a></li><li><a href=\"#_60\">打印链表</a></li><li><a href=\"#_78\">销毁链表</a></li></ul>\n</li><li><a href=\"#_104\">经典的增删查改</a></li><li><ul><li><a href=\"#_105\">插入操作</a></li><li><ul><li><a href=\"#_106\">头插</a></li><li><a href=\"#_133\">尾插</a></li><li><a href=\"#_151\">指定位置前插入</a></li><li><a href=\"#_167\">遇到困难偷大懒</a></li></ul>\n</li><li><a href=\"#_188\">删除操作</a></li><li><a href=\"#_233\">简单偷个懒吧！</a></li><li><a href=\"#_255\">查询和修改</a></li></ul>\n</li><li><a href=\"#_283\">最后</a></li></ul>\n</div>\n<p></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\7c504d6c32e96c607723b80e759e731e.png\"/></p>\n<p>在淦了四篇刷题笔记之后，菜鸡大学生想起她之前在单链表挖的坑还没填。遂，填。有一说一菜鸡大学生的坑品还是可以的。<strong>下一篇是动图教程哦，所以…（暗示）</strong> 开搞！</p>\n<h1><a id=\"_6\"></a>双链表</h1>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\13e7c81bd31817667574ae771c930dbf.png\"/><br/> （今天的攻略对象）</p>\n<p>和上次的单链表相比，今天要写的双链表有以下不同：</p>\n<ol><li>带哨兵位的头结点。</li><li>双向的，每个节点不仅可以指向下一个，还可以<em>指向上一个</em>。</li><li>循环链表，<strong>最后一个节点指向第一个节点</strong>。</li></ol>\n<h1><a id=\"_15\"></a>那么，开始准备吧</h1>\n<h2><a id=\"_16\"></a>双链表的本体</h2>\n<p>加上一个前驱的指针，欸嘿嘿。<img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/5368076ffb5afbbe983a1a3afafc4ac9.gif\"/></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> ListDataType<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> prev<span class=\"token punctuation\">;</span> <span class=\"token comment\">//*</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n\tListDataType data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>ListNode<span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"_30\"></a>初始化</h2>\n<p>在初始化的时候我们就要<strong>带上我们的哨兵位</strong>了。<br/> 我们先生成一个节点，里面的数据置为0 <em>(数据多少都无所谓，反正都不会用上)</em> 然后将节点的<strong>前指针和后指针统统指向自己</strong>。<br/> 这样，一个循环链表的雏形就出来了。</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//初始化</span>\nListNode<span class=\"token operator\">*</span> <span class=\"token function\">ListInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tListNode<span class=\"token operator\">*</span> phead<span class=\"token operator\">=</span> <span class=\"token function\">BuyListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tphead<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> phead<span class=\"token punctuation\">;</span>\n\tphead<span class=\"token operator\">-&gt;</span>prev<span class=\"token operator\">=</span> phead<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> phead<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_45\"></a>得到一个节点</h2>\n<p>没啥，就多了一个前指针。<br/> 随便写写就好。</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//得到一个节点</span>\nListNode<span class=\"token operator\">*</span> <span class=\"token function\">BuyListNode</span><span class=\"token punctuation\">(</span>ListDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tListNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tnewnode<span class=\"token operator\">-&gt;</span>data <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\tnewnode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tnewnode<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> newnode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_60\"></a>打印链表</h2>\n<p>同上，注意结束条件变成了<code>cur!=phead</code>，因为是循环链表嘛。</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//打印</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListPrint</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> phead<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">!=</span>phead<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> cur<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_78\"></a>销毁链表</h2>\n<p>整一个cur指针，从头的下一个节点开始删，直到下一个节点是头，然后把头和cur一起删掉。</p>\n<p>我决定画个图玩玩。<br/> <img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/2cb47d823f1463d9d1fb4419436dbd1c.gif\"/></p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//销毁</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListDestory</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> phead<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\tListNode<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> phead<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>next<span class=\"token operator\">!=</span>phead<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcur <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n\t\tnext <span class=\"token operator\">=</span> next<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_104\"></a>经典的增删查改</h1>\n<h2><a id=\"_105\"></a>插入操作</h2>\n<h3><a id=\"_106\"></a>头插</h3>\n<p>双链表由于结构的优越性，增删查改变得嘎嘎简单，只要我们能找到要插入的节点<strong>两侧的节点</strong>，然后就是无脑操作。</p>\n<p>所以我们就大致画画图，放个代码就好了😀。</p>\n<ol><li>首先创建新节点<img alt=\"\" src=\"..\\..\\static\\image\\efb7b4a48915ee27fc45141682348ba3.png\"/></li><li>接着我们将phead和first与新节点链接。<img alt=\"\" src=\"..\\..\\static\\image\\c2fed05113b9af309444102c42e2272c.png\"/></li><li>然后就结束了。<img alt=\"\" src=\"..\\..\\static\\image\\200ca7bc285c90e36239ad9554c9cdee.png\"/></li></ol>\n<p>好耶！<img alt=\"\" src=\"..\\..\\static\\image\\3633ccd6370590c5477eeb0d52956927.png\"/></p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//头插</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListPushFront</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">,</span> ListDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tListNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> <span class=\"token function\">BuyListNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tListNode<span class=\"token operator\">*</span> first <span class=\"token operator\">=</span> phead<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t\n\tphead<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n\tnewnode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> first<span class=\"token punctuation\">;</span>\n\tnewnode<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> phead<span class=\"token punctuation\">;</span>\n\tfirst<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_133\"></a>尾插</h3>\n<p>同理。<br/> 我连图都懒得画。</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//尾插</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListPushBack</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">,</span> ListDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tListNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> <span class=\"token function\">BuyListNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tListNode<span class=\"token operator\">*</span> tail <span class=\"token operator\">=</span> phead<span class=\"token operator\">-&gt;</span>prev<span class=\"token punctuation\">;</span>\n\n\tphead<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n\tnewnode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> phead<span class=\"token punctuation\">;</span>\n\tnewnode<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">;</span>\n\ttail<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_151\"></a>指定位置前插入</h3>\n<p>…（暗示）</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//某个位置前插入数据</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListInsert</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">,</span> ListDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tListNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> <span class=\"token function\">BuyListNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tListNode<span class=\"token operator\">*</span> prev <span class=\"token operator\">=</span> pos<span class=\"token operator\">-&gt;</span>prev<span class=\"token punctuation\">;</span>\n\n\tprev<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n\tnewnode<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span>\n\tnewnode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span>\n\tpos<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_167\"></a>遇到困难偷大懒</h3>\n<p><em>有了指定位置插入我们可以偷头插和尾插的懒了。</em></p>\n<ul><li>尾插就是在phead的前面插入数据。</li><li>头插就是在phead的下一位前面插入数据。</li></ul>\n<p>所以：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">ListPushFront</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">,</span> LTDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ListInsert</span><span class=\"token punctuation\">(</span>phead<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListPushBack</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">,</span> LTDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ListInsert</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_188\"></a>删除操作</h2>\n<p>似乎更加简单了？但是要检查链表是不是为空即<code>phead-&gt;next!=phead</code>.</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//头删</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListPopFront</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">!=</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tListNode<span class=\"token operator\">*</span> first <span class=\"token operator\">=</span> phead<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\tphead<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> first<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\tfirst<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> phead<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//尾删</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListPopBack</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">!=</span> phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\tListNode<span class=\"token operator\">*</span> tail <span class=\"token operator\">=</span> phead<span class=\"token operator\">-&gt;</span>prev<span class=\"token punctuation\">;</span>\n\tphead<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> tail<span class=\"token operator\">-&gt;</span>prev<span class=\"token punctuation\">;</span>\n\ttail<span class=\"token operator\">-&gt;</span>prev<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> phead<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>tail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//删除某个位置数据</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListErase</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">,</span> ListNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">!=</span> phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//稍微考虑一下phead吧，不考虑也行</span>\n\n\tListNode<span class=\"token operator\">*</span> prev <span class=\"token operator\">=</span> pos<span class=\"token operator\">-&gt;</span>prev<span class=\"token punctuation\">;</span>\n\tListNode<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> pos<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\tprev<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n\tnext<span class=\"token operator\">-&gt;</span>prev <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_233\"></a>简单偷个懒吧！</h2>\n<p><strong>这里使用的是不带phead玩的版本。</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//尾删</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListPopBack</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">!=</span> phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">ListErase</span><span class=\"token punctuation\">(</span>phead<span class=\"token operator\">-&gt;</span>prev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//头删</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListPopFront</span><span class=\"token punctuation\">(</span>LTNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">!=</span> phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">ListErase</span><span class=\"token punctuation\">(</span>phead<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_255\"></a>查询和修改</h2>\n<p>很简单哦，只要遍历就可以了。</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//查某个值，返回地址</span>\nListNode<span class=\"token operator\">*</span> <span class=\"token function\">ListFind</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">,</span> ListDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> phead<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> phead<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>data <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> cur<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//改某个值</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ListChange</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">,</span> ListDataType sourse<span class=\"token punctuation\">,</span> ListDataType destination<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\tListNode<span class=\"token operator\">*</span> pos<span class=\"token operator\">=</span> <span class=\"token function\">ListFind</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">,</span> sourse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpos<span class=\"token operator\">-&gt;</span>data <span class=\"token operator\">=</span> destination<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_283\"></a>最后</h1>\n<p>感觉这一篇好水哦（笑）</p>\n<p>看在下一篇是动图教程的份上，捧个小场不过分吧😀。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-04-02 04:15:00", "summary": "这个是一个标题哦双链表那么，开始准备吧双链表的本体初始化得到一个节点打印链表销毁链表经典的增删查改插入操作头插尾插指定位置前插入遇到困难偷大懒删除操作简单偷个懒吧！查询和修改最后在淦了四篇刷题笔记之后"}