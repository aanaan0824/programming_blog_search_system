{"blogid": "126659113", "writerAge": "码龄14年", "writerBlogNum": "54", "writerCollect": "5910", "writerComment": "715", "writerFan": "10157", "writerGrade": "5级", "writerIntegral": "4300", "writerName": "苏三说技术", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126659113.jpg", "writerRankTotal": "3505", "writerRankWeekly": "2842", "writerThumb": "2046", "writerVisitNum": "164340", "blog_read_count": "2096", "blog_time": "于 2022-09-02 11:24:17 发布", "blog_title": "这12款idea插件，能让你代码飞起来", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_0\"></a>前言</h2>\n<p>基本上每个程序员都会写代码，但写代码的速度不尽相同。</p>\n<p>为什么有些人，一天只能写几百行代码？</p>\n<p>而有些人，一天可以写几千行代码？</p>\n<p>有没有办法，可以提升开发效率，在相同的时间内，写出更多的代码呢？</p>\n<p>今天我跟大家一起聊聊在<code>idea</code>中，能提升编码效率的<code>12</code>种插件，希望对大家有所帮助。</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\2467edad528d804cdba607c48f2d78f2.png\"/></p>\n<h2><a id=\"1_lombok_13\"></a>1. lombok</h2>\n<p>之前对lombok还有争议，到底该不该在项目中使用，为此我还专门写了一篇文章《<a href=\"https://mp.weixin.qq.com/s/Vr0fKudqAEs8oPAgxLMpEg\">迷茫了，我们该不该用lombok？</a>》。</p>\n<p>现在新版的idea已经内置了lombok插件，所以用它是一种趋势。</p>\n<p>我之所以把lombok放在整篇文章的第一个介绍，是因为它真的可以帮我少写很多代码，特别是entity、DTO、VO、BO中的。</p>\n<p>我们用User类举例，以前定义javabean需要写如下代码：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> address<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> address<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> address<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Long</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> address<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAddress</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> address<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> address<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> o<span class=\"token punctuation\">)</span> returntrue<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> returnfalse<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n                <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n                <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n                <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span><span class=\"token string\">\"User{\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"id=\"</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span>\n                <span class=\"token string\">\", name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\", age=\"</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span>\n                <span class=\"token string\">\", address='\"</span> <span class=\"token operator\">+</span> address <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span>\n                <span class=\"token char\">'}'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>该User类中包含了：成员变量、getter/setter方法、构造方法、equals、hashCode方法。</p>\n<p>咋一看，代码还是挺多的。而且还有个问题，如果User类中的代码修改了，比如：age字段改成字符串类型，或者name字段名称修改了，是不是需要同步修改相关的成员变量、getter/setter方法、构造方法、equals、hashCode方法全都修改一遍？</p>\n<p>好消息是用lombok可以解决这个问题。</p>\n<p>如果是idea2020.3之前的版本，需要在idea中安装如下插件：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\b9b3fe7b959f5eb6dd3dc5612bd4eb61.png\"/><br/> 但idea2020.3之后，idea已经内置了lombok的功能。</p>\n<p>有了lombok插件，现在我们在idea只用这样写代码，就能实现上面的功能了：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@ToString</span>\n<span class=\"token annotation punctuation\">@EqualsAndHashCode</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@Setter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> address<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>简直太轻松了，真的可以少写很多代码。</p>\n<blockquote>\n<p>此外，我们还需要在项目的pom文件中，引入lombok的依赖包，不然项目会跑不起来。</p>\n</blockquote>\n<h2><a id=\"2_Free_Mybatis_plugin_131\"></a>2. Free Mybatis plugin</h2>\n<p>在国内<code>mybatis</code>已经成为了最主流的数据库框架了，该框架属于半自动化的ORM持久化框架，相对于hibernate这种全自动化的持久化框架更灵活，性能更高。</p>\n<p>在<code>mybatis</code>中，我们需要自己定义mapper和对应的xml文件完成绑定。</p>\n<p>在这里我们以用户表为例，首先需要定义UserMapper接口：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserMapper</span> <span class=\"token punctuation\">{<!-- --></span>\n\t <span class=\"token keyword\">int</span> <span class=\"token function\">insertUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserModel</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>然后需要UserMapper.xml配置文件：</p>\n<pre><code class=\"prism language-java\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>xml version<span class=\"token operator\">=</span><span class=\"token string\">\"1.0\"</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span> <span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>DOCTYPE mapper\n        PUBLIC <span class=\"token string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span>\n        <span class=\"token string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>mapper namespace<span class=\"token operator\">=</span><span class=\"token string\">\"com.sue.jump.mappers.UserMapper\"</span><span class=\"token operator\">&gt;</span>\n\n    <span class=\"token operator\">&lt;</span>sql id<span class=\"token operator\">=</span><span class=\"token string\">\"selectUserVo\"</span><span class=\"token operator\">&gt;</span>\n        id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> sex\n     <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>sql<span class=\"token operator\">&gt;</span>\n\n    <span class=\"token operator\">&lt;</span>insert id<span class=\"token operator\">=</span><span class=\"token string\">\"insertUser\"</span> parameterType<span class=\"token operator\">=</span><span class=\"token string\">\"com.sue.jump.model.UserModel\"</span><span class=\"token operator\">&gt;</span>\n        INSERT INTO user\n        <span class=\"token operator\">&lt;</span>trim prefix<span class=\"token operator\">=</span><span class=\"token string\">\"(\"</span> suffix<span class=\"token operator\">=</span><span class=\"token string\">\")\"</span> suffixOverrides<span class=\"token operator\">=</span><span class=\"token string\">\",\"</span><span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token keyword\">if</span> test<span class=\"token operator\">=</span><span class=\"token string\">\"id != null \"</span><span class=\"token operator\">&gt;</span>\n                id<span class=\"token punctuation\">,</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token keyword\">if</span><span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token keyword\">if</span> test<span class=\"token operator\">=</span><span class=\"token string\">\"name != null  and name != ''\"</span><span class=\"token operator\">&gt;</span>\n                name<span class=\"token punctuation\">,</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token keyword\">if</span><span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token keyword\">if</span> test<span class=\"token operator\">=</span><span class=\"token string\">\"age != null \"</span><span class=\"token operator\">&gt;</span>\n                age<span class=\"token punctuation\">,</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token keyword\">if</span><span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token keyword\">if</span> test<span class=\"token operator\">=</span><span class=\"token string\">\"sex != null \"</span><span class=\"token operator\">&gt;</span>\n                sex<span class=\"token punctuation\">,</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token keyword\">if</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>trim<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>trim prefix<span class=\"token operator\">=</span><span class=\"token string\">\"values (\"</span> suffix<span class=\"token operator\">=</span><span class=\"token string\">\")\"</span> suffixOverrides<span class=\"token operator\">=</span><span class=\"token string\">\",\"</span><span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token keyword\">if</span> test<span class=\"token operator\">=</span><span class=\"token string\">\"id != null \"</span><span class=\"token operator\">&gt;</span>\n                #<span class=\"token punctuation\">{<!-- --></span>id<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token keyword\">if</span><span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token keyword\">if</span> test<span class=\"token operator\">=</span><span class=\"token string\">\"name != null  and name != ''\"</span><span class=\"token operator\">&gt;</span>\n                #<span class=\"token punctuation\">{<!-- --></span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token keyword\">if</span><span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token keyword\">if</span> test<span class=\"token operator\">=</span><span class=\"token string\">\"age != null \"</span><span class=\"token operator\">&gt;</span>\n                #<span class=\"token punctuation\">{<!-- --></span>age<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token keyword\">if</span><span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token keyword\">if</span> test<span class=\"token operator\">=</span><span class=\"token string\">\"sex != null \"</span><span class=\"token operator\">&gt;</span>\n                #<span class=\"token punctuation\">{<!-- --></span>sex<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token keyword\">if</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>trim<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>insert<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>mapper<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>UserMapper.xml文件中，mapper标签的namespace对应UserMapper接口名，而insert标签的id=insertUser，正好对应UserMapper接口中的insertUser方法。</p>\n<p>那么，在项目中如何通过UserMapper类中的getUser方法，能够快速访问UserMapper.xml文件中的getUser方法？</p>\n<p>答：这就需要使用<code>Free Mybatis plugin</code>插件了。</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\ae676f44252c31b3eb4163125ad6d980.png\"/></p>\n<p>安装了该插件之后，在UserMapper接口的接口名和方法名的左边，会多了两个绿色的箭头，我们点击该箭头，就能跳转到UserMapper.xml文件对应的mapper标签或者insertUser语句上。<br/> <img alt=\"\" src=\"..\\..\\static\\image\\1cbfb978a1ae4e4e23981cdc4cb019c9.png\"/><br/> 此外，在UserMapper.xml文件的insertUser语句的左边，也会多出一个绿色的箭头，我们点击该箭头，也能跳转到UserMapper接口的insertUser方法上。<br/> <img alt=\"\" src=\"..\\..\\static\\image\\be107495bb23d4472bafaf3de3fc7fda.png\"/><br/> 有了这个插件，我们就能在mapper和xml之间自由切换，自由玩耍了，再也不用像以前那样搜索来搜索去。</p>\n<h2><a id=\"3Translation_201\"></a>3.Translation</h2>\n<p>有些小伙伴，包括我自己可能英语不太好（我英语刚过四级）。</p>\n<p>我们在给变量或者方法取名时，要想半天。特别是在阅读JDK英文文档时，遇到了一些生僻字，简直头大。</p>\n<p>有个好消息是使用：<code>Translation</code>插件，能够让我们在文档中自由飞翔。<br/> <img alt=\"\" src=\"..\\..\\static\\image\\518caf03b57f2918fca97f4cd0717de5.png\"/><br/> 安装完<code>Translation</code>插件之后，在other settings中多了一个Translation菜单。</p>\n<p>点击该菜单：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\ea9dbee8875f8b79f9619afbdb29849c.png\"/><br/> 在右边的窗口中，可以选择翻译软件。</p>\n<p>选中需要翻译的英文文档：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\18d42736146a116c58be56be838777f8.png\"/><br/> 在右键弹窗的窗口中，选择Translation选项，会弹如下窗口：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\fa66138d7641915cd58230a111de5ed7.png\"/><br/> 一段英文段落，一下子翻译成了中文，简直太爽了。</p>\n<h2><a id=\"4Alibaba_Java_Coding_Guidelines_220\"></a>4.Alibaba Java Coding Guidelines</h2>\n<p>如果你是从事Java开发工作的小伙伴，肯定看过阿里巴巴的《Java开发手册》。</p>\n<p>该手册总结了我们在日常开发过程中，可能会遇到的问题。从编程规约、异常日志、单位测试、安全规约、Mysql数据库和工程结构，这6大方面，规范了开发的流程，确保我们能写出高效、优雅的代码。</p>\n<p>但这些规范性的东西，仅仅靠人的自觉性，很难达到预期的效果。</p>\n<p>为了解决这个问题，阿里巴巴推出了<code>Alibaba Java Coding Guidelines</code>插件，能够通过该插件，直接查出不合规范的代码。</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\677182db287f378dda535ae5335a89fb.png\"/></p>\n<p>安装了该插件之后，按下快捷键：<code>Ctrl+Alt+Shift+J</code>，可以可对整个项目或单个文件进行编码规约扫描。</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\ecac83092eff0f1a0ebd547333c851a7.png\"/><br/> 扫描后会将不规范的代码按从高到低。</p>\n<p>目前有三个等级显示在下方：</p>\n<ul><li>Blocker 崩溃</li><li>Critical 严重</li><li>Major 重要</li></ul>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\ac27bd1c8cb2af12e57ee6c0d47a41b7.png\"/><br/> 点击左边其中一个不规范的代码行，右边窗口会立刻显示不规范的详细代码，便于我们快速定位问题。</p>\n<p>nice。</p>\n<h2><a id=\"5_GenerateAllSetter_246\"></a>5. GenerateAllSetter</h2>\n<p>很多时候，我们需要给某个对象赋值，如果参数比较多的话，需要手写大量的<code>setter</code>或者<code>getter</code>代码。</p>\n<p>有没有办法一键搞定呢？</p>\n<p>答：有，使用<code>GenerateAllSetter</code>插件。</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\0d8eacff63c4ef251425c16f79416468.png\"/></p>\n<p>安装完插件之后，在创建的对象上，按快捷键下：<code>alt + enter</code>。</p>\n<p>在弹出的窗口中选择：Generate all setter with default value。<br/> <img alt=\"\" src=\"..\\..\\static\\image\\b444648c14eb9055ddb4222df0cee01c.png\"/><br/> 就会自动生成如下代码：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\5ec44b368fb7277f7dc93552665b707d.png\"/><br/> 简直太方便了。</p>\n<h2><a id=\"6_SequenceDiagram_263\"></a>6. SequenceDiagram</h2>\n<p>我们平时在阅读源码时，为了梳理清楚内部逻辑，经常需要画一些<code>时序图</code>。</p>\n<p>如果我们直接画，会浪费很多时间，而且画的图不一定正确。</p>\n<p>这时可以使用：<code>SequenceDiagram</code>插件。</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\2fc0484cc5980b7bd5562c1c22fb586c.png\"/><br/> 选择具体某个方法，右键选择：sequence diagram选项：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\4d72e6c8161bcfb7e505344da81bfb67.png\"/><br/> 之后，会出现时序图：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\290d7e6ebc65f751816821b01b588aee.png\"/></p>\n<p>从此以后，能够成为画图高手了，完美。</p>\n<h2><a id=\"7_CheckStyleIDEA_278\"></a>7. CheckStyle-IDEA</h2>\n<p>在代码格式方面，有许多地方，需要我们注意，比如：无用导入、没写注释、语法错误、方法太长等等。</p>\n<p>有没有办法，可以在idea中，一次性检测出上面的这些问题呢？</p>\n<p>答：使用<code>CheckStyle-IDEA</code>插件。</p>\n<p><code>CheckStyle-IDEA</code>是一个检测代码格式是否满足规范的工具，其中用得比较多的是<code>Google</code>规范和<code>Sun</code>规范。</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\47fa8b9f177d24e39a1dbd9eb71a45c9.png\"/><br/> 安装完插件后，在idea的下方会出现：CheckStyle选项：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\76f719c41b7367809a29c1ce6f5b9262.png\"/><br/> 点击左边的绿色按钮，可以扫描代码。在中间位置，会显示不符合代码规范的原因。</p>\n<p>双击代码，即可直接跳转到具体代码：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\caec8a1f86d8542b41b02da16cd1b6d6.png\"/></p>\n<h2><a id=\"8JRebel_and_XRebel_296\"></a>8.JRebel and XRebel</h2>\n<p>在idea中开发Java项目，有个很不爽的地方是：每次修改一个类或者接口，都需要重启服务，否则不会运行最新地方。</p>\n<p>而每次重启，都需要花大量的时间。</p>\n<p>有没有办法，Java代码修改后不用重启系统，立即生效呢？</p>\n<p>答：使用<code>JRebel and XRebel</code>插件。</p>\n<p>如图：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\b26ac6c97c3e0ca2e53029e0ec219dc7.png\"/></p>\n<p>安装完成之后，这里会有两个绿色的按钮，并且在右边多了一个选项Select Rebel Agents：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\0f7bfda294d4926f78a7a8aedcde182a.png\"/><br/> 其中一个绿色的按钮，表示热部署启动项目，另外一个表示用debug默认热部署启动项目。</p>\n<p>Select Rebel Agents选项中包含三个值：</p>\n<ul><li>JRebel：修改完代码，不重启服务，期望代码直接生效。</li><li>XRebel：请求过程中，各个部分代码性能监控。例如：方法执行时间，出现的异常，SQL执行时间，输出的Log，MQ执行时间等。</li><li>JRebel+XRebel：修改完代码，不重启服务，并且监控代码。</li></ul>\n<h2><a id=\"9_Codota_318\"></a>9. Codota</h2>\n<p>说实话，idea现有的代码提示功能，已经很强大了。</p>\n<p>但如果你使用过<code>Codota</code>插件，它会让你写代码的速度更上一层楼。<br/> <img alt=\"\" src=\"..\\..\\static\\image\\948fd6b7b6e59a66f1b19aa337816e63.png\"/><br/> 安装完插件之后，我们在写代码时，它会给你一些提示：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\fe2414728fd30870dfda96a26290a738.png\"/><br/> 这些提示是基于ai统计出来的，非常有参考价值。</p>\n<h2><a id=\"10_GsonFormat_328\"></a>10. GsonFormat</h2>\n<p>很多时候，我需要把<code>json</code>中的参数，转换成<code>实体对象</code>中的参数。或者把<code>实体对象</code>中的参数，转换成<code>json</code>中的参数。</p>\n<p>以前我们都是手动一个变量，一个变量的拷贝的。</p>\n<p>但现在有个好消息是，idea的<code>GsonFormat</code>插件可以帮我们完成这件事。</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\c94049e9a4c480eb1a2170d9cb925375.png\"/><br/> 安装完插件之后，先创建一个空类：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\760305a150980e39e5ef60c2ff0353cf.png\"/><br/> 按下快捷键：<code>alt + s</code>，会弹出下面这个窗口：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\befecd4fe49c10dffa96b4b70750f272.png\"/><br/> 然后在该窗口中，录入json数据。</p>\n<p>点击确定按钮，就会自动生成这些代码：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\ac0fba4f0f59a863abc2bda0311cfbb1.png\"/><br/> 简直帅呆了。</p>\n<h2><a id=\"11_Rainbow_Brackets_347\"></a>11. Rainbow Brackets</h2>\n<p>我们平时写代码的时候，括号是让我们非常头疼的地方，特别是代码逻辑很多，层层嵌套的情况。</p>\n<p>一眼很难看出，代码是从哪个括号开始，到哪个反括号结束的。</p>\n<p>有没有办法解决这个问题呢？</p>\n<p>答：使用<code>Rainbow Brackets</code>插件。</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\3890fa077cb44e75fdb65decb7c3940d.png\"/><br/> 安装完插件之后，括号和反括号，在代码中会自动按照不同颜色做区分：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\863fb4ca0d6219ca9254b099c1760c2e.png\"/><br/> 非常显目，非常直观。</p>\n<h2><a id=\"12_CodeGlance_361\"></a>12. CodeGlance</h2>\n<p>有些时候，我们阅读的代码很多，比如某个类中包含的方法和成员变量很多。</p>\n<p>从上往下，一点点往下翻，会浪费很多时间。那么有没有办法，能够快速翻到想看的代码呢？</p>\n<p>答：有，可以使用<code>CodeGlance</code>插件。<br/> <img alt=\"\" src=\"..\\..\\static\\image\\8eb8ca74cdccf8fef7f6f2454c3195f0.png\"/><br/> 安装完插件之后，在代码右侧，会出现下面这个窗口：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\cb31480a8eba8005ca8dc5003edef835.png\"/><br/> 它是代码的缩略图，通过它我们能够非常快速的切换代码块。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-09-02 11:24:17", "summary": "前言基本上每个程序员都会写代码，但写代码的速度不尽相同。为什么有些人，一天只能写几百行代码？而有些人，一天可以写几千行代码？有没有办法，可以提升开发效率，在相同的时间内，写出更多的代码呢？今天我跟大家"}