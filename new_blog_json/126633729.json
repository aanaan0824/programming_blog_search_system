{"blogid": "126633729", "writerAge": "码龄6年", "writerBlogNum": "154", "writerCollect": "146", "writerComment": "18", "writerFan": "20", "writerGrade": "5级", "writerIntegral": "1636", "writerName": "欧菲斯集团", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126633729.jpg", "writerRankTotal": "12834", "writerRankWeekly": "16002", "writerThumb": "25", "writerVisitNum": "73045", "blog_read_count": "418", "blog_time": "于 2022-08-31 22:40:36 发布", "blog_title": "如何跳出forEach循环", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"_0\"></a>介绍</h1>\n<p>相信所有的前端小伙伴对 forEach() 方法并不陌生，它实现了对数组的每个元素执行一次给定的函数。可在使用中，经常希望跟 for 一样，在循环过程中，某个判断成立后跳出这个循环。本期我们就将聊聊 forEach 的实现及使用，以及跳不出去的原因，还有跳出方案。</p>\n<h1><a id=\"_3\"></a>正文</h1>\n<h2><a id=\"_4\"></a>循环对比</h2>\n<p>众所周知，for 循环跳出非常容易：</p>\n<pre><code>let arr = [...new Array(10).keys()]\nfor(let i = 0; i &lt; arr.length;i++){\n\tconsole.log(`item:${arr[i]}`)\n\tif(arr[i]&gt;5) break;\n}\n</code></pre>\n<p>可是对于 forEach() 方法或许这点就让人失望了，它是从头走到底的，不仅 return 都是无效的，而且 break 还是直接报错;</p>\n<h2><a id=\"_16\"></a>为何无法跳出</h2>\n<p>为了了解无法跳出循环的原因，我们就简单手写一个 forEach 方法，来探查这个原因。<br/> 我们先来分析一下，语法和传参：</p>\n<pre><code>arr.forEach(callback(currentValue [, index [, array]])[, thisArg])\n</code></pre>\n<ul><li>callback：数组中每个元素需要执行的回调函数</li><li>\n<ul><li>currentValue：当前元素的值。</li></ul> </li><li>\n<ul><li>index：当前元素的索引值。</li></ul> </li><li>\n<ul><li>array：当前所操作的数组。</li></ul> </li><li>thisArg：可选参数。当执行回调函数 callback 时，用作 this 的值。</li></ul>\n<pre><code>   \t Array.prototype.myForEach = function(callback,self){\n   \t    let _arr = [...this];\n   \t    for(let i = 0;i&lt;_arr.length;i++){\n   \t        callback.call(self,_arr[i],i,_arr)\n   \t    }\n   \t}\n</code></pre>\n<p>如你所见寥寥几句就可以实现出我们的 forEach 方法了，而且，由此可见，我们了解到它本身也是借用的 for 循环 来处理当前元素，执行回调方法，在这个方法里肯定是跳不出来的。那有什么办法能让回调函数中断呢？对，就是抛出异常。</p>\n<h2><a id=\"_41\"></a>实现跳出</h2>\n<p>现在我们就来用抛出异常的方式来完成这个跳出任务。</p>\n<pre><code>let arr = [...new Array(10).keys()];\ntry{\n    arr.forEach(item=&gt;{\n        console.log(`item:${item}`)\n        if(item&gt;5) throw new Error(\"break\");\n    })\n}catch(err){\n    if(err.message === \"break\")\t\n        console.log(\"break success!\")\n    else \n        console.error(err)\n}\n</code></pre>\n<p>我们这里用了抛出异常的方式直接让回调函数报错来实现，但是还要注意一点，最好还要传入一个异常错误的 message ，我这里定为 字符串信息break，因为我们在运行时还有可能报出别的错误，有了这个标识就能识别处理哪个是正常的跳出循环，哪个是真正的执行错误。</p>\n<h1><a id=\"_62\"></a>结语</h1>\n<p>其实不仅仅是 forEach() 方法，还有一个平时经常使用的 map() 方法也是大同小异的，可以用抛出异常来实现跳出循环的操作。但我们其实也完全可以使用 some() ， every() 等方法来提前验证好，或者使用 findIndex() 去检测条件捕获索引后再进行二次遍历处理。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-31 22:40:36", "summary": "介绍相信所有的前端小伙伴对方法并不陌生，它实现了对数组的每个元素执行一次给定的函数。可在使用中，经常希望跟一样，在循环过程中，某个判断成立后跳出这个循环。本期我们就将聊聊的实现及使用，以及跳不出去的原"}