{"blogid": "125906741", "writerAge": "码龄1年", "writerBlogNum": "60", "writerCollect": "1412", "writerComment": "2002", "writerFan": "3854", "writerGrade": "6级", "writerIntegral": "6392", "writerName": "沙漠下的胡杨", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125906741.jpg", "writerRankTotal": "3440", "writerRankWeekly": "1187", "writerThumb": "2275", "writerVisitNum": "41948", "blog_read_count": "463", "blog_time": "于 2022-08-09 16:51:13 发布", "blog_title": "C++基础篇之缺省参数和函数重载", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<blockquote>\n<p> <img alt=\"\" height=\"15\" src=\"..\\..\\static\\image\\c556452bb2e641388ff5cbf0ad0cd087.png\" width=\"15\"/> <span style=\"color:#1c7331;\"><strong>个人主页：欢迎大家光临——&gt;</strong></span><a href=\"https://blog.csdn.net/m0_64770095\" title=\"沙漠下的胡杨\">沙漠下的胡杨</a></p>\n<p><img alt=\"\" height=\"23\" src=\"..\\..\\static\\image\\8677fe6ae6e446eba7e0203a3f198059.png\" width=\"23\"/> <span style=\"color:#ed7976;\"><strong> 各位大帅哥，大漂亮</strong></span></p>\n<p><img alt=\"\" height=\"26\" src=\"..\\..\\static\\image\\182b5d086f4c440aa67d6a3f6747f3ca.png\" width=\"26\"/> <span style=\"color:#956fe7;\"><strong>如果觉得文章对自己有帮助</strong></span></p>\n<p><img alt=\"\" height=\"27\" src=\"..\\..\\static\\image\\d1ec8894bf4b4d31ab1a86a58ea34714.png\" width=\"27\"/> <span style=\"color:#4da8ee;\"><strong>可以一键三连支持博主</strong></span></p>\n<p><img alt=\"\" height=\"29\" src=\"..\\..\\static\\image\\7b7d3b82439b40c48b5e0aa5e1468a51.png\" width=\"29\"/><strong> <span style=\"color:#38d8f0;\">你的每一分关心都是我坚持的动力</span></strong></p>\n<p></p>\n<p><img alt=\"\" height=\"175\" src=\"https://img-blog.csdnimg.cn/b9890a16ced94dcc95130f5480d21937.gif\" width=\"175\"/><strong> </strong><img alt=\"\" height=\"176\" src=\"https://img-blog.csdnimg.cn/ebd7b09fe3334c569c31567a87064844.gif\" width=\"176\"/></p>\n<h3 id=\"%C2%A0%E2%98%84%EF%BC%9A%20%E6%9C%AC%E6%9C%9F%E9%87%8D%E7%82%B9%EF%BC%9A%E7%BC%BA%E7%9C%81%E5%8F%82%E6%95%B0%E5%92%8C%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD\"> <strong>☄：</strong> <span style=\"color:#fe2c24;\">本期重点：缺省参数和函数重载</span></h3>\n<p> <strong> <span style=\"color:#6eaad7;\">希望大家每天都心情愉悦的学习工作。</span></strong> </p>\n</blockquote>\n<hr/>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%C2%A0%E2%98%84%EF%BC%9A%20%E6%9C%AC%E6%9C%9F%E9%87%8D%E7%82%B9%EF%BC%9A%E7%BC%BA%E7%9C%81%E5%8F%82%E6%95%B0%E5%92%8C%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E2%98%84%EF%BC%9A%20%E6%9C%AC%E6%9C%9F%E9%87%8D%E7%82%B9%EF%BC%9A%E7%BC%BA%E7%9C%81%E5%8F%82%E6%95%B0%E5%92%8C%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD\"> ☄： 本期重点：缺省参数和函数重载</a></p>\n<p id=\"%E7%BC%BA%E7%9C%81%E5%8F%82%E6%95%B0%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E7%89%B9%E7%82%B9%EF%BC%9A-toc\" style=\"margin-left:0px;\"><a href=\"#%E7%BC%BA%E7%9C%81%E5%8F%82%E6%95%B0%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E7%89%B9%E7%82%B9%EF%BC%9A\">缺省参数的概念和特点：</a></p>\n<p id=\"%E7%BC%BA%E7%9C%81%E5%8F%82%E6%95%B0%E5%AE%9E%E4%BE%8B%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#%E7%BC%BA%E7%9C%81%E5%8F%82%E6%95%B0%E5%AE%9E%E4%BE%8B%EF%BC%9A\">缺省参数实例：</a></p>\n<p id=\"%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%E6%A6%82%E5%BF%B5%EF%BC%9A-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%E6%A6%82%E5%BF%B5%EF%BC%9A\">函数重载概念：</a></p>\n<p id=\"%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%E5%AE%9E%E4%BE%8B%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%E5%AE%9E%E4%BE%8B%EF%BC%9A\">函数重载实例：</a></p>\n<p id=\"%E4%B8%BA%E4%BB%80%E4%B9%88C%2B%2B%E6%94%AF%E6%8C%81%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%EF%BC%8C%E8%80%8CC%E4%B8%8D%E6%94%AF%E6%8C%81%E5%91%A2%EF%BC%9F-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88C%2B%2B%E6%94%AF%E6%8C%81%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%EF%BC%8C%E8%80%8CC%E4%B8%8D%E6%94%AF%E6%8C%81%E5%91%A2%EF%BC%9F\">为什么C++支持函数重载，而C不支持呢？</a></p>\n<p id=\"%E6%88%91%E4%BB%AC%E8%A6%81%E4%BA%86%E8%A7%A3%E5%85%B7%E4%BD%93%E8%BF%87%E7%A8%8B%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0%E5%A6%82%E4%B8%8B%EF%BC%9Agcc%E5%92%8Cg%2B%2B%E7%9A%84%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%C2%A0-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%88%91%E4%BB%AC%E8%A6%81%E4%BA%86%E8%A7%A3%E5%85%B7%E4%BD%93%E8%BF%87%E7%A8%8B%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0%E5%A6%82%E4%B8%8B%EF%BC%9Agcc%E5%92%8Cg%2B%2B%E7%9A%84%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%C2%A0\">我们要了解具体过程参考文章如下：gcc和g++的编译过程 </a></p>\n<p id=\"extern%20%E2%80%9CC%E2%80%9D%E7%9A%84%E7%94%A8%E6%B3%95-toc\" style=\"margin-left:0px;\"><a href=\"#extern%20%E2%80%9CC%E2%80%9D%E7%9A%84%E7%94%A8%E6%B3%95\">extern “C”的用法</a></p>\n<p id=\"%E5%85%B3%E4%BA%8E%E5%8A%A8%E9%9D%99%E6%80%81%E5%BA%93%E7%9A%84%E6%A6%82%E5%BF%B5%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0%EF%BC%9A%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%92%8C%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%85%B3%E4%BA%8E%E5%8A%A8%E9%9D%99%E6%80%81%E5%BA%93%E7%9A%84%E6%A6%82%E5%BF%B5%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0%EF%BC%9A%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%92%8C%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5\">关于动静态库的概念参考文章：动态链接和静态链接</a></p>\n<p id=\"C%2B%2B%E7%A8%8B%E5%BA%8F%E8%B0%83%E7%94%A8C%E8%AF%AD%E8%A8%80%E5%BD%A2%E6%88%90%E7%9A%84%E9%9D%99%E6%80%81%E5%BA%93%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#C%2B%2B%E7%A8%8B%E5%BA%8F%E8%B0%83%E7%94%A8C%E8%AF%AD%E8%A8%80%E5%BD%A2%E6%88%90%E7%9A%84%E9%9D%99%E6%80%81%E5%BA%93%EF%BC%9A\">C++程序调用C语言形成的静态库：</a></p>\n<p id=\"%C2%A0C%E7%A8%8B%E5%BA%8F%E8%B0%83%E7%94%A8C%2B%2B%E7%9A%84%E9%9D%99%E6%80%81%E5%BA%93%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0C%E7%A8%8B%E5%BA%8F%E8%B0%83%E7%94%A8C%2B%2B%E7%9A%84%E9%9D%99%E6%80%81%E5%BA%93%EF%BC%9A\"> C程序调用C++的静态库：</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 id=\"%E7%BC%BA%E7%9C%81%E5%8F%82%E6%95%B0%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E7%89%B9%E7%82%B9%EF%BC%9A\"><span style=\"color:#ff9900;\">缺省参数的概念和特点：</span></h1>\n<blockquote>\n<p>概念：</p>\n<p>缺省参数是声明或定义函数时为函数的参数指定一个缺省值。在调用该函数时，如果没有指定实参则采用该形参的缺省值，否则使用指定的实参。</p>\n<p></p>\n<p>特点：</p>\n<p>1.缺省参数分为：全缺省和半缺省<br/> 2. 半缺省参数必须从右往左依次来给出，不能间隔着给<br/> 3. 缺省参数不能在函数声明和定义中同时出现</p>\n<p>4. 缺省值必须是常量或者全局变量<br/> 5. C语言不支持（编译器不支持）</p>\n</blockquote>\n<h2 id=\"%E7%BC%BA%E7%9C%81%E5%8F%82%E6%95%B0%E5%AE%9E%E4%BE%8B%EF%BC%9A\"><span style=\"color:#fe2c24;\">缺省参数实例：</span></h2>\n<blockquote>\n<p>全缺省参数的函数，我们分别不传参数，传一个参数，传看两个参数，传三个参数。</p>\n<pre><code class=\"language-cpp\">void func(int a = 200,int b =20,int c = 2)\n{\n\tstd::cout &lt;&lt; a &lt;&lt; std::endl;\n\tstd::cout &lt;&lt; b &lt;&lt; std::endl;\n\tstd::cout &lt;&lt; c &lt;&lt; std::endl &lt;&lt; std:: endl;\n\n}\n\n\nint main()\n{\n\tfunc();\n\tfunc(1);\n\tfunc(1, 10);\n\tfunc(1, 10,100);\n\n\treturn 0;\n}</code></pre>\n<p><img alt=\"\" height=\"357\" src=\"..\\..\\static\\image\\5e3b11af97c04d428013117e01e5257b.png\" width=\"467\"/></p>\n<p></p>\n<p>半缺省参数的函数：</p>\n<pre><code class=\"language-cpp\">void func(int a,int b = 20 ,int c = 2)\n{\n\tstd::cout &lt;&lt; a &lt;&lt; std::endl;\n\tstd::cout &lt;&lt; b &lt;&lt; std::endl;\n\tstd::cout &lt;&lt; c &lt;&lt; std::endl &lt;&lt; std:: endl;\n\n}\n\n\nint main()\n{\n\tfunc(3);\n\tfunc(3,30);\n\tfunc(3,30,300);\n\n\treturn 0;\n}</code></pre>\n<p><img alt=\"\" height=\"228\" src=\"..\\..\\static\\image\\b95ed58a948e4709806189e1ad3c5f9e.png\" width=\"617\"/></p>\n<p></p>\n<p>在传参数时，必须从左到右来给，不能间隔给，否则报错：</p>\n<p><img alt=\"\" height=\"730\" src=\"..\\..\\static\\image\\bb4539b079424c7a8881398853bacefc.png\" width=\"1062\"/></p>\n<p></p>\n<p><strong><span style=\"color:#fe2c24;\"><span style=\"background-color:#ffd900;\"> 缺省参数不能在定义个声明中同时存在:</span></span></strong></p>\n<p><span style=\"color:#ffd900;\"><strong><span style=\"background-color:#fe2c24;\">主要是防止声明和定义万一给不同的缺省值会出错，一般我们在声明中写，不在定义中写</span></strong></span></p>\n<p><img alt=\"\" height=\"651\" src=\"..\\..\\static\\image\\82d5dcaa60e140db9a362cb6390bf77b.png\" width=\"1200\"/></p>\n<p></p>\n</blockquote>\n<h1 id=\"%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%E6%A6%82%E5%BF%B5%EF%BC%9A\"><span style=\"color:#ffd900;\">函数重载概念：</span></h1>\n<blockquote>\n<p>函数重载：是函数的一种特殊情况，C++允许在同一作用域中声明几个功能类似的同名函数，这些同名函数的形参列表(参数个数 或 类型 或 类型顺序)不同，常用来处理实现功能类似数据类型不同的问题。</p>\n<p><br/> 简单来说就是多个函数使用一个名字，其中函数参数的个数和类型不同或者是不同类型参数的顺序不同（返回值不同不构成函数重载）。</p>\n</blockquote>\n<h3 id=\"%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%E5%AE%9E%E4%BE%8B%EF%BC%9A\"><span style=\"color:#a2e043;\">函数重载实例：</span></h3>\n<blockquote>\n<p>根据函数参数的个数，类型，参数的顺序不同，构成函数重载（返回值不同不构成函数重载）：</p>\n<pre><code class=\"language-cpp\">int Add(int a, int b,int c)\n{\n\treturn a + b + c;\n}\n\ndouble Add(double a, double b)\n{\n\treturn a + b;\n}\n\nint Add(double a, int b)\n{\n\treturn a + b;\n}\n\ndouble Add(int a, double b)\n{\n\treturn a + b;\n}\nint main()\n{\n\tstd::cout &lt;&lt; Add(1, 2, 3) &lt;&lt; std::endl;\n\tstd::cout &lt;&lt; Add(1.11, 2.22) &lt;&lt; std::endl;\n\tstd::cout &lt;&lt; Add(3, 3.33) &lt;&lt; std::endl;\n\tstd::cout &lt;&lt; Add(4.44, 4) &lt;&lt; std::endl;\n\n\treturn 0;\n}</code></pre>\n<p><img alt=\"\" height=\"575\" src=\"..\\..\\static\\image\\321c76fd6327431ba8d62ec2015b5bfd.png\" width=\"798\"/></p>\n<p><img alt=\"\" height=\"482\" src=\"..\\..\\static\\image\\85273553684248e291608fdb2a01eb97.png\" width=\"1200\"/></p>\n<p>  </p>\n<p></p>\n<p><span style=\"color:#a2e043;\"><strong>那么如果是加上缺省参数，会影响函数重载吗？</strong></span></p>\n<p><img alt=\"\" height=\"576\" src=\"..\\..\\static\\image\\57715ca1cc844fe28c224917699e81bf.png\" width=\"1200\"/> <strong>只有缺省参数来区分函数参数，是不能够构成函数重载的。</strong><img alt=\"\" height=\"701\" src=\"..\\..\\static\\image\\f8830225341f4eda95faa1d52f3a7827.png\" width=\"1200\"/></p>\n<p></p>\n</blockquote>\n<h1 id=\"%E4%B8%BA%E4%BB%80%E4%B9%88C%2B%2B%E6%94%AF%E6%8C%81%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%EF%BC%8C%E8%80%8CC%E4%B8%8D%E6%94%AF%E6%8C%81%E5%91%A2%EF%BC%9F\"><span style=\"color:#38d8f0;\">为什么C++支持函数重载，而C不支持呢？</span></h1>\n<blockquote>\n<p>我们在Linux平台下进行演示，首先形成可执行程序时我们要经历四个大的步骤，分别是：预处理，编译，汇编，链接，才形成的我们的可执行程序。</p>\n<h3 id=\"%E6%88%91%E4%BB%AC%E8%A6%81%E4%BA%86%E8%A7%A3%E5%85%B7%E4%BD%93%E8%BF%87%E7%A8%8B%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0%E5%A6%82%E4%B8%8B%EF%BC%9Agcc%E5%92%8Cg%2B%2B%E7%9A%84%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%C2%A0\"><span style=\"color:#4da8ee;\">我们要了解具体过程参考文章如下：</span><a class=\"link-info\" href=\"https://blog.csdn.net/m0_64770095/article/details/126050170\" title=\"gcc和g++的编译过程\">gcc和g++的编译过程</a> </h3>\n<p>其中我们在汇编时期我们生成的一个叫做符号表的东西，其中会有函数名，也就是函数第一条指令的地址，我们C语言生成函数名的规则和C++不太一样，<span style=\"color:#956fe7;\"><strong>C++中我们可以通过函数名的长短和参数类型的首字母来进行区分</strong></span>，才能够实现函数重载。</p>\n<p></p>\n<p>下面我们先来演示下：</p>\n<p><img alt=\"\" height=\"397\" src=\"..\\..\\static\\image\\175cbb08bb9740a9b22dddd55f3144b4.png\" width=\"684\"/></p>\n<p>上面只是一个简单的打印函数，我们使用了函数重载，下面我们使用不同的编译器进行编译试试看会发生什么呢？</p>\n<p>  </p>\n<p>gcc编译器：我们发现会报错，说是函数名冲突。</p>\n<p><img alt=\"\" height=\"444\" src=\"..\\..\\static\\image\\fca9546bf55d453b89673695494abd29.png\" width=\"699\"/></p>\n<p>  </p>\n<p>g++正常通过，运行结果正常：</p>\n<p><img alt=\"\" height=\"217\" src=\"..\\..\\static\\image\\d33dcf9a7f2548e6b9fb0dbf36e7d449.png\" width=\"613\"/></p>\n<p></p>\n<p><strong>此时我们能够证明C++支持函数重载而C语言不支持，那么为什么呢？</strong></p>\n<p>我们使用下面的命令可以常看汇编代码，然后我们查看函数名的不同可以区分出来。我们先看下C++的函数名吧：</p>\n<pre><code>objdump -d func </code></pre>\n<p><img alt=\"\" height=\"467\" src=\"..\\..\\static\\image\\9a6b540d46c44658b6fd862c968729cb.png\" width=\"684\"/></p>\n<p></p>\n<p><span style=\"color:#9c8ec1;\"><strong>我们是可以看出C++的函数名是修饰过的，比如函数名后面就是类型的首字母。</strong></span></p>\n<p></p>\n<p>我们再来看看C语言的，为了保证代码编译通过，我们把函数名设置为不同。</p>\n<p><img alt=\"\" height=\"392\" src=\"..\\..\\static\\image\\82cf8df0fa3c42c28fc696f6ca253372.png\" width=\"635\"/></p>\n<p><img alt=\"\" height=\"212\" src=\"..\\..\\static\\image\\d9be44d9563e4e159ec694cd99409d65.png\" width=\"637\"/></p>\n<p><img alt=\"\" height=\"476\" src=\"..\\..\\static\\image\\c7ce73ab2c394f2abe442f66f5e9fad3.png\" width=\"663\"/></p>\n<p>我们先把代码修改过之后，然后我们重新编译通过了，接着我们进行了查看汇编的函数名，发现我们C语言没有所以的函数名之后有参数的类型之分，所以不能支持函数重载。 </p>\n<p></p>\n<p><strong>总结：<span style=\"color:#fe2c24;\"><span style=\"background-color:#ffd900;\">我们C++支持函数重载是因为函数名修饰规则</span></span></strong>，我们在汇编阶段形成的符号表中如果有<span style=\"color:#6eaad7;\"><strong>相同的函数名那么我们的C++是可以进行识别的</strong></span>，而我们的C语言在两个函数名相同的情况下，我们没有函数名修饰规则，不能够区分两个相同的函数名。</p>\n</blockquote>\n<h1 id=\"extern%20%E2%80%9CC%E2%80%9D%E7%9A%84%E7%94%A8%E6%B3%95\"><span style=\"color:#98c091;\">extern “C”的用法</span></h1>\n<blockquote>\n<p><span style=\"color:#e6b223;\"><strong>为什么有extern “C”？</strong></span></p>\n<p>由于C和C++编译器对函数名字修饰规则的不同，在有些场景下可能就会出问题，比如：<br/> 1. C++中调用C语言实现的静态库或者动态库，反之亦然<br/> 2. 多人协同开发时，有些人擅长用C语言，有些人擅长用C++</p>\n<p>在这种混合模式下开发，由于C和C++编译器对函数名字修饰规则不同，可能就会导致链接失败，在该种场景下，就需要使用extern \"C\"。</p>\n<p></p>\n<p><span style=\"color:#faa572;\"><strong>extern “C”是什么？</strong></span></p>\n<p><strong>在函数前加extern \"C\"，意思是告诉编译器，将该函数按照C语言规则来编译。</strong></p>\n<p></p>\n<p>下面我们在VS下使用这个extern “C”，我们分别形成一个C语言的静态库，让C++进行调用，在形成一个C++的静态库，让C语言来进行调用。</p>\n<p></p>\n<h3 id=\"%E5%85%B3%E4%BA%8E%E5%8A%A8%E9%9D%99%E6%80%81%E5%BA%93%E7%9A%84%E6%A6%82%E5%BF%B5%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0%EF%BC%9A%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%92%8C%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5\"><span style=\"color:#ed7976;\">关于动静态库的概念参考文章：</span><a class=\"link-info\" href=\"https://blog.csdn.net/m0_64770095/article/details/126050170\" title=\"动态链接和静态链接\">动态链接和静态链接</a></h3>\n<p></p>\n<h3 id=\"C%2B%2B%E7%A8%8B%E5%BA%8F%E8%B0%83%E7%94%A8C%E8%AF%AD%E8%A8%80%E5%BD%A2%E6%88%90%E7%9A%84%E9%9D%99%E6%80%81%E5%BA%93%EF%BC%9A\"><span style=\"color:#b95514;\">C++程序调用C语言形成的静态库：</span></h3>\n<p>我们使用<a href=\"https://leetcode.cn/problems/valid-parentheses/\" title=\"20. 有效的括号\">20. 有效的括号</a> LeetCode这道题目进行演示。我们先创建一个C的静态库，库中包含我们的栈的实现和声明。然后我们使用C++程序编写这道题目，其中我们不在C++程序中再写 栈的实现，我们要使用静态库进行链接。达到<span style=\"color:#be191c;\"><strong>一个程序只负责使用函数的接口，剩下的函数实现的全部由静态库实现</strong></span>。</p>\n<p><img alt=\"\" height=\"516\" src=\"..\\..\\static\\image\\2968a941d9034277afe349708f1b5e32.png\" width=\"910\"/></p>\n<p><img alt=\"\" height=\"620\" src=\"..\\..\\static\\image\\ef1dbab80de14100a9164e73c9bf115d.png\" width=\"944\"/></p>\n<p><img alt=\"\" height=\"598\" src=\"..\\..\\static\\image\\c207989b641a4882b11d3c47dadb8e44.png\" width=\"962\"/></p>\n<p> <img alt=\"\" height=\"210\" src=\"..\\..\\static\\image\\eb95114c53d84f7b9df996ef8aab8877.png\" width=\"769\"/></p>\n<p><img alt=\"\" height=\"620\" src=\"..\\..\\static\\image\\56c6c20b5e97408d8d066220cd44c388.png\" width=\"944\"/> 到这里我们就完成了C语言静态库的生成，下面我们编写C++程序让他来调用这个静态库即可。下面是主函数的部分和一个函数。在函数中我们使用了栈的一些函数接口，我们要是用静态库的方式把函数的实现和函数的接口链接起来，进而完成程序。</p>\n<p><img alt=\"\" height=\"319\" src=\"..\\..\\static\\image\\281eb0a5c3fa474eb214555fe5117c2b.png\" width=\"590\"/></p>\n<p><span style=\"color:#ad720d;\"><strong>我们先包含头文件。我们采用相对路径的方式包含。</strong></span></p>\n<p><img alt=\"\" height=\"585\" src=\"..\\..\\static\\image\\7423e3facfcd4cdb99f682e261653168.png\" width=\"749\"/></p>\n<p><img alt=\"\" height=\"162\" src=\"..\\..\\static\\image\\3be82e687bc34e0aaca870b817b5be51.png\" width=\"409\"/> </p>\n<p>其中 .. 表示返回上级目录  其中 / 表示我们在这个目录下。</p>\n<p></p>\n<p><span style=\"color:#1c7331;\"><strong>接着我们还要修改链接器：</strong></span></p>\n<p><img alt=\"\" height=\"598\" src=\"..\\..\\static\\image\\a9fe4e5c7f694a42ba928e28c282813d.png\" width=\"962\"/></p>\n<p><img alt=\"\" height=\"598\" src=\"..\\..\\static\\image\\2882e0d1a6884aef90eae8e6b5ddf033.png\" width=\"962\"/> </p>\n<p> </p>\n<p><span style=\"color:#1a439c;\"><strong>最后我们会发现还是链接错误，为什么呢？</strong></span></p>\n<p>因为我们的静态库是C语言编译器生成的，但是我们的程序是C++的，在链接阶段会出现符号表不相同，其中的函数名修饰规则等等不一样，所以我们链接不上，怎么解决呢？我们要在编译阶段就要告诉我们C++的程序，要按照C语言的标准来进行编译头文件等等.. 这时我们就要使用extern “C”了。我们在头文件上包含extern “C”就可以解决啦。最后我们还要<span style=\"color:#1c7892;\"><strong>先清理解决方案，然后在重新生成</strong></span>就可以运行啦。</p>\n<p><img alt=\"\" height=\"126\" src=\"..\\..\\static\\image\\dfcb26267a594c0ea3f03c3b45b5ed07.png\" width=\"472\"/></p>\n<p><img alt=\"\" height=\"175\" src=\"..\\..\\static\\image\\51272a9eac384ea5949186b38f4477f6.png\" width=\"591\"/></p>\n<p><img alt=\"\" height=\"160\" src=\"..\\..\\static\\image\\3c718fe5b86941e4ba271b0f16c20385.png\" width=\"702\"/></p>\n<p> <img alt=\"\" height=\"194\" src=\"..\\..\\static\\image\\af2ae57217e74f538a7197763a005786.png\" width=\"607\"/></p>\n<p> </p>\n<p> </p>\n<h3 id=\"%C2%A0C%E7%A8%8B%E5%BA%8F%E8%B0%83%E7%94%A8C%2B%2B%E7%9A%84%E9%9D%99%E6%80%81%E5%BA%93%EF%BC%9A\"><span style=\"color:#511b78;\"> C程序调用C++的静态库：</span></h3>\n<p><strong>同样的我们还是要生成静态库，此时我们生成的是C++的静态库。但是我们最后要让C语言进行调用的，所以我们即要形成C++的静态库，又要让C语言进行识别，我们要采用条件编译，如果是C++的程序那么就使用即可，如果是C语言的程序，那么我们在预处理时就要知道我们要安装C语言的规则来进行编译。我们对函数的声明进行extern “C”，就可以做到。</strong></p>\n<p><img alt=\"\" height=\"188\" src=\"..\\..\\static\\image\\0d022a8f4d544b9690f5bb9e204d491c.png\" width=\"275\"/></p>\n<p><img alt=\"\" height=\"380\" src=\"..\\..\\static\\image\\b6babd82fe22471892658fa9c835f9e5.png\" width=\"663\"/></p>\n<p> </p>\n<p><img alt=\"\" height=\"153\" src=\"..\\..\\static\\image\\3bdbbbbe58ce4a7ca8fffa6d9ea462eb.png\" width=\"757\"/></p>\n<p><img alt=\"\" height=\"226\" src=\"..\\..\\static\\image\\6ca32dac470e4b409e010025b389501f.png\" width=\"539\"/> </p>\n<p> </p>\n<p><strong>最后我们让C语言进行调用即可。</strong></p>\n<p><img alt=\"\" height=\"514\" src=\"..\\..\\static\\image\\e6f3e23c675f48139e35a8a6af967a51.png\" width=\"822\"/></p>\n<p>  </p>\n<p> </p>\n<p><strong>总结来说：<span style=\"color:#fe2c24;\"><span style=\"background-color:#ffd900;\">其中C++编译器是可以区分C语言和C++的不同规则</span></span>，原因是因为C++要兼容C语言，但是C语言编译器不知道C++的一些规则，所以我们一般要让C++调用C的库，或者C调用C++的库，都是要改动C++的东西才行，<span style=\"color:#ffd900;\"><span style=\"background-color:#fe2c24;\">因为C语言不认识这个extern “C”。</span></span></strong></p>\n</blockquote>\n<p><strong><span style=\"background-color:#38d8f0;\">今天就到这结束啦！</span></strong></p>\n<p></p>\n</div>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-09 16:51:13", "summary": "个人主页：欢迎大家光临沙漠下的胡杨沙漠下的胡杨各位大帅哥，大漂亮如果觉得文章对自己有帮助可以一键三连支持博主你的每一分关心都是我坚持的动力：本期重点：缺省参数和函数重载希望大家每天都心情愉悦的学习工作"}