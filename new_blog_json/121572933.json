{"blogid": "121572933", "writerAge": "码龄3年", "writerBlogNum": "2", "writerCollect": "255", "writerComment": "1", "writerFan": "9", "writerGrade": "1级", "writerIntegral": "45", "writerName": "小凌Candy", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_121572933.jpg", "writerRankTotal": "278187", "writerRankWeekly": "1073076", "writerThumb": "21", "writerVisitNum": "11292", "blog_read_count": "10578", "blog_time": "于 2021-11-27 10:18:49 发布", "blog_title": "神经网络——Python实现BP神经网络算法（理论+例子+程序）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1 id=\"%E5%9F%BA%E4%BA%8EBP%E7%AE%97%E6%B3%95%E7%9A%84%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E5%99%A8%E6%A8%A1%E5%9E%8B\">一、基于BP算法的多层感知器模型</h1>\n<p>采用BP算法的多层感知器是至今为止应用最广泛的神经网络，在多层感知器的应用中，以图3-15所示的单隐层网络的应用最为普遍。一般习惯将单隐层前馈网称为三层感知器，所谓三层包括了输入层、隐层和输出层。</p>\n<p style=\"text-align:center;\"><a href=\"https://blog.ling08.cn/usr/uploads/2021/10/702549416.png\"><img alt=\"神经网络——Python实现BP神经网络算法\" src=\"..\\..\\static\\image\\ccf3ad15226793b8a921f60efb4ffb35.png\"/></a></p>\n<p style=\"text-align:center;\"><a href=\"https://blog.ling08.cn/usr/uploads/2021/10/339779279.png\"><img alt=\"神经网络——Python实现BP神经网络算法\" src=\"..\\..\\static\\image\\ce5dc92037da0eb09a2de03279fa5f0b.png\"/></a></p>\n<p>算法最终结果采用梯度下降法，具体详细过程此处就省略了！</p>\n<p></p>\n<h1 id=\"BP%E7%AE%97%E6%B3%95%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B\">二、BP算法的程序实现流程</h1>\n<p style=\"text-align:center;\"><a href=\"https://blog.ling08.cn/usr/uploads/2021/10/1288439773.png\"><img alt=\"神经网络——Python实现BP神经网络算法\" src=\"..\\..\\static\\image\\0eb1293ea048be5f3a8df48815284c66.png\"/></a></p>\n<h1 id=\"%E6%A0%87%E5%87%86P%E7%AE%97%E6%B3%95%E7%9A%84%E6%94%B9%E8%BF%9B%E2%80%94%E2%80%94%E5%A2%9E%E5%8A%A0%E5%8A%A8%E9%87%8F%E9%A1%B9\">三、标准BP算法的改进——增加动量项</h1>\n<p>标准BP算法在调整权值时，只按t时刻误差的梯度降方向调整，而没有考虑t时刻以前的梯度方向，从而常使训练过程发生振荡，收敛缓慢。为了提高网络的训练速度，可以在权值调整公式中增加一动量项。若用W代表某层权矩阵，X代表某层输入向量，则含有动量项的权值调整向量表达式为</p>\n<p style=\"text-align:center;\"><a href=\"https://blog.ling08.cn/usr/uploads/2021/10/1333204174.png\"><img alt=\"神经网络——Python实现BP神经网络算法\" src=\"..\\..\\static\\image\\f89955a52d0b785fbe416676fd186911.png\"/></a></p>\n<p>可以看出，增加动量项即从前一次权值调整量中取出一部分迭加到本次权值调整量中，α称为动量系数，一般有a∈ (0，1)。动量项反映了以前积累的调整经验，对于t时刻的调整起阻尼作用。当误差曲面出现骤然起伏时，可减小振荡趋势，提高训练速度。目前，BP算法中都增加了动量项，以致于有动量项的BP算法成为一种新的标准算法。</p>\n<p></p>\n<h1 id=\"Python%E5%AE%9E%E7%8E%B0BP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%8F%8A%E5%85%B6%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95\">四、Python实现BP神经网络及其学习算法</h1>\n<p>这里为了运用算法，简要的举了一个例子（不需归一化或标准化的例子）</p>\n<blockquote>\n<p>输入 X=-1:0.1:1;<br/> 输出 D=.....（具体查看代码里面的数据）</p>\n</blockquote>\n<p>为了便于查看结果我们输出把结果绘制为图形，如下：</p>\n<p style=\"text-align:center;\"><a href=\"https://blog.ling08.cn/usr/uploads/2021/10/3820482073.png\"><img alt=\"神经网络——Python实现BP神经网络算法\" src=\"..\\..\\static\\image\\dcc63b98f755705a5e713e408cbf0524.png\"/></a></p>\n<p>其中黄线和蓝线代表着训练完成后的输出与输入</p>\n<h1>五、程序如下：</h1>\n<pre><code class=\"language-python\"># -*- coding: utf-8 -*-\nimport math\nimport string\nimport matplotlib as mpl\n############################################调用库（根据自己编程情况修改）\nimport numpy.matlib \nimport numpy as np\nnp.seterr(divide='ignore',invalid='ignore')\nimport matplotlib.pyplot as plt\nfrom matplotlib import font_manager\nimport pandas as pd\nimport random\n\n#生成区间[a,b]内的随机数\ndef random_number(a,b):\n    return (b-a)*random.random()+a\n \n#生成一个矩阵，大小为m*n,并且设置默认零矩阵\ndef makematrix(m, n, fill=0.0):\n    a = []\n    for i in range(m):\n        a.append([fill]*n)\n    return np.array(a)\n \n#函数sigmoid(),两个函数都可以作为激活函数\ndef sigmoid(x):\n    #return np.tanh(x)\n    return (1-np.exp(-1*x))/(1+np.exp(-1*x))\n#函数sigmoid的派生函数\ndef derived_sigmoid(x):\n    return 1-(np.tanh(x))**2\n    #return (2*np.exp((-1)*x)/((1+np.exp(-1*x)**2)))\n\n#构造三层BP网络架构\nclass BPNN:\n    def __init__(self, num_in, num_hidden, num_out):\n        #输入层，隐藏层，输出层的节点数\n        self.num_in = num_in + 1  #增加一个偏置结点\n        self.num_hidden = num_hidden + 1   #增加一个偏置结点\n        self.num_out = num_out\n        \n        #激活神经网络的所有节点（向量）\n        self.active_in = np.array([-1.0]*self.num_in)\n        self.active_hidden = np.array([-1.0]*self.num_hidden)\n        self.active_out = np.array([1.0]*self.num_out)\n        \n        #创建权重矩阵\n        self.wight_in = makematrix(self.num_in, self.num_hidden)\n        self.wight_out = makematrix(self.num_hidden, self.num_out)\n        \n        #对权值矩阵赋初值\n        for i in range(self.num_in):\n            for j in range(self.num_hidden):\n                self.wight_in[i][j] = random_number(0.1, 0.1)\n        for i in range(self.num_hidden):\n            for j in range(self.num_out):\n                self.wight_out[i][j] = random_number(0.1, 0.1)\n        #偏差\n        for j in range(self.num_hidden):\n            self.wight_in[0][j] = 0.1\n        for j in range(self.num_out):\n            self.wight_in[0][j] = 0.1\n\n    \n        #最后建立动量因子（矩阵）\n        self.ci = makematrix(self.num_in, self.num_hidden)\n        self.co = makematrix(self.num_hidden, self.num_out)      \n        \n\n    #信号正向传播\n    def update(self, inputs):\n        if len(inputs) != self.num_in-1:\n            raise ValueError('与输入层节点数不符')\n        #数据输入输入层\n        self.active_in[1:self.num_in]=inputs\n        \n        #数据在隐藏层的处理\n        self.sum_hidden=np.dot(self.wight_in.T,self.active_in.reshape(-1,1)) #点乘\n        self.active_hidden=sigmoid(self.sum_hidden)   #active_hidden[]是处理完输入数据之后存储，作为输出层的输入数据\n        self.active_hidden[0]=-1\n            \n        #数据在输出层的处理\n        self.sum_out=np.dot(self.wight_out.T,self.active_hidden) #点乘\n        self.active_out = sigmoid(self.sum_out)   #与上同理\n        return self.active_out\n\n \n    #误差反向传播\n    def errorbackpropagate(self, targets, lr,m):   #lr是学习率\n        if self.num_out==1:\n            targets=[targets]\n        if len(targets) != self.num_out:\n            raise ValueError('与输出层节点数不符！')\n        #误差\n        error=(1/2)*np.dot((targets.reshape(-1,1)-self.active_out).T,(targets.reshape(-1,1)-self.active_out))\n        \n        #输出误差信号\n        self.error_out=(targets.reshape(-1,1)-self.active_out)*derived_sigmoid(self.sum_out)\n        #隐层误差信号\n        #self.error_hidden=np.dot(self.wight_out.reshape(-1,1),self.error_out.reshape(-1,1))*self.active_hidden*(1-self.active_hidden)\n        self.error_hidden=np.dot(self.wight_out,self.error_out)*derived_sigmoid(self.sum_hidden)\n\n        #更新权值\n        #隐藏\n        self.wight_out=self.wight_out+lr*np.dot(self.error_out,self.active_hidden.reshape(1,-1)).T+m*self.co\n        self.co=lr*np.dot(self.error_out,self.active_hidden.reshape(1,-1)).T\n        #输入\n        self.wight_in=self.wight_in+lr*np.dot(self.error_hidden,self.active_in.reshape(1,-1)).T+m*self.ci\n        self.ci=lr*np.dot(self.error_hidden,self.active_in.reshape(1,-1)).T\n        return error\n\n    #测试\n    def test(self, patterns):\n        for i in patterns:\n            print(i[0:self.num_in-1], '-&gt;', self.update(i[0:self.num_in-1]))\n        return self.update(i[0:self.num_in-1])\n\n    #权值\n    def weights(self):\n        print(\"输入层权重\")\n        print(self.wight_in)\n        print(\"输出层权重\")\n        print(self.wight_out)\n            \n    def train(self, pattern, itera=100, lr = 0.2, m=0.1):\n        for i in range(itera):\n            error = 0.0\n            for j in pattern:\n                inputs = j[0:self.num_in-1]\n                targets = j[self.num_in-1:]\n                self.update(inputs)\n                error = error+self.errorbackpropagate(targets, lr,m)\n            if i % 10 == 0:\n                print('########################误差 %-.5f######################第%d次迭代' %(error,i))\n\n#实例\nX=list(np.arange(-1,1.1,0.1))\nD=[-0.96, -0.577, -0.0729, 0.017, -0.641, -0.66, -0.11, 0.1336, -0.201, -0.434, -0.5, -0.393, -0.1647, 0.0988, 0.3072, 0.396, 0.3449, 0.1816, -0.0312, -0.2183, -0.3201]\nA=X+D\npatt=np.array([A]*2)\n    #创建神经网络，21个输入节点，21个隐藏层节点，1个输出层节点\nn = BPNN(21, 21, 21)\n    #训练神经网络\nn.train(patt)\n    #测试神经网络\nd=n.test(patt)\n    #查阅权重值\nn.weights() \n\nplt.plot(X,D)\nplt.plot(X,d)\nplt.show()</code></pre>\n<hr/>\n<p>来源：<a href=\"https://www.baidu.com/link?url=umgkXwankJod6YoXRPKy7zzhdU2SFxrRmOVX4RPIFcKGPpCdSUNheE_Zm65cX8Bw&amp;wd=&amp;eqid=a9fa29720000f2780000000361a18f24\" title=\"小凌のBlog—Good Times|一个不咋地的博客\">小凌のBlog—Good Times|一个不咋地的博客</a></p>\n<p>[1]   韩力群，人工神经网络理论及应用 [M]. 北京：机械工业出版社，2016.</p>\n</div>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-11-27 10:18:49", "summary": "一、基于算法的多层感知器模型采用算法的多层感知器是至今为止应用最广泛的神经网络，在多层感知器的应用中，以图所示的单隐层网络的应用最为普遍。一般习惯将单隐层前馈网称为三层感知器，所谓三层包括了输入层、隐"}