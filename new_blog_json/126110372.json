{"blogid": "126110372", "writerAge": "码龄2年", "writerBlogNum": "93", "writerCollect": "5031", "writerComment": "5454", "writerFan": "4922", "writerGrade": "7级", "writerIntegral": "13521", "writerName": "一名不会打字的程序员", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126110372.jpg", "writerRankTotal": "786", "writerRankWeekly": "73", "writerThumb": "5255", "writerVisitNum": "78819", "blog_read_count": "2556", "blog_time": "于 2022-08-02 10:14:41 发布", "blog_title": "Java工程师必看指南的【4种引用】", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/f7f5e8f696074d79bb7c7cfaab2ea5d2.gif#pic_center\"/></p>\n<blockquote>\n<p>📢作者简介：物联网领域创作者，🏅阿里专家博主🏅 🏅华为云享专家🏅<br/> ✒️个人主页：<a href=\"https://blog.csdn.net/weixin_51568389?spm=1011.2435.3001.5343\">Choice~</a><br/> 🌐格言：可正因为难，才有价值！🔶<br/> 💬给大家介绍一个我一直在用的求职刷题收割offe👉<a href=\"https://www.nowcoder.com/link/pc_csdncpt_choice_c\">点击进入</a><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4e33e634f07c4343b5ac38557f337478.png\"/></p>\n</blockquote>\n<blockquote>\n<p>🏫系列专栏：<br/> 1️⃣ <a href=\"https://blog.csdn.net/weixin_51568389/category_11849487.html\">C/C++</a><br/> 2️⃣ <a href=\"https://blog.csdn.net/weixin_51568389/category_11830402.html\">C和指针</a><br/> 3️⃣ <a href=\"https://blog.csdn.net/weixin_51568389/category_11846393.html\">Linux</a><br/> 4️⃣ <a href=\"https://blog.csdn.net/weixin_51568389/category_11816257.html\">数据结构与算法</a><br/> 5️⃣ <a href=\"https://blog.csdn.net/weixin_51568389/category_11865484.html\">JavaScript从入门到精通</a><br/> 6️⃣ <a href=\"https://blog.csdn.net/weixin_51568389/category_11855792.html\">101算法JavaScript描述💰</a></p>\n</blockquote>\n<h2><a id=\"_16\"></a>介绍</h2>\n<p>JAVA 中有 4 种类型的引用：<br/> – <strong>强引用</strong><br/> – <strong>软引用</strong><br/> – <strong>弱引用</strong><br/> – <strong>幻像引用</strong></p>\n<p>这些引用的区别仅在于<strong>垃圾回收器</strong>管理它们的方式。如果你从未听说过它们，这意味着你只使用强大的。了解差异可以帮助您，特别是如果您需要存储临时对象并且无法使用真正的缓存库（如eHcache或Guava）。</p>\n<p>由于这些类型与 JVM 垃圾回收器密切相关，因此我将简要回顾一下有关 JAVA 中垃圾回收的一些信息，然后介绍不同的类型。</p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#_16\">介绍</a></li><li><a href=\"#_29\">垃圾回收器</a></li><li><a href=\"#_58\">问题</a></li><li><a href=\"#_94\">强引用</a></li><li><a href=\"#_108\">软引用</a></li><li><a href=\"#_257\">弱引用</a></li><li><a href=\"#_296\">幻像引用</a></li><li><a href=\"#_308\">结论</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"_29\"></a>垃圾回收器</h2>\n<p>Java和C++之间的主要区别在于<strong>内存管理</strong>。在Java中，开发人员不需要知道内存是如何工作的（但他应该知道！），因为JVM通过其垃圾回收器来处理这一部分。</p>\n<p>创建对象时，它由 JVM 在其<strong>堆</strong>中分配。堆是内存中的有限空间量。因此，JVM 通常需要删除对象才能释放空间。要销毁对象，JVM 需要知道此对象是处于活动状态还是非活动状态。如果对象被<strong>垃圾回收root</strong>引用（传递），则该对象仍在使用中。</p>\n<p>例如：</p>\n<ul><li>如果对象 C 由对象 B 引用，B 由对象 A 引用，A 由<em>垃圾回收root</em>引用，则 C、B 和 A 被视为活动（情况 1）。</li><li>但是，如果 A 不再引用 B，则 C 和 B 不再处于活动状态，可以销毁（案例 2）。</li></ul>\n<p><a href=\"http://coding-geek.com/wp-content/uploads/2015/02/JVM.png\"><img alt=\"JVM\" src=\"..\\..\\static\\image\\6fffc9ed9b4fe829cfc6bf48ca359d99.png\"/></a></p>\n<p>由于这篇文章不是关于垃圾收集器的，我不会在解释中深入介绍，但仅供参考，有4种类型的垃圾收集root：</p>\n<ol><li><strong>局部变量</strong></li><li><strong>活动 Java 线程</strong></li><li><strong>静态变量</strong></li><li><strong>JNI 引用</strong>，这些 Java 对象包含本机代码，而不是由 jvm 管理的内存</li></ol>\n<p>Oracle 没有指定如何管理内存，因此每个 JVM 实现都有自己的一组算法。但这个想法总是一样的：<br/> - JVM使用一种递归算法来查找非活动对象并标记它们<br/> - 标记的对象被最终确定（调用finize（）方法）然后销毁<br/> - JVM有时会移动剩余对象的一部分，以便在堆中重建大面积的自由连续空间</p>\n<h2><a id=\"_58\"></a>问题</h2>\n<p>如果JVM管理内存，你为什么需要关心？因为这并不意味着你不能有<strong>内存泄漏</strong>！</p>\n<p>大多数情况下，您在没有意识到的情况下使用垃圾回收根目录。例如，假设您需要在程序的生命周期内存储一些 objet（因为它们的初始化成本很高）。您可能会使用静态整理（List、Map 等）来存储和检索代码中任何位置的这些对象：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> myStoredObjects<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>但是，通过这样做，可以防止 JVM 破坏集合中的对象。通过错误，你可能会和一个<strong>超出记忆</strong>的错误。例如：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> OOM <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> myCachedObjects <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100_000_000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            myCachedObjects<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出为：</p>\n<blockquote>\n<p>线程“main” java.lang.OutOfMemoryError中的异常：Java heap space</p>\n</blockquote>\n<p>Java提供了不同类型的引用来避免OutOfMemoryError。</p>\n<p>某些类型允许 JVM 释放对象，即使程序仍然需要这些对象。开发人员有责任处理这些情况。</p>\n<h2><a id=\"_94\"></a>强引用</h2>\n<p>强参考是标准参考。当你在对象 obj 上创建这样的内容时：</p>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">MyClass</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>您正在创建一个名为“obj”的强引用，该引用指向新创建的 MyClass 实例。当垃圾回收器查找非活动对象时，它只检查 objets 是否<strong>强可访问</strong>，这意味着通过强引用传递链接到垃圾回收根。</p>\n<p>使用此类型的引用会强制 JVM 将对象保留在堆中，直到未按照“垃圾回收器”一节中所述使用对象为止。</p>\n<h2><a id=\"_108\"></a>软引用</h2>\n<p>根据java API的软参考有：</p>\n<blockquote>\n<p><em>“软引用对象，由垃圾回收器自行决定清除，以响应内存需求”</em></p>\n</blockquote>\n<p>这意味着，如果您在不同的JVM上运行程序，软引用的行为可能会改变（Oracle的Hotspot，Oracle的JRockit，IBM的J9等）。</p>\n<p>让我们来看看Oracle的JVM Hotspot（标准和最常用的JVM），看看它如何管理软引用。根据甲骨文文档：</p>\n<blockquote>\n<p><em>“默认值为每兆字节 1000 毫秒，这意味着对于堆中每 MB 的可用空间，软引用将存活 1 秒（在收集了对对象的最后一个强引用之后）”</em></p>\n</blockquote>\n<p>下面是一个具体示例：让我们假设堆是 512 MB，有 400MB 可用。</p>\n<p>我们创建一个对象 <strong>A</strong>，软引用对象<strong>缓存</strong>，强引用 <strong>A</strong> 到对象 <strong>B</strong>。由于 <strong>A</strong> 强烈引用 <strong>B</strong>，因此它非常可访问，并且不会被垃圾回收器删除（情况 1）。</p>\n<p>想象一下，现在 <strong>B</strong> 已被删除，因此 <strong>A</strong> 仅被软引用到<strong>缓存</strong>对象。如果对象 <strong>A</strong> 在接下来的 400 秒内未被强烈引用，则会在超时后将其删除（情况 2）。</p>\n<p><a href=\"http://coding-geek.com/wp-content/uploads/2015/02/soft_ref1.png\"><img alt=\"soft_ref1\" src=\"..\\..\\static\\image\\5420e49e9b1ec8b27e2215ab521e859d.png\"/></a></p>\n<p>以下是操作软引用的方法：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleSoftRef</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">{<!-- --></span>\n \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">A</span> strongRef<span class=\"token punctuation\">;</span>\n \n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setStrongRef</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span> ref<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>strongRef <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SoftReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">&gt;</span></span> cache<span class=\"token punctuation\">;</span>\n \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//用软instanceA的引用的缓存的初始化</span>\n        <span class=\"token class-name\">ExampleSoftRef<span class=\"token punctuation\">.</span>A</span> instanceA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExampleSoftRef<span class=\"token punctuation\">.</span>A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SoftReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ExampleSoftRef<span class=\"token punctuation\">.</span>A</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>instanceA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        instanceA<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 现在instanceA是只软可到达的且可以在一段时间后，由垃圾回收器删除</span>\n        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token class-name\">ExampleSoftRef<span class=\"token punctuation\">.</span>B</span> instanceB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExampleSoftRef<span class=\"token punctuation\">.</span>B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//从缓存具有软引用的实例后，我们不能肯定instanceA仍然存在</span>\n        <span class=\"token comment\">//如果需要，我们需要检查并重新创建instanceA</span>\n        instanceA<span class=\"token operator\">=</span>cache<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instanceA <span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            instanceA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExampleSoftRef<span class=\"token punctuation\">.</span>A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            cache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SoftReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ExampleSoftRef<span class=\"token punctuation\">.</span>A</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>instanceA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        instanceB<span class=\"token punctuation\">.</span><span class=\"token function\">setStrongRef</span><span class=\"token punctuation\">(</span>instanceA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        instanceA<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// instanceA现在只是轻轻地由缓存引用和强烈引用，所以它不能是clea</span>\n \n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>但是，即使垃圾回收器自动删除了软引用对象，<strong>软引用</strong>（也是对象）**也不会被删除！**因此，您仍然需要清除它们。例如，对于像 64 MB （Xmx64m） 这样的低堆大小，下面的代码给出了一个 OutOfMemoryException，尽管使用了软引用。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestSoftReference1</span> <span class=\"token punctuation\">{<!-- --></span>\n \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBigObject</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//each instance has 128 bytes of data</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> CACHE_INITIAL_CAPACITY <span class=\"token operator\">=</span> <span class=\"token number\">1_000_000</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SoftReference</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyBigObject</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> cache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>CACHE_INITIAL_CAPACITY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1_000_000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">MyBigObject</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyBigObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            cache<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SoftReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">200_000</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"size of cache:\"</span> <span class=\"token operator\">+</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"End\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出代码为：</p>\n<blockquote>\n<p>缓存大小：1<br/> 缓存大小：200001<br/> 缓存大小：400001<br/> 缓存大小：600001<br/> 线程“主”中的异常 java.lang.OutOfMemoryError： 超出 GC 开销限制</p>\n</blockquote>\n<p>Oracle 提供了一个 <strong>ReferenceQueue</strong>，当引用的对象只能软访问时，该队列会填充软引用。使用此队列，您可以清除软引用并避免超出内存错误。</p>\n<p>使用 ReferenceQueue，与上面相同的代码具有相同的堆大小（64 MB），但要存储的数据更多（500 万对 100 万），可以工作：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestSoftReference2</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> removedSoftRefs <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBigObject</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//each instance has 128 bytes of data</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> CACHE_INITIAL_CAPACITY <span class=\"token operator\">=</span> <span class=\"token number\">1_000_000</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SoftReference</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyBigObject</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> cache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>\n            CACHE_INITIAL_CAPACITY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ReferenceQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyBigObject</span><span class=\"token punctuation\">&gt;</span></span> unusedRefToDelete <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReferenceQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5_000_000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">MyBigObject</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyBigObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            cache<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SoftReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> unusedRefToDelete<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">clearUselessReferences</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"End, removed soft references=\"</span> <span class=\"token operator\">+</span> removedSoftRefs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">clearUselessReferences</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Reference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">MyBigObject</span><span class=\"token punctuation\">&gt;</span></span> ref <span class=\"token operator\">=</span> unusedRefToDelete<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ref <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                removedSoftRefs<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            ref <span class=\"token operator\">=</span> unusedRefToDelete<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出为：</p>\n<blockquote>\n<p>结束，删除的软引用 = 4976899</p>\n</blockquote>\n<p>当您需要存储许多对象时，软引用非常有用，如果这些对象被 JVM 删除，这些对象可能会（代价高昂）地重新实例化。</p>\n<h2><a id=\"_257\"></a>弱引用</h2>\n<p>弱参考是一个比软参考更易失性的概念。根据JAVA API：</p>\n<blockquote>\n<p><em>“假设垃圾回收器在某个时间点确定某个对象是弱可访问的。届时，它将原子清除对该对象的所有弱引用，以及对任何其他弱可访问对象的所有弱引用，该对象可通过强引用和软引用链访问。同时，它将声明所有以前弱可访问的对象都是可最终确定的。在同一时间或稍后的某个时间，它将把那些新清除的弱引用排入参考队列。</em></p>\n</blockquote>\n<p>这意味着，当垃圾回收器检查所有对象时，如果它检测到的对象仅具有对垃圾回收根的弱引用（即没有链接到该对象的强引用或软引用），则该对象将被标记为删除并尽快删除。使用弱引用的方式与使用软引用完全相同。因此，请看部分“软引用”中的示例。</p>\n<p>Oracle提供了一个基于弱引用的非常有趣的类：WeakHashMap。此映射具有具有弱引用键的特殊性。WeakHashMap可以用作标准Map。唯一的区别是，它将在从堆中销毁密钥后<strong>自动清除：</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleWeakHashMap</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> cache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Integer</span> i5 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>i5<span class=\"token punctuation\">,</span> <span class=\"token string\">\"five\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        i5<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//输入{5，\"five\"}将留在地图，直到下一个垃圾回收器调用</span>\n \n        <span class=\"token class-name\">Integer</span> i2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//输入{2，\"two\"}将留在地图，直到i2强引用</span>\n        cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>i2<span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token comment\">//remebmber内存溢出错误在第二章\"problem\"，这次不会发生</span>\n        <span class=\"token comment\">//因为Map，将清除它的条目。</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100_000_000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>例如，我使用 WeakHashMap 解决了以下问题：存储事务的多个信息。我使用了这个结构：WeakHashMap&lt;String，Map&lt;K，V&gt;&gt;其中，WeakHashMap的键是一个包含事务Id的字符串，而“简单”Map是我在事务生命周期内需要保留的信息。有了这个结构，我肯定会在WeakHashMap中获取我的信息，因为包含事务ID的字符串在事务结束之前无法销毁，我不必关心清理Map。</p>\n<p>Oracle建议使用WeakHashMap作为“规范化”映射。</p>\n<h2><a id=\"_296\"></a>幻像引用</h2>\n<p>在垃圾回收过程中，没有对垃圾回收根的强/软引用的对象将被删除。在删除之前，将调用方法 finalize（）。当对象最终确定但尚未删除时，它将变为“幻像可访问”，这意味着对象和垃圾回收根之间只有幻像引用。</p>\n<p>与软引用和弱引用不同，对对象使用显式幻像引用可防止删除对象。程序员需要显式或隐式删除幻像引用，以便可以销毁最终确定的对象。要显式清除幻像引用，程序员需要使用 <strong>ReferenceQueue</strong>，该队列在对象最终确定时用幻像引用填充。</p>\n<p>幻像引用无法检索被引用的对象：幻像引用的 get（） 方法始终返回 null，以便程序员无法使幻像可访问对象再次强/软/弱可访问。这是有道理的，因为幻像可访问对象已经完成，因此如果例如覆盖的finize（）函数已清除资源，则它不再起作用。</p>\n<p>我不明白幻像引用如何有用，因为无法访问引用的对象。一个用例可能是，如果您需要在对象最终确定后执行操作，并且您无法（或出于性能原因不想）在此对象的fineize（）方法中执行特定操作。</p>\n<h2><a id=\"_308\"></a>结论</h2>\n<p>我希望您现在对这些参考资料有了更好的了解。大多数情况下，您不需要显式使用它们（也不应该使用它们）。但是，许多框架都在使用它们。如果你想了解事物是如何工作的，那么了解这个概念是件好事。</p>\n<ul><li>如果对大家有帮助，请三连支持一下！</li><li>有问题欢迎评论区留言，及时帮大家解决！</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\44fc08b4428f4092923ca9985b396e50.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 1, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-08-02 10:14:41", "summary": "在这里插入图片描述作者简介：物联网领域创作者，阿里专家博主华为云享专家个人主页：格言：可正因为难，才有价值！给大家介绍一个我一直在用的求职刷题收割点击进入在这里插入图片描述系列专栏：和指针数据结构与算"}