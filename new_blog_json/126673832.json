{"blogid": "126673832", "writerAge": "码龄5年", "writerBlogNum": "210", "writerCollect": "3805", "writerComment": "357", "writerFan": "31832", "writerGrade": "7级", "writerIntegral": "9503", "writerName": "明月几时有666", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126673832.jpg", "writerRankTotal": "1373", "writerRankWeekly": "407", "writerThumb": "1639", "writerVisitNum": "1346060", "blog_read_count": "89", "blog_time": "已于 2022-09-06 09:33:09 修改", "blog_title": "ES6模块", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#_2\">一、为什么需要模块</a></li><li><a href=\"#__28\">二、 模块和模块系统</a></li><li><a href=\"#_55\">三、模块的两种导入和导出</a></li><li><a href=\"#_157\">四、其他注意事项</a></li><li><a href=\"#__179\">五、 总结</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_2\"></a>一、为什么需要模块</h1>\n<p>起初，项目的代码量不大时，常把所有代码写在一个文件中。随着代码量的不断增加，这样做会带来两个问题：一、不利于分工合作；二、不利于后期维护。因此，需要依据代码功能把代码从一个文件拆分到不同的文件。但是，现在又产生一个新的问题，多个文件的变量都位于全局作用域中，很容易产生冲突，为了解决这个问题，就有了模块。</p>\n<p>最初，ES标准中还没有模块和模块系统的支持，只能通过立即执行函数来模拟模块的功能。具体做法是：把不同文件中的代码都放在立即执行函数中，然后把可能会被其他代码使用的变量、函数、类通过全局对象的属性暴露出去。如下代码所示：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\twindow<span class=\"token punctuation\">.</span>Person <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>通过立即执行函数模拟的模块，大大减少了全局变量，但是依然存在不少通过全局对象属性暴露的变量，例如，<code>window.Person = Person;</code>，更大的问题是，我们需要手动管理加载文件的顺序，例如，文件A中的类继承了文件B中的类，那么在HTML文件中，<code>&lt;script src=\"A.js\"&gt;&lt;/script&gt; </code> 必须先于<code>&lt;script src=\"B.js\"&gt;&lt;/script&gt; </code>引入，如果存在大量的复杂的依赖关系，手动管理依赖是非常困难的。这是立即执行函数模拟（实现）模块存在的两个主要问题。</p>\n<p>下文中介绍的ES6中引入的模块和模块系统，会解决立即执行函数模拟模块存在的问题~~</p>\n<h1><a id=\"__28\"></a>二、 模块和模块系统</h1>\n<p>1、 模块<br/> 模块是局部作用域代码块</p>\n<p>在ES6中一个模块本质是一个文件</p>\n<p>2、模块系统</p>\n<p>模块系统主要解决问题：</p>\n<ul><li>模块化</li><li>消除全局变量</li><li>管理加载顺序</li></ul>\n<p>以前，ES还没有提供模块的原生支持时，第三方JS库，例如，RequireJS、SeaJS等实现模块系统的功能。</p>\n<p>在HTML代码中引入一个模块的方式</p>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>比起一般的引入方式，多了一个type属性，属性值module表示以模块的方式引入文件。如果不添加属性\"type=\"module，那么，文件以普通的方式引入，文件中的变量会作为全局变量处理。</p>\n<p>什么时候或场景需要把文件以模块方式引入呢？<br/> 当文件中出现import或export关键字时。</p>\n<h1><a id=\"_55\"></a>三、模块的两种导入和导出</h1>\n<p>一个模块没有导出，也可以导入。只是将模块中的代码执行一遍，没有暴露任何变量</p>\n<p>1、export default 导出和对应的import导入</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> 表达式<span class=\"token punctuation\">;</span> \n</code></pre>\n<p>表达式：基本类型的字面量，变量，函数和类的表达式。函数和类表达式可以匿名。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> str<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>一个模块只能定义一个exprot default，不能导出多个。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>会出现报错：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dd734b7a5f5b49a293a45582e1ff301d.png\"/></p>\n<p>2、exprot导出和对应的improt导入语法</p>\n<p><strong>基本语法</strong></p>\n<blockquote>\n<p>方式一：export 声明语句;<br/> export let/const/var variable = value;<br/> export function foo(){}<br/> exprot class Clz{}<br/> 方式二：先声明后export{变量名}<br/> let variable = value;<br/> exprot {variable};</p>\n</blockquote>\n<p>注意 普通变量、函数和类表达式不能匿名。不能是基本类型值。</p>\n<blockquote>\n<p>import {variable} from XXX.js</p>\n</blockquote>\n<p><strong>导出导入多个</strong></p>\n<p>利用基本语法方式二</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> variable <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span>  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Clz</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 导出多个</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{<!-- --></span>variable<span class=\"token punctuation\">,</span> foo<span class=\"token punctuation\">,</span> Clz<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>导出导入起别名</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token punctuation\">{<!-- --></span>variable <span class=\"token keyword\">as</span> username<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>导入的”角色“的名字和我当前代码冲突，就可以别名</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span>Clz <span class=\"token keyword\">as</span> Person<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>整体导入</strong><br/> 包括export default导出的角色</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> obj <span class=\"token keyword\">from</span> <span class=\"token string\">'module.js'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>同时导入</strong></p>\n<p>import {variable, foo, Clz} from ‘module.js’<br/> import def from ‘module.js’</p>\n<p>export和exprot default可以同时导出，不过export default必须在最前面先导出,<br/> import def, {variable, foo, Clz } from ‘module.js’</p>\n<p>也可以分开导入<br/> import def from ‘module.js’<br/> import {variable, foo, Clz } from ‘module.js’</p>\n<p><strong>想法</strong><br/> export 对标Java中的public<br/> 没有export 对标Java中的private</p>\n<h1><a id=\"_157\"></a>四、其他注意事项</h1>\n<p>1、模块本身作用域中的this指向undefined</p>\n<p>应用，可以在文件首部添加以下代码，来提示用户应该以为模块的方式应用文件</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请以模块方式引入该文件'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>2、 import关键字和import()函数</p>\n<p>import和export 命令会先于其他代码执行，和它所在的位置无关。因此，我们应该把它们放在模块的首部，而不是代码块，例如if代码块中。</p>\n<p>import() 可以实现条件导入，即满足某些条件，例如，是否是PC端、移动端，而导入不同的模块。</p>\n<p>此函数不是标准，只是提案。可以配合webpack解决兼容性问题。</p>\n<p>3、 导入导出的复合写法</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dde7514d5512492ea3aa0ac9859b5871.png\"/></p>\n<h1><a id=\"__179\"></a>五、 总结</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c27e07b2303a4946b949fce5666f1fe6.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e9db12a01600401cbeb13b9fa8657d4f.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6d40884049e84ec5a989f348e3ddf750.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1272fd76ba7d48fd9ded5ea089e5b15b.png\"/><br/> 表达式包括基本类型值字面量或变量，函数、类表达式，可以匿名</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b604d9f3f3b54aabb3c0cd9355ddffaa.png\"/><br/> 声明即变量的声明；语句即表达式，包括变量，函数或者类的声明。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\902da8cba22d4c91a6ec653adae07302.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-09-06 09:33:09", "summary": "目录一、为什么需要模块二、模块和模块系统三、模块的两种导入和导出四、其他注意事项五、总结一、为什么需要模块起初，项目的代码量不大时，常把所有代码写在一个文件中。随着代码量的不断增加，这样做会带来两个问"}