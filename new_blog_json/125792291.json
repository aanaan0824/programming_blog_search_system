{"blogid": "125792291", "writerAge": "码龄3年", "writerBlogNum": "46", "writerCollect": "288", "writerComment": "19", "writerFan": "1362", "writerGrade": "3级", "writerIntegral": "620", "writerName": "supermax2020", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125792291.jpg", "writerRankTotal": "32865", "writerRankWeekly": "40148", "writerThumb": "67", "writerVisitNum": "45641", "blog_read_count": "3469", "blog_time": "于 2022-07-17 14:12:04 发布", "blog_title": "YOLOv5 最详细的源码逐行解读(一)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>所用版本: v6.1</p>\n<p>本文解读detect.py<br/> 源代码地址: <a href=\"https://github.com/ultralytics/yolov5/blob/v6.1/detect.py\">YOLO v5</a></p>\n<h1><a id=\"1__2733_6\"></a>1. 加载系统库 27~33行</h1>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> argparse \n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">from</span> pathlib <span class=\"token keyword\">import</span> Path\n\n<span class=\"token keyword\">import</span> torch\n<span class=\"token keyword\">import</span> torch<span class=\"token punctuation\">.</span>backends<span class=\"token punctuation\">.</span>cudnn <span class=\"token keyword\">as</span> cudnn\n</code></pre>\n<p>首先加载必要的外部库, 在使用时我们再介绍他们的用法</p>\n<h1><a id=\"2__3440_19\"></a>2. 设置系统环境 34~40行</h1>\n<pre><code class=\"prism language-python\">FILE <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># __file__指的是当前文件(即detect.py),FILE最终保存着当前文件的绝对路径,比如D://yolov5/detect.py</span>\nROOT <span class=\"token operator\">=</span> FILE<span class=\"token punctuation\">.</span>parents<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># ROOT保存着当前项目的父目录,比如 D://yolov5</span>\n<span class=\"token keyword\">if</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>ROOT<span class=\"token punctuation\">)</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> sys<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">:</span> <span class=\"token comment\"># sys.path即当前python环境可以运行的路径,假如当前项目不在该路径中,就无法运行其中的模块,所以就需要加载路径</span>\n    sys<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>ROOT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 把ROOT添加到运行路径上</span>\nROOT <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>relpath<span class=\"token punctuation\">(</span>ROOT<span class=\"token punctuation\">,</span> Path<span class=\"token punctuation\">.</span>cwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ROOT设置为相对路径</span>\n</code></pre>\n<p>这一部分的主要作用有两个:</p>\n<ul><li>将当前项目添加到系统路径上,以使得项目中的模块可以调用.</li><li>将当前项目的相对路径保存在ROOT中,便于寻找项目中的文件.</li></ul>\n<h1><a id=\"3__4147_32\"></a>3. 加载自定义模块 41~47行</h1>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> models<span class=\"token punctuation\">.</span>common <span class=\"token keyword\">import</span> DetectMultiBackend\n<span class=\"token keyword\">from</span> utils<span class=\"token punctuation\">.</span>dataloaders <span class=\"token keyword\">import</span> IMG_FORMATS<span class=\"token punctuation\">,</span> VID_FORMATS<span class=\"token punctuation\">,</span> LoadImages<span class=\"token punctuation\">,</span> LoadStreams\n<span class=\"token keyword\">from</span> utils<span class=\"token punctuation\">.</span>general <span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>LOGGER<span class=\"token punctuation\">,</span> check_file<span class=\"token punctuation\">,</span> check_img_size<span class=\"token punctuation\">,</span> check_imshow<span class=\"token punctuation\">,</span> check_requirements<span class=\"token punctuation\">,</span> colorstr<span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">,</span>\n                           increment_path<span class=\"token punctuation\">,</span> non_max_suppression<span class=\"token punctuation\">,</span> print_args<span class=\"token punctuation\">,</span> scale_coords<span class=\"token punctuation\">,</span> strip_optimizer<span class=\"token punctuation\">,</span> xyxy2xywh<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">from</span> utils<span class=\"token punctuation\">.</span>plots <span class=\"token keyword\">import</span> Annotator<span class=\"token punctuation\">,</span> colors<span class=\"token punctuation\">,</span> save_one_box\n<span class=\"token keyword\">from</span> utils<span class=\"token punctuation\">.</span>torch_utils <span class=\"token keyword\">import</span> select_device<span class=\"token punctuation\">,</span> time_sync\n</code></pre>\n<p>这些都是用户自定义的库，<strong>由于上一步已经把路径加载上了</strong>，所以现在可以导入，这个顺序不可以调换。</p>\n<p>用的时候再解释这些库/方法的作用</p>\n<h1><a id=\"4_run_48213_46\"></a>4. run方法 48~213行</h1>\n<h2><a id=\"41___4877_47\"></a>4.1 参数列表 48~77行</h2>\n<pre><code class=\"prism language-python\"><span class=\"token decorator annotation punctuation\">@torch<span class=\"token punctuation\">.</span>no_grad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\"># 该标注使得方法中所有计算得出的tensor的requires_grad都自动设置为False，也就是说不会求梯度，可以加快预测效率，减小资源消耗</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>\n        weights<span class=\"token operator\">=</span>ROOT <span class=\"token operator\">/</span> <span class=\"token string\">'yolov5s.pt'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 事先训练完成的权重文件，比如yolov5s.pt,假如使用官方训练好的文件（比如yolov5s）,则会自动下载</span>\n        source<span class=\"token operator\">=</span>ROOT <span class=\"token operator\">/</span> <span class=\"token string\">'data/images'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 预测时的输入数据，可以是文件/路径/URL/glob, 输入是0的话调用摄像头作为输入</span>\n        data<span class=\"token operator\">=</span>ROOT <span class=\"token operator\">/</span> <span class=\"token string\">'data/coco128.yaml'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 数据集文件</span>\n        imgsz<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token number\">640</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 预测时的放缩后图片大小(因为YOLO算法需要预先放缩图片), 两个值分别是height, width</span>\n        conf_thres<span class=\"token operator\">=</span><span class=\"token number\">0.25</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 置信度阈值, 高于此值的bounding_box才会被保留</span>\n        iou_thres<span class=\"token operator\">=</span><span class=\"token number\">0.45</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># IOU阈值,高于此值的bounding_box才会被保留</span>\n        max_det<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 一张图片上检测的最大目标数量</span>\n        device<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 所使用的GPU编号，如果使用CPU就写cpu</span>\n        view_img<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 是否在推理时预览图片</span>\n        save_txt<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># save results to *.txt 是否将结果保存在txt文件中</span>\n        save_conf<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># save confidences in --save-txt labels 是否将结果中的置信度保存在txt文件中</span>\n        save_crop<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># save cropped prediction boxes 是否保存裁剪后的预测框</span>\n        nosave<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># do not save images/videos 是否保存预测后的图片/视频</span>\n        classes<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 过滤指定类的预测结果</span>\n        agnostic_nms<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 如为True,则为class-agnostic. 否则为class-specific</span>\n        augment<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># augmented inference</span>\n        visualize<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># visualize features</span>\n        update<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># update all models</span>\n        project<span class=\"token operator\">=</span>ROOT <span class=\"token operator\">/</span> <span class=\"token string\">'runs/detect'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 推理结果保存的路径</span>\n        name<span class=\"token operator\">=</span><span class=\"token string\">'exp'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 结果保存文件夹的命名前缀</span>\n        exist_ok<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># True: 推理结果覆盖之前的结果 False: 推理结果新建文件夹保存,文件夹名递增</span>\n        line_thickness<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 绘制Bounding_box的线宽度</span>\n        hide_labels<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># True: 隐藏标签</span>\n        hide_conf<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># True: 隐藏置信度</span>\n        half<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># use FP16 half-precision inference 是否使用半精度推理（节约显存）</span>\n        dnn<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># use OpenCV DNN for ONNX inference</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n</code></pre>\n<p>这里仅把一些必要的参数注释了一下，其他参数在实际使用中可以使用默认值，如果识别效果不好可以考虑修改参数（但更可能是训练的问题而不是这些参数的问题）</p>\n<h2><a id=\"42__78105_82\"></a>4.2 初始化环境，加载模型 78~105行</h2>\n<pre><code class=\"prism language-python\">    source <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span>\n    save_img <span class=\"token operator\">=</span> <span class=\"token keyword\">not</span> nosave <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> source<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'.txt'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 是否需要保存图片,如果nosave(传入的参数)为false且source的结尾不是txt则保存图片 </span>\n    <span class=\"token comment\"># 后面这个source.endswith('.txt')也就是source以.txt结尾，不过我不清楚这是什么用法</span>\n    is_file <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>suffix<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span>IMG_FORMATS <span class=\"token operator\">+</span> VID_FORMATS<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 判断source是不是视频/图像文件路径</span>\n    <span class=\"token comment\"># 假如source是\"D://YOLOv5/data/1.jpg\"，则Path(source).suffix是\".jpg\",Path(source).suffix[1:]是\"jpg\"</span>\n    <span class=\"token comment\"># 而IMG_FORMATS 和 VID_FORMATS两个变量保存的是所有的视频和图片的格式后缀。</span>\n    is_url <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rtsp://'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rtmp://'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'https://'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\"># 判断source是否是链接</span>\n    webcam <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span>isnumeric<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> source<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'.txt'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>is_url <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> is_file<span class=\"token punctuation\">)</span><span class=\"token comment\"># 判断是source是否是摄像头</span>\n    <span class=\"token keyword\">if</span> is_url <span class=\"token keyword\">and</span> is_file<span class=\"token punctuation\">:</span>\n        source <span class=\"token operator\">=</span> check_file<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 如果source是一个指向图片/视频的链接,则下载输入数据</span>\n        \n</code></pre>\n<pre><code class=\"prism language-python\">    <span class=\"token comment\"># Directories</span>\n    save_dir <span class=\"token operator\">=</span> increment_path<span class=\"token punctuation\">(</span>Path<span class=\"token punctuation\">(</span>project<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> name<span class=\"token punctuation\">,</span> exist_ok<span class=\"token operator\">=</span>exist_ok<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># save_dir是保存运行结果的文件夹名，是通过递增的方式来命名的。第一次运行时路径是“runs\\detect\\exp”，第二次运行时路径是“runs\\detect\\exp1”</span>\n    <span class=\"token punctuation\">(</span>save_dir <span class=\"token operator\">/</span> <span class=\"token string\">'labels'</span> <span class=\"token keyword\">if</span> save_txt <span class=\"token keyword\">else</span> save_dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkdir<span class=\"token punctuation\">(</span>parents<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> exist_ok<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 根据前面生成的路径创建文件夹</span>\n\n    <span class=\"token comment\"># 加载模型</span>\n    \n    device <span class=\"token operator\">=</span> select_device<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span><span class=\"token comment\"># select_device方法定义在utils.torch_utils模块中，返回值是torch.device对象，也就是推理时所使用的硬件资源。输入值如果是数字，表示GPU序号。也可是输入‘cpu’，表示使用CPU训练，默认是cpu</span>\n    model <span class=\"token operator\">=</span> DetectMultiBackend<span class=\"token punctuation\">(</span>weights<span class=\"token punctuation\">,</span> device<span class=\"token operator\">=</span>device<span class=\"token punctuation\">,</span> dnn<span class=\"token operator\">=</span>dnn<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">,</span> fp16<span class=\"token operator\">=</span>half<span class=\"token punctuation\">)</span><span class=\"token comment\"># DetectMultiBackend定义在models.common模块中，是我们要加载的网络，其中weights参数就是输入时指定的权重文件（比如yolov5s.pt）</span>\n    stride<span class=\"token punctuation\">,</span> names<span class=\"token punctuation\">,</span> pt <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>stride<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">.</span>names<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">.</span>pt \n    <span class=\"token comment\"># stride：推理时所用到的步长，默认为32， 大步长适合于大目标，小步长适合于小目标</span>\n    <span class=\"token comment\"># names：保存推理结果名的列表，比如默认模型的值是['person', 'bicycle', 'car', ...] </span>\n    <span class=\"token comment\"># pt: 加载的是否是pytorch模型（也就是pt格式的文件），</span>\n    imgsz <span class=\"token operator\">=</span> check_img_size<span class=\"token punctuation\">(</span>imgsz<span class=\"token punctuation\">,</span> s<span class=\"token operator\">=</span>stride<span class=\"token punctuation\">)</span>  \n    <span class=\"token comment\"># 将图片大小调整为步长的整数倍</span>\n    <span class=\"token comment\"># 比如假如步长是10，imagesz是[100,101],则返回值是[100,100]</span>\n\n    <span class=\"token comment\"># Dataloader</span>\n    <span class=\"token keyword\">if</span> webcam<span class=\"token punctuation\">:</span><span class=\"token comment\"># 使用摄像头作为输入</span>\n        view_img <span class=\"token operator\">=</span> check_imshow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\"># 检测cv2.imshow()方法是否可以执行，不能执行则抛出异常</span>\n        cudnn<span class=\"token punctuation\">.</span>benchmark <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>  <span class=\"token comment\"># 该设置可以加速预测</span>\n        dataset <span class=\"token operator\">=</span> LoadStreams<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> img_size<span class=\"token operator\">=</span>imgsz<span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span>stride<span class=\"token punctuation\">,</span> auto<span class=\"token operator\">=</span>pt<span class=\"token punctuation\">)</span><span class=\"token comment\"># 加载输入数据流</span>\n        <span class=\"token comment\"># source：输入数据源 image_size 图片识别前被放缩的大小， stride：识别时的步长， </span>\n        <span class=\"token comment\"># auto的作用可以看utils.augmentations.letterbox方法，它决定了是否需要将图片填充为正方形，如果auto=True则不需要</span>\n        bs <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># batch_size 批大小</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        dataset <span class=\"token operator\">=</span> LoadImages<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> img_size<span class=\"token operator\">=</span>imgsz<span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span>stride<span class=\"token punctuation\">,</span> auto<span class=\"token operator\">=</span>pt<span class=\"token punctuation\">)</span>\n        bs <span class=\"token operator\">=</span> <span class=\"token number\">1</span>  <span class=\"token comment\"># batch_size</span>\n    vid_path<span class=\"token punctuation\">,</span> vid_writer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> bs<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> bs<span class=\"token comment\"># 用于保存视频,前者是视频路径,后者是一个cv2.VideoWriter对象</span>\n</code></pre>\n<h2><a id=\"43__106203_131\"></a>4.3 开始预测 106~203行</h2>\n<pre><code class=\"prism language-python\">  <span class=\"token comment\"># Run inference</span>\n    model<span class=\"token punctuation\">.</span>warmup<span class=\"token punctuation\">(</span>imgsz<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token keyword\">if</span> pt <span class=\"token keyword\">else</span> bs<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>imgsz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 使用空白图片（零矩阵）预先用GPU跑一遍预测流程，可以加速预测</span>\n    seen<span class=\"token punctuation\">,</span> windows<span class=\"token punctuation\">,</span> dt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\"># seen: 已经处理完了多少帧图片</span>\n    <span class=\"token comment\"># windows: 如果需要预览图片,windows列表会给每个输入文件存储一个路径.</span>\n    <span class=\"token comment\"># dt: 存储每一步骤的耗时</span>\n    <span class=\"token keyword\">for</span> path<span class=\"token punctuation\">,</span> im<span class=\"token punctuation\">,</span> im0s<span class=\"token punctuation\">,</span> vid_cap<span class=\"token punctuation\">,</span> s <span class=\"token keyword\">in</span> dataset<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 在dataset中，每次迭代的返回值是self.sources, img, img0, None, ''</span>\n    <span class=\"token comment\">#path：文件路径（即source）</span>\n    <span class=\"token comment\">#im: 处理后的输入图片列表（经过了放缩操作）</span>\n    <span class=\"token comment\">#im0s: 源输入图片列表</span>\n    <span class=\"token comment\">#vid_cap</span>\n    <span class=\"token comment\"># s： 图片的基本信息，比如路径，大小</span>\n        t1 <span class=\"token operator\">=</span> time_sync<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\"># 获取当前时间</span>\n        im <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>from_numpy<span class=\"token punctuation\">(</span>im<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span><span class=\"token comment\">#将图片放到指定设备(如GPU)上识别</span>\n        im <span class=\"token operator\">=</span> im<span class=\"token punctuation\">.</span>half<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> model<span class=\"token punctuation\">.</span>fp16 <span class=\"token keyword\">else</span> im<span class=\"token punctuation\">.</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 把输入从整型转化为半精度/全精度浮点数。</span>\n        im <span class=\"token operator\">/=</span> <span class=\"token number\">255</span>  <span class=\"token comment\"># 0 - 255 to 0.0 - 1.0 #将图片归一化处理（这是图像表示方法的的规范，使用浮点数就要归一化） </span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>im<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n            im <span class=\"token operator\">=</span> im<span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 添加一个第0维。在pytorch的nn.Module的输入中，第0维是batch的大小，这里添加一个1。</span>\n        t2 <span class=\"token operator\">=</span> time_sync<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 获取当前时间</span>\n        dt<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> t2 <span class=\"token operator\">-</span> t1 <span class=\"token comment\"># 记录该阶段耗时</span>\n\n        <span class=\"token comment\"># Inference</span>\n        visualize <span class=\"token operator\">=</span> increment_path<span class=\"token punctuation\">(</span>save_dir <span class=\"token operator\">/</span> Path<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>stem<span class=\"token punctuation\">,</span> mkdir<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> visualize <span class=\"token keyword\">else</span> <span class=\"token boolean\">False</span>\n        <span class=\"token comment\"># 如果为True则保留推理过程中的特征图，保存在runs文件夹中</span>\n        pred <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>im<span class=\"token punctuation\">,</span> augment<span class=\"token operator\">=</span>augment<span class=\"token punctuation\">,</span> visualize<span class=\"token operator\">=</span>visualize<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 推理结果，pred保存的是所有的bound_box的信息，</span>\n        t3 <span class=\"token operator\">=</span> time_sync<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        dt<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> t3 <span class=\"token operator\">-</span> t2<span class=\"token comment\"># 记录该阶段耗时</span>\n\n        <span class=\"token comment\"># NMS</span>\n        pred <span class=\"token operator\">=</span> non_max_suppression<span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">,</span> conf_thres<span class=\"token punctuation\">,</span> iou_thres<span class=\"token punctuation\">,</span> classes<span class=\"token punctuation\">,</span> agnostic_nms<span class=\"token punctuation\">,</span> max_det<span class=\"token operator\">=</span>max_det<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 执行非极大值抑制，返回值为过滤后的预测框</span>\n        <span class=\"token comment\"># conf_thres： 置信度阈值</span>\n        <span class=\"token comment\"># iou_thres： iou阈值</span>\n        <span class=\"token comment\"># classes: 需要过滤的类（数字列表）</span>\n        <span class=\"token comment\"># agnostic_nms： 标记class-agnostic或者使用class-specific方式。默认为class-agnostic</span>\n        <span class=\"token comment\"># max_det: 检测框结果的最大数量</span>\n        dt<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> time_sync<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> t3\n\n        <span class=\"token comment\"># Second-stage classifier (optional)</span>\n        <span class=\"token comment\"># pred = utils.general.apply_classifier(pred, classifier_model, im, im0s)</span>\n\n        <span class=\"token comment\"># Process predictions</span>\n        <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> det <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 每次迭代处理一张图片，</span>\n            seen <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">if</span> webcam<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># batch_size &gt;= 1</span>\n                p<span class=\"token punctuation\">,</span> im0<span class=\"token punctuation\">,</span> frame <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> im0s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dataset<span class=\"token punctuation\">.</span>count\n                <span class=\"token comment\">#frame：此次取的是第几张图片</span>\n                s <span class=\"token operator\">+=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>i<span class=\"token punctuation\">}</span></span><span class=\"token string\">: '</span></span><span class=\"token comment\"># s后面拼接一个字符串i</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                p<span class=\"token punctuation\">,</span> im0<span class=\"token punctuation\">,</span> frame <span class=\"token operator\">=</span> path<span class=\"token punctuation\">,</span> im0s<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">,</span> <span class=\"token string\">'frame'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n            p <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># to Path</span>\n            save_path <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>save_dir <span class=\"token operator\">/</span> p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 推理结果图片保存的路径</span>\n            txt_path <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>save_dir <span class=\"token operator\">/</span> <span class=\"token string\">'labels'</span> <span class=\"token operator\">/</span> p<span class=\"token punctuation\">.</span>stem<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token string\">''</span> <span class=\"token keyword\">if</span> dataset<span class=\"token punctuation\">.</span>mode <span class=\"token operator\">==</span> <span class=\"token string\">'image'</span> <span class=\"token keyword\">else</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'_</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>frame<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 推理结果文本保存的路径</span>\n            s <span class=\"token operator\">+=</span> <span class=\"token string\">'%gx%g '</span> <span class=\"token operator\">%</span> im<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 显示推理前裁剪后的图像尺寸</span>\n            gn <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span>im0<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># normalization gain whwh</span>\n            <span class=\"token comment\">#得到原图的宽和高</span>\n            imc <span class=\"token operator\">=</span> im0<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> save_crop <span class=\"token keyword\">else</span> im0  <span class=\"token comment\"># for save_crop</span>\n            <span class=\"token comment\">#如果save_crop的值为true， 则将检测到的bounding_box单独保存成一张图片。</span>\n            annotator <span class=\"token operator\">=</span> Annotator<span class=\"token punctuation\">(</span>im0<span class=\"token punctuation\">,</span> line_width<span class=\"token operator\">=</span>line_thickness<span class=\"token punctuation\">,</span> example<span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 得到一个绘图的类，类中预先存储了原图、线条宽度、类名</span>\n            \n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>det<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># Rescale boxes from img_size to im0 size</span>\n                det<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> scale_coords<span class=\"token punctuation\">(</span>im<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> det<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> im0<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\"># 将标注的bounding_box大小调整为和原图一致（因为训练时原图经过了放缩）</span>\n\n                <span class=\"token comment\"># Print results</span>\n                <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> det<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>unique<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>det<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># detections per class</span>\n                    s <span class=\"token operator\">+=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>n<span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>names<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'s'</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, \"</span></span>  <span class=\"token comment\"># add to string</span>\n                <span class=\"token comment\"># 打印出所有的预测结果  比如1 person（检测出一个人）</span>\n\n                <span class=\"token comment\"># Write results</span>\n                <span class=\"token keyword\">for</span> <span class=\"token operator\">*</span>xyxy<span class=\"token punctuation\">,</span> conf<span class=\"token punctuation\">,</span> cls <span class=\"token keyword\">in</span> <span class=\"token builtin\">reversed</span><span class=\"token punctuation\">(</span>det<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">if</span> save_txt<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 保存txt文件</span>\n                        xywh <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>xyxy2xywh<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span>xyxy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> gn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>tolist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token comment\"># 将坐标转变成x y w h 的形式，并归一化</span>\n                        line <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>xywh<span class=\"token punctuation\">,</span> conf<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> save_conf <span class=\"token keyword\">else</span> <span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>xywh<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># label format</span>\n                        <span class=\"token comment\"># line的形式是： ”类别 x y w h“，假如save_conf为true，则line的形式是：”类别 x y w h 置信度“</span>\n                        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>txt_path<span class=\"token punctuation\">}</span></span><span class=\"token string\">.txt'</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n                            f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%g '</span> <span class=\"token operator\">*</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rstrip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> line <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token comment\"># 写入对应的文件夹里，路径默认为“runs\\detect\\exp*\\labels”</span>\n\n                    <span class=\"token keyword\">if</span> save_img <span class=\"token keyword\">or</span> save_crop <span class=\"token keyword\">or</span> view_img<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 给图片添加推理后的bounding_box边框</span>\n                        c <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 类别标号</span>\n                        label <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">if</span> hide_labels <span class=\"token keyword\">else</span> <span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> hide_conf <span class=\"token keyword\">else</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>names<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>conf<span class=\"token punctuation\">:</span><span class=\"token format-spec\">.2f</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span><span class=\"token comment\"># 类别名</span>\n                        annotator<span class=\"token punctuation\">.</span>box_label<span class=\"token punctuation\">(</span>xyxy<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span>colors<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token comment\">#绘制边框</span>\n                        \n                    <span class=\"token keyword\">if</span> save_crop<span class=\"token punctuation\">:</span><span class=\"token comment\"># 将预测框内的图片单独保存</span>\n                        save_one_box<span class=\"token punctuation\">(</span>xyxy<span class=\"token punctuation\">,</span> imc<span class=\"token punctuation\">,</span> <span class=\"token builtin\">file</span><span class=\"token operator\">=</span>save_dir <span class=\"token operator\">/</span> <span class=\"token string\">'crops'</span> <span class=\"token operator\">/</span> names<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>p<span class=\"token punctuation\">.</span>stem<span class=\"token punctuation\">}</span></span><span class=\"token string\">.jpg'</span></span><span class=\"token punctuation\">,</span> BGR<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># Stream results</span>\n            im0 <span class=\"token operator\">=</span> annotator<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token comment\">#im0是绘制好的图片</span>\n\n            <span class=\"token keyword\">if</span> view_img<span class=\"token punctuation\">:</span><span class=\"token comment\"># 如果view_img为true,则显示该图片</span>\n                <span class=\"token keyword\">if</span> p <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> windows<span class=\"token punctuation\">:</span> <span class=\"token comment\"># 如果当前图片/视频的路径不在windows列表里,则说明需要重新为该图片/视频创建一个预览窗口</span>\n                    windows<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token comment\"># 标记当前图片/视频已经创建好预览窗口了</span>\n                    cv2<span class=\"token punctuation\">.</span>namedWindow<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>WINDOW_NORMAL <span class=\"token operator\">|</span> cv2<span class=\"token punctuation\">.</span>WINDOW_KEEPRATIO<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># allow window resize (Linux)</span>\n                    cv2<span class=\"token punctuation\">.</span>resizeWindow<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> im0<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> im0<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                cv2<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> im0<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 预览图片</span>\n                cv2<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 暂停 1 millisecond</span>\n\n            <span class=\"token comment\"># Save results (image with detections)</span>\n            <span class=\"token keyword\">if</span> save_img<span class=\"token punctuation\">:</span><span class=\"token comment\"># 如果save_img为true,则保存绘制完的图片</span>\n                <span class=\"token keyword\">if</span> dataset<span class=\"token punctuation\">.</span>mode <span class=\"token operator\">==</span> <span class=\"token string\">'image'</span><span class=\"token punctuation\">:</span><span class=\"token comment\"># 如果是图片,则保存</span>\n                    cv2<span class=\"token punctuation\">.</span>imwrite<span class=\"token punctuation\">(</span>save_path<span class=\"token punctuation\">,</span> im0<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 如果是视频或者\"流\"</span>\n                    <span class=\"token keyword\">if</span> vid_path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> save_path<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># vid_path[i] != save_path,说明这张图片属于一段新的视频,需要重新创建视频文件</span>\n                        vid_path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> save_path\n                        <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>vid_writer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>VideoWriter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                            vid_writer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>release<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># release previous video writer</span>\n                        <span class=\"token keyword\">if</span> vid_cap<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># video</span>\n                            fps <span class=\"token operator\">=</span> vid_cap<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>cv2<span class=\"token punctuation\">.</span>CAP_PROP_FPS<span class=\"token punctuation\">)</span>\n                            w <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>vid_cap<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>cv2<span class=\"token punctuation\">.</span>CAP_PROP_FRAME_WIDTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                            h <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>vid_cap<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>cv2<span class=\"token punctuation\">.</span>CAP_PROP_FRAME_HEIGHT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># stream</span>\n                            fps<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> h <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> im0<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> im0<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n                        save_path <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>Path<span class=\"token punctuation\">(</span>save_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>with_suffix<span class=\"token punctuation\">(</span><span class=\"token string\">'.mp4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># force *.mp4 suffix on results videos</span>\n                        vid_writer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>VideoWriter<span class=\"token punctuation\">(</span>save_path<span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>VideoWriter_fourcc<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token string\">'mp4v'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fps<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    vid_writer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>im0<span class=\"token punctuation\">)</span>\n                    <span class=\"token comment\"># 以上的部分是保存视频文件</span>\n\n        <span class=\"token comment\"># Print time (inference-only)</span>\n        LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>s<span class=\"token punctuation\">}</span></span><span class=\"token string\">Done. (</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>t3 <span class=\"token operator\">-</span> t2<span class=\"token punctuation\">:</span><span class=\"token format-spec\">.3f</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">s)'</span></span><span class=\"token punctuation\">)</span><span class=\"token comment\"># 打印耗时</span>\n</code></pre>\n<h2><a id=\"44__204212_265\"></a>4.4 打印结果 204~212行</h2>\n<pre><code class=\"prism language-python\">    t <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">/</span> seen <span class=\"token operator\">*</span> <span class=\"token number\">1E3</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> dt<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 平均每张图片所耗费时间</span>\n    LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Speed: %.1fms pre-process, %.1fms inference, %.1fms NMS per image at shape </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>imgsz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span> <span class=\"token operator\">%</span> t<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> save_txt <span class=\"token keyword\">or</span> save_img<span class=\"token punctuation\">:</span>\n        s <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"\\n</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>save_dir<span class=\"token punctuation\">.</span>glob<span class=\"token punctuation\">(</span><span class=\"token string\">'labels/*.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> labels saved to </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>save_dir <span class=\"token operator\">/</span> <span class=\"token string\">'labels'</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span> <span class=\"token keyword\">if</span> save_txt <span class=\"token keyword\">else</span> <span class=\"token string\">''</span><span class=\"token comment\"># 标签保存的路径</span>\n        LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Results saved to </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>colorstr<span class=\"token punctuation\">(</span><span class=\"token string\">'bold'</span><span class=\"token punctuation\">,</span> save_dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>s<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> update<span class=\"token punctuation\">:</span>\n        strip_optimizer<span class=\"token punctuation\">(</span>weights<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># update model (to fix SourceChangeWarning)</span>\n\n</code></pre>\n<h1><a id=\"5__277\"></a>5. 其余代码</h1>\n<p>parse_opt方法的解释和run的参数解释一致，不再重复解释</p>\n<p>如果不明白如何修改参数使用请使用搜索引擎搜索ArgumentParser的用法</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-07-17 14:12:04", "summary": "所用版本本文解读源代码地址加载系统库行首先加载必要的外部库在使用时我们再介绍他们的用法设置系统环境行指的是当前文件即最终保存着当前文件的绝对路径比如保存着当前项目的父目录比如即当前环境可以运行的路径假"}