{"blogid": "123005133", "writerAge": "码龄8年", "writerBlogNum": "424", "writerCollect": "5043", "writerComment": "415", "writerFan": "1297", "writerGrade": "7级", "writerIntegral": "13684", "writerName": "牛奶咖啡13", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123005133.jpg", "writerRankTotal": "861", "writerRankWeekly": "7439", "writerThumb": "764", "writerVisitNum": "1617051", "blog_read_count": "3990", "blog_time": "已于 2022-02-22 17:06:24 修改", "blog_title": "C#的反射", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>一、反射简介 </h1>\n<h2>1.1、反射的说明</h2>\n<p><span style=\"color:#1a439c;\"><strong>反射：指程序可以访问、检测和修改它本身状态或行为的一种能力</strong></span><span style=\"color:#0d0016;\">（即：审查元数据并收集关于它的类型信息的能力）。</span></p>\n<p><span style=\"color:#1a439c;\">    ①元数据（编译以后的最基本数据单元：指程序和程序类型本身的的信息，保存在程序的程序集中）</span>可以理解为一大堆的表，当编译程序集或者模块时，编译器会创建一个类定义表，一个字段定义表，和一个方法定义表等。</p>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:660px;\"><caption>\n  元数据包含的内容\n </caption><tbody><tr><td style=\"width:46px;\">序号</td><td style=\"width:612px;\">元数据包含的内容</td></tr><tr><td style=\"width:46px;\"> <p>1</p> </td><td style=\"width:612px;\">程序或类库中每一个类型的描述</td></tr><tr><td style=\"width:46px;\">2</td><td style=\"width:612px;\">清单信息，包括与程序本身有关的数据，以及它依赖的库</td></tr><tr><td style=\"width:46px;\">3</td><td style=\"width:612px;\">在代码中嵌入的自定义特性，提供与特性所修饰的构造有关的额外信息</td></tr></tbody></table>\n<p><span style=\"color:#1a439c;\">    ②反射提供了封装程序集、模块和类型的对象</span>（反射的层次模型为：程序集包含模块，而模块包含类型，类型又包含成员【成员---&gt;类型---&gt;模块---&gt;程序集】）其中类型可以是（类、结构、枚举）。</p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"402\" src=\"..\\..\\static\\image\\c7259a794ea344f6a9bf49c9ac2272ed.png\" width=\"732\"/></p>\n<p><span style=\"color:#1a439c;\">    ③Type类是一个抽象类，用来包含类型的特性，这个类的对象能让我们获取程序使用的类型的信息（由于他是抽象类所以获取的是派生类实例）。</span></p>\n<p><span style=\"color:#1a439c;\">    ④可以使用反射动态地创建类型的实例，将类型绑定到现有对象，或从现有对象中获取类型。</span>然后，可以调用类型的方法或访问其字段和属性。</p>\n<h2>1.2、反射的用途</h2>\n<p>    <span style=\"color:#fe2c24;\"><strong>通过反射,可以在运行时获得程序或程序集中每一个类型(包括类、结构、委托、接口和枚举等)的成员和成员的信息。有了反射,即可对每一个类型了如指掌。另外我还可以直接创建对象,即使这个对象的类型在编译时还不知道。</strong></span></p>\n<p><span style=\"color:#0d0016;\"><strong>《1》反射的整体用途说明</strong></span></p>\n<p>        ①它允许在运行时查看特性（attribute）信息。</p>\n<p>        ②它允许审查集合中的各种类型，以及实例化这些类型。</p>\n<p>        ③它允许延迟绑定的方法和属性（property）。</p>\n<p>        ④它允许在运行时创建新类型，然后使用这些类型执行一些任务。</p>\n<p><strong>《2》反射的详细用法说明</strong></p>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:660px;\"><caption>\n  反射的用法说明\n </caption><tbody><tr><td style=\"width:48px;\">序号</td><td style=\"width:610px;\">反射的用法说明 </td></tr><tr><td style=\"text-align:center;width:48px;\">1</td><td style=\"width:610px;\"><span style=\"color:#ff9900;\">使用<strong>【Assembly】</strong>定义和加载程序集,加载在程序集清单中列出模块</span>,以及从此程序集中查找类型并创建该类型的实例</td></tr><tr><td style=\"text-align:center;width:48px;\">2</td><td style=\"width:610px;\"><span style=\"color:#ff9900;\">使用<strong>【Module】</strong>了解包含模块的程序集以及模块中的类等</span>,还可以获取在模块上定义的所有全局方法或其他特定的非全局方法</td></tr><tr><td style=\"text-align:center;width:48px;\">3</td><td style=\"width:610px;\"><span style=\"color:#ff9900;\">使用<strong>【ConstructorInfo】</strong>了解构造函数的名称、参数、访问修饰符</span>(如pulic 或private)和实现详细信息(如abstract或virtual)等</td></tr><tr><td style=\"text-align:center;width:48px;\">4</td><td style=\"width:610px;\"><span style=\"color:#ff9900;\">使用<strong>【MethodInfo】</strong>了解方法的名称、返回类型、参数、访问修饰符</span>(如pulic 或private)和实现详细信息(如abstract或virtual)等</td></tr><tr><td style=\"text-align:center;width:48px;\">5</td><td style=\"width:610px;\"><span style=\"color:#ff9900;\">使用<strong>【FiedInfo】</strong>了解字段的名称、访问修饰符</span>(如public或private)和实现详细信息(如static)等,并获取或设置字段值</td></tr><tr><td style=\"text-align:center;width:48px;\">6</td><td style=\"width:610px;\"><span style=\"color:#ff9900;\">使用<strong>【EventInfo】</strong>了解事件的名称、事件处理程序数据类型、自定义属性、声明类型和反射类型等</span>,添加或移除事件处理程序</td></tr><tr><td style=\"text-align:center;width:48px;\">7</td><td style=\"width:610px;\"><span style=\"color:#ff9900;\">使用<strong>【PropertyInfo】</strong>了解属性的名称、数据类型、声明类型、反射类型和只读或可写状态等</span>,获取或设置属性值</td></tr><tr><td style=\"text-align:center;width:48px;\">8</td><td style=\"width:610px;\"><span style=\"color:#ff9900;\">使用<strong>【ParameterInfo】</strong>了解参数的名称、数据类型、是输入参数还是输出参数</span>,以及参数在方法签名中的位置等</td></tr></tbody></table>\n<h1>二、反射主要用到的内容</h1>\n<p><a class=\"has-card\" href=\"https://download.csdn.net/download/xiaochenXIHUA/81895206\" title=\"关于【C#反射】文章中涉及到的内容示例项目工程\"><span class=\"link-card-box\"><span class=\"link-title\">关于【C#反射】文章中涉及到的内容示例项目工程</span><span class=\"link-link\"><img alt=\"icon-default.png?t=M1H3\" class=\"link-link-icon\" src=\"..\\..\\static\\image\\icon-default.png\"/>https://download.csdn.net/download/xiaochenXIHUA/81895206</span></span></a></p>\n<h2>2.1、使用的命名空间</h2>\n<p>使用反射需要引用命名空间【using System.reflection】,这个命名空间包含如下的类：</p>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:660px;\"><caption>\n  System.Reflection命名空间包含的主要类\n </caption><tbody><tr><td style=\"width:53px;\">序号</td><td style=\"width:605px;\">System.Reflection命名空间包含的主要类（反射涉及到的类）</td></tr><tr><td style=\"width:53px;\">1</td><td style=\"width:605px;\">System.Reflection.Assembly </td></tr><tr><td style=\"width:53px;\">2</td><td style=\"width:605px;\">System.Reflection.MemberInfo</td></tr><tr><td style=\"width:53px;\">3</td><td style=\"width:605px;\">System.Reflection.EventInfo</td></tr><tr><td style=\"width:53px;\">4</td><td style=\"width:605px;\">System.Reflection.FieldInfo</td></tr><tr><td style=\"width:53px;\">5</td><td style=\"width:605px;\">System.Reflection.MethodBase</td></tr><tr><td style=\"width:53px;\">6</td><td style=\"width:605px;\">System.Reflection.ConstructorInfo</td></tr><tr><td style=\"width:53px;\">7</td><td style=\"width:605px;\">System.Reflection.MethodInfo</td></tr><tr><td style=\"width:53px;\">8</td><td style=\"width:605px;\">System.Reflection.PropertyInfo</td></tr><tr><td style=\"width:53px;\">9</td><td style=\"width:605px;\">System.Type   </td></tr></tbody></table>\n<p>可以使用 <a href=\"https://marketplace.visualstudio.com/items?itemName=SharpDevelopTeam.ILSpy#Overview\" title=\"ILSpy\">ILSpy</a> 工具查看【System.reflection】命名空间包含的内容，具体的使用方法请参考：<br/><a class=\"has-card\" href=\"https://coffeemilk.blog.csdn.net/article/details/120966898\" title=\"安装使用反编译工具ILSPY\"><span class=\"link-card-box\"><span class=\"link-title\">安装使用反编译工具ILSPY</span><span class=\"link-link\"><img alt=\"\" class=\"link-link-icon\" src=\"..\\..\\static\\image\\icon-default.png\"/>https://coffeemilk.blog.csdn.net/article/details/120966898</span></span></a><img alt=\"\" height=\"920\" src=\"..\\..\\static\\image\\24f1fb33f3524366b1838cfbf2ba0d98.png\" width=\"1200\"/></p>\n<h2>2.2、获取反射类型的三种方式</h2>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:660px;\"><caption>\n  获取反射类型的三种方式\n </caption><tbody><tr><td style=\"width:48px;\">序号</td><td style=\"width:610px;\">获取反射类型的三种方式</td></tr><tr><td style=\"width:48px;\">1</td><td style=\"width:610px;\"> <p>//通过Typeof获取某个值的类型</p> <p>System.Type type = typeof(PeopleInfo);</p> </td></tr><tr><td style=\"width:48px;\">2</td><td style=\"width:610px;\"> <p>//通过GetType获取对象类型</p> <p>PeopleInfo peopleInfo = new PeopleInfo();<br/> peopleInfo.Age = 23;<br/> System.Type type1 = peopleInfo.GetType();<br/> System.Type type2 = peopleInfo.Age.GetType();<br/>         </p> </td></tr><tr><td style=\"width:48px;\">3</td><td style=\"width:610px;\"> <p>//通过GetType获取类名称类型</p> <p>System.Type type = System.Type.GetType(\"Test_Reflection.PeopleInfo\");</p> </td></tr></tbody></table>\n<p>注意：PeopleInfo为自建类</p>\n<pre><code class=\"language-cs\">/***\n*\tTitle：\"测试反射\" 项目\n*\t\t主题：人员信息\n*\tDescription：\n*\t\t功能：XXX\n*\tDate：2022\n*\tVersion：0.1版本\n*\tAuthor：Coffee\n*\tModify Recoder：\n*/\n\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Test_Reflection\n{\n    class PeopleInfo\n    {\n\n        private string guid=Guid.NewGuid().ToString();\n        public string desc= \"人员信息\";\n\n        public string Id { get; set; }\n\n        public string Name { get; set; }\n\n        public string Sex { get; set; }\n\n        public int Age { get; set; }\n\n        public string Work { get; set; }\n\n\n        private string WorkFlow(string opc)\n        {\n            //1、规划当天内容\n\n            //2、设置当天内容的紧急程度\n\n            //3、根据紧急情况进行处理\n\n            //4、总结一天内容\n\n            return $\"工作流处理完成：{opc}\";\n        }\n\n        public static string Test()\n        {\n            Console.WriteLine(\"这是一个测试\");\n            return \"这是一个静态的方法执行完成\";\n        }\n\n        public PeopleInfo()\n        {\n\n        }\n\n        public PeopleInfo(string name,int age)\n        {\n            this.Name = name;\n            this.Age = age;\n            \n        }\n\n\n    }//Class_end\n\n}\n</code></pre>\n<h2>2.3、Type类内容</h2>\n<h3>2.3.1、Type类的属性</h3>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:660px;\"><caption>\n  Type类的属性\n </caption><tbody><tr><td style=\"width:46px;\">序号</td><td style=\"width:108px;\">属性名称</td><td style=\"width:509px;\">属性说明</td></tr><tr><td style=\"width:46px;\">1</td><td style=\"width:108px;\">Name</td><td style=\"width:509px;\">对象类型名称</td></tr><tr><td style=\"width:46px;\">2</td><td style=\"width:108px;\">FullName</td><td style=\"width:509px;\">对象类型的全名</td></tr><tr><td style=\"width:46px;\">3</td><td style=\"width:108px;\">Namespace</td><td style=\"width:509px;\">对象类型的命名空间</td></tr><tr><td style=\"width:46px;\">4</td><td style=\"width:108px;\">IsAbstract</td><td style=\"width:509px;\">对象类型是否为抽象类型</td></tr><tr><td style=\"width:46px;\">5</td><td style=\"width:108px;\">IsArray</td><td style=\"width:509px;\">对象类型是否为数组</td></tr><tr><td style=\"width:46px;\">6</td><td style=\"width:108px;\">IsClass</td><td style=\"width:509px;\">对象类型是否为类</td></tr><tr><td style=\"width:46px;\">7</td><td style=\"width:108px;\">IsEnum</td><td style=\"width:509px;\">对象类型是否为枚举</td></tr><tr><td style=\"width:46px;\">8</td><td style=\"width:108px;\">IsInterface</td><td style=\"width:509px;\">对象类型是否为接口</td></tr><tr><td style=\"width:46px;\">9</td><td style=\"width:108px;\">IsPublic</td><td style=\"width:509px;\">对象类型是否为公有</td></tr><tr><td style=\"width:46px;\">10</td><td style=\"width:108px;\">IsSealed</td><td style=\"width:509px;\">对象类型是否为密封类</td></tr><tr><td style=\"width:46px;\">11</td><td style=\"width:108px;\">IsValueType</td><td style=\"width:509px;\">对象类型是否为值类型</td></tr><tr><td style=\"width:46px;\">12</td><td style=\"width:108px;\">BaseType</td><td style=\"width:509px;\">对象类型的基类类型</td></tr><tr><td style=\"width:46px;\">13</td><td style=\"width:108px;\">Assembly</td><td style=\"width:509px;\">对象类型的【程序集】字符串</td></tr><tr><td style=\"width:46px;\">14</td><td style=\"width:108px;\">IsCOMObject</td><td style=\"width:509px;\">对象类型是否是COM对象</td></tr><tr><td style=\"width:46px;\">15</td><td style=\"width:108px;\">AssemblyQualifiedName</td><td style=\"width:509px;\">对象类型的【程序集.命名空间.类名】字符串</td></tr></tbody></table>\n<p>使用示例： </p>\n<pre><code class=\"language-cs\">\n        //通过Typeof获取某个值的类型\n        private void btn_GetType1_Click(object sender, EventArgs e)\n        {\n            System.Type type = typeof(PeopleInfo);\n            string str = string.Empty;\n            str += $\"1-对象类型名称：{type.Name}\";\n            str += $\"2-对象类型的全名：{type.FullName}\";\n            str += $\"3-对象类型的命名空间：{type.Namespace}\";\n            str += $\"4-对象类型是否为抽象类型：{type.IsAbstract}\";\n            str += $\"5-对象类型是否为数组：{type.IsArray}\";\n            str += $\"6-对象类型是否为类：{type.IsClass}\";\n            str += $\"7-对象类型是否为枚举：{type.IsEnum}\";\n            str += $\"8-对象类型是否为接口：{type.IsInterface}\";\n            str += $\"9-对象类型是否为公有：{type.IsPublic}\";\n            str += $\"10-对象类型是否为密封类：{type.IsSealed}\";\n            str += $\"11-对象类型是否为值类型：{type.IsValueType}\";\n            str += $\"12-对象类型的基类类型：{type.BaseType}\";\n            str += $\"13-对象类型的【程序集】字符串：{type.Assembly}\";\n            str += $\"14-对象类型是否是COM对象：{type.IsCOMObject}\";\n            str += $\"15-对象类型的【程序集.命名空间.类名】字符串：{type.AssemblyQualifiedName }\";\n\n        }</code></pre>\n<p>执行效果如下：</p>\n<p><img alt=\"\" height=\"432\" src=\"..\\..\\static\\image\\7b078df022704241a719180a732eb1b3.png\" width=\"1200\"/></p>\n<h3> 2.3.2、Type类的方法</h3>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:660px;\"><caption>\n  Type类的方法\n </caption><tbody><tr><td style=\"width:49px;\">序号</td><td style=\"width:266px;\">方法名称</td><td style=\"width:343px;\">方法说明</td></tr><tr><td style=\"width:49px;\">1</td><td style=\"width:266px;\">GetMember(\"成员的名称\")</td><td style=\"width:343px;\">返回该成员名称对应的【MemberInfo】类型</td></tr><tr><td style=\"width:49px;\">2</td><td style=\"width:266px;\">GetMembers()</td><td style=\"width:343px;\">返回类包含的所有成员对应的【MemberInfo[]】类型</td></tr><tr><td style=\"width:49px;\">3</td><td style=\"width:266px;\">GetConstructor()</td><td style=\"width:343px;\">返回类的构造函数信息【ConstructorInfo】</td></tr><tr><td style=\"width:49px;\">4</td><td style=\"width:266px;\">GetConstructors()</td><td style=\"width:343px;\">返回类的所有构造函数信息【ConstructorInfo[]】</td></tr><tr><td style=\"width:49px;\">5</td><td style=\"width:266px;\">GetEvent(“事件名称”)</td><td style=\"width:343px;\">返回类的事件信息【EventInfo】</td></tr><tr><td style=\"width:49px;\">6</td><td style=\"width:266px;\">GetEvents()</td><td style=\"width:343px;\">返回类的所有事件信息【EventInfo[]】</td></tr><tr><td style=\"width:49px;\">7</td><td style=\"width:266px;\">GetInterface(\"接口名称\")</td><td style=\"width:343px;\">返回类的接口信息【Type】</td></tr><tr><td style=\"width:49px;\">8</td><td style=\"width:266px;\">GetInterfaces()</td><td style=\"width:343px;\">返回类的所有接口信息【Type[]】</td></tr><tr><td style=\"width:49px;\">9</td><td style=\"width:266px;\">GetField(\"字段名称\")</td><td style=\"width:343px;\">返回类的字段信息【FieldInfo】</td></tr><tr><td style=\"width:49px;\">10</td><td style=\"width:266px;\">GetFields()</td><td style=\"width:343px;\">返回类的所有字段信息【FieldInfo[]】</td></tr><tr><td style=\"width:49px;\">11</td><td style=\"width:266px;\">GetPropertie(\"属性名称\")</td><td style=\"width:343px;\">返回类的属性信息【PropertyInfo】</td></tr><tr><td style=\"width:49px;\">12</td><td style=\"width:266px;\">GetProperties()</td><td style=\"width:343px;\">返回类的所有属性信息【PropertyInfo[]】</td></tr><tr><td style=\"width:49px;\">13</td><td style=\"width:266px;\">GetMethod(\"方法名称\")</td><td style=\"width:343px;\">返回类的方法信息【MethodInfo】</td></tr><tr><td style=\"width:49px;\">14</td><td style=\"width:266px;\">GetMethods()</td><td style=\"width:343px;\">返回类的所有方法信息【MethodInfo[]】</td></tr></tbody></table>\n<h2>2.4、BindingFlags 类型说明 </h2>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:660px;\"><caption>\n  BindingFlags类型说明\n </caption><tbody><tr><td style=\"width:49px;\">序号</td><td style=\"width:324px;\">BindingFlags权限类型名称（可以多项组合）</td><td style=\"width:286px;\">说明</td></tr><tr><td style=\"width:49px;\">1</td><td style=\"width:324px;\">System.Reflection.BindingFlags.Public</td><td style=\"width:286px;\">指定Public修饰的成员</td></tr><tr><td style=\"width:49px;\">2</td><td style=\"width:324px;\">System.Reflection.BindingFlags.Instance</td><td style=\"width:286px;\">指定实例化的成员</td></tr><tr><td style=\"width:49px;\">3</td><td style=\"width:324px;\">System.Reflection.BindingFlags.NonPublic</td><td style=\"width:286px;\">指定Private修饰的成员</td></tr><tr><td style=\"width:49px;\">4</td><td style=\"width:324px;\">System.Reflection.BindingFlags.Static</td><td style=\"width:286px;\">指定Static修饰的成员</td></tr><tr><td style=\"width:49px;\">5</td><td style=\"width:324px;\">System.Reflection.BindingFlags.DeclaredOnly</td><td style=\"width:286px;\">指定DeclaredOnly修饰的成员</td></tr><tr><td style=\"width:49px;\">6</td><td style=\"width:324px;\"> <p>System.Reflection.BindingFlags.Public | </p> <p>System.Reflection.BindingFlags.Instance <br/>                </p> </td><td style=\"width:286px;\">指定Public修饰的实例化成员</td></tr></tbody></table>\n<h2>2.5、 Activator 反射不同的构造进行实例化对象</h2>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:660px;\"><caption>\n  Activator反射不同的构造进行实例化对象\n </caption><tbody><tr><td style=\"width:52px;\">序号</td><td style=\"width:308px;\">Activator方法</td><td style=\"width:298px;\">说明</td></tr><tr><td style=\"width:52px;\">1</td><td style=\"width:308px;\">CreateInstance（Type t）</td><td style=\"width:298px;\">使用默认Public修饰的无参数构造实例化对象</td></tr><tr><td style=\"width:52px;\">2</td><td style=\"width:308px;\">CreateInstance(Type,bool nonPublic)</td><td style=\"width:298px;\">使用Private修饰的无参构造实例化对象</td></tr><tr><td style=\"width:52px;\">3</td><td style=\"width:308px;\">CreateInstance(Type type, params object?[]? args)</td><td style=\"width:298px;\">使用Public修饰的有参构造实例化对象</td></tr><tr><td style=\"width:52px;\">4</td><td style=\"width:308px;\">CreateInstance(Type type, object?[]? args, object?[]? activationAttributes)</td><td style=\"width:298px;\">使用Public修饰的有参构造和公有属性实例化对象</td></tr><tr><td style=\"width:52px;\">5</td><td style=\"width:308px;\">CreateInstance(Type type, BindingFlags bindingAttr, Binder? binder, object?[]? args, CultureInfo? culture)</td><td style=\"width:298px;\">使用指定的BindingFlags组合，可选有无参数构造实例化对象</td></tr></tbody></table>\n<p><img alt=\"\" height=\"553\" src=\"..\\..\\static\\image\\4f22f12a90bf4f1a97d75278091573b7.png\" width=\"1200\"/></p>\n<p>Activator反射不同的构造进行实例化对象示例代码 </p>\n<pre><code class=\"language-cs\">            System.Type type = System.Type.GetType(\"Test_Reflection.PeopleInfo\");\n\n            //通过无参构造创建实例\n            object obj =  Activator.CreateInstance(type);\n            //将对象转为PeopleInfo类\n            PeopleInfo peopleInfo1 = obj as PeopleInfo;\n\n            str += $\"描述1：{peopleInfo1.desc} 名称1：{peopleInfo1.Name} 年龄1：{peopleInfo1.Age}{enterEffect}\";\n\n            System.Type type111 = typeof(PeopleInfo);\n            //通过有参构造创建实例\n            dynamic obj2 = Activator.CreateInstance(type111, System.Reflection.BindingFlags.Instance|\n                System.Reflection.BindingFlags.Public,null,new object[] {\"卓一航\",26},null);\n\n            str += $\"描述2：{obj2.desc} 名称2：{obj2.Name} 年龄2：{obj2.Age}{enterEffect}\";</code></pre>\n<p> Activator反射不同的构造进行实例化对象示例代码效果</p>\n<p><img alt=\"\" height=\"38\" src=\"..\\..\\static\\image\\1cb5f91c99044499904bf18c8ed11ab9.png\" width=\"488\"/></p>\n<h2> 2.6、FieldInfo 通过反射获取对象的成员字段</h2>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:660px;\"><caption>\n  FieldInfo 通过反射获取对象的成员字段\n </caption><tbody><tr><td style=\"width:45px;\">序号</td><td style=\"width:424px;\">FieldInfo字段名称</td><td style=\"width:189px;\">说明</td></tr><tr><td style=\"width:45px;\">1</td><td style=\"width:424px;\">GetField(字段名称,访问权限System.Reflection.BindingFlags组合)</td><td style=\"width:189px;\">返回指定权限和名称的字段</td></tr><tr><td style=\"width:45px;\">2</td><td style=\"width:424px;\">GetFields(访问权限System.Reflection.BindingFlags组合)</td><td style=\"width:189px;\">返回指定权限的所有字段</td></tr><tr><td style=\"width:45px;\">3</td><td style=\"width:424px;\">SetValue(对象,值)</td><td style=\"width:189px;\">设置对象下该字段的值</td></tr><tr><td style=\"width:45px;\">4</td><td style=\"width:424px;\">GetValue(对象)</td><td style=\"width:189px;\">获取对象下该字段的值</td></tr></tbody></table>\n<p>FieldInfo 通过反射获取对象的成员字段示例：</p>\n<pre><code class=\"language-cs\">            PeopleInfo peopleInfo = new PeopleInfo();\n            peopleInfo.Id = \"CK00988\";\n            peopleInfo.Name = \"张一山\";\n            peopleInfo.Sex = \"男\";\n            peopleInfo.Age = 23;\n            peopleInfo.Work = \"信息部总监\";\n\nSystem.Reflection.FieldInfo fi2 = type1.GetField(\"desc\",System.Reflection.BindingFlags.Instance|System.Reflection.BindingFlags.Public);\n            str += $\"修改前字段的值：{fi2.GetValue(peopleInfo)} {enterEffect}\";\n            fi2.SetValue(peopleInfo,\"修改后的值\");\n            str += $\"修改后字段的值：{fi2.GetValue(peopleInfo)} {enterEffect}\";\n\n            System.Reflection.FieldInfo[] fi = type1.GetFields(System.Reflection.BindingFlags.Instance | \n                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public);\n            if (fi != null)\n            {\n\n                foreach (var item in fi)\n                {\n\n                    str += $\"字段名称：{item.Name} 类型:{item.FieldType} 声明此成员的类为：{item.DeclaringType} 模块：{item.Module} 值：{item.GetValue(peopleInfo)} {enterEffect}\";\n                    \n                }\n            }</code></pre>\n<p>FieldInfo 通过反射获取对象的成员字段运行效果：</p>\n<p><img alt=\"\" height=\"156\" src=\"..\\..\\static\\image\\b5c479f687c84495bf9b70bce52d7735.png\" width=\"906\"/></p>\n<h2> 2.7、MethodInfo 通过反射获取某个类的方法</h2>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:660px;\"><caption>\n  MethodInfo 通过反射获取某个类的方法\n </caption><tbody><tr><td style=\"width:48px;\">序号</td><td style=\"width:148px;\">MethodInfo方法名称</td><td style=\"width:462px;\">说明</td></tr><tr><td style=\"width:48px;\">1</td><td style=\"width:148px;\">Name</td><td style=\"width:462px;\">获取方法名称</td></tr><tr><td style=\"width:48px;\">2</td><td style=\"width:148px;\">MemberType</td><td style=\"width:462px;\">获取方法类型</td></tr><tr><td style=\"width:48px;\">3</td><td style=\"width:148px;\">InvokeMember</td><td style=\"width:462px;\">回调方法</td></tr><tr><td style=\"width:48px;\">4</td><td style=\"width:148px;\">GetMethod</td><td style=\"width:462px;\">获取方法且返回【MethodInfo】</td></tr></tbody></table>\n<p>MethodInfo 通过反射获取某个类的方法且执行示例：</p>\n<pre><code class=\"language-cs\">            System.Type type = System.Type.GetType(\"Test_Reflection.PeopleInfo\");\n\n            //通过无参构造创建实例\n            object obj =  Activator.CreateInstance(type);\n\n\n            System.Reflection.MethodInfo[] mi = type1.GetMethods(System.Reflection.BindingFlags.Instance| System.Reflection.BindingFlags.NonPublic\n                );\n            if (mi != null)\n            {\n                foreach (var item in mi)\n                {\n                    str += $\"方法名称：{item.Name} 类型:{item.MemberType} 声明此成员的类为：{item.DeclaringType} 模块：{item.Module} {enterEffect}\";\n                }\n            }\n\n\n            //反射调用方法一\n            string result = (string)type.InvokeMember(\"WorkFlow\", System.Reflection.BindingFlags.InvokeMethod | \n                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance,\n                null, obj, new object[] { \"测试传入的参数11111\" });\n            str += $\"反射调用方法一：{result} {enterEffect}\";\n\n            //反射调用方法二\n            System.Reflection.MethodInfo mi222 =type.GetMethod(\"WorkFlow\",\n                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance \n                | BindingFlags.IgnoreCase);\n\n            string result2 = (string)mi222.Invoke(obj,new object[] {\"测试传入的参数22222\" });\n\n            str += $\"反射调用方法二：{result2} {enterEffect}\";\n\n            //反射调用方法三\n            System.Reflection.MethodInfo mi333 = type.GetMethod(\"Test\");\n            string result3 = (string)mi333.Invoke(null,null);\n\n            str += $\"反射调用静态方法：{result3} {enterEffect}\";\n\n\n</code></pre>\n<p>MethodInfo 通过反射获取某个类的方法且执行效果：</p>\n<p><img alt=\"\" height=\"139\" src=\"..\\..\\static\\image\\8c5cb272ae844766870cc7b791d403c5.png\" width=\"706\"/></p>\n<h2> 2.8、PropertyInfo、EventInfo 和MemberInfo、ConstructorInfo</h2>\n<pre><code class=\"language-cs\">            PeopleInfo peopleInfo = new PeopleInfo();\n            peopleInfo.Id = \"CK00988\";\n            peopleInfo.Name = \"张一山\";\n            peopleInfo.Sex = \"男\";\n            peopleInfo.Age = 23;\n            peopleInfo.Work = \"信息部总监\";\n            System.Type type1 = peopleInfo.GetType();\n\nSystem.Reflection.PropertyInfo[] pi = type1.GetProperties();\n            if (pi != null)\n            {\n\n                foreach (var item in pi)\n                {\n                    str += $\"属性名称：{item.Name} 类型:{item.MemberType} 声明此成员的类为：{item.DeclaringType} 模块：{item.Module} {enterEffect}\";\n                }\n            }\n\n\n\n  System.Reflection.EventInfo[] eventInfo =  type1.GetEvents();\n            if (eventInfo!=null)\n            {\n\n                foreach (var item in eventInfo)\n                {\n                    str += $\"事件名称：{item.Name} 类型:{item.EventHandlerType} 声明此成员的类为：{item.DeclaringType} 模块：{item.Module} {enterEffect}\";\n                }\n            }\n\n\n            System.Reflection.MemberInfo[] type3 = type1.GetMember(\"Name\");\n            if (type3 != null)\n            {\n                foreach (var item in type3)\n                {\n                    str += $\"成员名称：{item.Name}   类型：{item.MemberType} 声明此成员的类为：{item.DeclaringType} {enterEffect}\";\n                }\n            }\n\n            System.Reflection.MemberInfo[] type4 = type1.GetMembers();\n            if (type4 != null)\n            {\n                foreach (var item in type4)\n                {\n                    str += $\"成员名称：{item.Name}   类型：{item.MemberType} 声明此成员的类为：{item.DeclaringType} {enterEffect}\";\n                }\n            }\n\n\n\n            System.Reflection.ConstructorInfo[] ci = type1.GetConstructors();\n            if (ci != null)\n            {\n                foreach (var item in ci)\n                {\n                    str += $\"构造成员名称：{item.Name} 类型：{item.MemberType} 声明此成员的类为：{item.DeclaringType} 模块：{item.Module} {enterEffect}\";\n                    System.Reflection.ParameterInfo[] pi111 = item.GetParameters();\n                    if (pi111 != null)\n                    {\n\n                        for (int i = 0; i &lt; pi111.Length; i++)\n                        {\n                            str += $\"参数{i}是：{pi111[i]} {enterEffect}\";\n                        }\n                    }\n\n                }\n\n                str += enterEffect;\n            }\n\n\n            //通过无参构造创建实例\n            object obj =  Activator.CreateInstance(type);\n            //将对象转为PeopleInfo类\n            PeopleInfo peopleInfo1 = obj as PeopleInfo;\n\n            str += $\"描述1：{peopleInfo1.desc} 名称1：{peopleInfo1.Name} 年龄1：{peopleInfo1.Age}{enterEffect}\";</code></pre>\n<p>执行效果：</p>\n<p><img alt=\"\" height=\"90\" src=\"..\\..\\static\\image\\0030163d54a845b3a9f086b49fad5c00.png\" width=\"615\"/></p>\n<p> <img alt=\"\" height=\"414\" src=\"..\\..\\static\\image\\235178870c354e70847024e6ca16713a.png\" width=\"543\"/></p>\n<p><img alt=\"\" height=\"82\" src=\"..\\..\\static\\image\\7b9d859436104a8183a9ce6fe1a543c2.png\" width=\"651\"/></p>\n<p><img alt=\"\" height=\"40\" src=\"..\\..\\static\\image\\5b71892886894655b35a9b79ea87a6b5.png\" width=\"433\"/></p>\n<h1> 三、反射的官网参考资料</h1>\n<p><a class=\"has-card\" href=\"https://docs.microsoft.com/zh-cn/dotnet/framework/reflection-and-codedom/reflection\" title=\".NET 中的反射 - .NET Framework | Microsoft Docs\"><span class=\"link-card-box\"><span class=\"link-title\">.NET 中的反射 - .NET Framework | Microsoft Docs</span><span class=\"link-link\"><img alt=\"\" class=\"link-link-icon\" src=\"..\\..\\static\\image\\icon-default.png\"/>https://docs.microsoft.com/zh-cn/dotnet/framework/reflection-and-codedom/reflection</span></span></a><a class=\"has-card\" href=\"https://docs.microsoft.com/zh-cn/dotnet/framework/reflection-and-codedom/viewing-type-information\" title=\"查看类型信息 | Microsoft Docs\"><span class=\"link-card-box\"><span class=\"link-title\">查看类型信息 | Microsoft Docs</span><span class=\"link-link\"><img alt=\"\" class=\"link-link-icon\" src=\"..\\..\\static\\image\\icon-default.png\"/>https://docs.microsoft.com/zh-cn/dotnet/framework/reflection-and-codedom/viewing-type-information</span></span></a></p>\n</div>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-02-22 17:06:24", "summary": "一、反射简介、反射的说明反射：指程序可以访问、检测和修改它本身状态或行为的一种能力即：审查元数据并收集关于它的类型信息的能力。元数据编译以后的最基本数据单元：指程序和程序类型本身的的信息，保存在程序的"}