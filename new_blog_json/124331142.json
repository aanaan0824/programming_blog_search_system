{"blogid": "124331142", "writerAge": "码龄4年", "writerBlogNum": "6", "writerCollect": "28", "writerComment": "0", "writerFan": "1", "writerGrade": "1级", "writerIntegral": "84", "writerName": "zhihao_Guo", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124331142.jpg", "writerRankTotal": "148317", "writerRankWeekly": "1010940", "writerThumb": "14", "writerVisitNum": "6898", "blog_read_count": "4384", "blog_time": "已于 2022-04-23 17:03:08 修改", "blog_title": "C++网络编程", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><ul><li><ul><li><a href=\"#socket_2\">网络通信socket</a></li><li><a href=\"#_14\">网络通信的过程</a></li><li><a href=\"#CAPI_18\">C++网络编程常用API</a></li><li><ul><li><a href=\"#API_21\">客户端网络通信过程与常用API</a></li><li><ul><li><a href=\"#1_int_socketint_familyint_typeint_protocol_28\">1, 创建套接字：int socket(int family,int type,int protocol);</a></li><li><a href=\"#2_int_connectint_sock_fd_struct_sockaddr_serv_addrint_addrlen_35\">2，客户端请求连接函数： int connect(int sock_fd, struct sockaddr *serv_addr,int addrlen);</a></li><li><a href=\"#31int_sendint_sockfdconst_void_bufint_lenint_flags_42\">3.1，int send(int sockfd,const void *buf,int len,int flags)</a></li><li><a href=\"#32_int_recvint_sockfdvoid_bufint_lenint_flags_50\">3.2 int recv(int sockfd,void *buf,int len,int flags);</a></li><li><a href=\"#4__int_closeint_sockfd_60\">4 int close(int sockfd)</a></li></ul>\n</li></ul>\n</li><li><a href=\"#API_65\">服务端网络通信过程与常用API</a></li><li><ul><li><ul><li><a href=\"#2__int_bindint_sockfd_const_struct_sockaddr_addr_socklen_t_addrlen_75\">2 套接字绑定函数 int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);</a></li><li><a href=\"#3__int_listenint_sockfd_int_backlog_82\">3 监听函数 int listen(int sockfd, int backlog);</a></li><li><a href=\"#4_int_acceptint_sockfdstruct_sockaddr_client_addrsocklen_t_addrlen_89\">4 int accept(int sockfd,struct sockaddr *client_addr,socklen_t *addrlen);</a></li></ul>\n</li></ul>\n</li><li><a href=\"#C_96\">C++网络编程小案例</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h4><a id=\"socket_2\"></a>网络通信socket</h4>\n<p>计算机是通过TCP/IP协议进行互联从而进行通信的，为了把复杂的TCP/IP协议隐藏起来，更方便的实现计算机中两个程序进行通信，引出了socket这个概念。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4c1e176fd3cf4ad08897f5c0a6a653f2.png\"/><br/> socket翻译为套接字，可以理解为IP地址与端口号的组合。<br/> socket提供了流（stream）和数据报（datagram）两种通信机制，即流socket(SOCK_STREAM)和数据报socket(SOCK_DGRAM)。</p>\n<p>流socket基于TCP协议，是一个有序、可靠、双向字节流的通道，传输数据不会丢失、不会重复、顺序也不会错乱。就像两个人在打电话，接通后就在线了，您一句我一句的聊天。</p>\n<p>数据报socket基于UDP协议，不需要建立和维持连接，可能会丢失或错乱。UDP不是一个可靠的协议，对数据的长度有限制，但是它的速度比较高。就像短信功能，一个人向另一个人发短信，对方不一定能收到。</p>\n<p>在实际开发中，数据报socket的应用场景极少，绝大部分情况下使用流套接字(SOCK_STREAM)。</p>\n<h4><a id=\"_14\"></a>网络通信的过程</h4>\n<p>在TCP/IP网络应用中，两个程序之间通信模式是客户/服务端模式（client/server），客户/服务端也叫作客户/服务器。服务端与客户端网络通信的交互过程如下图所示。<br/> <img alt=\"图1.2.1\" src=\"..\\..\\static\\image\\208b92d4c61543db8501925d27d4b26f.png\"/>图中使用了socket()，connect等函数是网络通信常用的API。对于程序员来说，只要用好socket相关的函数，就可以完成网络通信。</p>\n<h4><a id=\"CAPI_18\"></a>C++网络编程常用API</h4>\n<p>以下内容会比较枯燥，可以直接跳到第三章节，不懂的函数返回此处查找亦可。</p>\n<h5><a id=\"API_21\"></a>客户端网络通信过程与常用API</h5>\n<p>根据客户端的工作流程一次介绍如下套接字基本函数：</p>\n<ol><li>socket()</li><li>connect()</li><li>send()/recv()</li><li>close()</li></ol>\n<h6><a id=\"1_int_socketint_familyint_typeint_protocol_28\"></a>1, 创建套接字：int socket(int family,int type,int protocol);</h6>\n<p>功能介绍：在Linux系统中，一切皆文件。为了表示和区分已经打开的文件，UNIX/Linux会给文件分配一个ID，这个ID就是一个整数，被称为文件描述符。因此，网络连接也是一个文件，它也有文件描述符。通过socket()函数来创建一个网络连接或者说打开一个网络文件，socket()函数的返回值就是文件描述符，通过这个文件描述符我们就可以使用普通的文件操作来传输数据了。<br/> 参数介绍：<br/> 参数一：family 代表协议族，在socket中只能是AF_INET。<br/> 参数二：type 代表协议类型常见类型是SOCK_STREAM（TCP）,SOCK_DGRAM（UDP）<br/> 参数三：protocol 代表具体的协议，对于标准套接字来说，其值是0。(原始套接字基本不会使用)</p>\n<h6><a id=\"2_int_connectint_sock_fd_struct_sockaddr_serv_addrint_addrlen_35\"></a>2，客户端请求连接函数： int connect(int sock_fd, struct sockaddr *serv_addr,int addrlen);</h6>\n<p>功能介绍：客户端向服务端发起连接请求，当返回值是0时代表连接成功，返回值为-1时代表连接失败。<br/> 参数介绍：<br/> 参数一：sock_fd代表通过socket()函数返回的文件描述符<br/> 参数二：serv_addr 代表目标服务器的协议族，网络地址以及端口号。是一个sockaddr 类型的指针。<br/> 参数三：addrlen 代表第二个参数内容的大小。</p>\n<h6><a id=\"31int_sendint_sockfdconst_void_bufint_lenint_flags_42\"></a>3.1，int send(int sockfd,const void *buf,int len,int flags)</h6>\n<p>功能介绍：send函数用于把数据通过socket发送给对端。不论是客户端还是服务端，应用程序都用send函数来向TCP连接的另一端发送数据。客户端通过该函数向服务器应用程序发送数据。函数返回已发送的字节数。出错时返回-1<br/> 参数介绍：<br/> 参数一：sockfd代表 发送端的套接字描述符，即通过socket()函数返回的文件描述符。<br/> 参数二：buf 指明需要发送数据的内存地址，可以是C语言基本数据类型变量的地址，也可以是数组、结构体、字符串。<br/> 参数三： len 指明实际发送数据的字节数。<br/> 参数四：flags 一般设置为0，其他数值意义不大。</p>\n<h6><a id=\"32_int_recvint_sockfdvoid_bufint_lenint_flags_50\"></a>3.2 int recv(int sockfd,void *buf,int len,int flags);</h6>\n<p>功能介绍：recv函数用于接收对端socket发送过来的数据。不论是客户端还是服务端，应用程序都用recv函数接受来自TCP连接的另一端发送过来的数据。<br/> 如果socket对端没有发送数据，recv函数就会等待，如果对端发送了数据，函数返回接收到的字符数。出错时返回-1。如果socket被对端关闭，返回值为0。</p>\n<p>参数介绍：<br/> 参数一：sockfd代表接收端的套接字描述符，即通过socket()函数返回的文件描述符。<br/> 参数二：buf 为用于接收数据的内存地址，可以是C语言基本数据类型变量的地址，也可以是数组、结构体、字符串。只要是一块内存就行了。<br/> 参数三：len 指明需要接收数据的字节数。不能超过buf的大小，否则内存溢出。<br/> 参数四：flags填0，其他数值意义不大</p>\n<h6><a id=\"4__int_closeint_sockfd_60\"></a>4 int close(int sockfd)</h6>\n<p>函数功能：关闭套接字，并终止TCP连接。若成功则返回0.失败则返回-1；<br/> 函数参数：<br/> 参数一：sockfd代表接收端的套接字描述符，即通过socket()函数返回的文件描述符。</p>\n<h4><a id=\"API_65\"></a>服务端网络通信过程与常用API</h4>\n<p>根据客户端的工作流程一次介绍如下套接字基本函数：</p>\n<ol><li>socket()</li><li>bind()</li><li>listen()</li><li>accept()</li><li>recv()/send()</li><li>close()</li></ol>\n<p>其中部分函数已经介绍，这里就不在赘述了。</p>\n<h6><a id=\"2__int_bindint_sockfd_const_struct_sockaddr_addr_socklen_t_addrlen_75\"></a>2 套接字绑定函数 int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);</h6>\n<p>函数功能：服务端把用于通信的地址和端口绑定到socket上，当bind函数返回0时，为正确绑定，返回-1，则为绑定失败。<br/> 参数介绍：<br/> 参数一：sockfd 代表需要绑定的socket。是在创建socket套接字时返回的文件描述符。<br/> 参数二：addr 存放了服务端用于通信的地址和端口<br/> 参数三：addrlen 代表addr结构体的大小</p>\n<h6><a id=\"3__int_listenint_sockfd_int_backlog_82\"></a>3 监听函数 int listen(int sockfd, int backlog);</h6>\n<p>函数功能：listen函数的功能并不是等待一个新的connect的到来，真正等待connect的是accept函数。isten的操作就是当有较多的client发起connect时，server端不能及时的处理已经建立的连接，这时就会将connect连接放在等待队列中缓存起来。这个等待队列的长度有listen中的backlog参数来设定。当listen运行成功时，返回0；运行失败时，返回值为-1.</p>\n<p>参数说明：<br/> 参数一：sockfd是前面socket创建的文件描述符;<br/> 参数二：backlog是指server端可以缓存连接的最大个数，也就是等待队列的长度。</p>\n<h6><a id=\"4_int_acceptint_sockfdstruct_sockaddr_client_addrsocklen_t_addrlen_89\"></a>4 int accept(int sockfd,struct sockaddr *client_addr,socklen_t *addrlen);</h6>\n<p>函数功能：accept函数等待客户端的连接，如果没有客户端连上来，它就一直等待，这种方式称为阻塞。accept等待到客户端的连接后，创建一个新的socket，函数返回值就是这个新的socket，服务端用于这个新的socket和客户端进行报文的收发。<br/> 参数介绍：<br/> 参数一：sockfd 是已经被listen过的socket。<br/> 参数二：client_addr 用于存放客户端的地址信息，其中包含客户端的协议族，网络地址以及端口号。如果不需要客户端的地址，可以填0。<br/> 参数三：addrlen 用于存放参数二(client_addr)的长度</p>\n<h4><a id=\"C_96\"></a>C++网络编程小案例</h4>\n<p>经过以上概念的学习之后，就可以实现一个简单的网络编程案例。<br/> 在做以上案例时，你只需要在任意一个文件夹中创建两个文件–TrainClient.cpp 与 TrainServer.cpp。这里我在桌面创建了一个名称为webSocket的文件夹。<br/> 之后将以下代码分别复制到两个cpp文件中。</p>\n<p>（1） 简易服务器：这个服务器只能与一个客户端相连接，如果有多个客户端就不能用这个服务器进行连接。</p>\n<pre><code class=\"prism language-cpp\"> <span class=\"token comment\">//TrainServer.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h&gt;</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PORT</span> <span class=\"token expression\"><span class=\"token number\">9990</span>   </span><span class=\"token comment\">//端口号</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SIZE</span> <span class=\"token expression\"><span class=\"token number\">1024</span>   </span><span class=\"token comment\">//定义的数组大小</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">Creat_socket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">//创建套接字和初始化以及监听函数</span>\n<span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> listen_socket <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//创建一个负责监听的套接字</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>listen_socket <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"socket\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> addr<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* Internet地址族 */</span>\n    addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>PORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* 端口号 */</span>\n    addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span>INADDR_ANY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* IP地址 */</span>\n\n        <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>listen_socket<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//连接</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bind\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        ret <span class=\"token operator\">=</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>listen_socket<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">//监听</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"listen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> listen_socket<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">wait_client</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> listen_socket<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> cliaddr<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> addrlen <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>cliaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"等待客户端连接。。。。\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> client_socket <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>listen_socket<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>cliaddr<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>socklen_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>addrlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//创建一个和客户端交流的套接字</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>client_socket <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accept\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成功接收到一个客户端：%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">inet_ntoa</span><span class=\"token punctuation\">(</span>cliaddr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> client_socket<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">hanld_client</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> listen_socket<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> client_socket<span class=\"token punctuation\">)</span>   <span class=\"token comment\">//信息处理函数,功能是将客户端传过来的小写字母转化为大写字母</span>\n<span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span>SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>client_socket<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> SIZE<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                buf<span class=\"token punctuation\">[</span>ret<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ret<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                        buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token char\">'A'</span> <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>client_socket<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strncmp</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"end\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>client_socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> listen_socket <span class=\"token operator\">=</span> <span class=\"token function\">Creat_socket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> client_socket <span class=\"token operator\">=</span> <span class=\"token function\">wait_client</span><span class=\"token punctuation\">(</span>listen_socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">hanld_client</span><span class=\"token punctuation\">(</span>listen_socket<span class=\"token punctuation\">,</span> client_socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>listen_socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//TrainClient.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h&gt;</span></span>\n \n \n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PORT</span> <span class=\"token expression\"><span class=\"token number\">9990</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SIZE</span> <span class=\"token expression\"><span class=\"token number\">1024</span></span></span>\n \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> client_socket <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//创建和服务器连接套接字</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>client_socket <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"socket\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> addr<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\taddr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* Internet地址族 */</span>\n    addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>PORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* 端口号 */</span>\n    addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span>INADDR_ANY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* IP地址 */</span>\n\t<span class=\"token function\">inet_aton</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n\t<span class=\"token keyword\">int</span> addrlen <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> listen_socket <span class=\"token operator\">=</span>  <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>client_socket<span class=\"token punctuation\">,</span>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">,</span> addrlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//连接服务器</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>listen_socket <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connect\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成功连接到一个服务器\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span>SIZE<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">//向服务器发送数据，并接收服务器转换后的大写字母</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入你相输入的：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">write</span><span class=\"token punctuation\">(</span>client_socket<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>client_socket<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"buf = %s\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strncmp</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"END\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">//当输入END时客户端退出</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>listen_socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n</code></pre>\n<p>在webSocket的文件夹鼠标右击<br/> Opin in Terminal即可进入到命令行，依次执行如下命令</p>\n<pre><code class=\"prism language-bash\">g++ TrainClient.cpp -o TrainClient.o\ng++ TrainServer.cpp -o TrainServer.o\n</code></pre>\n<p>文件夹即可生成如下文<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9b791be49fbd4140b287efe2ea484ea1.png\"/><br/> 之后在webStocket文件夹下打开两个终端分别执行如下命令<br/> 运行服务端程序</p>\n<pre><code class=\"prism language-bash\">./TrainServer.o \n</code></pre>\n<p>运行客户端程序</p>\n<pre><code class=\"prism language-bash\">./TrainClient.o \n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f70b00c7face48179c49a87206b9aaa0.png\"/>之后输入任何信息，服务端便会收到且打印出来。<br/> i<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\91de63ea9f73461fb61931fe59f10352.png\"/><br/> 以上就是一个简易的C++网络编程小案例，我也是个新手，通过该文章一方面记录自己的学习过程，另一方面希望帮助像我一样连linux命令都不熟的人。</p>\n<p>大部分内容来源于CSDN博主「镜花寒」<br/> 原文链接：https://blog.csdn.net/ZH0314/article/details/77387162</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-04-23 17:03:08", "summary": "文章目录网络通信网络通信的过程网络编程常用客户端网络通信过程与常用创建套接字：，客户端请求连接函数：，服务端网络通信过程与常用套接字绑定函数监听函数网络编程小案例网络通信计算机是通过协议进行互联从而进"}