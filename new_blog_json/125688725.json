{"blogid": "125688725", "writerAge": "码龄4年", "writerBlogNum": "137", "writerCollect": "3421", "writerComment": "3426", "writerFan": "10430", "writerGrade": "7级", "writerIntegral": "11210", "writerName": "@魏大大", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125688725.jpg", "writerRankTotal": "1405", "writerRankWeekly": "174", "writerThumb": "3586", "writerVisitNum": "134360", "blog_read_count": "2217", "blog_time": "已于 2022-07-09 07:04:42 修改", "blog_title": "38.JavaScript中异步与回调的基本概念，以及回调地狱现象", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/c2eb18966e0040f59dab5ae93255a773.gif#pic_center\"/></p>\n<blockquote>\n<ul><li><a href=\"https://blog.csdn.net/weixin_43302112/category_11762926.html\">《JavaScript再出发》系列文章阅读</a></li><li><a href=\"http://t.csdn.cn/u7Ys6\">《仙宗》</a>发布<a href=\"http://t.csdn.cn/nJ1la\">招仙贴</a>，广招天下道友</li></ul>\n</blockquote>\n<p><img alt=\"回调地狱动图\" src=\"https://img-blog.csdnimg.cn/d19a889db87e40bcb547717b7f1a1d21.gif#pic_center\"/></p>\n<hr/>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#JavaScript_11\">JavaScript异步与回调</a></li><li><ul><li><a href=\"#_13\">一、前言</a></li><li><a href=\"#_26\">二、异步函数</a></li><li><a href=\"#_96\">三、回调函数</a></li><li><a href=\"#_168\">四、回调的回调</a></li><li><a href=\"#_244\">五、回调地狱</a></li><li><a href=\"#_320\">六、总结</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"JavaScript_11\"></a>JavaScript异步与回调</h1>\n<h2><a id=\"_13\"></a>一、前言</h2>\n<p>在学习本文内容之前，我们必须要先了解异步的概念，首先要强调的是<strong>异步和并行有着本质的区别</strong>。</p>\n<ul><li> <p>并行，一般指并行计算，是说同一时刻有多条指令同时被执行，这些指令可能执行于同一<code>CPU</code>的多核上，或者多个<code>CPU</code>上,或者多个物理主机甚至多个网络中。</p> </li><li> <p>同步，一般指按照预定的顺序依次执行任务，只有当上一个任务完成后，才开始执行下一个任务。</p> </li><li> <p>异步，与同步相对应，异步指的是让<code>CPU</code>暂时搁置当前任务,先处理下一个任务,当收到上个任务的回调通知后，再返回上个任务继续执行，<strong>整个过程无需第二个线程参与</strong>。</p> </li></ul>\n<p>也许用图片的方式解释并行、同步和异步更为直观，假设现在有A、B两个任务需要处理，使用并行、同步和异步的处理方式会分别采用如下图所示的执行方式：</p>\n<img alt=\"image-20220708230144638\" src=\"..\\..\\static\\image\\62c846db86548.png\"/>\n<h2><a id=\"_26\"></a>二、异步函数</h2>\n<p><code>JavaScript</code>为我们提供了许多异步的函数，这些函数允许我们方便的执行异步任务，也就是说，我们现在开始执行一个任务（函数），但任务会在稍后完成，具体完成时间并不清楚。</p>\n<p>例如，<code>setTimeout</code>函数就是一个非常典型的异步函数，此外，<code>fs.readFile</code>、<code>fs.writeFile</code>同样也是异步函数。</p>\n<p>我们可以自己定义一个异步任务的案例，例如自定义一个文件复制函数<code>copyFile(from,to)</code>：</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">copyFile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">from<span class=\"token punctuation\">,</span> to</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n        fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span>\n            <span class=\"token punctuation\">}</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Copy finished'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>函数<code>copyFile</code>首先从参数<code>from</code>读取文件数据，随后将数据写入参数<code>to</code>指向的文件。</p>\n<p>我们可以像这样调用<code>copyFile</code>：</p>\n<pre><code class=\"prism language-js\"><span class=\"token function\">copyFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./from.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'./to.txt'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//复制文件</span>\n</code></pre>\n<p>如果这个时候，<code>copyFile(...)</code>后面还有其他代码，那么程序不会等待<code>copyFile</code>执行结束，而是直接向下执行，文件复制任务何时结束，程序并不关心。</p>\n<pre><code class=\"prism language-js\"><span class=\"token function\">copyFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./from.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'./to.txt'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//下面的代码不会等待上面的代码执行结束</span>\n<span class=\"token operator\">...</span>\n</code></pre>\n<p>执行到这里，好像一切还都是正常的，但是，如果我们在<code>copyFile(...)</code>函数后，直接访问文件<code>./to.txt</code>中的内容会发生什么呢？</p>\n<p>这将不会读到复制过来的内容，就行这样：</p>\n<pre><code class=\"prism language-js\"><span class=\"token function\">copyFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./from.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'./to.txt'</span><span class=\"token punctuation\">)</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./to.txt'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>如果在执行程序之前，<code>./to.txt</code>文件还没有创建，将得到如下错误：</p>\n<pre><code class=\"prism language-bash\">PS E:<span class=\"token punctuation\">\\</span>Code<span class=\"token punctuation\">\\</span>Node<span class=\"token punctuation\">\\</span>demos<span class=\"token punctuation\">\\</span>03-callback<span class=\"token operator\">&gt;</span> <span class=\"token function\">node</span> .<span class=\"token punctuation\">\\</span>index.js\nfinished\nCopy finished\nPS E:<span class=\"token punctuation\">\\</span>Code<span class=\"token punctuation\">\\</span>Node<span class=\"token punctuation\">\\</span>demos<span class=\"token punctuation\">\\</span>03-callback<span class=\"token operator\">&gt;</span> <span class=\"token function\">node</span> .<span class=\"token punctuation\">\\</span>index.js\n错误：ENOENT: no such <span class=\"token function\">file</span> or directory, <span class=\"token function\">open</span> <span class=\"token string\">'E:\\Code\\Node\\demos\\03-callback\\to.txt'</span>\nCopy finished\n</code></pre>\n<p>即使<code>./to.txt</code>存在，也无法读取其中复制的内容。</p>\n<p>造成这种现象的原因是：<code>copyFile(...)</code>是异步执行的，程序执行到<code>copyFile(...)</code>函数后，并不会等待其复制完毕，而是直接向下执行，从而导致出现文件<code>./to.txt</code>不存在的错误，或者文件内容为空错误（如果提前创建文件）。</p>\n<h2><a id=\"_96\"></a>三、回调函数</h2>\n<p>异步函数的具体执行结束的时间是不能确定的，例如<code>readFile(from,to)</code>函数的执行结束时间大概率取决于文件<code>from</code>的大小。</p>\n<p>那么，问题在于我们如何才能准确的定位<code>copyFile</code>执行结束，从而读取<code>to</code>文件中的内容呢？</p>\n<p>这就需要使用回调函数，我们可以修改<code>copyFile</code>函数如下：</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">copyFile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">from<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n        fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span>\n            <span class=\"token punctuation\">}</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Copy finished'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//当复制操作完成后调用回调函数</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这样，我们如果需要在文件复制完成后，立即执行一些操作，就可以把这些操作写入回调函数中：</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">copyFile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">from<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n        fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span>\n            <span class=\"token punctuation\">}</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Copy finished'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//当复制操作完成后调用回调函数</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">copyFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./from.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'./to.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//传入一个回调函数，读取“to.txt”文件中的内容并输出</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./to.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>如果，你已经准备好了<code>./from.txt</code>文件，那么以上代码就可以直接运行：</p>\n<pre><code class=\"prism language-bash\">PS E:<span class=\"token punctuation\">\\</span>Code<span class=\"token punctuation\">\\</span>Node<span class=\"token punctuation\">\\</span>demos<span class=\"token punctuation\">\\</span>03-callback<span class=\"token operator\">&gt;</span> <span class=\"token function\">node</span> .<span class=\"token punctuation\">\\</span>index.js\nCopy finished\n加入社区“仙宗”，和我一起修仙吧\n社区地址：http://t.csdn.cn/EKf1h\n</code></pre>\n<p>这种编程方式被称为“基于回调”的异步编程风格，异步执行的函数应当提供一个回调参数用于在任务结束后调用。</p>\n<p>这种风格在<code>JavaScript</code>编程中普遍存在，例如文件读取函数<code>fs.readFile</code>、<code>fs.writeFile</code>都是异步函数。</p>\n<h2><a id=\"_168\"></a>四、回调的回调</h2>\n<p>回调函数可以准确的在异步工作完成后处理后继事宜，如果我们需要依次执行多个异步操作，就需要嵌套回调函数。</p>\n<p>案例场景：依次读取文件A和文件B</p>\n<p>代码实现：</p>\n<pre><code class=\"prism language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./A.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'读取文件A：'</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./B.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取文件B：\"</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>执行效果：</p>\n<pre><code class=\"prism language-bash\">PS E:<span class=\"token punctuation\">\\</span>Code<span class=\"token punctuation\">\\</span>Node<span class=\"token punctuation\">\\</span>demos<span class=\"token punctuation\">\\</span>03-callback<span class=\"token operator\">&gt;</span> <span class=\"token function\">node</span> .<span class=\"token punctuation\">\\</span>index.js\n读取文件A：仙宗无限好，只是缺了佬\n\n读取文件B：要想入仙宗，链接不能少  \nhttp://t.csdn.cn/H1faI\n</code></pre>\n<p>通过回调的方式，就可以在读取文件A之后，紧接着读取文件B。</p>\n<p>如果我们还想在文件B之后，继续读取文件C呢？这就需要继续嵌套回调：</p>\n<pre><code class=\"prism language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./A.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//第一次回调</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'读取文件A：'</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./B.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//第二次回调</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取文件B：\"</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./C.txt'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//第三次回调</span>\n            <span class=\"token operator\">...</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>也就是说，如果我们想要依次执行多个异步操作，需要多层嵌套回调，这在层数较少时是行之有效的，但是当嵌套次数过多时，会出现一些问题。</p>\n<p><strong>回调的约定</strong></p>\n<p>实际上，<code>fs.readFile</code>中的回调函数的样式并非个例，而是<code>JavaScript</code>中的普遍约定。我们日后会自定义大量的回调函数，也需要遵守这种约定，形成良好的编码习惯。</p>\n<p>约定是：</p>\n<ol><li><code>callback</code> 的第一个参数是为 error 而保留的。一旦出现 error，<code>callback(err)</code> 就会被调用。</li><li>第二个以及后面的参数用于接收异步操作的成功结果。此时 <code>callback(null, result1, result2,...)</code> 就会被调用。</li></ol>\n<p>基于以上约定，一个回调函数拥有错误处理和结果接收两个功能，例如<code>fs.readFile('...',(err,data)=&gt;{})</code>的回调函数就遵循了这种约定。</p>\n<h2><a id=\"_244\"></a>五、回调地狱</h2>\n<p>如果我们不深究的话，基于回调的异步方法处理似乎是相当完美的处理方式。问题在于，如果我们有一个接一个 的异步行为，那么代码就会变成这样：</p>\n<pre><code class=\"prism language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./a.txt'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//读取结果操作</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./b.txt'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//读取结果操作</span>\n        fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./c.txt'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">//读取结果操作</span>\n            fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./d.txt'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token operator\">...</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>以上代码的执行内容是：</p>\n<ol><li>读取文件a.txt，如果没有发生错误的话；</li><li>读取文件b.txt，如果没有发生错误的话；</li><li>读取文件c.txt，如果没有发生错误的话；</li><li>读取文件d.txt，…</li></ol>\n<p>随着调用的增加，代码嵌套层级越来越深，包含越来越多的条件语句，从而形成不断向右缩进的混乱代码，难以阅读和维护。</p>\n<p>我们称这种不断向右增长（向右缩进）的现象为“<strong>回调地狱</strong>”或者“<strong>末日金字塔</strong>”！</p>\n<pre><code class=\"prism language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a.txt'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b.txt'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n        fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c.txt'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n            fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d.txt'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n                fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'e.txt'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n                    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'f.txt'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n                        fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'g.txt'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n                            fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h.txt'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n                                <span class=\"token operator\">...</span>\n                                <span class=\"token comment\">/*\n\t\t\t\t\t\t\t\t  通往地狱的大门\n\t\t\t\t\t\t\t\t  ===&gt;\n                                */</span>\n                            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>虽然以上代码看起来相当规整，但是这只是用于举例的理想场面，通常业务逻辑中会有大量的条件语句、数据处理操作等代码，从而打乱当前美好的秩序，让代码变的难以维护。</p>\n<p>幸运的是，<code>JavaScript</code>为我们提供了多种解决途径，<code>Promise</code>就是其中的最优解。</p>\n<p>（原谅我卖了一个关子，这篇文章太长了，下篇继续讲）</p>\n<h2><a id=\"_320\"></a>六、总结</h2>\n<p>本文主要介绍了异步和回调的基本概念，二者是<code>JavaScript</code>的核心内容，需要所有热爱<code>JS</code>的小伙伴深入了解。</p>\n<ol><li>异步、并行、同步的基本概念；</li><li>使用回调函数处理异步任务；</li><li>回调函数的嵌套和约定；</li><li>回调地狱的基本概念；</li></ol>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-07-09 07:04:42", "summary": "在这里插入图片描述《再出发》系列文章阅读《仙宗》发布招仙贴，广招天下道友回调地狱动图文章目录异步与回调一、前言二、异步函数三、回调函数四、回调的回调五、回调地狱六、总结异步与回调一、前言在学习本文内容"}