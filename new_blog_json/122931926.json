{"blogid": "122931926", "writerAge": "码龄3年", "writerBlogNum": "112", "writerCollect": "221", "writerComment": "31", "writerFan": "249", "writerGrade": "4级", "writerIntegral": "1202", "writerName": "欧恩意", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122931926.jpg", "writerRankTotal": "47181", "writerRankWeekly": "31382", "writerThumb": "49", "writerVisitNum": "107745", "blog_read_count": "4510", "blog_time": "已于 2022-02-24 16:19:07 修改", "blog_title": "【一文搞懂】FD_SET的使用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>阅读大概需要十分钟，绝对干货，看完还没搞懂你找我。</p>\n</blockquote>\n<hr/>\n<p>随便查一下，可以看到对<code>FD_SET</code>的说明如下：</p>\n<blockquote>\n<p>一个<code>long</code>类型的数组，提供给<code>select()</code>机制使用的一种数据结构。主要功能是建立<mark>联系</mark>。其中每一个数组元素都能与<mark>任意一个打开的句柄</mark>（socket句柄、文件、命名管道、设备句柄等）建立联系。但是这种建立联系的工作是必须由程序员自己去完成的。</p>\n<blockquote>\n<h2><a id=\"_7\"></a>小白，比如像我这种就会纳闷，设置这种联系的目的是什么？</h2>\n<p>“可以理解为给<strong>打开的句柄</strong>添加了一种标识。(<em>读</em> or <em>写</em> or <em>异常</em> )的标识。暂且你就只需要知道我们可以通过<code>fd_set</code>(小写)去判断socket的操作即可。</p>\n<p>在这里，我们提出以下几个问题，从简单的到稍微复杂的依次如下：</p>\n<ol><li><code>fd_set</code>是什么？</li><li><code>FD_SET、FD_ZERO、FD_ISSET、FD_CLR</code>的作用都是什么？</li><li>如何通过<code>fd_set</code>(结合<code>select()</code>)判断句柄的状态？</li></ol>\n</blockquote>\n<p>本文就以上三个问题，回答和记录一下。实验环境（win10+vs2017+v141）</p>\n</blockquote>\n<p>socket相关使用的文件头大致如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;WinSock2.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"iphlpapi.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"ws2_32.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n</code></pre>\n<h1><a id=\"1_fd_set_29\"></a>1. <code>fd_set</code>是什么？</h1>\n<p>开篇我们就说了，<code>fd_set</code>是一个<code>long</code>类型的数组。我们可以认为这是一个很大的字节数组。</p>\n<p>先来一小段代码理解一下<code>fd_set</code>这个数组。</p>\n<p>代码<code>1-1</code></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tSOCKET socket <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 定义一个socket对象</span>\n\tfd_set fdset <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 声明并定义，如果不赋初值，fd_set中存储的则是随机值</span>\n\n\t<span class=\"token function\">FD_ZERO</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fdset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fdset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ’联系‘就是在这里产生的,以下4个操作会产生其他4个联系</span>\n\t<span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fdset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fdset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fdset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fdset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> isset <span class=\"token operator\">=</span> <span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fdset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ’联系‘就是在这里产生的</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"isset = %d\\n\"</span><span class=\"token punctuation\">,</span> isset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// isset = 1</span>\n\t<span class=\"token function\">FD_CLR</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fdset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tisset <span class=\"token operator\">=</span> <span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fdset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// isset = 0</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"isset = %d\\n\"</span><span class=\"token punctuation\">,</span> isset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>调试截图如下：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\f5be2fac6a7a4051a1f0d170a4f61408.png\"/></p>\n<p>可以看到，<code>fd_set</code>是一个长度为<strong>64</strong>的数组，由于代码进行了初始化，所以每一位都是<code>0</code>。在调用<code>FD_SET</code>的过程中，相当于<code>vector.push_back</code>的操作。</p>\n<p>其中，到底有多少个set，则是通过<code>fd_count</code>来决定的。如上截图，虽然看似<code>fd_array</code>有效的值只有<code>1、2、3、7</code>，但实际上<code>fd_count</code>的值为5。这里不是没有绑定到<code>scoket</code>，而是因为<code>socket</code>被初始化为<code>0</code>了，所以实际上<code>fdset</code>变量保存的有效数组为<code>[1,2,3,7,0]</code>。</p>\n<h1><a id=\"2_FD_SETFD_ZEROFD_ISSETFD_CLR_67\"></a>2. <code>FD_SET、FD_ZERO、FD_ISSET、FD_CLR</code>的作用都是什么？</h1>\n<p>首先我们得知道，提供的以上四个宏接口(注意是<mark>宏</mark>接口)的作用肯定是用来操作<code>fd_set</code>的。具体作用如下所示：</p>\n<p>代码<code>2-1</code></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 这里的fd 实际使用都是以 句柄 传入</span>\n<span class=\"token function\">FD_ZERO</span><span class=\"token punctuation\">(</span>fd_set <span class=\"token operator\">*</span>fdset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 将set清零使集合中不含任何fd</span>\n<span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>fdset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 将fd加入set集合</span>\n<span class=\"token function\">FD_CLR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>fdset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 将fd从set集合中清除</span>\n<span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>fdset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 检测fd是否在set集合中，不在则返回0</span>\n</code></pre>\n<p>正确的使用流程是：</p>\n<blockquote>\n<p>调用<code>FD_ZERO</code>将一个 <code>fd_set</code> 变量的所有位设置为<code>0</code>。要开启描述符集中的一位，可以调用<code>FD_SET</code>。调用<code>FD_CLR</code>可以清除一位。最后，可以调用<code>FD_ISSET</code>测试描述符集中的一个指定位是否已打开。</p>\n</blockquote>\n<p>还是结合<code>1-1</code>的代码：</p>\n<ol><li> <p><code>FD_ZERO</code>就是把当前<code>fd_set</code>所有位的数字都置为<code>0</code>。</p> </li><li> <p><code>FD_SET</code>实现了句柄和<code>fd_set</code>的<mark>联系</mark>，可以把<code>fd</code>（代码2-1），也就是<code>句柄</code>加入到<code>fd_set</code>中。</p> </li><li> <p><code>FD_CLR</code>清除所绑定的<mark>联系</mark>，<strong>注意注意</strong>：这里只清除你传进去的<code>fd</code>和<code>fd_set</code>之间的联系。需要注意的是，<code>FD_CLR</code>的操作类似于链表节点的删除（后续节点会填补被删除节点）。例如第一个问题中的代码；</p> <p>代码<code>2-2</code></p> <pre><code class=\"prism language-cpp\">\t<span class=\"token keyword\">int</span> isset <span class=\"token operator\">=</span> <span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fdset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// </span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"isset = %d\\n\"</span><span class=\"token punctuation\">,</span> isset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// isset = 1</span>\n\t<span class=\"token function\">FD_CLR</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fdset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tisset <span class=\"token operator\">=</span> <span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fdset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// isset = 0</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"isset = %d\\n\"</span><span class=\"token punctuation\">,</span> isset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>代码<code>2-2</code>第3行，只是清除了前文<code>FD_SET(socket, &amp;fdset);</code>绑定的联系，但是不涉及<code>1、2、3、7</code>与<code>fdset</code>之间的联系。怎么判断这种联系？就是通过<code>FD_ISSET</code></p> </li><li> <p><code>FD_ISSET</code>宏接口。如上代码（代码2-2）所示。如果绑定的联系在则返回1，反之，则返回0。</p>\n<ul><li>在调用<code>FD_ISSET</code>之后，isset的值为 1 【LINE 2】</li><li>调用<code>FD_CLR</code>之后，isset的值变为 0 【LINE 5】</li></ul> </li></ol>\n<h1><a id=\"3_fd_setselect_111\"></a>3. 如何通过<code>fd_set</code>(结合<code>select()</code>)判断句柄的状态？</h1>\n<blockquote>\n<p>要了解如何判断，还是得先回到<code>select()</code>函数<br/> 搬书《UNIX 环境高级编程》一书中 <mark><em>I/O多路转接</em></mark> 章节讲解的很清楚</p>\n</blockquote>\n<p>select()函数原型：</p>\n<p>代码<code>3-1</code></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span>\t<span class=\"token keyword\">int</span> maxfdpl<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>restrict readfds<span class=\"token punctuation\">,</span>\n \t\tfd_set <span class=\"token operator\">*</span>restrict writefds<span class=\"token punctuation\">,</span>fd_set <span class=\"token operator\">*</span>restrict exceptfds<span class=\"token punctuation\">,</span>\n \t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> <span class=\"token operator\">*</span>restrict typfr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回值∶准备就绪的描述符数目;若超时，返回0;若出错，返回-1</span>\n</code></pre>\n<blockquote>\n<p>在所有POSIX 兼容的平台上，select 函数使我们可以执行I/O多路转接。传给 select 的参数告诉内核∶</p>\n<ul><li> <p>我们所关心的描述符;</p> </li><li> <p>对于每个描述符我们所关心的条件（是否想从一个给定的描述符读，是否想写一个给定的描述符，是否关心一个给定描述符的异常条件）;</p> </li><li> <p>愿意等待多长时间（可以永远等待、等待一个固定的时间或者根本不等待）。</p> </li></ul>\n<p>select 返回时，内核告诉我们∶</p>\n<ul><li> <p>已准备好的描述符的总数量;</p> </li><li> <p>对于读、写或异常这3个条件中的每一个，哪些描述符已准备好。</p> </li></ul>\n<p>使用这种返回信息，就可调用相应的 I/O函数（一般是 read 或 write），并且确知该函数不会阻塞。</p>\n</blockquote>\n<ul><li>socket非阻塞<br/> 如果要设置socket为<mark>非阻塞</mark>的状态，则需要调用<code>ioctlsocket(m_Socket, FIONBIO, &amp;ul);</code>来设置。其中的<code>ul</code>是一个<code>unsigned long</code>类型的变量，在此函数接口中，<code>ul == 1</code>表示设置当前的<code>m_Socket</code>为非阻塞状态。</li></ul>\n<p>本文主要关注的是<code>select()</code>函数中间的三个参数<code>readfds、writefds、exceptfds</code>(第一个参数也很重要)。这三个参数是指向描述符集的指针，描述符集说明了我们关心的 <em>可读、可写、异常</em> 的结合。如下图所示：</p>\n<p><img alt=\"对select指定读、写和异常条件描述符\" src=\"..\\..\\static\\image\\86e58811440242d881d99bca6823c009.png\"/></p>\n<ol><li> <p><code>select()</code>的中间3个参数中的任意一个（或全部）可以是空指针，当你不需要进行操作判断读写异常的时候可以这么做。如果3个指针都是<code>NULL</code>，则<code>select</code>提供了比<code>sleep</code>更精确的定时器。（什么意思？sleep等待整数秒，而 select 的等待时间则可以小于1秒，其实际精度取决于系统时钟。）</p> </li><li> <p><code>select()</code>的第一个参数<code>maxfdp1</code>的意思是“最大文件描述符编号加1”。还是得先明白一个概念，即<code>fd_set</code>的每一位只能使用一次，只能标志一种状态。为避免发生重复应用的情况,如下代码，就需要通过第一个参数去控制。也就是第一个参数<code>maxfdp1</code>。那么第一个参数值如何选取？</p>\n<blockquote>\n<ul><li>设置为<code>FD_SETSIZE</code>。这是&lt;sys/select.h&gt;的一个常量，它指定最大描述符数（通常是1024）。但是一般情况下，该数过于大，一般的程序也就是3~10个描述符。所以一般情况下，选择手动指定。</li><li>手动指定，如下代码就属于手动指定。在所有的描述符集中，选择我们关注的最大的描述符数即可。下边代码中，指定的最大描述符数是3，因此<code>select</code>函数的第一个参数为<code>4(= 3+1)</code>，即最大描述符编号值加1。</li></ul>\n</blockquote> <p>代码<code>3-2</code></p> </li></ol>\n<pre><code class=\"prism language-cpp\">    fd_set readset<span class=\"token punctuation\">,</span> writeset<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">FD_ZERO</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>readset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">FD_ZERO</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>writeset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>readset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>readset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>writeset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>writeset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>readset<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>writeset<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 该处的select就会返回-1</span>\n</code></pre>\n<p>如代码<code>3-2</code>设置后的<code>readset、writeset</code>如下图所示：</p>\n<p><img alt=\"select的样本描述符集\" src=\"..\\..\\static\\image\\c49ddd24704f4c14bcb10da6a9f3817a.png\"/></p>\n<p><code>select()</code>有3个可能的返回值：</p>\n<ol><li>返回值<code>-1</code>表示出错。这是可能发生的，例如，在所指定的描述符一个都没有准备好时捕捉到一个信号。在此种情况下，一个描述符集都不修改。代码<code>3-2</code>就会返回<code>-1</code></li><li>返回值<code>0</code>表示没有描述符准备好。若指定的描述符一个都没准备好，指定的时间就过了，那么就会发生这种情况。此时，所有描述符集都不修改。</li><li>一个<code>正返回值</code>说明了已经准备好的描述符数。该值时3个描述符集中已经准备好的描述符之和，所以如果通过描述符已准备好读和写，那么在返回值中会对其计两次数。在这种情况下，3个描述符集中仍旧打开的位对应于已准备好的描述符。</li></ol>\n<blockquote>\n<p>对于“准备好”的含义要作一些更具体的说明。</p>\n<ul><li>若对读集（<em>readfds</em>）中的一个描述符进行的 read操作不会阻塞，则认为此描述符是准备好的。</li><li>若对写集（<em>writefds</em>）中的一个描述符进行的write 操作不会阻塞，则认为此描述符是准备好的。</li><li>若对异常条件集（<em>exceptfds</em>）中的一个描述符有一个未决异常条件，则认为此描述符是准备好的。现在，异常条件包括∶在网络连接上到达带外的数据，或者在处于数据包模式的伪终端上发生了某些条件。（Stevens【1990】的15.10 节中描述了后一种条件。）</li><li>对于读、写和异常条件，普通文件的文件描述符总是返回准备好。</li></ul>\n<blockquote>\n<p>一个描述符阻塞与否并不影响 select 是否阻塞，理解这一点很重要。也就是说，如果希望读个非阻塞描述符，并且以超时值为5秒调用 select，则 select 最多阻塞5s。相类似，如果指定一个无限的超时值，则在该描述符数据准备好，或捕捉到一个信号之前，select会一直阻塞。</p>\n<p>如果在一个描述符上碰到了文件尾端，则select 会认为该描述符是可读的。然后调用 read，它返回0，这是 UNIX系统指示到达文件尾端的方法。（很多人错误地认为，当到达文件尾端时，select会指示一个异常条件。）</p>\n</blockquote>\n</blockquote>\n<p>针对上述第3中情况，完整代码如下：</p>\n<p>这里需要远端开一个服务，可以使用华为的<u><a href=\"https://www.cnblogs.com/fole-del/p/15872619.html\">IPOP工具</a></u>。</p>\n<p>代码<code>3-3</code></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;WinSock2.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"iphlpapi.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"ws2_32.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    WSADATA wsa<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">WSAStartup</span><span class=\"token punctuation\">(</span><span class=\"token function\">MAKEWORD</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>wsa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tSOCKADDR_IN addrServer<span class=\"token punctuation\">;</span>\n\tSOCKET Socket <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>PF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> IPPROTO_TCP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tfd_set readset<span class=\"token punctuation\">,</span> writeset<span class=\"token punctuation\">;</span>\n\n\taddrServer<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>S_un<span class=\"token punctuation\">.</span>S_addr <span class=\"token operator\">=</span> <span class=\"token function\">inet_addr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.3.16\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\taddrServer<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span>\n\taddrServer<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">6000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n\tDWORD dwResult <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>Socket<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>SOCKADDR<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>addrServer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SOCKADDR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">FD_ZERO</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>readset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">FD_ZERO</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>writeset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span>Socket<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>readset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span>Socket<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>writeset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/*\n\tint isset = FD_ISSET(Socket, &amp;readset); // isset = 0\n\tprintf(\"isset = %d\\n\", isset);\n\tisset = FD_ISSET(Socket, &amp;writeset); // isset = 0\n\tprintf(\"isset = %d\\n\", isset);\n\t*/</span>\n\n\t<span class=\"token keyword\">int</span> nRet <span class=\"token operator\">=</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>readset<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>writeset<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The Ret of Select is \"</span> <span class=\"token operator\">&lt;&lt;</span> nRet <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出：</p>\n<div>\n  The Ret of Select is 1 \n</div>\n<p>那么全篇都在说的 <em>读、写、异常</em> 是怎么判断的呢？</p>\n<p>答案是<code>FD_ISSET</code>。</p>\n<ol><li> <p>在使用前我们通过<code>FD_SET</code>去建立这种读写异常的联系</p> </li><li> <p><code>select()</code>的时候会修改<code>fd_set</code>的值，而这个修改完之后的值就是我们可以拿去判断的东西。如代码代码<code>3-3</code>，我们可以在select之后增加判断条件</p> <pre><code class=\"prism language-cpp\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span>m_Socket<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>readset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"sock not in readset!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span>m_Socket<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>writeset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"sock not in writeset!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span>m_Socket<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>exceptset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getsockopt fail!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>这个时候就可以判断句柄的操作了。</p> </li></ol>\n<p>废话不多说，直接上现场：</p>\n<p>因为没有发生读操作，所以只标志了写的操作。<img alt=\"运行截图\" src=\"..\\..\\static\\image\\24caaeb32bd24c75a8f31ed293916b98.png\"/></p>\n<blockquote>\n<p>补充：</p>\n<p>参考资料：</p>\n<ol><li>《unix高级环境编程》</li><li>win32官方文档</li></ol>\n</blockquote>\n<blockquote>\n<p>以上就是关于<code>fd_set</code>的详细说明。</p>\n<p>为避免误人子弟，如有误，还望评论或私信指正。✌✌✌🤝</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-02-24 16:19:07", "summary": "阅读大概需要十分钟，绝对干货，看完还没搞懂你找我。随便查一下，可以看到对的说明如下：一个类型的数组，提供给机制使用的一种数据结构。主要功能是建立联系。其中每一个数组元素都能与任意一个打开的句柄句柄、文"}