{"blogid": "125076680", "writerAge": "码龄5年", "writerBlogNum": "367", "writerCollect": "13447", "writerComment": "5162", "writerFan": "30916", "writerGrade": "7级", "writerIntegral": "17124", "writerName": "IT邦德", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125076680.jpg", "writerRankTotal": "469", "writerRankWeekly": "27", "writerThumb": "6589", "writerVisitNum": "1255525", "blog_read_count": "8325", "blog_time": "于 2022-06-01 11:31:04 发布", "blog_title": "MySQL六脉神剑，SQL通关大总结", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>📢📢📢📣📣📣<br/> 哈喽！大家好，我是【IT邦德】，江湖人称jeames007，10年DBA工作经验<br/> 一位上进心十足的【大数据领域博主】！😜😜😜<br/> 中国DBA联盟(ACDU)成员，目前从事DBA及程序编程<br/> 擅长主流数据Oracle、MySQL、PG 运维开发，备份恢复，安装迁移，性能优化、故障应急处理等。<br/> ✨ 如果有对【数据库】感兴趣的【小可爱】，欢迎关注【IT邦德】💞💞💞<br/> ❤️❤️❤️感谢各位大可爱小可爱！❤️❤️❤️</p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_9\">前言</a></li><li><ul><li><a href=\"#_1SQL_15\">🐴 1.什么是SQL?</a></li><li><ul><li><a href=\"#_11_SQL_16\">🌈 1.1 SQL起源</a></li><li><a href=\"#_12_SQL_21\">🌈 1.2 SQL分类</a></li></ul>\n</li><li><a href=\"#_2DQL_54\">🐴 2.DQL数据查询</a></li><li><ul><li><a href=\"#_21__55\">🌈 2.1 语法介绍</a></li><li><a href=\"#_22__73\">🌈 2.2 简单查询</a></li><li><ul><li><a href=\"#_221__74\">⭕️ 2.2.1 检索数据</a></li><li><a href=\"#_222__129\">⭕️ 2.2.2 别名查询</a></li><li><a href=\"#_223__171\">⭕️ 2.2.3 去重查询</a></li><li><a href=\"#_224__196\">⭕️ 2.2.4 运算查询</a></li><li><a href=\"#_225__233\">⭕️ 2.2.5 数据过滤</a></li><li><a href=\"#_226__277\">⭕️ 2.2.6 排序查询</a></li><li><a href=\"#_226__322\">⭕️ 2.2.6 分组查询</a></li><li><a href=\"#_227__400\">⭕️ 2.2.7 正则表达式</a></li></ul>\n</li><li><a href=\"#_23__464\">🌈 2.3 子查询</a></li><li><a href=\"#_24__580\">🌈 2.4 多表连接</a></li><li><a href=\"#_25__684\">🌈 2.5 组合查询</a></li><li><a href=\"#_26__732\">🌈 2.6 函数用法</a></li><li><a href=\"#_27__745\">🌈 2.7 开窗函数</a></li></ul>\n</li><li><a href=\"#_3DML_780\">🐴 3.DML数据操纵</a></li><li><ul><li><a href=\"#_31_INSERT_781\">🌈 3.1 插入INSERT</a></li><li><a href=\"#_32_UPDATE_826\">🌈 3.2 更新UPDATE</a></li><li><a href=\"#_33_DELETE_837\">🌈 3.3 删除DELETE</a></li></ul>\n</li><li><a href=\"#_4DDL_843\">🐴 4.DDL数据定义</a></li><li><ul><li><a href=\"#_41__846\">🌈 4.1 表的创建、修改、删除</a></li><li><a href=\"#_42__930\">🌈 4.2 数据完整性约束</a></li><li><a href=\"#_43__1012\">🌈 4.3 更新完整性约束条件</a></li><li><a href=\"#_44__1039\">🌈 4.4 索引的创建</a></li></ul>\n</li><li><a href=\"#_5DCL_1120\">🐴 5.DCL数据控制</a></li><li><ul><li><a href=\"#_51__1128\">🌈 5.1 创建用户</a></li><li><a href=\"#_52__1132\">🌈 5.2 修改用户名</a></li><li><a href=\"#_53__1135\">🌈 5.3 修改密码</a></li><li><a href=\"#_54__1143\">🌈 5.4 删除用户</a></li><li><a href=\"#_55__1149\">🌈 5.5 权限管理</a></li></ul>\n</li><li><a href=\"#_6TCL_1180\">🐴 6.TCL事务控制</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_9\"></a>前言</h1>\n<font color=\"#999AAA\"> 应粉丝需求，近期总结了下MySQL篇的SQL通关总结，分享给给为，祝大家考试，日常工作得心应手</font>\n<hr color=\"#000000\" size='1\"'/>\n<h2><a id=\"_1SQL_15\"></a>🐴 1.什么是SQL?</h2>\n<h3><a id=\"_11_SQL_16\"></a>🌈 1.1 SQL起源</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\63e3585677594816a6cd3fcf80e114e0.png\"/></p>\n<blockquote>\n<p>📖 SQL起源科普<br/> SQL是由IBM公司在1974~1979年之间根据E.J.Codd发表的关系数据库理论为基础开发的，其前身是“SEQUEL”，后更名为SQL。由于SQL语言具有集数据查询、数据操纵、数据定义和数据控制功能于一体，类似自然语言、简单易用以及非过程化等特点，得到了快速的发展，并于1986年10月，被美国国家标准协会（American National Standards Institute，ANSI）采用为关系数据库管理系统的标准语言，后为国际标准化组织（International Organization for Standardization，ISO）采纳为国际标准。</p>\n</blockquote>\n<h3><a id=\"_12_SQL_21\"></a>🌈 1.2 SQL分类</h3>\n<blockquote>\n<p>SQL（Structured Query Language）是结构化查询语言的简称，它是一种数据库查询和程序设计语言，同时也是目前使用最广泛的关系型数据库操作语言。在数据库管理系统中，使用SQL语言来实现数据的存取、查询、更新等功能。SQL是一种非过程化语言，只需要提出“做什么”，而不需要指明“怎么做”。</p>\n</blockquote>\n<p>📖 SQL语言分为五个部分：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dad5e5892df8495d8d2169434cb1d303.png\"/></p>\n<blockquote>\n<p>① 数据查询语言（Data Query Language，DQL）：<br/> DQL主要用于数据的查询，其基本结构是使用SELECT子句，<br/> FROM子句和WHERE子句的组合来查询一条或多条数据。<br/> ② 数据操作语言（Data Manipulation Language，DML）：<br/> DML主要用于对数据库中的数据进行增加、修改和删除的操作，其主要包括：<br/> INSERT：增加数据<br/> UPDATE：修改数据<br/> DELETE：删除数据<br/> ③ 数据定义语言（Data Definition Language，DDL）：<br/> DDL主要用针对是数据库对象（表、索引、视图、&gt;触发器、存储过程、函数、表空间等）进行创建、修改和删除操作。其主要包括：<br/> CREATE：创建数据库对象<br/> ALERT：修改数据库对象<br/> DROP：删除数据库对象<br/> ④ 数据控制语言（Data Control Language，DCL）：<br/> DCL用来授予或回收访问数据库的权限，其主要包括：<br/> GRANT：授予用户某种权限<br/> REVOKE：回收授予的某种权限<br/> 事务控制语言（Transaction Control Language，TCL）：<br/> ⑤ TCL用于数据库的事务管理。其主要包括：<br/> START TRANSACTION：开启事务<br/> COMMIT：提交事务<br/> ROLLBACK：回滚事务<br/> SET TRANSACTION：设置事务的属性</p>\n</blockquote>\n<h2><a id=\"_2DQL_54\"></a>🐴 2.DQL数据查询</h2>\n<h3><a id=\"_21__55\"></a>🌈 2.1 语法介绍</h3>\n<p>🍌 <font color=\"green\" size=\"3\">语法格式：</font></p>\n<blockquote>\n<p>📖 加中括号的部分可以省略<br/> SELECT<br/> [ALL|DISTINCT]<br/> &lt;目标列的表达式1&gt; [别名],<br/> &lt;目标列的表达式2&gt; [别名]…<br/> FROM &lt;表名或视图名&gt; [别名], &lt;表名或视图名&gt; [别名]…<br/> [WHERE &lt;条件表达式&gt;]<br/> [GROUP BY &lt;列名&gt;]<br/> [HAVING &lt;条件表达式&gt;]<br/> [ORDER BY &lt;列名&gt; [ASC|DESC]]<br/> [LIMIT &lt;数字或列表&gt;];</p>\n</blockquote>\n<p>🍌 <font color=\"green\" size=\"3\">精简版格式: </font></p>\n<p><font color=\"#DC143C\" size=\"3\">SELECT </font> *| 列名 <font color=\"#DC143C\" size=\"3\">FROM</font> 表 <font color=\"#DC143C\" size=\"3\">WHERE </font> 条件;</p>\n<h3><a id=\"_22__73\"></a>🌈 2.2 简单查询</h3>\n<h4><a id=\"_221__74\"></a>⭕️ 2.2.1 检索数据</h4>\n<p>我们需要通过下面的代码创建一个表，而后录入一些数据，示例代码及数据表示例如下：</p>\n<blockquote>\n<p>DROP TABLE IF EXISTS <code>Customers</code>;<br/> CREATE TABLE IF NOT EXISTS <code>Customers</code>(<br/> cust_id VARCHAR(255) NOT NULL COMMENT ‘客户id’,<br/> cust_name VARCHAR(255) NOT NULL COMMENT ‘客户姓名’<br/> );<br/> INSERT <code>Customers</code><br/> VALUES (‘a1’,‘andy’),<br/> (‘a2’,‘ben’),<br/> (‘a3’,‘tony’),<br/> (‘a4’,‘tom’),<br/> (‘a5’,‘an’),<br/> (‘a6’,‘lee’),<br/> (‘a7’,‘hex’);</p>\n</blockquote>\n<p>案例 1️⃣ 现在有Customers 表，返回所有列</p>\n<pre><code class=\"prism language-sql\">🖊 答案如下：\nmysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> Customers<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------+-----------+</span>\n<span class=\"token operator\">|</span> cust_id <span class=\"token operator\">|</span> cust_name <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------+-----------+</span>\n<span class=\"token operator\">|</span> a1      <span class=\"token operator\">|</span> andy      <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> a2      <span class=\"token operator\">|</span> ben       <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> a3      <span class=\"token operator\">|</span> tony      <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> a4      <span class=\"token operator\">|</span> tom       <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> a5      <span class=\"token operator\">|</span> an        <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> a6      <span class=\"token operator\">|</span> lee       <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> a7      <span class=\"token operator\">|</span> hex       <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------+-----------+</span>\n<span class=\"token number\">7</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>案例 2️⃣ 现在有Customers 表，只返回客户姓名(cust_name)列</p>\n<pre><code class=\"prism language-sql\">🖊 答案如下：\nmysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> Customers<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------+</span>\n<span class=\"token operator\">|</span> cust_name <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------+</span>\n<span class=\"token operator\">|</span> andy      <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> ben       <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> tony      <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> tom       <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> an        <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> lee       <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> hex       <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------+-----------+</span>\n<span class=\"token number\">7</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span>\n</code></pre>\n<h4><a id=\"_222__129\"></a>⭕️ 2.2.2 别名查询</h4>\n<p>我们需要通过下面的代码创建一个表，而后录入一些数据，示例代码及数据表示例如下：</p>\n<blockquote>\n<p>DROP TABLE IF EXISTS <code>Vendors</code>;<br/> CREATE TABLE IF NOT EXISTS <code>Vendors</code> (<br/> <code>vend_id</code> VARCHAR(255) NOT NULL COMMENT ‘供应商id’,<br/> <code>vend_name</code> VARCHAR(255) NOT NULL COMMENT ‘供应商名称’,<br/> <code>vend_address</code> VARCHAR(255) NOT NULL COMMENT ‘供应商地址’,<br/> <code>vend_city</code> VARCHAR(255) NOT NULL COMMENT ‘供应商城市’<br/> );<br/> INSERT INTO <code>Vendors</code> VALUES (‘a001’,‘tencent cloud’,‘address1’,‘shenzhen’),<br/> (‘a002’,‘huawei cloud’,‘address2’,‘dongguan’),<br/> (‘a003’,‘aliyun cloud’,‘address3’,‘alibaba’);</p>\n</blockquote>\n<p>案例 1️⃣ 编写 SQL 语句，从 Vendors 表中检索vend_id、vend_name、vend_address 和 vend_city，<br/> 将 vend_name重命名为 vname，将 vend_city 重命名为 vcity,<br/> 将 vend_address重命名为 vaddress</p>\n<pre><code class=\"prism language-sql\">🖊 答案如下：\nmysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">select</span> \nvend_id<span class=\"token punctuation\">,</span>\nvend_name <span class=\"token keyword\">as</span> vname<span class=\"token punctuation\">,</span>\nvend_address <span class=\"token keyword\">as</span> vaddress<span class=\"token punctuation\">,</span>\nvend_city <span class=\"token keyword\">as</span> vcity\n<span class=\"token keyword\">from</span> Vendors<span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">+</span><span class=\"token comment\">---------+---------------+----------+----------+</span>\n<span class=\"token operator\">|</span> vend_id <span class=\"token operator\">|</span> vname         <span class=\"token operator\">|</span> vaddress <span class=\"token operator\">|</span> vcity    <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------+---------------+----------+----------+</span>\n<span class=\"token operator\">|</span> a003    <span class=\"token operator\">|</span> aliyun cloud  <span class=\"token operator\">|</span> address3 <span class=\"token operator\">|</span> alibaba  <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> a002    <span class=\"token operator\">|</span> huawei cloud  <span class=\"token operator\">|</span> address2 <span class=\"token operator\">|</span> dongguan <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> a001    <span class=\"token operator\">|</span> tencent cloud <span class=\"token operator\">|</span> address1 <span class=\"token operator\">|</span> shenzhen <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------+---------------+----------+----------+</span>\n<span class=\"token number\">3</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>🐘 说明：</p>\n<blockquote>\n<p>1.别名的常见用法是在检索出的结果中重命名表的列字段<br/> 2.表别名,一般用于多表查询中<br/> <font color=\"#DC143C\" size=\"3\">3.列使用别名后，如果做排序，一定概要用别名<br/> 例：SELECT pname AS ‘商品名称’, price ‘商品价格’ FROM product order by 商品名称；</font></p>\n</blockquote>\n<h4><a id=\"_223__171\"></a>⭕️ 2.2.3 去重查询</h4>\n<p>我们需要通过下面的代码创建一个表，而后录入一些数据，示例代码及数据表示例如下：</p>\n<blockquote>\n<p>DROP TABLE IF EXISTS <code>OrderItems</code>;<br/> CREATE TABLE IF NOT EXISTS <code>OrderItems</code>(<br/> prod_id VARCHAR(255) NOT NULL COMMENT ‘商品id’<br/> );<br/> INSERT <code>OrderItems</code> VALUES (‘a1’),(‘a2’),(‘a3’),(‘a4’),(‘a5’),(‘a6’),(‘a6’);</p>\n</blockquote>\n<p>案例 1️⃣ 编写SQL 语句，检索并列出所有已订购商品（prod_id）的去重后的清单</p>\n<pre><code class=\"prism language-sql\">🖊 答案如下：\nmysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">select</span> <span class=\"token keyword\">distinct</span> prod_id <span class=\"token keyword\">from</span> OrderItems<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------+</span>\n<span class=\"token operator\">|</span> prod_id <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------+</span>\n<span class=\"token operator\">|</span> a1      <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> a2      <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> a3      <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> a4      <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> a5      <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> a6      <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------+</span>\n<span class=\"token number\">6</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.04</span> sec<span class=\"token punctuation\">)</span>\n</code></pre>\n<h4><a id=\"_224__196\"></a>⭕️ 2.2.4 运算查询</h4>\n<p>我们需要通过下面的代码创建一个表，而后录入一些数据，示例代码及数据表示例如下：</p>\n<blockquote>\n<p>DROP TABLE IF EXISTS <code>Products</code>;<br/> CREATE TABLE IF NOT EXISTS <code>Products</code> (<br/> <code>prod_id</code> VARCHAR(255) NOT NULL COMMENT ‘产品 ID’,<br/> <code>prod_price</code> DOUBLE NOT NULL COMMENT ‘产品价格’<br/> );<br/> INSERT INTO <code>Products</code> VALUES (‘a0011’,9.49),<br/> (‘a0019’,600),<br/> (‘b0019’,1000);</p>\n</blockquote>\n<p>案例 1️⃣ 编写 SQL语句，从 Products 表中返回 prod_id、prod_price 和 sale_price。<br/> sale_price 是一个包含促销价格的计算字段。<br/> 促销价格乘以 0.9，得到原价的 90%（即 10%的折扣）</p>\n<pre><code class=\"prism language-sql\">🖊 答案如下：\nmysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">select</span> prod_id<span class=\"token punctuation\">,</span>\nprod_price<span class=\"token punctuation\">,</span>\nprod_price<span class=\"token operator\">*</span><span class=\"token number\">0.9</span> sale_price\n<span class=\"token keyword\">from</span> Products<span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">+</span><span class=\"token comment\">---------+------------+------------+</span>\n<span class=\"token operator\">|</span> prod_id <span class=\"token operator\">|</span> prod_price <span class=\"token operator\">|</span> sale_price <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------+------------+------------+</span>\n<span class=\"token operator\">|</span> a0011   <span class=\"token operator\">|</span>       <span class=\"token number\">9.49</span> <span class=\"token operator\">|</span>      <span class=\"token number\">8.541</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> a0019   <span class=\"token operator\">|</span>        <span class=\"token number\">600</span> <span class=\"token operator\">|</span>        <span class=\"token number\">540</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> b0019   <span class=\"token operator\">|</span>       <span class=\"token number\">1000</span> <span class=\"token operator\">|</span>        <span class=\"token number\">900</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------+------------+------------+</span>\n<span class=\"token number\">3</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>🐘 说明：</p>\n<blockquote>\n<p>通过MySQL运算符进行运算，就可以获取到表结构以外的另一种数据。<br/> <font color=\"#DC143C\" size=\"3\">常用的算数运算符包括：加法、减法、乘法、除法及求余等</font></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fd6b0912be07452785c5472692562f25.png\"/></p>\n<h4><a id=\"_225__233\"></a>⭕️ 2.2.5 数据过滤</h4>\n<p>我们需要通过下面的代码创建一个表，而后录入一些数据，示例代码及数据表示例如下：</p>\n<blockquote>\n<p>DROP TABLE IF EXISTS <code>Products</code>;<br/> CREATE TABLE IF NOT EXISTS <code>Products</code> (<br/> <code>prod_id</code> VARCHAR(255) NOT NULL COMMENT ‘产品 ID’,<br/> <code>prod_name</code> VARCHAR(255) NOT NULL COMMENT ‘产品名称’,<br/> <code>prod_price</code> DOUBLE NOT NULL COMMENT ‘产品价格’<br/> );<br/> INSERT INTO <code>Products</code> VALUES (‘a0011’,‘egg’,3),<br/> (‘a0019’,‘sockets’,4),<br/> (‘b0019’,‘coffee’,15);</p>\n</blockquote>\n<p>案例 1️⃣ 编写 SQL 语句，返回 Products 表中所有价格在 3 美元到 6 美元之间的产品的名称（prod_name）和价格（prod_price），然后按价格对结果进行排序</p>\n<pre><code class=\"prism language-sql\">mysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">select</span> prod_name<span class=\"token punctuation\">,</span>prod_price <span class=\"token keyword\">from</span> Products \n<span class=\"token keyword\">where</span> prod_price <span class=\"token operator\">between</span> <span class=\"token number\">3</span> <span class=\"token operator\">and</span> <span class=\"token number\">6</span>\n<span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> prod_price<span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------+------------+</span>\n<span class=\"token operator\">|</span> prod_name <span class=\"token operator\">|</span> prod_price <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------+------------+</span>\n<span class=\"token operator\">|</span> egg       <span class=\"token operator\">|</span>          <span class=\"token number\">3</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> sockets   <span class=\"token operator\">|</span>          <span class=\"token number\">4</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------+------------+</span>\n<span class=\"token number\">2</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.01</span> sec<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>🐘 说明：</p>\n<blockquote>\n<p>数据过滤一般会用到比较运算符，常用的比较和逻辑运算符如下图所示</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c9ede935ab4b4ca1837d20013e7adc56.png\"/><br/> 案例 2️⃣ 列举常用的数据过滤</p>\n<blockquote>\n<p>📖 查询 score 表中成绩在 50-80 之间的所有行（区间查询和运算符查询）<br/> SELECT * FROM score WHERE degree BETWEEN 50 AND 80;<br/> SELECT * FROM score WHERE degree &gt;= 60 AND degree &lt;= 80;<br/> 📖 查询 student 表中 ‘95033’ 班或性别为 ‘女’ 的所有行<br/> SELECT * FROM student WHERE class = ‘95033’ or sex = ‘女’;<br/> 📖 查询第二个字为’蔻’的所有商品<br/> SELECT * FROM product WHERE pname like ‘_蔻%’;<br/> 📖 查询category_id 为 null 的商品<br/> SELECT * FROM product WHERE category_id IS NULL;<br/> 📖 查询价格不是800的所有商品<br/> SELECT * FROM product WHERE NOT(price = 800);</p>\n</blockquote>\n<h4><a id=\"_226__277\"></a>⭕️ 2.2.6 排序查询</h4>\n<p>🍌 <font color=\"green\" size=\"3\">语法格式：</font></p>\n<blockquote>\n<p>SELECT<br/> 字段名1, 字段名2, …<br/> FROM 表名<br/> ORDER BY 字段名1 [asc|desc], 字段名2 [asc|desc]…</p>\n</blockquote>\n<p>我们需要通过下面的代码创建一个表，而后录入一些数据，示例代码及数据表示例如下：</p>\n<blockquote>\n<p>CREATE TABLE student (<br/> no VARCHAR(20) PRIMARY KEY,<br/> name VARCHAR(20) NOT NULL,<br/> sex VARCHAR(10) NOT NULL,<br/> birthday DATE, – 生日<br/> class VARCHAR(20) – 所在班级<br/> );<br/> INSERT INTO student VALUES(‘101’, ‘曾华’, ‘男’, ‘1977-09-01’, ‘95033’);<br/> INSERT INTO student VALUES(‘102’, ‘匡明’, ‘男’, ‘1975-10-02’, ‘95031’);<br/> INSERT INTO student VALUES(‘103’, ‘王丽’, ‘女’, ‘1976-01-23’, ‘95033’);<br/> INSERT INTO student VALUES(‘104’, ‘李军’, ‘男’, ‘1976-02-20’, ‘95033’);<br/> INSERT INTO student VALUES(‘105’, ‘王芳’, ‘女’, ‘1975-02-10’, ‘95031’);<br/> INSERT INTO student VALUES(‘106’, ‘陆军’, ‘男’, ‘1974-06-03’, ‘95031’);<br/> INSERT INTO student VALUES(‘107’, ‘王飘飘’, ‘男’, ‘1976-02-20’, ‘95033’);<br/> INSERT INTO student VALUES(‘108’, ‘张全蛋’, ‘男’, ‘1975-02-10’, ‘95031’);<br/> INSERT INTO student VALUES(‘109’, ‘赵铁柱’, ‘男’, ‘1974-06-03’, ‘95031’);</p>\n</blockquote>\n<p>案例 1️⃣ 以 class 降序的方式查询 student 表的所有行</p>\n<blockquote>\n<p>SELECT * FROM student ORDER BY class DESC;</p>\n</blockquote>\n<p>案例 2️⃣ 以class 降序、birthday 升序查询 student 表的所有行</p>\n<blockquote>\n<p>SELECT * FROM student ORDER BY birthday ASC, class DESC;</p>\n</blockquote>\n<p>🐘 说明：</p>\n<blockquote>\n<p>① asc 代表升序，desc 代表降序，不声明默认为升序；<br/> ② order by 用于子句可以支持单个字段，多个字段，表达式，函数，别名；<br/> ③ order by 子句放在查询语句最后面，LIMIT 子句除外。<br/> ④ 常用LIMIT使用如下：<br/> SELECT s_no, c_no FROM score order by degree desc limit 1;<br/> LIMIT r, n: 表示从第 r 行开始，查询 n 条数据<br/> SELECT s_no, c_no, degree FROM score ORDER BY degree DESC LIMIT 0, 1;<br/> LIMIT n offset r: 表示查询 n 条数据,从第 r 行开始<br/> SELECT s_no, c_no, degree FROM score ORDER BY degree DESC LIMIT 1 offset 0;</p>\n</blockquote>\n<h4><a id=\"_226__322\"></a>⭕️ 2.2.6 分组查询</h4>\n<p>🍌 <font color=\"green\" size=\"3\">语法格式：</font></p>\n<blockquote>\n<p>分组查询是指使用 group by 子句对查询信息进行分组。<br/> 相当于根据 group by 子句后的分组字段对表进行切分，相同字段的为一张表<br/> SELECT 字段1, 字段2… FROM 表名 GROUP BY 分组字段 HAVING 分组条件;</p>\n</blockquote>\n<p>我们需要通过下面的代码创建一个表，而后录入一些数据，示例代码及数据表示例如下：</p>\n<blockquote>\n<p>DROP TABLE IF EXISTS <code>Products</code>;<br/> CREATE TABLE IF NOT EXISTS <code>Products</code> (<br/> <code>vend_id</code> VARCHAR(255) NOT NULL COMMENT ‘供应商ID’,<br/> <code>prod_price</code> DOUBLE NOT NULL COMMENT ‘产品价格’<br/> );<br/> INSERT INTO <code>Products</code> VALUES (‘a0011’,100),<br/> (‘a0019’,0.1),<br/> (‘b0019’,1000),<br/> (‘b0019’,6980),<br/> (‘b0019’,20);<br/> DROP TABLE IF EXISTS <code>OrderItems</code>;<br/> CREATE TABLE IF NOT EXISTS <code>OrderItems</code>(<br/> order_num VARCHAR(255) NOT NULL COMMENT ‘商品订单号’,<br/> quantity INT(255) NOT NULL COMMENT ‘商品数量’<br/> );<br/> INSERT <code>OrderItems</code> VALUES (‘a1’,105),(‘a2’,200),(‘a4’,1121),(‘a5’,10),(‘a7’,5);</p>\n</blockquote>\n<p>案例 1️⃣ 编写 SQL 语句，返回名为 cheapest_item 的字段，该字段包含每个供应商成本最低的产品（使用 Products 表中的 prod_price），然后从最低成本到最高成本对结果进行升序排序。</p>\n<pre><code class=\"prism language-sql\">mysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">select</span> vend_id<span class=\"token punctuation\">,</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>prod_price<span class=\"token punctuation\">)</span> cheapest_item\n<span class=\"token keyword\">from</span> Products\n<span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> vend_id\n<span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> cheapest_item<span class=\"token punctuation\">;</span>\n\n返回供应商id vend_id和对应供应商成本最低的产品cheapest_item。\n<span class=\"token operator\">+</span><span class=\"token comment\">---------+---------------+</span>\n<span class=\"token operator\">|</span> vend_id <span class=\"token operator\">|</span> cheapest_item <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------+---------------+</span>\n<span class=\"token operator\">|</span> a0019   <span class=\"token operator\">|</span>           <span class=\"token number\">0.1</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> b0019   <span class=\"token operator\">|</span>            <span class=\"token number\">20</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> a0011   <span class=\"token operator\">|</span>           <span class=\"token number\">100</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------+---------------+</span>\n<span class=\"token number\">3</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>案例 2️⃣ 请编写 SQL 语句，针对表OrderItems，返回订单数量总和不小于100的所有订单号，<br/> 最后结果按照订单号升序排序</p>\n<pre><code class=\"prism language-sql\">🖊 答案如下：\nmysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">select</span> order_num\n<span class=\"token keyword\">from</span> OrderItems\n<span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> order_num\n<span class=\"token keyword\">having</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>quantity<span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;=</span><span class=\"token number\">100</span>\n<span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> order_num<span class=\"token punctuation\">;</span>\n\n返回order_num订单号。\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------+</span>\n<span class=\"token operator\">|</span> order_num <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------+</span>\n<span class=\"token operator\">|</span> a1        <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> a2        <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> a4        <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------+</span>\n<span class=\"token number\">3</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span>\n示例解析\n订单号a1、a2、a4的quantity总和都大于等于<span class=\"token number\">100</span>，按顺序为a1、a2、a4。\n</code></pre>\n<p>🐘 说明：</p>\n<blockquote>\n<p>①分组之后的条件筛选使用 having 实现：<br/> SELECT 字段1, 字段2… FROM 表名 GROUP BY 分组字段 HAVING 分组条件;<br/> ②.where 子句用来筛选 from 子句中指定的操作所产生的行；<br/> ③.group by 子句用来分组 where 子句的输出；<br/> ④.having 子句用来从分组的结果中筛选行。<br/> ⑤ 分组查询常会用到一些聚合函数，如下所示</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a0d2605b74094b1784a7053aa309b6bf.png\"/></p>\n<h4><a id=\"_227__400\"></a>⭕️ 2.2.7 正则表达式</h4>\n<p>🍌 <font color=\"green\" size=\"3\">语法介绍：</font></p>\n<blockquote>\n<p>正则表达式描述了一种字符串匹配的规则， 正则表达式本身就是一个字符串，使用这个字符串来描述、用来定义匹配规则，匹配一系列符合某个句法规则的字符串。<br/> <font color=\"#DC143C\" size=\"3\">在 MySQL 中通过 REGEXP 关键字进行正则表达式字符串匹配。 </font></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0d493468145d44e4b7cbe779b28606eb.png\"/></p>\n<p>案例 1️⃣ 实用的字符匹配</p>\n<pre><code class=\"prism language-sql\">🚀 患者信息表： Patients\n<span class=\"token operator\">+</span><span class=\"token comment\">--------------+---------+</span>\n<span class=\"token operator\">|</span> <span class=\"token keyword\">Column</span> Name  <span class=\"token operator\">|</span> <span class=\"token keyword\">Type</span>    <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">--------------+---------+</span>\n<span class=\"token operator\">|</span> patient_id   <span class=\"token operator\">|</span> <span class=\"token keyword\">int</span>     <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> patient_name <span class=\"token operator\">|</span> <span class=\"token keyword\">varchar</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> conditions   <span class=\"token operator\">|</span> <span class=\"token keyword\">varchar</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">--------------+---------+</span>\npatient_id （患者 ID）是该表的主键。\n<span class=\"token string\">'conditions'</span> （疾病）包含 <span class=\"token number\">0</span> 个或以上的疾病代码，以空格分隔。\n这个表包含医院中患者的信息。\n\n写一条 <span class=\"token keyword\">SQL</span> 语句，查询患有 I 类糖尿病的患者 ID （patient_id）、患者姓名（patient_name）以及其患有的所有疾病代码（conditions）。\nI 类糖尿病的代码总是包含前缀 DIAB1 。\n按 任意顺序 返回结果表。\n\n查询结果格式如下示例所示。\n\n \n🚀 需求\n示例 <span class=\"token number\">1</span>:\n输入：\nPatients表：\n<span class=\"token operator\">+</span><span class=\"token comment\">------------+--------------+--------------+</span>\n<span class=\"token operator\">|</span> patient_id <span class=\"token operator\">|</span> patient_name <span class=\"token operator\">|</span> conditions   <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">------------+--------------+--------------+</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">1</span>          <span class=\"token operator\">|</span> Daniel       <span class=\"token operator\">|</span> YFEV COUGH   <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">2</span>          <span class=\"token operator\">|</span> Alice        <span class=\"token operator\">|</span>              <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">3</span>          <span class=\"token operator\">|</span> Bob          <span class=\"token operator\">|</span> DIAB100 MYOP <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">4</span>          <span class=\"token operator\">|</span> George       <span class=\"token operator\">|</span> ACNE DIAB100 <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">5</span>          <span class=\"token operator\">|</span> Alain        <span class=\"token operator\">|</span> DIAB201      <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">------------+--------------+--------------+</span>\n输出：\n<span class=\"token operator\">+</span><span class=\"token comment\">------------+--------------+--------------+</span>\n<span class=\"token operator\">|</span> patient_id <span class=\"token operator\">|</span> patient_name <span class=\"token operator\">|</span> conditions   <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">------------+--------------+--------------+</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">3</span>          <span class=\"token operator\">|</span> Bob          <span class=\"token operator\">|</span> DIAB100 MYOP <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">4</span>          <span class=\"token operator\">|</span> George       <span class=\"token operator\">|</span> ACNE DIAB100 <span class=\"token operator\">|</span> \n<span class=\"token operator\">+</span><span class=\"token comment\">------------+--------------+--------------+</span>\n解释：Bob 和 George 都患有代码以 DIAB1 开头的疾病。\n\n🐴🐴 答案\n<span class=\"token comment\"># Write your MySQL query statement below</span>\n<span class=\"token keyword\">SELECT</span> \n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Patients\n<span class=\"token keyword\">WHERE</span> conditions <span class=\"token operator\">REGEXP</span> <span class=\"token string\">'^DIAB1|\\\\sDIAB1'</span>\n\n<span class=\"token comment\">/* Write your PL/SQL query statement below */</span>\n<span class=\"token keyword\">select</span> \n patient_id <span class=\"token string\">\"patient_id\"</span><span class=\"token punctuation\">,</span>\n patient_name <span class=\"token string\">\"patient_name\"</span><span class=\"token punctuation\">,</span>\n conditions  <span class=\"token string\">\"conditions\"</span>\n <span class=\"token keyword\">from</span> Patients <span class=\"token keyword\">where</span> regexp_like<span class=\"token punctuation\">(</span>conditions<span class=\"token punctuation\">,</span><span class=\"token string\">'^DIAB1|\\ s*DIAB1'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"_23__464\"></a>🌈 2.3 子查询</h3>\n<p>🍌 <font color=\"green\" size=\"3\">语法格式：</font></p>\n<blockquote>\n<p>某些情况下，当进行一个查询时，需要的条件或数据要用另外一个 select 语句的结果，<br/> 这个时候，就要用到子查询。<br/> 常用子查询语法如下：<br/> select * from xxx where col in (select * from xxxx);</p>\n</blockquote>\n<p>我们需要通过下面的代码创建一个表，而后录入一些数据，示例代码及数据表示例如下：</p>\n<blockquote>\n<p>DROP TABLE IF EXISTS <code>Products</code>;<br/> CREATE TABLE IF NOT EXISTS <code>Products</code> (<br/> <code>prod_id</code> VARCHAR(255) NOT NULL COMMENT ‘产品 ID’,<br/> <code>prod_name</code> VARCHAR(255) NOT NULL COMMENT ‘产品名称’<br/> );<br/> INSERT INTO <code>Products</code> VALUES (‘a0001’,‘egg’),<br/> (‘a0002’,‘sockets’),<br/> (‘a0013’,‘coffee’),<br/> (‘a0003’,‘cola’);<br/> DROP TABLE IF EXISTS <code>OrderItems</code>;<br/> CREATE TABLE IF NOT EXISTS <code>OrderItems</code>(<br/> prod_id VARCHAR(255) NOT NULL COMMENT ‘产品id’,<br/> quantity INT(16) NOT NULL COMMENT ‘商品数量’<br/> );<br/> INSERT <code>OrderItems</code> VALUES (‘a0001’,105),<br/> (‘a0002’,1100),(‘a0002’,200),<br/> (‘a0013’,1121),(‘a0003’,10),<br/> (‘a0003’,19),(‘a0003’,5);</p>\n</blockquote>\n<p>案例 1️⃣ 编写 SQL 语句，从 Products 表中检索所有的产品名称（prod_name），<br/> 以及名为 quant_sold 的计算列，<br/> 其中包含所售产品的总数（在 OrderItems 表上使用子查询和 SUM(quantity)检索）。</p>\n<pre><code class=\"prism language-sql\">🖊 答案如下：\nmysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">SELECT</span> \n    p<span class=\"token punctuation\">.</span>prod_name<span class=\"token punctuation\">,</span>\n    tb<span class=\"token punctuation\">.</span>quantity\n<span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">SELECT</span>\n        prod_id<span class=\"token punctuation\">,</span>\n        <span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>quantity<span class=\"token punctuation\">)</span> quantity\n    <span class=\"token keyword\">FROM</span>\n        OrderItems\n    <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span>\n        prod_id\n    <span class=\"token punctuation\">)</span> tb<span class=\"token punctuation\">,</span>\n    Products p\n<span class=\"token keyword\">WHERE</span>\n    tb<span class=\"token punctuation\">.</span>prod_id <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>prod_id<span class=\"token punctuation\">;</span>\n\n返回产品名称prod_name和产品售出数量总和\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------+----------+</span>\n<span class=\"token operator\">|</span> prod_name <span class=\"token operator\">|</span> quantity <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------+----------+</span>\n<span class=\"token operator\">|</span> egg       <span class=\"token operator\">|</span>      <span class=\"token number\">105</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> sockets   <span class=\"token operator\">|</span>     <span class=\"token number\">1300</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> coffee    <span class=\"token operator\">|</span>     <span class=\"token number\">1121</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> cola      <span class=\"token operator\">|</span>       <span class=\"token number\">34</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------+----------+</span>\n<span class=\"token number\">4</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.01</span> sec<span class=\"token punctuation\">)</span>\n\n示例解析:\nprod_name是cola的prod_id为a0003，quantity总量为<span class=\"token number\">34</span>，返回结果无需排序。\n</code></pre>\n<p>案例 2️⃣ 请列举常用子查询</p>\n<blockquote>\n<p>📖 where型子查询<br/> where型子查询即把内层sql语句查询的结果作为外层sql查询的条件.<br/> 子查询要包含在括号内。<br/> 建议将子查询放在比较条件的右侧<br/> ① 查询比“孙红雷”的工资高的员工编号<br/> SELECT * FROM t_salary<br/> WHERE basic_salary &gt; (SELECT basic_salary FROM t_employee INNER JOIN t_salary ON t_employee.eid=t_salary.eid WHERE t_employee.ename=‘孙红雷’);<br/> ② 查询和孙红雷，李晨在同一个部门的员工<br/> SELECT * FROM t_employee<br/> WHERE dept_id IN(SELECT dept_id FROM t_employee WHERE ename=‘孙红雷’ OR ename = ‘李晨’);<br/> SELECT * FROM t_employee<br/> WHERE dept_id = ANY(SELECT dept_id FROM t_employee WHERE ename=‘孙红雷’ OR ename = ‘李晨’);<br/> ③ 查询全公司工资最高的员工编号，基本工资<br/> SELECT eid,basic_salary FROM t_salary<br/> WHERE basic_salary = (SELECT MAX(basic_salary) FROM t_salary);<br/> SELECT eid,basic_salary FROM t_salary<br/> WHERE basic_salary &gt;= ALL(SELECT basic_salary FROM t_salary);<br/> 📖 from型子查询<br/> from型子查询即把内层sql语句查询的结果作为临时表供外层sql语句再次查询<br/> ① 找出比部门平均工资高的员工编号，基本工资<br/> SELECT t_employee.eid,basic_salary<br/> FROM t_salary INNER JOIN t_employee INNER JOIN (<br/> SELECT emp.dept_id AS did,AVG(s.basic_salary) AS avg_salary<br/> FROM t_employee AS emp,t_salary AS s<br/> WHERE emp.eid = s.eid<br/> GROUP BY emp.dept_id) AS temp<br/> ON t_salary.eid = t_employee.eid AND t_employee.dept_id = temp.did<br/> WHERE t_salary.basic_salary &gt; temp.avg_salary;<br/> 📖 exists型子查询<br/> ① 查询部门信息，该部门必须有员工<br/> SELECT * FROM t_department<br/> WHERE EXISTS (SELECT * FROM t_employee WHERE t_employee.dept_id = t_department.did);</p>\n</blockquote>\n<p>🐘 ANY和ALL用法说明：</p>\n<blockquote>\n<p>① ANY 表示至少一个<br/> 查询课程 3-105 且成绩至少高 3-245 的 score 表，DESC ( 降序 )<br/> ANY: 符合 SQL 语句中的任意条件<br/> 也就是说，3-105成绩中，只要有一个大于从3-245筛选出来的任意行就符合条件<br/> 最后根据降序查询结果<br/> SELECT * FROM score WHERE c_no = ‘3-105’ AND degree &gt; ANY(<br/> SELECT degree FROM score WHERE c_no = ‘3-245’<br/> ) ORDER BY degree DESC;<br/> ②ALL的用法<br/> 查询课程 3-105 且成绩高于 3-245 的 score 表<br/> ALL: 符合 SQL 语句中的所有条件。<br/> 也就是说，在3-105成绩中，都要大于从3-245筛选出来全部行才算符合条件<br/> SELECT * FROM score WHERE c_no = ‘3-105’ AND degree &gt; ALL(<br/> SELECT degree FROM score WHERE c_no = ‘3-245’);</p>\n</blockquote>\n<h3><a id=\"_24__580\"></a>🌈 2.4 多表连接</h3>\n<p>🍌 <font color=\"green\" size=\"3\">语法介绍：</font></p>\n<blockquote>\n<p>MySQL六种关联查询<br/> 1.交叉连接（CROSS JOIN）<br/> 2.内连接（INNER JOIN）<br/> 3.外连接（LEFT JOIN/RIGHT JOIN）<br/> 4. 联合查询（UNION与UNION ALL）<br/> 5.全连接（FULL JOIN）<br/> 6.自连接（Self JOIN）</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f9bfefdaa3904fd08c39245a0dfdc614.png\"/><br/> 我们需要通过下面的代码创建一个表，而后录入一些数据，示例代码及数据表示例如下：</p>\n<blockquote>\n<p>DROP TABLE IF EXISTS <code>Orders</code>;<br/> CREATE TABLE IF NOT EXISTS <code>Orders</code>(<br/> order_num VARCHAR(255) NOT NULL COMMENT ‘商品订单号’,<br/> cust_id VARCHAR(255) NOT NULL COMMENT ‘顾客id’<br/> );<br/> INSERT <code>Orders</code> VALUES (‘a1’,‘cust10’),(‘a2’,‘cust1’),(‘a3’,‘cust2’),(‘a4’,‘cust22’),(‘a5’,‘cust221’),(‘a7’,‘cust2217’);<br/> DROP TABLE IF EXISTS <code>Customers</code>;<br/> CREATE TABLE IF NOT EXISTS <code>Customers</code>(<br/> cust_id VARCHAR(255) NOT NULL COMMENT ‘客户id’,<br/> cust_name VARCHAR(255) NOT NULL COMMENT ‘客户姓名’<br/> );<br/> INSERT <code>Customers</code> VALUES (‘cust10’,‘andy’),(‘cust1’,‘ben’),(‘cust2’,‘tony’),(‘cust22’,‘tom’),(‘cust221’,‘an’),(‘cust2217’,‘hex’);</p>\n</blockquote>\n<p>案例 1️⃣ 编写 SQL 语句，返回 Customers 表中的顾客名称（cust_name）和Orders 表中的相关订单号（order_num），并按顾客名称再按订单号对结果进行升序排序。<br/> 你可以尝试用两个不同的写法，一个使用简单的等联结语法，另外一个使用 INNER JOIN。</p>\n<pre><code class=\"prism language-sql\">🖊 答案如下：\n\n等联结语法:\nmysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">select</span> cust_name<span class=\"token punctuation\">,</span>order_num\n<span class=\"token keyword\">from</span> Customers<span class=\"token punctuation\">,</span>Orders\n<span class=\"token keyword\">where</span> Customers<span class=\"token punctuation\">.</span>cust_id<span class=\"token operator\">=</span>Orders<span class=\"token punctuation\">.</span>cust_id\n<span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> cust_name<span class=\"token punctuation\">,</span>order_num<span class=\"token punctuation\">;</span>\n\n使用内联结\nmysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">select</span> cust_name<span class=\"token punctuation\">,</span>order_num\n<span class=\"token keyword\">from</span> Customers\n<span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> Orders <span class=\"token keyword\">ON</span> Orders<span class=\"token punctuation\">.</span>cust_id<span class=\"token operator\">=</span>Customers<span class=\"token punctuation\">.</span>cust_id\n<span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> cust_name<span class=\"token punctuation\">,</span>order_num<span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------+-----------+</span>\n<span class=\"token operator\">|</span> cust_name <span class=\"token operator\">|</span> order_num <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------+-----------+</span>\n<span class=\"token operator\">|</span> an        <span class=\"token operator\">|</span> a5        <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> andy      <span class=\"token operator\">|</span> a1        <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> ben       <span class=\"token operator\">|</span> a2        <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> hex       <span class=\"token operator\">|</span> a7        <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> tom       <span class=\"token operator\">|</span> a4        <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> tony      <span class=\"token operator\">|</span> a3        <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------+-----------+</span>\n<span class=\"token number\">6</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>案例 2️⃣ 关联查询大全<br/> 准备用于测试连接查询的数据：</p>\n<blockquote>\n<p>CREATE TABLE person (<br/> id INT,<br/> name VARCHAR(20),<br/> cardId INT<br/> );<br/> CREATE TABLE card (<br/> id INT,<br/> name VARCHAR(20)<br/> );<br/> INSERT INTO card VALUES (1, ‘饭卡’), (2, ‘建行卡’), (3, ‘农行卡’), (4, ‘工商卡’), (5, ‘邮政卡’);<br/> INSERT INTO person VALUES (1, ‘张三’, 1), (2, ‘李四’, 3), (3, ‘王五’, 6);<br/> SELECT * FROM card;<br/> SELECT * FROM person;</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8a929a69b1f64a57a0e76e8e2a77971f.png\"/></p>\n<blockquote>\n<p>📖 内连接：<br/> 要查询这两张表中有关系的数据，可以使用 INNER JOIN ( 内连接 ) 将它们连接在一起。<br/> – INNER JOIN: 表示为内连接，将两张表拼接在一起。<br/> – on: 表示要执行某个条件。<br/> SELECT * FROM person INNER JOIN card on person.cardId = card.id;<br/> – 将 INNER 关键字省略掉，结果也是一样的<br/> SELECT * FROM person JOIN card on person.cardId = card.id;</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c104408aba254e778ff0216740913f48.png\"/></p>\n<blockquote>\n<p>📖 左外连接：<br/> –完整显示左边的表 ( person ) ，右边的表如果符合条件就显示，不符合则补 NULL<br/> – LEFT JOIN 也叫做 LEFT OUTER JOIN，用这两种方式的查询结果是一样的<br/> SELECT * FROM person LEFT JOIN card on person.cardId = card.id;</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2d83057c22184800bbb07d70afa6ab1d.png\"/></p>\n<blockquote>\n<p>📖 右外链接:<br/> –完整显示右边的表 ( card ) ，左边的表如果符合条件就显示，不符合则补 NULL<br/> SELECT * FROM person RIGHT JOIN card on person.cardId = card.id;</p>\n</blockquote>\n<blockquote>\n<p>📖全外链接：<br/> 完整显示两张表的全部数据<br/> –MySQL 不支持这种语法的全外连接<br/> SELECT * FROM person FULL JOIN card on person.cardId = card.id;<br/> – 出现错误：<br/> – ERROR 1054 (42S22): Unknown column ‘person.cardId’ in ‘on clause’<br/> –MySQL 全连接语法，使用 UNION 将两张表合并在一起<br/> SELECT * FROM person LEFT JOIN card on person.cardId = card.id<br/> UNION<br/> SELECT * FROM person RIGHT JOIN card on person.cardId = card.id;</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1f45063acd464bf5846162306e6d892b.png\"/></p>\n<h3><a id=\"_25__684\"></a>🌈 2.5 组合查询</h3>\n<p>🍌 <font color=\"green\" size=\"3\">语法介绍：</font></p>\n<blockquote>\n<p>① UNION ALL (并集 不去重)<br/> select * from test01<br/> UNION ALL<br/> select * from test02<br/> ② UNION (并集 去重)<br/> select * from test01<br/> UNION<br/> select * from test02</p>\n</blockquote>\n<p>我们需要通过下面的代码创建一个表，而后录入一些数据，示例代码及数据表示例如下：</p>\n<blockquote>\n<p>DROP TABLE IF EXISTS <code>OrderItems</code>;<br/> CREATE TABLE IF NOT EXISTS <code>OrderItems</code>(<br/> prod_id VARCHAR(255) NOT NULL COMMENT ‘产品id’,<br/> quantity VARCHAR(255) NOT NULL COMMENT ‘商品数量’<br/> );<br/> INSERT <code>OrderItems</code> VALUES (‘a0001’,105),(‘a0002’,100),(‘a0002’,200),<br/> (‘a0013’,1121),(‘a0003’,10),(‘a0003’,19),(‘a0003’,5),(‘BNBG’,10002);</p>\n</blockquote>\n<p>案例 1️⃣ 将两个 SELECT 语句结合起来，以便从 OrderItems表中检索产品 id（prod_id）和 quantity。<br/> 其中，一个 SELECT 语句过滤数量为 100 的行，<br/> 另一个 SELECT 语句过滤 id 以 BNBG 开头的产品，最后按产品 id 对结果进行升序排序。</p>\n<pre><code class=\"prism language-sql\">mysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">select</span> prod_id<span class=\"token punctuation\">,</span>quantity\n<span class=\"token keyword\">from</span> OrderItems\n<span class=\"token keyword\">where</span> quantity<span class=\"token operator\">=</span><span class=\"token number\">100</span>\n<span class=\"token keyword\">union</span> \n<span class=\"token keyword\">select</span> prod_id<span class=\"token punctuation\">,</span>quantity\n<span class=\"token keyword\">from</span> OrderItems\n<span class=\"token keyword\">where</span> prod_id <span class=\"token operator\">like</span> <span class=\"token string\">'BNBG%'</span>\n<span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> prod_id<span class=\"token punctuation\">;</span>\n\n返回产品id prod_id和产品数量quantity\n<span class=\"token operator\">+</span><span class=\"token comment\">---------+----------+</span>\n<span class=\"token operator\">|</span> prod_id <span class=\"token operator\">|</span> quantity <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------+----------+</span>\n<span class=\"token operator\">|</span> a0002   <span class=\"token operator\">|</span> <span class=\"token number\">100</span>      <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> BNBG    <span class=\"token operator\">|</span> <span class=\"token number\">10002</span>    <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------+----------+</span>\n<span class=\"token number\">2</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.01</span> sec<span class=\"token punctuation\">)</span>\n示例解析:\n产品id a0002因为数量等于<span class=\"token number\">100</span>被选取返回；BNBG因为是以 BNBG 开头的产品所以返回；\n最后以产品id进行排序返回。\n</code></pre>\n<h3><a id=\"_26__732\"></a>🌈 2.6 函数用法</h3>\n<p>📖 常用聚合函数一览表<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3d41588090ca451ba8e9cb71efff54ad.png\"/><br/> 📖 常用数学函数一览表<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7e2a353281d74c2ca57142263283e2eb.png\"/><br/> 📖 常用字符串函数一览表<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4eef649981634228aba3b65801efe736.png\"/><br/> 📖 常用日期函数一览表<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\12e9e6e784144314a2f79cd9bbc0448d.png\"/><br/> 具体函数实用方法参考以下博客<br/> 史上最硬核的Mysql函数大全，还不收藏？<br/> <a href=\"https://jeames.blog.csdn.net/article/details/120031303\">https://jeames.blog.csdn.net/article/details/120031303</a></p>\n<h3><a id=\"_27__745\"></a>🌈 2.7 开窗函数</h3>\n<p>🍌 <font color=\"green\" size=\"3\">语法介绍：</font></p>\n<blockquote>\n<p>① 含义：窗口函数也叫OLAP函数（Online Anallytical Processing,联机分析处理），<br/> 可以对数据进行实时分析处理。<br/> ② 作用：<br/> 解决排名，排顺序 问题，分组后的操作<br/> ③ 按照功能划分，可以把MySQL支持的窗口函数分为如下几类：<br/> 序号函数：row_number() / rank() / dense_rank()<br/> 分布函数：percent_rank() / cume_dist()<br/> 前后函数：lag() / lead()<br/> 头尾函数：first_val() / last_val()<br/> 其他函数：nth_value() / nfile()</p>\n</blockquote>\n<p>案例 1️⃣ MySQL8.0 增加了窗口函数，使用内置函数可以轻松实现上述排名</p>\n<pre><code class=\"prism language-sql\">MySQL8<span class=\"token punctuation\">.</span><span class=\"token number\">0</span> 中可以利用 ROW_NUMBER<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>，DENSE_RANK<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>，RANK<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 三个窗口函数实现上述三种排名，\n需要注意的一点是 <span class=\"token keyword\">as</span> 后的别名，千万不要与前面的函数名重名，否则会报错，\n下面给出这三种函数实现排名的案例：\n<span class=\"token comment\">## 按分数高低直接排名，从 1 开始，往下排，类似于 row number</span>\n<span class=\"token keyword\">select</span> xuehao<span class=\"token punctuation\">,</span>score<span class=\"token punctuation\">,</span> ROW_NUMBER<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> score <span class=\"token keyword\">desc</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> row_r <span class=\"token keyword\">from</span> scores_tb<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">## 分数相同，名次相同，排名无间隔：</span>\n<span class=\"token keyword\">select</span> xuehao<span class=\"token punctuation\">,</span>score<span class=\"token punctuation\">,</span> DENSE_RANK<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> score <span class=\"token keyword\">desc</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> dense_r <span class=\"token keyword\">from</span> scores_tb<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">## 并列排名，排名有间隔：</span>\n<span class=\"token keyword\">select</span> xuehao<span class=\"token punctuation\">,</span>score<span class=\"token punctuation\">,</span> RANK<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> score <span class=\"token keyword\">desc</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> r <span class=\"token keyword\">from</span> scores_tb<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 一条语句也可以查询出不同排名</span>\n<span class=\"token keyword\">SELECT</span> xuehao<span class=\"token punctuation\">,</span>score<span class=\"token punctuation\">,</span>\nROW_NUMBER<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span> w <span class=\"token keyword\">AS</span> <span class=\"token string\">'row_r'</span><span class=\"token punctuation\">,</span>\nDENSE_RANK<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span> w <span class=\"token keyword\">AS</span> <span class=\"token string\">'dense_r'</span><span class=\"token punctuation\">,</span>\nRANK<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span> w <span class=\"token keyword\">AS</span> <span class=\"token string\">'r'</span>\n<span class=\"token keyword\">FROM</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>scores_tb<span class=\"token punctuation\">`</span></span>\nWINDOW w <span class=\"token keyword\">AS</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>score<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">desc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<h2><a id=\"_3DML_780\"></a>🐴 3.DML数据操纵</h2>\n<h3><a id=\"_31_INSERT_781\"></a>🌈 3.1 插入INSERT</h3>\n<p>📖 按照图1的内容向tb_class表中插入记录</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\02aa6baa44854afe873b89c3bd13d2fc.png\"/></p>\n<pre><code class=\"prism language-bash\">INSERT INTO tb_class<span class=\"token punctuation\">(</span>classNo,department,className<span class=\"token punctuation\">)</span> VALUES<span class=\"token punctuation\">(</span><span class=\"token string\">'AC1301'</span>, <span class=\"token string\">'会计学院'</span>, <span class=\"token string\">'会计 13-1 班'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nINSERT INTO tb_class<span class=\"token punctuation\">(</span>classNo,department,className<span class=\"token punctuation\">)</span> VALUES<span class=\"token punctuation\">(</span><span class=\"token string\">'AC1302'</span>, <span class=\"token string\">'会计学院'</span>, <span class=\"token string\">'会计 13-2 班'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nINSERT INTO tb_class<span class=\"token punctuation\">(</span>classNo,department,className<span class=\"token punctuation\">)</span> VALUES<span class=\"token punctuation\">(</span><span class=\"token string\">'CS1401'</span>, <span class=\"token string\">'计算机学院'</span>, <span class=\"token string\">'计算机 14-1 班'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nINSERT INTO tb_class<span class=\"token punctuation\">(</span>classNo,department,className<span class=\"token punctuation\">)</span> VALUES<span class=\"token punctuation\">(</span><span class=\"token string\">'IS1301'</span>, <span class=\"token string\">'信息学院'</span>, <span class=\"token string\">'信息系统 13-1 班'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nINSERT INTO tb_class<span class=\"token punctuation\">(</span>classNo,department,className<span class=\"token punctuation\">)</span> VALUES<span class=\"token punctuation\">(</span><span class=\"token string\">'IS1401'</span>, <span class=\"token string\">'信息学院'</span>, <span class=\"token string\">'信息系统 14-1 班'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>📖 使用批量插入记录的方法，一次性向tb_student表中插入如图2所示的记录<br/> <img alt=\"加粗样式\" src=\"..\\..\\static\\image\\db883cef5572418f8a8f7545321880c1.png\"/></p>\n<pre><code class=\"prism language-bash\">INSERT INTO tb_student\nvalues <span class=\"token punctuation\">(</span><span class=\"token string\">'2013110101'</span>, <span class=\"token string\">'张晓勇'</span>, <span class=\"token string\">'男'</span>, <span class=\"token string\">'1977-12-11'</span>,<span class=\"token string\">'山西'</span>,<span class=\"token string\">'汉'</span>,<span class=\"token string\">'AC1301'</span><span class=\"token punctuation\">)</span>,\n<span class=\"token punctuation\">(</span><span class=\"token string\">'2013110103'</span>, <span class=\"token string\">'王一敏'</span>, <span class=\"token string\">'女'</span>, <span class=\"token string\">'1996-03-25'</span>,<span class=\"token string\">'河北'</span>,<span class=\"token string\">'汉'</span>,<span class=\"token string\">'AC1301'</span><span class=\"token punctuation\">)</span>,\n<span class=\"token punctuation\">(</span><span class=\"token string\">'2013110201'</span>, <span class=\"token string\">'江山'</span>, <span class=\"token string\">'女'</span>, <span class=\"token string\">'1996-09-17'</span>,<span class=\"token string\">'内蒙'</span>,<span class=\"token string\">'锡伯'</span>,<span class=\"token string\">'AC1302'</span><span class=\"token punctuation\">)</span>,\n<span class=\"token punctuation\">(</span><span class=\"token string\">'2013110202'</span>, <span class=\"token string\">'李明'</span>, <span class=\"token string\">'男'</span>, <span class=\"token string\">'1996-01-14'</span>,<span class=\"token string\">'广西'</span>,<span class=\"token string\">'壮'</span>,<span class=\"token string\">'AC1302'</span><span class=\"token punctuation\">)</span>,\n<span class=\"token punctuation\">(</span><span class=\"token string\">'2013310101'</span>, <span class=\"token string\">'黄菊'</span>, <span class=\"token string\">'女'</span>, <span class=\"token string\">'1995-09-30'</span>,<span class=\"token string\">'北京'</span>,<span class=\"token string\">'汉'</span>,<span class=\"token string\">'IS1301'</span><span class=\"token punctuation\">)</span>,\n<span class=\"token punctuation\">(</span><span class=\"token string\">'2013310102'</span>, <span class=\"token string\">'林海'</span>, <span class=\"token string\">'男'</span>, <span class=\"token string\">'1996-01-18'</span>,<span class=\"token string\">'北京'</span>,<span class=\"token string\">'满'</span>,<span class=\"token string\">'IS1301'</span><span class=\"token punctuation\">)</span>,\n<span class=\"token punctuation\">(</span><span class=\"token string\">'2013310103'</span>, <span class=\"token string\">'吴昊'</span>, <span class=\"token string\">'男'</span>, <span class=\"token string\">'1995-11-18'</span>,<span class=\"token string\">'河北'</span>,<span class=\"token string\">'汉'</span>,<span class=\"token string\">'IS1301'</span><span class=\"token punctuation\">)</span>,\n<span class=\"token punctuation\">(</span><span class=\"token string\">'2014210101'</span>, <span class=\"token string\">'刘涛'</span>, <span class=\"token string\">'男'</span>, <span class=\"token string\">'1997-04-03'</span>,<span class=\"token string\">'湖南'</span>,<span class=\"token string\">'侗'</span>,<span class=\"token string\">'CS1401'</span><span class=\"token punctuation\">)</span>,\n<span class=\"token punctuation\">(</span><span class=\"token string\">'2014210102'</span>, <span class=\"token string\">'郭志坚'</span>, <span class=\"token string\">'男'</span>, <span class=\"token string\">'1997-04-03'</span>,<span class=\"token string\">'上海'</span>,<span class=\"token string\">'汉'</span>,<span class=\"token string\">'CS1401'</span><span class=\"token punctuation\">)</span>,\n<span class=\"token punctuation\">(</span><span class=\"token string\">'2014210103'</span>, <span class=\"token string\">'王玲'</span>, <span class=\"token string\">'女'</span>, <span class=\"token string\">'1998-02-21'</span>,<span class=\"token string\">'安徽'</span>,<span class=\"token string\">'汉'</span>,<span class=\"token string\">'CS1401'</span><span class=\"token punctuation\">)</span>,\n<span class=\"token punctuation\">(</span><span class=\"token string\">'2014310101'</span>, <span class=\"token string\">'王林'</span>, <span class=\"token string\">'男'</span>, <span class=\"token string\">'1996-10-09'</span>,<span class=\"token string\">'河南'</span>,<span class=\"token string\">'汉'</span>,<span class=\"token string\">'IS1401'</span><span class=\"token punctuation\">)</span>,\n<span class=\"token punctuation\">(</span><span class=\"token string\">'2014310102'</span>, <span class=\"token string\">'李怡然'</span>, <span class=\"token string\">'女'</span>, <span class=\"token string\">'1996-12-31'</span>,<span class=\"token string\">'辽宁'</span>,<span class=\"token string\">'汉'</span>,<span class=\"token string\">'IS1401'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>📖 向tb_student表中插入一条新的记录，<br/> 学号为’2015310103’,姓名为’李彤’，性别为’男’，民族为‘傣’，班级编号为’IS1401’<br/> （注意，这是部分字段的值）。</p>\n<pre><code class=\"prism language-bash\">INSERT INTO tb_student<span class=\"token punctuation\">(</span>studentNo,studentName,sex,nation,classNo<span class=\"token punctuation\">)</span> \nvalues<span class=\"token punctuation\">(</span><span class=\"token string\">'2015310103'</span>,<span class=\"token string\">'李彤'</span>,<span class=\"token string\">'男'</span>,<span class=\"token string\">'傣'</span>,<span class=\"token string\">'IS1401'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>📖 向tb_student1表中插入tb_student表中所有汉族学生的信息。</p>\n<pre><code class=\"prism language-bash\">insert into tb_student1 <span class=\"token keyword\">select</span> * from tb_student where <span class=\"token assign-left variable\">nation</span><span class=\"token operator\">=</span><span class=\"token string\">'汉'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_32_UPDATE_826\"></a>🌈 3.2 更新UPDATE</h3>\n<p>📖 在tb_student表中，使用replace 语句把学号为“2014310102”的学生姓名替换为李怡。</p>\n<pre><code class=\"prism language-bash\"><span class=\"token keyword\">select</span> * from tb_student where <span class=\"token assign-left variable\">studentNo</span><span class=\"token operator\">=</span><span class=\"token string\">'2014310102'</span><span class=\"token punctuation\">;</span>\nupdate tb_student <span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">studentName</span><span class=\"token operator\">=</span>replace<span class=\"token punctuation\">(</span>studentName,<span class=\"token string\">'然'</span>,<span class=\"token string\">''</span><span class=\"token punctuation\">)</span> where <span class=\"token assign-left variable\">studentNo</span><span class=\"token operator\">=</span><span class=\"token string\">'2014310102'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>📖 使用update语句，把tb_student表中学号为’2014210101’的学生姓名更改为’黄涛’.</p>\n<pre><code class=\"prism language-bash\">update tb_student <span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">studentName</span><span class=\"token operator\">=</span><span class=\"token string\">'黄涛'</span> where <span class=\"token assign-left variable\">studentNo</span><span class=\"token operator\">=</span><span class=\"token string\">'2014210101'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_33_DELETE_837\"></a>🌈 3.3 删除DELETE</h3>\n<p>📖 删除tb_student表中姓名为“王一敏“的学生信息。</p>\n<pre><code class=\"prism language-bash\">delete from tb_student where <span class=\"token assign-left variable\">studentName</span><span class=\"token operator\">=</span><span class=\"token string\">'王一敏'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"_4DDL_843\"></a>🐴 4.DDL数据定义</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\11e8cf1eaf1d40ef822e375d719cfda0.png\"/></p>\n<h3><a id=\"_41__846\"></a>🌈 4.1 表的创建、修改、删除</h3>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\">##创建表</span>\ncreate table <span class=\"token keyword\">if</span> not exists tb_student <span class=\"token punctuation\">(</span>\nstudentNo CHAR<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> not NULL primary key comment <span class=\"token string\">'学号'</span>,\nstudentName VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> NOT null comment <span class=\"token string\">'姓名'</span>,\nsex CHAR<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> comment <span class=\"token string\">'性别'</span>,\nbirthday <span class=\"token function\">date</span> comment <span class=\"token string\">'出生日期'</span>,\nnative VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> comment <span class=\"token string\">'籍贯'</span>,\nnation VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> DEFAULT <span class=\"token string\">'汉'</span> comment <span class=\"token string\">'民族'</span>,\nclassNo CHAR<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> comment <span class=\"token string\">'所属班级'</span>\n<span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">ENGINE</span><span class=\"token operator\">=</span>InnoDB comment <span class=\"token string\">'学生表'</span><span class=\"token punctuation\">;</span>\n\ndesc tb_student<span class=\"token punctuation\">;</span>\nshow columns from tb_student<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>📖 用命令show tables查看当前数据库中的所有表<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d0708473775a4ba69ae64032a50a422a.png\"/></p>\n<p>📖 将tb_student的表结构复制到tb_student2，并向tb_student2中添加一个INT型字段id,<br/> 要求其不能为NULL，取值唯一且自动增加，并将该字段添加到表的第一个字段</p>\n<pre><code class=\"prism language-bash\">create table tb_student2 <span class=\"token keyword\">select</span> * from tb_student where <span class=\"token assign-left variable\">1</span><span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\nalter table tb_student2 <span class=\"token function\">add</span> <span class=\"token function\">id</span> int\nAlter table tb_student2 <span class=\"token function\">add</span> primary key<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> -先创建主键\nALTER TABLE tb_student2 MODIFY <span class=\"token function\">id</span> int not null AUTO_INCREMENT<span class=\"token punctuation\">;</span>  --自增\n</code></pre>\n<p>📖 向tb_student表中添加一个varchar(16)类型的字段department，用于描述学生所在院系，要求设置其默认值为“城市学院”，并将该字段添加到原表nation之后</p>\n<pre><code class=\"prism language-bash\">alter table tb_student <span class=\"token function\">add</span> department varchar<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> \nDEFAULT <span class=\"token string\">'城市学院'</span> comment <span class=\"token string\">'院系'</span> after nation<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>📖 将tb_student中的字段birthday重命名为age，并将其数据类型更改为TINYINT，<br/> 允许其为NULL，默认值为18。</p>\n<pre><code class=\"prism language-bash\">用DESC 查看tb_student\nalter table tb_student change birthday age TINYINT DEFAULT <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>  --给字段重命名\n</code></pre>\n<p>📖 将tb_student表中的字段department的默认值删除</p>\n<pre><code class=\"prism language-bash\">ALTER TABLE tb_student ALTER COLUMN department DROP DEFAULT<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>📖 将tb_student表中的字段department的默认值改为’环化学院’</p>\n<pre><code class=\"prism language-bash\">ALTER TABLE tb_student ALTER COLUMN department SET DEFAULT <span class=\"token string\">'环化学院'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>📖 将tb_student表中的字段department的数据类型更改为varchar(20)，<br/> 取值不允许为空，并将此字段移至字段studentName之后。</p>\n<pre><code class=\"prism language-bash\">用desc tb_student命令查看结果\nALTER TABLE tb_student MODIFY department varchar<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> not null after studentName<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>📖 删除数据表tb_student2中的字段id</p>\n<pre><code class=\"prism language-bash\">ALTER TABLE tb_student2 MODIFY <span class=\"token function\">id</span> int not null<span class=\"token punctuation\">;</span>  //删除自增长\nAlter table tb_student2 drop primary key<span class=\"token punctuation\">;</span>//删除主建\n\nALTER TABLE tb_student2 DROP <span class=\"token function\">id</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>📖 使用RENAME [TO]子句将数据库db_school中的数据表tb_student2<br/> 重新命名为backup_tb_student</p>\n<pre><code class=\"prism language-bash\">alter table tb_student2 <span class=\"token function\">rename</span> to backup_tb_student<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>📖 使用RENAME TABLE语句将数据库db_school中的表<br/> backup_tb_student再重新命名为tb_student2</p>\n<pre><code class=\"prism language-bash\">RENAME TABLE backup_tb_student TO tb_student2,new_table TO old_table<span class=\"token punctuation\">;</span>\ndrop table tb_student,tb_student2<span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"_42__930\"></a>🌈 4.2 数据完整性约束</h3>\n<p>📖 重新按照表1创建tb_student数据表，要求以表级完整性约束方式定义主键，<br/> 并指定主键约束名为pk_student。</p>\n<pre><code class=\"prism language-bash\">CREATE TABLE tb_student <span class=\"token punctuation\">(</span>\n studentNo CHAR<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> NOT NULL,\n studentName VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> NOT NULL,\n sex CHAR<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>,\n birthday DATE, \n native VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>,\n nation VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> default <span class=\"token string\">'汉'</span>,\n classNo CHAR<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>,\n constraint pk_student primary key<span class=\"token punctuation\">(</span>studentNo<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">engine</span><span class=\"token operator\">=</span>InnoDB default <span class=\"token assign-left variable\">charset</span><span class=\"token operator\">=</span>gb2312<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>📖 在数据库db_school中，按照表2的结构创建tb_class。要求：使用InnoDB存储引擎，gb2312字符集，主键约束为列级完整性约束，唯一约束为表级完整性约束其约束名为uq_class<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b16e3d77b8274ea3ac4ee0022fb1cd9b.png\"/></p>\n<pre><code class=\"prism language-bash\">CREATE TABLE tb_class <span class=\"token punctuation\">(</span>\n classNo CHAR<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> PRIMARY KEY NOT NULL,\n className VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> NOT NULL,\n department VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>,\n grade ENUM<span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span>,<span class=\"token string\">'2'</span>,<span class=\"token string\">'3'</span>,<span class=\"token string\">'4'</span><span class=\"token punctuation\">)</span>, \n classNum TINYINT,\n constraint uq_class unique<span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">engine</span><span class=\"token operator\">=</span>InnoDB default <span class=\"token assign-left variable\">charset</span><span class=\"token operator\">=</span>gb2312<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>📖 首先删除数据表tb_student，按照表1重新创建tb_student，在创建的同时建立tb_student到tb_class的外键约束（两个表相同含义的属性是classNo，因此classNo是tb_student的外键），约束名为fk_student，并定义相应的参照动作，更新操作为级联（cascade），删除操作为限制(restrict)，数据表引擎为InnoDB，字符集为gb2312</p>\n<pre><code class=\"prism language-bash\">drop table tb_student<span class=\"token punctuation\">;</span>\n\nCREATE TABLE tb_student <span class=\"token punctuation\">(</span>\n studentNo CHAR<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> NOT NULL,\n studentName VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> NOT NULL,\n sex CHAR<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>,\n birthday DATE, \n native VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>,\n nation VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> default <span class=\"token string\">'汉'</span>,\n classNo CHAR<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>,\n constraint fk_student FOREIGN KEY <span class=\"token punctuation\">(</span>classNo<span class=\"token punctuation\">)</span>\n references tb_class<span class=\"token punctuation\">(</span>classNo<span class=\"token punctuation\">)</span> on delete restrict on update cascade\n<span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">engine</span><span class=\"token operator\">=</span>InnoDB default <span class=\"token assign-left variable\">charset</span><span class=\"token operator\">=</span>gb2312<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>📖 在数据库db_school中按照表3创建tb_course表，<br/> 要求：外键名字为fk_course，引擎为InnoDB，默认字符集为gb2312。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5de530a4bc2c442b93d15c1ad88dbfc9.png\"/></p>\n<pre><code class=\"prism language-bash\">CREATE TABLE tb_course <span class=\"token punctuation\">(</span>\n courseNo CHAR<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> NOT NULL primary key comment <span class=\"token string\">'课程号'</span>,\n courseName VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> unique not NULL comment <span class=\"token string\">'课程名'</span>,\n credit DECIMAL<span class=\"token punctuation\">(</span><span class=\"token number\">3,1</span><span class=\"token punctuation\">)</span> not NULL comment <span class=\"token string\">'学分'</span>,\n courseHour TINYINT<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> not NULL comment <span class=\"token string\">'课时数'</span>, \n term TINYINT<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> comment <span class=\"token string\">'开课学期'</span>,\n priorCourse CHAR<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> comment <span class=\"token string\">'先修课程'</span>,\n constraint fk_course FOREIGN KEY<span class=\"token punctuation\">(</span>priorCourse<span class=\"token punctuation\">)</span> REFERENCES tb_course<span class=\"token punctuation\">(</span>courseNo<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">engine</span><span class=\"token operator\">=</span>InnoDB default <span class=\"token assign-left variable\">charset</span><span class=\"token operator\">=</span>gb2312<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>📖 在数据库db_school中定义数据表tb_score，<br/> 表结构如表4所示, 引擎为InnoDB，默认字符集为gb2312。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d99ac81cbdd9430188429d6965218694.png\"/></p>\n<pre><code class=\"prism language-bash\">CREATE TABLE tb_score<span class=\"token punctuation\">(</span>\nCREATE TABLE tb_score<span class=\"token punctuation\">(</span>\n studentNo CHAR<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> NOT NULL comment <span class=\"token string\">'学号'</span>,\n courseNo CHAR<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> NOT NULL comment <span class=\"token string\">'课程号'</span>,\n credit DECIMAL<span class=\"token punctuation\">(</span><span class=\"token number\">4,1</span><span class=\"token punctuation\">)</span> not NULL comment <span class=\"token string\">'成绩'</span>,\n constraint fk_score_stuNo FOREIGN KEY<span class=\"token punctuation\">(</span>studentNo<span class=\"token punctuation\">)</span> REFERENCES tb_student<span class=\"token punctuation\">(</span>studentNo<span class=\"token punctuation\">)</span>,  \n constraint fk_score_courNo FOREIGN KEY<span class=\"token punctuation\">(</span>courseNo<span class=\"token punctuation\">)</span> REFERENCES tb_course<span class=\"token punctuation\">(</span>courseNo<span class=\"token punctuation\">)</span>,\n constraint pk_score PRIMARY KEY<span class=\"token punctuation\">(</span>studentNo,courseNo<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">engine</span><span class=\"token operator\">=</span>InnoDB default <span class=\"token assign-left variable\">charset</span><span class=\"token operator\">=</span>gb2312<span class=\"token punctuation\">;</span>\n\n注：外键约束对应的主键（在表里是主键才可以）\n</code></pre>\n<h3><a id=\"_43__1012\"></a>🌈 4.3 更新完整性约束条件</h3>\n<p>📖 删除在表tb_score中定义的外键约束fk_score_stuNo</p>\n<pre><code class=\"prism language-bash\">alter table tb_score drop foreign key fk_score_stuNo<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>📖 删除在表tb_student中定义的主键约束。</p>\n<pre><code class=\"prism language-bash\">Alter table tb_student drop primary key<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>📖 添加主键约束，用alter table语句在tb_student对studentNo重新添加主键。</p>\n<pre><code class=\"prism language-bash\">Alter table tb_student <span class=\"token function\">add</span> primary key<span class=\"token punctuation\">(</span>studentNo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n</code></pre>\n<p>📖 添加外键约束，用alter table语句在tb_score表对studentNo重新添加外键，<br/> 对应的主键为tb_student表的studentNo，外键名称为fk_score_stuNo。</p>\n<pre><code class=\"prism language-bash\">ALTER TABLE tb_score ADD CONSTRAINT \nfk_score_stuNo FOREIGN KEY<span class=\"token punctuation\">(</span>studentNo<span class=\"token punctuation\">)</span> REFERENCES tb_student<span class=\"token punctuation\">(</span>studentNo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n</code></pre>\n<h3><a id=\"_44__1039\"></a>🌈 4.4 索引的创建</h3>\n<p>📖 创建新表的同时创建普通索引：要求按照实验一第5题表1的结构创建tb_student1表，<br/> 要求在创建的同时在studentName字段上建立普通索引，索引名为idx_studentName。</p>\n<pre><code class=\"prism language-bash\">create table <span class=\"token keyword\">if</span> not exists tb_student1 <span class=\"token punctuation\">(</span>\nstudentNo CHAR<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> not NULL primary key comment <span class=\"token string\">'学号'</span>,\nstudentName VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> NOT null comment <span class=\"token string\">'姓名'</span>,\nsex CHAR<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> comment <span class=\"token string\">'性别'</span>,\nbirthday <span class=\"token function\">date</span> comment <span class=\"token string\">'出生日期'</span>,\nnative VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> comment <span class=\"token string\">'籍贯'</span>,\nnation VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> DEFAULT <span class=\"token string\">'汉'</span> comment <span class=\"token string\">'民族'</span>,\nclassNo CHAR<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> comment <span class=\"token string\">'所属班级'</span>,\nINDEX idx_studentName<span class=\"token punctuation\">(</span>studentName<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">ENGINE</span><span class=\"token operator\">=</span>InnoDB comment <span class=\"token string\">'学生表'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>📖 创建新表时创建唯一索引：按照实验一第20题表2的结构创建tb_class1表，<br/> 要求在创建的同时在className字段上建立唯一索引，索引名为uqidx_className。</p>\n<pre><code class=\"prism language-bash\">CREATE TABLE tb_class1 <span class=\"token punctuation\">(</span>\n classNo CHAR<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> PRIMARY KEY NOT NULL,\n className VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> NOT NULL,\n department VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>,\n grade ENUM<span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span>,<span class=\"token string\">'2'</span>,<span class=\"token string\">'3'</span>,<span class=\"token string\">'4'</span><span class=\"token punctuation\">)</span>, \n classNum TINYINT,\n constraint uq_class unique<span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span>,\n UNIQUE INDEX uqidx_className<span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">engine</span><span class=\"token operator\">=</span>InnoDB default <span class=\"token assign-left variable\">charset</span><span class=\"token operator\">=</span>gb2312<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>📖 在创建新表的同时创建主键索引：<br/> 按照第4部分表3的结构创建tb_course1，<br/> 要求创建的同时在courseNo字段上建立主键索引。</p>\n<pre><code class=\"prism language-bash\">CREATE TABLE tb_course1 <span class=\"token punctuation\">(</span>\n courseNo CHAR<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> primary key comment <span class=\"token string\">'课程号'</span>,\n courseName VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> unique not NULL comment <span class=\"token string\">'课程名'</span>,\n credit DECIMAL<span class=\"token punctuation\">(</span><span class=\"token number\">3,1</span><span class=\"token punctuation\">)</span> not NULL comment <span class=\"token string\">'学分'</span>,\n courseHour TINYINT<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> not NULL comment <span class=\"token string\">'课时数'</span>, \n term TINYINT<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> comment <span class=\"token string\">'开课学期'</span>,\n priorCourse CHAR<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> comment <span class=\"token string\">'先修课程'</span>\n<span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">engine</span><span class=\"token operator\">=</span>InnoDB default <span class=\"token assign-left variable\">charset</span><span class=\"token operator\">=</span>gb2312<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>📖 使用create index语句创建索引：<br/> 按照第4部分表4的结构创建tb_score1，<br/> 要求使用create index 语句对studentNo建立普通降序索引，索引名为idx_studentNo，<br/> 对courseNo建立普通升序索引，索引名为idx_courseNo.</p>\n<pre><code class=\"prism language-bash\">CREATE TABLE tb_score1<span class=\"token punctuation\">(</span>\n studentNo CHAR<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> NOT NULL comment <span class=\"token string\">'学号'</span>,\n courseNo CHAR<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> NOT NULL comment <span class=\"token string\">'课程号'</span>,\n credit DECIMAL<span class=\"token punctuation\">(</span><span class=\"token number\">4,1</span><span class=\"token punctuation\">)</span> not NULL comment <span class=\"token string\">'成绩'</span>\n<span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">engine</span><span class=\"token operator\">=</span>InnoDB default <span class=\"token assign-left variable\">charset</span><span class=\"token operator\">=</span>gb2312<span class=\"token punctuation\">;</span>\n\nalter table tb_score1 <span class=\"token function\">add</span> index idx_studentNo<span class=\"token punctuation\">(</span>studentNo desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nalter table tb_score1 <span class=\"token function\">add</span> index idx_courseNo<span class=\"token punctuation\">(</span>courseNo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>📖 使用create index语句创建基于字段值前缀字符的索引：<br/> 在tb_course上建立一个索引，要求按课程名称courseName字段值的前三个字符建立降序索引。</p>\n<pre><code class=\"prism language-bash\">--函数要再加个括号\nalter table tb_course <span class=\"token function\">add</span> index idx_courseName1<span class=\"token variable\"><span class=\"token punctuation\">((</span>left<span class=\"token punctuation\">(</span>courseName<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">))</span></span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \nDROP INDEX idx_courseName1 on tb_course<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>📖 使用alter table语句建立普通索引：在tb_score上建立普通索引，<br/> 要求使用alter table语句对courseNo字段建立普通索引，索引名为idx_courseNo.</p>\n<pre><code class=\"prism language-bash\">alter table tb_score <span class=\"token function\">add</span> index idx_courseNo<span class=\"token punctuation\">(</span>courseNo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"_5DCL_1120\"></a>🐴 5.DCL数据控制</h2>\n<p>🍌 <font color=\"green\" size=\"3\">语法格式：</font></p>\n<blockquote>\n<p>DCL 数据控制语言 (Data Control Language ) 在SQL语言中，是一种可对数据访问权进行控制的指令，<br/> 它可以控制特定用户账户对数据表、查看表、存储程序、用户自定义函数等数据库对象的控制权，<br/> 由 GRANT 和 REVOKE 两个指令组成。</p>\n</blockquote>\n<h3><a id=\"_51__1128\"></a>🌈 5.1 创建用户</h3>\n<blockquote>\n<p>create user ‘用户名’@‘IP地址’ identified WITH mysql_native_password by ‘密码’;<br/> flush privileges;</p>\n</blockquote>\n<h3><a id=\"_52__1132\"></a>🌈 5.2 修改用户名</h3>\n<blockquote>\n<p>rename user ‘用户名’@‘IP地址’ to ‘新用户名’@‘IP地址’;</p>\n</blockquote>\n<h3><a id=\"_53__1135\"></a>🌈 5.3 修改密码</h3>\n<blockquote>\n<p>#切换到mysql库<br/> use mysql;<br/> #更新密码<br/> UPDATE user SET password=password(‘新密码’) WHERE user=‘用户名’ AND host=‘IP地址’;<br/> #刷新权限<br/> FLUSH PRIVILEGES;</p>\n</blockquote>\n<h3><a id=\"_54__1143\"></a>🌈 5.4 删除用户</h3>\n<blockquote>\n<p>#注意这里的IP地址，一个用户可能会有多个<br/> drop user ‘用户名’@‘IP地址’;<br/> #比如<br/> drop user ‘Alian’@‘192.168.0.100’;</p>\n</blockquote>\n<h3><a id=\"_55__1149\"></a>🌈 5.5 权限管理</h3>\n<p>📖 查看权限</p>\n<blockquote>\n<p>mysql&gt; create user jea@‘%’ identified with mysql_native_password by ‘jea’;<br/> mysql&gt; show grants for jea@‘%’;</p>\n</blockquote>\n<p>📖 赋权</p>\n<blockquote>\n<p>grant 普通数据用户，查询、插入、更新、删除某数据库中所有表数据的权限<br/> mysql&gt; grant select, insert, update, delete on db_school.* to jea@‘%’;<br/> mysql&gt; flush privileges;<br/> ##grant 创建、修改、删除 MySQL 数据表结构权限<br/> grant create on testdb.* to developer@‘192.168.0.%’;<br/> grant alter on testdb.* to developer@‘192.168.0.%’;<br/> grant drop on testdb.* to developer@‘192.168.0.%’;<br/> ##grant 操作 MySQL 外键权限。<br/> grant references on testdb.* to developer@‘192.168.0.%’;<br/> ##grant 操作 MySQL 临时表权限。<br/> grant create temporary tables on testdb.* to developer@‘192.168.0.%’;<br/> ##grant 操作 MySQL 索引权限。<br/> grant index on testdb.* to developer@‘192.168.0.%’;<br/> ##grant 操作 MySQL 视图、查看视图源代码 权限。<br/> grant create view on testdb.* to developer@‘192.168.0.%’;<br/> grant show view on testdb.* to developer@‘192.168.0.%’;<br/> ##grant 操作 MySQL 存储过程、函数 权限<br/> grant create routine on testdb.* to developer@‘192.168.0.%’;<br/> grant alter routine on testdb.* to developer@‘192.168.0.%’;<br/> grant execute on testdb.* to developer@‘192.168.0.%’;</p>\n</blockquote>\n<p>📖 回收权限</p>\n<blockquote>\n<p>mysql&gt; revoke select, insert, update, delete on db_school.* from jea@‘%’;</p>\n</blockquote>\n<h2><a id=\"_6TCL_1180\"></a>🐴 6.TCL事务控制</h2>\n<blockquote>\n<p>在 MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务<br/> 默认情况下 MySQL 开启了自动提交<br/> 事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行<br/> 事务用来管理 insert,update,delete 语句<br/> 一般情况下建议开启自动提交<br/> 如果是大批量的数据插入，建议关闭自动提交，分批来提交<br/> mysql&gt; show variables like ‘autocommit’;<br/> mysql&gt; show engines ; --显示所有的存储引擎<br/> 关闭自动提交<br/> mysql&gt; set autocommit = off;<br/> mysql&gt; show variables like ‘autocommit’;</p>\n</blockquote>\n<p>SQL入门到高手推荐学习资源<br/> ① 牛客题霸刷题-SQL必知必会50道<br/> <a href=\"https://jeames.blog.csdn.net/article/details/125021153\">https://jeames.blog.csdn.net/article/details/125021153</a><br/> ②初学者怎样快速学会 SQL<br/> <a href=\"https://jeames.blog.csdn.net/article/details/124834268\">https://jeames.blog.csdn.net/article/details/124834268</a><br/> ③一份热乎乎的MySQL实训真题，让你成为SQL高手<br/> <a href=\"https://jeames.blog.csdn.net/article/details/123144444\">https://jeames.blog.csdn.net/article/details/123144444</a><br/> ④重温SQL行转列，性能又双叒提升了<br/> <a href=\"https://jeames.blog.csdn.net/article/details/122891838\">https://jeames.blog.csdn.net/article/details/122891838</a><br/> ⑤LeetCode刷题SQL专项<br/> <a href=\"https://blog.csdn.net/weixin_41645135/category_11826559.html\">https://blog.csdn.net/weixin_41645135/category_11826559.html</a></p>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/1434a66beefb4ba9bda3d619c776c19a.gif#pic_center\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2022-06-01 11:31:04", "summary": "哈喽！大家好，我是邦德，江湖人称，年工作经验一位上进心十足的大数据领域博主！中国联盟成员，目前从事及程序编程擅长主流数据、、运维开发，备份恢复，安装迁移，性能优化、故障应急处理等。如果有对数据库感兴趣"}