{"blogid": "126541995", "writerAge": "码龄4年", "writerBlogNum": "363", "writerCollect": "362", "writerComment": "271", "writerFan": "682", "writerGrade": "6级", "writerIntegral": "7126", "writerName": "码海兴辰", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126541995.jpg", "writerRankTotal": "2388", "writerRankWeekly": "481", "writerThumb": "415", "writerVisitNum": "389923", "blog_read_count": "774", "blog_time": "已于 2022-09-04 17:05:39 修改", "blog_title": "MYSQL史上最全学习分享", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>数据库</strong></strong></p>\n<p> </p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">数据库（<strong><strong>DataBase</strong></strong>）简称DB。数据库是用于存储和管理数据的仓库。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">数据库的特点：</p>\n<ol><li style=\"text-align:justify;\">持久化存储数据。<strong><span style=\"color:#ff0000;\"><strong>其实数据库就是一个文件系统</strong></span></strong></li><li style=\"text-align:justify;\">方便存储和管理数据</li><li style=\"text-align:justify;\">使用了统一的方式操作数据库--SQL</li></ol>\n<p style=\"margin-left:.0001pt;text-align:justify;\">常见的数据库排行榜</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"184\" src=\"..\\..\\static\\image\\4317c702862e45f890624b8995b0820f.png\" width=\"486\"/></p>\n<p></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">MySQL：开源免费的数据库，小型的数据库，已经被Oracle收购了。MySQL6.x版本也开始收费。后来Sun公司收购了MySQL，而Sun公司又被Oracle收购</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">Oracle：收费的大型数据库，Oracle 公司的产品。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">DB2 ：IBM 公司的数据库产品,收费的。常应用在银行系统中。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">SQL Server：MicroSoft 公司收费的中型的数据库。C#、.net 等语言常使用。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">SQLite: 嵌入式的小型数据库，应用在手机端，如：Android。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>MySQL</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">MySQL服务启动：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 手动。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. cmd--&gt; services.msc 打开服务的窗口</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3. 使用管理员打开cmd</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">net start mysql：启动mysql的服务</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">net stop mysql：关闭mysql服务</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">MySQL登录：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. mysql -uroot -p密码</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. mysql -h + ip -uroot -p连接目标的密码</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3. mysql --host=ip --user=root --password=连接目标的密码</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">MySQL退出：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. exit</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. quit</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">MySQL目录结构</p>\n<ol><li style=\"text-align:justify;\">MySQL安装目录：basedir=\"D:\\Program Files\\MySQL\\MySQL Server 5.5\"</li></ol>\n<p style=\"margin-left:.0001pt;text-align:justify;\">配置文件 my.ini</p>\n<ol><li style=\"text-align:justify;\">MySQL数据目录：datadir=\"C:/ProgramData/MySQL/MySQL Server 5.5/Data/\"</li></ol>\n<p style=\"margin-left:.0001pt;text-align:justify;\">数据库、表、数据的关系图</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"210\" src=\"..\\..\\static\\image\\a59733188980460bab2baa2386b065bb.png\" width=\"466\"/></p>\n<p></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">数据库：文件夹</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">表：文件</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">数据：数据</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>SQL</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">SQL(Structured Query Language)：结构化查询语言。它定义了操作<strong><span style=\"color:#ff0000;\"><strong>所有关系型数据库</strong></span></strong>的规则。每一种数据库操作的方式存在不一样的地方，称为“方言”。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>SQL通用语法</strong></strong></p>\n<ol><li style=\"text-align:justify;\">SQL 语句可以单行或多行书写，以分号结尾。</li></ol>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. 可使用空格和缩进来增强语句的可读性。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3. MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">4. 拥有3种注释：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">单行注释: -- 注释内容 或 # 注释内容(mysql 特有) （--中间必须要空格）</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">多行注释: /* 注释 */</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>SQL分类</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1) DDL(Data Definition Language)数据定义语言</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">用来定义数据库对象：数据库，表，列等。关键字：create, drop,alter等</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2) DML(Data Manipulation Language)数据操作语言</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">用来对数据库中表的数据进行增删改。关键字：insert, delete, update等</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3) DQL(Data Query Language)数据查询语言</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">用来查询数据库中表的记录(数据)。关键字：select, where 等</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">4) DCL(Data Control Language)数据控制语言(了解)</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT， REVOKE等</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>DDL：操作数据库、表</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>操作数据库：CRUD</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. <strong><strong>C(Create):创建</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* 创建数据库：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* create database数据库名称;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* 创建数据库，判断不存在，再创建：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* create database if not exists 数据库名称;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* 创建数据库，并指定字符集</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* create database 数据库名称 character set 字符集名;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2.<strong><strong> R(Retrieve)</strong></strong><strong><strong>:</strong></strong><strong><strong>查询</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* 查询所有数据库的名称:</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* show databases;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* 查询某个数据库的字符集:查询某个数据库的创建语句</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* show create database 数据库名称;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3. <strong><strong>U(Update):修改</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* 修改数据库的字符集</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* alter database 数据库名称 character set 字符集名称;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ff0000;\"><strong>在数据库中修改为utf-8字符集时不使用 - 而是utf8</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">4. <strong><strong>D(Delete):删除</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* 删除数据库</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* drop database 数据库名称;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* 判断数据库存在，存在再删除</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* drop database if exists 数据库名称;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">5.<strong><strong>使用数据库</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* 查询当前正在使用的数据库名称</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* select database();</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* 使用数据库</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* use 数据库名称;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>操作表</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. <strong><strong>C(Create)</strong></strong><strong><strong>:</strong></strong><strong><strong>创建</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">create table 表名(</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">列名1 数据类型1<strong><span style=\"color:#ff0000;\"><strong>,</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">列名2 数据类型2<strong><span style=\"color:#ff0000;\"><strong>,</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">....</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">列名n 数据类型n</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">);</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ff0000;\"><strong>注意：最后一列，不需要加逗号（,）</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ff0000;\"><strong>数据库类型：</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. int：整数类型</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">age int,</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. double:小数类型</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"> score double(5,2)</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><span style=\"color:#0000ff;\">5表示此小数最多有五位，2表示小数点后最多保留两位</span></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3. date:日期，只包含年月日，yyyy-MM-dd</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">4. datetime:日期，包含年月日时分秒yyyy-MM-dd HH:mm:ss</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">5. timestamp:时间戳类型，包含年月日时分秒yyyy-MM-dd HH:mm:ss</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#00b0f0;\"><strong>如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间，来自动赋值</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">6. varchar：字符串</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">name varchar(20)：姓名最大20个字符</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">zhangsan 8个字符  张三 2个字符</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#00b0f0;\"><strong>如果超过最大数值则会报错</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>创建表</strong></strong><strong><strong>：</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">create table student1(</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">id int,</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">name varchar(32),</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">age int ,</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">score double(4,1),</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">birthday date,</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">insert_time timestamp</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">);</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>复制表</strong></strong><strong><strong>：</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">create table 表名 like 被复制的表名;   </p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>2. R(Retrieve)</strong></strong><strong><strong>:</strong></strong><strong><strong>查询</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">查询某个数据库中所有的表名称</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">show tables;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">查询表结构</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">desc 表名;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">查询某个表的字符集;查询某个表的创建语句</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">show create table 表名;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>3. U(Update)</strong></strong><strong><strong>:</strong></strong><strong><strong>修改</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 修改表名</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">alter table 表名 rename to 新的表名;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. 修改表的字符集</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">alter table 表名 character set 字符集名称;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3. 添加一列</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">alter table 表名 add 列名 数据类型;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">4. 修改列名称 类型</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">alter table 表名 change 列名 新列别 新数据类型;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">alter table 表名 modify 列名 新数据类型;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">5. 删除列</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">alter table 表名 drop 列名;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>4. D(Delete):删除</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">drop table 表名;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">drop table if exists 表名 ;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>DML：增删改表中数据</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>1. </strong></strong><strong><strong>添加数据</strong></strong><strong><strong>：</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">语法：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">insert into表名(列名1,列名2,...列名n) values(值1,值2,...值n);</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">注意：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 列名和值要一一对应（个数和数据类型要相同）。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. 如果表名后，不定义列名，则默认给所有列添加值</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">insert into 表名 values(值1,值2,...值n);</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ff0000;\"><strong>使用该方式一定要将所有列名赋值上对应的值，否则将会报错</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3. 除了数字类型，其他类型需要使用引号(单双都可以)引起来</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>2. 删除数据：</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">语法：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">delete from 表名 [where 条件]</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">注意：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 如果不加条件，则删除表中所有记录。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. 如果要删除所有记录：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. delete from 表名; -- 不推荐使用。有多少条记录就会执行多少次删除操作</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. <strong><strong>TRUNCATE TABLE 表名; -- 推荐使用，效率更高：先删除表，然后再创建一张一样的空表。</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#00b0f0;\"><strong>只使用了两条代码（DROP TABLE + CREATE TABLE）</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>3. 修改数据：</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">语法：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">update 表名 set 列名1 = 值1, 列名2 = 值2,... [where 条件];</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">注意：</p>\n<ol><li style=\"text-align:justify;\">如果不加任何条件，则会将表中所有记录全部修改。</li></ol>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>DQL：查询表中的记录</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>1. </strong></strong><strong><strong>语法：</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">select</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">字段列表</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">from</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">表名列表</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">where</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">条件列表</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">group by</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">分组字段</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">having</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">分组之后的条件</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">order by</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">排序</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">limit</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">分页限定</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>2. </strong></strong><strong><strong>基础查询</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 多个字段的查询</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">select 字段名1，字段名2... from 表名；</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">注意：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">如果查询所有字段，则可以使用*来替代字段列表。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>查询所有该表中的数据：</strong></strong><strong><strong>select * from 表名;</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#00b0f0;\"><strong>但是使用*号查询列表的可读性很低，所以很多时候还是需要将全部字段名写出方便理解有哪些字段</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. 去除重复的结果集：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">select distinct 字段名1，字段名2... from 表名；</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#00b0f0;\"><strong>去除重复必须保证结果集完全相同才会去除，只要有一条列表数据不同，就不会去除。</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3. 计算列</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">一般可以使用四则运算计算一些列的值。（一般只会进行数值型的计算）</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">默认情况下null参与的运算，计算结果都为null。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>ifnull(表达式1,表达式2)：</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">表达式1：哪个字段需要判断是否为null</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">表达式2：如果该字段为null需要替换成的值</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">4. 起别名：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">as：更改查询的字段名的名称，as也可以省略。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>3. 条件查询</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. where子句后跟条件</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. 运算符（要在运算符前面写上需要操作的列名）</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>&gt; 、&lt; 、&lt;= 、&gt;= 、= 、&lt;&gt;</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#00b0f0;\"><strong>&lt;&gt;在</strong></span></strong><strong><span style=\"color:#00b0f0;\"><strong>SQL</strong></span></strong><strong><span style=\"color:#00b0f0;\"><strong>中表示不等于，在</strong></span></strong><strong><span style=\"color:#00b0f0;\"><strong>mysql</strong></span></strong><strong><span style=\"color:#00b0f0;\"><strong>中也可以使用</strong></span></strong><strong><span style=\"color:#00b0f0;\"><strong>!=</strong></span></strong><strong><span style=\"color:#00b0f0;\"><strong>，mysql中没有</strong></span></strong><strong><span style=\"color:#00b0f0;\"><strong>==</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>BETWEEN...AND</strong></strong><strong><strong>...：</strong></strong>表示查询在两个数值之间</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>IN(集合)</strong></strong><strong><strong>：</strong></strong>表示查询该表中符合在括号集合中的任意一个数值的数据。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>LIKE：</strong></strong>模糊查询</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">占位符：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">_:单个任意字符</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#00b0f0;\"><strong>可以使用指定数量的_占位符来表示需要指定几个字符的数据</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">%：多个任意字符</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>IS NULL</strong></strong><strong><strong>：</strong></strong>查询该列的数值是否有为null的（中间有空格）</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ff0000;\"><strong>null不能通过=（!=）来判断</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">and 或 &amp;&amp;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">or 或 ||</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">not 或 !</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ff0000;\"><strong>在SQL语句中推荐使用英文</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#00b0f0;\"><strong>注意：在查询是可能遇到查询结果与预想不同的情况，可能是在添加数据时在某些数据后不小心添加上了一个空格导致的。</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>4.排序查询</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">语法：order by子句</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">order by 排序字段1 排序方式1，排序字段2 排序方式2...</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">排序方式（默认ASC）：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">ASC：升序，默认的。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">DESC：降序。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">注意：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ff0000;\"><strong>如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件。</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>5. </strong></strong><strong><strong>聚合函数</strong></strong>：将一列数据作为一个整体，进行<strong><strong>纵向</strong></strong>的计算。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. count：计算个数</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 一般选择非空的列：主键</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. count(*)</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">count(*)只要该行数据中有一列数据被赋值，就会计算该行</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. max：计算最大值</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3. min：计算最小值</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">4. sum：计算和</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">5. avg：计算平均值</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">注意：聚合函数的计算，排除null值。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">解决方案：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. <strong><strong>选择不包含非空的列进行计算</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. IFNULL函数</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>6</strong></strong><strong><strong>.分组查询:</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 语法：group by 分组字段；</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. 注意：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 分组之后查询的字段只能写：分组字段、聚合函数</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. where和having的区别？</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. where在分组之前进行限定，如果不满足条件，则不参与分组。having在分组之后进行限定，如果不满足结果，则不会被查询出来</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2.<strong><strong> where后不可以跟聚合函数</strong></strong><strong><strong>，</strong></strong><strong><strong>having可以进行聚合函数的判断。</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>7.</strong></strong><strong><strong>分页查询</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 语法：limit 开始的索引,每页查询的条数;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>2. 公式：开始的索引 = （当前的页码 - 1） * 每页显示的条数</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3. limit是一个MySQL\"方言\"</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>MySQL数据类型</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">详细的数据类型如下</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"269\" src=\"..\\..\\static\\image\\3a1ffec52fda43a2ae60acd1fdabc3f3.png\" width=\"391\"/></p>\n<p><img alt=\"\" height=\"42\" src=\"..\\..\\static\\image\\af3a4c72bce849f2a865998d5bd1610f.png\" width=\"391\"/></p>\n<p></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>多表查询</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">多表查询的结果集也被称为<strong><strong>笛卡尔积：</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">有两个集合A,B .取这两个集合的所有组成情况。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">要完成多表查询，需要消除无用的数据</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>多表查询的分类：</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>1. 内连接查询：</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>1. 隐式内连接：使用where条件消除无用数据</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">例子：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">-- 查询所有员工信息和对应的部门信息</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">SELECT * FROM emp,dept WHERE emp.`dept_id` = dept.`id`;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">-- 查询员工表的名称，性别。部门表的名称</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ffc000;\"><strong>SELECT emp.name,emp.gender,dept.name FROM emp,dept WHERE emp.`dept_id` = dept.`id`;</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>-- 简化查询操作：起别名</strong></strong><strong> </strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">SELECT</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">t1.name, -- 员工表的姓名</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">t1.gender,-- 员工表的性别</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">t2.name -- 部门表的名称</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">FROM</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">emp t1, -- 给表起别名</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">dept t2</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">WHERE</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">t1.`dept_id` = t2.`id`;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ff0000;\"><strong>这样的多行写法是最正规的写法，将SQL语句写在一行内会非常影响阅读，当SQL语句内容繁多时。</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>2. 显式内连接</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">语法：select 字段列表 from 表名1 [inner] join 表名2 on 条件</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">例如：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ffc000;\"><strong>SELECT * FROM emp INNER JOIN dept ON emp.`dept_id` = dept.`id`;</strong></span></strong><strong> </strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">SELECT * FROM emp JOIN dept ON emp.`dept_id` = dept.`id`;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ff0000;\"><strong>同样可以使用上例中的起别名操作等</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>3. 使用内连接查询的思维逻辑：</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 从哪些表中查询数据</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. 条件是什么</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3. 查询哪些字段</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>2. 外链接查询：</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>1. 左外连接</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">语法：select 字段列表 from 表1 left [outer] join 表2 on 条件；</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>查询的是左表所有数据以及其交集部分。</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">例子：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">-- 查询所有员工信息，如果员工有部门，则查询部门名称，没有部门，则不显示部门名称</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"> <strong><span style=\"color:#ffc000;\"><strong>SELECT t1.*,t2.`name` FROM emp t1 LEFT JOIN dept t2 ON t1.`dept_id` = t2.`id`;</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>2. 右外连接</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">语法：select 字段列表 from 表1 right [outer] join 表2 on 条件；</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>查询的是右表所有数据以及其交集部分。</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">例子：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ffc000;\"><strong>SELECT * FROM dept t2 RIGHT JOIN emp t1 ON t1.`dept_id` = t2.`id`;</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ff0000;\"><strong>条件其实是用于筛选正确信息用的，而左外连接和右外连接查询的交集部分指的是两表的各条数据某数据是否被其他数据所使用，如果有则显示该条数据的所有内容</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>3. 子查询</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">概念：查询中嵌套查询，称嵌套查询为子查询。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">-- 查询工资最高的员工信息</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">-- 1 查询最高的工资是多少 9000</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">SELECT MAX(salary) FROM emp;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">-- 2 查询员工信息，并且工资等于9000的</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">SELECT * FROM emp WHERE emp.`salary` = 9000;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">-- 一条sql就完成这个操作。子查询</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ffc000;\"><strong>SELECT * FROM emp WHERE emp.`salary` = (SELECT MAX(salary) FROM emp);</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>子查询不同情况</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>1. 子查询的结果是单行单列的：</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">子查询可以作为条件，使用运算符去判断。 运算符： &gt; &gt;= &lt; &lt;= =</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">-- 查询员工工资小于平均工资的人</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">SELECT * FROM emp WHERE emp.salary &lt; (SELECT AVG(salary) FROM emp);</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>2. 子查询的结果是多行单列的：</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">子查询可以作为条件，使用运算符in来判断</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">-- 查询'财务部'和'市场部'所有的员工信息</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">SELECT id FROM dept WHERE NAME = '财务部' OR NAME = '市场部';</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">SELECT * FROM emp WHERE dept_id = 3 OR dept_id = 2;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">-- 子查询</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ffc000;\"><strong>SELECT * FROM emp WHERE dept_id IN (SELECT id FROM dept WHERE NAME = '财务部' OR NAME = '市场部');</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>3. 子查询的结果是多行多列的：</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ff0000;\"><strong>子查询可以作为一张虚拟表参与查询</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">-- 查询员工入职日期是2011-11-11日之后的员工信息和部门信息</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">-- 子查询</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ffc000;\"><strong>SELECT * FROM dept t1 ,(SELECT * FROM emp WHERE emp.`join_date` &gt; '2011-11-11') t2</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">WHERE t1.id = t2.dept_id;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ff0000;\"><strong>其实就是将SELECT * FROM emp WHERE emp.`join_date` &gt; '2011-11-11'作为一张表进行多表查询的隐式内连接操作</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">-- 普通内连接</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ffc000;\"><strong>SELECT * FROM emp t1,dept t2 WHERE t1.`dept_id` = t2.`id` AND t1.`join_date` &gt;  '2011-11-11'</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>DCL</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">DBA：数据库管理员（职业）</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">DCL：管理用户，授权</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 管理用户</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 添加用户：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">语法：CREATE USER '用户名'@'主机名' IDENTIFIED BY '密码';</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. 删除用户：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">语法：DROP USER '用户名'@'主机名';</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3. 修改用户密码：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ffc000;\"><strong>UPDATE USER SET PASSWORD = PASSWORD('新密码') WHERE USER = '用户名';</strong></span></strong><strong><span style=\"color:#ffc000;\"><strong>（不适用于mysql8）</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ff0000;\"><strong>mysql8使用： ALTER USER </strong></span></strong><strong><span style=\"color:#ff0000;\"><strong>‘</strong></span></strong><strong><span style=\"color:#ff0000;\"><strong>用户名</strong></span></strong><strong><span style=\"color:#ff0000;\"><strong>’</strong></span></strong><strong><span style=\"color:#ff0000;\"><strong>@</strong></span></strong><strong><span style=\"color:#ff0000;\"><strong>’</strong></span></strong><strong><span style=\"color:#ff0000;\"><strong>主机名</strong></span></strong><strong><span style=\"color:#ff0000;\"><strong>’</strong></span></strong><strong><span style=\"color:#ff0000;\"><strong> IDENTIFIED BY </strong></span></strong><strong><span style=\"color:#ff0000;\"><strong>‘</strong></span></strong><strong><span style=\"color:#ff0000;\"><strong>新密码</strong></span></strong><strong><span style=\"color:#ff0000;\"><strong>’</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">UPDATE USER SET PASSWORD = PASSWORD('abc') WHERE USER = 'lisi';</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">SET PASSWORD FOR '用户名'@'主机名' = PASSWORD('新密码');</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">SET PASSWORD FOR 'root'@'localhost' = PASSWORD('123');</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ff0000;\"><strong>mysql中忘记了root用户的密码？</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. cmd -- &gt; net stop mysql 停止mysql服务</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">需要管理员运行该cmd</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. 使用无验证方式启动mysql服务：mysqld --skip-grant-tables</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3. 打开新的cmd窗口,直接输入mysql命令，敲回车。就可以登录成功</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">4. use mysql;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">5. update user set password = password('你的新密码') where user = 'root';</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">6. 关闭两个窗口</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">7. 打开任务管理器，手动结束mysqld.exe 的进程</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">8. 启动mysql服务</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">9. 使用新密码登录。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">4. 查询用户：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">-- 1. 切换到mysql数据库</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">USE myql;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">-- 2. 查询user表</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">SELECT * FROM USER;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">通配符：%表示可以在任意主机使用用户登录数据库（远程访问），<strong><strong>包括本地主机</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. 权限管理：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 查询权限：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">-- 查询权限</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">SHOW GRANTS FOR '用户名'@'主机名';</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">SHOW GRANTS FOR 'lisi'@'%';</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. 授予权限：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">-- 授予权限</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">grant 权限列表 on 数据库名.表名 to '用户名'@'主机名';</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">-- 给张三用户授予所有权限，在任意数据库任意表上</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">GRANT ALL ON *.* TO 'zhangsan'@'localhost';</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3. 撤销权限：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">-- 撤销权限：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">revoke 权限列表 on 数据库名.表名 from '用户名'@'主机名';</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">REVOKE UPDATE ON db3.`account` FROM 'lisi'@'%';</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>约束</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">概念：对表中的数据进行限定，保证数据的正确性、有效性和完整性。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">分类：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 主键约束：primary key</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. 非空约束：not null</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3. 唯一约束：unique</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">4. 外键约束：foreign key</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>非空约束：not null，值不能为null</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 创建表时添加约束</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">CREATE TABLE stu(</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">id INT,</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">NAME VARCHAR(20) NOT NULL</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">);</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. 创建表完后，添加非空约束</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">ALTER TABLE stu MODIFY NAME VARCHAR(20) NOT NULL;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3. 删除name的非空约束</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">ALTER TABLE stu MODIFY NAME VARCHAR(20);</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>唯一约束：unique，值不能重复</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 创建表时，添加唯一约束</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">CREATE TABLE stu(</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">id INT,</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">phone_number VARCHAR(20) UNIQUE -- 添加了唯一约束</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">);</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ff0000;\"><strong>注意</strong></span></strong><strong><strong>在</strong></strong><strong><strong>mysql</strong></strong><strong><span style=\"color:#ff0000;\"><strong>中，唯一约束限定的列的值可以有多个null</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. 删除唯一约束</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">ALTER TABLE stu DROP INDEX phone_number;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3. 在创建表后，添加唯一约束</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">ALTER TABLE stu MODIFY phone_number VARCHAR(20) UNIQUE;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>主键约束：primary key</strong></strong><strong><strong>（两个关键字）</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 注意：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 含义：非空且唯一</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. 一张表只能有一个字段为主键</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3. 主键就是表中记录的唯一标识</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. 在创建表时，添加主键约束</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">create table stu(</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">id int primary key,-- 给id添加主键约束</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">name varchar(20)</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">);</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3. 删除主键</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">ALTER TABLE stu DROP PRIMARY KEY;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#00b0f0;\"><strong>一个列表中只能有一个主键，因此不需要在后面写上指定字段。</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">4. 创建完表后，添加主键</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">ALTER TABLE stu MODIFY id INT PRIMARY KEY;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>5. 自动增长：</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 概念：<strong><strong>如果某一列是数值类型的</strong></strong>，使用auto_increment可以来完成值得自动增长</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. 在创建表时，添加主键约束，并且完成主键自增长</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">create table stu(</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">id int primary key auto_increment,-- 给id添加主键约束</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">name varchar(20)</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">);</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3. 删除自动增长</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">ALTER TABLE stu MODIFY id INT;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">4. 添加自动增长</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">ALTER TABLE stu MODIFY id INT AUTO_INCREMENT;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">5. 注意：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 自动增长只会跟随上一条主键的数值之后，并不会根据主要的排序队伍走。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. <strong><strong>一般情况下只有主键会使用自动增长</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>外键约束：foreign key,让表于表产生关系，从而保证数据的正确性。</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 在创建表时，可以添加外键</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">语法：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">create table 表名(</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">....</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">外键列<strong><span style=\"color:#ff0000;\"><strong>,</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ffc000;\"><strong>constraint 外键名称 foreign key (外键列名称) references 主表名称(主表列名称)</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">);</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">外键名称：自定义名称，可随意起名<strong><span style=\"color:#ff0000;\"><strong>但要注意不能重复</strong></span></strong>。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. 删除外键</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3. 创建表之后，添加外键</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ffc000;\"><strong>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称);</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ff0000;\"><strong>在添加时可以省略</strong></span></strong><strong><span style=\"color:#ff0000;\"><strong>ADD CONSTRAINT 外键名称</strong></span></strong><strong><span style=\"color:#ff0000;\"><strong>，如果省略了，那么在创建该外键时，系统会自动给其添加一个唯一的名称。</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ff0000;\"><strong>4. </strong></span></strong><strong><span style=\"color:#ff0000;\"><strong>注意：外键的值可以为NULL，但不能为不存在的外键值</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">5. 级联操作</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 分类：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 级联更新：ON UPDATE CASCADE</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ff0000;\"><strong>当绑定了的外键字段更改后，外键列也会随之一起更改。如果没有添加级联更新并且有与之关联的外键数据时，外键字段将无法修改。</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. 级联删除：ON DELETE CASCADE</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ff0000;\"><strong>当绑定了的外键字段删除后，外键列也会随之一起被删除。</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. 添加级联操作</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">语法：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ffc000;\"><strong>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 </strong></span></strong><strong><span style=\"color:#ffc000;\"><strong>FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称) ON UPDATE CASCADE ON DELETE CASCADE ;</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>数据库的设计</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 多表之间的关系</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>1. 分类：</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>1. 一对一(了解)：</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* 如：人和身份证</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* 分析：一个人只有一个身份证，一个身份证只能对应一个人</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>2. 一对多(多对一)：</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* 如：部门和员工</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* 分析：一个部门有多个员工，一个员工只能对应一个部门</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>3. 多对多：</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* 如：学生和课程</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* 分析：一个学生可以选择很多门课程，一个课程也可以被很多学生选择</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>2. 实现关系：</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>1. 一对多(多对一)：</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* 如：部门和员工</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* 实现方式：在多的一方建立外键，指向一的一方的主键。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"162\" src=\"..\\..\\static\\image\\588bdcecd27e4e03844f2a3b74e2c83e.png\" width=\"316\"/></p>\n<p></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>2. 多对多：</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* 如：学生和课程</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* 实现方式：多对多关系实现需要借助第三张中间表。中间表至少包含两个字段，这两个字段作为第三张表的外键，分别指向两张表的主键</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"194\" src=\"..\\..\\static\\image\\47194286b1ae446b860dd61607cfa5db.png\" width=\"382\"/></p>\n<p></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>3. 一对一(了解)：</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* 如：人和身份证</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* 实现方式：一对一关系实现，可以在任意一方添加唯一外键指向另一方的主键。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"157\" src=\"..\\..\\static\\image\\d85242bf72b147c3bcdcb00e26f1b47c.png\" width=\"335\"/></p>\n<p></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>3. 案例</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>-- 创建旅游线路分类表 tab_category</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>-- cid 旅游线路分类主键，自动增长</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>-- cname 旅游线路分类名称非空，唯一，字符串 100</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>CREATE TABLE tab_category (</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>cid INT PRIMARY KEY AUTO_INCREMENT,</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>cname VARCHAR(100) NOT NULL UNIQUE</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>);</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>-- 创建旅游线路表 tab_route</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>/*</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>rid 旅游线路主键，自动增长</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>rname 旅游线路名称非空，唯一，字符串 100</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>price 价格</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>rdate 上架时间，日期类型</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>cid 外键，所属分类</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>*/</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>CREATE TABLE tab_route(</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>rid INT PRIMARY KEY AUTO_INCREMENT,</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>rname VARCHAR(100) NOT NULL UNIQUE,</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>price DOUBLE,</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>rdate DATE,</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>cid INT,</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>FOREIGN KEY (cid) REFERENCES tab_category(cid)</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>);</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>/*创建用户表 tab_user</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>uid 用户主键，自增长</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>username 用户名长度 100，唯一，非空</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>password 密码长度 30，非空</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>name 真实姓名长度 100</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>birthday 生日</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>sex 性别，定长字符串 1</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>telephone 手机号，字符串 11</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>email 邮箱，字符串长度 100</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>*/</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>CREATE TABLE tab_user (</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>uid INT PRIMARY KEY AUTO_INCREMENT,</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>username VARCHAR(100) UNIQUE NOT NULL,</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>PASSWORD VARCHAR(30) NOT NULL,</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>NAME VARCHAR(100),</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>birthday DATE,</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>sex CHAR(1) DEFAULT '男',</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>telephone VARCHAR(11),</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>email VARCHAR(100)</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>);</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>/*</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>创建收藏表 tab_favorite</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>rid 旅游线路 id，外键</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>date 收藏时间</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>uid 用户 id，外键</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>rid 和 uid 不能重复，设置复合主键，同一个用户不能收藏同一个线路两次</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>*/</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>CREATE TABLE tab_favorite (</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>rid INT, -- 线路id</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>DATE DATETIME,</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>uid INT, -- 用户id</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ff0000;\"><strong>-- 创建复合主键</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ff0000;\"><strong>PRIMARY KEY(rid,uid), -- 联合主键</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>FOREIGN KEY (rid) REFERENCES tab_route(rid),</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>FOREIGN KEY(uid) REFERENCES tab_user(uid)</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>);</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>2. 数据库设计的范式</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">概念：设计数据库时，需要遵循的一些规范。要遵循后边的范式要求，必须先遵循前边的所有范式要求</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，<strong><span style=\"color:#ff0000;\"><strong>这些不同的规范要求被称为不同的范式</strong></span></strong>，<strong><strong>各种范式呈递次规范</strong></strong>，<strong><strong>越高的范式数据库冗余越小</strong></strong>。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#00b0f0;\"><strong>一般设计的数据库满足了前三个范式使用起来就比较合理了</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">分类：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>1. 第一范式（1NF）：</strong></strong>每一列都是不可分割的原子数据项</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#00b0f0;\"><strong>即表中的某个列有多个值时，必须拆分为不同的列。简而言之，第一范式每一列不可再拆分，称为原子性。</strong></span></strong> </p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>第一范式存在的问题：</strong></strong></p>\n<ol><li style=\"text-align:justify;\"><strong><strong>可能会存在非常严重的数据冗余（重复）</strong></strong></li><li style=\"text-align:justify;\"><strong><strong>数据添加存在问题</strong></strong></li><li style=\"text-align:justify;\"><strong><strong>数据删除存在问题</strong></strong></li></ol>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>2. 第二范式（2NF）</strong></strong>：在1NF的基础上，非码属性必须完全依赖于（<strong><span style=\"color:#ff0000;\"><strong>在1NF基础上消除非主属性对主码的部分函数依赖</strong></span></strong>）</p>\n<p style=\"margin-left:.0001pt;text-align:left;\"><strong><span style=\"color:#ff0000;\"><strong>解决了数据冗余的问题：将部分函数依赖外的属性去除或创建另一个需要的表将其余的属性完成第二范式规则</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:left;\"><strong><span style=\"color:#ff0000;\"><strong>第二范式的特点： </strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:left;\"><strong><span style=\"color:#ff0000;\"><strong>1) </strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:left;\"><strong><span style=\"color:#ff0000;\"><strong>一张表只描述一件事情。 </strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:left;\"><strong><span style=\"color:#ff0000;\"><strong>2) </strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:left;\"><strong><span style=\"color:#ff0000;\"><strong>表中的每一列都完全依赖于主键 </strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">几个概念：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>1. 函数依赖：</strong></strong>A--&gt;B,如果通过A属性(属性组)的值，可以确定唯一B属性的值。则称B依赖于A</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">例如：学号--&gt;姓名。  （学号，课程名称） --&gt; 分数</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>2. 完全函数依赖：</strong></strong>A--&gt;B， 如果A是一个属性组，则B属性值的确定需要依赖于A属性组中所有的属性值。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">例如：（学号，课程名称） --&gt; 分数</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>3. 部分函数依赖：</strong></strong>A--&gt;B， 如果A是一个属性组，则B属性值的确定只需要依赖于A属性组中某一些值即可。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">例如：（学号，课程名称） -- &gt; 姓名</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>4. 传递函数依赖：</strong></strong>A--&gt;B, B -- &gt;C . 如果通过A属性(属性组)的值，可以确定唯一B属性的值，在通过B属性（属性组）的值可以确定唯一C属性的值，则称 C 传递函数依赖于A</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">例如：学号--&gt;系名，系名--&gt;系主任</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>5. 码：</strong></strong>如果在一张表中，一个属性或属性组，被其他所有属性所完全依赖，则称这个属性(属性组)为该表的码</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">例如：该表中码为：（学号，课程名称）</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">主属性：码属性组中的所有属性</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">非主属性：除过码属性组的属性</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>3. 第三范式（3NF）：</strong></strong>在2NF基础上，任何非主属性不依赖于属性（<strong><span style=\"color:#ff0000;\"><strong>在2NF基础上消除传递依赖</strong></span></strong>）</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ff0000;\"><strong>解决了数据添加删除的问题：将传递函数依赖的属性添加到另一个表中，使属性之间不再存在依赖。</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>数据库的备份还原</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 命令行：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">语法：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">备份： mysqldump -u用户名 -p密码 数据库名称 &gt; 保存的路径</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">mysqldump -u root -p root db1 &gt; D:\\java学习资料</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">还原：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 登录数据库</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. <strong><strong>创建数据库</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3. 使用数据库</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">4. 执行文件：source文件路径</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. 图形化工具：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>事务</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 事务的基本介绍</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 概念：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ff0000;\"><strong>开启事务后，事务内所包含的代码操作的数据将会变为临时数据，在确认数据是否正确后使用回滚(rollback)或提交(commit)才会将其修改。</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>原理图</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"270\" src=\"..\\..\\static\\image\\92f914b4b92a4c8c9399c2a72624a331.png\" width=\"557\"/></p>\n<p></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. 操作：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 开启事务： start transaction;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. 回滚：rollback;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">在哪开启的事务，就会在将数据返回至开启之前。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3. 提交：commit;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3. 例子：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">CREATE TABLE account (</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">id INT PRIMARY KEY AUTO_INCREMENT,</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">NAME VARCHAR(10),</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">balance DOUBLE</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">);</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">-- 添加数据</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">INSERT INTO account (NAME, balance) VALUES ('zhangsan', 1000), ('lisi', 1000);</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">SELECT * FROM account;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">UPDATE account SET balance = 1000;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">-- 张三给李四转账 500 元</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">-- 0. 开启事务</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">START TRANSACTION;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">-- 1. 张三账户 -500</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ffc000;\"><strong>UPDATE account SET balance = balance - 500 WHERE NAME = 'zhangsan';</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">-- 2. 李四账户 +500</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">-- 出错了...</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">UPDATE account SET balance = balance + 500 WHERE NAME = 'lisi';</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">-- 发现执行没有问题，提交事务</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">COMMIT;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">-- 发现出问题了，回滚事务</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">ROLLBACK;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">4. MySQL数据库中事务默认自动提交</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">事务提交的两种方式：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">自动提交：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ff0000;\"><strong>mysql就是自动提交的</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ff0000;\"><strong>一条DML(增删改)语句会自动提交一次事务。</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">手动提交：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>Oracle数据库默认是手动提交事务</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ff0000;\"><strong>在手动提交下，执行的DML语句同样需要使用commit关键字来提交数据，数据才会发生变化。</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>需要先开启事务，再提交</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>修改事务的默认提交方式：</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">查看事务的默认提交方式：SELECT @@autocommit; -- 1 代表自动提交0代表手动提交</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>修改默认提交方式：</strong></strong> set @@autocommit = 0;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. 事务的四大特征：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 原子性：是不可分割的最小操作单位，要么同时成功，要么同时失败。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. 持久性：当事务提交或回滚后，数据库会持久化的保存数据。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3. 隔离性：多个事务之间。相互独立。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">4. 一致性：事务操作前后，数据总量不变</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3. 事务的隔离级别（了解）</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">概念：多个事务之间隔离的，相互独立的。但是如果多个事务（并发）操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">存在问题：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. 脏读：一个事务，读取到另一个事务中没有提交的数据</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. 不可重复读(虚读)：一个事务中两次读取的数据内容不一致，要求的是一个事务中多次读取时数据是一致的，这是事务update时引发的问题</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3. 一个事务中两次读取的数据的数量不一致，要求在一个事务多次读取的数据的数量是一致的，这是insert或delete时引发的问题</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">隔离级别：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">1. read uncommitted：读未提交</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">产生的问题：脏读、不可重复读、幻读</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">2. read committed：读已提交 （Oracle）</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">产生的问题：不可重复读、幻读</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">3. repeatable read：可重复读 （MySQL默认）</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">产生的问题：幻读</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">4. serializable：串行化</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">可以解决所有的问题</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#0070c0;\"><strong>如果一个事务在操作数据并且没有提交或回滚数据，那么在其他地方就无法对相同数据进行操作（类似于多线程的同步锁，另一个线程在输入代码后会等待拿到锁的（在事务中的操作）线程结束后（提交/回滚）才会执行该代码（BLOCKED状态））</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">注意：隔离级别从小到大安全性越来越高，但是效率越来越低</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">数据库查询隔离级别：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">* select @@tx_isolation;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">数据库设置隔离级别：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">set global transaction isolation level  级别字符串;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">演示：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">set global transaction isolation level read uncommitted;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">start transaction;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">-- 转账操作</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">update account set balance = balance - 500 where id = 1;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">update account set balance = balance + 500 where id = 2;</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>5. </strong></strong><strong><strong>回滚点</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">在某些成功的操作完成之后，后续的操作有可能成功有可能失败，但是不管成功还是失败，前面操作都已经成功，可以在当前成功的位置设置一个回滚点。可以供后续失败操作返回到该位置，而不是返回所有操作，这个点称之为回滚点。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">回滚点的操作语句</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">设置回滚点 savepoint 名字</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">回到回滚点 rollback to 名字</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><a href=\"https://www.cnblogs.com/happyyangyanghappy/p/10870495.html\" title=\"SQL自定义函数\">SQL自定义函数</a></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>函数</strong></strong><strong><strong>：</strong></strong>在数据库中都有函数,这些函数属于系统函。除此之外用户也可以编写用户自定义函数。用户定义函数是存储在数据库中的代码块，可以把值返回到调用程序。调用时如同系统函数一样，如max(value)函数，其value被称为参数。函数一般功能比较简单，对于mysql函数只有传入参数，不像存储过程一样，有输入输出参数。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">　　数据库函数特点如下：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">· 存储函数将向调用者返回一个且仅返回一个结果值。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">· 存储函数嵌入在sql中使用的,可以在select中调用，就像内建函数一样，比如cos()、hex()。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">· 存储函数的参数类型类似于IN参数。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>自定义函数</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">自定义函数简单语法：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>CREATE FUNCTION 函数名称(</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>变量名称 类型,</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>变量名称 类型</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>)</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>RETURN 类型</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>BEGIN</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>DECLARE</strong></span></strong><strong><span style=\"color:#70ad47;\"><strong>... 定义变量;</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>-- 声明， 语句要完成的操作， </strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>RETURN 变量;</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#70ad47;\"><strong>END;</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>Mysql索引</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">·官方介绍索引是帮助MySQL<strong><strong>高效获取数据</strong></strong>的<strong><strong>数据结构</strong></strong>。更通俗的说，数据库索引好比是一本书前面的目录，能<strong><strong>加快数据库的查询速度</strong></strong>。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">·一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往是存储在磁盘上的文件中的（可能存储在单独的索引文件中，也可能和数据一起存储在数据文件中）。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>·我们通常所说的索引，包括聚集索引、覆盖索引、组合索引、前缀索引、唯一索引等，没有特别说明，默认都是使用B+树结构组织（多路搜索树，并不一定是二叉的）的索引。</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>索引的优势和劣势</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">优势：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">    ·<strong><strong>可以提高数据检索的效率，降低数据库的IO成本</strong></strong>，类似于书的目录。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">    ·通过<strong><strong>索引列对数据进行排序</strong></strong>，降低数据排序的成本，降低了CPU的消耗。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">        *被索引的列会自动进行排序，包括【单列索引】和【组合索引】，只是组合索引的排序要复杂一些。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">        *如果按照索引列的顺序进行排序，对应order by语句来说，效率就会提高很多。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">劣势：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">    ·<strong><strong>索引会占据磁盘空间</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">    ·<strong><strong>索引虽然会提高查询效率，但是会降低更新表的效率</strong></strong>。比如每次对表进行增删改操作，MySQL不仅要保存数据，还有保存或者更新对应的索引文件。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>索引类型</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>·主键索引</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">索引列中的值必须是唯一的，不允许有空值。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>·普通索引</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">MySQL中基本索引类型，没有什么限制，允许在定义索引的列中插入重复值和空值。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>·唯一索引</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">索引列中的值必须是唯一的，但是允许为空值。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>·全文索引</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">只能在文本类型CHAR,VARCHAR,TEXT类型字段上创建全文索引。字段长度比较大时，如果创建普通索引，在进行like模糊查询时效率比较低，这时可以创建全文索引。 MyISAM和InnoDB中都可以使用全文索引。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>·空间索引</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">MySQL在5.7之后的版本支持了空间索引，而且支持OpenGIS几何数据模型。MySQL在空间索引这方面遵循OpenGIS几何数据模型规则。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>·前缀索引</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">在文本类型如CHAR,VARCHAR,TEXT类列上创建索引时，可以指定索引列的长度，但是数值类型不能指定。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>·其他（按照索引列数量分类）</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">    1.单列索引</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">    2.组合索引</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">    组合索引的使用，需要遵循<strong><strong>最左前缀匹配原则（最左匹配原则）</strong></strong>。一般情况下在条件允许的情况下使用组合索引替代多个单列索引使用。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>索引的数据结构</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>MySQL的索引采用了B+树的数据结构。</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>Mysql的索引实现</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">Mysql有两种存储引擎的索引实现：<strong><strong>MyISAM索引</strong></strong>和<strong><strong>InnoDB索引</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>MyIsam索引</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">以一个简单的user表为例。user表存在两个索引，id列为主键索引，age列为普通索引：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ed7d31;\"><strong>CREATE TABLE `user`</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ed7d31;\"><strong>(</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ed7d31;\"><strong>  `id`       int(11) NOT NULL AUTO_INCREMENT,</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ed7d31;\"><strong>  `username` varchar(20) DEFAULT NULL,</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ed7d31;\"><strong>  `age`      int(11)     DEFAULT NULL,</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ed7d31;\"><strong>  PRIMARY KEY (`id`) USING BTREE,</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ed7d31;\"><strong>  KEY `idx_age` (`age`) USING BTREE</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ed7d31;\"><strong>) ENGINE = MyISAM</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ed7d31;\"><strong>  AUTO_INCREMENT = 1</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ed7d31;\"><strong>  DEFAULT CHARSET = utf8;</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">MyISAM的数据文件和索引文件是分开存储的。MyISAM使用B+树构建索引树时，叶子节点中存储的键值为索引列的值，数据为索引所在行的磁盘地址。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">在 MyISAM 中,辅助索引和主键索引的结构是一样的，没有任何区别，叶子节点的数据存储的都是行记录的磁盘地址。只是主键索引的键值是唯一的，而辅助索引的键值可以重复。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">查询数据时，由于辅助索引的键值不唯一，可能存在多个拥有相同的记录，所以即使是等值查询，也需要按照范围查询的方式在辅助索引树中检索数据。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>主键索引</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"264\" src=\"..\\..\\static\\image\\94f42d41f7504263ac7a47dab5eaf8ca.png\" width=\"503\"/></p>\n<p></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>根据主键等值查询数据：</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ed7d31;\"><strong>select * from user where id = 28;</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ff0000;\"><strong>磁盘IO次数：3次索引检索+记录数据检索。</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"335\" src=\"..\\..\\static\\image\\145ad32a5cce4aeb879e73bfbd86ead2.png\" width=\"488\"/></p>\n<p></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>根据主键范围查询数据：</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ed7d31;\"><strong>select * from user where id between 28 and 47;</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#ff0000;\"><strong>磁盘IO次数：4次索引检索+记录数据检索。</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"366\" src=\"..\\..\\static\\image\\4b23d27e48c74f0ab2df33eb8b6b55da.png\" width=\"554\"/></p>\n<p></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><span style=\"color:#0070c0;\"><strong>备注：以上分析仅供参考，MyISAM在查询时，会将索引节点缓存在MySQL缓存中，而数据缓存依赖于操作系统自身的缓存，所以并不是每次都是走的磁盘，这里只是为了分析索引的使用过程。</strong></span></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>InnoDB索引</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>主键索引（聚簇索引）</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">每个InnoDB表都有一个聚簇索引 ，聚簇索引使用B+树构建，叶子节点存储的数据是整行记录。一般情况下，聚簇索引等同于主键索引，当一个表没有创建主键索引时，InnoDB会自动创建一个ROWID字段来构建聚簇索引。 InnoDB创建索引的具体规则如下： //@TODO</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>Mysql函数</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>group_concat</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"25\" src=\"..\\..\\static\\image\\eb7e47d6eec846078e1101f151b2d5ab.png\" width=\"585\"/></p>\n<p></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>·DISTINCT：去除重复数据</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"276\" src=\"..\\..\\static\\image\\433d8deafe934644bd58c59c02c387e1.png\" width=\"508\"/></p>\n<p> <img alt=\"\" height=\"202\" src=\"..\\..\\static\\image\\009370c613f04ccb9040c8b1d3c3b5a9.png\" width=\"554\"/></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>SUBSTRING_INDEX</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">用于截取目标字符串</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>substring_index(string,sep,num)</strong></strong><strong><strong>：</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>·</strong></strong><strong><strong>string：</strong></strong>用于截取目标字符串的字符串。可为字段，表达式等。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>·</strong></strong><strong><strong>sep：</strong></strong>分隔符，string存在且用于分割的字符，比如“，”、“.”等。</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>·</strong></strong><strong><strong>num：</strong></strong><strong><span style=\"color:#ff0000;\"><strong>序号，为非0整数</strong></span></strong>。若为整数则表示从左到右数，若为负数则从右到左数。比如“www.mysql.com”截取字符‘www’，分割符为“.”，从左到右序号为1，即substring_index(\"www.mysql.com\",'.',1)；若从右开始获取“com”则为序号为-1即substring_index(\"www.mysql.com\",'.',-1)</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><strong><strong>date_add</strong></strong></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"271\" src=\"..\\..\\static\\image\\9f3e8829588944569d3e200ac1665697.png\" width=\"581\"/></p>\n<p></p>\n<p></p>\n</div>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-09-04 17:05:39", "summary": "数据库数据库简称。数据库是用于存储和管理数据的仓库。数据库的特点：持久化存储数据。其实数据库就是一个文件系统方便存储和管理数据使用了统一的方式操作数据库常见的数据库排行榜：开源免费的数据库，小型的数据"}