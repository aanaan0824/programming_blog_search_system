{"blogid": "124819182", "writerAge": "码龄11年", "writerBlogNum": "17", "writerCollect": "235", "writerComment": "50", "writerFan": "221", "writerGrade": "4级", "writerIntegral": "1504", "writerName": "Kilven_ck", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124819182.jpg", "writerRankTotal": "33553", "writerRankWeekly": "58290", "writerThumb": "55", "writerVisitNum": "206521", "blog_read_count": "5027", "blog_time": "已于 2022-05-18 14:40:23 修改", "blog_title": "C#时间戳使用详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h3>时间戳转换：</h3>\n<p>由于TimeZone类已经过时，官方推荐使用TimeZoneInfo来做时间的转换。</p>\n<pre><code class=\"language-cs\">        /// &lt;summary&gt;\n        /// 本时区日期时间转时间戳\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"datetime\"&gt;&lt;/param&gt;\n        /// &lt;returns&gt;long=Int64&lt;/returns&gt;\n        public static long DateTimeToTimestamp(DateTime datetime)\n        {\n            DateTime dd = new DateTime(1970, 1, 1, 0, 0, 0, 0);\n            DateTime timeUTC = DateTime.SpecifyKind(datetime, DateTimeKind.Utc);//本地时间转成UTC时间\n            TimeSpan ts = (timeUTC - dd);\n            return (Int64)ts.TotalMilliseconds;//精确到毫秒\n        }\n        /// &lt;summary&gt;\n        /// 时间戳转本时区日期时间\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"timeStamp\"&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public static DateTime TimestampToDateTime(string timeStamp)\n        {\n            DateTime dd = DateTime.SpecifyKind(new DateTime(1970, 1, 1, 0, 0, 0, 0),DateTimeKind.Local);\n            long longTimeStamp = long.Parse(timeStamp + \"0000\");\n            TimeSpan ts = new TimeSpan(longTimeStamp);\n            return dd.Add(ts);\n        }</code></pre>\n<h3></h3>\n<h3>==已下timeZone已过时=============================</h3>\n<h3>一、计算机时间为什么都从1970年1月1日为起始</h3>\n<h3 id=\"articleContentId\">二、本地时间和UTC时间相互转化DateTime.Now&amp;DateTime.UtcNow</h3>\n<h3>三、javascript和unix时间戳的使用和转化</h3>\n<h3>四、应用</h3>\n<h3></h3>\n<h3>一、计算机时间为什么都从1970年1月1日为起始</h3>\n<p>最初计算机操作系统是32位，而时间也是32为表示。Integer在java内用32位表示，因此32为能表示的最大值就是2147483647。另外一年365天的总秒数是31536000,2147483647/31536000=68.1,也就是说32为能表示的最长时间是68.1，也就是说32为能表示的最长时间就是68年，从1970年开始的话，加上68.1年，实际最终到2038年01月19日03时14分07秒，便会达到最大时间，过了这个时间点，所有32为操作系统时间便会变为10000000 00000000 00000000 00000000,算下来也就是1901年12月13日20时45分52秒，这样便会出现时间回归的现象，很多软件便会运行异常。</p>\n<p>到这里我想问题的答案已经显现出来了，那就是因为用32为来表示时间的最大间隔是68年，而最早出现的UNIX系统考虑到计算机产生的年代个应用的时限，综合取了1970年1月1日作为UNIX TIME的纪元时间（开始时间），至于时间回归现象相信随着64位操作系统可以表示到292,277,026,596年以后了，这是时间已经是两千亿年以后了，所以也不用担心了。</p>\n<h3>二、本地时间和UTC时间相互转化</h3>\n<pre><code class=\"language-cs\">DateTime localDateTime = DateTime.Now;//本地时间\n\nDateTime utcDateTime = DateTime.UtcNow;//协调世界时\n\nDateTime temp1 = DateTime.SpecifyKind(localDateTime, DateTimeKind.Utc);\n//本地时间转成UTC时间\n\nDateTime temp2 = DateTime.SpecifyKind(utcDateTime, DateTimeKind.Local);\n//将UTC时间转成本地时间\n\nDateTime temp3 = DateTime.SpecifyKind(localDateTime, DateTimeKind.Unspecified);\n//既不是本地时间也不是UTC时间</code></pre>\n<p>UtcNow的替代方法DateTimeOffset.UtcNow<br/>     前者通过分配DateTimeKind.Utc给其Kind属性来指示日期和时间值是协调世界时 (UTC), 后者会将日期和时间值分配给 UTC 时间的偏移量 (等于TimeSpan.Zero)。</p>\n<h3>三、javascript和unix时间戳的使用和转化</h3>\n<p><strong>1. 什么是时间戳</strong></p>\n<p>首先要清楚JavaScript与Unix的时间戳的区别：</p>\n<p>JavaScript时间戳：是指格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总毫秒数。</p>\n<p>Unix时间戳：是指格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总秒数。</p>\n<p>可以看出JavaScript时间戳总毫秒数，Unix时间戳是总秒数。</p>\n<p>比如同样是的 2016/11/03 12:30:00 ，转换为JavaScript时间戳为 1478147400000；转换为Unix时间戳为 1478147400。</p>\n<p><strong>2. JavaScript时间戳相互转换</strong></p>\n<p><strong>2.1 C# DateTime转换为JavaScript时间戳</strong></p>\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td> <p>1</p> <p>2</p> <p>3</p> <p>4</p> <p>5</p> </td><td> <p><code>System.DateTime startTime = TimeZone.CurrentTimeZone.ToLocalTime(</code><code>new</code> <code>System.DateTime(1970, 1, 1)); </code><code>// 当地时区</code></p> <p></p> <p><code>long</code> <code>timeStamp = (</code><code>long</code><code>)(DateTime.Now - startTime).TotalMilliseconds; </code><code>// 相差毫秒数</code></p> <p></p> <p><code>System.Console.WriteLine(timeStamp); </code></p> </td></tr></tbody></table>\n<p><strong>2.2 JavaScript时间戳转换为C# DateTime</strong></p>\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td> <p>1</p> <p>2</p> <p>3</p> <p>4</p> <p>5</p> <p>6</p> <p>7</p> </td><td> <p><code>long</code> <code>jsTimeStamp = 1478169023479;</code></p> <p></p> <p><code>System.DateTime startTime = TimeZone.CurrentTimeZone.ToLocalTime(</code><code>new</code> <code>System.DateTime(1970, 1, 1)); </code><code>// 当地时区</code></p> <p></p> <p><code>DateTime dt = startTime.AddMilliseconds(jsTimeStamp);</code></p> <p></p> <p><code>System.Console.WriteLine(dt.ToString(</code><code>\"yyyy/MM/dd HH:mm:ss:ffff\"</code><code>)); </code></p> </td></tr></tbody></table>\n<p><strong>3. Unix时间戳相互转换</strong></p>\n<p><strong>3.1 C# DateTime转换为Unix时间戳</strong></p>\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td> <p>1</p> <p>2</p> <p>3</p> <p>4</p> <p>5</p> </td><td> <p><code>System.DateTime startTime = TimeZone.CurrentTimeZone.ToLocalTime(</code><code>new</code> <code>System.DateTime(1970, 1, 1)); </code><code>// 当地时区</code></p> <p></p> <p><code>long</code> <code>timeStamp = (</code><code>long</code><code>)(DateTime.Now - startTime).TotalSeconds; </code><code>// 相差秒数</code></p> <p></p> <p><code>System.Console.WriteLine(timeStamp); </code></p> </td></tr></tbody></table>\n<p><strong>3.2 Unix时间戳转换为C# DateTime</strong></p>\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td> <p>1</p> <p>2</p> <p>3</p> <p>4</p> <p>5</p> <p>6</p> <p>7</p> </td><td> <p><code>long</code> <code>unixTimeStamp = 1478162177;</code></p> <p></p> <p><code>System.DateTime startTime = TimeZone.CurrentTimeZone.ToLocalTime(</code><code>new</code> <code>System.DateTime(1970, 1, 1)); </code><code>// 当地时区</code></p> <p></p> <p><code>DateTime dt = startTime.AddSeconds(unixTimeStamp);</code></p> <p></p> <p><code>System.Console.WriteLine(dt.ToString(</code><code>\"yyyy/MM/dd HH:mm:ss:ffff\"</code><code>)); </code></p> </td></tr></tbody></table>\n<h2>应用：</h2>\n<h3>一、获取系统时间的时间戳</h3>\n<p>获取系统时间的时间戳<br/>     public string GetTimeStamp()<br/>     {<!-- --><br/>         //DateTime.Now获取的是电脑上的当前时间<br/>            TimeSpan ts = DateTime.UtcNow - new DateTime(1970, 1, 1, 0, 0, 0, 0);<br/>         return Convert.ToInt64(ts.TotalSeconds).ToString();//精确到秒<br/>     }<br/><br/> 获取世界标准时区的当前时间的时间戳<br/>     public static string GetUtcNowTimeStamp()<br/>     {<!-- --><br/>         //DateTime.UtcNow获取的是世界标准时区的当前时间（比北京时间少8小时）<br/>         TimeSpan ts = DateTime.Now  - new DateTime(1970, 1, 1, 0, 0, 0, 0);<br/>         return Convert.ToInt64(ts.TotalMilliseconds).ToString();//精确到毫秒<br/>     }</p>\n<h3><br/> 二、时间戳和DateTime的相互转换</h3>\n<p>   /// 时间戳转换为DataTime<br/>     public DateTime TimestampToDataTime(long unixTimeStamp)<br/>     {        <br/>         System.DateTime startTime = TimeZone.CurrentTimeZone.ToLocalTime(new System.DateTime(1970, 1, 1)); // 当地时区<br/>         DateTime dt = startTime.AddSeconds(unixTimeStamp);<br/>         System.Console.WriteLine(dt.ToString(\"yyyy/MM/dd HH:mm:ss:ffff\"));<br/>         return dt;<br/>     }</p>\n<p><br/>     public long DataTimeToTimestamp(DateTime dateTime)<br/>     {<!-- --><br/>         //new System.DateTime(1970, 1, 1)<br/>         System.DateTime startTime = TimeZone.CurrentTimeZone.ToLocalTime(dateTime); // 当地时区<br/>         long timeStamp = (long)(DateTime.Now - startTime).TotalSeconds; // 相差秒数<br/>         System.Console.WriteLine(timeStamp);<br/>         return timeStamp;<br/>     }</p>\n<h3><br/> 三、时差计算</h3>\n<p>   /// 计算两个日期的时间间隔,返回的是时间间隔的日期差的绝对值......     <br/>     /// DateTime1 第一个日期和时间<br/>     /// DateTime2 第二个日期和时间<br/>     private string DateDiff(DateTime DateTime1, DateTime DateTime2)<br/>     {<!-- --><br/>         string dateDiff = null;<br/>         try<br/>         {<!-- --><br/>             TimeSpan ts1 = new TimeSpan(DateTime1.Ticks);<br/>             TimeSpan ts2 = new TimeSpan(DateTime2.Ticks);<br/>             TimeSpan ts = ts1.Subtract(ts2).Duration();<br/>             dateDiff = ts.Days.ToString() + \"天\"<br/>                     + ts.Hours.ToString() + \"小时\"<br/>                     + ts.Minutes.ToString() + \"分钟\"<br/>                     + ts.Seconds.ToString() + \"秒\";</p>\n<p>            Debug.Log(\"时间相差：\" + dateDiff);<br/>         }<br/>         catch<br/>         {<!-- --><br/>             print(\"计算失败！\");<br/>         }        <br/>         return dateDiff;<br/>     }<br/>     /// 已重载.计算一个时间与当前本地日期和时间的时间间隔,返回的是时间间隔的日期差的绝对值.<br/>     /// 一个日期和时间<br/>     private string DateDiff(DateTime DateTime1)<br/>     {<!-- --><br/>         print(this.DateDiff(DateTime1, DateTime.Now));<br/>         return this.DateDiff(DateTime1, DateTime.Now);<br/>     }</p>\n<h3>四、判断系统日期是否超过既定日期</h3>\n<p> public static bool IsProcessTimeOut(string TragetTime = \"20230227010000\")<br/>     {<!-- --><br/>         DateTime dt = DateTime.ParseExact(TragetTime, \"yyyyMMddhhmmss\", System.Globalization.CultureInfo.CurrentCulture);<br/>         if (DateTime.Now &gt; dt)<br/>         {<!-- --><br/>             //print(\"超时了\");<br/>             return true;<br/>         }<br/>         //print(\"未超时\");<br/>         return false;<br/>     }   </p>\n</div>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 1, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-05-18 14:40:23", "summary": "时间戳转换：由于类已经过时，官方推荐使用来做时间的转换。本时区日期时间转时间戳本地时间转成时间精确到毫秒时间戳转本时区日期时间已下已过时一、计算机时间为什么都从年月日为起始二、本地时间和时间相互转化三"}