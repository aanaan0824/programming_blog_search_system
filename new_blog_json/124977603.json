{"blogid": "124977603", "writerAge": "码龄2年", "writerBlogNum": "6", "writerCollect": "6", "writerComment": "0", "writerFan": "0", "writerGrade": "1级", "writerIntegral": "63", "writerName": "zy451", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124977603.jpg", "writerRankTotal": "117579", "writerRankWeekly": "1050450", "writerThumb": "3", "writerVisitNum": "6466", "blog_read_count": "4843", "blog_time": "于 2022-05-26 07:35:24 发布", "blog_title": "setTimeout与setInterval的区别", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h2 id=\"mark-H2-0\">setTimeout定义和用法</h2>\n<p>setTimeout() 方法用于在指定的毫秒数后调用函数或计算表达式。setTimeout 方法接收两个参数，第一个参数为回调函数函数或字符串，第二个参数为触发时间(单位：毫秒)</p>\n<h2 id=\"mark-H2-15\">setInterval()定义和用法</h2>\n<p>setInterval() 方法可按照指定的周期(以毫秒计)来调用函数或计算表达式。</p>\n<p>setInterval() 方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭。由 setInterval() 返回的 ID 值可用作 clearInterval() 方法的参数。</p>\n<p>注意事项：</p>\n<p><strong>(1)setInterval()无视代码错误</strong></p>\n<p>如果setInterval执行的代码由于某种原因出错，它还会持续不断地调用该代码。</p>\n<p><strong>(2)setInterval无视网络延迟</strong></p>\n<p>假设你每隔一段时间就通过Ajax轮询一次服务器，看看有没有新数据。而由于某些原因(服务器过载、临时断网、流量剧增、用户带宽受限，等等)，你的请求要花的时间远比你想象的要长。但setInterval不在乎。它仍然会按定时持续不断地触发请求，最终你的客户端网络队列会塞满Ajax调用。</p>\n<p><strong>(3)setInterval不保证执行</strong></p>\n<p>与setTimeout不同，你并不能保证到了时间间隔，代码就准能执行。如果你调用的函数需要花很长时间才能完成，那某些调用会被直接忽略。</p>\n<h2 id=\"mark-H2-34\">settimeout和setinterval区别</h2>\n<p>setTimeout() 方法用于在指定的毫秒数后调用函数或计算表达式,而setInterval()则可以在每隔指定的毫秒数循环调用函数或表达式，直到clearInterval把它清除。</p>\n<p>也就是说setTimeout()只执行一次，setInterval()可以执行多次。</p>\n<p>两个函数的参数也相同，第一个参数是要执行的code或句柄，第二个是延迟的毫秒数。</p>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-05-26 07:35:24", "summary": "定义和用法方法用于在指定的毫秒数后调用函数或计算表达式。方法接收两个参数，第一个参数为回调函数函数或字符串，第二个参数为触发时间单位：毫秒定义和用法方法可按照指定的周期以毫秒计来调用函数或计算表达式。"}