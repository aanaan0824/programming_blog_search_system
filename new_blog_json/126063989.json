{"blogid": "126063989", "writerAge": "码龄2年", "writerBlogNum": "183", "writerCollect": "6423", "writerComment": "2622", "writerFan": "26202", "writerGrade": "6级", "writerIntegral": "8980", "writerName": "是Dream呀", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126063989.jpg", "writerRankTotal": "1311", "writerRankWeekly": "89", "writerThumb": "3615", "writerVisitNum": "596961", "blog_read_count": "217", "blog_time": "于 2022-08-16 09:03:41 发布", "blog_title": "Python Web开发（十一）：ORM 对关联表的操作", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f9e3f20ca2164eff958539c6588f2c32.png\"/><br/> </p>\n<div class=\"toc\">\n<h3>本文目录：</h3>\n<ul><li><a href=\"#ORM__13\">一、ORM 对关联表的操作</a></li><li><ul><li><a href=\"#1_54\">1.外键表字段访问</a></li><li><a href=\"#2_61\">2.外键表字段过滤</a></li><li><ul><li><a href=\"#21__70\">2.1 错误方法</a></li><li><a href=\"#22_idid_79\">2.2 先获取中国的国家id，然后再通过id去找</a></li><li><a href=\"#23_country__name_97\">2.3 country__name一步到位</a></li><li><a href=\"#24_____105\">2.4 只需要 学生姓名 和 国家名两个字段</a></li><li><a href=\"#25__113\">2.5 重命名两个下划线</a></li></ul>\n</li><li><a href=\"#3_129\">3.外键表反向访问</a></li><li><a href=\"#4_169\">4.外键表反向过滤</a></li><li><ul><li><a href=\"#related_name__190\">没有指定related_name， 则应该使用表名转化为小写</a></li><li><a href=\"#_distinct_196\">使用 .distinct()去重</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_211\">二、实现项目代码</a></li><li><ul><li><a href=\"#1url_212\">1.url路由更新</a></li><li><a href=\"#2_286\">2.事务、多对多记录添加</a></li><li><a href=\"#3ORM_350\">3.ORM外键关联</a></li><li><ul><li><a href=\"#31_404\">3.1双下划线问题</a></li><li><a href=\"#32_435\">3.2多个订单问题</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_471\">`【系列好文推荐】`</a></li></ul>\n</div>\n<p></p>\n<blockquote>\n<p><code>前言：</code> 📢📢📢<br/> 🏅🏅🏅作者简介：是Dream呀，华为云享专家、CSDN原力计划作者、Python领域优质创作者，专注分享Python领域原创系列文章。<br/> 🌻🌻🌻<strong>热门专栏</strong>：【<strong><a href=\"https://blog.csdn.net/weixin_51390582/category_11571272.html\">零基础学Python</a></strong>】<br/> 本课程是针对Python入门&amp;进阶打造的一全套课程，在这里，我将会一 一更新Python基础语法、Python爬虫、Web开发、 Django框架、Flask框架以及人工智能相关知识，帮助你成为Python大神，如果你喜欢的话就抓紧收藏订阅起来吧~💘💘💘<br/> 🍋🍋🍋如果对学习没有自制力或者没有一起学习交流的动力，欢迎私信我或者文末添加vx，拉你进群，群内有行业大佬帮大家解答疑问，我们一起学习，群内定期还会有抽奖活动和红包相送嗷，快来进入我们吧~<br/> 💕 入门须知：这片乐园从不缺乏天才，努力才是你的最终入场券！🚀🚀🚀<br/> 💓最后，愿我们都能在看不到的地方闪闪发光，一起加油进步🍺🍺🍺</p>\n</blockquote>\n<h1><a id=\"ORM__13\"></a>一、ORM 对关联表的操作</h1>\n<p>前面我们学过 一对多，一对一，多对多，都是通过外键来实现。<br/> 接下来，我们通过一个实例演示，Django ORM 如何 操作 外键关联关系<br/> 请大家在 <code>models.py</code> 中定义这样的两个Model，对应两张表：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f2486350a4a1465ba2cb9e00e548a7b0.png\"/><br/> <strong>然后，执行：</strong></p>\n<pre><code class=\"prism language-python\">python manage<span class=\"token punctuation\">.</span>py makemigrations common\npython manage<span class=\"token punctuation\">.</span>py migrate\n</code></pre>\n<p>产生了两个新的表，也就是我们刚加进去的：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f76311fac033401987a9cd97db184a55.png\"/><br/> 在数据库中执行：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\764f2d1bc79d4b20b017387219233d44.png\"/><br/> 此时，我们在数据库中便找到了我们的文件：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\048fd8ff802641fb81abf6c20db099dc.png\"/><br/> 然后，命令行中执行 <code>python manage.py shell</code> ，直接启动Django命令行，输入代码。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6d36794b8cd149959b8c884324a6586a.png\"/></p>\n<p>先输入如下代码，创建一些数据：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> common<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\nc1 <span class=\"token operator\">=</span> Country<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'中国'</span><span class=\"token punctuation\">)</span>\nc2 <span class=\"token operator\">=</span> Country<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'美国'</span><span class=\"token punctuation\">)</span>\nc3 <span class=\"token operator\">=</span> Country<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'法国'</span><span class=\"token punctuation\">)</span>\nStudent<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'白月'</span><span class=\"token punctuation\">,</span> grade<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> country<span class=\"token operator\">=</span>c1<span class=\"token punctuation\">)</span>\nStudent<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'黑羽'</span><span class=\"token punctuation\">,</span> grade<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> country<span class=\"token operator\">=</span>c1<span class=\"token punctuation\">)</span>\nStudent<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'大罗'</span><span class=\"token punctuation\">,</span> grade<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> country<span class=\"token operator\">=</span>c1<span class=\"token punctuation\">)</span>\nStudent<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'真佛'</span><span class=\"token punctuation\">,</span> grade<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> country<span class=\"token operator\">=</span>c1<span class=\"token punctuation\">)</span>\nStudent<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'Mike'</span><span class=\"token punctuation\">,</span> grade<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> country<span class=\"token operator\">=</span>c2<span class=\"token punctuation\">)</span>\nStudent<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'Gus'</span><span class=\"token punctuation\">,</span>  grade<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> country<span class=\"token operator\">=</span>c2<span class=\"token punctuation\">)</span>\nStudent<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'White'</span><span class=\"token punctuation\">,</span> grade<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> country<span class=\"token operator\">=</span>c2<span class=\"token punctuation\">)</span>\nStudent<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'Napolen'</span><span class=\"token punctuation\">,</span> grade<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> country<span class=\"token operator\">=</span>c3<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\36041affafe24cb8ad3e7d5e41986bcb.png\"/></p>\n<p>可以看到在我们的国家表和学生表中都产生了我们添加的名单：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9701496472bf469d95b0c34e5c5ba6fc.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c2312771445f4495a786136b29c0c45b.png\"/></p>\n<h2><a id=\"1_54\"></a>1.外键表字段访问</h2>\n<p>如果你已经获取了一个student对象，要得到他的国家名称只需这样：</p>\n<pre><code class=\"prism language-python\">s1 <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'白月'</span><span class=\"token punctuation\">)</span>\ns1<span class=\"token punctuation\">.</span>country<span class=\"token punctuation\">.</span>name\n</code></pre>\n<h2><a id=\"2_61\"></a>2.外键表字段过滤</h2>\n<p>如果，我们要查找Student表中所有 一年级 学生，很简单：</p>\n<pre><code class=\"prism language-python\">Student<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>grade<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d5a9878d1cce4e13abf1f74017cacfa0.png\"/></p>\n<p>如果现在，我们要查找Student表中所有 一年级中国 学生，该怎么写呢？</p>\n<h3><a id=\"21__70\"></a>2.1 错误方法</h3>\n<p><strong>不能这么写：</strong></p>\n<pre><code class=\"prism language-python\">Student<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>grade<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>country<span class=\"token operator\">=</span><span class=\"token string\">'中国'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4e35dd65b01d49079ed8fdcb4a9698f8.png\"/><br/> 因为，Student表中 country 并不是国家名称字符串字段，而是一个外键字段，其实是对应 Country 表中 id 字段 。</p>\n<h3><a id=\"22_idid_79\"></a>2.2 先获取中国的国家id，然后再通过id去找</h3>\n<p>可能有的朋友会这样想：我可以先获取中国的国家id，然后再通过id去找，像这样</p>\n<pre><code class=\"prism language-python\">cn <span class=\"token operator\">=</span> Country<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'中国'</span><span class=\"token punctuation\">)</span>\nStudent<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>grade<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>country_id<span class=\"token operator\">=</span>cn<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fd17632cbf28400ea2e5da7314122ebb.png\"/><br/> 注意外键字段的id是通过后缀 _id 获取的。</p>\n<p>或者这样，也是可以的</p>\n<pre><code class=\"prism language-python\">cn <span class=\"token operator\">=</span> Country<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'中国'</span><span class=\"token punctuation\">)</span>\nStudent<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>grade<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>country<span class=\"token operator\">=</span>cn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>上面的方法，写起来<strong>麻烦一些，有两步操作</strong>。而且需要<strong>发送两次数据请求给数据库服务，性能不高</strong>。</p>\n<h3><a id=\"23_country__name_97\"></a>2.3 country__name一步到位</h3>\n<p>其实，Django ORM 中，对外键关联，有更方便的语法。</p>\n<pre><code class=\"prism language-python\">Student<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>grade<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>country__name<span class=\"token operator\">=</span><span class=\"token string\">'中国'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>写起来简单，一步到位，而且只需要发送一个数据库请求，性能更好。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d78731d3091141ca96119441e2ff29e5.png\"/></p>\n<h3><a id=\"24_____105\"></a>2.4 只需要 学生姓名 和 国家名两个字段</h3>\n<p>如果返回结果只需要 <strong>学生姓名</strong> 和 <strong>国家名</strong>两个字段，可以这样指定values内容：</p>\n<pre><code class=\"prism language-python\">Student<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>grade<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>country__name<span class=\"token operator\">=</span><span class=\"token string\">'中国'</span><span class=\"token punctuation\">)</span>\\\n     <span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'country__name'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cc3632805e4d48f5a656c58ec279cf4b.png\"/></p>\n<h3><a id=\"25__113\"></a>2.5 重命名两个下划线</h3>\n<p>但是这样写有个问题：选择出来的记录中，国家名是 country__name 。 两个下划线比较怪。<br/> 有时候，前后端接口的设计者，定义好了接口格式，如果要求一定是 countryname 这样怎么办？<br/> 可以使用 <code>annotate 方法</code>将获取的字段值进行重命名，像下面这样：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> F\n\n<span class=\"token comment\"># annotate 可以将表字段进行别名处理</span>\nStudent<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>annotate<span class=\"token punctuation\">(</span>\n    countryname<span class=\"token operator\">=</span>F<span class=\"token punctuation\">(</span><span class=\"token string\">'country__name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    studentname<span class=\"token operator\">=</span>F<span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\\\n    <span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>grade<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>countryname<span class=\"token operator\">=</span><span class=\"token string\">'中国'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token string\">'studentname'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'countryname'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\158da3fed5ff46b5828da145af28bc33.png\"/></p>\n<h2><a id=\"3_129\"></a>3.外键表反向访问</h2>\n<p>前面学过， Django ORM中，关联表 正向关系是通过表外键字段（或者多对多）表示， 比如前面例子中Student表的 country字段。</p>\n<p>而反向关系，是通过 表Model名转化为小写 表示的。<br/> 比如，你已经获取了一个Country对象，如何获取到所有属于这个国家的学生呢？<br/> 可以这样</p>\n<pre><code class=\"prism language-python\">cn <span class=\"token operator\">=</span> Country<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'中国'</span><span class=\"token punctuation\">)</span>\ncn<span class=\"token punctuation\">.</span>student_set<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c0a71846d4974f47ad348e263e99d0a8.png\"/><br/> 通过 表Model名转化为小写 ，后面加上一个 _set 来获取所有的反向外键关联对象</p>\n<p>Django还给出了一个方法，可以更直观的反映 关联关系。</p>\n<p>在定义Model的时候，外键字段使用 <strong>related_name</strong> 参数，像这样：</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 国家表</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Country</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># country 字段是国家表的外键，形成一对多的关系</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name    <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    grade   <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>PositiveSmallIntegerField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    country <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>Country<span class=\"token punctuation\">,</span>\n                on_delete <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>PROTECT<span class=\"token punctuation\">,</span>\n                <span class=\"token comment\"># 指定反向访问的名字</span>\n                related_name<span class=\"token operator\">=</span><span class=\"token string\">'students'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8f1964629e6a421b8b53289a1a7245df.png\"/><br/> 就可以使用更直观的属性名，像这样</p>\n<pre><code class=\"prism language-python\">cn <span class=\"token operator\">=</span> Country<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'中国'</span><span class=\"token punctuation\">)</span>\ncn<span class=\"token punctuation\">.</span>students<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"4_169\"></a>4.外键表反向过滤</h2>\n<p>如果我们要获取所有 具有一年级学生 的国家名，该怎么写？</p>\n<p>当然可以这样</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 先获取所有的一年级学生id列表</span>\ncountry_ids <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>grade<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values_list<span class=\"token punctuation\">(</span><span class=\"token string\">'country'</span><span class=\"token punctuation\">,</span> flat<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 再通过id列表使用  id__in  过滤</span>\nCountry<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>id__in<span class=\"token operator\">=</span>country_ids<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\208c3ad637c64493b6bb08457ddefe86.png\"/><br/> 但是这样同样存在 麻烦 和性能的问题。<br/> Django ORM 可以这样写：</p>\n<pre><code class=\"prism language-python\">Country<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>students__grade<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>注意， 因为，我们定义表的时候，用 related_name=‘students’ 指定了反向关联名称 students ，所以这里是 students__grade 。 使用了反向关联名字。</p>\n<h3><a id=\"related_name__190\"></a>没有指定related_name， 则应该使用表名转化为小写</h3>\n<p>如果定义时，没有指定related_name， 则应该使用 表名转化为小写 ，就是这样:</p>\n<pre><code class=\"prism language-python\">Country<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>student__grade<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"_distinct_196\"></a>使用 .distinct()去重</h3>\n<p><strong>但是，我们发现，这种方式，会有重复的记录产生，如下</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fe259bd263a14bf49fbdaf683b64e6eb.png\"/></p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&lt;</span>QuerySet <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'id'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'中国'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'id'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'中国'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'id'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'美国'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'id'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'美国'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>可以使用 <strong>.distinct()</strong> 去重:</p>\n<pre><code class=\"prism language-python\">Country<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>student__grade<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>distinct<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9eeae142db864c10ac9d97cc7ebcb013.png\"/></p>\n<p>注意：distinct()对MySQL数据库无效。</p>\n<h1><a id=\"_211\"></a>二、实现项目代码</h1>\n<h2><a id=\"1url_212\"></a>1.url路由更新</h2>\n<p>现在，我们在 mgr 目录下面新建 order.py 处理 客户端发过来的 列出订单、添加订单 的请求。<br/> 同样，先写 dispatcher 函数，代码如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> JsonResponse\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> F\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> IntegrityError<span class=\"token punctuation\">,</span> transaction\n\n<span class=\"token comment\"># 导入 Order 对象定义</span>\n<span class=\"token keyword\">from</span>  common<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span>  Order<span class=\"token punctuation\">,</span>OrderMedicine\n\n<span class=\"token keyword\">import</span> json\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dispatcher</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 根据session判断用户是否是登录的管理员用户</span>\n    <span class=\"token keyword\">if</span> <span class=\"token string\">'usertype'</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> request<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token string\">'ret'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">302</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'msg'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'未登录'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'redirect'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'/mgr/sign.html'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            status<span class=\"token operator\">=</span><span class=\"token number\">302</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">[</span><span class=\"token string\">'usertype'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'mgr'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token string\">'ret'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">302</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'msg'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'用户非mgr类型'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'redirect'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'/mgr/sign.html'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            status<span class=\"token operator\">=</span><span class=\"token number\">302</span><span class=\"token punctuation\">)</span>\n\n\n    <span class=\"token comment\"># 将请求参数统一放入request 的 params 属性中，方便后续处理</span>\n\n    <span class=\"token comment\"># GET请求 参数 在 request 对象的 GET属性中</span>\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">:</span>\n        request<span class=\"token punctuation\">.</span>params <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>GET\n\n    <span class=\"token comment\"># POST/PUT/DELETE 请求 参数 从 request 对象的 body 属性中获取</span>\n    <span class=\"token keyword\">elif</span> request<span class=\"token punctuation\">.</span>method <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'PUT'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'DELETE'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 根据接口，POST/PUT/DELETE 请求的消息体都是 json格式</span>\n        request<span class=\"token punctuation\">.</span>params <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 根据不同的action分派给不同的函数进行处理</span>\n    action <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">[</span><span class=\"token string\">'action'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> action <span class=\"token operator\">==</span> <span class=\"token string\">'list_order'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> listorder<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> action <span class=\"token operator\">==</span> <span class=\"token string\">'add_order'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> addorder<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 订单 暂 不支持修改 和删除</span>\n\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'ret'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'msg'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'不支持该类型http请求'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>和以前差不多，没有什么好说的。</p>\n<p>然后，我们在 <code>mgr\\urls.py</code> 里面加上 对 orders 请求处理的路由：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path\n<span class=\"token keyword\">from</span> mgr <span class=\"token keyword\">import</span> customer<span class=\"token punctuation\">,</span>sign_in_out<span class=\"token punctuation\">,</span>medicine<span class=\"token punctuation\">,</span>order\n\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'customers'</span><span class=\"token punctuation\">,</span> customer<span class=\"token punctuation\">.</span>dispatcher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'medicines'</span><span class=\"token punctuation\">,</span> medicine<span class=\"token punctuation\">.</span>dispatcher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'orders'</span><span class=\"token punctuation\">,</span> order<span class=\"token punctuation\">.</span>dispatcher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># 加上这行</span>\n\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'signin'</span><span class=\"token punctuation\">,</span> sign_in_out<span class=\"token punctuation\">.</span>signin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'signout'</span><span class=\"token punctuation\">,</span> sign_in_out<span class=\"token punctuation\">.</span>signout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token punctuation\">]</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9b2aaf735bdb4f1b967dfe897c78c552.png\"/></p>\n<h2><a id=\"2_286\"></a>2.事务、多对多记录添加</h2>\n<p>接下来，我们添加函数 addorder，来处理 添加订单 请求。<br/> 我们添加一条订单记录，需要在2张表（Order 和 OrderMedicine ）中添加记录。</p>\n<p>这里就有个需要特别注意的地方， 两张表的插入，意味着我们要有两次数据库操作。</p>\n<p>如果第一次插入成功， 而第二次插入失败， 就会出现 Order表中 把订单信息写了一部分，而OrderMedicine表中 该订单的信息 却没有写成功。<br/> 这是个大问题： 就会造成 这个处理 做了一半。</p>\n<p>那么数据库中就会出现数据的不一致。术语叫 <strong>脏数据</strong><br/> 把一批数据库操作放在 事务 中， 该事务中的任何一次数据库操作 失败了， 数据库系统就会让 整个事务就会发生回滚，撤销前面的操作， 数据库回滚到这事务操作之前的状态。</p>\n<p>Django 怎么实现 事务操作呢？<br/> 这里我们可以使用 <code>Django 的 with transaction.atomic()</code><br/> 代码如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">addorder</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    info  <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># 从请求消息中 获取要添加订单的信息</span>\n    <span class=\"token comment\"># 并且插入到数据库中</span>\n\n    \n    <span class=\"token keyword\">with</span> transaction<span class=\"token punctuation\">.</span>atomic<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        new_order <span class=\"token operator\">=</span> Order<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>info<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span>\n                                         customer_id<span class=\"token operator\">=</span>info<span class=\"token punctuation\">[</span><span class=\"token string\">'customerid'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        batch <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>OrderMedicine<span class=\"token punctuation\">(</span>order_id<span class=\"token operator\">=</span>new_order<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>medicine_id<span class=\"token operator\">=</span>mid<span class=\"token punctuation\">,</span>amount<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  \n                    <span class=\"token keyword\">for</span> mid <span class=\"token keyword\">in</span> info<span class=\"token punctuation\">[</span><span class=\"token string\">'medicineids'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\">#  在多对多关系表中 添加了 多条关联记录</span>\n        OrderMedicine<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>bulk_create<span class=\"token punctuation\">(</span>batch<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'ret'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">:</span>new_order<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><code>with transaction.atomic()</code> 下面 缩进部分的代码，对数据库的操作，就都是在 一个事务 中进行了。<br/> 如果其中有任何一步数据操作失败了， 前面的操作都会回滚。</p>\n<p>这就可以防止出现 前面的 Order表记录插入成功， 而后面的 订单药品 记录插入失败而导致的数据不一致现象。<br/> OrderMedicine 对应的是订单和药品的多对对记录关系表。</p>\n<p>要在多对多表中加上关联记录，就是添加一条记录， 可以这样</p>\n<pre><code class=\"prism language-python\">OrderMedicine<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>order_id<span class=\"token operator\">=</span>new_order<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>medicine_id<span class=\"token operator\">=</span>mid<span class=\"token punctuation\">,</span>amount<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>我们这个例子中，一个订单可能会关联多个药品，也就是需要 插入 OrderMedicine 表中的数据 可能有很多条， 如果我们循环用</p>\n<pre><code class=\"prism language-python\">OrderMedicine<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>order_id<span class=\"token operator\">=</span>new_order<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>medicine_id<span class=\"token operator\">=</span>mid<span class=\"token punctuation\">,</span>amount<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>插入的话， 循环几次， 就会执行 几次SQL语句 插入的 数据库操作 这样性能不高。<br/> 我们可以把多条数据的插入，放在一个SQL语句中完成， 这样会大大提高性能。<br/> 方法就是使用 bulk_create， 参数是一个包含所有 该表的 Model 对象的 列表<br/> 就像上面代码这样</p>\n<pre><code class=\"prism language-python\">batch <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>OrderMedicine<span class=\"token punctuation\">(</span>order_id<span class=\"token operator\">=</span>new_order<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>medicine_id<span class=\"token operator\">=</span>mid<span class=\"token punctuation\">,</span>amount<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token keyword\">for</span> mid <span class=\"token keyword\">in</span> info<span class=\"token punctuation\">[</span><span class=\"token string\">'medicineids'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">#  在多对多关系表中 添加了 多条关联记录</span>\nOrderMedicine<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>bulk_create<span class=\"token punctuation\">(</span>batch<span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"3ORM_350\"></a>3.ORM外键关联</h2>\n<p>接下来，我们来编写listorder 函数用来处理 列出订单请求。</p>\n<p>根据接口文档，我们应该返回 订单记录格式，如下：</p>\n<pre><code class=\"prism language-python\"><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token builtin\">id</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"华山医院订单001\"</span><span class=\"token punctuation\">,</span> \n        create_date<span class=\"token punctuation\">:</span> <span class=\"token string\">\"2018-12-26T14:10:15.419Z\"</span><span class=\"token punctuation\">,</span>\n        customer_name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"华山医院\"</span><span class=\"token punctuation\">,</span>\n        medicines_name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"青霉素\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token builtin\">id</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> \n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"华山医院订单002\"</span><span class=\"token punctuation\">,</span> \n        create_date<span class=\"token punctuation\">:</span> <span class=\"token string\">\"2018-12-27T14:10:37.208Z\"</span><span class=\"token punctuation\">,</span>\n        customer_name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"华山医院\"</span><span class=\"token punctuation\">,</span>\n        medicines_name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"青霉素 | 红霉素 \"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span> \n</code></pre>\n<p>其中 ‘id’,‘name’,‘create_date’ 这些字段的内容获取很简单，order表中就有这些字段，<br/> 只需要这样写就可以了：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">listorder</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 返回一个 QuerySet 对象 ，包含所有的表记录</span>\n    qs <span class=\"token operator\">=</span> Order<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'create_date'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'ret'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'retlist'</span><span class=\"token punctuation\">:</span> newlist<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>问题是：‘customer_name’ 和 ‘medicines_name’ 这两个字段的值怎么获取呢？ 因为 订单对应的客户名字 和 药品的名字 都不在 Order 表中啊。</p>\n<p>Order 这个Model 中 有 ‘customer’ 字段 ， 它外键关联了 Customer 表中的一个 记录，这个记录里面 的 name字段 就是我们要取的字段。</p>\n<p>取 外键关联的表记录的字段值，在Django中很简单，可以直接通过 外键字段 后面加 两个下划线 加 关联字段名的方式 来获取。</p>\n<p>比如 这里我们就可以用 下面的代码来实现</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">listorder</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    qs <span class=\"token operator\">=</span> Order<span class=\"token punctuation\">.</span>objects\\\n            <span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span>\n                <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'create_date'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token comment\"># 两个下划线，表示取customer外键关联的表中的name字段的值</span>\n                <span class=\"token string\">'customer__name'</span>\n            <span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 将 QuerySet 对象 转化为 list 类型</span>\n    retlist <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>qs<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'ret'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'retlist'</span><span class=\"token punctuation\">:</span> retlist<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"31_404\"></a>3.1双下划线问题</h3>\n<p>首先，第一个问题， 接口文档需要的名字是 ‘customer_name’ 和 ‘medicines_name’。 里面只有一个下划线， 而我们这里却产生了 两个下划线。</p>\n<p>怎么办？</p>\n<p>可以使用 annotate 方法将获取的字段值进行重命名，像下面这样<br/> 写好后， 大家可以运行服务 ， 用我们做好的前端系统添加几条 订单记录， 然后再查看一下数据库里面的数据是否正确。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> F\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">listorder</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 返回一个 QuerySet 对象 ，包含所有的表记录</span>\n    qs <span class=\"token operator\">=</span> Order<span class=\"token punctuation\">.</span>objects\\\n            <span class=\"token punctuation\">.</span>annotate<span class=\"token punctuation\">(</span>\n                customer_name<span class=\"token operator\">=</span>F<span class=\"token punctuation\">(</span><span class=\"token string\">'customer__name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                medicines_name<span class=\"token operator\">=</span>F<span class=\"token punctuation\">(</span><span class=\"token string\">'medicines__name'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\\\n            <span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span>\n                <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'create_date'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'customer_name'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'medicines_name'</span>\n            <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 将 QuerySet 对象 转化为 list 类型</span>\n    retlist <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>qs<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'ret'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'retlist'</span><span class=\"token punctuation\">:</span> retlist<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\29da59a3ecd2413682136daad5bdf295.png\"/></p>\n<h3><a id=\"32_435\"></a>3.2多个订单问题</h3>\n<p>第二个问题，如果一个订单里面有多个药品，就会产生多条记录， 这不是我们要的。</p>\n<p>根据接口，一个订单里面的多个药品， 用 竖线 隔开。</p>\n<p>怎么办？</p>\n<p>我们可以用python代码来处理，像下面这样</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">listorder</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 返回一个 QuerySet 对象 ，包含所有的表记录</span>\n    qs <span class=\"token operator\">=</span> Order<span class=\"token punctuation\">.</span>objects\\\n            <span class=\"token punctuation\">.</span>annotate<span class=\"token punctuation\">(</span>\n                customer_name<span class=\"token operator\">=</span>F<span class=\"token punctuation\">(</span><span class=\"token string\">'customer__name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                medicines_name<span class=\"token operator\">=</span>F<span class=\"token punctuation\">(</span><span class=\"token string\">'medicines__name'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\\\n            <span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span>\n                <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'create_date'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'customer_name'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'medicines_name'</span>\n            <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 将 QuerySet 对象 转化为 list 类型</span>\n    retlist <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>qs<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 可能有 ID相同，药品不同的订单记录， 需要合并</span>\n    newlist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    id2order <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> one <span class=\"token keyword\">in</span> retlist<span class=\"token punctuation\">:</span>\n        orderid <span class=\"token operator\">=</span> one<span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> orderid <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> id2order<span class=\"token punctuation\">:</span>\n            newlist<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">)</span>\n            id2order<span class=\"token punctuation\">[</span>orderid<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> one\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            id2order<span class=\"token punctuation\">[</span>orderid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'medicines_name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token string\">' | '</span> <span class=\"token operator\">+</span> one<span class=\"token punctuation\">[</span><span class=\"token string\">'medicines_name'</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'ret'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'retlist'</span><span class=\"token punctuation\">:</span> newlist<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"_471\"></a><code>【系列好文推荐】</code></h1>\n<p>🎯🎯🎯<br/> <strong><a href=\"https://blog.csdn.net/weixin_51390582/article/details/125554253?spm=1001.2014.3001.5501\">Python Web开发一：Web开发简介</a></strong><br/> <strong><a href=\"https://blog.csdn.net/weixin_51390582/article/details/125572774?spm=1001.2014.3001.5501\">Python Web开发二：Django的安装和运行</a></strong><br/> <strong><a href=\"https://xuyipeng.blog.csdn.net/article/details/125581163?spm=1001.2014.3001.5502\">Python Web开发（三）：HTTP请求的url路由</a></strong></p>\n<p>欢迎订阅本专栏：<strong><a href=\"https://blog.csdn.net/weixin_51390582/category_11571272.html\">零基础学Python</a></strong> 系列课程是针对Python入门&amp;进阶打造的一全套课程，在这里，我将会一 一更新Python基础语法、Python爬虫、Web开发、 Django框架、Flask框架以及人工智能相关知识，帮助你成为Python大神，如果你喜欢的话就抓紧收藏订阅起来吧~💘💘💘<br/> 💕💕💕 好啦，这就是今天要分享给大家的全部内容了，我们下期再见！✨ ✨ ✨<br/> 🍻🍻🍻如果你喜欢的话，就不要吝惜你的一键三连了~<br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/151f7a1ac3844566b09099a0eb78ef37.gif#pic_center\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ddf3206097a0497da6795c23135f4c31.png\"/><br/> ⬇️⬇️ ⬇️ <strong>商务合作|交流学习|粉丝福利|Python全套资料</strong>⬇️ ⬇️ ⬇️ 欢迎联系~</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2022-08-16 09:03:41", "summary": "在这里插入图片描述本文目录：一、对关联表的操作外键表字段访问外键表字段过滤错误方法先获取中国的国家，然后再通过去找一步到位只需要学生姓名和国家名两个字段重命名两个下划线外键表反向访问外键表反向过滤没有"}