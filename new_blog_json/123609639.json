{"blogid": "123609639", "writerAge": "码龄2年", "writerBlogNum": "4", "writerCollect": "16", "writerComment": "4", "writerFan": "13", "writerGrade": "1级", "writerIntegral": "62", "writerName": "Unity_喆喆", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123609639.jpg", "writerRankTotal": "178291", "writerRankWeekly": "302788", "writerThumb": "20", "writerVisitNum": "18968", "blog_read_count": "827", "blog_time": "已于 2022-07-16 19:14:10 修改", "blog_title": "基于Pico开发中射线检测功能的实现", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>Pico开发中射线检测功能的实现</h1>\n<p></p>\n<h3>1.导入Pico开发资源包：</h3>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" height=\"298\" src=\"..\\..\\static\\image\\60aefe089fe64897a227a97a1545b132.png\" width=\"362\"/></p>\n<h3>2.将Pvr_UnitySDK中的Prefab预制体拖进场景中：</h3>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" height=\"393\" src=\"..\\..\\static\\image\\851161cf50e44823934c2c6f9b31beab.png\" width=\"488\"/></p>\n<p></p>\n<h3><strong>3.将Pvr_Controller中的Prefab——ControllerManager预制体拖进场景中</strong></h3>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" height=\"308\" src=\"..\\..\\static\\image\\5128fcd5420840d8810191573061c7f8.png\" width=\"477\"/></p>\n<p></p>\n<h3>4.在场景中找到controller：</h3>\n<p class=\"img-center\"><img alt=\"\" height=\"546\" src=\"..\\..\\static\\image\\94f88957d7004123a576de3e7578defb.png\" width=\"335\"/></p>\n<p></p>\n<h3>5.在它的下面创建空的子对象起名为StartPos（名字可自定义）：</h3>\n<p class=\"img-center\"><img alt=\"\" height=\"411\" src=\"..\\..\\static\\image\\f81b9da49fe04d2eb12fbfdb1da1ca88.png\" width=\"303\"/></p>\n<p></p>\n<h3>6.创建脚本RayCtrl：</h3>\n<pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class RayCtrl : MonoBehaviour\n{\n\n    private LineRenderer line;\n    public GameObject NowGameObject;\n\n    private GameObject StartPos;\n    public static Vector3 hitPos;\n    public Transform dot;\n\n    private RaycastHit hit;\n\n    public static string name;\n\n    // Use this for initialization\n    void Start()\n    {\n        line = transform.Find(\"ray_LengthAdaptive\").GetComponent&lt;LineRenderer&gt;();\n        line.gameObject.SetActive(true);\n        dot = transform.Find(\"dot\");\n        dot.gameObject.SetActive(true);\n        StartPos = GameObject.Find(\"StartPos\");\n        hitPos = Vector3.zero;\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        Ray ray = new Ray { origin = StartPos.transform.position, direction = StartPos.transform.forward };\n        line.SetPosition(0, ray.origin);\n        if (Physics.Raycast(ray, out hit, 1000))\n        {\n            line.SetPosition(1, hit.point);\n            line.startColor = Color.green;\n            dot.position = hit.point;\n            hitPos = hit.point;\n            NowGameObject = hit.transform.gameObject;\n            name = NowGameObject.name;\n        }\n        else\n        {\n            line.SetPosition(1, ray.origin + ray.direction * 2);\n            line.startColor = Color.red;\n            dot.position = ray.origin + ray.direction * 2;\n            hitPos = ray.origin + ray.direction * 2;\n            name = null;\n        }\n    }\n}\n</code></pre>\n<p></p>\n<h3>7.挂载此代码到PvrController上:</h3>\n<p></p>\n<p><img alt=\"\" height=\"584\" src=\"..\\..\\static\\image\\493bd512aa7c4a399c902b27d3942cbf.png\" width=\"877\"/></p>\n<p></p>\n<h3>8.运行项目测试：</h3>\n<p><img alt=\"\" height=\"491\" src=\"..\\..\\static\\image\\455c2b25ec444ae5a6bd90b94a4b6c1c.png\" width=\"901\"/></p>\n<p></p>\n<h3>这边可以看到射线可能位置与手柄有交叉，这边可以通过调整StartPos的Transform值来改变，此时射线检测功能就已经完成，手柄射线对具有碰撞体的物体就可以检测到并记录在NowGameObject中了。</h3>\n<h3>在这里我的射线检测会根据是否检测到碰撞体来改变颜色，当射线接触到碰撞体颜色为绿色，未接触碰撞体为红色。</h3>\n<p></p>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-07-16 19:14:10", "summary": "开发中射线检测功能的实现导入开发资源包：将中的预制体拖进场景中：将中的预制体拖进场景中在场景中找到：在它的下面创建空的子对象起名为名字可自定义：创建脚本：挂载此代码到上运行项目测试：这边可以看到射线可"}