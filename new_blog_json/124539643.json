{"blogid": "124539643", "writerAge": "码龄1年", "writerBlogNum": "32", "writerCollect": "94", "writerComment": "6", "writerFan": "22", "writerGrade": "2级", "writerIntegral": "352", "writerName": "小天的编程", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124539643.jpg", "writerRankTotal": "81034", "writerRankWeekly": "488858", "writerThumb": "22", "writerVisitNum": "12545", "blog_read_count": "3426", "blog_time": "于 2022-05-03 06:00:00 发布", "blog_title": "8万字带你入门Rust", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"Rust_0\"></a>Rust</h1>\n<blockquote>\n<p>📚 学习建议：</p>\n<ul><li>先从 整体出发，不要让自己陷入到细节中去</li><li>和自己已知的知识建立联系</li><li>rust 和go一样采用 组合的手段实现代码复用，不要深思为什么不是继承</li><li>学会阅读源码，从源码中学习</li><li>Rust设计哲学</li></ul>\n</blockquote>\n<p>使用 cargo new 项目名</p>\n<p>在终端中构建项目</p>\n<p>使用 cargo build 来构建和运行项目</p>\n<p>也可以使用 cargo run 来完成编译和运行任务</p>\n<p>第一个程序：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><mark>Rust中变量默认都是不可变的，如果要改变使用<strong>mut</strong>关键字来修饰变量就可以改变了。</mark></p>\n<p>用<mark>let</mark>创建变量：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//foo是不可变的</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> bar <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//bar是可变的</span>\n</code></pre>\n<p><mark>&amp; 引用在默认情况也是不可变的</mark></p>\n<pre><code class=\"prism language-rust\"><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> guess <span class=\"token comment\">//声明一个可变的引用 </span>\n<span class=\"token operator\">&amp;</span>guess <span class=\"token comment\">//声明一个不可变的引用</span>\n</code></pre>\n<p>示例：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>io<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 导入包</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Guess the number!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please input your guess:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> guess <span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//声明一个可变的变量并且绑定一个空白字符串</span>\n<span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token function\">stdin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">read_line</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> guess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to read line\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//从键盘获取输入</span>\n<span class=\"token comment\">//read_line它读取的同时还会返回一个值 io::Result值（它一个枚举类型），它有OK和ERR两个变体，如果读取失败就会返回expect并输出里面的内容,没有编写expect函数会出警告</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You guessed: {}\"</span><span class=\"token punctuation\">,</span> guess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里面的花括号是一个占位符,打印几个值就用几个花括号{}</span>\n<span class=\"token keyword\">let</span> x<span class=\"token operator\">=</span><span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> y <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x= {}, y = {}\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//多个输出</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"game over!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>io<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"猜数！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"猜测一个数字：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> guess<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//创建一个空白字符串并绑定到变量guess</span>\n\n<span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token function\">stdin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">read_line</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> guess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无法读取行！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//下面这行和上面那行是等价的没有使用 use 导入的话，就需要使用下面的方式</span>\n<span class=\"token comment\">// std::io::stdin().read_line(&amp;mut guess).expect(\"无法读取行！\");</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你猜测的数字是:{}\"</span><span class=\"token punctuation\">,</span>guess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<pre><code class=\"prism language-rust\"># 使用rand包需要在cargo<span class=\"token punctuation\">.</span>toml文件中将rand包声明为依赖\nrand<span class=\"token operator\">=</span><span class=\"token string\">\"0.3.14\"</span>  \n# 添加完成后使用 cargo build 重新构建这个项目\n</code></pre>\n<p>升级依赖包使用 cargo update 命令升级依赖包</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 猜数游戏示例</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>io<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">rand<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Rng</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//导入随机数模块  trait</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>cmp<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Ordering</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Guess the number!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> numrand<span class=\"token operator\">=</span><span class=\"token namespace\">rand<span class=\"token punctuation\">::</span></span><span class=\"token function\">thread_rng</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">gen_range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//左闭右合区间</span>\n\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please input your guess:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> guess <span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token function\">stdin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">read_line</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> guess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to read line\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//rust 允许使用同名的新变量来隐藏旧变量的值</span>\n<span class=\"token comment\">//从这行之后，这个guess就不是上面那个变量了，而第二个guess是原来上面的那个变量</span>\n<span class=\"token comment\">//用户要输入过程中按的回车键，会导入我们的输入字符串额外多出一个换行符，所以使用 trim（）函数来去除</span>\n<span class=\"token comment\">//trim()就是去掉字符串前后的空格</span>\n<span class=\"token comment\">//parse()方法会把字符串解析成数值类型</span>\n<span class=\"token keyword\">let</span> guess<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token operator\">=</span>guess<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"plasce type a number!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You guessed: {}\"</span><span class=\"token punctuation\">,</span> guess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"随机数字为：{}\"</span><span class=\"token punctuation\">,</span>numrand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">match</span> guess<span class=\"token punctuation\">.</span><span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>numrand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//和谁匹配就执行谁</span>\n<span class=\"token class-name\">Ordering</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Less</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"too small!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token class-name\">Ordering</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Greater</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"to big!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token class-name\">Ordering</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Equal</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"you win!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"game over!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上面的代码里面有一个概念叫做 <mark><strong>隐藏（shadow）</strong></mark>:</p>\n<p>rust 允许使用同名的新变量来隐藏旧变量的值</p>\n<h4><a id=\"_137\"></a>使用循环来实现多次猜测</h4>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>io<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">rand<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Rng</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>cmp<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Ordering</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Guess the number!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> numrand<span class=\"token operator\">=</span><span class=\"token namespace\">rand<span class=\"token punctuation\">::</span></span><span class=\"token function\">thread_rng</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">gen_range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//左闭右合区间</span>\n\n<span class=\"token keyword\">loop</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//循环起始位置</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please input your guess:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> guess <span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token function\">stdin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">read_line</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> guess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to read line\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> guess<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token operator\">=</span><span class=\"token keyword\">match</span> guess<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>numrand<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> numrand<span class=\"token punctuation\">,</span>\n<span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//不需要错误信息可以下划线忽略</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这里把 expect方法换成了match表达式</span>\n\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You guessed: {}\"</span><span class=\"token punctuation\">,</span> guess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"随机数字为：{}\"</span><span class=\"token punctuation\">,</span>numrand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">match</span> guess<span class=\"token punctuation\">.</span><span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>numrand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token class-name\">Ordering</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Less</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"too small!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token class-name\">Ordering</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Greater</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"to big!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token class-name\">Ordering</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Equal</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"you win!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//猜对了就退出</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这里把 expect方法换成了match表达式</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> guess<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token operator\">=</span><span class=\"token keyword\">match</span> guess<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>numrand<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> numrand<span class=\"token punctuation\">,</span>\n<span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//不需要错误信息可以下划线忽略</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>continue用法和C++、go、java等语言一样！</p>\n<h3><a id=\"Rust_188\"></a>Rust保留的关键字</h3>\n<table><thead><tr><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td>as</td><td>执行基础类型转换，消除包含条目的指定 trait 的歧义，在 use 与 extern crate 语句中对条目进行重命名</td></tr><tr><td>break</td><td>立即退出一个循环</td></tr><tr><td>const</td><td>定义常量或者不可变祼指针</td></tr><tr><td>continue</td><td>继续下一次循环迭代</td></tr><tr><td>crate</td><td>连接一个外部包或一个代表了当前包的宏变量</td></tr><tr><td>dyn</td><td>表示 trait 对象可以进行动态分发</td></tr><tr><td>else</td><td>if 和 if let 控制结构的回退分支</td></tr><tr><td>enum</td><td>定义一个枚举</td></tr><tr><td>extren</td><td>连接外部包、函数、变量</td></tr><tr><td>false</td><td>字面量布尔值假</td></tr><tr><td>fn</td><td>定义一个函数或者函数指针类型</td></tr><tr><td>for</td><td>在迭代元素上进行迭代，实现了一个 trait，指定一个高阶生命周期</td></tr><tr><td>if</td><td>基于条件表达式的分支</td></tr><tr><td>impl</td><td>实现类型自有的功能或者 trait 定义的功能</td></tr><tr><td>in</td><td>for循环语法的一部分</td></tr><tr><td>let</td><td>绑定一个变量</td></tr><tr><td>loop</td><td>无条件循环</td></tr><tr><td>match</td><td>用模式匹配一个值</td></tr><tr><td>mod</td><td>定义一个模块</td></tr><tr><td>move</td><td>让一个闭包获得全部捕获变量的所有权</td></tr><tr><td>mut</td><td>声明引用、祼指针或者模式绑定的可变性</td></tr><tr><td>pub</td><td>声明结构体字段、impl块或模块的公共性</td></tr><tr><td>ref</td><td>通过引用绑定</td></tr><tr><td>return</td><td>从函数中返回</td></tr><tr><td>Self</td><td>指代正在其上实现 trait 的类型别外 <mark>S是大写的</mark>=</td></tr><tr><td>self</td><td>指代方法本身或者当前模块 <mark>s是小写的</mark></td></tr><tr><td>staticc</td><td>全局变量或者持续整个程序执行过程的生命周期</td></tr><tr><td>struct</td><td>定义一个结构体</td></tr><tr><td>super</td><td>当前模块的父模块</td></tr><tr><td>trait</td><td>定义一个 trait</td></tr><tr><td>true</td><td>字面量布尔真</td></tr><tr><td>type</td><td>定义一个类型别外或关联类型</td></tr><tr><td>unsafe</td><td>声明不安全的代码、函数、trait或实现</td></tr><tr><td>use</td><td>把符号引入作用域中</td></tr><tr><td>where</td><td>声明一个用于约束类型的 从句</td></tr><tr><td>while</td><td>基于一个表达式结果的条件循环</td></tr></tbody></table>\n<p><mark>未来可能会使用的保留关键字：</mark></p>\n<table><thead><tr><th>abstract</th><th>async</th><th>become</th><th>box</th><th>do</th></tr></thead><tbody><tr><td>final</td><td>macro</td><td>override</td><td>priv</td><td>try</td></tr><tr><td>typeof</td><td>unsized</td><td>virtual</td><td>yield</td><td></td></tr></tbody></table>\n<h3><a id=\"_238\"></a>通用编程概念</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//默认不可变</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x= {}\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nx<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x= {}\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//常量:它不可以使用mut关键字，常量永远都是不可变的</span>\n<span class=\"token comment\">//声明一个常量使用const关键字</span>\n<span class=\"token comment\">//常量只可以绑定到常量表达式</span>\n<span class=\"token comment\">//RUST中常量 一般使用大写字母</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">MAX_POINTS</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">//Shadowing</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//5</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//6</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span>x<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//8</span>\n\n<span class=\"token keyword\">let</span> spaces_str<span class=\"token operator\">=</span><span class=\"token string\">\"     \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> spaces_num<span class=\"token operator\">=</span>spaces_str<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>spaces_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//5</span>\n</code></pre>\n<p>使用 <mark>const</mark>来定义一个常量，不能使用let关键字来定义常量；</p>\n<p><mark>不能使用 mut 关键字修饰一个常量</mark>，<strong>常量总是不变的！</strong></p>\n<p>在 rust 中，变量名一般都有大写！</p>\n<p>隐藏机制不同于将变量声明为 mut 的 ！<br/> 重复使用 <strong>let</strong> 关键字<strong>会创建出新的变量</strong>，因此可以复用的时候改变它的类型！</p>\n<h2><a id=\"rust_285\"></a>rust数据类型</h2>\n<h4><a id=\"_287\"></a>标量类型和复合类型</h4>\n<p>注意：<mark><strong>Rust是一门静态类型语言，这意味着它在编译程序的过程中需要知道所有变量的具体类型。</strong></mark></p>\n<blockquote>\n<p>标量类型：单个值类型的统称； 4种：整数、浮点数、布尔值、字符</p>\n</blockquote>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">/*标量类型：整数，浮点数（f32,f64默认的），布尔值，字符（char）,字符串，元组，枚举\n复合类型：数组，结构体，指针，元组，枚举\nu32:无符号整数类型，占32位空间\nu8,u16,u32,u64,u128 无符号\ni8,i16,i32,i64,i128 有符号\n无符号以U开头，有符号以I开头\n整数默认类型是i32\n*/</span>\n<span class=\"token comment\">//isize 和 usize 这两种是由运算程序的计算机硬件决定的</span>\n<span class=\"token keyword\">let</span> guess<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"42\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not a number!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>guess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//rust声明的变量没有使用会有警告</span>\n<span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span><span class=\"token keyword\">f32</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span><span class=\"token keyword\">f64</span> <span class=\"token operator\">=</span> <span class=\"token number\">4.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> b<span class=\"token punctuation\">:</span><span class=\"token keyword\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> b<span class=\"token punctuation\">:</span><span class=\"token keyword\">bool</span> <span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> x<span class=\"token operator\">=</span><span class=\"token char\">'z'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> y<span class=\"token punctuation\">:</span><span class=\"token keyword\">char</span> <span class=\"token operator\">=</span><span class=\"token char\">'y'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> z<span class=\"token operator\">=</span>'😀'<span class=\"token punctuation\">;</span><span class=\"token comment\">//也可以存放这种</span>\n</code></pre>\n<p>整数类型有: (它们占的空间大小也就是后面对应的数字单位为bit)</p>\n<ul><li>无符号：u8,u16,u32,u64,usize</li><li>有符号：i8,i16,i32,i64,isize</li></ul>\n<p><mark>usize和isize</mark>：取决于程序运行的目标平台；在64位架构上就是64bit，而32位架构上就是 32bit</p>\n<p>rust默认的整数字面量是：<strong>i32</strong></p>\n<p>浮点数类型：</p>\n<ul><li>f32</li><li>f64 （默认）</li></ul>\n<blockquote>\n<p>复合类型：可以将多个不同类型的值组合为一个类型；2种：元组（tuple） 数组 （array）</p>\n</blockquote>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">//复合类型</span>\n<span class=\"token comment\">//Tuple类型可以将多个类型的值放在一个类型里面，和C++中的元组类似</span>\n<span class=\"token comment\">//tuple的长度的固定，一旦创建就不能改变</span>\n<span class=\"token comment\">//如果不明确是什么类型，可以使用_来代替</span>\n<span class=\"token keyword\">let</span> tup<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> tup<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span>_<span class=\"token punctuation\">,</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"boy\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> tup<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">1.25</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//也可以使用模式匹配</span>\n<span class=\"token keyword\">let</span> ont<span class=\"token operator\">=</span>tup<span class=\"token number\">.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> two<span class=\"token operator\">=</span>tup<span class=\"token number\">.1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//也可以通过点来进行访问</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span>tup<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{},{},{}\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取tup的值 解构：将元组拆解为n个不同的部分</span>\n<span class=\"token comment\">//数组</span>\n<span class=\"token comment\">//数组和C++中的差不多</span>\n<span class=\"token comment\">//长度也是固定的</span>\n<span class=\"token comment\">// Vertor更加灵活，长度可以改变</span>\n<span class=\"token comment\">//和数组类似，不确定使用哪个，就使用 Vector</span>\n<span class=\"token keyword\">let</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> avec<span class=\"token operator\">=</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>avec<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//另外一声明数组的方法</span>\n<span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//创建数组并且初始化为5个3</span>\n</code></pre>\n<p>元组和数组都拥有固定的长度！</p>\n<p>元组用小括号（）；数组用中括号 []</p>\n<p>有一种动态数组类型：<strong>vector</strong></p>\n<h2><a id=\"_364\"></a>函数</h2>\n<p>rust使用<mark>蛇形命名法</mark>（只使用小写字母，使用下划线分隔单词）来规范函数和变量名称的风格！</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 函数调用 </span>\n<span class=\"token function\">add_function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">56</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> y<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token operator\">+</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> y<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//表达式</span>\n    <span class=\"token keyword\">let</span> x<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    x<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token comment\">//这个加上了分号就变成了语句；这个相当于返回值</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> n1<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> u<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    u\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4</span>\n\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n<span class=\"token comment\">//函数和注释</span>\n<span class=\"token comment\">// 声明函数使用  fn 关键字 : go语言使用 func 关键字</span>\n<span class=\"token comment\">// 规范是函数名称使用小写，单词之间使用_分割</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add_function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span> <span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//rust必须指定函数参数类型</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x={}\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y={}\"</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 函数的返回值</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add1</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span> <span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span><span class=\"token keyword\">u32</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//在参数括号后面加上-&gt;类型 就是返回</span>\n<span class=\"token keyword\">let</span> x<span class=\"token operator\">=</span>x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">;</span>\nx   <span class=\"token comment\">//返回语句不能有分号，有了分号就变成了语句</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>参数和参数类型之间使用 ： 分隔！</p>\n<p>rust把语句和表达式区分为两个不同的概念：</p>\n<ul><li>**语句：**执行操作但不会返回值的指令</li><li>**表达式：**会进行计算并且产生一个值作为结果的 指令</li></ul>\n<p>记住：<strong>语句不会有返回值</strong></p>\n<p><strong>表达式加上分号就会变成了语句。</strong></p>\n<p>rust函数的返回值使用 <strong>-&gt;</strong> <strong>返回值类型</strong>；如果是多个就是小括号括起来：<strong>-&gt;</strong> <strong>（类型1， 类型2 ….）</strong></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">five</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token number\">5</span>  <span class=\"token comment\">//这样也是对的返回5</span>\n    <span class=\"token comment\">//如果不使用这种方式返回，也可以使用 return，使用这个需要加分号 : return 5;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">five</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//错的！！！不能加分号</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"rust_438\"></a>rust注释</h3>\n<blockquote>\n<p>// 单行注释</p>\n</blockquote>\n<blockquote>\n<p>/**/ 多行注释</p>\n</blockquote>\n<h3><a id=\"_446\"></a>控制流</h3>\n<h4><a id=\"if__else_448\"></a>if 和 else</h4>\n<p>示例：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 控制表达式  if else</span>\n<span class=\"token comment\">//这个和go,python语言差不多</span>\n<span class=\"token keyword\">let</span> x<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> x<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你的数字真小！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> x<span class=\"token operator\">&gt;</span><span class=\"token number\">10</span><span class=\"token operator\">&amp;&amp;</span>x<span class=\"token operator\">&lt;</span><span class=\"token number\">90</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你的数字在10-90之间！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你的数字真大！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> y<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这里y的值不能为0或者1不然会报错！！！</span>\n<span class=\"token keyword\">if</span> y <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><mark>rust不会自动尝试将非布尔类型的值转换为布尔类型！！！</mark>，所以上面代码中y的值只能为布尔值。</p>\n<p>过多的else if 表达式应该用 match 替代！！！</p>\n<pre><code class=\"prism language-rust\">\n<span class=\"token keyword\">let</span> b<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//if是一个表达式，可以let语句右侧使用它来生成一个值</span>\n<span class=\"token comment\">// 也可以这样判断实现像 ? : 相同的功能</span>\n<span class=\"token keyword\">let</span> number<span class=\"token operator\">=</span><span class=\"token keyword\">if</span> b<span class=\"token operator\">&gt;</span><span class=\"token number\">5</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">100</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">900</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//if和else里面的类型要一样，静态编译型语言</span>\n\n<span class=\"token comment\">//else if 太多了，可以使用match来重构</span>\n<span class=\"token keyword\">let</span> number<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">match</span> number<span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//这规则和case差不多，也可以使用下划线_</span>\n    <span class=\"token number\">1</span><span class=\"token operator\">=&gt;</span><span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">2</span><span class=\"token operator\">=&gt;</span><span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">3</span><span class=\"token operator\">=&gt;</span><span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    _<span class=\"token operator\">=&gt;</span><span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"other\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><mark>所有 if 分支里面可能返回的值都必须是一种类型的</mark></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> nu<span class=\"token operator\">=</span><span class=\"token keyword\">if</span> <span class=\"token number\">4</span><span class=\"token operator\">&gt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token number\">54</span><span class=\"token operator\">-</span><span class=\"token number\">12</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token operator\">-</span><span class=\"token number\">900</span><span class=\"token operator\">+</span><span class=\"token number\">65</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//像这样也是可以的，记住不要里面加分号</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nu={}\"</span><span class=\"token punctuation\">,</span>nu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4><a id=\"rust_502\"></a>rust循环结构</h4>\n<p><mark><strong>rust提供了 3 种循环结构：loop 、while、for。</strong></mark></p>\n<blockquote>\n<p>loop ：反复执行一块代码，直到条件满足（break）或者我们强制退出！！</p>\n</blockquote>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">...</span>\n    <span class=\"token keyword\">if</span> 条件 <span class=\"token punctuation\">{<!-- --></span>\n        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// loop  不会像 do while必定会执行一次，其他和它一样，如果条件放在最前面，一开始就不成立，就不会执行</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> count<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">loop</span><span class=\"token punctuation\">{<!-- --></span>\n   count<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"725\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> count<span class=\"token operator\">==</span><span class=\"token number\">10</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">break</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这里分号别忘记写了</span>\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> con1<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> res<span class=\"token operator\">=</span><span class=\"token keyword\">loop</span><span class=\"token punctuation\">{<!-- --></span>\n    con1<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> con1 <span class=\"token operator\">==</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token keyword\">break</span> con1<span class=\"token operator\">*</span><span class=\"token number\">2</span> <span class=\"token comment\">//这里不加分号</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"con1={}\"</span><span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//20</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> con2<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> res<span class=\"token operator\">=</span><span class=\"token keyword\">loop</span><span class=\"token punctuation\">{<!-- --></span>\n    con2<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> con2 <span class=\"token operator\">==</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token keyword\">break</span> con2<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里加上分号</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"con2={}\"</span><span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//20</span>\n<span class=\"token comment\">//上面两种方式是等价的</span>\n</code></pre>\n<blockquote>\n<p>while 用法和其他语言一样</p>\n</blockquote>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// while</span>\n<span class=\"token keyword\">let</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> le<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//数组长度比数组下标大1</span>\n<span class=\"token keyword\">while</span> le<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">{<!-- --></span>\n    le<span class=\"token operator\">=</span>le<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">[</span>le<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>for 循环：推荐使用简洁又高效；rust最为常用</p>\n</blockquote>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// for</span>\n<span class=\"token comment\">// 使用for循环又安全又高效</span>\n<span class=\"token keyword\">let</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> a <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n语法： \n<span class=\"token keyword\">for</span> 变量名 \n</code></pre>\n<p>Range：用来生成数字序列！</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// Range 标准库提供</span>\n<span class=\"token comment\">// 指定一个开始数字和一个结束数字，它可以生成它们之间的数字（左闭右开）</span>\n<span class=\"token comment\">// rev方法可以反转 Range</span>\n<span class=\"token keyword\">for</span> number <span class=\"token keyword\">in</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">rev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//小括号数字中间是两个点</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_592\"></a>所有权</h1>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 所有权是Rust最独特的特性核心特性</span>\n<span class=\"token comment\">// 内存是通过所有权系统来管理的</span>\n<span class=\"token comment\">//堆和栈是代码在运行时可以傅 的内存空间</span>\n<span class=\"token comment\">// stack 栈  这上面的数据必须拥有固定的大小 </span>\n<span class=\"token comment\">//  heap 堆  编译时大小未知或者大小可能发生变化的数据必须存放在 heap中</span>\n<span class=\"token comment\">// 访问heap中的数据要比访问stack中的数据慢，多了次指针跳转</span>\n</code></pre>\n<p><strong>所有权是Rust最独特的特性核心特性</strong></p>\n<p><strong><mark>所有权规则：</mark></strong></p>\n<ol><li><strong>rust中的每一个值都有一个对应的变量作为它的所有者；</strong></li><li><strong>在同一时间内，值有且仅有一个所有者；</strong></li><li><strong>当所有者离开自己的作用域时， 它持有的值就会被释放掉；</strong></li></ol>\n<p>作用域：一个对象在程序中有有效范围；</p>\n<p>rust 中可以用大括号 {} 表示一个作用域，或者隔离一个作用域！！！</p>\n<h3><a id=\"String_615\"></a>String类型</h3>\n<p><mark>字符串字面量是不可变的；</mark></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> s<span class=\"token operator\">=</span><span class=\"token string\">\"hello world!\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//不可变的 分配在栈上的</span>\n</code></pre>\n<p>为了方便操作rust提供了第二种String类型：这个类型会在==<strong>堆</strong>==上分配自己需要的存储空间：调用 <strong>from</strong> 函数来创建 String 实例</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> s<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//在堆上分配的，是可变的</span>\n</code></pre>\n<p><strong>区别：字符串字面量是分配在栈上的不可变，而String是分配堆上的是可变的！！！</strong></p>\n<p>内存布局：</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-XsJoFVJ1-1651467632358)(E:\\sysy\\Pictures\\哔哩哔哩动画\\image-20220326202623950.png)]</p>\n<p>注意图中 String 类型的分配方式；</p>\n<h4><a id=\"_640\"></a>内存与分配</h4>\n<p><strong>两个关键概念：</strong></p>\n<ul><li>rust 在变量离开作用域的时候，会调用一个叫作 <mark>drop</mark>的特殊函数</li><li><strong>rust会在作用域结束的地方自动调用 drop 函数</strong></li></ul>\n<blockquote>\n<p>在C++中这种对象生命周期结束时释放资源的模式也称为资源获取即初始化（RAII）</p>\n</blockquote>\n<p>变量和数据交互的方式：移动 Move</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 变量和数据交的方式：移动（Move)</span>\n<span class=\"token comment\">//多个变量可以与同一个数据使用独特的方式来交互</span>\n<span class=\"token keyword\">let</span> s1<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shenyang\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> s2<span class=\"token operator\">=</span>s1<span class=\"token punctuation\">;</span><span class=\"token comment\">//在这里这样，rust会废弃s1的所有权，s1的值被移动到s2中，s1的值被清空</span>\n<span class=\"token comment\">//println!(\"{}\",s1);//这里使用报错，因为s1已经被废弃了</span>\n<span class=\"token comment\">/*let s1=\"shenyang\";\nlet s2=s1;\n像这样就可以，不会报错！！！\n*/</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 一个String 由3部分组成：</span>\n<span class=\"token comment\">// 一个指针，len（长度）,cap（容量）分配在栈上，而字符串的内容被分配在堆上</span>\n</code></pre>\n<p>内存布局：</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-JO54qY2f-1651467632359)(E:\\sysy\\Pictures\\哔哩哔哩动画\\image-20220326203349038.png)]</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-lfZlmpuw-1651467632359)(E:\\sysy\\Pictures\\哔哩哔哩动画\\image-20220327094827868.png)]</p>\n<p>上面把 s1 的值赋给 s2 的时候只复制了它在<strong>存储在栈上的指针、长度及容量字段</strong>。</p>\n<p>需要注意的是<strong>它没有复制指针指向的堆上数据！</strong></p>\n<blockquote>\n<p>引出问题：s1 和 s2 离开作用的时候会尝试去重复释放相同的内存，导致二次释放</p>\n<blockquote>\n<p>rust解决方案： rust在这种情况下会将 s1 废弃，不再视为一个有效的变量，s1 离开作用域后也不需要清理任何东西！！！</p>\n</blockquote>\n</blockquote>\n<h3><a id=\"_684\"></a>浅拷贝和深拷贝</h3>\n<blockquote>\n<p>C++中的深浅拷贝：</p>\n<ul><li>深拷贝：在堆区重新申请空间进行拷贝操作、拷贝完整的内容</li><li>浅拷贝：只拷贝地址，也就是编译器本身提供的拷贝构造函数做的浅拷贝操作</li></ul>\n<blockquote>\n<p>浅拷贝带来的问题：堆区的内存重复释放以及内存泄漏</p>\n<p>有堆区开辟的属性，一定要提供拷贝构造函数防止浅拷贝带来的问题。</p>\n</blockquote>\n</blockquote>\n<p>rust拷贝s1到s2的方式就可以视为浅拷贝。</p>\n<p>术语： 移动（MOVE)</p>\n<p>rust中应该是 s1 被移动到 s2 中。因为 s1 会被废弃了！！</p>\n<p><strong><mark>一个设计原则</mark>：rust 永远不会自动地创建数据的深拷贝。所以在 rust中，任何自动的赋值操作都可以视为高效的。</strong></p>\n<p>需要用到深拷贝就是克隆（clone)</p>\n<h4><a id=\"__Clone_707\"></a>变量和数据交互的方式： 克隆 Clone</h4>\n<p>当要做深拷贝操作的时候，rust提供一个方法： <mark>Clone()</mark></p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// clone 克隆 比较消耗资源</span>\n<span class=\"token keyword\">let</span> a1<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> a2<span class=\"token operator\">=</span>a1<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//克隆作了深度拷贝操作</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{},{}\"</span><span class=\"token punctuation\">,</span>a1<span class=\"token punctuation\">,</span>a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这里a1变量就没有被废弃，因为是直接把a1克隆给a2</span>\n<span class=\"token comment\">// 和上面的作对比</span>\n</code></pre>\n<p>Clone()方法复制栈上数据的同时，也复制了堆上的数据！！！</p>\n<blockquote>\n<p>克隆有个缺点：就是比较消耗资源</p>\n</blockquote>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-HNe07bTL-1651467632360)(E:\\sysy\\Pictures\\哔哩哔哩动画\\image-20220326203136545.png)]</p>\n<p><mark>重点：</mark><strong>如果一个类型拥有了 Copy 这种 trait ，那么它的变量可以在赋值给其他变量之后仍然保持可用性。</strong></p>\n<p><strong>如果一个类型本身或者这种类型的任意成员实现了 Drop 这种 trait ，那么rust 就不允许它实现 Copy 这种 trait了。</strong></p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">/*\nstace上的数据：复制\nCopy trait，可以用于完全存放在栈上的类型\n如果一个类型实现Copy trait，那么旧的变量在赋值后仍然可以使用\n一些拥有Copy trait的类型：\n任何简单标量的组合类型都可以是Copy的；任何需要分配内存或者某种资源的都不是Copy的\n拥有的：bool char 所有的浮点类型，所有的整数类型\ntuple(元组)前提是其中所有的字段都是Copy的 eg:\n（i32,i32)是\n（i32,String)不是\n*/</span>\n</code></pre>\n<p><strong>任何简单标量的组合类型都可以是Copy的；任何需要分配内存或者某种资源的都不是Copy的</strong></p>\n<h3><a id=\"_747\"></a>所有权与函数</h3>\n<p>理解这里：要理解了上面的内容比如：复制操作、克隆操作、 Copy 、Drop</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token comment\">// 所有权与函数</span>\n<span class=\"token comment\">// 函数在返回值的过程中也会发生所有权的转移</span>\n<span class=\"token keyword\">let</span> s1<span class=\"token operator\">=</span><span class=\"token function\">gives_ownership</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> s2<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> s3<span class=\"token operator\">=</span><span class=\"token function\">takes_and_gives_back</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//s2的所有权被移动到函数里面，从这里开始 s2 不再有效</span>\n\n <span class=\"token keyword\">let</span> s4<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//由于 i32 类型是 Copy 的，我们在这里之后还可以继续使用 s4</span>\n    \n<span class=\"token comment\">/*\n一个变量离开作用域时会被Drop函数还回，除非它的所有权被转移另外一个变量上\n*/</span>\n    \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">gives_ownership</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">let</span> some_string<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsome_string <span class=\"token comment\">//这个的所有权移动到调用它的上面也就是上面的s1上</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">takes_and_gives_back</span><span class=\"token punctuation\">(</span>a_string<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//s2的所有权被移动到函数参数上面</span>\n    a_string <span class=\"token comment\">//这个作为返回值的所有权移动到调用它的上面也就是上面s3上面</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">makes_copy</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x={}\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//x在这里离开作用域并不会有什么特别的事发生就是正常的消亡</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上面的函数中的返回值是<strong>移动操作</strong>不是返回所有权操作 ！！！参数传递进去函数的时候，函数会获得所有权</p>\n<h4><a id=\"_785\"></a>返回值和作用域</h4>\n<p>🌍</p>\n<blockquote>\n<p>遵循模式：将一个值赋值给另外一个变量时就会发生所有权转移，当一个持有堆数据的变量离开作用域时，它的数据就会被 Drop 清理回收，除非数据的所有权被移动到了另一个变量上 面。</p>\n</blockquote>\n<p><strong>函数在返回值的过程中也会发生所有权的转移！！！</strong></p>\n<p>问题：当希望调用函数的时候保留参数的所有权，就要将传入的值作为结果返回，但同时函数也可能会需要返回自己的结果。</p>\n<p>👀：采用元组解决：太过于繁琐</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    \n    <span class=\"token keyword\">let</span> s1<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token function\">calculate_length</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//接收多个参数的时候，需要忽略某个参数可以下划线 </span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{},{}\"</span><span class=\"token punctuation\">,</span>s1<span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">calculate_length1</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">usize</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">let</span> length<span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//取得所有权</span>\n   <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token comment\">//采用元组解决同时返回多个值</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>⚙️:采用<strong>元组</strong>可以让函数同时返回多个值！！！</p>\n<h2><a id=\"_817\"></a>引用与借用</h2>\n<p>📄 解决上面采用元组返回太过于繁琐的问题</p>\n<blockquote>\n<p>⭕️ 问题：我们想要调用函数的时候，不转移值的所有权</p>\n</blockquote>\n<p>🖌：<strong>&amp;</strong> 代表<strong>引用</strong>的含义，<strong>可以在不获取所有权的情况下使用值。</strong></p>\n<p>​ <strong>*</strong> 代表<strong>解引用</strong></p>\n<p>​ <strong>&amp;</strong> <strong>参数类型</strong> 不可变引用（默认的）</p>\n<p>​ <strong>&amp; mut</strong> <strong>参数类型</strong> 可变引用（调用时的参数也要是可变）</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> s1<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token comment\">//&amp; 表示引用，允许使用值并且不取得所有权  对应解引用 * </span>\n<span class=\"token comment\">//把引用作为函数参数传递就叫引用</span>\n<span class=\"token comment\">// 不可以修改借用的东西，引用也是默认不可变的，可以使用 mut来让引用可变  &amp;mut 数据类型/参数</span>\n<span class=\"token keyword\">let</span> len<span class=\"token operator\">=</span><span class=\"token function\">calculate_length</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//参数的变量也要是可以变的，否则会报错</span>\n    \n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{},{}\"</span><span class=\"token punctuation\">,</span>s1<span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 函数使用变量不获得所有权</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">calculate_length</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span><span class=\"token keyword\">usize</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//注意参数里面不是在变量前面加&amp; ,而是在类型前面加&amp;</span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//不会取得所有权</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">first_world</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">usize</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">let</span> bytes<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">as_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> bytes<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">enumerate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">if</span> item <span class=\"token operator\">==</span> <span class=\"token char\">b' '</span><span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>🖼:[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-UyvUSQ5g-1651467632361)(E:\\sysy\\Pictures\\哔哩哔哩动画\\image-20220327105233388.png)]</p>\n<p>🔖：<strong>通过引用传递参数给函数的方法就叫做<mark>借用</mark></strong>！！！</p>\n<p>👁‍🗨：可变引用</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    \n <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> s<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    \n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 可变引用</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">change</span><span class=\"token punctuation\">(</span>some_string<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    some_string<span class=\"token punctuation\">.</span><span class=\"token function\">push_str</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//相当拼接字符串的功能 append</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>⚠️：**限制点：在特定作用域中，对于某一块数据，只能有一个可变的引用（一次只能声明一个可变引用 ）。**<strong>可以通过大括号来分隔作用域实现有多个可变引用</strong></p>\n<p>👀：这里要多想想记住！！！！</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 可变引用有一个限制：要特定作用域内，对于某一块数据，只能有一个可变的引用 。</span>\n <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> p<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">let</span> z1<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> p<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">let</span> z2<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> p<span class=\"token punctuation\">;</span><span class=\"token comment\">//报错！！！违反了规则</span>\n <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{},{}\"</span><span class=\"token punctuation\">,</span>z1<span class=\"token punctuation\">,</span>z2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>上面的限制性规则可以帮助我们在编译时避免数据竞争。</p>\n<p>📖：数据竞争</p>\n<blockquote>\n<p>以下三种行为会发生数据竞争：</p>\n<ol><li> <p><strong>两个或者多个指针同时访问同一个数据</strong></p> </li><li> <p><strong>至少有一个指针用于向空间中写入数据</strong></p> </li><li> <p><strong>没有使用任何机制来同步对数据的访问（没有同步访问）</strong></p> </li></ol>\n</blockquote>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 可以通过创建新的作用域，来允许非同时的创建多个可变引用</span>\n<span class=\"token comment\">//eg:</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> k<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//可以大括号分隔作用域</span>\n    <span class=\"token keyword\">let</span> s1<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> k<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token comment\">//到这里s1就不再有效了,因为已经出了作用域了</span>\n<span class=\"token keyword\">let</span> s2<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> k<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>📚：可以通过花括号{ } ，来创建一个新的作用域范围，这样就可以创建多个可变引用 ！！！</p>\n<p>⚠️：<mark>限制：</mark><strong>不可以同时拥有一个可变引用 和 一个不可变的引用；<mark>但同时有多个不可变的引用是可以的</mark></strong></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> s<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> r1<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> r2<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> s1<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> s<span class=\"token punctuation\">;</span><span class=\"token comment\">//报错！！！！：因为不可以把s借用为可变的引用，因为它已经借给了不可变的引用 </span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}，{}，{}\"</span><span class=\"token punctuation\">,</span>r1<span class=\"token punctuation\">,</span>r2<span class=\"token punctuation\">,</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4><a id=\"_931\"></a>悬垂引用</h4>\n<p>📄**概念：**一个指针引用了内存中的某个地址，但是这块内存可能已经释放并且分配给其它变量使用了。</p>\n<p>rust保证不会让引用进入悬垂状态！！！</p>\n<p>🔖：这里我目前可以理解为：<strong>C++中的不要返回局部对象的引用，因为离开它自己的作用域也就被销毁了！！！</strong></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 悬空引用示例 </span>\n   <span class=\"token keyword\">let</span> r<span class=\"token operator\">=</span><span class=\"token function\">dangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">dangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">Stirng</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//报错！！！</span>\n<span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>s  <span class=\"token comment\">//s的引用返回给调用者，s在这里离开作用域并且被销毁，它指向的内存也就无效了</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\n<span class=\"token comment\">//直接返回 String 就不会报错了</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">dangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Stirng</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns   <span class=\"token comment\">//所有权被转移出函数并没有被销毁</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>📚：引用的规则</p>\n<blockquote>\n<ul><li>在任何一段给定的时间内，要么只能拥有一个可变引用，要么只能拥有任意数量的不可变引用</li><li>引用总是有效的</li></ul>\n</blockquote>\n<h3><a id=\"slicce_965\"></a>切片（slicce）</h3>\n<p>切片（slicce）：是 rust 中不持有所有权的数据类型。（允许我们<strong>引用</strong>集合中某一段连续的元素序列）</p>\n<p>使用方式和go语言的切片差不多。</p>\n<p>👀：示例</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> s<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> wordindex<span class=\"token operator\">=</span><span class=\"token function\">first_world</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>wordindex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 字符串切片 和 </span>\n<span class=\"token keyword\">let</span> s<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> hello<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">..</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//左闭右开  中间数字之间也两个点</span>\n<span class=\"token keyword\">let</span> hello<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">..</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//等价于上面那个</span>\n<span class=\"token keyword\">let</span> world<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">..</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> world<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//和上面那个一样</span>\n<span class=\"token comment\">// 整个字符串</span>\n<span class=\"token keyword\">let</span> u<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><mark>方括号数字之间是两个点</mark>:</p>\n<blockquote>\n<p>字符串切片的边界必须位于有效的 UTF-8 字符边界内。</p>\n</blockquote>\n<p>[ start … end ] <mark>是一个左闭右开区间</mark></p>\n<p>📖：字符串切片的类型是： <strong>&amp;str</strong></p>\n<blockquote>\n<p>因为 &amp;str 是一个不可变的引用，所以字符串字面量自然也是不可变的</p>\n</blockquote>\n<p><strong>⚠️：字符串字面值实质上是一个切片</strong></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> s1<span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//字符串字面值实质是切片</span>\n <span class=\"token comment\">// 将字符串切片作为参数传递</span>\n<span class=\"token comment\">// 使用 &amp;str作为函数参数，这样就可以现时接String 类型和 &amp; str 类型的参数，更加通用</span>\n<span class=\"token comment\">// eg:</span>\n<span class=\"token keyword\">let</span> my_string<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> wordindex<span class=\"token operator\">=</span><span class=\"token function\">first_w</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>my_string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> my_string_str<span class=\"token operator\">=</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> wordindex<span class=\"token operator\">=</span><span class=\"token function\">first_w</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>my_string_str<span class=\"token punctuation\">[</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//可以简化为下面这种形式，因字符串字面值本质是切片</span>\n<span class=\"token keyword\">let</span> wordindex<span class=\"token operator\">=</span><span class=\"token function\">first_w</span><span class=\"token punctuation\">(</span>my_string_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">first_w</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">usize</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">let</span> bytes<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">as_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> bytes<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">enumerate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">if</span> item <span class=\"token operator\">==</span> <span class=\"token char\">b' '</span><span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\">// 示例函数 参数为String引用建议改为这个</span>\n<span class=\"token comment\">//因为这样改进后既可以处理 String类型又同时可以处理 &amp;str 类型，更加通用</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">first_w</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">let</span> bytes<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">as_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> bytes<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">enumerate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">if</span> item<span class=\"token operator\">==</span><span class=\"token char\">b' '</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">..</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>数组切片：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 这个切片go语言中的切片用法差不多,go和rust中的切片数字都不能为负数</span>\n<span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> slice<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//数组切片；切片的第二个参数不可以像python那样写成负数</span>\n</code></pre>\n<h2><a id=\"struct___1052\"></a>struct 结构体</h2>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">//语法：</span>\n<span class=\"token keyword\">struct</span> 结构体名  <span class=\"token punctuation\">{<!-- --></span>\n    字段名 ： 类型 <span class=\"token punctuation\">,</span>\n    字段名 ： 类型 <span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">...</span>          <span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">//最后一个字段也要有逗号</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 定义一个结构体在花括号里面为所有字段定义名称和类型</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">User</span> <span class=\"token punctuation\">{<!-- --></span>\n    username<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    sign_in_count<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u64</span><span class=\"token punctuation\">,</span>\n    active<span class=\"token punctuation\">:</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//最后一个对象也要有逗号</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>🔖 创建对象实例：<strong>不能只赋值其中几个字段，必须对所有字段赋值，顺序可以不一样</strong></p>\n<pre><code class=\"prism language-rust\">  <span class=\"token comment\">//    创建一个对象实例</span>\n    <span class=\"token comment\">// 不能只赋值其中几个字段，必须对所有字段赋值，顺序可以不一样</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> user1 <span class=\"token operator\">=</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{<!-- --></span>\n        email<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"725482520\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        username<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shenyang\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        active<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        sign_in_count<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><mark>使用 . 来说属性</mark></p>\n<pre><code class=\"prism language-rust\">    <span class=\"token comment\">// 使用点 . 来访问属性</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> user1<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> user1<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> user1<span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> user1<span class=\"token punctuation\">.</span>sign_in_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">// 更改结构体的字段的值</span>\nuser1<span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"654321\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">//前提要是创建对象是要可变的 加了 mut 关键字</span>\n<span class=\"token comment\">//struct 的实例是可变的，那么实例中所有字段都是可变的</span>\n</code></pre>\n<blockquote>\n<p>💥**更新语法：**想用某个struct实例来创建一个新实例的时候可以使用更新语法</p>\n<p>语法： … 对象实例名</p>\n</blockquote>\n<pre><code class=\"prism language-rust\">   <span class=\"token comment\">// struct更新语法：想用某个struct实例来创建一个新实例的时候可以使用更新语法</span>\n    <span class=\"token keyword\">let</span> user2 <span class=\"token operator\">=</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{<!-- --></span>\n        email<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        username<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">..</span>user1 \n<span class=\"token comment\">//在这使用了更新语法（也就是除了上面两个字段，其他的字段跟user1的一样）</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>🦅：上面更新语法：user2除了自己定义的两个属性，其他的属性和 user1 相同。</p>\n<p><strong>struct可以作为函数的返回值</strong></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">restr</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{<!-- --></span>\n        email<span class=\"token punctuation\">:</span> e<span class=\"token punctuation\">,</span>\n        username<span class=\"token punctuation\">:</span> u<span class=\"token punctuation\">,</span>\n        active<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        sign_in_count<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>字段初始化可以简写</strong></p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">//字段初始化可以简写，当字段名与字段值对应变量名相同时，就可以省略字段名</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">restr1</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{<!-- --></span>\n        email<span class=\"token punctuation\">,</span> <span class=\"token comment\">//可以使用简写方式</span>\n        username<span class=\"token punctuation\">,</span>\n        active<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        sign_in_count<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>struct 的实例是可变的，那么实例中所有字段都是可变的</strong></p>\n<p>结构体实例对象也分为可变和不可变的：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> 名称 <span class=\"token operator\">=</span> 结构体名 <span class=\"token punctuation\">{<!-- --></span>\n    对应字段赋值\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\n<span class=\"token keyword\">let</span>  名称 <span class=\"token operator\">=</span> 结构体名 <span class=\"token punctuation\">{<!-- --></span>\n    对应字段赋值\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h4><a id=\"Tuple_struct_1164\"></a>Tuple struct</h4>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">//语法：</span>\n<span class=\"token keyword\">struct</span> 名称 <span class=\"token punctuation\">(</span> 类型<span class=\"token number\">1</span> ， 类型<span class=\"token number\">2</span> ，类型<span class=\"token number\">3</span> <span class=\"token punctuation\">...</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//最后一个类型不需要加逗号</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Color</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>👀：实例</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// tuple struct 实例</span>\n<span class=\"token keyword\">let</span> red <span class=\"token operator\">=</span> \n<span class=\"token class-name\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"blacke\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">//tuple struct 的实例</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> black <span class=\"token operator\">=</span> \n<span class=\"token class-name\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"blacke\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//tuple struct 的实例</span>\nblack<span class=\"token number\">.0</span> <span class=\"token operator\">=</span> <span class=\"token number\">246</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//也可以使用点语法来访问元素</span>\nblack<span class=\"token number\">.1</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//想要改变必须创建时是可变的</span>\nblack<span class=\"token number\">.2</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>使用点来访问属性，字段序号从 0 开始 !!!</p>\n<h4><a id=\"struct__1191\"></a>struct 方法</h4>\n<p><strong>方法第一个参数是self，相当于C++中的 this，方法可以有多个参数，但第一个必须是self</strong>***，在 impl 块里面定义方法**</p>\n<p>每个 struct 允许拥有多个 impl 块</p>\n<p>🔖：语法</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">impl</span>  结构体名 <span class=\"token punctuation\">{<!-- --></span>\n    方法\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// struct 方法</span>\n<span class=\"token comment\">// 方法第一个参数是self，相当于C++中的 this，方法可以有多个参数，但第一个必须是self</span>\n<span class=\"token comment\">//访问使用实例对象 加 . 访问</span>\n<span class=\"token comment\">// 在 impl 块里面定义方法</span>\n<span class=\"token comment\">// 每个struct允许拥有多个 impl 块</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//绑定方法到 struct上   impl  结构体名 { 对应的方法 } </span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">area</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">u32</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//也有可变与不可变 self  &amp;self  &amp;mut self  对应 获得所有权  借用 可变借用</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>length\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 关联函数，是函数不是方法 通过用于构造器</span>\n<span class=\"token comment\">//调用关联函数使用  类型名：：函数名</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">square</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//创建一个正方形</span>\n        <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">{<!-- --></span>\n            width<span class=\"token punctuation\">:</span> size<span class=\"token punctuation\">,</span>\n            length<span class=\"token punctuation\">:</span> size<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">can_hold</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">&gt;</span> other<span class=\"token punctuation\">.</span>width <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">&gt;</span> other<span class=\"token punctuation\">.</span>length\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>**关联函数：**不带 self 的函数</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 关联函数，是函数不是方法 通常用于构造器</span>\n<span class=\"token comment\">//调用关联函数使用  类型名：：函数名</span>\n\n <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">square</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//创建一个正方形</span>\n        <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">{<!-- --></span>\n            width<span class=\"token punctuation\">:</span> size<span class=\"token punctuation\">,</span>\n            length<span class=\"token punctuation\">:</span> size<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>示例：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 示例</span>\n<span class=\"token comment\">// 计算长方形的面积</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">area</span><span class=\"token punctuation\">(</span>dim<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">u32</span> <span class=\"token punctuation\">{<!-- --></span>\n    dim<span class=\"token number\">.0</span> <span class=\"token operator\">*</span> dim<span class=\"token number\">.1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    \n        <span class=\"token keyword\">let</span> w <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> l <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> rect <span class=\"token operator\">=</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">{<!-- --></span>\n            width<span class=\"token punctuation\">:</span> w<span class=\"token punctuation\">,</span>\n            length<span class=\"token punctuation\">:</span> l<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">.</span><span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//使用对象实例调用它自己的方法</span>\n        <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">area</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">u32</span> <span class=\"token punctuation\">{<!-- --></span>\n            rect<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> rect<span class=\"token punctuation\">.</span>length\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:#?}\"</span><span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[derive(Debug)]</span> \n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Rectangle</span> <span class=\"token punctuation\">{<!-- --></span>\n    width<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span>\n    length<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//绑定方法到 struct上   impl  结构体名 { 对应的方法 } </span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">area</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">u32</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//也有可变与不可变 self  &amp;self  &amp;mut self  对应 获得所有权  借用 可变借用</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>length\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 关联函数，是函数不是方法 通过用于构造器</span>\n<span class=\"token comment\">//调用关联函数使用  类型名：：函数名</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">square</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//创建一个正方形</span>\n        <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">{<!-- --></span>\n            width<span class=\"token punctuation\">:</span> size<span class=\"token punctuation\">,</span>\n            length<span class=\"token punctuation\">:</span> size<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h3><a id=\"_1301\"></a>枚举</h3>\n<p><strong>使用 enum 关键字</strong></p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">//语法：</span>\n<span class=\"token keyword\">enum</span> 名称 <span class=\"token punctuation\">{<!-- --></span>\n    字段<span class=\"token number\">1</span> ，\n    字段<span class=\"token number\">2</span> ，\n    <span class=\"token punctuation\">...</span>\n    <span class=\"token comment\">//最后一个字段不需要加逗号</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">ipAddress</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token constant\">V4</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">V6</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>创建枚举对象</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 创建枚举</span>\n<span class=\"token keyword\">let</span> four<span class=\"token operator\">=</span> ipAddress<span class=\"token punctuation\">::</span><span class=\"token constant\">V4</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> four<span class=\"token operator\">=</span> ipAddress<span class=\"token punctuation\">::</span><span class=\"token constant\">V4</span><span class=\"token punctuation\">;</span>\nfour<span class=\"token operator\">=</span>ipAddress<span class=\"token punctuation\">::</span><span class=\"token constant\">V6</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">route</span><span class=\"token punctuation\">(</span>four<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">route</span><span class=\"token punctuation\">(</span>ipAddress<span class=\"token punctuation\">::</span><span class=\"token constant\">V6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">route</span><span class=\"token punctuation\">(</span>ip <span class=\"token punctuation\">:</span> ipAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">match</span> ip <span class=\"token punctuation\">{<!-- --></span>\n        ipAddress<span class=\"token punctuation\">::</span><span class=\"token constant\">V4</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ipv4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        ipAddress<span class=\"token punctuation\">::</span><span class=\"token constant\">V6</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ipv6\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>和 struct 组合：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">ipAddress</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token constant\">V4</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">V6</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 和 struct 组合</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">add</span><span class=\"token punctuation\">{<!-- --></span>\n    ipkind<span class=\"token punctuation\">:</span>ipAddress<span class=\"token punctuation\">,</span>\n    ip<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上面的可以由枚举变体替代：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">//语法</span>\n<span class=\"token keyword\">enum</span> 名称 <span class=\"token punctuation\">{<!-- --></span>\n    字段名 （类型<span class=\"token number\">1</span>，类型<span class=\"token number\">2</span>，类型<span class=\"token number\">3</span>，<span class=\"token punctuation\">...</span>）<span class=\"token punctuation\">,</span>\n    字段名  <span class=\"token punctuation\">(</span>类型<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">...</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">//最后一个字段也要加逗号</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 可以将数据附加到枚举的变体中，这样就可以不用像上面那样要使用struct，每个变体可以拥有</span>\n<span class=\"token comment\">// 不同的类型以及关联的数据量</span>\n<span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">ipAdd</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token constant\">V4</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">u8</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">u8</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">u8</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">u8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">V6</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 枚举变体</span>\n<span class=\"token keyword\">let</span> four<span class=\"token operator\">=</span>ipAdd<span class=\"token punctuation\">::</span><span class=\"token constant\">V4</span><span class=\"token punctuation\">(</span><span class=\"token number\">127</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> six<span class=\"token operator\">=</span>ipAdd<span class=\"token punctuation\">::</span><span class=\"token constant\">V6</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1k:8p:1o:9D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 枚举和结构体可以相互嵌套也可以自己嵌套，枚举也可嵌套枚举</span>\n\n</code></pre>\n<p>为枚举定义方法也可以使用 <mark>impl</mark> 关键字：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">impl</span> ipAdd <span class=\"token punctuation\">{<!-- --></span>\n    \n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">show</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">match</span> <span class=\"token keyword\">self</span> <span class=\"token punctuation\">{<!-- --></span>\n        ipAdd<span class=\"token punctuation\">::</span><span class=\"token constant\">V4</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}.{}.{}.{}\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  ipAdd<span class=\"token punctuation\">::</span><span class=\"token constant\">V6</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>示例：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Message</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Quit</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Move</span> <span class=\"token punctuation\">{<!-- --></span>x <span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">ChangeColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*\nQuit 没有任何关联数据\nMove 包含了一个匿名结构体\nWrite 包含了一个String\nChangeColor 包含了3个 i32 值\n*/</span>\n</code></pre>\n<h3><a id=\"Option__1419\"></a>Option 枚举</h3>\n<p><strong>定义在标准库中在 Prelude 中</strong>，用它来标识一个无值无效或缺失！</p>\n<p>Option 是一个枚举，它可以有两个变体：<strong>Some</strong> 和 <strong>None</strong>。（描述了某个值可能存放（某种类型）或不存在的情况）</p>\n<p><strong>rust 中没有 Null 或者 Nullable 的概念</strong>，而是使用 Option 来表示可能存在（有值）或不存在（无值）的情况。</p>\n<p>标准库定义：</p>\n<p><strong>T 表示是一个泛型参数！！！</strong></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//标准库定义</span>\n    <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">None</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>示例：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// Option示例：</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> sn<span class=\"token operator\">=</span><span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> ss<span class=\"token operator\">=</span><span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> absent_number<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span>  <span class=\"token operator\">=</span> <span class=\"token class-name\">None</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><mark>注意：</mark></p>\n<blockquote>\n<ul><li><strong>Option 和 T 是不同的类型，不可以把 Option 直接当成 T</strong></li><li><strong>如果想使用 Option 中的T，必须将它转换为 T，或者使用 match 语句来处理 None 值</strong></li></ul>\n</blockquote>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span><span class=\"token keyword\">i8</span> <span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> y<span class=\"token punctuation\">:</span><span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i8</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//x 和 y 是两种不同的类型</span>\n<span class=\"token keyword\">let</span> sum<span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token comment\">//报错：必须把 y 转换为 i8 类型</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"match__if_let_1464\"></a>match 和 if let</h3>\n<p>📚：<strong>match 匹配必须穷举所有的可能性！！！</strong></p>\n<p>👀：示例：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 定义一个枚举</span>\n<span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Coin</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token class-name\">Penny</span><span class=\"token punctuation\">,</span>\n  <span class=\"token class-name\">Nickel</span><span class=\"token punctuation\">,</span>\n  <span class=\"token class-name\">Dime</span><span class=\"token punctuation\">,</span>\n  <span class=\"token class-name\">Quarter</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//匹配 Coin 的所有可能性</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">value_in_cents</span><span class=\"token punctuation\">(</span>coin<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">u8</span> <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">match</span> coin<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Penny</span> <span class=\"token operator\">=&gt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Nickel</span> <span class=\"token operator\">=&gt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Dime</span> <span class=\"token operator\">=&gt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Quarter</span> <span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Quarter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token number\">25</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>如果处理的语句有多条，需要用大括号括起来！！！</p>\n<p>匹配 Option 示例：记住它只有两种状态！！</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 匹配 Option&lt;T&gt;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">plus_one</span><span class=\"token punctuation\">(</span>x <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">match</span> x<span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">None</span> <span class=\"token operator\">=&gt;</span> <span class=\"token class-name\">None</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">let</span> five <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> six <span class=\"token operator\">=</span><span class=\"token function\">plus_one</span><span class=\"token punctuation\">(</span>five<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> none <span class=\"token operator\">=</span> <span class=\"token function\">plus_one</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>🔖：<strong>如果情况太多，可以使用下划线通配符来代替其它情况，不用穷举所有的情况了！！！</strong></p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 如果值的情况有点多，不想列出所有的情况，可以使用 _ 通配符来替代没列出的值</span>\n<span class=\"token comment\">// 示例：这样就可以不穷举所有可能了</span>\n<span class=\"token keyword\">let</span> v<span class=\"token operator\">=</span><span class=\"token number\">0u8</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">match</span> v<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token number\">1</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">2</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">3</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    _ <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"anything\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 其他情况用 通配符替代</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"if_let_1530\"></a>if let</h4>\n<blockquote>\n<p>📖： <strong>if let 处理只关心一种匹配而忽略其它匹配的情况</strong></p>\n</blockquote>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span><span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">0u8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">match</span> v <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//这里只处理 3 和其他 两种情况这样使用 if let 更好</span>\n    <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    _ <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"anything\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上面只处理一种情况值为 3 情况，可以使用 if let 来处理</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 简洁写法</span>\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_1553\"></a>包、单元包、模块</h3>\n<p>📚：</p>\n<blockquote>\n<ul><li><mark>包（package）</mark>：一个用于构建、测试并分享单元包的Cargo 功能。</li><li><mark>单元包（crate）</mark>：一个用于生成库或可执行文件的树形模块结构</li><li><mark>模块（module）及 usu 关键字</mark>：它们被用于控制文件结构、作用域及路径的私有性</li><li><mark>路径（path）</mark>：一种用于命名条目的方法，这些条目包括结构体、函数和模块等</li></ul>\n</blockquote>\n<p>Cargo 会默认将 src/main.rs 视作一个二进制单元包的根节点而无须指定，这个<strong>二进制单元包与包拥有相同的名称</strong>。</p>\n<blockquote>\n<p>模块：以 mod 关键字来定义一个模块，接着指明这个模块的名字，用花括号包裹块体。</p>\n</blockquote>\n<p>路径：</p>\n<ul><li>使用单元包或字面量 crate 从根节点开始的<strong>绝对路径</strong></li><li>使用 self 、super 或内部标识符从当前模块开始的<strong>相对路径</strong></li></ul>\n<p>标识符之间使用 :: 隔开。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">//  定义模块</span>\n<span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">my_mod</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">pub</span>  <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">my_mod1</span><span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n              <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">pub</span>  <span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">my_mod2</span><span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n   \n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">crate</span><span class=\"token module-declaration namespace\"><span class=\"token punctuation\">::</span>my_mod<span class=\"token punctuation\">::</span>my_mod1<span class=\"token punctuation\">::</span></span><span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//报错因为 my_mod1 是私有的</span>\n    \n    <span class=\"token keyword\">crate</span><span class=\"token module-declaration namespace\"><span class=\"token punctuation\">::</span>my_mod<span class=\"token punctuation\">::</span>my_mod2<span class=\"token punctuation\">::</span></span><span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token namespace\">my_mod<span class=\"token punctuation\">::</span>my_mod2<span class=\"token punctuation\">::</span></span><span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>如果模块没有 pub 属性修饰，就不能直接访问，但如果 pub 修饰了模块，没有修饰里面的函数可以访问模块，但不能访问里面的函数。</p>\n<p>🔖：<strong>Rust 中的所有条目（函数、方法、结构体、枚举、模块及常量）默认都是私有的。</strong></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">my_mod</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">pub</span>  <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token namespace\">my_mod2<span class=\"token punctuation\">::</span></span><span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n\n      <span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">my_mod1</span><span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n              <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">pub</span>  <span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">my_mod2</span><span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">crate</span><span class=\"token module-declaration namespace\"><span class=\"token punctuation\">::</span>my_mod<span class=\"token punctuation\">::</span></span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">super</span><span class=\"token module-declaration namespace\"><span class=\"token punctuation\">::</span>a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">crate</span><span class=\"token module-declaration namespace\"><span class=\"token punctuation\">::</span>my_mod<span class=\"token punctuation\">::</span></span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//子模块可以使用它所有祖先模块中的条目</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n   \n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>🔖<strong>结论：在父模块中的条目无法使用子模块中的<mark>私有条目</mark>，但是子模块中的条目可以使用它<mark>所有祖先模块中的条目</mark>。</strong></p>\n<h4><a id=\"_pub__1648\"></a>使用 pub 关键字来暴露路径</h4>\n<p>要注意一下使用 pub 关键字来暴露了模块，但是它里面的函数依然是私有的没有被暴露，要暴露某个函数必须要在前面加 pub 。</p>\n<p><mark>super 关键字是从父级模块开始构建相对路径，它可以相当于 linux 文件系统中的两个点 … 。</mark></p>\n<p>🔖：结构体定义时使用了 pub ，结构体本身成为了公共结构体，但它的字段依旧还是私有的，要一个一个字段的进行是否需要成为公共的。</p>\n<pre><code class=\"prism language-rust\"> <span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">back_of_house</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Breakfase</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">pub</span> name<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//公共的</span>\n            age<span class=\"token punctuation\">:</span><span class=\"token keyword\">i16</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//私有的</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">impl</span> <span class=\"token class-name\">Breakfase</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Breakfase</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Breakfase</span><span class=\"token punctuation\">{<!-- --></span>\n                name<span class=\"token punctuation\">:</span>name<span class=\"token punctuation\">,</span>\n                age<span class=\"token punctuation\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">let</span> s1<span class=\"token operator\">=</span><span class=\"token namespace\">back_of_house<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Breakfase</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shenyang\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>🔖：<strong>我们将一个枚举声明为公共的时候，它所有的变体都自动变成为公共的，与结构体区分开</strong></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">sy</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">xianze</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">B</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">C</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">D</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span> xianze<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">show</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>   \n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> x1<span class=\"token operator\">=</span><span class=\"token namespace\">sy<span class=\"token punctuation\">::</span>xianze<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">A</span><span class=\"token punctuation\">;</span>\n    x1<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> x2<span class=\"token operator\">=</span><span class=\"token namespace\">sy<span class=\"token punctuation\">::</span>xianze<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">B</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5><a id=\"_use__1707\"></a>用 use 关键字将路径导入作用域</h5>\n<p>使用 use 将路径引入作用域时也需要遵守私有性规则！！！</p>\n<p>使用 use 指定相对路径必须要传递给 use 的路径的开始处使用关键字 <strong>self</strong> ，而不是从当前作用域中可用的名称开始。</p>\n<p>使用 use 将函数的父模块引入作用域意味着在调用时我们必须指定这个父模块，从而更清晰的地表明当前函数没有定义在当前作用域中。</p>\n<p>当使用 use 将结构体、枚举和其他条目引入作用域时，我们通常通过完整路径来引入而不是引入父级模块。</p>\n<p>当引入的函数名称相同的时候，我们可以使用它们的父模块来区分两个不同的类型。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">my_mod</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">pub</span>  <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token namespace\">my_mod2<span class=\"token punctuation\">::</span></span><span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">my_mod1</span><span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n              <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">pub</span>  <span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">my_mod2</span><span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">crate</span><span class=\"token module-declaration namespace\"><span class=\"token punctuation\">::</span>my_mod<span class=\"token punctuation\">::</span></span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">super</span><span class=\"token module-declaration namespace\"><span class=\"token punctuation\">::</span>a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">crate</span><span class=\"token module-declaration namespace\"><span class=\"token punctuation\">::</span>my_mod<span class=\"token punctuation\">::</span></span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//子模块可以使用它所有祖先模块中的条目</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n   \n  <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">my_mod<span class=\"token punctuation\">::</span></span>my_mod1<span class=\"token punctuation\">;</span><span class=\"token comment\">//错误 my_mod1是私有的</span>\n  <span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">back_of_house</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Breakfase</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">pub</span> name<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n            age<span class=\"token punctuation\">:</span><span class=\"token keyword\">i16</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">impl</span> <span class=\"token class-name\">Breakfase</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Breakfase</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Breakfase</span><span class=\"token punctuation\">{<!-- --></span>\n                name<span class=\"token punctuation\">:</span>name<span class=\"token punctuation\">,</span>\n                age<span class=\"token punctuation\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//   use back_of_house::Breakfase;//绝对路径</span>\n<span class=\"token comment\">//   use self::back_of_house::Breakfase;//相对路径</span>\n\n<span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">sy</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">xianze</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">B</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">C</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">D</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span> xianze<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">show</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">sy<span class=\"token punctuation\">::</span></span>xianze<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> x1<span class=\"token operator\">=</span><span class=\"token namespace\">sy<span class=\"token punctuation\">::</span>xianze<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">A</span><span class=\"token punctuation\">;</span>\n    x1<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> x2<span class=\"token operator\">=</span><span class=\"token namespace\">sy<span class=\"token punctuation\">::</span>xianze<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">B</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> s1<span class=\"token operator\">=</span><span class=\"token namespace\">back_of_house<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Breakfase</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shenyang\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">crate</span><span class=\"token module-declaration namespace\"><span class=\"token punctuation\">::</span>my_mod<span class=\"token punctuation\">::</span>my_mod2<span class=\"token punctuation\">::</span></span><span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//报错因为 my_mod1 是私有的</span>\n    <span class=\"token namespace\">my_mod<span class=\"token punctuation\">::</span>my_mod2<span class=\"token punctuation\">::</span></span><span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5><a id=\"as__1792\"></a>使用as 来指定引入的别名</h5>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">sy<span class=\"token punctuation\">::</span></span>xianze <span class=\"token keyword\">as</span> xz<span class=\"token punctuation\">;</span><span class=\"token comment\">//使用 as 指定别名</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> x1<span class=\"token operator\">=</span><span class=\"token namespace\">xz<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">A</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">let</span> x1<span class=\"token operator\">=</span><span class=\"token namespace\">sy<span class=\"token punctuation\">::</span>xianze<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">A</span><span class=\"token punctuation\">;</span>\n    x1<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> x2<span class=\"token operator\">=</span><span class=\"token namespace\">sy<span class=\"token punctuation\">::</span>xianze<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">B</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h5><a id=\"_pub_use__1806\"></a>使用 pub use 重导出名称</h5>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">front_of_house</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">hosting</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add_to_waitlist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">use</span> <span class=\"token keyword\">crate</span><span class=\"token module-declaration namespace\"><span class=\"token punctuation\">::</span>front_of_house<span class=\"token punctuation\">::</span></span>hosting<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">eat_at_restaurant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token namespace\">hosting<span class=\"token punctuation\">::</span></span><span class=\"token function\">add_to_waitlist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token namespace\">hosting<span class=\"token punctuation\">::</span></span><span class=\"token function\">add_to_waitlist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>使用 use 关键字将名称引入作用域的时候，这个名称会以私有的方式在新的作用域中生效，为了让外部代码访问这些名称，可以使用 <strong>pub use</strong> ,也被称为 重导出。</p>\n<h5><a id=\"_1825\"></a>使用外部包</h5>\n<p>首先将它们列入 Cargo.toml 文件，再使用 use 来将特定条目引入作用域。</p>\n<p>可以使用 嵌套的路径来清理众多的 use 语句：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>cmp<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Ordering</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>io<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//==============================================</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token namespace\">cmp<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Ordering</span><span class=\"token punctuation\">,</span> io<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//使用 self</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>io<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Write</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//=================================================</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>io<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Write</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//==============================================</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>collections<span class=\"token punctuation\">::</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//使用通配符</span>\n</code></pre>\n<p>写出相同的部分，用花括号包裹有差异的部分。</p>\n<p>可以使用通配符 * 来引入某个路径中所有的公共条目。</p>\n<h2><a id=\"_1853\"></a>通用集合类型</h2>\n<pre><code class=\"prism language-rust\">\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>collections<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//  vector 学习</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token comment\">// 只能存放相同类型的值</span>\n<span class=\"token comment\">// 创建方式</span>\n<span class=\"token keyword\">let</span> v<span class=\"token punctuation\">:</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;=</span><span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//也分为可变和不可变</span>\n\n\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> v<span class=\"token operator\">=</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//vec后面有个 !</span>\n\nv<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// get 会返回一个 Option&lt;&amp;T&gt;</span>\n\n<span class=\"token keyword\">match</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">None</span><span class=\"token operator\">=&gt;</span><span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"None\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 读取 vector里面的值</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// unwrap方式:标准库实现</span>\n<span class=\"token comment\">// pub const fn unwrap&lt;T&gt;(self) -&gt; T {<!-- --></span>\n<span class=\"token comment\">//     match self {<!-- --></span>\n<span class=\"token comment\">//         Some(val) =&gt; val,</span>\n<span class=\"token comment\">//         None =&gt; panic!(\"called `Option::unwrap()` on a `None` value\"),</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">// }</span>\n\n<span class=\"token keyword\">match</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">None</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"None\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 索引 和 get 处理访问的越界的区别:索引: panic  get:返回 None</span>\n\n<span class=\"token comment\">// 所有权和借用规则:不能在同一作用域内同时有可变的引用 和不可变 的引用</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> v <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//可变</span>\n<span class=\"token keyword\">let</span> first<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//不可变引用 </span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//可变借用</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//不可变引用</span>\n\n<span class=\"token comment\">// 遍历 vector的元素</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 遍历同时更改值</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> v <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span><span class=\"token number\">130</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> v<span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//要是可变引用</span>\n    <span class=\"token operator\">*</span>i<span class=\"token operator\">+=</span><span class=\"token number\">50</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这里要解引用</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 示例存放多种类型</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">SpreadsheetCell</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token class-name\">Int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token class-name\">Float</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">f64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> row<span class=\"token operator\">=</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span>\n    <span class=\"token class-name\">SpreadsheetCell</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">SpreadsheetCell</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">SpreadsheetCell</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Float</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// ==========================================================================</span>\n<span class=\"token comment\">// String 类型</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> v<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> v1<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">push_str</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//append</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">push_str</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token char\">'!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//把单个字符添加到字符串的末尾</span>\n<span class=\"token keyword\">let</span> v2<span class=\"token operator\">=</span>v<span class=\"token operator\">+</span><span class=\"token operator\">&amp;</span>v1<span class=\"token punctuation\">;</span><span class=\"token comment\">//使用+号来连接</span>\n<span class=\"token comment\">// 使用 format! 拼接字符串</span>\n<span class=\"token keyword\">let</span> s<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> s1<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> s2<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> s<span class=\"token operator\">=</span><span class=\"token macro property\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}-{}-{}\"</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">,</span>s1<span class=\"token punctuation\">,</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//它不会取得任何参数的所有权</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// rust 的字符串不支持索引访问</span>\n<span class=\"token keyword\">let</span> he<span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> s<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>he<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">..</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// hashmap&lt;k,v&gt;</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token comment\">// key -values 存储方式</span>\n<span class=\"token comment\">// use std::collections::HashMap; 引入才能使用</span>\n<span class=\"token keyword\">let</span> hs<span class=\"token punctuation\">:</span><span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;=</span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 在创建的时候没有数据,就要指定类型</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> s<span class=\"token operator\">=</span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//像这样 rust 就可以推导出它的类型了</span>\n<span class=\"token comment\">// 另外一种方式创建 </span>\n<span class=\"token keyword\">let</span> teams<span class=\"token operator\">=</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yellow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> initial_scores<span class=\"token operator\">=</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> scores<span class=\"token punctuation\">:</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span>_<span class=\"token punctuation\">,</span>_<span class=\"token operator\">&gt;=</span>\nteams<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">zip</span><span class=\"token punctuation\">(</span>initial_scores<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&amp;</span>scores<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}: {}\"</span><span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span>scores<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// hashmap 和所有权</span>\n<span class=\"token comment\">/*\n对于实现了 Copy trait 的类型， 值会被复制到 HashMap 中\n对于拥有所有权的值，值会被移动，所有权会转移给 hashmap\n如果将值的引用插入到 hashmap 中，值本身不会移动，在hashmap 有效期间，被\n引用的值必须保持有效\n\n*/</span>\n\n<span class=\"token comment\">// 只丰 k 不对应任何值的情况下，才插入 entry() 返回值为枚举 </span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> v <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> first<span class=\"token operator\">=</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    v<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>📚 动态数组中：</p>\n<p><strong>&amp;</strong> 与 <strong>[ ]</strong> <strong>会直接返回元素的引用</strong>。</p>\n<p>索引访问会因为访问不存在的元素而发生 panic，而 get 方法会返回 None 不会发生 panic。</p>\n<p><mark>注意所有权规则和借用规则：<strong>不能在同一个作用域中同时拥有可变引用和不可变引用。</strong></mark></p>\n<p>当我们需要修改可变引用的值，需要先对其解引用 *</p>\n<p>要在动态数组中存储不同的元素类型时，可以枚举来；因为枚举中的所有变体都被定义为了同一种类型。</p>\n<p>pop 方法移除并返回末尾的元素</p>\n</blockquote>\n<hr/>\n<blockquote>\n<p>📚 字符串：</p>\n<p>Rust中的字符串使用了 UTF-8 编码。</p>\n<p>rust 内置的string 编码格式是 utf-8，如果使用其它编码格式，就会报错，除非自己实现一个解码器</p>\n<p>rust核心部分只有一种字符串类型：字符串切片 str ,它通常会以借用形式出现: &amp; str</p>\n<p>可以对那些实现了 Display trait 的类型调用 to_string() 方法；</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> data<span class=\"token operator\">=</span><span class=\"token string\">\"shenyang\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> s<span class=\"token operator\">=</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//把字符串字面量转换成String</span>\n<span class=\"token keyword\">let</span> s1<span class=\"token operator\">=</span><span class=\"token string\">\"sy\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//也可以直接应用于字面量，s1的类型为String</span>\n<span class=\"token keyword\">let</span> s2<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong><mark>String::from 和 to_string 完成 相同的工作。</mark></strong></p>\n<p>🐼</p>\n<p>更新字符串：</p>\n<p>我们可以方便的使用 + 和 format! 宏来拼接字符串。（+ 方式会取得参数的所有权，而 format！不会取得参数的所有权）</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> s<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> s1<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> s2<span class=\"token operator\">=</span>s<span class=\"token operator\">+</span><span class=\"token operator\">&amp;</span>s1<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//看下面方法知道：函数会取得 s 的所有权</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\n<span class=\"token operator\">+</span> 号会调用一个方法\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span> <span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&amp;</span>s1能够调用add方法原因在于：编译器可以自动将 <span class=\"token operator\">&amp;</span><span class=\"token class-name\">String</span> 类型的参数强制转换为  <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span> 类型。（解引用强制转换技术）\n</code></pre>\n<p>push_str 添加一段字符串切片；push 添加单个字符</p>\n<p>字符串不支持索引访问。</p>\n<p>遍历方法： chars() 、 bytes()</p>\n</blockquote>\n<blockquote>\n<p>📚 HashMap</p>\n<p>要使用它要引入当前作用域：</p>\n<p>use std::collections::HashMap;</p>\n<p>它的键必须要有相同的类型，它的值也必须要 相同的类型。</p>\n<p>要记住可变与不可变原则；</p>\n<p>作用 zip 、 iter 、collect 配合使用可以将动态数组转换为哈希映射：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> teams<span class=\"token operator\">=</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yellow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> initial_scores<span class=\"token operator\">=</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> scores<span class=\"token punctuation\">:</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span>_<span class=\"token punctuation\">,</span>_<span class=\"token operator\">&gt;=</span>\nteams<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">zip</span><span class=\"token punctuation\">(</span>initial_scores<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>所有权：实现了 Copy trait 的类型，它们的值会被简单的复制到哈希映射中，对于持有所有权的值，值会被转移，并且所有权会转移给哈希映射 ；将引用插入进去就不会转移所有权，指向的值要保证在哈希有效时自己也要是有效的。</p>\n<p>get 获取值，返回一个 Option。</p>\n<p>entry 方法检测一个键是否存在对应值，如果不存在就为它插入一个值。</p>\n</blockquote>\n<h2><a id=\"_2074\"></a>错误处理</h2>\n<h2><a id=\"_panic_2076\"></a>不可恢复错误与 panic!</h2>\n<p><strong>当 panic! 发生时，程序会默认从开始栈展开。可以在 Cargo.toml 文件中的 [profile] 区域添加 panic='abort’来改变 panic 默认行为从展开切换为 终止。</strong></p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">//显示调用 panic!</span>\n<span class=\"token macro property\">panic!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发生了错误！！!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>回溯信息：</p>\n<p>将环境变量 RUST_BACKTRACE 设置为一个非0值，从而获得回溯信息。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token constant\">RUST_BACKTRACE</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> cargo run\n</code></pre>\n<p>带有调试信息的回溯：</p>\n<p>cargo build 或 cargo run 命令时，没有附带 - - release 标志，调试就是默认开启的</p>\n</blockquote>\n<h2><a id=\"_Result_2097\"></a>可恢复错误与 Result</h2>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">E</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//Result 枚举定义了两个变体：Ok 和 Err</span>\n</code></pre>\n<pre><code class=\"prism language-rust\">  <span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>fs<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> f<span class=\"token operator\">=</span><span class=\"token class-name\">File</span><span class=\"token punctuation\">::</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> f<span class=\"token operator\">=</span>  <span class=\"token keyword\">match</span> f<span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> file<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">panic!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Problem opening the file: {:?}\"</span><span class=\"token punctuation\">,</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>匹配不同类型的错误：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>fs<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> f<span class=\"token operator\">=</span><span class=\"token class-name\">File</span><span class=\"token punctuation\">::</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> f<span class=\"token operator\">=</span>  <span class=\"token keyword\">match</span> f<span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> file<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">match</span> error<span class=\"token punctuation\">.</span><span class=\"token function\">kind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">ErrorKind</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">NotFound</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">match</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>fc<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> fc<span class=\"token punctuation\">,</span>\n                <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">panic!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Problem creating the file: {:?}\"</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            other_error <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">panic!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Problem opening the file: {:?}\"</span><span class=\"token punctuation\">,</span>other_error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"unwrap__expect__2141\"></a>unwrap 和 expect （快捷方式）</h3>\n<blockquote>\n<p>unwrap :</p>\n<p>当 Result 的返回值是 Ok 变体时，它会返回 Ok 内部的值。返回值是 Err 变体时，它会替我们调用 panic! 宏。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>fs<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> f<span class=\"token operator\">=</span><span class=\"token class-name\">File</span><span class=\"token punctuation\">::</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<blockquote>\n<p>expect：</p>\n<p>它允许我 们在 unwrap 的基础上指定 panic! 所附带的错误提示信息。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> f<span class=\"token operator\">=</span><span class=\"token class-name\">File</span><span class=\"token punctuation\">::</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打开文件失败！！！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<h3><a id=\"_2164\"></a>传播错误</h3>\n<blockquote>\n<p>当执行失败的调用时，除了了可以函数中处理这个 错误，还可以将这个错误返回给调用者，这个过程就叫传播错误。</p>\n</blockquote>\n<pre><code class=\"prism language-rust\"><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>io<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Read</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>fs<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">read_username_from_file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//将错误返回给调用者</span>\n    <span class=\"token keyword\">let</span> f<span class=\"token operator\">=</span><span class=\"token class-name\">File</span><span class=\"token punctuation\">::</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> f<span class=\"token operator\">=</span><span class=\"token keyword\">match</span> f<span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> file<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">return</span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> s<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">match</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">read_to_string</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token comment\">//这里不加分号，表示发生错误返回错误，成功就忽略</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"___2193\"></a>传播错误的快捷方式： ? 运算符</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">read_username_from_file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> f<span class=\"token operator\">=</span><span class=\"token class-name\">File</span><span class=\"token punctuation\">::</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> s<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    f<span class=\"token punctuation\">.</span><span class=\"token function\">read_to_string</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> s<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>被 ？ 运算符接收的错误会隐式的被 from 函数处理，这个函数定义在标准库的 From trait中，用于在错误类型之间进行转换。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span>io<span class=\"token punctuation\">,</span>fs<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">read_username_from_file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token namespace\">fs<span class=\"token punctuation\">::</span></span><span class=\"token function\">read_to_string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>从文件中读取字符串是一 种相当常见的操作了，所以 rust 提供了一个函数 fs::read_to_string 用于打开文件，并且创建一个新 String,放入 String中并返回给调用者。。</p>\n<p><strong>使用 ? 运算符的函数必须返回 Result、Option 或任何实现了 std::ops::Try 的类型。</strong></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">Error</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">let</span> f<span class=\"token operator\">=</span><span class=\"token class-name\">File</span><span class=\"token punctuation\">::</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//这里的Box&lt;dyn Error&gt;&gt; 叫作 trait 对象，现在可以理解它为任何可能的错误类型</span>\n</code></pre>\n<h3><a id=\"_2228\"></a>错误处理的指导原则</h3>\n<p>使用 panic!</p>\n<ol><li>损坏状态并不包括预期中会偶尔发生的事情</li><li>随后的代码无法在出现损坏状态后继续正常运行</li><li>没有合适的方法 来将“处于损坏状态”这一信息编码至我们所使用的类型中</li></ol>\n<p>如果错误是可预期的，就应该返回一个 Result 而不是调用 panic!</p>\n<h1><a id=\"trait__2240\"></a>泛型、trait 与生命周期</h1>\n<h3><a id=\"_2242\"></a>泛型</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 泛型结构体,泛型也可以使用多个参数</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Point</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">U</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    x<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span>\n    y<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span>\n    v<span class=\"token punctuation\">:</span> <span class=\"token class-name\">U</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">U</span><span class=\"token operator\">&gt;</span> <span class=\"token class-name\">Point</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">U</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">x</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">T</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>x\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">y</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>y\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">v</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span><span class=\"token operator\">&amp;</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>v\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n<span class=\"token comment\">// 结构体泛型和方法泛型可以不同</span>\n<span class=\"token attribute attr-name\">#[derive(Debug)]</span> <span class=\"token comment\">// 这个注解可以让编译器自动生成 Debug 方法带有调试信息</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">p1</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    x<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span>\n    y<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">U</span><span class=\"token operator\">&gt;</span> p1<span class=\"token operator\">&lt;</span><span class=\"token class-name\">U</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">show</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fgfg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>使用泛型注意点：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// fn largest&lt;T&gt;(list: &amp;[T]) -&gt; T {<!-- --></span>\n<span class=\"token comment\">//     let mut largest = list[0];</span>\n\n<span class=\"token comment\">//     for &amp;item in list.iter() {<!-- --></span>\n<span class=\"token comment\">//         if item &gt; largest {<!-- --></span>\n<span class=\"token comment\">//             //报错它这个泛型不能适用于所有可能的类型，比如说字符串，或者自己定义的结构体，而C++不会报错，但会在执行的时候报错</span>\n<span class=\"token comment\">//             largest = item;</span>\n<span class=\"token comment\">//         }</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">//     largest</span>\n<span class=\"token comment\">// }</span>\n</code></pre>\n<p>在函数中定义泛型的时候，泛型放置在函数签名中通常用于指定参数和返回值类型的地方。</p>\n<p>如果泛型定义的函数不适用于所有类型，就会报错！！！</p>\n<p>为泛型结构体定义方法的时候，也要在 impl 后面加泛型参数和结构体的一样。</p>\n<blockquote>\n<p>泛型的性能问题：</p>\n<p><strong>单态化：是一个在编译期将泛型代码转换为特定代码的过程，它会将所有使用过的具体类型填入泛型参数从而得到能具体类型的代码。所以使用泛型并不会性能问题。</strong>（不需要为运行时付出任何的代价）</p>\n</blockquote>\n<h2><a id=\"trait__2306\"></a>trait 定义共享行为（接口）</h2>\n<p>和其他语言的接口功能类似，但也有不同的地方。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// trait : 定义共享行为，和其他语言的接口类似，但也有一些区别</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">trait</span> <span class=\"token type-definition class-name\">Summary</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">summarize</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">show</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">NewsArticle</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">pub</span> headline<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> location<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> author<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> content<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// 在类型上实现 trait</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Summary</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">NewsArticle</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//要实现一个 trait， 就要实现它里面所有方法</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">summarize</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{},by {} ({})\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>headline<span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">show</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{},by {} ({})\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>headline<span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>pub trait 名称</p>\n<p>实现语法： impl trait名 for 类型名</p>\n<blockquote>\n<p>限制：</p>\n<p>只有当 trait 或 类型定义于我们的库中时，我们才能为该类型实现对应的 trait。</p>\n<p>我们不能为外部类型实现外部 trait (孤儿规则)</p>\n</blockquote>\n<h3><a id=\"_2350\"></a>默认实现</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 默认实现</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">trait</span> <span class=\"token type-definition class-name\">sy</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">show</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"show \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//若没有实现就会使用默认实现</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">show1</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">sy1</span><span class=\"token punctuation\">{<!-- --></span>\n    name<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    age<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> sy <span class=\"token keyword\">for</span> sy1<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">show</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"show {}\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">show1</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"show {}\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">let</span> l<span class=\"token operator\">=</span>sy1<span class=\"token punctuation\">{<!-- --></span>name<span class=\"token punctuation\">:</span><span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> l1<span class=\"token operator\">=</span>sy1<span class=\"token punctuation\">{<!-- --></span>name<span class=\"token punctuation\">:</span><span class=\"token string\">\"lisi\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">:</span><span class=\"token number\">19</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n   l<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//有实现就会调用自己的实现</span>\n   l1<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>为某个类型实现 trait 时，可以选择保留或重载每个方法的默认行为！！</p>\n<p>实现 trait 时，没有实现对应的方法也可以调用默认实现的方法。</p>\n<h4><a id=\"_trait__2390\"></a>使用 trait 作为参数</h4>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 使用 trait 作为参数</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">trait</span> <span class=\"token type-definition class-name\">syhui</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">show2</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"show\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// item 可以是任何实现了 syhui trait 的类型</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">notify</span><span class=\"token punctuation\">(</span>item <span class=\"token punctuation\">:</span><span class=\"token keyword\">impl</span> syhui<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    item<span class=\"token punctuation\">.</span><span class=\"token function\">show2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"trait__2405\"></a>trait 约束</h3>\n<p>感觉就是通过 trait 来限制函数参数的范围！！！</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// item 可以是任何实现了 syhui trait 的类型</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">notify</span><span class=\"token punctuation\">(</span>item <span class=\"token punctuation\">:</span><span class=\"token keyword\">impl</span> syhui<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    item<span class=\"token punctuation\">.</span><span class=\"token function\">show2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//和上面那种功能等价，只是多了一个参数</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">notify1</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> syhui<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">:</span><span class=\"token class-name\">T</span> <span class=\"token punctuation\">,</span> item1<span class=\"token punctuation\">:</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    item<span class=\"token punctuation\">.</span><span class=\"token function\">show2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    item1<span class=\"token punctuation\">.</span><span class=\"token function\">show2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>📚<mark>可以通过 + 号来指定多个 trait 约束</mark></p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 使用 + 号来实现多个 trait约束</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">notify2</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> syhui <span class=\"token operator\">+</span> sy<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">:</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    item<span class=\"token punctuation\">.</span><span class=\"token function\">show2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">notify3</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">:</span> <span class=\"token keyword\">impl</span> syhui <span class=\"token operator\">+</span> sy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    item<span class=\"token punctuation\">.</span><span class=\"token function\">show2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>两种写法：impl trait 适合短小的示例，而 trait 约束适用于复杂情形</p>\n<h3><a id=\"_where__trait__2438\"></a>使用 where 从句来简化 trait 约束</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">some</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> sy<span class=\"token operator\">+</span>syhui<span class=\"token punctuation\">,</span> <span class=\"token class-name\">U</span><span class=\"token punctuation\">:</span> sy5<span class=\"token operator\">+</span>syhui<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> t1 <span class=\"token punctuation\">:</span> <span class=\"token class-name\">U</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">{<!-- --></span>\n    t<span class=\"token punctuation\">.</span><span class=\"token function\">show2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t1<span class=\"token punctuation\">.</span><span class=\"token function\">show2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t<span class=\"token punctuation\">.</span><span class=\"token function\">show1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t1<span class=\"token punctuation\">.</span><span class=\"token function\">show3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token number\">45</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 使用 whrer 从句简化</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">some1</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">U</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>t <span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">,</span> t1 <span class=\"token punctuation\">:</span> <span class=\"token class-name\">U</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span><span class=\"token keyword\">i32</span> \n <span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span>sy<span class=\"token operator\">+</span>syhui<span class=\"token punctuation\">,</span>  <span class=\"token comment\">//注意这里有个逗号</span>\n <span class=\"token class-name\">U</span><span class=\"token punctuation\">:</span>sy5<span class=\"token operator\">+</span>syhui <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//最后一个这里不用加逗号</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">show2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t1<span class=\"token punctuation\">.</span><span class=\"token function\">show2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">show1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t1<span class=\"token punctuation\">.</span><span class=\"token function\">show3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token number\">45</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-rust\">语法：\n<span class=\"token keyword\">fn</span>  函数名<span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">U</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>t <span class=\"token punctuation\">:</span><span class=\"token class-name\">T</span> <span class=\"token punctuation\">,</span> u <span class=\"token punctuation\">:</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> 返回值类型\n <span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> trait1 <span class=\"token operator\">+</span> trait2<span class=\"token operator\">+</span><span class=\"token punctuation\">...</span>  <span class=\"token punctuation\">,</span>\n       <span class=\"token class-name\">U</span> <span class=\"token punctuation\">:</span> trait1 <span class=\"token operator\">+</span> trait2<span class=\"token operator\">+</span><span class=\"token punctuation\">..</span> <span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token punctuation\">...</span> 函数体\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_trait__2471\"></a>返回实现了 trait 的类型</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">trait</span> <span class=\"token type-definition class-name\">sy5</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">show3</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">sy6</span><span class=\"token punctuation\">{<!-- --></span>\n    name<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    age<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> sy5 <span class=\"token keyword\">for</span> sy6<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">show3</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"show {}\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">returntrait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">impl</span> sy5<span class=\"token punctuation\">{<!-- --></span>\n    sy6<span class=\"token punctuation\">{<!-- --></span>\n        name<span class=\"token punctuation\">:</span><span class=\"token string\">\"sy6\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        age<span class=\"token punctuation\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>⚠️：错误写法</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">trait</span> <span class=\"token type-definition class-name\">sy5</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">show3</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">sy6</span><span class=\"token punctuation\">{<!-- --></span>\n    name<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    age<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">sy7</span><span class=\"token punctuation\">{<!-- --></span>\n    name<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    age<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span> sy5 <span class=\"token keyword\">for</span> sy6<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">show3</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"show {}\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> sy5 <span class=\"token keyword\">for</span> sy7<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">show3</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"show {}\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">returntrait</span><span class=\"token punctuation\">(</span>sw <span class=\"token punctuation\">:</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">impl</span> sy5<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">if</span> sw<span class=\"token punctuation\">{<!-- --></span>\n\n    sy6<span class=\"token punctuation\">{<!-- --></span>\n        name<span class=\"token punctuation\">:</span><span class=\"token string\">\"sy6\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        age<span class=\"token punctuation\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n         sy7<span class=\"token punctuation\">{<!-- --></span>\n        name<span class=\"token punctuation\">:</span><span class=\"token string\">\"sy7\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        age<span class=\"token punctuation\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>  \n</code></pre>\n<h3><a id=\"_trait__2537\"></a>使用 trait 约束来有条件地实现方法</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>fmt<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Display</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Pair</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    x<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span>\n    y<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 没有任何限制</span>\n<span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token class-name\">Pair</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{<!-- --></span>\n            x<span class=\"token punctuation\">,</span>\n            y<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//只有实现了 PartialOrd(用于比较) 与 Display(用于打印) 的类型，才会实现 cmp_display方法</span>\n<span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Display</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">PartialOrd</span><span class=\"token operator\">&gt;</span> <span class=\"token class-name\">Pair</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">cmp_display</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">&gt;=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The largest member is x = {}\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The largest member is y = {}\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 也可以为实现了某个 trait 的类型条件地实现另外一个 trait ,对满足 trait 约束的所有类型实现 trait 也称作覆盖实现</span>\n <span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Display</span><span class=\"token operator\">&gt;</span> <span class=\"token class-name\">ToString</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">{<!-- --></span>\n    。。。\n <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//我们可以为任何实现了 Display trait 的类型调用 ToString trait 里面的 to_string 方法</span>\n</code></pre>\n<h1><a id=\"_2579\"></a>生命周期</h1>\n<p>📖：</p>\n<blockquote>\n<ul><li>在rust中每个引用都有自己的生命周期，它对应着引用保持有效性的作用域。</li><li>生命周期最主要的目标是避免悬垂引用（值在离开作用域时使用指向它的引用）</li><li>rust 中不允许空值存在</li></ul>\n</blockquote>\n<h2><a id=\"_2587\"></a>借用检查器</h2>\n<p>rust 编译器有一个借用检查器，它用于比较不同的作用域并确定所有借用的合法性。</p>\n<p><strong>生命周期的标注不会改变任何引用的生命周期长度。</strong></p>\n<pre><code class=\"prism language-rust\">语法：\n'小写字符（通常使用小写的）\neg<span class=\"token punctuation\">:</span>\n<span class=\"token operator\">&amp;</span><span class=\"token keyword\">i32</span>   引用\n<span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">i32</span>  拥有显式生命周期的引用\n<span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">mut</span> <span class=\"token keyword\">i32</span>  拥有显式生命周期的可变引用\n标注是为描述多个泛型生命周期参数之间的关系\n</code></pre>\n<p>👀：对比</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 生命周期错误</span>\n<span class=\"token comment\">// fn longest(x : &amp;str, y : &amp;str) -&gt; &amp;str {<!-- --></span>\n<span class=\"token comment\">//     if x.len() &gt; y.len() {<!-- --></span>\n<span class=\"token comment\">//         x</span>\n<span class=\"token comment\">//     } else {<!-- --></span>\n<span class=\"token comment\">//         y</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">// }</span>\n<span class=\"token comment\">//不会报错，这标注说明了参数和返回值它们三个的引用要拥有相同的生命周期 'a (或是两个参数的存活时间不能短于给定的生命周期 'a )</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">longes1</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>x <span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> y<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        x\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        y\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//当具体的引用传入函数时，泛型生命周期 'a 会被具体化为 x 与 y 两者中生命周期较短的那一个。我们将返回的引用也标为了 'a ，在具化后的生命周期范围内也是有效的</span>\n</code></pre>\n<p><strong>我们在函数签名中指定生命周期参数时，我们并没有改变任何传入值或返回值的生命周期。</strong></p>\n<hr/>\n<p><strong>当返回一个引用时，返回类型的生命周期参数必须要与其中一个参数的生命周期参数相匹配。</strong></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">longes1</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>x <span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span> <span class=\"token punctuation\">{<!-- --></span>\n        x   <span class=\"token comment\">//我们忽略y 生命周期的标注</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>🔖 指定生命周期的方式取决于函数的具体实现功能。！！！！</p>\n<h3><a id=\"_2641\"></a>结构体定义中的生命周期标注</h3>\n<p><strong>在结构体中存储引用，需要为结构体定义中的第一个引用都添加生命周期标注。</strong></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">import</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    part <span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//结构体实例的存活时间不能超过存储在字段 part 中的引用的存活时间</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> novel<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Call me Ishmael. Some years ago...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> first_sentence<span class=\"token operator\">=</span>novel<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Could not find a '.'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//截取第一个 . 的位置以前的字符串</span>\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span>import<span class=\"token punctuation\">{<!-- --></span>\n        part<span class=\"token punctuation\">:</span> first_sentence<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_2661\"></a>生命周期省略</h2>\n<p>📑：<strong>任何引用都有一个生命周期，并且需要为使用引用的函数或结构体指定生命周期参数。</strong></p>\n<blockquote>\n<p>下面这个函数没有标注生命周期却可以通过编译</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">first_word</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> bytes <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">as_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> bytes<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">enumerate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> item <span class=\"token operator\">==</span> <span class=\"token char\">b' '</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">..</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>写入 rust 引用分析部分的模式也就是生命周期省略规则。就是编译器会考虑一些场景，我们无需去遵守，当我们的代码符合那些模式的时候，就不需要生命周期标注。</p>\n</blockquote>\n<p><strong>输入生命周期：函数参数或方法参数中的生命周期；</strong></p>\n<p><strong>输出生命周期：返回值的生命周期</strong></p>\n<blockquote>\n<p>编译器目前使用的三条规则来计算引用的生命周期：</p>\n<ul><li><strong>每一个引用参数都会拥有自己的生命周期参数</strong></li><li><strong>当只存在一个输入生命周期参数时，这个生命周期会被赋予给所有输出生命周期参数</strong></li><li><strong>当拥有多个输入生命周期参数，而其中一个是 &amp;self 或&amp;mut self 时，self 的生命周期会被赋予给所有的输出生命周期参数</strong></li></ul>\n</blockquote>\n<h3><a id=\"_2693\"></a>方法定义中的生命周期标注</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">import</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    part <span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">&gt;</span> import<span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">level</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token number\">3</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>声明在 impl 及类型名称之后的生命周期是不能省略的。</strong></p>\n<p>根据规则我们可以不用为 self 引用标注生命周期。</p>\n<h3><a id=\"_2712\"></a>静态生命周期</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token lifetime-annotation symbol\">'static</span> 生命周期\n</code></pre>\n<p><strong>'static 它表示整个程序的执行期。所有的字符串字面量都拥有这个静态生命周期</strong></p>\n<p>综合示例：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">longest_with_an_announcement</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token punctuation\">,</span> ann<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span>\n<span class=\"token keyword\">where</span>\n    <span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Display</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Announcement! {}\"</span><span class=\"token punctuation\">,</span> ann<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> y<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        x\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        y\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_2740\"></a>测试简要</h1>\n<pre><code class=\"prism language-rust\">测试函数需要使用 test 属性\n在函数上加上 <span class=\"token attribute attr-name\">#[test]</span> 属性\n使用 cargo test 命令运行所有测试\n\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add_two</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">{<!-- --></span>\n    a<span class=\"token operator\">+</span><span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 断言 assert</span>\n<span class=\"token comment\">// assert!  assert_eq!   assert_ne! 可以添加自定义信息</span>\n<span class=\"token attribute attr-name\">#[cfg(test)]</span>\n<span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">tests</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token attribute attr-name\">#[test]</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">it_works</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">use</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">::</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//要引入进来才能使用</span>\n    <span class=\"token attribute attr-name\">#[test]</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">it_add_two</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token function\">add_two</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"执行有失败吗？\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//测试add_two 执行的结果是否等于 4</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token attribute attr-name\">#[test]</span>\n    <span class=\"token attribute attr-name\">#[should_panic]</span> <span class=\"token comment\">//来指定应该发生 panic</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">it_cmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">panic!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is a panic!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// should_panic 属性：发生了 panic 就测试成功，没有就测试失败</span>\n<span class=\"token comment\">// 添加可选的 expect 属性</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">cmp</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">panic!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i must be greater than 0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    i<span class=\"token operator\">&gt;</span><span class=\"token number\">100</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// cargo test 匹配的名 </span>\n<span class=\"token comment\">// 会自动匹配带有名字字段的测试</span>\n\n<span class=\"token comment\">// 忽略测试</span>\n<span class=\"token comment\">// #[ignore]  添加字段就会忽略</span>\n<span class=\"token comment\">// cargo test -- --ignored 运行有忽略属性的测试</span>\n\n<span class=\"token comment\">// rust 中允许测试私有函数</span>\n\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n<span class=\"token macro property\">assert!</span> 它可以确保测试中某些条件的值为 <span class=\"token boolean\">true</span>，如果为 <span class=\"token boolean\">false</span> 就会调用  <span class=\"token macro property\">panic!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token macro property\">assert_eq!</span> 宏和 <span class=\"token macro property\">assret_ne!</span>宏，用于比较判断两个参数相等或不相等\n\n在自定义的结构体或枚举的定义的上方添加 <span class=\"token attribute attr-name\">#[derive(PartialEq, Debug)]</span> 标注来自动实现这两个 <span class=\"token keyword\">trait</span>\n\n\n\n<span class=\"token type-definition class-name\">should_panic</span> 检查 panic\n这个属性标记了测试函数会在代码发生 panic 时顺利通过，而不发生 panic 时失败\n可以选参数 expected ：它检查 panic 发生时输出的错误提示信息是否包含了指定的文字 \n<span class=\"token attribute attr-name\">#[test]</span>\n<span class=\"token attribute attr-name\">#[should_panic(expected=<span class=\"token string\">\"Guess value must be less than or equal to 100\"</span>)]</span>\n测试函数\n\n\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n<span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">E</span><span class=\"token operator\">&gt;</span> 来编写测试，它运行失败时会返回一个 <span class=\"token class-name\">Err</span> 值而不panic\n\n<span class=\"token attribute attr-name\">#[cfg(test)]</span>\n<span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">tests</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token attribute attr-name\">#[test]</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">it_works</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\nrust 会默认使用多线程来并行执行测试\n可以使用  cargo test <span class=\"token operator\">-</span><span class=\"token operator\">-</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span>test<span class=\"token operator\">-</span>threads<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n来将线程数量限制为 <span class=\"token number\">1</span>\n\n如果希望测试通过时也将值打印出来，可以使用：\ncargo test <span class=\"token operator\">-</span><span class=\"token operator\">-</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span>nocapture 来禁用截获功能\n\ncargo test 测试函数名   <span class=\"token comment\">//只运行部分指定的测试</span>\n注意：我们不能指定多个参数来运行多个参数，只有第一个参数才会生效\n\n想要运行多个测试可以用名称匹配来实现\ncargo test add \n运行所有测试名称中带有 add 的测试\n\nignore 属性来标记忽略某些测试\n在<span class=\"token attribute attr-name\">#[test]</span> 下面标记 <span class=\"token attribute attr-name\">#[ignore]</span>\n运行那些被忽略的测试\ncargo test <span class=\"token operator\">-</span><span class=\"token operator\">-</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span>ignored\n\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\n单元测试和集成测试\n</code></pre>\n<h1><a id=\"IO__2849\"></a>I/O 项目</h1>\n<blockquote>\n<p>跟着书写一个简易的 grep 工具</p>\n</blockquote>\n<blockquote>\n<p>🍎：项目关注点分离</p>\n<ul><li>将程序拆分为 main.rs 和 lib.rs ，并将实际的业务逻辑放入 lib.rs</li><li>当命令行解析逻辑相对简单时，将它留在 main.rs 中也可以</li><li>当命令行解析逻辑变得复杂时，需要将它从 main.rs 提取到 lib.rs 中</li></ul>\n<p>main.rs 负责运行程序，而 lib.rs 负责处理真正的业务逻辑。</p>\n</blockquote>\n<p>大多数终端都提供两种输出：</p>\n<ul><li>用于输出一般信息的标准输出(stdout)</li><li>用于输出错误提示信息的标准错误(stderr)</li></ul>\n<pre><code class=\"prism language-bash\"><span class=\"token operator\">&gt;</span>  文件名\n重定向 <span class=\"token builtin class-name\">:</span> 告诉终端将打印信息输出到指定文件而不是终端上面\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token macro property\">eprintln!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">eprintln!</span>宏用来向标准错误打印信息\n</code></pre>\n<p>src/main.rs</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">/*\n * @=^=: ===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^\n * @Autor: 沈扬\n * @Date: 2022-04-04 09:04:55\n * @FilePath: \\VScodeProjects\\Rustlearn\\minigrep\\src\\main.rs\n * @LastEditTime: 2022-04-04 13:10:35\n * @LastEditors: shenyang\n * @symbol_=custom_string_obkoro1: ..............因为不确定才有了期待...................................\n * @^=^: ===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^\n */</span>\n\n<span class=\"token comment\">// 用于读取命令行参数值std::env::args() 返回一个命令行参数的迭代器（iterator）</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>env<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>process<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// use minigrep::Config;//导入错误原因暂时不知</span>\n<span class=\"token comment\">// 所先放在下面接着用</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token namespace\">error<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span><span class=\"token punctuation\">,</span>fs<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Config</span> <span class=\"token punctuation\">{<!-- --></span>  \n        query <span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n        filename <span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n \n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">run</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">:</span><span class=\"token class-name\">Config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">Error</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    \n        <span class=\"token keyword\">let</span> contents <span class=\"token operator\">=</span> <span class=\"token namespace\">fs<span class=\"token punctuation\">::</span></span><span class=\"token function\">read_to_string</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//注意这里有个问号传播错误</span>\n    \n        <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>config<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token punctuation\">}</span>\n    \n\n\n\n\n\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Config</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Config</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'static</span> <span class=\"token keyword\">str</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token keyword\">return</span>  <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你没有输入参数或者是参数不足够！！！\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n       \n        <span class=\"token class-name\">Ok</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Config</span> <span class=\"token punctuation\">{<!-- --></span>\n            query<span class=\"token punctuation\">:</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            filename<span class=\"token punctuation\">:</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// collect() 方法将迭代器转换为一个集合例如： Vec。</span>\n   <span class=\"token keyword\">let</span> args<span class=\"token punctuation\">:</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">args</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//    在程序退出时向调用者返回 非0的状态码是一种惯用的信号，它表明</span>\n<span class=\"token comment\">// 当前程序的退出是由于某种错误状态导致的。</span>\n<span class=\"token comment\">// unwrap_or_else （） 方法：定义在标准库的 Result&lt;T,E&gt;  中 ，它的值为OK时</span>\n<span class=\"token comment\">// 行为和 unwrap 相同，当返回 Err 时，它会调用闭包中编写的代码。闭包的参数是写在两条竖线之间</span>\n<span class=\"token comment\">// process::exit(1) 函数会立刻终止程序的运行，并将我们指定的错误码返回给调用者。</span>\n\n\n\n\n    <span class=\"token keyword\">let</span> config<span class=\"token operator\">=</span><span class=\"token class-name\">Config</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap_or_else</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>err<span class=\"token closure-punctuation punctuation\">|</span></span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">eprintln!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Problem parsing arguments: {}\"</span><span class=\"token punctuation\">,</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>process<span class=\"token punctuation\">::</span></span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\n\n    \n<span class=\"token comment\">//    将获取到的值存入变量</span>\n    <span class=\"token comment\">// let query = &amp;args[1];</span>\n    <span class=\"token comment\">// let filename = &amp;args[2];</span>\n    <span class=\"token comment\">// println!(\"query: {}\", query);</span>\n    <span class=\"token comment\">// println!(\"filename: {}\", filename);</span>\n\n    \n\n\n<span class=\"token comment\">// // 开始读取文件</span>\n<span class=\"token comment\">//     let contents = fs::read_to_string(config.filename)</span>\n<span class=\"token comment\">//         .expect(\"Something went wrong reading the file\");</span>\n<span class=\"token comment\">//     println!(\"With text:\\n{}\", contents);</span>\n    \n\n<span class=\"token comment\">// 处理传播过来的错误</span>\n<span class=\"token comment\">// run(config);</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">eprintln!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Application error: {}\"</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>process<span class=\"token punctuation\">::</span></span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">search</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span> <span class=\"token punctuation\">,</span> contents<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 创建一个动态数组，将匹配的文本存储进去 </span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> results <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> contents<span class=\"token punctuation\">.</span><span class=\"token function\">lines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            results<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    results   <span class=\"token comment\">//返回匹配到的所有文本</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 使用结构体重构</span>\n<span class=\"token comment\">// struct Config {<!-- --></span>\n<span class=\"token comment\">//     query : String,</span>\n<span class=\"token comment\">//     filename : String,</span>\n<span class=\"token comment\">// }</span>\n\n<span class=\"token comment\">// impl Config {<!-- --></span>\n<span class=\"token comment\">//     // fn new(args: &amp;[String]) -&gt; Config{<!-- --></span>\n<span class=\"token comment\">//     //     if args.len() &lt;3{<!-- --></span>\n<span class=\"token comment\">//     //         panic!(\"你没有输入参数或者是参数不足够！！！\")</span>\n<span class=\"token comment\">//     //     }</span>\n        \n<span class=\"token comment\">//     //     Config{<!-- --></span>\n<span class=\"token comment\">//     //         query: args[1].clone(),</span>\n<span class=\"token comment\">//     //         filename: args[2].clone(),</span>\n<span class=\"token comment\">//     //     }</span>\n<span class=\"token comment\">//     // }</span>\n<span class=\"token comment\">//     // 我们倾向于使用 Panic! 来暴露程序的内部问题而非用法问题。</span>\n<span class=\"token comment\">//     // 改进  使用 Result 表明结果成功还是失败</span>\n<span class=\"token comment\">//     fn new(args: &amp;[String]) -&gt; Result&lt;Config, &amp;'static str&gt;{<!-- --></span>\n<span class=\"token comment\">//         if args.len() &lt;3{<!-- --></span>\n<span class=\"token comment\">//            return  Err(\"你没有输入参数或者是参数不足够！！！\")</span>\n<span class=\"token comment\">//         }</span>\n       \n<span class=\"token comment\">//         Ok (Config {<!-- --></span>\n<span class=\"token comment\">//             query: args[1].clone(),</span>\n<span class=\"token comment\">//             filename: args[2].clone(),</span>\n<span class=\"token comment\">//         })  </span>\n<span class=\"token comment\">//     }</span>\n\n<span class=\"token comment\">// }</span>\n\n\n\n<span class=\"token comment\">//改进为与 结构体关联的new函数</span>\n<span class=\"token comment\">// fn parse_config(args:&amp;[String]) -&gt; Config{<!-- --></span>\n<span class=\"token comment\">//     Config {<!-- --></span>\n<span class=\"token comment\">//         query: args[1].clone(),</span>\n<span class=\"token comment\">//         filename: args[2].clone(),</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">// }</span>\n\n\n<span class=\"token comment\">// fn parse_config(args:&amp;[String]) -&gt; (&amp;str,&amp;str){<!-- --></span>\n<span class=\"token comment\">//     let query =&amp;args[1];</span>\n<span class=\"token comment\">//     let filename =&amp;args[2];</span>\n<span class=\"token comment\">//     (query,filename)</span>\n<span class=\"token comment\">// }</span>\n\n\n<span class=\"token comment\">// 从 main 函数中除了配置解析和错误处理之外的所有逻辑都提取到单独的 run 函数中 </span>\n<span class=\"token comment\">// 从 run 函数中返回错误</span>\n<span class=\"token comment\">// use  std::error::Error;</span>\n<span class=\"token comment\">// () 是空元组</span>\n<span class=\"token comment\">// Box&lt;dyn Error&gt; 它会 返回一个实现了 Error trait 的类型，我们不需要指定具体是什么类型</span>\n<span class=\"token comment\">// 意味着我们可以在不同的错误场景下返回不同的 错误类型， dyn 意味着动态的意思</span>\n<span class=\"token comment\">// fn run(config:Config) -&gt; Result&lt;(),Box&lt;dyn Error&gt;&gt;{<!-- --></span>\n\n<span class=\"token comment\">// // 开始读取文件</span>\n<span class=\"token comment\">// // let contents = fs::read_to_string(config.filename)</span>\n<span class=\"token comment\">// // .expect(\"Something went wrong reading the file\");</span>\n<span class=\"token comment\">// // println!(\"With text:\\n{}\", contents);</span>\n\n\n<span class=\"token comment\">// let contents = fs::read_to_string(config.filename)?;//注意这里有个问号传播错误</span>\n<span class=\"token comment\">// Ok(())</span>\n\n\n<span class=\"token comment\">// }</span>\n\n</code></pre>\n<p>src/lib.rs</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">/*\n * @=^=: ===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^\n * @Autor: 沈扬\n * @Date: 2022-04-04 09:31:23\n * @FilePath: \\VScodeProjects\\Rustlearn\\minigrep\\src\\lib.rs\n * @LastEditTime: 2022-04-04 13:06:09\n * @LastEditors: shenyang\n * @symbol_=custom_string_obkoro1: ..............因为不确定才有了期待...................................\n * @^=^: ===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^^^===^\n */</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token namespace\">error<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span><span class=\"token punctuation\">,</span>fs<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Config</span> <span class=\"token punctuation\">{<!-- --></span>\n        query <span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n        filename <span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">pub</span> case_sensitive <span class=\"token punctuation\">:</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//切换区分是否忽略大小 写</span>\n    <span class=\"token punctuation\">}</span> \n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">run</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">:</span><span class=\"token class-name\">Config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">Error</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token comment\">// let contents = fs::read_to_string(config.filename)?;//注意这里有个问号传播错误</span>\n\n        <span class=\"token comment\">// for line in search(&amp;config.query, &amp;contents){<!-- --></span>\n        <span class=\"token comment\">//     println!(\"{}\",line);</span>\n        <span class=\"token comment\">// }</span>\n        <span class=\"token comment\">// Ok(())</span>\n\n        <span class=\"token comment\">// 改进功能，是否区分大小写</span>\n        <span class=\"token keyword\">let</span> contents <span class=\"token operator\">=</span> <span class=\"token namespace\">fs<span class=\"token punctuation\">::</span></span><span class=\"token function\">read_to_string</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> config<span class=\"token punctuation\">.</span>case_sensitive <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>config<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>contents<span class=\"token punctuation\">)</span><span class=\"token comment\">//区分大小写</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">search_case_insensitive</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>config<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>contents<span class=\"token punctuation\">)</span><span class=\"token comment\">//不区分大小写</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> results <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>env<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// env::var 函数会返回一个 Result 作为结果，只有环境变量被设置时，这个结果才会包含Ok 的变体，否则返回Err。</span>\n<span class=\"token comment\">// 我们使用了 Result 的 is_err 方法来检查结果是否为错误，如果 CASE_INSENSITIVE 被设置为了某个值那么就会返回假，也是不区分大小写搜索</span>\n<span class=\"token comment\">// 使用： env:CASE_INSENSITIVE=1   cargo run to poem.txt</span>\n<span class=\"token comment\">// std::env 模块中还有很多用于处理环境变量的 实用功能</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Config</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Config</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'static</span> <span class=\"token keyword\">str</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token keyword\">return</span>  <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你没有输入参数或者是参数不足够！！！\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n       <span class=\"token keyword\">let</span> case_sensitive<span class=\"token operator\">=</span><span class=\"token namespace\">env<span class=\"token punctuation\">::</span></span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CASE_INSENSITIVE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">is_err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Ok</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Config</span> <span class=\"token punctuation\">{<!-- --></span>\n            query<span class=\"token punctuation\">:</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            filename<span class=\"token punctuation\">:</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 编写 搜索函数</span>\n<span class=\"token comment\">// 使用  lines 方法逐行遍历文本 , 它会返回一个迭代器</span>\n<span class=\"token comment\">// contains 方法检查每一行是否包含查询字符串</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">search</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span> <span class=\"token punctuation\">,</span> contents<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 创建一个动态数组，将匹配的文本存储进去 </span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> results <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> contents<span class=\"token punctuation\">.</span><span class=\"token function\">lines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            results<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    results   <span class=\"token comment\">//返回匹配到的所有文本</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//用于大小写搜索 ： 思路是： 把大写转换为小写，就可以忽略大小写，来达到目的</span>\n<span class=\"token comment\">// 由上面结构体的 bool 字段控制 不分大小写调用这个搜索函数，分大小写就用上面那个 search 函数</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">search_case_insensitive</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span> <span class=\"token punctuation\">,</span> contents <span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">str</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">let</span> query<span class=\"token operator\">=</span>query<span class=\"token punctuation\">.</span><span class=\"token function\">to_lowercase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//把字符串转换为小写</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> results<span class=\"token operator\">=</span>    <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> contents<span class=\"token punctuation\">.</span><span class=\"token function\">lines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        results<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\nresults\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[cfg(test)]</span>\n<span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">tests</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">use</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">::</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n    <span class=\"token attribute attr-name\">#[test]</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">one_result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> <span class=\"token string\">\"duct\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//结果为这个</span>\n        <span class=\"token keyword\">let</span> contents <span class=\"token operator\">=</span> <span class=\"token string\">\"\\\n\n        Rust:\n        safe, fast, productive. \n        Pick three.\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>\n                <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"safe, fast, productive.\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> contents<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 为不区分大小写 的 search 函数编写一个会失败的测试</span>\n\n#<span class=\"token punctuation\">[</span><span class=\"token attribute attr-name\">#[cfg(test)]</span>\n<span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">tests</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">use</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">::</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token attribute attr-name\">#[test]</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">case_sensitive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> query<span class=\"token operator\">=</span><span class=\"token string\">\"duct\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> contents<span class=\"token operator\">=</span> <span class=\"token string\">\"\\\n        Rust:\n        safe, fast, productive.\n        Pick three.\n        Duct tape.\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>\n            <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"safe, fast, productive.\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> contents<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    \n    <span class=\"token punctuation\">}</span>\n<span class=\"token attribute attr-name\">#[test]</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">case_insensitive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">let</span> query<span class=\"token operator\">=</span><span class=\"token string\">\"rUsT\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> contents<span class=\"token operator\">=</span> <span class=\"token string\">\"\\\n    Rust:\n    safe, fast, productive.\n    Pick three.\n    Trust me.\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>\n        <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Rust:\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Trust me.\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">search_case_insensitive</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> contents<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_3217\"></a>函数式语言特性：迭代器与闭包</h1>\n<h2><a id=\"_3219\"></a>闭包</h2>\n<blockquote>\n<p>闭包：可以捕获其所在环境的匿名函数</p>\n<p>可以存入变量或者作为参数传递给其他函数的匿名函数</p>\n</blockquote>\n<p><strong>语法：</strong></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> bibaoa<span class=\"token operator\">=</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>参数<span class=\"token number\">1</span> ， 参数<span class=\"token number\">2</span> <span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">-&gt;</span> 返回类型 <span class=\"token punctuation\">{<!-- --></span>\n    函数体<span class=\"token punctuation\">;</span>\n    返回值\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//注意末尾有个冒号</span>\n多个参数之间用逗号分隔\n</code></pre>\n<pre><code class=\"prism language-rust\"> <span class=\"token keyword\">let</span> bp<span class=\"token operator\">=</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        num1<span class=\"token operator\">+</span>num2\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">bp</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//闭包调用</span>\n</code></pre>\n<blockquote>\n<p>闭包一般不需要指定参数和返回值的类型，因为编译器能够推断出大多数变量的类型</p>\n</blockquote>\n<p><strong>如果闭包只有一条语句，那么可以省略花括号：</strong></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> bp1<span class=\"token operator\">=</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>x<span class=\"token closure-punctuation punctuation\">|</span></span> x<span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//这里返回值也要加分号</span>\n    <span class=\"token function\">bp1</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>不能使用两种不同的类型调用同一个<strong>需要类型推导的闭包</strong></p>\n<pre><code class=\"prism language-rust\"> <span class=\"token keyword\">let</span> bp1<span class=\"token operator\">=</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>x<span class=\"token closure-punctuation punctuation\">|</span></span> x<span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">bp1</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">bp1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//报错，因为上面已经被推导成了整数类型</span>\n</code></pre>\n<h3><a id=\"_Fn_trait__3263\"></a>使用泛型参数和 Fn trait 来存储闭包</h3>\n<p>📖 将闭包存入结构体中，我必须要明确指定闭包的类型，因为结构体各个字段在定义时必须要确定</p>\n<p>📖 第一个闭包实例都有它自己的匿名类型，两个闭包拥有完全相同的签名，它们的类型也被认为是不一样的</p>\n<p><strong>所有闭包都至少实现了 Fn 、 FnMut 、 FnOnce 中的一个 trait。</strong></p>\n<p>(函数也可以实现这三个 Fn trait)</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Cacher</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> \n<span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token comment\">//Fn(i32) -&gt; i32 这个添加代表了闭包参数和闭包返回值的类型 </span>\n    calculation<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//where 约束了这个 T 代表一个使用 Fn trait 的闭包</span>\n</code></pre>\n<p>示例：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Cacher</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> \n<span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">{<!-- --></span>\n    calculation<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// p 364 示例</span>\n<span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token class-name\">Cacher</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>calculation<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Cacher</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Cacher</span> <span class=\"token punctuation\">{<!-- --></span>\n            calculation<span class=\"token punctuation\">,</span>\n            value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">None</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">value</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">match</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> v<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">None</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>calculation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                v\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_3317\"></a>使用闭包捕获上下文环境</h4>\n<p><mark>闭包可以使用定义在同一个作用域中的变量 x</mark>(这个功能是函数所没有的)</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> equal_to_x<span class=\"token operator\">=</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>z<span class=\"token closure-punctuation punctuation\">|</span></span> z <span class=\"token operator\">==</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">//x 不是它的参数，闭包也可以使用定义在同一个作用域中的变量x</span>\n    <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">assert!</span><span class=\"token punctuation\">(</span><span class=\"token function\">equal_to_x</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这一特性只能用于闭包。</p>\n<p>📚：闭包可以通过三种方式从它们环境中捕获值: <strong>获取所有权、可变借用、不可变借用</strong></p>\n<blockquote>\n<p><strong>FnOnce</strong> 获得所有权，闭包不能多次获取并消耗掉同一变量的所有权，所以它只能被调用一次。</p>\n<p><strong>FnMut</strong> 可变地借用值</p>\n<p><strong>Fn</strong> 可以从环境不可变的借用值</p>\n</blockquote>\n<p>当我们创建闭包的时候，rust 会基于闭包从环境中使用值的方式来自动推导它需要使用的 trait，<mark>所有闭包都自动实现了 FnOnce</mark></p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>如果希望强制获取环境中的所有权，可以在参数列表前添加关键字 move ；</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 使用 move</span>\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> equal_to_x <span class=\"token operator\">=</span> <span class=\"token keyword\">move</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>z<span class=\"token closure-punctuation punctuation\">|</span></span> z <span class=\"token operator\">==</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//错误因为使用了move x 的所有权和值已经被移动到闭包中</span>\n    <span class=\"token keyword\">let</span> y<span class=\"token operator\">=</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">equal_to_x</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这里使用动态数组是因为：<strong>整形只会被复制而不会被移动！！！</strong></p>\n<blockquote>\n<p>大部分情况下，需要指定某一个 Fn 系列的 trait 时，可以先尝试使用 Fn trait, 编译器会根据闭包体中的具体情况来告诉你是否需要 FnMut 或 FnOnce。</p>\n</blockquote>\n<h4><a id=\"_3359\"></a>迭代器处理元素序列</h4>\n<blockquote>\n<p>在rust 中迭代器是惰性的，创建迭代器后，除非你主动调用方法来消耗并使用迭代器，否则它们不会产生任何的实际效果。</p>\n</blockquote>\n<pre><code class=\"prism language-rust\">  <span class=\"token keyword\">let</span> v1 <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> vi_iter<span class=\"token operator\">=</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> val <span class=\"token keyword\">in</span> vi_iter<span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"Itertor_triat__next__3373\"></a>Itertor triat 和 next 方法</h4>\n<p><mark>所有的迭代器都实现了标准库中的 Iterator triat。</mark></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">pub</span> tracit <span class=\"token class-name\">Iterator</span> <span class=\"token punctuation\">{<!-- --></span>\n    \n    <span class=\"token keyword\">type</span> <span class=\"token type-definition class-name\">Item</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">next</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Item</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//为了实现它我们必须要定义一个具体的 Item 类型，Item 类型将会是迭代器返回元素的类型。</span>\n<span class=\"token comment\">//它要求实现者手动实现一个方法：next 方法，它会在每次被调用时返回一个包裹在 Some 中的迭代器元素，并在迭代结束时返回 None</span>\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token attribute attr-name\">#[test]</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">iterator_demonstration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> v1 <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> v1_iter <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>v1_iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>v1_iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>v1_iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>v1_iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这些调用 next 的方法也被称为 <strong>消耗适配器</strong></p>\n<pre><code class=\"prism language-rust\"><span class=\"token attribute attr-name\">#[test]</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">iterator_sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> v1 <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> v1_iter <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> total<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span> <span class=\"token operator\">=</span> v1_iter<span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//上面在调用 sum 的过程中获取了 v1_iter 的所有权,因此这个迭代器无法被后面的代码继续使用</span>\n</code></pre>\n<h4><a id=\"_3415\"></a>生成其他迭代器的方法</h4>\n<blockquote>\n<p>迭代器适配器：可以将已有的迭代器转换成其他不同类型的迭代器。</p>\n</blockquote>\n<pre><code class=\"prism language-rust\">    <span class=\"token keyword\">let</span> v1<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> v2<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span>_<span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>x<span class=\"token closure-punctuation punctuation\">|</span></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//Vec&lt;_&gt; 这个是代表 推导类型</span>\n    <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">,</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>collect 方法它会消耗迭代器并将结果集收集到某种集合数据类型中。</strong></p>\n<h4><a id=\"_3428\"></a>使用闭包捕获环境</h4>\n<p>迭代器 filter 方法会接收一个闭包作为参数，这个闭包会在遍历迭代器中的元素时返回一个布尔值，而每次遍历的元素在闭包返回 true 时才会被包含在 filter 生成的新迭代器中。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 使用闭包捕获环境</span>\n<span class=\"token attribute attr-name\">#[derive(PartialEq, Debug)]</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Shoe</span> <span class=\"token punctuation\">{<!-- --></span>\n    size<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span>\n    style<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">shoes_in_my_size</span><span class=\"token punctuation\">(</span>shoes<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Shoe</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> shoe_size<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Shoe</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    shoes<span class=\"token punctuation\">.</span><span class=\"token function\">into_iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>s<span class=\"token closure-punctuation punctuation\">|</span></span> s<span class=\"token punctuation\">.</span>size <span class=\"token operator\">==</span> shoe_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[test]</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">filters_by_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> shoes <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span>\n        <span class=\"token class-name\">Shoe</span> <span class=\"token punctuation\">{<!-- --></span>\n            size<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n            style<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sneaker\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Shoe</span> <span class=\"token punctuation\">{<!-- --></span>\n            size<span class=\"token punctuation\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span>\n            style<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sandal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Shoe</span> <span class=\"token punctuation\">{<!-- --></span>\n            size<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n            style<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"boot\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> in_my_size <span class=\"token operator\">=</span> <span class=\"token function\">shoes_in_my_size</span><span class=\"token punctuation\">(</span>shoes<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>\n        in_my_size<span class=\"token punctuation\">,</span>\n        <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span>\n            <span class=\"token class-name\">Shoe</span> <span class=\"token punctuation\">{<!-- --></span>\n                size<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n                style<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sneaker\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">Shoe</span> <span class=\"token punctuation\">{<!-- --></span>\n                size<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n                style<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"boot\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_Iterator_trait__3481\"></a>使用 Iterator trait 来创建自定义迭代器</h4>\n<p><mark>需要提供一个 next 方法的定义就可以实现 Itreator triat</mark></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Counter</span> <span class=\"token punctuation\">{<!-- --></span>\n    count<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Counter</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Counter</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Counter</span> <span class=\"token punctuation\">{<!-- --></span> count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Iterator</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">Counter</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//将迭代器的关联类型指定了 u32</span>\n    <span class=\"token keyword\">type</span> <span class=\"token type-definition class-name\">Item</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">next</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Item</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">None</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[test]</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">calling_next_directly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> counter <span class=\"token operator\">=</span> <span class=\"token class-name\">Counter</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>循环和迭代器的性能：</p>\n<p>迭代器是 rust 语言中的一种零开销抽象。</p>\n<p>使用这些抽象时，不会引入额外的运行时开销。</p>\n</blockquote>\n<h2><a id=\"Cargo__cratesio_3531\"></a>Cargo 及 crates.io</h2>\n<p>常用配置两种：</p>\n<ul><li>执行 cargo build 时使用 dev 配置， 以及执行 cargo build - - release 时使用的 release 配置。</li><li><mark>dev</mark>配置中的默认选项适合在开发过程中使用</li><li><mark>release</mark>配置中的默认选项则适合在正式发布时使用</li></ul>\n<p><mark><strong>编写有用的文档注释</strong></mark> : 三斜线 / / /</p>\n<p>并且可以 <mark>markdown</mark> 语法来格式化内容。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">/// 将传入的数字加 1 </span>\n<span class=\"token comment\">/// </span>\n<span class=\"token comment\">/// # Examples</span>\n<span class=\"token comment\">/// </span>\n<span class=\"token comment\">/// ```rust</span>\n<span class=\"token comment\">/// let arg=5;</span>\n<span class=\"token comment\">/// let answer=my_crate::add_one(arg);</span>\n<span class=\"token comment\">/// </span>\n<span class=\"token comment\">/// assert_eq!(6,answer);</span>\n<span class=\"token comment\">/// ```</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add_one</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">{<!-- --></span>\n    x<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文档注释!!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<blockquote>\n<p>运行 <strong>cargo doc</strong> 命令来生成文档 会生成 Html 文件</p>\n<p>生成在 target/doc 路径下</p>\n</blockquote>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-ftkKrX4m-1651467632366)(E:\\sysy\\Pictures\\哔哩哔哩动画\\image-20220408181001243.png)]</p>\n<blockquote>\n<p>还有一种文档注释： // !</p>\n<p>它可以 为包裹当前注释的外层条目添加文档，这种注释常用在包的根文件</p>\n</blockquote>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">//! # my crate</span>\n<span class=\"token comment\">//! my_crate 是一系列工具的集合</span>\n<span class=\"token comment\">//! ..</span>\n<span class=\"token comment\">//! ....</span>\n<span class=\"token comment\">/// 将传入的数字加 1 </span>\n<span class=\"token comment\">/// </span>\n<span class=\"token comment\">/// # Examples</span>\n<span class=\"token comment\">/// </span>\n<span class=\"token comment\">/// ```rust</span>\n<span class=\"token comment\">/// let arg=5;</span>\n<span class=\"token comment\">/// let answer=my_crate::add_one(arg);</span>\n<span class=\"token comment\">/// </span>\n<span class=\"token comment\">/// assert_eq!(6,answer);</span>\n<span class=\"token comment\">/// ``</span>\n</code></pre>\n<h1><a id=\"_3595\"></a>智能指针</h1>\n<blockquote>\n<p>智能指针起源于 C++</p>\n<p>引用是用 &amp; 符号表示，会借用它所指向的值。</p>\n<blockquote>\n<p>智能指针是一些数据结构，它们的行为类似于指针但拥有额外的元数据和附和功能</p>\n</blockquote>\n<p>引用和智能指针之间的区别：引用是只借用数据的指针；而大多数智能指针本身就拥有它们指向的数据。</p>\n</blockquote>\n<div>\n<p> <strong>使用结构体来实现智能指针，它们会实现 Deref 与 Drop 这两个 trait：</strong> </p>\n<p> 1.Deref trait 使得智能指针结构体的实例拥有与引用一致一行为。 </p>\n<p> 2.Drop trait 是上自定义智能指针离开作用域时运行的。 </p>\n</div>\n<h5><a id=\"_3620\"></a>常见的智能指针</h5>\n<ol><li><strong>Box</strong> :在 heap 内存上分配值</li><li><strong>Rc</strong> :启用多重所有权的引用计数类型</li><li><strong>Ref 和 RefMut</strong> , 通过 RefCell 访问： 在运行时而不是编译时强制借用规则的类型</li></ol>\n<p><mark>在编译的时候 ， rust 需要知道一个类型所占的空间大小。</mark></p>\n<p>递归类型的大小无法在编译时确定。</p>\n<blockquote>\n<p>Cons List：链接列表</p>\n<p>（函数式编程语言常见）</p>\n<p>链接列表的每一项都包含了两个元素：当前项的值及下一项。</p>\n<p>链接列表的最后一项是一个 Nil （不包含下一项的特殊值，来做列表的终止标记，Nil 并不是一个无效或缺失的值）</p>\n</blockquote>\n<p><mark>大部分情况下 <strong>Vec</strong> 都是一个好的选择，链接列表它并不常用</mark></p>\n<pre><code class=\"prism language-rust\"> <span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">List</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Nil</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">use</span> <span class=\"token keyword\">crate</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">::</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Nil</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    \n<span class=\"token keyword\">let</span> b<span class=\"token operator\">=</span><span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> list<span class=\"token operator\">=</span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div>\n  通过 Deref trait 将智能指针视作常规引用 \n <br/> 实现 Deref trait 使我们可以自定义解引用运算符 * 的行为 \n <br/>\n</div>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> x<span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> y<span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 数值和引用是两种不同的类型</span>\n<span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//如果 y 不加解引用就会报错，因为上面那句话的原因</span>\n</code></pre>\n<p>📚：把 Box 当成引用来操作</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> x<span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// let y= &amp;x;</span>\n<span class=\"token keyword\">let</span> y<span class=\"token operator\">=</span><span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 数值和引用是两种不同的类型</span>\n<span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>定义我们自己的智能指针：</p>\n<pre><code class=\"prism language-rust\"> <span class=\"token keyword\">use</span> <span class=\"token keyword\">crate</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">::</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Nil</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">MyBox</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token class-name\">MyBox</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">MyBox</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">MyBox</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n \n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    \n    <span class=\"token keyword\">let</span> x<span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// let y= &amp;x;</span>\n    <span class=\"token keyword\">let</span> y<span class=\"token operator\">=</span><span class=\"token class-name\">MyBox</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 数值和引用是两种不同的类型</span>\n    <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>问题：上面代码报错原因：不知道如何去解引用 MyBox</p>\n<p>解决办法：<mark>实现 Deref trait</mark></p>\n</blockquote>\n<pre><code class=\"prism language-rust\"> <span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>ops<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Deref</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token class-name\">Deref</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">MyBox</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">type</span> <span class=\"token type-definition class-name\">Target</span><span class=\"token operator\">=</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">deref</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span><span class=\"token operator\">&amp;</span><span class=\"token class-name\">T</span>  <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\n<span class=\"token comment\">//*y 会被隐匿地展开为： *(y.deref())</span>\n</code></pre>\n<h5><a id=\"_3731\"></a>函数和方法的隐式解引用转换</h5>\n<blockquote>\n<p>解引用转换：当某个类型 T 实现了 Deref trait 时，它能够将 T 的引用转换为 T 经过 Deref 操作后生成的引用。我们将某个特定类型的值引用作为参数传递给函数或方法，但传入的类型与参数类型不一致时，<mark>解引用转换就会自动发生</mark></p>\n</blockquote>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">let</span> m<span class=\"token operator\">=</span><span class=\"token class-name\">MyBox</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Rust\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 如果没有解引用转换功能，上面调用的代码就要这样写</span>\n<span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Rust\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n    \n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">hello</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_3750\"></a>解引用转换与可变性</h4>\n<blockquote>\n<ol><li>使用 Deref trait 能够重载不可变引用的 * 运算符。</li><li>使用 DerefMut trait 能够重载可变引用的 * 运算符</li></ol>\n</blockquote>\n<p>满点下面3种类型情形时执行解引用转换：</p>\n<ul><li>当 T：Deref&lt;Target=U&gt;时，允许 &amp;T 转换为 &amp;U</li><li>当 T：DerefMut&lt;Target=U&gt;时，允许&amp;mut T 转换为 &amp;mut U</li><li>当 T：Deref&lt;Target=U&gt;时，允许&amp;mut T 转换为 &amp;U</li></ul>\n<p><mark>rust 会将一个可变引用自动地转换为一个不可变引用。但这个过程不会逆转，<strong>不可变引用永远不可能转换为可变引用</strong>。</mark></p>\n<h3><a id=\"Drop_trait__3765\"></a>Drop trait （目前理解析构函数）</h3>\n<p>Drop trait 要 求实现一个接收 self 可变引用作为参数的 drop 函数。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">CustomSmartPointer</span><span class=\"token punctuation\">{<!-- --></span>\n     data<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">impl</span> <span class=\"token class-name\">Drop</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">CustomSmartPointer</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">drop</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dropping CustomSmartPointer with data '{}'\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    \n<span class=\"token keyword\">let</span> c<span class=\"token operator\">=</span><span class=\"token class-name\">CustomSmartPointer</span><span class=\"token punctuation\">{<!-- --></span>\n    data <span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my stuff\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> d<span class=\"token operator\">=</span><span class=\"token class-name\">CustomSmartPointer</span><span class=\"token punctuation\">{<!-- --></span>\n    data<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"other stuff\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CustomSmartPointres created.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token class-name\">CustomSmartPointres</span> created<span class=\"token punctuation\">.</span>\n<span class=\"token class-name\">Dropping</span> <span class=\"token class-name\">CustomSmartPointer</span> with data <span class=\"token lifetime-annotation symbol\">'other</span> stuff'\n<span class=\"token class-name\">Dropping</span> <span class=\"token class-name\">CustomSmartPointer</span> with data <span class=\"token lifetime-annotation symbol\">'my</span> stuff'\n</code></pre>\n<p><mark>变量的丢弃顺序与创建顺序相反。</mark></p>\n<h4><a id=\"_stdmemdrop__3804\"></a>使用 std::mem::drop 提前丢弃值</h4>\n<p>rust 并不允许我们手动调用 Drop trait 的 drop 方法；但可以调用标准库中的 std::meme::drop 函数来提前清理某个值。</p>\n<p><mark>不允许我们手动调用 drop 函数（析构函数）</mark></p>\n<p>要使用就使用 std::mem::drop 函数</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">CustomSmartPointer</span><span class=\"token punctuation\">{<!-- --></span>\n     data<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">impl</span> <span class=\"token class-name\">Drop</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">CustomSmartPointer</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">drop</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dropping CustomSmartPointer with data '{}'\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    \n<span class=\"token keyword\">let</span> c<span class=\"token operator\">=</span><span class=\"token class-name\">CustomSmartPointer</span><span class=\"token punctuation\">{<!-- --></span>\n    data <span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my stuff\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> d<span class=\"token operator\">=</span><span class=\"token class-name\">CustomSmartPointer</span><span class=\"token punctuation\">{<!-- --></span>\n    data<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"other stuff\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">drop</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CustomSmartPointres created.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>注意区别：🔖</p>\n<pre><code class=\"prism language-rust\">c<span class=\"token punctuation\">.</span><span class=\"token function\">drop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//调用的是 drop 函数</span>\n<span class=\"token function\">drop</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//可以调用的是 std::mem:drop 函数</span>\n</code></pre>\n<h3><a id=\"_RcT_3847\"></a>基于引用计数的智能指针 Rc</h3>\n<blockquote>\n<p>Rc 的类型支持多重所有权， Rc 是 Reference countiing （引用计数）的缩写</p>\n<p>Rc 只能被用于单线程场景中</p>\n</blockquote>\n<pre><code class=\"prism language-rust\"> <span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">List</span><span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n     <span class=\"token class-name\">Nil</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">use</span> <span class=\"token keyword\">crate</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">::</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Nil</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    \n    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> b<span class=\"token operator\">=</span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> c<span class=\"token operator\">=</span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//报错原因：Box&lt;T&gt; 无法让多个列表同时持有另一个列表的所有权</span>\n</code></pre>\n<p>🔖：解决方法：将 List 中 Box 改为 Rc</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">List</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Rc</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Nil</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//引入作用域</span>\n<span class=\"token keyword\">use</span> <span class=\"token keyword\">crate</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Nil</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token keyword\">crate</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>rc<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    \n     <span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> b<span class=\"token operator\">=</span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> c<span class=\"token operator\">=</span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>每次调用 Rc::clone 都会使用引用计数增加，这里的 Rc::clone 不会执行数据的深度拷贝操作。</p>\n</blockquote>\n<h5><a id=\"_RcT__3889\"></a>克隆 Rc 会增加引用计数</h5>\n<pre><code class=\"prism language-rust\">\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    \n    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count after creating a= {}\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">strong_count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count after creating b = {}\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">strong_count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count after creating c = {}\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">strong_count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count after c goes out of scope = {}\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">strong_count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\n<span class=\"token comment\">/*\n输出结果：\ncount after creating a= 1\ncount after creating b = 2\ncount after creating c = 3\ncount after c goes out of scope = 2\n*/</span>\n</code></pre>\n<p><mark>Rc::strong_count 函数会读取引用计数并将它打印出来</mark></p>\n<blockquote>\n<ul><li> <p>strong_count 强引用计数</p> </li><li> <p>weak_count 弱引用计数（避免循环引用）</p> <p>Rc 通过不可变引用可以让你在程序的不同部分之间共享只读数据；但不可以让你持有多个可变引用，这样会违反借用规则</p> </li></ul>\n</blockquote>\n<h4><a id=\"RefCellT__3924\"></a>RefCell 和内部可变性模式</h4>\n<blockquote>\n<p>内部可变性是 rust 的设计模式之一。它允许你在只持有不可变引用的前提下对数据进行修改；内部可变性模式在它的数据结构中使用了 unsafe （不安全）代码来绕过 rust 正常的可变性和借用规则</p>\n</blockquote>\n<p>📚：回忆一下借用规则：</p>\n<ul><li>在任何给定的时间里，你要么只能拥有一个可变引用，要么只能拥有任意数量的不可变引用</li><li>引用总是有效的</li></ul>\n<p>使用 RefCell 的代码， rust 只会在运行时检查这些借用规则，并在出现违反借用规则的情况下触发 panic 来提前中止程序。</p>\n<p><strong>Rust 将编译期检查作为默认行为。</strong></p>\n<p>Rc 和 RefCell 只能被用于单线程场景中。</p>\n<h4><a id=\"_3939\"></a>三者选择依据</h4>\n<ul><li><strong>Rc 允许一份数据有多个所有者，而 Box 和 RefCell 都只能有一个所有者</strong></li><li><strong>Box 允许在编译时检查的可变或不可变借用， Rc 仅允许编译时检查的不可变借用，RefCell 允许运行时检查的可变或不可变借用</strong></li><li><strong>由于 RefCell 允许我们在运行时检查可变引用，所以即便 RefCell 本身是不可变的，我们仍然能够更改其中存储的值</strong></li></ul>\n<h4><a id=\"_3945\"></a>内部可变性：可变地借用一个不可变的值</h4>\n<blockquote>\n<p>借用规则的推论：你无法可变地借用一个不可变的值。</p>\n</blockquote>\n<ul><li><strong>borrow_mut 方法来获取可变引用</strong></li><li><strong>borrow 方法获取不可变引用</strong></li></ul>\n<pre><code class=\"prism language-rust\"> <span class=\"token keyword\">impl</span> <span class=\"token class-name\">Messenger</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">MockMessenger</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">send</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span> <span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token comment\">//两个可变引用 </span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> one_brrow <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>sent_messages<span class=\"token punctuation\">.</span><span class=\"token function\">borrow_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> two_brrow <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>sent_messages<span class=\"token punctuation\">.</span><span class=\"token function\">borrow_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        one_brrow<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stirng</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        two_brrow<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stirng</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\n<span class=\"token class-name\">RefCell</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> 在编译时可编译通过，但会在运行时触发 <span class=\"token class-name\">Panic</span>\n</code></pre>\n<h4><a id=\"_RcT__RefCellT__3971\"></a>将 Rc 和 RefCell 结合使用来实现一个拥有多个所有权的可变数据</h4>\n<pre><code class=\"prism language-rust\"><span class=\"token attribute attr-name\">#[derive(Debug)]</span>\n<span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">List</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rc</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">RefCell</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Rc</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Nil</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">use</span> <span class=\"token keyword\">crate</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">::</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Nil</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>rc<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>cell<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">RefCell</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RefCell</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span> <span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">let</span> b<span class=\"token operator\">=</span> <span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RefCell</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> c<span class=\"token operator\">=</span> <span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RefCell</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">*</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">borrow_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a after = {:?}\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b after = {:?}\"</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c after = {:?}\"</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\n<span class=\"token comment\">/*\n输出结果：\na after = Cons(RefCell { value: 15 }, Nil)\nb after = Cons(RefCell { value: 6 }, Cons(RefCell { value: 15 }, Nil))\nc after = Cons(RefCell { value: 10 }, Cons(RefCell { value: 15 }, Nil)) \n*/</span>\n\n</code></pre>\n<pre><code>#### 循环引用会造成内存泄漏\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>rc<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>cell<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">RefCell</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token keyword\">crate</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">::</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Nil</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// 创建循环引用</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">RefCell</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a initial rc coutn ={}\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">strong_count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a next item = {:?}\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">tail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RefCell</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a rc count after b creation ={}\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">strong_count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">tail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token operator\">*</span>link<span class=\"token punctuation\">.</span><span class=\"token function\">borrow_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b rc coutn after changing a = {}\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">strong_count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a rc count after changing a = {}\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">strong_count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 取消下面这行，就会看到循环引用造成栈溢出</span>\n    <span class=\"token comment\">// println!(\"a next item ={:?} \", a.tail());</span>\n\n\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token attribute attr-name\">#[derive(Debug)]</span>\n<span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">List</span><span class=\"token punctuation\">{<!-- --></span>\n\n <span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RefCell</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Rc</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n <span class=\"token class-name\">Nil</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">List</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">tail</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span><span class=\"token class-name\">RefCell</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Rc</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token keyword\">match</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">Nil</span><span class=\"token operator\">=&gt;</span> <span class=\"token class-name\">None</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h4><a id=\"_WeakT__RcT__4068\"></a>使用 Weak 代替 Rc 来避免循环引用</h4>\n<blockquote>\n<p>强引用可以被我们用来共享一个 Rc 实例的所有权，而弱引用不会表达所有权关系，因此弱引用不会造成循环引用</p>\n<p>在使用 Weak 指向的值之前确保它依然存在，可以调用 Weak 实例的 upgrade 方法来完成验证；这个方法返回的 Option&lt;Rc&gt;</p>\n</blockquote>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>rc<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Weak</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>cell<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">RefCell</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token attribute attr-name\">#[derive(Debug)]</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Node</span><span class=\"token punctuation\">{<!-- --></span>\n    value<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span>\n    parent <span class=\"token punctuation\">:</span> <span class=\"token class-name\">RefCell</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Weak</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token punctuation\">:</span> <span class=\"token class-name\">RefCell</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Rc</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n\n <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  \n    <span class=\"token keyword\">let</span> leaf <span class=\"token operator\">=</span> <span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">{<!-- --></span>\n        value<span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n        parent<span class=\"token punctuation\">:</span> <span class=\"token class-name\">RefCell</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Weak</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        children<span class=\"token punctuation\">:</span><span class=\"token class-name\">RefCell</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"leaf parent ={:?}\"</span><span class=\"token punctuation\">,</span>leaf<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span><span class=\"token function\">borrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">upgrade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> branch <span class=\"token operator\">=</span> <span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">{<!-- --></span>\n        value<span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n        parent<span class=\"token punctuation\">:</span> <span class=\"token class-name\">RefCell</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Weak</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        children<span class=\"token punctuation\">:</span> <span class=\"token class-name\">RefCell</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>leaf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">*</span>leaf<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span><span class=\"token function\">borrow_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">downgrade</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>branch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"leaf parent = {:?}\"</span><span class=\"token punctuation\">,</span>leaf<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span><span class=\"token function\">borrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">upgrade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_strong_count__weak_count__4109\"></a>显示 strong_count 和 weak_count 计数值的变化</h4>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>rc<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Weak</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>cell<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">RefCell</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token attribute attr-name\">#[derive(Debug)]</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Node</span><span class=\"token punctuation\">{<!-- --></span>\n    value<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span>\n    parent <span class=\"token punctuation\">:</span> <span class=\"token class-name\">RefCell</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Weak</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token punctuation\">:</span> <span class=\"token class-name\">RefCell</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Rc</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n\n <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  \n    <span class=\"token keyword\">let</span> leaf <span class=\"token operator\">=</span> <span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">{<!-- --></span>\n        value<span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n        parent<span class=\"token punctuation\">:</span> <span class=\"token class-name\">RefCell</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Weak</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        children<span class=\"token punctuation\">:</span><span class=\"token class-name\">RefCell</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"leaf strong ={} , weak = {}\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">strong_count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>leaf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">weak_count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>leaf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"leaf parent ={:?}\"</span><span class=\"token punctuation\">,</span>leaf<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span><span class=\"token function\">borrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">upgrade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> branch <span class=\"token operator\">=</span> <span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">{<!-- --></span>\n            value<span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n            parent<span class=\"token punctuation\">:</span> <span class=\"token class-name\">RefCell</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Weak</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            children<span class=\"token punctuation\">:</span> <span class=\"token class-name\">RefCell</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>leaf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n        <span class=\"token operator\">*</span>leaf<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span><span class=\"token function\">borrow_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">downgrade</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>branch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"branch strong ={}, weak = {}\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">strong_count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>branch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">weak_count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>branch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"leaf strong = {} , weak = {}\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">strong_count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>leaf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">weak_count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>leaf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"leaf parent = {:?}\"</span><span class=\"token punctuation\">,</span>leaf<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span><span class=\"token function\">borrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">upgrade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"leaf strong = {} , weak = {}\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">strong_count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>leaf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">weak_count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>leaf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*\n输出结果：\nleaf strong =1 , weak = 0\nleaf parent =None\nbranch strong =1, weak = 1\nleaf strong = 2 , weak = 0\nleaf parent = None\nleaf strong = 1 , weak = 0\n*/</span>\n</code></pre>\n<p>📚 <strong>Rc 和 RefCell 都只能用于单线程中。</strong></p>\n<h2><a id=\"_4188\"></a>无畏并发</h2>\n<blockquote>\n<p>1：1 模型：意味着一个操作系统线程对应一个语言线程</p>\n<p>M：N 模型：M个绿色线程对应着N个系统线程，M与N不必相等（绿色线程由程序语言提供的线程叫做绿色线程）</p>\n</blockquote>\n<p><mark>rust 标准库只提供了 1：1 线程模型的实现</mark></p>\n<h4><a id=\"_spawn__4198\"></a>使用 spawn 创建新线程</h4>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">/*\nthread::spawn 函数来创建线程，它接收一个闭包作为参数，这个闭包会包含我们想要在新线程中运行的代码。\n*/</span>\n <span class=\"token comment\">// 创建线程引入模块</span>\n    <span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>thread<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>time<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">let</span> handle<span class=\"token operator\">=</span> <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span> <span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">10</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程开始运行...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_millis</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//线程睡眠时间</span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i = {}\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>线程执行顺序是由操作系统线程调试策略决定的。</strong></p>\n<h4><a id=\"_join__4219\"></a>使用 join 句柄等待所有线程结束</h4>\n<blockquote>\n<p>我们通过将 thread::spawn 返回的结果保存在一个变量中，它的返回值是一个自持有所有权的 JoinHandle ,调用它的 join 方法可以阻塞当前线程直到对应的新线程运行结束。调用 join 方法来保证新线程能够在 main 函数退出前执行完毕。</p>\n</blockquote>\n<pre><code class=\"prism language-rust\">   <span class=\"token keyword\">let</span> handle<span class=\"token operator\">=</span> <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span> <span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token punctuation\">...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nhandle<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//阻塞线程</span>\n<span class=\"token comment\">//要在什么位置阻塞就放在什么位置 </span>\n</code></pre>\n<h4><a id=\"_move__4232\"></a>在线程中使用 move 闭包</h4>\n<blockquote>\n<p>move 闭包常常用来与 thread::spawn 函数配合使用，它允许你在某个线程中使用来自另一个线程的数据。</p>\n<p>在闭包参数列表前面添加 move 来强制从外部环境中捕获值的所有权。</p>\n</blockquote>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> handle<span class=\"token operator\">=</span><span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v {:?}\"</span><span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    handle<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>问题：在推导出如何捕获 v 后决定让闭包借用 v ，因为打印只需要使用 v 的引用，但是 rust 不知道新线程会运行多久，所以无法确定 v 的引用是否一直有效？</p>\n<p>eg:</p>\n<pre><code class=\"prism language-rust\">  <span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> handle<span class=\"token operator\">=</span><span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v {:?}\"</span><span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">drop</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//在这里已经清理了 v 但新线程却还需要使用</span>\n    handle<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>使用 move 解决：</p>\n<pre><code class=\"prism language-rust\">  <span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> handle<span class=\"token operator\">=</span><span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">move</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v {:?}\"</span><span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    handle<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//move 会强制闭包获得它所需值的所有权</span>\n</code></pre>\n<p><strong>move 会强制闭包获得它所需值的所有权</strong></p>\n<p>我们把 v 的所有权移动到了闭包中，因此我们不能在外部继续操作 v 了。</p>\n<h4><a id=\"_4274\"></a>使用消息传递在线程间转移数据</h4>\n<blockquote>\n<p>不要通过共享内存来通信，而是通过通信来共享内存。</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>rust 在标准库中实现一个名为 通道（channel ） 的编程概念，它可以被用来实现基于消息传递的并发机制。</p>\n<p>通道由<mark>发送者</mark>和<mark>接收者</mark>两个部分组成。</p>\n<p>任何一端被丢弃，相应的通道就被关闭了。</p>\n</blockquote>\n</blockquote>\n<pre><code class=\"prism language-rust\">      <span class=\"token comment\">// 通道 </span>\n        <span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>sync<span class=\"token punctuation\">::</span></span>mpsc<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>tz<span class=\"token punctuation\">,</span>rx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token namespace\">mpsc<span class=\"token punctuation\">::</span></span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">move</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">let</span> val<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello rx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            tz<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">//接收发送过来的值</span>\n        <span class=\"token keyword\">let</span> reveived <span class=\"token operator\">=</span> rx<span class=\"token punctuation\">.</span><span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Got: {}\"</span><span class=\"token punctuation\">,</span>reveived<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div>\n<div>\n<p>导入道道库 use std::sync::mpsc</p>\n<p>mpsc::channel 函数创建了一个新的通道。</p>\n<p> mpsc 是英文 multiple producer, single consumer （多个生产者，单个消费者）的缩写</p>\n<hr/>\n<div>\n<p> <strong>通道可以拥有多个生产内容的发送端，但只能拥有一个消耗内容的接收端</strong></p>\n<p> 函数 mpsc::channel 会返回一个含有发送端和接收端的元组。 </p>\n</div>\n</div>\n</div>\n<p> 新线程必须拥有通道发送端的所有权才能通过通道来发送消息 </p>\n<p> send() 方法来接收我们想要发送的值，它会返回 Result</p>\n<p><mark>接收方法：recv 和 try_recv</mark></p>\n<div>\n<p> recv() 方法会阻塞主线程的执行直到有值被传入通道； </p>\n<p> try_recv () 方法不会阻塞线程，它会立即返回 Result</p>\n</div>\n<h4><a id=\"__4336\"></a>通道和 所有权转移</h4>\n<pre><code class=\"prism language-rust\">  <span class=\"token comment\">// 通道 </span>\n        <span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>sync<span class=\"token punctuation\">::</span></span>mpsc<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>tz<span class=\"token punctuation\">,</span>rx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token namespace\">mpsc<span class=\"token punctuation\">::</span></span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">move</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">let</span> val<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello rx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            tz<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"val is {}\"</span><span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//错误，val 已经送了，无法再使用它</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">//接收发送过来的值</span>\n        <span class=\"token keyword\">let</span> reveived <span class=\"token operator\">=</span> rx<span class=\"token punctuation\">.</span><span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Got: {}\"</span><span class=\"token punctuation\">,</span>reveived<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<h4><a id=\"_4358\"></a>发送多个值并观察接收者的等待过程</h4>\n<pre><code class=\"prism language-rust\">    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">mpsc<span class=\"token punctuation\">::</span></span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">move</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span>  <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> vals<span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"from\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"thread\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> val <span class=\"token keyword\">in</span> vals <span class=\"token punctuation\">{<!-- --></span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_secs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//等待1秒再发送</span>\n        <span class=\"token punctuation\">}</span>\n\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 循环接收发送过来的信息</span>\n        <span class=\"token comment\">//   let mut rs=  y.recv().unwrap(); //只接收一个就结束了</span>\n        <span class=\"token comment\">//   println!(\"Got : {}\", rs);//这个也能达到全部接收,就是麻烦</span>\n        <span class=\"token comment\">//    rs=  y.recv().unwrap();</span>\n        <span class=\"token comment\">//   println!(\"Got : {}\", rs);</span>\n        <span class=\"token comment\">//   rs=  y.recv().unwrap();</span>\n        <span class=\"token comment\">//   println!(\"Got : {}\", rs);</span>\n        <span class=\"token comment\">//   rs=  y.recv().unwrap();</span>\n        <span class=\"token comment\">//   println!(\"Got : {}\", rs);</span>\n        <span class=\"token keyword\">for</span> received <span class=\"token keyword\">in</span> y <span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//如果前面已经被接收了一些信息,那么这个循环接收的就是从前面已经接收了的开始</span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Got : {}\"</span><span class=\"token punctuation\">,</span>received<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\n输出：\n<span class=\"token class-name\">Got</span> <span class=\"token punctuation\">:</span> hi\n<span class=\"token class-name\">Got</span> <span class=\"token punctuation\">:</span> from\n<span class=\"token class-name\">Got</span> <span class=\"token punctuation\">:</span> the\n<span class=\"token class-name\">Got</span> <span class=\"token punctuation\">:</span> thread\n</code></pre>\n<p>上面代码中 y 视作迭代器，隐式的调用的是 revc 函数；</p>\n<h4><a id=\"_4400\"></a>通过克隆发送者创建多个生产者</h4>\n<pre><code class=\"prism language-rust\"> <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">mpsc<span class=\"token punctuation\">::</span></span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">let</span> tx1<span class=\"token operator\">=</span><span class=\"token namespace\">mpsc<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Sender</span><span class=\"token punctuation\">::</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n      <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">move</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span>  <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> vals<span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"from\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"thread\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> val <span class=\"token keyword\">in</span> vals <span class=\"token punctuation\">{<!-- --></span>\n            tx1<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// s.send(val).unwrap();</span>\n            <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_secs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//等待1秒再发送</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">move</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span> <span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> vals<span class=\"token operator\">=</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span>\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"more\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"messages\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"for\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"you\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> val <span class=\"token keyword\">in</span> vals<span class=\"token punctuation\">{<!-- --></span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_secs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> received <span class=\"token keyword\">in</span> y <span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//如果前面已经被接收了一些信息,那么这个循环接收的就是从前面已经接收了的开始</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Got : {}\"</span><span class=\"token punctuation\">,</span>received<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n   <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\n<span class=\"token comment\">/*\n\t输出结果：\n\tGot : hi\nGot : more\nGot : messages\nGot : from\nGot : for\nGot : the\nGot : you\nGot : thread\n操作 系统不同可能结果不同\n*/</span>\n</code></pre>\n<h3><a id=\"_4456\"></a>共享状态的并发</h3>\n<p>通过共享内存来通信。</p>\n<p><mark>多个线程可以同时访问相同的内存地址。</mark></p>\n<h5><a id=\"Mutex_4464\"></a>互斥体（Mutex）</h5>\n<blockquote>\n<p>一个互斥体在任意时刻只允许一个线程访问数据。（获取锁、加锁、解锁）</p>\n<ul><li>必须在使用数据前尝试获取锁</li><li>必须使用完互斥体守护的数据后释放锁，其他线程才能继续完成获取锁的操作。</li></ul>\n<p>rust 中，由于类型系统和所有权规则的帮助，我们可以保证自己不会在加锁和解锁这两个步骤中出现错误。</p>\n</blockquote>\n<h5><a id=\"MutexT__4473\"></a>Mutex 的接口</h5>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">//单线程环境下</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>sync<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Mutex</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> m<span class=\"token operator\">=</span><span class=\"token class-name\">Mutex</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> num<span class=\"token operator\">=</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//lock 方法获取锁</span>\n        <span class=\"token operator\">*</span>num<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"m = {:?}\"</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Mutex 是一种智能指针，对 lock 的调用会返回一个名为 MutexGuard 的智能指针。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">//多线程环境下</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token namespace\">sync<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Mutex</span><span class=\"token punctuation\">,</span>thread<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> counter<span class=\"token operator\">=</span> <span class=\"token class-name\">Mutex</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> handles<span class=\"token operator\">=</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \n       <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span><span class=\"token number\">10</span> <span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">//创建 10 个线程</span>\n        <span class=\"token keyword\">let</span> handle<span class=\"token operator\">=</span><span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">move</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">//报错点</span>\n            <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> num<span class=\"token operator\">=</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        handles<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span> handle <span class=\"token keyword\">in</span> handles <span class=\"token punctuation\">{<!-- --></span>\n        handle<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Result : {}\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>⚠️：</p>\n<div>\n<p>以上程序报错</p>\n<p> 原因是：counter 被移动进了闭包中并在调用 lock 方法时 被捕获了。后面的线程无法使用。 </p>\n</div>\n<pre><code class=\"prism language-rust\">  <span class=\"token keyword\">let</span> handle<span class=\"token operator\">=</span> <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">move</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> num <span class=\"token operator\">=</span> counter<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">*</span>num <span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        handles<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> handle2 <span class=\"token operator\">=</span> <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">move</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//报错点</span>\n            <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> num2<span class=\"token operator\">=</span> counter<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">*</span>num2<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        handles<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>handle2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>⚠️：程序报错原因：counter 被移动到了 handle 指代的线程中，而移动行为阻止了第二个线程中调用 lock 再次捕获 counter。</p>\n<h4><a id=\"_4539\"></a>多线程与多重所有权</h4>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token namespace\">sync<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Mutex</span><span class=\"token punctuation\">,</span>thread<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>rc<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token comment\">// let counter= Mutex::new(0);</span>\n    <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mutex</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> handles<span class=\"token operator\">=</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span><span class=\"token number\">10</span> <span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">//创建 10 个线程</span>\n        <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token class-name\">Rc</span><span class=\"token punctuation\">::</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> handle<span class=\"token operator\">=</span><span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">move</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//报错</span>\n            <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> num<span class=\"token operator\">=</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        handles<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span> handle <span class=\"token keyword\">in</span> handles <span class=\"token punctuation\">{<!-- --></span>\n        handle<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Result : {}\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>⚠️:报错原因</p>\n<pre><code class=\"prism language-rust\">error<span class=\"token punctuation\">[</span><span class=\"token constant\">E0277</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> `<span class=\"token class-name\">Rc</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Mutex</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;&gt;</span>` cannot be sent between threads safely\n   <span class=\"token operator\">-</span><span class=\"token punctuation\">-&gt;</span> main<span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">:</span><span class=\"token number\">38</span><span class=\"token punctuation\">:</span><span class=\"token number\">20</span>\n    <span class=\"token operator\">|</span>\n<span class=\"token number\">38</span>  <span class=\"token operator\">|</span>           <span class=\"token keyword\">let</span> handle<span class=\"token operator\">=</span><span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">move</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token operator\">|</span>  <span class=\"token constant\">____________________</span><span class=\"token operator\">^</span><span class=\"token operator\">^</span><span class=\"token operator\">^</span><span class=\"token operator\">^</span><span class=\"token operator\">^</span><span class=\"token operator\">^</span><span class=\"token operator\">^</span><span class=\"token operator\">^</span><span class=\"token operator\">^</span><span class=\"token operator\">^</span><span class=\"token operator\">^</span><span class=\"token operator\">^</span><span class=\"token operator\">^</span>_<span class=\"token operator\">-</span>\n    <span class=\"token operator\">|</span> <span class=\"token operator\">|</span>                    <span class=\"token operator\">|</span>\n    <span class=\"token operator\">|</span> <span class=\"token operator\">|</span>                    `<span class=\"token class-name\">Rc</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Mutex</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;&gt;</span>` cannot be sent between threads safely\n<span class=\"token number\">39</span>  <span class=\"token operator\">|</span> <span class=\"token operator\">|</span>             <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> num<span class=\"token operator\">=</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">40</span>  <span class=\"token operator\">|</span> <span class=\"token operator\">|</span>         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">|</span> <span class=\"token operator\">|</span><span class=\"token constant\">_________</span><span class=\"token operator\">-</span> within this `<span class=\"token punctuation\">[</span>closure<span class=\"token operator\">@</span>main<span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">:</span><span class=\"token number\">38</span><span class=\"token punctuation\">:</span><span class=\"token number\">34</span><span class=\"token punctuation\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span>`\n    <span class=\"token operator\">|</span>\n    <span class=\"token operator\">=</span> help<span class=\"token punctuation\">:</span> within `<span class=\"token punctuation\">[</span>closure<span class=\"token operator\">@</span>main<span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">:</span><span class=\"token number\">38</span><span class=\"token punctuation\">:</span><span class=\"token number\">34</span><span class=\"token punctuation\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span>`<span class=\"token punctuation\">,</span> the <span class=\"token keyword\">trait</span> `<span class=\"token class-name\">Send</span>` is not implemented <span class=\"token keyword\">for</span> `<span class=\"token class-name\">Rc</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Mutex</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;&gt;</span>`\n    <span class=\"token operator\">=</span> note<span class=\"token punctuation\">:</span> required because it appears within the <span class=\"token keyword\">type</span> `<span class=\"token punctuation\">[</span>closure<span class=\"token operator\">@</span>main<span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">:</span><span class=\"token number\">38</span><span class=\"token punctuation\">:</span><span class=\"token number\">34</span><span class=\"token punctuation\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span>`\nnote<span class=\"token punctuation\">:</span> required by a bound <span class=\"token keyword\">in</span> `spawn`\n   <span class=\"token operator\">-</span><span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">:</span>\\<span class=\"token class-name\">Users</span>\\sysy\\<span class=\"token punctuation\">.</span>rustup\\toolchains\\stable<span class=\"token operator\">-</span>x86_64<span class=\"token operator\">-</span>pc<span class=\"token operator\">-</span>windows<span class=\"token operator\">-</span>msvc\\lib<span class=\"token operator\">/</span>rustlib<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>rust\\library\\std\\src\\thread\\<span class=\"token keyword\">mod</span><span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">:</span><span class=\"token number\">621</span><span class=\"token punctuation\">:</span><span class=\"token number\">8</span>\n    <span class=\"token operator\">|</span>\n<span class=\"token number\">621</span> <span class=\"token operator\">|</span>     <span class=\"token class-name\">F</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Send</span> <span class=\"token operator\">+</span> <span class=\"token lifetime-annotation symbol\">'static</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">|</span>        <span class=\"token operator\">^</span><span class=\"token operator\">^</span><span class=\"token operator\">^</span><span class=\"token operator\">^</span> required by this bound <span class=\"token keyword\">in</span> `spawn`\n\nerror<span class=\"token punctuation\">:</span> aborting due to previous error\n\n\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\n`<span class=\"token class-name\">Rc</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Mutex</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;&gt;</span>` cannot be sent between threads safely 这意味着我们新创建的 <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>rc<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Rc</span><span class=\"token operator\">&lt;</span><span class=\"token namespace\">std<span class=\"token punctuation\">::</span>sync<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Mutex</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;&gt;</span> 类型无法安全地在线程间传递。\n\nthe <span class=\"token keyword\">trait</span> `<span class=\"token class-name\">Send</span>` is not implemented <span class=\"token keyword\">for</span> `<span class=\"token class-name\">Rc</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Mutex</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;&gt;</span>` 这个是说明这个类型不满足 <span class=\"token keyword\">trait</span> 约束 <span class=\"token class-name\">Send</span><span class=\"token punctuation\">.</span>\n</code></pre>\n<p>Rc 在跨线程使用时并不安全。</p>\n<h4><a id=\"_ArcT_4601\"></a>原子引用计数 Arc</h4>\n<blockquote>\n<p>Arc 类型：它拥有类似于 Rc 的行为，又保证了自己可以被安全地用于并发场景。 A 代表原子（atomic）表明自己是一个原子引用计数</p>\n</blockquote>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token namespace\">sync<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Mutex</span><span class=\"token punctuation\">,</span>thread<span class=\"token punctuation\">,</span><span class=\"token namespace\">sync<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Arc</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>rc<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Rc</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token comment\">// let counter= Mutex::new(0);</span>\n    <span class=\"token comment\">// let counter = Rc::new(Mutex::new(0));</span>\n    <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token class-name\">Arc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mutex</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//它本身不可变</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> handles<span class=\"token operator\">=</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span><span class=\"token number\">10</span> <span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">//创建 10 个线程</span>\n        <span class=\"token comment\">// let counter = Rc::clone(&amp;counter);</span>\n        <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token class-name\">Arc</span><span class=\"token punctuation\">::</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> handle<span class=\"token operator\">=</span><span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">move</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> num<span class=\"token operator\">=</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//我们可以获取它内部值的可变引用</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        handles<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span> handle <span class=\"token keyword\">in</span> handles <span class=\"token punctuation\">{<!-- --></span>\n        handle<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Result : {}\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//输出结果 ： Result  : 10</span>\n</code></pre>\n<p>Ⓜ️ 终于把这个多线程程序写成功了！</p>\n<h4><a id=\"RefCellTRcT__MutexTArcT__4638\"></a>RefCell/Rc 和 Mutex/Arc 之间的相似性</h4>\n<div>\n<p> Mutex 与 Cell 系列类型有着相似的功能，同样提供了内部可变性。 </p>\n<p> Rust 并不能使你完全避免 Mutex 过程中所有的逻辑错误。使用 Mutex 也会有产生死锁（deadlock) 的风险。 </p>\n<p> 当某个操作需要同时锁住两个资源，而两个线程分别持有其中一个锁并相互请求另外一个锁时，两个线程就会陷入无穷尽的等待过程中 </p>\n</div>\n<h4><a id=\"_Sync_trait__Send_trait__4654\"></a>使用 Sync trait 和 Send trait 对并发进行扩展</h4>\n<blockquote>\n<p>rust 语言本身内置的并发特性非常少。</p>\n<p>std::marker 模块内的 Sync trait 与 Send trait</p>\n</blockquote>\n<ul><li><mark>允许线程间转移所有权的 Send trait</mark></li></ul>\n<div>\n<p> 只有实现了 Send trait 的类型才可以安全地线程间转移所有权。除了 Rc 等极少数的类型，几乎所有的 Rust 类型都实现了 Send triat 。 因此，Rc 只被设计在单线程场景中使用，也无须为线程安全付出额外的性能开销。任何完全由 Send 类型组合成的复合类型都会被自动标记为 Send。 </p>\n</div>\n<ul><li><mark>允许多线程同时访问的 Sync trait</mark></li></ul>\n<div>\n<p> 只有实现了 Sync trait 的类型才可以安全地被多个线程引用。 对于任何类型 T，如果 &amp;T 满足约束 Send ， 那么 T 就是满足 Sync 的。所有原生类型都满足 Sync 约束。Rc 也同样不满足 Sync 的类型。 </p>\n</div>\n<h2><a id=\"Rust__4679\"></a>Rust 面向对象编程特性</h2>\n<blockquote>\n<p>面向对象的程序由对象组成。对象包装了数据和操作这些数据的流程。这些流程称为方法或操作。</p>\n<p>rust 中默认的 trait 方法进行代码的共享</p>\n<p>可以在 Rust 中使用泛型来构建不同类型的抽象，并使用 trait 约束来决定类型必须提供的具体特性。这技术称为 限定参数化多态。</p>\n</blockquote>\n<h1><a id=\"_4689\"></a>模式匹配</h1>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">match</span> 分支 <span class=\"token punctuation\">{<!-- --></span>\n    模式 <span class=\"token operator\">=&gt;</span> 表达式<span class=\"token punctuation\">,</span>\n    模式 <span class=\"token operator\">=&gt;</span> 表达式<span class=\"token punctuation\">,</span>\n    模式 <span class=\"token operator\">=&gt;</span> 表达式<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">...</span>\t\t\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><mark>记住 match 表达式必须穷尽匹配值的所有可能性。但是我们可以在最后的 分支处使用全匹配模式。使用特殊的下划线 _可以用来匹配所有可能的值。</mark></p>\n<h5><a id=\"if_let__4702\"></a>if let 条件表达式</h5>\n<blockquote>\n<p>我们可以混合使用 if let 、 else if 及 else if let 表达式来进行匹配。</p>\n</blockquote>\n<pre><code class=\"prism language-rust\">\n <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">let</span> favorite_color <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">None</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> is_tuesday <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> age<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">u8</span><span class=\"token punctuation\">,</span>_<span class=\"token operator\">&gt;=</span><span class=\"token string\">\"34\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span>favorite_color <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Using  your favorite  color , {} , as the background \"</span><span class=\"token punctuation\">,</span>\n    color\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> is_tuesday<span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tuesday  is green  day!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> age <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> age<span class=\"token operator\">&gt;</span><span class=\"token number\">30</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Using  purple  as the  background color\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Using  orange  as the  background  color\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Using  blue  as the  bakcground  color \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 输出结果为： </span>\n<span class=\"token class-name\">Using</span>  purple  <span class=\"token keyword\">as</span> the  background color\n</code></pre>\n<h5><a id=\"while__let__4737\"></a>while let 条件循环</h5>\n<blockquote>\n<p>它和 if let 的构造十分类似，但它会反复执行同一个模式匹配直到出现失败的情形。</p>\n</blockquote>\n<pre><code class=\"prism language-rust\">  <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> stack<span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>top<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>top<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 上面这个 while let ： 只要 stack.pop() 返回的值是 Some 变体，那么这个循环就会不断的打印</span>\n\n\n</code></pre>\n<h4><a id=\"for__4757\"></a>for 循环</h4>\n<pre><code class=\"prism language-rust\"><span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==============================================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> v<span class=\"token operator\">=</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>index <span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">enumerate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{} is  at index {}\"</span><span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>for 语句中紧随关键字 for 的值就是一个模式。</p>\n<p><strong>enumerate 方法它会在每次 迭代过程中生成一个包含值本身及值索引的元组。</strong></p>\n<h5><a id=\"let__4773\"></a>let 语句</h5>\n<pre><code class=\"prism language-RUST\">let x = 5;\nlet PATTERN=EXPRESSION;\n//上面x就是整个模式本身，实际上意味着“无论表达式会返回什么样的值，我们都可以将它绑定到变量 x 中\n\nlet (x,y,x)=(1,2,2);\n//使用模式来解构元组并一次性创建出 3 个变量\n//上面的模式要匹配，否则会报错\n\n</code></pre>\n<h5><a id=\"_4788\"></a>函数参数</h5>\n<blockquote>\n<p>函数的参数也是模式。</p>\n</blockquote>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">foo</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//签名中的 x 部分就是一个模式！</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">print_sy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Current location: ({} , {}\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> point <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">print_sy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"_4812\"></a>可失败性：模式是否会匹配失败</h2>\n<blockquote>\n<p>模式可以分为不可失败和可失败两种类型。</p>\n<p>不可失败的模式能够匹配任何传入的值。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> x<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//x 就是一个不可失败的模式匹配；它能够匹配右侧表达式所有可能的返回值</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//Some(x) 就是一个可失败模式，如果值为 None 就会匹配失败</span>\n</code></pre>\n<p><mark>函数参数、let 语句、for 循环只接收不可失败模式；if let 和 while let 表达式则只接收可失败模式</mark></p>\n<p>不能在不可失败模式中使用可失败模式</p>\n</blockquote>\n<h3><a id=\"_4830\"></a>模式语法</h3>\n<h5><a id=\"_4832\"></a>匹配字面量</h5>\n<pre><code class=\"prism language-rust\"><span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==============================================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> v<span class=\"token operator\">=</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>index <span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">enumerate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{} is  at index {}\"</span><span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h5><a id=\"_4844\"></a>匹配命名变量</h5>\n<pre><code class=\"prism language-rust\">\n<span class=\"token keyword\">let</span> x<span class=\"token operator\">=</span><span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> y<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">match</span> x<span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Got 50\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>  <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Matched,y = {:?}\"</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">//在这个匹配分支中的模式引入了新的变量 y ，它会匹配 Some 变体中携带的任意值。所以这里的 y 是一个新的变量</span>\n    _        <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Default case , x={:?}\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"at the end : x = {:?}, y= {:?} \"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token class-name\">Matched</span><span class=\"token punctuation\">,</span>y <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\nat the end <span class=\"token punctuation\">:</span> x <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n</code></pre>\n<p><strong>命名变量是一种可以匹配任何值的不可失败模式</strong></p>\n<h5><a id=\"_4867\"></a>多重模式</h5>\n<blockquote>\n<p>可以在 match 表达式的分支匹配中使用 | 表示 或的意思，它可以被用来一次性匹配多个模式。</p>\n</blockquote>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">//  多重模式</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=============================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> x<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">match</span> x <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">2</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one or two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n     <span class=\"token number\">3</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n     _ <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"anything\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5><a id=\"___4883\"></a>使用 … 来匹配区间</h5>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 匹配区间</span>\n<span class=\"token keyword\">let</span> x<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">match</span> x <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token number\">1</span><span class=\"token punctuation\">..=</span><span class=\"token number\">5</span> <span class=\"token operator\">=&gt;</span><span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one through  five\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">//这句代码也换成 : 1 | 2 | 3 | 4 | 5</span>\n    <span class=\"token comment\">// 6...9 =&gt;println!(\"6 到  9\"),  这里编译器说不建议使用 范围模式</span>\n    _ <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"something else\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//输出结果：</span>\none or two\none through  five\n</code></pre>\n<p><strong>范围模式只被允许使用数值或 char 值来进行定义；</strong></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token char\">'c'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">match</span> x <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token char\">'a'</span> <span class=\"token punctuation\">..=</span> <span class=\"token char\">'j'</span>  <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"early  ASCLL letter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token char\">'k'</span> <span class=\"token punctuation\">..=</span> <span class=\"token char\">'z'</span>  <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"late  ASCLL letter \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    _ <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"something else\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h4><a id=\"_4912\"></a>使用解构来分解值</h4>\n<blockquote>\n<p>我们可以使用模式来分解结构体、枚举、元组或引用</p>\n</blockquote>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Point</span><span class=\"token punctuation\">{<!-- --></span>\n    x<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span>\n    y<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span><span class=\"token class-name\">Point</span><span class=\"token punctuation\">{<!-- --></span>x<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">:</span><span class=\"token number\">7</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">{<!-- --></span>x<span class=\"token punctuation\">:</span>a<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">:</span>b<span class=\"token punctuation\">}</span><span class=\"token operator\">=</span>p<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//简便写法</span>\n<span class=\"token comment\">//let Point{x:x,y:y}=p;</span>\n<span class=\"token comment\">//上面这条的简便写法</span>\n<span class=\"token keyword\">let</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">{<!-- --></span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">}</span><span class=\"token operator\">=</span>p<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">{<!-- --></span>x<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">:</span><span class=\"token number\">7</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">match</span> p<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Point</span><span class=\"token punctuation\">{<!-- --></span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"On the x axis  at {}\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Point</span><span class=\"token punctuation\">{<!-- --></span>x<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">}</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"On the y axis at{}\"</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Point</span><span class=\"token punctuation\">{<!-- --></span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">}</span>  <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"On neither axis :({}{})\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5><a id=\"_4944\"></a>解构枚举</h5>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Message</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Quit</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Move</span> <span class=\"token punctuation\">{<!-- --></span>x<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span> <span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">ChangeColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> msg<span class=\"token operator\">=</span><span class=\"token class-name\">Message</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">ChangeColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">160</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">match</span>  msg <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Message</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Quit</span> <span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The Quit  variant has no  data to  destructure.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Message</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Move</span><span class=\"token punctuation\">{<!-- --></span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">}</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Move in the x direction {} and in the y direction {}\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Message</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Write</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span><span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Text message :{} \"</span><span class=\"token punctuation\">,</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Message</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">ChangeColor</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span>g<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\n        Change the color to red {}, green {} ,and blue {}\"</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>g<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//输出结果：</span>\n  <span class=\"token class-name\">Change</span> the color to red <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> green <span class=\"token number\">160</span> <span class=\"token punctuation\">,</span>and blue <span class=\"token number\">255</span>\n</code></pre>\n<h5><a id=\"_4974\"></a>解构嵌套的结构体和枚举</h5>\n<blockquote>\n<p>匹配语法可以被用于嵌套的结构中！！！</p>\n</blockquote>\n<pre><code class=\"prism language-rust\">\n\n<span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Message</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Quit</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Move</span> <span class=\"token punctuation\">{<!-- --></span>x<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span> <span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">ChangeColor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Color</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Rgb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Hsv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 以下是主函数部分</span>\n\n<span class=\"token keyword\">let</span> msg<span class=\"token operator\">=</span><span class=\"token class-name\">Message</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">ChangeColor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Hsv</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">160</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">match</span> msg<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Message</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">ChangeColor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Rgb</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span>g<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Change  the color  red {} , green{} , and blue {}\"</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>g<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Message</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">ChangeColor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Hsv</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> \n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Chang the color to hue {} , saturation {} , and value {}\"</span><span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     _ <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5><a id=\"_5012\"></a>解构结构体和元组</h5>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>feet<span class=\"token punctuation\">,</span> inches<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Point</span><span class=\"token punctuation\">{<!-- --></span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Point</span><span class=\"token punctuation\">{<!-- --></span>x<span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h5><a id=\"_5020\"></a>忽略模式中的值</h5>\n<h6><a id=\"_____5022\"></a>使用 _ 忽略整个值</h6>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">//在函数签名中作用 _</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">foo</span> <span class=\"token punctuation\">(</span> _<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span> <span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This  code only  uses the y parameter : {}\"</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上面代码的函数签名中，虽然是两个参数，但是传入参数的时候，会忽略到第一个参数！！！</p>\n<h6><a id=\"____5034\"></a>使用嵌套的 _ 忽略值的某些部分</h6>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> setting_value <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> new_setting_value <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">match</span> <span class=\"token punctuation\">(</span>setting_value<span class=\"token punctuation\">,</span>new_setting_value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token punctuation\">(</span><span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can't  overweite an existing  customized value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        _ <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            setting_value<span class=\"token operator\">=</span>new_setting_value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Setting is {:?}\"</span><span class=\"token punctuation\">,</span>setting_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//输出结果：</span>\n<span class=\"token class-name\">Can</span><span class=\"token lifetime-annotation symbol\">'t</span>  overweite an existing  customized value\n<span class=\"token class-name\">Setting</span> is <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>当我们不需要 Some 中的值时，在模式中使用下划线来匹配 Some 变体</p>\n<pre><code class=\"prism language-rust\">\n    <span class=\"token keyword\">let</span>  numbers<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">match</span> numbers <span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">,</span> third <span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">,</span> fifth <span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\n            Some numbers: {} {} {} \"</span><span class=\"token punctuation\">,</span>first<span class=\"token punctuation\">,</span>third<span class=\"token punctuation\">,</span>fifth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">//输出结果：</span>\n<span class=\"token number\">2</span>  <span class=\"token number\">8</span> <span class=\"token number\">32</span>  \n\n</code></pre>\n<h6><a id=\"____5075\"></a>通过以 _ 开头的名称来忽略未使用的变量</h6>\n<pre><code class=\"prism language-rust\">    <span class=\"token keyword\">let</span> _x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//如果没有使用变量，不用下划线开头，就会有警告</span>\n    <span class=\"token keyword\">let</span> y<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//有警告，变量未被使用</span>\n</code></pre>\n<blockquote>\n<p>使用下画线开头的变量名与仅仅使用_ 作为变量名存在一个细微的差别：</p>\n<p>_x 语法仍然将值绑定到了变量上，而 _ 则完全不会进行绑定。</p>\n</blockquote>\n<pre><code class=\"prism language-rust\">  <span class=\"token keyword\">let</span> _x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//如果没有使用变量，不用下划线开头，就会有警告</span>\n    <span class=\"token keyword\">let</span> y<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//有警告，变量未被使用</span>\n\n    <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>_s<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> s <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"found a string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//报错：因为以下画线开头的未使用变量仍然绑定了值，会导致值的所有权发生转移</span>\n\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n\n    <span class=\"token keyword\">let</span> _x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//如果没有使用变量，不用下划线开头，就会有警告</span>\n    <span class=\"token keyword\">let</span> y<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//有警告，变量未被使用</span>\n\n    <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> s <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"found a string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//正确： 因为下划线不会转移值的所有权 </span>\n</code></pre>\n<p><mark>下划线开头的变量会转移值的所有权，而纯下划线不会转移值的所有权</mark></p>\n<h5><a id=\"____5112\"></a>使用 … 忽略值的剩余部分</h5>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Poing</span> <span class=\"token punctuation\">{<!-- --></span>\n    x <span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span>\n    y <span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span>\n    z <span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> origin <span class=\"token operator\">=</span> <span class=\"token class-name\">Poing</span> <span class=\"token punctuation\">{<!-- --></span>x<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">match</span> origin<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//在这里模式匹配中我们忽略了 y 和 z 的值 </span>\n    <span class=\"token class-name\">Poing</span> <span class=\"token punctuation\">{<!-- --></span>x <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">..</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x is {} \"</span> <span class=\"token punctuation\">,</span>x <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>. . 语法会自动展开并填充任意多个所需要的值</strong></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> numberss<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">match</span> numberss <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">..</span> <span class=\"token punctuation\">,</span> last <span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\n        Some numberss : {} , {}\"</span><span class=\"token punctuation\">,</span>first<span class=\"token punctuation\">,</span>last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//输出 2 32 </span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//以上代码只需要匹配第一个值和最后一个值，忽略中间的所有值</span>\n\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\n<span class=\"token comment\">//不可以像下面这样不确定 </span>\n\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">..</span> <span class=\"token punctuation\">,</span> second <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">..</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5><a id=\"_5151\"></a>使用匹配守卫添加额外条件</h5>\n<blockquote>\n<p>匹配守卫：就是附加在 match 分支模式后的 if 条件语句，分支中的模式只有在这个条件被同时满足时才能匹配成功。</p>\n</blockquote>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">match</span> num <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> x<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"less than five : {} \"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>  <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">None</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//就是添加一个条件来匹配</span>\n匹配守卫：就是附加在 <span class=\"token keyword\">match</span> 分支模式后的 <span class=\"token keyword\">if</span> 条件语句，分支中的模式只有在这个条件被同时满足时才能匹配成功。\n</code></pre>\n<pre><code class=\"prism language-rust\">\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">match</span> x <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Got 50\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> n<span class=\"token operator\">==</span>y <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Matched, n = {:?}\"</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">//这里并没有引入新的变量 y ,而是合适外部的变量 y ; 使用 Some(n)  来避免覆盖 外部变量 y</span>\n    _ <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Default case , x = {:?} \"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"at the end : x= {:?}, y={:?}\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//输出结果：</span>\n<span class=\"token class-name\">Default</span> case <span class=\"token punctuation\">,</span> x <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nat the end <span class=\"token punctuation\">:</span> x<span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span><span class=\"token number\">10</span>\n\n<span class=\"token comment\">//上面代码中的  if  n==y  不是一个模式，所以它不会引入新的变量，所以就会使用外部变量中的  y</span>\n</code></pre>\n<p>我们同样可以在匹配守卫中使用 或运算符 | 来指定多重模式</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">match</span> x <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token number\">4</span> <span class=\"token operator\">|</span> <span class=\"token number\">5</span> <span class=\"token operator\">|</span> <span class=\"token number\">6</span> <span class=\"token keyword\">if</span> y <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yes\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    _ <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//上面匹配优先级是先匹配数字再匹配 if 表达式</span>\n\n</code></pre>\n<h5><a id=\"_5203\"></a>@绑定</h5>\n<blockquote>\n<p>@ 运算符允许我们在测试一个值是否匹配模式的同时创建存储该值的变量。</p>\n</blockquote>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Message1</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Hello</span><span class=\"token punctuation\">{<!-- --></span>id<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> msg <span class=\"token operator\">=</span> <span class=\"token class-name\">Message1</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Hello</span><span class=\"token punctuation\">{<!-- --></span>id<span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">match</span> msg <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Message1</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Hello</span><span class=\"token punctuation\">{<!-- --></span>id <span class=\"token punctuation\">:</span> id_variable <span class=\"token operator\">@</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">..=</span><span class=\"token number\">7</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Found an id in range :{}\"</span><span class=\"token punctuation\">,</span>id_variable<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Message1</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Hello</span><span class=\"token punctuation\">{<!-- --></span>id <span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">..=</span><span class=\"token number\">12</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Found an id in another range\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Message1</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Hello</span><span class=\"token punctuation\">{<!-- --></span>id<span class=\"token punctuation\">}</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Found some other id : {}\"</span><span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//输出结果为：</span>\n<span class=\"token class-name\">Found</span> an id <span class=\"token keyword\">in</span> range <span class=\"token punctuation\">:</span><span class=\"token number\">5</span>\n\n通过在 <span class=\"token number\">3</span><span class=\"token punctuation\">...</span><span class=\"token number\">7</span> 之前使用 id_variable <span class=\"token operator\">@</span> ，在测试一个值是否满足区间模式的同时可以捕获到匹配成功 \n</code></pre>\n<h1><a id=\"_5233\"></a>高级特性</h1>\n<h2><a id=\"_Rust_5235\"></a>不安全 Rust</h2>\n<h3><a id=\"_5237\"></a>不安全超能力</h3>\n<p><strong>可以在代码块前面使用 unsafe 来切换到不安全模式。</strong></p>\n<p>就是将代码安全责任转交到程序员手上。</p>\n<p>⚠️：不安全超能力有：</p>\n<ul><li>解引用祼指针</li><li>调用不安全的函数或方法</li><li>访问或修改可变的静态变量</li><li>实现不安全 Rust</li></ul>\n<blockquote>\n<p>注意： unsafe 关键字不会关闭借用检查器或禁用任何其他 Rust 安全检查。</p>\n</blockquote>\n<h5><a id=\"_5252\"></a>解引用裸指针</h5>\n<blockquote>\n<p>不安全 Rust 的世界里拥有两种类似于引用的新指针类型,叫作裸指针。</p>\n<p>裸指针要么是可变的，要么是不可变的 ： *const T 和 *mut T</p>\n</blockquote>\n<p><strong>裸指针与引用、智能指针的区别在于：</strong></p>\n<ul><li>允许忽略借用规则，可以同时拥有指向同一个内存地址的可变和不可变指针，或者拥有指向同一个地址的多个可变指针</li><li>不能保证自己总是指向了有效的内存地址</li><li>允许为空</li><li>不骨实现任何自动清理机制</li></ul>\n<pre><code class=\"prism language-rust\">   <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> num <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 通过引用创建裸指针</span>\n<span class=\"token comment\">//这两个指针都来自有效的引用，可以确认它们的有效性</span>\n    <span class=\"token keyword\">let</span> r1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>num <span class=\"token keyword\">as</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> r2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> num <span class=\"token keyword\">as</span> <span class=\"token operator\">*</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>我们可以安全代码内合法地创建裸指针，但是不能在不安全代码块外解引用裸指针。</strong></p>\n<p>下面的代码是合法的，但是不应该编写这样的代码，因为无法确定其有效性</p>\n<pre><code class=\"prism language-rust\">  <span class=\"token comment\">// 创建一个指向任意内存地址的裸指针</span>\n    <span class=\"token keyword\">let</span> address <span class=\"token operator\">=</span><span class=\"token number\">0x012345usize</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> r<span class=\"token operator\">=</span> address <span class=\"token keyword\">as</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-rust\">  <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> num <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 通过引用创建裸指针</span>\n    <span class=\"token keyword\">let</span> r1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>num <span class=\"token keyword\">as</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> r2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> num <span class=\"token keyword\">as</span> <span class=\"token operator\">*</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">unsafe</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"r1 is : {}\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>r1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"r2 is : {}\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>r2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//不安全代码一定要在 unsafe 代码块中才可以解引用，否则会报错</span>\n</code></pre>\n<h5><a id=\"_5297\"></a>调用不安全函数或方法</h5>\n<p><strong>不安全函数或方法就是前面名字前面加了 unsafe 关键字修饰，不安全函数必须要不安全代码中才可以调用，否则会报错！！！</strong></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">unsafe</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">priunsafe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//表明这个函数体内的代码块也是不安全的</span>\n<span class=\"token keyword\">unsafe</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">priunsafe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unsafe!!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>    \n    \n</code></pre>\n<h5><a id=\"_5317\"></a>创建不安全代码的安全抽象</h5>\n<p>函数如果有不安全代码并不意味着我们需要将整个函数都标记为不安全的。我们应该<strong>将不安全代码封装在安全函数中是一种十分常见的抽象。</strong></p>\n<pre><code class=\"prism language-rust\">    <span class=\"token comment\">//下面调用的这个方法是标准库中使用不安全代码的函数</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">split_at_mut</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">split_at_mut</span><span class=\"token punctuation\">(</span>slice <span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> mid <span class=\"token punctuation\">:</span> <span class=\"token keyword\">usize</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> slice<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">assert!</span><span class=\"token punctuation\">(</span>mid<span class=\"token operator\">&lt;=</span> len<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> slice<span class=\"token punctuation\">[</span><span class=\"token punctuation\">..</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> slice<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">..</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5><a id=\"_extern___5337\"></a>使用 extern 函数调用外部代码</h5>\n<blockquote>\n<p>Rust 使用 extern 关键字简化创建和使用外部函数接口（FFI）的过程，FFI 是编程语言定义函数的一种方式，它允许其他外部的编译语言来调用这些函数</p>\n</blockquote>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">abs</span><span class=\"token punctuation\">(</span>input <span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>任何在 extern 块中声明的函数都是不安全的</strong></p>\n<blockquote>\n<p>在其他语言中调用 Rust 函数：</p>\n<p>extern 关键字及对应的 ABI 添加到函数签名的 fn 关键字前，并为这个函数添加 #[no_mangle] 注解来避免 Rust 在编译时改变它的 名称。</p>\n<blockquote>\n<p>ABI:每个<a href=\"https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/192\">操作系统</a>都会为运行在该系统下的应用程序提供应用程序二进制接口（Application Binary Interface，ABI）。ABI包含了<a href=\"https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/5985445\">应用程序</a>在这个系统下运行时必须遵守的编程约定。ABI总是包含一系列的系统调用和使用这些系统调用的方法，以及关于程序可以使用的内存地址和使用机器寄存器的规定。从一个应用程序的角度看，ABI既是系统架构的一部分也是硬件体系结构的重点，因此只要违反二者之一的条件约束就会导致程序出现严重错误。在很多情况下，<a href=\"https://baike.baidu.com/item/%E9%93%BE%E6%8E%A5%E5%99%A8/10853221\">链接器</a>为了遵守ABI的约定需要做一些重要的工作。例如，ABI要求每个应用程序包含一个程序中各例程使用的静态数据的所有地址表，链接器通过收集所有链接到程序中的模块的地址信息来创建地址表。ABI经常影响链接器的是对标准过程调用的定义</p>\n</blockquote>\n<p>Rust 为了让其他语言 正常地识别 Rust 函数，必须要禁用编译器 的改名功能。</p>\n</blockquote>\n<h5><a id=\"_5357\"></a>访问或修改一个可变静态变量</h5>\n<blockquote>\n<p>Rust 中全局变量也称为静态变量</p>\n</blockquote>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 静态变量</span>\n <span class=\"token keyword\">static</span> <span class=\"token constant\">HELLO</span><span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span> <span class=\"token operator\">=</span><span class=\"token string\">\"Hello , world!!\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    \n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"static is {}\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">HELLO</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">mut</span> <span class=\"token constant\">COUNT</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span> <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add_to_count</span><span class=\"token punctuation\">(</span>inc <span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token constant\">COUNT</span><span class=\"token operator\">+=</span>inc<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">add_to_count</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsafe</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"COUNT: {}\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">COUNT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>静态变量必须要标注自己的类型；静态变量只能存储拥有 <strong>'static</strong>周期的引用。</p>\n<p>常量和不可变静态变量的区别：</p>\n<ul><li>静态变量的值在内存中拥有固定的地址，使用它的值总是会访问到同样的数据；常量则允许在任何被使用到的时候复制其数据</li><li>静态变量是可变的，访问和修改可变的静态变量是不安全的</li></ul>\n</blockquote>\n<h5><a id=\"_trait_5393\"></a>实现不安全 trait</h5>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 实现不安全 trait</span>\n<span class=\"token keyword\">unsafe</span> <span class=\"token keyword\">trait</span> <span class=\"token type-definition class-name\">Foo</span><span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">unsafe</span> <span class=\"token keyword\">impl</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">for</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">{<!-- --></span>\n    \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_triat_5405\"></a>高级 triat</h3>\n<h4><a id=\"trait__5407\"></a>在trait 的定义中使用关联类型指定占位类型</h4>\n<blockquote>\n<p>关联类型是 trait 中的类型占位符，它被用于 triat 的方法签名中</p>\n</blockquote>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Point</span><span class=\"token punctuation\">{<!-- --></span>\n    x<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span>\n    y<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">trait</span> <span class=\"token type-definition class-name\">Iterator</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">type</span> <span class=\"token type-definition class-name\">Item</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Item 是一个占位符，Iterator trait 的实现者需要为 Item 指定具体的类型</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">next</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Item</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Iterator</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">type</span> <span class=\"token type-definition class-name\">Item</span><span class=\"token operator\">=</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//指定类型</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">next</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Item</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 使用泛型的版本</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">trait</span> <span class=\"token type-definition class-name\">Iterator</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">next</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<blockquote>\n<p>占位类型和泛型的区别：</p>\n<p>使用泛型在每次实现该 trait 的过程中标注类型，我们可以实现任意的迭代类型，从而使用得可以有多个不同版本的实现。我们<strong>可以为一个类型同时多次实现 trait</strong></p>\n<p>关联类型不需要在使用 trait 的方法时标注类型，<strong>不能为单个类型多次实现这样的 trait</strong></p>\n</blockquote>\n<h4><a id=\"_5443\"></a>默认泛型参数和运算符重载</h4>\n<pre><code class=\"prism language-rust\">\n <span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>ops<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Add</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token attribute attr-name\">#[derive(Debug,PartialEq)]</span>\n <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Point1</span><span class=\"token punctuation\">{<!-- --></span>\n    x<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span>\n    y<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span>\n \n <span class=\"token keyword\">impl</span> <span class=\"token class-name\">Add</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">Point1</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">type</span> <span class=\"token type-definition class-name\">Output</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Point1</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//这里相当于重载 + 号运算符</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span> <span class=\"token punctuation\">,</span> other <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Point1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Point1</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Point1</span><span class=\"token punctuation\">{<!-- --></span>\n            x<span class=\"token punctuation\">:</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">+</span>other<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>\n            y<span class=\"token punctuation\">:</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">+</span>other<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//为了实现两个点相加我们重载了 + 号运算符</span>\n<span class=\"token comment\">//rust 可以重载的运算符有限，只有几个，</span>\n<span class=\"token comment\">// 这个重载和 C++ 中的差不多，就是可以重载的数量太少</span>\n<span class=\"token comment\">//标准库实现：</span>\n<span class=\"token attribute attr-name\">#[doc(alias = <span class=\"token string\">\"+\"</span>)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">trait</span> <span class=\"token type-definition class-name\">Add</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Rhs</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">Self</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//这里的 Add trait 使用了默认泛型参数</span>\n    <span class=\"token comment\">/// The resulting type after applying the `+` operator.</span>\n    <span class=\"token attribute attr-name\">#[stable(feature = <span class=\"token string\">\"rust1\"</span>, since = <span class=\"token string\">\"1.0.0\"</span>)]</span>\n    <span class=\"token keyword\">type</span> <span class=\"token type-definition class-name\">Output</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// Performs the `+` operation.</span>\n    <span class=\"token comment\">///</span>\n    <span class=\"token comment\">/// # Example</span>\n    <span class=\"token comment\">///</span>\n    <span class=\"token comment\">/// ```</span>\n    <span class=\"token comment\">/// assert_eq!(12 + 1, 13);</span>\n    <span class=\"token comment\">/// ```</span>\n    <span class=\"token attribute attr-name\">#[must_use]</span>\n    <span class=\"token attribute attr-name\">#[stable(feature = <span class=\"token string\">\"rust1\"</span>, since = <span class=\"token string\">\"1.0.0\"</span>)]</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Rhs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Output</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上面代码中 Rhs=self 使用了默认泛型参数；没有为 Rhs 指定类型，那么 Rhs 的类型就会默认为 self</p>\n<p>默认参数使用场景：</p>\n<ul><li>扩展一个类型而不破坏现有代码</li><li>允许大部分用户不需要的特定场合进行自定义</li></ul>\n<h5><a id=\"_5498\"></a>用于消除歧义的完全限定语法：调用相同名称的方法</h5>\n<blockquote>\n<p>Rust 不会阻止两个 trait 拥有相同名称的方法，也不会阻止你为同一个类型实现这样的两个 trait</p>\n</blockquote>\n<pre><code class=\"prism language-rust\"> <span class=\"token keyword\">trait</span> <span class=\"token type-definition class-name\">Pilot</span><span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">trait</span> <span class=\"token type-definition class-name\">Wizard</span><span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Human</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">impl</span> <span class=\"token class-name\">Pilot</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">Human</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is your captain speaking.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">impl</span> <span class=\"token class-name\">Wizard</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">Human</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Up\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">impl</span> <span class=\"token class-name\">Human</span><span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n         <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*waving arms furiously*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//上面定义了两个拥有同名方法 fly 的 trait 并且它本身也拥有一个 fly 方法</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span><span class=\"token class-name\">Human</span><span class=\"token punctuation\">;</span>\n    p<span class=\"token punctuation\">.</span><span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//调用自身的</span>\n    <span class=\"token class-name\">Pilot</span><span class=\"token punctuation\">::</span><span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Wizard</span><span class=\"token punctuation\">::</span><span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 在方法名前指定 trait 名称清晰的表明我们要调用哪个实现</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">trait</span> <span class=\"token type-definition class-name\">Animal</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">baby_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Dog</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">baby_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dog\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Animal</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">baby_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Animal\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A baby dog is called a {}\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Dog</span><span class=\"token punctuation\">::</span><span class=\"token function\">baby_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Dog</span>\n    <span class=\"token comment\">// println!(\"A baby dog is called a {}\",Animal::baby_name()); //编译错误</span>\n    <span class=\"token comment\">// 使用完全限定语法来调用 Dog 为 Animal trait 实现的函数</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B baby dog is called a {}\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Dog</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">Animal</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">::</span><span class=\"token function\">baby_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><mark>完全限定语法：</mark></p>\n<pre><code class=\"prism language-rust\"><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Type</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">Trait</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">::</span><span class=\"token function\">function</span><span class=\"token punctuation\">(</span>receiver_if_method<span class=\"token punctuation\">,</span> next_arg<span class=\"token punctuation\">,</span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>可以任何调用函数或方法的地方使用完全限定语法；当代码中存在多个同名实现的时候使用这个语法是非常有用的</strong></p>\n<h5><a id=\"__trait__trait__trait_5577\"></a>用于在 trait 中附带另外一个 trait 功能的超 trait</h5>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>fmt<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">trait</span> <span class=\"token type-definition class-name\">OutlinePrint</span> <span class=\"token punctuation\">:</span> <span class=\"token namespace\">fmt<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Display</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">outline_print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">let</span> output <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> len<span class=\"token operator\">=</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*{}*\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*  {}  *\"</span><span class=\"token punctuation\">,</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*{}*\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Point2</span><span class=\"token punctuation\">{<!-- --></span>\n    x<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span>\n    y<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//因为上面的 OutlinePrint trait 依赖于 Display trait 所要在这里实现这个 trait 否则会报错</span>\n<span class=\"token keyword\">impl</span> <span class=\"token namespace\">fmt<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Display</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">Point2</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">fmt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token namespace\">fmt<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Formatter</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token namespace\">fmt<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Result</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">write!</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span><span class=\"token string\">\"({},{})\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 这个有点像 C++ 的重载 &lt;&lt; 运算符</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">OutlinePrint</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">Point2</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> p2<span class=\"token operator\">=</span> <span class=\"token class-name\">Point2</span><span class=\"token punctuation\">{<!-- --></span>x<span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    p2<span class=\"token punctuation\">.</span><span class=\"token function\">outline_print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h5><a id=\"_newtype__trait_5617\"></a>使用 newtype 模式在外部类型上实现外部 trait</h5>\n<blockquote>\n<p>孤儿规则：只有当类型和对应 trait 中的任意一个定义在本地包内时，才能够为该类型实现这一个 trait。</p>\n<p>我们可以使用 newtype 模式来绕过这个限制</p>\n</blockquote>\n<pre><code class=\"prism language-rust\">    <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Wrapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">impl</span> <span class=\"token namespace\">fmt<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Display</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">Wrapper</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">fmt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span> <span class=\"token punctuation\">,</span> f <span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token namespace\">fmt<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Formatter</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token namespace\">fmt<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Result</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token macro property\">write!</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span><span class=\"token string\">\"[{}]\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">let</span> w<span class=\"token operator\">=</span><span class=\"token class-name\">Wrapper</span><span class=\"token punctuation\">(</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"w = {}\"</span><span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//输出：w = [hello, world]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//上面代码中孤儿规则会阻止我们直接为 Vec&lt;T&gt; 实现 Display trait ,因为它们的类型都被定义在外部包中</span>\n<span class=\"token comment\">//我们可以创建一个持有 Vec&lt;T&gt; 的实例，接着我们就可以使用它实现 Display </span>\n</code></pre>\n<p>###　高级类型</p>\n<h4><a id=\"_newtype__5643\"></a>使用 newtype 模式实现类型安全与抽象</h4>\n<blockquote>\n<p>newtype的另外一个作用就是为类型的某些细节提供抽象能力。</p>\n<p>newtype 模式还可以被用来隐藏内部实现。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>ops<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Add</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Millimeters</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Meters</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Add</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Mteters</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">Millimeters</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">type</span> <span class=\"token type-definition class-name\">Output</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Millimeters</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span> <span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Meters</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Millimeters</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Millimeters</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>other<span class=\"token number\">.0</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//这就是典型的 newtype 模式</span>\n</code></pre>\n</blockquote>\n<h5><a id=\"_5664\"></a>使用类型别名创建同义类型</h5>\n<p><mark>也就是创建类型别名</mark></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">type</span> <span class=\"token type-definition class-name\">Kilometers</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//这里的 Kilometers 就等同于 i32 类型</span>\n</code></pre>\n<pre><code class=\"prism language-rust\">   <span class=\"token comment\">// 类型别名功能</span>\n    <span class=\"token keyword\">type</span> <span class=\"token type-definition class-name\">sy</span><span class=\"token operator\">=</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> y<span class=\"token punctuation\">:</span>sy  <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x+y= {}\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>有时候我们拥有比较长的类型时，就可以使用类型别名来简短类型。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">type</span> <span class=\"token type-definition class-name\">bds</span><span class=\"token operator\">=</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Send</span> <span class=\"token operator\">+</span><span class=\"token lifetime-annotation symbol\">'static</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//这样就可以使用 bds 去替换下面的比较长的类型名</span>\n\n    <span class=\"token keyword\">let</span> f <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span> <span class=\"token class-name\">Send</span> <span class=\"token operator\">+</span> <span class=\"token lifetime-annotation symbol\">'static</span><span class=\"token operator\">&gt;=</span><span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">takes_long_type</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Send</span> <span class=\"token operator\">+</span><span class=\"token lifetime-annotation symbol\">'static</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">returns_long_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Send</span> <span class=\"token operator\">+</span> <span class=\"token lifetime-annotation symbol\">'static</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><strong><code>类型别名的名字也要取得有意义不能乱取！！！</code></strong></p>\n<p>#####　永远不返回的 Never类型</p>\n<blockquote>\n<p>Rust 有一个名为 ！ 的特殊类型，它在类型系统中称为空类型，因为它没有任何值。它也从不返回的函数中充当返回值的类型。</p>\n</blockquote>\n<pre><code class=\"prism language-rust\"> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n     \n  <span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token function\">bar1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//</span>\n    <span class=\"token keyword\">let</span> y<span class=\"token operator\">=</span><span class=\"token function\">bar1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token operator\">!</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//发散函数要有一个 panic! 否则会报错</span>\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x= {}\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">panic!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发散函数！！！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//这里没有太明白，后面再加强一下这里</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">bar1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//这个括号相当于 c/c++ 中的 void </span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这个也代表没有返回的意思\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>类型 ! 的表达式可以被强制转换为其他的任意类型。</code></p>\n<p>使用了 never 的类型：（一些）</p>\n<ul><li>panic!</li><li>循环 loop（它的返回值类型也是 ！）</li><li>continue 的返回值类型也是 !</li></ul>\n<h5><a id=\"_Sized_trait_5732\"></a>动态大小类型和 Sized trait</h5>\n<blockquote>\n<p>动态类型大小　DST；也就是不确定大小类型；它们只有在运行时才能确定其大小</p>\n</blockquote>\n<p>str 就是一个动态类型大小；（<strong>这里是 str 不是 &amp;str</strong>）</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> s1<span class=\"token punctuation\">:</span><span class=\"token keyword\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//str 类型只有在运行时才能确定大小，因此我们不能创建出 str 类型的变量</span>\n    <span class=\"token keyword\">let</span> s2<span class=\"token punctuation\">:</span><span class=\"token keyword\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//上面两个都报错，无法使用</span>\n\n<span class=\"token comment\">//上面代码换成  &amp;str就可以使用了</span>\n<span class=\"token comment\">//因为 &amp;str 实际上就由 str 的地址和它的长度两个值构成的</span>\n\n</code></pre>\n<p>trait 也就是一种动态大小类型，每一个 trait 都是一个可以通过名称来进行引用的动态大小类型。</p>\n<p><strong>Rust 提供了一个特殊的 Sized trait 来确定一个类型的大小在编译时是否可知，rust 会为每一个泛型函数隐式地添加 Sized 约束</strong></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">generic</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>t <span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 上成函数会被隐式转换为：</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">generic</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Sized</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>t <span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><mark>在默认情况下，泛型函数只能被用于在编译时已经知道大小的类型。</mark></p>\n<p>可以使用下面的特殊语法来解除限制：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">generic</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> <span class=\"token operator\">?</span><span class=\"token class-name\">Sized</span> <span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>t <span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*\n?Sized trait 约束表达了与 Sized 相反的含义，我们可以将它理解为：T 可能是也可能不是 Sized 的\n这个语法只能用在 Sized 上，而不能被用于其他 trait\n上面将类型 t 改为了 &amp;T ；因为可能不是 Sized\n*/</span>\n</code></pre>\n<h3><a id=\"_5779\"></a>高级函数与闭包</h3>\n<h4><a id=\"_5781\"></a>函数指针</h4>\n<p>fn 就是函数指针</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add_one</span><span class=\"token punctuation\">(</span>x <span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">{<!-- --></span>\n    x<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">do_twice</span><span class=\"token punctuation\">(</span>f <span class=\"token punctuation\">:</span> <span class=\"token keyword\">fn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">,</span> arg <span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//语法：</span>\nf <span class=\"token punctuation\">:</span> <span class=\"token keyword\">fn</span><span class=\"token punctuation\">(</span>参数列表类型<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> 返回值类型\n</code></pre>\n<blockquote>\n<p>与闭包不同， fn 是一个类型而不是一个 trait ，所以我们可以直接指定 fn 为参数类型，不用声明一个以 Fn trait 为约束的泛型参数</p>\n</blockquote>\n<p><code>函数指针实现了全部 3 种闭包 trait : Fn FnMut FnOnce </code></p>\n<p><strong>因此我们可以把函数指针用作参数传递给一个接收闭包的函数。</strong></p>\n<p>eg: 既可以使用闭包也可以使用命名函数：</p>\n<pre><code class=\"prism language-rust\"> <span class=\"token keyword\">let</span> list_of_numbers <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 使用 map 函数将一个整形动态数组转换为一个字符串动态数组</span>\n    <span class=\"token keyword\">let</span> list_of_strings <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span>list_of_numbers<span class=\"token punctuation\">.</span>\n    <span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>i<span class=\"token closure-punctuation punctuation\">|</span></span> i<span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> list_of_stringsy<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> list_of_numbers\n    <span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ToString</span><span class=\"token punctuation\">::</span>to_string<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//这里必须使用完全限定语法;因为这个作用域中存在多个可用的 to_string 函数</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Status</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Value</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Stop</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> list_of_statuses<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Status</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">0u32</span><span class=\"token punctuation\">..</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Status</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h5><a id=\"_5834\"></a>返回闭包</h5>\n<p><strong>无法在函数直接返回一个闭包</strong></p>\n<p>Rust无法推断出需要多大的空间来存储返回的闭包。</p>\n<p>📖：解决： 使用 trait 对象：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">returns_closure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>x<span class=\"token closure-punctuation punctuation\">|</span></span> x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_5848\"></a>宏</h4>\n<blockquote>\n<p>使用　macro_rules! 构造的声明宏及另外 3 种过程宏：</p>\n<ul><li>用于结构体或枚举的自定义 #[derive] 宏，它可以指定随 derive 属性自动添加的代码</li><li>用于为任意条目添加自定义属性的属性宏</li><li>看起来类似于函数的函数宏，它可以接收并处理一段标记序列</li></ul>\n</blockquote>\n<h5><a id=\"_5856\"></a>宏和函数之间的差别</h5>\n<blockquote>\n<p>宏是一种用于编写其他代码的代码编写方式，也就是元编程范式</p>\n<p>区别：</p>\n<ul><li>函数在定义签名时必须声明自己参数的个数与类型，而宏则能够处理<strong>可变数量的参数</strong>；</li><li>宏的定义要比函数定义复杂得多</li><li>在某个文件中调用宏时，必须提前定义宏或将宏引入当前作用域中，而函数则可以在任意位置定义并在任意位置使用</li></ul>\n</blockquote>\n<h5><a id=\"_macro_rules__5868\"></a>用于通用元编程的 macro_rules! 声明宏</h5>\n<pre><code class=\"prism language-rust\">  <span class=\"token keyword\">let</span> v <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">u32</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 标准库中简化后的 vec! 宏定义</span>\n    <span class=\"token attribute attr-name\">#[macro_export]</span>\n    <span class=\"token macro property\">macro_rules!</span> vec <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token punctuation\">(</span>$ <span class=\"token punctuation\">(</span><span class=\"token variable\">$x</span><span class=\"token punctuation\">:</span><span class=\"token fragment-specifier punctuation\">expr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> temp_vec<span class=\"token operator\">=</span><span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                $<span class=\"token punctuation\">(</span>\n                    temp_vec<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>\n            temp_vec\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//#[macro_export] 意味着这个宏会在它所处的包被引入作用域后可用，缺少了这个标注的宏则不能被引入作用域</span>\n</code></pre>\n<p><strong>我们使用 macro_rules! 及不带感叹号的名称来开始定义宏。</strong></p>\n<h5><a id=\"_5893\"></a>基于属性创建代码的过程宏</h5>\n<blockquote>\n<p>过程宏（它们的形式像函数）：</p>\n<p>有 3 种： 自定义派生宏、属性宏、函数宏</p>\n<p>当创建过程宏时宏的定义必须单独放在它们自己的包中，并使用特殊的包类型。</p>\n</blockquote>\n<p>宏知道的不多，得后面再仔细看一下</p>\n<h1><a id=\"_web__5907\"></a>构建多线程 web 服务器</h1>\n<blockquote>\n<p>超文本传输协议 HTTP 和 传输控制协议 TCP</p>\n<p>它们两个都是基于 请求和响应 的协议</p>\n<p>TCP 是一种底层协议，它描述了信息如何从一个服务器传送到另外一个服务器的细节，但它并不指定信息的具体内容。HTTP 协议建立在 TCP 之上，它定义了请求和响应的内容。</p>\n</blockquote>\n<p>t.len();<br/> println!(“{}”,“<em>“.repeat(len+4));<br/> println!(”</em>{}<em>“,” “.repeat(len+2));<br/> println!(”</em> {} <em>“,output);<br/> println!(”</em>{}<em>“,” “.repeat(len+2));<br/> println!(”{}“,”</em>”.repeat(len+4));<br/> }<br/> }</p>\n<p>struct Point2{<!-- --><br/> x:i32,<br/> y:i32,<br/> }<br/> //因为上面的 OutlinePrint trait 依赖于 Display trait 所要在这里实现这个 trait 否则会报错<br/> impl fmt::Display for Point2{<!-- --><br/> fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result{<!-- --><br/> write!(f,“({},{})”,self.x,self.y)<br/> // 这个有点像 C++ 的重载 &lt;&lt; 运算符<br/> }<br/> }<br/> impl OutlinePrint for Point2{}</p>\n<p>fn main() {<!-- --><br/> let p2= Point2{x:5,y:6};<br/> p2.outline_print();</p>\n<pre><code>\n\n\n#####  使用 newtype 模式在外部类型上实现外部 trait\n\n&gt; 孤儿规则：只有当类型和对应 trait 中的任意一个定义在本地包内时，才能够为该类型实现这一个 trait。\n&gt;\n&gt;  我们可以使用 newtype 模式来绕过这个限制\n\n```rust\n    struct Wrapper(Vec&lt;String&gt;);\n    impl fmt::Display for Wrapper{\n        fn fmt(&amp;self , f : &amp;mut fmt::Formatter) -&gt; fmt::Result{\n            write!(f,\"[{}]\",self.0.join(\", \"))\n        }\n    }\nfn main() {\n\n    let w=Wrapper(vec![String::from(\"hello\"),String::from(\"world\")]);\n    println!(\"w = {}\",w);//输出：w = [hello, world]\n}\n//上面代码中孤儿规则会阻止我们直接为 Vec&lt;T&gt; 实现 Display trait ,因为它们的类型都被定义在外部包中\n//我们可以创建一个持有 Vec&lt;T&gt; 的实例，接着我们就可以使用它实现 Display \n</code></pre>\n<p>###　高级类型</p>\n<h4><a id=\"_newtype__6047\"></a>使用 newtype 模式实现类型安全与抽象</h4>\n<blockquote>\n<p>newtype的另外一个作用就是为类型的某些细节提供抽象能力。</p>\n<p>newtype 模式还可以被用来隐藏内部实现。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>ops<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Add</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Millimeters</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Meters</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Add</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Mteters</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">Millimeters</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">type</span> <span class=\"token type-definition class-name\">Output</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Millimeters</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span> <span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Meters</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Millimeters</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Millimeters</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>other<span class=\"token number\">.0</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//这就是典型的 newtype 模式</span>\n</code></pre>\n</blockquote>\n<h5><a id=\"_6068\"></a>使用类型别名创建同义类型</h5>\n<p><mark>也就是创建类型别名</mark></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">type</span> <span class=\"token type-definition class-name\">Kilometers</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//这里的 Kilometers 就等同于 i32 类型</span>\n</code></pre>\n<pre><code class=\"prism language-rust\">   <span class=\"token comment\">// 类型别名功能</span>\n    <span class=\"token keyword\">type</span> <span class=\"token type-definition class-name\">sy</span><span class=\"token operator\">=</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> y<span class=\"token punctuation\">:</span>sy  <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x+y= {}\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>有时候我们拥有比较长的类型时，就可以使用类型别名来简短类型。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">type</span> <span class=\"token type-definition class-name\">bds</span><span class=\"token operator\">=</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Send</span> <span class=\"token operator\">+</span><span class=\"token lifetime-annotation symbol\">'static</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//这样就可以使用 bds 去替换下面的比较长的类型名</span>\n\n    <span class=\"token keyword\">let</span> f <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span> <span class=\"token class-name\">Send</span> <span class=\"token operator\">+</span> <span class=\"token lifetime-annotation symbol\">'static</span><span class=\"token operator\">&gt;=</span><span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">takes_long_type</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Send</span> <span class=\"token operator\">+</span><span class=\"token lifetime-annotation symbol\">'static</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">returns_long_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Send</span> <span class=\"token operator\">+</span> <span class=\"token lifetime-annotation symbol\">'static</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><strong><code>类型别名的名字也要取得有意义不能乱取！！！</code></strong></p>\n<p>#####　永远不返回的 Never类型</p>\n<blockquote>\n<p>Rust 有一个名为 ！ 的特殊类型，它在类型系统中称为空类型，因为它没有任何值。它也从不返回的函数中充当返回值的类型。</p>\n</blockquote>\n<pre><code class=\"prism language-rust\"> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n     \n  <span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token function\">bar1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//</span>\n    <span class=\"token keyword\">let</span> y<span class=\"token operator\">=</span><span class=\"token function\">bar1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token operator\">!</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//发散函数要有一个 panic! 否则会报错</span>\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x= {}\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">panic!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发散函数！！！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//这里没有太明白，后面再加强一下这里</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">bar1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//这个括号相当于 c/c++ 中的 void </span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这个也代表没有返回的意思\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>类型 ! 的表达式可以被强制转换为其他的任意类型。</code></p>\n<p>使用了 never 的类型：（一些）</p>\n<ul><li>panic!</li><li>循环 loop（它的返回值类型也是 ！）</li><li>continue 的返回值类型也是 !</li></ul>\n<h5><a id=\"_Sized_trait_6136\"></a>动态大小类型和 Sized trait</h5>\n<blockquote>\n<p>动态类型大小　DST；也就是不确定大小类型；它们只有在运行时才能确定其大小</p>\n</blockquote>\n<p>str 就是一个动态类型大小；（<strong>这里是 str 不是 &amp;str</strong>）</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> s1<span class=\"token punctuation\">:</span><span class=\"token keyword\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//str 类型只有在运行时才能确定大小，因此我们不能创建出 str 类型的变量</span>\n    <span class=\"token keyword\">let</span> s2<span class=\"token punctuation\">:</span><span class=\"token keyword\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//上面两个都报错，无法使用</span>\n\n<span class=\"token comment\">//上面代码换成  &amp;str就可以使用了</span>\n<span class=\"token comment\">//因为 &amp;str 实际上就由 str 的地址和它的长度两个值构成的</span>\n\n</code></pre>\n<p>trait 也就是一种动态大小类型，每一个 trait 都是一个可以通过名称来进行引用的动态大小类型。</p>\n<p><strong>Rust 提供了一个特殊的 Sized trait 来确定一个类型的大小在编译时是否可知，rust 会为每一个泛型函数隐式地添加 Sized 约束</strong></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">generic</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>t <span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 上成函数会被隐式转换为：</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">generic</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Sized</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>t <span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><mark>在默认情况下，泛型函数只能被用于在编译时已经知道大小的类型。</mark></p>\n<p>可以使用下面的特殊语法来解除限制：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">generic</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> <span class=\"token operator\">?</span><span class=\"token class-name\">Sized</span> <span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>t <span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*\n?Sized trait 约束表达了与 Sized 相反的含义，我们可以将它理解为：T 可能是也可能不是 Sized 的\n这个语法只能用在 Sized 上，而不能被用于其他 trait\n上面将类型 t 改为了 &amp;T ；因为可能不是 Sized\n*/</span>\n</code></pre>\n<h3><a id=\"_6183\"></a>高级函数与闭包</h3>\n<h4><a id=\"_6185\"></a>函数指针</h4>\n<p>fn 就是函数指针</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add_one</span><span class=\"token punctuation\">(</span>x <span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">{<!-- --></span>\n    x<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">do_twice</span><span class=\"token punctuation\">(</span>f <span class=\"token punctuation\">:</span> <span class=\"token keyword\">fn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">,</span> arg <span class=\"token punctuation\">:</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//语法：</span>\nf <span class=\"token punctuation\">:</span> <span class=\"token keyword\">fn</span><span class=\"token punctuation\">(</span>参数列表类型<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> 返回值类型\n</code></pre>\n<blockquote>\n<p>与闭包不同， fn 是一个类型而不是一个 trait ，所以我们可以直接指定 fn 为参数类型，不用声明一个以 Fn trait 为约束的泛型参数</p>\n</blockquote>\n<p><code>函数指针实现了全部 3 种闭包 trait : Fn FnMut FnOnce </code></p>\n<p><strong>因此我们可以把函数指针用作参数传递给一个接收闭包的函数。</strong></p>\n<p>eg: 既可以使用闭包也可以使用命名函数：</p>\n<pre><code class=\"prism language-rust\"> <span class=\"token keyword\">let</span> list_of_numbers <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 使用 map 函数将一个整形动态数组转换为一个字符串动态数组</span>\n    <span class=\"token keyword\">let</span> list_of_strings <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span>list_of_numbers<span class=\"token punctuation\">.</span>\n    <span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>i<span class=\"token closure-punctuation punctuation\">|</span></span> i<span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> list_of_stringsy<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> list_of_numbers\n    <span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ToString</span><span class=\"token punctuation\">::</span>to_string<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//这里必须使用完全限定语法;因为这个作用域中存在多个可用的 to_string 函数</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Status</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Value</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Stop</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> list_of_statuses<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Status</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">0u32</span><span class=\"token punctuation\">..</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Status</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h5><a id=\"_6238\"></a>返回闭包</h5>\n<p><strong>无法在函数直接返回一个闭包</strong></p>\n<p>Rust无法推断出需要多大的空间来存储返回的闭包。</p>\n<p>📖：解决： 使用 trait 对象：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">returns_closure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>x<span class=\"token closure-punctuation punctuation\">|</span></span> x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_6252\"></a>宏</h4>\n<blockquote>\n<p>使用　macro_rules! 构造的声明宏及另外 3 种过程宏：</p>\n<ul><li>用于结构体或枚举的自定义 #[derive] 宏，它可以指定随 derive 属性自动添加的代码</li><li>用于为任意条目添加自定义属性的属性宏</li><li>看起来类似于函数的函数宏，它可以接收并处理一段标记序列</li></ul>\n</blockquote>\n<h5><a id=\"_6260\"></a>宏和函数之间的差别</h5>\n<blockquote>\n<p>宏是一种用于编写其他代码的代码编写方式，也就是元编程范式</p>\n<p>区别：</p>\n<ul><li>函数在定义签名时必须声明自己参数的个数与类型，而宏则能够处理<strong>可变数量的参数</strong>；</li><li>宏的定义要比函数定义复杂得多</li><li>在某个文件中调用宏时，必须提前定义宏或将宏引入当前作用域中，而函数则可以在任意位置定义并在任意位置使用</li></ul>\n</blockquote>\n<h5><a id=\"_macro_rules__6272\"></a>用于通用元编程的 macro_rules! 声明宏</h5>\n<pre><code class=\"prism language-rust\">  <span class=\"token keyword\">let</span> v <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">u32</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 标准库中简化后的 vec! 宏定义</span>\n    <span class=\"token attribute attr-name\">#[macro_export]</span>\n    <span class=\"token macro property\">macro_rules!</span> vec <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token punctuation\">(</span>$ <span class=\"token punctuation\">(</span><span class=\"token variable\">$x</span><span class=\"token punctuation\">:</span><span class=\"token fragment-specifier punctuation\">expr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> temp_vec<span class=\"token operator\">=</span><span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                $<span class=\"token punctuation\">(</span>\n                    temp_vec<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>\n            temp_vec\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//#[macro_export] 意味着这个宏会在它所处的包被引入作用域后可用，缺少了这个标注的宏则不能被引入作用域</span>\n</code></pre>\n<p><strong>我们使用 macro_rules! 及不带感叹号的名称来开始定义宏。</strong></p>\n<h5><a id=\"_6297\"></a>基于属性创建代码的过程宏</h5>\n<blockquote>\n<p>过程宏（它们的形式像函数）：</p>\n<p>有 3 种： 自定义派生宏、属性宏、函数宏</p>\n<p>当创建过程宏时宏的定义必须单独放在它们自己的包中，并使用特殊的包类型。</p>\n</blockquote>\n<p>宏知道的不多，得后面再仔细看一下</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 1, "csharp": 0, "python": 1, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-05-03 06:00:00", "summary": "学习建议：先从整体出发，不要让自己陷入到细节中去和自己已知的知识建立联系和一样采用组合的手段实现代码复用，不要深思为什么不是继承学会阅读源码，从源码中学习设计哲学使用项目名在终端中构建项目使用来构建和"}