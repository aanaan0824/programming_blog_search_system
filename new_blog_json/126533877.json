{"blogid": "126533877", "writerAge": "码龄2年", "writerBlogNum": "91", "writerCollect": "635", "writerComment": "133", "writerFan": "5622", "writerGrade": "4级", "writerIntegral": "1229", "writerName": "乘凉~", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126533877.jpg", "writerRankTotal": "13362", "writerRankWeekly": "2356", "writerThumb": "141", "writerVisitNum": "117857", "blog_read_count": "182", "blog_time": "已于 2022-08-29 21:31:57 修改", "blog_title": "【八】http服务器开发--实现一个http服务器", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_3\">一、整体概述</a></li><li><a href=\"#http_10\">二、接收http请求</a></li><li><a href=\"#http_189\">三、响应http请求</a></li><li><a href=\"#_269\">四、完整代码即效果</a></li><li><ul><li><a href=\"#41__271\">4.1 完整代码：</a></li><li><a href=\"#42__709\">4.2 实现过程</a></li></ul>\n</li><li><a href=\"#stat_738\">附（stat函数）</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_3\"></a>一、整体概述</h1>\n<p>本节主要实现一个http服务器的示例；该http服务器的主要功能是，在浏览器端访问服务器ip+html文件名，结果为如果服务端如果存在我们想要的html文件，则将其展示在浏览器端。</p>\n<p>整体流程下图所示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\64ad6286609643ee8ee720ceb236fd22.png\"/><br/> 主要步骤就三个，接收http请求，解析http请求，相应http请求。</p>\n<h1><a id=\"http_10\"></a>二、接收http请求</h1>\n<p>这部分主要负责接收http请求，并对请求信息进行解析。</p>\n<p>从上一节中我们知道，客户端发来的请求信息，主要包括请求行，请求头部，请求内容等组成，<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3750c0466c304732b468fb0ccbd1c2f9.png\"/><br/> 通过解析请求行我们可以得到请求方法和URL等，然后解析请求头部信息，那怎么判断请求头部信息结束了呢？由图中可以看出，当连续解析到两个回车符时，就是请求头部结束了，剩下的就是请求数据。</p>\n<p>首先是解析请求行，解析请求行的函数如下:</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//读取请求行：返回值： -1 表示读取出错， 等于0表示读到一个空行， 大于0 表示成功读取一行</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">get_line</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sock<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//计数器，用来对当前已经读取的字符数进行计数</span>\n\t<span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//字符串结束符</span>\n\t<span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">//当前读取的字符数小于传入的字符数size-1，且ch不是换行符时</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>count<span class=\"token operator\">&lt;</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> ch<span class=\"token operator\">!=</span><span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tlen <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>sock<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ch<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将sock里的数据读到ch中，每次读1个字符；当返回值len为1时，说明返回的是1，即读取成功</span>\n\t\t\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">'\\r'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//如果读到的是回车符，则continue，进行下一次循环</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//如果读到的是换行符，说明这一行读完了，break跳出循环</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token comment\">//buf[count] = '\\0';</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">//这里处理一般的字符</span>\n\t\t\tbuf<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span>\n\t\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t<span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> len <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//读取出错</span>\n\t\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcount <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> \n        <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">// read 返回0,客户端关闭sock 连接.</span>\n\t\t\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"client close.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcount <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n        buf<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//为读取的这一行添加字符串结束符</span>\n\t\n\t<span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>解析完请求行后，我们需要拿出请求行中的URL，然后拿到URL中包含的html文件名，并在我们本地的html文件夹中搜索是否存在该URL对应的html文件。<br/> 编写了一个名为do_http_request的函数去解析收到的请求信息，功能为解析请求拿到URL，并在本地路径中查找该html的功能，代码过程如下：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">do_http_request</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> client_sock<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> method<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//请求的方法，是get还是post</span>\n\t<span class=\"token keyword\">char</span> url<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//请求的URL</span>\n\t<span class=\"token keyword\">char</span> path<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">stat</span>  st<span class=\"token punctuation\">;</span>\n\t\n\t\n\t<span class=\"token comment\">/*读取客户端发送的http 请求*/</span>\n\t\n\t\n\t<span class=\"token comment\">//1.读取请求行</span>\n\tlen <span class=\"token operator\">=</span> <span class=\"token function\">get_line</span><span class=\"token punctuation\">(</span>client_sock<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//请求行只要一行，因此只需要读一次即可</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--line 96,do_http_request --,result for get_line is [%s]\\n\"</span><span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>   <span class=\"token comment\">//读到了请求行，首先获取请求的方法</span>\n\t\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isspace</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//如果不是空格，且没超过method的容量最大值；遇到空格说明请求方法结束了</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tmethod<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//用来存放请求方法，是get还是post</span>\n\t\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\tj<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\tmethod<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>debug<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"request method: %s\\n\"</span><span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strncasecmp</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//只处理get请求</span>\n\t        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>debug<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"method = GET\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t    <span class=\"token comment\">//获取url</span>\n\t\t    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">isspace</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//跳过白空格</span>\n\t\t    i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isspace</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//碰到空格则跳出循环，即读到了完整的URL</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t    url<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//用来存放URL</span>\n\t\t\t    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t    j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t    <span class=\"token punctuation\">}</span>\n\t\t\n\t\t    url<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>debug<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----url is: [%s]\\n\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t\t<span class=\"token comment\">//继续读取http 头部</span>\n\t\t    <span class=\"token keyword\">do</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t    len <span class=\"token operator\">=</span> <span class=\"token function\">get_line</span><span class=\"token punctuation\">(</span>client_sock<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>debug<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read: %s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t    <span class=\"token punctuation\">}</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">//***定位服务器本地的html文件***</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">//处理url 中的问号?，因为有的url是带着问号的，我们这里只取问号前面的作为URL</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pos <span class=\"token operator\">=</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token char\">'?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//查找问号第一次出现的位置</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token operator\">*</span>pos <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将问号的地方换成\\0，即字符串结束符,表示此URL到此结束</span>\n\t\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----real url: [%s]\\n\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\n\t\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"./html_docs/%s\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//./html_docs是我们存放html文件的文件夹路径</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>debug<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----path is: [%s]\\n\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">//执行http 响应</span>\n\t\t\t<span class=\"token comment\">//判断文件是否存在，如果存在就响应200 OK，同时发送相应的html 文件,如果不存在，就响应 404 NOT FOUND.</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">stat</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>st<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//文件不存在或是出错</span>\n\t\t\t\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"stat %s failed. reason: %s\\n\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t    <span class=\"token function\">not_found</span><span class=\"token punctuation\">(</span>client_sock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> \n            <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//文件存在</span>\n\t\t\t\n\t\t\t    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">S_ISDIR</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span>st_mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/index.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\n\t\t\t\t<span class=\"token function\">do_http_response</span><span class=\"token punctuation\">(</span>client_sock<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\n\t\n\t    <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> \n        <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//非get请求, 读取http 头部，并响应客户端 501 \tMethod Not Implemented</span>\n\t\t\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"warning! other request [%s]\\n\"</span><span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">do</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t    len <span class=\"token operator\">=</span> <span class=\"token function\">get_line</span><span class=\"token punctuation\">(</span>client_sock<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>debug<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read: %s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t    <span class=\"token punctuation\">}</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">//unimplemented(client_sock);   //在响应时再实现</span>\n\t\t\t\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\t\t\n\t\t\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//请求格式有问题，出错处理</span>\n\t\t<span class=\"token comment\">//bad_request(client_sock);   //在响应时再实现</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"http_189\"></a>三、响应http请求</h1>\n<p>接收并解析客户端的请求后，如果找到客户端所要求请的内容，则需要对其进行响应。</p>\n<p>响应的格式如下所示：<br/> 主要包括响应头部（状态行+消息报头）、响应正文两部分。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9b78add739e0479293c4fe888d8eed44.png\"/><br/> 组装响应头部的实现代码如下所示：</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">/****************************\n *返回关于响应文件信息的http 头部\n *输入： \n *     client_sock - 客服端socket 句柄\n *     resource    - 文件的句柄 \n *返回值： 成功返回0 ，失败返回-1\n******************************/</span>\n<span class=\"token keyword\">int</span>  <span class=\"token function\">headers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> client_sock<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>resource<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">stat</span> st<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> fileid <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> tmp<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"HTTP/1.0 200 OK\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Server: anchenliang test Server\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Content-Type: text/html\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Connection: Close\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\tfileid <span class=\"token operator\">=</span> <span class=\"token function\">fileno</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取该文件的file id</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">fstat</span><span class=\"token punctuation\">(</span>fileid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>st<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//同stat函数类似，查看st文件是否存在，返回-1则说明文件不存在的</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">inner_error</span><span class=\"token punctuation\">(</span>client_sock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//发送500的错误码，表示服务器内部出错</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token function\">snprintf</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Content-Length: %ld\\r\\n\\r\\n\"</span><span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">.</span>st_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//连续两个回车符和换行符表示这是消息头部的结束了，st.st_size表示的是st文件的长度</span>\n\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>debug<span class=\"token punctuation\">)</span> <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"header: %s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>client_sock<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//send函数表示向socket函数发送消息，返回值小于0表示发送失败了</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"send failed. data: %s, reason: %s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>组装响应内容的函数如下所示：</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">/****************************\n *说明：实现将html文件的内容按行\n        读取并送给客户端\n ****************************/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">cat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> client_sock<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>resource<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将resource文件中的内容读到buf中，fgets函数每次读取一行</span>\n\t\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">feof</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//feof用来判断resource文件是否读到尾部了，文件结束返回非0，文件未结束返回0</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>client_sock<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将buf的内容写进socket，即发送这一行内容</span>\n\t\t\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//发送body 的过程中出现问题,怎么办？1.重试？ 2.</span>\n\t\t\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"send body error. reason: %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>debug<span class=\"token punctuation\">)</span> <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_269\"></a>四、完整代码即效果</h1>\n<p>实现一个http服务器，功能为输入想要访问的html文件的URL，得到正确的响应html文件。下面附上完整代码以及实现过程；</p>\n<h2><a id=\"41__271\"></a>4.1 完整代码：</h2>\n<pre><code class=\"prism language-c\"> <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctype.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;errno.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h&gt;</span></span>\n\n\n\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SERVER_PORT</span> <span class=\"token expression\"><span class=\"token number\">80</span></span></span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> debug <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">get_line</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sock<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">do_http_request</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> client_sock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">do_http_response</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> client_sock<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span>  <span class=\"token function\">headers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> client_sock<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">cat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> client_sock<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">not_found</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> client_sock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">inner_error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> client_sock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">do_http_response1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> client_sock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">int</span> sock<span class=\"token punctuation\">;</span><span class=\"token comment\">//代表信箱</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> server_addr<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token comment\">//1.美女创建信箱</span>\n    sock <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//2.清空标签，写上地址和端口号</span>\n    <span class=\"token function\">bzero</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>server_addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>server_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    server_addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span><span class=\"token comment\">//选择协议族IPV4</span>\n    server_addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span>INADDR_ANY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//监听本地所有IP地址</span>\n    server_addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>SERVER_PORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//绑定端口号</span>\n\n    <span class=\"token comment\">//实现标签贴到收信得信箱上</span>\n    <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>sock<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>server_addr<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>server_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//把信箱挂置到传达室，这样，就可以接收信件了</span>\n    <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>sock<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//万事俱备，只等来信</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"等待客户端的连接\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">int</span> done <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> client<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> client_sock<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> client_ip<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">socklen_t</span>  client_addr_len<span class=\"token punctuation\">;</span>\n        client_addr_len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        client_sock <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>sock<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>client<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>client_addr_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//打印客服端IP地址和端口号</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"client ip: %s\\t port : %d\\n\"</span><span class=\"token punctuation\">,</span>\n                 <span class=\"token function\">inet_ntop</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>client<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr<span class=\"token punctuation\">,</span>client_ip<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>client_ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                 <span class=\"token function\">ntohs</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">.</span>sin_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/*处理http 请求,读取客户端发送的数据*/</span>\n        <span class=\"token function\">do_http_request</span><span class=\"token punctuation\">(</span>client_sock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>client_sock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>sock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">do_http_request</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> client_sock<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> method<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//请求的方法，是get还是post</span>\n\t<span class=\"token keyword\">char</span> url<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//请求的URL</span>\n\t<span class=\"token keyword\">char</span> path<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">stat</span>  st<span class=\"token punctuation\">;</span><span class=\"token comment\">//用于stat函数执行后，保存文件状态</span>\n\t\n\t\n\t<span class=\"token comment\">/*读取客户端发送的http 请求*/</span>\n\t\n\t\n\t<span class=\"token comment\">//1.读取请求行</span>\n\tlen <span class=\"token operator\">=</span> <span class=\"token function\">get_line</span><span class=\"token punctuation\">(</span>client_sock<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//请求行只要一行，因此只需要读一次即可</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--line 96,do_http_request --,result for get_line is [%s]\\n\"</span><span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>   <span class=\"token comment\">//读到了请求行，首先获取请求的方法</span>\n\t\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isspace</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//如果不是空格，且没超过method的容量最大值；遇到空格说明请求方法结束了</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tmethod<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//用来存放请求方法，是get还是post</span>\n\t\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\tj<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\tmethod<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>debug<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"request method: %s\\n\"</span><span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strncasecmp</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//只处理get请求</span>\n\t        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>debug<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"method = GET\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t    <span class=\"token comment\">//获取url</span>\n\t\t    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">isspace</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//跳过白空格</span>\n\t\t    i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isspace</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//碰到空格则跳出循环，即读到了完整的URL</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t    url<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//用来存放URL</span>\n\t\t\t    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t    j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t    <span class=\"token punctuation\">}</span>\n\t\t\n\t\t    url<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>debug<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----url is: [%s]\\n\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t\t<span class=\"token comment\">//继续读取http 头部</span>\n\t\t    <span class=\"token keyword\">do</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t    len <span class=\"token operator\">=</span> <span class=\"token function\">get_line</span><span class=\"token punctuation\">(</span>client_sock<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>debug<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read: %s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t    <span class=\"token punctuation\">}</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">//***定位服务器本地的html文件***</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">//处理url 中的问号?，因为有的url是带着问号的，我们这里只取问号前面的作为URL</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pos <span class=\"token operator\">=</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token char\">'?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//查找问号第一次出现的位置</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token operator\">*</span>pos <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将问号的地方换成\\0，即字符串结束符,表示此URL到此结束</span>\n\t\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----real url: [%s]\\n\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\n\t\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"./html_docs/%s\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//./html_docs是我们存放html文件的文件夹路径</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>debug<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----path is: [%s]\\n\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//do_http_response1(client_sock);</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">//执行http 响应</span>\n\t\t\t<span class=\"token comment\">//判断文件是否存在，如果存在就响应200 OK，同时发送相应的html 文件,如果不存在，就响应 404 NOT FOUND.</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">stat</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>st<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//文件不存在或是出错</span>\n\t\t\t\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"stat %s failed. reason: %s\\n\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t    <span class=\"token function\">not_found</span><span class=\"token punctuation\">(</span>client_sock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> \n            <span class=\"token punctuation\">{<!-- --></span>   <span class=\"token comment\">//文件存在</span>\n\t\t\t\n\t\t\t    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">S_ISDIR</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span>st_mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//S_ISDIR用来判断st是否是一个目录</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/index.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//在path的字符串后面加上/index.html</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\n\t\t\t\t<span class=\"token function\">do_http_response</span><span class=\"token punctuation\">(</span>client_sock<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\n\t\n\t    <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> \n        <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//非get请求, 读取http 头部，并响应客户端 501 \tMethod Not Implemented</span>\n\t\t\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"warning! other request [%s]\\n\"</span><span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">do</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t    len <span class=\"token operator\">=</span> <span class=\"token function\">get_line</span><span class=\"token punctuation\">(</span>client_sock<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>debug<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read: %s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t    <span class=\"token punctuation\">}</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">//unimplemented(client_sock);   //在响应时再实现</span>\n\t\t\t\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\t\t\n\t\t\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//请求格式有问题，出错处理</span>\n\t\t<span class=\"token comment\">//bad_request(client_sock);   //在响应时再实现</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t\n\t\n\t\n\t\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*响应http的函数*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">do_http_response</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> client_sock<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>path<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tFILE <span class=\"token operator\">*</span>resource <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\n\tresource <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>resource <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">not_found</span><span class=\"token punctuation\">(</span>client_sock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token comment\">//1.发送http 头部</span>\n\tret <span class=\"token operator\">=</span> <span class=\"token function\">headers</span><span class=\"token punctuation\">(</span>client_sock<span class=\"token punctuation\">,</span> resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">//2.发送http body .</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t    <span class=\"token function\">cat</span><span class=\"token punctuation\">(</span>client_sock<span class=\"token punctuation\">,</span> resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/****************************\n *返回关于响应文件信息的http 头部\n *输入： \n *     client_sock - 客服端socket 句柄\n *     resource    - 文件的句柄 \n *返回值： 成功返回0 ，失败返回-1\n******************************/</span>\n<span class=\"token keyword\">int</span>  <span class=\"token function\">headers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> client_sock<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>resource<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">stat</span> st<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> fileid <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> tmp<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"HTTP/1.0 200 OK\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Server: anchenliang test Server\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Content-Type: text/html\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Connection: Close\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\tfileid <span class=\"token operator\">=</span> <span class=\"token function\">fileno</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取该文件的file id</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">fstat</span><span class=\"token punctuation\">(</span>fileid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>st<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//同stat函数类似，查看st文件是否存在，返回-1则说明文件不存在的</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">inner_error</span><span class=\"token punctuation\">(</span>client_sock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//发送500的错误码，表示服务器内部出错</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token function\">snprintf</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Content-Length: %ld\\r\\n\\r\\n\"</span><span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">.</span>st_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//连续两个回车符和换行符表示这是消息头部的结束了，st.st_size表示的是st文件的长度</span>\n\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>debug<span class=\"token punctuation\">)</span> <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"header: %s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>client_sock<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//send函数表示向socket函数发送消息，返回值小于0表示发送失败了</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"send failed. data: %s, reason: %s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/****************************\n *说明：实现将html文件的内容按行\n        读取并送给客户端\n ****************************/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">cat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> client_sock<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>resource<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将resource文件中的内容读到buf中，fgets函数每次读取一行</span>\n\t\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">feof</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//feof用来判断resource文件是否读到尾部了，文件结束返回非0，文件未结束返回0</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>client_sock<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将buf的内容写进socket，即发送这一行内容</span>\n\t\t\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//发送body 的过程中出现问题,怎么办？1.重试？ 2.</span>\n\t\t\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"send body error. reason: %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>debug<span class=\"token punctuation\">)</span> <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">do_http_response1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> client_sock<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>main_header <span class=\"token operator\">=</span> <span class=\"token string\">\"HTTP/1.0 200 OK\\r\\nServer: http Server\\r\\nContent-Type: text/html\\r\\nConnection: Close\\r\\n\"</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> welcome_content <span class=\"token operator\">=</span> <span class=\"token string\">\"\\\n&lt;html lang=\\\"zh-CN\\\"&gt;\\n\\\n&lt;head&gt;\\n\\\n&lt;meta content=\\\"text/html; charset=utf-8\\\" http-equiv=\\\"Content-Type\\\"&gt;\\n\\\n&lt;title&gt;This is a test&lt;/title&gt;\\n\\\n&lt;/head&gt;\\n\\\n&lt;body&gt;\\n\\\n&lt;div align=center height=\\\"500px\\\" &gt;\\n\\\n&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;\\n\\\n&lt;h2&gt;大家好，欢迎学习网络编程&lt;/h2&gt;&lt;br/&gt;&lt;br/&gt;\\n\\\n&lt;form action=\\\"commit\\\" method=\\\"post\\\"&gt;\\n\\\n尊姓大名: &lt;input type=\\\"text\\\" name=\\\"name\\\" /&gt;\\n\\\n&lt;br/&gt;芳龄几何: &lt;input type=\\\"password\\\" name=\\\"age\\\" /&gt;\\n\\\n&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;input type=\\\"submit\\\" value=\\\"提交\\\" /&gt;\\n\\\n&lt;input type=\\\"reset\\\" value=\\\"重置\\\" /&gt;\\n\\\n&lt;/form&gt;\\n\\\n&lt;/div&gt;\\n\\\n&lt;/body&gt;\\n\\\n&lt;/html&gt;\"</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//1. 发送main_header</span>\n\t<span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>client_sock<span class=\"token punctuation\">,</span> main_header<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>main_header<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>debug<span class=\"token punctuation\">)</span> <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"... do_http_response...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>debug<span class=\"token punctuation\">)</span> <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"write[%d]: %s\"</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">,</span> main_header<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">//2. 生成Content-Length </span>\n\t<span class=\"token keyword\">char</span> send_buf<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> wc_len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>welcome_content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tlen <span class=\"token operator\">=</span> <span class=\"token function\">snprintf</span><span class=\"token punctuation\">(</span>send_buf<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Content-Length: %d\\r\\n\\r\\n\"</span><span class=\"token punctuation\">,</span> wc_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//两个回车换行符，表示结束</span>\n\tlen <span class=\"token operator\">=</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>client_sock<span class=\"token punctuation\">,</span> send_buf<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//发送Content-Length</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>debug<span class=\"token punctuation\">)</span> <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"write[%d]: %s\"</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">,</span> send_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\tlen <span class=\"token operator\">=</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>client_sock<span class=\"token punctuation\">,</span> welcome_content<span class=\"token punctuation\">,</span> wc_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>debug<span class=\"token punctuation\">)</span> <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"write[%d]: %s\"</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">,</span> welcome_content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\">//读取请求行：返回值： -1 表示读取出错， 等于0表示读到一个空行， 大于0 表示成功读取一行</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">get_line</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sock<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//计数器，用来对当前已经读取的字符数进行计数</span>\n\t<span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//字符串结束符</span>\n\t<span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">//当前读取的字符数小于传入的字符数size-1，且ch不是换行符时</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>count<span class=\"token operator\">&lt;</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> ch<span class=\"token operator\">!=</span><span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\tlen <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>sock<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ch<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将sock里的数据读到ch中，每次读1个字符；当返回值len为1时，说明返回的是1，即读取成功</span>\n\t\t\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">'\\r'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//如果读到的是回车符，则continue，进行下一次循环</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//如果读到的是换行符，说明这一行读完了，break跳出循环</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token comment\">//buf[count] = '\\0';</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">//这里处理一般的字符</span>\n\t\t\tbuf<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span>\n\t\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t<span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> len <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//读取出错</span>\n\t\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcount <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> \n        <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">// read 返回0,客户端关闭sock 连接.</span>\n\t\t\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"client close.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcount <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n        buf<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//为读取的这一行添加字符串结束符</span>\n\t\n\t<span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">not_found</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> client_sock<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> reply <span class=\"token operator\">=</span> <span class=\"token string\">\"HTTP/1.0 404 NOT FOUND\\r\\n\\\nContent-Type: text/html\\r\\n\\\n\\r\\n\\\n&lt;HTML lang=\\\"zh-CN\\\"&gt;\\r\\n\\\n&lt;meta content=\\\"text/html; charset=utf-8\\\" http-equiv=\\\"Content-Type\\\"&gt;\\r\\n\\\n&lt;HEAD&gt;\\r\\n\\\n&lt;TITLE&gt;NOT FOUND&lt;/TITLE&gt;\\r\\n\\\n&lt;/HEAD&gt;\\r\\n\\\n&lt;BODY&gt;\\r\\n\\\n\t&lt;P&gt;文件不存在！\\r\\n\\\n    &lt;P&gt;The server could not fulfill your request because the resource specified is unavailable or nonexistent.\\r\\n\\\n&lt;/BODY&gt;\\r\\n\\\n&lt;/HTML&gt;\"</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>client_sock<span class=\"token punctuation\">,</span> reply<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>debug<span class=\"token punctuation\">)</span> <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"send reply failed. reason: %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">inner_error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> client_sock<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> reply <span class=\"token operator\">=</span> <span class=\"token string\">\"HTTP/1.0 500 Internal Sever Error\\r\\n\\\nContent-Type: text/html\\r\\n\\\n\\r\\n\\\n&lt;HTML lang=\\\"zh-CN\\\"&gt;\\r\\n\\\n&lt;meta content=\\\"text/html; charset=utf-8\\\" http-equiv=\\\"Content-Type\\\"&gt;\\r\\n\\\n&lt;HEAD&gt;\\r\\n\\\n&lt;TITLE&gt;Inner Error&lt;/TITLE&gt;\\r\\n\\\n&lt;/HEAD&gt;\\r\\n\\\n&lt;BODY&gt;\\r\\n\\\n    &lt;P&gt;服务器内部出错.\\r\\n\\\n&lt;/BODY&gt;\\r\\n\\\n&lt;/HTML&gt;\"</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>client_sock<span class=\"token punctuation\">,</span> reply<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>debug<span class=\"token punctuation\">)</span> <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"send reply failed. reason: %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"42__709\"></a>4.2 实现过程</h2>\n<p>第一步：将以上代码复制进minihttp.c文件中，编译：gcc minihttp.c -o minihttp<br/> 第二步：新建一个html_dock文件夹，里面放置一个test.html文件。文件内容如下所示：</p>\n<pre><code class=\"prism language-css\"><span class=\"token selector\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n\t&lt;meta charset=\"utf-8\"&gt;\n\t&lt;title&gt;test&lt;/title&gt;\n\t&lt;style&gt;\n\t\tbody</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token property\">padding</span><span class=\"token punctuation\">:</span>50px<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\t&lt;p&gt;恭喜，http服务器示例测试成功&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\t\n\n\n</code></pre>\n<p>第三步：运行minihttp文件，<code>./minihttp</code><br/> 第四步：在浏览器访问你的<code>ip(或者域名)+test.html</code>，示例：<code>http://anchenliang.com/test.html</code>，结果如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\22b85124a2d8497daf9d6b6eec26cbbf.png\"/></p>\n<h1><a id=\"stat_738\"></a>附（stat函数）</h1>\n<p><strong>作用：</strong><br/> 返回文件的状态信息</p>\n<p><strong>头文件</strong>：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h&gt;</span></span>\n</code></pre>\n<p><strong>函数原型</strong>：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">stat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">stat</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">fstat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">stat</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">lstat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">stat</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><code>path</code>:<br/> 文件的路径<br/> <code>buf</code>:<br/> 传入的保存文件状态的指针，用于保存文件的状态<br/> <strong>返回值</strong>：<br/> 成功返回0，失败返回-1，设置errno</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">stat</span> <span class=\"token punctuation\">{<!-- --></span>\n               <span class=\"token class-name\">dev_t</span>     st_dev<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* ID of device containing file */</span>\n               <span class=\"token class-name\">ino_t</span>     st_ino<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* inode number */</span>\n               <span class=\"token class-name\">mode_t</span>    st_mode<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* S_ISREG(st_mode)  是一个普通文件  S_ISDIR(st_mode)  是一个目录*/</span>\n               \n               <span class=\"token class-name\">nlink_t</span>   st_nlink<span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* number of hard links */</span>\n               <span class=\"token class-name\">uid_t</span>     st_uid<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* user ID of owner */</span>\n               <span class=\"token class-name\">gid_t</span>     st_gid<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* group ID of owner */</span>\n               <span class=\"token class-name\">dev_t</span>     st_rdev<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* device ID (if special file) */</span>\n               <span class=\"token class-name\">off_t</span>     st_size<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* total size, in bytes */</span>\n               <span class=\"token class-name\">blksize_t</span> st_blksize<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* blocksize for filesystem I/O */</span>\n               <span class=\"token class-name\">blkcnt_t</span>  st_blocks<span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* number of 512B blocks allocated */</span>\n               <span class=\"token class-name\">time_t</span>    st_atime<span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* time of last access */</span>\n               <span class=\"token class-name\">time_t</span>    st_mtime<span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* time of last modification */</span>\n               <span class=\"token class-name\">time_t</span>    st_ctime<span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* time of last status change */</span>\n           <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-29 21:31:57", "summary": "文章目录一、整体概述二、接收请求三、响应请求四、完整代码即效果完整代码：实现过程附函数一、整体概述本节主要实现一个服务器的示例；该服务器的主要功能是，在浏览器端访问服务器文件名，结果为如果服务端如果存"}