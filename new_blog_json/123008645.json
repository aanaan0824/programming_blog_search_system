{"blogid": "123008645", "writerAge": "码龄14年", "writerBlogNum": "205", "writerCollect": "505", "writerComment": "90", "writerFan": "53", "writerGrade": "6级", "writerIntegral": "4687", "writerName": "丰色木夕", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123008645.jpg", "writerRankTotal": "6335", "writerRankWeekly": "36412", "writerThumb": "194", "writerVisitNum": "357866", "blog_read_count": "1420", "blog_time": "已于 2022-02-19 22:57:56 修改", "blog_title": "docker打包php7.3镜像", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h3><a id=\"docker_php_0\"></a>docker 打包php镜像</h3>\n<p>CentOS 7<br/> Docker 1.16.x<br/> php: 7.3</p>\n<h3><a id=\"docker_5\"></a>构建docker打包步骤</h3>\n<h5><a id=\"step1_php73apache_6\"></a>step.1 拉取基础php:7.3-apache镜像</h5>\n<pre><code class=\"prism language-bash\">docker pull php:7.3-apache\n</code></pre>\n<p>可以查看一下php镜像的环境变量</p>\n<pre><code class=\"prism language-bash\">docker inspect php:7.3-apache\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\39e5f3b43d894fb5904b4052235d2af4.png\"/></p>\n<h5><a id=\"step2_Dockerfile_18\"></a>step.2 创建Dockerfile</h5>\n<p>先复习一下Dockerfile构建指令</p>\n<table><thead><tr><th align=\"left\">指令</th><th align=\"left\">描述</th></tr></thead><tbody><tr><td align=\"left\">FROM</td><td align=\"left\">构建的新镜像是基于哪个镜像。例如：FROM centos:6</td></tr><tr><td align=\"left\">MAINTAINER</td><td align=\"left\">镜像维护者姓名或邮箱地址。例如：MAINTAINER Mr.chen</td></tr><tr><td align=\"left\">RUN</td><td align=\"left\">构建镜像时运行的Shell命令。例如：RUN [“yum”,“install”,“httpd”]</td></tr><tr><td align=\"left\"></td><td align=\"left\">或者RUN yum install httpd</td></tr><tr><td align=\"left\">CMD</td><td align=\"left\">运行容器时执行的Shell命令（可以被运行时传递的参数覆盖）。例如：CMD [\"-c\",\"/start.sh\"]</td></tr><tr><td align=\"left\"></td><td align=\"left\">或者CMD [\"/usr/sbin/sshd\",\"-D\"]或者CMD /usr/sbin/sshd -D</td></tr><tr><td align=\"left\">EXPOSE</td><td align=\"left\">声明容器运行的服务端口。例如：EXPOSE 80 443</td></tr><tr><td align=\"left\">ENV</td><td align=\"left\">设置容器内环境变量。例如：ENV MYSQL_ROOT_PASSWORD 123456</td></tr><tr><td align=\"left\">ADD</td><td align=\"left\">拷贝文件或目录到镜像（可以自动解压缩或者下载）</td></tr><tr><td align=\"left\"></td><td align=\"left\">例如：ADD [“src”,“dest”]或者ADD https://xxx.com/html.tar.gz /var/www/html</td></tr><tr><td align=\"left\"></td><td align=\"left\">或者：ADD html.tar.gz /var/www/html</td></tr><tr><td align=\"left\">COPY</td><td align=\"left\">拷贝文件或目录到镜像（不能自动解压缩）。例如：COPY ./start.sh /start.sh</td></tr><tr><td align=\"left\">ENTRYPOINT</td><td align=\"left\">运行容器时执行的Shell命令（不能被运行时传递的参数覆盖)。例如：ENTRYPOINT [\"/bin/bash\",\"-c\",\"/start.sh\"]</td></tr><tr><td align=\"left\"></td><td align=\"left\">或者ENTRYPOINT /bin/bash -c “/start.sh”</td></tr><tr><td align=\"left\">VOLUME</td><td align=\"left\">指定容器挂载点到宿主机自动生成的目录或其他容器</td></tr><tr><td align=\"left\"></td><td align=\"left\">例如：VOLUME [\"/var/lib/mysql\"] ，将容器中的<code>/var/lib/mysql</code> 目录随机挂在到本地数据卷，可通过<code>docker inspect查看</code></td></tr><tr><td align=\"left\">USER</td><td align=\"left\">为RUN，CMD和ENTRYPOINT执行命令指定运行用户</td></tr><tr><td align=\"left\"></td><td align=\"left\">例如：USER Mr_chen</td></tr><tr><td align=\"left\">WORKDIR</td><td align=\"left\">为RUN，CMD，ENTRYPOINT，COPY和ADD设置工作目录（指定进入容器中默认被切换的目录）。</td></tr><tr><td align=\"left\"></td><td align=\"left\">例如：WORKDIR /data</td></tr><tr><td align=\"left\">HEALTHCHECK</td><td align=\"left\">健康检查。例如：HEALTHCHECK --interval=5m --timeout=3s --retries=3</td></tr><tr><td align=\"left\"></td><td align=\"left\">CMD curl -f http://localhost/</td></tr><tr><td align=\"left\">ARG</td><td align=\"left\">在构建镜像时指定一些参数。例如：ARG user</td></tr></tbody></table>\n<p>在你的php项目项目代码下创建<code>Dockerfile</code>文件，如下结构</p>\n<pre><code class=\"prism language-bash\">-myAppPHP\n    <span class=\"token operator\">|</span>-src\n        <span class=\"token operator\">|</span>-index.php\n    <span class=\"token operator\">|</span>-config\n        <span class=\"token operator\">|</span>-php.ini\n    <span class=\"token operator\">|</span>-Dockerfile\n</code></pre>\n<blockquote>\n<p>注意，建议把<code>php.ini</code>一起拷贝到镜像中</p>\n</blockquote>\n<p>index.php的内容如下</p>\n<pre><code class=\"prism language-bash\"><span class=\"token operator\">&lt;</span>?php\nphpinfo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n?<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>Dockerifle的内容如下</p>\n<pre><code class=\"prism language-bash\">FROM php:7.3-apache\nCOPY ./src /var/www/html/\nCOPY ./config /usr/local/etc/php/\n</code></pre>\n<blockquote>\n<p>注意，拷贝的路径是src下的文件，到<code>/var/www/html/</code>下，不包括src，如需要包括，则使用<code>COPY . /var/www/html/</code></p>\n</blockquote>\n<p>参考地址 <a href=\"https://hub.docker.com/_/php/\">https://hub.docker.com/_/php/</a></p>\n<h5><a id=\"step3_docker_78\"></a>step.3 开始构建docker镜像</h5>\n<p>在<code>Dockerfile</code>文件的同级目录下执行构建docker镜像指令</p>\n<pre><code class=\"prism language-bash\">docker build -t phpapp:latest <span class=\"token builtin class-name\">.</span>\n</code></pre>\n<p>查看镜像<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4741fab038064a9dad1b2680167c614d.png\"/></p>\n<h5><a id=\"step4__87\"></a>step.4 启动镜像</h5>\n<pre><code class=\"prism language-bash\">docker run -d -p <span class=\"token number\">30001</span>:80 --name myphp phpapp\n</code></pre>\n<p>浏览器输入 IP:30001即可见如下内容<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a9e9ef1487794457bfd24641cd82e17f.png\"/></p>\n<h3><a id=\"php_94\"></a>安装常用php拓展模块</h3>\n<p>查看默认php模块</p>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 进入php容器</span>\ndocker <span class=\"token builtin class-name\">exec</span> -it myphp <span class=\"token function\">bash</span>\n</code></pre>\n<p>进入容器后适用<code>php -m</code> 查看启用的模块</p>\n<blockquote>\n<p>通过<code>php -i</code> 查看php信息<br/> <code>php -i | grep -i extension_dir</code> 查看拓展目录<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d19e109ee7454208b6300b7a5097a611.png\"/><br/> 执行php安装指令</p>\n</blockquote>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\"># 容器中执行</span>\ndocker-php-ext-install pdo_mysql\ndocker-php-ext-install mysqli\n</code></pre>\n<blockquote>\n<p>php:7.3-apache ls: cannot access ‘.’: Operation not permitted<br/> 这是docker版本过低，把docker升级到1.20以上可以解决</p>\n</blockquote>\n<p>也可以将安装命令做到Dockerfile中</p>\n<pre><code class=\"prism language-bash\">FROM php:7.3-apache\nCOPY ./src /var/www/html/\nCOPY ./config /usr/local/etc/php/\nRUN docker-php-ext-install pdo_mysql\nRUN docker-php-ext-install mysqli\n</code></pre>\n<h5><a id=\"php1_123\"></a>php的拓展安装.1</h5>\n<p>php拓展安装过程常用的命令有</p>\n<pre><code class=\"prism language-bash\">docker-php-source\ndocker-php-ext-install\ndocker-php-ext-enable\ndocker-php-ext-configure\n</code></pre>\n<p><a href=\"https://www.cnblogs.com/yinguohai/p/11329273.html\">参考地址https://www.cnblogs.com/yinguohai/p/11329273.html</a></p>\n<p>php的拓展目录在如下目录</p>\n<pre><code class=\"prism language-bash\"><span class=\"token builtin class-name\">cd</span> /usr/src/php/ext/\n</code></pre>\n<p>如无改目录，可能是未解压，我们进入<code>/usr/src</code>，可以看到如下内容</p>\n<pre><code class=\"prism language-bash\"><span class=\"token builtin class-name\">cd</span> /usr/src\n<span class=\"token function\">ls</span>\nphp.tar.xz  php.tar.xz.asc\n</code></pre>\n<p>使用 <code>docker-php-source extract</code> 命令解压</p>\n<p>安装拓展时，只需要使用 <code>docker-php-ext-install &lt;extName&gt;</code>即可，如果没有需要的拓展，则可下载源码到改目录，再使用该命令进行安装，安装好后，可以启用</p>\n<p>启用插件的命令为<code>docker-php-ext-enable &lt;extName&gt;</code></p>\n<blockquote>\n<p>删除拓展插件 <code>rm -rf /usr/local/etc/php/conf.d/docker-php-ext-redis.ini</code></p>\n</blockquote>\n<p>启动的插件配置，我们可以在<code>/usr/local/etc/php</code>目录下的<code>conf.d</code>找到一一对应的模块配置</p>\n<pre><code class=\"prism language-bash\"><span class=\"token builtin class-name\">cd</span> /usr/local/etc/php\n<span class=\"token function\">ls</span>\nconf.d  php.ini  php.ini-development  php.ini-production\n\n<span class=\"token comment\"># 当个模块的配置文件</span>\n<span class=\"token function\">ls</span> conf.d/\ndocker-php-ext-mysqli.ini  docker-php-ext-pdo_mysql.ini  docker-php-ext-sodium.ini\n<span class=\"token comment\"># 查看配置内容长什么样的</span>\n<span class=\"token function\">cat</span> docker-php-ext-mysqli.ini\n<span class=\"token assign-left variable\">extension</span><span class=\"token operator\">=</span>mysqli.so\n</code></pre>\n<p>显然，跟<code>php.ini</code>中的写法一样，我们也可以直接修改<code>/usr/local/etc/php/php.ini</code>文件，添加php拓展的配置</p>\n<p>更多php拓展安装参考<a href=\"https://www.cnblogs.com/hcpzhe/p/12109081.html\">点这里</a></p>\n<h4><a id=\"php2_167\"></a>php拓展安装.2</h4>\n<p>还有一种比较简单、非常规的操作安装法，直接拷贝<code>*.so</code>到相应的docker镜像中</p>\n<p>php容器中的默认php拓展<code>*.so</code>库路径在<code>/usr/local/lib/php/extensions/no-debug-non-zts-20180731/</code></p>\n<p>然后修改<code>php.ini</code></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 1, "time": "2022-02-19 22:57:56", "summary": "打包镜像构建打包步骤拉取基础镜像可以查看一下镜像的环境变量在这里插入图片描述创建先复习一下构建指令指令描述构建的新镜像是基于哪个镜像。例如：镜像维护者姓名或邮箱地址。例如：构建镜像时运行的命令。例如："}