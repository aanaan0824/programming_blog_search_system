{"blogid": "126714562", "writerAge": "码龄7年", "writerBlogNum": "122", "writerCollect": "128", "writerComment": "33", "writerFan": "77", "writerGrade": "5级", "writerIntegral": "2258", "writerName": "伟子涵", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126714562.jpg", "writerRankTotal": "9524", "writerRankWeekly": "11388", "writerThumb": "105", "writerVisitNum": "161526", "blog_read_count": "193", "blog_time": "于 2022-09-05 22:04:23 发布", "blog_title": "面试别问我 微服务架构优缺点？", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_4\">前言</a></li><li><ul><li><a href=\"#_5\">什么是微服务，微服务优缺点，微服务设计原则,微服务架构的演进过程</a></li></ul>\n</li><li><a href=\"#_7\">一、微服务架构的演进过程？</a></li><li><ul><li><ul><li><ul><li><ul><li><a href=\"#_8\">单体架构</a></li><li><ul><li><a href=\"#11__9\">1.1 初期单体架构</a></li><li><a href=\"#12__13\">1.2 优点</a></li><li><a href=\"#13__15\">1.3 缺点</a></li><li><a href=\"#21__27\">2.1 垂直应用架构设计图</a></li><li><a href=\"#22__29\">2.2 优点</a></li><li><a href=\"#23__33\">2.3 缺点</a></li></ul>\n</li><li><a href=\"#SOA___37\">SOA 架构（垂直应用架构的升级改进） 也叫面向服务架构</a></li><li><ul><li><a href=\"#3SOA__39\">3.SOA 架构设计图</a></li><li><a href=\"#32__41\">3.2 优点</a></li><li><a href=\"#33__46\">3.3 缺点</a></li></ul>\n</li><li><a href=\"#4___50\">4 .微服务架构 （业界最流行的软件开发架构）</a></li><li><ul><li><a href=\"#41__52\">4.1 微服务架构设计图</a></li><li><a href=\"#42__54\">4.2 微服务优点</a></li><li><a href=\"#43__63\">4.3 微服务缺点</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#_68\">二、微服务架构需要遵循的原则</a></li><li><ul><li><ul><li><ul><li><ul><li><ul><li><a href=\"#52__81\">5.2 不遵循微服务架构原则会出现巨大的问题</a></li><li><a href=\"#_88\">建议的最佳实战</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#_101\">总结</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_4\"></a>前言</h1>\n<h2><a id=\"_5\"></a>什么是微服务，微服务优缺点，微服务设计原则,微服务架构的演进过程</h2>\n<h1><a id=\"_7\"></a>一、微服务架构的演进过程？</h1>\n<h5><a id=\"_8\"></a>单体架构</h5>\n<h6><a id=\"11__9\"></a>1.1 初期单体架构</h6>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\162f209025f743e6b444cbff400b2953.png\"/><br/> 单体架构设计非常简单 比如电商系统当中 把所以业务写成一个工程中 列如对应来说一个Java应用 包含鉴权 监控 订单 商品 物流 优惠 账号等服务实现 存储在MySQL 和Redis 当中</p>\n<h6><a id=\"12__13\"></a>1.2 优点</h6>\n<p>​ 开发、部署、 上线非常简单</p>\n<h6><a id=\"13__15\"></a>1.3 缺点</h6>\n<p>​ 1.代码耦合严重、牵一发而动全身,代码合并冲突很容易常见。</p>\n<p>​ 2.维护困难，开发人员很难整体理解整个系统</p>\n<p>​ 3.容错性差，因为整个系统是一个进程，如果系统报错，整个系统容易宕机<br/> ​ 4.资源不能进行合理利用，一个系统中不同的功能被被调用的频率不同，如果是单体应用的话，需要将整个应用水平扩展，造成了资源的浪费。<br/> ​ 5.不利于技术的扩展，传统的单体架构如果要更新某个技术，就需要重新开发整个系统<br/> ​ 6.难以扩展，不能按需扩展，而要扩展整个系统。代码库比较复杂，进行修改维护容易影响到别的功能</p>\n<p>#####2.垂直应用架构 （单体架构的升级改进）</p>\n<h6><a id=\"21__27\"></a>2.1 垂直应用架构设计图</h6>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\773a41145c784e3484487710d97925c2.png\"/></p>\n<h6><a id=\"22__29\"></a>2.2 优点</h6>\n<p>​ 服务、部署独立、水平扩展容易</p>\n<h6><a id=\"23__33\"></a>2.3 缺点</h6>\n<p>​ 搭建复杂，服务之间关系错综复杂，维护困难</p>\n<h5><a id=\"SOA___37\"></a>SOA 架构（垂直应用架构的升级改进） 也叫面向服务架构</h5>\n<h6><a id=\"3SOA__39\"></a>3.SOA 架构设计图</h6>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3d8ec490beb84128a0a06ac4f5668ceb.png\"/></p>\n<h6><a id=\"32__41\"></a>3.2 优点</h6>\n<p>​ 1.能够提高开发效率，可以将整个系统分为几个不同的子系统，不同团队负责不同的系统，从而提高开发效率。<br/> ​ 2.解耦，降低了系统之间的耦合<br/> ​ 3.易于扩展，业务逻辑改变时只需要修改单个服务，减少了对使用者的影响</p>\n<h6><a id=\"33__46\"></a>3.3 缺点</h6>\n<p>​ 抽取的粒度比较大。耦合度较高 开发周期比较长</p>\n<h5><a id=\"4___50\"></a>4 .微服务架构 （业界最流行的软件开发架构）</h5>\n<h6><a id=\"41__52\"></a>4.1 微服务架构设计图</h6>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d0f932fd617d473aa3622eef0393451e.png\"/></p>\n<h6><a id=\"42__54\"></a>4.2 微服务优点</h6>\n<p>微服务是通过将系统根据功能划分为细粒度的服务，每一个服务都是一个独立的应用，根据这种思想创建的软件服务实体就是微服务。<br/> 1.解耦，根据功能将系统分为不同的独立运行的服务，将原来的复杂的系统简单化，每个服务交付给不同的团 队去负责，提高了开发效率。开发人员可以只关注自己的业务功能<br/> 2.容错性高，将错误隔离在单个服务内。<br/> 3.技术选型灵活，不同的服务可以根据自己的需求选择不同的技术。<br/> 4.易于扩展，可以按需扩展服务，避免资源的浪费<br/> 5.独立部署，每个服务独立部署，当其中一个服务有需求变更时，可以只编译部署单个应用，减少了对用户的影响</p>\n<h6><a id=\"43__63\"></a>4.3 微服务缺点</h6>\n<p>​ 1.开发人员需要面对分布式系统的复杂性。测试更加困难，需要保证服务之间的通信；需要团队之间的协调；当用例涉及到多个服务的时候，需要实现分布式事务管理。<br/> ​ 2.部署比较复杂<br/> ​ 3.增加内存开销，微服务系统用多个服务实例取代了传统垂直架构的单个服务实例。有多少服务实例，就会有多少在内存运行的开销。</p>\n<h1><a id=\"_68\"></a>二、微服务架构需要遵循的原则</h1>\n<pre><code>###### 5.1 微服务带来的收益 \n</code></pre>\n<p>​ 1.合理、正确的将单体应用迁移到微服务</p>\n<p>​ 2.单个的微服务，可以选择一门你擅长的语言去开发,扩展性强</p>\n<p>​ 3.对于整个应用而言,代码不在耦合,不会出现大量的冲突</p>\n<p>​ 4.微服务可以重用，应用发布时间可控性更强</p>\n<p>​ 5.通过故障隔离，让错误在微服务中降级,不会影响到整个应用（或其他服务）</p>\n<h6><a id=\"52__81\"></a>5.2 不遵循微服务架构原则会出现巨大的问题</h6>\n<p>​ 1.微服务之间的依赖错综复杂，难为维护<br/> ​ 2.开发过程 互相纠缠 开发 上线时间严重影响<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\424aa3e2cece41bf97bc216bd3345dfc.png\"/></p>\n<h6><a id=\"_88\"></a>建议的最佳实战</h6>\n<p>1.职责独立：每个微服务只做自己功能范围内的事,微服务之间的依赖链不要过长<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dfc8b0ada7044114a7b091c3a160bead.png\"/><br/> ​ 2.建立单个微服务依赖链路不要超过3个请求</p>\n<p>​ 3.使用熔断器实现快速的故障容错和线程隔离 Hystrix Sentinel</p>\n<p>​ 4.通过网关代理微服务请求,网关是微服务架构对外暴露的唯一入口<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1f1e858fa9f14cd6867a32a5eab06084.png\"/><br/> ​ 5.确保微服务API 变更后能够向后兼容</p>\n<hr/>\n<h1><a id=\"_101\"></a>总结</h1>\n<p>1.对于通用的功能逻辑，如果不经常变更，那么，做成 SDK，而不是提供一个服务…<br/> 2.微服务通信链路如果『太长』，就需要考虑去重构、重新拆分微服务。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-09-05 22:04:23", "summary": "文章目录前言什么是微服务，微服务优缺点，微服务设计原则微服务架构的演进过程一、微服务架构的演进过程？单体架构初期单体架构优点缺点垂直应用架构设计图优点缺点架构垂直应用架构的升级改进也叫面向服务架构架构"}