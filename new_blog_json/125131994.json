{"blogid": "125131994", "writerAge": "码龄1年", "writerBlogNum": "18", "writerCollect": "117", "writerComment": "75", "writerFan": "22", "writerGrade": "2级", "writerIntegral": "368", "writerName": "杯浅", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125131994.jpg", "writerRankTotal": "41615", "writerRankWeekly": "13987", "writerThumb": "103", "writerVisitNum": "19480", "blog_read_count": "6294", "blog_time": "已于 2022-07-14 17:47:18 修改", "blog_title": "C语言链表详解（通俗易懂）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_5\">前言</a></li><li><a href=\"#_11\">一、什么是线性表？</a></li><li><a href=\"#_17\">二、顺序表：</a></li><li><a href=\"#_106\">三、链表：</a></li><li><a href=\"#_177\">四、顺序表和链表对比：</a></li><li><a href=\"#_189\">总结</a></li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_5\"></a>前言</h1>\n<p>线性表是实际中广泛应用的重要数据结构，本文用通俗易懂的方法讲解它。</p>\n<hr/>\n<h1><a id=\"_11\"></a>一、什么是线性表？</h1>\n<p>首先，我们了解下“线性表”的基本概念：</p>\n<ul><li>全名为“线性存储结构”，使用线性表存储数据的方式可以这样理解，即“把所有数据用一根线儿串起来，再存储到物理空间中”。</li><li>是n个具有相同特性的数据元素的有限序列。线性表是一种在实际中广泛使用的数据结构，常见的线性表有：顺序表、链表、队列…</li></ul>\n<h1><a id=\"_17\"></a>二、顺序表：</h1>\n<p>顺序表是用一段物理地址连续的存储单元依次存储数据元素的线性结构，一般情况下采用数组存储。在数组上完成数据的增删查改。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c7b3d1e9cfb54d999b7a99dc6ab0062e.png\"/><br/> 顺序表一般可以分为：</p>\n<ol><li> <p>静态顺序表：使用定长数组存储数据。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d1a442edd7174e608e818e3d7610ddcf.png\"/></p> </li><li> <p>动态顺序表：使用动态开辟的数组存储。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fa7d70357548479c8c8b44c25822aa8a.png\"/></p> </li></ol>\n<p>扩容方法：动态开辟一块新的空间（一般为原空间的两倍），将原空间的数据拷贝到新的空间，然后让array指针指向新的空间并且释放旧空间。</p>\n<p>对比以上两者：</p>\n<p>区别：</p>\n<ul><li>静态顺序表和动态顺序表唯一不同的是，静态顺序表在创建顺序表的时候容量已经确定，不可以更改，而动态顺序表的容量是由malloc函数动态开辟，当容量不够用时可以增加容量capacity。</li></ul>\n<p>优缺点：</p>\n<ul><li>静态顺序表创建空间时为静态开辟，不用malloc函数，代码相对简单（一点点），不存在内存泄露问题。</li><li>动态顺序表，动态开辟空间，使用相对灵活，相比于静态开辟空间也可以少空间浪费。</li></ul>\n<p>动态顺序表代码演示：初始化、插入数据和检查容量</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//初始化顺序表</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqList_Init</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tSLDataType<span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>SLDataType<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SLDataType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmp <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span>malloc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tps<span class=\"token operator\">-&gt;</span>arr <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n\tps<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tps<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//检查容量</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Check_Capacity</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ps<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">==</span> ps<span class=\"token operator\">-&gt;</span>capacity<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tSLDataType<span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>SLDataType<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>ps<span class=\"token operator\">-&gt;</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>ps<span class=\"token operator\">-&gt;</span>capacity<span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SLDataType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmp <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span>realloc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tps<span class=\"token operator\">-&gt;</span>arr <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n\t\tps<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> ps<span class=\"token operator\">-&gt;</span>capacity<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"扩容成功\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//插入数据</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqList_Insert</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">,</span> SLDataType pos<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Check_Capacity</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//检查容量</span>\n\tSLDataType num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入需要写入的值:&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ps<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> pos <span class=\"token operator\">==</span> ps<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tps<span class=\"token operator\">-&gt;</span>arr<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\t\n\tSLDataType end <span class=\"token operator\">=</span> ps<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">&gt;=</span> pos<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tps<span class=\"token operator\">-&gt;</span>arr<span class=\"token punctuation\">[</span>end <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ps<span class=\"token operator\">-&gt;</span>arr<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tend<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tps<span class=\"token operator\">-&gt;</span>arr<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n\tps<span class=\"token operator\">-&gt;</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//头部插入数据</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqList_PushFront</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">SeqList_Insert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//尾部插入数据</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeqList_PushBack</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">SeqList_Insert</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">,</span> ps<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_106\"></a>三、链表：</h1>\n<p><strong>概念</strong>：链表是一种物理存储结构上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的 。</p>\n<p>下图为单链表的逻辑结构类型：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\57a2c593630e4fa8b3c15f7ef8dc9e84.png\"/><br/> 注意：</p>\n<ol><li>链式结构在逻辑上是连续的，但在物理上不一定连续</li><li>现实中结点一般都是在堆上申请出来的</li><li>从堆上申请的空间，是按照一定的策略来分配的，两次申请的空间可连续，也可能不连续</li></ol>\n<p><strong>链表的分类</strong></p>\n<p>实际中链表的结构非常多样，以下情况组合起来就有8种链表结构：</p>\n<ol><li>单向或者双向：</li></ol>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1e2fa917e1f043638a0d622c2c2bdb5d.png\"/></p>\n<ol start=\"2\"><li> <p>带头和不带头：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c6093e1bea5b4e6f89659814a648f7d7.png\"/></p> </li><li> <p>循环和不循环：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a4e3cb58e59d42da92345acd06c3c1e3.png\"/><br/> 经过以上三种可以有2^3=8种类型。</p> </li></ol>\n<p>虽然有这么多的链表的结构，但是我们实际中最常用还是两种结构：</p>\n<ul><li>无头单向链表和带头双向循环链表：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f932dc2d222f480aa4d455dc2b78bc14.png\"/></li></ul>\n<p>这边通过单链表头部和尾部插入数据代码帮大家理解过程：</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//创建结点</span>\nSListNode<span class=\"token operator\">*</span> <span class=\"token function\">BuySListNode</span><span class=\"token punctuation\">(</span>SLTDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tSListNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>newnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tnewnode<span class=\"token operator\">-&gt;</span>data <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\tnewnode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> newnode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//头插数据</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListPushFront</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> pphead<span class=\"token punctuation\">,</span> SLTDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tSListNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> <span class=\"token function\">BuySListNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//读取新建的结点</span>\n\tnewnode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>pphead<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>pphead <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//尾插数据</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SListPushBack</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> pphead<span class=\"token punctuation\">,</span> SLTDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tSListNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> <span class=\"token function\">BuySListNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//读取新建的结点</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pphead <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token operator\">*</span>pphead <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tSListNode<span class=\"token operator\">*</span> tail <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>pphead<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>tail<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\ttail <span class=\"token operator\">=</span> tail<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\ttail<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_177\"></a>四、顺序表和链表对比：</h1>\n<table><thead><tr><th>不同点</th><th>顺序表</th><th>链表</th></tr></thead><tbody><tr><td>存储空间上</td><td>物理上一定连续</td><td>逻辑上连续，但物理上不一定连续</td></tr><tr><td>随机访问</td><td>支持</td><td>不支持</td></tr><tr><td>任意位置插入或删除元素</td><td>可能搬移元素，效率低</td><td>只需修改指针指向</td></tr><tr><td>插入</td><td>动态顺序表，空间不够需要扩容</td><td>没有容量概念</td></tr><tr><td>应用场景</td><td>元素高效存储+频繁访问</td><td>任意位置插入和删除</td></tr><tr><td>缓存利用率</td><td>高</td><td>低</td></tr></tbody></table>\n<hr/>\n<h1><a id=\"_189\"></a>总结</h1>\n<p>以上就是今天要讲的顺序表和链表的内容啦，如果本篇博客对你有所帮助的话，请给博主一个三连哦！</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-07-14 17:47:18", "summary": "文章目录前言一、什么是线性表？二、顺序表：三、链表：四、顺序表和链表对比：总结前言线性表是实际中广泛应用的重要数据结构，本文用通俗易懂的方法讲解它。一、什么是线性表？首先，我们了解下线性表的基本概念："}