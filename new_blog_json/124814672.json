{"blogid": "124814672", "writerAge": "码龄9年", "writerBlogNum": "116", "writerCollect": "177", "writerComment": "113", "writerFan": "25", "writerGrade": "4级", "writerIntegral": "1248", "writerName": "故里2130", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124814672.jpg", "writerRankTotal": "16110", "writerRankWeekly": "6433", "writerThumb": "37", "writerVisitNum": "76023", "blog_read_count": "1070", "blog_time": "已于 2022-05-17 10:36:49 修改", "blog_title": "C#winform嵌套另一个exe程序", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>一共有二种方法，也不知道作者从哪里复制来的，先感谢原作者。</p>\n<p>首先建立一个程序，加2个按钮，为了区分，界面修改成红色。</p>\n<p><img alt=\"\" height=\"467\" src=\"..\\..\\static\\image\\0fb5dc7fa20b4e63bd4e331123e3c780.png\" width=\"898\"/></p>\n<p>第一种：</p>\n<p>1.建立一个主程序，加一个panel1，为了区分背景是绿色</p>\n<p><img alt=\"\" height=\"653\" src=\"..\\..\\static\\image\\ba0ab6c9202945d1831da3a5654e72e8.png\" width=\"886\"/></p>\n<p>2.代码调用</p>\n<p><img alt=\"\" height=\"117\" src=\"..\\..\\static\\image\\fa12e87951dc41c685483228273941ea.png\" width=\"693\"/></p>\n<p>3.所有代码</p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Diagnostics;\nusing System.Drawing;\nusing System.Linq;\nusing System.Runtime.InteropServices;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace WindowsFormsApp1\n{\n    public partial class Form1 : Form\n    {\n        public Form1()\n        {\n            InitializeComponent();\n        }\n        /// &lt;summary&gt;\n        /// 嵌入外部exe\n        /// &lt;/summary&gt;\n        public class EmbeddedExeTool\n        {\n            [DllImport(\"User32.dll\", EntryPoint = \"SetParent\")]\n            private static extern IntPtr SetParent(IntPtr hWndChild, IntPtr hWndNewParent);\n\n            [DllImport(\"user32.dll\", EntryPoint = \"ShowWindow\")]\n            private static extern int ShowWindow(IntPtr hwnd, int nCmdShow);\n\n            [DllImport(\"user32.dll\", SetLastError = true)]\n            private static extern bool MoveWindow(IntPtr hwnd, int x, int y, int cx, int cy, bool repaint);\n\n            [DllImport(\"user32.dll\")]\n            private static extern int GetWindowLong(IntPtr hWnd, int nIndex);\n            [DllImport(\"user32.dll\")]\n            private static extern int SetWindowLong(IntPtr hWnd, int nIndex, int dwNewLong);\n            [DllImport(\"user32.dll\", SetLastError = true)]\n            private static extern IntPtr FindWindow(string lpClassName, string lpWindowName);\n            IntPtr WindowHandle = IntPtr.Zero;\n            private const int WS_THICKFRAME = 262144;\n            private const int WS_BORDER = 8388608;\n            private const int GWL_STYLE = -16;\n            private const int WS_CAPTION = 0xC00000;\n            private Process proApp = null;\n            private Control ContainerControl = null;\n\n            private const int WS_VISIBLE = 0x10000000;\n            [DllImport(\"user32.dll\", EntryPoint = \"SetWindowLong\", CharSet = CharSet.Auto)]\n            private static extern IntPtr SetWindowLongPtr32(HandleRef hWnd, int nIndex, int dwNewLong);\n            [DllImport(\"user32.dll\", EntryPoint = \"SetWindowLongPtr\", CharSet = CharSet.Auto)]\n            private static extern IntPtr SetWindowLongPtr64(HandleRef hWnd, int nIndex, int dwNewLong);\n\n            private IntPtr SetWindowLong(HandleRef hWnd, int nIndex, int dwNewLong)\n            {\n                if (IntPtr.Size == 4)\n                {\n                    return SetWindowLongPtr32(hWnd, nIndex, dwNewLong);\n                }\n                return SetWindowLongPtr64(hWnd, nIndex, dwNewLong);\n            }\n            /// &lt;summary&gt;\n            /// 加载外部exe程序到程序容器中\n            /// &lt;/summary&gt;\n            /// &lt;param name=\"control\"&gt;要显示exe的容器控件&lt;/param&gt;\n            /// &lt;param name=\"exepath\"&gt;exe的完整绝对路径&lt;/param&gt;\n            public void LoadEXE(Control control, string exepath)\n            {\n                ContainerControl = control;\n                control.SizeChanged += Control_SizeChanged;\n                ProcessStartInfo info = new ProcessStartInfo(exepath);\n                info.WindowStyle = ProcessWindowStyle.Minimized;\n                info.UseShellExecute = false;\n                info.CreateNoWindow = false;\n                proApp = Process.Start(info);\n                Application.Idle += Application_Idle;\n                EmbedProcess(proApp, control);\n            }\n            /// &lt;summary&gt;\n            /// 加载外部exe程序到程序容器中\n            /// &lt;/summary&gt;\n            /// &lt;param name=\"form\"&gt;要显示exe的窗体&lt;/param&gt;\n            /// &lt;param name=\"exepath\"&gt;exe的完整绝对路径&lt;/param&gt;\n            public void LoadEXE(Form form, string exepath)\n            {\n                ContainerControl = form;\n                form.SizeChanged += Control_SizeChanged;\n                proApp = new Process();\n                proApp.StartInfo.UseShellExecute = false;\n                proApp.StartInfo.CreateNoWindow = false;\n                proApp.StartInfo.WindowStyle = ProcessWindowStyle.Minimized;\n                proApp.StartInfo.FileName = exepath;\n                proApp.StartInfo.Arguments = Process.GetCurrentProcess().Id.ToString();\n                proApp.Start();\n                Application.Idle += Application_Idle;\n                EmbedProcess(proApp, form);\n            }\n            /// &lt;summary&gt;\n            /// 确保应用程序嵌入此容器\n            /// &lt;/summary&gt;\n            /// &lt;param name=\"sender\"&gt;&lt;/param&gt;\n            /// &lt;param name=\"e\"&gt;&lt;/param&gt;\n            private void Application_Idle(object sender, EventArgs e)\n            {\n                if (this.proApp == null || this.proApp.HasExited)\n                {\n                    this.proApp = null;\n                    Application.Idle -= Application_Idle;\n                    return;\n                }\n                if (proApp.MainWindowHandle == IntPtr.Zero) return;\n                Application.Idle -= Application_Idle;\n                EmbedProcess(proApp, ContainerControl);\n            }\n            /// &lt;summary&gt;\n            /// 将指定的程序嵌入指定的控件\n            /// &lt;/summary&gt;\n            private void EmbedProcess(Process app, Control control)\n            {\n                // Get the main handle\n                if (app == null || app.MainWindowHandle == IntPtr.Zero || control == null) return;\n                try\n                {\n                    // Put it into this form\n                    SetParent(app.MainWindowHandle, control.Handle);\n                    // Remove border and whatnot               \n                    SetWindowLong(new HandleRef(this, app.MainWindowHandle), GWL_STYLE, WS_VISIBLE);\n                    ShowWindow(app.MainWindowHandle, (int)ProcessWindowStyle.Maximized);\n                    MoveWindow(app.MainWindowHandle, 0, 0, control.Width, control.Height, true);\n                }\n                catch (Exception ex3)\n                {\n                    Console.WriteLine(ex3.Message);\n                }\n            }\n            /// &lt;summary&gt;\n            /// 嵌入容器大小改变事件\n            /// &lt;/summary&gt;\n            private void Control_SizeChanged(object sender, EventArgs e)\n            {\n                if (proApp == null)\n                {\n                    return;\n                }\n\n                if (proApp.MainWindowHandle != IntPtr.Zero &amp;&amp; ContainerControl != null)\n                {\n                    MoveWindow(proApp.MainWindowHandle, 0, 0, ContainerControl.Width, ContainerControl.Height, true);\n                }\n            }\n        }\n\n        private void Form1_Load(object sender, EventArgs e)\n        {\n            EmbeddedExeTool exetool = new EmbeddedExeTool();\n            //WindowsFormsApp4.exe 为要嵌入外部exe的具体路径\n            exetool.LoadEXE(panel1, AppDomain.CurrentDomain.BaseDirectory+ \"WindowsFormsApp4.exe\");//debug下面的文件夹\n\n        }\n    }\n}\n</code></pre>\n<p>4.效果很好。红配绿，绝配。 </p>\n<p><img alt=\"\" height=\"641\" src=\"..\\..\\static\\image\\72028906bf15467e99487c9bdf271ff1.png\" width=\"880\"/></p>\n<p>第二种</p>\n<p>和第一种方式有点不一样。 </p>\n<p> 1.建立一个winform主程序，为了区分背景是绿色</p>\n<p><img alt=\"\" height=\"661\" src=\"..\\..\\static\\image\\080e5ab6049a45fd97d7decdcb5ed1c0.png\" width=\"916\"/></p>\n<p>2.把代码直接复制进去，修改命名空间，再加上一个load事件即可</p>\n<p><img alt=\"\" height=\"246\" src=\"..\\..\\static\\image\\9b88df4540e84ef1b615364324d2793a.png\" width=\"791\"/></p>\n<p><img alt=\"\" height=\"347\" src=\"..\\..\\static\\image\\b43d1d678fc24b2c9def2932aad1f807.png\" width=\"868\"/></p>\n<p>3.代码</p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Linq;\nusing System.Text;\nusing System.Windows.Forms;\nusing System.Diagnostics;\nusing System.Runtime.InteropServices;\n\n\nnamespace WindowsFormsApp1\n{\n    public partial class Form1 : Form\n    {\n        private const int GWL_STYLE = (-16);\n        private const int WS_VISIBLE = 0x10000000;\n        EventHandler appIdleEvent = null;\n        Action&lt;object, EventArgs&gt; appIdleAction = null;\n        Process m_AppProcess;\n\n\n        [DllImport(\"user32.dll\", EntryPoint = \"SetWindowLong\", CharSet = CharSet.Auto)]\n        public static extern IntPtr SetWindowLongPtr32(HandleRef hWnd, int nIndex, int dwNewLong);\n\n\n        [DllImport(\"user32.dll\", EntryPoint = \"SetWindowLongPtr\", CharSet = CharSet.Auto)]\n        public static extern IntPtr SetWindowLongPtr64(HandleRef hWnd, int nIndex, int dwNewLong);\n\n\n        [DllImport(\"user32.dll\", SetLastError = true)]\n        private static extern long SetParent(IntPtr hWndChild, IntPtr hWndNewParent);\n\n        //SetParent(IntPtr hWndChild, IntPtr hWndNewParent);这个方法很重要，就是将hWndChild指向开启exe的窗体嵌入到hWndNewParent窗体的某个控件上，或者是窗体本 身的容器\n        [DllImport(\"user32.dll\", SetLastError = true)]\n        private static extern bool MoveWindow(IntPtr hwnd, int x, int y, int cx, int cy, bool repaint);\n        // MoveWindow(IntPtr hwnd, int x, int y, int cx, int cy, bool repaint);这个方法是windows的api,见名知意，是移动hwnd所指的窗体到指定的位置，并且指定是否需要重绘\n\n        public static IntPtr SetWindowLong(HandleRef hWnd, int nIndex, int dwNewLong)\n        {\n\n\n            if (IntPtr.Size == 4)\n            {\n                return SetWindowLongPtr32(hWnd, nIndex, dwNewLong);\n            }\n            return SetWindowLongPtr64(hWnd, nIndex, dwNewLong);\n        }\n        public Form1()\n        {\n            InitializeComponent();\n            appIdleAction = new Action&lt;object, EventArgs&gt;(Application_Idle);\n            appIdleEvent = new EventHandler(appIdleAction);\n\n\n        }\n        /// &lt;summary&gt;\n        /// 确保应用程序嵌入此容器，再次确认exe嵌入，如果不调用这个方法，程序不一定能嵌入外部exe\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"sender\"&gt;&lt;/param&gt;\n        /// &lt;param name=\"e\"&gt;&lt;/param&gt;\n        void Application_Idle(object sender, EventArgs e)\n        {\n            if (this.m_AppProcess == null || this.m_AppProcess.HasExited)\n            {\n                this.m_AppProcess = null;\n                Application.Idle -= appIdleEvent;//这一步一直不知道有什么用，但是不用这行代码程序有时候能嵌入有时候又不行\n                return;\n            }\n            if (m_AppProcess.MainWindowHandle == IntPtr.Zero) return;\n            Application.Idle -= appIdleEvent;\n            EmbedProcess(m_AppProcess, this);\n\n\n        }\n        /// &lt;summary&gt;\n        /// 将指定的程序嵌入指定的控件\n        /// &lt;/summary&gt;\n        private void EmbedProcess(Process app, Control control)\n        {\n\n\n            // Get the main handle\n            if (app == null || app.MainWindowHandle == IntPtr.Zero || control == null) return;\n            try\n            {\n                // Put it into this form\n                SetParent(app.MainWindowHandle, control.Handle);\n            }\n            catch (Exception ex1)\n            {\n                Console.WriteLine(ex1.Message);\n            }\n            try\n            {\n                // Remove border and whatnot               \n                SetWindowLong(new HandleRef(this, app.MainWindowHandle), GWL_STYLE, WS_VISIBLE);\n            }\n            catch (Exception ex2)\n            {\n                Console.WriteLine(ex2.Message);\n            }\n            try\n            {\n                MoveWindow(app.MainWindowHandle, 0, 0, control.Width, control.Height, true);\n            }\n            catch (Exception ex3)\n            {\n                Console.WriteLine(ex3.Message);\n            }\n        }\n\n\n        private void Form1_Load(object sender, EventArgs e)\n        {\n\n            //以下这段代码是通过命令行方式调起一个exe程序，获取这个程序的句柄然后嵌入主的winform窗体中\n            ProcessStartInfo info = new ProcessStartInfo(AppDomain.CurrentDomain.BaseDirectory + \"WindowsFormsApp4.exe\");//debug下面的文件夹\n            info.WindowStyle = ProcessWindowStyle.Minimized;\n            info.UseShellExecute = false;\n            info.CreateNoWindow = false;\n            m_AppProcess = System.Diagnostics.Process.Start(info);\n            Application.Idle += appIdleEvent;\n            try\n            {\n                EmbedProcess(m_AppProcess, this);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex.Message);\n            }\n        }\n\n    }\n}</code></pre>\n<p>4.效果</p>\n<p><img alt=\"\" height=\"641\" src=\"..\\..\\static\\image\\b63fa91167684e62af583202e04c9a62.png\" width=\"880\"/> </p>\n<p>可见，第一种和第二种的效果有所区别的。</p>\n<p>拓展。</p>\n<p>WPF签入winform</p>\n<p>1.依然用上面的winform程序，把输出类型改成类库</p>\n<p><img alt=\"\" height=\"242\" src=\"..\\..\\static\\image\\5b47ab3532154242b23f937b895c033a.png\" width=\"719\"/>  </p>\n<p>2.建立一个WPF程序，引用System.Windows.Forms和WindowsFormsIntegration，红色。绿色是步骤1生产的dll</p>\n<p><img alt=\"\" height=\"440\" src=\"..\\..\\static\\image\\09e0762477c1413fb9896da5cdaed4cc.png\" width=\"389\"/></p>\n<p> 3.在wpf中增加WindowsFormsHost控件</p>\n<p><img alt=\"\" height=\"792\" src=\"..\\..\\static\\image\\0afa442a9638496ca568105001babc3a.png\" width=\"1037\"/></p>\n<p>4.cs后台代码</p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing WindowsFormsApp4;\n\nnamespace WpfApp1\n{\n    /// &lt;summary&gt;\n    /// MainWindow.xaml 的交互逻辑\n    /// &lt;/summary&gt;\n    public partial class MainWindow : Window\n    {\n        public MainWindow()\n        {\n            InitializeComponent();\n            Form1 mainform = new Form1();\n            mainform.TopLevel = false;\n            winform.Child = mainform;\n        }\n    }\n}\n</code></pre>\n<p> 5.效果</p>\n<p><img alt=\"\" height=\"450\" src=\"..\\..\\static\\image\\37f81b48831f429aa4491694a55edada.png\" width=\"800\"/></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n</div>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-05-17 10:36:49", "summary": "一共有二种方法，也不知道作者从哪里复制来的，先感谢原作者。首先建立一个程序，加个按钮，为了区分，界面修改成红色。第一种：建立一个主程序，加一个，为了区分背景是绿色代码调用所有代码嵌入外部加载外部程序到"}