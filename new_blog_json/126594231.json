{"blogid": "126594231", "writerAge": "码龄1年", "writerBlogNum": "63", "writerCollect": "1786", "writerComment": "408", "writerFan": "2776", "writerGrade": "4级", "writerIntegral": "1571", "writerName": "YR_T", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126594231.jpg", "writerRankTotal": "10886", "writerRankWeekly": "2227", "writerThumb": "527", "writerVisitNum": "142962", "blog_read_count": "1579", "blog_time": "于 2022-09-01 20:32:09 发布", "blog_title": "C++正则表达式", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>Python正则表达式</h1>\n<p>之前写过一篇关于 Python 正则表达式的 blog ，链接：<a href=\"https://blog.csdn.net/m0_64036070/article/details/123853489\" title=\"(392条消息) Python正则表达式(一看就懂)_YR_T的博客-CSDN博客_python正则表达式\">(392条消息) Python正则表达式(一看就懂)_YR_T的博客-CSDN博客_python正则表达式</a></p>\n<h1>正则表达式是什么</h1>\n<p>简单说，它就是用来<strong>匹配字符串</strong>，主要用在 Python 爬虫上，其实 C++ 也可以做爬虫，所以也会用到正则表达式，但是主要的使用还是在实际开发里。</p>\n<h1>进入正题，正则表达式用法</h1>\n<h2>头文件</h2>\n<p>首先，我们要引入头文件，头文件名是 regex 。</p>\n<pre><code class=\"language-cpp\">#include&lt;regex&gt;</code></pre>\n<h2>regex_match</h2>\n<p>这些函数和 Python 里的函数差不多，这个函数可以再你要判断目标字符串的全部是不是和你的要求一样。</p>\n<p>用于匹配的函数是 std::regex_match</p>\n<pre><code class=\"language-cpp\">bool regex_match(string s,regex pattern)\nbool regex_match(string s,smatch result,regex pattern)\nbool regex_match(s.cbegin()+i,s.cend(),smatch result,regex pattern)\n</code></pre>\n<p>字符串 s 是要匹配的字符串，pattern 是匹配规则，也就是我上面那张图</p>\n<p>定义方法如下</p>\n<pre><code class=\"language-cpp\">regex pattern(\"规则\");</code></pre>\n<h3>\\d用法</h3>\n<p>\\d表示 0~9 的任意一个数字</p>\n<p>比如 abc\\\\d 表示匹配 abc 后面加 0-9 的任意一个数字。</p>\n<p>因为在 C++ 里，一个 \\ 代表的是字符串转义，所以我们的正则表达式转义要两个 \\ ，所以是\\\\d。</p>\n<p><img alt=\"d8e5a8d7203f42c79a65d9c7b14998e8.png\" src=\"..\\..\\static\\image\\d8e5a8d7203f42c79a65d9c7b14998e8.png\"/></p>\n<pre><code class=\"language-cpp\">#include&lt;regex&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nint main() {\n\tstring n = \"abc3\";\n\tbool res = regex_match(n, regex(\"abc\\\\d\"));\n\tcout &lt;&lt; res &lt;&lt; endl;\n\treturn 0;\n}</code></pre>\n<p> 这段代码匹配了 abc 后面带任意一个 0-9 的数字的字符串，最后结果为 1 （true），代表符合匹配要求。</p>\n<h3>\\D用法</h3>\n<p>注意，这里是大写的 D 。</p>\n<p>这代表非数字，和上面的 \\d 相反。</p>\n<p><img alt=\"bd4e15a8db434467bce4fabbe43bf73a.png\" src=\"..\\..\\static\\image\\bd4e15a8db434467bce4fabbe43bf73a.png\"/></p>\n<pre><code class=\"language-cpp\">#include&lt;regex&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nint main() {\n\tstring n = \"abc3\";\n\tbool res = regex_match(n, regex(\"abc\\\\D\"));\n\tcout &lt;&lt; res &lt;&lt; endl;\n\treturn 0;\n}</code></pre>\n<p>最后运行结果为 0，因为 3 不是非数字。</p>\n<h3>\\w用法</h3>\n<p>它代表任意一个大写或小写字母、数字或下划线。</p>\n<p><img alt=\"d6e7424a005d4930bf381b17ec17c80b.png\" src=\"..\\..\\static\\image\\d6e7424a005d4930bf381b17ec17c80b.png\"/></p>\n<p>这段代码结果是1，因为3是数字。</p>\n<p><img alt=\"5462720a7bcb4405b38f289eb27d1aca.png\" src=\"..\\..\\static\\image\\5462720a7bcb4405b38f289eb27d1aca.png\"/> </p>\n<p>这段代码的运行结果也是1。</p>\n<h3>\\W的用法</h3>\n<p>大写W代表小写w相反，表示除大写或小写字母、数字或下划线的字符（包括空格）。</p>\n<p><img alt=\"8d79b06755aa452c8a6f45e6ac20a5b6.png\" src=\"..\\..\\static\\image\\8d79b06755aa452c8a6f45e6ac20a5b6.png\"/></p>\n<p>这段代码运行结果为1，因为我在abc后面加了一个空格。</p>\n<h3> \\s的用法</h3>\n<p>它代表匹配一个肉眼无法看见的符号，比如空格或 Tab。</p>\n<p><img alt=\"618812eb829f4ee08166098bf6c6b0cb.png\" src=\"..\\..\\static\\image\\618812eb829f4ee08166098bf6c6b0cb.png\"/></p>\n<p>因为我在abc后面加了1，所以结果为0。</p>\n<h3> \\S的用法</h3>\n<p>与\\s相反，不是肉眼无法看见的符号。</p>\n<p><img alt=\"a2233aba6ff0417a9a46c442f711919e.png\" src=\"..\\..\\static\\image\\a2233aba6ff0417a9a46c442f711919e.png\"/></p>\n<p>它的结果也是1。</p>\n<h3> .的用法</h3>\n<p>这是一个小数点，表示除了 \\n 和 \\r 以外的任何字符。</p>\n<p><img alt=\"e5d8e734fe82484f833c5bc6b56796b1.png\" src=\"..\\..\\static\\image\\e5d8e734fe82484f833c5bc6b56796b1.png\"/></p>\n<p>四个小数点表示四个任意字符，所以结果为1。</p>\n<h3> |的用法</h3>\n<p>表示或，表示满足任意一个条件即可</p>\n<p><img alt=\"494aa79782774dbe85fd3cfb6258febe.png\" src=\"..\\..\\static\\image\\494aa79782774dbe85fd3cfb6258febe.png\"/></p>\n<p> 结果为1，符合第一个条件。</p>\n<p>注意，如果前后都有其他字符，要用小括号 ( ) 把 | 语句包裹起来。</p>\n<h3>[]的用法</h3>\n<p>例如[abc]表示只要是abc中的一个就可以。</p>\n<p><img alt=\"437886ecf626490297efd30d62e35c5e.png\" src=\"..\\..\\static\\image\\437886ecf626490297efd30d62e35c5e.png\"/> </p>\n<p>结果为1，因为w在we1中。</p>\n<h3>^的用法</h3>\n<p>例如[^abc]表示除abc外，其他字符都可以。</p>\n<p><img alt=\"ee4a134ff40041f09e8dcb3afce0eaa1.png\" src=\"..\\..\\static\\image\\ee4a134ff40041f09e8dcb3afce0eaa1.png\"/>结果是0，因为加了 ^。</p>\n<h3> -的用法</h3>\n<p>例如 [1-9] 代表从1到9的任意一个字符。</p>\n<p><img alt=\"155c06d63b884255a7710cae3e4e2a98.png\" src=\"..\\..\\static\\image\\155c06d63b884255a7710cae3e4e2a98.png\"/></p>\n<p>结果为1。</p>\n<h3>^ -的用法</h3>\n<p>例如^1-9表示匹配除1-9之间的任意一个字符。</p>\n<p><img alt=\"18ef3251d23c490fb11c19dc109e363d.png\" src=\"..\\..\\static\\image\\18ef3251d23c490fb11c19dc109e363d.png\"/></p>\n<p>结果为1。因为6不再1-5的范围内。</p>\n<h3>{}的用法</h3>\n<p>例如{n}表示匹配前面的表达式n次。</p>\n<p><img alt=\"a6928a7f856645fa8bab2bdb827d4aa6.png\" src=\"..\\..\\static\\image\\a6928a7f856645fa8bab2bdb827d4aa6.png\"/> </p>\n<p>结果为1。</p>\n<h3>{,}的用法</h3>\n<p>例如{a,b}表示匹配前面的表达式最少a次，最多b次。</p>\n<p><img alt=\"4a4a57c6cb984f3bae9353371ce88c09.png\" src=\"..\\..\\static\\image\\4a4a57c6cb984f3bae9353371ce88c09.png\"/> </p>\n<p>结果为1，匹配1次。</p>\n<h3>*的用法</h3>\n<p>匹配前面的表达式任意次。</p>\n<h2>regex_sreach用法</h2>\n<p>它和上面的 regex_match 有两个不同点：</p>\n<p>1. 把函数名改成 regex_sreach</p>\n<p>2. 匹配方式不同， sreach 是只要目标字符串里有子串符合要求就可以。</p>\n<p>比如我们有 dabcf这样一个字符串，如果我们用 regex_match匹配abc，结果为0，当用sreach结果为1。</p>\n<h2>regex_replace用法</h2>\n<p>它可以替换匹配成功部分为指定数据。</p>\n<p>比如我要把一个字符串里的 abc 换成123，可以用这个。</p>\n<p>它和 regex_sreach也有两个不同点：</p>\n<p>1. 函数名不同</p>\n<p>2. 函数后面还有第三个参数，就是你的指定数据，比如上面的123，为 string 类型。</p>\n<h1>最后</h1>\n<p>我自己觉得真的很详细了（超级自恋），如果有不正确请在评论区指正，有问题也可以在评论区问。</p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n</div>\n</div>", "first_tag": "Python", "cpp": 1, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-01 20:32:09", "summary": "正则表达式之前写过一篇关于正则表达式的，链接：条消息正则表达式一看就懂的博客博客正则表达式条消息正则表达式一看就懂的博客博客正则表达式正则表达式是什么简单说，它就是用来匹配字符串，主要用在爬虫上，其实"}