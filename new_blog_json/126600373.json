{"blogid": "126600373", "writerAge": "码龄1年", "writerBlogNum": "51", "writerCollect": "273", "writerComment": "199", "writerFan": "307", "writerGrade": "4级", "writerIntegral": "994", "writerName": "Ombré_mi", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126600373.jpg", "writerRankTotal": "17961", "writerRankWeekly": "115191", "writerThumb": "250", "writerVisitNum": "29107", "blog_read_count": "507", "blog_time": "于 2022-09-04 16:47:32 发布", "blog_title": "计算机网络常见面试题", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84\">一. 计算机网络结构</a></p>\n<p id=\"1.1%C2%A0ISO%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B-toc\" style=\"margin-left:40px;\"><a href=\"#1.1%C2%A0ISO%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B\">1.1 ISO七层模型</a></p>\n<p id=\"1.2%C2%A0TCP%2FIP%20%E5%9B%9B%E5%B1%82%E6%A8%A1%E5%9E%8B-toc\" style=\"margin-left:40px;\"><a href=\"#1.2%C2%A0TCP%2FIP%20%E5%9B%9B%E5%B1%82%E6%A8%A1%E5%9E%8B\">1.2 TCP/IP 四层模型</a></p>\n<p id=\"1.3%C2%A0%E4%BA%94%E5%B1%82%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-toc\" style=\"margin-left:40px;\"><a href=\"#1.3%C2%A0%E4%BA%94%E5%B1%82%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84\">1.3 五层体系结构</a></p>\n<p id=\"1.4%C2%A0%E4%BA%94%E5%B1%82%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%AD%EF%BC%8C%E6%AF%8F%E4%B8%80%E5%B1%82%E5%AF%B9%E5%BA%94%E7%9A%84%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F-toc\" style=\"margin-left:40px;\"><a href=\"#1.4%C2%A0%E4%BA%94%E5%B1%82%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%AD%EF%BC%8C%E6%AF%8F%E4%B8%80%E5%B1%82%E5%AF%B9%E5%BA%94%E7%9A%84%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F\">1.4 五层计算机网络体系结构中，每一层对应的网络协议有哪些？</a></p>\n<p id=\"1.5%C2%A0%E8%AF%B7%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%20TCP%20%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E6%9C%BA%E5%88%B6-toc\" style=\"margin-left:40px;\"><a href=\"#1.5%C2%A0%E8%AF%B7%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%20TCP%20%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E6%9C%BA%E5%88%B6\">1.5 请详细介绍一下 TCP 的三次握手机制</a></p>\n<p id=\"1.6%20SYN%E6%94%BB%E5%87%BB-toc\" style=\"margin-left:40px;\"><a href=\"#1.6%20SYN%E6%94%BB%E5%87%BB\">1.6 SYN攻击</a></p>\n<p id=\"1.7%C2%A0%E8%AF%B7%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8BTCP%20%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%BF%87%E7%A8%8B%EF%BC%9F-toc\" style=\"margin-left:40px;\"><a href=\"#1.7%C2%A0%E8%AF%B7%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8BTCP%20%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%BF%87%E7%A8%8B%EF%BC%9F\">1.7 请详细介绍一下TCP 四次挥手过程？</a></p>\n<p id=\"1.8%C2%A0%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E9%87%8A%E6%94%BE%E8%BF%9E%E6%8E%A5%E6%97%B6%EF%BC%8C%E7%AD%89%E5%BE%852MSL%E7%9A%84%E6%84%8F%E4%B9%89%EF%BC%9F-toc\" style=\"margin-left:40px;\"><a href=\"#1.8%C2%A0%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E9%87%8A%E6%94%BE%E8%BF%9E%E6%8E%A5%E6%97%B6%EF%BC%8C%E7%AD%89%E5%BE%852MSL%E7%9A%84%E6%84%8F%E4%B9%89%EF%BC%9F\">1.8 四次挥手释放连接时，等待2MSL的意义？</a></p>\n<p id=\"1.9%C2%A0TCP%20%E6%98%AF%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%8F%AF%E9%9D%A0%E6%80%A7%E7%9A%84-toc\" style=\"margin-left:40px;\"><a href=\"#1.9%C2%A0TCP%20%E6%98%AF%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%8F%AF%E9%9D%A0%E6%80%A7%E7%9A%84\">1.9 TCP 是如何保证可靠性的</a></p>\n<p id=\"1.10%C2%A0TCP%20%E5%92%8C%20UDP%20%E7%9A%84%E5%8C%BA%E5%88%AB-toc\" style=\"margin-left:40px;\"><a href=\"#1.10%C2%A0TCP%20%E5%92%8C%20UDP%20%E7%9A%84%E5%8C%BA%E5%88%AB\">1.10 TCP 和 UDP 的区别</a></p>\n<p id=\"1.11%20%E8%AF%A6%E7%BB%86%E8%AE%B2%E4%B8%80%E4%B8%8B%20TCP%20%E7%9A%84%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3-toc\" style=\"margin-left:40px;\"><a href=\"#1.11%20%E8%AF%A6%E7%BB%86%E8%AE%B2%E4%B8%80%E4%B8%8B%20TCP%20%E7%9A%84%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3\">1.11 详细讲一下 TCP 的滑动窗口</a></p>\n<p id=\"%E4%BA%8C.%20HTTP%E5%8F%8AHTTPS%E7%9B%B8%E5%85%B3-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C.%20HTTP%E5%8F%8AHTTPS%E7%9B%B8%E5%85%B3\">二. HTTP及HTTPS相关</a></p>\n<p id=\"2.1%20HTTP%E5%B8%B8%E7%94%A8%E7%9A%84%E7%8A%B6%E6%80%81%E7%A0%81%E5%8F%8A%E5%85%B6%E5%90%AB%E4%B9%89%EF%BC%9F-toc\" style=\"margin-left:40px;\"><a href=\"#2.1%20HTTP%E5%B8%B8%E7%94%A8%E7%9A%84%E7%8A%B6%E6%80%81%E7%A0%81%E5%8F%8A%E5%85%B6%E5%90%AB%E4%B9%89%EF%BC%9F\">2.1 HTTP常用的状态码及其含义？</a></p>\n<p id=\"2.2%C2%A0HTTP%E5%B8%B8%E7%94%A8%E7%9A%84%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F%EF%BC%8C%E5%8C%BA%E5%88%AB%E5%92%8C%E7%94%A8%E9%80%94%EF%BC%9F-toc\" style=\"margin-left:40px;\"><a href=\"#2.2%C2%A0HTTP%E5%B8%B8%E7%94%A8%E7%9A%84%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F%EF%BC%8C%E5%8C%BA%E5%88%AB%E5%92%8C%E7%94%A8%E9%80%94%EF%BC%9F\">2.2 HTTP常用的请求方式，区别和用途？</a></p>\n<p id=\"2.3%20%E7%AB%AF%E5%8F%A3%E5%8F%8A%E5%AF%B9%E5%BA%94%E7%9A%84%E6%9C%8D%E5%8A%A1-toc\" style=\"margin-left:40px;\"><a href=\"#2.3%20%E7%AB%AF%E5%8F%A3%E5%8F%8A%E5%AF%B9%E5%BA%94%E7%9A%84%E6%9C%8D%E5%8A%A1\">2.3 端口及对应的服务</a></p>\n<p id=\"2.4%C2%A0%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3HTTP%E5%8D%8F%E8%AE%AE%E6%98%AF%E6%97%A0%E7%8A%B6%E6%80%81%E7%9A%84%EF%BC%9F-toc\" style=\"margin-left:40px;\"><a href=\"#2.4%C2%A0%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3HTTP%E5%8D%8F%E8%AE%AE%E6%98%AF%E6%97%A0%E7%8A%B6%E6%80%81%E7%9A%84%EF%BC%9F\">2.4 如何理解HTTP协议是无状态的？</a></p>\n<p id=\"2.5%20POST%E5%92%8CGET%E6%9C%89%E5%93%AA%E4%BA%9B%E5%8C%BA%E5%88%AB%EF%BC%9F-toc\" style=\"margin-left:40px;\"><a href=\"#2.5%20POST%E5%92%8CGET%E6%9C%89%E5%93%AA%E4%BA%9B%E5%8C%BA%E5%88%AB%EF%BC%9F\">2.5 POST和GET有哪些区别？</a></p>\n<p id=\"2.6%20%E8%A7%A3%E9%87%8A%E4%B8%80%E4%B8%8BHTTP%E9%95%BF%E8%BF%9E%E6%8E%A5%E5%92%8C%E7%9F%AD%E8%BF%9E%E6%8E%A5%EF%BC%9F-toc\" style=\"margin-left:40px;\"><a href=\"#2.6%20%E8%A7%A3%E9%87%8A%E4%B8%80%E4%B8%8BHTTP%E9%95%BF%E8%BF%9E%E6%8E%A5%E5%92%8C%E7%9F%AD%E8%BF%9E%E6%8E%A5%EF%BC%9F\">2.6 解释一下HTTP长连接和短连接？</a></p>\n<p id=\"2.7%20%E8%AE%B2%E4%B8%80%E8%AE%B2%20HTTPS%20%E7%9A%84%E5%8E%9F%E7%90%86%EF%BC%9F-toc\" style=\"margin-left:40px;\"><a href=\"#2.7%20%E8%AE%B2%E4%B8%80%E8%AE%B2%20HTTPS%20%E7%9A%84%E5%8E%9F%E7%90%86%EF%BC%9F\">2.7 讲一讲 HTTPS 的原理？</a></p>\n<p id=\"2.8%20HTTPS%20%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%EF%BC%9F-toc\" style=\"margin-left:40px;\"><a href=\"#2.8%20HTTPS%20%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%EF%BC%9F\">2.8 HTTPS 的优缺点？</a></p>\n<p id=\"2.9%20HTTP%20%E5%92%8C%20HTTPS%20%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F-toc\" style=\"margin-left:40px;\"><a href=\"#2.9%20HTTP%20%E5%92%8C%20HTTPS%20%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\">2.9 HTTP 和 HTTPS 的区别？</a></p>\n<p id=\"2.10%C2%A0%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E8%BE%93%E5%85%A5%E7%BD%91%E5%9D%80%E4%B9%8B%E5%90%8E%E6%89%A7%E8%A1%8C%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88%EF%BC%9F-toc\" style=\"margin-left:40px;\"><a href=\"#2.10%C2%A0%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E8%BE%93%E5%85%A5%E7%BD%91%E5%9D%80%E4%B9%8B%E5%90%8E%E6%89%A7%E8%A1%8C%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88%EF%BC%9F\">2.10 在浏览器中输入网址之后执行会发生什么？</a></p>\n<p id=\"2.11%C2%A0%E4%BB%80%E4%B9%88%E6%98%AF%20Cookie%20%E5%92%8C%20Session%20%EF%BC%9F-toc\" style=\"margin-left:40px;\"><a href=\"#2.11%C2%A0%E4%BB%80%E4%B9%88%E6%98%AF%20Cookie%20%E5%92%8C%20Session%20%EF%BC%9F\">2.11 什么是 Cookie 和 Session ？</a></p>\n<p id=\"2.12%C2%A0Cookie%20%E5%92%8C%20Session%20%E6%98%AF%E5%A6%82%E4%BD%95%E9%85%8D%E5%90%88%E7%9A%84%EF%BC%9F-toc\" style=\"margin-left:40px;\"><a href=\"#2.12%C2%A0Cookie%20%E5%92%8C%20Session%20%E6%98%AF%E5%A6%82%E4%BD%95%E9%85%8D%E5%90%88%E7%9A%84%EF%BC%9F\">2.12 Cookie 和 Session 是如何配合的？</a></p>\n<p id=\"2.13%C2%A0Cookie%20%E5%92%8C%20Session%20%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F-toc\" style=\"margin-left:40px;\"><a href=\"#2.13%C2%A0Cookie%20%E5%92%8C%20Session%20%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\">2.13 Cookie 和 Session 的区别？</a></p>\n<hr id=\"hr-toc\"/>\n<h1>一. 计算机网络结构</h1>\n<blockquote>\n<p>计算机网络结构体系有三种：ISO七层模型、TCP/IP四层模型、五层体系结构。</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"720\" src=\"..\\..\\static\\image\\f51affab82f64d0d9fa614b0a1fb34f9.png\" width=\"808\"/></p>\n<h2 id=\"1.1%C2%A0ISO%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B\">1.1 ISO七层模型</h2>\n<blockquote>\n<p>🌞</p>\n<ul><li> <p>应用层：网络服务与最终用户的一个接口，常见的协议有：<strong>HTTP FTP  SMTP SNMP DNS。</strong></p> </li><li> <p>表示层：数据的表示、安全、压缩。，确保一个系统的应用层所发送的信息可以被另一个系统的应用层读取。</p> </li><li> <p>会话层：建立、管理、终止会话,对应主机进程，指本地主机与远程主机正在进行的会话.</p> </li><li> <p>传输层：定义传输数据的协议端口号，以及流控和差错校验,协议有<strong>TCP UDP。</strong></p> </li><li> <p>网络层：进行逻辑地址寻址，实现不同网络之间的路径选择,协议有<strong>ICMP IGMP IP等。</strong></p> </li><li> <p>数据链路层：在物理层提供比特流服务的基础上，建立相邻结点之间的数据链路。</p> </li><li> <p>物理层：建立、维护、断开物理连接。</p> </li></ul>\n</blockquote>\n<h2 id=\"1.2%C2%A0TCP%2FIP%20%E5%9B%9B%E5%B1%82%E6%A8%A1%E5%9E%8B\">1.2 TCP/IP 四层模型</h2>\n<blockquote>\n<p>🌞</p>\n<ul><li> <p>应用层：对应于OSI参考模型的（应用层、表示层、会话层）。</p> </li><li> <p>传输层: 对应OSI的传输层，为应用层实体提供端到端的通信功能，保证了数据包的顺序传送及数据的完整性。</p> </li><li> <p>网际层：对应于OSI参考模型的网络层，主要解决主机到主机的通信问题。</p> </li><li> <p>网络接口层：与OSI参考模型的数据链路层、物理层对应。</p> </li></ul>\n</blockquote>\n<h2 id=\"1.3%C2%A0%E4%BA%94%E5%B1%82%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84\">1.3 五层体系结构</h2>\n<blockquote>\n<ul><li> <p>应用层：对应于OSI参考模型的（应用层、表示层、会话层）。</p> </li><li> <p>传输层：对应OSI参考模型的的传输层。</p> </li><li> <p>网络层：对应OSI参考模型的的网络层。</p> </li><li> <p>数据链路层：对应OSI参考模型的的数据链路层。</p> </li><li> <p>物理层：对应OSI参考模型的的物理层。</p> </li></ul>\n</blockquote>\n<h2 id=\"1.4%C2%A0%E4%BA%94%E5%B1%82%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%AD%EF%BC%8C%E6%AF%8F%E4%B8%80%E5%B1%82%E5%AF%B9%E5%BA%94%E7%9A%84%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F\">1.4 五层计算机网络体系结构中，每一层对应的网络协议有哪些？</h2>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\385168f4bd45d00c5fb417bcae0411ac.png\"/></p>\n<h2 id=\"1.5%C2%A0%E8%AF%B7%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%20TCP%20%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E6%9C%BA%E5%88%B6\">1.5 <strong>请详细介绍一下 TCP 的三次握手机制</strong></h2>\n<p>三次握手的目的是连接服务器指定端口，建立TCP连接,并同步连接双方的序列号和确认号并交换 TCP 窗口大小信息.在socket编程中，客户端执行connect()时。将触发三次握手。</p>\n<p class=\"img-center\"><img alt=\"\" height=\"613\" src=\"..\\..\\static\\image\\97065ea23f654e62a3fbb360359e87c5.png\" width=\"529\"/></p>\n<p>第一次握手：<br/> 客户端发送一个TCP的SYN标志位置1的包指明客户打算连接的服务器的端口，以及初始序号X,保存在包头的序列号(Sequence Number)字段里。</p>\n<p>第二次握手：<br/> 服务器发回确认包(ACK)应答。即SYN标志位和ACK标志位均为1同时，将确认序号(Acknowledgement Number)设置为客户的I S N加1以.即X+1。</p>\n<p>第三次握手：<br/> 客户端再次发送确认包(ACK) SYN标志位为0,ACK标志位为1.并且把服务器发来ACK的序号字段+1,放在确定字段中发送给对方.并且在数据段放写ISN的+1。</p>\n<h2 id=\"1.6%20SYN%E6%94%BB%E5%87%BB\">1.6 SYN攻击</h2>\n<p>在三次握手过程中，服务器发送SYN-ACK之后，收到客户端的ACK之前的TCP连接称为半连接(half-open connect).此时服务器处于Syn_RECV状态.当收到ACK后，服务器转入ESTABLISHED状态.<br/> Syn攻击就是 攻击客户端 在短时间内伪造大量不存在的IP地址，向服务器不断地发送syn包，服务器回复确认包，并等待客户的确认，由于源地址是不存在的，服务器需要不断的重发直 至超时，这些伪造的SYN包将长时间占用未连接队列，正常的SYN请求被丢弃，目标系统运行缓慢，严重者引起网络堵塞甚至系统瘫痪。<br/> Syn攻击是一个典型的<a href=\"https://link.zhihu.com/?target=https%3A//www.centos.bz/tag/ddos/\" title=\"DDOS\">DDOS</a>攻击。检测SYN攻击非常的方便，当你在服务器上看到大量的半连接状态时，特别是源IP地址是随机的，基本上可以断定这是一次SYN攻击.在<a href=\"https://link.zhihu.com/?target=http%3A//www.centos.bz/\" title=\"Linux\">Linux</a>下可以如下命令检测是否被Syn攻击<br/> netstat -n -p TCP | grep SYN_RECV</p>\n<p>防范：</p>\n<ul><li>通过防火墙、路由器等过滤网关防护。</li><li>通过加固 TCP/IP 协议栈防范，如增加最大半连接数，缩短超时时间。</li><li>SYN cookies技术。SYN Cookies 是对 TCP 服务器端的三次握手做一些修改，专门用来防范 SYN 洪泛攻击的一种手段。</li></ul>\n<h2 id=\"1.7%C2%A0%E8%AF%B7%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8BTCP%20%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%BF%87%E7%A8%8B%EF%BC%9F\">1.7 <strong>请详细介绍一下TCP 四次挥手过程？</strong></h2>\n<p>TCP的连接的拆除需要发送四个包，因此称为四次挥手(four-way handshake)。客户端或服务器均可主动发起挥手动作，在socket编程中，任何一方执行close()操作即可产生挥手操作。</p>\n<p><img alt=\"\" height=\"604\" src=\"..\\..\\static\\image\\fd2c801c36764b448477973833d18336.png\" width=\"526\"/></p>\n<p> </p>\n<ul><li> <p>第一次挥手 (FIN=1，seq=u)，发送完毕后，客户端进入 FIN_WAIT_1 状态</p> </li><li> <p>第二次挥手 (ACK=1，ack=u+1,seq =v)，发送完毕后，服务器端进入 CLOSE_WAIT 状态，客户端接收到这个确认包之后，进入 FIN_WAIT_2 状态</p> </li><li> <p>第三次挥手 (FIN=1，ACK1,seq=w,ack=u+1)，发送完毕后，服务器端进入 LAST_ACK 状态，等待来自客户端的最后一个 ACK。</p> </li><li> <p>第四次挥手 (ACK=1，seq=u+1,ack=w+1)，客户端接收到来自服务器端的关闭请求，发送一个确认包，并进入 TIME_WAIT 状态，等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的 ACK ，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入 CLOSED 状态。服务器端接收到这个确认包之后，关闭连接，进入 CLOSED 状态。</p> </li></ul>\n<h2 id=\"1.8%C2%A0%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E9%87%8A%E6%94%BE%E8%BF%9E%E6%8E%A5%E6%97%B6%EF%BC%8C%E7%AD%89%E5%BE%852MSL%E7%9A%84%E6%84%8F%E4%B9%89%EF%BC%9F\">1.8 四次挥手释放连接时，等待2MSL的意义？</h2>\n<p class=\"img-center\"><img alt=\"\" height=\"752\" src=\"..\\..\\static\\image\\989a2840732745b1be5821b647b3c9dc.png\" width=\"626\"/></p>\n<h2 id=\"1.9%C2%A0TCP%20%E6%98%AF%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%8F%AF%E9%9D%A0%E6%80%A7%E7%9A%84\">1.9<strong> TCP 是如何保证可靠性的</strong></h2>\n<ul><li> <p>首先，TCP 的连接是基于三次握手，而断开则是四次挥手。确保连接和断开的可靠性。</p> </li><li> <p>其次，TCP 的可靠性，还体现在有状态 ;TCP 会记录哪些数据发送了，哪些数据被接受了，哪些没有被接受，并且保证数据包按序到达，保证数据传输不出差错。</p> </li><li> <p>再次，TCP 的可靠性，还体现在可控制。它有数据包校验、ACK 应答、超时重传 (发送方)、失序数据重传（接收方）、丢弃重复数据、流量控制（滑动窗口）和拥塞控制等机制。</p> </li></ul>\n<h2 id=\"1.10%C2%A0TCP%20%E5%92%8C%20UDP%20%E7%9A%84%E5%8C%BA%E5%88%AB\">1.10 TCP 和 UDP 的区别</h2>\n<ol><li> <p>TCP 面向连接（（如打电话要先拨号建立连接）;UDP 是无连接的，即发送数据之前不需要建立连接。</p> </li><li> <p>TCP 要求安全性，提供可靠的服务，通过 TCP 连接传送的数据，不丢失、不重复、安全可靠。而 UDP 尽最大努力交付，即不保证可靠交付。</p> </li><li> <p>TCP 是点对点连接的，UDP 一对一，一对多，多对多都可以</p> </li><li> <p>TCP 传输效率相对较低，而 UDP 传输效率高，它适用于对高速传输和实时性有较高的通信或广播通信。</p> </li><li> <p>TCP 适合用于网页，邮件等；UDP 适合用于视频，语音广播等</p> </li><li> <p>TCP 面向字节流，UDP 面向报文</p> </li></ol>\n<h2 id=\"1.11%20%E8%AF%A6%E7%BB%86%E8%AE%B2%E4%B8%80%E4%B8%8B%20TCP%20%E7%9A%84%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3\">1.11 详细讲一下 TCP 的滑动窗口</h2>\n<p>在进行数据传输时，如果传输的数据比较大，就需要拆分为多个数据包进行发送。TCP 协议需要对数据进行确认后，才可以发送下一个数据包。这样一来，就会在等待确认应答包环节浪费时间。为了避免这种情况，TCP引入了窗口概念。窗口大小指的是不需要等待确认应答包而可以继续发送数据包的最大值。</p>\n<p class=\"img-center\"><img alt=\"\" height=\"605\" src=\"..\\..\\static\\image\\f644a0bcdef54e5f8fdedac3c2652b27.png\" width=\"1165\"/></p>\n<p>从上面的图可以看到滑动窗口左边的是已发送并且被确认的分组，滑动窗口右边是还没有轮到的分组。</p>\n<p>滑动窗口里面也分为两块，一块是已经发送但是未被确认的分组，另一块是窗口内等待发送的分组。随着已发送的分组不断被确认，窗口内等待发送的分组也会不断被发送。整个窗口就会往右移动，让还没轮到的分组进入窗口内。</p>\n<p>可以看到滑动窗口起到了一个限流的作用，也就是说当前滑动窗口的大小决定了当前 TCP 发送包的速率，而滑动窗口的大小取决于拥塞控制窗口和流量控制窗口的两者间的最小值。</p>\n<h1 id=\"%E4%BA%8C.%20HTTP%E5%8F%8AHTTPS%E7%9B%B8%E5%85%B3\">二. HTTP及HTTPS相关</h1>\n<h2 id=\"2.1%20HTTP%E5%B8%B8%E7%94%A8%E7%9A%84%E7%8A%B6%E6%80%81%E7%A0%81%E5%8F%8A%E5%85%B6%E5%90%AB%E4%B9%89%EF%BC%9F\">2.1 HTTP常用的状态码及其含义？</h2>\n<p class=\"img-center\"><img alt=\"\" height=\"263\" src=\"..\\..\\static\\image\\ecbf13f464fd4ee2bb4342c81488738d.png\" width=\"565\"/></p>\n<p>日常开发中的这几个状态码的含义：</p>\n<p class=\"img-center\"><img alt=\"\" height=\"363\" src=\"..\\..\\static\\image\\6ca5fccb9f93401e952ef14086b2934b.png\" width=\"601\"/></p>\n<p>状态码301和302的区别：</p>\n<p><strong>共同点</strong>：301和302状态码都表示重定向，就是说浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的URL地址，这个地址可以从响应的Location首部中获取（<strong>用户看到的效果就是他输入的地址A瞬间变成了另一个地址B</strong>）。 <strong>不同点</strong>：301表示旧地址A的资源已经被永久地移除了(这个资源不可访问了)，搜索引擎在抓取新内容的同时也将旧的网址交换为重定向之后的网址；302表示旧地址A的资源还在（仍然可以访问），这个重定向只是临时地从旧地址A跳转到地址B，搜索引擎会抓取新的内容而保存旧的网址。</p>\n<p><strong>重定向原因</strong>：</p>\n<ol><li>网站调整（如改变网页目录结构）；</li><li>网页被移到一个新地址；</li><li>网页扩展名改变(如应用需要把.php改成.Html或.shtml)。</li></ol>\n<h2 id=\"2.2%C2%A0HTTP%E5%B8%B8%E7%94%A8%E7%9A%84%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F%EF%BC%8C%E5%8C%BA%E5%88%AB%E5%92%8C%E7%94%A8%E9%80%94%EF%BC%9F\">2.2 HTTP常用的请求方式，区别和用途？</h2>\n<p class=\"img-center\"><img alt=\"\" height=\"369\" src=\"..\\..\\static\\image\\660a479687c04e96ae36162785e5889b.png\" width=\"585\"/></p>\n<h2 id=\"2.3%20%E7%AB%AF%E5%8F%A3%E5%8F%8A%E5%AF%B9%E5%BA%94%E7%9A%84%E6%9C%8D%E5%8A%A1\">2.3 端口及对应的服务</h2>\n<p class=\"img-center\"><img alt=\"\" height=\"480\" src=\"..\\..\\static\\image\\8247e1ed9443434a82a6eff03d941eff.png\" width=\"554\"/></p>\n<h2 id=\"2.4%C2%A0%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3HTTP%E5%8D%8F%E8%AE%AE%E6%98%AF%E6%97%A0%E7%8A%B6%E6%80%81%E7%9A%84%EF%BC%9F\">2.4 如何理解HTTP协议是无状态的？</h2>\n<blockquote>\n<p>如何理解无状态这个词呢？</p>\n<p>★</p>\n<p>当浏览器第一次发送请求给服务器时，服务器响应了；如果同个浏览器发起第二次请求给服务器时，它还是会响应，但是呢，服务器不知道你就是刚才的那个浏览器。简言之，服务器不会去记住你是谁，所以是无状态协议。</p>\n<p>★</p>\n</blockquote>\n<p>可以通过一个生活中的例子，来更好理解并记住它：</p>\n<p><strong>有状态场景：</strong></p>\n<ul><li> <p>小红：今天吃啥子？</p> </li><li> <p>小明：红烧鲤鱼~</p> </li><li> <p>小红：味道怎么样呀？</p> </li><li> <p>小明：还不错，好香！</p> </li></ul>\n<p><strong>无状态的场景：</strong></p>\n<ul><li> <p>小红：今天吃啥子？</p> </li><li> <p>小明：红烧鲤鱼~</p> </li><li> <p>小红：味道怎么样呀？</p> </li><li> <p>小明：？啊？你说啥？什么鬼？什么味道怎么样？</p> </li></ul>\n<p><strong>Http加了Cookie的话</strong>：</p>\n<ul><li> <p>小红：今天吃啥子？</p> </li><li> <p>小明：红烧鲤鱼~</p> </li><li> <p>小红：你今天吃的红烧鲤鱼，味道怎么样呀？</p> </li><li> <p>小明：还不错，好香！</p> </li></ul>\n<h2 id=\"2.5%20POST%E5%92%8CGET%E6%9C%89%E5%93%AA%E4%BA%9B%E5%8C%BA%E5%88%AB%EF%BC%9F\">2.5 POST和GET有哪些区别？</h2>\n<p>★ 这道题主要考察的知识点是POST和GET的区别，可以从<strong>数据包、编码方式、请求参数、收藏为书签、历史记录、安全性</strong>等几方面去回答。</p>\n<p class=\"img-center\"><img alt=\"\" height=\"224\" src=\"..\\..\\static\\image\\b923e09bfa6848199849da790a48d313.png\" width=\"784\"/></p>\n<h2 id=\"2.6%20%E8%A7%A3%E9%87%8A%E4%B8%80%E4%B8%8BHTTP%E9%95%BF%E8%BF%9E%E6%8E%A5%E5%92%8C%E7%9F%AD%E8%BF%9E%E6%8E%A5%EF%BC%9F\">2.6 解释一下HTTP长连接和短连接？</h2>\n<p><strong>在HTTP/1.0中，默认使用的是短连接</strong>。也就是说，浏览器和服务器每进行一次HTTP操作，就建立一次连接，但任务结束就中断连接。如果客户端浏览器访问的某个HTML或其他类型的 Web页中包含有其他的Web资源，如JavaScript文件、图像文件、CSS文件等；当浏览器每遇到这样一个Web资源，就会建立一个HTTP会话。</p>\n<p>但从 <strong>HTTP/1.1起，默认使用长连接</strong>，用以保持连接特性。使用长连接的HTTP协议，会在响应头有加入这行代码：<code>Connection:keep-alive</code></p>\n<p>在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的 TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接要客户端和服务端都支持长连接。</p>\n<p><strong>HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。</strong></p>\n<h2 id=\"2.7%20%E8%AE%B2%E4%B8%80%E8%AE%B2%20HTTPS%20%E7%9A%84%E5%8E%9F%E7%90%86%EF%BC%9F\">2.7 讲一讲 HTTPS 的原理？</h2>\n<p><img alt=\"\" height=\"772\" src=\"..\\..\\static\\image\\9f1b911e129a4bcd9f122c77b18f9b1e.png\" width=\"949\"/></p>\n<p>加密流程按图中的序号分为：</p>\n<ol><li> <p>客户端请求 HTTPS 网址，然后连接到 server 的 443 端口 (HTTPS 默认端口，类似于 HTTP 的80端口)。</p> </li><li> <p>采用 HTTPS 协议的服务器必须要有一套数字 CA (Certification Authority)证书。颁发证书的同时会产生一个私钥和公钥。私钥由服务端自己保存，不可泄漏。公钥则是附带在证书的信息中，可以公开的。证书本身也附带一个证书电子签名，这个签名用来验证证书的完整性和真实性，可以防止证书被篡改。</p> </li><li> <p>服务器响应客户端请求，将证书传递给客户端，证书包含公钥和大量其他信息，比如证书颁发机构信息，公司信息和证书有效期等。</p> </li><li> <p>客户端解析证书并对其进行验证。如果证书不是可信机构颁布，或者证书中的域名与实际域名不一致，或者证书已经过期，就会向访问者显示一个警告，由其选择是否还要继续通信。</p> <p>如果证书没有问题，客户端就会从服务器证书中取出服务器的公钥A。然后客户端还会生成一个随机码 KEY，并使用公钥A将其加密。</p> </li><li> <p>客户端把加密后的随机码 KEY 发送给服务器，作为后面对称加密的密钥。</p> </li><li> <p>服务器在收到随机码 KEY 之后会使用私钥B将其解密。经过以上这些步骤，客户端和服务器终于建立了安全连接，完美解决了对称加密的密钥泄露问题，接下来就可以用对称加密愉快地进行通信了。</p> </li><li> <p>服务器使用密钥 (随机码 KEY)对数据进行对称加密并发送给客户端，客户端使用相同的密钥 (随机码 KEY)解密数据。</p> </li><li> <p>双方使用对称加密愉快地传输所有数据。</p> </li></ol>\n<h2 id=\"2.8%20HTTPS%20%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%EF%BC%9F\">2.8 HTTPS 的优缺点？</h2>\n<p><strong>优点</strong>：</p>\n<ul><li> <p>安全性：</p>\n<ol><li> <p>使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；</p> </li><li> <p>HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。</p> </li><li> <p>HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。</p> </li></ol></li><li> <p>SEO方面：谷歌曾在2014年8月份调整搜索引擎算法，并称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”。</p> </li></ul>\n<p><strong>缺点</strong>：</p>\n<ul><li>在相同网络环境中，HTTPS 相比 HTTP 无论是响应时间还是耗电量都有大幅度上升。</li><li>HTTPS 的安全是有范围的，在黑客攻击、服务器劫持等情况下几乎起不到作用。</li><li>在现有的证书机制下，中间人攻击依然有可能发生。</li><li>HTTPS 需要更多的服务器资源，也会导致成本的升高。</li></ul>\n<h2 id=\"2.9%20HTTP%20%E5%92%8C%20HTTPS%20%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\">2.9 HTTP 和 HTTPS 的区别？</h2>\n<p class=\"img-center\"><img alt=\"\" height=\"268\" src=\"..\\..\\static\\image\\62efad3bb33a4dce92b8e52a46e93364.png\" width=\"789\"/></p>\n<h2 id=\"2.10%C2%A0%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E8%BE%93%E5%85%A5%E7%BD%91%E5%9D%80%E4%B9%8B%E5%90%8E%E6%89%A7%E8%A1%8C%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88%EF%BC%9F\">2.10 在浏览器中输入网址之后执行会发生什么？</h2>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\6ccefb4a919170e2734b056784152d99.png\"/></p>\n<ol><li> <p>DNS解析，查找域名对应的IP地址</p> </li><li> <p>与服务器通过三次握手，建立TCP连接</p> </li><li> <p>向服务器发送HTTP请求</p> </li><li> <p>服务器处理请求，返回网页内容</p> </li><li> <p>浏览器解析并渲染页面</p> </li><li> <p>TCP四次挥手，连接结束</p> </li></ol>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\9c42129860ae1494e4c755986d4a2bb8.png\"/></p>\n<h2 id=\"2.11%C2%A0%E4%BB%80%E4%B9%88%E6%98%AF%20Cookie%20%E5%92%8C%20Session%20%EF%BC%9F\">2.11 什么是 Cookie 和 Session ？</h2>\n<p><strong>什么是 Cookie？</strong></p>\n<p>HTTP Cookie（也叫 Web Cookie或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie 使基于无状态的 HTTP 协议记录稳定的状态信息成为了可能。</p>\n<p>Cookie 主要用于以下三个方面：</p>\n<ul><li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li><li>个性化设置（如用户自定义设置、主题等）</li><li>浏览器行为跟踪（如跟踪分析用户行为等）</li></ul>\n<p><strong>什么是 Session？</strong></p>\n<p>Session 代表着服务器和客户端一次会话的过程。Session 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当客户端关闭会话，或者 Session 超时失效时会话结束。</p>\n<h2 id=\"2.12%C2%A0Cookie%20%E5%92%8C%20Session%20%E6%98%AF%E5%A6%82%E4%BD%95%E9%85%8D%E5%90%88%E7%9A%84%EF%BC%9F\">2.12 Cookie 和 Session 是如何配合的？</h2>\n<p>用户第一次请求服务器的时候，服务器根据用户提交的相关信息，创建对应的 Session ，请求返回时将此 Session 的唯一标识信息 SessionID 返回给浏览器，浏览器接收到服务器返回的 SessionID 信息后，会将此信息存入到 Cookie 中，同时 Cookie 记录此 SessionID 属于哪个域名。</p>\n<p>当用户第二次访问服务器的时候，请求会自动判断此域名下是否存在 Cookie 信息，如果存在自动将 Cookie 信息也发送给服务端，服务端会从 Cookie 中获取 SessionID，再根据 SessionID 查找对应的 Session 信息，如果没有找到说明用户没有登录或者登录失效，如果找到 Session 证明用户已经登录可执行后面操作。</p>\n<p>根据以上流程可知，SessionID 是连接 Cookie 和 Session 的一道桥梁，大部分系统也是根据此原理来验证用户登录状态。</p>\n<h2 id=\"2.13%C2%A0Cookie%20%E5%92%8C%20Session%20%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\">2.13 Cookie 和 Session 的区别？</h2>\n<ul><li>作用范围不同，Cookie 保存在客户端（浏览器），Session 保存在服务器端。</li><li>存取方式的不同，Cookie 只能保存 ASCII，Session 可以存任意数据类型，一般情况下我们可以在 Session 中保持一些常用变量信息，比如说 UserId 等。</li><li>有效期不同，Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭或者 Session 超时都会失效。</li><li>隐私策略不同，Cookie 存储在客户端，比较容易遭到不法获取，早期有人将用户的登录名和密码存储在 Cookie 中导致信息被窃取；Session 存储在服务端，安全性相对 Cookie 要好一些。</li><li>存储大小不同， 单个 Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie。 <p></p> </li></ul>\n</div>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 1, "time": "2022-09-04 16:47:32", "summary": "目录一计算机网络结构七层模型四层模型五层体系结构五层计算机网络体系结构中，每一层对应的网络协议有哪些？请详细介绍一下的三次握手机制攻击请详细介绍一下四次挥手过程？四次挥手释放连接时，等待的意义？是如何"}