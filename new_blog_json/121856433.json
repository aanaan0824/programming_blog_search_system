{"blogid": "121856433", "writerAge": "码龄2年", "writerBlogNum": "71", "writerCollect": "3182", "writerComment": "2278", "writerFan": "18797", "writerGrade": "6级", "writerIntegral": "7435", "writerName": "小码农UU", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_121856433.jpg", "writerRankTotal": "56126", "writerRankWeekly": "5659", "writerThumb": "3710", "writerVisitNum": "118178", "blog_read_count": "2554", "blog_time": "于 2021-12-10 14:56:07 发布", "blog_title": "算法给小码农八大排序 八奇计只为宝儿姐", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#font_color996633_______font_3\"><font color=\"#996633\">八排 八奇迹</font></a></li><li><a href=\"#_5\">排序</a></li><li><ul><li><a href=\"#_7\">排序的概念及其运用</a></li><li><ul><li><a href=\"#_9\">排序的概念</a></li><li><a href=\"#_16\">排序运用</a></li><li><ul><li><a href=\"#_18\">==来上京东==</a></li><li><a href=\"#_24\">==大学排名==</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_28\">常见的排序算法</a></li><li><a href=\"#_32\">常见排序算法的实现</a></li><li><ul><li><ul><li><a href=\"#_34\">插入排序</a></li><li><ul><li><a href=\"#_36\">基本思想</a></li><li><a href=\"#_48\">==但是数组肯定不是有序的，所以我们得先让数组有序==</a></li></ul>\n</li><li><a href=\"#_54\">先把打印数组给剥离出来</a></li><li><a href=\"#_68\">插入排序</a></li><li><a href=\"#______106\">希尔排序( 缩小增量排序 ) (反正希尔牛逼)</a></li><li><ul><li><a href=\"#_114\">希尔排序步骤</a></li><li><ul><li><a href=\"#_122\">==**单组多躺**==</a></li><li><a href=\"#_128\">==**多组插入**==</a></li><li><a href=\"#_146\">==**多组一锅炖（要是分组插麻烦我们也可以一锅炖）**==</a></li><li><a href=\"#gap__1gap__1_150\">==**多次预排序(gap &gt; 1)+直接插入（gap == 1）**==</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#_162\">测直接插入排序和希尔排序的性能（让你看看什么才叫希尔排序）</a></li><li><a href=\"#_171\">堆</a></li><li><ul><li><a href=\"#_177\">堆的概念及结构</a></li><li><ul><li><a href=\"#_185\">堆的性质</a></li><li><a href=\"#_190\">堆的结构（这里实现大堆）</a></li><li><ul><li><a href=\"#_196\">堆的结构体</a></li><li><a href=\"#HeapInit_209\">堆初始化函数HeapInit</a></li><li><a href=\"#HeapDestroy_223\">堆销毁函数HeapDestroy</a></li><li><a href=\"#HeapPrint_237\">堆打印函数HeapPrint</a></li><li><a href=\"#AdjustUp_254\">向上调整函数AdjustUp</a></li><li><a href=\"#HeapPush_292\">堆插入函数HeapPush</a></li><li><a href=\"#HeapErmpy_331\">判断堆是否为空函数HeapErmpy</a></li><li><a href=\"#HeapSize_342\">返回堆大小函数HeapSize</a></li><li><a href=\"#Swap_355\">交换函数Swap</a></li><li><a href=\"#AdjustDown_361\">向下调整函数AdjustDown</a></li><li><a href=\"#HeapPop_369\">堆删除函数HeapPop</a></li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#_396\">排序</a></li><li><ul><li><a href=\"#_398\">常见的排序算法</a></li><li><a href=\"#_402\">常见排序算法的实现</a></li><li><ul><li><a href=\"#__404\">选择排序 ==最慢排序（最好理解）所以搬血==</a></li><li><ul><li><a href=\"#_406\">基本思想：</a></li><li><a href=\"#_410\">直接选择排序</a></li><li><a href=\"#_________434\">数据交换 ==剥离出来其他函数也会用到 我明明是简洁之人为了一时的高级而忘记了朴素罪过罪过==</a></li><li><a href=\"#_445\">选择排序</a></li></ul>\n</li><li><a href=\"#_484\">堆排序</a></li><li><ul><li><a href=\"#_495\">向下调整函数</a></li><li><a href=\"#_548\">堆排序代码</a></li></ul>\n</li></ul>\n</li><li><a href=\"#__573\">测性能 ==让你看看什么叫堆==</a></li><li><ul><li><a href=\"#1000___577\">==1000大小数组 一千==</a></li><li><a href=\"#10000____581\">==10000大小数组 一万==</a></li><li><a href=\"#100000_____585\">==100000大小数组 十万==</a></li><li><a href=\"#1000000____589\">==1000000大小数组 一百万==</a></li><li><a href=\"#10000000__________593\">==10000000大小数组 一千万 我们不带选择，插入玩太拉跨了，我们看看希尔，堆在超大数据面前谁性能更优==</a></li></ul>\n</li><li><a href=\"#_597\">性能函数图</a></li></ul>\n</li><li><a href=\"#font_color996633_font_604\"><font color=\"#996633\">排序</font></a></li><li><ul><li><a href=\"#font_color9400D3_font_606\"><font color=\"#9400D3\">常见的排序算法</font></a></li><li><a href=\"#font_color9400D3_font_610\"><font color=\"#9400D3\">常见排序算法的实现</font></a></li><li><ul><li><a href=\"#font_colorFF0033_font_612\"><font color=\"#FF0033\">归并排序</font></a></li><li><ul><li><a href=\"#font_color0000CC_font_614\"><font color=\"#0000CC\">基本思想</font></a></li><li><a href=\"#font_color0000CC_font_626\"><font color=\"#0000CC\">递归写法</font></a></li><li><ul><li><a href=\"#font_colorFF00FF_font_630\"><font color=\"#FF00FF\">通过调试看一下现象</font></a></li><li><a href=\"#font_colorFF00FF_font_634\"><font color=\"#FF00FF\">归并顺序</font></a></li></ul>\n</li><li><a href=\"#font_color0000CC_font_642\"><font color=\"#0000CC\">归并排序递归子函数</font></a></li><li><a href=\"#font_color0000CC_font_686\"><font color=\"#0000CC\">归并排序递归实现</font></a></li><li><a href=\"#font_color0000CC_font_705\"><font color=\"#0000CC\">非递归写法</font></a></li><li><ul><li><a href=\"#font_colorFF00FF_2nfont_707\"><font color=\"#FF00FF\">2^n^个元素的数组</font></a></li><li><a href=\"#font_colorFF00FF_font_719\"><font color=\"#FF00FF\">随便几个元素的数组</font></a></li><li><ul><li><a href=\"#font_color00CC00_font_721\"><font color=\"#00CC00\">修正下标</font></a></li></ul>\n</li></ul>\n</li><li><a href=\"#font_color0000CC_________font_745\"><font color=\"#0000CC\">归并排序非递归实现 修正下标</font></a></li><li><ul><li><ul><li><a href=\"#font_color00CC00_font_820\"><font color=\"#00CC00\">归一部分拷一部分</font></a></li></ul>\n</li></ul>\n</li><li><a href=\"#font_color0000CC_________font_826\"><font color=\"#0000CC\">归并排序非递归实现 归一部分拷一部分</font></a></li><li><a href=\"#font_color0000CC_font_917\"><font color=\"#0000CC\">归并排序的特性总结</font></a></li><li><a href=\"#font_color0000CC_font_924\"><font color=\"#0000CC\">时间复杂度</font></a></li></ul>\n</li><li><a href=\"#font_colorFF0033_font_936\"><font color=\"#FF0033\">测性能</font></a></li><li><ul><li><a href=\"#font_color0000CC_1000____font_938\"><font color=\"#0000CC\">1000 一千</font></a></li><li><a href=\"#font_color0000CC_10000________font_942\"><font color=\"#0000CC\">10000 一万 ==先抛弃选择和冒泡==</font></a></li><li><a href=\"#font_color0000CC_100000______________font_946\"><font color=\"#0000CC\">100000 十万 ==再抛弃直接插入==</font></a></li><li><a href=\"#font_color0000CC_1000000____font_950\"><font color=\"#0000CC\">1000000 一百万</font></a></li><li><a href=\"#font_color0000CC_10000000____font_954\"><font color=\"#0000CC\">10000000 一千万</font></a></li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#font_color996633_font_961\"><font color=\"#996633\">排序</font></a></li><li><ul><li><a href=\"#font_color9400D3_______font_963\"><font color=\"#9400D3\">常见的排序算法 扩展</font></a></li><li><ul><li><a href=\"#font_colorFF0033_font___965\"><font color=\"#FF0033\">计数排序</font> 不进行数据的比较，而是统计数据出现的次数</a></li><li><ul><li><a href=\"#font_color0000CC_font_990\"><font color=\"#0000CC\">计数排序</font></a></li><li><a href=\"#font_color0000CC_font_1029\"><font color=\"#0000CC\">计数排序的特性总结</font></a></li></ul>\n</li><li><a href=\"#font_colorFF0033_font_1035\"><font color=\"#FF0033\">测性能</font></a></li><li><ul><li><a href=\"#font_color0000CC_1000___font_1037\"><font color=\"#0000CC\">1000 一千</font></a></li><li><a href=\"#font_color0000CC_10000___font_1041\"><font color=\"#0000CC\">10000 一万</font></a></li><li><a href=\"#font_color0000CC_100000___font_1045\"><font color=\"#0000CC\">100000 十万</font></a></li><li><a href=\"#font_color0000CC_1000000___font_1049\"><font color=\"#0000CC\">1000000 一百万</font></a></li><li><a href=\"#font_color0000CC_10000000___font_1053\"><font color=\"#0000CC\">10000000 一千万</font></a></li></ul>\n</li></ul>\n</li><li><a href=\"#font_color9400D3_font_1059\"><font color=\"#9400D3\">排序总结</font></a></li><li><ul><li><ul><li><a href=\"#font_color0000CC_font_1063\"><font color=\"#0000CC\">稳定性</font></a></li></ul>\n</li><li><a href=\"#font_colorFF0033_font_1077\"><font color=\"#FF0033\">八大排序总结</font></a></li><li><a href=\"#font_colorFF0033_font_1136\"><font color=\"#FF0033\">代码</font></a></li><li><ul><li><a href=\"#font_color0000CC_Sorthfont_1138\"><font color=\"#0000CC\">Sort.h</font></a></li><li><a href=\"#font_color0000CC_Sortcfont_1186\"><font color=\"#0000CC\">Sort.c</font></a></li><li><a href=\"#font_color0000CC_testcfont_1699\"><font color=\"#0000CC\">test.c</font></a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</div>\n<br/>\n<img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/711a0afc4cd64814b880a797877bb34f.gif#pic_center\"/>\n<p></p>\n<h1><a id=\"font_color996633_______font_3\"></a><font color=\"#996633\">八排 八奇迹</font></h1>\n<h1><a id=\"_5\"></a>排序</h1>\n<h2><a id=\"_7\"></a>排序的概念及其运用</h2>\n<h3><a id=\"_9\"></a>排序的概念</h3>\n<blockquote>\n<p>==排序：==所谓排序，就是使一串记录，按照其中的某个或某些关键字的大小，递增或递减的排列起来的操作。<br/> ==稳定性：==假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变，即在原序列中，r[i]=r[j]，且r[i]在r[j]之前，而在排序后的序列中，r[i]仍在r[j]之前，则称这种排序算法是稳定的；否则称为不稳定的。<br/> ==内部排序：==数据元素全部放在内存中的排序。<br/> ==外部排序：==数据元素太多不能同时放在内存中，根据排序过程的要求不能在内外存之间移动数据的排序。</p>\n</blockquote>\n<h3><a id=\"_16\"></a>排序运用</h3>\n<h4><a id=\"_18\"></a><mark>来上京东</mark></h4>\n<p><img alt=\"image-20211119074502898\" src=\"..\\..\\static\\image\\4bb4001f75a4cfb2bfeb8d52051a9a7d.png\"/></p>\n<p><img alt=\"image-20211119075348810\" src=\"..\\..\\static\\image\\e8ea68240035df4cea6984be4838f731.png\"/></p>\n<h4><a id=\"_24\"></a><mark>大学排名</mark></h4>\n<p><img alt=\"image-20211119081356918\" src=\"..\\..\\static\\image\\281ba779be13b58d83511b114784d5d0.png\"/></p>\n<h2><a id=\"_28\"></a>常见的排序算法</h2>\n<p><img alt=\"image-20211119082822804\" src=\"..\\..\\static\\image\\8862516cf1c650829fe87fa65e38acb2.png\"/></p>\n<h2><a id=\"_32\"></a>常见排序算法的实现</h2>\n<h4><a id=\"_34\"></a>插入排序</h4>\n<h5><a id=\"_36\"></a>基本思想</h5>\n<blockquote>\n<p>直接插入排序是一种简单的插入排序法，其基本思想是：把待排序的记录按其关键码值的大小逐个插入到一个已经排好序的有序序列中，直到所有的记录插入完为止，得到一个新的有序序列 。</p>\n</blockquote>\n<blockquote>\n<p>实际中我们玩扑克牌时，就用了插入排序的思想</p>\n</blockquote>\n<p><img alt=\"image-20211119083748963\" src=\"..\\..\\static\\image\\e8fb61d2d15a6ae1a6f2c1f4a944c39f.png\"/></p>\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/7f02c00309833b9a942cea7482f8a13c.gif\"/></p>\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/6d272c00ca279cfba4fd61868d35ab13.gif\"/></p>\n<h5><a id=\"_48\"></a><mark>但是数组肯定不是有序的，所以我们得先让数组有序</mark></h5>\n<p><img alt=\"image-20211119104919792\" src=\"..\\..\\static\\image\\0bc1ea6aede6117380e3bfd95eae8f82.png\"/></p>\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/4b4d1bc3c1507bfdda6314dad5901a6f.gif\"/></p>\n<h4><a id=\"_54\"></a>先把打印数组给剥离出来</h4>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">// 打印数组</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PrintArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_68\"></a>插入排序</h4>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">// 插入排序</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">InsertSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>end<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//要插入的数比顺序中的数小就准备挪位置</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\ta<span class=\"token punctuation\">[</span>end <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tend<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token comment\">//插入的数比顺序中的要大就跳出</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//跳出来两种情况</span>\n\t\t<span class=\"token comment\">//1.end == -1 的时候</span>\n\t\t<span class=\"token comment\">//2.break 的时候</span>\n\t\t<span class=\"token comment\">//把x给end前面一位</span>\n\t\ta<span class=\"token punctuation\">[</span>end <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>插入排序的时间复杂度：O(N<sup>2</sup>)</p>\n<p>最好：O(N) — 顺序有序 （接近有序）</p>\n<p>最坏：O(N<sup>2</sup>) — 逆序</p>\n<p>插入排序的空间复杂度：O(1)</p>\n</blockquote>\n<h4><a id=\"______106\"></a>希尔排序( 缩小增量排序 ) (反正希尔牛逼)</h4>\n<blockquote>\n<p><mark>希尔排序是在优化直接插入排序，而且效果超级明显</mark>，为什么是优化呢，因为我们知道直接插入排序接近有序了就会非常快，那我就创造这样的有序，让他时间复杂度接近O(N)，<mark>我们知道排序的时间复杂度最好情况就是O(N)</mark>，而我们接近O(N)也是相当了不起了，基本是接近天花板了</p>\n</blockquote>\n<blockquote>\n<p>希尔排序法又称缩小增量法。希尔排序法的基本思想是：先选定一个整数，把待排序文件中所有记录分成个组，所有距离为的记录分在同一组内，并对每一组内的记录进行排序。然后，取，重复上述分组和排序的工作。当到达=1时，所有记录在统一组内排好序。</p>\n</blockquote>\n<p><img alt=\"image-20211119112337295\" src=\"..\\..\\static\\image\\6136520005a72b689b50ebcb862000aa.png\"/></p>\n<h5><a id=\"_114\"></a>希尔排序步骤</h5>\n<blockquote>\n<p>1.分组预排序 ---- 数组接近有序</p>\n<p>按gap分组，对分组值进行插入排序 <mark>分成gap组</mark></p>\n<p>2.直接插入排序 数组接近有序，直接插入的时间复杂度就是O(N)</p>\n</blockquote>\n<h6><a id=\"_122\"></a><mark><strong>单组多躺</strong></mark></h6>\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/1908ec15201afda23906a1e5672f8195.gif\"/></p>\n<p><img alt=\"image-20211119184713457\" src=\"..\\..\\static\\image\\780e29a510edf5332eb9bbc22e54f804.png\"/></p>\n<h6><a id=\"_128\"></a><mark><strong>多组插入</strong></mark></h6>\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/b07a7f419f2d846312ae1b603161173a.gif\"/></p>\n<p><img alt=\"image-20211119195005253\" src=\"..\\..\\static\\image\\60a733fa8ba9d011586934ff0873dc09.png\"/></p>\n<blockquote>\n<p>间距为gap多组预排实现的时间复杂度O(gap*(1+…+N/gap))</p>\n<p>最好：O(N)</p>\n<p>最好：O(N)</p>\n<p>最坏：O(gap*(1+…+N/gap))</p>\n<p>gap越大，预排越快，预排后越不接近有序</p>\n<p>gap越小，预排越慢，预排后越接近有序</p>\n</blockquote>\n<h6><a id=\"_146\"></a><mark><strong>多组一锅炖（要是分组插麻烦我们也可以一锅炖）</strong></mark></h6>\n<p><img alt=\"image-20211119202112052\" src=\"..\\..\\static\\image\\288c1ae0791c18ce561d966b8b7fc821.png\"/></p>\n<h6><a id=\"gap__1gap__1_150\"></a><mark><strong>多次预排序(gap &gt; 1)+直接插入（gap == 1）</strong></mark></h6>\n<p><mark>gap/2</mark></p>\n<p><img alt=\"image-20211119211913746\" src=\"..\\..\\static\\image\\cbb51564c98f6600973227252244c37f.png\"/></p>\n<p><mark>gap/3</mark></p>\n<p><img alt=\"image-20211119213858518\" src=\"..\\..\\static\\image\\7fd62116fe571a5de159d7a0d0242f7d.png\"/></p>\n<blockquote>\n<p>时间复杂度O(N<sup>1.3</sup>)<mark>记住就行，反正记住希尔很牛逼就行，希尔排序很快</mark></p>\n</blockquote>\n<h1><a id=\"_162\"></a>测直接插入排序和希尔排序的性能（让你看看什么才叫希尔排序）</h1>\n<p><img alt=\"image-20211119221646761\" src=\"..\\..\\static\\image\\918cf4dafad933a3a75e2ba0625e13c4.png\"/></p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#font_color996633_______font_3\"><font color=\"#996633\">八排 八奇迹</font></a></li><li><a href=\"#_5\">排序</a></li><li><ul><li><a href=\"#_7\">排序的概念及其运用</a></li><li><ul><li><a href=\"#_9\">排序的概念</a></li><li><a href=\"#_16\">排序运用</a></li><li><ul><li><a href=\"#_18\">==来上京东==</a></li><li><a href=\"#_24\">==大学排名==</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_28\">常见的排序算法</a></li><li><a href=\"#_32\">常见排序算法的实现</a></li><li><ul><li><ul><li><a href=\"#_34\">插入排序</a></li><li><ul><li><a href=\"#_36\">基本思想</a></li><li><a href=\"#_48\">==但是数组肯定不是有序的，所以我们得先让数组有序==</a></li></ul>\n</li><li><a href=\"#_54\">先把打印数组给剥离出来</a></li><li><a href=\"#_68\">插入排序</a></li><li><a href=\"#______106\">希尔排序( 缩小增量排序 ) (反正希尔牛逼)</a></li><li><ul><li><a href=\"#_114\">希尔排序步骤</a></li><li><ul><li><a href=\"#_122\">==**单组多躺**==</a></li><li><a href=\"#_128\">==**多组插入**==</a></li><li><a href=\"#_146\">==**多组一锅炖（要是分组插麻烦我们也可以一锅炖）**==</a></li><li><a href=\"#gap__1gap__1_150\">==**多次预排序(gap &gt; 1)+直接插入（gap == 1）**==</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#_162\">测直接插入排序和希尔排序的性能（让你看看什么才叫希尔排序）</a></li><li><a href=\"#_171\">堆</a></li><li><ul><li><a href=\"#_177\">堆的概念及结构</a></li><li><ul><li><a href=\"#_185\">堆的性质</a></li><li><a href=\"#_190\">堆的结构（这里实现大堆）</a></li><li><ul><li><a href=\"#_196\">堆的结构体</a></li><li><a href=\"#HeapInit_209\">堆初始化函数HeapInit</a></li><li><a href=\"#HeapDestroy_223\">堆销毁函数HeapDestroy</a></li><li><a href=\"#HeapPrint_237\">堆打印函数HeapPrint</a></li><li><a href=\"#AdjustUp_254\">向上调整函数AdjustUp</a></li><li><a href=\"#HeapPush_292\">堆插入函数HeapPush</a></li><li><a href=\"#HeapErmpy_331\">判断堆是否为空函数HeapErmpy</a></li><li><a href=\"#HeapSize_342\">返回堆大小函数HeapSize</a></li><li><a href=\"#Swap_355\">交换函数Swap</a></li><li><a href=\"#AdjustDown_361\">向下调整函数AdjustDown</a></li><li><a href=\"#HeapPop_369\">堆删除函数HeapPop</a></li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#_396\">排序</a></li><li><ul><li><a href=\"#_398\">常见的排序算法</a></li><li><a href=\"#_402\">常见排序算法的实现</a></li><li><ul><li><a href=\"#__404\">选择排序 ==最慢排序（最好理解）所以搬血==</a></li><li><ul><li><a href=\"#_406\">基本思想：</a></li><li><a href=\"#_410\">直接选择排序</a></li><li><a href=\"#_________434\">数据交换 ==剥离出来其他函数也会用到 我明明是简洁之人为了一时的高级而忘记了朴素罪过罪过==</a></li><li><a href=\"#_445\">选择排序</a></li></ul>\n</li><li><a href=\"#_484\">堆排序</a></li><li><ul><li><a href=\"#_495\">向下调整函数</a></li><li><a href=\"#_548\">堆排序代码</a></li></ul>\n</li></ul>\n</li><li><a href=\"#__573\">测性能 ==让你看看什么叫堆==</a></li><li><ul><li><a href=\"#1000___577\">==1000大小数组 一千==</a></li><li><a href=\"#10000____581\">==10000大小数组 一万==</a></li><li><a href=\"#100000_____585\">==100000大小数组 十万==</a></li><li><a href=\"#1000000____589\">==1000000大小数组 一百万==</a></li><li><a href=\"#10000000__________593\">==10000000大小数组 一千万 我们不带选择，插入玩太拉跨了，我们看看希尔，堆在超大数据面前谁性能更优==</a></li></ul>\n</li><li><a href=\"#_597\">性能函数图</a></li></ul>\n</li><li><a href=\"#font_color996633_font_604\"><font color=\"#996633\">排序</font></a></li><li><ul><li><a href=\"#font_color9400D3_font_606\"><font color=\"#9400D3\">常见的排序算法</font></a></li><li><a href=\"#font_color9400D3_font_610\"><font color=\"#9400D3\">常见排序算法的实现</font></a></li><li><ul><li><a href=\"#font_colorFF0033_font_612\"><font color=\"#FF0033\">归并排序</font></a></li><li><ul><li><a href=\"#font_color0000CC_font_614\"><font color=\"#0000CC\">基本思想</font></a></li><li><a href=\"#font_color0000CC_font_626\"><font color=\"#0000CC\">递归写法</font></a></li><li><ul><li><a href=\"#font_colorFF00FF_font_630\"><font color=\"#FF00FF\">通过调试看一下现象</font></a></li><li><a href=\"#font_colorFF00FF_font_634\"><font color=\"#FF00FF\">归并顺序</font></a></li></ul>\n</li><li><a href=\"#font_color0000CC_font_642\"><font color=\"#0000CC\">归并排序递归子函数</font></a></li><li><a href=\"#font_color0000CC_font_686\"><font color=\"#0000CC\">归并排序递归实现</font></a></li><li><a href=\"#font_color0000CC_font_705\"><font color=\"#0000CC\">非递归写法</font></a></li><li><ul><li><a href=\"#font_colorFF00FF_2nfont_707\"><font color=\"#FF00FF\">2^n^个元素的数组</font></a></li><li><a href=\"#font_colorFF00FF_font_719\"><font color=\"#FF00FF\">随便几个元素的数组</font></a></li><li><ul><li><a href=\"#font_color00CC00_font_721\"><font color=\"#00CC00\">修正下标</font></a></li></ul>\n</li></ul>\n</li><li><a href=\"#font_color0000CC_________font_745\"><font color=\"#0000CC\">归并排序非递归实现 修正下标</font></a></li><li><ul><li><ul><li><a href=\"#font_color00CC00_font_820\"><font color=\"#00CC00\">归一部分拷一部分</font></a></li></ul>\n</li></ul>\n</li><li><a href=\"#font_color0000CC_________font_826\"><font color=\"#0000CC\">归并排序非递归实现 归一部分拷一部分</font></a></li><li><a href=\"#font_color0000CC_font_917\"><font color=\"#0000CC\">归并排序的特性总结</font></a></li><li><a href=\"#font_color0000CC_font_924\"><font color=\"#0000CC\">时间复杂度</font></a></li></ul>\n</li><li><a href=\"#font_colorFF0033_font_936\"><font color=\"#FF0033\">测性能</font></a></li><li><ul><li><a href=\"#font_color0000CC_1000____font_938\"><font color=\"#0000CC\">1000 一千</font></a></li><li><a href=\"#font_color0000CC_10000________font_942\"><font color=\"#0000CC\">10000 一万 ==先抛弃选择和冒泡==</font></a></li><li><a href=\"#font_color0000CC_100000______________font_946\"><font color=\"#0000CC\">100000 十万 ==再抛弃直接插入==</font></a></li><li><a href=\"#font_color0000CC_1000000____font_950\"><font color=\"#0000CC\">1000000 一百万</font></a></li><li><a href=\"#font_color0000CC_10000000____font_954\"><font color=\"#0000CC\">10000000 一千万</font></a></li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#font_color996633_font_961\"><font color=\"#996633\">排序</font></a></li><li><ul><li><a href=\"#font_color9400D3_______font_963\"><font color=\"#9400D3\">常见的排序算法 扩展</font></a></li><li><ul><li><a href=\"#font_colorFF0033_font___965\"><font color=\"#FF0033\">计数排序</font> 不进行数据的比较，而是统计数据出现的次数</a></li><li><ul><li><a href=\"#font_color0000CC_font_990\"><font color=\"#0000CC\">计数排序</font></a></li><li><a href=\"#font_color0000CC_font_1029\"><font color=\"#0000CC\">计数排序的特性总结</font></a></li></ul>\n</li><li><a href=\"#font_colorFF0033_font_1035\"><font color=\"#FF0033\">测性能</font></a></li><li><ul><li><a href=\"#font_color0000CC_1000___font_1037\"><font color=\"#0000CC\">1000 一千</font></a></li><li><a href=\"#font_color0000CC_10000___font_1041\"><font color=\"#0000CC\">10000 一万</font></a></li><li><a href=\"#font_color0000CC_100000___font_1045\"><font color=\"#0000CC\">100000 十万</font></a></li><li><a href=\"#font_color0000CC_1000000___font_1049\"><font color=\"#0000CC\">1000000 一百万</font></a></li><li><a href=\"#font_color0000CC_10000000___font_1053\"><font color=\"#0000CC\">10000000 一千万</font></a></li></ul>\n</li></ul>\n</li><li><a href=\"#font_color9400D3_font_1059\"><font color=\"#9400D3\">排序总结</font></a></li><li><ul><li><ul><li><a href=\"#font_color0000CC_font_1063\"><font color=\"#0000CC\">稳定性</font></a></li></ul>\n</li><li><a href=\"#font_colorFF0033_font_1077\"><font color=\"#FF0033\">八大排序总结</font></a></li><li><a href=\"#font_colorFF0033_font_1136\"><font color=\"#FF0033\">代码</font></a></li><li><ul><li><a href=\"#font_color0000CC_Sorthfont_1138\"><font color=\"#0000CC\">Sort.h</font></a></li><li><a href=\"#font_color0000CC_Sortcfont_1186\"><font color=\"#0000CC\">Sort.c</font></a></li><li><a href=\"#font_color0000CC_testcfont_1699\"><font color=\"#0000CC\">test.c</font></a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_171\"></a>堆</h1>\n<p>数据结构中的堆不同于操作系统中的堆（操作系统中的堆是用来存储动态内存的），数据结构中的堆是数据的存储方式。数据结构中的堆是<mark>完全二叉树</mark></p>\n<blockquote>\n<p>既然堆是完全二叉树的形式存储的那么就非常适合用数组的方式来表示</p>\n</blockquote>\n<h2><a id=\"_177\"></a>堆的概念及结构</h2>\n<p>如果有一个关键码的集合K = {k0，k1， k2，…，kn-1}，把它的所有元素按完全二叉树的顺序存储方式存储在一个一维数组中，并满足：<mark>Ki &lt;= K2i+1 且 Ki&lt;= K2i+2</mark> (Ki &gt;= K2i+1 且 Ki &gt;= K2i+2) i = 0，1，2…，则称为<mark>小堆</mark>(或大堆)。<strong>将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。</strong></p>\n<blockquote>\n<p><strong>大堆：树中一个树及子树中，任何一个父亲都大于等于孩子</strong></p>\n<p><strong>小堆：树中一个树及子树中，任何一个父亲都小于等于孩子</strong></p>\n</blockquote>\n<h3><a id=\"_185\"></a>堆的性质</h3>\n<blockquote>\n<p><strong>堆中某个节点的值总是不大于或不小于其父节点的值；</strong><br/> <strong>堆总是一棵<mark>完全二叉树</mark>。</strong>**</p>\n</blockquote>\n<h3><a id=\"_190\"></a>堆的结构（这里实现大堆）</h3>\n<p><img alt=\"image-20211108081113661\" src=\"..\\..\\static\\image\\6f232a62e1b9cf38830162ac2c3922f2.png\"/></p>\n<p><mark>既然还是数组的结构的话就还是顺序表的处理方式，数组指针，size，capacity。虽然物理上我们是用顺序表的方式来表示，但是他实际上表示的数据是完全二叉树。</mark></p>\n<h4><a id=\"_196\"></a>堆的结构体</h4>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> HPDataType<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Heap</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tHPDataType<span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>HP<span class=\"token punctuation\">;</span>\n</code></pre>\n<h4><a id=\"HeapInit_209\"></a>堆初始化函数HeapInit</h4>\n<blockquote>\n<p>就是一个指向NULL的数组，size 和 capacity都为零</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//堆初始化函数</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">HeapInit</span><span class=\"token punctuation\">(</span>HP<span class=\"token operator\">*</span> hp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>hp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\thp<span class=\"token operator\">-&gt;</span>a <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\thp<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">=</span> hp<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"HeapDestroy_223\"></a>堆销毁函数HeapDestroy</h4>\n<blockquote>\n<p>由于数组是动态开辟的，所以用完后需要销毁的，不然会内存泄漏</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//堆销毁函数</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">HeapDestroy</span><span class=\"token punctuation\">(</span>HP<span class=\"token operator\">*</span> hp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>hp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>hp<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\thp<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">=</span> hp<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"HeapPrint_237\"></a>堆打印函数HeapPrint</h4>\n<blockquote>\n<p>可以想象成一种快速调试，类似于单片机中的串口打印看数据收发情况</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//堆打印函数</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">HeapPrint</span><span class=\"token punctuation\">(</span>HP<span class=\"token operator\">*</span> hp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> hp<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> hp<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"AdjustUp_254\"></a>向上调整函数AdjustUp</h4>\n<blockquote>\n<p>为了不影响数据的存储形式（大堆还得是大堆），插入数据就不能破坏大堆的形式，我们需要把堆插入函数中的数据调整给剥离出来</p>\n<p><mark>我们可以看到插入的这个数据对其他的节点并没有什么影响，有影响的只是这个节点到根这条路径上的节点，如何解决对这条路径的影响呢，我们可以形象的看到仅仅是在这条路径上进行<strong>向上调整</strong></mark></p>\n<blockquote>\n<p>通过parent = （child-1）/2 找到父亲节点，与之进行比较，然后父亲小就交换位置（大堆），然后交换后就在找上面的父亲节点，直到找到父亲大于孩子，就不交换了</p>\n</blockquote>\n</blockquote>\n<p><img alt=\"image-20211108115306980\" src=\"..\\..\\static\\image\\9863f537bb5218ad52ebd002429875dd.png\"/></p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//向上调整函数</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">AdjustUp</span><span class=\"token punctuation\">(</span>HPDataType<span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> child<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>child<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//父亲小于孩子就交换（大堆）</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\ta<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> a<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\ta<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> a<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\ta<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> a<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">//交换好后重新称呼一下孩子与父亲</span>\n\t\t\tchild <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\t\tparent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"HeapPush_292\"></a>堆插入函数HeapPush</h4>\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/b0b04a638e0c11baefdf58aff4f5bde7.gif\"/></p>\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/e203b41786efba0a7263fda421783b3e.gif\"/></p>\n<p><img alt=\"image-20211108163302928\" src=\"..\\..\\static\\image\\45141afbdb3685db0a2607ddad524eec.png\"/></p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//堆插入函数（要保持原来形式，大堆还是大堆，小堆就还是小堆）</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">HeapPush</span><span class=\"token punctuation\">(</span>HP<span class=\"token operator\">*</span> hp<span class=\"token punctuation\">,</span> HPDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>hp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//判断扩容</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hp<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">==</span> hp<span class=\"token operator\">-&gt;</span>capacity<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//容量给新的容量</span>\n\t\t<span class=\"token keyword\">int</span> newcapacity <span class=\"token operator\">=</span> hp<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">4</span> <span class=\"token operator\">:</span> hp<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//扩容</span>\n\t\tHPDataType<span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HPDataType<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>hp<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>HPDataType<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> newcapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//增容失败</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>tmp<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"realloc fail\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//增容成功</span>\n\t\thp<span class=\"token operator\">-&gt;</span>a <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n\t\thp<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">=</span> newcapacity<span class=\"token punctuation\">;</span>\t\t\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//放数据</span>\n\thp<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>hp<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\thp<span class=\"token operator\">-&gt;</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//实现大堆</span>\n\t<span class=\"token comment\">//这个部分的向上调整其他地方也用的到就把他剥离出来</span>\n\t<span class=\"token function\">AdjustUp</span><span class=\"token punctuation\">(</span>hp<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">,</span> hp<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//child下标</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"HeapErmpy_331\"></a>判断堆是否为空函数HeapErmpy</h4>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//判断堆是否为空函数</span>\nbool <span class=\"token function\">HeapErmpy</span><span class=\"token punctuation\">(</span>HP<span class=\"token operator\">*</span> hp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>hp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> hp<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"HeapSize_342\"></a>返回堆大小函数HeapSize</h4>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//返回堆大小函数</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">HeapSize</span><span class=\"token punctuation\">(</span>HP<span class=\"token operator\">*</span> hp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>hp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> hp<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><mark>下面还会用到交换函数，上面也有那么我们不妨把他剥离出来封装一下，就不需要重复写了</mark></p>\n<h4><a id=\"Swap_355\"></a>交换函数Swap</h4>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//交换函数void Swap(HPDataType* px, HPDataType* py){\t*px = *px ^ *py;\t*py = *px ^ *py;\t*px = *px ^ *py;}</span>\n</code></pre>\n<h4><a id=\"AdjustDown_361\"></a>向下调整函数AdjustDown</h4>\n<p><img alt=\"image-20211108223143528\" src=\"..\\..\\static\\image\\68e5ded59cfb7b588abfdcbc497e8aa1.png\"/></p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//向下调整函数void AdjustDown(HPDataType* a, int size, int parent){\tassert(a);\t//创建一个孩子变量，有两个孩子就在这个上加1就行\tint child = parent * 2 + 1;\twhile (child&lt; size)\t{\t\t//选大孩子\t\tif (child + 1 &lt; size &amp;&amp; a[child] &lt; a[child + 1])\t\t{\t\t\tchild++;\t\t}\t\t//大的孩子还大于父亲就交换\t\tif (a[child] &gt; a[parent])\t\t{\t\t\tSwap(&amp;a[child], &amp;a[parent]);\t\t\tparent = child;\t\t\tchild = parent * 2 + 1;\t\t}\t}}</span>\n</code></pre>\n<h4><a id=\"HeapPop_369\"></a>堆删除函数HeapPop</h4>\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/0a07cf36b8e0ef75b1b7b8069f82ec3b.gif\"/></p>\n<blockquote>\n<p>我们可以认为假想根和堆的最后一个元素交换后，把最后一个删除，然后再对堆进行操作，你会发现，我们没有破坏原来的整体结构</p>\n</blockquote>\n<p><img alt=\"image-20211108223334078\" src=\"..\\..\\static\\image\\7e11eb70d5e59b304168bbd5ca360490.png\"/></p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//堆删除函数（删除的是堆顶数据也就是取最值）</span>\n<span class=\"token comment\">//还有不可能一直删的所以我们需要一个判空函数</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">HeapPop</span><span class=\"token punctuation\">(</span>HP<span class=\"token operator\">*</span> hp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>hp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">HeapErmpy</span><span class=\"token punctuation\">(</span>hp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//根和堆最后一个元素交换</span>\n\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>hp<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>hp<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>hp<span class=\"token operator\">-&gt;</span>size<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//把最后一个删除，就是我们想要删除的元素</span>\n\thp<span class=\"token operator\">-&gt;</span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//向下调整</span>\n\t<span class=\"token function\">AdjustDown</span><span class=\"token punctuation\">(</span>hp<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">,</span>hp<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#font_color996633_______font_3\"><font color=\"#996633\">八排 八奇迹</font></a></li><li><a href=\"#_5\">排序</a></li><li><ul><li><a href=\"#_7\">排序的概念及其运用</a></li><li><ul><li><a href=\"#_9\">排序的概念</a></li><li><a href=\"#_16\">排序运用</a></li><li><ul><li><a href=\"#_18\">==来上京东==</a></li><li><a href=\"#_24\">==大学排名==</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_28\">常见的排序算法</a></li><li><a href=\"#_32\">常见排序算法的实现</a></li><li><ul><li><ul><li><a href=\"#_34\">插入排序</a></li><li><ul><li><a href=\"#_36\">基本思想</a></li><li><a href=\"#_48\">==但是数组肯定不是有序的，所以我们得先让数组有序==</a></li></ul>\n</li><li><a href=\"#_54\">先把打印数组给剥离出来</a></li><li><a href=\"#_68\">插入排序</a></li><li><a href=\"#______106\">希尔排序( 缩小增量排序 ) (反正希尔牛逼)</a></li><li><ul><li><a href=\"#_114\">希尔排序步骤</a></li><li><ul><li><a href=\"#_122\">==**单组多躺**==</a></li><li><a href=\"#_128\">==**多组插入**==</a></li><li><a href=\"#_146\">==**多组一锅炖（要是分组插麻烦我们也可以一锅炖）**==</a></li><li><a href=\"#gap__1gap__1_150\">==**多次预排序(gap &gt; 1)+直接插入（gap == 1）**==</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#_162\">测直接插入排序和希尔排序的性能（让你看看什么才叫希尔排序）</a></li><li><a href=\"#_171\">堆</a></li><li><ul><li><a href=\"#_177\">堆的概念及结构</a></li><li><ul><li><a href=\"#_185\">堆的性质</a></li><li><a href=\"#_190\">堆的结构（这里实现大堆）</a></li><li><ul><li><a href=\"#_196\">堆的结构体</a></li><li><a href=\"#HeapInit_209\">堆初始化函数HeapInit</a></li><li><a href=\"#HeapDestroy_223\">堆销毁函数HeapDestroy</a></li><li><a href=\"#HeapPrint_237\">堆打印函数HeapPrint</a></li><li><a href=\"#AdjustUp_254\">向上调整函数AdjustUp</a></li><li><a href=\"#HeapPush_292\">堆插入函数HeapPush</a></li><li><a href=\"#HeapErmpy_331\">判断堆是否为空函数HeapErmpy</a></li><li><a href=\"#HeapSize_342\">返回堆大小函数HeapSize</a></li><li><a href=\"#Swap_355\">交换函数Swap</a></li><li><a href=\"#AdjustDown_361\">向下调整函数AdjustDown</a></li><li><a href=\"#HeapPop_369\">堆删除函数HeapPop</a></li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#_396\">排序</a></li><li><ul><li><a href=\"#_398\">常见的排序算法</a></li><li><a href=\"#_402\">常见排序算法的实现</a></li><li><ul><li><a href=\"#__404\">选择排序 ==最慢排序（最好理解）所以搬血==</a></li><li><ul><li><a href=\"#_406\">基本思想：</a></li><li><a href=\"#_410\">直接选择排序</a></li><li><a href=\"#_________434\">数据交换 ==剥离出来其他函数也会用到 我明明是简洁之人为了一时的高级而忘记了朴素罪过罪过==</a></li><li><a href=\"#_445\">选择排序</a></li></ul>\n</li><li><a href=\"#_484\">堆排序</a></li><li><ul><li><a href=\"#_495\">向下调整函数</a></li><li><a href=\"#_548\">堆排序代码</a></li></ul>\n</li></ul>\n</li><li><a href=\"#__573\">测性能 ==让你看看什么叫堆==</a></li><li><ul><li><a href=\"#1000___577\">==1000大小数组 一千==</a></li><li><a href=\"#10000____581\">==10000大小数组 一万==</a></li><li><a href=\"#100000_____585\">==100000大小数组 十万==</a></li><li><a href=\"#1000000____589\">==1000000大小数组 一百万==</a></li><li><a href=\"#10000000__________593\">==10000000大小数组 一千万 我们不带选择，插入玩太拉跨了，我们看看希尔，堆在超大数据面前谁性能更优==</a></li></ul>\n</li><li><a href=\"#_597\">性能函数图</a></li></ul>\n</li><li><a href=\"#font_color996633_font_604\"><font color=\"#996633\">排序</font></a></li><li><ul><li><a href=\"#font_color9400D3_font_606\"><font color=\"#9400D3\">常见的排序算法</font></a></li><li><a href=\"#font_color9400D3_font_610\"><font color=\"#9400D3\">常见排序算法的实现</font></a></li><li><ul><li><a href=\"#font_colorFF0033_font_612\"><font color=\"#FF0033\">归并排序</font></a></li><li><ul><li><a href=\"#font_color0000CC_font_614\"><font color=\"#0000CC\">基本思想</font></a></li><li><a href=\"#font_color0000CC_font_626\"><font color=\"#0000CC\">递归写法</font></a></li><li><ul><li><a href=\"#font_colorFF00FF_font_630\"><font color=\"#FF00FF\">通过调试看一下现象</font></a></li><li><a href=\"#font_colorFF00FF_font_634\"><font color=\"#FF00FF\">归并顺序</font></a></li></ul>\n</li><li><a href=\"#font_color0000CC_font_642\"><font color=\"#0000CC\">归并排序递归子函数</font></a></li><li><a href=\"#font_color0000CC_font_686\"><font color=\"#0000CC\">归并排序递归实现</font></a></li><li><a href=\"#font_color0000CC_font_705\"><font color=\"#0000CC\">非递归写法</font></a></li><li><ul><li><a href=\"#font_colorFF00FF_2nfont_707\"><font color=\"#FF00FF\">2^n^个元素的数组</font></a></li><li><a href=\"#font_colorFF00FF_font_719\"><font color=\"#FF00FF\">随便几个元素的数组</font></a></li><li><ul><li><a href=\"#font_color00CC00_font_721\"><font color=\"#00CC00\">修正下标</font></a></li></ul>\n</li></ul>\n</li><li><a href=\"#font_color0000CC_________font_745\"><font color=\"#0000CC\">归并排序非递归实现 修正下标</font></a></li><li><ul><li><ul><li><a href=\"#font_color00CC00_font_820\"><font color=\"#00CC00\">归一部分拷一部分</font></a></li></ul>\n</li></ul>\n</li><li><a href=\"#font_color0000CC_________font_826\"><font color=\"#0000CC\">归并排序非递归实现 归一部分拷一部分</font></a></li><li><a href=\"#font_color0000CC_font_917\"><font color=\"#0000CC\">归并排序的特性总结</font></a></li><li><a href=\"#font_color0000CC_font_924\"><font color=\"#0000CC\">时间复杂度</font></a></li></ul>\n</li><li><a href=\"#font_colorFF0033_font_936\"><font color=\"#FF0033\">测性能</font></a></li><li><ul><li><a href=\"#font_color0000CC_1000____font_938\"><font color=\"#0000CC\">1000 一千</font></a></li><li><a href=\"#font_color0000CC_10000________font_942\"><font color=\"#0000CC\">10000 一万 ==先抛弃选择和冒泡==</font></a></li><li><a href=\"#font_color0000CC_100000______________font_946\"><font color=\"#0000CC\">100000 十万 ==再抛弃直接插入==</font></a></li><li><a href=\"#font_color0000CC_1000000____font_950\"><font color=\"#0000CC\">1000000 一百万</font></a></li><li><a href=\"#font_color0000CC_10000000____font_954\"><font color=\"#0000CC\">10000000 一千万</font></a></li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#font_color996633_font_961\"><font color=\"#996633\">排序</font></a></li><li><ul><li><a href=\"#font_color9400D3_______font_963\"><font color=\"#9400D3\">常见的排序算法 扩展</font></a></li><li><ul><li><a href=\"#font_colorFF0033_font___965\"><font color=\"#FF0033\">计数排序</font> 不进行数据的比较，而是统计数据出现的次数</a></li><li><ul><li><a href=\"#font_color0000CC_font_990\"><font color=\"#0000CC\">计数排序</font></a></li><li><a href=\"#font_color0000CC_font_1029\"><font color=\"#0000CC\">计数排序的特性总结</font></a></li></ul>\n</li><li><a href=\"#font_colorFF0033_font_1035\"><font color=\"#FF0033\">测性能</font></a></li><li><ul><li><a href=\"#font_color0000CC_1000___font_1037\"><font color=\"#0000CC\">1000 一千</font></a></li><li><a href=\"#font_color0000CC_10000___font_1041\"><font color=\"#0000CC\">10000 一万</font></a></li><li><a href=\"#font_color0000CC_100000___font_1045\"><font color=\"#0000CC\">100000 十万</font></a></li><li><a href=\"#font_color0000CC_1000000___font_1049\"><font color=\"#0000CC\">1000000 一百万</font></a></li><li><a href=\"#font_color0000CC_10000000___font_1053\"><font color=\"#0000CC\">10000000 一千万</font></a></li></ul>\n</li></ul>\n</li><li><a href=\"#font_color9400D3_font_1059\"><font color=\"#9400D3\">排序总结</font></a></li><li><ul><li><ul><li><a href=\"#font_color0000CC_font_1063\"><font color=\"#0000CC\">稳定性</font></a></li></ul>\n</li><li><a href=\"#font_colorFF0033_font_1077\"><font color=\"#FF0033\">八大排序总结</font></a></li><li><a href=\"#font_colorFF0033_font_1136\"><font color=\"#FF0033\">代码</font></a></li><li><ul><li><a href=\"#font_color0000CC_Sorthfont_1138\"><font color=\"#0000CC\">Sort.h</font></a></li><li><a href=\"#font_color0000CC_Sortcfont_1186\"><font color=\"#0000CC\">Sort.c</font></a></li><li><a href=\"#font_color0000CC_testcfont_1699\"><font color=\"#0000CC\">test.c</font></a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_396\"></a>排序</h1>\n<h2><a id=\"_398\"></a>常见的排序算法</h2>\n<p><img alt=\"image-20211119082822804\" src=\"..\\..\\static\\image\\2a45e74dc48921ff2299bfe2f6e3b1d0.png\"/></p>\n<h2><a id=\"_402\"></a>常见排序算法的实现</h2>\n<h3><a id=\"__404\"></a>选择排序 <mark>最慢排序（最好理解）所以搬血</mark></h3>\n<h4><a id=\"_406\"></a>基本思想：</h4>\n<blockquote>\n<p>每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完 。</p>\n</blockquote>\n<h4><a id=\"_410\"></a>直接选择排序</h4>\n<blockquote>\n<p>在元素集合array[i]–array[n-1]中选择关键码最大(小)的数据元素<br/> 若它不是这组元素中的最后一个(第一个)元素，则将它与这组元素中的最后一个（第一个）元素交换<br/> 在剩余的array[i]–array[n-2]（array[i+1]–array[n-1]）集合中，重复上述步骤，直到集合剩余1个元素</p>\n</blockquote>\n<p><img alt=\"image-20211120195032904\" src=\"..\\..\\static\\image\\cadea75666c98d05406064a514bb50fe.png\"/></p>\n<blockquote>\n<p>上面那个就是选择排序的本质，但是<mark>一次就选一个最大或者最小是不是有点浪费，我们一次同时选到最大最小，就是会比传统的选择排序快一倍</mark></p>\n</blockquote>\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/cef4f112aa67f62a905377c81efeafe2.gif\"/></p>\n<p><mark>我们基本看到上面代码的缺陷就是我们第一个就是最大是时候，最大的就被换走了，而最小的就被换过来了，但是最大的下标还是标记首位置，把最小的换到后面，也就出现了最小的1在后面的现象</mark></p>\n<blockquote>\n<p>解决方法：既然你最大数的下标和begin重合，那最大数被换走的时候，maxi这个下标也要连带着走</p>\n</blockquote>\n<p><img alt=\"image-20211120233139638\" src=\"..\\..\\static\\image\\58e47a5d95fbda21f5df14e74f78e77c.png\"/></p>\n<p><mark>实际上下面 才是我第一次写的代码，直接说下次我再也不写装逼的交换了</mark></p>\n<p><img alt=\"image-20211120235444317\" src=\"..\\..\\static\\image\\7c298a2060923b84b792582de66b7271.png\"/></p>\n<blockquote>\n<p>我来道bug恶心之处 <mark>看好了跳跳</mark> 5 ^ 5 == 0 这就是恶心之处，<mark>下次再也不装逼了</mark></p>\n</blockquote>\n<h4><a id=\"_________434\"></a>数据交换 <mark>剥离出来其他函数也会用到 我明明是简洁之人为了一时的高级而忘记了朴素罪过罪过</mark></h4>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//数据交换</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pa<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>pa<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>pa <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>pb<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>pb <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_445\"></a>选择排序</h4>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">// 选择排序</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SelectSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> begin <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>begin <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//单趟</span>\n\t\t<span class=\"token comment\">//最大数，最小数的下标</span>\n\t\t<span class=\"token keyword\">int</span> mini <span class=\"token operator\">=</span> begin<span class=\"token punctuation\">;</span><span class=\"token comment\">//这边假设是刚开始的下标</span>\n\t\t<span class=\"token keyword\">int</span> maxi <span class=\"token operator\">=</span> end<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//这边假设是末尾的下标</span>\n\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> begin<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>mini<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t\tmini <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> a<span class=\"token punctuation\">[</span>maxi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t\tmaxi <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//最小的放前面</span>\n\t\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>begin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>mini<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>begin <span class=\"token operator\">==</span> maxi<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token comment\">//如果最大数就是begin位置的，那么交换的时候最大数连带着下标一起动</span>\n\t\t\tmaxi <span class=\"token operator\">=</span> mini<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//最大的放后面</span>\n\t\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>maxi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tbegin<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\tend<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><mark>时间复杂度是O(N<sup>2</sup>) 我们的优化不是质的优化，而是量的优化</mark></p>\n<p>最好：O(N<sup>2</sup>)</p>\n<p>最坏：O(N<sup>2</sup>)</p>\n</blockquote>\n<h3><a id=\"_484\"></a>堆排序</h3>\n<blockquote>\n<p>堆排序(Heapsort)是指利用堆积树（堆）这种数据结构所设计的一种排序算法，它是选择排序的一种。它是<br/> 通过堆来进行选择数据。需要注意的是<mark>排升序要建大堆，排降序建小堆。</mark></p>\n</blockquote>\n<p><img alt=\"image-20211121094727004\" src=\"..\\..\\static\\image\\9700ded8d2dcce7b40e1f48f19bd7b85.png\"/></p>\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/ac90ed898679db067ef1556203f868b5.gif\"/></p>\n<h4><a id=\"_495\"></a>向下调整函数</h4>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//向下调整函数</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">AdjustDown</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//创建一个孩子变量，有两个孩子就在这个上加1就行</span>\n\t<span class=\"token keyword\">int</span> child <span class=\"token operator\">=</span> parent <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">HEAP</span></span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//选大孩子</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>child <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tchild<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//大的孩子还大于父亲就交换</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> a<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tparent <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span>\n\t\t\tchild <span class=\"token operator\">=</span> parent <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\"><span class=\"token operator\">!</span>HEAP</span></span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//选小孩子</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> a<span class=\"token punctuation\">[</span>child <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tchild<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//小的孩子还小于父亲就交换</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tparent <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span>\n\t\t\tchild <span class=\"token operator\">=</span> parent <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// HEAP\t</span></span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_548\"></a>堆排序代码</h4>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">// 堆排序   我们之前讲过升序建大堆</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">HeapSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//建堆时间复杂度O(N)</span>\n\t<span class=\"token comment\">//建大堆</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">AdjustDown</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//堆排序时间复杂度O(N*logN)</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>end<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//交换 把最大的放到后面</span>\n\t\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//在向下调整</span>\n\t\t<span class=\"token function\">AdjustDown</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tend<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><mark>堆排序时间复杂度O(N*logN)</mark></p>\n</blockquote>\n<h2><a id=\"__573\"></a>测性能 <mark>让你看看什么叫堆</mark></h2>\n<blockquote>\n<p>这里我们测性能就用<mark>release</mark>版本测吧 因为release版本是程序最优状态，每个排序都是最好状态，巅峰打巅峰</p>\n</blockquote>\n<h3><a id=\"1000___577\"></a><mark>1000大小数组 一千</mark></h3>\n<p><img alt=\"image-20211121113727817\" src=\"..\\..\\static\\image\\0dbd6faa7f93e957942d6b69a10ac068.png\"/></p>\n<h3><a id=\"10000____581\"></a><mark>10000大小数组 一万</mark></h3>\n<p><img alt=\"image-20211121114331200\" src=\"..\\..\\static\\image\\d8b1fb7418d2d0335ffa1e1d694eafda.png\"/></p>\n<h3><a id=\"100000_____585\"></a><mark>100000大小数组 十万</mark></h3>\n<p><img alt=\"image-20211121114552970\" src=\"..\\..\\static\\image\\ea0b2196ec9f93bc41f2b02869301adf.png\"/></p>\n<h3><a id=\"1000000____589\"></a><mark>1000000大小数组 一百万</mark></h3>\n<p><img alt=\"image-20211121125949374\" src=\"..\\..\\static\\image\\468e2943eab41af3278c9a403c17deab.png\"/></p>\n<h3><a id=\"10000000__________593\"></a><mark>10000000大小数组 一千万 我们不带选择，插入玩太拉跨了，我们看看希尔，堆在超大数据面前谁性能更优</mark></h3>\n<p><img alt=\"image-20211121130941961\" src=\"..\\..\\static\\image\\3763c413be604921ee94ef27cc49418e.png\"/></p>\n<h2><a id=\"_597\"></a>性能函数图</h2>\n<p><img alt=\"image-20211121133907018\" src=\"..\\..\\static\\image\\af7b99144d3b887066fe343d3d19fed7.png\"/></p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#font_color996633_______font_3\"><font color=\"#996633\">八排 八奇迹</font></a></li><li><a href=\"#_5\">排序</a></li><li><ul><li><a href=\"#_7\">排序的概念及其运用</a></li><li><ul><li><a href=\"#_9\">排序的概念</a></li><li><a href=\"#_16\">排序运用</a></li><li><ul><li><a href=\"#_18\">==来上京东==</a></li><li><a href=\"#_24\">==大学排名==</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_28\">常见的排序算法</a></li><li><a href=\"#_32\">常见排序算法的实现</a></li><li><ul><li><ul><li><a href=\"#_34\">插入排序</a></li><li><ul><li><a href=\"#_36\">基本思想</a></li><li><a href=\"#_48\">==但是数组肯定不是有序的，所以我们得先让数组有序==</a></li></ul>\n</li><li><a href=\"#_54\">先把打印数组给剥离出来</a></li><li><a href=\"#_68\">插入排序</a></li><li><a href=\"#______106\">希尔排序( 缩小增量排序 ) (反正希尔牛逼)</a></li><li><ul><li><a href=\"#_114\">希尔排序步骤</a></li><li><ul><li><a href=\"#_122\">==**单组多躺**==</a></li><li><a href=\"#_128\">==**多组插入**==</a></li><li><a href=\"#_146\">==**多组一锅炖（要是分组插麻烦我们也可以一锅炖）**==</a></li><li><a href=\"#gap__1gap__1_150\">==**多次预排序(gap &gt; 1)+直接插入（gap == 1）**==</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#_162\">测直接插入排序和希尔排序的性能（让你看看什么才叫希尔排序）</a></li><li><a href=\"#_171\">堆</a></li><li><ul><li><a href=\"#_177\">堆的概念及结构</a></li><li><ul><li><a href=\"#_185\">堆的性质</a></li><li><a href=\"#_190\">堆的结构（这里实现大堆）</a></li><li><ul><li><a href=\"#_196\">堆的结构体</a></li><li><a href=\"#HeapInit_209\">堆初始化函数HeapInit</a></li><li><a href=\"#HeapDestroy_223\">堆销毁函数HeapDestroy</a></li><li><a href=\"#HeapPrint_237\">堆打印函数HeapPrint</a></li><li><a href=\"#AdjustUp_254\">向上调整函数AdjustUp</a></li><li><a href=\"#HeapPush_292\">堆插入函数HeapPush</a></li><li><a href=\"#HeapErmpy_331\">判断堆是否为空函数HeapErmpy</a></li><li><a href=\"#HeapSize_342\">返回堆大小函数HeapSize</a></li><li><a href=\"#Swap_355\">交换函数Swap</a></li><li><a href=\"#AdjustDown_361\">向下调整函数AdjustDown</a></li><li><a href=\"#HeapPop_369\">堆删除函数HeapPop</a></li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#_396\">排序</a></li><li><ul><li><a href=\"#_398\">常见的排序算法</a></li><li><a href=\"#_402\">常见排序算法的实现</a></li><li><ul><li><a href=\"#__404\">选择排序 ==最慢排序（最好理解）所以搬血==</a></li><li><ul><li><a href=\"#_406\">基本思想：</a></li><li><a href=\"#_410\">直接选择排序</a></li><li><a href=\"#_________434\">数据交换 ==剥离出来其他函数也会用到 我明明是简洁之人为了一时的高级而忘记了朴素罪过罪过==</a></li><li><a href=\"#_445\">选择排序</a></li></ul>\n</li><li><a href=\"#_484\">堆排序</a></li><li><ul><li><a href=\"#_495\">向下调整函数</a></li><li><a href=\"#_548\">堆排序代码</a></li></ul>\n</li></ul>\n</li><li><a href=\"#__573\">测性能 ==让你看看什么叫堆==</a></li><li><ul><li><a href=\"#1000___577\">==1000大小数组 一千==</a></li><li><a href=\"#10000____581\">==10000大小数组 一万==</a></li><li><a href=\"#100000_____585\">==100000大小数组 十万==</a></li><li><a href=\"#1000000____589\">==1000000大小数组 一百万==</a></li><li><a href=\"#10000000__________593\">==10000000大小数组 一千万 我们不带选择，插入玩太拉跨了，我们看看希尔，堆在超大数据面前谁性能更优==</a></li></ul>\n</li><li><a href=\"#_597\">性能函数图</a></li></ul>\n</li><li><a href=\"#font_color996633_font_604\"><font color=\"#996633\">排序</font></a></li><li><ul><li><a href=\"#font_color9400D3_font_606\"><font color=\"#9400D3\">常见的排序算法</font></a></li><li><a href=\"#font_color9400D3_font_610\"><font color=\"#9400D3\">常见排序算法的实现</font></a></li><li><ul><li><a href=\"#font_colorFF0033_font_612\"><font color=\"#FF0033\">归并排序</font></a></li><li><ul><li><a href=\"#font_color0000CC_font_614\"><font color=\"#0000CC\">基本思想</font></a></li><li><a href=\"#font_color0000CC_font_626\"><font color=\"#0000CC\">递归写法</font></a></li><li><ul><li><a href=\"#font_colorFF00FF_font_630\"><font color=\"#FF00FF\">通过调试看一下现象</font></a></li><li><a href=\"#font_colorFF00FF_font_634\"><font color=\"#FF00FF\">归并顺序</font></a></li></ul>\n</li><li><a href=\"#font_color0000CC_font_642\"><font color=\"#0000CC\">归并排序递归子函数</font></a></li><li><a href=\"#font_color0000CC_font_686\"><font color=\"#0000CC\">归并排序递归实现</font></a></li><li><a href=\"#font_color0000CC_font_705\"><font color=\"#0000CC\">非递归写法</font></a></li><li><ul><li><a href=\"#font_colorFF00FF_2nfont_707\"><font color=\"#FF00FF\">2^n^个元素的数组</font></a></li><li><a href=\"#font_colorFF00FF_font_719\"><font color=\"#FF00FF\">随便几个元素的数组</font></a></li><li><ul><li><a href=\"#font_color00CC00_font_721\"><font color=\"#00CC00\">修正下标</font></a></li></ul>\n</li></ul>\n</li><li><a href=\"#font_color0000CC_________font_745\"><font color=\"#0000CC\">归并排序非递归实现 修正下标</font></a></li><li><ul><li><ul><li><a href=\"#font_color00CC00_font_820\"><font color=\"#00CC00\">归一部分拷一部分</font></a></li></ul>\n</li></ul>\n</li><li><a href=\"#font_color0000CC_________font_826\"><font color=\"#0000CC\">归并排序非递归实现 归一部分拷一部分</font></a></li><li><a href=\"#font_color0000CC_font_917\"><font color=\"#0000CC\">归并排序的特性总结</font></a></li><li><a href=\"#font_color0000CC_font_924\"><font color=\"#0000CC\">时间复杂度</font></a></li></ul>\n</li><li><a href=\"#font_colorFF0033_font_936\"><font color=\"#FF0033\">测性能</font></a></li><li><ul><li><a href=\"#font_color0000CC_1000____font_938\"><font color=\"#0000CC\">1000 一千</font></a></li><li><a href=\"#font_color0000CC_10000________font_942\"><font color=\"#0000CC\">10000 一万 ==先抛弃选择和冒泡==</font></a></li><li><a href=\"#font_color0000CC_100000______________font_946\"><font color=\"#0000CC\">100000 十万 ==再抛弃直接插入==</font></a></li><li><a href=\"#font_color0000CC_1000000____font_950\"><font color=\"#0000CC\">1000000 一百万</font></a></li><li><a href=\"#font_color0000CC_10000000____font_954\"><font color=\"#0000CC\">10000000 一千万</font></a></li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#font_color996633_font_961\"><font color=\"#996633\">排序</font></a></li><li><ul><li><a href=\"#font_color9400D3_______font_963\"><font color=\"#9400D3\">常见的排序算法 扩展</font></a></li><li><ul><li><a href=\"#font_colorFF0033_font___965\"><font color=\"#FF0033\">计数排序</font> 不进行数据的比较，而是统计数据出现的次数</a></li><li><ul><li><a href=\"#font_color0000CC_font_990\"><font color=\"#0000CC\">计数排序</font></a></li><li><a href=\"#font_color0000CC_font_1029\"><font color=\"#0000CC\">计数排序的特性总结</font></a></li></ul>\n</li><li><a href=\"#font_colorFF0033_font_1035\"><font color=\"#FF0033\">测性能</font></a></li><li><ul><li><a href=\"#font_color0000CC_1000___font_1037\"><font color=\"#0000CC\">1000 一千</font></a></li><li><a href=\"#font_color0000CC_10000___font_1041\"><font color=\"#0000CC\">10000 一万</font></a></li><li><a href=\"#font_color0000CC_100000___font_1045\"><font color=\"#0000CC\">100000 十万</font></a></li><li><a href=\"#font_color0000CC_1000000___font_1049\"><font color=\"#0000CC\">1000000 一百万</font></a></li><li><a href=\"#font_color0000CC_10000000___font_1053\"><font color=\"#0000CC\">10000000 一千万</font></a></li></ul>\n</li></ul>\n</li><li><a href=\"#font_color9400D3_font_1059\"><font color=\"#9400D3\">排序总结</font></a></li><li><ul><li><ul><li><a href=\"#font_color0000CC_font_1063\"><font color=\"#0000CC\">稳定性</font></a></li></ul>\n</li><li><a href=\"#font_colorFF0033_font_1077\"><font color=\"#FF0033\">八大排序总结</font></a></li><li><a href=\"#font_colorFF0033_font_1136\"><font color=\"#FF0033\">代码</font></a></li><li><ul><li><a href=\"#font_color0000CC_Sorthfont_1138\"><font color=\"#0000CC\">Sort.h</font></a></li><li><a href=\"#font_color0000CC_Sortcfont_1186\"><font color=\"#0000CC\">Sort.c</font></a></li><li><a href=\"#font_color0000CC_testcfont_1699\"><font color=\"#0000CC\">test.c</font></a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"font_color996633_font_604\"></a><font color=\"#996633\">排序</font></h1>\n<h2><a id=\"font_color9400D3_font_606\"></a><font color=\"#9400D3\">常见的排序算法</font></h2>\n<p><img alt=\"image-20211119082822804\" src=\"..\\..\\static\\image\\2a45e74dc48921ff2299bfe2f6e3b1d0.png\"/></p>\n<h2><a id=\"font_color9400D3_font_610\"></a><font color=\"#9400D3\">常见排序算法的实现</font></h2>\n<h3><a id=\"font_colorFF0033_font_612\"></a><font color=\"#FF0033\">归并排序</font></h3>\n<h4><a id=\"font_color0000CC_font_614\"></a><font color=\"#0000CC\">基本思想</font></h4>\n<blockquote>\n<p>归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。 归并排序核心步骤：</p>\n</blockquote>\n<blockquote>\n<p>实际上归并我们不是第一次接触，之前我们也是接触过的，比如<a href=\"https://leetcode-cn.com/problems/merge-sorted-array/\">合并两个有序数组</a>这个就是归并思想</p>\n</blockquote>\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/26c3c07467ca66a61f14f5b89c3f7b90.gif\"/></p>\n<blockquote>\n<p>但是我们上面的题目是左区间有序，右区间也有序。我们正常题目肯定不会直接给你有序。这时候再深一点，你不是没有序吗，那我们再分，分到你无法再分，<mark>也就是只有一个了，你能说一个没有序吗，肯定不行</mark>，所以我们继续分治。</p>\n</blockquote>\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/48df0d2fb1c63f65d43db7c7c569b875.gif\"/></p>\n<h4><a id=\"font_color0000CC_font_626\"></a><font color=\"#0000CC\">递归写法</font></h4>\n<blockquote>\n<p>看上面的GIF也知道第一反应是递归</p>\n</blockquote>\n<h5><a id=\"font_colorFF00FF_font_630\"></a><font color=\"#FF00FF\">通过调试看一下现象</font></h5>\n<p><img alt=\"image-20211130224907672\" src=\"..\\..\\static\\image\\8b5c9a01acc9183097373f9d56774396.png\"/></p>\n<h5><a id=\"font_colorFF00FF_font_634\"></a><font color=\"#FF00FF\">归并顺序</font></h5>\n<p><img alt=\"image-20211130230648998\" src=\"..\\..\\static\\image\\bc92ad2201f3ba5b53ea0cd81340638d.png\"/></p>\n<p><img alt=\"归并2\" src=\"https://img-blog.csdnimg.cn/img_convert/a753e9ee02c2a75bc0003df24cf765d2.gif\"/></p>\n<p><img alt=\"image-20211201014452321\" src=\"..\\..\\static\\image\\fdf2343a260a0ef9ab6877b1efe35107.png\"/></p>\n<h4><a id=\"font_color0000CC_font_642\"></a><font color=\"#0000CC\">归并排序递归子函数</font></h4>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">// 归并排序递归子函数</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">_MergeSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//左大于右说明是空数组，空数组就跳</span>\n\t<span class=\"token comment\">//左等于右就是我们要的单体有序</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&gt;=</span> right<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//防溢出写法</span>\n\t<span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">_MergeSort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">_MergeSort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token keyword\">int</span> begin1 <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> end1 <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> begin2 <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> end2 <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//跑空一组就直接跳</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>begin1<span class=\"token operator\">&lt;=</span>end1 <span class=\"token operator\">&amp;&amp;</span> begin2<span class=\"token operator\">&lt;=</span>end2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>begin1<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>begin2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\ttmp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>begin1<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\t\t\t\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\ttmp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>begin2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>begin1 <span class=\"token operator\">&lt;=</span> end1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\ttmp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>begin1<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>begin2 <span class=\"token operator\">&lt;=</span> end2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\ttmp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>begin2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//把tmp数组拷贝回到原来的数组中</span>\n\ti <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span>right<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"font_color0000CC_font_686\"></a><font color=\"#0000CC\">归并排序递归实现</font></h4>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">// 归并排序递归实现</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">MergeSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//首先创建一个临时数组</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//空就直接错</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//子函数</span>\n\t<span class=\"token function\">_MergeSort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//不用了就free掉</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//然后置空</span>\n\ttmp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"font_color0000CC_font_705\"></a><font color=\"#0000CC\">非递归写法</font></h4>\n<h5><a id=\"font_colorFF00FF_2nfont_707\"></a><font color=\"#FF00FF\">2<sup>n</sup>个元素的数组</font></h5>\n<p><img alt=\"image-20211201012824875\" src=\"..\\..\\static\\image\\dcbfe9dd775deed7c1a21ed3ec22f9cc.png\"/></p>\n<p><img alt=\"image-20211201014637727\" src=\"..\\..\\static\\image\\1747bf3c7c0aebe61357b960f06b11c2.png\"/></p>\n<blockquote>\n<p>我们看到上面好像没啥问题，那是用为数组元素个数真的太有好了，一直没有落单的元素，好的不真实</p>\n</blockquote>\n<p><img alt=\"image-20211201015555785\" src=\"..\\..\\static\\image\\bb1d42251ba7d1438fb389c90ebf7312.png\"/></p>\n<p><img alt=\"image-20211201020545678\" src=\"..\\..\\static\\image\\5984dd6335c2ec678af89d2e890920a4.png\"/></p>\n<h5><a id=\"font_colorFF00FF_font_719\"></a><font color=\"#FF00FF\">随便几个元素的数组</font></h5>\n<h6><a id=\"font_color00CC00_font_721\"></a><font color=\"#00CC00\">修正下标</font></h6>\n<blockquote>\n<p>越界情况讨论</p>\n</blockquote>\n<p><img alt=\"image-20211201092011579\" src=\"..\\..\\static\\image\\6447619a07ca01fe94ff52d9834cecc0.png\"/></p>\n<blockquote>\n<p>但是出现另一种恶心情况 <mark>重复拷贝</mark></p>\n</blockquote>\n<p><img alt=\"image-20211201094210650\" src=\"..\\..\\static\\image\\d1360038fed1a818bca222522db61b16.png\"/></p>\n<blockquote>\n<p>所以接下来我们需要解决index问题</p>\n</blockquote>\n<p><img alt=\"image-20211201095510524\" src=\"..\\..\\static\\image\\cded50d2d76f0d2f343587c53618dd4a.png\"/></p>\n<blockquote>\n<p>我们修正到n-1，同样也可以把数组修不存在，让他不进下面的循环也就可以不会进行归并</p>\n</blockquote>\n<p><img alt=\"image-20211201100753211\" src=\"..\\..\\static\\image\\659ac75875deca947744efbc51a6cb75.png\"/></p>\n<p><img alt=\"image-20211201101244258\" src=\"..\\..\\static\\image\\937f75ebc26a89525c815db3f6505c34.png\"/></p>\n<h4><a id=\"font_color0000CC_________font_745\"></a><font color=\"#0000CC\">归并排序非递归实现 修正下标</font></h4>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">// 归并排序非递归实现</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">MergeSortNonR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//首先创建一个临时数组</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//空就直接错</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> gap <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>gap<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> gap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//单组需要排序的区间</span>\n\t\t\t<span class=\"token comment\">//[i,i+gap-1]  [i+gap,i+2*gap-1]</span>\n\t\t\t<span class=\"token keyword\">int</span> begin1 <span class=\"token operator\">=</span> i<span class=\"token punctuation\">,</span> end1 <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> gap <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">int</span> begin2 <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span>gap<span class=\"token punctuation\">,</span> end2 <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>gap <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">//适用任何元素个数的核心部分</span>\n\t\t\t<span class=\"token comment\">//end1出界，[begin2,end2]不存在</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end1 <span class=\"token operator\">&gt;=</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tend1 <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">//[begin2,end2]不存在</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>begin2 <span class=\"token operator\">&gt;=</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tbegin2 <span class=\"token operator\">=</span> n <span class=\"token punctuation\">;</span>\n\t\t\t\tend2 <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">//end2出界</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end2 <span class=\"token operator\">&gt;=</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tend2 <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">//printf(\"[%d,%d],[%d,%d]\",begin1,end1,begin2,end2);</span>\n\t\t\t<span class=\"token comment\">重复拷贝基本是我们修正到同一个位置的原因</span>\n\t\t\t<span class=\"token comment\">我们条件断点一下</span>\n\t\t\t<span class=\"token comment\">//if (begin1 == end1 &amp;&amp; end1 == begin2 &amp;&amp; begin2 == end2 &amp;&amp; end2 == n-1)</span>\n\t\t\t<span class=\"token comment\">//{<!-- --></span>\n\t\t\t<span class=\"token comment\">//\t//随便一个代码来承接断点，一句费代码</span>\n\t\t\t<span class=\"token comment\">//\tint a = 0;</span>\n\t\t\t<span class=\"token comment\">//}</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">//tmp需要一个索引</span>\n\t\t\t<span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>begin1 <span class=\"token operator\">&lt;=</span> end1 <span class=\"token operator\">&amp;&amp;</span> begin2 <span class=\"token operator\">&lt;=</span> end2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>begin1<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> a<span class=\"token punctuation\">[</span>begin2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\ttmp<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>begin2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\ttmp<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>begin1<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\t\t\t\n\t\t\t<span class=\"token comment\">//肯定还有一个没跑完</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>begin1 <span class=\"token operator\">&lt;=</span> end1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\ttmp<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>begin1<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>begin2 <span class=\"token operator\">&lt;=</span> end2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\ttmp<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>begin2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\t\t\n\t\t\t<span class=\"token comment\">//printf(\"       %d\", index);</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//printf(\"\\n\");</span>\n\t\t\n\t\t<span class=\"token comment\">//一行归并完了再考回去</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tgap <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\t\n\t<span class=\"token comment\">//不用了就free掉</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//然后置空</span>\n\ttmp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h6><a id=\"font_color00CC00_font_820\"></a><font color=\"#00CC00\">归一部分拷一部分</font></h6>\n<blockquote>\n<p>我们也可以像递归那样归一半分拷贝一部分，就不需要修正了，因为修正要考虑很多边界情况，有点繁琐</p>\n</blockquote>\n<p><img alt=\"image-20211201104303020\" src=\"..\\..\\static\\image\\621322ef957b0ba29ab70692e91f4a26.png\"/></p>\n<h4><a id=\"font_color0000CC_________font_826\"></a><font color=\"#0000CC\">归并排序非递归实现 归一部分拷一部分</font></h4>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">// 归并排序非递归实现</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">MergeSortNonR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//首先创建一个临时数组</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//空就直接错</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> gap <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>gap<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> gap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//单组需要排序的区间</span>\n\t\t\t<span class=\"token comment\">//[i,i+gap-1]  [i+gap,i+2*gap-1]</span>\n\t\t\t<span class=\"token keyword\">int</span> begin1 <span class=\"token operator\">=</span> i<span class=\"token punctuation\">,</span> end1 <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> gap <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">int</span> begin2 <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span>gap<span class=\"token punctuation\">,</span> end2 <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>gap <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">适用任何元素个数的核心部分</span>\n\t\t\t<span class=\"token comment\">end1出界，[begin2,end2]不存在</span>\n\t\t\t<span class=\"token comment\">//if (end1 &gt;= n) {<!-- --></span>\n\t\t\t<span class=\"token comment\">//\tend1 = n - 1;</span>\n\t\t\t<span class=\"token comment\">//}</span>\n\t\t\t<span class=\"token comment\">[begin2,end2]不存在</span>\n\t\t\t<span class=\"token comment\">//if (begin2 &gt;= n) {<!-- --></span>\n\t\t\t<span class=\"token comment\">//\tbegin2 = n ;</span>\n\t\t\t<span class=\"token comment\">//\tend2 = n - 1;</span>\n\t\t\t<span class=\"token comment\">//}</span>\n\t\t\t<span class=\"token comment\">end2出界</span>\n\t\t\t<span class=\"token comment\">//if (end2 &gt;= n) {<!-- --></span>\n\t\t\t<span class=\"token comment\">//\tend2 = n - 1;</span>\n\t\t\t<span class=\"token comment\">//}</span>\n\t\t\t<span class=\"token comment\">//适用任何元素个数的核心部分</span>\n\t\t\t<span class=\"token comment\">//end1出界，[begin2,end2]不存在 都不需要归并</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end1 <span class=\"token operator\">&gt;=</span> n <span class=\"token operator\">||</span> begin2 <span class=\"token operator\">&gt;=</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token comment\">//直接跳，因为是在原数组操作的不需要担心最后一个没考进去</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">//end2出界  需要归并  就修正</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end2 <span class=\"token operator\">&gt;=</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tend2 <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">//printf(\"[%d,%d],[%d,%d]\",begin1,end1,begin2,end2);</span>\n\t\t\t<span class=\"token comment\">重复拷贝基本是我们修正到同一个位置的原因</span>\n\t\t\t<span class=\"token comment\">我们条件断点一下</span>\n\t\t\t<span class=\"token comment\">//if (begin1 == end1 &amp;&amp; end1 == begin2 &amp;&amp; begin2 == end2 &amp;&amp; end2 == n-1)</span>\n\t\t\t<span class=\"token comment\">//{<!-- --></span>\n\t\t\t<span class=\"token comment\">//\t//随便一个代码来承接断点，一句费代码</span>\n\t\t\t<span class=\"token comment\">//\tint a = 0;</span>\n\t\t\t<span class=\"token comment\">//}</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">//tmp需要一个索引</span>\n\t\t\t<span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>begin1 <span class=\"token operator\">&lt;=</span> end1 <span class=\"token operator\">&amp;&amp;</span> begin2 <span class=\"token operator\">&lt;=</span> end2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>begin1<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> a<span class=\"token punctuation\">[</span>begin2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\ttmp<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>begin2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\ttmp<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>begin1<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">//肯定还有一个没跑完</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>begin1 <span class=\"token operator\">&lt;=</span> end1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\ttmp<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>begin1<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>begin2 <span class=\"token operator\">&lt;=</span> end2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\ttmp<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>begin2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\t\t\n\t\t\t<span class=\"token comment\">//归一部分拷贝一部分</span>\n\t\t\t<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> end2<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\ta<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">//printf(\"       %d\", index);</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//printf(\"\\n\");</span>\n\t\t\n\t\t<span class=\"token comment\">一行归并完了再考回去</span>\n\t\t<span class=\"token comment\">//for (i = 0; i &lt; n; i++) {<!-- --></span>\n\t\t<span class=\"token comment\">//\ta[i] = tmp[i];</span>\n\t\t<span class=\"token comment\">//}</span>\n\t\tgap <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\t\n\t<span class=\"token comment\">//不用了就free掉</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//然后置空</span>\n\ttmp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"font_color0000CC_font_917\"></a><font color=\"#0000CC\">归并排序的特性总结</font></h4>\n<blockquote>\n<ol><li>归并的缺点在于需要O(N)的空间复杂度，归并排序的思考更多的是解决在磁盘中的外排序问题。</li><li>时间复杂度：O(N*logN)</li><li>空间复杂度：O(N)</li><li>稳定性：稳定</li></ol>\n</blockquote>\n<h4><a id=\"font_color0000CC_font_924\"></a><font color=\"#0000CC\">时间复杂度</font></h4>\n<blockquote>\n<p>时间复杂度:O(N*logN)</p>\n</blockquote>\n<blockquote>\n<p>归并排序方法就是把一组n个数的序列，折半分为两个序列，然后再将这两个序列再分，一直分下去，直到分为n个长度为1的序列。然后两两按大小归并。如此反复，直到最后形成包含n个数的一个数组。</p>\n<p><strong><mark>归并排序总时间=分解时间+子序列排好序时间+合并时间</mark></strong></p>\n<p>无论每个序列有多少数都是折中分解，所以分解时间是个常数，可以忽略不计。</p>\n<p><strong><mark>则：归并排序总时间=子序列排好序时间+合并时间</mark></strong></p>\n</blockquote>\n<h3><a id=\"font_colorFF0033_font_936\"></a><font color=\"#FF0033\">测性能</font></h3>\n<h4><a id=\"font_color0000CC_1000____font_938\"></a><font color=\"#0000CC\">1000 一千</font></h4>\n<p><img alt=\"image-20211201130928149\" src=\"..\\..\\static\\image\\a8ab6cada6cf48219388603bac155fb1.png\"/></p>\n<h4><a id=\"font_color0000CC_10000________font_942\"></a><font color=\"#0000CC\">10000 一万 <mark>先抛弃选择和冒泡</mark></font></h4>\n<p><img alt=\"image-20211201131123059\" src=\"..\\..\\static\\image\\13e797d52986fdf36f0b8c56fb0d5140.png\"/></p>\n<h4><a id=\"font_color0000CC_100000______________font_946\"></a><font color=\"#0000CC\">100000 十万 <mark>再抛弃直接插入</mark></font></h4>\n<p><img alt=\"image-20211201131307252\" src=\"..\\..\\static\\image\\46551bffa04f864cec5437d6345894ec.png\"/></p>\n<h4><a id=\"font_color0000CC_1000000____font_950\"></a><font color=\"#0000CC\">1000000 一百万</font></h4>\n<p><img alt=\"image-20211201131726053\" src=\"..\\..\\static\\image\\4e092e0d27336f39c55446e604c2f69a.png\"/></p>\n<h4><a id=\"font_color0000CC_10000000____font_954\"></a><font color=\"#0000CC\">10000000 一千万</font></h4>\n<p><img alt=\"image-20211201131925057\" src=\"..\\..\\static\\image\\29a5ebb54197215054da8b6a1f53e51f.png\"/></p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#font_color996633_______font_3\"><font color=\"#996633\">八排 八奇迹</font></a></li><li><a href=\"#_5\">排序</a></li><li><ul><li><a href=\"#_7\">排序的概念及其运用</a></li><li><ul><li><a href=\"#_9\">排序的概念</a></li><li><a href=\"#_16\">排序运用</a></li><li><ul><li><a href=\"#_18\">==来上京东==</a></li><li><a href=\"#_24\">==大学排名==</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_28\">常见的排序算法</a></li><li><a href=\"#_32\">常见排序算法的实现</a></li><li><ul><li><ul><li><a href=\"#_34\">插入排序</a></li><li><ul><li><a href=\"#_36\">基本思想</a></li><li><a href=\"#_48\">==但是数组肯定不是有序的，所以我们得先让数组有序==</a></li></ul>\n</li><li><a href=\"#_54\">先把打印数组给剥离出来</a></li><li><a href=\"#_68\">插入排序</a></li><li><a href=\"#______106\">希尔排序( 缩小增量排序 ) (反正希尔牛逼)</a></li><li><ul><li><a href=\"#_114\">希尔排序步骤</a></li><li><ul><li><a href=\"#_122\">==**单组多躺**==</a></li><li><a href=\"#_128\">==**多组插入**==</a></li><li><a href=\"#_146\">==**多组一锅炖（要是分组插麻烦我们也可以一锅炖）**==</a></li><li><a href=\"#gap__1gap__1_150\">==**多次预排序(gap &gt; 1)+直接插入（gap == 1）**==</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#_162\">测直接插入排序和希尔排序的性能（让你看看什么才叫希尔排序）</a></li><li><a href=\"#_171\">堆</a></li><li><ul><li><a href=\"#_177\">堆的概念及结构</a></li><li><ul><li><a href=\"#_185\">堆的性质</a></li><li><a href=\"#_190\">堆的结构（这里实现大堆）</a></li><li><ul><li><a href=\"#_196\">堆的结构体</a></li><li><a href=\"#HeapInit_209\">堆初始化函数HeapInit</a></li><li><a href=\"#HeapDestroy_223\">堆销毁函数HeapDestroy</a></li><li><a href=\"#HeapPrint_237\">堆打印函数HeapPrint</a></li><li><a href=\"#AdjustUp_254\">向上调整函数AdjustUp</a></li><li><a href=\"#HeapPush_292\">堆插入函数HeapPush</a></li><li><a href=\"#HeapErmpy_331\">判断堆是否为空函数HeapErmpy</a></li><li><a href=\"#HeapSize_342\">返回堆大小函数HeapSize</a></li><li><a href=\"#Swap_355\">交换函数Swap</a></li><li><a href=\"#AdjustDown_361\">向下调整函数AdjustDown</a></li><li><a href=\"#HeapPop_369\">堆删除函数HeapPop</a></li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#_396\">排序</a></li><li><ul><li><a href=\"#_398\">常见的排序算法</a></li><li><a href=\"#_402\">常见排序算法的实现</a></li><li><ul><li><a href=\"#__404\">选择排序 ==最慢排序（最好理解）所以搬血==</a></li><li><ul><li><a href=\"#_406\">基本思想：</a></li><li><a href=\"#_410\">直接选择排序</a></li><li><a href=\"#_________434\">数据交换 ==剥离出来其他函数也会用到 我明明是简洁之人为了一时的高级而忘记了朴素罪过罪过==</a></li><li><a href=\"#_445\">选择排序</a></li></ul>\n</li><li><a href=\"#_484\">堆排序</a></li><li><ul><li><a href=\"#_495\">向下调整函数</a></li><li><a href=\"#_548\">堆排序代码</a></li></ul>\n</li></ul>\n</li><li><a href=\"#__573\">测性能 ==让你看看什么叫堆==</a></li><li><ul><li><a href=\"#1000___577\">==1000大小数组 一千==</a></li><li><a href=\"#10000____581\">==10000大小数组 一万==</a></li><li><a href=\"#100000_____585\">==100000大小数组 十万==</a></li><li><a href=\"#1000000____589\">==1000000大小数组 一百万==</a></li><li><a href=\"#10000000__________593\">==10000000大小数组 一千万 我们不带选择，插入玩太拉跨了，我们看看希尔，堆在超大数据面前谁性能更优==</a></li></ul>\n</li><li><a href=\"#_597\">性能函数图</a></li></ul>\n</li><li><a href=\"#font_color996633_font_604\"><font color=\"#996633\">排序</font></a></li><li><ul><li><a href=\"#font_color9400D3_font_606\"><font color=\"#9400D3\">常见的排序算法</font></a></li><li><a href=\"#font_color9400D3_font_610\"><font color=\"#9400D3\">常见排序算法的实现</font></a></li><li><ul><li><a href=\"#font_colorFF0033_font_612\"><font color=\"#FF0033\">归并排序</font></a></li><li><ul><li><a href=\"#font_color0000CC_font_614\"><font color=\"#0000CC\">基本思想</font></a></li><li><a href=\"#font_color0000CC_font_626\"><font color=\"#0000CC\">递归写法</font></a></li><li><ul><li><a href=\"#font_colorFF00FF_font_630\"><font color=\"#FF00FF\">通过调试看一下现象</font></a></li><li><a href=\"#font_colorFF00FF_font_634\"><font color=\"#FF00FF\">归并顺序</font></a></li></ul>\n</li><li><a href=\"#font_color0000CC_font_642\"><font color=\"#0000CC\">归并排序递归子函数</font></a></li><li><a href=\"#font_color0000CC_font_686\"><font color=\"#0000CC\">归并排序递归实现</font></a></li><li><a href=\"#font_color0000CC_font_705\"><font color=\"#0000CC\">非递归写法</font></a></li><li><ul><li><a href=\"#font_colorFF00FF_2nfont_707\"><font color=\"#FF00FF\">2^n^个元素的数组</font></a></li><li><a href=\"#font_colorFF00FF_font_719\"><font color=\"#FF00FF\">随便几个元素的数组</font></a></li><li><ul><li><a href=\"#font_color00CC00_font_721\"><font color=\"#00CC00\">修正下标</font></a></li></ul>\n</li></ul>\n</li><li><a href=\"#font_color0000CC_________font_745\"><font color=\"#0000CC\">归并排序非递归实现 修正下标</font></a></li><li><ul><li><ul><li><a href=\"#font_color00CC00_font_820\"><font color=\"#00CC00\">归一部分拷一部分</font></a></li></ul>\n</li></ul>\n</li><li><a href=\"#font_color0000CC_________font_826\"><font color=\"#0000CC\">归并排序非递归实现 归一部分拷一部分</font></a></li><li><a href=\"#font_color0000CC_font_917\"><font color=\"#0000CC\">归并排序的特性总结</font></a></li><li><a href=\"#font_color0000CC_font_924\"><font color=\"#0000CC\">时间复杂度</font></a></li></ul>\n</li><li><a href=\"#font_colorFF0033_font_936\"><font color=\"#FF0033\">测性能</font></a></li><li><ul><li><a href=\"#font_color0000CC_1000____font_938\"><font color=\"#0000CC\">1000 一千</font></a></li><li><a href=\"#font_color0000CC_10000________font_942\"><font color=\"#0000CC\">10000 一万 ==先抛弃选择和冒泡==</font></a></li><li><a href=\"#font_color0000CC_100000______________font_946\"><font color=\"#0000CC\">100000 十万 ==再抛弃直接插入==</font></a></li><li><a href=\"#font_color0000CC_1000000____font_950\"><font color=\"#0000CC\">1000000 一百万</font></a></li><li><a href=\"#font_color0000CC_10000000____font_954\"><font color=\"#0000CC\">10000000 一千万</font></a></li></ul>\n</li></ul>\n</li></ul>\n</li><li><a href=\"#font_color996633_font_961\"><font color=\"#996633\">排序</font></a></li><li><ul><li><a href=\"#font_color9400D3_______font_963\"><font color=\"#9400D3\">常见的排序算法 扩展</font></a></li><li><ul><li><a href=\"#font_colorFF0033_font___965\"><font color=\"#FF0033\">计数排序</font> 不进行数据的比较，而是统计数据出现的次数</a></li><li><ul><li><a href=\"#font_color0000CC_font_990\"><font color=\"#0000CC\">计数排序</font></a></li><li><a href=\"#font_color0000CC_font_1029\"><font color=\"#0000CC\">计数排序的特性总结</font></a></li></ul>\n</li><li><a href=\"#font_colorFF0033_font_1035\"><font color=\"#FF0033\">测性能</font></a></li><li><ul><li><a href=\"#font_color0000CC_1000___font_1037\"><font color=\"#0000CC\">1000 一千</font></a></li><li><a href=\"#font_color0000CC_10000___font_1041\"><font color=\"#0000CC\">10000 一万</font></a></li><li><a href=\"#font_color0000CC_100000___font_1045\"><font color=\"#0000CC\">100000 十万</font></a></li><li><a href=\"#font_color0000CC_1000000___font_1049\"><font color=\"#0000CC\">1000000 一百万</font></a></li><li><a href=\"#font_color0000CC_10000000___font_1053\"><font color=\"#0000CC\">10000000 一千万</font></a></li></ul>\n</li></ul>\n</li><li><a href=\"#font_color9400D3_font_1059\"><font color=\"#9400D3\">排序总结</font></a></li><li><ul><li><ul><li><a href=\"#font_color0000CC_font_1063\"><font color=\"#0000CC\">稳定性</font></a></li></ul>\n</li><li><a href=\"#font_colorFF0033_font_1077\"><font color=\"#FF0033\">八大排序总结</font></a></li><li><a href=\"#font_colorFF0033_font_1136\"><font color=\"#FF0033\">代码</font></a></li><li><ul><li><a href=\"#font_color0000CC_Sorthfont_1138\"><font color=\"#0000CC\">Sort.h</font></a></li><li><a href=\"#font_color0000CC_Sortcfont_1186\"><font color=\"#0000CC\">Sort.c</font></a></li><li><a href=\"#font_color0000CC_testcfont_1699\"><font color=\"#0000CC\">test.c</font></a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"font_color996633_font_961\"></a><font color=\"#996633\">排序</font></h1>\n<h2><a id=\"font_color9400D3_______font_963\"></a><font color=\"#9400D3\">常见的排序算法 扩展</font></h2>\n<h3><a id=\"font_colorFF0033_font___965\"></a><font color=\"#FF0033\">计数排序</font> 不进行数据的比较，而是统计数据出现的次数</h3>\n<p><strong>思想：计数排序又称为鸽巢原理，是对哈希直接定址法的变形应用。 操作步骤</strong></p>\n<blockquote>\n<ol><li>统计相同元素出现次数</li><li>根据统计的结果将序列回收到原来的序列中</li></ol>\n</blockquote>\n<img alt=\"跳动3\" src=\"https://gitee.com/yuanliyuan_zhongyuan/pic-go/raw/master/image/%E8%B7%B3%E5%8A%A84.gif\"/>\n<p><img alt=\"跳动5\" src=\"https://img-blog.csdnimg.cn/img_convert/691abeb8ba3032cb4f4d54331821c2d0.gif\"/></p>\n<blockquote>\n<p>我们可以发现是不是很快，自我感觉一下，没错实际上的确是很快的，时间复杂度是高效到==O(N)==级别的。<mark>计数的本质是哈希，所谓的映射</mark></p>\n</blockquote>\n<blockquote>\n<p>这也会面临一个很现实的问题，就是前面没有时候数，后面1000的位置反而有数，咋处理</p>\n</blockquote>\n<blockquote>\n<p>eg.1000 1100 1200 1300 1200 1400 1000 1500 1300 1200</p>\n</blockquote>\n<p><img alt=\"image-20211202154622236\" src=\"..\\..\\static\\image\\0f990644f68535c01de73a34e56c2ea6.png\"/></p>\n<blockquote>\n<p>我们也可以发现计数排序比较适合大小<mark>范围集中</mark>的数组</p>\n</blockquote>\n<p><img alt=\"image-20211202172954777\" src=\"..\\..\\static\\image\\a0789173b45d028f2adfb30a96ac0641.png\"/></p>\n<h4><a id=\"font_color0000CC_font_990\"></a><font color=\"#0000CC\">计数排序</font></h4>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">// 计数排序</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">CountSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> min <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> max<span class=\"token punctuation\">)</span>\n\t\t\tmax <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">)</span>\n\t\t\tmin <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//范围</span>\n\t<span class=\"token keyword\">int</span> range <span class=\"token operator\">=</span> max <span class=\"token operator\">-</span> min <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//开辟计数数组</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> count <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> range<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token comment\">//没开辟成功直接错</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//数组全部初始化为零</span>\n\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> range<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//统计次数</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//相对映射加加</span>\n\t\tcount<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> min<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//通过计数数组的次数对原数组进行排序</span>\n\t<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> range<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token comment\">//相对映射要回到原数组的数据+min</span>\n\t\t\ta<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span>min<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcount <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"font_color0000CC_font_1029\"></a><font color=\"#0000CC\">计数排序的特性总结</font></h4>\n<blockquote>\n<ol><li>计数排序在数据范围集中时，效率很高，但是适用范围及场景有限。</li><li>时间复杂度：O(MAX(N,范围))</li><li>空间复杂度：O(范围)</li></ol>\n</blockquote>\n<h3><a id=\"font_colorFF0033_font_1035\"></a><font color=\"#FF0033\">测性能</font></h3>\n<h4><a id=\"font_color0000CC_1000___font_1037\"></a><font color=\"#0000CC\">1000 一千</font></h4>\n<p><img alt=\"image-20211202200417560\" src=\"..\\..\\static\\image\\7f66e650284b61160a804d4cc7cc1e5a.png\"/></p>\n<h4><a id=\"font_color0000CC_10000___font_1041\"></a><font color=\"#0000CC\">10000 一万</font></h4>\n<p><img alt=\"image-20211202200429293\" src=\"..\\..\\static\\image\\6ed3789be6a307083c9fbc238513930f.png\"/></p>\n<h4><a id=\"font_color0000CC_100000___font_1045\"></a><font color=\"#0000CC\">100000 十万</font></h4>\n<p><img alt=\"image-20211202200438305\" src=\"..\\..\\static\\image\\23d83c49ae99a076f2325e833ccdb551.png\"/></p>\n<h4><a id=\"font_color0000CC_1000000___font_1049\"></a><font color=\"#0000CC\">1000000 一百万</font></h4>\n<p><img alt=\"image-20211202200446230\" src=\"..\\..\\static\\image\\80d351311f1d27382566f3ab5b4da27f.png\"/></p>\n<h4><a id=\"font_color0000CC_10000000___font_1053\"></a><font color=\"#0000CC\">10000000 一千万</font></h4>\n<p><img alt=\"image-20211202200626193\" src=\"..\\..\\static\\image\\e476082a80fb15a8c8a58687f2e2b24e.png\"/></p>\n<h2><a id=\"font_color9400D3_font_1059\"></a><font color=\"#9400D3\">排序总结</font></h2>\n<blockquote>\n<p><img alt=\"image-20211202204954630\" src=\"..\\..\\static\\image\\0c2213e500f6bd7b0db97ee64459a75f.png\"/></p>\n</blockquote>\n<h4><a id=\"font_color0000CC_font_1063\"></a><font color=\"#0000CC\">稳定性</font></h4>\n<blockquote>\n<p>假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变，即在原序列中，<mark>r[i] = r[j]</mark>,<mark>且r[i] 在r[j]之前</mark>，而在排序后的序列中，r[i]仍在r[j]之前，则称这种排序算法是最稳定的，否则称为不稳定的</p>\n</blockquote>\n<blockquote>\n<p>再简单一点：数组中相同的值，在排序以后相对位置是否变化</p>\n<p><mark>可能会变的，就是不稳定</mark></p>\n<p><mark>能保持不变，就是稳定</mark></p>\n</blockquote>\n<p><img alt=\"image-20211202211158189\" src=\"..\\..\\static\\image\\0923258fafde7778f15c562404d6b7a3.png\"/></p>\n<p><img alt=\"image-20211202222559952\" src=\"..\\..\\static\\image\\d7634a2f2dea7c2e3e1878b3e21f7206.png\"/></p>\n<h3><a id=\"font_colorFF0033_font_1077\"></a><font color=\"#FF0033\">八大排序总结</font></h3>\n<blockquote>\n<table><thead><tr><th align=\"center\">排序方法</th><th align=\"center\">平均时间复杂度</th><th align=\"center\">最坏时间复杂度</th><th align=\"center\">最好时间复杂度</th><th align=\"center\">空间复杂度</th><th align=\"center\">稳定性</th></tr></thead><tbody><tr><td align=\"center\"><font color=\"#FF83FA\">插入排序</font></td><td align=\"center\"><font color=\"#FF83FA\">O(N^2)</font></td><td align=\"center\"><font color=\"#FF83FA\">O(N^2)</font></td><td align=\"center\"><font color=\"#FF83FA\">O(N)</font></td><td align=\"center\"><font color=\"#FF83FA\">O(1)</font></td><td align=\"center\"><font color=\"#FF83FA\">稳定</font></td></tr><tr><td align=\"center\"><font color=\"#D02090\">希尔排序</font></td><td align=\"center\"><font color=\"#D02090\">O(N^1.3)</font></td><td align=\"center\"><font color=\"#D02090\">O(N^2)</font></td><td align=\"center\"><font color=\"#D02090\">O(N)</font></td><td align=\"center\"><font color=\"#D02090\">O(1)</font></td><td align=\"center\"><font color=\"#D02090\">不稳定</font></td></tr><tr><td align=\"center\"><font color=\"#B23AEE\">选择排序</font></td><td align=\"center\"><font color=\"#B23AEE\">O(N^2)</font></td><td align=\"center\"><font color=\"#B23AEE\">O(N^2)</font></td><td align=\"center\"><font color=\"#B23AEE\">O(N^2)</font></td><td align=\"center\"><font color=\"#B23AEE\">O(1)</font></td><td align=\"center\"><font color=\"#B23AEE\">不稳定</font></td></tr><tr><td align=\"center\"><font color=\"#8B0A50\">堆排序</font></td><td align=\"center\"><font color=\"#8B0A50\">O(n*logN)</font></td><td align=\"center\"><font color=\"#8B0A50\">O(n*logN)</font></td><td align=\"center\"><font color=\"#8B0A50\">O(n*logN)</font></td><td align=\"center\"><font color=\"#8B0A50\">O(1)</font></td><td align=\"center\"><font color=\"#8B0A50\">不稳定</font></td></tr><tr><td align=\"center\"><font color=\"#4B0082\">冒泡排序</font></td><td align=\"center\"><font color=\"#4B0082\">O(N^2)</font></td><td align=\"center\"><font color=\"#4B0082\">O(N^2)</font></td><td align=\"center\"><font color=\"#4B0082\">O(N)</font></td><td align=\"center\"><font color=\"#4B0082\">O(1)</font></td><td align=\"center\"><font color=\"#4B0082\">稳定</font></td></tr><tr><td align=\"center\"><font color=\"#0000CD\">快速排序</font></td><td align=\"center\"><font color=\"#0000CD\">O(n*logN)</font></td><td align=\"center\"><font color=\"#0000CD\">O(N^2)</font></td><td align=\"center\"><font color=\"#0000CD\">O(n*logN)</font></td><td align=\"center\"><font color=\"#0000CD\">最好O(logN)，最坏O(N)</font></td><td align=\"center\"><font color=\"#0000CD\">不稳定</font></td></tr><tr><td align=\"center\"><font color=\"#00CD00\">归并排序</font></td><td align=\"center\"><font color=\"#00CD00\">O(n*logN)</font></td><td align=\"center\"><font color=\"#00CD00\">O(n*logN)</font></td><td align=\"center\"><font color=\"#00CD00\">O(n*logN)</font></td><td align=\"center\"><font color=\"#00CD00\">O(N)</font></td><td align=\"center\"><font color=\"#00CD00\">稳定</font></td></tr><tr><td align=\"center\"><font color=\"#7A67EE\">计数排序</font></td><td align=\"center\"><font color=\"#7A67EE\">O(MAX(N,range))</font></td><td align=\"center\"><font color=\"#7A67EE\">O(MAX(N,range))</font></td><td align=\"center\"><font color=\"#7A67EE\">O(N)</font></td><td align=\"center\"><font color=\"#7A67EE\">O(range)</font></td><td align=\"center\"><font color=\"#7A67EE\">不稳定</font></td></tr></tbody></table>\n</blockquote>\n<h3><a id=\"font_colorFF0033_font_1136\"></a><font color=\"#FF0033\">代码</font></h3>\n<h4><a id=\"font_color0000CC_Sorthfont_1138\"></a><font color=\"#0000CC\">Sort.h</font></h4>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h&gt;</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">HEAP</span>        <span class=\"token expression\"><span class=\"token number\">1</span></span></span>\n\n<span class=\"token comment\">// 排序实现的接口</span>\n<span class=\"token comment\">// 打印数组</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">PrintArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 插入排序</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">InsertSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 希尔排序</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ShellSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//数据交换</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pa<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 选择排序</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SelectSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//向下调整</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">AdjustDwon</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 堆排序</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">HeapSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 冒泡排序</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 快速排序递归实现</span>\n<span class=\"token comment\">// 快速排序hoare版本</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">PartSort1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 快速排序挖坑法</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">PartSort2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 快速排序前后指针法</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">PartSort3</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 快速排序 非递归实现</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">QuickSortNonR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 归并排序递归实现</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">MergeSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 归并排序非递归实现</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">MergeSortNonR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 计数排序</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">CountSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n</code></pre>\n<h4><a id=\"font_color0000CC_Sortcfont_1186\"></a><font color=\"#0000CC\">Sort.c</font></h4>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Sort.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"Stack.h\"</span></span>\n\n<span class=\"token comment\">// 打印数组</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PrintArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 插入排序</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">InsertSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>end<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//要插入的数比顺序中的数小就准备挪位置</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\ta<span class=\"token punctuation\">[</span>end <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tend<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token comment\">//插入的数比顺序中的要大就跳出</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//跳出来两种情况</span>\n\t\t<span class=\"token comment\">//1.end == -1 的时候</span>\n\t\t<span class=\"token comment\">//2.break 的时候</span>\n\t\t<span class=\"token comment\">//把x给end前面一位</span>\n\t\ta<span class=\"token punctuation\">[</span>end <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 希尔排序</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ShellSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//分组</span>\n\t<span class=\"token keyword\">int</span> gap <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//多次预排序（gap&gt;1）+ 直接插入（gap == 1）</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>gap<span class=\"token operator\">&gt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//gap /= 2;</span>\n\t\t<span class=\"token comment\">//除以三我们知道不一定会过1，所以我们+1让他有一个必过1的条件</span>\n\t\tgap <span class=\"token operator\">=</span> gap <span class=\"token operator\">/</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//单组多躺</span>\n\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">-</span> gap<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>end <span class=\"token operator\">+</span> gap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\ta<span class=\"token punctuation\">[</span>end <span class=\"token operator\">+</span> gap<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token comment\">//步长是gap</span>\n\t\t\t\tend <span class=\"token operator\">-=</span> gap<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\ta<span class=\"token punctuation\">[</span>end <span class=\"token operator\">+</span> gap<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\t\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//数据交换</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pa<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>pa<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>pa <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>pb<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>pb <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 选择排序</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SelectSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> begin <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>begin <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//单趟</span>\n\t\t<span class=\"token comment\">//最大数，最小数的下标</span>\n\t\t<span class=\"token keyword\">int</span> mini <span class=\"token operator\">=</span> begin<span class=\"token punctuation\">;</span><span class=\"token comment\">//这边假设是刚开始的下标</span>\n\t\t<span class=\"token keyword\">int</span> maxi <span class=\"token operator\">=</span> end<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//这边假设是末尾的下标</span>\n\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> begin<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>mini<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t\tmini <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> a<span class=\"token punctuation\">[</span>maxi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t\tmaxi <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//最小的放前面</span>\n\t\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>begin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>mini<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>begin <span class=\"token operator\">==</span> maxi<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token comment\">//如果最大数就是begin位置的，那么交换的时候最大数连带着下标一起动</span>\n\t\t\tmaxi <span class=\"token operator\">=</span> mini<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//最大的放后面</span>\n\t\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>maxi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tbegin<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\tend<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//向下调整函数</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">AdjustDown</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//创建一个孩子变量，有两个孩子就在这个上加1就行</span>\n\t<span class=\"token keyword\">int</span> child <span class=\"token operator\">=</span> parent <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">HEAP</span></span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//选大孩子</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>child <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tchild<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//大的孩子还大于父亲就交换</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> a<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tparent <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span>\n\t\t\tchild <span class=\"token operator\">=</span> parent <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\"><span class=\"token operator\">!</span>HEAP</span></span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//选小孩子</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> a<span class=\"token punctuation\">[</span>child <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tchild<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//小的孩子还小于父亲就交换</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tparent <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span>\n\t\t\tchild <span class=\"token operator\">=</span> parent <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// HEAP\t</span></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 堆排序   我们之前讲过升序建大堆</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">HeapSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//建堆时间复杂度O(N)</span>\n\t<span class=\"token comment\">//建大堆</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">AdjustDown</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//堆排序时间复杂度O(N*logN)</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>end<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//交换 把最大的放到后面</span>\n\t\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//在向下调整</span>\n\t\t<span class=\"token function\">AdjustDown</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tend<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 冒泡排序</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">BubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//多躺</span>\n\t<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\t\n\t\t<span class=\"token comment\">//交换标记变量</span>\n\t\t<span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//单趟</span>\n\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token operator\">-</span>j<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\t\t\t\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> a<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token comment\">//交换标记改变</span>\n\t\t\t\tflag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//标记还是0就跳出</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//三数取中</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">GetMinIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//这样可以防止 int 溢出</span>\n\t<span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> a<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> left<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token keyword\">return</span> right<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token comment\">//a[left] &gt;= a[mid]</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> a<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> left<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token keyword\">return</span> right<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 快速排序hoare版本 单趟排序</span>\n<span class=\"token comment\">//最左边做key  [left,right]  我们这里给区间</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">PartSort1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//三数取中</span>\n\t<span class=\"token keyword\">int</span> mini <span class=\"token operator\">=</span> <span class=\"token function\">GetMinIndex</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//把中间的数放到最左边，交换即可</span>\n\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>mini<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//还是最左边为keyi</span>\n\t<span class=\"token keyword\">int</span> keyi <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//左右相遇就停止</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//最左边为key，那么最右边就先动</span>\n\t\t<span class=\"token comment\">//找小于key的</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> a<span class=\"token punctuation\">[</span>keyi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tright<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//然后再动右边的</span>\n\t\t<span class=\"token comment\">//找大于key的</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> a<span class=\"token punctuation\">[</span>keyi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tleft<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>keyi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//返回正确位置后的keyi</span>\n\t<span class=\"token keyword\">return</span> left<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 快速排序挖坑法</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">PartSort2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//三数取中</span>\n\t<span class=\"token keyword\">int</span> mini <span class=\"token operator\">=</span> <span class=\"token function\">GetMinIndex</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//把中间的数放到最左边，交换即可</span>\n\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>mini<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//先把Key存下来</span>\n\t<span class=\"token keyword\">int</span> Key <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//挖坑</span>\n\t<span class=\"token keyword\">int</span> pit <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left<span class=\"token operator\">&lt;</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//右边找小</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> Key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tright<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//找到后把数据扔到坑里面去</span>\n\t\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>pit<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//自己就变成新的坑</span>\n\t\tpit <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//左边找大</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> Key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tleft<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//找到后把数据扔到坑里面去</span>\n\t\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>pit<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//自己就变成新的坑</span>\n\t\tpit <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//出来后把Key放到坑里面去</span>\n\ta<span class=\"token punctuation\">[</span>pit<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Key<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> pit<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 快速排序前后指针法</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">PartSort3</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token comment\">//三数取中</span>\n\t<span class=\"token keyword\">int</span> mini <span class=\"token operator\">=</span> <span class=\"token function\">GetMinIndex</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//把中间的数放到最左边，交换即可</span>\n\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>mini<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//把keyi记下来</span>\n\t<span class=\"token keyword\">int</span> keyi <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> prev <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> prev <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">比Key小就跳出</span>\n\t\t<span class=\"token comment\">//while (cur &lt;= right &amp;&amp; a[cur] &gt;= a[keyi]) {<!-- --></span>\n\t\t<span class=\"token comment\">//\tcur++;</span>\n\t\t<span class=\"token comment\">//}</span>\n\t\t<span class=\"token comment\">//if (cur &lt;= right) {<!-- --></span>\n\t\t<span class=\"token comment\">//\t//跳出来prev++</span>\n\t\t<span class=\"token comment\">//\tprev++;</span>\n\t\t<span class=\"token comment\">//\t//交换</span>\n\t\t<span class=\"token comment\">//\tSwap(&amp;a[prev], &amp;a[cur]);</span>\n\t\t<span class=\"token comment\">//\t//交换完后cur也++</span>\n\t\t<span class=\"token comment\">//\tcur++;</span>\n\t\t<span class=\"token comment\">//}\t\t</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>keyi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>prev<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcur<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//跳出来说明交换a[prev]和Key</span>\n\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>prev<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>keyi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> prev<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// 快速排序  小区间优化</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&gt;=</span> right<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//10以内的数插入</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">InsertSort</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> left<span class=\"token punctuation\">,</span> right <span class=\"token operator\">-</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> keyi <span class=\"token operator\">=</span> <span class=\"token function\">PartSort3</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//[left,keyi-1] keyi [keyi+1,right]</span>\n\t\t<span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> keyi <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> keyi <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\t\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 快速排序 非递归实现</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">QuickSortNonR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//建栈</span>\n\tST st<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//初始化栈</span>\n\t<span class=\"token function\">StackInit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//left进栈</span>\n\t<span class=\"token function\">StackPush</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>st<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//right进栈</span>\n\t<span class=\"token function\">StackPush</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>st<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//空栈跳出 </span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">StackEmpty</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//先取尾</span>\n\t\t<span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> <span class=\"token function\">StackTop</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//pop掉</span>\n\t\t<span class=\"token function\">StackPop</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//再取头</span>\n\t\t<span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token function\">StackTop</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//再pop掉</span>\n\t\t<span class=\"token function\">StackPop</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">//然后单趟排序找到keyi</span>\n\t\t<span class=\"token keyword\">int</span> keyi <span class=\"token operator\">=</span> <span class=\"token function\">PartSort3</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>start<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//[start,keyi-1] keyi [keyi+1,end]</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>keyi <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">)</span><span class=\"token comment\">//表示分割开来的区间大于1</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//因为我们先取尾，所以问先入头</span>\n\t\t\t<span class=\"token function\">StackPush</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>st<span class=\"token punctuation\">,</span> keyi <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">//再入尾</span>\n\t\t\t<span class=\"token function\">StackPush</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>st<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>keyi <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">&gt;</span> start<span class=\"token punctuation\">)</span><span class=\"token comment\">//表示分割开来的区间大于1</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//因为我们先取尾，所以问先入头</span>\n\t\t\t<span class=\"token function\">StackPush</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>st<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">//再入尾</span>\n\t\t\t<span class=\"token function\">StackPush</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>st<span class=\"token punctuation\">,</span> keyi <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//与初始化联动的栈销毁</span>\n\t<span class=\"token function\">StackDestroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\">// 归并排序递归子函数</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">_MergeSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//左大于右说明是空数组，空数组就跳</span>\n\t<span class=\"token comment\">//左等于右就是我们要的单体有序</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&gt;=</span> right<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//防溢出写法</span>\n\t<span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">_MergeSort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">_MergeSort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token keyword\">int</span> begin1 <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> end1 <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> begin2 <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> end2 <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//跑空一组就直接跳</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>begin1<span class=\"token operator\">&lt;=</span>end1 <span class=\"token operator\">&amp;&amp;</span> begin2<span class=\"token operator\">&lt;=</span>end2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>begin1<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>begin2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\ttmp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>begin1<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\t\t\t\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\ttmp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>begin2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>begin1 <span class=\"token operator\">&lt;=</span> end1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\ttmp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>begin1<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>begin2 <span class=\"token operator\">&lt;=</span> end2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\ttmp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>begin2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//把tmp数组拷贝回到原来的数组中</span>\n\ti <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span>right<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 归并排序递归实现</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">MergeSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//首先创建一个临时数组</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//空就直接错</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//子函数</span>\n\t<span class=\"token function\">_MergeSort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//不用了就free掉</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//然后置空</span>\n\ttmp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 归并排序非递归实现</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">MergeSortNonR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//首先创建一个临时数组</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//空就直接错</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> gap <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>gap<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> gap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">//单组需要排序的区间</span>\n\t\t\t<span class=\"token comment\">//[i,i+gap-1]  [i+gap,i+2*gap-1]</span>\n\t\t\t<span class=\"token keyword\">int</span> begin1 <span class=\"token operator\">=</span> i<span class=\"token punctuation\">,</span> end1 <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> gap <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">int</span> begin2 <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span>gap<span class=\"token punctuation\">,</span> end2 <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>gap <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">适用任何元素个数的核心部分</span>\n\t\t\t<span class=\"token comment\">end1出界，[begin2,end2]不存在</span>\n\t\t\t<span class=\"token comment\">//if (end1 &gt;= n) {<!-- --></span>\n\t\t\t<span class=\"token comment\">//\tend1 = n - 1;</span>\n\t\t\t<span class=\"token comment\">//}</span>\n\t\t\t<span class=\"token comment\">[begin2,end2]不存在</span>\n\t\t\t<span class=\"token comment\">//if (begin2 &gt;= n) {<!-- --></span>\n\t\t\t<span class=\"token comment\">//\tbegin2 = n ;</span>\n\t\t\t<span class=\"token comment\">//\tend2 = n - 1;</span>\n\t\t\t<span class=\"token comment\">//}</span>\n\t\t\t<span class=\"token comment\">end2出界</span>\n\t\t\t<span class=\"token comment\">//if (end2 &gt;= n) {<!-- --></span>\n\t\t\t<span class=\"token comment\">//\tend2 = n - 1;</span>\n\t\t\t<span class=\"token comment\">//}</span>\n\t\t\t<span class=\"token comment\">//适用任何元素个数的核心部分</span>\n\t\t\t<span class=\"token comment\">//end1出界，[begin2,end2]不存在 都不需要归并</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end1 <span class=\"token operator\">&gt;=</span> n <span class=\"token operator\">||</span> begin2 <span class=\"token operator\">&gt;=</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token comment\">//直接跳，因为是在原数组操作的不需要担心最后一个没考进去</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">//end2出界  需要归并  就修正</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end2 <span class=\"token operator\">&gt;=</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tend2 <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">//printf(\"[%d,%d],[%d,%d]\",begin1,end1,begin2,end2);</span>\n\t\t\t<span class=\"token comment\">重复拷贝基本是我们修正到同一个位置的原因</span>\n\t\t\t<span class=\"token comment\">我们条件断点一下</span>\n\t\t\t<span class=\"token comment\">//if (begin1 == end1 &amp;&amp; end1 == begin2 &amp;&amp; begin2 == end2 &amp;&amp; end2 == n-1)</span>\n\t\t\t<span class=\"token comment\">//{<!-- --></span>\n\t\t\t<span class=\"token comment\">//\t//随便一个代码来承接断点，一句费代码</span>\n\t\t\t<span class=\"token comment\">//\tint a = 0;</span>\n\t\t\t<span class=\"token comment\">//}</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">//tmp需要一个索引</span>\n\t\t\t<span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>begin1 <span class=\"token operator\">&lt;=</span> end1 <span class=\"token operator\">&amp;&amp;</span> begin2 <span class=\"token operator\">&lt;=</span> end2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>begin1<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> a<span class=\"token punctuation\">[</span>begin2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\ttmp<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>begin2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\ttmp<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>begin1<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">//肯定还有一个没跑完</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>begin1 <span class=\"token operator\">&lt;=</span> end1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\ttmp<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>begin1<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>begin2 <span class=\"token operator\">&lt;=</span> end2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\ttmp<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>begin2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\t\t\n\t\t\t<span class=\"token comment\">//归一部分拷贝一部分</span>\n\t\t\t<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> end2<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\ta<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">//printf(\"       %d\", index);</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//printf(\"\\n\");</span>\n\t\t\n\t\t<span class=\"token comment\">一行归并完了再考回去</span>\n\t\t<span class=\"token comment\">//for (i = 0; i &lt; n; i++) {<!-- --></span>\n\t\t<span class=\"token comment\">//\ta[i] = tmp[i];</span>\n\t\t<span class=\"token comment\">//}</span>\n\t\tgap <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\t\n\t<span class=\"token comment\">//不用了就free掉</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//然后置空</span>\n\ttmp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"font_color0000CC_testcfont_1699\"></a><font color=\"#0000CC\">test.c</font></h4>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Sort.h\"</span></span>\n\n<span class=\"token comment\">// 测试排序的性能对比</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">TestOP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//设置随机起点</span>\n\t<span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//将要创建的数组大小</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">10000000</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a6 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a7 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a8 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a9 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//保证两个数组是一样的</span>\n\t\ta1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ta2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\ta3<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\ta4<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\ta5<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\ta6<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\ta7<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\ta8<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\ta9<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">int</span> begin1 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//开始时间</span>\n\t<span class=\"token comment\">//InsertSort(a1, N);</span>\n\t<span class=\"token keyword\">int</span> end1 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//结束时间</span>\n\t<span class=\"token keyword\">int</span> begin2 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ShellSort</span><span class=\"token punctuation\">(</span>a2<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> end2 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> begin3 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//SelectSort(a3, N);</span>\n\t<span class=\"token keyword\">int</span> end3 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> begin4 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">HeapSort</span><span class=\"token punctuation\">(</span>a4<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> end4 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> begin5 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//BubbleSort(a5, N);</span>\n\t<span class=\"token keyword\">int</span> end5 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> begin6 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>a6<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> N <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> end6 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> begin7 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">QuickSortNonR</span><span class=\"token punctuation\">(</span>a7<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> N <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> end7 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> begin8 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MergeSort</span><span class=\"token punctuation\">(</span>a8<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> end8 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> begin9 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MergeSort</span><span class=\"token punctuation\">(</span>a9<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> end9 <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"InsertSort:%d\\n\"</span><span class=\"token punctuation\">,</span> end1 <span class=\"token operator\">-</span> begin1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//结束时间减去开始时间 </span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ShellSort:%d\\n\"</span><span class=\"token punctuation\">,</span> end2 <span class=\"token operator\">-</span> begin2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SelectSort:%d\\n\"</span><span class=\"token punctuation\">,</span> end3 <span class=\"token operator\">-</span> begin3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HeapSort:%d\\n\"</span><span class=\"token punctuation\">,</span> end4 <span class=\"token operator\">-</span> begin4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BubbleSort:%d\\n\"</span><span class=\"token punctuation\">,</span> end5 <span class=\"token operator\">-</span> begin5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"QuickSort:%d\\n\"</span><span class=\"token punctuation\">,</span> end6 <span class=\"token operator\">-</span> begin6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"QuickSortNonR:%d\\n\"</span><span class=\"token punctuation\">,</span> end7 <span class=\"token operator\">-</span> begin7<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MergeSort:%d\\n\"</span><span class=\"token punctuation\">,</span> end8 <span class=\"token operator\">-</span> begin8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MergeSortNonR:%d\\n\"</span><span class=\"token punctuation\">,</span> end9 <span class=\"token operator\">-</span> begin9<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>a3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>a4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>a5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>a6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>a7<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>a8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>a9<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//测试插入排序</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">TestInsertSort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">InsertSort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token function\">PrintArray</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//测试希尔排序</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">TestShellSort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ShellSort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PrintArray</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//测试选择排序</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">TestSelectSort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SelectSort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PrintArray</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//测试堆排序</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">TestHeapSort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">HeapSort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PrintArray</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//测试冒泡排序</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">TestBubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">BubbleSort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PrintArray</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//测试单趟排序</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">TestPartSort1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PartSort1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PrintArray</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//测试快速排序</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">TestQuickSort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PrintArray</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//测试快速排序--非递归</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">TestQuickSortNonR</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">QuickSortNonR</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PrintArray</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//测试归并排序--递归</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">TestMergeSort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MergeSort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PrintArray</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//测试归并排序--非递归</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">TestMergeSortNonR</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>  <span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MergeSortNonR</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PrintArray</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//TestInsertSort();</span>\n\t<span class=\"token comment\">//TestShellSort();</span>\n\t<span class=\"token comment\">//TestSelectSort();</span>\n\t<span class=\"token comment\">//TestHeapSort();</span>\n\t<span class=\"token comment\">//TestBubbleSort();</span>\n\t<span class=\"token comment\">//TestPartSort1();</span>\n\t<span class=\"token comment\">//TestQuickSort();</span>\n\t<span class=\"token comment\">//TestQuickSortNonR();</span>\n\t<span class=\"token comment\">//TestMergeSort();</span>\n\t<span class=\"token comment\">//TestMergeSortNonR();</span>\n\t<span class=\"token function\">TestOP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-12-10 14:56:07", "summary": "文章目录八排八奇迹排序排序的概念及其运用排序的概念排序运用来上京东大学排名常见的排序算法常见排序算法的实现插入排序基本思想但是数组肯定不是有序的，所以我们得先让数组有序先把打印数组给剥离出来插入排序希"}