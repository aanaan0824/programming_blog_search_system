{"blogid": "125200349", "writerAge": "码龄118天", "writerBlogNum": "9", "writerCollect": "27", "writerComment": "1", "writerFan": "6", "writerGrade": "1级", "writerIntegral": "94", "writerName": "懵懵懂懂一场️", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125200349.jpg", "writerRankTotal": "119537", "writerRankWeekly": "55866", "writerThumb": "3", "writerVisitNum": "6839", "blog_read_count": "2742", "blog_time": "于 2022-06-09 11:38:09 发布", "blog_title": "python简单进阶之GUI：PySimpleGUI使用教程", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1><strong>快速开始</strong></h1>\n<pre><code>import PySimpleGUI as sg\n\nsg.theme('DarkAmber')   # 设置当前主题\n# 界面布局，将会按照列表顺序从上往下依次排列，二级列表中，从左往右依此排列\nlayout = [  [sg.Text('Some text on Row 1')],\n            [sg.Text('Enter something on Row 2'), sg.InputText()],\n            [sg.Button('Ok'), sg.Button('Cancel')] ]\n\n# 创造窗口\nwindow = sg.Window('Window Title', layout)\n# 事件循环并获取输入值\nwhile True:\n    event, values = window.read()\n    if event in (None, 'Cancel'):   # 如果用户关闭窗口或点击`Cancel`\n        break\n    print('You entered ', values[0])\n\nwindow.close()\n</code></pre>\n<p>效果：</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\dbfc33f8fd1b352cd290a6d505e40491.png\"/></p>\n<h3><strong>event和Values详解</strong></h3>\n<p>当执行<code>window.read()</code>函数时，将会返回一个<code>(event,values)</code>元组。<code>event</code>是事件，它可能是一个按钮的按下、列表项的选择等，比如我设置了一个<code>sg.Submit('提交')</code>按钮，那么event返回的是<code>'提交'</code>。如果我什么也不填，<code>sg.Submit()</code>，那么返回默认值<code>'Submit'</code>，当然界面上显示的也是Submit。如果用户点击右上角X关闭窗口，则是<code>None</code>。</p>\n<blockquote>\n 注意，默认情况下只有Button才能触发事件，然后执行window.read()，也就是说返回的event始终是button名。但是如果你给控件加上一个\n <code>enable_events=True</code>参数，那么点击任何控件都可以触发事件了，比如说\n <code>sg.Text('My one-shot window.',enable_events=True)</code>，那么点击文本也可以触发事件。\n</blockquote>\n<p><code>values</code>是一个包含所有输入元素的值的字典。字典使用键来定义词条。如果你的元素没有特定的键，系统为你提供一个键。这些自动编号的键是以0开始的。</p>\n<blockquote>\n 比如说我有两个输入框，则第一个输入框的值是values[0]，第二个输入框的值是values[1]\n</blockquote>\n<p>下面的例子：</p>\n<pre><code>import PySimpleGUI as sg    \n\nlayout = [[sg.Text('My one-shot window.')],    \n                 [sg.InputText()],    \n                 [sg.Submit(), sg.Cancel()]]    \n\nwindow = sg.Window('Window Title', layout)  \n\nevent, values = window.read()  \n\nwindow.close()\ntext_input = values[0]  \nsg.popup('You entered', text_input) # 弹出窗口\n</code></pre>\n<p>如果你想使用自定义key？很简单，相应位置修改为以下代码：</p>\n<pre><code>sg.InputText(key='-IN-')\ntext_input = values['-IN-']\nprint(text_input)\n</code></pre>\n<h3><strong>如何更新数据？</strong></h3>\n<p>下面是一个例子，使用<code>window[index].update(指定值)</code>的方法，可以更新key为index控件的值，当然，指定值可以是另外一个控件的值，一个例子如下：</p>\n<pre><code>layout = [[sg.Text('Your typed chars appear here:'), sg.Text(size=(15,1), key='-OUTPUT-')],\n          [sg.Input(key='-IN-')],\n          [sg.Button('Show'), sg.Button('Exit')]]\n\nwindow = sg.Window('Pattern 2B', layout)\n\nwhile True:  # Event Loop\n    event, values = window.read()\n    print(event, values)\n    if event in  (None, 'Exit'):\n        break\n    if event == 'Show':\n        # Update the \"output\" text element to be the value of \"input\" element\n        window['-OUTPUT-'].update(values['-IN-'])\n\nwindow.close()\n</code></pre>\n<blockquote>\n PS：下文中我会介绍一个target参数，我觉得也挺好用的\n</blockquote>\n<h2><strong>手册</strong></h2>\n<h3><strong>window</strong></h3>\n<pre><code>window = sg.Window(\"Windows-like program\",layout)\nwindow.disappear() # 窗口隐藏\nwindow.reappear() # 窗口展示\nwindow = sg.Window('My window with tabs', layout, font=(\"宋体\", 15),default_element_size=(50,1))  \n# 字体为宋体，大小5默认窗口大小为50宽1高\n</code></pre>\n<h3><strong>可用控件列表</strong></h3>\n<p>使用方法：直接<code>sg.Text()</code>即可</p>\n<ul><li>Text # 文本</li><li>InputText # 单行输入框</li><li>Button # 按钮 \n  <ul><li>FileBrowse # 文件选择，选择多个文件FilesBrowse，保存文件FileSaveAs</li><li>FolderBrowse # 文件夹选择</li><li>CalendarButton # 日历选择，必须输入按钮名如<code>'choose date'</code>，返回字符串</li><li>ColorChooser # 颜色选择，如sg.ColorChooserButton('颜色选择')，返回RGB元组</li></ul><br/></li><li>Combo # 下拉选择菜单，如sg.Combo(['choice 1', 'choice 2'])</li><li>Checkbox # 复选框。如sg.Checkbox('My first Checkbox!', default=True), sg.Checkbox('My second Checkbox!')，返回布尔值</li><li>Radio # 单选按钮，如sg.Radio('My first Radio!', \"RADIO1\", default=True),sg.Radio('My second radio!', \"RADIO1\")，第一个是显示的字符，第二个是单选按钮所在组，只有在同一组的单选按钮才有排他性，第三个是默认选中，返回布尔值True or False</li><li>Listbox # 列表框，如sg.Listbox(values=['Listbox 1', 'Listbox 2', 'Listbox 3']</li><li>Slider # 滚动条，如sg.Slider(range=(1,500),default_value=222,orientation='horizontal')，垂直是vertical</li><li>Multiline # 多行输入框</li><li>Multi-line Text Output (not on tkinter version)</li><li>Spin # 一个可以上下调节的控件，像一个简化版的滚动条？如sg.Spin([i for i in range(1,11)], initial_value=1)</li><li>ProgressBar # 进度条，下面是一个使用案例：</li></ul>\n<pre><code>layout = [[sg.Text('A custom progress meter')],\n          [sg.ProgressBar(1000, orientation='h', size=(20, 20), key='progressbar')],\n          [sg.Cancel()]]\n\nwindow = sg.Window('Custom Progress Meter', layout)\nprogress_bar = window['progressbar']\n# loop that would normally do something useful\nfor i in range(1000):\n    # check to see if the cancel button was clicked and exit loop if clicked\n    event, values = window.read(timeout=10)\n    if event == 'Cancel'  or event is None:\n        break\n  # update bar with loop value +1 so that bar eventually reaches the maximum\n    progress_bar.UpdateBar(i + 1)\n# done with loop... need to destroy the window as it's still open\nwindow.close()\n</code></pre>\n<ul><li>Menu # 菜单</li><li>ButtonMenu # 菜单按钮</li></ul>\n<pre><code>menu_def = [['File', ['Open', 'Save', 'Exit' ]],\n            ['Edit', ['Paste', ['Special', 'Normal',], 'Undo'],]]\n\n# 定义布局\nlayout = [[sg.Menu(menu_def, tearoff=False, pad=(20,1))],\n          [sg.ButtonMenu('ButtonMenu',key='-BMENU-', menu_def=menu_def[0])],]\n\nwindow = sg.Window('My window with tabs', layout)\n</code></pre>\n<ul><li>Frame # 框，如下面的代码：</li></ul>\n<pre><code>sg.Frame(layout=[    \n    [sg.Checkbox('Checkbox', size=(10,1)),  sg.Checkbox('My second checkbox!', default=True)],    \n    [sg.Radio('My first Radio!', \"RADIO1\", default=True, size=(10,1)), sg.Radio('My second Radio!', \"RADIO1\")]], \n    title='Options',title_color='red', relief=sg.RELIEF_SUNKEN, tooltip='Use these to set flags')]\n</code></pre>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\d9f4b7d3ba1fc1dc8323168159f7c8cb.png\"/></p>\n<ul><li>Image # 图片查看，只支持png,gif格式，如sg.Image(r'C:\\PySimpleGUI\\Logos\\PySimpleGUI_Logo_320.png')，不知道为什么我运行这个函数总会有各种问题……</li><li>TabGroup # 选项卡</li></ul>\n<pre><code>tab1_layout =  [[sg.T('This is inside tab 1')]]  \ntab2_layout = [[sg.T('This is inside tab 2')],  \n               [sg.In(key='in')]]  \nlayout = [[sg.TabGroup([[sg.Tab('Tab 1', tab1_layout), sg.Tab('Tab 2', tab2_layout)]])],  \n          [sg.Button('Read')]]  \nwindow = sg.Window('My window with tabs', layout)  \n</code></pre>\n<ul><li>Output # 输出框，可以使用print()直接打印，下面是一个例子：</li></ul>\n<pre><code>def ChatBot():\n    layout = [[(sg.Text('This is where standard out is being routed', size=[40, 1]))],\n              [sg.Output(size=(80, 20))],\n              [sg.Multiline(size=(70, 5), enter_submits=True),\n               sg.Button('SEND', button_color=(sg.YELLOWS[0], sg.BLUES[0])),\n               sg.Button('EXIT', button_color=(sg.YELLOWS[0], sg.GREENS[0]))]]\n\n    window = sg.Window('Chat Window', layout, default_element_size=(30, 2))\n\n    # ---===--- Loop taking in user input and using it to query HowDoI web oracle --- #\n    while True:\n        event, value = window.read()\n        if event == 'SEND':\n            print(value)\n        else:\n            break\n    window.close()\nChatBot()\n</code></pre>\n<p>基本可用参数：</p>\n<ul><li><code>key</code>，指定键名</li><li><code>size=(8,6)</code>，控件大小</li><li><code>font = ('宋体',15)</code>，字体，前者是字体类型，后者是字体大小</li><li><code>enable_events</code>，是否触发事件</li><li><code>justification='center'</code>，居中</li></ul>\n<p><strong>内置Button</strong></p>\n<p>虽然官方列了很多内置Button，但是测试下来似乎并没有什么特殊效果，只是多了可以直接使用的Button罢了</p>\n<ul><li>OK</li><li>Ok</li><li>Submit</li><li>Cancel</li><li>Yes</li><li>No</li><li>Exit</li><li>Quit</li><li>Help</li><li>Save</li><li>SaveAs</li><li>Open</li></ul>\n<p>比如说，你可以直接<code>sg.OK()</code>，也可以<code>sg.Button('OK')</code></p>\n<p><strong>target参数</strong></p>\n<p>选择器型控件，如FileBrowse，FilesBrowse，FolderBrowse，FileSaveAs，CalendarButton，ColorChooserButton，会传递选择值给窗口上的另外一个控件，可以是<code>Text</code>，<code>InputText</code>或它本身。比如它与输入框在同一行时会传地址给输入框，如<code>[sg.InputText(),sg.FolderBrowse()]</code>，可以为输入框加一个<code>visible=False</code>参数隐藏（是隐藏整个输入框）。</p>\n<p>那么我想让值传递给指定控件，可以加一个<code>target</code>参数，如：</p>\n<pre><code>layout = [[sg.T('Source Folder')],\n              [sg.In(key='input')],\n              [sg.FolderBrowse(key='_BUTTON_KEY_',target='input'), sg.OK()]]\n</code></pre>\n<p>这样选择的值就会传递给相同key的控件</p>\n<blockquote>\n 注意，使用此参数时，就无法获取选择器控件的值了，比如说上面的例子，你就无法\n <code>print(values['_BUTTON_KEY_'])</code>\n</blockquote>\n<h3><strong>popup</strong></h3>\n<p><strong>popup</strong></p>\n<p>简单来说，popup就是一个弹出窗口，执行该函数时，会停止执行当前窗口，直到用户关闭弹出窗口时才会重新执行。</p>\n<p>可以输入任意数量的参数，都会转化为字符串并输出。</p>\n<p>拥有以下类型的popup：</p>\n<pre><code>sg.popup('Popup')  # Shows OK button\nsg.popup_ok('PopupOk')  # Shows OK button\nsg.popup_yes_no('PopupYesNo')  # Shows Yes and No buttons\nsg.popup_cancel('PopupCancel')  # Shows Cancelled button\nsg.popup_ok_cancel('PopupOKCancel')  # Shows OK and Cancel buttons\nsg.popup_error('PopupError')  # Shows red error button\nsg.popup_timed('PopupTimed')  # Automatically closes\nsg.popup_auto_close('PopupAutoClose')  # Same as PopupTimed\n</code></pre>\n<p>比如<code>popup_ok</code>是一个带有ok按钮的弹出窗口，<code>popup_timed</code>是一个过一段时间自动关掉的弹出窗口。</p>\n<p><code>popup</code>中可以输入的参数，自行<code>help(sg.popup)</code>，需要注意的一点是因为popup会把所有输入的参数都当做字符串输出，所以特殊的参数需要标识出来，比如<code>sg.popup('values[0],values[1],title=\"test\"')</code></p>\n<p><strong>popup_scrolled</strong></p>\n<p>还有一类特殊的popup，即<code>Scrolled Output</code>，它展示的是带有滚动条的弹出窗口，适用于展示大量信息时，函数名为<code>sg.popup_scrolled()</code>。</p>\n<p>popup_scrolled会自动调整大小，如果想自定义的话，可以<code>sg.popup_scrolled(my_text, size=(80, None))</code></p>\n<p>上述代码会展示一个宽度为80字符，高度随输出字符串变化的弹出窗口。</p>\n<p>效果</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\c6c0e9eb52fca00ca2a2688949b7f1f8.png\"/></p>\n<p><strong>popup_get_file</strong></p>\n<p>获取一个或多个文件地址</p>\n<pre><code># 例子：\ntext = sg.popup_get_file('Please enter a file name')</code></pre>\n<p>效果：</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\5806b514b1caf9654bcc548cb5243c23.png\"/></p>\n<p>特殊参数：</p>\n<p><code>save_as=False</code>，是否显示保存按钮，<code>multiple_files=False</code>是否允许选择多个文件，<code>no_window=False</code>是否跳过弹出窗口直接显示系统打开文件界面？</p>\n<p><strong>popup_get_folder</strong></p>\n<p>即获取文件夹路径</p>\n<p>注意，该函数没有<code>save_as=False</code>与<code>multiple_files=False</code>参数，但是有<code>no_window=False</code></p>\n<h3><strong>主题theme</strong></h3>\n<pre><code>theme_name_list = sg.theme_list() # 获取所有可用主题，返回一个列表\nsg.theme_previewer() # 在layout中添加此函数，运行时会展示所有主题的预览\n</code></pre>\n<p>下面代码创造了一个主题浏览器，可以用下拉餐单切换预览所有主题</p>\n<pre><code>sg.theme('Dark Brown')\nlayout = [[sg.Text('Theme Browser')],\n          [sg.Text('Click a Theme color to see demo window')],\n          [sg.Listbox(values=sg.theme_list(), size=(20, 12), key='-LIST-', enable_events=True)],\n          [sg.Button('Exit')]]\nwindow = sg.Window('Theme Browser', layout)\n\nwhile True:  # Event Loop\n    event, values = window.read()\n    if event in (None, 'Exit'):\n        break\n    sg.theme(values['-LIST-'][0])\n    sg.popup_get_text('This is {}'.format(values['-LIST-'][0]))\n\nwindow.close()\n</code></pre>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\a3d44d28a54e733a78992da445bd79f3.png\"/></p>\n<h2><strong>实战：写一个简单的批量重命名工具</strong></h2>\n<p>直接上代码吧，功能挺简单的，就是把某一个文件夹下所有文件全部重命名为hash值+后缀的形式，如果有两个文件hash值一样，则把其中一个移到<code>重复文件夹</code>下。</p>\n<pre><code>import PySimpleGUI as sg    \nfrom hashlib import sha1\nimport os,shutil\n\ndef gui():\n    layout = [\n            [sg.Text('你选择的文件夹是:',font=(\"宋体\", 10)),sg.Text('',key='text1',size=(50,1),font=(\"宋体\", 10))],\n            [sg.Text('程序运行记录',justification='center')],\n            [sg.Output(size=(70, 20),font=(\"宋体\", 10))],              \n            [sg.FolderBrowse('打开文件夹',key='folder',target='text1'),sg.Button('重命名'),sg.Button('关闭程序')]\n            ]    \n  \n    window = sg.Window('雁陎的工具箱', layout,font=(\"宋体\", 15),default_element_size=(50,1))  \n  \n    while True:\n        event, values = window.read()\n        if event in (None, '关闭'):   # 如果用户关闭窗口或点击`关闭`\n            break\n        if event == '重命名':\n            if values['folder']:\n                print('{0}正在重命名原文件为hash值{0}'.format('*'*10))\n                mult_rename(values['folder'])\n                print('{0}重命名完毕{0}'.format('*'*10))\n            else:\n                print('请先选择文件夹')\n  \n    window.close()\n\n\ndef calchash(file_path):  # 计算图片hash值\n    with open(file_path,'rb') as f:\n        sha1obj = sha1()\n        sha1obj.update(f.read())\n        hash = sha1obj.hexdigest()\n        return hash\n \n  \ndef mult_rename(dir_path): # 批量重命名\n    for file in os.listdir(dir_path):\n        file_path = os.path.join(dir_path,file)\n        if not os.path.isdir(file_path): # 判断是否为文件夹         \n            pic_hash = calchash(file_path)      # 计算hash值           \n            last = file[file.rindex(r'.'):]  # 后缀\n            new_name = pic_hash+last\n            if file == new_name:\n                print(file,'无需修改')\n            else:\n                try:\n                    new_path = os.path.join(dir_path,new_name)\n                    os.rename(file_path,new_path)\n                    print('{0}已重命名为{1}'.format(file,new_name))\n                except FileExistsError:\n                    repeat_path = dir_path+r'\\重复文件夹'\n                    if os.path.exists(repeat_path) == False:\n                        os.makedirs(repeat_path)\n                    new_path = os.path.join(repeat_path,new_name)\n                    shutil.move(file_path,new_path)\n                    print(r'{0}文件重复，已移至重复文件夹下'.format(file))\n\ndef main():  \n    gui()\n\nif __name__ == '__main__':\n    main()          \n</code></pre>\n<p>效果图：</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\b4d6c4f3a56fc32fe35dc280ce896fa5.png\"/></p>\n<p>感觉可以把我所有写的代码都搞一个GUI，（好像也没啥实际用处）</p>\n</div>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-06-09 11:38:09", "summary": "快速开始设置当前主题界面布局，将会按照列表顺序从上往下依次排列，二级列表中，从左往右依此排列创造窗口事件循环并获取输入值如果用户关闭窗口或点击效果：和详解当执行函数时，将会返回一个元组。是事件，它可能"}