{"blogid": "125457998", "writerAge": "码龄1年", "writerBlogNum": "23", "writerCollect": "363", "writerComment": "114", "writerFan": "371", "writerGrade": "3级", "writerIntegral": "617", "writerName": "混分巨兽龙某某", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125457998.jpg", "writerRankTotal": "27705", "writerRankWeekly": "1805", "writerThumb": "279", "writerVisitNum": "13979", "blog_read_count": "1617", "blog_time": "于 2022-09-04 18:00:06 发布", "blog_title": "基于STM32与ESP8266的太空人WiFi天气时钟（代码开源）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>        <strong>前言：</strong>本文为手把手教学<span style=\"color:#fe2c24;\"><strong>ESP8266著名开源项目</strong></span>——<span style=\"color:#fe2c24;\"><strong>太空人WiFi天气时钟</strong></span>，不同的是本次项目采用的是<span style=\"color:#fe2c24;\"><strong>STM32</strong></span>作为<strong>MCU</strong>。两者开发过程中有因为各自<strong>芯片的特点</strong>（<strong>时钟频率，内存大小等</strong>），导致开发程序大不相同，很多地方需要特殊设计一下。而作者使用STM32开发的原因很简单，ESP8266虽然<strong>计算能力</strong>等方面优于STM32F1xx，但是<span style=\"color:#fe2c24;\"><strong>弊端</strong></span>也很明显。其所具备的<strong>引脚和外设太少</strong>，扩展性一般（<span style=\"color:#fe2c24;\"><strong>ESP32算是二者优点兼备</strong></span>）。加之网上ESP8266的太空人WiFi天气时钟已经开源的很完善了，所以尝试用STM32实现一下，也方便后续利用STM32拓展开发。（<strong>文末有代码开源！</strong>）</p>\n<p><strong>        实验硬件：</strong>STM32F103ZET6；7针1.3寸TFT-LCD(240×240)；ESP8266</p>\n<p><strong>        硬件实物图：</strong></p>\n<p><img alt=\"\" height=\"1021\" src=\"..\\..\\static\\image\\5800f94fd3de40da9dc08ef905072cf3.png\" width=\"1043\"/></p>\n<p><strong>        效果图：</strong></p>\n<p><img alt=\"\" height=\"1073\" src=\"..\\..\\static\\image\\0bb64997d5d54842aa86b55001a0ad71.png\" width=\"1040\"/></p>\n<p><strong>引脚连接：</strong></p>\n<blockquote>\n<p><span style=\"color:#fe2c24;\"><strong>LCD显示引脚：</strong></span></p>\n<p><strong>VCC --&gt; 3.3V</strong></p>\n<p><strong>GND --&gt; GND</strong></p>\n<p><strong>CLK --&gt; PA5</strong></p>\n<p><strong>DIN --&gt; PA5</strong></p>\n<p><strong>RES --&gt; PB0</strong></p>\n<p><strong>DC --&gt; PB1</strong></p>\n<p><strong>CS --&gt; PA4</strong></p>\n</blockquote>\n<blockquote>\n<p><span style=\"color:#fe2c24;\"><strong>ESP8266模块引脚：</strong></span></p>\n<p><strong>VCC --&gt; 3.3V</strong></p>\n<p><strong>GND --&gt; GND</strong></p>\n<p><strong>RX--&gt; PB10</strong></p>\n<p><strong>TX --&gt; PB11</strong></p>\n<p><strong>RST --&gt; PB9</strong></p>\n<p><strong>EN --&gt; PB7</strong></p>\n</blockquote>\n<h1>一、ESP8266简介与使用</h1>\n<h2>1.1 ESP8266简介</h2>\n<p>        <strong>ESP8266</strong>是一款超低功耗的<strong>UART-WiFi</strong>透传模块，拥有业内极富竞争力的封装尺寸和超低能耗技术，专为<strong>移动设备</strong>和<strong>物联网</strong>应用设计，<span style=\"color:#fe2c24;\"><strong>可将用户的物理设备连接到Wi-Fi无线网络上</strong></span>，进行互联网或局域网通信，实现联网功能。</p>\n<p>        <strong>ESP8266</strong>是<strong>上海乐鑫信息科技（<span style=\"color:#fe2c24;\">国产</span>）</strong>设计的低功耗WiFi芯片，集成完整的<strong>TCP/IP</strong>协议栈和<span style=\"color:#fe2c24;\"><strong>MCU</strong></span>（<strong>网上ESP8266型号很多，基本都具备联网功能，部分型号可以直接作为MCU使用</strong>）。而<strong>ESP8266模块</strong>是深圳安信可公司基于ESP8266芯片研发（增加必要外围电路、串口flash、板载天线等）的串口WiFi模块，成本低、使用简便、功能强大。</p>\n<p class=\"img-center\"><img alt=\"\" height=\"792\" src=\"..\\..\\static\\image\\76e45118936b4e38bb2a7bf664ea8421.png\" width=\"1156\"/></p>\n<blockquote>\n<p>一般是模块固件损坏或者买回来里面可能被别人刷过固件需要擦除或者增加固件才用，作者的<strong>ESP8266</strong>是因为烧写了<strong>Arduino IDE</strong>的例程进去，不能识别AT指令，后来用不到了才想到刷回<span style=\"color:#fe2c24;\"><strong>AT固件</strong></span>。<span style=\"color:#fe2c24;\"><strong>刷固件有风险！！！</strong></span>（<strong>如果大家买的是ESP8266 nodeMCU可能就需要刷AT固件</strong>）</p>\n</blockquote>\n<h2>1.2 硬件与网络的桥梁——ESP8266</h2>\n<p>        <strong>ESP8266模块</strong>和串口<strong>蓝牙JDY-31</strong>模块一样，串口WiFi模块也是扩展单片机功能的又一神器。小巧的 ESP8266 WiFi模块通过串口<strong>AT指令</strong>与单片机通讯，实现串口<span style=\"color:#fe2c24;\"><strong>透传</strong></span>，非常好上手（<strong>部分型号ESP8266可以直接当MCU，无需再通过串口与其他MCU通讯</strong>）。</p>\n<blockquote>\n<p><span style=\"color:#fe2c24;\"><strong> 透传</strong></span>，又称<strong>透明传输</strong>，具体来说就是“<strong>输入即输出</strong>（如从WiFi模块串口输入的字符会透传到服务器端）”，<strong>数据不改变</strong>，<strong>不同协议之间的转换</strong>（如串口到WiFi、蓝牙等）<strong>由模块完成</strong>。使用者无需关心内部具体实现，因此模块对于使用者是“透明的”、似乎不存在的（因为可无视中间的实现原理）。一个高度封装的模块，应该隐藏内部实现细节，仅对外提供使用接口。</p>\n</blockquote>\n<p>        把硬件联网之后，就再也不是“<strong>玩单机</strong>”了。配合服务器端的Socket网络编程，可以玩许多东西。所以我觉得WiFi模块是连接软件（网络编程）与硬件（单片机）的桥梁，把所学的<span style=\"color:#fe2c24;\"><strong>单片机（MCU）</strong></span>和<span style=\"color:#fe2c24;\"><strong>Web</strong></span>知识联系起来了。</p>\n<blockquote>\n<p>如今大火的<strong>物联网</strong>等概念都属于<strong>“智能硬件\"</strong>，ESP8266等模块的出现大大减少了网络开发的难度系数，也进一步促进了技术下放。而且，通过学习ESP8266/ESP32等模块，可以熟悉大量TCP/IP等网络协议，对后续Linux系统板网络开发也是极具意义的。</p>\n</blockquote>\n<h2>1.3 ESP8266使用——AT指令</h2>\n<p>        AT指令最早在蓝牙模块上接触过，<strong>所谓AT指令实质上就是一些起控制作用的特殊字符串</strong>。模块可以通过AT指令控制搭配使用源代码API函数开发，总体开发速度快，难度较低。</p>\n<p><strong>说明：下面仅列举一些最常用的AT指令及用法，指令的详细参数及使用说明请参考官方文档：<a href=\"http://espressif.com/sites/default/files/documentation/4a-esp8266_at_instruction_set_cn.pdf\" title=\"ESP8266 AT指令集\">ESP8266 AT指令集</a>。</strong></p>\n<p><strong>基础AT指令</strong></p>\n<table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>AT</td><td>测试AT启动</td></tr><tr><td>AT+RST</td><td>重启模块</td></tr><tr><td>AT+GMR</td><td>查看版本信息</td></tr></tbody></table>\n<p><span style=\"color:#fe2c24;\"><strong>AT </strong></span>是最常用的指令，用于测试模块能否正常接受指令。在sscom中向串口发送指令 <span style=\"color:#fe2c24;\"><strong>AT</strong></span> ，若收到模块返回的 <span style=\"color:#fe2c24;\"><strong>OK </strong></span>则说明模块的AT指令可正常工作。发送<span style=\"color:#fe2c24;\"><strong> AT+GMR</strong></span> 可查看AT指令及SDK的版本号，一般最新版指令会增加一些新功能，可随时关注官方的更新。</p>\n<p><strong>WiFi功能AT指令</strong></p>\n<p>WiFi是让硬件联网的基础，和其他功能一样，这里仅列举所需的常用指令，更详细指令说明还得查阅文档。</p>\n<table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>AT+CWMODE</td><td>设置WiFi模式（sta/AP/sta+AP）</td></tr><tr><td>AT+CWLAP</td><td>扫描附近的AP信息</td></tr><tr><td>AT+CWJAP</td><td>连接AP</td></tr><tr><td>AT+CWQAP</td><td>与AP断开连接</td></tr><tr><td>AT+CWSAP</td><td>设置ESP8266 softAP配置</td></tr><tr><td>AT+CWLIF</td><td>获取连接到 ESP8266 softAP 的 station 的信息</td></tr></tbody></table>\n<p>关于<strong>WiFi模式</strong>这里要说明一下，<span style=\"color:#fe2c24;\"><strong>sta模式</strong></span>下模块相当于<strong>客户端</strong>，像我们手机平板一样是要去连接路由器的，而<strong>AP模式</strong>下模块相当于<strong>路由器</strong>，是发射WiFi被别人连的。ESP8266支持两种模式并存（模块出厂默认的是AP模式） 。另外，扫描WiFi指令 AT+CWLAP 只能在sta模式下使用，否则会报ERRO错误， <strong>AT+CWJAP</strong> 和 <strong>AT+CWQAP</strong> 指令也同理。</p>\n<p><span style=\"color:#fe2c24;\"><strong>sta模式连接WiFi演示</strong></span></p>\n<ol><li> <p>发送 <span style=\"color:#fe2c24;\"><strong><code>AT+CWMODE=1</code> </strong></span>指令配置模块为sta模式（参数1,2,3分别对应模式sta，AP和sta/AP）。</p> </li><li> <p>发送<span style=\"color:#fe2c24;\"><strong> <code>AT+CWLAP</code> </strong></span>指令扫描当前附近WiFi，模块会返回可用AP列表。</p> </li><li> <p>使用<span style=\"color:#fe2c24;\"><strong> <code>AT+CWJAP=\"WiFi名称\",\"WiFi密码\"</code> </strong></span>连接到指定的路由器，比如我在图书馆的WiFi是 <span style=\"color:#fe2c24;\"><strong>“Wang”</strong></span>，密码是<span style=\"color:#fe2c24;\"><strong>“123456”</strong></span>，实际连接WiFi发送的指令就是<span style=\"color:#fe2c24;\"><strong> <code>AT+CWJAP=\"Wang\",\"123456\"</code></strong></span> 。</p> </li><li> <p>返回的“<span style=\"color:#fe2c24;\"><strong>WIFI CONNECTED</strong></span>”说明连接成功，“<span style=\"color:#fe2c24;\"><strong>WIFI GOT IP</strong></span>”代表模块分配到了IP。</p> </li><li> <p>最后可使用 <strong><span style=\"color:#fe2c24;\"><code>AT+CWQAP</code></span> </strong>断开当前连接的WiFi。</p> </li></ol>\n<p><strong>TCP/IP相关AT指令</strong></p>\n<blockquote>\n<p><span style=\"color:#fe2c24;\"><strong>传输控制协议</strong></span>（英语：Transmission Control Protocol，缩写为 <strong>TCP</strong>）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的<strong>RFC 793</strong>定义。在简化的计算机网络OSI模型中，它完成第四层传输层所指定的功能，用户数据报协议（UDP）是同一层内另一个重要的传输协议。在因特网协议族（Internet protocol suite）中，TCP层是位于IP层之上，应用层之下的中间层。不同主机的应用层之间经常需要可靠的、像管道一样的连接，但是IP层不提供这样的流机制，而是提供不可靠的包交换。</p>\n</blockquote>\n<p>我们常说互联网互联网，那两个连接到互联网的设备该如何相互“交流”呢？TCP连接就是其中一种最常用的方式。TCP是面向连接的传输层协议，通信双方都要实现TCP协议，<strong>其中一方只需目标ip地址和端口号就能发起连接，连接一旦建立，就像在双方之间拉了一条管子，管子两端可进行全双工（双向同时收发）通信。</strong></p>\n<p><strong>TCP是传输层协议</strong>，是在网络层IP协议的基础上封装而来。而这些封装的实现细节也是与我们无关，我们只需使用系统所提供的相关接口“<span style=\"color:#fe2c24;\"><strong>拿来即用</strong></span>”，比如网络编程中的Socket。ESP8266模块中也实现了TCP/IP协议栈，模块作为客户端可轻松使用AT指令向服务端发起TCP连接。<strong>连接TCP服务器并开启透传模式后，模块串口收到的数据就会通过TCP连接透传到服务端，这样就完成了数据从硬件串口通过网络到程序进程的传输，实现软硬结合。</strong></p>\n<table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>AT+CIPSTATUS</td><td>查询网络连接信息</td></tr><tr><td>AT+CIPMUX</td><td>设置多连接模式</td></tr><tr><td>AT+CIPSTART</td><td>建立TCP连接UDP传输或者SSL连接</td></tr><tr><td>AT+CIPCLOSE</td><td>关闭TCP/UDP/SSL传输</td></tr><tr><td>AT+CIPMODE</td><td>设置透传模式</td></tr><tr><td>AT+CIPSEND</td><td>发送数据</td></tr></tbody></table>\n<p>把WiFi模块和电脑连接，<strong>在sscom确定AT指令能正常使用后</strong>，就可以开始配置TCP连接了，具体步骤如下：</p>\n<ol><li> <p>根据上面“<span style=\"color:#fe2c24;\"><strong>sta模式连接WiFi演示</strong></span>”一节把模块连上WiFi</p> </li><li> <p>输入指令 <span style=\"color:#fe2c24;\"><strong><code>AT+CIPMUX=0</code> </strong></span>设置单连接</p> </li><li> <p>从“网络调试助手”得知本机IP和端口，输入指令 <span style=\"color:#fe2c24;\"><strong><code>AT+CIPSTART=\"TCP\",\"192.168.43.140\",1234</code> </strong></span>（指令参数分别为连接类型、目标IP地址和端口号）向服务器发起TCP连接请求，握手成功并建立连接后，服务器端的“网络调试助手”就会显示客户端IP和端口信息，此时双方已做好收发数据的准备（<span style=\"color:#fe2c24;\"><strong>根据实际需要连接的IP地址来</strong></span>）</p> </li><li> <p>输入指令<span style=\"color:#fe2c24;\"><strong> <code>AT+CIPMODE=1</code> </strong></span>开启透传模式</p> </li><li> <p>输入命令 <span style=\"color:#fe2c24;\"><strong><code>AT+CIPSEND</code></strong></span> 进入透传模式，此时模块会把所有串口收到的数据都从TCP端口发送至服务器，同样的，从服务器收到的数据也会从模块串口发送出去打印到sscom上。这样WiFi模块就真正成为了连接硬件与网络的桥梁，实现了串口到TCP的协议转换</p> </li></ol>\n<p><strong>以上其实就是大概本次项目需要使用到的指令，ESP8266配置代码如下：</strong></p>\n<pre><code class=\"language-cs\">void esp8266_config(void)\n{\n\t\tchar str[200];\n\t\tsprintf(str, \"AT+CWJAP=\\\"%s\\\",\\\"%s\\\"\\r\\n\", WIFI_NAME, WIFI_PSW);\n//\t\tSendATCmd(\"+++\", 500);\t\t\t\t// 退出透传模式\n\t\tSendATCmd(\"AT\\r\\n\", 2000);\t\t\t// 测试ESP01模块是否存在\n//\t\tSendATCmd(\"AT+GMR\\r\\n\",3000);\t// 查看模块版本信息\n\t\tSendATCmd(\"AT+CWMODE=1\\r\\n\", 2000);\t// 开启STA+AP模式 ==================\t\t\n\t\tSendATCmd(\"AT+RST\\r\\n\", 3000);\t\n\t\tSendATCmd(str, 10000);\t// 连接无线路由器或者手机热点，等待10秒 ============\n\t\tSendATCmd(\"AT+CIPMUX=0\\r\\n\", 2000);\t// 关闭多连接\n\t\tSendATCmd(\"AT+CIPSTART=\\\"TCP\\\",\\\"api.seniverse.com\\\",80\\r\\n\", 2000);\t// 连接心知  天气TCP服务器\n\t\tSendATCmd(\"AT+CIPMODE=1\\r\\n\", 500);\t// 开启透传模式\n\t\tSendATCmd(\"AT+CIPSEND\\r\\n\", 500);\t\t// 开始透传\n}</code></pre>\n<h1>二、知心天气API使用</h1>\n<p>        本项目为WiFi天气时钟，自然离不开需要从网页上读取天气信息。这里我们使用业内比较著名的<span style=\"color:#fe2c24;\"><strong>知心天气</strong></span>。</p>\n<h2>2.1 登陆心知天气官网，注册</h2>\n<p>没有账号的朋友可以自己去注册一下，流程很简单。不商用的话，知心天气是<strong>免费</strong>的，还是比较良心的（<strong>网站响应率也很高</strong>）。</p>\n<p><img alt=\"\" height=\"1200\" src=\"..\\..\\static\\image\\5901d760a322495faea3a201d38cca0f.png\" width=\"1200\"/></p>\n<p>点击“立即免费试用”</p>\n<p><img alt=\"\" height=\"922\" src=\"..\\..\\static\\image\\3c3e93bbf84e48cba79298c37afc6d54.png\" width=\"1200\"/></p>\n<p>点击免费版的“免费申请”</p>\n<p><img alt=\"\" height=\"1144\" src=\"..\\..\\static\\image\\b853410abba147e591e07feea13f2c7c.png\" width=\"1200\"/></p>\n<p>申请后可查看到自己的私钥（自行保存后面需要用到）</p>\n<p><img alt=\"\" height=\"1033\" src=\"..\\..\\static\\image\\c5ededaaf487438886215092f37f493d.png\" width=\"1200\"/></p>\n<h2>2.1 API函数的使用</h2>\n<p>         目前，大部分网络数据调用都是习惯性的调用数据提供商的<strong>API接口函数</strong>。</p>\n<p>重新点击“产品”—&gt;“天气数据”，点击<strong>“查看API文档” </strong></p>\n<p><img alt=\"\" height=\"755\" src=\"..\\..\\static\\image\\7cb5c6bc151a4d179d22e40484fd6d5e.png\" width=\"1200\"/></p>\n<p>点击\"天气实况\"，打开对应的API接口文档 </p>\n<p><img alt=\"\" height=\"1124\" src=\"..\\..\\static\\image\\24824fa116c84abdbfbbbab2ea0b230a.png\" width=\"1200\"/></p>\n<p>查看天气实况的接口地址，以及返回的数据结果示例（自行保存后面需要用到）</p>\n<p><img alt=\"\" height=\"1200\" src=\"..\\..\\static\\image\\0135de9302a64eb8af3fbdabe8bd5a6d.png\" width=\"1151\"/></p>\n<blockquote>\n<p>（1）上述知心天气API接口函数的寻找和使用通用性很高，大部分网络数据读取的流程与之类似。</p>\n<p>（2）嵌入式开发大部分情况下一般都是<strong>C语言</strong>进行开发的，由于C语言的局限性，没有直接的字典类型处理（<strong>python</strong>），所以，对于服务器返回给ESP8266的JSON数据一般是无法直接解码读取的。目前有2种方法处理：<span style=\"color:#fe2c24;\"><strong>①、移植CJSON去解码</strong></span>；<span style=\"color:#fe2c24;\"><strong>②取巧去比对字符串（本次使用的方法）</strong></span>；</p>\n</blockquote>\n<p>        项目使用过程中直接使用知心天气自带的API函数，<strong><span style=\"color:#fe2c24;\">项目大致流程：</span>开启STA模式后，成功连上WiFi后，通过TCP协议去访问执行天气网站的服务器，在发送特定的API接口函数，服务器响应后返回需要的结果信息。</strong></p>\n<h1>三、UART串口通讯</h1>\n<p>        <strong>STM32</strong>作为<strong>MCU与ESP8266</strong>直接的通讯就是简单的<span style=\"color:#fe2c24;\"><strong>UART（串口）</strong></span>通信，这一点依旧与蓝牙模块很类似。<strong>使用方法：</strong>通过串口<strong>UARTx_TX</strong>连接ESP8266的<strong>UART_RX</strong>，然后单片机通过串口发送AT指令集。ESP8266后续从服务器接受的数据信息也从ESP8266的<strong>UART_TX</strong>传输给单片机<strong>UARTx_RX</strong>。后续只需要使用自己的方法去<strong>解析串口接收到的数据</strong>，即可得到自己想要的数据信息。</p>\n<p><strong>可以初步使用电脑串口去读取MCU接收到ESP8266返回的信息：</strong></p>\n<p><img alt=\"\" height=\"832\" src=\"..\\..\\static\\image\\f008ad1777a542fbb23153337b90e493.png\" width=\"1060\"/></p>\n<h1>四、CubeMX配置</h1>\n<p><strong>1、RCC配置外部高速晶振（精度更高）——HSE；</strong></p>\n<p><img alt=\"\" height=\"1191\" src=\"..\\..\\static\\image\\9ae99b21f3ed47e7978ca32c47ce5175.png\" width=\"1200\"/></p>\n<p><strong>2、SYS配置：Debug设置成Serial Wire</strong>（<strong>否则可能导致芯片自锁</strong>）；</p>\n<p><img alt=\"\" height=\"1191\" src=\"..\\..\\static\\image\\40342f1bf7454893aa5c8faa191fbb2d.png\" width=\"1200\"/></p>\n<p><strong>3、GPIO配置：此处模拟使用SPI通信，并且设置ESP8266的EN和RST；</strong></p>\n<p><img alt=\"\" height=\"1191\" src=\"..\\..\\static\\image\\a453db1eb2e6401da18538fe4821c011.png\" width=\"1200\"/></p>\n<p><strong>4、RTC配置：年月日，时分秒；</strong></p>\n<p><img alt=\"\" height=\"1191\" src=\"..\\..\\static\\image\\8168a14dfa6445619d49ff9e0b86aea4.png\" width=\"1200\"/></p>\n<p><strong>5、UART1和UART3配置：MCU分别与电脑和ESP8266通讯（记得开启串口通信中断）；</strong></p>\n<p><img alt=\"\" height=\"1191\" src=\"..\\..\\static\\image\\8ec12421a6ac438d87dd9edb1165a03c.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"1191\" src=\"..\\..\\static\\image\\ab03fafecf86468288f7267c504239e4.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"1191\" src=\"..\\..\\static\\image\\e8411595341145d18fc1e630c14959b5.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"1191\" src=\"..\\..\\static\\image\\a5f28bb115cb4226b98d3cbbef232eaa.png\" width=\"1200\"/></p>\n<p><strong>6、时钟树配置 </strong></p>\n<p><img alt=\"\" height=\"1191\" src=\"..\\..\\static\\image\\1306aa2ac8d24be69b3fef4d335fe4e4.png\" width=\"1200\"/></p>\n<p><strong>7、工程配置</strong></p>\n<p><img alt=\"\" height=\"1191\" src=\"..\\..\\static\\image\\2739e32b53d0419bb7eef4056a162dcd.png\" width=\"1200\"/></p>\n<h1>五、代码与解析</h1>\n<h2>5.1 TFT-LCD显示代码</h2>\n<p>LCD显示部分其实都是非常基础的操作，不熟悉的可以去看看笔者另一篇文章了解一下。作者这里主要把工程中不一样的地方指出来一下。<a href=\"https://blog.csdn.net/black_sneak/article/details/125583293?spm=1001.2014.3001.5502\" title=\"【强烈推荐】基于STM32的TFT-LCD各种显示实现（内容详尽含代码）_混分巨兽龙某某的博客-CSDN博客_lcd显示屏显示代码\">【强烈推荐】基于STM32的TFT-LCD各种显示实现（内容详尽含代码）_混分巨兽龙某某的博客-CSDN博客_lcd显示屏显示代码</a></p>\n<h3>5.1.1 UI设计</h3>\n<p>        WiFi天气时钟中最要的点——<span style=\"color:#fe2c24;\"><strong>UI设计</strong></span>，需要去设计很多界面图标，作者这里耗费了超级多的时间，翻遍了<strong>GitHub</strong>和<strong><span style=\"color:#0d0016;\">视觉中国</span></strong>。最后找到了差不多符合作者要求的UI库（<strong>有需要的可以评论区留下邮箱</strong>），如下：</p>\n<p><img alt=\"\" height=\"890\" src=\"..\\..\\static\\image\\1f0766982708470bbae0cf59050e6b70.png\" width=\"1200\"/></p>\n<h3> 5.1.2 GIF动图实现</h3>\n<p>        目前，由于STM32自身内存的缘故，其实STM32是<span style=\"color:#fe2c24;\"><strong>不太适合实现GIF动图</strong></span>的。所以，网上这方面的资料和代码都很少。目前，较为主流的方法：<strong>（1）enWin或者Lvgl库实现GIF动图；（2）从SD卡读取数据去显示</strong>。</p>\n<p>        <strong>作者这里用了一直笨方法去实现了GIF显示，就是去循环遍历GIF动图的每一帧。</strong></p>\n<p>使用<span style=\"color:#fe2c24;\"><strong>GIF分离器</strong></span>去分离GIF动图的<strong>每一帧</strong>；</p>\n<p><img alt=\"\" height=\"839\" src=\"..\\..\\static\\image\\5e6a74fa8b1b4467b313f6aad64537f1.png\" width=\"1200\"/></p>\n<p>再利用<strong>Image2Lcd 2.9(破解版)</strong>去提前图模；</p>\n<p><img alt=\"\" height=\"238\" src=\"..\\..\\static\\image\\15137a097da34eb2b7448296df6a76a3.png\" width=\"1069\"/></p>\n<p>将取模代码变为<span style=\"color:#fe2c24;\"><strong>2维数组</strong></span>，<strong>第一维度为帧数</strong>，<strong>第二维度为每帧图片的取模</strong>。</p>\n<p><img alt=\"\" height=\"756\" src=\"..\\..\\static\\image\\a601c013f80a4b1cb0991e16772402ea.png\" width=\"1115\"/></p>\n<p>之后<strong>循环显示该GIF数组的每一帧</strong>，即可实现GIF动图显示。</p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"language-cs\">void showimage4(const unsigned char *p) \n{\n  int i; \n\tunsigned char picH,picL;\n\n\tAddress_set(180,146,228,195);\n\tfor(i=0;i&lt;49*50;i++)\n\t\t{\t\n\t\t\tpicL=*(p+i*2);\t\n\t\t\tpicH=*(p+i*2+1);\t\t\t\t\n\t\t\tLCD_WR_DATA(picH&lt;&lt;8|picL); \t\t\t\t\n\t\t}\t\n}\n\n\nfor(int a=0;a&lt;11;a++)\n{\n    showimage4(gImage_1[a]);\n}</code></pre>\n<h2>5.2 ESP8266代码</h2>\n<p>EPS8266部分代码主要是配置后负责和目标服务器去实现通讯，当然还有需要解码服务器返回信息。</p>\n<h3><strong>5.2.1 ESP8266配置代码（含UART处理）</strong></h3>\n<p><strong>UART回调处理函数：</strong></p>\n<pre><code class=\"language-cs\">/* USER CODE BEGIN 4 */\nvoid HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)\n{\n  /* Prevent unused argument(s) compilation warning */\n  UNUSED(huart);\n  /* NOTE: This function Should not be modified, when the callback is needed,\n           the HAL_UART_TxCpltCallback could be implemented in the user file\n   */\n\tif(huart == &amp;huart1)\n\t{\n\t\tg_uart1_rx.buf[g_uart1_rx.size++] = aRxBuffer_rx1;   \t\t\t\t\t\t\t\t\t\n\t\tif((g_uart1_rx.buf[g_uart1_rx.size-1] == 0x0A)&amp;&amp;(g_uart1_rx.buf[g_uart1_rx.size-2] == 0x0D))\t\n\t\t{\n\t\t\tHAL_UART_Transmit(&amp;huart1, (uint8_t *)&amp;g_uart1_rx.buf, g_uart1_rx.size,0xFFFF);\t\n\t\t\t\t\twhile(HAL_UART_GetState(&amp;huart1) == HAL_UART_STATE_BUSY_TX);\t\t\t\n\t\t\tg_uart1_rx.size = 0;\n\t\t\tmemset(g_uart1_rx.buf,0x00,sizeof(g_uart1_rx.buf));\t\t\t\t\t\t\t\t\t\n\t\t}\n\t\tHAL_UART_Receive_IT(&amp;huart1, (uint8_t *)&amp;aRxBuffer_rx1, 1);\t\t\t\t\t\t\n\t}\n\tif(huart == &amp;huart3)\n\t{\n\t\tg_uart3_rx.buf[g_uart3_rx.size++] = aRxBuffer_rx3;   \t\t\t\t\t\t\t\t\t\n\t\n\t\tif((g_uart3_rx.buf[g_uart3_rx.size-1] == 'K')&amp;&amp;(g_uart3_rx.buf[g_uart3_rx.size-2] == 'O'))\t\n\t\t{\n\t\t\tHAL_UART_Transmit(&amp;huart1, (uint8_t *)&amp;g_uart3_rx.buf, g_uart3_rx.size,0xFFFF);\t\n\t\t\t\twhile(HAL_UART_GetState(&amp;huart1) == HAL_UART_STATE_BUSY_TX);\t\t\t\n\t\t\tg_uart3_rx.size = 0;\n\t\t\tmemset(g_uart3_rx.buf,0x00,sizeof(g_uart3_rx.buf));\t\t\t\t\t\t\t\t\t\n\t\t}\n\t\telse if((g_uart3_rx.buf[g_uart3_rx.size-2] == ']')&amp;&amp;(g_uart3_rx.buf[g_uart3_rx.size-1] == '}')\n\t\t\t&amp;&amp;(g_uart3_rx.buf[g_uart3_rx.size-3] == '}'))\n\t\t{\n\t\t\tHAL_UART_Transmit(&amp;huart1, (uint8_t *)&amp;g_uart3_rx.buf, g_uart3_rx.size,0xFFFF);\t\n\t\t\twhile(HAL_UART_GetState(&amp;huart1) == HAL_UART_STATE_BUSY_TX);\t\t\t//\t\t\t\t\n\t\t\tstrcpy(Data_buff,(char *)g_uart3_rx.buf);\n\t\t\ttemp = 1;\n\t\t\tg_uart3_rx.size = 0;\t\t\t\t\n\t\t\tmemset(g_uart3_rx.buf,0x00,sizeof(g_uart3_rx.buf));\t\t\t\t\t\t\t\t\t\n\n\t\t}\n\t\tHAL_UART_Receive_IT(&amp;huart3, (uint8_t *)&amp;aRxBuffer_rx3, 1);\t\t\t\t\t\t\n\t}\n\t\n}\n/* USER CODE END 4 */</code></pre>\n<p><strong>ESP8266.h（AT控制）：</strong></p>\n<pre><code class=\"language-cs\">#ifndef __ESP8266_H\n#define __ESP8266_H\n\n//#include \"stdint.h\"\n\n//uint8_t aRxBuffer_rx1;\t\t\t//接收中断缓冲\n//uint8_t aRxBuffer_rx3;\t\t\t//接收中断缓冲\n\n//typedef struct {\n//\tuint16_t size;\n//\tuint8_t buf[1022]; // 接收缓冲数组\n//} UART_RXDATA;\n\n//UART_RXDATA g_uart1_rx;\n//UART_RXDATA g_uart3_rx;\n\n//char Data_buff[1022];\n\n//char weather[10];\t\t\t\t//存储天气\n\n//uint8_t temperature[2]={0,0}; \t\t//储存最高气温和最低气温\n//uint8_t temp = 0;\n\n//需要连接的wifi账号和密码，需要修改，且WiFi频段不支持5GHz\n#define WIFI_NAME \"Wang\"\n#define WIFI_PSW    \"123456\"\n \n心知天气api,注意key=后面需要替换成自己账号的密钥\n//char *get=\"GET https://api.seniverse.com/v3/weather/daily.json?key=SkV9zIBpwJAOixrJZ&amp;location=chongqing&amp;language=en&amp;unit=c\\r\\n\";\n\n//void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);\nvoid SendATCmd(char *cmd, int waitms); \nvoid esp8266_config(void);\n\n\n#endif</code></pre>\n<p><strong>ESP8266.c：</strong></p>\n<pre><code class=\"language-cs\">#include \"esp8266.h\"\n#include \"usart.h\"\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdlib.h&gt;\n#include \"lcd.h\"\n\n\nvoid SendATCmd(char *cmd, int waitms) \n{ // 发送AT指令给串口3\n\tif (NULL != cmd)\n\t{\n\t\tHAL_UART_Transmit(&amp;huart3, (uint8_t *)cmd, strlen(cmd), 0xFFFF);\t\n\t\tif (waitms &gt; 0)\n\t\t\tHAL_Delay(waitms);  // 延时等待ESP01模块应答时间\n\t}\n}\n\nvoid esp8266_config(void)\n{\n\t\tchar str[200];\n\t\tsprintf(str, \"AT+CWJAP=\\\"%s\\\",\\\"%s\\\"\\r\\n\", WIFI_NAME, WIFI_PSW);\n//\t\tSendATCmd(\"+++\", 500);\t\t\t\t// 退出透传模式\n\t\tSendATCmd(\"AT\\r\\n\", 2000);\t\t\t// 测试ESP01模块是否存在\n//\t\tSendATCmd(\"AT+GMR\\r\\n\",3000);\t// 查看模块版本信息\n\t\tSendATCmd(\"AT+CWMODE=1\\r\\n\", 2000);\t// 开启STA+AP模式 ==================\t\t\n\t\tSendATCmd(\"AT+RST\\r\\n\", 3000);\t\n\t\tSendATCmd(str, 10000);\t// 连接无线路由器或者手机热点，等待10秒 ============\n\t\tSendATCmd(\"AT+CIPMUX=0\\r\\n\", 2000);\t// 关闭多连接\n\t\tSendATCmd(\"AT+CIPSTART=\\\"TCP\\\",\\\"api.seniverse.com\\\",80\\r\\n\", 2000);\t// 连接心知天气TCP服务器\n\t\tSendATCmd(\"AT+CIPMODE=1\\r\\n\", 500);\t// 开启透传模式\n\t\tSendATCmd(\"AT+CIPSEND\\r\\n\", 500);\t\t// 开始透传\n\t\n\t\tSendATCmd(\"GET https://api.seniverse.com/v3/weather/daily.json?key=SkV9zIBpwJAOixrJZ&amp;location=zhenjiang&amp;language=en&amp;unit=c\\r\\n\", 2000);\n}\n\n</code></pre>\n<p><strong>注意，key=后面尽量换成自己的密钥，location=后面也可以换成自己所在城市的字母。</strong></p>\n<h3><strong>5.2.2 ESP8266信息解码</strong></h3>\n<p>        <span style=\"color:#fe2c24;\"><strong>这部分作者取巧，使用了字符串对比和指针取值的操作。</strong></span></p>\n<p><span style=\"color:#0d0016;\"><strong>strstr（）函数：</strong></span></p>\n<p><img alt=\"\" height=\"746\" src=\"..\\..\\static\\image\\578b6ac9114947c1b6c18c68564354a9.png\" width=\"1200\"/></p>\n<p><strong>atoi（）<strong style=\"color:#0d0016;\">函数：</strong></strong></p>\n<p><img alt=\"\" height=\"674\" src=\"..\\..\\static\\image\\7cb2b37805c1440ea238d57e96c7eb33.png\" width=\"1200\"/></p>\n<p><strong>代码：</strong></p>\n<pre><code class=\"language-cs\">\t\t\tchar *p;\n\t\t\tp =\tstrstr(Data_buff,\"text_day\");\t\t\t\t//查找天气\t\t\n\t\t\tsscanf(p+11,\"%[^\\\"]\",weather);\t\n//\t\t\tLCD_ShowString(40,80,(uint8_t*)weather);\t\t\t\n\t\t\tp = strstr(Data_buff,\"high\");\t\t\t\t\t\t\t\t//查找气温\n\t\t\ttemperature[0]=atoi(p+7);\n\t\t\tp = strstr(Data_buff,\"low\");\n\t\t\ttemperature[1]=atoi(p+6);\n//\t\t\tLCD_ShowxNum2(45,40,temperature[1],2,24,0);\n\t\t\tLCD_ShowxNum2(160,207,temperature[0],2,24,0);\n\n\t\t\t//温度\n\t\t\tvalue = (temperature[1]+temperature[0])/2;\n\t\t\tLCD_ShowxNum2(52,160,value,2,24,0); \t\t\t\n\n\t\t\t//湿度\n\t\t\tp = strstr(Data_buff,\"humidity\");\n\t\t\thumidity=atoi(p+11);\n\t\t\tLCD_ShowxNum2(132,160,humidity,2,24,0);\n\t\t\tLCD_ShowNew(161,160,'%',24,0);\n\t\t\t\n\t\t\tif((strstr(weather,\"Overcast\")) || (strstr(weather,\"Mostly Cloudy\")) || (strstr(weather,\"Partly Cloudy\")) || strstr(weather,\"Cloudy\"))\t\n\t\t\t{\n\t\t\t\tOvercast();\n\t\t\t}\n\t\t\tif((strstr(weather,\"Sunny\")) || (strstr(weather,\"Clear\")) || (strstr(weather,\"Fair\")))\t\t\t//ÇçÌì\n\t\t\t{\n\t\t\t\tSunny();\n\t\t\t}\n\t\t\tif((strstr(weather,\"Shower\")))\t\t\t\t\n\t\t\t{\n\t\t\t\tShower();\n\t\t\t}\n\t\t\tif((strstr(weather,\"Thundershower\")) || (strstr(weather,\"Thundershower with Hail\")))\t\t\n\t\t\t{\n\t\t\t\tThundershower();\n\t\t\t}\n\t\t\tif((strstr(weather,\"Light rain\")) || (strstr(weather,\"Moderate Rain\")))\t\t\t\n\t\t\t{\n\t\t\t\tsmallrain();\n\t\t\t}\n\t\t\tif((strstr(weather,\"Heavy Rain\")) || (strstr(weather,\"Storm\")) || (strstr(weather,\"Heavy Storm\")) || (strstr(weather,\"Severe Storm\")))\t\t\n\t\t\t{\n\t\t\t\tBigrain();\n\t\t\t}\n\t\t\tif((strstr(weather,\"Ice Rain\")) || (strstr(weather,\"Sleet\")) || (strstr(weather,\"Snow Flurry\")) || (strstr(weather,\"Light Snow\")) || (strstr(weather,\"Moderate Snow\")) || (strstr(weather,\"Heavy Snow\")) || (strstr(weather,\"Snowstorm\")))\t\t\n\t\t\t{\n\t\t\t\tsnow();\n\t\t\t}\t\t\t</code></pre>\n<h2>5.3 RTC代码</h2>\n<p><strong>rtcdisplay.h：</strong></p>\n<pre><code class=\"language-cs\">#ifndef __RTCDISPLAY_H\n#define __RTCDISPLAY_H\n\nvoid RTC_display();\n\n#endif</code></pre>\n<p><strong>rtcdisplay.c：</strong></p>\n<pre><code class=\"language-cs\">#include \"rtcdisplay.h\"\n#include \"rtc.h\"\n#include \"lcd.h\"\n\nRTC_DateTypeDef GetData;  //获取日期结构体\nRTC_TimeTypeDef GetTime;   //获取时间结构体\n\nvoid RTC_display()\t\t\t\t//RTC DISPLAY\n{\n\t\n\t  /* Get the RTC current Time */\n\t  HAL_RTC_GetTime(&amp;hrtc, &amp;GetTime, RTC_FORMAT_BIN);\n    /* Get the RTC current Date */\n    HAL_RTC_GetDate(&amp;hrtc, &amp;GetData, RTC_FORMAT_BIN);\n\t\n\t\t/* Display date Format : yy/mm/dd */\n//\t\tOLED_ShowNum(0,0,2000+GetData.Year,4,16);\t\t\t//year\n//\t\tOLED_ShowStr(35,30,\".\",2);\n//\t\tOLED_ShowNum(45,0,GetData.Month,2,16);\t\t\t\t//month\n//\t\tOLED_ShowStr(60,30,\".\",2);\n//\t\tOLED_ShowNum(70,0,GetData.Date,2,16);\t\t\t    //date\n\t\n    /* Display time Format : hh:mm:ss */\n\t\tLCD_ShowxNum2(15,75,GetTime.Hours,2,60,0);\t\t\t\t//hour\n//\t\tLCD_ShowNew(75,65,':',60,0);\n\t\tLCD_ShowxNum2(105,75,GetTime.Minutes,2,60,0);\t\t\t//min\n\t\tLCD_ShowxNum2(180,105,GetTime.Seconds,2,32,0);\t\t\t//seconds\n\n}</code></pre>\n<p><strong>这里RTC的时钟显示，作者也去网上找了专门的LED数字字体，如果需要LED数字字体库的也可以评论留言，作者把安装脚本发你。</strong></p>\n<h1>六、项目效果</h1>\n<div class=\"csdn-video-box\">\n<iframe allowfullscreen=\"true\" data-mediaembed=\"csdn\" id=\"uLyIS2AW-1662269248782\" src=\"https://live.csdn.net/v/embed/236578\"></iframe>\n<p>太空人WIFI天气时钟</p>\n</div>\n<h1>七、项目代码</h1>\n<p><strong>代码地址：</strong> <a href=\"https://download.csdn.net/download/black_sneak/86509051\" title=\"基于STM32与ESP8266的太空人WiFi天气时钟（TFT-LCD）-嵌入式文档类资源-CSDN文库\">基于STM32与ESP8266的太空人WiFi天气时钟（TFT-LCD）-嵌入式文档类资源-CSDN文库</a></p>\n<p><strong>如果积分不够的朋友，<span style=\"color:#fe2c24;\">点波关注</span>，<span style=\"color:#fe2c24;\">评论区留下邮箱</span>，作者无偿提供<span style=\"color:#fe2c24;\">源码和后续问题解答</span>。求求啦关注一波吧 ！！！</strong></p>\n</div>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-04 18:00:06", "summary": "前言：本文为手把手教学著名开源项目太空人天气时钟，不同的是本次项目采用的是作为。两者开发过程中有因为各自芯片的特点时钟频率，内存大小等，导致开发程序大不相同，很多地方需要特殊设计一下。而作者使用开发的"}