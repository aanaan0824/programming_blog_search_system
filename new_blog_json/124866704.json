{"blogid": "124866704", "writerAge": "码龄2年", "writerBlogNum": "2", "writerCollect": "35", "writerComment": "9", "writerFan": "6", "writerGrade": "1级", "writerIntegral": "51", "writerName": "weixin_49983900", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124866704.jpg", "writerRankTotal": "122246", "writerRankWeekly": "1068959", "writerThumb": "11", "writerVisitNum": "2566", "blog_read_count": "2429", "blog_time": "已于 2022-05-20 01:39:30 修改", "blog_title": "Yolov5学习全过程：训练+运行+c#部署（无理论全实操）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>Yolov5学习全过程：训练+运行+c#部署（无理论全实操）</h3>\n<ul><li><a href=\"#1Yolov5__2\">1.Yolov5 理论介绍</a></li><li><a href=\"#2Yolov5_6\">2.Yolov5下载地址</a></li><li><a href=\"#3Yolov5_13\">3.Yolov5使用方法</a></li><li><a href=\"#4_16\">4.制作训练样本</a></li><li><ul><li><a href=\"#41_labelImg__19\">4.1 labelImg 下载</a></li><li><a href=\"#42_labelImg__23\">4.2 labelImg 注意事项</a></li><li><a href=\"#43_labelImg__27\">4.3 labelImg 使用</a></li></ul>\n</li><li><a href=\"#5Cyolo_40\">5.C#调用yolo的可用方法</a></li><li><a href=\"#6C_onnx_78\">6.C# 部署onnx分类模型（我的学习全过程）</a></li><li><ul><li><a href=\"#61__onnx__82\">6.1 导出 onnx 模型</a></li><li><a href=\"#62_yolov5netmaster_88\">6.2 yolov5-net-master使用</a></li><li><ul><li><a href=\"#621yolov5_50_89\">6.2.1使用yolov5 5.0导出模型</a></li><li><a href=\"#622yolov5_61_108\">6.2.2使用yolov5 6.1导出模型</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"1Yolov5__2\"></a>1.Yolov5 理论介绍</h1>\n<p>      使用一种算法前最好还是先了解它的来龙去脉，这里介绍一篇文章给大家<a href=\"https://blog.csdn.net/qq_40716944/article/details/114822515?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165296000116781483774519%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165296000116781483774519&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-6-114822515-null-null.142%5Ev10%5Epc_search_result_control_group,157%5Ev4%5Econtrol&amp;utm_term=yolo&amp;spm=1018.2226.3001.4187\">YOLO系列详解</a></p>\n<h1><a id=\"2Yolov5_6\"></a>2.Yolov5下载地址</h1>\n<p>     我在做项目的时候主要用了两个版本的：Yolov5 5.0 和 Yolov5 6.1，至于为什么要用两种后续会说明（主要是有的问题Yolov5 5.0解决不了改用 Yolov5 6.1）。像图片中更换Tag就可以看到不同的版本啦。<br/>      yolov5下载地址：<a href=\"https://github.com/ultralytics/yolov5\">下载地址</a><br/> <img alt=\"不同\" src=\"..\\..\\static\\image\\307a1b83076a49cbbaa87a69d9684835.png\"/></p>\n<h1><a id=\"3Yolov5_13\"></a>3.Yolov5使用方法</h1>\n<p>     刚开始的时候什么都不会，python基础也不扎实，只能上哔哩哔哩看看有什么好用的资料。分享一个非常好的学习视频<a href=\"https://www.bilibili.com/video/BV17F411B7Lh?p=7&amp;spm_id_from=333.880.my_history.page.click\">yolo实操视频</a>，我就是跟着视频学的。内容包含了如何安装环境、如何打标签、如何训练、如何修改参数等等；而且在评论区留下邮箱，up的爬虫自动发送真的不要太方便！</p>\n<h1><a id=\"4_16\"></a>4.制作训练样本</h1>\n<p>       网上也有很多LabelImg的资料，不过我觉得挺杂的，下面就直接分享怎么做的就好，方便大家学习。</p>\n<h2><a id=\"41_labelImg__19\"></a>4.1 labelImg 下载</h2>\n<p>       制作样本我是用的是labelImg,它的选框都是矩形不可调整的，我们课程项目是制作芯片样本，正方形的，所以非常适用。听同学说labelIme也可以适用，而且还能框选一些不规则的图形（还没尝试过）。<br/> 这里分享我的网盘给大家：</p>\n<h2><a id=\"42_labelImg__23\"></a>4.2 labelImg 注意事项</h2>\n<p>       1、我给大家的的 labelImg 是Win 10 exe版本（<a href=\"https://pan.baidu.com/s/1uThRMN_1tK1pAyQHmCk36Q\">labelImg网盘</a>：提取码abaa），真的非常方便，网上有的资料是github代码，还要配置环境才能运行。<br/>        2、labelImg的exe文件路径一定要没有中文，不然会报错！报错图忘记留下来了，反正更换个路径，创建快捷方式放在桌面就好了！</p>\n<h2><a id=\"43_labelImg__27\"></a>4.3 labelImg 使用</h2>\n<p>（1）基本操作<br/> 打开之后进行以下操作：<br/> ①打开存放大量样本图片的文件<br/> ②修改文件保存的路径<br/> <img alt=\"使用介绍\" src=\"..\\..\\static\\image\\f6772ab32a524f52883f03f0250a041d.png\"/><br/>        多熟悉上面的快捷键，框选起来才够快。</p>\n<p>（2）一些其他操作<br/> 　　由于我制作的样本只有一个标签‘chip’，为了以防软件总是弹出让我输入标签名字的窗口，操作②③步之后他就会自动默认所有标签都是‘chip’<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\820f98c56fd74dc783dc912712a8545e.png\"/></p>\n<h1><a id=\"5Cyolo_40\"></a>5.C#调用yolo的可用方法</h1>\n<p>我们的任务是使用C#语言调用yolo，网上有好几种方法：</p>\n<p>（1）导出onnx模型,c# 部署onnx分类模型。这分享一个github的代码：<a href=\"https://github.com/mentalstack/yolov5-net\">yolo-net-master</a>。我一直都是在研究这一部分的，下面会详细讲讲。</p>\n<p>（2）opencv中调用，c++转c#。网上有一篇教怎么使用opencv调用yolo onnx 模型.<a href=\"https://blog.csdn.net/qq_35135771/article/details/116592203\">openCV调用YOLOv5 ONNX模型</a>。我们后来也用这种方法，不过需要比较扎实的语言基础，通晓两种语言的转换。这一部分是我同学搞定的，我搞不赢，所以就不放别人的成果啦。感兴趣的可以试一下</p>\n<p>（3）c#中调用python脚本。试过了，非常慢。调用前必须打开pycharm，并且保证python文件是可运行、编译无错的。调用时间大概在20s左右，不符合要求。调用代码如下：</p>\n<pre><code class=\"prism language-csharp\"> <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RunPythonScript</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sArgName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> args <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">params</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> teps<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Process</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//string path = AppDomain.CurrentDomain.SetupInformation.ApplicationBase + sArgName;// 获得python文件的绝对路径（将文件放在c#的debug文件夹中可以这样操作）</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path <span class=\"token operator\">=</span> <span class=\"token string\">@\"F:\\输入自己的路径\\detect.py\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"H:\\\\python_codes\\\\0331test.py\";</span>\n            p<span class=\"token punctuation\">.</span>StartInfo<span class=\"token punctuation\">.</span>FileName <span class=\"token operator\">=</span> <span class=\"token string\">@\"F:\\输入自己的路径\\python.exe\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//没有配环境变量的话，可以像我这样写python.exe的绝对路径。如果配了，直接写\"python.exe\"即可</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sArguments <span class=\"token operator\">=</span> path<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">ArrayList</span> arrayList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//arrayList.Add(\"com4\");</span>\n            <span class=\"token comment\">//arrayList.Add(57600);</span>\n            <span class=\"token comment\">//arrayList.Add(\"password\");</span>\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> param <span class=\"token keyword\">in</span> arrayList<span class=\"token punctuation\">)</span><span class=\"token comment\">//添加参数</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                sArguments <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> sigstr<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            p<span class=\"token punctuation\">.</span>StartInfo<span class=\"token punctuation\">.</span>Arguments <span class=\"token operator\">=</span> sArguments<span class=\"token punctuation\">;</span><span class=\"token comment\">//python命令的参数</span>\n            p<span class=\"token punctuation\">.</span>StartInfo<span class=\"token punctuation\">.</span>UseShellExecute <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            p<span class=\"token punctuation\">.</span>StartInfo<span class=\"token punctuation\">.</span>RedirectStandardOutput <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            p<span class=\"token punctuation\">.</span>StartInfo<span class=\"token punctuation\">.</span>RedirectStandardInput <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            p<span class=\"token punctuation\">.</span>StartInfo<span class=\"token punctuation\">.</span>RedirectStandardError <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            p<span class=\"token punctuation\">.</span>StartInfo<span class=\"token punctuation\">.</span>CreateNoWindow <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            p<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//启动进程</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行完毕！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//查看是否执行了</span>\n   \n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"6C_onnx_78\"></a>6.C# 部署onnx分类模型（我的学习全过程）</h1>\n<p>       网上其实有很多参考资料，具体理论我不讲了，仅分享我的实现过程，里面有我踩过的坑，也有成功实现的过程，大家选着看就行。</p>\n<h2><a id=\"61__onnx__82\"></a>6.1 导出 onnx 模型</h2>\n<p>       打开<strong>yolov5 5.0</strong>中的 export文件，修改以下代码，选择自己训练出来的模型路径（导出onnx前要提前配置环境，可能要下载很多东西，这部分大家就自己查资料吧~），然后运行就能导出一个onnx模型。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0b36f3fb3b614cf3a9269097136da57d.png\"/><br/>        导出后的模型大概长这样的，是带有切片的。我是下载Netron软件查看的，大家也可以直接到Netron网页查看<a href=\"https://netron.app/\">Netron网页版本</a>。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\041ef66aa34b4dd087c5ab7fb2252e8b.png\"/></p>\n<h2><a id=\"62_yolov5netmaster_88\"></a>6.2 yolov5-net-master使用</h2>\n<h3><a id=\"621yolov5_50_89\"></a>6.2.1使用yolov5 5.0导出模型</h3>\n<p>       这个c#文件本身是能运行的，运行结果：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6649a8f5b53745a39264f0f6fb20138c.jpeg\"/><br/> 　　于是，我刚开始非常单纯的直接把他的测试图片路径和onnx文件路径改了就直接用了，所以非常顺利地报错了（报错为超出索引）。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a29ae22ed6a14dd08c5fd46ca5a9cbed.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7dca337196484879a807766006b8c949.png\"/><br/> 　　所以，我就读一下代码，改一下主要参数。只要大概学一下yolo框架，改起来就挺简单，就那几个参数。打开其一，使用5.0的改P5，使用6.0+的改P6。由于我刚开始时使用的是yolov5 5.0，所以我下面示范怎么改P5Models</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d4223507cea04e718754de1eb6547304.png\"/><br/> 　　主要改的参数就这两个，其他都是默认参数，如果在python文件里面修改过其他参数的话这里就要一一对应的。 　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\68aecf089ffb47e2be79cbd339c0102b.png\"/><br/> 　　改好之后我满怀期待，这次一定能跑了吧！于是——好的，继续报错，超出索引。好家伙，给我整不会了。后面改了好久，都是这个错误，真的要哭了。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f9e1c511dc0b4b1690fc77b6072fc3a6.png\"/><br/> 　　后来看了一篇教程（<a href=\"https://blog.csdn.net/qq_35135771/article/details/116592203\">onnx调用相关问题</a>），不能成功调用的原因在于Pytorch2ONNX不支持对slice对象赋值，所以我就按照教程，修改了yolo中的部分文件，再次导出yolo onnx 模型，导出的模型如下图：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bd4fd419b9b74e97b36bdce8c822f9b4.png\"/><br/> 　　于是！我再次满心期待调用！依旧超出索引…晕了，这下真没辙了。这项工作也滞后了一段时间，觉得此路不通，所以我们组的其他成员就开始另谋出路，把c++代码硬转成c#来用（前面提到过的，也有放链接，我的小伙伴太强了）。<br/> 　　后来，听其他组的同学汇报，他们也弄yolov5-net-master这个代码，做出来了，所以我就请教他们。和他们交流的过程中发现，他们改的参数不也和我一样吗？也没什么特别啊。所以我就开始找不同。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d869e76e33eb465d96196b17885e43ef.png\"/></p>\n<h3><a id=\"622yolov5_61_108\"></a>6.2.2使用yolov5 6.1导出模型</h3>\n<p>上面报了那么多次错，和同学讨论之后，我就怀疑是不是yolov5 5.0这个版本导出来的模型有问题而不能用在yolov5-net-master。于是我就吭哧吭哧下载yolov5 6.1重新训练。过程步骤都是差不多的，会5.0肯定也能搞定6.1.<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\64e6d6c64a114e379c405ac1c29d0400.png\"/><br/> 　　按照常规思路，肯定要像第一次一样，去掉onnx模型中的切片（这些上面都是有讲的）。于是去掉切片后它又又又又报错了！可怕的超出索引，又是他！<br/> 　　　<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fa9d25dd0e944935a0199c3b0e72e0bc.png\"/><br/> 　　后面无意中发现，不切片就能调用！！！！！！（就是不要修改common和yolo代码了，直接用export导出onnx就行！）说的非常轻描淡写，实际探索了好久…至于为什么我也不太清楚，不过现在能用真的是谢天谢地！<br/> 不过这里要提醒一点，yolov5-net-master修改参数过程和上面讲过的是一样的，但是这次要改的是P6模型，不是P5，大家别搞错啦！<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c86015b218fd4664905832af783741e4.png\"/><br/> 　　最后还要再改多一个地方，就可以成功调用啦！图片识别效果不太好请见谅，还没有加大轮数训练。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\676b173856a94492a742eb18261dab3e.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fbe5ed24e21e41c78cfb1f68c9ea6381.jpeg\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 1, "csharp": 1, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-05-20 01:39:30", "summary": "学习全过程：训练运行部署无理论全实操理论介绍下载地址使用方法制作训练样本下载注意事项使用调用的可用方法部署分类模型我的学习全过程导出模型使用使用导出模型使用导出模型理论介绍使用一种算法前最好还是先了解"}