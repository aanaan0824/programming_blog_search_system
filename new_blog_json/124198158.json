{"blogid": "124198158", "writerAge": "码龄9年", "writerBlogNum": "116", "writerCollect": "177", "writerComment": "113", "writerFan": "25", "writerGrade": "4级", "writerIntegral": "1248", "writerName": "故里2130", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124198158.jpg", "writerRankTotal": "16110", "writerRankWeekly": "6433", "writerThumb": "37", "writerVisitNum": "76206", "blog_read_count": "3974", "blog_time": "已于 2022-08-30 09:29:09 修改", "blog_title": "c#中使用Task", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>可以先看前面的backgroudwork文章，再看Thread文章，本demo接着Thread的环境继续。</p>\n<p>本demo演示的是：</p>\n<p>Task有三种写法，喜欢那种就选择那种。</p>\n<p>并且在Task中进行停止，暂停，继续的功能。</p>\n<p>开始。</p>\n<p>1.界面业务说明，label1是加法计算，分别有3个功能，对label1停止加法，暂停加法，继续加法。100 是减法计算。</p>\n<p><img alt=\"\" height=\"447\" src=\"..\\..\\static\\image\\0f0e8ad957c74677bbb7324646196e07.png\" width=\"813\"/></p>\n<p>2.load中加载Task</p>\n<p><img alt=\"\" height=\"554\" src=\"..\\..\\static\\image\\4339f404d5e24a8d8e20028fcd38a249.png\" width=\"628\"/></p>\n<p></p>\n<p>第一种写法用new</p>\n<pre><code class=\"language-cs\">   var task1 = new Task(() =&gt;\n            {\n                A();\n\n            });\n            task1.Start();\n\n            var task2 = new Task(() =&gt;\n            {\n                B();\n\n            });\n            task2.Start();</code></pre>\n<p>第二种写法用StartNew</p>\n<pre><code class=\"language-cs\">Task t1 = Task.Factory.StartNew(() =&gt; {\n                A();\n            });\n            Task t2 = Task.Factory.StartNew(() =&gt; {\n                B();\n            });</code></pre>\n<p>第三种写法用Run</p>\n<pre><code class=\"language-cs\">Task t1 = Task.Run(() =&gt;\n            {\n                A();\n            });\n\n\n            Task t2 = Task.Run(() =&gt;\n            {\n                B();\n            });</code></pre>\n<p>也可以不写赋值变量，直接运行</p>\n<pre><code class=\"language-cs\">Task.Run(() =&gt;\n            {\n                A();\n            });\n\nTask.Run(() =&gt;\n            {\n                B();\n            });</code></pre>\n<p>3.下面是 A  B方法</p>\n<p><img alt=\"\" height=\"320\" src=\"..\\..\\static\\image\\aa4607cc556845da89fb61aa9e6ccb7d.png\" width=\"732\"/></p>\n<pre><code class=\"language-cs\"> public void A()\n        {\n            for (int i = 0; i &lt; 100; i++)\n            {\n                Thread.Sleep(1000);\n                Invoke(new Action(() =&gt; label1.Text = i.ToString()));\n            }\n\n        }\n\n        public void B()\n        {\n            for (int i = 0; i &lt; 100; i++)\n            {\n                Thread.Sleep(1000);\n                Invoke(new Action(() =&gt; label2.Text = (Convert.ToInt16(label2.Text) - 1).ToString()));\n            }\n\n        }</code></pre>\n<p> 以上代码复制进去，可以进行独立的运行。</p>\n<p>在Task中进行停止，暂停，继续的功能。停止后是不能继续的。</p>\n<p>停止按钮的代码</p>\n<p>先声明变量token和resetEvent</p>\n<p><img alt=\"\" height=\"154\" src=\"..\\..\\static\\image\\bbff8f99b91947ca8c3bd08ad3b5d97e.png\" width=\"595\"/></p>\n<pre><code class=\"language-cs\">        CancellationToken token;\n        ManualResetEvent resetEvent = new ManualResetEvent(true);</code></pre>\n<p>停止按钮的代码</p>\n<p><img alt=\"\" height=\"185\" src=\"..\\..\\static\\image\\15933fb62f4b40caae91b8f2763ca264.png\" width=\"545\"/></p>\n<pre><code class=\"language-cs\">var tokenSource = new CancellationTokenSource();\n            token = tokenSource.Token;\n            tokenSource.Cancel();</code></pre>\n<p> 暂停按钮的代码</p>\n<p><img alt=\"\" height=\"157\" src=\"..\\..\\static\\image\\2562a19c04e247af9925789b8655c3dd.png\" width=\"623\"/></p>\n<pre><code class=\"language-cs\"> resetEvent.Reset();</code></pre>\n<p>继续按钮的代码</p>\n<p><img alt=\"\" height=\"152\" src=\"..\\..\\static\\image\\3bc5eb24191448519ce85b3ba175690c.png\" width=\"515\"/></p>\n<pre><code class=\"language-cs\">resetEvent.Set();</code></pre>\n<p> A方法</p>\n<p><img alt=\"\" height=\"237\" src=\"..\\..\\static\\image\\58f99c4e95d440bbbd27e8eb9836f299.png\" width=\"636\"/></p>\n<pre><code class=\"language-cs\">    public void A()\n        {\n            for (int i = 0; i &lt; 100; i++)\n            {\n                if (token.IsCancellationRequested)//这个是加法停止的判断\n                {\n                    return;\n                }\n                resetEvent.WaitOne();//相当于把resetEvent和线程task1进行绑定\n                Thread.Sleep(1000);\n                Invoke(new Action(() =&gt; label1.Text = i.ToString()));\n            }\n\n        }</code></pre>\n<p><strong><span style=\"color:#fe2c24;\">token.IsCancellationRequested是加法停止的判断</span></strong></p>\n<p><strong><span style=\"color:#fe2c24;\">resetEvent.WaitOne();//相当于把resetEvent和线程task1进行“绑定”，从而可以控制线程task1</span></strong></p>\n<p>方法B不变</p>\n<pre><code> public void B()\n        {\n            for (int i = 0; i &lt; 100; i++)\n            {\n                Thread.Sleep(1000);\n                Invoke(new Action(() =&gt; label2.Text = (Convert.ToInt16(label2.Text) - 1).ToString()));\n            }\n\n        }</code></pre>\n<p></p>\n<p> load进行调用：</p>\n<p><img alt=\"\" height=\"278\" src=\"..\\..\\static\\image\\32962d86bda34ad1847e4eee031298ae.png\" width=\"521\"/></p>\n<pre><code class=\"language-cs\">var task1 = new Task(() =&gt;\n            {\n                A();\n\n            }, token);//这里不写token，好像也可以\n            task1.Start();\n\n            var task2 = new Task(() =&gt;\n            {\n                B();\n\n            });\n            task2.Start();</code></pre>\n<p> token这里可以不写，也可以写，不清楚是不是因为 resetEvent.WaitOne();进行“绑定”过了，知道的人可以说一下哦。</p>\n<p>效果：</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/18cb0877577b49948a0c8d6825c204f6.gif\"/></p>\n<p></p>\n<p>代码：</p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Linq;\nusing System.Runtime.InteropServices;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace WindowsFormsApp1\n{\n    public partial class Form1 : Form\n    {\n        CancellationToken token;\n        ManualResetEvent resetEvent = new ManualResetEvent(true);\n\n\n        public Form1()\n        {\n            InitializeComponent();\n        }\n\n        private void Form1_Load(object sender, EventArgs e)\n        {\n            var task1 = new Task(() =&gt;\n            {\n                A();\n\n            }, token);//这里不写token，好像也可以\n            task1.Start();\n\n            var task2 = new Task(() =&gt;\n            {\n                B();\n\n            });\n            task2.Start();\n        }\n\n        public void A()\n        {\n            for (int i = 0; i &lt; 100; i++)\n            {\n                if (token.IsCancellationRequested)//这个是加法停止的判断\n                {\n                    return;\n                }\n                resetEvent.WaitOne();//相当于把resetEvent和线程task1进行绑定\n                Thread.Sleep(1000);\n                Invoke(new Action(() =&gt; label1.Text = i.ToString()));\n            }\n\n        }\n\n        public void B()\n        {\n            for (int i = 0; i &lt; 100; i++)\n            {\n                Thread.Sleep(1000);\n                Invoke(new Action(() =&gt; label2.Text = (Convert.ToInt16(label2.Text) - 1).ToString()));\n            }\n\n        }\n\n        /// &lt;summary&gt;\n        /// 停止线程\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"sender\"&gt;&lt;/param&gt;\n        /// &lt;param name=\"e\"&gt;&lt;/param&gt;\n        private void button1_Click(object sender, EventArgs e)\n        {\n            var tokenSource = new CancellationTokenSource();\n            token = tokenSource.Token;\n            tokenSource.Cancel();\n        }\n        /// &lt;summary&gt;\n        /// 继续\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"sender\"&gt;&lt;/param&gt;\n        /// &lt;param name=\"e\"&gt;&lt;/param&gt;\n        private void button2_Click(object sender, EventArgs e)\n        {\n            resetEvent.Set();\n        }\n\n        /// &lt;summary&gt;\n        /// 暂停\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"sender\"&gt;&lt;/param&gt;\n        /// &lt;param name=\"e\"&gt;&lt;/param&gt;\n        private void button3_Click(object sender, EventArgs e)\n        {\n            resetEvent.Reset();\n        }\n    }\n}\n</code></pre>\n<p>拓展</p>\n<pre><code class=\"language-cs\">            //多个task\n            Task&lt;string&gt; t1 = File.ReadAllTextAsync(\"1.txt\");\n            Task&lt;string&gt; t2= File.ReadAllTextAsync(\"1.txt\");\n            Task&lt;string&gt; t3 = File.ReadAllTextAsync(\"1.txt\");\n            string[] t = await Task.WhenAll(t1, t2, t3);</code></pre>\n<p></p>\n</div>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-30 09:29:09", "summary": "可以先看前面的文章，再看文章，本接着的环境继续。本演示的是：有三种写法，喜欢那种就选择那种。并且在中进行停止，暂停，继续的功能。开始。界面业务说明，是加法计算，分别有个功能，对停止加法，暂停加法，继续"}