{"blogid": "125798782", "writerAge": "码龄7年", "writerBlogNum": "29", "writerCollect": "308", "writerComment": "160", "writerFan": "143", "writerGrade": "4级", "writerIntegral": "853", "writerName": "一只大笨猪", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125798782.jpg", "writerRankTotal": "27934", "writerRankWeekly": "60620", "writerThumb": "53", "writerVisitNum": "51914", "blog_read_count": "4293", "blog_time": "已于 2022-07-20 16:55:33 修改", "blog_title": "Python调用C++（实战篇）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>内容主要参照该博文：https://blog.csdn.net/qq_44843469/article/details/122116098<br/> 流程为：创建c++工程（含配置）——使用CMake编译——python导入调用<br/> 环境配置见《环境配置篇》：https://blog.csdn.net/qq_33339770/article/details/125797425</p>\n<h1><a id=\"C_3\"></a>一、创建C++工程</h1>\n<h2><a id=\"1_4\"></a><strong>1、创建工程</strong></h2>\n<p>打开VS2019-创建新项目-创建空项目-配置新项目<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0922998957ac49a8aa332264a6f7dfec.png\"/><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\eae8bd1acde6474e8e58f4f4491335a7.png\"/></p>\n<h2><a id=\"2_7\"></a>2、创建脚本（创建源文件）</h2>\n<p>右键“源文件”-添加-新建项<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9e2f76d652fc4dc9bc54ab7f6f57bed1.png\"/><br/> 这里.cpp文件的名字最好用英文：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\70877d9df11940929bf809c062c42d55.png\"/><br/> 源文件创建好了，就来写段代码吧，这里写个简单的“Hello,World”:<br/> <strong>注意：脚本中“PYBIND11_MODULE(hello, m)”里的“hello”将会是最终python用来引用的库包名（import hello）</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pybind11/pybind11.h&gt;</span></span>\n\n<span class=\"token keyword\">namespace</span> py <span class=\"token operator\">=</span> pybind11<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">PYBIND11_MODULE</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    m<span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"pybind11 example module\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Add bindings here</span>\n    m<span class=\"token punctuation\">.</span><span class=\"token function\">def</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prt\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>写完之后会发现include不对，这里就需要配置一下项目属性了。</p>\n<h2><a id=\"3_30\"></a>3、配置项目属性：</h2>\n<p>点击界面最上方“项目”-“属性”，进入属性配置页面，配置“Release”，平台为“x64”：<br/> !!!重要：如果引用目录配置好了但是还是一直报错，一定要检查这里是不是配置对了，点开“配置管理器”检查。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\38156a2bbd02442a85c82c4085f9fee7.png\"/><br/> <strong>（1）配置“附加包含目录”：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a65a22ef32254e67a124b4d49cf81617.png\"/><br/> 添加Anaconda的include目录（D:\\Anaconda3\\include）、pybind的include目录(D:\\Anaconda3\\Lib\\site-packages\\pybind11\\include):<br/> 如果安装了pytorch，torch的include目录中含有pybind11，包含此目录即可引入pybind11。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1f8a0db2dfda4ecaa2a964790d352609.png\"/><br/> 如果包含pybind11.h头文件还是不成功的话，可以改成下载好的pybind11源码的目录：“***pybind11\\include”，该地址是从https://github.com/pybind/pybind11下载的pybind11的源码，解压后的文件夹如下图：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\53e1b382de224a9eb13451f891f87436.png\"/><br/> 如果还是没有成功的话orz，只能采用最直接的手段了——将include文件中的pybind11文件夹复制到当前包含头文件的目录下就可以了。<br/> <strong>（2）配置链接器：</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ecf864e6c99740d8a7eeaf08a423b9fb.png\"/><br/> 这里需要添加“python37.lib”和“python3.lib”<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f9fff7c3e3054387a20c66b8ab2967bf.png\"/><br/> 到这里就配置完成了。<br/> 如果是用Anaconda3自带的python,应该是没有这两个lib文件的，可以下载python安装程序，安装Debug版本的python3.7，安装目录选到Anaconda3目录下，替换自带python，就会有这两个lib文件了。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4b5acac511e844de953e4be9aebbca61.png\"/></p>\n<h1><a id=\"CMake_50\"></a>二、使用CMake编译</h1>\n<h2><a id=\"1_51\"></a>1、创建文件</h2>\n<p>在C++工程-Project1的文件夹内：<br/> （1）创建“build”文件夹，此文件夹用于编译；<br/> （2）将从Github下载的pybind11的源码压缩包解压，解压后文件夹重命名为“pybind11”，并拷贝到Project11文件夹下；（add_subdirectory()需要用到）<br/> （3）创建“CMakeLists.txt”，内容如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token function\">cmake_minimum_required</span><span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">2.8</span><span class=\"token punctuation\">.</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">project</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">)</span>\n<span class=\"token function\">add_subdirectory</span><span class=\"token punctuation\">(</span>pybind11<span class=\"token punctuation\">)</span>\n<span class=\"token function\">pybind11_add_module</span><span class=\"token punctuation\">(</span>hello hello<span class=\"token punctuation\">.</span>cpp<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>完成之后的工程目录如下图：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d70931ab376e44f6821f3f876e6480a7.png\"/></p>\n<h2><a id=\"2CMake_65\"></a>2、使用CMake编译</h2>\n<p>打开cmake-gui，两种方法打开都行：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b68115ac636c4092b3046d25f4c50114.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b389449c450f438db6aac582c5c2f166.png\"/><br/> 打开后选择源码文件夹和build文件夹：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7cdb6e1c22d344f6818b73d9339802d4.png\"/><br/> 完成后点击“configure”，出现“Configuring done”再点击“Generate”,出现“Generating done”就OK了。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fcc705a46b4f424bb830859db9599778.png\"/><br/> 完成之后，在“build”文件夹里面出现了一个新的C++工程，但是没有.cpp文件：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d669da07836844c7ade2bc8d7d58bf64.png\"/><br/> 在 VS中打开这个工程，也可以点击cmake-gui界面上的“Open Project”打开：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f25cc7950c054e2883b697fca408780e.png\"/><br/> 点击上方的“生成”-“生成hello”:<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fbccfc3816724cbd814e2b0d4e6d1809.png\"/><br/> 生成成功，这个.pyd就是成果了：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\42f23cd9371e4d648f1e59d706af3a39.png\"/></p>\n<h1><a id=\"Python_81\"></a>三、Python导入调用</h1>\n<p>生成好的.pyd文件还不能直接被python导入，需要放在python能够找到的路径下，即python库包统一存放的位置“**/Lib/site-packages”。<br/> 这里用的Anaconda自带的python，所以直接拷贝放在D:\\Anaconda3\\Lib\\site-packages目录里面了。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d10bee790e3040fc8fb5b2069272c580.png\"/><br/> 放好之后就可以打开python放心调用了：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\810a49a813c340e1bfb20a0f2431fc53.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 1, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-07-20 16:55:33", "summary": "内容主要参照该博文：流程为：创建工程含配置使用编译导入调用环境配置见《环境配置篇》：一、创建工程、创建工程打开创建新项目创建空项目配置新项目在这里插入图片描述在这里插入图片描述、创建脚本创建源文件右键"}