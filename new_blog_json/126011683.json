{"blogid": "126011683", "writerAge": "码龄1年", "writerBlogNum": "27", "writerCollect": "636", "writerComment": "1155", "writerFan": "771", "writerGrade": "5级", "writerIntegral": "2550", "writerName": "保护小周ღ", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126011683.jpg", "writerRankTotal": "7679", "writerRankWeekly": "138", "writerThumb": "850", "writerVisitNum": "25465", "blog_read_count": "1191", "blog_time": "于 2022-08-29 10:56:31 发布", "blog_title": "C语言——函数栈帧的创建和销毁", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h2 id=\"%E2%80%8B%E7%BC%96%E8%BE%91\"> <img alt=\"\" height=\"101\" src=\"..\\..\\static\\image\\30adcf5df8b44dc8bc660f667cada2c4.jpeg\" width=\"101\"/></h2>\n<p>哈喽大家好，我是保护小周ღ，C语言，我们学到了这里，一定会有许多疑惑，我们的代码逻辑，定义的变量，自定义的函数等通过编译器，准确的来讲是集成开发环境（vs），预处理、编译、汇编、链接，在电脑上执行的过程中，计算机内部到底是怎么运行的，我们要搞清楚这些基础的过程，而不是说，因为这样做，所以有什么样的结果，过程是怎么样的，我们一概不了解，这样学编程是不对的，要刨根问底,增强自己的内功。保姆级讲述<strong>，</strong>包您一看就会，快来试试吧~</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\f89deef4fd5b408f8b4b1c0a50c0a9e9.png\"/></p>\n<p>举个例子：</p>\n<pre><code class=\"language-cpp\">int main()\n{\n    int a=0;\n    return 0;\n}\n</code></pre>\n<p>根据以上代码，我们可以读出一段信息，定义一个局部整型变量 a,并将他初始化为0，同时一个整型变量在内存中占4个字节。关于main()函数的返回值啊，简单说一下，如果返回值为0，则说明程序是正常结束，非0，就是不正常结束，且返回值为整型数据。</p>\n<p>那么博主在这里问大家两个问题：</p>\n<blockquote>\n<ol><li>局部整型变量a,到底是怎么创建的?</li><li>如果我们对变量a不进行初始化操作，局部变量a的值是多少？</li><li>main()函数也有返回值，那他是不是也是也被其他函数调用？</li></ol>\n</blockquote>\n<p>函数在调用的过程中栈帧的创建和销毁对于不同的编译器来说略有差异，但大体的逻辑是差不多的。取决于编译器。</p>\n<p><img alt=\"\" height=\"500\" src=\"..\\..\\static\\image\\46c738cd5f364adea4afea9651d19632.png\" width=\"1085\"/></p>\n<p></p>\n<hr/>\n<h1> 什么是函数栈帧？</h1>\n<p><img alt=\"\" height=\"173\" src=\"..\\..\\static\\image\\afbb5c16c93e49daa3af395a942c5fea.png\" width=\"877\"/></p>\n<p><strong><span style=\"background-color:#ffd7b9;\"> 每一次函数的调用，操作系统都会在内存的栈区上开辟一块空间，称为栈帧。</span></strong></p>\n<blockquote>\n<p>函数调用建立栈帧，栈帧中存储局部变量，参数等等。</p>\n<p></p>\n<p>栈区，堆区等是操作系统这门学科中对内存的划分，数据结构的“栈”，“堆”是存放、处理数据的一种结构，跟内存的栈区，堆区，没有啥关系，但是有一点，数据结构的“栈”和内存的栈区都是后进先出，先进后出的特性。</p>\n</blockquote>\n<p> 举个例子：</p>\n<p><img alt=\"\" height=\"907\" src=\"..\\..\\static\\image\\15bf85a4a5324deb97a567e310ad4e76.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"244\" src=\"..\\..\\static\\image\\726825276d9f4fdb86ab3f17940b690c.png\" width=\"1200\"/></p>\n<p> <img alt=\"\" height=\"925\" src=\"..\\..\\static\\image\\24a94b304f794036835982c2dbca5364.png\" width=\"1200\"/></p>\n<p>在main() 函数内部的Sum()函数则是被 main(）函数调用，<strong><span style=\"background-color:#fbd4d0;\">Sum()函数结束开辟的栈帧被操作系统回收</span></strong>，返回mian()函数的Sum()函数调用点，继续执行程序。</p>\n<p>程序顺序执行 ，执行main()函数，遇到 int a=1; <strong><span style=\"background-color:#fbd4d0;\">操作系统就会在内存的栈区上，为main()函数创建栈帧里，给局部变量 a 分配一块4个字节的空间</span></strong>。同理，局部变量在那个函数里创建的，那么就在那个函数的栈帧中为其分配空间。<span style=\"background-color:#fbd4d0;\">函数在调用的时候操作系统会为函数预划分一片空间，就是所谓的栈帧，由 esp,ebp 两个寄存器维护，如果空间不够了，操作系统会在这片空间的栈顶（esp）增加空间入栈，esp 可以动态的维护栈顶。</span></p>\n<blockquote>\n<p>知识点普及：</p>\n<p>局部变量是在内存的栈区上开辟的，栈区内存的使用习惯是先使用高地址的空间，后使用低地址的空间，栈区又是一种先进后出，后进先出的结构，且只能在一端操作。</p>\n</blockquote>\n<p>在为函数创建栈帧的时候，会有很多的寄存器去维护，这一片的可使用空间就会被初始化为随机值，这个根据不同的编译器有不同的初始化方式，这就是我们对局部变量定义的时候不进行初始化打印随机值的原因。</p>\n<p><img alt=\"\" height=\"411\" src=\"..\\..\\static\\image\\6e106de008da4be4adcdde62a0cc53bd.png\" width=\"1041\"/></p>\n<p> 由图可见，栈底寄存器 ebp-0E4h 就等于 edi 指向的空间。</p>\n<p><img alt=\"\" height=\"531\" src=\"..\\..\\static\\image\\44bfc8e1c2914a98a93aff08737e24c6.png\" width=\"1087\"/></p>\n<hr/>\n<p>不过现在的编译器很智能，如果没有初始化局部变量使用的话会报错，就很强，但是大家还是要养成良好的初始化的习惯。</p>\n<p><img alt=\"\" height=\"147\" src=\"..\\..\\static\\image\\1ce935fff3ac40279127fd6b629226fa.png\" width=\"800\"/></p>\n<hr/>\n<p><img alt=\"\" height=\"465\" src=\"..\\..\\static\\image\\4a0835486a684ce0a5d5adbc01b484b6.png\" width=\"1200\"/></p>\n<hr/>\n<h1>Sum() 函数的调用</h1>\n<h2><strong> 传参：</strong></h2>\n<p><strong>把变量a,b 的值分别存储在 ecx ,eax 寄存器，分别入栈。就相当于使用两块空间 又将a,b 存储了一次。这就是形参嘛。</strong></p>\n<p><img alt=\"\" height=\"373\" src=\"..\\..\\static\\image\\b12e625fab164548b33baa2cd4da1c05.png\" width=\"1200\"/></p>\n<p><strong><span style=\"background-color:#fbd4d0;\">形参是实参的拷贝！这段形参开辟的空间实际上还是在main() 函数的栈帧中。esp 栈顶指针动态维护。</span></strong></p>\n<p><img alt=\"\" height=\"420\" src=\"..\\..\\static\\image\\5ad321435a5e4057b5e78fcd13fdc768.png\" width=\"1200\"/></p>\n<hr/>\n<h2> <strong> esp ,edp 如何从main() 栈帧，来维护 Sum() 函数栈帧：</strong></h2>\n<p><img alt=\"\" height=\"942\" src=\"..\\..\\static\\image\\3c8bdbef2adc46c99924b8da29333363.png\" width=\"1200\"/></p>\n<p><strong> 区间实际上是<span style=\"color:#fe2c24;\">(ebx,ebp)</span></strong></p>\n<p> <img alt=\"\" height=\"818\" src=\"..\\..\\static\\image\\a115629491c0476bb5a5d44a12632552.png\" width=\"1200\"/></p>\n<p><img alt=\"\" height=\"767\" src=\"..\\..\\static\\image\\141a608894234efc9ae17ab22d1484f4.png\" width=\"1200\"/></p>\n<p></p>\n<p><img alt=\"\" height=\"814\" src=\"..\\..\\static\\image\\6e3326fdd63e4d7ea49e6c9eb722f726.png\" width=\"1200\"/></p>\n<p> <img alt=\"\" height=\"604\" src=\"..\\..\\static\\image\\04cd7d59d9974a73a18992532207f941.png\" width=\"1200\"/></p>\n<p><span style=\"color:#0d0016;\"><strong><span style=\"background-color:#fbd4d0;\"> return 会返回 call 指令的这个地址，可以继续执行程序。</span></strong></span></p>\n<p> </p>\n<hr/>\n<p><img alt=\"\" height=\"1200\" src=\"..\\..\\static\\image\\e44336b5eb364c0e893afc46d8c4253e.png\" width=\"1200\"/></p>\n<p> </p>\n<h1></h1>\n<hr/>\n<h1 id=\"C%2FC%2B%2B%20%E7%A8%8B%E5%BA%8F%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%9A%84%E5%87%A0%E4%B8%AA%E5%8C%BA%E5%9F%9F%EF%BC%9A\">C/C++ 程序内存分配的几个区域：</h1>\n<blockquote>\n<p>1.栈区（stack）:在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动释放。栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限，栈区主要存放运行函数而分配的局部变量，函数参数，返回数据，返回地址等。</p>\n<p>2.堆区（heap）：一般由程序员分配释放，若程序员不释放，程序结束时由OS回收。</p>\n<p>3.数据段（静态区）（static）存放全局变量，静态变量。程序结束后由系统释放。</p>\n<p>4.代码段：存放函数体（类成员函数和全局函数）的二进制代码</p>\n</blockquote>\n<hr/>\n<p>至此<strong>C语言函数栈帧的创建和销毁</strong>博主已经分享完了，相信大家对这个函数怎么建立的、销毁的，函数怎么传参，使用等有了一定的理解，大家可以自己使用汇编代码，感受一下。</p>\n<p><img alt=\"\" height=\"116\" src=\"..\\..\\static\\image\\40e36dfc27804c04afb4a9da45afda94.jpeg\" width=\"117\"/></p>\n<p>本期收录于博主的专栏——C语言，适用于编程初学者，感兴趣的朋友们可以订阅，查看其它“C语言基础知识”。<a href=\"https://blog.csdn.net/weixin_67603503/category_11757814.html?spm=1001.2014.3001.5482\" title=\"C语言_保护小周ღ的博客-CSDN博客\">C语言_保护小周ღ的博客-CSDN博客</a></p>\n<p>感谢每一个观看本篇文章的朋友，更多精彩敬请期待：保护小周ღ  <strong>*★,°*:.☆(￣▽￣)/$:*.°★* </strong><strong> </strong></p>\n<p>文章多处存在借鉴，如有侵权请联系修改删除！<img alt=\"\" height=\"65\" src=\"https://img-blog.csdnimg.cn/dd8b4788b2554df4bec4b8202395cad2.gif\" width=\"65\"/>​</p>\n<p></p>\n</div>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-29 10:56:31", "summary": "哈喽大家好，我是保护小周，语言，我们学到了这里，一定会有许多疑惑，我们的代码逻辑，定义的变量，自定义的函数等通过编译器，准确的来讲是集成开发环境，预处理、编译、汇编、链接，在电脑上执行的过程中，计算机"}