{"blogid": "124974907", "writerAge": "码龄4年", "writerBlogNum": "1382", "writerCollect": "4013", "writerComment": "272", "writerFan": "8387", "writerGrade": "7级", "writerIntegral": "15625", "writerName": "Archie_java", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124974907.jpg", "writerRankTotal": "714", "writerRankWeekly": "593", "writerThumb": "954", "writerVisitNum": "1201316", "blog_read_count": "3536", "blog_time": "于 2022-05-25 22:20:47 发布", "blog_title": "Mybatis-Plus之四种lambda方式LambdaQueryWrapper，QueryWrapper＜实体＞().lambda()，LambdaQueryChainWrapper＜实体＞", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"MybatisPluslambda_0\"></a>Mybatis-Plus之四种lambda方式</h1>\n<p>lambda四种表达形式</p>\n<h2><a id=\"_5\"></a>前言</h2>\n<p>使用了lambda表达式 可以通过方法引用的方式来使用实体字段名的操作，避免直接写数据库表字段名时的错写名字；</p>\n<h3><a id=\"LambdaQueryWrapper_10\"></a>一、LambdaQueryWrapper&lt;&gt;</h3>\n<pre><code class=\"prism language-java\"> <span class=\"token comment\">/**\n      * lambda 条件构造器\n      * 生成的sql语句 SELECT id,name,age,email,manager_id,create_time FROM user WHERE name LIKE ? AND age &lt; ?\n      */</span>\n     <span class=\"token annotation punctuation\">@Test</span>\n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">selectLambda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n         <span class=\"token comment\">//创建lambda 条件构造器 的三种方法</span>\n <span class=\"token comment\">//        LambdaQueryWrapper&lt;User&gt; lambda2 = new LambdaQueryWrapper&lt;&gt;();</span>\n <span class=\"token comment\">//        LambdaQueryWrapper&lt;User&gt; lambda = new QueryWrapper&lt;User&gt;().lambda();</span>\n         <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> lambda3 <span class=\"token operator\">=</span> <span class=\"token class-name\">Wrappers</span><span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token function\">lambdaQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         lambda3<span class=\"token punctuation\">.</span><span class=\"token function\">like</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"雨\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> users <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>lambda3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         users<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"QueryWrapperlambda_33\"></a>二、QueryWrapper&lt;实体&gt;().lambda()</h3>\n<pre><code class=\"prism language-java\"> <span class=\"token comment\">/**\n  * 名字为王姓并且（年龄小于40并且邮箱不为空）\n  * name like '王%' and (age &lt;40 or email in not null)\n  * 生成的sql语句 SELECT id,name,age,email,manager_id,create_time FROM user WHERE name LIKE ? AND age &lt; ?\n  */</span>\n <span class=\"token annotation punctuation\">@Test</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">selectLambda2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> lambda3 <span class=\"token operator\">=</span> <span class=\"token class-name\">Wrappers</span><span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token function\">lambdaQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     lambda3<span class=\"token punctuation\">.</span><span class=\"token function\">likeRight</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"王\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span>qw <span class=\"token operator\">-&gt;</span> qw<span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotNull</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getEmail</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n     <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> users <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>lambda3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     users<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"WrapperslambdaQueryWrapperslambdaQueryclass_55\"></a>三、Wrappers.&lt;实体&gt;lambdaQuery()，Wrappers.lambdaQuery(实体.class)</h3>\n<p><strong>Wrappers.&lt;实体&gt;lambdaQuery()</strong></p>\n<pre><code class=\"prism language-java\">  <span class=\"token comment\">/**\n   * 自定义sql 使用\n   * Dao层  代码：\n   *\n   * @Select(\"select * from ${ew.customSqlSegment}\")\n   * List&lt;User&gt; selectAll(@Param(Constants.WRAPPER)Wrapper&lt;User&gt; wrapper);\n   */</span>\n  <span class=\"token annotation punctuation\">@Test</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">selectLambda4my</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> lambda3 <span class=\"token operator\">=</span> <span class=\"token class-name\">Wrappers</span><span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token function\">lambdaQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      lambda3<span class=\"token punctuation\">.</span><span class=\"token function\">likeRight</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"王\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span>qw <span class=\"token operator\">-&gt;</span> qw<span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotNull</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getEmail</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n      <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> users <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span>lambda3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      users<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Wrappers.lambdaQuery(实体.class)</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\aed6b22339e7453b8a0c9d3aa1e6522b.png\"/></p>\n<h3><a id=\"LambdaQueryChainWrapperxxxxMapper_81\"></a>四、LambdaQueryChainWrapper&lt;实体&gt;(xxxxMapper)</h3>\n<pre><code class=\"prism language-java\"> <span class=\"token comment\">/**\n  * lambda 条件构造器第四种创建方式 MP 3.0.7 新增的方式\n  * 生成的sql语句 SELECT id,name,age,email,manager_id,create_time FROM user WHERE name LIKE ? AND age &gt;= ?\n  * 这个例子可以看出  代码更简洁了\n  * 生成的sql语句 SELECT id,name,age,email,manager_id,create_time FROM user WHERE name LIKE ? AND age &gt;= ?\n  */</span>\n <span class=\"token annotation punctuation\">@Test</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">selectLambda3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryChainWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>userMapper<span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">.</span><span class=\"token function\">like</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"雨\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n     users<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"QueryWrapperLambdaQueryWrapperLambdaQueryChainWrapper_102\"></a>QueryWrapper、LambdaQueryWrapper以及LambdaQueryChainWrapper用法</h1>\n<h3><a id=\"QueryWrapper_104\"></a>一、QueryWrapper</h3>\n<pre><code class=\"prism language-java\"> <span class=\"token punctuation\">.</span><span class=\"token function\">like</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"24252\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//email对应数据库中列名</span>\n</code></pre>\n<pre><code class=\"prism language-java\">  <span class=\"token comment\">/**\n       * 条件构造器 查询操作\n       */</span>\n      <span class=\"token annotation punctuation\">@Test</span>\n      <span class=\"token keyword\">void</span> <span class=\"token class-name\">TestQueryWrapperSelect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token comment\">//1、条件用法</span>\n          <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> userList <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">.</span><span class=\"token function\">like</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"24252\"</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">.</span><span class=\"token function\">between</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"zcx\"</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userList:\"</span> <span class=\"token operator\">+</span> userList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n          <span class=\"token comment\">//2、排序用法</span>\n          <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> users <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nick_name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xx\"</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">.</span><span class=\"token function\">orderByAsc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//升序</span>\n  <span class=\"token comment\">//                .orderByDesc(\"age\") //降序</span>\n                  <span class=\"token punctuation\">.</span><span class=\"token function\">last</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"limit 0,3\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//last用法：在sql末尾添加sql语句，有sql注入风险</span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users:\"</span><span class=\"token operator\">+</span>users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n      <span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"LambdaQueryWrapper_140\"></a>二、LambdaQueryWrapper</h3>\n<pre><code class=\"prism language-java\">  queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"liangd1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//可以通过Lambda获取数据库列名</span>\n</code></pre>\n<pre><code class=\"prism language-java\"> <span class=\"token annotation punctuation\">@Test</span>\n     <span class=\"token keyword\">void</span> <span class=\"token class-name\">TestLambdaQueryWrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n         <span class=\"token comment\">//1、查询单条</span>\n         <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"liangd1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token class-name\">User</span> selectOne <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectOne</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>selectOne<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n         <span class=\"token comment\">//2、查询list以及统计条数</span>\n         queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"zcx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> userList <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userList:\"</span> <span class=\"token operator\">+</span> userList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token class-name\">Integer</span> result <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectCount</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result:\"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"LambdaQueryChainWrapper_168\"></a>三、LambdaQueryChainWrapper</h3>\n<pre><code class=\"prism language-java\"> <span class=\"token comment\">//链式查询方式</span>\n <span class=\"token class-name\">User</span> one <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryChainWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>userMapper<span class=\"token punctuation\">)</span>\n                   <span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"liangd1\"</span><span class=\"token punctuation\">)</span>\n                   <span class=\"token punctuation\">.</span><span class=\"token function\">one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-java\">  <span class=\"token annotation punctuation\">@Test</span>\n      <span class=\"token keyword\">void</span> <span class=\"token class-name\">TestLambdaQueryChainWrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token comment\">//1、eq查询单条</span>\n          <span class=\"token class-name\">User</span> one <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryChainWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>userMapper<span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"liangd1\"</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">.</span><span class=\"token function\">one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UserOne:\"</span> <span class=\"token operator\">+</span> one<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n          <span class=\"token comment\">//2、查询list</span>\n          <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryChainWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>userMapper<span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"zcx\"</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UserList:\"</span> <span class=\"token operator\">+</span> users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n          <span class=\"token comment\">//3、模糊查询</span>\n          <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token class-name\">LikeList</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryChainWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>userMapper<span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">.</span><span class=\"token function\">like</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getEmail</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LikeUser:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">LikeList</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n</code></pre>\n<hr/>\n<h1><a id=\"QueryWrapperLambdaQueryWrapper_208\"></a>QueryWrapper及LambdaQueryWrapper</h1>\n<p><strong>实体类</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BannerItem</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> img<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> keyword<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> type<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> bannerId<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"QueryWrapper_230\"></a>QueryWrapper</h2>\n<p>最基础的使用方式是这样</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">// 查询条件构造器</span>\n<span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BannerItem</span><span class=\"token punctuation\">&gt;</span></span> wrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"banner_id\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 查询操作</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BannerItem</span><span class=\"token punctuation\">&gt;</span></span> bannerItems <span class=\"token operator\">=</span> bannerItemMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>然后我们可以引入lambda，避免我们在代码中写类似的于<code>banner_id</code>的硬编码</p>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BannerItem</span><span class=\"token punctuation\">&gt;</span></span> wrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwrapper<span class=\"token punctuation\">.</span><span class=\"token function\">lambda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BannerItem</span><span class=\"token operator\">::</span><span class=\"token function\">getBannerId</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BannerItem</span><span class=\"token punctuation\">&gt;</span></span> bannerItems <span class=\"token operator\">=</span> bannerItemMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"LambdaQueryWrapper_250\"></a>LambdaQueryWrapper</h2>\n<p>为了简化lambda的使用，我们可以改写成LambdaQueryWrapper构造器，语法如下：</p>\n<blockquote>\n<p>两种写法<br/> new QueryWrapper().lambda();<br/> Wrappers.lambdaQuery();</p>\n</blockquote>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BannerItem</span><span class=\"token punctuation\">&gt;</span></span> wrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BannerItem</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">lambda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// LambdaQueryWrapper&lt;BannerItem&gt; wrapper = Wrappers.lambdaQuery(); // 两种写法</span>\n\nwrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BannerItem</span><span class=\"token operator\">::</span><span class=\"token function\">getBannerId</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BannerItem</span><span class=\"token punctuation\">&gt;</span></span> bannerItems <span class=\"token operator\">=</span> bannerItemMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>我们可以再次将<code>QueryWrapper.lambda()</code>简化，变成这个样子</p>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">BannerItem</span> bannerItem <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryChainWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>bannerItemMapper<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BannerItem</span><span class=\"token operator\">::</span><span class=\"token function\">getId</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<h2><a id=\"_274\"></a>链式查询</h2>\n<p>MyBatis-Plus还提供了一种链式查询的方式，和上面的代码效果一样。<br/> 但是这种写法偏向于炫技，可读性没有上面的代码强，大家可以根据需要自行选择方式。</p>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BannerItem</span><span class=\"token punctuation\">&gt;</span></span> bannerItems <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryChainWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>bannerItemMapper<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BannerItem</span><span class=\"token operator\">::</span><span class=\"token function\">getBannerId</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>如果只想查询一条记录，例如通过id查询某条记录的详情，使用<code>.one()</code>即可，例如</p>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">BannerItem</span> bannerItem <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryChainWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>bannerItemMapper<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BannerItem</span><span class=\"token operator\">::</span><span class=\"token function\">getId</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<h1><a id=\"lambdaQueryWrapper_295\"></a>lambdaQueryWrapper中常用方法</h1>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\aa1f239ef18c8df1bf426030a8487a54.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-05-25 22:20:47", "summary": "之四种方式四种表达形式前言使用了表达式可以通过方法引用的方式来使用实体字段名的操作，避免直接写数据库表字段名时的错写名字；一、条件构造器生成的语句创建条件构造器的三种方法雨二、实体名字为王姓并且年龄小"}