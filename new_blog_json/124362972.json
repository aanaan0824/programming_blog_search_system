{"blogid": "124362972", "writerAge": "码龄9年", "writerBlogNum": "6", "writerCollect": "19", "writerComment": "2", "writerFan": "5", "writerGrade": "1级", "writerIntegral": "64", "writerName": "Allen_PandaDD", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124362972.jpg", "writerRankTotal": "110429", "writerRankWeekly": "287324", "writerThumb": "3", "writerVisitNum": "7654", "blog_read_count": "821", "blog_time": "于 2022-04-23 14:30:25 发布", "blog_title": "VS2022 使用MX Component读取三菱PLC32位数据测试", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>这里写目录标题</h3>\n<ul><li><a href=\"#_2\">一、测试前准备</a></li><li><ul><li><ul><li><a href=\"#1VS_3\">1、VS软件</a></li><li><a href=\"#2_5\">2、三菱软件</a></li><li><a href=\"#3MX_Component_7\">3、MX Component</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_12\">二、测试过程</a></li><li><ul><li><ul><li><a href=\"#1MX_Component_15\">1、MX Component示例项目路径</a></li><li><a href=\"#2_24\">2、创建测试项目</a></li><li><a href=\"#3_33\">3、代码编写</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_55\">三、测试结果</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_2\"></a>一、测试前准备</h1>\n<h3><a id=\"1VS_3\"></a>1、VS软件</h3>\n<p>我这边下载的是最新的2022的版本，如果你是其他的版本测试过程也是差不多的，这里使用C#进行测试。</p>\n<h3><a id=\"2_5\"></a>2、三菱软件</h3>\n<p>三菱 GX WORKS2 编程软件，版本不限</p>\n<h3><a id=\"3MX_Component_7\"></a>3、MX Component</h3>\n<p>具体配置可以看之前的设置过程</p>\n<p><a href=\"https://blog.csdn.net/u012861256/article/details/124293494?spm=1001.2014.3001.5501\">Proface触摸屏与三菱PLC软件仿真（或连接实体PLC）</a></p>\n<h1><a id=\"_12\"></a>二、测试过程</h1>\n<p>MX Component下载以后在它的示例项目中是有读取16位数据的C#程序的，但是读取32位的数据并没有提及，网上找了一些方法也感觉比较繁琐，这里有一个比较简便的方法可以试一下。</p>\n<h3><a id=\"1MX_Component_15\"></a>1、MX Component示例项目路径</h3>\n<p>右击你的Communication Setup Utility，找到文件所在的路径，然后返回<br/> ……\\MELSOFT\\ACT\\Samples<br/> 一般都是在这个Samples文件夹里面，你可以找到自己擅长的编程语言示例，这里我打开的是Vcs.NET里的示例项目</p>\n<p>打开后直接F5就可以运行测试<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ec5762dc677346a1a0c4966a3ac57452.png\"/><br/> 具体测试过程我就不赘述了，网上有很多。</p>\n<h3><a id=\"2_24\"></a>2、创建测试项目</h3>\n<p>我们这里使用VS2022新建一个windows窗体应用<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\85db5bdf967d432f829af56fcd1558a1.png\"/><br/> 界面上放一个textBox用于显示数据<br/> 再放一个button用于触发读取数据事件</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d3200fdedbd8472dacc518aa9fdf0e82.png\"/><br/> 引用一下act文件<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\affcb0e36b814200894ae30d5b475b7c.png\"/></p>\n<h3><a id=\"3_33\"></a>3、代码编写</h3>\n<p>打开连接什么的可以参考示例项目，或者网上有好多案例<br/> 关键的按钮触发事件代码如下，通过点击按钮，读取D410的数据：</p>\n<pre><code class=\"prism language-csharp\"> <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">button1_Click</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">short</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> MX <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">short</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> iReturnCode <span class=\"token operator\">=</span> axActUtlType<span class=\"token punctuation\">.</span><span class=\"token function\">ReadDeviceBlock2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D410\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> MX<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> L <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span>BitConverter<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span>MX<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> H <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span>BitConverter<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span>MX<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">byte</span></span><span class=\"token punctuation\">[</span>H<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">+</span> L<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">BlockCopy</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">BlockCopy</span><span class=\"token punctuation\">(</span>H<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">,</span> H<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//float FF = BitConverter.ToSingle(f, 0);      //转换成浮点数</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> FF <span class=\"token operator\">=</span> BitConverter<span class=\"token punctuation\">.</span><span class=\"token function\">ToInt32</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">//转换成32位Int型</span>\n            textBox1<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span>  FF<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>可以最终显示浮点数，或者是32位Int型<br/> 主要就是通过把高低字拼接到一起，最终整合转换类型显示就可以了<br/> 如果需要多次调用可以写成一个类，这样就很方便了，这里只是测试一下</p>\n<h1><a id=\"_55\"></a>三、测试结果</h1>\n<p>读取32位整数<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\566059286b0248a68290355fe0d20363.png\"/><br/> 读取浮点数<br/> 由于PLC里面的有效位数是7位，所以PLC里显示的最后以为可能不一样，只要把我们的VS上的有效数位设置成一样的就完全一样了<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\17aee6514d72485db93f6141507e1509.png\"/></p>\n<p>如果有更好的方法，欢迎一起分享讨论<br/> Ending~</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-04-23 14:30:25", "summary": "这里写目录标题一、测试前准备、软件、三菱软件、二、测试过程、示例项目路径、创建测试项目、代码编写三、测试结果一、测试前准备、软件我这边下载的是最新的的版本，如果你是其他的版本测试过程也是差不多的，这里"}