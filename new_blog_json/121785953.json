{"blogid": "121785953", "writerAge": "码龄2年", "writerBlogNum": "9", "writerCollect": "120", "writerComment": "190", "writerFan": "29", "writerGrade": "2级", "writerIntegral": "297", "writerName": "小小凡sir", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_121785953.jpg", "writerRankTotal": "249449", "writerRankWeekly": "218597", "writerThumb": "38", "writerVisitNum": "29808", "blog_read_count": "16707", "blog_time": "于 2021-12-08 11:25:40 发布", "blog_title": "如何用DETR（detection transformer）训练自己的数据集", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"DETRdetection_transformer_0\"></a>DETR(detection transformer)简介</h1>\n<p>DETR是Facebook AI的研究者提出的Transformer的视觉版本，是CNN和transformer的融合，实现了端到端的预测，主要用于目标检测和全景分割。<br/> DETR的Github地址：<a href=\"https://github.com/facebookresearch/detr\">https://github.com/facebookresearch/detr</a><br/> DETR的论文地址：<a href=\"https://arxiv.org/pdf/2005.12872.pdf\">https://arxiv.org/pdf/2005.12872.pdf</a></p>\n<h1><a id=\"DETR_4\"></a>DETR训练自己数据集</h1>\n<h2><a id=\"_5\"></a>数据准备</h2>\n<p>DETR需要coco数据集才可以进行训练，需要将数据标签和图片保存为如下格式：<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\831674791c7d4859a88afad8d40bdb19.png\"/><br/> 其中，annotations是如下json文件，<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3f98e7c330d54f1ca411184edb5bf917.png\"/><br/> test、train和val2017存储的只有图片。<br/> 那么要如何得到coco数据集格式的文件呢，接下来我提供两种方法：</p>\n<h3><a id=\"coco_11\"></a>coco数据集获取</h3>\n<p>1、labelme打好json文件后转换为coco格式数据集<br/> 2、roboflow标注后直接生成coco格式数据集（需要连外网，需要的联系我可以免费给你提供好用的外网扩展程序）。roboflow网址：<a href=\"https://app.roboflow.com/\">https://app.roboflow.com/</a><br/> 然后介绍如何用labelme转换数据集，首先在cmd python环境或者在pycharm终端输入pip install labelme，下载好后输入labelme进入打标签页面，打好标签后生成json文件，再运行如下脚本：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> argparse\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">import</span> skimage<span class=\"token punctuation\">.</span>io <span class=\"token keyword\">as</span> io\n<span class=\"token keyword\">from</span> labelme <span class=\"token keyword\">import</span> utils\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> glob\n<span class=\"token keyword\">import</span> PIL<span class=\"token punctuation\">.</span>Image\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyEncoder</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span>JSONEncoder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">default</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>floating<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>ndarray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">.</span>tolist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>MyEncoder<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">labelme2coco</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> labelme_json<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> save_json_path<span class=\"token operator\">=</span><span class=\"token string\">'./tran.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>labelme_json <span class=\"token operator\">=</span> labelme_json\n        self<span class=\"token punctuation\">.</span>save_json_path <span class=\"token operator\">=</span> save_json_path\n        self<span class=\"token punctuation\">.</span>images <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>categories <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>annotations <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\"># self.data_coco = {}</span>\n        self<span class=\"token punctuation\">.</span>label <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>annID <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        self<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        self<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n        self<span class=\"token punctuation\">.</span>save_json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">data_transfer</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> num<span class=\"token punctuation\">,</span> json_file <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>labelme_json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>json_file<span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> fp<span class=\"token punctuation\">:</span>\n                data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 加载json文件</span>\n                self<span class=\"token punctuation\">.</span>images<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">for</span> shapes <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'shapes'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    label <span class=\"token operator\">=</span> shapes<span class=\"token punctuation\">[</span><span class=\"token string\">'label'</span><span class=\"token punctuation\">]</span>\n                    <span class=\"token keyword\">if</span> label <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">:</span>\n                        self<span class=\"token punctuation\">.</span>categories<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>categorie<span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        self<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">)</span>\n                    points <span class=\"token operator\">=</span> shapes<span class=\"token punctuation\">[</span><span class=\"token string\">'points'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 这里的point是用rectangle标注得到的，只有两个点，需要转成四个点</span>\n                    points<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>points<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> points<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    points<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>points<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> points<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    self<span class=\"token punctuation\">.</span>annotations<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    self<span class=\"token punctuation\">.</span>annID <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">image</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        image <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n        img <span class=\"token operator\">=</span> utils<span class=\"token punctuation\">.</span>img_b64_to_arr<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'imageData'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 解析原图片数据</span>\n        <span class=\"token comment\"># img=io.imread(data['imagePath']) # 通过图片路径打开图片</span>\n        <span class=\"token comment\"># img = cv2.imread(data['imagePath'], 0)</span>\n        height<span class=\"token punctuation\">,</span> width <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n        img <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        image<span class=\"token punctuation\">[</span><span class=\"token string\">'height'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> height\n        image<span class=\"token punctuation\">[</span><span class=\"token string\">'width'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> width\n        image<span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> num <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        image<span class=\"token punctuation\">[</span><span class=\"token string\">'file_name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'imagePath'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n        self<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> height\n        self<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width\n        <span class=\"token keyword\">return</span> image\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">categorie</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        categorie <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n        categorie<span class=\"token punctuation\">[</span><span class=\"token string\">'supercategory'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Cancer'</span>\n        categorie<span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>  <span class=\"token comment\"># 0 默认为背景</span>\n        categorie<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> label\n        <span class=\"token keyword\">return</span> categorie\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">annotation</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> points<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        annotation <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n        annotation<span class=\"token punctuation\">[</span><span class=\"token string\">'segmentation'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>asarray<span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>flatten<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        annotation<span class=\"token punctuation\">[</span><span class=\"token string\">'iscrowd'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        annotation<span class=\"token punctuation\">[</span><span class=\"token string\">'image_id'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> num <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        <span class=\"token comment\"># annotation['bbox'] = str(self.getbbox(points)) # 使用list保存json文件时报错（不知道为什么）</span>\n        <span class=\"token comment\"># list(map(int,a[1:-1].split(','))) a=annotation['bbox'] 使用该方式转成list</span>\n        annotation<span class=\"token punctuation\">[</span><span class=\"token string\">'bbox'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>getbbox<span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        annotation<span class=\"token punctuation\">[</span><span class=\"token string\">'area'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> annotation<span class=\"token punctuation\">[</span><span class=\"token string\">'bbox'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> annotation<span class=\"token punctuation\">[</span><span class=\"token string\">'bbox'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\"># annotation['category_id'] = self.getcatid(label)</span>\n        annotation<span class=\"token punctuation\">[</span><span class=\"token string\">'category_id'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>getcatid<span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 注意，源代码默认为1</span>\n        annotation<span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>annID\n        <span class=\"token keyword\">return</span> annotation\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getcatid</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> categorie <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>categories<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> label <span class=\"token operator\">==</span> categorie<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> categorie<span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getbbox</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> points<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># img = np.zeros([self.height,self.width],np.uint8)</span>\n        <span class=\"token comment\"># cv2.polylines(img, [np.asarray(points)], True, 1, lineType=cv2.LINE_AA)  # 画边界线</span>\n        <span class=\"token comment\"># cv2.fillPoly(img, [np.asarray(points)], 1)  # 画多边形 内部像素值为1</span>\n        polygons <span class=\"token operator\">=</span> points\n        mask <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>polygons_to_mask<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> polygons<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>mask2box<span class=\"token punctuation\">(</span>mask<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">mask2box</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> mask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">'''从mask反算出其边框\n        mask：[h,w]  0、1组成的图片\n        1对应对象，只需计算1对应的行列号（左上角行列号，右下角行列号，就可以算出其边框）\n        '''</span>\n        <span class=\"token comment\"># np.where(mask==1)</span>\n        index <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>argwhere<span class=\"token punctuation\">(</span>mask <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        rows <span class=\"token operator\">=</span> index<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        clos <span class=\"token operator\">=</span> index<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\"># 解析左上角行列号</span>\n        left_top_r <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>rows<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># y</span>\n        left_top_c <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>clos<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># x</span>\n\n        <span class=\"token comment\"># 解析右下角行列号</span>\n        right_bottom_r <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>rows<span class=\"token punctuation\">)</span>\n        right_bottom_c <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>clos<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># return [(left_top_r,left_top_c),(right_bottom_r,right_bottom_c)]</span>\n        <span class=\"token comment\"># return [(left_top_c, left_top_r), (right_bottom_c, right_bottom_r)]</span>\n        <span class=\"token comment\"># return [left_top_c, left_top_r, right_bottom_c, right_bottom_r]  # [x1,y1,x2,y2]</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>left_top_c<span class=\"token punctuation\">,</span> left_top_r<span class=\"token punctuation\">,</span> right_bottom_c <span class=\"token operator\">-</span> left_top_c<span class=\"token punctuation\">,</span>\n                right_bottom_r <span class=\"token operator\">-</span> left_top_r<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># [x1,y1,w,h] 对应COCO的bbox格式</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">polygons_to_mask</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> img_shape<span class=\"token punctuation\">,</span> polygons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        mask <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>img_shape<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>uint8<span class=\"token punctuation\">)</span>\n        mask <span class=\"token operator\">=</span> PIL<span class=\"token punctuation\">.</span>Image<span class=\"token punctuation\">.</span>fromarray<span class=\"token punctuation\">(</span>mask<span class=\"token punctuation\">)</span>\n        xy <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">tuple</span><span class=\"token punctuation\">,</span> polygons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        PIL<span class=\"token punctuation\">.</span>ImageDraw<span class=\"token punctuation\">.</span>Draw<span class=\"token punctuation\">(</span>mask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>polygon<span class=\"token punctuation\">(</span>xy<span class=\"token operator\">=</span>xy<span class=\"token punctuation\">,</span> outline<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> fill<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        mask <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>mask<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> mask\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">data2coco</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        data_coco <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n        data_coco<span class=\"token punctuation\">[</span><span class=\"token string\">'images'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>images\n        data_coco<span class=\"token punctuation\">[</span><span class=\"token string\">'categories'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>categories\n        data_coco<span class=\"token punctuation\">[</span><span class=\"token string\">'annotations'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>annotations\n        <span class=\"token keyword\">return</span> data_coco\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">save_json</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data_transfer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>data_coco <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>data2coco<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 保存json文件</span>\n        json<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>data_coco<span class=\"token punctuation\">,</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>save_json_path<span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> indent<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> cls<span class=\"token operator\">=</span>MyEncoder<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># indent=4 更加美观显示</span>\n\nlabelme_json <span class=\"token operator\">=</span> glob<span class=\"token punctuation\">.</span>glob<span class=\"token punctuation\">(</span><span class=\"token string\">r'./*.json'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># labelme_json=['./1.json']</span>\nlabelme2coco<span class=\"token punctuation\">(</span>labelme_json<span class=\"token punctuation\">,</span> <span class=\"token string\">'.\\\\instances_val2017.json'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>这个脚本是我之前在别人CSDN找的，比较好用。</p>\n<h2><a id=\"_167\"></a>预训练文件下载</h2>\n<p>有了数据集后，为了加快学习速度，可以去官网下载预训练模型，官网提供的有resnet_50和resnet_101两个预训练版本，下载后得到pth文件。下载如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\960ea3461f114175a8fca50ac68a3d68.jpg\"/></p>\n<h2><a id=\"detrmain_170\"></a>修改detr-main文件的一些配置</h2>\n<p>因为detr是针对的是91（数字可能错了，不是记得了）个目标进行预测，所以我们在进行预测的时候，需要把目标预测数目改为自己的需要检测目标的数目。首先需要修改上一步下载好的pth文件，运行如下脚本：</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> torch\nmodel1  <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">'detr-r101-2c7b67e5.pth'</span><span class=\"token punctuation\">)</span>\n\nnum_class <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token comment\">#我只需要检测一个物体，所以是2（检测个数+background）</span>\nmodel1<span class=\"token punctuation\">[</span><span class=\"token string\">\"model\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"class_embed.weight\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>resize_<span class=\"token punctuation\">(</span>num_class<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span>\nmodel1<span class=\"token punctuation\">[</span><span class=\"token string\">\"model\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"class_embed.bias\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>resize_<span class=\"token punctuation\">(</span>num_class<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ntorch<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>model1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"detr-r50_test_%d.pth\"</span><span class=\"token operator\">%</span>num_class<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>然后还需要修改detr.py文件夹下的num_classes，<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ba486295d3af4d5984153ee10eed62f7.png\"/></p>\n<h2><a id=\"_184\"></a>训练模型</h2>\n<p>训练模型这块，可以直接执行命令行，或者在main.py里面修改好参数后运行，<br/> 官方提供的命令行如下：</p>\n<pre><code class=\"prism language-python\">python <span class=\"token operator\">-</span>m torch<span class=\"token punctuation\">.</span>distributed<span class=\"token punctuation\">.</span>launch <span class=\"token operator\">-</span><span class=\"token operator\">-</span>nproc_per_node<span class=\"token operator\">=</span><span class=\"token number\">8</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span>use_env main<span class=\"token punctuation\">.</span>py <span class=\"token operator\">-</span><span class=\"token operator\">-</span>coco_path <span class=\"token operator\">/</span>path<span class=\"token operator\">/</span>to<span class=\"token operator\">/</span>coco \n</code></pre>\n<h1><a id=\"_191\"></a>结束语</h1>\n<p>我觉得在训练那块还是改main.py文件比较好，需要改的地方挺多，我觉得需要修改的主要有–epoch(轮次)、–num_workers（主要看你电脑性能怎么样，好点可以调高些）、–output_dir（输出的模型权重，pth文件）、–dataset_file（数据存放位置）、–coco_path（coco数据集的位置）和–resume（预训练权重文件位置）。<br/> 还一点就是官方只提供了训练脚本，但是没预测脚本，其实预测脚本也挺简单的，就是加载模型，加载权重参数，然后传入图片预处理什么的，代码挺多的，放上来内容太多了，我写了两个预测脚本，需要的可以联系我，或者不会运行的可以问我，其实也挺简单的，多玩几次就会了~~<br/> 最后展示下效果吧，预测的还是挺准的<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4a6e2020d7aa441085e847ffd7301e3a.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-12-08 11:25:40", "summary": "简介是的研究者提出的的视觉版本，是和的融合，实现了端到端的预测，主要用于目标检测和全景分割。的地址：的论文地址：训练自己数据集数据准备需要数据集才可以进行训练，需要将数据标签和图片保存为如下格式：在这"}