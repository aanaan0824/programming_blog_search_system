{"blogid": "126742690", "writerAge": "码龄2年", "writerBlogNum": "162", "writerCollect": "1825", "writerComment": "2283", "writerFan": "6481", "writerGrade": "6级", "writerIntegral": "6556", "writerName": "海底烧烤店ai", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126742690.jpg", "writerRankTotal": "2402", "writerRankWeekly": "15", "writerThumb": "1752", "writerVisitNum": "411936", "blog_read_count": "530", "blog_time": "于 2022-09-07 12:08:36 发布", "blog_title": "Node.js | 使用 zlib 内置模块进行 gzip 压缩", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>🖥️ NodeJS专栏：<a href=\"https://blog.csdn.net/m0_51969330/category_11969342.html?spm=1001.2014.3001.5482\">Node.js从入门到精通</a><br/> 🖥️ 博主的前端之路：<a href=\"https://ailjx.blog.csdn.net/article/details/126636942\">前端之行，任重道远（来自大三学长的万字自述）</a><br/> 🧧 加入社区领红包：<a href=\"https://bbs.csdn.net/forums/ailjx?typeId=120909\">海底烧烤店ai（从前端到全栈）</a><br/> 🧑‍💼个人简介：即将大三的学生，一个不甘平庸的平凡人🍬<br/> 👉 你的一键三连是我更新的最大动力❤️！<br/> <font color=\"#32ca99\" face=\"黑体\" size=\"4\"> 🏆分享博主自用<strong>牛客网</strong>🏆：<a href=\"https://www.nowcoder.com/link/pc_csdncpt_hdskdai_js\">一个非常全面的面试刷题求职网站，真的超级好用（点击跳转）🍬</a></font></p>\n</blockquote>\n<hr/>\n<p></p>\n<div class=\"toc\">\n<h3>📋 文章目录</h3>\n<ul><li><a href=\"#__14\">📝 前言</a></li><li><a href=\"#_gzip_23\">🎉 什么是gzip？</a></li><li><a href=\"#_gzipzlib_42\">🎉 gzip和zlib什么关系？</a></li><li><a href=\"#__50\">🎉 普通数据传输</a></li><li><a href=\"#_gzip_84\">🎉 gzip压缩数据传输</a></li><li><a href=\"#__131\">📙 结语</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"__14\"></a>📝 前言</h1>\n<blockquote>\n<p>最近博主一直在<strong>牛客网</strong>刷题巩固基础知识，快来和我一起冲关升级吧！<a href=\"https://www.nowcoder.com/link/pc_csdncpt_hdskdai_js\">点击进入牛客网</a></p>\n</blockquote>\n<p>任何服务端开发都少不了性能优化的操作，在前后端使用HTTP接口（API）进行数据传递时，如果传递数据量太大，势必会造成请求超时或失败。</p>\n<p><code>nodejs</code>为我们提供了一个<code>zlib</code>内置模块，我们可以使用它其中的<code>gzip</code>方法来对传递的数据进行压缩，从而提高数据传递效率。</p>\n<h1><a id=\"_gzip_23\"></a>🎉 什么是gzip？</h1>\n<p><code>HTTP</code>协议上的<code>GZIP</code>编码是一种用来<strong>改进WEB应用程序性能</strong>的技术</p>\n<p>这一般是指服务器中安装的一个功能，当有人来访问这个服务器中的网站时，服务器中的这个功能就将网页内容<strong>压缩</strong>后传输到来访的电脑浏览器中显示出来，一般对纯文本内容可压缩到原大小的40%</p>\n<p>这样<strong>传输就快了</strong>，效果就是你点击网址后数据会很快的显示出来，提高用户体验，当然这也会增加<strong>服务器的负载.</strong>，一般服务器中都安装有这个功能模块</p>\n<p>减少文件大小有两个明显的好处：</p>\n<ul><li>一是可以减少存储空间</li><li>二是通过网络传输文件时，可以减少传输的时间</li></ul>\n<blockquote>\n<p>我们在进行本地数据传递时，如果一个文件太大我们经常会使用到<strong>文件压缩技术（zip或rar等）</strong>，将大文件压缩成小文件进行传递，接收者再进行解压即可，因为压缩的速度一般是比较快的，这样就能减少文件传输过程中的时间，从而提高效率</p>\n</blockquote>\n<p>简单来说，<code>gzip</code>其实就是一种用于服务端（后端）和客户端（前端）之间压缩数据的一种方法</p>\n<h1><a id=\"_gzipzlib_42\"></a>🎉 gzip和zlib什么关系？</h1>\n<p><code>zlib</code>是<code>DEFLATE</code>算法的<strong>实现库</strong>，它的API同时支持<code>gzip</code>文件格式以及一个简化的<strong>数据流</strong>格式</p>\n<blockquote>\n<p><code>DEFLATE</code>是同时使用了<code>LZ77算法</code>与<code>哈夫曼编码（Huffman Coding）</code>的一个<strong>无损数据压缩算法</strong></p>\n</blockquote>\n<p><code>gzip</code>在<code>HTTP</code>压缩，一种在万维网中加速传输<code>HTML</code>和其他内容的技术</p>\n<p>所以可以说<code>zlib</code>是在<code>gzip</code>的基础上增加了一些内容，这也是为什么<code>node</code>中<code>gzip</code>方法是在<code>zlib</code>内置模块中的原因</p>\n<h1><a id=\"__50\"></a>🎉 普通数据传输</h1>\n<p>我们使用<code>node</code>搭建一个服务器，来演示我们传递数据的普通方式：</p>\n<p><code>server.js</code></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token string-property property\">\"Content-Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text/html;charset=utf-8\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> readStream <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./index.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// res本质就是一个可写流</span>\n    readStream<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务器启动啦！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这是一个简单的<code>node</code>服务器，浏览器访问它后，它会向我们返回一个<code>index.html</code>，这个<code>index.html</code>里的内容大家随便写，写的越多越好</p>\n<p>这里也使用到了上一节我们讲过的内置模块<code>fs</code>中的<code>stream</code>流，<strong>需要注意的是</strong>，在<code>node</code>服务器中的<code>res</code>参数本质是一个可写流，所以我们才能直接将<code>res</code>用于<code>pipe</code>管道中</p>\n<blockquote>\n<p>如果你对<code>node</code>搭建服务器或者内置模块<code>fs</code>的<code>stream</code>流不太了解的话，可以看我先前的文章：<br/> <a href=\"http://t.csdn.cn/FFVne\">Node.js | 搭建后端服务器（含内置模块 http | url | querystring 的使用）</a><br/> <a href=\"https://ailjx.blog.csdn.net/article/details/126698029\">Node.js | 操作本地文件 — 玩转 fs 内置模块</a></p>\n</blockquote>\n<p>运行<code>server.js</code>文件，使用浏览器访问<code>node</code>服务器：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0dd86d4a956f4462bfaed87f50712d6c.png\"/></p>\n<p>可以看到我这里传递的数据大小是<strong>97.6kb</strong>（这取决于你的<code>index.html</code>的内容）</p>\n<h1><a id=\"_gzip_84\"></a>🎉 gzip压缩数据传输</h1>\n<p>我们使用<code>gzip</code>来改造一下上面普通数据传输的例子：</p>\n<p><code>server.js</code></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 导入内置模块zlib</span>\n<span class=\"token keyword\">const</span> zlib <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zlib\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取gzip方法</span>\n<span class=\"token keyword\">const</span> gzip <span class=\"token operator\">=</span> zlib<span class=\"token punctuation\">.</span><span class=\"token function\">createGzip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token string-property property\">\"Content-Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text/html;charset=utf-8\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">\"Content-Encoding\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gzip\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 告诉浏览器我们是通过gzip压缩的</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> readStream <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./index.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// res本质就是一个可写流</span>\n    <span class=\"token comment\">// 在数据返回之前使用gzip压缩数据</span>\n    readStream<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>gzip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务器启动啦！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>先引入<code>zlib</code>内置模块，再使用<code>zlib.createGzip()</code>获取<code>gzip</code>方法，这个<code>gzip</code>方法实际也是一种<strong>数据流</strong>的格式，与<code>node</code>服务器中的<code>res</code>参数一样，这也是<code>pipe</code>管道中能直接使用<code>gzip</code>的原因</p>\n<p>我们在将数据传递给<code>res</code>参数（客户端）之前，通过<code>pipe</code>管道的链式调用，将<code>gzip</code>加上</p>\n<p>这样<code>readStream</code>（服务端）的数据会先经过<code>gzip</code>压缩，之后才会传递给<code>res</code>参数（客户端）</p>\n<p><strong>❗️ 需要注意的是：</strong></p>\n<p><code>http</code>数据压缩的方式不止有<code>gzip</code>，还有其它的压缩方式，只不过<code>gzip</code>是最常见最常用的一种方式</p>\n<p>所以我们服务端使用<code>gzip</code>将数据压缩后传递给浏览器时，浏览器并不知道我们是使用哪种方式压缩的数据，于是就不知道该以哪种方式进行解压，所以我们需要手动明确的告诉浏览器我们使用的是<code>gzip</code>，服务端加上以下响应头即可：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token string-property property\">\"Content-Encoding\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gzip\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 告诉浏览器我们是通过gzip压缩的</span>\n</code></pre>\n<p>这样浏览器就能够正确解压我们传递的数据了，运行上面的<code>server.js</code>，打开浏览器访问我们的<code>node</code>服务器：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\faf4c447ada04cad92e41911ea1369da.png\"/></p>\n<p>可以看到使用<code>gzip</code>压缩后我这里传递的数据大小只有<strong>27.5kb</strong>（这取决于你的<code>index.html</code>的内容），这与之前的<strong>97.6kb</strong>相比，数据传输速率大幅提升，这就是我们使用<code>gzip</code>的意义！</p>\n<h1><a id=\"__131\"></a>📙 结语</h1>\n<p>这篇文章讲了<code>node</code>的一个非常实用的小模块<code>zlib</code>，<code>zlib</code>大家可能之前没听过，但<code>gzip</code>应该都曾听过，<code>gzip</code>是请求数据传输性能优化的一种很好的方式，看完本篇文章，相信你会对<code>gzip</code>有了更深的理解</p>\n<p>关于<code>node.js</code>的更多内容请移步我的<code>node.js</code>专栏：<a href=\"https://blog.csdn.net/m0_51969330/category_11969342.html\">Node.js从入门到精通</a></p>\n<p>如果本篇文章对你有所帮助，还请客官一件四连！❤️</p>\n<blockquote>\n<p><a href=\"https://www.nowcoder.com/link/pc_csdncpt_hdskdai_js\"> <strong>基础不牢，地动山摇！</strong> 快来和博主一起来牛客网刷题<strong>巩固基础知识</strong>吧！</a></p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-09-07 12:08:36", "summary": "专栏：从入门到精通博主的前端之路：前端之行，任重道远来自大三学长的万字自述加入社区领红包：海底烧烤店从前端到全栈个人简介：即将大三的学生，一个不甘平庸的平凡人你的一键三连是我更新的最大动力！黑体分享博"}