{"blogid": "126633180", "writerAge": "码龄7年", "writerBlogNum": "539", "writerCollect": "23090", "writerComment": "1232", "writerFan": "12185", "writerGrade": "8级", "writerIntegral": "37156", "writerName": "【ql君】qlexcel", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126633180.jpg", "writerRankTotal": "127", "writerRankWeekly": "4085", "writerThumb": "4652", "writerVisitNum": "4946685", "blog_read_count": "118", "blog_time": "于 2022-09-01 00:10:48 发布", "blog_title": "SEGGER调试利器RTT，替代串口，高速数据上传", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"_0\"></a>移植</h1>\n<p>下载RTT代码，地址: <a href=\"https://www.armbbs.cn/forum.php?mod=viewthread&amp;tid=86014\">link</a><br/> 在工程目录里面新建一个 SEEGER 文件夹，将 RTT 组件内容全都添加进去，添加的内容<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\074574aac7c54f5cadd2b8c5b7eccfd4.png\"/><br/> 把RTT 文件夹中的2个c文件添加到 MDK 工程<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dd882dd4e00a4dbcac59c14750365e2b.png\"/><br/> 添加RTT文件夹的路径到工程<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6d258483a5ac4662a43759361cecf048.png\"/><br/> 移植完成！</p>\n<h1><a id=\"_10\"></a>替代串口使用</h1>\n<h2><a id=\"JLINK_RTT_Viewer_11\"></a>JLINK RTT Viewer</h2>\n<p>给板子供电，然后连接好SWD或JTAG。<br/> 打开电脑端软件 JLINK RTT Viewer（安装jlink驱动后就有，在开始菜单中找）<br/> 做如下配置<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0ff07100e0554e74b8742cf486a820d8.png\"/><br/> 从log窗口可以看到已经连接上，没有成功连接会报错。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\086056653e164509a9bdbfe469831619.png\"/><br/> 和普通串口助手一样，有数据接收窗口和发送窗口<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c420e3ab7011404691e5bf8f7ee93bad.png\"/><br/> 接收窗口可以调出多个，程序中发送数据的时候可以选择发送到哪个窗口。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a5714422cb6f4650bd139da531f13aef.png\"/></p>\n<h2><a id=\"RTT_22\"></a>RTT缓冲区</h2>\n<p>  RTT不像串口发送数据的时候，必须等着一个字符一个字符传输，而是直接直接写入数据缓冲，接收数据的时候也是写入数据缓冲，然后程序去取。因此RTT需要上行和下行的数据缓冲区。<br/>   RTT 上行缓冲区可以相对较小。 所需的最小缓冲区大小可以近似为一毫秒内写入的数据量或者一次写入操作中写入的最大值。 如果数据发送频率较低，那么缓冲区应该有足够的空间存储一次写入的数据。 如果频繁地发送数据，则缓冲区大小应满足在一毫秒内写入最大数据量。</p>\n<h2><a id=\"RTT_25\"></a>RTT相关函数</h2>\n<h3><a id=\"_26\"></a>设置上行缓冲区</h3>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">SEGGER_RTT_ConfigUpBuffer</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> BufferIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> sName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> pBuffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> BufferSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> Flags<span class=\"token punctuation\">)</span>\n</code></pre>\n<pre><code>BufferIndex：缓冲区的编号，可以设置多个缓冲区，当发送数据的时候可以选择放入哪个缓冲区\nsName：缓冲区的名字\npBuffer：缓冲区的地址\nBufferSize：缓冲区的大小\nFlags：当缓冲区满的时候，对新放入的数据的处理方式\n</code></pre>\n<p>当第 1 个参数 BufferIndex = 0 的时候， RTT 组件已经为其配置了默认的缓冲和默认的大小（大小配置是在 SEGGER_RTT_Conf.h 文件里面通过如下宏定义进行：<br/> #define BUFFER_SIZE_UP (1024)<br/> 所以使用缓冲区 0 的时候， 配置比较简单（第 3 个参数缓冲区地址设置为0， 第 4 个参数缓冲区大小设置为 0 即可） ：</p>\n<pre><code class=\"prism language-c\"><span class=\"token function\">SEGGER_RTT_ConfigUpBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"RTTUP\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> SEGGER_RTT_MODE_NO_BLOCK_SKIP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>还有两个与此函数相关的宏定义：<br/> ⚫ #define SEGGER_RTT_MAX_NUM_UP_BUFFERS (3)<br/> 用于配置最大的上行缓冲数， 也就是参数 BufferIndex 的范围。<br/> ⚫ #define SEGGER_RTT_MODE_DEFAULT SEGGER_RTT_MODE_NO_BLOCK_SKIP<br/> 用于配置 RTT 的默认工作模式， 也就是此函数的最后一个参数， 这里是表示如果上行缓冲区不够<br/> 存储要发送的数据， 将放弃写入缓冲区。 除了这种配置还有如下两种：<br/> SEGGER_RTT_MODE_NO_BLOCK_TRIM<br/> 表示如果上行缓冲区不够存储这些数据， 能写多少写多少， 无法写入的将丢弃。<br/> ◼ SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL<br/> 表示如果上行缓冲区满，将被阻塞， 等待有空间可用。</p>\n<h3><a id=\"_53\"></a>设置下行缓冲区</h3>\n<pre><code class=\"prism language-c\"> <span class=\"token keyword\">int</span> <span class=\"token function\">SEGGER_RTT_ConfigDownBuffer</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> BufferIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> sName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pBuffer<span class=\"token punctuation\">,</span>\n<span class=\"token keyword\">int</span> BufferSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> Flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>同上面的函数一样， 仅仅是方向不同，这里是从电脑端向开发板发送数据。</p>\n<h3><a id=\"_59\"></a>其他操作函数</h3>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">SEGGER_RTT_HasKey</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>此函数用于判断接收缓冲区中是否有数据。返回 1 表示至少 1 个数据，返回 0 表示没有。</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">SEGGER_RTT_GetKey</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>从接收缓冲区 buffer 0 中接收一个字符。</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SEGGER_RTT_SetTerminal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> TerminalId<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>用于设置在 RTT Viewer 的那个终端窗口显示。</p>\n<pre><code class=\"prism language-c\"> <span class=\"token keyword\">unsigned</span> <span class=\"token function\">SEGGER_RTT_WriteSting</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> BufferIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>用于显示字符串，此函数比较简单。</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">SEGGER_RTT_printf</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> BufferIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> sFormat<span class=\"token punctuation\">,</span> …<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>这个函数跟 C 库中 printf 一样，区别是不支持浮点数。</p>\n<h2><a id=\"_83\"></a>使用方式</h2>\n<p>首先，在程序初始化的时候设置好上行、下行缓冲区</p>\n<pre><code class=\"prism language-c\">\t<span class=\"token comment\">/* 配置通道0，上行配置*/</span>\n\t<span class=\"token function\">SEGGER_RTT_ConfigUpBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"RTTUP\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> SEGGER_RTT_MODE_NO_BLOCK_SKIP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">/* 配置通道0，下行配置*/</span>\t\n\t<span class=\"token function\">SEGGER_RTT_ConfigDownBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"RTTDOWN\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> SEGGER_RTT_MODE_NO_BLOCK_SKIP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>然后在需要发送数据的地方，像串口一样调用SEGGER_RTT_printf 函数发送即可。</p>\n<pre><code class=\"prism language-c\"><span class=\"token function\">SEGGER_RTT_SetTerminal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">SEGGER_RTT_printf</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">SEGGER_RTT_printf</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"SEGGER_RTT_GetKey = %c\\r\\n\"</span><span class=\"token punctuation\">,</span> GetKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">SEGGER_RTT_SetTerminal</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">SEGGER_RTT_WriteString</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t   RTT_CTRL_RESET<span class=\"token string\">\"Red: \"</span> \\\n\t\t\t\t\t   RTT_CTRL_TEXT_RED<span class=\"token string\">\"This text is red. \"</span> \\\n\t\t\t\t\t   RTT_CTRL_TEXT_BLACK<span class=\"token string\">\"\"</span> \\\n\t\t\t\t\t   RTT_CTRL_BG_BRIGHT_GREEN<span class=\"token string\">\"This background is green. \"</span> \\\n\t\t\t\t\t   RTT_CTRL_RESET<span class=\"token string\">\"Normal text again.\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>SEGGER_RTT_WriteString函数可以指定颜色和背景色，上面的效果：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\02fbd48e94644cbd971e2adeea88adad.png\"/><br/> 支持</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_RESET</span> <span class=\"token string\">\"[0m\"</span> <span class=\"token comment\">// Reset to default colors</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_CLEAR</span> <span class=\"token string\">\"[2J\"</span> <span class=\"token comment\">// Clear screen, reposition cursor to top left</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_TEXT_BLACK</span> <span class=\"token string\">\"[2;30m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_TEXT_RED</span> <span class=\"token string\">\"[2;31m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_TEXT_GREEN</span> <span class=\"token string\">\"[2;32m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_TEXT_YELLOW</span> <span class=\"token string\">\"[2;33m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_TEXT_BLUE</span> <span class=\"token string\">\"[2;34m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_TEXT_MAGENTA</span> <span class=\"token string\">\"[2;35m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_TEXT_CYAN</span> <span class=\"token string\">\"[2;36m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_TEXT_WHITE</span> <span class=\"token string\">\"[2;37m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_TEXT_BRIGHT_BLACK</span> <span class=\"token string\">\"[1;30m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_TEXT_BRIGHT_RED</span> <span class=\"token string\">\"[1;31m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_TEXT_BRIGHT_GREEN</span> <span class=\"token string\">\"[1;32m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_TEXT_BRIGHT_YELLOW</span> <span class=\"token string\">\"[1;33m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_TEXT_BRIGHT_BLUE</span> <span class=\"token string\">\"[1;34m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_TEXT_BRIGHT_MAGENTA</span> <span class=\"token string\">\"[1;35m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_TEXT_BRIGHT_CYAN</span> <span class=\"token string\">\"[1;36m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_TEXT_BRIGHT_WHITE</span> <span class=\"token string\">\"[1;37m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_BG_BLACK</span> <span class=\"token string\">\"[24;40m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_BG_RED</span> <span class=\"token string\">\"[24;41m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_BG_GREEN</span> <span class=\"token string\">\"[24;42m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_BG_YELLOW</span> <span class=\"token string\">\"[24;43m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_BG_BLUE</span> <span class=\"token string\">\"[24;44m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_BG_MAGENTA</span> <span class=\"token string\">\"[24;45m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_BG_CYAN</span> <span class=\"token string\">\"[24;46m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_BG_WHITE</span> <span class=\"token string\">\"[24;47m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_BG_BRIGHT_BLACK</span> <span class=\"token string\">\"[4;40m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_BG_BRIGHT_RED</span> <span class=\"token string\">\"[4;41m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_BG_BRIGHT_GREEN</span> <span class=\"token string\">\"[4;42m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_BG_BRIGHT_YELLOW</span> <span class=\"token string\">\"[4;43m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_BG_BRIGHT_BLUE</span> <span class=\"token string\">\"[4;44m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_BG_BRIGHT_MAGENTA</span> <span class=\"token string\">\"[4;45m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_BG_BRIGHT_CYAN</span> <span class=\"token string\">\"[4;46m\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTT_CTRL_BG_BRIGHT_WHITE</span> <span class=\"token string\">\"[4;47m\"</span></span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fb2c690413b24553b14212f3544c240e.png\"/></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token class-name\">uint8_t</span> ucKeyCode<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* 按键代码 */</span>\n\t<span class=\"token class-name\">uint32_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> GetKey<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/*\n\t\t由于ST固件库的启动文件已经执行了CPU系统时钟的初始化，所以不必再次重复配置系统时钟。\n\t\t启动文件 startup_stm32f4xx.s 会调用 system_stm32f4xx.c 中的 void SystemInit(void)。\n\t\tSystemInit()函数配置了CPU主时钟频率、内部Flash访问速度和可选的外部SRAM FSMC初始化。\n\n\t\t安富莱STM32-V5开发板主晶振是25MHz, 内部PLL倍频到168MHz。如果需要更改主频，可以修改下面的文件：\n\t\t\\User\\bsp_stm32f4xx\\system_stm32f4xx.c\n\t\t文件开头的几个宏是PLL倍频参数，修改这些宏就可以修改主频，无需更改硬件。\n\t*/</span>\n\n\t<span class=\"token function\">bsp_Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* 硬件初始化 */</span>\n\n\t<span class=\"token function\">bsp_StartAutoTimer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* 启动1个100ms的自动重装的定时器 */</span>\n\t\n\t<span class=\"token comment\">/* 配置通道0，上行配置*/</span>\n\t<span class=\"token function\">SEGGER_RTT_ConfigUpBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"RTTUP\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> SEGGER_RTT_MODE_NO_BLOCK_SKIP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">/* 配置通道0，下行配置*/</span>\t\n\t<span class=\"token function\">SEGGER_RTT_ConfigDownBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"RTTDOWN\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> SEGGER_RTT_MODE_NO_BLOCK_SKIP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* 进入主程序循环体 */</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">bsp_Idle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* 这个函数在bsp.c文件。用户可以修改这个函数实现CPU休眠和喂狗 */</span>\n\n\t\t<span class=\"token comment\">/* 判断定时器超时时间 */</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">bsp_CheckTimer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">bsp_LedToggle</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\t<span class=\"token comment\">/* 做一个简单的回环功能 */</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">SEGGER_RTT_HasKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tGetKey <span class=\"token operator\">=</span> <span class=\"token function\">SEGGER_RTT_GetKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">SEGGER_RTT_SetTerminal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">SEGGER_RTT_printf</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"SEGGER_RTT_GetKey = %c\\r\\n\"</span><span class=\"token punctuation\">,</span> GetKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">/* 按键滤波和检测由后台systick中断服务程序实现，我们只需要调用bsp_GetKey读取键值即可。 */</span>\n\t\tucKeyCode <span class=\"token operator\">=</span> <span class=\"token function\">bsp_GetKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* 读取键值, 无键按下时返回 KEY_NONE = 0 */</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ucKeyCode <span class=\"token operator\">!=</span> KEY_NONE<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>ucKeyCode<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">case</span> KEY_DOWN_K1<span class=\"token operator\">:</span>\t\t\t<span class=\"token comment\">/* K1键按下 */</span>\n\t\t\t\t\t<span class=\"token function\">SEGGER_RTT_SetTerminal</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token function\">SEGGER_RTT_WriteString</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t\t   RTT_CTRL_RESET<span class=\"token string\">\"Red: \"</span> \\\n\t\t\t\t\t\t\t\t\t\t   RTT_CTRL_TEXT_RED<span class=\"token string\">\"This text is red. \"</span> \\\n\t\t\t\t\t\t\t\t\t\t   RTT_CTRL_TEXT_BLACK<span class=\"token string\">\"\"</span> \\\n\t\t\t\t\t\t\t\t\t\t   RTT_CTRL_BG_BRIGHT_GREEN<span class=\"token string\">\"This background is green. \"</span> \\\n\t\t\t\t\t\t\t\t\t\t   RTT_CTRL_RESET<span class=\"token string\">\"Normal text again.\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t<span class=\"token keyword\">case</span> KEY_DOWN_K2<span class=\"token operator\">:</span>\t\t\t<span class=\"token comment\">/* K2键按下 */</span>\n\t\t\t\t\t<span class=\"token function\">SEGGER_RTT_SetTerminal</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token function\">SEGGER_RTT_WriteString</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> RTT_CTRL_TEXT_BRIGHT_GREEN<span class=\"token string\">\"KEY_DOWN_K2, ArmFly Real-Time-Terminal Sample\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t<span class=\"token keyword\">case</span> KEY_DOWN_K3<span class=\"token operator\">:</span>\t\t\t<span class=\"token comment\">/* K3键按下 */</span>\n\t\t\t\t\t<span class=\"token function\">SEGGER_RTT_SetTerminal</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token function\">SEGGER_RTT_printf</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"KEY_DOWN_K3, i = %d\\r\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t\t\t<span class=\"token comment\">/* 其它的键值不处理 */</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\72172c2ac2eb461e95a41b11c1077432.png\"/></p>\n<h1><a id=\"Jscope_229\"></a>配合J-scope使用，高速数据图形化</h1>\n<p>J-scope支持HSS模式和RTT模式。<br/> HSS 模式<br/> HSS 模式比较简单，仅需大家将 MDK 生成的可执行文件 xxx.axf 或者 IAR 生成的可执行文件 xxx.out文件加载到 JScope 软件里面即可。<br/>  优势<br/>  随时随地都可以连接目标板，不影响目标板的正常功能，不需要额外资源。 无需用户写目标板代码。<br/>  不需要用到 SWO 引脚， 使用标准的下载接口即可。 以我们的开发板为例，用到 VCC， GND，SWDIO， SWCLK 和 NRST。 大家使用三线 JLINK-OB 也是没问题的， 仅需用到 GND， SWDIO和 SWCLK。<br/>  劣势<br/>  相对 RTT 模式，速度慢。<br/>  采样速度基本固定在 1KHz 左右，速度较慢， 仅适合采样变量变化速度低于 1KHz 的情况。</p>\n<p>RTT 模式获取数据<br/> 这种方式类似串口上传数据，只是换成了 SWD 接口。<br/>  且随时随地都可以连接目标板，不影响目标板的正常功能。<br/>  允许比 HSS 更高的数据吞吐量。高达 2 MB / s 可以实现。即使目标上有 512 字节的小缓冲区，也可以达到 1 MB / s。<br/>  J-Scope 数据采集与目标板应用程序的执行同步，因为应用程序决定何时以及如何采样数据。<br/>  J-Scope 不需要知道变量的位置。 RTT 缓冲区的位置由 J-Scope 自动检测。<br/>  时间戳等数据可以被添加到数据样本中。<br/>  不需要用到 SWO 引脚， 使用标准的下载接口即可</p>\n<p>第 1 步：需要按照上面方法移植 SEGGER 的 RTT 组件<br/> 第 2 步：配置上行缓冲区。<br/> 这点比较重要， 比如本期教程配套例子的配置如下：</p>\n<pre><code class=\"prism language-c\"><span class=\"token function\">SEGGER_RTT_ConfigUpBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"JScope_u2\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">2048</span><span class=\"token punctuation\">,</span> SEGGER_RTT_MODE_NO_BLOCK_SKIP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这个函数在上面有详细说明。我们这里重点说下 J-Scope 使用 RTT 模式时，此函数的注意事项。<br/>  第 1 个参数要填通道 1，实际测试通道 0 不可用。<br/>  第 2 个参数非常重要，要使用固定的格式，字符串 JScope_是固定的，主要是下划线后面的字符。<br/> 支持的格式如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e51cae7a03aa451494553e81d6f04f89.png\"/><br/> 比如：<br/> JScope_t4u1i4： 表示数据包格式为 32 位时间戳， 8 位无符号数和 32 位有符号数组成。并且数据顺序也是按照这个排列。<br/> JScope_u2 : 表示数据包仅包含 16 位无符号数。</p>\n<p>使用 RTT 模式的话，最后一个参数仅支持 SEGGER_RTT_MODE_NO_BLOCK_SKIP 和<br/> SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL<br/> 第 3 步： 发送数据。<br/> 发送数据就比较简单了，调用函数 SEGGER_RTT_Write 即可。</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>            \n\t<span class=\"token function\">bsp_Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* 配置通道1，上行配置*/</span>\t\n\t<span class=\"token function\">SEGGER_RTT_ConfigUpBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"JScope_i2\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">4096</span><span class=\"token punctuation\">,</span> SEGGER_RTT_MODE_NO_BLOCK_SKIP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n\t    debug_enc<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">SEGGER_RTT_Write</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>debug_enc<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>打开J-scope配置如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\42ca969c501141aca2c381e3186b4e4f.png\"/><br/> 右下角看采样率<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ad8376e8caad4c0ca7fb47c097191ffe.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a0ddde71081644b9ad53eae75efea8aa.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c992a785ab074848a5e96c72ddf4a218.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 1, "time": "2022-09-01 00:10:48", "summary": "移植下载代码，地址在工程目录里面新建一个文件夹，将组件内容全都添加进去，添加的内容在这里插入图片描述把文件夹中的个文件添加到工程在这里插入图片描述添加文件夹的路径到工程在这里插入图片描述移植完成！替代"}