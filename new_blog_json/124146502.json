{"blogid": "124146502", "writerAge": "码龄13年", "writerBlogNum": "49", "writerCollect": "58", "writerComment": "68", "writerFan": "49", "writerGrade": "5级", "writerIntegral": "2830", "writerName": "从删库到跑路养成记", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124146502.jpg", "writerRankTotal": "36652", "writerRankWeekly": "93266", "writerThumb": "51", "writerVisitNum": "697909", "blog_read_count": "1541", "blog_time": "已于 2022-04-13 17:10:16 修改", "blog_title": "ThinkPHP6多应用模式配置经验总结", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p><strong>1、安装ThinkPHP6</strong></p>\n<p>6.0之前安装都是从Git或者直接下载安装包进行安装，从6.0开始安装方式就改成了composer进行安装了，安装命令如下：</p>\n<pre><code class=\"language-bash\">稳定版：composer create-project topthink/think tp\n开发版：composer create-project topthink/think=6.0.x-dev tp</code></pre>\n<p>        默认安装完成之后是单应用模式，目录结构如下：</p>\n<pre><code class=\"language-bash\">www  WEB部署目录（或者子目录）\n├─app           应用目录\n│  ├─controller      控制器目录\n│  ├─model           模型目录\n│  ├─ ...            更多类库目录\n│  │\n│  ├─common.php         公共函数文件\n│  └─event.php          事件定义文件\n│\n├─config                配置目录\n│  ├─app.php            应用配置\n│  ├─cache.php          缓存配置\n│  ├─console.php        控制台配置\n│  ├─cookie.php         Cookie配置\n│  ├─database.php       数据库配置\n│  ├─filesystem.php     文件磁盘配置\n│  ├─lang.php           多语言配置\n│  ├─log.php            日志配置\n│  ├─middleware.php     中间件配置\n│  ├─route.php          URL和路由配置\n│  ├─session.php        Session配置\n│  ├─trace.php          Trace配置\n│  └─view.php           视图配置\n│\n├─view            视图目录\n├─route                 路由定义目录\n│  ├─route.php          路由定义文件\n│  └─ ...   \n│\n├─public                WEB目录（对外访问目录）\n│  ├─index.php          入口文件\n│  ├─router.php         快速测试文件\n│  └─.htaccess          用于apache的重写\n│\n├─extend                扩展类库目录\n├─runtime               应用的运行时目录（可写，可定制）\n├─vendor                Composer类库目录\n├─.example.env          环境变量示例文件\n├─composer.json         composer 定义文件\n├─LICENSE.txt           授权说明文件\n├─README.md             README 文件\n├─think                 命令行入口文件</code></pre>\n<p>单应用模式很简单，直接使用就可以了，我们现在需要的是多应用模式，多应用模式和单应用模式区别就在app目录结构，下面我们来一步一步实现。</p>\n<p><strong>2、配置多应用模式</strong></p>\n<ol><li><strong>        </strong>安装多应用模式扩展<code>think-multi-app</code> <pre><code class=\"language-bash\">composer require topthink/think-multi-app</code></pre> </li><li>        删除app目录下的controller文件夹，TP是根据是否有这个文件夹来判断单应用模式还是多应用模式的，所以这个必须删除。</li><li>删除完成之后使用命令创建的 ，比如要创建admin和api两个应用 <pre><code class=\"language-bash\">php think build admin\nphp think build api</code></pre> <p>这里有一个坑，很多人会遇到这种情况</p> <pre><code class=\"language-bash\">[InvalidArgumentException]\nCommand \"build\" is not defined.</code></pre> <p>提示“build”命令没有定义，这个坑折腾了我近一个小时，之前的think是提供的有默认build命令的，现在不知道为啥没有了，需要手工去配置进去，最终的解决办法就是修改config/console.php，添加build命令</p> <pre><code class=\"language-bash\">return [\n    // 指令定义\n    'commands' =&gt; [\n        'build' =&gt; \\think\\app\\command\\Build::class,\n    ],\n];</code></pre> <p>再次执行build命令就会提示success成功了。这个时候项目目录结构大概如下</p> <pre><code class=\"language-bash\">www  WEB部署目录（或者子目录）\n├─app           应用目录\n│  ├─admin\n│  │  ├─controller      控制器目录\n│  │  ├─model           模型目录\n│  │  ├─ ...            更多类库目录\n│  │  │\n│  │  ├─common.php         公共函数文件\n│  │  └─event.php          事件定义文件\n│  │\n│  ├─api\n│  │  ├─controller      控制器目录\n│  │  ├─model           模型目录\n│  │  ├─ ...            更多类库目录\n│  │  │\n│  │  ├─common.php         公共函数文件\n│  │  └─event.php          事件定义文件\n│  │\n├─config                配置目录\n│  ├─app.php            应用配置\n│  ├─cache.php          缓存配置\n│  ├─console.php        控制台配置\n│  ├─cookie.php         Cookie配置\n│  ├─database.php       数据库配置\n│  ├─filesystem.php     文件磁盘配置\n│  ├─lang.php           多语言配置\n│  ├─log.php            日志配置\n│  ├─middleware.php     中间件配置\n│  ├─route.php          URL和路由配置\n│  ├─session.php        Session配置\n│  ├─trace.php          Trace配置\n│  └─view.php           视图配置\n│\n├─view            视图目录\n├─route                 路由定义目录\n│  ├─route.php          路由定义文件\n│  └─ ...   \n│\n├─public                WEB目录（对外访问目录）\n│  ├─index.php          入口文件\n│  ├─router.php         快速测试文件\n│  └─.htaccess          用于apache的重写\n│\n├─extend                扩展类库目录\n├─runtime               应用的运行时目录（可写，可定制）\n├─vendor                Composer类库目录\n├─.example.env          环境变量示例文件\n├─composer.json         composer 定义文件\n├─LICENSE.txt           授权说明文件\n├─README.md             README 文件\n├─think                 命令行入口文件</code></pre> <p><br/><br/> 接下来就是测试多应用模式，理论上输入www.xxxxx.com/index.php/admin应该是会调起admin应用下的Index/index方法的，但是并没有，又一个坑出现了，这个也是大坑！<img alt=\"\" height=\"322\" src=\"..\\..\\static\\image\\0eff7561e8344869b0fc82a1466e05a4.png\" width=\"756\"/><br/><br/> 还是按照单应用模式去执行了，网上的说法很多，有说是在config/app.php下加入'auto_multi_app' =&gt; true,有说要配置app_map=&gt;['admin'=&gt;'admin','api'=&gt;'api']，也有说配置domain_bind=&gt;['admin'=&gt;'admin','api'=&gt;'api']，但是这些统统都被我验证失败了，芭比Q了。<br/> 搜索的过程中突然，一个新的方法出现在我的眼前，不管行不行，必须得试试，也没其他办法了，果然是一个大神，接下来就是这问大神的方法。</p> <p></p> </li><li> <p>说的是服务没有自动注册成功，操作步骤如下：<br/> 打开vendor/composer/installed.json，查找“services” 关键字，我这边查到两条</p> <pre><code class=\"language-javascript\">\"services\": [\n      \"think\\\\app\\\\Service\"\n ]\n\"services\": [\n     \"think\\\\trace\\\\Service\"\n ],</code></pre> <p>把搜索到的所有值写入vendor/services.php文件，内容如下</p> <pre><code class=\"language-php\">&lt;?php\n\ndeclare (strict_types = 1);\nreturn array (\n    0 =&gt; 'think\\\\app\\\\Service',\n    1 =&gt; 'think\\\\trace\\\\Service',\n);</code></pre> <p>再次执行www.xxxxx.com/index.php/admin</p> <pre><code class=\"language-html\">您好！这是一个[admin]示例应用</code></pre> <p>再次执行www.xxxxx.com/index.php/api</p> <pre><code class=\"language-html\">您好！这是一个[api]示例应用</code></pre> <p></p> </li></ol>\n<p>         至此多应用模式已经配置完毕了。</p>\n<p>可能有人会感觉执行的url地址里都带一个index.php太烦人，不想带它能不能去掉，肯定是可以的，修改public/.htaccess文件为如下</p>\n<pre><code class=\"language-php\">&lt;IfModule mod_rewrite.c&gt;\n  Options +FollowSymlinks -Multiviews\n  RewriteEngine On\n\n  RewriteCond %{REQUEST_FILENAME} !-d\n  RewriteCond %{REQUEST_FILENAME} !-f\n  #RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]\n  RewriteRule ^(.*)$ index.php [L,E=PATH_INFO:$1]\n&lt;/IfModule&gt;\n</code></pre>\n<p>执行地址即可简化为www.xxxxx.com/admin，跟www.xxxxx.com/index.php/admin是一样的结果。</p>\n<p>有人可能又有疑问了，现在都是用的二级域名比较多，</p>\n<p>www.xxxxx.com/admin能不能简化为admin.xxxx.com</p>\n<p>www.xxxxx.com/api能不能简化为api.xxxx.com</p>\n<p>答案毋庸置疑，肯定是能的，这个时候就用到了前面说的domain_bind=&gt;['admin'=&gt;'admin','api'=&gt;'api']了，这个是域名绑定的，可以是二级域名前缀，也可以是全域名。</p>\n<p>app_map这个没用，这个是应用的映射，跟这个二级域名没有关系。</p>\n<p>好了，所有的需求都得到了解决，分享给有同样问题的小伙伴们，有不对的地方希望指正，谢谢。</p>\n</div>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 1, "time": "2022-04-13 17:10:16", "summary": "、安装之前安装都是从或者直接下载安装包进行安装，从开始安装方式就改成了进行安装了，安装命令如下：稳定版：开发版：默认安装完成之后是单应用模式，目录结构如下：部署目录或者子目录应用目录控制器目录模型目录"}