{"blogid": "125533925", "writerAge": "码龄5年", "writerBlogNum": "4", "writerCollect": "3", "writerComment": "0", "writerFan": "0", "writerGrade": "1级", "writerIntegral": "68", "writerName": "se7eN0x", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125533925.jpg", "writerRankTotal": "133525", "writerRankWeekly": "623467", "writerThumb": "0", "writerVisitNum": "3972", "blog_read_count": "925", "blog_time": "于 2022-06-30 10:56:59 发布", "blog_title": "C#中图片旋转及翻转类型（RotateFlipType）详解及图例", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>最近在做项目的时候有用到System.Drawing.Bitmap类和System.Drawing.Graphics类来画图并生成图片，但由于Graphics画图的坐标系默认是以左上角为原点的，实际项目中需要对图片进行翻转或者旋转操作，这就用到了Image类中的RotateFlip方法。</p>\n<p>RotateFlip要求传入的参数是RotateFlipType类型的枚举，这里我先给出MSDN关于RotateFlipType的链接：<a class=\"link-info\" href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.drawing.rotatefliptype?view=dotnet-plat-ext-6.0\" title=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.drawing.rotatefliptype?view=dotnet-plat-ext-6.0\">https://docs.microsoft.com/zh-cn/dotnet/api/system.drawing.rotatefliptype?view=dotnet-plat-ext-6.0</a></p>\n<p>但我觉得这些参数过于书面化，不能直观的看到效果，网上搜具体的实例也没有搜到，所以决定自己用代码写一个小实例来看看效果，顺便分享给大家。</p>\n<p>通过查阅MSDN文档，或者通过Visual Studio的F12导航到定义，可以知道RotateFlipType一共有如下14个值，但其中有一半是重复的效果，只是换了种写法：</p>\n<pre><code class=\"language-cs\">namespace System.Drawing\n{\n    public enum RotateFlipType\n    {\n        RotateNoneFlipNone = 0,\n        Rotate180FlipXY = 0,\n        Rotate90FlipNone = 1,\n        Rotate270FlipXY = 1,\n        Rotate180FlipNone = 2,\n        RotateNoneFlipXY = 2,\n        Rotate270FlipNone = 3,\n        Rotate90FlipXY = 3,\n        RotateNoneFlipX = 4,\n        Rotate180FlipY = 4,\n        Rotate90FlipX = 5,\n        Rotate270FlipY = 5,\n        Rotate180FlipX = 6,\n        RotateNoneFlipY = 6,\n        Rotate270FlipX = 7,\n        Rotate90FlipY = 7,\n    }\n}</code></pre>\n<p>下面我用一个小demo演示下各个枚举的具体含义，可以对比看到各个枚举分别对应的效果：</p>\n<table align=\"center\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\"><caption>\n  RotateFlipType枚举对应效果\n </caption><thead><tr><th>RotateFlipType参数</th><th>图例</th></tr></thead><tbody><tr><td> <p>原始图像</p> </td><td style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\4ff3055b8c6e4feb8084945f15875c0a.jpeg\"/></td></tr><tr><td> <p>0. RotateNoneFlipNone</p> <p>0. Rotate180FlipXY </p> </td><td> <p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\4ff3055b8c6e4feb8084945f15875c0a.jpeg\"/></p> </td></tr><tr><td> <p>1. Rotate90FlipNone</p> <p>1. Rotate270FlipXY </p> </td><td style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\32cc904bb0a34cb48fc316a71352173c.jpeg\"/></td></tr><tr><td>2. Rotate180FlipNone<br/> 2. RotateNoneFlipXY</td><td style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\d614ead8a1a14fcca7e7ab1c5be48226.jpeg\"/></td></tr><tr><td>3. Rotate270FlipNone<br/> 3. Rotate90FlipXY</td><td style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\13191b5c3c294ce88cb378e1619d037f.jpeg\"/></td></tr><tr><td>4. RotateNoneFlipX<br/> 4. Rotate180FlipY</td><td> <p class=\"img-center\"><img alt=\"\" height=\"100\" src=\"..\\..\\static\\image\\4fac4d1c56fe47cd878766915502986f.jpeg\" width=\"100\"/></p> </td></tr><tr><td>5. Rotate90FlipX<br/> 5. Rotate270FlipY</td><td style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\f443d79d2f12447c91b2462b07bb400b.jpeg\"/></td></tr><tr><td>6. Rotate180FlipX<br/> 6. RotateNoneFlipY</td><td> <p class=\"img-center\"><img alt=\"\" height=\"100\" src=\"..\\..\\static\\image\\07b45d28a4b14a948bc0bc630a029022.jpeg\" width=\"100\"/></p> </td></tr><tr><td> <p>7. Rotate270FlipX</p> <p>7. Rotate90FlipY</p> </td><td style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\8b272d1abad04cefb27c421f43e15897.jpeg\"/></td></tr></tbody></table>\n<p>实例代码如下：</p>\n<pre><code class=\"language-cs\">using System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Drawing;\nusing System.IO;\n\nnamespace ConsoleApp1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Bitmap bitmap = new Bitmap(100, 100);\n            Graphics graphics = Graphics.FromImage(bitmap);\n            graphics.Clear(Color.Black);\n\n            Pen pen = new Pen(Color.White, 2);\n\n            List&lt;Point&gt; pointList = new List&lt;Point&gt;();\n            pointList.Add(new Point(10, 50));\n            pointList.Add(new Point(70, 70));\n            pointList.Add(new Point(70, 90));\n            pointList.Add(new Point(10, 90));\n            pointList.Add(new Point(10, 50));\n\n            graphics.DrawLines(pen, pointList.ToArray());\n\n            // 0. 原始效果\n            //bitmap.RotateFlip(RotateFlipType.RotateNoneFlipNone);\n            // 同上\n            //bitmap.RotateFlip(RotateFlipType.Rotate180FlipXY);\n\n            // 1. 顺时针旋转90°\n            //bitmap.RotateFlip(RotateFlipType.Rotate90FlipNone);\n            // 同上\n            //bitmap.RotateFlip(RotateFlipType.Rotate270FlipXY);\n\n            // 2. 顺时针旋转180°\n            //bitmap.RotateFlip(RotateFlipType.Rotate180FlipNone);\n            // 同上\n            //bitmap.RotateFlip(RotateFlipType.RotateNoneFlipXY);\n\n            // 3. 顺时针旋转270°\n            //bitmap.RotateFlip(RotateFlipType.Rotate270FlipNone);\n            // 同上\n            //bitmap.RotateFlip(RotateFlipType.Rotate90FlipXY);\n\n            // 4. 水平翻转\n            //bitmap.RotateFlip(RotateFlipType.RotateNoneFlipX);\n            // 顺时针旋转180°，垂直翻转（效果同上）\n            //bitmap.RotateFlip(RotateFlipType.Rotate180FlipY);\n\n            // 5. 顺时针旋转90°后，水平翻转\n            //bitmap.RotateFlip(RotateFlipType.Rotate90FlipX);\n            // 顺时针旋转270°，垂直翻转（效果同上）\n            //bitmap.RotateFlip(RotateFlipType.Rotate270FlipY);\n\n            // 6. 顺时针旋转180°后，水平翻转\n            //bitmap.RotateFlip(RotateFlipType.Rotate180FlipX);\n            // 垂直翻转（效果同上）\n            //bitmap.RotateFlip(RotateFlipType.RotateNoneFlipY);\n\n            // 7. 顺时针旋转270°后，水平翻转\n            //bitmap.RotateFlip(RotateFlipType.Rotate270FlipX);\n            // 顺时针旋转90°后，垂直翻转（效果同上）\n            //bitmap.RotateFlip(RotateFlipType.Rotate90FlipY);\n\n\n            string path = \"D:/MyImage.jpg\";\n            bitmap.Save(path);\n\n            //打开进程\n            ProcessStartInfo info = new ProcessStartInfo(path);\n            info.WorkingDirectory = Path.GetDirectoryName(path);\n            Process.Start(info);\n        }\n    }\n}\n</code></pre>\n<p></p>\n</div>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-06-30 10:56:59", "summary": "最近在做项目的时候有用到类和类来画图并生成图片，但由于画图的坐标系默认是以左上角为原点的，实际项目中需要对图片进行翻转或者旋转操作，这就用到了类中的方法。要求传入的参数是类型的枚举，这里我先给出关于的"}