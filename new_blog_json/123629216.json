{"blogid": "123629216", "writerAge": "码龄4年", "writerBlogNum": "2", "writerCollect": "3", "writerComment": "0", "writerFan": "0", "writerGrade": "1级", "writerIntegral": "10", "writerName": "MaRens", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123629216.jpg", "writerRankTotal": "255293", "writerRankWeekly": "483445", "writerThumb": "0", "writerVisitNum": "921", "blog_read_count": "877", "blog_time": "已于 2022-03-23 10:04:30 修改", "blog_title": "C#中引入Python", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>一、使用c#，nuget管理包上下载的ironPython安装包</p>\n<pre><code> 尝试后发现，对引用了numpy等第三方库的python代码，会报找不到模块xxx的错误，上网查证后发现此问题基本难以解决\n</code></pre>\n<p>二、使用c++程序调用python文件，然后将其做成动态链接库（dll），在c#中调用此dll文件<br/> 限制：实现方式很复杂，并且受python版本、(python/vs)32/64位影响，而且要求用户必须安装python运行环境</p>\n<p>三、使用安装好的python环境，利用c#命令行，调用.py文件执行</p>\n<pre><code>  优点：执行速度只比在python本身环境中慢一点，步骤也相对简单\n\n  缺点：需要用户安装配置python环境\n\n  实用步骤：\n\n  1、下载安装python，并配置好环境变量等（本人用的Anaconda，链接此处不再提供）\n\n   2、编写python文件（这里为了便于理解，只传比较简单的两个参数）  \n</code></pre>\n<p>注：这两个python文件，我引用了numpy第三方库，也要安装后才能在python中使用</p>\n<pre><code>#multi.py\n \ndef multiplication(a,b):\n\treturn a*b\n\n#main.py\nimport numpy as np\nimport multi\nimport sys\n \ndef func(a,b):\n    result=np.sqrt(multi.multiplication(int(a),int(b)))\n    return result\n \n \nif __name__ == '__main__':\n    print(func(sys.argv[1],sys.argv[2]))\n</code></pre>\n<p>ps:为了import不报错，尽量把multi.py文件放main.py同一文件夹下。因为打包exe文件执行后，可能会报找不到Multi模块的错误</p>\n<pre><code>  3、在c#中调用上述主python文件：main.py\n\n  (我直接建了一个wpf文件，放在一个按钮的点击事件中执行了，你们随意)\n\n        private void Button_Click(object sender, RoutedEventArgs e)\n        {\n \n            string[] strArr=new string[2];//参数列表\n            string sArguments = @\"main.py\";//这里是python的文件名字\n            strArr[0] = \"2\";\n            strArr[1] = \"3\";\n            RunPythonScript(sArguments, \"-u\", strArr);\n        }\n        //调用python核心代码\n        public static void RunPythonScript(string sArgName, string args = \"\", params string[] teps)\n        {\n            Process p = new Process();\n            string path = System.AppDomain.CurrentDomain.SetupInformation.ApplicationBase + sArgName;// 获得python文件的绝对路径（将文件放在c#的debug文件夹中可以这样操作）\n            path = @\"C:\\Users\\user\\Desktop\\test\\\"+sArgName;//(因为我没放debug下，所以直接写的绝对路径,替换掉上面的路径了)\n            p.StartInfo.FileName = @\"D:\\Python\\envs\\python3\\python.exe\";//没有配环境变量的话，可以像我这样写python.exe的绝对路径。如果配了，直接写\"python.exe\"即可\n            string sArguments = path;\n            foreach (string sigstr in teps)\n            {\n                sArguments += \" \" + sigstr;//传递参数\n            }\n \n                sArguments += \" \" + args;\n \n            p.StartInfo.Arguments = sArguments;\n \n            p.StartInfo.UseShellExecute = false;\n \n            p.StartInfo.RedirectStandardOutput = true;\n \n            p.StartInfo.RedirectStandardInput = true;\n \n            p.StartInfo.RedirectStandardError = true;\n \n            p.StartInfo.CreateNoWindow = true;\n \n            p.Start();\n            p.BeginOutputReadLine();\n            p.OutputDataReceived += new DataReceivedEventHandler(p_OutputDataReceived);\n            Console.ReadLine();\n            p.WaitForExit();\n        }\n        //输出打印的信息\n        static void p_OutputDataReceived(object sender, DataReceivedEventArgs e)\n        {\n            if (!string.IsNullOrEmpty(e.Data))\n            {\n                AppendText(e.Data + Environment.NewLine);\n            }\n        }\n        public delegate void AppendTextCallback(string text);\n        public static void AppendText(string text)\n        {\n            Console.WriteLine(text);     //此处在控制台输出.py文件print的结果\n \n        }\n</code></pre>\n<p>执行成功，得到结果：也就是\\sqrt{2*3}</p>\n<p>四、c#调用python可执行exe文件，使用命令行进行传参取返回值</p>\n<pre><code>  优点：无需安装python运行环境\n\n  缺点：\n\n   1、可能是因为要展开exe中包含的python环境，执行速度相当慢，慎用！\n\n   2、因为是命令行传参形式，故传参需要自行处理。ps：由于命令行传参形式为：xxx.exe 参数1 参数2 参数3....\n</code></pre>\n<p>我要传一个很大的数组，曲线救国，用c#将数组写入txt文件中，将存放路径传给python函数，python读取此txt文件得到数据</p>\n<pre><code> 使用步骤：\n\n  1、编写python文件（这里为了便于理解，只传比较简单的两个参数）  \n\n#multi.py\n \ndef multiplication(a,b):\n\treturn a*b\n\n#main.py\nimport numpy as np\nimport multi\nimport sys\n \ndef func(a,b):\n    result=np.sqrt(multi.multiplication(int(a),int(b)))\n    return result\n \n \nif __name__ == '__main__':\n    print(func(sys.argv[1],sys.argv[2]))\n</code></pre>\n<p>ps:为了import不报错，尽量把multi.py文件放main.py同一文件夹下。因为打包exe文件执行后，可能会报找不到Multi模块的错误</p>\n<p>2、安装pyInstaller（若已安装请直接跳过此步骤）</p>\n<pre><code>  我使用的是Anaconda编写python，所以使用Anaconda Prompt进行安装pyInstaller（直接安装python并配好环境变量的小伙伴，可以在电脑的cmd下进行操作）\n</code></pre>\n<p>这个类似于电脑的cmd.exe程序，可在其中输入命令行操作</p>\n<p>安装pyInstaller命令行:</p>\n<p>正常来讲会报一个错误，说你的pip版本过低，需要先更新一下</p>\n<p>pip install --upgrade pip</p>\n<p>使用此命令更新pip，然后再执行pip install pyinstaller命令即可</p>\n<p>3、使用pyinstaller打包python程序</p>\n<p>同样还是在Anaconda Prompt中，cd python文件所在的路径，然后执行打包命令</p>\n<p>打包过程可能会出错（找不到模块、迭代深度超出等，在我另两篇博客里有解决办法）</p>\n<p>若打包成功，出现successfully，失败的话会给出错误信息</p>\n<p>4、在c#中调用此exe文件（此处我建了一个wpf项目，利用按钮点击事件来实现调用）</p>\n<pre><code>namespace WpfTest2\n{\n    /// &lt;summary&gt;\n    /// MainWindow.xaml 的交互逻辑\n    /// &lt;/summary&gt;\n    public partial class MainWindow : Window\n    {\n        public MainWindow()\n        {\n            InitializeComponent();\n        }\n \n        private void Button_Click(object sender, RoutedEventArgs e)\n        {\n            //string debugPath = System.Environment.CurrentDirectory;           //此c#项目的debug文件夹路径\n            string pyexePath = @\"C:\\Users\\user\\Desktop\\test\\dist\\main.exe\";     \n            //python文件所在路径，一般不使用绝对路径，此处仅作为例子，建议转移到debug文件夹下\n            \n            Process p = new Process();\n            p.StartInfo.FileName = pyexePath;//需要执行的文件路径\n            p.StartInfo.UseShellExecute = false; //必需\n            p.StartInfo.RedirectStandardOutput = true;//输出参数设定\n            p.StartInfo.RedirectStandardInput = true;//传入参数设定\n            p.StartInfo.CreateNoWindow = true;\n            p.StartInfo.Arguments = \"2 3\";//参数以空格分隔，如果某个参数为空，可以传入””\n            p.Start();\n            string output = p.StandardOutput.ReadToEnd();\n            p.WaitForExit();//关键，等待外部程序退出后才能往下执行}\n            Console.Write(output);//输出\n            p.Close();        \n        }\n    }\n}\n</code></pre>\n<p>在控制台打印出结果：也就是\\sqrt{2*3}</p>\n<p>至此，完成c#调用python的exe文件，并实现了传入传出参数功能，谢谢观看<br/> ————————————————<br/> 版权声明：本文为CSDN博主「武林大皮虾」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br/> 原文链接：https://blog.csdn.net/qq_42063091/article/details/82418630</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 1, "csharp": 1, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-23 10:04:30", "summary": "一、使用，管理包上下载的安装包尝试后发现，对引用了等第三方库的代码，会报找不到模块的错误，上网查证后发现此问题基本难以解决二、使用程序调用文件，然后将其做成动态链接库，在中调用此文件限制：实现方式很复"}