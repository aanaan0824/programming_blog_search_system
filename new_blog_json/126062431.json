{"blogid": "126062431", "writerAge": "码龄1年", "writerBlogNum": "370", "writerCollect": "277", "writerComment": "38", "writerFan": "10760", "writerGrade": "5级", "writerIntegral": "3857", "writerName": "m0_67392273", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126062431.jpg", "writerRankTotal": "4960", "writerRankWeekly": "791", "writerThumb": "57", "writerVisitNum": "182482", "blog_read_count": "6668", "blog_time": "于 2022-07-29 19:14:22 发布", "blog_title": "MySQL的存储过程", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><strong>目录</strong></p>\n<p><a href=\"#%E6%A6%82%E5%BF%B5\">概念</a></p>\n<p><a href=\"#%E7%89%B9%E6%80%A7\">特性</a></p>\n<p><a href=\"#%E6%A0%BC%E5%BC%8F\">格式</a></p>\n<p><a href=\"#%E5%88%9B%E5%BB%BA%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B\">创建存储过程</a></p>\n<p><a href=\"#%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F\">定义变量</a></p>\n<p><a href=\"#%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F\">局部变量</a></p>\n<p><a href=\"#%E7%94%A8%E6%88%B7%E5%8F%98%E9%87%8F\">用户变量</a></p>\n<p><a href=\"#%E7%B3%BB%E7%BB%9F%E5%8F%98%E9%87%8F\">系统变量</a></p>\n<p><a href=\"#%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B\">存储过程</a></p>\n<p><a href=\"#%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E4%BC%A0%E5%8F%82-in\">存储过程传参-in</a></p>\n<p><a href=\"#%C2%A0%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E4%BC%A0%E5%8F%82-out\">存储过程传参-out</a></p>\n<p><a href=\"#%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E4%BC%A0%E5%8F%82-inout\">存储过程传参-inout</a></p>\n<p><a href=\"#%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6\">流程控制</a></p>\n<p><a href=\"#%C2%A0%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6-%E5%88%A4%E6%96%AD\">流程控制-判断</a></p>\n<p><a href=\"#%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5-case%C2%A0\">流程控制语句-case?</a></p>\n<p><a href=\"#%C2%A0%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B-%E5%BE%AA%E7%8E%AF\">控制流程-循环</a></p>\n<p><a href=\"#while%E5%BE%AA%E7%8E%AF\">while循环</a></p>\n<p><a href=\"#repeat%E5%BE%AA%E7%8E%AF\">repeat循环</a></p>\n<p><a href=\"#loop%E5%BE%AA%E7%8E%AF\">loop循环</a></p>\n<p><a href=\"#%E6%B8%B8%E6%A0%87\">游标</a></p>\n<p><a href=\"#%C2%A0%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86-HANDLER%E5%8F%A5%E6%9F%84\">异常处理-HANDLER句柄</a></p>\n<hr/>\n<h1><a id=\"_48\"></a>概念</h1>\n<p>MySQL5.0版本开始支持存储过程,存储过程就是一组SQL语句集,功能强大,可以实现一些比较复杂的逻辑功能,类似于JAVA语言中的方法,存储过就是数据库SQL与层层面的代码封装与重用</p>\n<h1><a id=\"_53\"></a>特性</h1>\n<p>1.有输入输出参数,可以声明变量,有if/else/case/while等控制语句,通过编写存储过程,可以实现复杂的逻辑功能</p>\n<p>2.函数的普通特性:模块化,封装,代码复用</p>\n<p>3.速度快,只有首次执行需要经过编译和优化步骤,后续被调用可以直接执行,省去以上步骤</p>\n<h1><a id=\"_62\"></a>格式</h1>\n<h2><a id=\"_65\"></a><strong>创建存储过程</strong></h2>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\407c6dc553e549d4b21b8e270c2c70f2.png\"/></p>\n<pre><code>-- 创建存储过程\ndelimiter $$\ncreate procedure proc01()\nbegin\n\tselect empno,ename from emp;\nend $$\ndelimiter ;\n-- 调用存储过程\ncall proc01;\n</code></pre>\n<h1><a id=\"_80\"></a>定义变量</h1>\n<h2><a id=\"_83\"></a><strong>局部变量</strong></h2>\n<p>用户自定义,在begin/end块中有效</p>\n<h3><a id=\"httpsimgblogcsdnimgcn7cf3cf8096bb4496aea7a96daa9d88bfpngxossprocessimagewatermarktype_d3F5LXplbmhlaQshadow_50text_Q1NETiBA5ZCV57u05bCnsize_20color_FFFFFFt_70g_sex_16_88\"></a><img alt=\"\" src=\"..\\..\\static\\image\\7cf3cf8096bb4496aea7a96daa9d88bf.png\"/></h3>\n<pre><code>delimiter $$\ncreate procedure proc02()\nbegin\n\tdeclare var_name01 varchar(20) default 'aaa';  -- 声明/定义变量\n\tset var_naem01 = 'zhangsan'; -- 给变量赋值\n\tselect var_name01; -- 输出变量的值\nend $$\ndilimiter ;\ncall proc02();\n</code></pre>\n<h2><a id=\"_100\"></a><strong>用户变量</strong></h2>\n<p>用户自定义,当前会话(连接)有效.类比java的成员变量</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\134c9740261f429e8d75bf2e7f794fe3.png\"/></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\6b0f86723f2c4555be60014b0e2e4c9c.png\"/></p>\n<pre><code>delimiter $$\ncreate procedure proc04()\nbegin\n\tset @var_name01 = 'beijing';\n\tselect @var_name01;\nend $$\ndilimiter ;\ncall proc04();\nselect @var_name01; -- 外部也是可以使用用户变量\n</code></pre>\n<h2><a id=\"_119\"></a>系统变量</h2>\n<p>1.系统变量有分为<strong>全局变量</strong>与<strong>会话变量</strong></p>\n<p>2.全局变量在MYSQL启动的时候由服务器自动将他的初始化为默认值,这些默认值可以通过更改my.ini这个文件来更改</p>\n<p>3.会话变量在每次建立一个新的连接的时候,由MYSQL来初始化,MYSQL会将当前所有全局变量的值复制一份,来作为会话变量</p>\n<p>4.也就是说,如果在建立会话以后,没有手动更改过会话变量与全局变量的值,那所有这些变量的值都是一样的</p>\n<p>5.全局变量与会话变量的区别在于,对全局变量的修改会影响整个服务器,但是对会话变量的修改,只会影响到当前的会话(也就是当前的数据库连接)</p>\n<p>6.有些系统变量的值是可以利用语句来动态进行更改的,但是有些系统变量的值缺是只读的,对于那些可以更改的系统变量,我们可以利用set语句进行更改</p>\n<p><strong>系统变量-全局变量</strong></p>\n<p>由系统系统,在整个数据库中有效</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\5b86836f96a84031a19f7cd032c532c5.png\"/></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\57c7d95b0117485a97fa66e4e53e22a0.png\"/></p>\n<h1><a id=\"_142\"></a>存储过程</h1>\n<h2><a id=\"in_145\"></a>存储过程传参-in</h2>\n<p>in表示传入的参数,可以传入数值或者变量,即使传入变量,并不会改变变量的值,可以内部更改,仅仅作用在函数范围内</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\28050fecd3a0455986cc8938a277ba1f.png\"/></p>\n<pre><code>delimiter $$\ncreate procedure proc06(in param_empno int)\nbegin\n\tselect*from emp where empno = param_empno\nend $$\ndelimiter ;\ncall proc06(1001);\n</code></pre>\n<p>多个参数传参</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\0ea37a57b10e47cc9fc6f6bb28842da3.png\"/></p>\n<h2><a id=\"out_165\"></a>存储过程传参-out</h2>\n<p>out表示从存储过程内部传值给调用者</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\09ab05e8cc174252a3e7348914b7743d.png\"/></p>\n<h2><a id=\"inout_172\"></a>存储过程传参-inout</h2>\n<p>inout表示从外部传入的参数经过修改后可以返回的变量,既可以使用传入变量的值也可以修改变量的值(即使函数执行完)</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\f8034750a119433c8d8be0aab18ddcea.png\"/></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\570aee9b107c4fa2ace4e6df5b851730.png\"/></p>\n<h1><a id=\"_181\"></a>流程控制</h1>\n<h2><a id=\"_184\"></a>流程控制-判断</h2>\n<p>IF语句包含多个条件判断,根据结果为TURE和FALSE执行语句,与编程语言中的if、else if、else语法类似,其语法格式如下</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\1c4107621fb34406a0914ae39568a3e5.png\"/></p>\n<pre><code>-- 存储过程-if\n-- 案例1\n-- 输入学生的成绩,来判断成绩的级别\n/*\nscore&lt;60:不及格\nscore&gt;=60 , score&lt;80 :及格\nscore&gt;=80 , score&lt;90 :良好\nscore&gt;=90 , score&lt;=100 :优秀\nscore&gt;100 :成就错误\n*/\ndelimiter $$\ncreate procedure proc_12_if (in score int)\nbegin\n\tif score&lt;60 then select '不及格';\n\telseif score&gt;=60 and score&lt;80 then select '及格';\n\telseif score&gt;=80 and score&lt;90 then select '良好';\n\telseif score&gt;=90 and score&lt;=100 then select '优秀';\n\telse select '成绩错误'\n\tend if;\nend $$\ndelimiter ;\n\nset @score=55;\ncall proc_12_if(@score)\n\n-- 输入员工的名字,判断工资的情况\n/*\nsal&lt;10000 :适用薪资\nsal&gt;=10000 and sal&lt;20000 :转正薪资\nsal&gt;=20000 :元老薪资\n*/\ndelimiter $$\ncreate procedure proc_13_if(in in_ename varchar)\nbegin\n\tdeclare var_sal decimal(7,2);  -- 定义局部变量,7个长度,2个小数 \n\tdeclare result varchar(20);\n\tselect sal into var_sal from emp where ename=in_eanme;  -- 将值赋给局部变量\n\tif var_sal &lt;10000 then set result ='适用薪资';\n\telseif var_sal &lt;20000 then set result ='转正薪资';\n\telse set result ='元老薪资';\n\tend if;\n\tselect result;\nend$$\ndelimiter ;\n\n-- 调用\ncall proc_13_if('刘备');\n</code></pre>\n<h2><a id=\"case_239\"></a>流程控制语句-case</h2>\n<p>CASE是另一个条件判断语句,类似于编程语言中的switch语法</p>\n<p>语法一:当case后面的语句与when后面的语句相等时,则会执行then后面的语句,如果均不匹配则执行else</p>\n<p>语法二:直接写case 当when后面的条件成立则执行then后面的语句,如果都不成立,则执行else</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\da02edce72ee4e89b7ead136b51cbc72.png\"/></p>\n<pre><code>-- 流程控制语句:case\n/*\n支付方式:\n\t1.微信支付\n\t2.支付宝支付\n\t3.银行卡支付\n\t4.其他支付\n*/\n-- 格式1\ndelimiter $$\ncreate procedure proc14_case(in pay_type int)\nbegin\n\tcase pay_type \n\twhen 1 then select '微信支付';\n\twhen 2 then select '支付宝支付';\n\twhen 3 then select '银行卡支付';\n\telse select '其他方式支付';\n\tend case;\nend$$\ndelimiter ;\n\ncall proc14_case(2);\ncall proc14_case(3);\n\n-- 语法二\n-- 输入学生的成绩,来判断成绩的级别\n/*\nscore&lt;60:不及格\nscore&gt;=60 , score&lt;80 :及格\nscore&gt;=80 , score&lt;90 :良好\nscore&gt;=90 , score&lt;=100 :优秀\nscore&gt;100 :成就错误\n*/\ndelimiter $$\ncreate procedure proc_15_case (in score int)\nbegin\n\tcase\n\twhen score&lt;60 then select '不及格';\n\twhen score&gt;=60 and score&lt;80 then select '及格';\n\twhen score&gt;=80 and score&lt;90 then select '良好';\n\twhen score&gt;=90 and score&lt;=100 then select '优秀';\n\telse select '成绩错误'\n\tend case;\nend $$\ndelimiter ;\n\ncall proc_15_case(88);\n</code></pre>\n<h2><a id=\"_298\"></a>控制流程-循环</h2>\n<p><strong>概述</strong></p>\n<p>循环是一段在程序中只出现一次,但可能会连续运行多次的代码</p>\n<p>循环中的代码会运行特定的次数,或者是运行到特定条件成立时结束循环</p>\n<p><strong>循环分类</strong></p>\n<p>while、repeat、loop</p>\n<p><strong>循环控制</strong></p>\n<p>leave 类似于break,跳出,结束当前所在的循环</p>\n<p>iteater 类似于continue,继续,结束本次循环,继续下一次</p>\n<h3><a id=\"while_317\"></a><strong>while</strong>循环</h3>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\5131a9fc6cc140f585128aa55a02c0e4.png\"/></p>\n<pre><code>-- 需求:向表中添加指定条数据\n-- while\ndelimiter $$\ncreate procedure proc16_while(in insertCount int)\nbegin\n\tdeclare i int default 1;  -- 设置循环的增量\n\tlabel:while i&lt;=insertCount do insert into user(id,username,password) values(i,concat('user-',i),'123456');\n\tset i=i+1;\nend while label;\nend$$\ndelimiter ;\n\n\ncall proc16_while(10);\n\n-- 需求:向表中添加指定条数据\n-- while+leave\ndelimiter $$\ncreate procedure proc16_while(in insertCount int)\nbegin\n\tdeclare i int default 1;  -- 设置循环的增量\n\tlabel:while i&lt;=insertCount do insert into user(id,username,password) values(i,concat('user-',i),'123456');\n\tif i=5 then leave label;   -- 如果i=5则跳出循环\n\tset i=i+1;\nend while label;\nend$$\ndelimiter ;\n\n\ncall proc16_while(10);\n</code></pre>\n<h3><a id=\"repeat_352\"></a>repeat循环</h3>\n<p><strong>格式</strong></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\41304139c53d4562aa82c2990dff4a14.png\"/></p>\n<pre><code>-- 存储过程-循环控制-repeat\n\ndelimiter $$\ncreate procedure proc18_repaet(in insertCount int)\nbegin\n\tdeclare i int default 1;\n\tlabel:repeat\n\t\tinsert into user(uid,username,password)values(i,concat('user-',i),'123456');\n\t\tset i = i+1;\n\t\tuntil i&gt;inserCount  -- 这里不能写; 表示跳出循环\n\t\tend repeat label;\n\t\tselect '循环结束';\nend$$\ndelimiter ;\n\ncall proc18_repeat(100);\n</code></pre>\n<h3><a id=\"loop_376\"></a>loop循环</h3>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\b493b8df4ce84fb9b2f72d27413bf4db.png\"/></p>\n<pre><code>-- 存储过程-循环控制-loop\n\ndelimiter $$\ncreate procedure proc19_loop(in insertCount int)\nbegin\n\tdeclare i default 1;\n\tlabel:loop insert into user (uid,username,password) values (i,concat('user-')i,'123456');\n\tset i= i+1;\n\tif i&gt;insertCount then leave label;\n\tend if;\n\tend loop label;\nend$$\ndelimiter ;\n\ncall proc19_loop()\n</code></pre>\n<h1><a id=\"_396\"></a>游标</h1>\n<p>游标(cursor)是庸才存储查询结果集的数据类型,在存储过程和函数中可以使用光标对结果集进行循环的处理,光标的使用包括光标的声明、OPEN、FETCH、CLOSE</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\a0cc822154f54a1bb33fde49f1b57237.png\"/></p>\n<pre><code>-- 操作游标(cursor)\n-- 声明游标\n-- 打开游标\n-- 通过游标获取值\n-- 关闭游标\n-- 需求:输入一个部门名,查询该部门员工的编号、名字、薪资,将查询的结果集添加游标\ndelimiter $$\ncreate procedure proc19_cursor(in in_danme varchar(50))\nbegin\n -- 定义局部变量\n\tdeclare var_empno int;\n\tdeclare var_ename varchar(50);\n\tdeclare var_sal decimal(7,2);\n -- 声明游标\n\tdeclare my_cursor cursor for select empno,ename,sal from dept a,emp b where a.deptno=b.deptno and a.dname=in_dname;\n -- 打开游标\n\topen my_cursor;\n -- 通过游标获取值\n-- \tfetch my_cursor into var_empno,var_ename,var_sal;\n-- \tselect var_empno,var_ename,var_sal;  -- 注意:以上两句只可以获取一个数据,因为游标是一次一行,所以采用循环\n\tlabel:loop\n\t\tfetch my_cursor into var_empno,var_ename,var_sal;\n\t\tselect var_empno,var_ename,var_sal; \n\tend loop label;\n -- 关闭游标\n close my_cursor;\nend$$\ndelimiter ;\n\ncall proc19_cursor('销售部');\n</code></pre>\n<h1><a id=\"HANDLER_434\"></a>异常处理-HANDLER句柄</h1>\n<p>MySQL存储过程也提供了对异常处理的功能:通过定义HANDLER来完成异常声明的实现</p>\n<p><strong>格式</strong></p>\n<p>在语法中,变量声明、游标声明、handler声明必须按照先后顺序书写的,否则创建存储过程出错</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\43882f3db16b4789ba4a71ef88874b58.png\"/></p>\n<p>DECALARE handler_action 创建句柄</p>\n<p>FOR 后面为条件值,为什么异常提供处理</p>\n<p>statment 当没有数据发现这个异常发生时采取什么措施</p>\n<p>handler_action :{<!-- --></p>\n<p>CONTINUE 继续执行</p>\n<p>EXIT 退出</p>\n<p>UNDO 取消(目前MySQL不支持)</p>\n<p>}</p>\n<p>condition_value :{<!-- --></p>\n<p>mysql_error_code 错误码</p>\n<p>condition 条件名</p>\n<p>SQLWARNING SQL警告</p>\n<p>NOT FOUND 数据没有发现</p>\n<p>SQLEXCEPTION SQL异常</p>\n<p>}</p>\n<pre><code>/*用于测试句柄,改造上面游标代码会出现1329错误代码的情况*/\n-- 操作游标(cursor)\n-- 声明游标\n-- 打开游标\n-- 通过游标获取值\n-- 关闭游标\n-- 需求:输入一个部门名,查询该部门员工的编号、名字、薪资,将查询的结果集添加游标\ndelimiter $$\ncreate procedure proc21_cursor_handler(in in_danme varchar(50))\nbegin\n -- 定义局部变量\n\tdeclare var_empno int;\n\tdeclare var_ename varchar(50);\n\tdeclare var_sal decimal(7,2);\n -- 定义标记值\n\tdeclare flag int default 1;\n -- 声明游标\n\tdeclare my_cursor cursor for select empno,ename,sal from dept a,emp b where a.deptno=b.deptno and a.dname=in_dname;\n -- 定义句柄:定义异常的处理方式\n /*\n 1:异常处理完之后,程序应该如何执行\n\t\tcontinue :继续执行剩余代码\n\t\texit:直接终止程序\n\t\tundo:不支持\n 2:触发条件\n\t\t条件码:1329.....\n\t\t条件名:\n\t\t\t\t\tSQLWARNING\n\t\t\t\t\tNOT FOUND\n\t\t\t\t\tSQLEXCEPTION\n 3:异常触发之后执行什么代码\n\t\t设置flag的值 -&gt; 0 \n */\n  declare continue handler for 1329 set flag=0 ;\n -- 打开游标\n\topen my_cursor;\n -- 通过游标获取值\n-- \tfetch my_cursor into var_empno,var_ename,var_sal;\n-- \tselect var_empno,var_ename,var_sal;  -- 注意:以上两句只可以获取一个数据,因为游标是一次一行,所以采用循环\n\tlabel:loop\n\t\tfetch my_cursor into var_empno,var_ename,var_sal;\n\t\t-- 判断flag的值如果为1则执行,否则不执行\n\t\tif flag =1 then \n\t\t select var_empno,var_ename,var_sal; \n\t\telse leave label;\n\t\tend if;\n\tend loop label;\n -- 关闭游标\n close my_cursor;\nend$$\ndelimiter ;\n\ncall proc19_cursor('销售部');\n</code></pre>\n<p>先自我介绍一下，小编13年上师交大毕业，曾经在小公司待过，去过华为OPPO等大厂，18年进入阿里，直到现在。深知大多数初中级java工程师，想要升技能，往往是需要自己摸索成长或是报班学习，但对于培训机构动则近万元的学费，着实压力不小。自己不成体系的自学效率很低又漫长，而且容易碰到天花板技术停止不前。因此我收集了一份《java开发全套学习资料》送给大家，初衷也很简单，就是希望帮助到想自学又不知道该从何学起的朋友，同时减轻大家的负担。添加下方名片，即可获取全套学习资料哦</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-07-29 19:14:22", "summary": "目录概念特性格式创建存储过程定义变量局部变量用户变量系统变量存储过程存储过程传参存储过程传参存储过程传参流程控制流程控制判断流程控制语句控制流程循环循环循环循环游标异常处理句柄概念版本开始支持存储过程"}