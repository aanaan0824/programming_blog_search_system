{"blogid": "121790020", "writerAge": "码龄4年", "writerBlogNum": "48", "writerCollect": "564", "writerComment": "50", "writerFan": "62", "writerGrade": "4级", "writerIntegral": "1190", "writerName": "yg@hunter", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_121790020.jpg", "writerRankTotal": "65236", "writerRankWeekly": "59535", "writerThumb": "119", "writerVisitNum": "132754", "blog_read_count": "1383", "blog_time": "于 2021-12-09 16:31:58 发布", "blog_title": "编译rust for linux内核源码（5.16.0-rc3）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E4%B8%80%E3%80%81%E8%8E%B7%E5%8F%96rust-for-linux%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81%E8%8E%B7%E5%8F%96rust-for-linux%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81\">一、获取rust-for-linux内核源码</a></p>\n<p id=\"%E4%BA%8C%E3%80%81%E7%BC%96%E8%AF%91%E6%9E%84%E5%BB%BA%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81%E7%BC%96%E8%AF%91%E6%9E%84%E5%BB%BA%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2\">二、编译构建内核源码环境部署</a></p>\n<p id=\"1%E3%80%81%E5%9F%BA%E6%9C%AC%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%A5%97%E4%BB%B6%E5%AE%89%E8%A3%85-toc\" style=\"margin-left:40px;\"><a href=\"#1%E3%80%81%E5%9F%BA%E6%9C%AC%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%A5%97%E4%BB%B6%E5%AE%89%E8%A3%85\">1、基本开发环境套件安装</a></p>\n<p id=\"2%E3%80%81%E9%A2%9D%E5%A4%96%E8%A6%81%E5%AE%89%E8%A3%85%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%8C%85-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81%E9%A2%9D%E5%A4%96%E8%A6%81%E5%AE%89%E8%A3%85%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%8C%85\">2、额外要安装的软件包</a></p>\n<p id=\"3%E3%80%81%E5%AE%89%E8%A3%85llvm%2Fclang%E5%A5%97%E4%BB%B6-toc\" style=\"margin-left:40px;\"><a href=\"#3%E3%80%81%E5%AE%89%E8%A3%85llvm%2Fclang%E5%A5%97%E4%BB%B6\">3、安装llvm/clang套件</a></p>\n<p id=\"4%E3%80%81%E5%AE%89%E8%A3%85rustup-toc\" style=\"margin-left:40px;\"><a href=\"#4%E3%80%81%E5%AE%89%E8%A3%85rustup\">4、安装rustup</a></p>\n<p id=\"%E2%91%A0%E5%AE%89%E8%A3%85rustup%E6%AF%94%E8%BE%83%E7%AE%80%E5%8D%95%EF%BC%8C%E7%9B%B4%E6%8E%A5%E6%89%A7%E8%A1%8C%E5%A6%82%E4%B8%8B%E5%91%BD%E4%BB%A4-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%91%A0%E5%AE%89%E8%A3%85rustup%E6%AF%94%E8%BE%83%E7%AE%80%E5%8D%95%EF%BC%8C%E7%9B%B4%E6%8E%A5%E6%89%A7%E8%A1%8C%E5%A6%82%E4%B8%8B%E5%91%BD%E4%BB%A4\">①、安装rustup比较简单，直接执行如下命令</a></p>\n<p id=\"%E2%91%A1%E3%80%81%E9%85%8D%E7%BD%AErustup%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%94%9F%E6%95%88-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%91%A1%E3%80%81%E9%85%8D%E7%BD%AErustup%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%94%9F%E6%95%88\">②、配置rustup环境变量生效</a></p>\n<p id=\"%E2%91%A2%E3%80%81%E5%AE%89%E8%A3%85%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%ACrustc%EF%BC%8C%E7%9B%AE%E5%89%8D%E4%B8%BA1.57.0-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%91%A2%E3%80%81%E5%AE%89%E8%A3%85%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%ACrustc%EF%BC%8C%E7%9B%AE%E5%89%8D%E4%B8%BA1.57.0\">③、安装指定版本rustc，目前为1.57.0</a></p>\n<p id=\"%E2%91%A3%E3%80%81%E4%B8%8B%E8%BD%BDrust%E6%A0%87%E5%87%86%E5%BA%93%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%91%A3%E3%80%81%E4%B8%8B%E8%BD%BDrust%E6%A0%87%E5%87%86%E5%BA%93%E4%BB%A3%E7%A0%81\">④、下载rust标准库代码</a></p>\n<p id=\"%E2%91%A4%E3%80%81%E5%AE%89%E8%A3%85bindgen-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%91%A4%E3%80%81%E5%AE%89%E8%A3%85bindgen\">⑤、安装bindgen</a></p>\n<p id=\"5%E3%80%81%E7%A3%81%E7%9B%98%E5%AE%B9%E9%87%8F%E6%A3%80%E6%9F%A5%E5%8F%8A%E6%89%A9%E5%AE%B9-toc\" style=\"margin-left:40px;\"><a href=\"#5%E3%80%81%E7%A3%81%E7%9B%98%E5%AE%B9%E9%87%8F%E6%A3%80%E6%9F%A5%E5%8F%8A%E6%89%A9%E5%AE%B9\">5、磁盘容量检查及扩容</a></p>\n<p id=\"%E4%B8%89%E3%80%81%E9%85%8D%E7%BD%AE%E5%90%AF%E7%94%A8%E6%94%AF%E6%8C%81rust%E7%9A%84%E5%86%85%E6%A0%B8%E5%8F%82%E6%95%B0-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%89%E3%80%81%E9%85%8D%E7%BD%AE%E5%90%AF%E7%94%A8%E6%94%AF%E6%8C%81rust%E7%9A%84%E5%86%85%E6%A0%B8%E5%8F%82%E6%95%B0\">三、配置启用支持rust的内核参数</a></p>\n<p id=\"1%E3%80%81%E5%A4%8D%E7%94%A8%E6%9C%AC%E6%9C%BAconfig%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:40px;\"><a href=\"#1%E3%80%81%E5%A4%8D%E7%94%A8%E6%9C%AC%E6%9C%BAconfig%E6%96%87%E4%BB%B6\">1、复用本机config文件</a></p>\n<p id=\"2%E3%80%81%E6%89%A7%E8%A1%8Cmake%20menuconfig%E5%90%AF%E7%94%A8rust%E6%94%AF%E6%8C%81-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81%E6%89%A7%E8%A1%8Cmake%20menuconfig%E5%90%AF%E7%94%A8rust%E6%94%AF%E6%8C%81\">2、执行make menuconfig启用rust支持</a></p>\n<p id=\"%E2%91%A0%E3%80%81General%20setup-%3ERust%20support%20%E5%90%AF%E7%94%A8-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%91%A0%E3%80%81General%20setup-%3ERust%20support%20%E5%90%AF%E7%94%A8\">①、General setup-&gt;Rust support 启用</a></p>\n<p id=\"%E2%91%A1%E3%80%81Kernel%20hacking-%3Esample%20kernel%20code-%3ERust%20sample-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%91%A1%E3%80%81Kernel%20hacking-%3Esample%20kernel%20code-%3ERust%20sample\">②、Kernel hacking-&gt;Sample kernel code-&gt;Rust sample 启用</a></p>\n<p id=\"%C2%A0%E2%91%A2%E3%80%81Kernel%20hacking-%3ECompile-time%20checks%20and%20cimpiler%20options-%3ECompile%20the%20kernel%20with%20debug%20info%20%E7%A6%81%E7%94%A8-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E2%91%A2%E3%80%81Kernel%20hacking-%3ECompile-time%20checks%20and%20cimpiler%20options-%3ECompile%20the%20kernel%20with%20debug%20info%20%E7%A6%81%E7%94%A8\">③、Kernel hacking-&gt;Compile-time checks and compiler options-&gt;Compile the kernel with debug info 禁用</a></p>\n<p id=\"%E5%9B%9B%E3%80%81%E7%BC%96%E8%AF%91rust-for-linux%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%9B%9B%E3%80%81%E7%BC%96%E8%AF%91rust-for-linux%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81\">四、编译rust-for-linux内核源码</a></p>\n<p id=\"%E4%BA%94%E3%80%81%E7%BC%96%E8%AF%91%E7%94%9F%E6%88%90%E5%86%85%E6%A0%B8%E5%8E%8B%E7%BC%A9%E9%95%9C%E5%83%8F-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%94%E3%80%81%E7%BC%96%E8%AF%91%E7%94%9F%E6%88%90%E5%86%85%E6%A0%B8%E5%8E%8B%E7%BC%A9%E9%95%9C%E5%83%8F\">五、编译生成内核压缩镜像</a></p>\n<p id=\"%E5%85%AD%E3%80%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E6%96%B0%E7%94%9F%E6%88%90%E7%9A%84%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%EF%BC%88%E9%A9%B1%E5%8A%A8%EF%BC%89-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%85%AD%E3%80%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E6%96%B0%E7%94%9F%E6%88%90%E7%9A%84%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%EF%BC%88%E9%A9%B1%E5%8A%A8%EF%BC%89\">六、编译安装新生成的内核模块（驱动）</a></p>\n<p id=\"%E4%B8%83%E3%80%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E6%96%B0%E5%86%85%E6%A0%B8-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%83%E3%80%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E6%96%B0%E5%86%85%E6%A0%B8\">七、编译安装新内核</a></p>\n<p id=\"%E5%85%AB%E3%80%81%E4%BF%AE%E6%94%B9%E5%BC%95%E5%AF%BC%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%85%AB%E3%80%81%E4%BF%AE%E6%94%B9%E5%BC%95%E5%AF%BC%E6%96%87%E4%BB%B6\">八、修改内核引导项</a></p>\n<p id=\"%E4%B9%9D%E3%80%81%20%E9%87%8D%E5%90%AF%E7%B3%BB%E7%BB%9F%E7%94%9F%E6%95%88-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B9%9D%E3%80%81%20%E9%87%8D%E5%90%AF%E7%B3%BB%E7%BB%9F%E7%94%9F%E6%95%88\">九、 重启系统生效</a></p>\n<hr id=\"hr-toc\"/>\n<p>编译linux内核源码，我在<a class=\"link-info\" href=\"https://blog.csdn.net/weixin_42915431/article/details/121775873?spm=1001.2014.3001.5501\" title=\"这篇文章\">这篇文章</a>中有详细介绍。本文针对rust for linux内核源码进行编译，跟主线版本的linux编译稍有不同，因为引入了rust，编译rust需要安装相关工具，以下部分会详细介绍如何编译rust for linux。</p>\n<p></p>\n<p>本文编译环境为Fedora server 35 x86_64：</p>\n<pre><code>[root@fedora-yg ~]# uname -a\nLinux fedora-yg 5.14.10-300.fc35.x86_64 #1 SMP Thu Oct 7 20:48:44 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux\n[root@fedora-yg ~]# \n[root@fedora-yg ~]# cat /etc/os-release |head -4\nNAME=\"Fedora Linux\"\nVERSION=\"35 (Server Edition)\"\nID=fedora\nVERSION_ID=35\n[root@fedora-yg ~]# \n[root@fedora-yg ~]# cat /etc/fedora-release \nFedora release 35 (Thirty Five)\n[root@fedora-yg ~]# \n[root@fedora-yg ~]# cat /proc/version \nLinux version 5.14.10-300.fc35.x86_64 (mockbuild@bkernel01.iad2.fedoraproject.org) (gcc (GCC) 11.2.1 20210728 (Red Hat 11.2.1-1), GNU ld version 2.37-10.fc35) #1 SMP Thu Oct 7 20:48:44 UTC 2021\n[root@fedora-yg ~]# </code></pre>\n<p></p>\n<h1 id=\"%E4%B8%80%E3%80%81%E8%8E%B7%E5%8F%96rust-for-linux%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81\">一、获取rust-for-linux内核源码</h1>\n<p>可以直接使用git clone<a class=\"link-info\" href=\"https://github.com/Rust-for-Linux/linux\" title=\"官网https://github.com/Rust-for-Linux/linux\">官网https://github.com/Rust-for-Linux/linux</a>，由于git clone比较慢，我是<a class=\"link-info\" href=\"https://codeload.github.com/Rust-for-Linux/linux/zip/refs/heads/rust\" title=\"下载zip包\">下载zip包</a>，然后解压到本地：</p>\n<p><img alt=\"\" height=\"220\" src=\"..\\..\\static\\image\\07f7f91bf6fb42debe9b53270c5749c4.png\" width=\"1176\"/></p>\n<p>注：我这里用的commit是：</p>\n<pre><span style=\"color:#fe2c24;\">675846f923385f32310b61f0409581d89806273d</span></pre>\n<p>可以拉取最新版的内核源码即可。</p>\n<p id=\"%C2%A0\"></p>\n<h1 id=\"%E4%BA%8C%E3%80%81%E7%BC%96%E8%AF%91%E6%9E%84%E5%BB%BA%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2\">二、编译构建内核源码环境部署</h1>\n<h2 id=\"1%E3%80%81%E5%9F%BA%E6%9C%AC%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%A5%97%E4%BB%B6%E5%AE%89%E8%A3%85\">1、基本开发环境套件安装</h2>\n<pre><code>[root@fedora-yg linux-rust]# dnf group install \"Development Tools\"</code></pre>\n<h2 id=\"2%E3%80%81%E9%A2%9D%E5%A4%96%E8%A6%81%E5%AE%89%E8%A3%85%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%8C%85\">2、额外要安装的软件包</h2>\n<pre><code>[root@fedora-yg linux-rust]# dnf install ncurses-devel zstd bison flex elfutils-libelf-devel openssl-devel</code></pre>\n<h2 id=\"3%E3%80%81%E5%AE%89%E8%A3%85llvm%2Fclang%E5%A5%97%E4%BB%B6\">3、安装llvm/clang套件</h2>\n<p>rust代码编译依赖llvm/clang套件，故还需要安装llvm/clang套件</p>\n<pre><code>[root@fedora-yg linux-rust]# dnf install llvm clang lld</code></pre>\n<p><span style=\"color:#fe2c24;\">注：编译rust for linux内核源码需要llvm/clang版本在10.0.1及以上版本；编译内核时需要加CC=clang或者LLVM=1.</span></p>\n<p></p>\n<h2 id=\"4%E3%80%81%E5%AE%89%E8%A3%85rustup\">4、安装rustup</h2>\n<h3 id=\"%E2%91%A0%E5%AE%89%E8%A3%85rustup%E6%AF%94%E8%BE%83%E7%AE%80%E5%8D%95%EF%BC%8C%E7%9B%B4%E6%8E%A5%E6%89%A7%E8%A1%8C%E5%A6%82%E4%B8%8B%E5%91%BD%E4%BB%A4\">①、安装rustup比较简单，直接执行如下命令</h3>\n<blockquote>\n<p>curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh</p>\n</blockquote>\n<pre><code>[root@fedora-yg linux-rust]# curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\ninfo: downloading installer\n\nWelcome to Rust!\n\nThis will download and install the official compiler for the Rust\nprogramming language, and its package manager, Cargo.\n\nRustup metadata and toolchains will be installed into the Rustup\nhome directory, located at:\n\n  /root/.rustup\n\nThis can be modified with the RUSTUP_HOME environment variable.\n\nThe Cargo home directory located at:\n\n  /root/.cargo\n\nThis can be modified with the CARGO_HOME environment variable.\n\nThe cargo, rustc, rustup and other commands will be added to\nCargo's bin directory, located at:\n\n  /root/.cargo/bin\n\nThis path will then be added to your PATH environment variable by\nmodifying the profile files located at:\n\n  /root/.profile\n  /root/.bash_profile\n  /root/.bashrc\n\nYou can uninstall at any time with rustup self uninstall and\nthese changes will be reverted.\n\nCurrent installation options:\n\n\n   default host triple: x86_64-unknown-linux-gnu\n     default toolchain: stable (default)\n               profile: default\n  modify PATH variable: yes\n\n1) Proceed with installation (default)\n2) Customize installation\n3) Cancel installation\n&gt;\n\ninfo: profile set to 'default'\ninfo: default host triple is x86_64-unknown-linux-gnu\ninfo: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n686.2 KiB / 686.2 KiB (100 %) 127.9 KiB/s in  7s ETA:  0s\ninfo: latest update on 2021-12-02, rust version 1.57.0 (f1edd0429 2021-11-29)\ninfo: downloading component 'cargo'\n  6.3 MiB /   6.3 MiB (100 %)  72.1 KiB/s in  1m 17s ETA:  0s\n\n   .\n   .\n   .\n\n  stable-x86_64-unknown-linux-gnu installed - rustc 1.57.0 (f1edd0429 2021-11-29)\n\n\nRust is installed now. Great!\n\nTo get started you may need to restart your current shell.\nThis would reload your PATH environment variable to include\nCargo's bin directory ($HOME/.cargo/bin).\n\nTo configure your current shell, run:\nsource $HOME/.cargo/env\n[root@fedora-yg linux-rust]# </code></pre>\n<h3 id=\"%E2%91%A1%E3%80%81%E9%85%8D%E7%BD%AErustup%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%94%9F%E6%95%88\">②、配置rustup环境变量生效</h3>\n<pre><code>[root@fedora-yg linux-rust]# source /root/.cargo/env \n[root@fedora-yg linux-rust]# </code></pre>\n<h3 id=\"%E2%91%A2%E3%80%81%E5%AE%89%E8%A3%85%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%ACrustc%EF%BC%8C%E7%9B%AE%E5%89%8D%E4%B8%BA1.57.0\">③、安装指定版本rustc，目前为1.57.0</h3>\n<p><span style=\"color:#fe2c24;\"><strong>注：rustup override set 1.57.0命令要在内核源码根目录执行</strong></span></p>\n<pre><code>[root@fedora-yg linux-rust]# rustup override set 1.57.0\ninfo: syncing channel updates for '1.57.0-x86_64-unknown-linux-gnu'\n686.2 KiB / 686.2 KiB (100 %) 223.7 KiB/s in  3s ETA:  0s\ninfo: latest update on 2021-12-02, rust version 1.57.0 (f1edd0429 2021-11-29)\ninfo: downloading component 'cargo'\n.\n.\n.\ninfo: installing component 'rust-std'\n 24.9 MiB /  24.9 MiB (100 %)  11.2 MiB/s in  2s ETA:  0s\ninfo: installing component 'rustc'\n 53.9 MiB /  53.9 MiB (100 %)  13.1 MiB/s in  4s ETA:  0s\ninfo: installing component 'rustfmt'\ninfo: override toolchain for '/home/linux-rust' set to '1.57.0-x86_64-unknown-linux-gnu'\n\n  1.57.0-x86_64-unknown-linux-gnu installed - rustc 1.57.0 (f1edd0429 2021-11-29)\n\n[root@fedora-yg linux-rust]# </code></pre>\n<h3 id=\"%E2%91%A3%E3%80%81%E4%B8%8B%E8%BD%BDrust%E6%A0%87%E5%87%86%E5%BA%93%E4%BB%A3%E7%A0%81\">④、下载rust标准库代码</h3>\n<pre><code>[root@fedora-yg linux-rust]# rustup component add rust-src\ninfo: downloading component 'rust-src'\ninfo: installing component 'rust-src'\n[root@fedora-yg linux-rust]#</code></pre>\n<h3 id=\"%E2%91%A4%E3%80%81%E5%AE%89%E8%A3%85bindgen\">⑤、安装bindgen</h3>\n<p>需要安装指定版本的bindgen包，目前为0.56：</p>\n<pre><code>[root@fedora-yg linux-rust]# cargo install --locked --version 0.56.0 bindgen\n    Updating crates.io index\n  Downloaded bindgen v0.56.0\n  Downloaded 1 crate (198.3 KB) in 3.09s\n  Installing bindgen v0.56.0\n  Downloaded glob v0.3.0\n   ...\n   ...\n   ...\n   Compiling regex v1.4.2\n   Compiling clap v2.33.3\n   Compiling cexpr v0.4.0\n   Compiling env_logger v0.8.1\n    Finished release [optimized] target(s) in 4m 21s\n  Installing /root/.cargo/bin/bindgen\n   Installed package `bindgen v0.56.0` (executable `bindgen`)\n[root@fedora-yg linux-rust]# </code></pre>\n<h2 id=\"5%E3%80%81%E7%A3%81%E7%9B%98%E5%AE%B9%E9%87%8F%E6%A3%80%E6%9F%A5%E5%8F%8A%E6%89%A9%E5%AE%B9\">5、磁盘容量检查及扩容</h2>\n<p><span style=\"color:#faa572;\">执行df -h查看要编译的内核源码所在分区</span><span style=\"color:#fe2c24;\">剩余磁盘容量</span><span style=\"color:#faa572;\">，如果大于10G的话，此步骤可以跳过。</span></p>\n<p>安装Fedora server 35的时候，如果你没有手动修改磁盘配置，则默认只分配15G给/根目录，剩余可用就6.8GB了，这个容量编译内核是不够的，make执行半天会给你报个no space left on disk错误，然后终止编译，所以还是需要先扩容根目录（源码所在磁盘分区）。</p>\n<pre><code>[root@fedora ~]# df -h\n文件系统                        容量  已用  可用 已用% 挂载点\ndevtmpfs                        1.9G     0  1.9G    0% /dev\ntmpfs                           1.9G     0  1.9G    0% /dev/shm\ntmpfs                           777M  1.5M  776M    1% /run\n/dev/mapper/fedora_fedora-root   15G  8.3G  6.8G   55% /\ntmpfs                           1.9G  4.0K  1.9G    1% /tmp\n/dev/sda1                      1014M  196M  819M   20% /boot\ntmpfs                           389M     0  389M    0% /run/user/0\n[root@fedora ~]# </code></pre>\n<p>可以看到根目录只有15G，但是我创建虚拟机的时候是配置了60G的：</p>\n<pre><code>[root@fedora ~]# fdisk -l\nDisk /dev/sda：60 GiB，64424509440 字节，125829120 个扇区\n磁盘型号：VMware Virtual S\n单元：扇区 / 1 * 512 = 512 字节\n扇区大小(逻辑/物理)：512 字节 / 512 字节\nI/O 大小(最小/最佳)：512 字节 / 512 字节\n磁盘标签类型：dos\n磁盘标识符：0x70b5f1da\n\n设备       启动    起点      末尾      扇区 大小 Id 类型\n/dev/sda1  *       2048   2099199   2097152   1G 83 Linux\n/dev/sda2       2099200 125829119 123729920  59G 8e Linux LVM\n\n\nDisk /dev/mapper/fedora_fedora-root：15 GiB，16106127360 字节，31457280 个扇区\n单元：扇区 / 1 * 512 = 512 字节\n扇区大小(逻辑/物理)：512 字节 / 512 字节\nI/O 大小(最小/最佳)：512 字节 / 512 字节\n\n\nDisk /dev/zram0：3.79 GiB，4070572032 字节，993792 个扇区\n单元：扇区 / 1 * 4096 = 4096 字节\n扇区大小(逻辑/物理)：4096 字节 / 4096 字节\nI/O 大小(最小/最佳)：4096 字节 / 4096 字节\n[root@fedora ~]# </code></pre>\n<p>可以看出/dev/sda2有59G，但是只给/分配了15G。</p>\n<p>因为是lvm管理方式，我们可以先vgdisplay -v查看下：</p>\n<pre><code>[root@fedora ~]# vgdisplay -v\n  --- Volume group ---\n  VG Name               fedora_fedora\n  System ID             \n  Format                lvm2\n  Metadata Areas        1\n  Metadata Sequence No  2\n  VG Access             read/write\n  VG Status             resizable\n  MAX LV                0\n  Cur LV                1\n  Open LV               1\n  Max PV                0\n  Cur PV                1\n  Act PV                1\n  VG Size               &lt;59.00 GiB\n  PE Size               4.00 MiB\n  Total PE              15103\n  Alloc PE / Size       3840 / 15.00 GiB\n  Free  PE / Size       11263 / &lt;44.00 GiB\n  VG UUID               ps339S-G9Qu-pL0E-kQrH-iwL4-sSML-7pZrcD\n   \n  --- Logical volume ---\n  LV Path                /dev/fedora_fedora/root\n  LV Name                root\n  VG Name                fedora_fedora\n  LV UUID                93KIqS-Wfji-N97j-ISe0-6j3y-mXRS-vT33fc\n  LV Write Access        read/write\n  LV Creation host, time fedora, 2021-12-05 19:11:56 +0800\n  LV Status              available\n  # open                 1\n  LV Size                15.00 GiB\n  Current LE             3840\n  Segments               1\n  Allocation             inherit\n  Read ahead sectors     auto\n  - currently set to     256\n  Block device           253:0\n   \n  --- Physical volumes ---\n  PV Name               /dev/sda2     \n  PV UUID               XPmIl8-V0WJ-Vp8i-5cOS-mdD0-VDaQ-RDzXLY\n  PV Status             allocatable\n  Total PE / Free PE    15103 / 11263\n   \n[root@fedora ~]#</code></pre>\n<p>可以看到卷组fedora_fedora只分配出去15G，空闲约44.00 GiB，可以直接执行lvextent扩容，下面是给/dev/fedora_fedora/root增加40G：</p>\n<pre><code>[root@fedora ~]# lvextend -L +40G /dev/fedora_fedora/root \n  Size of logical volume fedora_fedora/root changed from 15.00 GiB (3840 extents) to 55.00 GiB (14080 extents).\n  Logical volume fedora_fedora/root successfully resized.\n[root@fedora ~]# </code></pre>\n<p>之后需要执行resize2fs或者xfs_growfs使修改生效，因为我这里扩容的/dev/fedora_fedora/root是xfs文件系统类型，所以执行xfs_growfs命令：</p>\n<pre><code>[root@fedora ~]# xfs_growfs /dev/fedora_fedora/root \nmeta-data=/dev/mapper/fedora_fedora-root isize=512    agcount=4, agsize=983040 blks\n         =                       sectsz=512   attr=2, projid32bit=1\n         =                       crc=1        finobt=1, sparse=1, rmapbt=0\n         =                       reflink=1    bigtime=0 inobtcount=0\ndata     =                       bsize=4096   blocks=3932160, imaxpct=25\n         =                       sunit=0      swidth=0 blks\nnaming   =version 2              bsize=4096   ascii-ci=0, ftype=1\nlog      =internal log           bsize=4096   blocks=2560, version=2\n         =                       sectsz=512   sunit=0 blks, lazy-count=1\nrealtime =none                   extsz=4096   blocks=0, rtextents=0\ndata blocks changed from 3932160 to 14417920\n[root@fedora ~]# </code></pre>\n<p>此时，再查看下根目录容量，已经生效：</p>\n<pre><code>[root@fedora ~]# df -h\n文件系统                        容量  已用  可用 已用% 挂载点\ndevtmpfs                        1.9G     0  1.9G    0% /dev\ntmpfs                           1.9G     0  1.9G    0% /dev/shm\ntmpfs                           777M  1.5M  776M    1% /run\n/dev/mapper/fedora_fedora-root   55G  8.5G   47G   16% /\ntmpfs                           1.9G  4.0K  1.9G    1% /tmp\n/dev/sda1                      1014M  196M  819M   20% /boot\ntmpfs                           389M     0  389M    0% /run/user/0\n[root@fedora ~]# </code></pre>\n<p id=\"\"></p>\n<h1 id=\"%E4%B8%89%E3%80%81%E9%85%8D%E7%BD%AE%E5%90%AF%E7%94%A8%E6%94%AF%E6%8C%81rust%E7%9A%84%E5%86%85%E6%A0%B8%E5%8F%82%E6%95%B0\">三、配置启用支持rust的内核参数</h1>\n<h2 id=\"1%E3%80%81%E5%A4%8D%E7%94%A8%E6%9C%AC%E6%9C%BAconfig%E6%96%87%E4%BB%B6\">1、复用本机config文件</h2>\n<pre><code>[root@fedora-yg linux-rust]# cp -v /boot/config-5.14.10-300.fc35.x86_64 .config\n'/boot/config-5.14.10-300.fc35.x86_64' -&gt; '.config'\n[root@fedora-yg linux-rust]# </code></pre>\n<h2 id=\"2%E3%80%81%E6%89%A7%E8%A1%8Cmake%20menuconfig%E5%90%AF%E7%94%A8rust%E6%94%AF%E6%8C%81\">2、执行make menuconfig启用rust支持</h2>\n<h3 id=\"%E2%91%A0%E3%80%81General%20setup-%3ERust%20support%20%E5%90%AF%E7%94%A8\">①、General setup-&gt;Rust support 启用</h3>\n<p><img alt=\"\" height=\"569\" src=\"..\\..\\static\\image\\cfbfbd0f74c94b8588a8ee2e96bfbbaf.png\" width=\"1192\"/></p>\n<p></p>\n<h3 id=\"%E2%91%A1%E3%80%81Kernel%20hacking-%3Esample%20kernel%20code-%3ERust%20sample\">②、Kernel hacking-&gt;Sample kernel code-&gt;Rust sample 启用</h3>\n<p><img alt=\"\" height=\"571\" src=\"..\\..\\static\\image\\da14f3eb19d94ccd94630f35b5439f89.png\" width=\"1196\"/></p>\n<h3 id=\"%C2%A0%E2%91%A2%E3%80%81Kernel%20hacking-%3ECompile-time%20checks%20and%20cimpiler%20options-%3ECompile%20the%20kernel%20with%20debug%20info%20%E7%A6%81%E7%94%A8\">③、Kernel hacking-&gt;Compile-time checks and compiler options-&gt;Compile the kernel with debug info 禁用</h3>\n<p><img alt=\"\" height=\"568\" src=\"..\\..\\static\\image\\f6f2f1ededde446fa66f90893ffc03de.png\" width=\"1194\"/></p>\n<p>这个选项是要禁用掉的，具体原因我在<a class=\"link-info\" href=\"https://blog.csdn.net/weixin_42915431/article/details/121775873\" title=\"这篇文章\">这篇文章</a>解释过。 </p>\n<p>④、退出并保存配置</p>\n<p><img alt=\"\" height=\"486\" src=\"..\\..\\static\\image\\9d8241853ac14b799683de768cdaa150.png\" width=\"1141\"/></p>\n<p></p>\n<h1 id=\"%E5%9B%9B%E3%80%81%E7%BC%96%E8%AF%91rust-for-linux%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81\">四、编译rust-for-linux内核源码</h1>\n<p> 编译之前，先贴下我机器的编译工具版本：</p>\n<p><img alt=\"\" height=\"487\" src=\"..\\..\\static\\image\\71e076e678544aa8869f519ee1cf6009.png\" width=\"1200\"/></p>\n<p></p>\n<p> 下面开始编译，我虚拟机配了4核cpu，这里加-j4加速编译：</p>\n<pre><code>[root@fedora-yg linux-rust]# make LLVM=1 -j4</code></pre>\n<p><img alt=\"\" height=\"824\" src=\"..\\..\\static\\image\\52ce127ec2ae444a9d64c241d519d9a9.png\" width=\"883\"/></p>\n<p> 上面几个选项可以随便选，接下来就是漫长的等待了（看机器性能了，可能需要数十分钟到数小时）。</p>\n<p><strong><span style=\"color:#fe2c24;\">注：如果编译过程出现报错，最简单的方法就是全部清理下，重新配置内核参数重新编译（从头来过）。</span></strong></p>\n<p>比如我就遇到下面这个报错：</p>\n<pre><code>\n  HDRINST usr/include/linux/hash_info.h\nmake[1]: *** No rule to make target '/root/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/lib.rs', needed by 'rust/core.o'.  Stop.\nmake: *** [Makefile:1271: prepare0] Error 2\nmake: *** Waiting for unfinished jobs....\n  HDRINST usr/include/linux/hdlc.h\n  HDRINST usr/include/linux/hdlc/ioctl.h</code></pre>\n<p>重新清理配置后编译就好了：</p>\n<pre><code>[root@fedora-yg linux-rust]# make mrproper\n  CLEAN   arch/x86/tools\n  CLEAN   usr/include\n  CLEAN   scripts/basic\n  CLEAN   scripts/kconfig\n  CLEAN   scripts/mod\n  CLEAN   scripts/selinux/genheaders\n  CLEAN   scripts/selinux/mdp\n  CLEAN   scripts\n  CLEAN   include/config include/generated arch/x86/include/generated .config .config.old\n[root@fedora-yg linux-rust]# \n[root@fedora-yg linux-rust]# make clean\n[root@fedora-yg linux-rust]# \n[root@fedora-yg linux-rust]# cp -v /boot/config-5.14.10-300.fc35.x86_64 .config\n'/boot/config-5.14.10-300.fc35.x86_64' -&gt; '.config'\n[root@fedora-yg linux-rust]# \n[root@fedora-yg linux-rust]# make menuconfig\n  HOSTCC  scripts/basic/fixdep\n  UPD     scripts/kconfig/mconf-cfg\n  HOSTCC  scripts/kconfig/mconf.o\n  HOSTCC  scripts/kconfig/lxdialog/checklist.o\n  HOSTCC  scripts/kconfig/lxdialog/inputbox.o\n  HOSTCC  scripts/kconfig/lxdialog/menubox.o\n  HOSTCC  scripts/kconfig/lxdialog/textbox.o\n  HOSTCC  scripts/kconfig/lxdialog/util.o\n  HOSTCC  scripts/kconfig/lxdialog/yesno.o\n  HOSTCC  scripts/kconfig/confdata.o\n  HOSTCC  scripts/kconfig/expr.o\n  LEX     scripts/kconfig/lexer.lex.c\n  YACC    scripts/kconfig/parser.tab.[ch]\n  HOSTCC  scripts/kconfig/lexer.lex.o\n  HOSTCC  scripts/kconfig/menu.o\n  HOSTCC  scripts/kconfig/parser.tab.o\n  HOSTCC  scripts/kconfig/preprocess.o\n  HOSTCC  scripts/kconfig/symbol.o\n  HOSTCC  scripts/kconfig/util.o\n  HOSTLD  scripts/kconfig/mconf\n  x x                                  -*-   Include all symbols in kallsyms                                                                    x x  \n  x x                                  [*] Enable userfaultfd() system call                                                                     x x  \n  x x                                  [ ] Embedded system                                                                                      x x  \n  x x                                      Kernel Performance Events And Counters  ---&gt;                                                         x x  \n  x x                                  [ ] Disable heap randomization                                                                           x x  \n  x x                                      Choose SLAB allocator (SLUB (Unqueued Allocator))  ---&gt;                                              x x  \n  x x                                  [ ] Allow slab caches to be merged                                                                       x x  \n  x x                                  [*] Randomize slab freelist                                                                              x x  \n  x x                                  [*] Harden slab freelist metadata                                                                        x x  \n  x x                                  [*] Page allocator randomization                                                                         x x  \n  x x                                  [*] SLUB per cpu partial cache                                                                           x x  \n  x x                                  [*] Profiling support                                                                                    x x  \nconfiguration written to .config\n\n*** End of the configuration.\n*** Execute 'make' to start the build or try 'make help'.\n\n[root@fedora-yg linux-rust]# \n[root@fedora-yg linux-rust]# \n[root@fedora-yg linux-rust]# \n[root@fedora-yg linux-rust]# \n[root@fedora-yg linux-rust]# make LLVM=1 -j4\n  HOSTCC  scripts/basic/fixdep\n  UPD     scripts/kconfig/mconf-cfg\n  HOSTCC  scripts/kconfig/mconf.o\n  HOSTCC  scripts/kconfig/lxdialog/checklist.o\n</code></pre>\n<p>漫长等待后，make执行完：</p>\n<pre><code>\n  LD [M]  sound/synth/emux/snd-emux-synth.ko\n  LD [M]  sound/synth/snd-util-mem.ko\n  LD [M]  sound/usb/6fire/snd-usb-6fire.ko\n  LD [M]  sound/usb/bcd2000/snd-bcd2000.ko\n  LD [M]  sound/usb/caiaq/snd-usb-caiaq.ko\n  LD [M]  sound/usb/hiface/snd-usb-hiface.ko\n  LD [M]  sound/usb/line6/snd-usb-line6.ko\n  LD [M]  sound/usb/line6/snd-usb-pod.ko\n  LD [M]  sound/usb/line6/snd-usb-podhd.ko\n  LD [M]  sound/usb/line6/snd-usb-toneport.ko\n  LD [M]  sound/usb/line6/snd-usb-variax.ko\n  LD [M]  sound/usb/misc/snd-ua101.ko\n  LD [M]  sound/usb/snd-usb-audio.ko\n  LD [M]  sound/usb/snd-usbmidi-lib.ko\n  LD [M]  sound/usb/usx2y/snd-usb-us122l.ko\n  LD [M]  sound/usb/usx2y/snd-usb-usx2y.ko\n  LD [M]  sound/virtio/virtio_snd.ko\n  LD [M]  sound/x86/snd-hdmi-lpe-audio.ko\n  LD [M]  sound/xen/snd_xen_front.ko\n  LD [M]  virt/lib/irqbypass.ko\n[root@fedora-yg linux-rust]# </code></pre>\n<p id=\"\"></p>\n<h1 id=\"%E4%BA%94%E3%80%81%E7%BC%96%E8%AF%91%E7%94%9F%E6%88%90%E5%86%85%E6%A0%B8%E5%8E%8B%E7%BC%A9%E9%95%9C%E5%83%8F\">五、编译生成内核压缩镜像</h1>\n<p>make成功后，此时，先<span style=\"color:#ed7976;\">检查下在arch/x86/boot/下有没有生成bzImage</span>， 如果在arch/x86/boot/下没有生成bzImage的话，后面在make install会报错：</p>\n<pre><code>[root@fedora-yg linux-rust]# make install\nsh ./arch/x86/boot/install.sh 5.16.0-rc3 \\\n        arch/x86/boot/bzImage System.map \"/boot\"\n\n *** Missing file: arch/x86/boot/bzImage\n *** You need to run \"make\" before \"make install\".\n\nmake: *** [arch/x86/Makefile:262: install] Error 1\n[root@fedora-yg linux-rust]#</code></pre>\n<p>ls查看arch/x86/boot/bzImage文件并没有生成：</p>\n<pre><code>[root@fedora-yg linux-rust]# ls arch/x86/boot/bzImage\nls: cannot access 'arch/x86/boot/bzImage': No such file or directory\n[root@fedora-yg linux-rust]# </code></pre>\n<p>此时还需执行命令生成内核压缩镜像：</p>\n<pre><code>[root@fedora-yg linux-rust]# make LLVM=1 bzImage</code></pre>\n<p><img alt=\"\" height=\"500\" src=\"..\\..\\static\\image\\8cb49f604c634f64ad9aad7f8f9313be.png\" width=\"892\"/></p>\n<p>因为我之前没有安装zstd，然后这步出错了：</p>\n<p><img alt=\"\" height=\"214\" src=\"..\\..\\static\\image\\a4e61afd916e455fa49337e969182174.png\" width=\"939\"/></p>\n<p>安装之后，重新make LLVM=1 bzImage:<br/><img alt=\"\" height=\"622\" src=\"..\\..\\static\\image\\cadd176fd9074de68f1c0966943da4b8.png\" width=\"983\"/> 可以看到bzImage已经生成。</p>\n<p></p>\n<h1 id=\"%E5%85%AD%E3%80%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E6%96%B0%E7%94%9F%E6%88%90%E7%9A%84%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%EF%BC%88%E9%A9%B1%E5%8A%A8%EF%BC%89\">六、编译安装新生成的内核模块（驱动）</h1>\n<p>执行如下命令：</p>\n<pre><code>[root@fedora-yg linux-rust]# make modules_install</code></pre>\n<p>输出如下：</p>\n<pre><code>[root@fedora-yg linux-rust]# make modules_install\n  INSTALL /lib/modules/5.16.0-rc3/kernel/arch/x86/crypto/aegis128-aesni.ko\n  SIGN    /lib/modules/5.16.0-rc3/kernel/arch/x86/crypto/aegis128-aesni.ko\n  INSTALL /lib/modules/5.16.0-rc3/kernel/arch/x86/crypto/blake2s-x86_64.ko\n  SIGN    /lib/modules/5.16.0-rc3/kernel/arch/x86/crypto/blake2s-x86_64.ko\n  INSTALL /lib/modules/5.16.0-rc3/kernel/arch/x86/crypto/blowfish-x86_64.ko\n  SIGN    /lib/modules/5.16.0-rc3/kernel/arch/x86/crypto/blowfish-x86_64.ko\n  INSTALL /lib/modules/5.16.0-rc3/kernel/arch/x86/crypto/camellia-aesni-avx-x86_64.ko\n  SIGN    /lib/modules/5.16.0-rc3/kernel/arch/x86/crypto/camellia-aesni-avx-x86_64.ko\n  INSTALL /lib/modules/5.16.0-rc3/kernel/arch/x86/crypto/camellia-aesni-avx2.ko\n  SIGN    /lib/modules/5.16.0-rc3/kernel/arch/x86/crypto/camellia-aesni-avx2.ko\n  INSTALL /lib/modules/5.16.0-rc3/kernel/arch/x86/crypto/camellia-x86_64.ko\n  SIGN    /lib/modules/5.16.0-rc3/kernel/arch/x86/crypto/camellia-x86_64.ko\n  .\n  .\n  .\n  INSTALL /lib/modules/5.16.0-rc3/kernel/sound/usb/line6/snd-usb-variax.ko\n  SIGN    /lib/modules/5.16.0-rc3/kernel/sound/usb/line6/snd-usb-variax.ko\n  INSTALL /lib/modules/5.16.0-rc3/kernel/sound/usb/misc/snd-ua101.ko\n  SIGN    /lib/modules/5.16.0-rc3/kernel/sound/usb/misc/snd-ua101.ko\n  INSTALL /lib/modules/5.16.0-rc3/kernel/sound/usb/snd-usb-audio.ko\n  SIGN    /lib/modules/5.16.0-rc3/kernel/sound/usb/snd-usb-audio.ko\n  INSTALL /lib/modules/5.16.0-rc3/kernel/sound/usb/snd-usbmidi-lib.ko\n  SIGN    /lib/modules/5.16.0-rc3/kernel/sound/usb/snd-usbmidi-lib.ko\n  INSTALL /lib/modules/5.16.0-rc3/kernel/sound/usb/usx2y/snd-usb-us122l.ko\n  SIGN    /lib/modules/5.16.0-rc3/kernel/sound/usb/usx2y/snd-usb-us122l.ko\n  INSTALL /lib/modules/5.16.0-rc3/kernel/sound/usb/usx2y/snd-usb-usx2y.ko\n  SIGN    /lib/modules/5.16.0-rc3/kernel/sound/usb/usx2y/snd-usb-usx2y.ko\n  INSTALL /lib/modules/5.16.0-rc3/kernel/sound/virtio/virtio_snd.ko\n  SIGN    /lib/modules/5.16.0-rc3/kernel/sound/virtio/virtio_snd.ko\n  INSTALL /lib/modules/5.16.0-rc3/kernel/sound/x86/snd-hdmi-lpe-audio.ko\n  SIGN    /lib/modules/5.16.0-rc3/kernel/sound/x86/snd-hdmi-lpe-audio.ko\n  INSTALL /lib/modules/5.16.0-rc3/kernel/sound/xen/snd_xen_front.ko\n  SIGN    /lib/modules/5.16.0-rc3/kernel/sound/xen/snd_xen_front.ko\n  INSTALL /lib/modules/5.16.0-rc3/kernel/virt/lib/irqbypass.ko\n  SIGN    /lib/modules/5.16.0-rc3/kernel/virt/lib/irqbypass.ko\n  DEPMOD  /lib/modules/5.16.0-rc3\n[root@fedora-yg linux-rust]# </code></pre>\n<p></p>\n<h1 id=\"%E4%B8%83%E3%80%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E6%96%B0%E5%86%85%E6%A0%B8\">七、编译安装新内核</h1>\n<p>执行如下命令：</p>\n<pre><code>[root@fedora-yg linux-rust]# make install\nsh ./arch/x86/boot/install.sh 5.16.0-rc3 \\\n        arch/x86/boot/bzImage System.map \"/boot\"\n[root@fedora-yg linux-rust]# </code></pre>\n<p></p>\n<p><img alt=\"\" height=\"49\" src=\"..\\..\\static\\image\\453a0eda8f604af8a676716d3c5d0f59.png\" width=\"476\"/></p>\n<p></p>\n<p>此时可以看到/boot下面已经有了我们新编译的<span style=\"color:#b95514;\">5.16.0-rc3</span>内核版本相关的文件了：</p>\n<p><img alt=\"\" height=\"243\" src=\"..\\..\\static\\image\\8acc98ec465348f6a123836606f48305.png\" width=\"1049\"/></p>\n<p></p>\n<h1 id=\"%E5%85%AB%E3%80%81%E4%BF%AE%E6%94%B9%E5%BC%95%E5%AF%BC%E6%96%87%E4%BB%B6\">八、修改内核引导项</h1>\n<p>Fedora及其衍生系统RHEL/CentOS/Oracle linux等上可以使用grub2-mkconfig(旧版本系统可以使用grub-mkconfig)命令来更新内核引导项：</p>\n<p><img alt=\"\" height=\"124\" src=\"..\\..\\static\\image\\82e382d01e7a4b6483ce864a68c0b206.png\" width=\"633\"/></p>\n<p>修改后使用grubby命令查看修改效果。</p>\n<p></p>\n<h1 id=\"%E4%B9%9D%E3%80%81%20%E9%87%8D%E5%90%AF%E7%B3%BB%E7%BB%9F%E7%94%9F%E6%95%88\">九、 重启系统生效</h1>\n<pre><code>[root@fedora-yg ~]# reboot</code></pre>\n<p><img alt=\"\" height=\"398\" src=\"..\\..\\static\\image\\c9561579f3a244499db7209f5f093c8d.png\" width=\"719\"/></p>\n<p> 可以看到，前面新编译生成的内核已经在默认启动项了，进去系统后，执行uname -a看下内核版本：</p>\n<pre><code>[root@fedora-yg ~]# uname -a\nLinux fedora 5.16.0-rc3 #3 SMP PREEMPT Tue Dec 9 10:35:32 CST 2021 x86_64 x86_64 x86_64 GNU/Linux\n[root@fedora-yg ~]# </code></pre>\n<p>到此，大功告成，接下来我们可以在此系统上使用rust编写内核模块了。</p>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-12-09 16:31:58", "summary": "目录一、获取内核源码二、编译构建内核源码环境部署、基本开发环境套件安装、额外要安装的软件包、安装套件、安装、安装比较简单，直接执行如下命令、配置环境变量生效、安装指定版本，目前为、下载标准库代码、安装"}