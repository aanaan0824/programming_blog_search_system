{"blogid": "125690334", "writerAge": "码龄1年", "writerBlogNum": "103", "writerCollect": "5466", "writerComment": "4193", "writerFan": "7302", "writerGrade": "7级", "writerIntegral": "13154", "writerName": "三分苦", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125690334.jpg", "writerRankTotal": "783", "writerRankWeekly": "296", "writerThumb": "4503", "writerVisitNum": "116091", "blog_read_count": "614", "blog_time": "已于 2022-08-03 22:06:20 修改", "blog_title": "【 C++ 】vector的常用接口说明", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"1%E3%80%81vector%E4%BB%8B%E7%BB%8D-toc\" style=\"margin-left:80px;\"><a href=\"#1%E3%80%81vector%E4%BB%8B%E7%BB%8D\">1、vector介绍</a></p>\n<p id=\"22-toc\" style=\"margin-left:80px;\"><a href=\"#22\">2、vector的使用</a></p>\n<p id=\"33-toc\" style=\"margin-left:80px;\"><a href=\"#33\">     </a> <a href=\"#33\">2.1、vector的定义</a></p>\n<p id=\"44-toc\" style=\"margin-left:80px;\">      <a href=\"#44\">2.2、vector的遍历</a></p>\n<p id=\"55-toc\" style=\"margin-left:80px;\">                <a href=\"#55\">operator[ ]</a></p>\n<p id=\"66-toc\" style=\"margin-left:80px;\">                <a href=\"#66\">迭代器</a></p>\n<p id=\"77-toc\" style=\"margin-left:80px;\">                <a href=\"#77\">范围for</a></p>\n<p id=\"88-toc\" style=\"margin-left:80px;\">      <a href=\"#88\">2.3、vector的空间增长问题</a></p>\n<p id=\"99-toc\" style=\"margin-left:80px;\">                <a href=\"#99\">size和capacity</a></p>\n<p id=\"1010-toc\" style=\"margin-left:80px;\">                <a href=\"#1010\">max_size</a></p>\n<p id=\"1111-toc\" style=\"margin-left:80px;\">                <a href=\"#1111\">reserve</a></p>\n<p id=\"2222-toc\" style=\"margin-left:80px;\">                <a href=\"#2222\">resize</a></p>\n<p id=\"3333-toc\" style=\"margin-left:80px;\">      <a href=\"#3333\">2.4、vector的增删查改</a></p>\n<p id=\"4444-toc\" style=\"margin-left:80px;\">                <a href=\"#4444\">push_back 和 pop_back</a></p>\n<p id=\"5555-toc\" style=\"margin-left:80px;\">                <a href=\"#5555\">insert和 erase</a></p>\n<p id=\"6666-toc\" style=\"margin-left:80px;\">                <a href=\"#6666\">find</a></p>\n<p id=\"7777-toc\" style=\"margin-left:80px;\">                <a href=\"#7777\">sort</a></p>\n<hr/>\n<h3>1、vector介绍</h3>\n<blockquote>\n<ol><li>vector是表示可变大小数组的序列容器。</li><li>就像数组一样，vector也采用的连续存储空间来存储元素。也就是意味着可以采用下标对vector的元素进行访问，和数组一样高效。但是又不像数组，它的大小是可以动态改变的，而且它的大小会被容器自动处理。</li><li>本质讲，vector使用动态分配数组来存储它的元素。当新元素插入时候，这个数组需要被重新分配大小。为了增加存储空间。其做法是，分配一个新的数组，然后将全部元素移到这个数组。就时间而言，这是一个相对代价高的任务，因为每当一个新的元素加入到容器的时候，vector并不会每次都重新分配大小。</li><li>vector分配空间策略：vector会分配一些额外的空间以适应可能的增长，因为存储空间比实际需要的存储空间更大。不同的库采用不同的策略权衡空间的使用和重新分配。但是无论如何，重新分配都应该是对数增长的间隔大小，以至于在末尾插入一个元素的时候是在常数时间的复杂度完成的。</li><li>因此，vector占用了更多的存储空间，为了获得管理存储空间的能力，并且以一种有效的方式动态增长。</li><li>与其它动态序列容器相比（deques, lists and forward_lists）， vector在访问元素的时候更加高效，在末尾添加和删除元素相对高效。对于其它不在末尾的删除和插入操作，效率更低。比起lists和forward_lists统一的迭代器和引用更好。</li></ol>\n</blockquote>\n<hr/>\n<h3 id=\"22\">2、vector的使用</h3>\n<h3 id=\"33\">2.1、vector的定义</h3>\n<blockquote>\n<table border=\"2\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:617px;\"><tbody><tr><td style=\"width:406px;\"><span style=\"color:#0d0016;\"><strong>（constructor）构造函数声明</strong></span></td><td style=\"width:209px;\"><span style=\"color:#0d0016;\"><strong>接口说明</strong></span></td></tr><tr><td style=\"width:406px;\"><span style=\"color:#0d0016;\">1、</span><span style=\"color:#956fe7;\">vector() </span><span style=\"color:#0d0016;\">重点</span></td><td style=\"width:209px;\"><span style=\"color:#0d0016;\">无参构造</span></td></tr><tr><td style=\"width:406px;\"><span style=\"color:#0d0016;\">2、</span><span style=\"color:#956fe7;\">vector（size_type n, const value_type&amp; val = value_type()）</span></td><td style=\"width:209px;\"><span style=\"color:#0d0016;\">构造并初始化n个val</span></td></tr><tr><td style=\"width:406px;\"><span style=\"color:#0d0016;\">3、</span><span style=\"color:#956fe7;\">vector (const vector&amp; x); </span><span style=\"color:#0d0016;\">（重点）</span></td><td style=\"width:209px;\"><span style=\"color:#0d0016;\">拷贝构造</span></td></tr><tr><td style=\"width:406px;\"><span style=\"color:#0d0016;\">4、</span><span style=\"color:#956fe7;\">vector (InputIterator first, InputIterator last);</span></td><td style=\"width:209px;\"><span style=\"color:#0d0016;\">使用迭代器进行初始化构造</span></td></tr></tbody></table>\n<p><span style=\"color:#0d0016;\"><strong>示例：</strong></span></p>\n<ul><li>1、<span style=\"color:#956fe7;\">vector()</span> 无参构造</li></ul>\n<pre><code class=\"language-cpp\">int main()\n{\n\tvector&lt;int&gt; v1;//存储int类型数据\n\tv1.push_back(1);\n\tvector&lt;double&gt; v2;\n\tv2.push_back(1.1);//存储double类型数据\n\tvector&lt;string&gt; v3;\n\tv3.push_back(\"hello world\");//存储string类型数据\n}</code></pre>\n<ul><li>2、<span style=\"color:#956fe7;\">vector（size_type n, const value_type&amp; val = value_type()）</span><span style=\"color:#0d0016;\">构造并初始化n个val</span></li></ul>\n<pre><code class=\"language-cpp\">vector&lt;int&gt; v1(10, 5);//用10个5来初始化v1</code></pre>\n<ul><li><span style=\"color:#0d0016;\">3、</span><span style=\"color:#956fe7;\">vector (const vector&amp; x); </span> 拷贝构造</li></ul>\n<pre><code class=\"language-cpp\">vector&lt;int&gt; v1(10, 5);//用10个5来初始化v1\nvector&lt;int&gt; v2(v1);//用v1去拷贝构造v2</code></pre>\n<ul><li>4、<span style=\"color:#956fe7;\">vector (InputIterator first, InputIterator last); </span><span style=\"color:#0d0016;\">使用迭代器进行初始化构造</span></li></ul>\n<pre><code class=\"language-cpp\">vector&lt;int&gt; v1(10, 5);//用10个5来初始化v1\nvector&lt;int&gt; v3(v1.begin(), v1.end());//使用迭代器拷贝构造v2的数据</code></pre>\n<p>还可以通过迭代器初始化来获得string的字符串</p>\n<pre><code class=\"language-cpp\">string s = \"hello world\";\nvector&lt;char&gt; v(s.begin(), s.end());</code></pre>\n</blockquote>\n<hr/>\n<h3 id=\"44\">2.2、vector的遍历</h3>\n<blockquote>\n<table border=\"2\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:526px;\"><tbody><tr><td style=\"width:188px;\"><span style=\"color:#0d0016;\"><strong>接口名称</strong></span></td><td style=\"width:336px;\"><span style=\"color:#0d0016;\"><strong>使用说明</strong></span></td></tr><tr><td style=\"width:188px;\"><span style=\"color:#0d0016;\">1、</span><span style=\"color:#956fe7;\">operator[ ]</span></td><td style=\"width:336px;\"><span style=\"color:#0d0016;\">下标 + [ ]</span></td></tr><tr><td style=\"width:188px;\"><span style=\"color:#0d0016;\">2、</span><span style=\"color:#956fe7;\">迭代器</span></td><td style=\"width:336px;\"><span style=\"color:#0d0016;\">begin + end 或 rbrgin + rend</span></td></tr><tr><td style=\"width:188px;\"><span style=\"color:#0d0016;\">3、</span><span style=\"color:#956fe7;\">范围for</span></td><td style=\"width:336px;\"><span style=\"color:#0d0016;\">底层还是借用迭代器实现</span></td></tr></tbody></table>\n</blockquote>\n<h3 id=\"55\">operator[ ]</h3>\n<blockquote>\n<p>operator[ ]就是对[ ]的重载，是我们可以像C语言那样使用下标 + [ ]去访问元素。</p>\n<pre><code class=\"language-cpp\">void test()\n{\n\tvector&lt;int&gt; v;\n\tv.push_back(1);\n\tv.push_back(2);\n\tv.push_back(3);\n\tv.push_back(4);\n\tfor (size_t i = 0; i &lt; v.size(); i++)\n\t{\n\t\tv[i] += 1;\n\t\tcout &lt;&lt; v[i] &lt;&lt; \" \"; // 2 3 4 5\n\t}\n}</code></pre>\n</blockquote>\n<h3 id=\"66\">迭代器</h3>\n<blockquote>\n<p> vector的迭代器和string的迭代器近乎一致，规则也都类似。</p>\n<table border=\"2\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:583px;\"><tbody><tr><td style=\"text-align:center;width:134px;\"><strong><span style=\"color:#0d0016;\">iterator的使用</span></strong></td><td style=\"text-align:center;width:446px;\"><strong><span style=\"color:#0d0016;\">接口说明</span></strong></td></tr><tr><td style=\"width:134px;\"><span style=\"color:#0d0016;\">1、</span><span style=\"color:#956fe7;\">begin + end</span></td><td style=\"width:446px;\"> <p><span style=\"color:#0d0016;\">begin获取第一个数据位置的iterator/const_iterator，</span></p> <p><span style=\"color:#0d0016;\">end获取最后一个数据的下一个位置的iterator/const_iterator</span></p> </td></tr><tr><td style=\"width:134px;\"><span style=\"color:#0d0016;\">2、</span><span style=\"color:#956fe7;\">rbegin + rend</span></td><td style=\"width:446px;\"> <p><span style=\"color:#0d0016;\">rbegin获取最后一个数据位置的reverse_iterator，</span></p> <p><span style=\"color:#0d0016;\">rend获取第一个数据前一个位置的reverse_iterator</span></p> </td></tr></tbody></table>\n<p></p>\n<p><img alt=\"\" height=\"190\" src=\"..\\..\\static\\image\\4d6b3b9760d74fceb84d3a14ca2e7f40.png\" width=\"680\"/></p>\n<ul><li><span style=\"color:#0d0016;\"><span style=\"background-color:#edf6e8;\">正向迭代器：</span></span></li></ul>\n<pre><code class=\"language-cpp\">void test2()\n{\n\tvector&lt;int&gt; v;\n\tv.push_back(1);\n\tv.push_back(2);\n\tv.push_back(3);\n\tv.push_back(4);\n\t//2、迭代器\n\tvector&lt;int&gt;::iterator it = v.begin();\n\twhile (it != v.end())\n\t{\n\t\t*it -= 2;\n\t\tcout &lt;&lt; *it &lt;&lt; \" \"; // -1 0 1 2\n\t\tit++;\n\t}\n}</code></pre>\n<ul><li><span style=\"color:#0d0016;\"><span style=\"background-color:#edf6e8;\">反向迭代器：</span></span></li></ul>\n<pre><code class=\"language-cpp\">void test()\n{\n\tvector&lt;int&gt; v(10, 5);\n\tvector&lt;int&gt;::reverse_iterator rit = v.rbegin();\n\twhile (rit != v.rend())\n\t{\n\t\tcout &lt;&lt; *rit &lt;&lt; \" \";\n\t\trit++;\n\t}\n}</code></pre>\n</blockquote>\n<h3 id=\"77\">范围for</h3>\n<blockquote>\n<p>范围for的底层就是替换了迭代器，先前string类已经实现过。</p>\n<pre><code class=\"language-cpp\">​3、范围for\nvoid test()\n{\n\tvector&lt;int&gt; v;\n\tv.push_back(1);\n\tv.push_back(2);\n\tv.push_back(3);\n\tv.push_back(4);\n\t//3、范围for\n\tfor (auto e : v)\n\t{\n\t\tcout &lt;&lt; e &lt;&lt; \" \"; //1 2 3 4\n\t}\n}</code></pre>\n</blockquote>\n<hr/>\n<h3 id=\"88\">2.3、vector的空间增长问题</h3>\n<blockquote>\n<table border=\"2\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:584px;\"><tbody><tr><td style=\"width:241px;\"><strong><span style=\"color:#0d0016;\">容量空间</span></strong></td><td style=\"width:340px;\"><strong><span style=\"color:#0d0016;\">接口说明</span></strong></td></tr><tr><td style=\"width:241px;\"><span style=\"color:#0d0016;\">1、</span><span style=\"color:#956fe7;\">size</span></td><td style=\"width:340px;\"><span style=\"color:#0d0016;\">获取数据个数</span></td></tr><tr><td style=\"width:241px;\"><span style=\"color:#0d0016;\">2、</span><span style=\"color:#956fe7;\">capacity</span></td><td style=\"width:340px;\"><span style=\"color:#0d0016;\">获取容量大小</span></td></tr><tr><td style=\"width:241px;\"><span style=\"color:#0d0016;\">3、</span><span style=\"color:#956fe7;\">max_size</span></td><td style=\"width:340px;\"><span style=\"color:#0d0016;\">判断是否为空</span></td></tr><tr><td style=\"width:241px;\"><span style=\"color:#0d0016;\">4、</span><span style=\"color:#956fe7;\">resize</span></td><td style=\"width:340px;\"><span style=\"color:#0d0016;\">改变vector中的size</span></td></tr><tr><td style=\"width:241px;\"><span style=\"color:#0d0016;\">5、</span><span style=\"color:#956fe7;\">reserve</span></td><td style=\"width:340px;\"><span style=\"color:#0d0016;\">改变vector的capacity</span></td></tr></tbody></table>\n</blockquote>\n<h3 id=\"99\">size和capacity</h3>\n<blockquote>\n<p>vector的size是用来获取有效数据个数，而capacity就是获取容量大小：</p>\n<pre><code class=\"language-cpp\">void test()\n{\n\tvector&lt;int&gt; v(7, 5);\n\tcout &lt;&lt; v.size() &lt;&lt; endl;//7\n\tcout &lt;&lt; v.capacity() &lt;&lt; endl;//5\n}</code></pre>\n</blockquote>\n<h3 id=\"1010\">max_size</h3>\n<blockquote>\n<p>max_size的作用是返回vector容器可以容纳的最大元素数，用<span style=\"color:#956fe7;\">类型的最大值除以sizeof(类型）即max_size</span><span style=\"color:#494949;\">。</span></p>\n<pre><code class=\"language-cpp\">void test()\n{\n\tvector&lt;int&gt; v1;\n\tcout &lt;&lt; v1.max_size() &lt;&lt; endl;//1073741823\n\tvector&lt;char&gt; v2;\n\tcout &lt;&lt; v2.max_size() &lt;&lt; endl;//2147483647\n}</code></pre>\n</blockquote>\n<h3 id=\"1111\">reserve</h3>\n<blockquote>\n<p>reserve的作用是请求更改容量capacity。</p>\n<ol><li>如果 <em>n</em> 大于当前容量，则该函数会导致容器重新分配其存储，将其容量增加到 <em>n</em>（或更大）。</li><li>在所有其他情况下，函数调用不会导致重新分配，且容量不会受影响。</li></ol>\n<pre><code class=\"language-cpp\">void test()\n{\n\tvector&lt;int&gt; v(10, 5);\n\tcout &lt;&lt; v.capacity() &lt;&lt; endl;//10\n\t//如果n &gt; 当前容量大小，更新容量至n\n\tv.reserve(100);\n\tcout &lt;&lt; v.capacity() &lt;&lt; endl;//100\n\t//如果n &lt; 当前容量大小，不做出任何改动\n\tv.reserve(20);\n\tcout &lt;&lt; v.capacity() &lt;&lt; endl;//100\n}</code></pre>\n<ul><li><strong><span style=\"background-color:#fefcd8;\">补充：</span></strong></li></ul>\n<pre><code class=\"language-cpp\">void test()\n{\n\tsize_t sz;\n\tstd::vector&lt;int&gt; foo;\n\tsz = foo.capacity();\n\tstd::cout &lt;&lt; \"making foo grow:\\n\";\n\tfor (int i = 0; i &lt; 100; ++i) \n\t{ \n\t\tfoo.push_back(i);\n\t\tif (sz != foo.capacity()) \n\t\t{\n\t\t\tsz = foo.capacity();\n\t\t\tstd::cout &lt;&lt; \"capacity changed: \" &lt;&lt; sz &lt;&lt; '\\n';\n\t\t}\n\t}\n}</code></pre>\n<p><span style=\"color:#0d0016;\"><strong>测试结果如下：</strong></span></p>\n<p><img alt=\"\" height=\"357\" src=\"..\\..\\static\\image\\8354e8802e184949999ef525b5e821dc.png\" width=\"765\"/></p>\n<p>capacity的代码在vs和g++下分别运行会发现，<span style=\"color:#956fe7;\">vs下capacity是按1.5倍增长的</span>，<span style=\"color:#956fe7;\">g++是按2倍增长的</span>。vs是PJ版本STL，g++是SGI版本STL。</p>\n<ul><li><strong><span style=\"color:#fe2c24;\">为什么一定要按照1.5倍或2倍增长呢？</span></strong></li></ul>\n<p>答案：合适，单次增容越多，插入N个值，增容次数越少，效率就越高，但是浪费空间就越多。单次增容越少，就会导致频繁增容，效率低下。1.5倍或2倍是最平衡的做法。</p>\n</blockquote>\n<h3 id=\"2222\">resize</h3>\n<blockquote>\n<p>resize在空间的同时也进行了初始化。</p>\n<ol><li>如果 <em>n</em> 小于当前容器大 小，则内容将减少到其前 <em>n</em> 个元素，删除超出（并销毁）的元素。</li><li>如果 <em>n</em> 大于当前容器大小 ，则通过在末尾插入所需数量的元素以达到 <em>n</em> 的大小来扩展内容。如果指定了 <em>val</em>，则新元素将初始化为 <em>val</em> 的副本，否则，它们将进行值初始化。</li></ol>\n<pre><code class=\"language-cpp\">void test()\n{\n\tvector&lt;int&gt; v(10, 5);\n\tcout &lt;&lt; v.size() &lt;&lt; endl;//10\n\tcout &lt;&lt; v.capacity() &lt;&lt; endl;//10\n\t//如果n的大小 &gt; size和capacity，更新到n。超出的部分用1初始化\n\tv.resize(100, 1);\n\tcout &lt;&lt; v.size() &lt;&lt; endl;//100\n\tcout &lt;&lt; v.capacity() &lt;&lt; endl;//100\n\t//如果n的大小 &lt; size，更新size到n，容量capacity不变\n\tv.resize(50);\n\tcout &lt;&lt; v.size() &lt;&lt; endl;//50\n\tcout &lt;&lt; v.capacity() &lt;&lt; endl;//100\n\t//如果n的大小 &gt; size，且 &lt; capacity，更新size到n，容量capacity不变\n\tv.resize(70);\n\tcout &lt;&lt; v.size() &lt;&lt; endl;//50\n\tcout &lt;&lt; v.capacity() &lt;&lt; endl;//100\n}</code></pre>\n</blockquote>\n<hr/>\n<h3 id=\"3333\">2.4、vector的增删查改</h3>\n<blockquote>\n<table border=\"2\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:599px;\"><tbody><tr><td style=\"width:160px;\"><span style=\"color:#0d0016;\"><strong>vector增删查改</strong></span></td><td style=\"width:437px;\"><span style=\"color:#0d0016;\"><strong>接口说明</strong></span></td></tr><tr><td style=\"width:160px;\"><span style=\"color:#0d0016;\">1、</span><span style=\"color:#956fe7;\">push_back</span></td><td style=\"width:437px;\"><span style=\"color:#0d0016;\">尾插</span></td></tr><tr><td style=\"width:160px;\"><span style=\"color:#0d0016;\">2、</span><span style=\"color:#956fe7;\">pop_back</span></td><td style=\"width:437px;\"><span style=\"color:#0d0016;\">尾删</span></td></tr><tr><td style=\"width:160px;\"><span style=\"color:#0d0016;\">3、</span><span style=\"color:#956fe7;\">insert</span></td><td style=\"width:437px;\"><span style=\"color:#0d0016;\">在下标为pos的前面插入val</span></td></tr><tr><td style=\"width:160px;\"><span style=\"color:#0d0016;\">4、</span><span style=\"color:#956fe7;\">erase</span></td><td style=\"width:437px;\"><span style=\"color:#0d0016;\">删除下标为pos的值</span></td></tr><tr><td style=\"width:160px;\"><span style=\"color:#0d0016;\">1、find</span></td><td style=\"width:437px;\"><span style=\"color:#0d0016;\">查找。（注意这个是算法模块实现，不是vector的成员接口）</span></td></tr><tr><td style=\"width:160px;\"><span style=\"color:#0d0016;\">2、sort</span></td><td style=\"width:437px;\"><span style=\"color:#0d0016;\">排序。（注意这里也不是vector的函数接口，只是用于排序）</span></td></tr></tbody></table>\n</blockquote>\n<h3 id=\"4444\">push_back和pop_back</h3>\n<blockquote>\n<p>这俩接口和string类以及数据结构的没啥区别，这里简单给出测试用例：</p>\n<pre><code class=\"language-cpp\">void test()\n{\n\tvector&lt;int&gt; v;\n\tv.push_back(1);\n\tv.push_back(10);\n\tv.pop_back();\n\tv.pop_back();\n}</code></pre>\n</blockquote>\n<h3 id=\"5555\">insert和erase</h3>\n<blockquote>\n<p>insert就是在下标为pos的前面插入val，erase就是删除下标为pos的值</p>\n<pre><code class=\"language-cpp\">void test9()\n{\n\tvector&lt;int&gt; v;\n\tv.push_back(1);\n\tv.push_back(10);\n//insert\n\tv.insert(v.begin(), 0); //在下标为0的位置插入0\n\tv.insert(v.begin(), 2, -1);//在下标为0的位置往后插入两个-1\n\tfor (auto e : v)\n\t\tcout &lt;&lt; e &lt;&lt; \" \"; //-1 -1 0 1 10\n\tcout &lt;&lt; endl;\n\tv.insert(v.begin() + 3, 2);//在下标为3的位置插入2\n\tfor (auto e : v)\n\t\tcout &lt;&lt; e &lt;&lt; \" \"; //-1 -1 0 2 1 10\n\tcout &lt;&lt; endl;\n//erase\n\tv.erase(v.begin()); //头删\n\tfor (auto e : v)\n\t\tcout &lt;&lt; e &lt;&lt; \" \"; //-1 0 2 1 10\n\tcout &lt;&lt; endl;\n\tv.erase(v.begin() + 3); //删除下标为3的值\n\tfor (auto e : v)\n\t\tcout &lt;&lt; e &lt;&lt; \" \"; //-1 0 2 10\n\tcout &lt;&lt; endl;\n\t//删除在该迭代器区间内的元素（左闭右开）\n\tv.erase(v.begin(), v.begin() + 3);//删除下标[0, 3)左闭右开的值\n\tfor (auto e : v)\n\t\tcout &lt;&lt; e &lt;&lt; \" \";//10\n}</code></pre>\n</blockquote>\n<h3 id=\"6666\">find</h3>\n<blockquote>\n<p>这里的find并不是vector的成员函数，这个是算法模块实现。其本质就是<span style=\"color:#956fe7;\">在一段左闭右开的迭代器区间去寻找一个值</span>。找到了就返回它的迭代器，找不到就返回它的开区间那个迭代器。</p>\n<p> <img alt=\"\" height=\"50\" src=\"..\\..\\static\\image\\c0f1826602d14e709afe99f4fa279311.png\" width=\"898\"/> </p>\n<pre><code class=\"language-cpp\">void test()\n{\n\tvector&lt;int&gt; v;\n\tv.push_back(1);\n\tv.push_back(2);\n\tv.push_back(3);\n\tv.push_back(4);\n\t//vector&lt;int&gt;::iterator pos = find(v.begin(), v.end(), 3);\n\tauto pos = find(v.begin(), v.end(), 3);//调用find在左闭右开的区间内寻找val\n\tif (pos != v.end())\n\t{\n\t\tcout &lt;&lt; \"找到了\" &lt;&lt; endl;\n\t\tv.erase(pos);//找到后，把该值删掉\n\t}\n\telse\n\t{\n\t\tcout &lt;&lt; \"没有找到\" &lt;&lt; endl;\n\t}\n\tfor (auto e : v)\n\t\tcout &lt;&lt; e &lt;&lt; \" \"; //1 2 4\n}</code></pre>\n</blockquote>\n<h3 id=\"7777\">sort</h3>\n<blockquote>\n<p>sort函数也不是vector的成员函数，这里只是为了对vector创建的数据进行排序。</p>\n<p> <img alt=\"\" height=\"95\" src=\"..\\..\\static\\image\\10472f13fb714257b5cf0e19ee0b61be.png\" width=\"915\"/> </p>\n<pre><code class=\"language-cpp\">void test()\n{\n\tvector&lt;int&gt; v;\n\tv.push_back(1);\n\tv.push_back(-23);\n\tv.push_back(30);\n\tv.push_back(9);\n\tv.push_back(0);\n\tv.push_back(-90);\n//默认sort是升序\n\tsort(v.begin(), v.end());\n\tfor (auto e : v)\n\t\tcout &lt;&lt; e &lt;&lt; \" \"; //-90 -23 0 1 9 30\n\tcout &lt;&lt; endl;\n//要排降序，就要用到仿函数,具体是啥后续详谈\n\tsort(v.begin(), v.end(), greater&lt;int&gt;());\n\tfor (auto e : v)\n\t\tcout &lt;&lt; e &lt;&lt; \" \"; //30 9 1 0 -23 -90\n}</code></pre>\n</blockquote>\n</div>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-03 22:06:20", "summary": "目录、介绍、的使用、的定义、的遍历迭代器范围、的空间增长问题和、的增删查改和和、介绍是表示可变大小数组的序列容器。就像数组一样，也采用的连续存储空间来存储元素。也就是意味着可以采用下标对的元素进行访问"}