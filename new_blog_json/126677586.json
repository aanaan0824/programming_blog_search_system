{"blogid": "126677586", "writerAge": "码龄5年", "writerBlogNum": "239", "writerCollect": "470", "writerComment": "37", "writerFan": "42", "writerGrade": "6级", "writerIntegral": "4562", "writerName": "qq_1410888563", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126677586.jpg", "writerRankTotal": "4382", "writerRankWeekly": "27492", "writerThumb": "123", "writerVisitNum": "300150", "blog_read_count": "362", "blog_time": "于 2022-09-03 19:28:02 发布", "blog_title": "C++ 正则表达式(匹配、搜索、替换)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>首先C++的正则表达式的速度比boost的正则表达式的数据要慢很多。 </p>\n<p>链接： <a href=\"http://wjhsh.net/bbqzsl-p-13714008.html\" title=\"std::regex与boost::regex的性能差5倍，有profile有真相。\">std::regex与boost::regex的性能差5倍，有profile有真相。</a></p>\n<h1><span style=\"color:#fe2c24;\"> </span></h1>\n<h1><span style=\"color:#fe2c24;\">简单正则表达式的使用：</span></h1>\n<p>一：匹配 regex_match</p>\n<p>regex_match 要求的是内容完全匹配正则表达式，一个错误都不行。</p>\n<p><img alt=\"\" height=\"443\" src=\"..\\..\\static\\image\\2b2cf7a9522a41319dbc2fa1010cd691.png\" width=\"720\"/></p>\n<p> 二：搜索匹配 regex_search</p>\n<p>regex_search 要求的是只要内容中存在正则表达式的要求就是正确的。</p>\n<p><img alt=\"\" height=\"263\" src=\"..\\..\\static\\image\\9af09e1ab38c4567b28de8f0412c0463.png\" width=\"534\"/></p>\n<p>  三：匹配替代 regex_replace</p>\n<p>regex_replace 要求的是只要内容中存在正则表达式的要求就替换成新的文字</p>\n<p><img alt=\"\" height=\"192\" src=\"..\\..\\static\\image\\a0bb4e3083194893ac0a1d0c512297c4.png\" width=\"581\"/></p>\n<p></p>\n<h1><span style=\"color:#fe2c24;\">正则表达式特殊字符的处理</span></h1>\n<p>链接：<a href=\"https://blog.csdn.net/qq_38409301/article/details/126448539?spm=1001.2014.3001.5502\" title=\"BOOST学习：BOOST_FOREACH+boost::assign处理正则表达式（特殊字符$需要单独处理）_qq_1410888563的博客-CSDN博客\">BOOST学习：BOOST_FOREACH+boost::assign处理正则表达式（特殊字符$需要单独处理）_qq_1410888563的博客-CSDN博客</a></p>\n<p>正则表达式是存在特殊的字符，需要转义才能实现匹配、搜索、替换。 </p>\n<p><img alt=\"\" height=\"507\" src=\"..\\..\\static\\image\\7f792d8999764d319b6b9a4c9e490039.png\" width=\"688\"/></p>\n<p> <img alt=\"\" height=\"75\" src=\"..\\..\\static\\image\\9f790c48b1d149b5947e9627090567ee.png\" width=\"643\"/></p>\n<p></p>\n<h1> <span style=\"color:#fe2c24;\">正则表达式简单用例场景</span></h1>\n<p><span style=\"color:#fe2c24;\">1.输入正整数：string re = \"^\\\\d*$\"</span></p>\n<p><img alt=\"\" height=\"377\" src=\"..\\..\\static\\image\\04c9c7822e59457ab78cac3f5b08be85.png\" width=\"740\"/></p>\n<p> 2<span style=\"color:#fe2c24;\">.输入负整数： string re = \"^[-]\\\\d*$\";</span></p>\n<p><img alt=\"\" height=\"366\" src=\"..\\..\\static\\image\\5a6c78e5a2ce4db6baf5ac9a53cc86f0.png\" width=\"588\"/></p>\n<p>3.输入26个字母组成：string re = \"^[a-z]*$\";</p>\n<p><img alt=\"\" height=\"377\" src=\"..\\..\\static\\image\\4c466e50f0f74f058ee26d398c03b8e3.png\" width=\"740\"/></p>\n<p>4. 输入26个字母大小写组成： string re = \"^[a-zA-Z]*$\"; </p>\n<p> <img alt=\"\" height=\"390\" src=\"..\\..\\static\\image\\ef7600b4ca5645b8909bac32d47b86ad.png\" width=\"640\"/></p>\n<p> 5. 匹配需要的字符中间无论出现什么： string re = \"帮(.)*助\"; </p>\n<p><img alt=\"\" height=\"358\" src=\"..\\..\\static\\image\\5245c1b66a744e04b3e1ab4e41943eb4.png\" width=\"584\"/></p>\n<p>6.输入只带有一个小数点的数：  string re = \"^[-|\\\\d]\\\\d*[\\\\d|.]\\\\d*$\"; </p>\n<p> <img alt=\"\" height=\"367\" src=\"..\\..\\static\\image\\a7719c30cd5442cb87130c90bc6b12be.png\" width=\"578\"/></p>\n<p></p>\n</div>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-03 19:28:02", "summary": "首先的正则表达式的速度比的正则表达式的数据要慢很多。链接：与的性能差倍，有有真相。与的性能差倍，有有真相。简单正则表达式的使用：一：匹配要求的是内容完全匹配正则表达式，一个错误都不行。二：搜索匹配要求"}