{"blogid": "122277348", "writerAge": "码龄2年", "writerBlogNum": "210", "writerCollect": "20211", "writerComment": "5245", "writerFan": "31425", "writerGrade": "7级", "writerIntegral": "19343", "writerName": "2021dragon", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122277348.jpg", "writerRankTotal": "372", "writerRankWeekly": "448", "writerThumb": "9208", "writerVisitNum": "757449", "blog_read_count": "2760", "blog_time": "于 2022-01-07 11:45:22 发布", "blog_title": "STL详解（十二）—— unordered_set、unordered_map的介绍及使用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#unordered_1\">unordered系列关联式容器</a></li><li><a href=\"#unordered_set_3\">unordered_set的介绍</a></li><li><a href=\"#unordered_set_9\">unordered_set的使用</a></li><li><ul><li><a href=\"#unordered_set_10\">unordered_set的定义方式</a></li><li><a href=\"#unordered_set_24\">unordered_set接口的使用</a></li><li><a href=\"#unordered_multiset_99\">unordered_multiset</a></li></ul>\n</li><li><a href=\"#unordered_map_135\">unordered_map的介绍</a></li><li><a href=\"#unordered_map_144\">unordered_map的使用</a></li><li><ul><li><a href=\"#unordered_map_145\">unordered_map的定义方式</a></li><li><a href=\"#unordered_map_158\">unordered_map接口的使用</a></li><li><a href=\"#unordered_multimap_266\">unordered_multimap</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"unordered_1\"></a>unordered系列关联式容器</h1>\n<p>在C++98中，STL提供了底层为红黑树结构的一系列关联式容器，在查询时的效率可达到<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        O\n       \n       \n        (\n       \n       \n        l\n       \n       \n        o\n       \n       \n        g\n       \n       \n        N\n       \n       \n        )\n       \n      \n      \n       O(logN)\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right: 0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">g</span><span class=\"mord mathdefault\" style=\"margin-right: 0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span></span>，即最差情况下需要比较红黑树的高度次，当树中的结点非常多时，查询效率也不理想。最好的查询是，进行很少的比较次数就能够将元素找到，因此在C++11中，STL又提供了4个unordered系列的关联式容器，这四个容器与红黑树结构的关联式容器使用方式基本类似，只是其底层结构不同。</p>\n<h1><a id=\"unordered_set_3\"></a>unordered_set的介绍</h1>\n<ol><li>unordered_set是不按特定顺序存储键值的关联式容器，其允许通过键值快速的索引到对应的元素。</li><li>在unordered_set中，元素的值同时也是唯一地标识它的key。</li><li>在内部，unordered_set中的元素没有按照任何特定的顺序排序，为了能在常数范围内找到指定的key，unordered_set将相同哈希值的键值放在相同的桶中。</li><li>unordered_set容器通过key访问单个元素要比set快，但它通常在遍历元素子集的范围迭代方面效率较低。</li><li>它的迭代器至少是前向迭代器。</li></ol>\n<h1><a id=\"unordered_set_9\"></a>unordered_set的使用</h1>\n<h2><a id=\"unordered_set_10\"></a>unordered_set的定义方式</h2>\n<p><strong>方式一：</strong> 构造一个某类型的空容器。</p>\n<pre><code class=\"prism language-cpp\">unordered_set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> us1<span class=\"token punctuation\">;</span> <span class=\"token comment\">//构造int类型的空容器</span>\n</code></pre>\n<p><strong>方式二：</strong> 拷贝构造某同类型容器的复制品。</p>\n<pre><code class=\"prism language-cpp\">unordered_set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">us2</span><span class=\"token punctuation\">(</span>us1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//拷贝构造同类型容器us1的复制品</span>\n</code></pre>\n<p><strong>方式三：</strong> 使用迭代器拷贝构造某一段内容。</p>\n<pre><code class=\"prism language-cpp\">string <span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcedf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nunordered_set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">us3</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//构造string对象某段区间的复制品</span>\n</code></pre>\n<h2><a id=\"unordered_set_24\"></a>unordered_set接口的使用</h2>\n<p>unordered_set当中常用的成员函数如下：</p>\n<table><thead><tr><th>成员函数</th><th>功能</th></tr></thead><tbody><tr><td>insert</td><td>插入指定元素</td></tr><tr><td>erase</td><td>删除指定元素</td></tr><tr><td>find</td><td>查找指定元素</td></tr><tr><td>size</td><td>获取容器中元素的个数</td></tr><tr><td>empty</td><td>判断容器是否为空</td></tr><tr><td>clear</td><td>清空容器</td></tr><tr><td>swap</td><td>交换两个容器中的数据</td></tr><tr><td>count</td><td>获取容器中指定元素值的元素个数</td></tr></tbody></table>\n<p>unordered_set当中迭代器相关函数如下：</p>\n<table><thead><tr><th>成员函数</th><th>功能</th></tr></thead><tbody><tr><td>begin</td><td>获取容器中第一个元素的正向迭代器</td></tr><tr><td>end</td><td>获取容器中最后一个元素下一个位置的正向迭代器</td></tr></tbody></table>\n<p>使用示例：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_set&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tunordered_set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> us<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//插入元素（去重）</span>\n\tus<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tus<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tus<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tus<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tus<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tus<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tus<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//遍历容器方式一（范围for）</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> us<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//1 4 3 2</span>\n\t<span class=\"token comment\">//删除元素方式一</span>\n\tus<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//删除元素方式二</span>\n\tunordered_set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator pos <span class=\"token operator\">=</span> us<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//查找值为1的元素</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">!=</span> us<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tus<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//遍历容器方式二（迭代器遍历）</span>\n\tunordered_set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator it <span class=\"token operator\">=</span> us<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> us<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t\tit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//4 2</span>\n\t<span class=\"token comment\">//容器中值为2的元素个数</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> us<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//1</span>\n\t<span class=\"token comment\">//容器大小</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> us<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//2</span>\n\t<span class=\"token comment\">//清空容器</span>\n\tus<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//容器判空</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> us<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//1</span>\n\t<span class=\"token comment\">//交换两个容器的数据</span>\n\tunordered_set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> tmp<span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tus<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> us<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//11 22 33 44</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"unordered_multiset_99\"></a>unordered_multiset</h2>\n<p>unordered_multiset容器与unordered_set容器的底层数据结构是一样的，都是哈希表，其次，它们所提供的成员函数的接口都是基本一致的，这里就不再列举了，这两种容器唯一的区别就是，unordered_multiset容器允许键值冗余，即unordered_multiset容器当中存储的元素是可以重复的。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_set&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tunordered_multiset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> ums<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//插入元素（允许重复）</span>\n\tums<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tums<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tums<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tums<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tums<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tums<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tums<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> ums<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//1 4 3 3 3 2 2</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>由于unordered_multiset容器允许键值冗余，因此该容器中成员函数find和count的意义与unordered_set容器中的也有所不同：</p>\n<table><thead><tr><th>成员函数find</th><th>功能</th></tr></thead><tbody><tr><td>unordered_set容器</td><td>返回键值为val的元素的迭代器</td></tr><tr><td>unordered_multiset容器</td><td>返回底层哈希表中第一个找到的键值为val的元素的迭代器</td></tr></tbody></table>\n<table><thead><tr><th>成员函数count</th><th>功能</th></tr></thead><tbody><tr><td>unordered_set容器</td><td>键值为val的元素存在则返回1，不存在则返回0（find成员函数可替代）</td></tr><tr><td>unordered_multiset容器</td><td>返回键值为val的元素个数（find成员函数不可替代）</td></tr></tbody></table>\n<h1><a id=\"unordered_map_135\"></a>unordered_map的介绍</h1>\n<ol><li>unordered_map是存储&lt;key, value&gt;键值对的关联式容器，其允许通过key值快速的索引到与其对应是value。</li><li>在unordered_map中，键值通常用于唯一地标识元素，而映射值是一个对象，其内容与此键关联。键和映射值的类型可能不同。</li><li>在内部，unordered_map没有对&lt;key, value&gt;按照任何特定的顺序排序，为了能在常数范围内找到key所对应的value，unordered_map将相同哈希值的键值对放在相同的桶中。</li><li>unordered_map容器通过key访问单个元素要比map快，但它通常在遍历元素子集的范围迭代方面效率较低。</li><li>unordered_map实现了直接访问操作符（<code>operator[]</code>），它允许使用key作为参数直接访问value。</li><li>它的迭代器至少是前向迭代器。</li></ol>\n<h1><a id=\"unordered_map_144\"></a>unordered_map的使用</h1>\n<h2><a id=\"unordered_map_145\"></a>unordered_map的定义方式</h2>\n<p><strong>方式一：</strong> 指定key和value的类型构造一个空容器。</p>\n<pre><code class=\"prism language-cpp\">unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token operator\">&gt;</span> um1<span class=\"token punctuation\">;</span> <span class=\"token comment\">//构造一个key为int类型，value为double类型的空容器</span>\n</code></pre>\n<p><strong>方式二：</strong> 拷贝构造某同类型容器的复制品。</p>\n<pre><code class=\"prism language-cpp\">unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">um2</span><span class=\"token punctuation\">(</span>um1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//拷贝构造同类型容器um1的复制品</span>\n</code></pre>\n<p><strong>方式三：</strong> 使用迭代器拷贝构造某一段内容。</p>\n<pre><code class=\"prism language-cpp\">unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">um3</span><span class=\"token punctuation\">(</span>um2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> um2<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//使用迭代器拷贝构造um2容器某段区间的复制品</span>\n</code></pre>\n<h2><a id=\"unordered_map_158\"></a>unordered_map接口的使用</h2>\n<p>unordered_map当中常用的成员函数如下：</p>\n<table><thead><tr><th>成员函数</th><th>功能</th></tr></thead><tbody><tr><td>insert</td><td>插入键值对</td></tr><tr><td>erase</td><td>删除指定key值的键值对</td></tr><tr><td>find</td><td>查找指定key值的键值对</td></tr><tr><td>size</td><td>获取容器中元素的个数</td></tr><tr><td>empty</td><td>判断容器是否为空</td></tr><tr><td>clear</td><td>清空容器</td></tr><tr><td>swap</td><td>交换两个容器中的数据</td></tr><tr><td>count</td><td>获取容器中指定key值的元素个数</td></tr></tbody></table>\n<p>除了上述的成员函数之外，unordered_map容器当中还实现了[ ]运算符重载函数，该重载函数的功能非常强大：<code>[key]</code></p>\n<ul><li>若当前容器中已有键值为key的键值对，则返回该键值对value的引用。</li><li>若当前容器中没有键值为key的键值对，则先插入键值对<code>&lt;key, value()&gt;</code>，然后再返回该键值对中value的引用。</li></ul>\n<p>unordered_map当中迭代器相关函数如下：</p>\n<table><thead><tr><th>成员函数</th><th>功能</th></tr></thead><tbody><tr><td>begin</td><td>获取容器中第一个元素的正向迭代器</td></tr><tr><td>end</td><td>获取容器中最后一个元素下一个位置的正向迭代器</td></tr></tbody></table>\n<p>使用示例：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_map&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tunordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">&gt;</span> um<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//插入键值对方式一：构造匿名对象插入</span>\n\tum<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tum<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tum<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//遍历方式一：范围for</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> um<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-&gt;\"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//1-&gt;one 2-&gt;two 3-&gt;three</span>\n\t<span class=\"token comment\">//插入键值对方式二：调用make_pair函数模板插入</span>\n\tum<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"four\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tum<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"five\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tum<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"six\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//遍历方式二：迭代器遍历</span>\n\tunordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator it <span class=\"token operator\">=</span> um<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> um<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-&gt;</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-&gt;\"</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-&gt;</span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t\tit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//1-&gt;one 2-&gt;two 3-&gt;three 4-&gt;four 5-&gt;five 6-&gt;six</span>\n\t<span class=\"token comment\">//插入键值对方式三：利用[]运算符重载函数进行插入（常用）</span>\n\tum<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"seven\"</span><span class=\"token punctuation\">;</span>\n\tum<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"eight\"</span><span class=\"token punctuation\">;</span>\n\tum<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"nine\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> um<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-&gt;\"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//9-&gt;nine 1-&gt;one 2-&gt;two 3-&gt;three 4-&gt;four 5-&gt;five 6-&gt;six 7-&gt;seven 8-&gt;eight</span>\n\t<span class=\"token comment\">//删除键值对方式一：根据key值删除</span>\n\tum<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//删除键值对方式二：根据迭代器删除</span>\n\tunordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>iterator pos <span class=\"token operator\">=</span> um<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//查找键值为7的键值对</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">!=</span> um<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tum<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> um<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-&gt;\"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//9-&gt;nine 1-&gt;one 2-&gt;two 3-&gt;three 4-&gt;four 6-&gt;six 8-&gt;eight</span>\n\t<span class=\"token comment\">//修改键值对方式一：通过find获得迭代器，通过迭代器修改</span>\n\tpos <span class=\"token operator\">=</span> um<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">!=</span> um<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tpos<span class=\"token operator\">-&gt;</span>second <span class=\"token operator\">=</span> <span class=\"token string\">\"one/first\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//修改键值对方式二：利用[]运算符重载函数进行修改（常用）</span>\n\tum<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"two/second\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> um<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-&gt;\"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//9-&gt;nine 1-&gt;one/first 2-&gt;two/second 3-&gt;three 4-&gt;four 6-&gt;six 8-&gt;eight</span>\n\t<span class=\"token comment\">//容器中key值为3的键值对的个数</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> um<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//容器的大小</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> um<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//清空容器</span>\n\tum<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//容器判空</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> um<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//交换两个容器的数据</span>\n\tunordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">&gt;</span> tmp<span class=\"token punctuation\">{<!-- --></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">2021</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"before\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">2022</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"now\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tum<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> um<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-&gt;\"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//2021-&gt;before 2022-&gt;now</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"unordered_multimap_266\"></a>unordered_multimap</h2>\n<p>unordered_multimap容器与unordered_map容器的底层数据结构是一样的，都是哈希表，其次，它们所提供的成员函数的接口都是基本一致的，这里就不再列举了，这两种容器唯一的区别就是，unordered_multimap容器允许键值冗余，即unordered_multimap容器当中存储的键值对的key值是可以重复的。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_map&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tunordered_multimap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">&gt;</span> umm<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//插入键值对（允许键值重复）</span>\n\tumm<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token number\">2022</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"吃饭\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tumm<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token number\">2022</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"睡觉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tumm<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token number\">2022</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"敲代码\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> umm<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-&gt;\"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//2022-&gt;吃饭 2022-&gt;睡觉 2022-&gt;敲代码</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>由于unordered_multimap容器允许键值对的键值冗余，因此该容器中成员函数find和count的意义与unordered_map容器中的也有所不同：</p>\n<table><thead><tr><th>成员函数find</th><th>功能</th></tr></thead><tbody><tr><td>unordered_map容器</td><td>返回键值为key的键值对的迭代器</td></tr><tr><td>unordered_multimap容器</td><td>返回底层哈希表中第一个找到的键值为key的键值对的迭代器</td></tr></tbody></table>\n<table><thead><tr><th>成员函数count</th><th>功能</th></tr></thead><tbody><tr><td>unordered_map容器</td><td>键值为key的键值对存在则返回1，不存在则返回0（find成员函数可替代）</td></tr><tr><td>unordered_multimap容器</td><td>返回键值为key的键值对的个数（find成员函数不可替代）</td></tr></tbody></table>\n<p>其次，由于unordered_multimap容器允许键值对的键值冗余，调用[ ]运算符重载函数时，应该返回键值为key的哪一个键值对的value的引用存在歧义，因此在unordered_multimap容器当中没有实现[ ]运算符重载函数。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-01-07 11:45:22", "summary": "文章目录系列关联式容器的介绍的使用的定义方式接口的使用的介绍的使用的定义方式接口的使用系列关联式容器在中，提供了底层为红黑树结构的一系列关联式容器，在查询时的效率可达到，即最差情况下需要比较红黑树的高"}