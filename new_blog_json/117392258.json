{"blogid": "117392258", "writerAge": "码龄6年", "writerBlogNum": "116", "writerCollect": "12469", "writerComment": "2744", "writerFan": "23423", "writerGrade": "7级", "writerIntegral": "13559", "writerName": "欧阳呀", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_117392258.jpg", "writerRankTotal": "694", "writerRankWeekly": "1681", "writerThumb": "5522", "writerVisitNum": "918702", "blog_read_count": "49584", "blog_time": "于 2021-06-01 08:11:20 发布", "blog_title": "都2021年了，再不学ES6你就out了 —— 一文搞懂ES6", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>JS干货分享 —— 一文搞懂ES6</h3>\n<ul><li><a href=\"#ES6_1\">导语：ES6是什么？用来做什么？</a></li><li><ul><li><a href=\"#1_let__const_12\">1. let 与 const</a></li><li><a href=\"#2__81\">2. 解构赋值</a></li><li><a href=\"#3__122\">3. 模板字符串</a></li><li><a href=\"#4_ES6__154\">4. ES6 函数（升级后更爽）</a></li><li><a href=\"#5_Class_236\">5. Class类</a></li><li><a href=\"#6_Map_324\">6. Map()</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"ES6_1\"></a>导语：ES6是什么？用来做什么？</h1>\n<ul><li> <p>ES6， 全称 ECMAScript 6.0 ，是 JavaScript 的下一个版本标准，2015.06 发版</p> </li><li> <p>虽然15年就有正式版本了，但是<mark>国内普遍商用是在2018年之后去了</mark>，甚至到现在有很多前端仍然搞不懂ES6（都2021年了，兄dei~）<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210530103912325.png\"/></p> </li><li> <p>ES6 的出现主要是为了<strong>解决 ES5 的先天不足</strong>，比如 JavaScript 里并没有类的概念</p> </li><li> <p>目前存在<strong>少数低版本浏览器</strong>的 JavaScript 是 ES5 版本，大多数的浏览器已经支持 ES6</p> </li><li> <p>ES6提供了大量的语法糖，<strong>让你写代码的时候简直不要太爽！</strong></p> </li><li> <p>你必须要知道的是：<strong>现在各企业都普遍使用，不会ES6意味着你很难找到工作，上班了你连别人的代码都看不懂</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210530104936814.png\"/></p> </li></ul>\n<h2><a id=\"1_let__const_12\"></a>1. let 与 const</h2>\n<blockquote>\n<p><strong>1.1 let 与 var</strong></p>\n</blockquote>\n<ul><li>let：ES6新增，用于声明变量，有<strong>块级作用域</strong></li><li>var：ES5中用于声明变量的关键字，<strong>存在各种问题（例如：红杏出墙~）</strong></li><li>如果你的代码里还存在 var，那你的良心就大大的坏了！</li></ul>\n<p><strong>var存在的问题：</strong></p>\n<pre><code class=\"prism language-javascript\"> <span class=\"token comment\">// 1.声明提升</span>\n <span class=\"token comment\">// 此处会正常打印，但这是错误的（属于先上车后买票了！）</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"大帅比\"</span><span class=\"token punctuation\">;</span>\n \n <span class=\"token comment\">// 2. 变量覆盖</span>\n <span class=\"token keyword\">var</span> demo <span class=\"token operator\">=</span> <span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">var</span> demo <span class=\"token operator\">=</span> <span class=\"token string\">\"小红\"</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 此处会打印小红，这也是错误的（属于套牌车，违法的啊，兄弟）</span>\n <span class=\"token comment\">// 同一个项目中，发生变量覆盖可能会导致数据丢失以及各种不可预知的bug，原则上来说：变量不能重名</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 3. 没有块级作用域</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token comment\">// do something</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// 此处会正常打印出 i 的值，这是错误的</span>\n      <span class=\"token comment\">// i是定义在循环体之内的，只能在循环体内打印，当前现象叫做红杏出墙！！！</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>let不会存在上述问题：</strong></p>\n<pre><code class=\"prism language-javascript\"> <span class=\"token comment\">// 1. 不会存在声明提前</span>\n <span class=\"token comment\">// 此处会报错（这里必须报错，原则上来说不能先上车后买票）</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"大帅比\"</span><span class=\"token punctuation\">;</span>\n \n <span class=\"token comment\">// 2. 不会有变量覆盖</span>\n <span class=\"token keyword\">let</span> demo <span class=\"token operator\">=</span> <span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">let</span> demo <span class=\"token operator\">=</span> <span class=\"token string\">\"小红\"</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 此处会报错（不能使用套牌车！）告诉你已经定义了此变量。避免了项目中存在变量覆盖的问题</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 3. 有块级作用域</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token comment\">// do something</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// 此处会报错，无法打印，防止红杏出墙！！！</span>\n      <span class=\"token comment\">// i是定义在循环体之内的，循环体外当然无法打印 </span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p><strong>const</strong></p>\n</blockquote>\n<ul><li>const 声明一个只读的常量，一旦声明，常量的值就不能改变</li><li>一般用于全局变量</li><li>通常变量名全部大写（请按照规则来，不要乱搞，容易出事情）</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">PI</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"3.1415926\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"2__81\"></a>2. 解构赋值</h2>\n<ul><li>解构赋值是对赋值运算符的扩展</li><li>针对数组或者对象进行模式匹配，然后对其中的变量进行赋值</li><li>代码简洁且易读，语义更加清晰明了，方便了复杂对象中数据字段获取（<strong>简而言之：用起来很爽！</strong>）</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210530114110867.png\"/></p>\n<blockquote>\n<p><strong>2.1 用在数组上</strong></p>\n</blockquote>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// a = 1，b = 2，c = 3 相当于重新定义了变量a,b,c，取值也更加方便</span>\n\n<span class=\"token comment\">// , = 占位符</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"小花\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"小鱼\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"小猪\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span>one<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里会取到小鱼</span>\n\n<span class=\"token comment\">// 解构整个数组</span>\n<span class=\"token keyword\">let</span> strArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 得到整个数组</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>strArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p><strong>2.2 用在对象上</strong></p>\n</blockquote>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n   className <span class=\"token operator\">:</span> <span class=\"token string\">\"卡西诺\"</span><span class=\"token punctuation\">,</span>\n   age<span class=\"token operator\">:</span> <span class=\"token number\">18</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{<!-- --></span>className<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 得到卡西诺</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{<!-- --></span>age<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 得到18</span>\n\n<span class=\"token comment\">// 剩余运算符</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{<!-- --></span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>demo<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> d<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// a = 1</span>\n<span class=\"token comment\">// b = 2</span>\n<span class=\"token comment\">// demo = {c: 3, d: 4}</span>\n</code></pre>\n<h2><a id=\"3__122\"></a>3. 模板字符串</h2>\n<ul><li>模板字符串相当于<strong>加强版的字符串</strong>，用反引号 <mark>``</mark></li><li>除了作为普通字符串，还可以用来定义多行字符串，可以在字符串中加入变量和表达式</li></ul>\n<blockquote>\n<p><strong>3.1 普通字符串</strong></p>\n</blockquote>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 普通字符串</span>\n<span class=\"token keyword\">let</span> string <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token operator\">+</span><span class=\"token string\">\"小兄弟\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hello小兄弟</span>\n<span class=\"token comment\">// 如果想要换行</span>\n<span class=\"token keyword\">let</span> string <span class=\"token operator\">=</span> <span class=\"token string\">\"hello'\\n'小兄弟\"</span>\n<span class=\"token comment\">// hello</span>\n<span class=\"token comment\">// 小兄弟</span>\n</code></pre>\n<blockquote>\n<p><strong>3.2 模板字符串</strong></p>\n</blockquote>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> str1  <span class=\"token operator\">=</span> <span class=\"token string\">\"穿堂而过的\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"风\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 模板字符串</span>\n<span class=\"token keyword\">let</span> newStr <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">我是</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>str1<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>str2<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 我是穿堂而过的风</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newStr<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 字符串中调用方法</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"帅的不行！\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> string2<span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">我真是</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span><span class=\"token function\">fn3</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>string2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 我真是帅的不行！</span>\n</code></pre>\n<h2><a id=\"4_ES6__154\"></a>4. ES6 函数（升级后更爽）</h2>\n<blockquote>\n<p><strong>4.1 箭头函数</strong></p>\n</blockquote>\n<ul><li>箭头函数是一种更加简洁的函数书写方式</li><li><strong>箭头函数本身没有作用域（无this）</strong></li><li>箭头函数的this指向上一层，<strong>上下文决定其this</strong></li><li>基本语法：<mark>参数 =&gt; 函数体</mark></li></ul>\n<p><strong>a. 基本用法</strong></p>\n<pre><code>let fn = v =&gt; v;\n//等价于\nlet fn = function(num){\n return num;\n}\nfn(100);  // 输出100\n</code></pre>\n<p><strong>b. 带参数的写法</strong></p>\n<pre><code>let fn2 = (num1,num2) =&gt; {\n let result = num1 + num2;\n return result;\n}\nfn2(3,2);  // 输出5\n</code></pre>\n<p><strong>c. 箭头函数中的this指向问题</strong></p>\n<ul><li>箭头函数体中的 this 对象，是定义函数时的对象，而不是使用函数时的对象。<mark>在函数定义的时候就已经决定了</mark></li></ul>\n<pre><code>function fn3(){\n  setTimeout(()=&gt;{\n    // 定义时，this 绑定的是 fn3 中的 this 对象\n    console.log(this.a);\n  },0)\n}\nvar a = 10;\n// fn3 的 this 对象为 {a: 10}，因为它指向全局: window.a\nfn3.call({a: 18});  // 改变this指向，此时 a = 18\n</code></pre>\n<p><strong>d. 箭头函数适用的场景</strong></p>\n<ul><li>当我们代码里存在这样的代码：<mark>let self = this;</mark></li><li>需要新建变量去保存this的时候</li><li>案例如下：</li></ul>\n<pre><code>let Person1 = {\n    'age': 18,\n    'sayHello': function () {\n      setTimeout(()=&gt;{\n        console.log(this.age);\n      });\n    }\n};\nvar age = 20;\nPerson1.sayHello();  // 18\n</code></pre>\n<blockquote>\n<p><strong>4.2 函数参数的扩展</strong></p>\n</blockquote>\n<p><strong>1. 默认参数</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// num为默认参数，如果不传，则默认为10</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> num<span class=\"token operator\">=</span><span class=\"token number\">10</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 打印 1，10</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印 1，2 （此值会覆盖默认参数10）</span>\n</code></pre>\n<ul><li>需要注意的是：<strong>只有在未传递参数，或者参数为 undefined 时，才会使用默认参数，null 值被认为是有效的值传递</strong>。</li></ul>\n<p><strong>2. 不定参数</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 此处的values是不定的，且无论你传多少个</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>values</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 2</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 4</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210531222239469.png\"/></p>\n<h2><a id=\"5_Class_236\"></a>5. Class类</h2>\n<ul><li>class (类)作为对象的模板被引入，可以通过 class 关键字定义类</li><li>class 的本质是 function，同样可以看成<strong>一个块</strong></li><li>可以看作一个语法糖，让<strong>对象原型的写法更加清晰</strong></li><li>更加标准的<strong>面向对象编程</strong>语法</li></ul>\n<blockquote>\n<p><strong>5.1 类的定义</strong></p>\n</blockquote>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 匿名类</span>\n<span class=\"token keyword\">let</span> Demo <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 命名类</span>\n<span class=\"token keyword\">let</span> Demo <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><strong>5.2 类的声明</strong></p>\n</blockquote>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>请注意，类不能重复声明</li><li>类定义不会被提升，必须在访问前对类进行定义，否则就会报错。</li><li>类中方法不需要 function 关键字。</li><li>方法间不能加分号</li></ul>\n<blockquote>\n<p><strong>5.3 类的主体</strong></p>\n</blockquote>\n<ul><li>公共属性（依然可以定义在原型上）</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Demo</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>实例属性</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">{<!-- --></span>\n    a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>方法：constructor</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我是构造器'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 我是构造器</span>\n</code></pre>\n<p>如果不写constructor，也会默认添加</p>\n<blockquote>\n<p><strong>5.4 实例化对象</strong></p>\n</blockquote>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Demo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> demo1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> demo2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 两者原型链是相等的</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>demo1<span class=\"token punctuation\">.</span>_proto_ <span class=\"token operator\">==</span> demo2<span class=\"token punctuation\">.</span>_proto_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n \ndemo1<span class=\"token punctuation\">.</span>_proto_<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sub</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>demo1<span class=\"token punctuation\">.</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>demo2<span class=\"token punctuation\">.</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n</code></pre>\n<h2><a id=\"6_Map_324\"></a>6. Map()</h2>\n<blockquote>\n<p><strong>6.1 Maps 和 Objects 的区别</strong></p>\n</blockquote>\n<ul><li>一个 Object 的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值</li><li>Map 中的键值是有序的（FIFO 原则），而添加到对象中的键则不是</li><li>Map 的键值对个数可以从 size 属性获取，而 Object 的键值对个数只能手动计算<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210601005359180.png\"/></li></ul>\n<blockquote>\n<p><strong>6.2 Map中的key</strong></p>\n</blockquote>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 1. key是字符串</span>\n<span class=\"token keyword\">let</span> myMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> keyString <span class=\"token operator\">=</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">;</span> \n \nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>keyString<span class=\"token punctuation\">,</span> <span class=\"token string\">\"和键'string'关联的值\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// keyString === 'string'</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>keyString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// \"和键'string'关联的值\"</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// \"和键'string'关联的值\"</span>\n\n<span class=\"token comment\">// 2.key是对象</span>\n<span class=\"token keyword\">let</span> myMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> keyObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n \nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>keyObj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"和键 keyObj 关联的值\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>keyObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"和键 keyObj 关联的值\"</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined, 因为 keyObj !== {}</span>\n\n<span class=\"token comment\">// 3. key也可以是函数或者NaN                         </span>\n</code></pre>\n<blockquote>\n<p><strong>6.3 Map 的迭代</strong></p>\n</blockquote>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 1.使用 forEach</span>\n<span class=\"token keyword\">let</span> myMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"zero\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">// 0 = zero , 1 = one</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token string\">\" = \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> myMap<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 2. 也可以使用 for...of</span>\n</code></pre>\n<blockquote>\n<p><strong>6.4 Map 与 Array的转换</strong></p>\n</blockquote>\n<pre><code class=\"prism language-javascript\">letkvArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"key2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">// Map 构造函数可以将一个 二维 键值对数组转换成一个 Map 对象</span>\n<span class=\"token keyword\">let</span> myMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>kvArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">// 使用 Array.from 函数可以将一个 Map 对象转换成一个二维键值对数组</span>\n<span class=\"token keyword\">let</span> outArray <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>myMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p><strong>6.5 关于map的重点面试题</strong></p>\n</blockquote>\n<ul><li>请谈一下 <mark>Map和ForEach</mark> 的区别（问到map，必定问到此题）</li></ul>\n<p><strong>详细解析：</strong></p>\n<ol><li>forEach()方法不会返回执行结果，而是undefined</li><li>map()方法会得到一个新的数组并返回</li><li>同样的一组数组，map()的执行速度优于 forEach()（<strong>map() 底层做了深度优化</strong>）</li></ol>\n<p><strong>性质决定了两者应用场景的不同</strong></p>\n<ul><li>forEach() 适合于你并<mark>不打算改变数据</mark>的时候，而只是想用数据做一些事情（比如存入数据库）</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 依次打印出 a,b,c,d</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>map() 适用于你<mark>要改变数据值</mark>的时候，它更快，而且返回一个新的数组</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> arr2 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span> <span class=\"token operator\">=&gt;</span> num <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span> <span class=\"token operator\">=&gt;</span> num <span class=\"token operator\">&gt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// arr2 = [6, 8, 10]</span>\n</code></pre>\n<blockquote>\n<ul><li>创作不易，深夜肝文，如果对大家有帮助，还请大家支持一波~</li><li><mark>点赞，关注，收藏走一波</mark>，感激不尽！</li><li><strong>好人一生平安，一胎生八个！</strong></li></ul>\n</blockquote>\n<p><img alt=\"感谢大家的支持\" src=\"..\\..\\static\\image\\20210601012211643.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2021-06-01 08:11:20", "summary": "干货分享一文搞懂导语：是什么？用来做什么？与解构赋值模板字符串函数升级后更爽类导语：是什么？用来做什么？，全称，是的下一个版本标准，发版虽然年就有正式版本了，但是国内普遍商用是在年之后去了，甚至到现在"}