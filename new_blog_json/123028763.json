{"blogid": "123028763", "writerAge": "码龄4年", "writerBlogNum": "31", "writerCollect": "145", "writerComment": "27", "writerFan": "104", "writerGrade": "3级", "writerIntegral": "500", "writerName": "斯坦福的兔子", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123028763.jpg", "writerRankTotal": "47444", "writerRankWeekly": "81590", "writerThumb": "63", "writerVisitNum": "32761", "blog_read_count": "3223", "blog_time": "已于 2022-02-21 09:10:20 修改", "blog_title": "【PCL自学：ocTree】八叉树（octree）的原理及应用案例(点云压缩，搜索，空间变化)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>PCL中八叉树（octree）的原理及应用案例</h3>\n<ul><li><a href=\"#ocTree_1\">一、什么是八叉树ocTree？</a></li><li><ul><li><a href=\"#1_2\">1.八叉树原理</a></li></ul>\n</li><li><a href=\"#_16\">二、八叉树应用案例</a></li><li><ul><li><a href=\"#1_17\">1.点云压缩</a></li><li><a href=\"#2_168\">2.用八叉树进行空间划分和搜索操作</a></li><li><a href=\"#3_284\">3.无序点云数据的空间变化检测</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"ocTree_1\"></a>一、什么是八叉树ocTree？</h1>\n<h2><a id=\"1_2\"></a>1.八叉树原理</h2>\n<p>  上世纪80年代，八叉树结构被提出来，用来表示空间中的区域划分，简单来说，空间可以被分为8个象限，想象一下假设空间中存在一个笛卡尔坐标系，则该坐标系将空间分为了8个象限，每个象限又可以按照这种方式再建立一个笛卡尔坐标系，再划分为8个象限，以此类推，空间中任何一块区域都可以被n个笛卡尔坐标划分。<br/> <img alt=\"在这里插入图片描述\" height=\"380\" src=\"..\\..\\static\\image\\3faeb5bd2a314a1bab1c7f2122092258.png\" width=\"400\"/><br/>   以上图为例：<br/>   如果所生成的八叉树的节点可分为三类：</p>\n<p>灰节点： 它对应的立方体部分的为V所占据；<br/>    白节点： 它对应的立方体没有V的内容；<br/>    黑节点： 它对应的立方体全部为V所占据。</p>\n<p>后两类又称为叶节点。立方体的八叉树的逻辑结构是这样的：将立方体内的空间划分，并记录成树结构，其上的节点要么是叶节点，要么是有八个子节点的灰节点。<br/>   因此任意空间都可以被划分为树状结构，而如果要找到某子空间，只需遍历八叉树即可找到，且效率较高。<br/>   关于八叉树的存储结构，有兴趣深入研究的同学可以参考<a href=\"https://blog.csdn.net/qq_37855507/article/details/90957798\">这篇文章</a>：<br/>   https://blog.csdn.net/qq_37855507/article/details/90957798</p>\n<h1><a id=\"_16\"></a>二、八叉树应用案例</h1>\n<h2><a id=\"1_17\"></a>1.点云压缩</h2>\n<p>  点云由巨大的数据集组成，这些数据集描述了与距离、颜色、法线等附加信息相关的三维点。此外，它们可以以很高的速度创建，因此会占用大量内存资源。一旦点云必须在速率受限的通信信道上存储或传输，就必须想办法对这类数据进行压缩。点云库提供点云压缩功能。它允许编码所有类型的点云，包括无组织的点云，其特征是不存在点索引、分辨率、密度和/或点顺序。此外，底层的八叉树数据结构能够有效地合并来自多个数据源的点云数据。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dfdeaff869204a07af84db8f8a0ad2f1.png\"/><br/>   下面，我们将解释如何有效地压缩单点云和点云流。在给出的示例中，我们使用OpenNIGrabber捕获点云，并使用PCL点云压缩技术进行压缩。请看如下示例代码：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pcl/point_cloud.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pcl/point_types.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pcl/io/openni_grabber.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pcl/visualization/cloud_viewer.h&gt;</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pcl/compression/octree_pointcloud_compression.h&gt;</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sstream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">WIN32</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">sleep</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleOpenNIViewer</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n <span class=\"token function\">SimpleOpenNIViewer</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n    <span class=\"token function\">viewer</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\" Point Cloud Compression Example\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token punctuation\">}</span>\n  \n<span class=\"token comment\">//在OpenNIGrabber捕获循环执行的回调函数中(以下部分代码)，首先将捕获的点云压缩到stringstream缓冲区中。接下来是一个解压步骤，该步骤将压缩的二进制数据解码为一个新的点云对象。然后将解码后的点云发送到点云查看器。</span>\n  <span class=\"token keyword\">void</span>\n  <span class=\"token function\">cloud_cb_</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> pcl<span class=\"token operator\">::</span>PointCloud<span class=\"token operator\">&lt;</span>pcl<span class=\"token operator\">::</span>PointXYZRGBA<span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>ConstPtr <span class=\"token operator\">&amp;</span>cloud<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>viewer<span class=\"token punctuation\">.</span><span class=\"token function\">wasStopped</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token comment\">// 存储被压缩后点云的流</span>\n      std<span class=\"token operator\">::</span>stringstream compressedData<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 创建输出的解压缩后点云指针</span>\n      pcl<span class=\"token operator\">::</span>PointCloud<span class=\"token operator\">&lt;</span>pcl<span class=\"token operator\">::</span>PointXYZRGBA<span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>Ptr <span class=\"token function\">cloudOut</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> pcl<span class=\"token operator\">::</span>PointCloud<span class=\"token operator\">&lt;</span>pcl<span class=\"token operator\">::</span>PointXYZRGBA<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 压缩点云</span>\n      PointCloudEncoder<span class=\"token operator\">-&gt;</span><span class=\"token function\">encodePointCloud</span> <span class=\"token punctuation\">(</span>cloud<span class=\"token punctuation\">,</span> compressedData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// 解压缩点云</span>\n      PointCloudDecoder<span class=\"token operator\">-&gt;</span><span class=\"token function\">decodePointCloud</span> <span class=\"token punctuation\">(</span>compressedData<span class=\"token punctuation\">,</span> cloudOut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n      <span class=\"token comment\">// 显示解压缩后的点云</span>\n      viewer<span class=\"token punctuation\">.</span><span class=\"token function\">showCloud</span> <span class=\"token punctuation\">(</span>cloudOut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">void</span>\n  <span class=\"token function\">run</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">// 布尔值：是否显示统计信息（是）</span>\n    <span class=\"token keyword\">bool</span> showStatistics <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 配置文件列表查看这个头文件: /io/include/pcl/compression/compression_profiles.h</span>\n    <span class=\"token comment\">// 此处是枚举类型，包括压缩配置(分辨率，在/离线，颜色信息)</span>\n    pcl<span class=\"token operator\">::</span>io<span class=\"token operator\">::</span>compression_Profiles_e compressionProfile <span class=\"token operator\">=</span> pcl<span class=\"token operator\">::</span>io<span class=\"token operator\">::</span>MED_RES_ONLINE_COMPRESSION_WITH_COLOR<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 实例化八叉树点云压缩用于编码和解码</span>\n    PointCloudEncoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> pcl<span class=\"token operator\">::</span>io<span class=\"token operator\">::</span>OctreePointCloudCompression<span class=\"token operator\">&lt;</span>pcl<span class=\"token operator\">::</span>PointXYZRGBA<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>compressionProfile<span class=\"token punctuation\">,</span> showStatistics<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    PointCloudDecoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> pcl<span class=\"token operator\">::</span>io<span class=\"token operator\">::</span>OctreePointCloudCompression<span class=\"token operator\">&lt;</span>pcl<span class=\"token operator\">::</span>PointXYZRGBA<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 创建OpenNI设备的抓取器</span>\n    pcl<span class=\"token operator\">::</span>Grabber<span class=\"token operator\">*</span> interface <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> pcl<span class=\"token operator\">::</span><span class=\"token function\">OpenNIGrabber</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 定义回调函数，用于回调点云采集设备</span>\n    std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> pcl<span class=\"token operator\">::</span>PointCloud<span class=\"token operator\">&lt;</span>pcl<span class=\"token operator\">::</span>PointXYZRGBA<span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>ConstPtr<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span> f <span class=\"token operator\">=</span>\n      <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> pcl<span class=\"token operator\">::</span>PointCloud<span class=\"token operator\">&lt;</span>pcl<span class=\"token operator\">::</span>PointXYZRGBA<span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>ConstPtr<span class=\"token operator\">&amp;</span> cloud<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token function\">cloud_cb_</span> <span class=\"token punctuation\">(</span>cloud<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 注册链接回调函数.此例子中是带有颜色信息的点云。</span>\n    boost<span class=\"token operator\">::</span>signals2<span class=\"token operator\">::</span>connection c <span class=\"token operator\">=</span> interface<span class=\"token operator\">-&gt;</span><span class=\"token function\">registerCallback</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 开始接收点云，</span>\n    interface<span class=\"token operator\">-&gt;</span><span class=\"token function\">start</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>viewer<span class=\"token punctuation\">.</span><span class=\"token function\">wasStopped</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function\">sleep</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    interface<span class=\"token operator\">-&gt;</span><span class=\"token function\">stop</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 删除点云压缩实例</span>\n    <span class=\"token keyword\">delete</span> <span class=\"token punctuation\">(</span>PointCloudEncoder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> <span class=\"token punctuation\">(</span>PointCloudDecoder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span>\n\n  pcl<span class=\"token operator\">::</span>visualization<span class=\"token operator\">::</span>CloudViewer viewer<span class=\"token punctuation\">;</span>\n\n  pcl<span class=\"token operator\">::</span>io<span class=\"token operator\">::</span>OctreePointCloudCompression<span class=\"token operator\">&lt;</span>pcl<span class=\"token operator\">::</span>PointXYZRGBA<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> PointCloudEncoder<span class=\"token punctuation\">;</span>\n  pcl<span class=\"token operator\">::</span>io<span class=\"token operator\">::</span>OctreePointCloudCompression<span class=\"token operator\">&lt;</span>pcl<span class=\"token operator\">::</span>PointXYZRGBA<span class=\"token operator\">&gt;</span><span class=\"token operator\">*</span> PointCloudDecoder<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span>\n<span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n  SimpleOpenNIViewer v<span class=\"token punctuation\">;</span>\n  v<span class=\"token punctuation\">.</span><span class=\"token function\">run</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>  在run()函数中，我们创建了用于编码和解码的OctreePointCloudCompression类的实例。他们可以将压缩文件作为配置压缩算法的参数。所提供的压缩文件为openNI设备捕获的点云预定义了公共参数集。在本例中，我们使用<strong>MED_RES_ONLINE_COMPRESSION_WITH_COLOR</strong>它的意思是采用坐标编码精度为5立方毫米的轮廓线，并能进行颜色编码。它是进一步优化的快速在线压缩参数。压缩配置文件的完整列表，包括它们的配置，可以在文件/io/include/pcl/compression/compression_profiles.h找到。<br/> 这里列举一些参数以供参考：<br/> 第一个参数LOW,MED,HIGH代表的是压缩程度。<br/> 第二个ONLINE/OFFLINE代表是否在线压缩。<br/> 最后WITH.WITHOUT代表是否压缩颜色信息。</p>\n<pre><code class=\"prism language-cpp\">LOW_RES_ONLINE_COMPRESSION_WITHOUT_COLOR \t<span class=\"token number\">1</span>立方厘米分辨率<span class=\"token punctuation\">(</span>八叉树体素体积<span class=\"token punctuation\">)</span>，无颜色，快速在线编码\nLOW_RES_ONLINE_COMPRESSION_WITH_COLOR \t\t<span class=\"token number\">1</span>立方厘米分辨率，彩色，快速在线编码\nMED_RES_ONLINE_COMPRESSION_WITHOUT_COLOR \t<span class=\"token number\">5</span>立方毫米分辨率，无色彩，快速在线编码\nMED_RES_ONLINE_COMPRESSION_WITH_COLOR \t\nHIGH_RES_ONLINE_COMPRESSION_WITHOUT_COLOR \t<span class=\"token number\">1</span>立方毫米分辨率，无色彩，快速在线编码\nHIGH_RES_ONLINE_COMPRESSION_WITH_COLOR \t\t以下以此类推\nLOW_RES_OFFLINE_COMPRESSION_WITHOUT_COLOR \t\nLOW_RES_OFFLINE_COMPRESSION_WITH_COLOR \t\nMED_RES_OFFLINE_COMPRESSION_WITHOUT_COLOR \t\nMED_RES_OFFLINE_COMPRESSION_WITH_COLOR \t\nHIGH_RES_OFFLINE_COMPRESSION_WITHOUT_COLOR \t\nHIGH_RES_OFFLINE_COMPRESSION_WITH_COLOR \t启用高级参数化的手动配置\n\n</code></pre>\n<p>  当然也可以选择手动更改压缩配置，为了能够完全访问所有与压缩相关的参数，OctreePointCloudCompression类的构造函数可以初始化附加的压缩参数。请注意，为了启用高级参数化，compressionProfile_arg参数需要设置为MANUAL_CONFIGURATION。</p>\n<pre><code class=\"prism language-cpp\">pcl<span class=\"token operator\">::</span>io<span class=\"token operator\">::</span><span class=\"token class-name\">OctreePointCloudCompression</span><span class=\"token operator\">&lt;</span> PointT<span class=\"token punctuation\">,</span> LeafT<span class=\"token punctuation\">,</span> BranchT<span class=\"token punctuation\">,</span> OctreeT <span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span><span class=\"token function\">OctreePointCloudCompression</span>\t<span class=\"token punctuation\">(</span>\t\n\ncompression_Profiles_e \tcompressionProfile_arg <span class=\"token operator\">=</span> MED_RES_ONLINE_COMPRESSION_WITH_COLOR<span class=\"token punctuation\">,</span><span class=\"token comment\">//定义压缩配置文件</span>\n<span class=\"token keyword\">bool</span> \tshowStatistics_arg <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//获取压缩统计信息</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> \tpointResolution_arg <span class=\"token operator\">=</span> <span class=\"token number\">0.001</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//点坐标精度</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> \toctreeResolution_arg <span class=\"token operator\">=</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//最低八叉树级别的八叉树分辨率</span>\n<span class=\"token keyword\">bool</span> \tdoVoxelGridDownDownSampling_arg <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//是否进行体素网格降采样</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> \tiFrameRate_arg <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//编码率</span>\n<span class=\"token keyword\">bool</span> \tdoColorEncoding_arg <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//颜色编码</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> \tcolorBitResolution_arg <span class=\"token operator\">=</span> <span class=\"token number\">6</span> <span class=\"token comment\">//颜色位分辨率</span>\n<span class=\"token punctuation\">)</span>\t\t\n</code></pre>\n<p>  高级参数说明如下:<br/>   <strong>compressionProfile_arg</strong>：启用高级参数时，需要将该参数设置为MANUAL_CONFIGURATION。showStatistics_arg:将压缩相关的统计数据打印到命令窗口。<br/>   <strong>pointResolution_arg</strong>：定义点坐标的编码精度。该参数应设置为低于传感器噪声的值。<br/>   <strong>octreeResolution_arg</strong>：该参数定义部署的八叉树的体素大小。较低的体素分辨率可以使压缩速度更快，但压缩性能下降。这在高帧/更新速率和压缩效率之间实现了平衡。<br/>   <strong>doVoxelGridDownDownSampling_arg</strong>：如果激活，则只对层次八叉树数据结构进行编码。解码器在体素中心生成点。这样，点云在压缩时得到下采样，同时获得较高的压缩性能。<br/>   <strong>iFrameRate_arg</strong>：点云压缩方案对点云进行区别编码。通过这种方式，传入点云和之前编码的点云之间的差异被编码，以实现最大的压缩性能。iFrameRate_arg允许指定流中进入点云不进行差异编码的帧速率(类似于视频编码中的I/ p帧)。<br/>   <strong>doColorEncoding_arg</strong>:该选项启用颜色组件编码。<br/>   <strong>colorBitResolution_arg</strong>:这个参数定义了每个颜色组件需要编码的位数。</p>\n<h2><a id=\"2_168\"></a>2.用八叉树进行空间划分和搜索操作</h2>\n<p>  八叉树是一种基于树的数据结构，用于管理稀疏的三维数据。每个内部节点正好有8个子节点。在本节中，我们将学习如何在点云数据中使用八叉树进行空间划分和邻居搜索。特别是，我们解释了如何在体素搜索、K近邻搜索和半径搜索中执行邻点搜索。<br/>   请看如下示例代码：</p>\n<pre><code class=\"prism language-cpp\"> <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pcl/point_cloud.h&gt;</span></span>\n <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pcl/octree/octree_search.h&gt;</span></span>\n \n <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctime&gt;</span></span>\n \n <span class=\"token keyword\">int</span>\n <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token function\">srand</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token function\">time</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// [1]创建点云指针</span>\n   pcl<span class=\"token operator\">::</span>PointCloud<span class=\"token operator\">&lt;</span>pcl<span class=\"token operator\">::</span>PointXYZ<span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>Ptr <span class=\"token function\">cloud</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> pcl<span class=\"token operator\">::</span>PointCloud<span class=\"token operator\">&lt;</span>pcl<span class=\"token operator\">::</span>PointXYZ<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n   <span class=\"token comment\">// [2] 构造1000个随机的点云数据</span>\n   cloud<span class=\"token operator\">-&gt;</span>width <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n   cloud<span class=\"token operator\">-&gt;</span>height <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   cloud<span class=\"token operator\">-&gt;</span>points<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span> <span class=\"token punctuation\">(</span>cloud<span class=\"token operator\">-&gt;</span>width <span class=\"token operator\">*</span> cloud<span class=\"token operator\">-&gt;</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> cloud<span class=\"token operator\">-&gt;</span><span class=\"token function\">size</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cloud<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">1024.0f</span> <span class=\"token operator\">*</span> <span class=\"token function\">rand</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>RAND_MAX <span class=\"token operator\">+</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cloud<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">1024.0f</span> <span class=\"token operator\">*</span> <span class=\"token function\">rand</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>RAND_MAX <span class=\"token operator\">+</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cloud<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token number\">1024.0f</span> <span class=\"token operator\">*</span> <span class=\"token function\">rand</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>RAND_MAX <span class=\"token operator\">+</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n \n   <span class=\"token keyword\">float</span> resolution <span class=\"token operator\">=</span> <span class=\"token number\">128.0f</span><span class=\"token punctuation\">;</span>\n \t<span class=\"token comment\">// [3]八叉树点云搜索实例</span>\n   pcl<span class=\"token operator\">::</span>octree<span class=\"token operator\">::</span>OctreePointCloudSearch<span class=\"token operator\">&lt;</span>pcl<span class=\"token operator\">::</span>PointXYZ<span class=\"token operator\">&gt;</span> <span class=\"token function\">octree</span> <span class=\"token punctuation\">(</span>resolution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \t<span class=\"token comment\">// [4]将点云设置成八叉树结构</span>\n   octree<span class=\"token punctuation\">.</span><span class=\"token function\">setInputCloud</span> <span class=\"token punctuation\">(</span>cloud<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   octree<span class=\"token punctuation\">.</span><span class=\"token function\">addPointsFromInputCloud</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \t<span class=\"token comment\">// [5]随机定义一个要查找的点</span>\n   pcl<span class=\"token operator\">::</span>PointXYZ searchPoint<span class=\"token punctuation\">;</span>\n \n   searchPoint<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">1024.0f</span> <span class=\"token operator\">*</span> <span class=\"token function\">rand</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>RAND_MAX <span class=\"token operator\">+</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   searchPoint<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">1024.0f</span> <span class=\"token operator\">*</span> <span class=\"token function\">rand</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>RAND_MAX <span class=\"token operator\">+</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   searchPoint<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token number\">1024.0f</span> <span class=\"token operator\">*</span> <span class=\"token function\">rand</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>RAND_MAX <span class=\"token operator\">+</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n  <span class=\"token comment\">//**************************体素搜索（搜索相同体素内的点）************************</span>\n \t<span class=\"token comment\">// [6]创建点云索引容器</span>\n   std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> pointIdxVec<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// [7]开始进行体素内近邻点搜索</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>octree<span class=\"token punctuation\">.</span><span class=\"token function\">voxelSearch</span> <span class=\"token punctuation\">(</span>searchPoint<span class=\"token punctuation\">,</span> pointIdxVec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// [8] 将查找点所在体素内的邻点全都输出打印到命令窗口</span>\n     std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Neighbors within voxel search at (\"</span> <span class=\"token operator\">&lt;&lt;</span> searchPoint<span class=\"token punctuation\">.</span>x \n      <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> searchPoint<span class=\"token punctuation\">.</span>y \n      <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> searchPoint<span class=\"token punctuation\">.</span>z <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span> \n      <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n               \n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pointIdxVec<span class=\"token punctuation\">.</span><span class=\"token function\">size</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"    \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cloud<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>pointIdxVec<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x \n        <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cloud<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>pointIdxVec<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y \n        <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cloud<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>pointIdxVec<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>z <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n \n     <span class=\"token comment\">//*************************K近邻搜索（搜索K个最近点）************************</span>\n   <span class=\"token keyword\">int</span> K <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n \t<span class=\"token comment\">// 创建点索引容器，用于按距离保存搜索到的点</span>\n   std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> pointIdxNKNSearch<span class=\"token punctuation\">;</span>\n   \t<span class=\"token comment\">// 创建点距离容器 </span>\n   std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">&gt;</span> pointNKNSquaredDistance<span class=\"token punctuation\">;</span>\n \n   std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"K nearest neighbor search at (\"</span> <span class=\"token operator\">&lt;&lt;</span> searchPoint<span class=\"token punctuation\">.</span>x \n             <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> searchPoint<span class=\"token punctuation\">.</span>y \n             <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> searchPoint<span class=\"token punctuation\">.</span>z\n             <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\") with K=\"</span> <span class=\"token operator\">&lt;&lt;</span> K <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n \t<span class=\"token comment\">// 开始最近K邻搜索</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>octree<span class=\"token punctuation\">.</span><span class=\"token function\">nearestKSearch</span> <span class=\"token punctuation\">(</span>searchPoint<span class=\"token punctuation\">,</span> K<span class=\"token punctuation\">,</span> pointIdxNKNSearch<span class=\"token punctuation\">,</span> pointNKNSquaredDistance<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pointIdxNKNSearch<span class=\"token punctuation\">.</span><span class=\"token function\">size</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n       std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"    \"</span>  <span class=\"token operator\">&lt;&lt;</span>   <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cloud<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span> pointIdxNKNSearch<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x \n                 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cloud<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span> pointIdxNKNSearch<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y \n                 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cloud<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span> pointIdxNKNSearch<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>z \n                 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" (squared distance: \"</span> <span class=\"token operator\">&lt;&lt;</span> pointNKNSquaredDistance<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n \n   <span class=\"token comment\">//*************************K近邻搜索（搜索半径范围内的点）************************</span>\n \t<span class=\"token comment\">// 创建半径范围内点索引的容器</span>\n   std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> pointIdxRadiusSearch<span class=\"token punctuation\">;</span>\n   \t<span class=\"token comment\">// 创建搜索到的点的距离容器</span>\n   std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">&gt;</span> pointRadiusSquaredDistance<span class=\"token punctuation\">;</span>\n \n   <span class=\"token keyword\">float</span> radius <span class=\"token operator\">=</span> <span class=\"token number\">256.0f</span> <span class=\"token operator\">*</span> <span class=\"token function\">rand</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>RAND_MAX <span class=\"token operator\">+</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n   std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Neighbors within radius search at (\"</span> <span class=\"token operator\">&lt;&lt;</span> searchPoint<span class=\"token punctuation\">.</span>x \n       <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> searchPoint<span class=\"token punctuation\">.</span>y \n       <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> searchPoint<span class=\"token punctuation\">.</span>z\n       <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\") with radius=\"</span> <span class=\"token operator\">&lt;&lt;</span> radius <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n \n <span class=\"token comment\">// 开始半径搜索</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>octree<span class=\"token punctuation\">.</span><span class=\"token function\">radiusSearch</span> <span class=\"token punctuation\">(</span>searchPoint<span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">,</span> pointIdxRadiusSearch<span class=\"token punctuation\">,</span> pointRadiusSquaredDistance<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pointIdxRadiusSearch<span class=\"token punctuation\">.</span><span class=\"token function\">size</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n       std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"    \"</span>  <span class=\"token operator\">&lt;&lt;</span>   <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cloud<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span> pointIdxRadiusSearch<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x \n                 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cloud<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span> pointIdxRadiusSearch<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y \n                 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cloud<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span> pointIdxRadiusSearch<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>z \n                 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" (squared distance: \"</span> <span class=\"token operator\">&lt;&lt;</span> pointRadiusSquaredDistance<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>  <strong>附加内容:</strong><br/> PCL八叉树组件提供了几种八叉树类型。它们的主要区别在于它们的单个叶节点特征。</p>\n<p><em><strong>OctreePointCloudPointVector</strong></em>(等于OctreePointCloud):这个八叉树可以在每个叶节点上保存一个点索引列表。<br/> <em><strong>OctreePointCloudSinglePoint</strong></em>:这个八叉树类在每个叶节点上只有一个单点索引。仅存储分配给叶节点的最近的点索引。<br/> <em><strong>OctreePointCloudOccupancy</strong></em>:这个八叉树在它的叶子节点上不存储任何点信息。它可以用于空间占用检查。<br/> <em><strong>OctreePointCloudDensity</strong></em>:这个八叉树计算每个叶节点体素内的点的数量。它允许空间密度查询。<br/>   如果需要高速创建八叉树，请查看八叉树双缓冲实现(Octree2BufBase类)。这个类同时在内存中保存两个并行的八叉树结构。除了搜索操作之外，这还支持空间变化检测。此外，高级内存管理减少了八叉树构建过程中的内存分配和回收操作。双缓冲八叉树实现可以通过模板参数OctreeT赋值给所有的OctreePointCloud类。<br/>   所有八叉树都支持八叉树结构和八叉树数据内容的序列化和非序列化。</p>\n<h2><a id=\"3_284\"></a>3.无序点云数据的空间变化检测</h2>\n<p>  八叉树是一种基于树的数据结构，用于组织稀疏的三维数据。在本节中，我们将学习如何使用八叉树实现来检测多个无序点云之间的空间变化，这些点云可以在大小、分辨率、密度和点顺序上变化。通过递归地比较八叉树的树结构，可以识别由体素配置差异表示的空间变化。此外，我们解释了如何使用pcl八叉树双缓冲技术，使我们能够在一段时间内有效地处理多个点云。</p>\n<pre><code class=\"prism language-cpp\"> <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pcl/point_cloud.h&gt;</span></span>\n <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pcl/octree/octree_pointcloud_changedetector.h&gt;</span></span>\n \n <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctime&gt;</span></span>\n \n <span class=\"token keyword\">int</span>\n <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">srand</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token function\">time</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 设置八叉树分辨率 即体素边长</span>\n  <span class=\"token keyword\">float</span> resolution <span class=\"token operator\">=</span> <span class=\"token number\">32.0f</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 实例化基于八叉树的点云变化检测类</span>\n  pcl<span class=\"token operator\">::</span>octree<span class=\"token operator\">::</span>OctreePointCloudChangeDetector<span class=\"token operator\">&lt;</span>pcl<span class=\"token operator\">::</span>PointXYZ<span class=\"token operator\">&gt;</span> <span class=\"token function\">octree</span> <span class=\"token punctuation\">(</span>resolution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 创建点云A的指针</span>\n  pcl<span class=\"token operator\">::</span>PointCloud<span class=\"token operator\">&lt;</span>pcl<span class=\"token operator\">::</span>PointXYZ<span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>Ptr <span class=\"token function\">cloudA</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> pcl<span class=\"token operator\">::</span>PointCloud<span class=\"token operator\">&lt;</span>pcl<span class=\"token operator\">::</span>PointXYZ<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 为点云A生成一些随机点云数据</span>\n  cloudA<span class=\"token operator\">-&gt;</span>width <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span>\n  cloudA<span class=\"token operator\">-&gt;</span>height <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  cloudA<span class=\"token operator\">-&gt;</span>points<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span> <span class=\"token punctuation\">(</span>cloudA<span class=\"token operator\">-&gt;</span>width <span class=\"token operator\">*</span> cloudA<span class=\"token operator\">-&gt;</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> cloudA<span class=\"token operator\">-&gt;</span><span class=\"token function\">size</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cloudA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">64.0f</span> <span class=\"token operator\">*</span> <span class=\"token function\">rand</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>RAND_MAX <span class=\"token operator\">+</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cloudA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">64.0f</span> <span class=\"token operator\">*</span> <span class=\"token function\">rand</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>RAND_MAX <span class=\"token operator\">+</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cloudA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token number\">64.0f</span> <span class=\"token operator\">*</span> <span class=\"token function\">rand</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>RAND_MAX <span class=\"token operator\">+</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 将点云A变成八叉树状结构</span>\n  octree<span class=\"token punctuation\">.</span><span class=\"token function\">setInputCloud</span> <span class=\"token punctuation\">(</span>cloudA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  octree<span class=\"token punctuation\">.</span><span class=\"token function\">addPointsFromInputCloud</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token comment\">// 点云A是我们的参考点云，用八叉树结构描述它的空间分布。</span>\n<span class=\"token comment\">// OctreePointCloudChangeDetector类继承自Octree2BufBase类，</span>\n<span class=\"token comment\">// 后者允许同时在内存中保存和管理两棵八叉树。</span>\n<span class=\"token comment\">// 此外，它实现了一个内存池，可以重用已经分配的节点对象，因此在生成多个点云的八叉树时减少了昂贵的内存分配和回收操作。</span>\n<span class=\"token comment\">//通过调用octree. switchbuffers()，我们重置了八叉树类，同时在内存中保留了之前的八叉树结构。</span>\n\n  <span class=\"token comment\">// 八叉树缓冲区:重置八叉树，但在内存中保留以前的树结构。</span>\n  octree<span class=\"token punctuation\">.</span><span class=\"token function\">switchBuffers</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 创建点云B的指针</span>\n  pcl<span class=\"token operator\">::</span>PointCloud<span class=\"token operator\">&lt;</span>pcl<span class=\"token operator\">::</span>PointXYZ<span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>Ptr <span class=\"token function\">cloudB</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> pcl<span class=\"token operator\">::</span>PointCloud<span class=\"token operator\">&lt;</span>pcl<span class=\"token operator\">::</span>PointXYZ<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \n  <span class=\"token comment\">// 为点云B生成一些随机点云数据</span>\n  cloudB<span class=\"token operator\">-&gt;</span>width <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span>\n  cloudB<span class=\"token operator\">-&gt;</span>height <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  cloudB<span class=\"token operator\">-&gt;</span>points<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span> <span class=\"token punctuation\">(</span>cloudB<span class=\"token operator\">-&gt;</span>width <span class=\"token operator\">*</span> cloudB<span class=\"token operator\">-&gt;</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> cloudB<span class=\"token operator\">-&gt;</span><span class=\"token function\">size</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cloudB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">64.0f</span> <span class=\"token operator\">*</span> <span class=\"token function\">rand</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>RAND_MAX <span class=\"token operator\">+</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cloudB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">64.0f</span> <span class=\"token operator\">*</span> <span class=\"token function\">rand</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>RAND_MAX <span class=\"token operator\">+</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cloudB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token number\">64.0f</span> <span class=\"token operator\">*</span> <span class=\"token function\">rand</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>RAND_MAX <span class=\"token operator\">+</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 将点云B设置成八叉树结构</span>\n  octree<span class=\"token punctuation\">.</span><span class=\"token function\">setInputCloud</span> <span class=\"token punctuation\">(</span>cloudB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  octree<span class=\"token punctuation\">.</span><span class=\"token function\">addPointsFromInputCloud</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 为了检索存储在当前八叉树结构体素(基于clouddB)中的点，这些点在之前的八叉树结构(基于clouddA)中不存在，我们可以调用getPointIndicesFromNewVoxels方法，它返回结果点索引的向量。</span>\n\n\t<span class=\"token comment\">// 创建输出点云的索引容器</span>\n  std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> newPointIdxVector<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 从八叉树体素中获取点索引向量，这在之前的缓冲区中不存在</span>\n    octree<span class=\"token punctuation\">.</span><span class=\"token function\">getPointIndicesFromNewVoxels</span> <span class=\"token punctuation\">(</span>newPointIdxVector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Output points</span>\n  std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Output from getPointIndicesFromNewVoxels:\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> newPointIdxVector<span class=\"token punctuation\">.</span><span class=\"token function\">size</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"# Index:\"</span> <span class=\"token operator\">&lt;&lt;</span> newPointIdxVector<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n              <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  Point:\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cloudB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>newPointIdxVector<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span>\n              <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cloudB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>newPointIdxVector<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span>\n              <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cloudB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>newPointIdxVector<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>z <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>  由以上代码可知，点云A生成八叉树结构后，使用<br/> pcl::octree::OctreePointCloudChangeDetectorpcl::PointXYZ octree (resolution);<br/> 和 octree.switchBuffers ();来分析无组织的点云的空间变化,将又一次生成的点云B放入之前点云A的树状结构中，并检索出点云B中没在之前点云A创建的树状结构中的点。<br/>    通俗来说可以这样理解，假设A是一片人型点云，由人型点云创建了一个八叉树状结构，此时八叉树涵盖了A中所有点的位置，当第二片人形点云B出现，B和A的唯一区别就是B的左臂向上抬，此时利用上述方式，将B也放入之前A的树状结构，但是B的左臂上的点肯定不在之前A的树状结构中，因此会产生额外的树叶，这些额外的树叶内的点就是变化的点，即左臂的点。<br/> 例如下图中红色区域。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6a04ca7d974e4804ad3192aec7ca87c4.png\"/><br/>   有人会问，为什么黑色的影子部分的点明明消失了，为何不变红？因为点虽然消失了，但是左图中点创建的树状结构依然存在，因此不被判定为变化的点。<br/>   <strong>需要注意的是，使用OcTree进行无组织的点的差分分析确实能起到较好结果，但是并不建议用在有序点的差分上，对于通常基于固定宽度和高度的单一2D深度/视差图像的有组织点云，直接对相应的2D深度图像进行差分分析可能会更快。</strong></p>\n<hr/>\n<p>【博主简介】<br/>   斯坦福的兔子，男，天津大学机械工程工学硕士。毕业至今从事光学三维成像及点云处理相关工作。因工作中使用的三维处理库为公司内部库，不具有普遍适用性，遂自学开源PCL库及其相关数学知识以备使用。谨此将自学过程与君共享。<br/> 博主才疏学浅，尚不具有指导能力，如有问题还请各位在评论处留言供大家共同讨论。<br/> 若前辈们有工作机会介绍欢迎私信。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-02-21 09:10:20", "summary": "中八叉树的原理及应用案例一、什么是八叉树？八叉树原理二、八叉树应用案例点云压缩用八叉树进行空间划分和搜索操作无序点云数据的空间变化检测一、什么是八叉树？八叉树原理上世纪年代，八叉树结构被提出来，用来表"}