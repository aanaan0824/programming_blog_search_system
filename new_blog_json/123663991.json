{"blogid": "123663991", "writerAge": "码龄6年", "writerBlogNum": "31", "writerCollect": "113", "writerComment": "17", "writerFan": "30", "writerGrade": "3级", "writerIntegral": "455", "writerName": "草原上唱山歌", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123663991.jpg", "writerRankTotal": "38319", "writerRankWeekly": "59730", "writerThumb": "121", "writerVisitNum": "33305", "blog_read_count": "7307", "blog_time": "已于 2022-04-07 12:44:13 修改", "blog_title": "Lambda表达式详解（C#）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>Lambda表达式可以采用以下任意一种形式的表达式：<br/> 1.表达式Lambda，表达式为其主体：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token punctuation\">(</span>input<span class=\"token operator\">-</span>parameters<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> expression\n</code></pre>\n<p>2.语句Lambda，语句块作为其主体：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token punctuation\">(</span>input<span class=\"token operator\">-</span>parameters<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token operator\">&lt;</span>sequence<span class=\"token operator\">-</span>of<span class=\"token operator\">-</span>statements<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p>使用<strong>Lambda声明运算符=&gt;</strong>，从其主体中分离Lambda参数列表。若要创建Lambda表达式，需要在Lambda运算符左侧指定输入参数（如果有参数时），然后在另一侧输入表达式或语句块。<br/> 任何Lambda表达式都可以转换为委托类型，可以转换的委托类型由参数和返回值的类型定义。如果Lambda表达式不返回值，则可以将其转换为<code>Action</code>委托类型之一；否则，可将其转换为<code>Func</code>委托类型之一。例如，有两个参数且不返回值的Lambda表达式可转化为<code>Action&lt;T1, T2&gt;</code>委托。有一个参数且不返回值的Lambda表达式可转换为<code>Func&lt;T, TResult&gt;</code>委托。<br/> 例如：Lambda表达式<code>x =&gt; x * x</code>，指定名为x的参数，并返回x的平方值，并将表达式<code>x =&gt; x * x</code>分配给委托类型的变量。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> Square <span class=\"token operator\">=</span> x <span class=\"token operator\">=&gt;</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"输出：</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\"><span class=\"token function\">Square</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//输出：100</span>\n</code></pre>\n<p>表达式Lambda还可以转换为表达式树类型，如下示例所示：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Linq<span class=\"token punctuation\">.</span>Expressions<span class=\"token punctuation\">.</span>Expression<span class=\"token punctuation\">&lt;</span>Func<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> e <span class=\"token operator\">=</span> x <span class=\"token operator\">=&gt;</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"输出：</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">e</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//输出：x =&gt; (x * x)</span>\n</code></pre>\n<p>可在需要委托类型或表达式树的实列的任何代码中使用Lambda表达式。用C#编写LINQ时，还可以使用Lambda表达式，如下所示：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> squaredNumbers <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=&gt;</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> squaredNumbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>表达式Lambda</strong><br/> 表达式位于=&gt;运算符右侧的Lambda表达式称为“表达式Lambda”。表达式Lambda广泛用于表达式树的构造，表达式Lambda会返回表达式的结果，并采用以下基本形式：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token punctuation\">(</span>input<span class=\"token operator\">-</span>parameters<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> experssion\n</code></pre>\n<p>仅当Lambda只有一个输入参数时，括号才是可选择的，否则括号是必须的。<br/> 使用空括号指定零个输入参数：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">Action</span> action <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>括号内的两个或更多的输入参数使用逗号加以分离：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">&gt;</span></span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>有时编译器无法推断输入类型，可以显示指定类型：</p>\n<pre><code class=\"prism language-cpp\">Func<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token operator\">&gt;</span> testTo <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> string str<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> str<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">&gt;</span> x<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>输入参数必须全部为显示或者全部为隐式；否则，编译器会产生报错。<br/> 表达式Lambda的主体可以包含方法调用。不过，若要创建在.NET公共语言运行时的上下文之外（如SQL Server中）计算的表达式树，不能在Lambda表达式中使用方法调用。因为在.NET公共语言运行时的上下文之外，方法将没有任何意义。</p>\n<p><strong>语句Lambda</strong><br/> 语句Lambda与表达式Lambda表达类似，只是语句括在大括号中：<br/> (input-parameters) =&gt; {}<br/> 语句Lambda的主体可以包含任意数量的语句；但是，通常不会多余两个或三个。<br/> Action action = name =&gt;<br/> {<!-- --><br/> string greeting = $“你好，{name}”;<br/> Console.WriteLine(greeting);<br/> };<br/> action(“莫扎特”);<br/> 语句Lambda也不能用于创建表达式目录树。</p>\n<p><strong>异步Lambda</strong><br/> 通过使用async和await关键字，可以轻松创建包含异步处理的Lambda表达式和语句。<br/> 例如，通过Windows窗体示例包含一个调用和等待异步方法<code>ExampleMethodAsync</code>的事件处理程序。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Form1</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Form</span></span> <span class=\"token punctuation\">{<!-- --></span> \n    <span class=\"token keyword\">public</span> <span class=\"token function\">Form1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">{<!-- --></span> \n             <span class=\"token function\">InitializeComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             button1<span class=\"token punctuation\">.</span>Click <span class=\"token operator\">+=</span> button1_Click<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">private</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">button1_Click</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">{<!-- --></span> \n               <span class=\"token keyword\">await</span> <span class=\"token function\">ExampleMethodAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n               textBox1<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">+=</span> <span class=\"token string\">\"\\r\\nControl returned to Click event handler.\\n\"</span><span class=\"token punctuation\">;</span>     <span class=\"token punctuation\">}</span>\n               <span class=\"token keyword\">private</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">ExampleMethodAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n               <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token comment\">// The following line simulates a task-returning asynchronous           </span>\n                        <span class=\"token return-type class-name\">process<span class=\"token punctuation\">.</span> <span class=\"token keyword\">await</span></span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>可以使用异步Lambda添加同一事件处理程序。若要添加此程序，请在Lambda参数列表前添加async修饰符，如下面示例所示：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Form1</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Form</span></span>\n  <span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token keyword\">public</span> <span class=\"token function\">Form1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">{<!-- --></span>\n                  <span class=\"token function\">InitializeComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                  button1<span class=\"token punctuation\">.</span>Click <span class=\"token operator\">+=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n                  <span class=\"token punctuation\">{<!-- --></span>\n                          <span class=\"token keyword\">await</span> <span class=\"token function\">ExampleMethodAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                          textBox1<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">+=</span> <span class=\"token string\">\"\\r\\nControl returned to Click event handler.\\n\"</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n         <span class=\"token keyword\">private</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">ExampleMethodAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">{<!-- --></span>\n                 <span class=\"token comment\">// The following line simulates a task-returning       asynchronous process.</span>\n                 <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Lambda表达式和元组</strong><br/> 从C#7.0起，C#语言提供对元组的内置支持。可以提供一个元组作为Lambda表达式的参数，同时Lambda表达式也可以返回一个元组。在某些情况下，C#编译器使用类型推理来确定元组组件的类型。<br/> 可通过用括号括住用逗号分割的组件列表来定义元组。下面的示例使用包含三个组件的元组，将一系列数字传递给Lambda表达式，此表达式将每个值翻倍，然后返回包含乘法运算结果的元组（内含三个元组）。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&gt;</span></span> Items <span class=\"token operator\">=</span> s <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> s<span class=\"token punctuation\">.</span>Item1<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> s<span class=\"token punctuation\">.</span>Item2<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> s<span class=\"token punctuation\">.</span>Item3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> numbersItem <span class=\"token operator\">=</span> <span class=\"token function\">Items</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"The set </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">nums</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> doubled:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">numbersItem</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>通常，元组字段命名为Item1、Item2等。但是，可以使用命名组件定义元组，如以下示例所示：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&gt;</span></span> items <span class=\"token operator\">=</span> s <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> s<span class=\"token punctuation\">.</span>n1<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> s<span class=\"token punctuation\">.</span>n2<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> s<span class=\"token punctuation\">.</span>n3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> num <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> itemNums <span class=\"token operator\">=</span> <span class=\"token function\">items</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"The set </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">num</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> doubled:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">itemNums</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>Lambda表达式中的类型推理</strong><br/> 编写Lambda时，通常不必为输入参数指定类型，因为编译器可以根据Lambda主体、参数类型以及C#语言规范中描述的其它因素来推断类型。对于大多数标准查询运算符，第一个输入是源序列中的元素类型。如要查询<code>IEnumerable&lt;Customer&gt;</code>，则输入变量将被推断为Customer对象，这就意味着你可以访问其属性和方法。</p>\n<pre><code class=\"prism language-csharp\">customer<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=&gt;</span> c<span class=\"token punctuation\">.</span>City <span class=\"token operator\">==</span> <span class=\"token string\">\"London\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Lambda类型推理的一般规则如下：</p>\n<ol><li>Lambda包含的参数数量必须与委托类型包含的参数数量相同； Lambda</li><li>中的每个输入参数必须都能够隐式转换为其对应的委托参数；</li><li>Lambda的返回值（如果有）必须能够隐式转换为委托的返回类型。</li></ol>\n<p><strong>注意：</strong> Lambda表达式本身没有类型，因为通用类型系统没有Lambda表达式这一固有概念。不过，有时以一种非正式的方式谈论Lambda表达式的“类型”会很方便，在这些情况下，类型是指委托类型或Lambda表达式所转换到的Expression类型。</p>\n<p><strong>捕获Lambda表达式中的外部变量和变量范围</strong><br/> Lambda可以引用外部变量。这些变量是在定义Lambda表达式的方法中或包含Lambda表达式的类型中的范围内变量。以这种方式捕获的变量将进行存储以备在Lambda表达式中使用，即使在其它情况下，这些变量将超出范围并进行垃圾回收。必须明确地分配外部变量，然后才能在Lambda表达式中使用该变量。<br/> 如下示例所示：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Class1</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VariableCaptureGame</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">internal</span> <span class=\"token class-name\">Action<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> updateCapturedLocalVariable<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">internal</span> <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">&gt;</span></span> isEqual<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RunCaptureGame</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> data<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                updateCapturedLocalVariable <span class=\"token operator\">=</span> x <span class=\"token operator\">=&gt;</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    k <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> result <span class=\"token operator\">=</span> k <span class=\"token operator\">&gt;</span> data<span class=\"token punctuation\">;</span>\n                    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">k</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> is greater than </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">data</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">result</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                isEqual <span class=\"token operator\">=</span> x <span class=\"token operator\">=&gt;</span> x <span class=\"token operator\">==</span> k<span class=\"token punctuation\">;</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Local variable before lambda invocation:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">k</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">updateCapturedLocalVariable</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Local variable after lambda invocation:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">k</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">InvokeMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> game <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">VariableCaptureGame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> gameInput <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n            game<span class=\"token punctuation\">.</span><span class=\"token function\">RunCaptureGame</span><span class=\"token punctuation\">(</span>gameInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> jTry <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> result <span class=\"token operator\">=</span> game<span class=\"token punctuation\">.</span><span class=\"token function\">isEqual</span><span class=\"token punctuation\">(</span>jTry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Captured local variable is equal to </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">jTry</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">result</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> anotherData <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n            game<span class=\"token punctuation\">.</span><span class=\"token function\">updateCapturedLocalVariable</span><span class=\"token punctuation\">(</span>anotherData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> anotherResult <span class=\"token operator\">=</span> game<span class=\"token punctuation\">.</span><span class=\"token function\">isEqual</span><span class=\"token punctuation\">(</span>anotherData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Another lambda observes a new value of captured variable:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">anotherResult</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>下列规则适用于Lambda表达式中的变量范围：<br/> 捕获的变量将不会作为垃圾回收，直至引用变量的委托符合垃圾回收的条件；<br/> 在封闭方法中看不到Lambda表达式内引入的变量；<br/> Lambda表达式无法从封闭方法中直接捕获<code>in、ref</code>或<code>out</code>参数；<br/> Lambda表达式中的return语句不会导致封闭方法返回；<br/> 如果相应跳转语句的目标位于Lambda表达式块之外，Lambda表达式不得包含goto、break或continue语句。同样，如果目标在块内部，在Lambda表达式块外部使用跳转语句也是错误的。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2022-04-07 12:44:13", "summary": "表达式可以采用以下任意一种形式的表达式：表达式，表达式为其主体：语句，语句块作为其主体：使用声明运算符，从其主体中分离参数列表。若要创建表达式，需要在运算符左侧指定输入参数如果有参数时，然后在另一侧输"}