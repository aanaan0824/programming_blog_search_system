{"blogid": "125104590", "writerAge": "码龄161天", "writerBlogNum": "54", "writerCollect": "2352", "writerComment": "2792", "writerFan": "2523", "writerGrade": "6级", "writerIntegral": "7306", "writerName": "锡兰_CC", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125104590.jpg", "writerRankTotal": "2027", "writerRankWeekly": "113", "writerThumb": "2544", "writerVisitNum": "40150", "blog_read_count": "745", "blog_time": "已于 2022-06-07 22:54:11 修改", "blog_title": "【开卷数据结构 】图的基本介绍，不进来看看吗？", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%F0%9F%8C%BA%E5%9B%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D-toc\" style=\"margin-left:0px;\"><a href=\"#%F0%9F%8C%BA%E5%9B%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D\">🌺图的基本介绍</a></p>\n<p id=\"%F0%9F%8D%81%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-toc\" style=\"margin-left:40px;\"><a href=\"#%F0%9F%8D%81%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0\">🍁图的基本概念</a></p>\n<p id=\"%F0%9F%8D%81%20%E5%9B%BE%E7%9A%84%E5%AE%9A%E4%B9%89-toc\" style=\"margin-left:40px;\"><a href=\"#%F0%9F%8D%81%20%E5%9B%BE%E7%9A%84%E5%AE%9A%E4%B9%89\">🍁 图的定义</a></p>\n<p id=\"%F0%9F%8C%BA%E5%9B%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%9C%AF%E8%AF%AD-toc\" style=\"margin-left:0px;\"><a href=\"#%F0%9F%8C%BA%E5%9B%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%9C%AF%E8%AF%AD\">🌺图的基本术语</a></p>\n<p id=\"1%EF%BC%89%E6%9C%89%E5%90%91%E5%9B%BE-toc\" style=\"margin-left:40px;\"><a href=\"#1%EF%BC%89%E6%9C%89%E5%90%91%E5%9B%BE\">1）有向图</a></p>\n<p id=\"2%EF%BC%89%E6%97%A0%E5%90%91%E5%9B%BE-toc\" style=\"margin-left:40px;\"><a href=\"#2%EF%BC%89%E6%97%A0%E5%90%91%E5%9B%BE\">2）无向图</a></p>\n<p id=\"3%EF%BC%89%E7%AE%80%E5%8D%95%E5%9B%BE-toc\" style=\"margin-left:40px;\"><a href=\"#3%EF%BC%89%E7%AE%80%E5%8D%95%E5%9B%BE\">3）简单图</a></p>\n<p id=\"4%EF%BC%89%E5%A4%9A%E9%87%8D%E5%9B%BE-toc\" style=\"margin-left:40px;\"><a href=\"#4%EF%BC%89%E5%A4%9A%E9%87%8D%E5%9B%BE\">4）多重图</a></p>\n<p id=\"5%EF%BC%89%E5%AE%8C%E5%85%A8%E5%9B%BE-toc\" style=\"margin-left:40px;\"><a href=\"#5%EF%BC%89%E5%AE%8C%E5%85%A8%E5%9B%BE\">5）完全图</a></p>\n<p id=\"6%EF%BC%89%E5%AD%90%E5%9B%BE-toc\" style=\"margin-left:40px;\"><a href=\"#6%EF%BC%89%E5%AD%90%E5%9B%BE\">6）子图</a></p>\n<p id=\"7%EF%BC%89%E8%BF%9E%E9%80%9A%E3%80%81%E8%BF%9E%E9%80%9A%E5%9B%BE%E5%92%8C%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F-toc\" style=\"margin-left:40px;\"><a href=\"#7%EF%BC%89%E8%BF%9E%E9%80%9A%E3%80%81%E8%BF%9E%E9%80%9A%E5%9B%BE%E5%92%8C%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F\">7）连通、连通图和连通分量</a></p>\n<p id=\"8%EF%BC%89%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%9B%BE%E3%80%81%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F-toc\" style=\"margin-left:40px;\"><a href=\"#8%EF%BC%89%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%9B%BE%E3%80%81%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F\">8）强连通图、强连通分量</a></p>\n<p id=\"9%EF%BC%89%E9%A1%B6%E7%82%B9%E7%9A%84%E5%BA%A6%E3%80%81%E5%85%A5%E5%BA%A6%E5%92%8C%E5%87%BA%E5%BA%A6-toc\" style=\"margin-left:40px;\"><a href=\"#9%EF%BC%89%E9%A1%B6%E7%82%B9%E7%9A%84%E5%BA%A6%E3%80%81%E5%85%A5%E5%BA%A6%E5%92%8C%E5%87%BA%E5%BA%A6\">9）顶点的度、入度和出度</a></p>\n<p id=\"10%EF%BC%89%E8%BE%B9%E7%9A%84%E6%9D%83%E5%92%8C%E7%BD%91-toc\" style=\"margin-left:40px;\"><a href=\"#10%EF%BC%89%E8%BE%B9%E7%9A%84%E6%9D%83%E5%92%8C%E7%BD%91\">10）边的权和网</a></p>\n<p id=\"11)%E7%94%9F%E6%88%90%E6%A0%91%E3%80%81%E7%94%9F%E6%88%90%E6%A3%AE%E6%9E%97-toc\" style=\"margin-left:40px;\"><a href=\"#11%29%E7%94%9F%E6%88%90%E6%A0%91%E3%80%81%E7%94%9F%E6%88%90%E6%A3%AE%E6%9E%97\">11)生成树、生成森林</a></p>\n<p id=\"12)%E7%A8%A0%E5%AF%86%E5%9B%BE%E3%80%81%E7%A8%80%E7%96%8F%E5%9B%BE-toc\" style=\"margin-left:40px;\"><a href=\"#12%29%E7%A8%A0%E5%AF%86%E5%9B%BE%E3%80%81%E7%A8%80%E7%96%8F%E5%9B%BE\">12)稠密图、稀疏图</a></p>\n<p id=\"13%EF%BC%89%E8%B7%AF%E5%BE%84%E3%80%81%E8%B7%AF%E5%BE%84%E9%95%BF%E5%BA%A6%E5%92%8C%E5%9B%9E%E8%B7%AF-toc\" style=\"margin-left:40px;\"><a href=\"#13%EF%BC%89%E8%B7%AF%E5%BE%84%E3%80%81%E8%B7%AF%E5%BE%84%E9%95%BF%E5%BA%A6%E5%92%8C%E5%9B%9E%E8%B7%AF\">13）路径、路径长度和回路</a></p>\n<p id=\"%F0%9F%8C%BA%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%C2%A0-toc\" style=\"margin-left:0px;\"><a href=\"#%F0%9F%8C%BA%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%C2%A0\">🌺图的存储结构 </a></p>\n<p id=\"%F0%9F%8D%81%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5-toc\" style=\"margin-left:40px;\"><a href=\"#%F0%9F%8D%81%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5\">🍁邻接矩阵</a></p>\n<p id=\"%F0%9F%92%AC%20%E4%BB%A3%E7%A0%81%E6%BC%94%E7%A4%BA-toc\" style=\"margin-left:80px;\"><a href=\"#%F0%9F%92%AC%20%E4%BB%A3%E7%A0%81%E6%BC%94%E7%A4%BA\">💬 代码演示</a></p>\n<p id=\"%F0%9F%8D%81%E9%82%BB%E6%8E%A5%E8%A1%A8-toc\" style=\"margin-left:40px;\"><a href=\"#%F0%9F%8D%81%E9%82%BB%E6%8E%A5%E8%A1%A8\">🍁邻接表</a></p>\n<p id=\"%F0%9F%92%AC%20%E4%BB%A3%E7%A0%81%E6%BC%94%E7%A4%BA-toc\" style=\"margin-left:80px;\"><a href=\"#%F0%9F%92%AC%20%E4%BB%A3%E7%A0%81%E6%BC%94%E7%A4%BA\">💬 代码演示</a></p>\n<p class=\"img-center\"><img alt=\"\" height=\"106\" src=\"..\\..\\static\\image\\e2abcedd769b49b1b45435f28deb9976.png\" width=\"700\"/></p>\n<h1 id=\"%F0%9F%8C%BA%E5%9B%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D\">🌺图的基本介绍</h1>\n<blockquote>\n<h2 id=\"%F0%9F%8D%81%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0\"><a name=\"t2\"></a><span style=\"background-color:#f9eda6;\">🍁图的基本概念</span></h2>\n<hr/>\n<p><span style=\"color:#be191c;\">在图形结构中，结点之间的关系可以是任意的，图中任意两个数据元素之间都可能相关</span>。因此，图的应用更为广泛。</p>\n<hr/>\n<h2 id=\"%F0%9F%8D%81%20%E5%9B%BE%E7%9A%84%E5%AE%9A%E4%B9%89\"><span style=\"background-color:#f9eda6;\">🍁 图的定义</span></h2>\n<hr/>\n<p><span style=\"color:#38d8f0;\"><strong>Q：什么是最大堆</strong></span></p>\n<p></p>\n<p><strong><span style=\"color:#ff9900;\">A：</span></strong><span style=\"color:#be191c;\">图 G 由两个集合 V 和 E 组成，记作 G=(V,E) </span>。其中 V 是顶点的有穷非空集合，E 是 V 中顶点偶对的有穷集合，这些顶点偶对称为边。V(G) 和 E(G) 通常分别表示图 G 的顶点集合和边集合。<span style=\"color:#956fe7;\"> E(G) 可以为空集，若 E(G) 为空集，则图 G 只有顶点而没有边。</span></p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"106\" src=\"..\\..\\static\\image\\e2abcedd769b49b1b45435f28deb9976.png\" width=\"700\"/></p>\n<h1 id=\"%F0%9F%8C%BA%E5%9B%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%9C%AF%E8%AF%AD\">🌺图的基本术语</h1>\n<blockquote>\n<h2 id=\"1%EF%BC%89%E6%9C%89%E5%90%91%E5%9B%BE\"><span style=\"background-color:#f9eda6;\">1）有向图</span></h2>\n<hr/>\n<p><span style=\"color:#38d8f0;\"><strong>Q：什么是有向图</strong></span></p>\n<p></p>\n<p><strong><span style=\"color:#ff9900;\">A：</span></strong><span style=\"color:#be191c;\">若E是有向边(也称弧)的有限集合时，则图 G 为有向图</span>。弧是顶点的有序对，记为 &lt;v, w&gt; ，其中 v,w 是顶点，v 称为弧尾，w 称为弧头，&lt;v,w&gt; 称为从顶点 v 到顶点 w 的弧，也称 v 邻接到w，也称为 w 邻接自 v 。</p>\n<p style=\"text-align:center;\"><span style=\"color:#ffd900;\"><strong>有向图 G：</strong></span></p>\n<p style=\"text-align:center;\"><span style=\"color:#a2e043;\"><strong>G＝（V，E）<br/> V(G)={v1,v2,v3,v4,v5}<br/> E(G)={&lt;v1,v2&gt;,&lt;v2,v1&gt;,&lt;v2,v3&gt;,&lt;v2,v5&gt;,&lt;v3,v5&gt;,&lt;v4,v1&gt;,&lt;v5,v2&gt;}</strong></span></p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"..\\..\\static\\image\\db072ce75d63484da267406473cc1c27.png\" width=\"363\"/></p>\n<hr/>\n<h2 id=\"2%EF%BC%89%E6%97%A0%E5%90%91%E5%9B%BE\"><span style=\"background-color:#f9eda6;\">2）无向图</span></h2>\n<hr/>\n<p><span style=\"color:#38d8f0;\"><strong>Q：什么是无向图</strong></span></p>\n<p></p>\n<p><strong><span style=\"color:#ff9900;\">A：</span></strong><span style=\"color:#be191c;\">若E是无向边(简称边)的有限集合时，则图G为无向图</span>。边是顶点的无序对，记为 (v, w) 或 (w,v) ,因为 (v,w)=(w,v) , 其中 v,w 是顶点。可以说顶点 w 和顶点 v 互为邻接点。边 (v, w) 依附于顶点 w 和 v ，或者说边( v, w) 和顶点  v, w 相关联。</p>\n<p style=\"text-align:center;\"><span style=\"color:#ffd900;\"><strong>无向图 G：</strong></span></p>\n<p style=\"text-align:center;\"><strong><span style=\"color:#a2e043;\">G＝（V，E）<br/> V(G)={v1,v2,v3,v4,v5}<br/> E(G)={(v1,v2),(v1,v4),(v2,v4),(v3,v4),(v3,v5)}</span></strong></p>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" height=\"300\" src=\"..\\..\\static\\image\\05dfc35556054505a5fb5c3e356c0bf4.png\" width=\"371\"/></p>\n<p></p>\n<hr/>\n<h2 id=\"3%EF%BC%89%E7%AE%80%E5%8D%95%E5%9B%BE\"><span style=\"background-color:#f9eda6;\">3）简单图</span></h2>\n<hr/>\n<p><span style=\"color:#38d8f0;\"><strong>Q：什么是简单图</strong></span></p>\n<p></p>\n<p><strong><span style=\"color:#ff9900;\">A：</span></strong><span style=\"color:#be191c;\">一个图 G 若满足:不存在重复边，不存在顶点到自身的边，则称图 G 为简单图</span>。数据结构中仅讨论简单图。</p>\n<hr/>\n<h2 id=\"4%EF%BC%89%E5%A4%9A%E9%87%8D%E5%9B%BE\"><span style=\"background-color:#f9eda6;\">4）多重图</span></h2>\n<hr/>\n<p><span style=\"color:#38d8f0;\"><strong>Q：什么是多重图</strong></span></p>\n<p></p>\n<p><strong><span style=\"color:#ff9900;\">A：</span></strong><span style=\"color:#be191c;\">若图 G 中某两个结点之间的边数多于一条，又允许顶点通过同一条边和自己关联，则 G  为多重图</span>。多重图的定义和简单图是相对的。</p>\n<hr/>\n<h2 id=\"5%EF%BC%89%E5%AE%8C%E5%85%A8%E5%9B%BE\"><span style=\"background-color:#f9eda6;\">5）完全图</span></h2>\n<hr/>\n<p><span style=\"color:#38d8f0;\"><strong>Q：什么是完全图</strong></span></p>\n<p></p>\n<p><strong><span style=\"color:#ff9900;\">A：</span></strong><span style=\"color:#be191c;\">对于无向图，∣E∣ 的取值范围是 0 到 n(n-1)/2 ，有 n(n -1)/2 条边的无向图称为完全图</span>。在完全图中任意两个顶点之间都存在边。对于有向图, |E| 的取值范围是 0 到 n(n-1) ，<span style=\"color:#956fe7;\">有 n(n-1) 条弧的有向图称为有向完全图，在有向完全图中任意两个顶点之间都存在方向相反的两条弧。</span></p>\n<p style=\"text-align:center;\"><span style=\"color:#ffd900;\"><strong>无向完全图</strong></span></p>\n<p class=\"img-center\"><img alt=\"\" height=\"200\" src=\"..\\..\\static\\image\\68f0b8ed152c4c069b4307e68dcba27f.png\" width=\"198\"/></p>\n<p></p>\n<p style=\"text-align:center;\"><span style=\"color:#ffd900;\"><strong>有向完全图</strong></span></p>\n<p class=\"img-center\"><img alt=\"\" height=\"200\" src=\"..\\..\\static\\image\\e268cae7955348ec976ca50e4bfb38f0.png\" width=\"197\"/></p>\n<hr/>\n<h2 id=\"6%EF%BC%89%E5%AD%90%E5%9B%BE\"><span style=\"background-color:#f9eda6;\">6）子图</span></h2>\n<hr/>\n<p><span style=\"color:#38d8f0;\"><strong>Q：什么是子图</strong></span></p>\n<p></p>\n<p><strong><span style=\"color:#ff9900;\">A：</span></strong>设有两个图 G=(V, E) 和  G'=(V', E') ，若  V' 是 V 的子集，且 E ′ 是 E 的子集，则称 G ′ 是 G 的子图。若有满足 V(G')= V(G) 的子图 G′，则称其为 G 的生成子图。</p>\n<p><span style=\"color:#ff9900;\"><strong>注意:</strong></span>并非 V 和 E 的任何子集都能构成 G 的子图，因为这样的子集可能不是图，即 E 的子集中的某些边关联的顶点可能不在这个 V 的子集中。</p>\n<hr/>\n<h2 id=\"7%EF%BC%89%E8%BF%9E%E9%80%9A%E3%80%81%E8%BF%9E%E9%80%9A%E5%9B%BE%E5%92%8C%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F\"><span style=\"background-color:#f9eda6;\">7）连通、连通图和连通分量</span></h2>\n<hr/>\n<p>在无向图中，若从顶点 v到顶点 w有路径存在，<span style=\"color:#be191c;\">则称 v 和 w 是连通的</span>。</p>\n<p>若图 G 中任意两个顶点都是连通的，<span style=\"color:#be191c;\">称图 G 为连通图，否则称为非连通图</span>。</p>\n<p>无向图中的极大连通子图称为<span style=\"color:#be191c;\">连通分量</span>。</p>\n<p>若一个图有 n 个顶点，并且边数小于 n − 1 ，则此图必是非连通图。</p>\n<hr/>\n<h2 id=\"8%EF%BC%89%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%9B%BE%E3%80%81%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F\"><span style=\"background-color:#f9eda6;\">8）强连通图、强连通分量</span></h2>\n<hr/>\n<p>在有向图中，若从顶点 v 到顶点 w 和从顶点 w 到项点 v 之间都有路径,<span style=\"color:#be191c;\">则称这两个顶点是强连通的。</span></p>\n<p>若图中任何一对顶点都是强连通的，<span style=\"color:#be191c;\">则称此图为强连通图。</span></p>\n<p>有向图中的极大强连通子图<span style=\"color:#be191c;\">称为有向图的强连通分量。</span></p>\n<p><span style=\"color:#ff9900;\"><strong>注意:</strong></span>强连通图、强连通分量只是针对有向图而言的。一般在无向图中讨论连通性，在有向图中考虑强连通性。</p>\n<hr/>\n<h2 id=\"9%EF%BC%89%E9%A1%B6%E7%82%B9%E7%9A%84%E5%BA%A6%E3%80%81%E5%85%A5%E5%BA%A6%E5%92%8C%E5%87%BA%E5%BA%A6\"><span style=\"background-color:#f9eda6;\">9）顶点的度、入度和出度</span></h2>\n<hr/>\n<p><span style=\"color:#ff9900;\"><strong>无向图：</strong></span>以顶点 i 为端点的边数称为该顶点的度。<br/><span style=\"color:#ff9900;\"><strong>有向图：</strong></span>以顶点 i 为终点的入边的数目称为该顶点的入度。以顶点 i 为始点的出边的数目称为该顶点的出度。<span style=\"color:#956fe7;\">一个顶点的入度和出度和称为该顶点的度</span>。</p>\n<hr/>\n<h2 id=\"10%EF%BC%89%E8%BE%B9%E7%9A%84%E6%9D%83%E5%92%8C%E7%BD%91\"><span style=\"background-color:#f9eda6;\">10）边的权和网</span></h2>\n<hr/>在一个图中，每条边都可以标上具有某种含义的数值，该数值称为该边的\n <span style=\"color:#be191c;\">权值</span>。这种边上带有权值的图称为\n <span style=\"color:#be191c;\">带权图，也称网</span>。 \n <hr/>\n<h2 id=\"11)%E7%94%9F%E6%88%90%E6%A0%91%E3%80%81%E7%94%9F%E6%88%90%E6%A3%AE%E6%9E%97\"><span style=\"background-color:#f9eda6;\">11)生成树、生成森林</span></h2>\n<hr/>\n<p><span style=\"color:#be191c;\">连通图的生成树是包含图中全部顶点的一个极小连通子图</span>。若图中顶点数为 n ,则它的生成树含有 n-1 条边。对生成树而言，若砍去它的一条边，则会变成非连通图，若加上一条边则会形成一个回路。<span style=\"color:#956fe7;\">在非连通图中，连通分量的生成树构成了非连通图的生成森林</span>。</p>\n<hr/>\n<h2 id=\"12)%E7%A8%A0%E5%AF%86%E5%9B%BE%E3%80%81%E7%A8%80%E7%96%8F%E5%9B%BE\"><span style=\"background-color:#f9eda6;\">12)稠密图、稀疏图</span></h2>\n<hr/>\n<p>边数很少的图称为稀疏图，反之称为稠密图。稀疏和稠密本身是模糊的概念，稀疏图和稠密图常常是相对而言的。一般当图 G 满足  |E| &lt; |V|log|V| 时，可以将 G 视为稀疏图。</p>\n<hr/>\n<h2 id=\"13%EF%BC%89%E8%B7%AF%E5%BE%84%E3%80%81%E8%B7%AF%E5%BE%84%E9%95%BF%E5%BA%A6%E5%92%8C%E5%9B%9E%E8%B7%AF\"><span style=\"background-color:#f9eda6;\">13）路径、路径长度和回路</span></h2>\n<hr/>\n<p>顶点 vp ​到顶点 vq​ 之间的一条路径是指顶点序列 vp​,vi1​​,vi2​​,...,vim​​,vq​ 当然关联的边也可以理解为路径的构成要素。<span style=\"color:#be191c;\">路径上边的数目称为路径长度</span>。第一个顶点和最后一个顶点相同的路径称为回路或环。<span style=\"color:#956fe7;\">若一个图有 n 个顶点，并且有大于 n-1 条边，则此图一定有环</span>。</p>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"106\" src=\"..\\..\\static\\image\\e2abcedd769b49b1b45435f28deb9976.png\" width=\"700\"/></p>\n<h1 id=\"%F0%9F%8C%BA%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%C2%A0\">🌺图的存储结构 </h1>\n<blockquote>\n<p>图的存储必须完整准确的反映顶点集和边集的信息，下面我们介绍两种简单的方法。</p>\n<h2 id=\"%F0%9F%8D%81%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5\"><span style=\"background-color:#f9eda6;\">🍁邻接矩阵</span></h2>\n<hr/>\n<p><span style=\"color:#be191c;\">图的邻接矩阵存储方式是用两个数组来表示图。一个一维数组 V 存储图中顶点信息，一个二维数组(称为邻接矩阵) A 存储图中的边或弧的信息</span>。</p>\n<p>设 G=(V，E) 是具有n个顶点的图，顶点的顺序为（v0，v1 ，… ，vn－1），则G的邻接矩阵A：</p>\n<p class=\"img-center\"><img alt=\"\" height=\"100\" src=\"..\\..\\static\\image\\6dcace20cabf49bbaab04b825882653a.png\" width=\"593\"/></p>\n<p style=\"text-align:center;\"><span style=\"color:#ffd900;\"><strong> 下图是一个无向图和它的邻接矩阵：</strong></span></p>\n<p class=\"img-center\"><img alt=\"\" height=\"400\" src=\"..\\..\\static\\image\\04773bd9a0374fdeb4f08b2716722b54.png\" width=\"693\"/></p>\n<p><span style=\"color:#ff9900;\"><strong> 通过观察不难发现：</strong></span></p>\n<ul><li><span style=\"color:#a2e043;\"><strong>1）</strong></span>无向图的邻接矩阵是一个对称矩阵，且主对角线都为 0 。</li><li><span style=\"color:#a2e043;\"><strong>2）</strong></span>我们要知道某个顶点的度，其实就是这个顶点 Vi 在邻接矩阵中第 i 行(或第 i 列)的元素之相。比如顶点 V1 的度就是 0+1+0+1+0=2 。</li><li><span style=\"color:#a2e043;\"><strong>3）</strong></span>求顶点 vi​ 的所有邻接点就是将矩阵中第 i 行元素扫描一遍， A[i][j] 为 1 就是邻接点。</li></ul>\n<hr/>\n<p style=\"text-align:center;\"><span style=\"color:#ffd900;\"><strong> 下图是一个有向图和它的邻接矩阵：</strong></span></p>\n<p class=\"img-center\"><img alt=\"\" height=\"400\" src=\"..\\..\\static\\image\\c7a1ec31abb14a93aa55382bb009f986.png\" width=\"751\"/></p>\n<p> <span style=\"color:#ff9900;\"><strong> 通过观察不难发现：</strong></span></p>\n<ul><li><span style=\"color:#a2e043;\"><strong>1）</strong></span>有向图的邻接矩阵不是一个对称矩阵，且主对角线都为 0 。</li><li><span style=\"color:#a2e043;\"><strong>2）</strong></span>有向图讲究入度与出度，顶点 V1 ​的入度为 1 ,正好是第 V1 ​列各数之和。顶点 V1 ​的出度为 2，即第 V1 ​行的各数之和。</li></ul>\n<hr/>\n<p>对于带权图来说，若顶点 Vi​ 和 Vj​ 之间有边相连，则邻接矩阵中对应项存放着该边对应的权值</p>\n<p class=\"img-center\"><img alt=\"\" height=\"100\" src=\"..\\..\\static\\image\\9164445e05f84ce09370523ecb095a67.png\" width=\"376\"/></p>\n<p style=\"text-align:center;\"><span style=\"color:#ffd900;\"><strong> 下图是有向网图和它的邻接矩阵：</strong></span></p>\n<p class=\"img-center\"><img alt=\"\" height=\"200\" src=\"..\\..\\static\\image\\4e231bce39864cb38df070cad2f80f39.png\" width=\"425\"/></p>\n<h3 id=\"%F0%9F%92%AC%20%E4%BB%A3%E7%A0%81%E6%BC%94%E7%A4%BA\"><strong><span style=\"background-color:#c7e6ea;\">💬 代码演示</span></strong></h3>\n<p>通过上文，我们可以定义出邻接矩阵的存储结构：</p>\n<pre><code class=\"language-cpp\">#define MAXNum  100\t\t  \t\t //顶点的最大值 \ntypedef  char  VertexType;  \t //顶点信息为字符类型\ntypedef  struct\n{   \n    VertexType   Vex[MAXNum];    //顶点表 \n    int   arcs[MAXNum][MAXNum];  //邻接矩阵\n    int   vexnum,arcnum;         //顶点数和边数\n}MGraph;</code></pre>\n<hr/>\n<h2 id=\"%F0%9F%8D%81%E9%82%BB%E6%8E%A5%E8%A1%A8\"><span style=\"background-color:#f9eda6;\">🍁邻接表</span></h2>\n<hr/>\n<p>当一个图为稀疏图时，使用邻接矩阵法显然要浪费大量的存储空间，图的邻接表法结合了顺序存储和链式存储方法，可以大大减少这种不必要的浪费。</p>\n<p><span style=\"color:#ff9900;\"><strong>邻接表的处理办法：</strong></span></p>\n<ol><li>  <span style=\"color:#be191c;\">图中顶点用一个一维数组存储，当然也可以用单链表来存储</span>。用数组可以较容易的读取顶点信息，更加方便。另外，对于顶点数组中，每个数据元素还需要存储指向第一个邻接点的指针，以便于查找该顶点的边信息。</li><li> <span style=\"color:#be191c;\">图中每个顶点 vi 的所有邻接点构成一个线性表</span>。由于邻接点的个数不定，所以用单链表存储，无向图称为顶点 vi 的边表，有向图则称为以 vi 为弧尾的出边表。</li></ol>\n<p style=\"text-align:center;\"><span style=\"color:#ffd900;\"><strong>下图是一个无向图的邻接表结构：</strong></span></p>\n<p class=\"img-center\"><img alt=\"\" height=\"342\" src=\"..\\..\\static\\image\\00d5e7bfccde4058bda7637982ebf6c1.png\" width=\"1133\"/></p>\n<p></p>\n<p><span style=\"color:#ff9900;\"><strong>邻接表存储的图具有的特点：</strong></span></p>\n<ul><li>邻接表表示不唯一。取决于单链表的创建算法和边的输入次序。</li><li>对于无向图，邻接表的顶点 vi 对应的第i个链表的边结点数目正好是顶点 vi 的度。</li><li>对于有向图，邻接表的顶点 vi 对应的第 i 个链表的边结点数目仅是顶点 vi 的出度。入度为所有邻接点域为 i 的边结点的数目。</li></ul>\n<h3><strong><span style=\"background-color:#c7e6ea;\">💬 代码演示</span></strong></h3>\n<pre><code class=\"language-cpp\">#define MAXVEX 100\t//图中顶点数目的最大值\ntypedef char VertexType;\t\ntypedef int EdgeType;\t\n//边表结点\ntypedef struct EdgeNode{\n\tint adjvex;\t                //该弧所指向的顶点的下标或者位置\n\tEdgeType weight;\t        //权值，对于非网图可以不需要\n\tstruct EdgeNode *next;\t    //指向下一个邻接点\n}EdgeNode;\n\n//顶点表结点\ntypedef struct VertexNode{\n\tVertex data;\t            //顶点域，存储顶点信息\n\tEdgeNode *firstedge\t        //边表头指针\n}VertexNode, AdjList[MAXVEX];\n\n//邻接表\ntypedef struct{\n\tAdjList adjList;\n\tint numVertexes, numEdges;\t//图中当前顶点数和边数\n}\n</code></pre>\n</blockquote>\n<p></p>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-06-07 22:54:11", "summary": "目录图的基本介绍图的基本概念图的定义图的基本术语有向图无向图简单图多重图完全图子图连通、连通图和连通分量强连通图、强连通分量顶点的度、入度和出度边的权和网生成树、生成森林稠密图、稀疏图路径、路径长度和"}