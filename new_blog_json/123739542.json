{"blogid": "123739542", "writerAge": "码龄5年", "writerBlogNum": "57", "writerCollect": "653", "writerComment": "184", "writerFan": "1711", "writerGrade": "5级", "writerIntegral": "1840", "writerName": "糖果墙", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123739542.jpg", "writerRankTotal": "51058", "writerRankWeekly": "5143", "writerThumb": "338", "writerVisitNum": "170293", "blog_read_count": "16302", "blog_time": "已于 2022-05-01 01:23:52 修改", "blog_title": "黑马程序员Spring视频教程，全面深度讲解spring5底层原理 学习笔记", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"_1\"></a>介绍</h1>\n<p>代码仓库地址：<a href=\"https://gitee.com/CandyWall/spring-source-study\">https://gitee.com/CandyWall/spring-source-study</a><br/> 跟着<strong>黑马满一航老师的spring高级49讲</strong>做的学习笔记，本笔记跟视频内容的项目名称和代码略有不同，我将49讲的代码每一讲的代码都拆成了独立的springboot项目，并且项目名称尽量做到了见名知意，都是基于我自己的考量，代码都已经过运行验证过的，仅供参考。</p>\n<p>视频教程地址：<a href=\"https://www.bilibili.com/video/BV1P44y1N7QG\">https://www.bilibili.com/video/BV1P44y1N7QG</a></p>\n<p><font color=\"red\">注：</font></p>\n<p>​ <font color=\"red\">1. 每一讲对应一个二级标题，每一个三级标题是使用子项目名称命名的，和我代码仓库的项目是一一对应的；</font><br/> ​ <font color=\"red\">2. 代码里面用到了lombok插件来简化了Bean中的get()、set()方法，以及日志的记录的时候用了lombok的@Slf4j注解。</font></p>\n<p><strong>笔记中如有不正确的地方，欢迎在评论区指正，非常感谢！！！</strong></p>\n<p>每个子项目对应的视频链接以及一些重要内容的笔记</p>\n<h2><a id=\"_BeanFactoryApplicationContext_17\"></a>第一讲 <code>BeanFactory</code>与<code>ApplicationContext</code>的区别与联系</h2>\n<h3><a id=\"spring_01_beanfactory_applicationcontext_differences_connections_19\"></a>spring_01_beanfactory_applicationcontext_differences_connections</h3>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=1\">p1 000-Spring高级49讲-导学</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=2\">p2 001-第一讲-BeanFactory与ApplicationContext_1</a></p>\n<p>测试代码：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A01Application</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">ConfigurableApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">A01Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// class org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>到底什么是<code>BeanFactory</code></p>\n<ul><li> <p>它是<code>ApplicationContext</code>的父接口</p> <p>鼠标选中<code>ConfigurableApplicationContext</code>，按<code>Ctrl + Shift + U</code>或者<code>Ctrl + Alt + U</code>打开类图，可以看到<code>ApplicationContext</code>的有个父接口是<code>BeanFactory</code></p> <p><img alt=\"image-20220323144102451\" src=\"..\\..\\static\\image\\3832c4f24cea09f5ecc43bb754db20bf.png\"/></p> </li><li> <p>它才是 <code>Spring</code> 的核心容器，主要的 <code>ApplicationContext</code> 实现都 [组合]了他的功能</p> <p>打印<code>context.getClass()</code>，可以看到SpringBoot的启动程序返回的<code>ConfigurableApplicationContext</code>的具体的实现类是<code>AnnotationConfigServletWebServerApplicationContext</code></p> <pre><code class=\"prism language-java\"><span class=\"token class-name\">ConfigurableApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">A01Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>按图索骥，<code>AnnotationConfigServletWebServerApplicationContext</code>又间接继承了<code>GenericApplicationContext</code>，在这个类里面可以找到<code>beanFactory</code>作为成员变量出现。</p> <p><img alt=\"image-20220404140925587\" src=\"..\\..\\static\\image\\d49de814a0f288562e589e33bae4e72c.png\"/></p> <p><img alt=\"image-20220404141152288\" src=\"..\\..\\static\\image\\426bf260a6709ba4b1035d72fb07858f.png\"/></p> </li></ul>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=3\">p3 002-第一讲-BeanFactory功能</a></p>\n<p><code>BeanFactory</code>接口中的方法</p>\n<p><img alt=\"image-20220323145908937\" src=\"..\\..\\static\\image\\0eac61ba888f3489c38af58d5edcc2fb.png\"/></p>\n<p>查看<code>springboot</code>默认的<code>ConfigurableApplicationContext</code>类中的<code>BeanFactory</code>的实际类型</p>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">ConfigurableApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">A01Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext</span>\n<span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 查看实际类型</span>\n<span class=\"token comment\">// class org.springframework.beans.factory.support.DefaultListableBeanFactory</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>从打印结果可以了解到实际类型为<code>DefaultListableBeanFactory</code>，所以这里以<code>BeanFactory</code>的一个实现类<code>DefaultListableBeanFactory</code>作为出发点，进行分析。</p>\n<p>它的类图如下：</p>\n<p><img alt=\"image-20220323150712761\" src=\"..\\..\\static\\image\\c0417c47fe74885cc87a92f0fd2a0550.png\"/></p>\n<p>这里我们暂且不细看<code>DefaultListableBeanFactory</code>，先看<code>DefaultListableBeanFactory</code>的父类<code>DefaultSingletonBeanFactory</code>，先选中它，然后按<code>F12</code>，可以跳转到对应的源码，可以看到有个私有的成员变量<code>singletonObjects</code></p>\n<p><img alt=\"image-20220323150929451\" src=\"..\\..\\static\\image\\9c77ae14658ff91a15ea327f73e69e3a.png\"/></p>\n<p>这里通过反射的方法来获取该成员变量，进行分析</p>\n<blockquote>\n<p>先补充一下反射获取某个类的成员变量的步骤：</p>\n<p>获取成员变量，步骤如下：</p>\n<ol><li> <p>获取Class对象</p> </li><li> <p>获取构造方法</p> </li><li> <p>通过构造方法，创建对象</p> </li><li> <p>获取指定的成员变量（私有成员变量，通过<strong>setAccessible</strong>(boolean flag)方法暴力访问）</p> </li><li> <p>通过方法，给指定对象的指定成员变量赋值或者获取值</p> </li></ol>\n<p>public void set(Object obj, Object value)</p>\n<p>​ 在指定对象obj中，将此 Field 对象表示的成员变量设置为指定的新值</p>\n<p>​ public Object get(Object obj)</p>\n<p>​ 返回指定对象obj中，此 Field 对象表示的成员变量的值</p>\n</blockquote>\n<p>代码如下：</p>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">Field</span> singletonObjects <span class=\"token operator\">=</span> <span class=\"token class-name\">DefaultSingletonBeanRegistry</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"singletonObjects\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 设置私有变量可以被访问</span>\nsingletonObjects<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> map <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">)</span> singletonObjects<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 查看实际类型</span>\n<span class=\"token comment\">// class org.springframework.beans.factory.support.DefaultListableBeanFactory</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>entry <span class=\"token operator\">-&gt;</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"component\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这里<code>singletonObjects.get(beanFactory)</code>为什么要传一个<code>ConfigurableListableBeanFactory</code>的变量进去呢？打印了这个<code>beanFactory</code>的实际类型为<code>DefaultListableBeanFactory</code>，查看其类图，可以了解到该类也实现了<code>DefaultSingletonBeanRegistry</code>接口，所以这里反射获取某个类的成员变量的<code>get()</code>方法中可以作为参数传进来。</p>\n<p><img alt=\"image-20220324003636506\" src=\"..\\..\\static\\image\\0111bc126dbdbc5695405fa40dd3e708.png\"/></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=4\">p4 003-第一讲-ApplicationContext功能1</a></p>\n<p><code>ApplicationContext</code> 比 <code>BeanFactory</code> 多点啥？</p>\n<p>多实现了四个接口：</p>\n<ul><li><code>MessageSource</code>: 国际化功能，支持多种语言</li><li><code>ResourcePatternResolver</code>: 通配符匹配资源路径</li><li><code>EnvironmentCapable</code>: 环境信息，系统环境变量，<code>*.properties</code>、<code>*.application.yml</code>等配置文件中的值</li><li><code>ApplicationEventPublisher</code>: 发布事件对象</li></ul>\n<p><img alt=\"image-20220324115647260\" src=\"..\\..\\static\\image\\bd8991c168b8c33d18a392112ca53cea.png\"/></p>\n<ol><li> <p><code>MessageSource</code></p> <p>在<code>resources</code>目录下创建四个文件<code>messages.propertes</code>、<code>messages_en.properties</code>、<code>messages_ja.properties</code>、<code>messages_zh.properties</code>，然后分别在四个文件里面定义同名的<code>key</code>，比如在<code>message_en.properties</code>中定义<code>hi=hello</code>，在<code>messages_ja.propertes</code>中定义<code>hi=こんにちは</code>，在<code>messages_zh</code>中定义<code>hi=你好</code>，这样在代码中就可以根据这个**<code>key hi</code><strong>和不同的</strong>语言类型**获取不同的<code>value</code>了。</p> <pre><code class=\"prism language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Locale</span><span class=\"token punctuation\">.</span>CHINA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Locale</span><span class=\"token punctuation\">.</span>ENGLISH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Locale</span><span class=\"token punctuation\">.</span>JAPANESE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>运行结果如下：</p> <p><img alt=\"image-20220324181409040\" src=\"..\\..\\static\\image\\29ead5fac9f6b3090d22b0c1e4629d7d.png\"/></p> </li></ol>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=5\">p5 004-第一讲-ApplicationContext功能2,3</a></p>\n<ol start=\"2\"><li> <p><code>ResourcePatternResolver</code></p> <p>例1：获取类路径下的<code>messages</code>开头的配置文件</p> <pre><code class=\"prism language-java\"><span class=\"token class-name\">Resource</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> resources <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getResources</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:messages*.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Resource</span> resource <span class=\"token operator\">:</span> resources<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p><img alt=\"image-20220324182456169\" src=\"..\\..\\static\\image\\84cd18eac82b873fb654c5d2f4273395.png\"/></p> <p>例2：获取<code>spring</code>相关<code>jar</code>包中的<code>spring.factories</code>配置文件</p> <pre><code class=\"prism language-java\">resources <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getResources</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath*:META-INF/spring.factories\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Resource</span> resource <span class=\"token operator\">:</span> resources<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p><img alt=\"image-20220324183236048\" src=\"..\\..\\static\\image\\fcf4dd4fc114868a824676481acab1a5.png\"/></p> </li><li> <p><code>EnvironmentCapable</code></p> <p>获取系统环境变量中的<code>java_home</code>和项目的<code>application.yml</code>中的<code>server.port</code>属性</p> <pre><code class=\"prism language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java_home\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"server.port\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p><img alt=\"image-20220324191740825\" src=\"..\\..\\static\\image\\39d0099c09bdd7c160bc084951d3ffd5.png\"/></p> </li></ol>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=6\">p6 005-第一讲-ApplicationContext功能4</a></p>\n<ol start=\"4\"><li> <p><code>ApplicationEventPublisher</code></p> <p>定义一个<strong>用户注册事件</strong>类，继承自<code>ApplicationEvent</code>类</p> <pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserRegisteredEvent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ApplicationEvent</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserRegisteredEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> source<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>再定义一个<strong>监听器</strong>类，用于监听用户注册事件，类头上需要加<code>@Component</code>注解，将该类交给<code>spring</code>管理，定义一个处理事件的方法，参数类型为<strong>用户注册事</strong>件类的对象，方法头上需要加上<code>@EventListener</code>注解</p> <pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserRegisteredListener</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@EventListener</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">userRegist</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserRegisteredEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UserRegisteredEvent...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>接着再定义一个<strong>用户服务</strong>类，里面有个<code>register(String username, String password)</code>方法可以完成用户的注册，注册完毕后发布一下<strong>用户注册完毕事件</strong>。</p> <pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ApplicationEventPublisher</span> context<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"新用户注册，账号：\"</span> <span class=\"token operator\">+</span> username <span class=\"token operator\">+</span> <span class=\"token string\">\"，密码：\"</span> <span class=\"token operator\">+</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">UserRegisteredEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>最后在<code>Springboot</code>启动类中调用一下<code>UserService</code>里面的<code>register()</code>方法注册一个新用户，<code>UserRegisteredListener</code>中就能处理这个用户注册完毕的事件，实现了<code>UserService</code>类和<code>UserRegisteredListener</code>类的解耦。</p> <pre><code class=\"prism language-java\"><span class=\"token class-name\">UserService</span> userService <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuserService<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p><img alt=\"image-20220324210306704\" src=\"..\\..\\static\\image\\8e2ab39ee9cfff0aa2f1c34096247634.png\"/></p> </li></ol>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=7\">p7 006-第一讲-小结</a></p>\n<h2><a id=\"_BeanFactory__ApplicationContext__250\"></a>第二讲 <code>BeanFactory</code> 和 <code>ApplicationContext</code> 类的重要实现类</h2>\n<h3><a id=\"spring_02_01_beanfactory_impl_252\"></a>spring_02_01_beanfactory_impl</h3>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=8\">p8 007-第二讲-BeanFactory实现</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=9\">p9 008-第二讲-BeanFactory实现</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=10\">p10 009-第二讲-BeanFactory实现-后处理器排序</a></p>\n<p><code>DefaultListableBeanFactory</code></p>\n<p>接着第一讲中的内容，执行以下代码，可以了解到</p>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">ConfigurableApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext</span>\n<span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 查看实际类型</span>\n<span class=\"token comment\">// class org.springframework.beans.factory.support.DefaultListableBeanFactory</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><code>ConfigurableApplicationContext</code>类内部组合的<code>BeanFactory</code>实际类型为<code>DefaultListableBeanFactory</code>，<code>spring</code>底层创建实体类就是依赖于这个类，所以它是<code>BeanFactory</code>接口最重要的一个实现类，下面使用这个类，模拟一下<code>spring</code>使用<code>DefaultListableBeanFactory</code>类创建其他实体类对象的过程。</p>\n<p>测试代码如下：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>jacktgq<span class=\"token punctuation\">.</span>spring_02_beanfactory_impl</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BeanFactoryPostProcessor</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BeanPostProcessor</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AbstractBeanDefinition</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BeanDefinitionBuilder</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DefaultListableBeanFactory</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AnnotationConfigUtils</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Resource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @Author CandyWall\n * @Date 2022/3/24--21:20\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestBeanFactory</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">DefaultListableBeanFactory</span> beanFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultListableBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// bean 的定义（即bean的一些描述信息，包含class：bean是哪个类，scope：单例还是多例，初始化、销毁方法等）</span>\n        <span class=\"token class-name\">AbstractBeanDefinition</span> beanDefinition <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanDefinitionBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">genericBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Config</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setScope</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"singleton\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config\"</span><span class=\"token punctuation\">,</span> beanDefinition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 给 BeanFactory添加一些常用的后处理器，让它具备解析@Configuration、@Bean等注解的能力</span>\n        <span class=\"token class-name\">AnnotationConfigUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerAnnotationConfigProcessors</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 从bean工厂中取出BeanFactory的后处理器，并且执行这些后处理器</span>\n        <span class=\"token comment\">// BeanFactory 后处理器主要功能，补充了一些 bean 的定义</span>\n        beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBeansOfType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanFactoryPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>beanFactoryPostProcessor <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>beanFactoryPostProcessor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            beanFactoryPostProcessor<span class=\"token punctuation\">.</span><span class=\"token function\">postProcessBeanFactory</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 打印BeanFactory中Bean</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name <span class=\"token operator\">:</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinitionNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 从BeanFactory中取出Bean1，然后再从Bean1中取出它依赖的Bean2</span>\n        <span class=\"token comment\">// 可以看到结果为null，所以@Autowired注解并没有被解析</span>\n        <span class=\"token comment\">// Bean1 bean1 = beanFactory.getBean(Bean1.class);</span>\n        <span class=\"token comment\">// System.out.println(bean1.getBean2());</span>\n\n        <span class=\"token comment\">// 要想@Autowired、@Resource等注解被解析，还要添加Bean的后处理器，可以针对Bean的生命周期的各个阶段提供扩展</span>\n        <span class=\"token comment\">// 从bean工厂中取出Bean的后处理器，并且执行这些后处理器</span>\n        <span class=\"token comment\">// BeanFactory 后处理器主要功能，补充了一些 bean 的定义</span>\n        <span class=\"token comment\">// beanFactory.getBeansOfType(BeanPostProcessor.class).values().forEach(beanFactory::addBeanPostProcessor);</span>\n        <span class=\"token comment\">// beanFactory.addBeanPostProcessors(beanFactory.getBeansOfType(BeanPostProcessor.class).values());</span>\n        <span class=\"token comment\">// 改变Bean后处理器加入BeanFactory的顺序</span>\n        <span class=\"token comment\">// 写法1：</span>\n        <span class=\"token comment\">// ArrayList&lt;BeanPostProcessor&gt; list = new ArrayList&lt;&gt;(beanFactory.getBeansOfType(BeanPostProcessor.class).values());</span>\n        <span class=\"token comment\">// Collections.reverse(list);</span>\n        <span class=\"token comment\">// beanFactory.addBeanPostProcessors(list);</span>\n        <span class=\"token comment\">// 写法2：</span>\n        beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">addBeanPostProcessors</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBeansOfType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getDependencyComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toCollection</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 准备好所有单例，get()前就把对象初始化好</span>\n        beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">preInstantiateSingletons</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Bean1</span> bean1 <span class=\"token operator\">=</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bean1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bean1<span class=\"token punctuation\">.</span><span class=\"token function\">getBean2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/**\n         * 学到了什么：\n         *      a. beanFactory 不会做的事\n         *         1. 不会主动调用BeanFactory的后处理器\n         *         2. 不会主动添加Bean的后处理器\n         *         3. 不会主动初始化单例\n         *         4. 不会解析BeanFactory，还不会解析 ${}, #{}\n         *\n         *      b. Bean后处理器会有排序的逻辑\n         */</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bean1<span class=\"token punctuation\">.</span><span class=\"token function\">getInter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Configuration</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Config</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token annotation punctuation\">@Bean</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bean1</span> <span class=\"token function\">bean1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bean1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@Bean</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bean2</span> <span class=\"token function\">bean2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bean2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@Bean</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bean3</span> <span class=\"token function\">bean3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bean3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@Bean</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bean4</span> <span class=\"token function\">bean4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bean4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Slf4j</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bean1</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token annotation punctuation\">@Autowired</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Bean2</span> bean2<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bean2</span> <span class=\"token function\">getBean2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> bean2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@Autowired</span>\n        <span class=\"token annotation punctuation\">@Resource</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"bean4\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Inter</span> bean3<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Inter</span> <span class=\"token function\">getInter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> bean3<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bean1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"构造 Bean1()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Slf4j</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bean2</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bean2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"构造 Bean2()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Inter</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Slf4j</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bean3</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Inter</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bean3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"构造 Bean3()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Slf4j</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bean4</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Inter</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bean4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"构造 Bean4()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>总结：</p>\n<ul><li> <p>beanFactory 不会做的事</p>\n<ul><li> <p>不会主动调用BeanFactory的后处理器</p> </li><li> <p>不会主动添加Bean的后处理器</p> </li><li> <p>不会主动初始化单例</p> </li><li> <p>不会解析BeanFactory，还不会解析 ${}, #{}</p> </li></ul> </li><li> <p>Bean后处理器会有排序的逻辑</p> <p>先定义一个接口Inter，再定义两个Bean，名称分别为Bean3和Bean4，都继承Inter，接着在Config中通过@Bean注解将Bean3和Bean4都加进Bean工厂中，然后在Bean1中定义一个Inter对象，通过@Autowired注解将实现类注入进来。</p> <pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Config</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bean1</span> <span class=\"token function\">bean1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bean1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bean2</span> <span class=\"token function\">bean2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bean2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bean3</span> <span class=\"token function\">bean3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bean3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bean4</span> <span class=\"token function\">bean4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bean4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bean1</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Bean2</span> bean2<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bean2</span> <span class=\"token function\">getBean2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> bean2<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token annotation punctuation\">@Resource</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"bean4\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Inter</span> bean3<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Inter</span> <span class=\"token function\">getInter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> bean3<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bean1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"构造 Bean1()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bean2</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bean2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"构造 Bean2()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Inter</span> <span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bean3</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Inter</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bean3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"构造 Bean3()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bean4</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Inter</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bean4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"构造 Bean4()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>如果把以<code>Inter</code>接口声明的变量名定义为<code>inter</code>，<code>@Autowired</code>注解首先会**根据名称(byName)<strong>进行匹配，没有匹配上，于是又会</strong>根据类型(byType)**进行匹配，发现Bean3和Bean4都实现了Inter接口，会报无法自动装配的错误。</p> <p><img alt=\"image-20220325121422536\" src=\"..\\..\\static\\image\\1e31518404ddc116c3ddb0874dce9a9d.png\"/></p> <p>所以为了避免这种错误，以<code>Inter</code>接口声明的变量名只能为<code>bean3</code>或者<code>bean4</code>，这里把以<code>Inter</code>接口声明的变量名定义为<code>bean3</code>，然后就不报错了，<code>@Autowired</code>会通过<code>byName</code>的方式进行匹配。</p> <p><img alt=\"image-20220325121717437\" src=\"..\\..\\static\\image\\30b6d15cea78e69d475eacb820aafb7a.png\"/></p> <p>在main方法中去获取Inter，然后打印，可以看到注入的是Bean3</p> <p><img alt=\"image-20220325133334762\" src=\"..\\..\\static\\image\\4ac5bdb55e2be1fbf190878f82678e10.png\"/></p> <p>如果此时在<code>private Inter bean3;</code>上面再加上<code>@Resource(name = \"bean4\")</code>注解，然后再打印结果，结果还是<code>bean3</code>，为什么呢？我们先看一下加入<code>BeanFactory</code>的Bean后处理器的顺序，解析<code>@Autowired</code>注解的后处理器<code>internalAutowiredAnnotationProcessor</code>的顺序排在解析<code>@Resource</code>注解的后处理器<code>internalCommonAnnotationProcessor</code>的前面，所以<code>internalAutowiredAnnotationProcessor</code>会被<code>BeanFactory</code>先启用，故<code>@Autowired</code>注解先被解析了。</p> <p><img alt=\"image-20220325134154838\" src=\"..\\..\\static\\image\\c72e6874e3ecc093f1ff69fccb3ece5e.png\"/></p> <p>如果想要让<code>@Resource</code>注解先被解析呢，这就需要让后处理器<code>internalCommonAnnotationProcessor</code>比<code>internalAutowiredAnnotationProcessor</code>先加入<code>BeanFactory</code>，代码如下：</p> <pre><code class=\"prism language-java\"><span class=\"token comment\">// 改变Bean后处理器加入BeanFactory的顺序</span>\n        beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">addBeanPostProcessors</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBeansOfType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getDependencyComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toCollection</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>这样一来注入的结果就是<code>Bean4</code>，<code>@Resource(name = \"bean4\")</code>注解被先解析了</p> <p><img alt=\"image-20220325141300707\" src=\"..\\..\\static\\image\\fa2fae7c3a0236c56d5f003b53ed43d1.png\"/></p> <p>通过<code>AnnotationConfigUtils</code>给<code>beanFactory</code>添加一些后处理的时候会默认设置比较器，可以对<code>BeanPostProcessor</code>进行排序，排序的依据是<code>BeanPostProcessor</code>内部的<code>order</code>属性，其中<code>internalAutowiredAnnotationProcessor</code>的order属性的值为<code>Ordered.LOWEST_PRECEDENCE - 2</code>，<code>internalCommonAnnotationProcessor</code>的<code>order</code>属性的值为<code>Ordered.LOWEST_PRECEDENCE - 3</code>。</p> <p><img alt=\"image-20220325143844005\" src=\"..\\..\\static\\image\\e2f05c0fb349c0ec710262f921cb0a2d.png\"/></p> <p>从打印结果来看，<code>internalAutowiredAnnotationProcessor:2147483645</code>，<code>internalCommonAnnotationProcessor:2147483644</code>，<code>internalCommonAnnotationProcessor</code>的<code>order</code>值更小，所以排序的时候会排在前面</p> <p><img alt=\"image-20220325144433436\" src=\"..\\..\\static\\image\\18b7f55488ca30ce1755c0d41860c31d.png\"/></p> </li><li> <p><code>BeanFactory</code>本身功能只是将定义好的<code>BeanDefinition</code>加进来，而<code>BeanFactory</code>的后处理器<code>BeanFactoryPostProcessor</code>补充了一些<code>Bean</code>的定义，可以解析<code>@Configuration</code>、<code>@Bean</code>等注解，将这些被注解修饰的<code>Bean</code>也加进<code>BeanFactory</code>。<code>@Configuration</code>和<code>@Bean</code>注解的解析过程的源码可以看<code>AnnotationConfigUtils</code>和<code>ConfigurationClassPostProcessor</code></p> <p><img alt=\"image-20220325005027558\" src=\"..\\..\\static\\image\\e89b85718fce7f0572c3a2d470b184d2.png\"/></p> <p><img alt=\"image-20220325005135527\" src=\"..\\..\\static\\image\\77f47e1066b19aad42f17217f5523309.png\"/></p> </li><li> <p>要想<code>@Autowired</code>、<code>@Resource</code>等注解被解析，还要添加<code>Bean</code>的后处理器<code>BeanPostProcessor</code>，可以针对<code>Bean</code>的生命周期的各个阶段提供扩展。</p> </li><li> <p>BeanFactory中的对象都是懒加载的，如果不去调用get()方法获取的话，就不会初始化，如果想要让对象在get()之前就创建好，需要调用<code>beanFactory.preInstantiateSingletons()</code>方法。</p> </li><li> <p>教程弹幕中有人问：为啥<code>@Bean</code>和<code>@Configration</code>注解不需要建立联系就能使用？</p>\n<ul><li>建立联系了啊，上面也获取了<code>BeanFactory</code>的后置处理器，然后<code>foreach</code>循环就是建立<code>BeanFactory</code>的后置处理器和BeanFactory的联系。</li><li>另外<code>@Configuration</code>加不加，<code>Config</code>类中的<code>@Bea</code>n注解都会被解析，<code>@Configuration</code>是用于<code>spring</code>类扫描的时候用的，加了这个注解的类被扫描到了就会被放进<code>Bean</code>工厂</li></ul> </li></ul>\n<h3><a id=\"spring_02_02_applicationcontext_impl_564\"></a>spring_02_02_applicationcontext_impl</h3>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=11\">p11 010-第二讲-ApplicationContext实现1,2</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=12\">p12 011-第二讲-ApplicationContext实现3</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=13\">p13 012-第二讲-ApplicationContext实现4</a></p>\n<p>四个重要的<code>ApplicationContext</code>接口的实现类</p>\n<p><img alt=\"image-20220325174005606\" src=\"..\\..\\static\\image\\bec10309f6c068585fd7382f96ae8d80.png\"/></p>\n<ul><li><code>ClassPathXmlApplicationContext</code>:</li><li><code>FileSystemXmlApplicationContext</code>:</li><li><code>AnnotationConfigApplicationContext</code>:</li><li><code>AnnotationConfigServletWebServerApplication</code>:</li></ul>\n<p>相关测试代码如下：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestApplicationContext</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token comment\">// ⬇️1.最为经典的容器，基于classpath 下 xml 格式的配置文件来创建</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">ClassPathXmlApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spring_bean.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name <span class=\"token operator\">:</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinitionNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bean2</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBean1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token comment\">// ⬇️2.基于磁盘路径下 xml 格式的配置文件来创建</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testFileSystemXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 可以用绝对路径或者相对路径</span>\n        <span class=\"token comment\">// FileSystemXmlApplicationContext context = new FileSystemXmlApplicationContext(\"D:\\\\ideacode\\\\spring-source-study\\\\spring_02_02_applicationcontext_impl\\\\src\\\\main\\\\resources\\\\spring_bean.xml\");</span>\n        <span class=\"token class-name\">FileSystemXmlApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileSystemXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src\\\\main\\\\resources\\\\spring_bean.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name <span class=\"token operator\">:</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinitionNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bean2</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBean1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token comment\">// ⬇️模拟一下ClassPathXmlApplicationContext和FileSystemXmlApplicationContext底层的一些操作</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testMockClassPathAndFileSystemXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">DefaultListableBeanFactory</span> beanFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultListableBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取之前\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name <span class=\"token operator\">:</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinitionNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取之后\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">XmlBeanDefinitionReader</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XmlBeanDefinitionReader</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// reader.loadBeanDefinitions(\"spring_bean.xml\");</span>\n        <span class=\"token comment\">// reader.loadBeanDefinitions(new ClassPathResource(\"spring_bean.xml\"));</span>\n        reader<span class=\"token punctuation\">.</span><span class=\"token function\">loadBeanDefinitions</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileSystemResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src\\\\main\\\\resources\\\\spring_bean.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name <span class=\"token operator\">:</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinitionNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token comment\">// ⬇️3.较为经典的容器，基于java配置类来创建</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testAnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 会自动加上5个后处理器</span>\n        <span class=\"token comment\">// org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span>\n        <span class=\"token comment\">// org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span>\n        <span class=\"token comment\">// org.springframework.context.annotation.internalCommonAnnotationProcessor</span>\n        <span class=\"token comment\">// org.springframework.context.event.internalEventListenerProcessor</span>\n        <span class=\"token comment\">// org.springframework.context.event.internalEventListenerFactory</span>\n        <span class=\"token class-name\">AnnotationConfigApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Config</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name <span class=\"token operator\">:</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinitionNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bean2</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBean1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token comment\">// ⬇️4.较为经典的容器，基于java配置类来创建，并且还可以用于web环境</span>\n    <span class=\"token comment\">// 模拟了 springboot web项目内嵌Tomcat的工作原理</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testAnnotationConfigServletWebServerApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">AnnotationConfigServletWebServerApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigServletWebServerApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WebConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 防止程序终止</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WebConfig</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token comment\">// 1. WebServer工厂</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ServletWebServerFactory</span> <span class=\"token function\">servletWebServerFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TomcatServletWebServerFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token comment\">// 2. web项目必备的DispatcherServlet</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DispatcherServlet</span> <span class=\"token function\">dispatcherServlet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DispatcherServlet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token comment\">// 3. 将DispatcherServlet注册到WebServer上</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DispatcherServletRegistrationBean</span> <span class=\"token function\">dispatcherServletRegistrationBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DispatcherServlet</span> dispatcherServlet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DispatcherServletRegistrationBean</span><span class=\"token punctuation\">(</span>dispatcherServlet<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Controller</span> <span class=\"token function\">controller1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 单元测试的过程中如果要解析一些Spring注解，比如@Configuration的时候不要把相关类定义到写单元测试类的内部类，会读取不到</span>\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Config</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bean1</span> <span class=\"token function\">bean1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bean1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bean2</span> <span class=\"token function\">bean2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bean1</span> bean1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Bean2</span> bean2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bean2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bean2<span class=\"token punctuation\">.</span><span class=\"token function\">setBean1</span><span class=\"token punctuation\">(</span>bean1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> bean2<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bean1</span> <span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bean2</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Bean1</span> bean1<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bean1</span> <span class=\"token function\">getBean1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> bean1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setBean1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bean1</span> bean1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bean1 <span class=\"token operator\">=</span> bean1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>spring_bean.xml</code>如下：</p>\n<pre><code class=\"prism language-java\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>xml version<span class=\"token operator\">=</span><span class=\"token string\">\"1.0\"</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>beans xmlns<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.springframework.org/schema/beans\"</span>\n       xmlns<span class=\"token operator\">:</span>xsi<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n       xmlns<span class=\"token operator\">:</span>context<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.springframework.org/schema/context\"</span>\n       xsi<span class=\"token operator\">:</span>schemaLocation<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd\"</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>\n        把<span class=\"token number\">5</span>个后处理器加进来\n            等价于：<span class=\"token class-name\">AnnotationConfigUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerAnnotationConfigProcessors</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>context<span class=\"token operator\">:</span>annotation<span class=\"token operator\">-</span>config <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>bean id<span class=\"token operator\">=</span><span class=\"token string\">\"bean1\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"top.jacktgq.Bean1\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>bean id<span class=\"token operator\">=</span><span class=\"token string\">\"bean2\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"top.jacktgq.Bean2\"</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>property name<span class=\"token operator\">=</span><span class=\"token string\">\"bean1\"</span> ref<span class=\"token operator\">=</span><span class=\"token string\">\"bean1\"</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>bean<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>beans<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h2><a id=\"_Bean_734\"></a>第三讲 <code>Bean</code>的生命周期和模板方法设计模式</h2>\n<h3><a id=\"spring_03_bean_lifecycle_736\"></a>spring_03_bean_lifecycle</h3>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=14\">p14 013-第三讲-bean生命周期</a></p>\n<p><code>springboot</code>项目启动类</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BeanLifeCycleApplication</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">ConfigurableApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanLifeCycleApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>定义一个<code>LifeCycleBean</code>，加上<code>@Component</code>注解，再编写一些方法，给这些方法加上<code>Bean</code>的生命周期过程中的注解</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LifeCycleBean</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LifeCycleBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"构造\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">autowire</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${JAVA_HOME}\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"依赖注入：{}\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@PostConstruct</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始化\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@PreDestroy</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"销毁\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>编写自定义<code>Bean</code>的后处理器，需要实现<code>InstantiationAwareBeanPostProcessor</code>和<code>DestructionAwareBeanPostProcessor</code>接口，并加上<code>@Component</code>注解，对<code>lifeCycleBean</code>的生命周期过程进行扩展。</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBeanPostProcessor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InstantiationAwareBeanPostProcessor</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">DestructionAwareBeanPostProcessor</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token comment\">// 实例化前（即调用构造方法前）执行的方法</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessBeforeInstantiation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> beanClass<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lifeCycleBean\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 实例化前执行，如@PreDestroy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 返回null保持原有对象不变，返回不为null，会替换掉原有对象</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token comment\">// 实例化后执行的方法</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">postProcessAfterInstantiation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lifeCycleBean\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 实例化后执行，这里如果返回 false 会跳过依赖注入阶段\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// return false;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token comment\">// 依赖注入阶段执行的方法</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PropertyValues</span> <span class=\"token function\">postProcessProperties</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PropertyValues</span> pvs<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lifeCycleBean\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 依赖注入阶段执行，如@Autowired、@Value、@Resource\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> pvs<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token comment\">// 销毁前执行的方法</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessBeforeDestruction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lifeCycleBean\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;销毁之前执行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token comment\">// 初始化之前执行的方法</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessBeforeInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lifeCycleBean\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 初始化之前执行，这里返回的对象会替换掉原本的bean，如 @PostConstruct、@ConfigurationProperties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token comment\">// 初始化之后执行的方法</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessAfterInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lifeCycleBean\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 初始化之后执行，这里返回的对象会替换掉原本的bean，如 代理增强\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果如下：</p>\n<p><img alt=\"image-20220326140553213\" src=\"..\\..\\static\\image\\472cd8e71ec9f125347b4496027dab39.png\"/></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=15\">p15 014-第三讲-模板方法</a></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestMethodTemplatePattern</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">MyBeanFactory</span> beanFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">addBeanPostProcessor</span><span class=\"token punctuation\">(</span>bean <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"解析 @Autowired\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">addBeanPostProcessor</span><span class=\"token punctuation\">(</span>bean <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"解析 @Resource\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBeanFactory</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Object</span> bean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"构造：\"</span> <span class=\"token operator\">+</span> bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"依赖注入：\"</span> <span class=\"token operator\">+</span> bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanPostProcessor</span> processor <span class=\"token operator\">:</span> processors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                processor<span class=\"token punctuation\">.</span><span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始化：\"</span> <span class=\"token operator\">+</span> bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanPostProcessor</span><span class=\"token punctuation\">&gt;</span></span> processors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanPostProcessor</span> beanPostProcessor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            processors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>beanPostProcessor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BeanPostProcessor</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_BeanAutowired_878\"></a>第四讲 常见<code>Bean</code>后处理器以及<code>@Autowired</code>注解被解析的详细过程</h2>\n<h3><a id=\"spring_04_beanpostprocessor_880\"></a>spring_04_beanpostprocessor</h3>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=16\">p16 015-第四讲-常见bean后处理器1,2</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=17\">p17 016-第四讲-常见bean后处理器3</a></p>\n<p>定义三个<code>Bean</code>，名称分别为<code>Bean1</code>，<code>Bean2</code>，<code>Bean3</code>，其中<code>Bean1</code>中依赖了<code>Bean2</code>和<code>Bean3</code>，<code>Bean2</code>通过<code>@Autowired</code>的注解注入，<code>Bean3</code>通过<code>@Resource</code>注解注入，再通过<code>@Value</code>注解注入一个<code>Java</code>的环境变量<code>JAVA_HOME</code>的值。最后定义两个方法<code>init()</code>和<code>destroy()</code>，分别加上<code>@PostConstruct</code>和<code>@PreDestroy</code>注解。</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bean1</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Bean2</span> bean2<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setBean2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bean2</span> bean2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@Autowired 生效：{}\"</span><span class=\"token punctuation\">,</span> bean2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bean2 <span class=\"token operator\">=</span> bean2<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setJava_home</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${JAVA_HOME}\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> java_home<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@Value 生效：{}\"</span><span class=\"token punctuation\">,</span> java_home<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>java_home <span class=\"token operator\">=</span> java_home<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Bean3</span> bean3<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Resource</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setBean3</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bean3</span> bean3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@Resource 生效：{}\"</span><span class=\"token punctuation\">,</span> bean3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bean3 <span class=\"token operator\">=</span> bean3<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> java_home<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@PostConstruct</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@PostConstruct 生效：{}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@PreDestroy</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@PreDestroy 生效：{}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Bean1{\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"bean2=\"</span> <span class=\"token operator\">+</span> bean2 <span class=\"token operator\">+</span>\n                <span class=\"token string\">\", bean3=\"</span> <span class=\"token operator\">+</span> bean3 <span class=\"token operator\">+</span>\n                <span class=\"token string\">\", java_home='\"</span> <span class=\"token operator\">+</span> java_home <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span>\n                <span class=\"token char\">'}'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bean2</span> <span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bean3</span> <span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"java\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bean4</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> home<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> version<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这里用<code>GenericApplicationContext</code> 来探究一下<code>@Autowired</code>、<code>@Value</code>、<code>@Resource</code>、<code>@PostConstruct</code>、<code>@PreDestroy</code>以及<code>springboot</code>项目中的<code>@ConfigurationProperties</code>这些注解分别是由哪个后处理器来解析的。</p>\n<p>注：<font color=\"red\"><code>GenericApplicationContext</code> 是一个【干净】的容器，默认不会添加任何后处理器，方便做测试，这里用<code>DefaultListableBeanFactory</code>也可以完成测试，只是会比使用<code>GenericApplicationContext</code>麻烦一些。</font></p>\n<p>测试代码如下：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestBeanPostProcessor</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// ⬇️GenericApplicationContext 是一个【干净】的容器，默认不会添加任何后处理器，方便做测试</span>\n        <span class=\"token comment\">// 这里用DefaultListableBeanFactory也可以完成测试，只是会比使用GenericApplicationContext麻烦一些</span>\n        <span class=\"token class-name\">GenericApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 用原始方法注册三个Bean</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bean1\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Bean1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bean2\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Bean2</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bean3\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Bean3</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bean4\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Bean4</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 设置解析 @Value 注解的解析器</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">getDefaultListableBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAutowireCandidateResolver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ContextAnnotationAutowireCandidateResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 添加解析 @Autowired 和 @Value 注解的后处理器</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AutowiredAnnotationBeanPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 添加解析 @Resource、@PostConstruct、@PreDestroy 注解的后处理器</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CommonAnnotationBeanPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 添加解析 @ConfigurationProperties注解的后处理器</span>\n        <span class=\"token comment\">// ConfigurationPropertiesBindingPostProcessor后处理器不能像上面几种后处理器那样用context直接注册上去</span>\n        <span class=\"token comment\">// context.registerBean(ConfigurationPropertiesBindingPostProcessor.class);</span>\n        <span class=\"token comment\">// 需要反着来注册一下</span>\n        <span class=\"token class-name\">ConfigurationPropertiesBindingPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getDefaultListableBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token comment\">// ⬇️初始化容器</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bean4</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// ⬇️销毁容器</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果如下：</p>\n<p><img alt=\"image-20220327233426083\" src=\"..\\..\\static\\image\\136b842a4470d7821ac230ab9f5725a5.png\"/></p>\n<p>经过测试和运行结果的比对：</p>\n<ul><li><code>@Autowired</code>注解对应的后处理器是<code>AutowiredAnnotationBeanPostProcessor</code>；</li><li><code>@Value</code>注解需要配合<code>@Autowired</code>注解一起使用，所以也用到了<code>AutowiredAnnotationBeanPostProcessor</code>后处理器，然后<code>@Value</code>注解还需要再用到<code>ContextAnnotationAutowireCandidateResolver</code>解析器，否则会报错；</li><li><code>@Resource</code>、<code>@PostConstruct</code>、<code>@PreDestroy</code>注解对应的后处理器是<code>CommonAnnotationBeanPostProcessor</code>；</li><li><code>@ConfigurationProperties</code>注解对应的后处理器是<code>ConfigurationPropertiesBindingPostProcessor</code>。</li></ul>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=18\">p18 017-第四讲-@Autowired bean后处理器执行分析</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=19\">p19 018-第四讲-@Autowired bean后处理器执行分析</a></p>\n<p>本案例测试代码紧接着上面，这里对<code>Bean1</code>中加了<code>@Autowired</code>注解的属性注入<code>Bean2</code>、方法注入<code>Bean3</code>以及方法注入环境变量<code>JAVA_HOME</code>的过程进行分析。</p>\n<p><code>@Autowired</code>注解解析用到的后处理器是<code>AutowiredAnnotationBeanPostProcessor</code></p>\n<ul><li>这个后处理器就是通过调用<code>postProcessProperties(PropertyValues pvs, Object bean, String beanName)</code>完成注解的解析和注入的功能</li><li>这个方法中又调用了一个私有的方法<code>findAutowiringMetadata(beanName, bean.getClass(), pvs)</code>，其返回值<code>InjectionMetadata</code>中封装了被<code>@Autowired</code>注解修饰的属性和方法</li><li>然后会调用<code>InjectionMetadata.inject(bean1, \"bean1\", null)</code>进行依赖注入</li><li>由于<code>InjectionMetadata.inject(bean1, \"bean1\", null)</code>的源码调用链过长，摘出主要调用过程进行说明：</li><li>成员变量注入，<code>InjectionMetadata</code>注入<code>Bean3</code>的过程： \n  <ul><li><code>InjectionMetadata</code>会把<code>Bean1</code>中加了<code>@Autowired</code>注解的属性的<code>BeanName</code>先拿到，这里拿到的<code>BeanName</code>就是 <code>bean3</code>，然后再通过反射拿到这个属性，<code>Field bean3Field = Bean1.class.getDeclaredField(\"bean3\");</code></li><li>将这个属性封装成一个<code>DependencyDescriptor</code>对象，再去调用<code>Bean3 bean3Value = (Bean3) beanFactory.doResolveDependency(dd1, null, null, null);</code>拿到<code>bean3Value</code></li><li>最后把值赋给这个属性<code>bean3Field.set(bean1, bean3Value);</code></li></ul> </li><li>方法参数注入，<code>InjectionMetadata</code>注入<code>Bean2</code>的过程： \n  <ul><li><code>InjectionMetadata</code>会把<code>Bean1</code>中加了<code>@Autowired</code>注解的方法的<code>MethodName</code>先拿到，这里拿到的<code>MethodName</code>就是 <code>setBean2</code>，然后再通过反射拿到这个方法，<code>Method setBean2 = Bean1.class.getDeclaredMethod(\"setBean2\", Bean2.class);</code></li><li>将这个属性封装成一个<code>DependencyDescriptor</code>对象，再去调用<code>Bean2 bean2Value = (Bean2) beanFactory.doResolveDependency(dd2, \"bean2\", null, null);</code>拿到<code>bean2Value</code></li><li>最后调用方法<code>setBean2.invoke(bean1, bean2Value)</code>，给方法参数赋值。</li></ul> </li><li>方法参数注入，参数类型为String类型，且加上了@Value注解，<code>InjectionMetadata</code>注入环境变量<code>JAVA_HOME</code>的过程： \n  <ul><li><code>InjectionMetadata</code>会把<code>Bean1</code>中加了<code>@Autowired</code>注解的方法的<code>MethodName</code>先拿到，这里拿到的<code>MethodName</code>就是 <code>setJava_home</code>，然后再通过反射拿到这个方法，<code>Method setJava_home = Bean1.class.getDeclaredMethod(\"setJava_home\", String.class);</code></li><li>将这个属性封装成一个<code>DependencyDescriptor</code>对象，再去调用<code>String java_home = (String) beanFactory.doResolveDependency(dd3, null, null, null);</code>拿到<code>java_home</code></li><li>最后调用方法<code>setJava_home.invoke(bean1, java_home);</code>，给方法参数赋值。</li></ul> </li></ul>\n<p>全部测试代码如下：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestBeanPostProcessors</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testAutowiredAnnotationBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">DefaultListableBeanFactory</span> beanFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultListableBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 这里为了省事就不使用 beanFactory.registerBeanDefinition()方法去添加类的描述信息了</span>\n        <span class=\"token comment\">// 直接使用 beanFactory.registerSingleton可以直接将Bean的单例对象注入进去，</span>\n        <span class=\"token comment\">// 后面调用beanFactory.getBean()方法的时候就不会去根据Bean的定义去创建Bean的实例了，</span>\n        <span class=\"token comment\">// 也不会有懒加载和依赖注入的初始化过程了。</span>\n        beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">registerSingleton</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bean2\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bean2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">registerSingleton</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bean3\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bean3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 设置@Autowired注解的解析器</span>\n        beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setAutowireCandidateResolver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ContextAnnotationAutowireCandidateResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 设置解析 @Value 注解中的 ${} 表达式的解析器</span>\n        beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">addEmbeddedValueResolver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StandardEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">::</span><span class=\"token function\">resolvePlaceholders</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 1. 查找哪些属性、方法加了 @Autowired，这称之为InjectionMetadata</span>\n        <span class=\"token comment\">// 创建后处理器</span>\n        <span class=\"token class-name\">AutowiredAnnotationBeanPostProcessor</span> processor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AutowiredAnnotationBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 后处理器在解析@Autowired和@Value的时候需要用到其他Bean，</span>\n        <span class=\"token comment\">// 而BeanFactory提供了需要的Bean，所以需要把BeanFactory传给这个后处理器</span>\n        processor<span class=\"token punctuation\">.</span><span class=\"token function\">setBeanFactory</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 创建Bean1</span>\n        <span class=\"token class-name\">Bean1</span> bean1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bean1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bean1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 解析@Autowired和@Value注解，执行依赖注入</span>\n        <span class=\"token comment\">// PropertyValues pvs: 给注解的属性注入给定的值，这里不需要手动给定，传null即可</span>\n        <span class=\"token comment\">// processor.postProcessProperties(null, bean1, \"bean1\");</span>\n        <span class=\"token comment\">// postProcessProperties()方法底层原理探究</span>\n        <span class=\"token comment\">// 通过查看源码得知 postProcessProperties()方法中调用了一个私有的方法findAutowiringMetadata(beanName, bean.getClass(), pvs); 会返回一个InjectionMetadata的对象，然后会调用InjectionMetadata.inject(bean1, \"bean1\", null)进行依赖注入</span>\n        <span class=\"token comment\">// 通过反射调用一下</span>\n        <span class=\"token comment\">/*Method findAutowiringMetadata = AutowiredAnnotationBeanPostProcessor.class.getDeclaredMethod(\"findAutowiringMetadata\",String.class, Class.class, PropertyValues.class);\n        findAutowiringMetadata.setAccessible(true);\n        // 获取Bean1上加了@Value @Autowired注解的成员变量和方法参数信息\n        InjectionMetadata metadata = (InjectionMetadata) findAutowiringMetadata.invoke(processor, \"bean1\", Bean1.class, null);\n        System.out.println(metadata);\n\n        // 2. 调用 InjectionMetaData 来进行依赖注入，注入时按类型查找值\n        metadata.inject(bean1, \"bean1\", null);\n        System.out.println(bean1);*/</span>\n        \n        <span class=\"token comment\">// 3. 如何去Bean工厂里面按类型查找值</span>\n        <span class=\"token comment\">// 由于InjectionMetadata.inject(bean1, \"bean1\", null)的源码调用链过长，摘出主要调用过程进行演示</span>\n\n        <span class=\"token comment\">// 3.1 @Autowired加在成员变量上，InjectionMetatadata给Bean1注入Bean3的过程</span>\n        <span class=\"token comment\">// 通过InjectionMetadata把Bean1加了@Autowired注解的属性的BeanName先拿到，这里假设拿到的BeanName就是 bean3</span>\n        <span class=\"token comment\">// 通过BeanName反射获取到这个属性，</span>\n        <span class=\"token class-name\">Field</span> bean3Field <span class=\"token operator\">=</span> <span class=\"token class-name\">Bean1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bean3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 设置私有属性可以被访问</span>\n        bean3Field<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 将这个属性封装成一个DependencyDescriptor对象</span>\n        <span class=\"token class-name\">DependencyDescriptor</span> dd1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DependencyDescriptor</span><span class=\"token punctuation\">(</span>bean3Field<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 再执行beanFactory的doResolveDependency</span>\n        <span class=\"token class-name\">Bean3</span> bean3Value <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Bean3</span><span class=\"token punctuation\">)</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">doResolveDependency</span><span class=\"token punctuation\">(</span>dd1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bean3Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 给Bean1的成员bean3赋值</span>\n        bean3Field<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>bean1<span class=\"token punctuation\">,</span> bean3Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bean1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 3.2 @Autowired加在方法上，InjectionMetatadata给Bean1注入Bean2的过程</span>\n        <span class=\"token class-name\">Method</span> setBean2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Bean1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setBean2\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Bean2</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">DependencyDescriptor</span> dd2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DependencyDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MethodParameter</span><span class=\"token punctuation\">(</span>setBean2<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Bean2</span> bean2Value <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Bean2</span><span class=\"token punctuation\">)</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">doResolveDependency</span><span class=\"token punctuation\">(</span>dd2<span class=\"token punctuation\">,</span> <span class=\"token string\">\"bean2\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bean2Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 给Bean1的setBean2()方法的参数赋值</span>\n        setBean2<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>bean1<span class=\"token punctuation\">,</span> bean2Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bean1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 3.3 @Autowired加在方法上，方法参数为String类型，加了@Value，</span>\n        <span class=\"token comment\">// InjectionMetadata给Bean1注入环境变量JAVA_HOME属性的值</span>\n        <span class=\"token class-name\">Method</span> setJava_home <span class=\"token operator\">=</span> <span class=\"token class-name\">Bean1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setJava_home\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">DependencyDescriptor</span> dd3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DependencyDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MethodParameter</span><span class=\"token punctuation\">(</span>setJava_home<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> java_home <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">doResolveDependency</span><span class=\"token punctuation\">(</span>dd3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>java_home<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        setJava_home<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>bean1<span class=\"token punctuation\">,</span> java_home<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bean1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果如下：</p>\n<p><img alt=\"image-20220329115607946\" src=\"..\\..\\static\\image\\08274455f402d5eb3309c3ba1670c5d8.png\"/></p>\n<h2><a id=\"_Bean_1118\"></a>第五讲 常见Bean工厂后处理器以及模拟实现组件扫描</h2>\n<h3><a id=\"spring_05_beanfactorypostprocessor_1120\"></a>spring_05_beanfactorypostprocessor</h3>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=20\">p20 019-第五讲-常见工厂后处理器</a></p>\n<p>定义<code>Bean1</code>、<code>Bean2</code>、<code>Mapper1</code>、<code>Mapper2</code>、<code>Config</code> 5个类，其中<code>Bean2</code>上面加上<code>@Component</code>和<code>@ComponentScan</code>注解，<code>Config</code>上加<code>@Component</code>注解，<code>Config</code>中通过<code>@Bean</code>注解定义<code>Bean1</code>，<code>Mapper1</code>、<code>Mapper2</code>上加<code>@Mapper</code>注解，类的定义参考下图，由于涉及的类比较多，具体代码可以去我的代码仓库获取。</p>\n<p><img alt=\"image-20220329142407664\" src=\"..\\..\\static\\image\\cfbb5fa2caa5a30322c92a5172bd9ebc.png\"/></p>\n<p>这里用<code>GenericApplicationContext</code> 来探究一下<code>@Component</code>、<code>@ComponentScan</code>、<code>@Bean</code>、<code>@MapperScan</code>这些注解分别是由哪个后处理器来解析的。</p>\n<p>测试代码如下：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestBeanFactoryPostProcessors</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testBeanPostProcessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// ⬇️GenericApplicationContext 是一个【干净】的容器，默认不会添加任何后处理器，方便做测试</span>\n        <span class=\"token class-name\">GenericApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Config</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 添加Bean工厂后处理器ConfigurationClassPostProcessor</span>\n        <span class=\"token comment\">// 解析@ComponentScan、@Bean、@Import、@ImportResource注解</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationClassPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 添加Bean工厂后处理器MapperScannerConfigurer，解析@MapperScan注解</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MapperScannerConfigurer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> beanDefinition <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 指定扫描的包名</span>\n            beanDefinition<span class=\"token punctuation\">.</span><span class=\"token function\">getPropertyValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"basePackage\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"top.jacktgq.mapper\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// ⬇️初始化容器</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name <span class=\"token operator\">:</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinitionNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// ⬇️销毁容器</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>经过测试和运行结果的比对：</p>\n<ul><li><code>@Component</code>、<code>@Bean</code>对应的<code>Bean</code>工厂后处理器是<code>ConfigurationClassPostProcessor</code>；</li><li><code>@MapperScan</code>对应的<code>Bean</code>工厂后处理器是<code>MapperScannerConfigurer</code>。</li></ul>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=21\">p21 020-第五讲-工厂后处理器模拟实现-组件扫描</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=22\">p22 021-第五讲-工厂后处理器模拟实现-组件扫描</a></p>\n<p>自定义组件扫描<code>Bean</code>工厂后处理器<code>CandyComponentScanPostProcessor</code>来解析<code>@Component</code>注解，代码如下：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CandyAtComponentScanPostProcessor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessBeanDefinitionRegistry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinitionRegistry</span> beanFactory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">ComponentScan</span> componentScan <span class=\"token operator\">=</span> <span class=\"token class-name\">AnnotationUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">findAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Config</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ComponentScan</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>componentScan <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> basePage <span class=\"token operator\">:</span> componentScan<span class=\"token punctuation\">.</span><span class=\"token function\">basePackages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>basePage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">// top.jacktgq.component -&gt; classpath*:com/jacktgq/component/**/*.class</span>\n                    <span class=\"token class-name\">String</span> path <span class=\"token operator\">=</span> <span class=\"token string\">\"classpath*:\"</span> <span class=\"token operator\">+</span> basePage<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token char\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/**/*.class\"</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">// System.out.println(path);</span>\n                    <span class=\"token class-name\">CachingMetadataReaderFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CachingMetadataReaderFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">AnnotationBeanNameGenerator</span> generator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationBeanNameGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Resource</span> resource <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PathMatchingResourcePatternResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResources</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token comment\">// System.out.println(resource);</span>\n                        <span class=\"token comment\">// 查看对应的类上是否有@Component注解</span>\n                        <span class=\"token comment\">// System.out.println(\"分隔符&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\");</span>\n                        <span class=\"token class-name\">MetadataReader</span> reader <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">getMetadataReader</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">String</span> className <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">getClassMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">// System.out.println(\"类名：\" + className);</span>\n                        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token class-name\">Component</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">// System.out.println(\"是否加了 @Component注解：\" + reader.getAnnotationMetadata().hasAnnotation(name));</span>\n                        <span class=\"token class-name\">AnnotationMetadata</span> annotationMetadata <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotationMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">// System.out.println(\"是否加了@Component的派生注解：\" + annotationMetadata.hasMetaAnnotation(name));</span>\n\n                        <span class=\"token comment\">// 如果直接或者间接加了@Component注解</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>annotationMetadata<span class=\"token punctuation\">.</span><span class=\"token function\">hasAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> annotationMetadata<span class=\"token punctuation\">.</span><span class=\"token function\">hasMetaAnnotation</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                            <span class=\"token comment\">// 创建Bean的定义</span>\n                            <span class=\"token class-name\">AbstractBeanDefinition</span> beanDefinition <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanDefinitionBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">genericBeanDefinition</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            \n                            <span class=\"token class-name\">String</span> beanName <span class=\"token operator\">=</span> generator<span class=\"token punctuation\">.</span><span class=\"token function\">generateBeanName</span><span class=\"token punctuation\">(</span>beanDefinition<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token comment\">// 将Bean定义加入工厂</span>\n                            beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> beanDefinition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token comment\">// context.refresh()中会回调该方法</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableListableBeanFactory</span> configurableListableBeanFactory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">{<!-- --></span>\n        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>测试代码：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestBeanFactoryPostProcessors</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token comment\">// 模拟实现组件扫描</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testMockComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// ⬇️GenericApplicationContext 是一个【干净】的容器，默认不会添加任何后处理器，方便做测试</span>\n        <span class=\"token class-name\">GenericApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Config</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 把自定义组件扫描Bean工厂后处理器加进来</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CandyComponentScanPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// ⬇️初始化容器</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name <span class=\"token operator\">:</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinitionNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// ⬇️销毁容器</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果：</p>\n<p><img alt=\"image-20220329192201153\" src=\"..\\..\\static\\image\\e69b30afa525252e333d2680b5faa644.png\"/></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=23\">p23 022-第五讲-工厂后处理器模拟实现-@Bean</a></p>\n<p>自定义<code>Bean</code>工厂后处理器<code>CandyAtBeanPostProcessor</code>来解析<code>@Bean</code>注解，代码如下：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CandyAtBeanPostProcessor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessBeanDefinitionRegistry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinitionRegistry</span> beanFactory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">CachingMetadataReaderFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CachingMetadataReaderFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">MetadataReader</span> reader <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">getMetadataReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"top/jacktgq/Config.class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MethodMetadata</span><span class=\"token punctuation\">&gt;</span></span> annotatedMethods <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotationMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotatedMethods</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodMetadata</span> annotatedMethod <span class=\"token operator\">:</span> annotatedMethods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>annotatedMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">String</span> initMethod <span class=\"token operator\">=</span> annotatedMethod<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotationAttributes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"initMethod\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 这里不需要指定类名了，因为最终的BeanDefinition是Config类中加了@Bean属性的方法的返回值的类型的定义。</span>\n                <span class=\"token class-name\">BeanDefinitionBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanDefinitionBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">genericBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                builder<span class=\"token punctuation\">.</span><span class=\"token function\">setFactoryMethodOnBean</span><span class=\"token punctuation\">(</span>annotatedMethod<span class=\"token punctuation\">.</span><span class=\"token function\">getMethodName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"config\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                builder<span class=\"token punctuation\">.</span><span class=\"token function\">setAutowireMode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractBeanDefinition</span><span class=\"token punctuation\">.</span>AUTOWIRE_CONSTRUCTOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initMethod<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    builder<span class=\"token punctuation\">.</span><span class=\"token function\">setInitMethodName</span><span class=\"token punctuation\">(</span>initMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token class-name\">AbstractBeanDefinition</span> beanDefinition <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span>annotatedMethod<span class=\"token punctuation\">.</span><span class=\"token function\">getMethodName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> beanDefinition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableListableBeanFactory</span> configurableListableBeanFactory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>注：自定义解析 <code>@ComponentScan</code> 和 后面的 <code>@Bean</code> 注解的<code>Bean</code>工厂后处理器，实现<code>BeanDefinitionRegistryPostProcessor</code>接口而不是<code>BeanFactoryPostProcessor</code>接口，这么做的原因是：</p>\n<ul><li>实现<code>BeanFactoryPostProcessor</code>，<code>postProcessBeanFactory(ConfigurableListableBeanFactory configurableListableBeanFactory)</code>方法，参数<code>configurableListableBeanFactory</code>工厂调用不了<code>registerBeanDefinition()</code>方法，需要做强制转换，转成<code>DefaultableBeanFactory</code>类型，才能调用<code>registerBeanDefinition()</code>方法。</li><li>实现<code>BeanDefinitionRegistryPostProcessor</code>，它里面除了<code>postProcessBeanFactory()</code>方法，还有一个<code>postProcessBeanDefinitionRegistry(BeanDefinitionRegistry beanFactory)</code>，参数<code>beanFactory</code>可以直接调用<code>registerBeanDefinition()</code>方法，避免了<code>ConfigurableListableBeanFactory</code>向<code>DefaultableBeanFactory</code>的强制转换。</li></ul>\n<p>测试代码：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestBeanFactoryPostProcessors</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token comment\">// 模拟实现@Bean注解的解析</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testMockAtBeanAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// ⬇️GenericApplicationContext 是一个【干净】的容器，默认不会添加任何后处理器，方便做测试</span>\n        <span class=\"token class-name\">GenericApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Config</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CandyAtBeanPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// ⬇️初始化容器</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name <span class=\"token operator\">:</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinitionNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// ⬇️销毁容器</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果：</p>\n<p><img alt=\"image-20220329224604315\" src=\"..\\..\\static\\image\\4b9e8c620effeabadd2de89d1089dd24.png\"/></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=25\">p25 024-第五讲-工厂后处理器模拟实现-Mapper</a></p>\n<p>自定义<code>Bean</code>工厂后处理器<code>CandyAtMapperPostProcessor</code>来解析<code>@Mapper</code>注解，代码如下：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CandyAtMapperPostProcessor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessBeanDefinitionRegistry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinitionRegistry</span> beanFactory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">PathMatchingResourcePatternResolver</span> resolver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PathMatchingResourcePatternResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Resource</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> resources <span class=\"token operator\">=</span> resolver<span class=\"token punctuation\">.</span><span class=\"token function\">getResources</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:top/jacktgq/mapper/**/*.class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// Bean的名字生成器</span>\n            <span class=\"token class-name\">AnnotationBeanNameGenerator</span> generator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationBeanNameGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">CachingMetadataReaderFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CachingMetadataReaderFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Resource</span> resource <span class=\"token operator\">:</span> resources<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">MetadataReader</span> reader <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">getMetadataReader</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">ClassMetadata</span> classMetadata <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">getClassMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>classMetadata<span class=\"token punctuation\">.</span><span class=\"token function\">isInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token class-name\">AbstractBeanDefinition</span> beanDefinition <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanDefinitionBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">genericBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MapperFactoryBean</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addConstructorArgValue</span><span class=\"token punctuation\">(</span>classMetadata<span class=\"token punctuation\">.</span><span class=\"token function\">getClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAutowireMode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractBeanDefinition</span><span class=\"token punctuation\">.</span>AUTOWIRE_BY_TYPE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">// 这里不能使用名字生成器和MapperFactoryBean的BeanDefinition作为参数直接生成名字，</span>\n                    <span class=\"token comment\">// 这样会导致多个相同的类型的对象因为名字一样产生覆盖的问题</span>\n                    <span class=\"token comment\">// 解决办法 这里参考Spring源码的做法</span>\n                    <span class=\"token comment\">// 用@Mapper注解修饰的接口的BeanDefinition作为参数生成名字</span>\n                    <span class=\"token class-name\">AbstractBeanDefinition</span> bd <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanDefinitionBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">genericBeanDefinition</span><span class=\"token punctuation\">(</span>classMetadata<span class=\"token punctuation\">.</span><span class=\"token function\">getClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">String</span> beanName <span class=\"token operator\">=</span> generator<span class=\"token punctuation\">.</span><span class=\"token function\">generateBeanName</span><span class=\"token punctuation\">(</span>bd<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> beanDefinition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>测试代码：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestBeanFactoryPostProcessors</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token comment\">// 模拟实现@Mapper注解的解析</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testMockAtMapperAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// ⬇️GenericApplicationContext 是一个【干净】的容器，默认不会添加任何后处理器，方便做测试</span>\n        <span class=\"token class-name\">GenericApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Config</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 先解析@Bean注解，把SqlSessionFactory加到Bean工厂里面</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CandyAtBeanPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 解析Mapper接口</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CandyAtMapperPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// ⬇️初始化容器</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name <span class=\"token operator\">:</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinitionNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// ⬇️销毁容器</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果：</p>\n<p><img alt=\"image-20220330012845575\" src=\"..\\..\\static\\image\\46d2e7571d44dce96f0fbdd634397aa4.png\"/></p>\n<h2><a id=\"_AwareInitializingBeanAutowired_1406\"></a>第六讲 Aware和InitializingBean接口以及@Autowired注解失效分析</h2>\n<h3><a id=\"spring_06_aware_initializingbean_1408\"></a>spring_06_aware_initializingbean</h3>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=26\">p26 025-第六讲-Aware与InitializingBean接口</a></p>\n<p><code>Aware</code> 接口用于注入一些与容器相关信息，例如：</p>\n<p>​ a. <code>BeanNameAware</code> 注入 <code>Bean</code> 的名字</p>\n<p>​ b. <code>BeanFactoryAware</code> 注入 <code>BeanFactory</code> 容器</p>\n<p>​ c. <code>ApplicationContextAware</code> 注入 <code>ApplicationContext</code> 容器</p>\n<p>​ d. <code>EmbeddedValueResolverAware</code> 注入 解析器，解析<code>${}</code></p>\n<p>定义一个<code>MyBean</code>类，实现<code>BeanNameAware</code>、<code>ApplicationContextAware</code>和<code>InitializingBean</code>接口并实现其方法，再定义两个方法，其中一个加@Autowired注解，注入ApplicationContext容器，另一个加@PostConstruct注解，具体代码如下：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBean</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BeanNameAware</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ApplicationContextAware</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InitializingBean</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setBeanName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前bean：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"，实现 BeanNameAware 调用的方法，名字叫：\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前bean：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"，实现 ApplicationContextAware 调用的方法，容器叫：\"</span> <span class=\"token operator\">+</span> applicationContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前bean：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"，实现 InitializingBean 调用的方法，初始化\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">aaa</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前bean：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">+</span><span class=\"token string\">\"，使用 @Autowired 容器是：\"</span> <span class=\"token operator\">+</span> applicationContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@PostConstruct</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前bean：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"，使用 @PostConstruct 初始化\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>测试代码：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestAwareAndInitializingBean</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testAware1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">GenericApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myBean\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MyBean</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果：</p>\n<p><img alt=\"image-20220330173209568\" src=\"..\\..\\static\\image\\06d1de68061e08e076676ae633318647.png\"/></p>\n<p>加了<code>@Autowired</code>和<code>@PostConstruct</code>注解的方法并没有被执行，而<code>Aware</code>和<code>InitializingBean</code>接口方法都被执行了。</p>\n<p>修改测试代码，把解析<code>@Autowired</code>和<code>@PostConstruct</code>注解的<code>Bean</code>后处理加进来，然后再运行一下</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestAwareAndInitializingBean</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testAware1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">GenericApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myBean\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MyBean</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 解析 @Autowired 注解的Bean后处理器</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AutowiredAnnotationBeanPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 解析 @PostConstruct 注解的Bean后处理器</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CommonAnnotationBeanPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果：</p>\n<p><img alt=\"image-20220330173807848\" src=\"..\\..\\static\\image\\f3e72af9fcbb7616b201d505c53a0b30.png\"/></p>\n<p>可以看到这下都执行了</p>\n<p>有人可能会问：<code>b</code>、<code>c</code>、<code>d</code>的功能用 <code>@Autowired</code>注解就能实现啊，为啥还要用 <code>Aware</code> 接口呢？<br/> <code>InititalizingBean</code> 接口可以用 <code>@PostConstruct</code>注解实现，为啥还要用<code>InititalizingBean</code>呢？<br/> 简单地说：</p>\n<ul><li> <p><code>@Autowired</code> 和<code>@PostConstruct</code>注解的解析需要用到 <code>Bean</code> 后处理器，属于扩展功能，而 <code>Aware</code> 接口属于内置功能，不加任何扩展，<code>Spring</code>就能识别；</p> </li><li> <p>某些情况下，扩展功能会失效，而内置功能不会失效</p> <p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=27\">p27 026-第六讲-@Autowired失效分析</a></p>\n<ul><li> <p>例1：比如没有把解析<code>@Autowired</code>和<code>@PostStruct</code>注解的<code>Bean</code>的后处理器加到<code>Bean</code>工厂中，你会发现用 <code>Aware</code> 注入 <code>ApplicationContext</code> 成功， 而 <code>@Autowired</code> 注入 <code>ApplicationContext</code> 失败</p> </li><li> <p>例2：定义两个<code>Java Config</code>类（类上加<code>@Configuration</code>注解），名字分别叫<code>MyConfig1</code>和<code>MyConfig2</code>，都实现注入<code>ApplicationContext</code>容器和初始化功能，<code>MyConfig1</code>用<code>@Autowired</code>和<code>@PostConstruct</code>注解实现，<code>MyConfig2</code>用实现<code>Aware</code>和<code>InitializingBean</code>接口的方式实现，另外，两个<code>Config</code>类中都通过<code>@Bean</code>注解的方式注入一个<code>BeanFactoryPostProcessor</code>，代码如下：</p> <p><code>MyConfig1</code>:</p> <pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyConfig1</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"注入 ApplicationContext\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@PostConstruct</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始化\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BeanFactoryPostProcessor</span> <span class=\"token function\">processor1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> beanFactory <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 processor1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>测试代码：</p> <pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestAwareAndInitializingBean</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testAware_MyConfig1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">GenericApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// MyConfig1没有加上@</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myConfig1\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MyConfig1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 解析 @Autowired 注解的Bean后处理器</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AutowiredAnnotationBeanPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 解析 @PostConstruct 注解的Bean后处理器</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CommonAnnotationBeanPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 解析@ComponentScan、@Bean、@Import、@ImportResource注解的后处理器</span>\n        <span class=\"token comment\">// 这个后处理器不加出不来效果</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationClassPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 1. 添加beanfactory后处理器；2. 添加bean后处理器；3. 初始化单例。</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>运行结果：</p> <p><img alt=\"image-20220331090139965\" src=\"..\\..\\static\\image\\78e39790c27e9aa7391d6a720a021304.png\"/></p> <p><code>MyConfig2</code>:</p> <pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyConfig2</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationContextAware</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InitializingBean</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"注入 ApplicationContext\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始化\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BeanFactoryPostProcessor</span> <span class=\"token function\">processor1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> beanFactory <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 processor1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>测试代码：</p> <pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestAwareAndInitializingBean</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testAutowiredAndInitializingBean_MyConfig2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">GenericApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myConfig2\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MyConfig2</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 1. 添加beanfactory后处理器；2. 添加bean后处理器；3. 初始化单例。</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>运行结果：</p> <p><img alt=\"image-20220331090537999\" src=\"..\\..\\static\\image\\ba4a53092e03eceef2e6172ba845b791.png\"/></p> <p>Java配置类在添加了 <code>bean</code> 工厂后处理器后，你会发现用传统接口方式的注入和初始化依然成功，而 <code>@Autowired</code> 和 <code>@PostConstruct</code> 的注入和初始化失败。</p> <p>那是什么原因导致的呢？</p> <p>配置类 <code>@Autowired</code> 注解失效分析</p>\n<ul><li> <p>Java 配置类不包含 <code>BeanFactoryPostProcessor</code> 的情况</p>\n<div class=\"mermaid sequence-diagram\">\n<svg height=\"527\" id=\"mermaid-svg-dxnc7ekV1G9FsYOZ\" style=\"max-width: 1228px;\" viewbox=\"-50 -10 1228 527\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\">\n<style>#mermaid-svg-dxnc7ekV1G9FsYOZ {font-family:\"trebuchet ms\",verdana,arial,sans-serif;font-size:16px;fill:#333;}#mermaid-svg-dxnc7ekV1G9FsYOZ .error-icon{fill:#552222;}#mermaid-svg-dxnc7ekV1G9FsYOZ .error-text{fill:#552222;stroke:#552222;}#mermaid-svg-dxnc7ekV1G9FsYOZ .edge-thickness-normal{stroke-width:2px;}#mermaid-svg-dxnc7ekV1G9FsYOZ .edge-thickness-thick{stroke-width:3.5px;}#mermaid-svg-dxnc7ekV1G9FsYOZ .edge-pattern-solid{stroke-dasharray:0;}#mermaid-svg-dxnc7ekV1G9FsYOZ .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-svg-dxnc7ekV1G9FsYOZ .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-svg-dxnc7ekV1G9FsYOZ .marker{fill:#333333;stroke:#333333;}#mermaid-svg-dxnc7ekV1G9FsYOZ .marker.cross{stroke:#333333;}#mermaid-svg-dxnc7ekV1G9FsYOZ svg{font-family:\"trebuchet ms\",verdana,arial,sans-serif;font-size:16px;}#mermaid-svg-dxnc7ekV1G9FsYOZ .actor{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;}#mermaid-svg-dxnc7ekV1G9FsYOZ text.actor&gt;tspan{fill:black;stroke:none;}#mermaid-svg-dxnc7ekV1G9FsYOZ .actor-line{stroke:grey;}#mermaid-svg-dxnc7ekV1G9FsYOZ .messageLine0{stroke-width:1.5;stroke-dasharray:none;stroke:#333;}#mermaid-svg-dxnc7ekV1G9FsYOZ .messageLine1{stroke-width:1.5;stroke-dasharray:2,2;stroke:#333;}#mermaid-svg-dxnc7ekV1G9FsYOZ #arrowhead path{fill:#333;stroke:#333;}#mermaid-svg-dxnc7ekV1G9FsYOZ .sequenceNumber{fill:white;}#mermaid-svg-dxnc7ekV1G9FsYOZ #sequencenumber{fill:#333;}#mermaid-svg-dxnc7ekV1G9FsYOZ #crosshead path{fill:#333;stroke:#333;}#mermaid-svg-dxnc7ekV1G9FsYOZ .messageText{fill:#333;stroke:#333;}#mermaid-svg-dxnc7ekV1G9FsYOZ .labelBox{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;}#mermaid-svg-dxnc7ekV1G9FsYOZ .labelText,#mermaid-svg-dxnc7ekV1G9FsYOZ .labelText&gt;tspan{fill:black;stroke:none;}#mermaid-svg-dxnc7ekV1G9FsYOZ .loopText,#mermaid-svg-dxnc7ekV1G9FsYOZ .loopText&gt;tspan{fill:black;stroke:none;}#mermaid-svg-dxnc7ekV1G9FsYOZ .loopLine{stroke-width:2px;stroke-dasharray:2,2;stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);}#mermaid-svg-dxnc7ekV1G9FsYOZ .note{stroke:#aaaa33;fill:#fff5ad;}#mermaid-svg-dxnc7ekV1G9FsYOZ .noteText,#mermaid-svg-dxnc7ekV1G9FsYOZ .noteText&gt;tspan{fill:black;stroke:none;}#mermaid-svg-dxnc7ekV1G9FsYOZ .activation0{fill:#f4f4f4;stroke:#666;}#mermaid-svg-dxnc7ekV1G9FsYOZ .activation1{fill:#f4f4f4;stroke:#666;}#mermaid-svg-dxnc7ekV1G9FsYOZ .activation2{fill:#f4f4f4;stroke:#666;}#mermaid-svg-dxnc7ekV1G9FsYOZ .actorPopupMenu{position:absolute;}#mermaid-svg-dxnc7ekV1G9FsYOZ .actorPopupMenuPanel{position:absolute;fill:#ECECFF;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2);filter:drop-shadow(3px 5px 2px rgb(0 0 0 / 0.4));}#mermaid-svg-dxnc7ekV1G9FsYOZ .actor-man line{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;}#mermaid-svg-dxnc7ekV1G9FsYOZ .actor-man circle,#mermaid-svg-dxnc7ekV1G9FsYOZ line{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;stroke-width:2px;}#mermaid-svg-dxnc7ekV1G9FsYOZ :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}</style>\n<g></g>\n<defs>\n<symbol height=\"24\" id=\"computer\" width=\"24\">\n<path d=\"M2 2v13h20v-13h-20zm18 11h-16v-9h16v9zm-10.228 6l.466-1h3.524l.467 1h-4.457zm14.228 3h-24l2-6h2.104l-1.33 4h18.45l-1.297-4h2.073l2 6zm-5-10h-14v-7h14v7z\" transform=\"scale(.5)\"></path>\n</symbol>\n</defs>\n<defs>\n<symbol fill-rule=\"evenodd\" id=\"database\">\n<path d=\"M12.258.001l.256.004.255.005.253.008.251.01.249.012.247.015.246.016.242.019.241.02.239.023.236.024.233.027.231.028.229.031.225.032.223.034.22.036.217.038.214.04.211.041.208.043.205.045.201.046.198.048.194.05.191.051.187.053.183.054.18.056.175.057.172.059.168.06.163.061.16.063.155.064.15.066.074.033.073.033.071.034.07.034.069.035.068.035.067.035.066.035.064.036.064.036.062.036.06.036.06.037.058.037.058.037.055.038.055.038.053.038.052.038.051.039.05.039.048.039.047.039.045.04.044.04.043.04.041.04.04.041.039.041.037.041.036.041.034.041.033.042.032.042.03.042.029.042.027.042.026.043.024.043.023.043.021.043.02.043.018.044.017.043.015.044.013.044.012.044.011.045.009.044.007.045.006.045.004.045.002.045.001.045v17l-.001.045-.002.045-.004.045-.006.045-.007.045-.009.044-.011.045-.012.044-.013.044-.015.044-.017.043-.018.044-.02.043-.021.043-.023.043-.024.043-.026.043-.027.042-.029.042-.03.042-.032.042-.033.042-.034.041-.036.041-.037.041-.039.041-.04.041-.041.04-.043.04-.044.04-.045.04-.047.039-.048.039-.05.039-.051.039-.052.038-.053.038-.055.038-.055.038-.058.037-.058.037-.06.037-.06.036-.062.036-.064.036-.064.036-.066.035-.067.035-.068.035-.069.035-.07.034-.071.034-.073.033-.074.033-.15.066-.155.064-.16.063-.163.061-.168.06-.172.059-.175.057-.18.056-.183.054-.187.053-.191.051-.194.05-.198.048-.201.046-.205.045-.208.043-.211.041-.214.04-.217.038-.22.036-.223.034-.225.032-.229.031-.231.028-.233.027-.236.024-.239.023-.241.02-.242.019-.246.016-.247.015-.249.012-.251.01-.253.008-.255.005-.256.004-.258.001-.258-.001-.256-.004-.255-.005-.253-.008-.251-.01-.249-.012-.247-.015-.245-.016-.243-.019-.241-.02-.238-.023-.236-.024-.234-.027-.231-.028-.228-.031-.226-.032-.223-.034-.22-.036-.217-.038-.214-.04-.211-.041-.208-.043-.204-.045-.201-.046-.198-.048-.195-.05-.19-.051-.187-.053-.184-.054-.179-.056-.176-.057-.172-.059-.167-.06-.164-.061-.159-.063-.155-.064-.151-.066-.074-.033-.072-.033-.072-.034-.07-.034-.069-.035-.068-.035-.067-.035-.066-.035-.064-.036-.063-.036-.062-.036-.061-.036-.06-.037-.058-.037-.057-.037-.056-.038-.055-.038-.053-.038-.052-.038-.051-.039-.049-.039-.049-.039-.046-.039-.046-.04-.044-.04-.043-.04-.041-.04-.04-.041-.039-.041-.037-.041-.036-.041-.034-.041-.033-.042-.032-.042-.03-.042-.029-.042-.027-.042-.026-.043-.024-.043-.023-.043-.021-.043-.02-.043-.018-.044-.017-.043-.015-.044-.013-.044-.012-.044-.011-.045-.009-.044-.007-.045-.006-.045-.004-.045-.002-.045-.001-.045v-17l.001-.045.002-.045.004-.045.006-.045.007-.045.009-.044.011-.045.012-.044.013-.044.015-.044.017-.043.018-.044.02-.043.021-.043.023-.043.024-.043.026-.043.027-.042.029-.042.03-.042.032-.042.033-.042.034-.041.036-.041.037-.041.039-.041.04-.041.041-.04.043-.04.044-.04.046-.04.046-.039.049-.039.049-.039.051-.039.052-.038.053-.038.055-.038.056-.038.057-.037.058-.037.06-.037.061-.036.062-.036.063-.036.064-.036.066-.035.067-.035.068-.035.069-.035.07-.034.072-.034.072-.033.074-.033.151-.066.155-.064.159-.063.164-.061.167-.06.172-.059.176-.057.179-.056.184-.054.187-.053.19-.051.195-.05.198-.048.201-.046.204-.045.208-.043.211-.041.214-.04.217-.038.22-.036.223-.034.226-.032.228-.031.231-.028.234-.027.236-.024.238-.023.241-.02.243-.019.245-.016.247-.015.249-.012.251-.01.253-.008.255-.005.256-.004.258-.001.258.001zm-9.258 20.499v.01l.001.021.003.021.004.022.005.021.006.022.007.022.009.023.01.022.011.023.012.023.013.023.015.023.016.024.017.023.018.024.019.024.021.024.022.025.023.024.024.025.052.049.056.05.061.051.066.051.07.051.075.051.079.052.084.052.088.052.092.052.097.052.102.051.105.052.11.052.114.051.119.051.123.051.127.05.131.05.135.05.139.048.144.049.147.047.152.047.155.047.16.045.163.045.167.043.171.043.176.041.178.041.183.039.187.039.19.037.194.035.197.035.202.033.204.031.209.03.212.029.216.027.219.025.222.024.226.021.23.02.233.018.236.016.24.015.243.012.246.01.249.008.253.005.256.004.259.001.26-.001.257-.004.254-.005.25-.008.247-.011.244-.012.241-.014.237-.016.233-.018.231-.021.226-.021.224-.024.22-.026.216-.027.212-.028.21-.031.205-.031.202-.034.198-.034.194-.036.191-.037.187-.039.183-.04.179-.04.175-.042.172-.043.168-.044.163-.045.16-.046.155-.046.152-.047.148-.048.143-.049.139-.049.136-.05.131-.05.126-.05.123-.051.118-.052.114-.051.11-.052.106-.052.101-.052.096-.052.092-.052.088-.053.083-.051.079-.052.074-.052.07-.051.065-.051.06-.051.056-.05.051-.05.023-.024.023-.025.021-.024.02-.024.019-.024.018-.024.017-.024.015-.023.014-.024.013-.023.012-.023.01-.023.01-.022.008-.022.006-.022.006-.022.004-.022.004-.021.001-.021.001-.021v-4.127l-.077.055-.08.053-.083.054-.085.053-.087.052-.09.052-.093.051-.095.05-.097.05-.1.049-.102.049-.105.048-.106.047-.109.047-.111.046-.114.045-.115.045-.118.044-.12.043-.122.042-.124.042-.126.041-.128.04-.13.04-.132.038-.134.038-.135.037-.138.037-.139.035-.142.035-.143.034-.144.033-.147.032-.148.031-.15.03-.151.03-.153.029-.154.027-.156.027-.158.026-.159.025-.161.024-.162.023-.163.022-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.011-.178.01-.179.008-.179.008-.181.006-.182.005-.182.004-.184.003-.184.002h-.37l-.184-.002-.184-.003-.182-.004-.182-.005-.181-.006-.179-.008-.179-.008-.178-.01-.176-.011-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.022-.162-.023-.161-.024-.159-.025-.157-.026-.156-.027-.155-.027-.153-.029-.151-.03-.15-.03-.148-.031-.146-.032-.145-.033-.143-.034-.141-.035-.14-.035-.137-.037-.136-.037-.134-.038-.132-.038-.13-.04-.128-.04-.126-.041-.124-.042-.122-.042-.12-.044-.117-.043-.116-.045-.113-.045-.112-.046-.109-.047-.106-.047-.105-.048-.102-.049-.1-.049-.097-.05-.095-.05-.093-.052-.09-.051-.087-.052-.085-.053-.083-.054-.08-.054-.077-.054v4.127zm0-5.654v.011l.001.021.003.021.004.021.005.022.006.022.007.022.009.022.01.022.011.023.012.023.013.023.015.024.016.023.017.024.018.024.019.024.021.024.022.024.023.025.024.024.052.05.056.05.061.05.066.051.07.051.075.052.079.051.084.052.088.052.092.052.097.052.102.052.105.052.11.051.114.051.119.052.123.05.127.051.131.05.135.049.139.049.144.048.147.048.152.047.155.046.16.045.163.045.167.044.171.042.176.042.178.04.183.04.187.038.19.037.194.036.197.034.202.033.204.032.209.03.212.028.216.027.219.025.222.024.226.022.23.02.233.018.236.016.24.014.243.012.246.01.249.008.253.006.256.003.259.001.26-.001.257-.003.254-.006.25-.008.247-.01.244-.012.241-.015.237-.016.233-.018.231-.02.226-.022.224-.024.22-.025.216-.027.212-.029.21-.03.205-.032.202-.033.198-.035.194-.036.191-.037.187-.039.183-.039.179-.041.175-.042.172-.043.168-.044.163-.045.16-.045.155-.047.152-.047.148-.048.143-.048.139-.05.136-.049.131-.05.126-.051.123-.051.118-.051.114-.052.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.051.07-.052.065-.051.06-.05.056-.051.051-.049.023-.025.023-.024.021-.025.02-.024.019-.024.018-.024.017-.024.015-.023.014-.023.013-.024.012-.022.01-.023.01-.023.008-.022.006-.022.006-.022.004-.021.004-.022.001-.021.001-.021v-4.139l-.077.054-.08.054-.083.054-.085.052-.087.053-.09.051-.093.051-.095.051-.097.05-.1.049-.102.049-.105.048-.106.047-.109.047-.111.046-.114.045-.115.044-.118.044-.12.044-.122.042-.124.042-.126.041-.128.04-.13.039-.132.039-.134.038-.135.037-.138.036-.139.036-.142.035-.143.033-.144.033-.147.033-.148.031-.15.03-.151.03-.153.028-.154.028-.156.027-.158.026-.159.025-.161.024-.162.023-.163.022-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.011-.178.009-.179.009-.179.007-.181.007-.182.005-.182.004-.184.003-.184.002h-.37l-.184-.002-.184-.003-.182-.004-.182-.005-.181-.007-.179-.007-.179-.009-.178-.009-.176-.011-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.022-.162-.023-.161-.024-.159-.025-.157-.026-.156-.027-.155-.028-.153-.028-.151-.03-.15-.03-.148-.031-.146-.033-.145-.033-.143-.033-.141-.035-.14-.036-.137-.036-.136-.037-.134-.038-.132-.039-.13-.039-.128-.04-.126-.041-.124-.042-.122-.043-.12-.043-.117-.044-.116-.044-.113-.046-.112-.046-.109-.046-.106-.047-.105-.048-.102-.049-.1-.049-.097-.05-.095-.051-.093-.051-.09-.051-.087-.053-.085-.052-.083-.054-.08-.054-.077-.054v4.139zm0-5.666v.011l.001.02.003.022.004.021.005.022.006.021.007.022.009.023.01.022.011.023.012.023.013.023.015.023.016.024.017.024.018.023.019.024.021.025.022.024.023.024.024.025.052.05.056.05.061.05.066.051.07.051.075.052.079.051.084.052.088.052.092.052.097.052.102.052.105.051.11.052.114.051.119.051.123.051.127.05.131.05.135.05.139.049.144.048.147.048.152.047.155.046.16.045.163.045.167.043.171.043.176.042.178.04.183.04.187.038.19.037.194.036.197.034.202.033.204.032.209.03.212.028.216.027.219.025.222.024.226.021.23.02.233.018.236.017.24.014.243.012.246.01.249.008.253.006.256.003.259.001.26-.001.257-.003.254-.006.25-.008.247-.01.244-.013.241-.014.237-.016.233-.018.231-.02.226-.022.224-.024.22-.025.216-.027.212-.029.21-.03.205-.032.202-.033.198-.035.194-.036.191-.037.187-.039.183-.039.179-.041.175-.042.172-.043.168-.044.163-.045.16-.045.155-.047.152-.047.148-.048.143-.049.139-.049.136-.049.131-.051.126-.05.123-.051.118-.052.114-.051.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.052.07-.051.065-.051.06-.051.056-.05.051-.049.023-.025.023-.025.021-.024.02-.024.019-.024.018-.024.017-.024.015-.023.014-.024.013-.023.012-.023.01-.022.01-.023.008-.022.006-.022.006-.022.004-.022.004-.021.001-.021.001-.021v-4.153l-.077.054-.08.054-.083.053-.085.053-.087.053-.09.051-.093.051-.095.051-.097.05-.1.049-.102.048-.105.048-.106.048-.109.046-.111.046-.114.046-.115.044-.118.044-.12.043-.122.043-.124.042-.126.041-.128.04-.13.039-.132.039-.134.038-.135.037-.138.036-.139.036-.142.034-.143.034-.144.033-.147.032-.148.032-.15.03-.151.03-.153.028-.154.028-.156.027-.158.026-.159.024-.161.024-.162.023-.163.023-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.01-.178.01-.179.009-.179.007-.181.006-.182.006-.182.004-.184.003-.184.001-.185.001-.185-.001-.184-.001-.184-.003-.182-.004-.182-.006-.181-.006-.179-.007-.179-.009-.178-.01-.176-.01-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.023-.162-.023-.161-.024-.159-.024-.157-.026-.156-.027-.155-.028-.153-.028-.151-.03-.15-.03-.148-.032-.146-.032-.145-.033-.143-.034-.141-.034-.14-.036-.137-.036-.136-.037-.134-.038-.132-.039-.13-.039-.128-.041-.126-.041-.124-.041-.122-.043-.12-.043-.117-.044-.116-.044-.113-.046-.112-.046-.109-.046-.106-.048-.105-.048-.102-.048-.1-.05-.097-.049-.095-.051-.093-.051-.09-.052-.087-.052-.085-.053-.083-.053-.08-.054-.077-.054v4.153zm8.74-8.179l-.257.004-.254.005-.25.008-.247.011-.244.012-.241.014-.237.016-.233.018-.231.021-.226.022-.224.023-.22.026-.216.027-.212.028-.21.031-.205.032-.202.033-.198.034-.194.036-.191.038-.187.038-.183.04-.179.041-.175.042-.172.043-.168.043-.163.045-.16.046-.155.046-.152.048-.148.048-.143.048-.139.049-.136.05-.131.05-.126.051-.123.051-.118.051-.114.052-.11.052-.106.052-.101.052-.096.052-.092.052-.088.052-.083.052-.079.052-.074.051-.07.052-.065.051-.06.05-.056.05-.051.05-.023.025-.023.024-.021.024-.02.025-.019.024-.018.024-.017.023-.015.024-.014.023-.013.023-.012.023-.01.023-.01.022-.008.022-.006.023-.006.021-.004.022-.004.021-.001.021-.001.021.001.021.001.021.004.021.004.022.006.021.006.023.008.022.01.022.01.023.012.023.013.023.014.023.015.024.017.023.018.024.019.024.02.025.021.024.023.024.023.025.051.05.056.05.06.05.065.051.07.052.074.051.079.052.083.052.088.052.092.052.096.052.101.052.106.052.11.052.114.052.118.051.123.051.126.051.131.05.136.05.139.049.143.048.148.048.152.048.155.046.16.046.163.045.168.043.172.043.175.042.179.041.183.04.187.038.191.038.194.036.198.034.202.033.205.032.21.031.212.028.216.027.22.026.224.023.226.022.231.021.233.018.237.016.241.014.244.012.247.011.25.008.254.005.257.004.26.001.26-.001.257-.004.254-.005.25-.008.247-.011.244-.012.241-.014.237-.016.233-.018.231-.021.226-.022.224-.023.22-.026.216-.027.212-.028.21-.031.205-.032.202-.033.198-.034.194-.036.191-.038.187-.038.183-.04.179-.041.175-.042.172-.043.168-.043.163-.045.16-.046.155-.046.152-.048.148-.048.143-.048.139-.049.136-.05.131-.05.126-.051.123-.051.118-.051.114-.052.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.051.07-.052.065-.051.06-.05.056-.05.051-.05.023-.025.023-.024.021-.024.02-.025.019-.024.018-.024.017-.023.015-.024.014-.023.013-.023.012-.023.01-.023.01-.022.008-.022.006-.023.006-.021.004-.022.004-.021.001-.021.001-.021-.001-.021-.001-.021-.004-.021-.004-.022-.006-.021-.006-.023-.008-.022-.01-.022-.01-.023-.012-.023-.013-.023-.014-.023-.015-.024-.017-.023-.018-.024-.019-.024-.02-.025-.021-.024-.023-.024-.023-.025-.051-.05-.056-.05-.06-.05-.065-.051-.07-.052-.074-.051-.079-.052-.083-.052-.088-.052-.092-.052-.096-.052-.101-.052-.106-.052-.11-.052-.114-.052-.118-.051-.123-.051-.126-.051-.131-.05-.136-.05-.139-.049-.143-.048-.148-.048-.152-.048-.155-.046-.16-.046-.163-.045-.168-.043-.172-.043-.175-.042-.179-.041-.183-.04-.187-.038-.191-.038-.194-.036-.198-.034-.202-.033-.205-.032-.21-.031-.212-.028-.216-.027-.22-.026-.224-.023-.226-.022-.231-.021-.233-.018-.237-.016-.241-.014-.244-.012-.247-.011-.25-.008-.254-.005-.257-.004-.26-.001-.26.001z\" transform=\"scale(.5)\"></path>\n</symbol>\n</defs>\n<defs>\n<symbol height=\"24\" id=\"clock\" width=\"24\">\n<path d=\"M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10-10-4.486-10-10 4.486-10 10-10zm0-2c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm5.848 12.459c.202.038.202.333.001.372-1.907.361-6.045 1.111-6.547 1.111-.719 0-1.301-.582-1.301-1.301 0-.512.77-5.447 1.125-7.445.034-.192.312-.181.343.014l.985 6.238 5.394 1.011z\" transform=\"scale(.5)\"></path>\n</symbol>\n</defs>\n<g>\n<line class=\"200\" id=\"actor8\" stroke=\"#999\" stroke-width=\"0.5px\" x1=\"75.5\" x2=\"75.5\" y1=\"5\" y2=\"461\"></line>\n<g id=\"root-8\">\n<rect class=\"actor\" fill=\"#eaeaea\" height=\"65\" rx=\"3\" ry=\"3\" stroke=\"#666\" width=\"151\" x=\"0\" y=\"0\"></rect>\n<text alignment-baseline=\"central\" class=\"actor\" dominant-baseline=\"central\" style=\"text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;\" x=\"75.5\" y=\"32.5\">\n<tspan dy=\"0\" x=\"75.5\">\n            ApplicationContext\n           </tspan>\n</text>\n</g>\n</g>\n<g>\n<line class=\"200\" id=\"actor9\" stroke=\"#999\" stroke-width=\"0.5px\" x1=\"402.5\" x2=\"402.5\" y1=\"5\" y2=\"461\"></line>\n<g id=\"root-9\">\n<rect class=\"actor\" fill=\"#eaeaea\" height=\"65\" rx=\"3\" ry=\"3\" stroke=\"#666\" width=\"197\" x=\"304\" y=\"0\"></rect>\n<text alignment-baseline=\"central\" class=\"actor\" dominant-baseline=\"central\" style=\"text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;\" x=\"402.5\" y=\"32.5\">\n<tspan dy=\"0\" x=\"402.5\">\n            BeanFactoryPostProcessor\n           </tspan>\n</text>\n</g>\n</g>\n<g>\n<line class=\"200\" id=\"actor10\" stroke=\"#999\" stroke-width=\"0.5px\" x1=\"626\" x2=\"626\" y1=\"5\" y2=\"461\"></line>\n<g id=\"root-10\">\n<rect class=\"actor\" fill=\"#eaeaea\" height=\"65\" rx=\"3\" ry=\"3\" stroke=\"#666\" width=\"150\" x=\"551\" y=\"0\"></rect>\n<text alignment-baseline=\"central\" class=\"actor\" dominant-baseline=\"central\" style=\"text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;\" x=\"626\" y=\"32.5\">\n<tspan dy=\"0\" x=\"626\">\n            BeanPostProcessor\n           </tspan>\n</text>\n</g>\n</g>\n<g>\n<line class=\"200\" id=\"actor11\" stroke=\"#999\" stroke-width=\"0.5px\" x1=\"1053\" x2=\"1053\" y1=\"5\" y2=\"461\"></line>\n<g id=\"root-11\">\n<rect class=\"actor\" fill=\"#eaeaea\" height=\"65\" rx=\"3\" ry=\"3\" stroke=\"#666\" width=\"150\" x=\"978\" y=\"0\"></rect>\n<text alignment-baseline=\"central\" class=\"actor\" dominant-baseline=\"central\" style=\"text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;\" x=\"1053\" y=\"32.5\">\n<tspan dy=\"0\" x=\"1053\">\n            Java配置类\n           </tspan>\n</text>\n</g>\n</g>\n<defs>\n<marker id=\"arrowhead\" markerheight=\"12\" markerunits=\"userSpaceOnUse\" markerwidth=\"12\" orient=\"auto\" refx=\"9\" refy=\"5\">\n<path d=\"M 0 0 L 10 5 L 0 10 z\"></path>\n</marker>\n</defs>\n<defs>\n<marker id=\"crosshead\" markerheight=\"8\" markerwidth=\"15\" orient=\"auto\" refx=\"16\" refy=\"4\">\n<path d=\"M 9,2 V 6 L16,4 Z\" fill=\"black\" stroke=\"#000000\" stroke-width=\"1px\" style=\"stroke-dasharray: 0, 0;\"></path>\n<path d=\"M 0,1 L 6,7 M 6,1 L 0,7\" fill=\"none\" stroke=\"#000000\" stroke-width=\"1px\" style=\"stroke-dasharray: 0, 0;\"></path>\n</marker>\n</defs>\n<defs>\n<marker id=\"filled-head\" markerheight=\"28\" markerwidth=\"20\" orient=\"auto\" refx=\"18\" refy=\"7\">\n<path d=\"M 18,7 L9,13 L14,7 L9,1 Z\"></path>\n</marker>\n</defs>\n<defs>\n<marker id=\"sequencenumber\" markerheight=\"40\" markerwidth=\"60\" orient=\"auto\" refx=\"15\" refy=\"15\">\n<circle cx=\"15\" cy=\"15\" r=\"6\"></circle>\n</marker>\n</defs>\n<text alignment-baseline=\"middle\" class=\"messageText\" dominant-baseline=\"middle\" dy=\"1em\" style='font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;' text-anchor=\"middle\" x=\"239\" y=\"80\">\n         1. 执行 BeanFactoryPostProcessor\n        </text>\n<line class=\"messageLine0\" marker-end=\"url(#arrowhead)\" stroke=\"none\" stroke-width=\"2\" style=\"fill: none;\" x1=\"75.5\" x2=\"402.5\" y1=\"117\" y2=\"117\"></line>\n<text alignment-baseline=\"middle\" class=\"messageText\" dominant-baseline=\"middle\" dy=\"1em\" style='font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;' text-anchor=\"middle\" x=\"351\" y=\"132\">\n         2. 注册 BeanPostProcessor\n        </text>\n<line class=\"messageLine0\" marker-end=\"url(#arrowhead)\" stroke=\"none\" stroke-width=\"2\" style=\"fill: none;\" x1=\"75.5\" x2=\"626\" y1=\"169\" y2=\"169\"></line>\n<text alignment-baseline=\"middle\" class=\"messageText\" dominant-baseline=\"middle\" dy=\"1em\" style='font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;' text-anchor=\"middle\" x=\"564\" y=\"184\">\n         3. 创建和初始化\n        </text>\n<line class=\"messageLine0\" marker-end=\"url(#arrowhead)\" stroke=\"none\" stroke-width=\"2\" style=\"fill: none;\" x1=\"75.5\" x2=\"1053\" y1=\"217\" y2=\"217\"></line>\n<g>\n<rect class=\"activation0\" fill=\"#EDF2AE\" height=\"204\" rx=\"0\" ry=\"0\" stroke=\"#666\" width=\"10\" x=\"1048\" y=\"217\"></rect>\n</g>\n<text alignment-baseline=\"middle\" class=\"messageText\" dominant-baseline=\"middle\" dy=\"1em\" style='font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;' text-anchor=\"middle\" x=\"837\" y=\"232\">\n         3.1 依赖注入扩展（如 @Value 和 @Autowired）\n        </text>\n<line class=\"messageLine0\" marker-end=\"url(#arrowhead)\" stroke=\"none\" stroke-width=\"2\" style=\"fill: none;\" x1=\"626\" x2=\"1048\" y1=\"269\" y2=\"269\"></line>\n<text alignment-baseline=\"middle\" class=\"messageText\" dominant-baseline=\"middle\" dy=\"1em\" style='font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;' text-anchor=\"middle\" x=\"837\" y=\"284\">\n         3.2 初始化扩展（如 @PostConstruct)\n        </text>\n<line class=\"messageLine0\" marker-end=\"url(#arrowhead)\" stroke=\"none\" stroke-width=\"2\" style=\"fill: none;\" x1=\"626\" x2=\"1048\" y1=\"321\" y2=\"321\"></line>\n<text alignment-baseline=\"middle\" class=\"messageText\" dominant-baseline=\"middle\" dy=\"1em\" style='font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;' text-anchor=\"middle\" x=\"562\" y=\"336\">\n         3.3 执行 Aware 及 InitializingBean\n        </text>\n<line class=\"messageLine0\" marker-end=\"url(#arrowhead)\" stroke=\"none\" stroke-width=\"2\" style=\"fill: none;\" x1=\"75.5\" x2=\"1048\" y1=\"373\" y2=\"373\"></line>\n<text alignment-baseline=\"middle\" class=\"messageText\" dominant-baseline=\"middle\" dy=\"1em\" style='font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;' text-anchor=\"middle\" x=\"562\" y=\"388\">\n         3.4 创建成功\n        </text>\n<line class=\"messageLine1\" marker-end=\"url(#arrowhead)\" stroke=\"none\" stroke-width=\"2\" style=\"stroke-dasharray: 3, 3; fill: none;\" x1=\"1048\" x2=\"75.5\" y1=\"421\" y2=\"421\"></line>\n<g>\n<rect class=\"actor\" fill=\"#eaeaea\" height=\"65\" rx=\"3\" ry=\"3\" stroke=\"#666\" width=\"151\" x=\"0\" y=\"441\"></rect>\n<text alignment-baseline=\"central\" class=\"actor\" dominant-baseline=\"central\" style=\"text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;\" x=\"75.5\" y=\"473.5\">\n<tspan dy=\"0\" x=\"75.5\">\n           ApplicationContext\n          </tspan>\n</text>\n</g>\n<g>\n<rect class=\"actor\" fill=\"#eaeaea\" height=\"65\" rx=\"3\" ry=\"3\" stroke=\"#666\" width=\"197\" x=\"304\" y=\"441\"></rect>\n<text alignment-baseline=\"central\" class=\"actor\" dominant-baseline=\"central\" style=\"text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;\" x=\"402.5\" y=\"473.5\">\n<tspan dy=\"0\" x=\"402.5\">\n           BeanFactoryPostProcessor\n          </tspan>\n</text>\n</g>\n<g>\n<rect class=\"actor\" fill=\"#eaeaea\" height=\"65\" rx=\"3\" ry=\"3\" stroke=\"#666\" width=\"150\" x=\"551\" y=\"441\"></rect>\n<text alignment-baseline=\"central\" class=\"actor\" dominant-baseline=\"central\" style=\"text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;\" x=\"626\" y=\"473.5\">\n<tspan dy=\"0\" x=\"626\">\n           BeanPostProcessor\n          </tspan>\n</text>\n</g>\n<g>\n<rect class=\"actor\" fill=\"#eaeaea\" height=\"65\" rx=\"3\" ry=\"3\" stroke=\"#666\" width=\"150\" x=\"978\" y=\"441\"></rect>\n<text alignment-baseline=\"central\" class=\"actor\" dominant-baseline=\"central\" style=\"text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;\" x=\"1053\" y=\"473.5\">\n<tspan dy=\"0\" x=\"1053\">\n           Java配置类\n          </tspan>\n</text>\n</g>\n</svg>\n</div> </li><li> <p><code>Java</code> 配置类包含 <code>BeanFactoryPostProcessor</code> 的情况</p> <p>根据上面的时序图可以得知，正常情况下，<code>BeanFactoryPostProcessor</code>会在<code>Java</code>配置类初始化之前执行，而Java配置类里面却定义了一个<code>BeanFactoryPostProcessor</code>，要创建其中的 <code>BeanFactoryPostProcessor</code> ，必须提前创建 <code>Java</code> 配置类，这样<code>BeanFactoryPostProcessor</code>就会在Java配置类初始化后执行了，而此时的 <code>BeanPostProcessor</code> 还未准备好，导致 <code>@Autowired</code> 等注解失效。</p>\n<div class=\"mermaid sequence-diagram\">\n<svg height=\"423\" id=\"mermaid-svg-BNR8OGg7qnnphFt7\" style=\"max-width: 1001px;\" viewbox=\"-50 -10 1001 423\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\">\n<style>#mermaid-svg-BNR8OGg7qnnphFt7 {font-family:\"trebuchet ms\",verdana,arial,sans-serif;font-size:16px;fill:#333;}#mermaid-svg-BNR8OGg7qnnphFt7 .error-icon{fill:#552222;}#mermaid-svg-BNR8OGg7qnnphFt7 .error-text{fill:#552222;stroke:#552222;}#mermaid-svg-BNR8OGg7qnnphFt7 .edge-thickness-normal{stroke-width:2px;}#mermaid-svg-BNR8OGg7qnnphFt7 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-svg-BNR8OGg7qnnphFt7 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-svg-BNR8OGg7qnnphFt7 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-svg-BNR8OGg7qnnphFt7 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-svg-BNR8OGg7qnnphFt7 .marker{fill:#333333;stroke:#333333;}#mermaid-svg-BNR8OGg7qnnphFt7 .marker.cross{stroke:#333333;}#mermaid-svg-BNR8OGg7qnnphFt7 svg{font-family:\"trebuchet ms\",verdana,arial,sans-serif;font-size:16px;}#mermaid-svg-BNR8OGg7qnnphFt7 .actor{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;}#mermaid-svg-BNR8OGg7qnnphFt7 text.actor&gt;tspan{fill:black;stroke:none;}#mermaid-svg-BNR8OGg7qnnphFt7 .actor-line{stroke:grey;}#mermaid-svg-BNR8OGg7qnnphFt7 .messageLine0{stroke-width:1.5;stroke-dasharray:none;stroke:#333;}#mermaid-svg-BNR8OGg7qnnphFt7 .messageLine1{stroke-width:1.5;stroke-dasharray:2,2;stroke:#333;}#mermaid-svg-BNR8OGg7qnnphFt7 #arrowhead path{fill:#333;stroke:#333;}#mermaid-svg-BNR8OGg7qnnphFt7 .sequenceNumber{fill:white;}#mermaid-svg-BNR8OGg7qnnphFt7 #sequencenumber{fill:#333;}#mermaid-svg-BNR8OGg7qnnphFt7 #crosshead path{fill:#333;stroke:#333;}#mermaid-svg-BNR8OGg7qnnphFt7 .messageText{fill:#333;stroke:#333;}#mermaid-svg-BNR8OGg7qnnphFt7 .labelBox{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;}#mermaid-svg-BNR8OGg7qnnphFt7 .labelText,#mermaid-svg-BNR8OGg7qnnphFt7 .labelText&gt;tspan{fill:black;stroke:none;}#mermaid-svg-BNR8OGg7qnnphFt7 .loopText,#mermaid-svg-BNR8OGg7qnnphFt7 .loopText&gt;tspan{fill:black;stroke:none;}#mermaid-svg-BNR8OGg7qnnphFt7 .loopLine{stroke-width:2px;stroke-dasharray:2,2;stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);}#mermaid-svg-BNR8OGg7qnnphFt7 .note{stroke:#aaaa33;fill:#fff5ad;}#mermaid-svg-BNR8OGg7qnnphFt7 .noteText,#mermaid-svg-BNR8OGg7qnnphFt7 .noteText&gt;tspan{fill:black;stroke:none;}#mermaid-svg-BNR8OGg7qnnphFt7 .activation0{fill:#f4f4f4;stroke:#666;}#mermaid-svg-BNR8OGg7qnnphFt7 .activation1{fill:#f4f4f4;stroke:#666;}#mermaid-svg-BNR8OGg7qnnphFt7 .activation2{fill:#f4f4f4;stroke:#666;}#mermaid-svg-BNR8OGg7qnnphFt7 .actorPopupMenu{position:absolute;}#mermaid-svg-BNR8OGg7qnnphFt7 .actorPopupMenuPanel{position:absolute;fill:#ECECFF;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2);filter:drop-shadow(3px 5px 2px rgb(0 0 0 / 0.4));}#mermaid-svg-BNR8OGg7qnnphFt7 .actor-man line{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;}#mermaid-svg-BNR8OGg7qnnphFt7 .actor-man circle,#mermaid-svg-BNR8OGg7qnnphFt7 line{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;stroke-width:2px;}#mermaid-svg-BNR8OGg7qnnphFt7 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}</style>\n<g></g>\n<defs>\n<symbol height=\"24\" id=\"computer\" width=\"24\">\n<path d=\"M2 2v13h20v-13h-20zm18 11h-16v-9h16v9zm-10.228 6l.466-1h3.524l.467 1h-4.457zm14.228 3h-24l2-6h2.104l-1.33 4h18.45l-1.297-4h2.073l2 6zm-5-10h-14v-7h14v7z\" transform=\"scale(.5)\"></path>\n</symbol>\n</defs>\n<defs>\n<symbol fill-rule=\"evenodd\" id=\"database\">\n<path d=\"M12.258.001l.256.004.255.005.253.008.251.01.249.012.247.015.246.016.242.019.241.02.239.023.236.024.233.027.231.028.229.031.225.032.223.034.22.036.217.038.214.04.211.041.208.043.205.045.201.046.198.048.194.05.191.051.187.053.183.054.18.056.175.057.172.059.168.06.163.061.16.063.155.064.15.066.074.033.073.033.071.034.07.034.069.035.068.035.067.035.066.035.064.036.064.036.062.036.06.036.06.037.058.037.058.037.055.038.055.038.053.038.052.038.051.039.05.039.048.039.047.039.045.04.044.04.043.04.041.04.04.041.039.041.037.041.036.041.034.041.033.042.032.042.03.042.029.042.027.042.026.043.024.043.023.043.021.043.02.043.018.044.017.043.015.044.013.044.012.044.011.045.009.044.007.045.006.045.004.045.002.045.001.045v17l-.001.045-.002.045-.004.045-.006.045-.007.045-.009.044-.011.045-.012.044-.013.044-.015.044-.017.043-.018.044-.02.043-.021.043-.023.043-.024.043-.026.043-.027.042-.029.042-.03.042-.032.042-.033.042-.034.041-.036.041-.037.041-.039.041-.04.041-.041.04-.043.04-.044.04-.045.04-.047.039-.048.039-.05.039-.051.039-.052.038-.053.038-.055.038-.055.038-.058.037-.058.037-.06.037-.06.036-.062.036-.064.036-.064.036-.066.035-.067.035-.068.035-.069.035-.07.034-.071.034-.073.033-.074.033-.15.066-.155.064-.16.063-.163.061-.168.06-.172.059-.175.057-.18.056-.183.054-.187.053-.191.051-.194.05-.198.048-.201.046-.205.045-.208.043-.211.041-.214.04-.217.038-.22.036-.223.034-.225.032-.229.031-.231.028-.233.027-.236.024-.239.023-.241.02-.242.019-.246.016-.247.015-.249.012-.251.01-.253.008-.255.005-.256.004-.258.001-.258-.001-.256-.004-.255-.005-.253-.008-.251-.01-.249-.012-.247-.015-.245-.016-.243-.019-.241-.02-.238-.023-.236-.024-.234-.027-.231-.028-.228-.031-.226-.032-.223-.034-.22-.036-.217-.038-.214-.04-.211-.041-.208-.043-.204-.045-.201-.046-.198-.048-.195-.05-.19-.051-.187-.053-.184-.054-.179-.056-.176-.057-.172-.059-.167-.06-.164-.061-.159-.063-.155-.064-.151-.066-.074-.033-.072-.033-.072-.034-.07-.034-.069-.035-.068-.035-.067-.035-.066-.035-.064-.036-.063-.036-.062-.036-.061-.036-.06-.037-.058-.037-.057-.037-.056-.038-.055-.038-.053-.038-.052-.038-.051-.039-.049-.039-.049-.039-.046-.039-.046-.04-.044-.04-.043-.04-.041-.04-.04-.041-.039-.041-.037-.041-.036-.041-.034-.041-.033-.042-.032-.042-.03-.042-.029-.042-.027-.042-.026-.043-.024-.043-.023-.043-.021-.043-.02-.043-.018-.044-.017-.043-.015-.044-.013-.044-.012-.044-.011-.045-.009-.044-.007-.045-.006-.045-.004-.045-.002-.045-.001-.045v-17l.001-.045.002-.045.004-.045.006-.045.007-.045.009-.044.011-.045.012-.044.013-.044.015-.044.017-.043.018-.044.02-.043.021-.043.023-.043.024-.043.026-.043.027-.042.029-.042.03-.042.032-.042.033-.042.034-.041.036-.041.037-.041.039-.041.04-.041.041-.04.043-.04.044-.04.046-.04.046-.039.049-.039.049-.039.051-.039.052-.038.053-.038.055-.038.056-.038.057-.037.058-.037.06-.037.061-.036.062-.036.063-.036.064-.036.066-.035.067-.035.068-.035.069-.035.07-.034.072-.034.072-.033.074-.033.151-.066.155-.064.159-.063.164-.061.167-.06.172-.059.176-.057.179-.056.184-.054.187-.053.19-.051.195-.05.198-.048.201-.046.204-.045.208-.043.211-.041.214-.04.217-.038.22-.036.223-.034.226-.032.228-.031.231-.028.234-.027.236-.024.238-.023.241-.02.243-.019.245-.016.247-.015.249-.012.251-.01.253-.008.255-.005.256-.004.258-.001.258.001zm-9.258 20.499v.01l.001.021.003.021.004.022.005.021.006.022.007.022.009.023.01.022.011.023.012.023.013.023.015.023.016.024.017.023.018.024.019.024.021.024.022.025.023.024.024.025.052.049.056.05.061.051.066.051.07.051.075.051.079.052.084.052.088.052.092.052.097.052.102.051.105.052.11.052.114.051.119.051.123.051.127.05.131.05.135.05.139.048.144.049.147.047.152.047.155.047.16.045.163.045.167.043.171.043.176.041.178.041.183.039.187.039.19.037.194.035.197.035.202.033.204.031.209.03.212.029.216.027.219.025.222.024.226.021.23.02.233.018.236.016.24.015.243.012.246.01.249.008.253.005.256.004.259.001.26-.001.257-.004.254-.005.25-.008.247-.011.244-.012.241-.014.237-.016.233-.018.231-.021.226-.021.224-.024.22-.026.216-.027.212-.028.21-.031.205-.031.202-.034.198-.034.194-.036.191-.037.187-.039.183-.04.179-.04.175-.042.172-.043.168-.044.163-.045.16-.046.155-.046.152-.047.148-.048.143-.049.139-.049.136-.05.131-.05.126-.05.123-.051.118-.052.114-.051.11-.052.106-.052.101-.052.096-.052.092-.052.088-.053.083-.051.079-.052.074-.052.07-.051.065-.051.06-.051.056-.05.051-.05.023-.024.023-.025.021-.024.02-.024.019-.024.018-.024.017-.024.015-.023.014-.024.013-.023.012-.023.01-.023.01-.022.008-.022.006-.022.006-.022.004-.022.004-.021.001-.021.001-.021v-4.127l-.077.055-.08.053-.083.054-.085.053-.087.052-.09.052-.093.051-.095.05-.097.05-.1.049-.102.049-.105.048-.106.047-.109.047-.111.046-.114.045-.115.045-.118.044-.12.043-.122.042-.124.042-.126.041-.128.04-.13.04-.132.038-.134.038-.135.037-.138.037-.139.035-.142.035-.143.034-.144.033-.147.032-.148.031-.15.03-.151.03-.153.029-.154.027-.156.027-.158.026-.159.025-.161.024-.162.023-.163.022-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.011-.178.01-.179.008-.179.008-.181.006-.182.005-.182.004-.184.003-.184.002h-.37l-.184-.002-.184-.003-.182-.004-.182-.005-.181-.006-.179-.008-.179-.008-.178-.01-.176-.011-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.022-.162-.023-.161-.024-.159-.025-.157-.026-.156-.027-.155-.027-.153-.029-.151-.03-.15-.03-.148-.031-.146-.032-.145-.033-.143-.034-.141-.035-.14-.035-.137-.037-.136-.037-.134-.038-.132-.038-.13-.04-.128-.04-.126-.041-.124-.042-.122-.042-.12-.044-.117-.043-.116-.045-.113-.045-.112-.046-.109-.047-.106-.047-.105-.048-.102-.049-.1-.049-.097-.05-.095-.05-.093-.052-.09-.051-.087-.052-.085-.053-.083-.054-.08-.054-.077-.054v4.127zm0-5.654v.011l.001.021.003.021.004.021.005.022.006.022.007.022.009.022.01.022.011.023.012.023.013.023.015.024.016.023.017.024.018.024.019.024.021.024.022.024.023.025.024.024.052.05.056.05.061.05.066.051.07.051.075.052.079.051.084.052.088.052.092.052.097.052.102.052.105.052.11.051.114.051.119.052.123.05.127.051.131.05.135.049.139.049.144.048.147.048.152.047.155.046.16.045.163.045.167.044.171.042.176.042.178.04.183.04.187.038.19.037.194.036.197.034.202.033.204.032.209.03.212.028.216.027.219.025.222.024.226.022.23.02.233.018.236.016.24.014.243.012.246.01.249.008.253.006.256.003.259.001.26-.001.257-.003.254-.006.25-.008.247-.01.244-.012.241-.015.237-.016.233-.018.231-.02.226-.022.224-.024.22-.025.216-.027.212-.029.21-.03.205-.032.202-.033.198-.035.194-.036.191-.037.187-.039.183-.039.179-.041.175-.042.172-.043.168-.044.163-.045.16-.045.155-.047.152-.047.148-.048.143-.048.139-.05.136-.049.131-.05.126-.051.123-.051.118-.051.114-.052.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.051.07-.052.065-.051.06-.05.056-.051.051-.049.023-.025.023-.024.021-.025.02-.024.019-.024.018-.024.017-.024.015-.023.014-.023.013-.024.012-.022.01-.023.01-.023.008-.022.006-.022.006-.022.004-.021.004-.022.001-.021.001-.021v-4.139l-.077.054-.08.054-.083.054-.085.052-.087.053-.09.051-.093.051-.095.051-.097.05-.1.049-.102.049-.105.048-.106.047-.109.047-.111.046-.114.045-.115.044-.118.044-.12.044-.122.042-.124.042-.126.041-.128.04-.13.039-.132.039-.134.038-.135.037-.138.036-.139.036-.142.035-.143.033-.144.033-.147.033-.148.031-.15.03-.151.03-.153.028-.154.028-.156.027-.158.026-.159.025-.161.024-.162.023-.163.022-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.011-.178.009-.179.009-.179.007-.181.007-.182.005-.182.004-.184.003-.184.002h-.37l-.184-.002-.184-.003-.182-.004-.182-.005-.181-.007-.179-.007-.179-.009-.178-.009-.176-.011-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.022-.162-.023-.161-.024-.159-.025-.157-.026-.156-.027-.155-.028-.153-.028-.151-.03-.15-.03-.148-.031-.146-.033-.145-.033-.143-.033-.141-.035-.14-.036-.137-.036-.136-.037-.134-.038-.132-.039-.13-.039-.128-.04-.126-.041-.124-.042-.122-.043-.12-.043-.117-.044-.116-.044-.113-.046-.112-.046-.109-.046-.106-.047-.105-.048-.102-.049-.1-.049-.097-.05-.095-.051-.093-.051-.09-.051-.087-.053-.085-.052-.083-.054-.08-.054-.077-.054v4.139zm0-5.666v.011l.001.02.003.022.004.021.005.022.006.021.007.022.009.023.01.022.011.023.012.023.013.023.015.023.016.024.017.024.018.023.019.024.021.025.022.024.023.024.024.025.052.05.056.05.061.05.066.051.07.051.075.052.079.051.084.052.088.052.092.052.097.052.102.052.105.051.11.052.114.051.119.051.123.051.127.05.131.05.135.05.139.049.144.048.147.048.152.047.155.046.16.045.163.045.167.043.171.043.176.042.178.04.183.04.187.038.19.037.194.036.197.034.202.033.204.032.209.03.212.028.216.027.219.025.222.024.226.021.23.02.233.018.236.017.24.014.243.012.246.01.249.008.253.006.256.003.259.001.26-.001.257-.003.254-.006.25-.008.247-.01.244-.013.241-.014.237-.016.233-.018.231-.02.226-.022.224-.024.22-.025.216-.027.212-.029.21-.03.205-.032.202-.033.198-.035.194-.036.191-.037.187-.039.183-.039.179-.041.175-.042.172-.043.168-.044.163-.045.16-.045.155-.047.152-.047.148-.048.143-.049.139-.049.136-.049.131-.051.126-.05.123-.051.118-.052.114-.051.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.052.07-.051.065-.051.06-.051.056-.05.051-.049.023-.025.023-.025.021-.024.02-.024.019-.024.018-.024.017-.024.015-.023.014-.024.013-.023.012-.023.01-.022.01-.023.008-.022.006-.022.006-.022.004-.022.004-.021.001-.021.001-.021v-4.153l-.077.054-.08.054-.083.053-.085.053-.087.053-.09.051-.093.051-.095.051-.097.05-.1.049-.102.048-.105.048-.106.048-.109.046-.111.046-.114.046-.115.044-.118.044-.12.043-.122.043-.124.042-.126.041-.128.04-.13.039-.132.039-.134.038-.135.037-.138.036-.139.036-.142.034-.143.034-.144.033-.147.032-.148.032-.15.03-.151.03-.153.028-.154.028-.156.027-.158.026-.159.024-.161.024-.162.023-.163.023-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.01-.178.01-.179.009-.179.007-.181.006-.182.006-.182.004-.184.003-.184.001-.185.001-.185-.001-.184-.001-.184-.003-.182-.004-.182-.006-.181-.006-.179-.007-.179-.009-.178-.01-.176-.01-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.023-.162-.023-.161-.024-.159-.024-.157-.026-.156-.027-.155-.028-.153-.028-.151-.03-.15-.03-.148-.032-.146-.032-.145-.033-.143-.034-.141-.034-.14-.036-.137-.036-.136-.037-.134-.038-.132-.039-.13-.039-.128-.041-.126-.041-.124-.041-.122-.043-.12-.043-.117-.044-.116-.044-.113-.046-.112-.046-.109-.046-.106-.048-.105-.048-.102-.048-.1-.05-.097-.049-.095-.051-.093-.051-.09-.052-.087-.052-.085-.053-.083-.053-.08-.054-.077-.054v4.153zm8.74-8.179l-.257.004-.254.005-.25.008-.247.011-.244.012-.241.014-.237.016-.233.018-.231.021-.226.022-.224.023-.22.026-.216.027-.212.028-.21.031-.205.032-.202.033-.198.034-.194.036-.191.038-.187.038-.183.04-.179.041-.175.042-.172.043-.168.043-.163.045-.16.046-.155.046-.152.048-.148.048-.143.048-.139.049-.136.05-.131.05-.126.051-.123.051-.118.051-.114.052-.11.052-.106.052-.101.052-.096.052-.092.052-.088.052-.083.052-.079.052-.074.051-.07.052-.065.051-.06.05-.056.05-.051.05-.023.025-.023.024-.021.024-.02.025-.019.024-.018.024-.017.023-.015.024-.014.023-.013.023-.012.023-.01.023-.01.022-.008.022-.006.023-.006.021-.004.022-.004.021-.001.021-.001.021.001.021.001.021.004.021.004.022.006.021.006.023.008.022.01.022.01.023.012.023.013.023.014.023.015.024.017.023.018.024.019.024.02.025.021.024.023.024.023.025.051.05.056.05.06.05.065.051.07.052.074.051.079.052.083.052.088.052.092.052.096.052.101.052.106.052.11.052.114.052.118.051.123.051.126.051.131.05.136.05.139.049.143.048.148.048.152.048.155.046.16.046.163.045.168.043.172.043.175.042.179.041.183.04.187.038.191.038.194.036.198.034.202.033.205.032.21.031.212.028.216.027.22.026.224.023.226.022.231.021.233.018.237.016.241.014.244.012.247.011.25.008.254.005.257.004.26.001.26-.001.257-.004.254-.005.25-.008.247-.011.244-.012.241-.014.237-.016.233-.018.231-.021.226-.022.224-.023.22-.026.216-.027.212-.028.21-.031.205-.032.202-.033.198-.034.194-.036.191-.038.187-.038.183-.04.179-.041.175-.042.172-.043.168-.043.163-.045.16-.046.155-.046.152-.048.148-.048.143-.048.139-.049.136-.05.131-.05.126-.051.123-.051.118-.051.114-.052.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.051.07-.052.065-.051.06-.05.056-.05.051-.05.023-.025.023-.024.021-.024.02-.025.019-.024.018-.024.017-.023.015-.024.014-.023.013-.023.012-.023.01-.023.01-.022.008-.022.006-.023.006-.021.004-.022.004-.021.001-.021.001-.021-.001-.021-.001-.021-.004-.021-.004-.022-.006-.021-.006-.023-.008-.022-.01-.022-.01-.023-.012-.023-.013-.023-.014-.023-.015-.024-.017-.023-.018-.024-.019-.024-.02-.025-.021-.024-.023-.024-.023-.025-.051-.05-.056-.05-.06-.05-.065-.051-.07-.052-.074-.051-.079-.052-.083-.052-.088-.052-.092-.052-.096-.052-.101-.052-.106-.052-.11-.052-.114-.052-.118-.051-.123-.051-.126-.051-.131-.05-.136-.05-.139-.049-.143-.048-.148-.048-.152-.048-.155-.046-.16-.046-.163-.045-.168-.043-.172-.043-.175-.042-.179-.041-.183-.04-.187-.038-.191-.038-.194-.036-.198-.034-.202-.033-.205-.032-.21-.031-.212-.028-.216-.027-.22-.026-.224-.023-.226-.022-.231-.021-.233-.018-.237-.016-.241-.014-.244-.012-.247-.011-.25-.008-.254-.005-.257-.004-.26-.001-.26.001z\" transform=\"scale(.5)\"></path>\n</symbol>\n</defs>\n<defs>\n<symbol height=\"24\" id=\"clock\" width=\"24\">\n<path d=\"M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10-10-4.486-10-10 4.486-10 10-10zm0-2c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm5.848 12.459c.202.038.202.333.001.372-1.907.361-6.045 1.111-6.547 1.111-.719 0-1.301-.582-1.301-1.301 0-.512.77-5.447 1.125-7.445.034-.192.312-.181.343.014l.985 6.238 5.394 1.011z\" transform=\"scale(.5)\"></path>\n</symbol>\n</defs>\n<g>\n<line class=\"200\" id=\"actor12\" stroke=\"#999\" stroke-width=\"0.5px\" x1=\"75.5\" x2=\"75.5\" y1=\"5\" y2=\"357\"></line>\n<g id=\"root-12\">\n<rect class=\"actor\" fill=\"#eaeaea\" height=\"65\" rx=\"3\" ry=\"3\" stroke=\"#666\" width=\"151\" x=\"0\" y=\"0\"></rect>\n<text alignment-baseline=\"central\" class=\"actor\" dominant-baseline=\"central\" style=\"text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;\" x=\"75.5\" y=\"32.5\">\n<tspan dy=\"0\" x=\"75.5\">\n            ApplicationContext\n           </tspan>\n</text>\n</g>\n</g>\n<g>\n<line class=\"200\" id=\"actor13\" stroke=\"#999\" stroke-width=\"0.5px\" x1=\"402.5\" x2=\"402.5\" y1=\"5\" y2=\"357\"></line>\n<g id=\"root-13\">\n<rect class=\"actor\" fill=\"#eaeaea\" height=\"65\" rx=\"3\" ry=\"3\" stroke=\"#666\" width=\"197\" x=\"304\" y=\"0\"></rect>\n<text alignment-baseline=\"central\" class=\"actor\" dominant-baseline=\"central\" style=\"text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;\" x=\"402.5\" y=\"32.5\">\n<tspan dy=\"0\" x=\"402.5\">\n            BeanFactoryPostProcessor\n           </tspan>\n</text>\n</g>\n</g>\n<g>\n<line class=\"200\" id=\"actor14\" stroke=\"#999\" stroke-width=\"0.5px\" x1=\"626\" x2=\"626\" y1=\"5\" y2=\"357\"></line>\n<g id=\"root-14\">\n<rect class=\"actor\" fill=\"#eaeaea\" height=\"65\" rx=\"3\" ry=\"3\" stroke=\"#666\" width=\"150\" x=\"551\" y=\"0\"></rect>\n<text alignment-baseline=\"central\" class=\"actor\" dominant-baseline=\"central\" style=\"text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;\" x=\"626\" y=\"32.5\">\n<tspan dy=\"0\" x=\"626\">\n            BeanPostProcessor\n           </tspan>\n</text>\n</g>\n</g>\n<g>\n<line class=\"200\" id=\"actor15\" stroke=\"#999\" stroke-width=\"0.5px\" x1=\"826\" x2=\"826\" y1=\"5\" y2=\"357\"></line>\n<g id=\"root-15\">\n<rect class=\"actor\" fill=\"#eaeaea\" height=\"65\" rx=\"3\" ry=\"3\" stroke=\"#666\" width=\"150\" x=\"751\" y=\"0\"></rect>\n<text alignment-baseline=\"central\" class=\"actor\" dominant-baseline=\"central\" style=\"text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;\" x=\"826\" y=\"32.5\">\n<tspan dy=\"0\" x=\"826\">\n            Java配置类\n           </tspan>\n</text>\n</g>\n</g>\n<defs>\n<marker id=\"arrowhead\" markerheight=\"12\" markerunits=\"userSpaceOnUse\" markerwidth=\"12\" orient=\"auto\" refx=\"9\" refy=\"5\">\n<path d=\"M 0 0 L 10 5 L 0 10 z\"></path>\n</marker>\n</defs>\n<defs>\n<marker id=\"crosshead\" markerheight=\"8\" markerwidth=\"15\" orient=\"auto\" refx=\"16\" refy=\"4\">\n<path d=\"M 9,2 V 6 L16,4 Z\" fill=\"black\" stroke=\"#000000\" stroke-width=\"1px\" style=\"stroke-dasharray: 0, 0;\"></path>\n<path d=\"M 0,1 L 6,7 M 6,1 L 0,7\" fill=\"none\" stroke=\"#000000\" stroke-width=\"1px\" style=\"stroke-dasharray: 0, 0;\"></path>\n</marker>\n</defs>\n<defs>\n<marker id=\"filled-head\" markerheight=\"28\" markerwidth=\"20\" orient=\"auto\" refx=\"18\" refy=\"7\">\n<path d=\"M 18,7 L9,13 L14,7 L9,1 Z\"></path>\n</marker>\n</defs>\n<defs>\n<marker id=\"sequencenumber\" markerheight=\"40\" markerwidth=\"60\" orient=\"auto\" refx=\"15\" refy=\"15\">\n<circle cx=\"15\" cy=\"15\" r=\"6\"></circle>\n</marker>\n</defs>\n<text alignment-baseline=\"middle\" class=\"messageText\" dominant-baseline=\"middle\" dy=\"1em\" style='font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;' text-anchor=\"middle\" x=\"451\" y=\"80\">\n         3. 创建和初始化\n        </text>\n<line class=\"messageLine0\" marker-end=\"url(#arrowhead)\" stroke=\"none\" stroke-width=\"2\" style=\"fill: none;\" x1=\"75.5\" x2=\"826\" y1=\"113\" y2=\"113\"></line>\n<g>\n<rect class=\"activation0\" fill=\"#EDF2AE\" height=\"100\" rx=\"0\" ry=\"0\" stroke=\"#666\" width=\"10\" x=\"821\" y=\"113\"></rect>\n</g>\n<text alignment-baseline=\"middle\" class=\"messageText\" dominant-baseline=\"middle\" dy=\"1em\" style='font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;' text-anchor=\"middle\" x=\"448\" y=\"128\">\n         3.1 执行 Aware 及 InitializingBean\n        </text>\n<line class=\"messageLine0\" marker-end=\"url(#arrowhead)\" stroke=\"none\" stroke-width=\"2\" style=\"fill: none;\" x1=\"75.5\" x2=\"821\" y1=\"165\" y2=\"165\"></line>\n<text alignment-baseline=\"middle\" class=\"messageText\" dominant-baseline=\"middle\" dy=\"1em\" style='font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;' text-anchor=\"middle\" x=\"448\" y=\"180\">\n         3.2 创建成功\n        </text>\n<line class=\"messageLine1\" marker-end=\"url(#arrowhead)\" stroke=\"none\" stroke-width=\"2\" style=\"stroke-dasharray: 3, 3; fill: none;\" x1=\"821\" x2=\"75.5\" y1=\"213\" y2=\"213\"></line>\n<text alignment-baseline=\"middle\" class=\"messageText\" dominant-baseline=\"middle\" dy=\"1em\" style='font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;' text-anchor=\"middle\" x=\"239\" y=\"228\">\n         1. 执行 BeanFactoryPostProcessor\n        </text>\n<line class=\"messageLine0\" marker-end=\"url(#arrowhead)\" stroke=\"none\" stroke-width=\"2\" style=\"fill: none;\" x1=\"75.5\" x2=\"402.5\" y1=\"265\" y2=\"265\"></line>\n<text alignment-baseline=\"middle\" class=\"messageText\" dominant-baseline=\"middle\" dy=\"1em\" style='font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;' text-anchor=\"middle\" x=\"351\" y=\"280\">\n         2. 注册 BeanPostProcessor\n        </text>\n<line class=\"messageLine0\" marker-end=\"url(#arrowhead)\" stroke=\"none\" stroke-width=\"2\" style=\"fill: none;\" x1=\"75.5\" x2=\"626\" y1=\"317\" y2=\"317\"></line>\n<g>\n<rect class=\"actor\" fill=\"#eaeaea\" height=\"65\" rx=\"3\" ry=\"3\" stroke=\"#666\" width=\"151\" x=\"0\" y=\"337\"></rect>\n<text alignment-baseline=\"central\" class=\"actor\" dominant-baseline=\"central\" style=\"text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;\" x=\"75.5\" y=\"369.5\">\n<tspan dy=\"0\" x=\"75.5\">\n           ApplicationContext\n          </tspan>\n</text>\n</g>\n<g>\n<rect class=\"actor\" fill=\"#eaeaea\" height=\"65\" rx=\"3\" ry=\"3\" stroke=\"#666\" width=\"197\" x=\"304\" y=\"337\"></rect>\n<text alignment-baseline=\"central\" class=\"actor\" dominant-baseline=\"central\" style=\"text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;\" x=\"402.5\" y=\"369.5\">\n<tspan dy=\"0\" x=\"402.5\">\n           BeanFactoryPostProcessor\n          </tspan>\n</text>\n</g>\n<g>\n<rect class=\"actor\" fill=\"#eaeaea\" height=\"65\" rx=\"3\" ry=\"3\" stroke=\"#666\" width=\"150\" x=\"551\" y=\"337\"></rect>\n<text alignment-baseline=\"central\" class=\"actor\" dominant-baseline=\"central\" style=\"text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;\" x=\"626\" y=\"369.5\">\n<tspan dy=\"0\" x=\"626\">\n           BeanPostProcessor\n          </tspan>\n</text>\n</g>\n<g>\n<rect class=\"actor\" fill=\"#eaeaea\" height=\"65\" rx=\"3\" ry=\"3\" stroke=\"#666\" width=\"150\" x=\"751\" y=\"337\"></rect>\n<text alignment-baseline=\"central\" class=\"actor\" dominant-baseline=\"central\" style=\"text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;\" x=\"826\" y=\"369.5\">\n<tspan dy=\"0\" x=\"826\">\n           Java配置类\n          </tspan>\n</text>\n</g>\n</svg>\n</div> </li></ul> </li></ul> </li></ul>\n<p>总结：</p>\n<ul><li><code>Aware</code> 接口提供了一种【内置】 的注入手段，可以注入 <code>BeanFactory</code>，<code>ApplicationContext</code>；</li><li><code>InitializingBean</code> 接口提供了一种 【内置】 的初始化手段；</li><li>内置的注入和初始化不收扩展功能的影响，总会被执行，因此 <code>spring</code> 框架内部的类常用它们。</li></ul>\n<h2><a id=\"_Bean_1663\"></a>第七讲 Bean的初始化与销毁</h2>\n<h3><a id=\"spring_07_init_destroy_1665\"></a>spring_07_init_destroy</h3>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=28\">p28 027-第七讲-初始化与销毁</a></p>\n<p>定义<code>Bean1</code>类，实现<code>InitializingBean</code>接口和对应的接口方法<code>afterPropertiesSet()</code>，再定义<code>init1()</code>方法，在方法上加<code>@PostConstruct</code>注解，最后定义<code>init3()</code></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bean1</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InitializingBean</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@PostConstruct</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始化1，@PostConstruct\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始化2，InitializingBean接口\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始化3，@Bean的initMethod\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>定义<code>Bean2</code>类，实现<code>DisposableBean</code>接口和对应的接口方法<code>destroy()</code>，再定义<code>destroy1()</code>方法，在方法上加<code>@PreDestroy</code>注解，最后定义<code>init3()</code></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bean2</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">DisposableBean</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@PreDestroy</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"销毁1，@PreDestory\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"销毁2，DisposableBean接口\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"销毁3，@Bean的destroyMethod\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>定义<code>Config</code>类，类上加<code>@Configuration</code>注解，类中通过<code>@Bean</code>注解把<code>Bean1</code>和<code>Bean2</code>加到<code>Bean</code>工厂中，分别在<code>@Bean</code>注解中指定<code>initMethod = \"init3\"</code>,<code>destroyMethod = \"destroy\"</code></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Config</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>initMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"init3\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bean1</span> <span class=\"token function\">bean1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bean1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>destroyMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"destroy3\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bean2</span> <span class=\"token function\">bean2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bean2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>编写测试代码，观察三个初始化方法和三个销毁方法的执行顺序</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestInitAndDestroy</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testInitAndDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// ⬇️GenericApplicationContext 是一个【干净】的容器，这里只是为了看初始化步骤，就不用springboot启动类进行演示了</span>\n        <span class=\"token class-name\">GenericApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Config</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 解析@PostConstruct注解的bean后处理器</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CommonAnnotationBeanPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 解析@Configuration、@Component、@Bean注解的bean工厂后处理器</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationClassPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果：</p>\n<p><img alt=\"image-20220401013108042\" src=\"..\\..\\static\\image\\7d46418b34ac2ca4ea084958d00d25df.png\"/></p>\n<p>可以看到，spring提供了多种初始化和销毁手段</p>\n<ul><li> <p>对于<code>init</code>，三个初始化方法的执行顺序是</p> <p><code>@PostConstruct</code> -&gt; <code>InitializingBean</code>接口 -&gt; <code>@Bean</code>的<code>initMethod</code></p> </li><li> <p>对于<code>destory</code>, 三个销毁方法的执行顺序是</p> <p><code>@PreDestroy</code> -&gt; <code>DisposableBean</code>接口 -&gt; <code>@Bean</code>的<code>destroy</code></p> </li></ul>\n<h2><a id=\"_Scope_1763\"></a>第八讲 Scope类型、注意事项、销毁和失效分析</h2>\n<h3><a id=\"spring_08_scope_1765\"></a>spring_08_scope</h3>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=29\">p29 028-第八讲-Scope</a></p>\n<p><code>spring</code>的<code>scope</code>类型：</p>\n<ul><li><code>singleton</code>：单例</li><li><code>prototype</code>：多例</li><li><code>request</code>：<code>web</code>请求</li><li><code>session</code>：<code>web</code>的会话</li><li><code>application</code>：<code>web</code>的<code>ServletContext</code></li></ul>\n<p>测试<code>scope</code>类型中的<code>request</code>、<code>session</code>、<code>application</code></p>\n<p>定义**<code>BeanForRequest</code><strong>类，加上<code>@Component</code>和<code>@Scope</code>注解，指定<code>Scope</code>类型为</strong><code>request</code>**，在类型中定义<code>destroy()</code>方法，方法上加<code>@PreDestory</code>注解，代码如下：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"request\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BeanForRequest</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@PreDestroy</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"destroy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>定义**<code>BeanForSession</code><strong>类，加上<code>@Component</code>和<code>@Scope</code>注解，指定<code>Scope</code>类型为</strong><code>session</code>**，在类型中定义<code>destroy()</code>方法，方法上加<code>@PreDestory</code>注解，代码如下：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"request\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BeanForRequest</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@PreDestroy</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"destroy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>定义**<code>BeanForApplication</code><strong>类，加上<code>@Component</code>和<code>@Scope</code>注解，指定<code>Scope</code>类型为</strong><code>application</code>**，在类型中定义<code>destroy()</code>方法，方法上加<code>@PreDestory</code>注解，代码如下：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"request\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BeanForRequest</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@PreDestroy</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"destroy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>编写一个<code>MyController</code>类，加上<code>@RestController</code>注解，在该类中通过<code>@Autowired</code>注解注入<code>BeanForRequest</code>、<code>BeanForSession</code>和<code>BeanForApplication</code>的实例，需要注意，这里还需要加<code>@Lazy</code>注解（至于原因后面会解释），否则会导致<code>@Scope</code>域失效，再定义一个方法<code>tes()</code>，加上<code>@GetMapping</code>注解，用于响应一个<code>http</code>请求，在<code>test()</code>方法中，打印<code>beanForRequest</code>、<code>beanForSession</code>和<code>beanForApplication</code>，代码如下：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyController</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Lazy</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BeanForRequest</span> beanForRequest<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Lazy</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BeanForSession</span> beanForSession<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Lazy</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BeanForApplication</span> beanForApplication<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/test\"</span><span class=\"token punctuation\">,</span> produces <span class=\"token operator\">=</span> <span class=\"token string\">\"text/html\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpSession</span> session<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// ServletContext sc = request.getServletContext();</span>\n        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;ul&gt;\"</span> <span class=\"token operator\">+</span>\n                        <span class=\"token string\">\"&lt;li&gt;request scope: \"</span> <span class=\"token operator\">+</span>  beanForRequest <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/li&gt;\"</span> <span class=\"token operator\">+</span>\n                        <span class=\"token string\">\"&lt;li&gt;session scope: \"</span> <span class=\"token operator\">+</span>  beanForSession <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/li&gt;\"</span> <span class=\"token operator\">+</span>\n                        <span class=\"token string\">\"&lt;li&gt;application scope: \"</span> <span class=\"token operator\">+</span>  beanForApplication <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/li&gt;\"</span> <span class=\"token operator\">+</span>\n                        <span class=\"token string\">\"&lt;/ul&gt;\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>springboot</code>启动类</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ScopeApplicationContext</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">testRequest_Session_Application_Scope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 演示 request, session, application作用域</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testRequest_Session_Application_Scope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">ConfigurableApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ScopeApplicationContext</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>启动后，用谷歌浏览器访问 <a href=\"http://localhost:8080/test\">http://localhost:8080/test</a>，</p>\n<p>浏览器运行结果如下：</p>\n<p><img alt=\"image-20220401222141258\" src=\"..\\..\\static\\image\\1a246eec136f26264d3f12bdfe195c70.png\"/></p>\n<p>再刷新一下当前页，查看运行结果：</p>\n<p><img alt=\"image-20220401222154488\" src=\"..\\..\\static\\image\\fd755a56a04a84cee1a258c064cbb6d9.png\"/></p>\n<p>控制台运行结果如下：</p>\n<p><img alt=\"image-20220401214139467\" src=\"..\\..\\static\\image\\39d40f55ee48893d5b1d3f7ff09cb1d5.png\"/></p>\n<p>可以看到两次刷新只有<code>BeanForRequest</code>对象发生了改变，这是由于<code>scope</code>为<code>request</code>类型的对象，会在请求结束后销毁，再来一次请求就会重新创建，请求结束后又会销毁。</p>\n<p>接下来我们换个<code>Edge</code>浏览器访问 <a href=\"http://localhost:8080/test\">http://localhost:8080/test</a>，对比两个浏览器的显示结果：</p>\n<p><img alt=\"image-20220401222256653\" src=\"..\\..\\static\\image\\662072423b48d78fcfd1fb10437f07ab.png\"/></p>\n<p>可以看到这回除了<code>BeanForRequest</code>对象不同，<code>BeanForSession</code>对象也不同了，这是因为开一个新的浏览器会创建一个新的会话，所以<code>BeanForSession</code>对象也不同了。</p>\n<p>继续进行测试，在<code>application.properties</code>配置一个属性<code>server.servlet.session.timeout=10s</code>，这个属性的默认值为<code>30</code>分钟，这样<code>10s</code>没有操作浏览器的话就会销毁对应<code>session</code>，不过经过测试这个这个属性最少为<code>1</code>分钟，低于1分钟一律按照1分钟算。具体原理看这篇博客：<a href=\"https://www.jianshu.com/p/9d91cca74082\">https://www.jianshu.com/p/9d91cca74082</a>，里面进行了源码级别的分析。</p>\n<p>设置好之后，重启项目， 然后去浏览器访问，1分钟后控制台会打印<code>session</code>被销毁，如下图所示：</p>\n<p><img alt=\"image-20220402144856449\" src=\"..\\..\\static\\image\\58f68db08ca5d5a4580cf84058c41982.png\"/></p>\n<p>那什么时候<code>scope</code>为<code>application</code>的对象<code>BeanForApplication</code>会销毁呢？按理说应该是在<code>SpringBoot</code>程序结束，也即内置的<code>Tomcat</code>服务器停止的时候调用，但是经过测试：无论是在控制台停止<code>SpringBoot</code>项目，还是调用<code>ApplicationContext</code>的<code>close()</code>方法，都没有调用<code>BeanForApplication</code>的销毁方法，有知道什么方法可以让它调用的，请评论区告知，谢谢！！！</p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=30\">p30 029-第八讲-Scope失效解决1,2</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=31\">p31 030-第八讲-Scope失效解决3,4</a></p>\n<p>定义1个单例类<code>SingletonBean</code>，指定它的<code>Scope</code>为<code>singleton</code>，定义<code>5</code>个多例类，<code>PrototypeBean</code>、<code>PrototypeBean1</code>、<code>PrototypeBean2</code>、<code>PrototypeBean3</code>、<code>PrototypeBean4</code>，将这<code>5</code>个多例类的对象注入到<code>SingletonBean</code>的<code>5</code>个属性中，其中<code>PrototypeBean</code>用来演示多例对象注入到单例对象中<code>Scope</code>失效的情况，其他四个类的对象用来演示四种解决<code>Scope</code>失效的方法。相关类的定义如下：</p>\n<p><code>SingletonBean</code></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"singleton\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonBean</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PrototypeBean</span> prototypeBean<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Lazy</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PrototypeBean1</span> prototypeBean1<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PrototypeBean2</span> prototypeBean2<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ObjectFactory</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PrototypeBean3</span><span class=\"token punctuation\">&gt;</span></span> factory<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ApplicationContext</span> context<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PrototypeBean</span> <span class=\"token function\">getPrototypeBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> prototypeBean<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PrototypeBean1</span> <span class=\"token function\">getPrototypeBean1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> prototypeBean1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PrototypeBean2</span> <span class=\"token function\">getPrototypeBean2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> prototypeBean2<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PrototypeBean3</span> <span class=\"token function\">getPrototypeBean3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PrototypeBean4</span> <span class=\"token function\">getPrototypeBean4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PrototypeBean4</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>PrototypeBean</code></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prototype\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrototypeBean</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>PrototypeBean1</code></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prototype\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrototypeBean1</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>PrototypeBean2</code></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"prototype\"</span><span class=\"token punctuation\">,</span> proxyMode <span class=\"token operator\">=</span> <span class=\"token class-name\">ScopedProxyMode</span><span class=\"token punctuation\">.</span>TARGET_CLASS<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrototypeBean2</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>PrototypeBean3</code></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prototype\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrototypeBean3</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>PrototypeBean4</code></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prototype\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrototypeBean4</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>测试代码：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ScopeApplicationContext</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">testSingletonPrototypeInvalidAndSolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 演示单例中注入多例失效的情况，以及解决失效问题的方法</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSingletonPrototypeInvalidAndSolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">ConfigurableApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ScopeApplicationContext</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">SingletonBean</span> singletonBean <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SingletonBean</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 单例中注入多例失效的情况</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> singletonBean<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> singletonBean<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> singletonBean<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> singletonBean<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 解决方法1：在SingletonBean的PrototypeBean1属性上加@Lazy注解</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> singletonBean<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeBean1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> singletonBean<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeBean1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> singletonBean<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeBean1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> singletonBean<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeBean1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 解决方法2：在PrototypeBean2的类上的@Scope注解多配置一个属性，如，@Scope(value = \"prototype\", proxyMode = ScopedProxyMode.TARGET_CLASS)</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> singletonBean<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeBean2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> singletonBean<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeBean2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> singletonBean<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeBean2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> singletonBean<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeBean2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 解决方法3：使用ObjectFactory&lt;PrototypeBean3&gt;工厂类，在每次调用getProtypeBean3()方法中返回factory.getObject()</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> singletonBean<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeBean3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> singletonBean<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeBean3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> singletonBean<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeBean3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> singletonBean<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeBean3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 解决方法4：在SingletonBean中注入一个ApplicationContext，使用context.getBean(PrototypeBean4.class)获取对应的多例</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> singletonBean<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeBean4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> singletonBean<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeBean4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> singletonBean<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeBean4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> singletonBean<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeBean4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果如下：</p>\n<p><img alt=\"image-20220406141812580\" src=\"..\\..\\static\\image\\c22cb91c8f9821d107ee3c60b694d336.png\"/></p>\n<h2><a id=\"_aopajc_2049\"></a>第九讲 aop之ajc增强</h2>\n<p><code>aop</code>是<code>spring</code>框架中非常重要的功能，其主要实现通常情况下是动态代理，但是这个说法并不全面，还有另外两种实现：</p>\n<ul><li><code>ajc</code>编译器</li><li><code>agent</code>类加载</li></ul>\n<h3><a id=\"spring_09_aop_ajc_2056\"></a>spring_09_aop_ajc</h3>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=32\">p32 031-第九讲-aop之ajc增强</a></p>\n<p>先看<code>aop</code>的第一种实现<code>ajc</code>编译器代码增强，这是一种编译时的代码增强。</p>\n<p>新建一个普通的maven项目</p>\n<ul><li> <p>添加依赖</p> <p>使用<code>ajc</code>编译器进行代码增强，首先需要在<code>pom.xml</code>文件中加入<code>ajc</code>编译器插件依赖</p> <pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.codehaus.mojo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>aspectj-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.11<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>complianceLevel</span><span class=\"token punctuation\">&gt;</span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>complianceLevel</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span><span class=\"token punctuation\">&gt;</span></span>8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>source</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>target</span><span class=\"token punctuation\">&gt;</span></span>8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>target</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>showWeaveInfo</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>showWeaveInfo</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>verbose</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>verbose</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Xlint</span><span class=\"token punctuation\">&gt;</span></span>ignore<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Xlint</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>encoding</span><span class=\"token punctuation\">&gt;</span></span>UTF-8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>encoding</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>executions</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>execution</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>goals</span><span class=\"token punctuation\">&gt;</span></span>\n                        <span class=\"token comment\">&lt;!-- use this goal to weave all your main classes --&gt;</span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>goal</span><span class=\"token punctuation\">&gt;</span></span>compile<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>goal</span><span class=\"token punctuation\">&gt;</span></span>\n                        <span class=\"token comment\">&lt;!-- use this goal to weave all your test classes --&gt;</span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>goal</span><span class=\"token punctuation\">&gt;</span></span>test-compile<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>goal</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>goals</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>execution</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>executions</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>加入<code>aspectjweaver</code>的依赖</p> <pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.aspectj<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>aspectjweaver<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.9.7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>加入日志和单元测试的依赖</p> <pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.slf4j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>slf4j-api<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.7.36<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>ch.qos.logback<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>logback-classic<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.2.10<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>4.13.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> </li><li> <p>需要增强的类<code>MyService</code></p> <pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyService</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> log <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyAspect</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>切面类<code>MyAspect</code>，编写<code>execution</code>表达式，对<code>MyService</code>类的<code>foo()</code>方法进行增强</p> <pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Aspect</span> <span class=\"token comment\">// ⬅️注意此切面并未被 Spring 管理，本项目pom文件中根本没有引入spring的相关类</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAspect</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> log <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyAspect</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* top.jacktgq.service.MyService.foo())\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>测试代码</p> <pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Aop_Aspectj_Test</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testAopAjc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>编译项目，这里需要使用<code>maven</code>来编译，打开<code>idea</code>中的<code>maven</code>面板，点击<code>compile</code></p> <p><img alt=\"image-20220410183011468\" src=\"..\\..\\static\\image\\0b1fd66869ad04a65b58231325d25398.png\"/></p> <p>然后再运行测试代码，可以看到创建<code>MyService</code>对象并调用<code>foo()</code>方法会先执行切面类中的<code>before()</code>方法</p> <p><img alt=\"image-20220410183108780\" src=\"..\\..\\static\\image\\2329bf2084320a292c77095930e3f9eb.png\"/></p> <p>注：</p>\n<ul><li> <p>有些小伙伴可能会遇到问题：明明按照一样的步骤来操作，可是运行以后代码并没有增强。<font color=\"red\">这是由于<code>idea</code>中在执行代码之前会默认编译一遍代码，这本来是正常的，可是，如果使用<code>maven</code>来编译代码，会在执行代码前将<code>maven</code>编译的代码覆盖，这就会导致<code>maven</code>的<code>ajc</code>编译器增强的代码被覆盖，所以会看不到最终的运行效果。</font></p> </li><li> <p>解决办法：在设置中将自动构建项目的选项勾上，就不会出现多次编译覆盖的问题了。</p> <p><img alt=\"image-20220410183955137\" src=\"..\\..\\static\\image\\e9c1cd28dc2755d419c927c371d646c1.png\"/></p> </li></ul> </li></ul>\n<p>总结：</p>\n<ul><li> <p>可以看到没有引入任何跟<code>spring</code>框架相关的包，<code>MyService</code>类是通过直接<code>new()</code>的方式获得的，所以也就不存在使用了动态代理的说法了</p> </li><li> <p>打开编译后的<code>MyService.class</code>文件，双击以后idea会反编译该字节码文件，可以看到<code>foo()</code>方法体的开头加了一行代码，这就是增强的代码，这是<code>ajc</code>编译器在编译<code>MyService</code>类的时候为我们添加的代码，这是一种编译时的增强。</p> <p><img alt=\"image-20220410184651224\" src=\"..\\..\\static\\image\\352d4a10c48e6874f6b5fa890a8289b7.png\"/></p> </li></ul>\n<h2><a id=\"_aopagent_2188\"></a>第十讲 aop之agent增强</h2>\n<h3><a id=\"spring_10_aop_agent_2190\"></a>spring_10_aop_agent</h3>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=33\">p33 032-第十讲-aop之agent增强</a></p>\n<p>现在来看<code>aop</code>的另外一种实现<code>agent</code>增强，这是一种类加载时的代码增强。</p>\n<ul><li> <p>新建一个普通的maven项目</p>\n<ul><li> <p>加入<code>aspectjweaver</code>的依赖</p> <pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.aspectj<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>aspectjweaver<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.9.7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>加入日志和单元测试的依赖</p> <pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.slf4j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>slf4j-api<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.7.36<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>ch.qos.logback<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>logback-classic<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.2.10<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>4.13.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.18.22<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> </li><li> <p>需要增强的类<code>MyService</code></p> <pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyService</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>切面类<code>MyAspect</code>，编写<code>execution</code>表达式，对<code>MyService</code>类的<code>foo()</code>方法进行增强</p> <pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Aspect</span> <span class=\"token comment\">// ⬅️注意此切面并未被 Spring 管理，本项目pom文件中根本没有引入spring的相关类</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAspect</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* top.jacktgq.service.MyService.*())\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>测试代码</p> <pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Aop_agent_Test</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testAopAgent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">MyService</span> myService <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myService<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>运行时需要在 VM options 里加入 <code>-javaagent:D:\\同步空间\\repository\\org\\aspectj\\aspectjweaver\\1.9.7\\aspectjweaver-1.9.7.jar</code>把其中 <code>D:\\同步空间\\repository</code> 改为你自己 <code>maven</code> 仓库起始地址</p> <p><img alt=\"image-20220410210057854\" src=\"..\\..\\static\\image\\4eebbd3f1ccb0d3f9c9695ce2422efb8.png\"/></p> <p>注：还需要在<code>resources/META-INF</code>目录下建一个<code>aop.xml</code>配置文件，内容如下，<code>aspectj</code>会自动扫描到这个配置文件，不加这个配置文件不会出效果。</p> <p><img alt=\"image-20220410210354881\" src=\"..\\..\\static\\image\\00e05d6f48ff6808b98d897dd8484bc2.png\"/></p> <pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>aspectj</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>aspects</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>aspect</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.jacktgq.aop.MyAspect<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>weaver</span> <span class=\"token attr-name\">options</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-verbose -showWeaveInfo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>include</span> <span class=\"token attr-name\">within</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.jacktgq.service.MyService<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>include</span> <span class=\"token attr-name\">within</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.jacktgq.aop.MyAspect<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>weaver</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>aspects</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>aspectj</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>运行测试代码，可以看到创建<code>MyService</code>对象并调用<code>foo()</code>方法会先执行切面类中的<code>before()</code>方法</p> <p><img alt=\"image-20220410210458098\" src=\"..\\..\\static\\image\\9a12f63a4be69b87b3eb140b737ff69f.png\"/></p> <p>注：</p>\n<ul><li> <p>有些小伙伴可能会遇到问题：明明按照一样的步骤来操作，可是运行以后代码并没有增强。<font color=\"red\">这是由于<code>idea</code>中在执行代码之前会默认编译一遍代码，这本来是正常的，可是，如果使用<code>maven</code>来编译代码，会在执行代码前将<code>maven</code>编译的代码覆盖，这就会导致<code>maven</code>的<code>ajc</code>编译器增强的代码被覆盖，所以会看不到最终的运行效果。</font></p> </li><li> <p>解决办法：在设置中将自动构建项目的选项勾上，就不会出现多次编译覆盖的问题了。</p> <p><img alt=\"image-20220410183955137\" src=\"..\\..\\static\\image\\e9c1cd28dc2755d419c927c371d646c1.png\"/></p> </li></ul> </li></ul> <p>总结：</p>\n<ul><li> <p>可以看到没有引入任何跟<code>spring</code>框架相关的包，<code>MyService</code>类是通过直接<code>new()</code>的方式获得的，所以也就不存在使用了动态代理的说法了</p> </li><li> <p>打开编译后的<code>MyService.class</code>文件，双击以后idea会反编译该字节码文件，可以看到<code>foo()</code>方法体中并没有添加多余的代码，所以就不是编译时增强了，而是类加载的时候增强的，这里可以借助阿里巴巴的Arthas工具，下载地址：<a href=\"https://arthas.aliyun.com/doc/en/download.html\">https://arthas.aliyun.com/doc/en/download.html</a>，解压以后进入到arthas的bin目录下，启动黑窗口，输入<code>java -jar .\\arthas-boot.jar</code>，在输出的<code>java</code>进程列表里面找到我们要连接的进程，输入对应进程的序号，我这里是<code>4</code>，连接上以后会打印<code>ARTHAS</code>的<code>logo</code></p> <p><img alt=\"image-20220410235629087\" src=\"..\\..\\static\\image\\e4fc90b5b235745e3de5697c158e1fb4.png\"/></p> <p>再输入<code>jad top.jacktgq.service.MyService</code>反编译内存中的<code>MyService</code>类</p> <p><img alt=\"image-20220410235616607\" src=\"..\\..\\static\\image\\7c6488de5848fa89ecfdfcfe51da3a10.png\"/></p> <p>可以看到<code>foo()</code>和<code>bar()</code>方法体的第一行都加了一行代码，这就说明通过添加虚拟机参数<code>-javaagent</code>的方式可以在类加载的时候对代码进行增强。</p> </li></ul> </li></ul>\n<h2><a id=\"_aopproxyjdkcglib_2321\"></a>第十一讲 aop之proxy增强-jdk和cglib</h2>\n<h3><a id=\"spring_11_aop_proxy_jdk_cglib_2323\"></a>spring_11_aop_proxy_jdk_cglib</h3>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=34\">p34 033-第十一讲-aop之proxy增强-jdk</a></p>\n<p>测试代码</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AopJdkProxyTest</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testJdkProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// jdk的动态代理，只能针对接口代理</span>\n        <span class=\"token comment\">// 目标对象</span>\n        <span class=\"token class-name\">Target</span> target <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 用来加载在运行期间动态生成的字节码</span>\n        <span class=\"token class-name\">ClassLoader</span> loader <span class=\"token operator\">=</span> <span class=\"token class-name\">AopJdkProxyTest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Foo</span> fooProxy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Foo</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">.</span><span class=\"token function\">newProxyInstance</span><span class=\"token punctuation\">(</span>loader<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 让代理也返回目标方法执行的结果</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        fooProxy<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Target</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"target foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果</p>\n<p><img alt=\"image-20220411083443041\" src=\"..\\..\\static\\image\\1a7996cdb1b5972984eb5763bed47dde.png\"/></p>\n<p><code>jdk</code>动态代理总结：</p>\n<ol><li>代理对象和目标对象是兄弟关系，都实现了<code>Foo</code>接口，代理对象类型不能强转成目标对象类型；</li><li>目标类定义的时候可以加<code>final</code>修饰。</li></ol>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=35\">p35 034-第十一讲-aop之proxy增强-cglib</a></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AopCglibProxyTest</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testCglibProxy1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 目标对象</span>\n        <span class=\"token class-name\">Target</span> target <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Foo</span> fooProxy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Foo</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Enhancer</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Target</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodInterceptor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> proxy<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用方法反射调用目标</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>fooProxy<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        fooProxy<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testCglibProxy2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 目标对象</span>\n        <span class=\"token class-name\">Target</span> target <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Foo</span> fooProxy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Foo</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Enhancer</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Target</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodInterceptor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> proxy<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// proxy 它可以避免反射调用</span>\n            <span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> proxy<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 需要传目标类</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>fooProxy<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        fooProxy<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testCglibProxy3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 目标对象</span>\n        <span class=\"token class-name\">Foo</span> fooProxy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Foo</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Enhancer</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Target</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodInterceptor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> proxy<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// proxy 它可以避免反射调用</span>\n            <span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> proxy<span class=\"token punctuation\">.</span><span class=\"token function\">invokeSuper</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不需要目标类，需要代理自己</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>fooProxy<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        fooProxy<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Target</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"target foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行结果</p>\n<p><img alt=\"image-20220411085629883\" src=\"..\\..\\static\\image\\b312efb6f9a81625e24c23c00c2afec2.png\"/></p>\n<p><code>cglib</code>动态代理总结：</p>\n<ol><li> <p><code>MethodInterceptor</code>的<code>intercept()</code>方法的第2个参数是<code>method</code>，可以通过反射对目标方法进行调用</p> <pre><code class=\"prism language-java\"><span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用方法反射调用目标</span>\n</code></pre> </li><li> <p>第4个参数<code>proxy</code>，可以不用反射就能对目标方法进行调用；</p> <pre><code class=\"prism language-java\"><span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> proxy<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 需要传目标类 （spring用的是这种）</span>\n<span class=\"token comment\">// 或者</span>\n<span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> proxy<span class=\"token punctuation\">.</span><span class=\"token function\">invokeSuper</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不需要目标类，需要代理自己</span>\n</code></pre> </li><li> <p>代理类不需要实现接口；</p> </li><li> <p>代理对象和目标对象是父子关系，代理类继承于目标类；</p> </li><li> <p>目标类定义的时候不能加<code>final</code>修饰，否则代理类就无法继承目标类了，会报<code>java.lang.IllegalArgumentException: Cannot subclass final class top.jacktgq.proxy.cglib.Target</code>异常；</p> </li><li> <p>目标类方法定义的时候不能加<code>final</code>修饰，否则代理类继承目标类以后就不能重写目标类的方法了。</p> </li></ol>\n<h2><a id=\"_jdk_2462\"></a>第十二讲 jdk代理原理</h2>\n<h3><a id=\"spring_12_aop_proxy_jdk_cglib_principle_2464\"></a>spring_12_aop_proxy_jdk_cglib_principle</h3>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=36\">p36 035-第十二讲-jdk代理原理</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=37\">p37 036-第十二讲-jdk代理原理</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=38\">p38 037-第十二讲-jdk代理源码</a></p>\n<p>为了更好地探究<code>jdk</code>动态代理原理，先用代码显式地模拟一下这个过程。</p>\n<p>先定义一个<code>Foo</code>接口，里面有一个<code>foo()</code>方法，再定义一个<code>Target</code>类来实现这个接口，代码如下所示：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Target</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"target foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> $<span class=\"token class-name\">Proxy0</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 1. 功能增强</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 2. 调用目标</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Foo</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> $<span class=\"token class-name\">Proxy0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        proxy<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>接下来对<code>Target</code>类中的<code>foo()</code>方法进行增强</p>\n<ol><li> <p>首先想到的是，再定义一个类也同样地实现一下<code>Foo</code>接口，然后在<code>foo()</code>方法中编写增强代码，接着再<code>new</code>一个<code>Target</code>对象，调用它的<code>foo()</code>方法，代码如下所示：</p> <pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> $<span class=\"token class-name\">Proxy0</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 1. 功能增强</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 2. 调用目标</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 测试运行</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Foo</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> $<span class=\"token class-name\">Proxy0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        proxy<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>上面的代码把功能增强的代码和调用目标的代码都固定在了代理类的内部，不太灵活。因此可以通过定义一个<code>InvocationHandler</code>接口的方式来将这部分代码解耦出来，代码如下：</p> <pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">InvocationHandler</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Target</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"target foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> $<span class=\"token class-name\">Proxy0</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">InvocationHandler</span> h<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> $<span class=\"token class-name\">Proxy0</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InvocationHandler</span> h<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>h <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        h<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Foo</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> $<span class=\"token class-name\">Proxy0</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InvocationHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">// 1. 功能增强</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 2. 调用目标</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        proxy<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>第2个版本的代码虽然将功能增强的代码和调用目标的代码通过接口的方式独立出来了，但还是有问题，如果此时接口中新增了一个方法<code>bar()</code>，<code>Target</code>类和<code>$Proxy0</code>类中都要实现<code>bar()</code>方法，那么调用<code>proxy</code>的<code>foo()</code>和<code>bar()</code>方法都将间接调用目标对象的<code>foo()</code>方法，因为在<code>InvocationHandler</code>的<code>invoke()</code>方法中调用的是<code>target.foo()</code>方法，代码如下：</p> <pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">InvocationHandler</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Target</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"target foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"target bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> $<span class=\"token class-name\">Proxy0</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">InvocationHandler</span> h<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> $<span class=\"token class-name\">Proxy0</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InvocationHandler</span> h<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>h <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        h<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        h<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Foo</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> $<span class=\"token class-name\">Proxy0</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InvocationHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">// 1. 功能增强</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 2. 调用目标</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        proxy<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        proxy<span class=\"token punctuation\">.</span><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>改进方法是，代理类中调用方法的时候，通过反射把接口中对应的方法<code>Method</code>对象作为参数传给<code>InvocationHandler</code>，代码如下：</p> <pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">InvocationHandler</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Target</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"target foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"target bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> $<span class=\"token class-name\">Proxy0</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">InvocationHandler</span> h<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> $<span class=\"token class-name\">Proxy0</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InvocationHandler</span> h<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>h <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Method</span> foo <span class=\"token operator\">=</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            h<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Method</span> bar <span class=\"token operator\">=</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            h<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Foo</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> $<span class=\"token class-name\">Proxy0</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InvocationHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">// 1. 功能增强</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 2. 调用目标</span>\n                method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        proxy<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        proxy<span class=\"token punctuation\">.</span><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>第3个版本的代码其实已经离jdk动态代理生成的代码很相近了，为了更好地学习底层，更近一步，修改<code>Foo</code>接口的中<code>bar()</code>方法，使其具有<code>int</code>类型的返回值，因此<code>InvocationHandler</code>的<code>invoke()</code>方法也得有返回值，同时将代理对象本身作为第一个参数，具体代码如下：</p> <pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">InvocationHandler</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Object</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> proxy<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Target</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"target foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"target bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> $<span class=\"token class-name\">Proxy0</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">Method</span> foo<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">Method</span> bar<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            foo <span class=\"token operator\">=</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            bar <span class=\"token operator\">=</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NoSuchMethodException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NoSuchMethodError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">InvocationHandler</span> h<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> $<span class=\"token class-name\">Proxy0</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InvocationHandler</span> h<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>h <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n\n            h<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> foo<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RuntimeException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">Error</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UndeclaredThrowableException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> h<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RuntimeException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">Error</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UndeclaredThrowableException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Foo</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> $<span class=\"token class-name\">Proxy0</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InvocationHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> proxy<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">// 1. 功能增强</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 2. 调用目标</span>\n                <span class=\"token keyword\">return</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        proxy<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar()方法返回值：\"</span> <span class=\"token operator\">+</span> proxy<span class=\"token punctuation\">.</span><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>到这里跟jdk的动态代理只有些微差距了，<code>jdk</code>的动态代码会让代理类再继承一个<code>Proxy</code>类，里面定义了一个<code>InvocationHandler</code>接口的对象，代理类中会通过<code>super(h)</code>调用父类Proxy的构造，这里建议结合视频教程理解。</p> </li></ol>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=39\">p39 038-第十二讲-jdk代理字节码生成</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=40\">p40 039-第十二讲-jdk反射优化</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=41\">p41 040-第十三讲-cglib代理原理</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=42\">p42 041-第十三讲-cglib代理原理-MethodProxy</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=43\">p43 042-第十四讲-MethodProxy原理</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=44\">p44 043-第十四讲-MethodProxy原理</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=45\">p45 044-第十五讲-Spring选择代理</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=46\">p46 045-第十五讲-Spring选择代理</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=47\">p47 046-第十五讲-Spring选择代理</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=48\">p48 047-第十六讲-切点匹配</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=49\">p49 048-第十六讲-切点匹配</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=50\">p50 049-第十七讲-Advisor与@Aspect</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=51\">p51 050-第十七讲-findEligibleAdvisors</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=52\">p52 051-第十七讲-wrapIfNecessary</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=53\">p53 052-第十七讲-代理创建时机</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=54\">p54 053-第十七讲-吐槽@Order</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=55\">p55 054-第十七讲-高级切面转低级切面</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=56\">p56 055-第十八讲-统一转换为环绕通知</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=57\">p57 056-第十八讲-统一转换为环绕通知</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=58\">p58 057-第十八讲-适配器模式</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=59\">p59 058-第十八讲-调用链执行</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=60\">p60 059-第十八讲-模拟实现调用链</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=61\">p61 060-第十八讲-模拟实现调用链-责任链模式</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=62\">p62 061-第十九讲-动态通知调用</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=63\">p63 062-第十九讲-动态通知调用</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=64\">p64 063-第廿讲-DispatcherServlet初始化时机</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=65\">p65 064-第廿讲-DispatcherServlet初始化时机</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=66\">p66 065-第廿讲-DispatcherServlet初始化执行的操作</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=67\">p67 066-第廿讲-RequestMappingHandlerMapping</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=68\">p68 067-第廿讲-RequestMappingHandlerAdapter</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=69\">p69 068-第廿讲-RequestMappingHandlerAdapter-参数和返回值解析器</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=70\">p70 069-第廿讲-RequestMappingHandlerAdapter-自定义参数解析器</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=71\">p71 070-第廿讲-RequestMappingHandlerAdapter-自定义返回值解析器</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=72\">p72 071-第廿一讲-参数解析器-准备</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=73\">p73 072-第廿一讲-参数解析器-准备</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=74\">p74 073-第廿一讲-参数解析器-@RequestParam 0-4</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=75\">p75 074-第廿一讲-参数解析器-组合模式</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=76\">p76 075-第廿一讲-参数解析器 5-9</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=77\">p77 076-第廿一讲-参数解析器 10-12</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=78\">p78 077-第廿二讲-获取参数名</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=79\">p79 078-第廿二讲-获取参数名</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=80\">p80 079-第廿三讲-两套底层转换接口</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=81\">p81 080-第廿三讲-一套高层转换接口</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=82\">p82 081-第廿三讲-类型转换与数据绑定演示</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=83\">p83 082-第廿三讲-web环境下数据绑定演示</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=84\">p84 083-第廿三讲-绑定器工厂</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=85\">p85 084-第廿三讲-绑定器工厂-@InitBinder扩展</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=86\">p86 085-第廿三讲-绑定器工厂-ConversionService扩展</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=87\">p87 086-第廿三讲-绑定器工厂-默认ConversionService</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=88\">p88 087-第廿三讲-加餐-如何获取泛型参数</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=89\">p89 088-第廿四讲-@ControllerAdvice-@InitBinder</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=90\">p90 089-第廿四讲-@ControllerAdvice-@InitBinder</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=91\">p91 090-第廿五讲-控制器方法执行流程</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=92\">p92 091-第廿五讲-控制器方法执行流程</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=93\">p93 092-第廿五讲-控制器方法执行流程-代码</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=94\">p94 093-第廿六讲-@ControllerAdvice-@ModelAttribute</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=95\">p95 094-第廿七讲-返回值处理器</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=96\">p96 095-第廿七讲-返回值处理器-1</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=97\">p97 096-第廿七讲-返回值处理器-2-4</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=98\">p98 097-第廿七讲-返回值处理器-5-7</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=99\">p99 098-第廿八讲-MessageConverter</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=100\">p100 099-第廿八讲-MessageConverter</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=101\">p101 100-第廿九讲-@ControllerAdvice-ResponseBodyAdvice</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=102\">p102 101-第廿九讲-@ControllerAdvice-ResponseBodyAdvice</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=103\">p103 102-第卅讲-异常处理</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=104\">p104 103-第卅讲-异常处理</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=105\">p105 104-第卅一讲-@ControllerAdvice-@ExceptionHandler</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=106\">p106 105-第卅二讲-tomcat异常处理</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=107\">p107 106-第卅二讲-tomcat异常处理-自定义错误地址</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=108\">p108 107-第卅二讲-tomcat异常处理-BasicErrorController</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=109\">p109 108-第卅二讲-tomcat异常处理-BasicErrorController</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=110\">p110 109-第卅三讲-HandlerMapping与HandlerAdapter-1</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=111\">p111 110-第卅三讲-HandlerMapping与HandlerAdapter-自定义</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=112\">p112 111-第卅四讲-HandlerMapping与HandlerAdapter-2</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=113\">p113 112-第卅五讲-HandlerMapping与HandlerAdapter-3</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=114\">p114 113-第卅五讲-HandlerMapping与HandlerAdapter-3-优化</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=115\">p115 114-第卅五讲-HandlerMapping与HandlerAdapter-3-优化</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=116\">p116 115-第卅五讲-HandlerMapping与HandlerAdapter-4-欢迎页</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=117\">p117 116-第卅五讲-HandlerMapping与HandlerAdapter-总结</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=118\">p118 117-第卅六讲-MVC执行流程</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=119\">p119 118-第卅六讲-MVC执行流程</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=120\">p120 119-第卅七讲-构建boot骨架项目</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=121\">p121 120-第卅八讲-构建boot war项目</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=122\">p122 121-第卅八讲-构建boot war项目-用外置tomcat测试</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=123\">p123 122-第卅八讲-构建boot war项目-用内嵌tomcat测试</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=124\">p124 123-第卅九讲-boot执行流程-构造</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=125\">p125 124-第卅九讲-boot执行流程-构造-1</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=126\">p126 125-第卅九讲-boot执行流程-构造-2</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=127\">p127 126-第卅九讲-boot执行流程-构造-3</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=128\">p128 127-第卅九讲-boot执行流程-构造-4-5</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=129\">p129 128-第卅九讲-boot执行流程-run-1</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=130\">p130 129-第卅九讲-boot执行流程-run-1</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=131\">p131 130-第卅九讲-boot执行流程-run-8-11</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=132\">p132 131-第卅九讲-boot执行流程-run-2,12</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=133\">p133 132-第卅九讲-boot执行流程-run-3</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=134\">p134 133-第卅九讲-boot执行流程-run-4</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=135\">p135 134-第卅九讲-boot执行流程-run-5</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=136\">p136 135-第卅九讲-boot执行流程-run-5</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=137\">p137 136-第卅九讲-boot执行流程-run-6</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=138\">p138 137-第卅九讲-boot执行流程-run-7</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=139\">p139 138-第卅九讲-boot执行流程-小结</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=140\">p140 139-第卌讲-Tomcat重要组件</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=141\">p141 140-第卌讲-内嵌Tomcat</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=142\">p142 141-第卌讲-内嵌Tomcat与Spring整合</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=143\">p143 142-第卌一讲-自动配置类原理</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=144\">p144 143-第卌一讲-自动配置类原理</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=145\">p145 144-第卌一讲-AopAutoConfiguration</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=146\">p146 145-第卌一讲-AopAutoConfiguration</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=147\">p147 146-第卌一讲-自动配置类2-4概述</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=148\">p148 147-第卌一讲-自动配置类2-DataSource</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=149\">p149 148-第卌一讲-自动配置类3-MyBatis</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=150\">p150 149-第卌一讲-自动配置类3-mapper扫描</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=151\">p151 150-第卌一讲-自动配置类4-事务</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=152\">p152 151-第卌一讲-自动配置类5-MVC</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=153\">p153 152-第卌一讲-自定义自动配置类</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=154\">p154 153-第卌二讲-条件装配底层1</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=155\">p155 154-第卌二讲-条件装配底层2</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=156\">p156 155-第卌三讲-FactoryBean</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=157\">p157 156-第卌四讲-@Indexed</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=158\">p158 157-第卌五讲-Spring代理的特点</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=159\">p159 158-第卌五讲-Spring代理的特点</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=160\">p160 159-第卌六讲-@Value注入底层1</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=161\">p161 160-第卌六讲-@Value注入底层2</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=162\">p162 161-第卌七讲-@Autowired注入底层-doResolveDependency外1</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=163\">p163 162-第卌七讲-@Autowired注入底层-doResolveDependency外2</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=164\">p164 163-第卌七讲-@Autowired注入底层-doResolveDependency内1</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=165\">p165 164-第卌七讲-@Autowired注入底层-doResolveDependency内2</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=166\">p166 165-第卌七讲-@Autowired注入底层-doResolveDependency内3</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=167\">p167 166-第卌七讲-@Autowired注入底层-doResolveDependency内4</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=168\">p168 167-第卌八讲-事件监听器1</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=169\">p169 168-第卌八讲-事件监听器2</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=170\">p170 169-第卌八讲-事件监听器3</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=171\">p171 170-第卌八讲-事件监听器4</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=172\">p172 171-第卌八讲-事件监听器5</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=173\">p173 172-第卌九讲-事件发布器1</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1P44y1N7QG?p=174\">p174 173-第卌九讲-事件发布器2</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-05-01 01:23:52", "summary": "介绍代码仓库地址：跟着黑马满一航老师的高级讲做的学习笔记，本笔记跟视频内容的项目名称和代码略有不同，我将讲的代码每一讲的代码都拆成了独立的项目，并且项目名称尽量做到了见名知意，都是基于我自己的考量，代"}