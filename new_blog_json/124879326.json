{"blogid": "124879326", "writerAge": "码龄3年", "writerBlogNum": "27", "writerCollect": "56", "writerComment": "13", "writerFan": "7", "writerGrade": "2级", "writerIntegral": "332", "writerName": "cyan_orange", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124879326.jpg", "writerRankTotal": "74538", "writerRankWeekly": "715599", "writerThumb": "21", "writerVisitNum": "38641", "blog_read_count": "2890", "blog_time": "已于 2022-05-28 19:24:37 修改", "blog_title": "mysql 递归函数with recursive的用法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"AS__0\"></a>AS 用法:</h1>\n<p>AS在mysql用来给<strong>列/表</strong>起别名.<br/> 有时，列的名称是一些表达式，使查询的输出很难理解。要给列一个描述性名称，可以使用列别名。<br/> 要给列添加别名，可以使用AS关键词后跟别名</p>\n<h2><a id=\"1_4\"></a>例子1:</h2>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SELECT</span> \n <span class=\"token punctuation\">[</span>column_1 <span class=\"token operator\">|</span> expression<span class=\"token punctuation\">]</span> <span class=\"token keyword\">AS</span> col_name\n<span class=\"token keyword\">FROM</span> table_name<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>如果别名包含空格，则必须引用以下内容：</p>\n<h2><a id=\"2_13\"></a>例子2:</h2>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SELECT</span> \n <span class=\"token punctuation\">[</span>column_1 <span class=\"token operator\">|</span> expression<span class=\"token punctuation\">]</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">'col name'</span>\n<span class=\"token keyword\">FROM</span> table_name<span class=\"token punctuation\">;</span>\n</code></pre>\n<h1><a id=\"withCommon_Table_ExpressionsCTE_20\"></a>with(Common Table Expressions/CTE)用法:</h1>\n<p>with在mysql中被称为公共表达式,可以作为一个临时表然后在其他结构中调用.如果是自身调用那么就是后面讲的递归.</p>\n<h2><a id=\"_23\"></a>语法:</h2>\n<pre><code class=\"prism language-sql\">with_clause:\n    <span class=\"token keyword\">WITH</span> <span class=\"token punctuation\">[</span>RECURSIVE<span class=\"token punctuation\">]</span>\n        cte_name <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>col_name <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> col_name<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">AS</span> <span class=\"token punctuation\">(</span>subquery<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> cte_name <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>col_name <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> col_name<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">AS</span> <span class=\"token punctuation\">(</span>subquery<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n</code></pre>\n<p>cte_name :公共表达式的名称,可以理解为表名,用来表示as后面跟着的子查询<br/> col_name :公共表达式包含的列名,可以写也可以不写</p>\n<h2><a id=\"1_34\"></a>例子1:</h2>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">WITH</span>\n  cte1 <span class=\"token keyword\">AS</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> a<span class=\"token punctuation\">,</span> b <span class=\"token keyword\">FROM</span> table1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  cte2 <span class=\"token keyword\">AS</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> c<span class=\"token punctuation\">,</span> d <span class=\"token keyword\">FROM</span> table2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">SELECT</span> b<span class=\"token punctuation\">,</span> d <span class=\"token keyword\">FROM</span> cte1 <span class=\"token keyword\">JOIN</span> cte2\n<span class=\"token keyword\">WHERE</span> cte1<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> cte2<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"2_43\"></a>例子2:</h2>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">WITH</span> cte <span class=\"token punctuation\">(</span>col1<span class=\"token punctuation\">,</span> col2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span>\n<span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">SELECT</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span>\n  <span class=\"token keyword\">UNION</span> <span class=\"token keyword\">ALL</span>\n  <span class=\"token keyword\">SELECT</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">SELECT</span> col1<span class=\"token punctuation\">,</span> col2 <span class=\"token keyword\">FROM</span> cte<span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"3_54\"></a>例子3:</h2>\n<p>这里的第一个as后面接的是子查询,第二个as表示列名,而不是子查询.</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">WITH</span> cte <span class=\"token keyword\">AS</span>\n<span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">SELECT</span> <span class=\"token number\">1</span> <span class=\"token keyword\">AS</span> col1<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token keyword\">AS</span> col2\n  <span class=\"token keyword\">UNION</span> <span class=\"token keyword\">ALL</span>\n  <span class=\"token keyword\">SELECT</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">SELECT</span> col1<span class=\"token punctuation\">,</span> col2 <span class=\"token keyword\">FROM</span> cte<span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"with_65\"></a>with的合法用法:</h2>\n<ul><li>在子查询(包括派生的表子查询)的开始处</li></ul>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">WHERE</span> id <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">WITH</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">SELECT</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">WITH</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">SELECT</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> dt <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n</code></pre>\n<ul><li>同一级别只允许一个WITH子句。同一级别的WITH后面跟着WITH是不允许的,下面是非法用法:</li></ul>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">WITH</span> cte1 <span class=\"token keyword\">AS</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">WITH</span> cte2 <span class=\"token keyword\">AS</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">SELECT</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n</code></pre>\n<p>改为合法用法:</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">WITH</span> cte1 <span class=\"token keyword\">AS</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">WITH</span> cte2 <span class=\"token keyword\">AS</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> cte2 <span class=\"token keyword\">JOIN</span> cte1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> dt<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>在这里面as代表列名,sql不是顺序执行的,这一点了解的话就很好理解这个as了</p>\n<h1><a id=\"_86\"></a>简单递归用法:</h1>\n<p>首先我们引出一个问题: <strong>什么叫做递归?</strong><br/> 递归:给定函数初始条件,然后反复调用自身直到终止条件.</p>\n<h2><a id=\"1_89\"></a>例子1:递归得到依次递增的序列:</h2>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">WITH</span> RECURSIVE cte <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span>\n<span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">SELECT</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">UNION</span> <span class=\"token keyword\">ALL</span>\n  <span class=\"token keyword\">SELECT</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token keyword\">FROM</span> cte <span class=\"token keyword\">WHERE</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> cte<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>运行结果:</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">+</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span>\n<span class=\"token operator\">|</span> n    <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span>\n<span class=\"token operator\">|</span>    <span class=\"token number\">1</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>    <span class=\"token number\">2</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>    <span class=\"token number\">3</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>    <span class=\"token number\">4</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>    <span class=\"token number\">5</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span>\n</code></pre>\n<p>官方文档中对于这个写法的解释:</p>\n<p>At each iteration, that SELECT produces a row with a new value one greater than <strong>the value of n from the previous row set.</strong> The first iteration operates on the initial row set (1) and produces 1+1=2; the second iteration operates on the first iteration’s row set (2) and produces 2+1=3; and so forth. This continues until recursion ends, which occurs when n is no longer less than 5.</p>\n<p>用python实现就是:</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">cte</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> n<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span>\n\t\tcte<span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>也就是说,一个with recursive 由两部分组成.第一部分是非递归部分(union all上方),第二部分是递归部分(union all下方).递归部分第一次进入的时候使用非递归部分传递过来的参数,也就是第一行的数据值,进而得到第二行数据值.然后根据第二行数据值得到第三行数据值.</p>\n<h2><a id=\"2_127\"></a>例子2:递归得到不断复制的字符串</h2>\n<p>这里的as表示列名,表示说这个CTE有两个列,也可以写为<strong>with cte(n,str) as (subquery)</strong></p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">WITH</span> RECURSIVE cte <span class=\"token keyword\">AS</span>\n<span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">SELECT</span> <span class=\"token number\">1</span> <span class=\"token keyword\">AS</span> n<span class=\"token punctuation\">,</span> <span class=\"token string\">'abc'</span> <span class=\"token keyword\">AS</span> str\n  <span class=\"token keyword\">UNION</span> <span class=\"token keyword\">ALL</span>\n  <span class=\"token keyword\">SELECT</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> CONCAT<span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> cte <span class=\"token keyword\">WHERE</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> cte<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>结果:</p>\n<pre><code class=\"prism language-sql\"><span class=\"token operator\">+</span><span class=\"token comment\">------+------+</span>\n<span class=\"token operator\">|</span> n    <span class=\"token operator\">|</span> str  <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">------+------+</span>\n<span class=\"token operator\">|</span>    <span class=\"token number\">1</span> <span class=\"token operator\">|</span> abc  <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>    <span class=\"token number\">2</span> <span class=\"token operator\">|</span> abc  <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>    <span class=\"token number\">3</span> <span class=\"token operator\">|</span> abc  <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">------+------+</span>\n</code></pre>\n<p>这里的话concat是每一次都连接一个str,这个str来自上一行的结果,但是最终输出却是每一行都没有变化的值,这是为什么?<br/> 这是因为我们在声明str的时候<strong>限制了它的字符长度</strong>,使用 <strong>类型转换CAST(‘abc’ AS CHAR(30))</strong> 就可以得到复制的字符串了.<br/> **注意:**这里也可能会报错,看mysql模式.在严格模式下这里会显示<code>Error Code: 1406. Data too long for column 'str' at row 1</code><br/> 关于strict SQL mode和nonstrict SQL mode:<a href=\"https://blog.csdn.net/fdipzone/article/details/50616247\">mysql 严格模式 Strict Mode说明</a></p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">WITH</span> RECURSIVE cte <span class=\"token keyword\">AS</span>\n<span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">SELECT</span> <span class=\"token number\">1</span> <span class=\"token keyword\">AS</span> n<span class=\"token punctuation\">,</span> CAST<span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span> <span class=\"token keyword\">AS</span> <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> str\n  <span class=\"token keyword\">UNION</span> <span class=\"token keyword\">ALL</span>\n  <span class=\"token keyword\">SELECT</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> CONCAT<span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> cte <span class=\"token keyword\">WHERE</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> cte<span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-sql\"><span class=\"token operator\">+</span><span class=\"token comment\">------+--------------+</span>\n<span class=\"token operator\">|</span> n    <span class=\"token operator\">|</span> str          <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">------+--------------+</span>\n<span class=\"token operator\">|</span>    <span class=\"token number\">1</span> <span class=\"token operator\">|</span> abc          <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>    <span class=\"token number\">2</span> <span class=\"token operator\">|</span> abcabc       <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>    <span class=\"token number\">3</span> <span class=\"token operator\">|</span> abcabcabcabc <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">------+--------------+</span>\n</code></pre>\n<p>当然,如果上一行的值有多个,我们还可以对多个值进行重新组合得到我们想要的结果,比如下面这个例子.</p>\n<h2><a id=\"3_173\"></a>例子3:生成斐波那契数列</h2>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">WITH</span> RECURSIVE fibonacci <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> fib_n<span class=\"token punctuation\">,</span> next_fib_n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span>\n<span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">SELECT</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">UNION</span> <span class=\"token keyword\">ALL</span>\n  <span class=\"token keyword\">SELECT</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> next_fib_n<span class=\"token punctuation\">,</span> fib_n <span class=\"token operator\">+</span> next_fib_n\n    <span class=\"token keyword\">FROM</span> fibonacci <span class=\"token keyword\">WHERE</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> fibonacci<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>结果:</p>\n<pre><code class=\"prism language-sql\"><span class=\"token operator\">+</span><span class=\"token comment\">------+-------+------------+</span>\n<span class=\"token operator\">|</span> n    <span class=\"token operator\">|</span> fib_n <span class=\"token operator\">|</span> next_fib_n <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">------+-------+------------+</span>\n<span class=\"token operator\">|</span>    <span class=\"token number\">1</span> <span class=\"token operator\">|</span>     <span class=\"token number\">0</span> <span class=\"token operator\">|</span>          <span class=\"token number\">1</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>    <span class=\"token number\">2</span> <span class=\"token operator\">|</span>     <span class=\"token number\">1</span> <span class=\"token operator\">|</span>          <span class=\"token number\">1</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>    <span class=\"token number\">3</span> <span class=\"token operator\">|</span>     <span class=\"token number\">1</span> <span class=\"token operator\">|</span>          <span class=\"token number\">2</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>    <span class=\"token number\">4</span> <span class=\"token operator\">|</span>     <span class=\"token number\">2</span> <span class=\"token operator\">|</span>          <span class=\"token number\">3</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>    <span class=\"token number\">5</span> <span class=\"token operator\">|</span>     <span class=\"token number\">3</span> <span class=\"token operator\">|</span>          <span class=\"token number\">5</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>    <span class=\"token number\">6</span> <span class=\"token operator\">|</span>     <span class=\"token number\">5</span> <span class=\"token operator\">|</span>          <span class=\"token number\">8</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>    <span class=\"token number\">7</span> <span class=\"token operator\">|</span>     <span class=\"token number\">8</span> <span class=\"token operator\">|</span>         <span class=\"token number\">13</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>    <span class=\"token number\">8</span> <span class=\"token operator\">|</span>    <span class=\"token number\">13</span> <span class=\"token operator\">|</span>         <span class=\"token number\">21</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>    <span class=\"token number\">9</span> <span class=\"token operator\">|</span>    <span class=\"token number\">21</span> <span class=\"token operator\">|</span>         <span class=\"token number\">34</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>   <span class=\"token number\">10</span> <span class=\"token operator\">|</span>    <span class=\"token number\">34</span> <span class=\"token operator\">|</span>         <span class=\"token number\">55</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">------+-------+------------+</span>\n</code></pre>\n<h1><a id=\"_202\"></a>语法说明:</h1>\n<h2><a id=\"UNION_ALLUNION_DISTINCT_203\"></a>UNION ALL与UNION DISTINCT</h2>\n<ul><li>UNION ALL:<br/> 非递归部分和递归部分用UNION ALL分隔,那么所有的行都会被加入到最后的表中</li><li>UNION DISTINCT:<br/> 非递归部分和递归部分用UNION DISTINCT分隔，重复的行被消除。这对于执行传递闭包的查询非常有用，以避免无限循环。</li></ul>\n<h2><a id=\"limit_208\"></a>limit控制递归次数</h2>\n<h2><a id=\"recursiveselect_209\"></a>recursive(第二个select)不能使用的结构:</h2>\n<p><strong>官网的描述:</strong></p>\n<ul><li> <p>The recursive SELECT part must not contain these constructs:</p> <pre><code>Aggregate functions such as SUM()\n\nWindow functions\n\nGROUP BY\n\nORDER BY\n\nDISTINCT\n</code></pre> </li></ul>\n<h2><a id=\"_222\"></a>限制递归次数/时间:</h2>\n<p>当出现不符合设置情况的会报错,分为以下几种设置方法:</p>\n<ul><li>cte_max_recursion_depth :default 设置为1000,表达递归的层数.可以使用如下语句修改这个值:</li></ul>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SET</span> <span class=\"token keyword\">SESSION</span> cte_max_recursion_depth <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">-- permit only shallow recursion</span>\n<span class=\"token keyword\">SET</span> <span class=\"token keyword\">SESSION</span> cte_max_recursion_depth <span class=\"token operator\">=</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- permit deeper recursion</span>\n</code></pre>\n<p>当然也可以设置为global,也就是set global cte_max_recursion_depth = 1000000;这样子就对全局的递归都有限制</p>\n<ul><li>max_execution_time :设置最近的递归时间</li></ul>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SET</span> max_execution_time <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- impose one second timeout</span>\n</code></pre>\n<ul><li>MAX_EXECUTION_TIME:设置全局的递归时间</li></ul>\n<p><strong>官网文档</strong>说明如下:</p>\n<ul><li> <p>The cte_max_recursion_depth system variable enforces a limit on the<br/> number of recursion levels for CTEs. The server terminates execution<br/> of any CTE that recurses more levels than the value of this variable.</p> </li><li> <p>The max_execution_time system variable enforces an execution timeout<br/> for SELECT statements executed within the current session.</p> </li><li> <p>The MAX_EXECUTION_TIME optimizer hint enforces a per-query execution<br/> timeout for the SELECT statement in which it appears.</p> </li><li> <p>limit:限之最大行的数量</p> </li></ul>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">WITH</span> RECURSIVE cte <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span>\n<span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">SELECT</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">UNION</span> <span class=\"token keyword\">ALL</span>\n  <span class=\"token keyword\">SELECT</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token keyword\">FROM</span> cte <span class=\"token keyword\">LIMIT</span> <span class=\"token number\">10000</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> cte<span class=\"token punctuation\">;</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2022-05-28 19:24:37", "summary": "用法在用来给列表起别名有时，列的名称是一些表达式，使查询的输出很难理解。要给列一个描述性名称，可以使用列别名。要给列添加别名，可以使用关键词后跟别名例子如果别名包含空格，则必须引用以下内容：例子用法在"}