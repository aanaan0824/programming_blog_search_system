{"blogid": "126452134", "writerAge": "码龄16年", "writerBlogNum": "18", "writerCollect": "70", "writerComment": "4", "writerFan": "10", "writerGrade": "3级", "writerIntegral": "530", "writerName": "xgh815", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126452134.jpg", "writerRankTotal": "31797", "writerRankWeekly": "3892", "writerThumb": "7", "writerVisitNum": "31788", "blog_read_count": "5604", "blog_time": "于 2022-08-21 17:44:22 发布", "blog_title": "自动生成电子印章", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>       网络办公正逐渐成为常态，无纸化办公也是一个潮流，这二者需要电子签章，最简单的方法就是在纸上盖一个章然后扫描成电子图片文件，最后在你的系统加载这个签章电子图片文件。但这样就会些不理想的地方，如果不是透明的，叠加在有文字等的地方会遮盖了原来的内容；如果做成透明的，图片会失真，看上去很不真实。</p>\n<p>       那就用代码画一个签章吧，本来以为是挺简单，其实不是。大小、形状、颜色这些都很受容易处理，难点就在文字按椭圆曲线排列上，涉及到字间距、倾斜角度等，实现起来还是要花一点时间的。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\e7a81edf0455400380d516f7076f0f04.png\"/></p>\n<p>        既然是要用代码来画，那就要用到 Graphics 这个GDI了。为了画出高质量边缘无锯齿的透明图形，需要对Graphics的绘画质量进行设置，并清除背景色。</p>\n<pre><code class=\"hljs\">            Image img = new Bitmap(imgWidth, imgHeight);\n            Graphics g = Graphics.FromImage(img);\n            g.SmoothingMode = SmoothingMode.HighQuality;\n            g.InterpolationMode = InterpolationMode.HighQualityBicubic;\n            g.CompositingQuality = CompositingQuality.HighQuality;\n            g.TextRenderingHint = System.Drawing.Text.TextRenderingHint.AntiAlias;\n            g.Clear(Color.Transparent);\n</code></pre>\n<p>       印章形状有圆形和椭圆形二种，圆形的话高和宽调成165的话打印出来和实际印章大小比较接近，椭圆形的宽和高则设置成197和131，当然在实际中是有不同大小的印章，只要调整宽和高就可。设置好宽和高后就可定义要画的图形大小和位置了，这里包含印章外边框和印章名称二个。</p>\n<p>       印章外边框的大小和位置</p>\n<p>       Rectangle rect = new Rectangle(new Point(2, 2), new Size(imgWidth - 5, imgHeight - 5));</p>\n<p>        圆形印章名称的大小和位置</p>\n<p>        Rectangle rectString = new Rectangle(new Point(6, 6), new Size(imgWidth - 12, imgHeight - 12));</p>\n<p>       椭圆形印章名称的大小和位置</p>\n<p>       rectString = new Rectangle(new Point(9, 9), new Size(imgWidth - 16, imgHeight - 16));</p>\n<p>       画印章外边框比较容易，直接画一个宽度为4的椭圆开就好了，圆形当椭圆一处理</p>\n<p>       g.DrawEllipse(new Pen(foreColor, 4), rect);</p>\n<p>      还要确定印章中心点的坐标</p>\n<p>      Point center = new Point((imgWidth - 1) / 2, (imgHeight - 1) / 2);</p>\n<p>       印章名称的绘画就复杂一点，为了文字的左右对称，需要设置绘画文字的起始角度、字间距和字体。实质上是把文字文字均匀地附加在圆形路径上。</p>\n<pre><code class=\"hljs\">public void DrawEllipseString(Rectangle rect, Graphics g, Font font, Color foreColor, float startAngle, string str, bool isFill, int split)\n        {\n            Point origin = new Point(rect.X + rect.Width / 2, rect.Y + rect.Height / 2);\n            StringFormat format = new StringFormat()\n            {\n                Alignment = StringAlignment.Center,\n                LineAlignment = StringAlignment.Center,\n            };\n            if (rect.Width == rect.Height)\n            {\n                try\n                {\n                    g.TranslateTransform(origin.X, origin.Y);\n                    g.RotateTransform(startAngle);\n                    float angle = startAngle + 90;\n                    foreach (var c in str)\n                    {\n                        SizeF txtSize = g.MeasureString(c.ToString(), font);\n                        Point pointB = GetPiePoint(rect, angle);\n                        Double distance = GetRealDistance(origin, pointB);\n                        int radius = (int)(distance - txtSize.Height / 2);\n                        PointF pointF = new PointF(0, -radius);\n                        g.DrawString(c.ToString(), font, new SolidBrush(foreColor), pointF, format);\n                        float fltAngle = 360f / str.Length;\n                        if (!isFill) fltAngle = (float)((txtSize.Width + split - 2) / (rect.Width * Math.PI) * 360);\n                        g.RotateTransform(fltAngle);\n                        angle += fltAngle;\n                    }\n                    g.ResetTransform();\n                }\n                catch { }\n            }\n            else\n            {\n                float angle = startAngle - 90;\n                SizeF txtSize = g.MeasureString(str.ToString(), font);\n                rect = new Rectangle(rect.X + (int)txtSize.Height / 2, rect.Y + (int)txtSize.Height / 2, rect.Width - (int)txtSize.Height, rect.Height - (int)txtSize.Height);\n                try\n                {\n                    for (int i = 0; i &lt; str.Length; i++)\n                    {\n                        txtSize = g.MeasureString(str[i].ToString(), font);\n                        Point pointB = GetPiePoint(rect, angle);\n                        double distance = GetRealDistance(origin, pointB);\n                        g.TranslateTransform(pointB.X, pointB.Y);\n                        if (angle == -90)\n                        {\n                            g.RotateTransform(angle + 90);\n                        }\n                        else if (angle == 0)\n                        {\n                            g.RotateTransform(angle + 90);\n                        }\n                        else if (angle == 90)\n                        {\n                            g.RotateTransform(angle + 90);\n                        }\n                        else if (angle == 180)\n                        {\n                            g.RotateTransform(angle + 90);\n                        }\n                        else if (angle == 270)\n                        {\n                            g.RotateTransform(angle + 90);\n                        }\n                        else if (angle == 360)\n                        {\n                            g.RotateTransform(angle - 45);\n                        }\n                        else\n                        {\n                            double a = rect.Width / 2;\n                            double b = rect.Height / 2;\n                            if (rect.Height &gt; rect.Width)\n                            {\n                                a = rect.Height / 2;\n                                b = rect.Width / 2;\n                            }\n                            double c = Math.Sqrt(a * a - b * b);\n                            Point f1 = new Point((int)(origin.X - c), origin.Y);\n                            Point f2 = new Point((int)(origin.X + c), origin.Y);\n                            if (rect.Height &gt; rect.Width)\n                            {\n                                f1 = new Point(origin.X, (int)(origin.Y - c));\n                                f2 = new Point(origin.X, (int)(origin.Y + c));\n                            }\n                            double pf1 = GetRealDistance(f1, pointB);\n                            double pf2 = GetRealDistance(f2, pointB);\n                            double f1f2 = GetRealDistance(f1, f2);\n                            double PC = Math.Acos((distance * distance + pf2 * pf2 - c * c) / (2 * distance * pf2)) / Math.PI * 180;\n                            if (angle &gt; 270) PC = Math.Acos((distance * distance + pf1 * pf1 - c * c) / (2 * distance * pf1)) / Math.PI * 180;\n                            if (angle &lt; 90) PC = Math.Acos((distance * distance + pf1 * pf1 - c * c) / (2 * distance * pf1)) / Math.PI * 180;\n                            if (PC.ToString() == \"NaN\") PC = 0;\n                            double P = Math.Acos((pf1 * pf1 + pf2 * pf2 - f1f2 * f1f2) / (2 * pf1 * pf2)) / Math.PI * 180;\n                            double Q = P / 2 - PC;\n                            if (P &lt; 0) Q = 0;\n                            if (P == 0) Q = 0;\n                            if (Q.ToString() == \"非数字\") Q = 0;\n                            if (Q &lt; 0) Q = 0;\n                            float angleQ = angleQ = angle + 90 + (float)Q;\n                            if (angle &gt; 90 &amp;&amp; angle &lt; 180) angleQ = angle + 90 - (float)Q;\n                            if (angle &gt; 270 &amp;&amp; angle &lt; 360) angleQ = angle + 90 - (float)Q;\n                            if (rect.Height &gt; rect.Width) angleQ = angle + 90 - (float)Q;\n                            g.RotateTransform(angleQ);\n                        }\n                        g.TranslateTransform(-pointB.X, -pointB.Y);\n                        g.DrawString(str[i].ToString(), font, new SolidBrush(foreColor), pointB, format);\n                        g.ResetTransform();\n                        float fltAngle = 360f / str.Length;\n                        if (!isFill)\n                        {\n                            double stringWidth = txtSize.Width + split - 2;\n                            for (float n = angle; n &lt; 720; n += 0.1F)\n                            {\n                                Point pointN = GetPiePoint(rect, n);\n                                double stringN = GetRealDistance(pointN, pointB);\n                                if (stringN &gt; stringWidth)\n                                {\n                                    fltAngle = n - angle;\n                                    break;\n                                }\n                            }\n                        }\n                        angle += fltAngle;\n                        if (angle &gt; 360) angle -= 360;\n                    }\n                }\n                catch { }\n            }\n        }</code></pre>\n<p>这里面要计算每一个文字的起始角度和坐标，还要计算二个点之间的距离</p>\n<pre><code class=\"hljs\">public Point GetPiePoint(Rectangle lpRect, float angle)\n        {\n            Point pt = new Point();\n            double a = lpRect.Width / 2.0f;\n            double b = lpRect.Height / 2.0f;\n            if (a == 0 || b == 0) return new Point(lpRect.X, lpRect.Y);\n            //弧度            \n            double radian = angle * Math.PI / 180.0f;\n            //获取弧度正弦值            \n            double yc = Math.Sin(radian);\n            //获取弧度余弦值            \n            double xc = Math.Cos(radian);\n            //获取曲率 r = ab/\\Sqrt((a.Sinθ)^2+(b.Cosθ)^2 \n            double radio = (a * b) / Math.Sqrt(Math.Pow(yc * a, 2.0) + Math.Pow(xc * b, 2.0));\n            //计算坐标            \n            double ax = radio * xc;\n            double ay = radio * yc;\n            pt.X = (int)(lpRect.X + a + ax);\n            pt.Y = (int)(lpRect.Y + b + ay);\n            return pt;\n        }\n\n\npublic double GetRealDistance(Point pointA, Point pointB)\n        {\n            double distance = Math.Sqrt(Math.Pow(pointA.X - pointB.X, 2.0) + Math.Pow(pointA.Y - pointB.Y, 2.0));\n            return distance;\n        }</code></pre>\n<p>印章中间的五角星形可以用特殊字符来做，但大小等的控制不如直接画线来得方便。</p>\n<pre><code class=\"hljs\">                int radius = 27;\n                PointF[] pentagons = new PointF[] { new PointF(center.X, center.Y - radius),\n                new PointF((float)(center.X + radius * Math.Sin(72 * Math.PI / 180)), (float)(center.Y - radius * Math.Cos(72 * Math.PI / 180))),\n                new PointF((float)(center.X + radius * Math.Sin(36 * Math.PI / 180)), (float)(center.Y + radius * Math.Cos(36* Math.PI / 180))),\n                new PointF((float)(center.X - radius * Math.Sin(36 * Math.PI / 180)),(float)( center.Y + radius * Math.Cos(36 * Math.PI / 180))),\n                new PointF((float)(center.X - radius * Math.Sin(72 * Math.PI / 180)), (float)(center.Y - radius * Math.Cos(72 * Math.PI / 180))),\n                };\n\n                GraphicsPath path = new GraphicsPath(FillMode.Winding);\n                path.AddLine(pentagons[0], pentagons[2]);\n                path.AddLine(pentagons[2], pentagons[4]);\n                path.AddLine(pentagons[4], pentagons[1]);\n                path.AddLine(pentagons[1], pentagons[3]);\n                path.AddLine(pentagons[3], pentagons[0]);\n                path.CloseFigure();\n                g.FillPath(new SolidBrush(foreColor), path);\n</code></pre>\n<p>       印章的中间和底部文字相对简单，把字体设置小一点直接画就是，注意区分圆形和椭圆形。</p>\n<pre><code class=\"hljs\">if (showCenterString)\n            {\n                if (isEllipse)\n                {\n                    g.DrawString(centerString, new Font(font.Name, font.Size - 1), new SolidBrush(foreColor), center, format);\n                }\n                else\n                {\n                    g.DrawString(centerString, new Font(font.Name, font.Size - 4), new SolidBrush(foreColor), center, format);\n                }\n            }\n            if (showBottomString)\n            {\n                if (isEllipse)\n                {\n                    g.DrawString(bottomString, new Font(font.Name, font.Size - 1), new SolidBrush(foreColor), center.X, center.Y + 35, format);\n                }\n                else\n                {\n                    g.DrawString(bottomString, new Font(font.Name, font.Size - 4), new SolidBrush(foreColor), center.X, center.Y + 50, format);\n                }\n            }</code></pre>\n<p><a class=\"link-info\" href=\"https://download.csdn.net/download/xgh815/86405594\" title=\"自动生成电子印章完整实例下载\">自动生成电子印章完整实例下载</a></p>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-21 17:44:22", "summary": "网络办公正逐渐成为常态，无纸化办公也是一个潮流，这二者需要电子签章，最简单的方法就是在纸上盖一个章然后扫描成电子图片文件，最后在你的系统加载这个签章电子图片文件。但这样就会些不理想的地方，如果不是透明"}