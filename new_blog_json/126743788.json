{"blogid": "126743788", "writerAge": "码龄161天", "writerBlogNum": "481", "writerCollect": "1061", "writerComment": "48", "writerFan": "761", "writerGrade": "6级", "writerIntegral": "5720", "writerName": "ikt4435", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126743788.jpg", "writerRankTotal": "3077", "writerRankWeekly": "4322", "writerThumb": "140", "writerVisitNum": "158611", "blog_read_count": "14", "blog_time": "已于 2022-09-07 13:28:24 修改", "blog_title": "反思：Google 为何把 SurfaceView 设计的这么难用？", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h2>启程</h2>\n<p>如果你有过 <code>SurfaceView</code> 的使用经历，那么你一定和我一样，曾经被它所引发出 <strong>层出不穷的异状</strong> 折磨的 <strong>怀疑人生</strong>—— 毕竟，作为一个有理想的开发者，在深入了解 <code>SurfaceView</code> 之前，你很难想通这样一个问题：</p>\n<blockquote>\n<p>为什么 <code>Google</code> 把 <code>SurfaceView</code> 设计的这么难用？</p>\n<ul><li>不支持 <code>transform</code> 动画；</li><li>不支持半透明混合；</li><li>移动，大小改变，隐藏/显示操作引发的各种问题；</li></ul>\n</blockquote>\n<p>另一方面，即使你对 <code>SurfaceView</code> 使用不多，<strong>图形系统</strong> 的这朵乌云依然笼罩在每一位 <code>Android</code> 开发者的头顶，来看 <code>Google</code> 对其的 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fsource.android.com%2Fdocs%2Fcore%2Fgraphics%2Farchitecture\" title=\"描述\">描述</a>：</p>\n<p class=\"img-center\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/1e0b74d69414f18fb1b2557d4589a112.webp?x-oss-process=image/format,png\"/></p>\n<p>最终我尝试走近这片迷雾，并一点点去思考下列问题的答案：</p>\n<ul><li>\n<ol><li><code>SurfaceView</code> 的设计初衷是为了解决什么问题？</li></ol></li><li>\n<ol><li>实际开发中，<code>SurfaceView</code> 这么 <strong>难用</strong> 的根本原因是什么？</li></ol></li><li>\n<ol><li>为了解决这些问题，<code>Google</code> 的工程师进行了哪些 <strong>尝试</strong> ？</li></ol></li></ul>\n<p>接下来，读者可带着这些问题，跟随笔者一起，再次回顾 <code>SurfaceView</code> 设计和实现的精彩历程。</p>\n<h2>一、世界观</h2>\n<p>在了解 <code>SurfaceView</code> 的设计初衷之前，读者首先需要对 <code>Android</code> 现有的图形架构有一个基本的了解。</p>\n<p><code>Android</code> 系统采用一种称为 <code>Surface</code> 的图形架构，简而言之，每一个 <code>Activity</code> 都关联有至少一个 <code>Window</code>（窗口），每一个 <code>Window</code> 都对应有一个 <code>Surface</code>。</p>\n<p><code>Surface</code> 这里直译过来叫做 <strong>绘图表面</strong> ，顾名思义，其可在内存中生成一个图形缓冲区队列，用于描述 <code>UI</code>，经与系统服务的<code>WindowServiceManager</code> 通信后、通过 <code>SurfaceFlinger</code> 服务持续合成并送显到显示屏。</p>\n<p>读者可通过下图，在印象上对整个流程建立一个简单的轮廓：</p>\n<p class=\"img-center\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/7bac31f1a02d29163350542fccfd0a78.webp?x-oss-process=image/format,png\"/></p>\n<p>由此可见，通常情况下，一个 <code>Activity</code> 的 <code>UI</code> 渲染本质是 <strong>系统提供一块内存，并创建一个图形缓冲区进行维护</strong>；这块内存就是 <code>Surface</code>，最终页面所有 <code>View</code> 的 <code>UI</code> 状态数据，都会被填充到同一个 <code>Surface</code> 中。</p>\n<p>截至目前一切正常，但需要指出的是，现有图形系统的架构设计中还藏了一个线程相关的 <strong>隐患</strong> 。</p>\n<h2>二、设计起源</h2>\n<h3>1.线程问题</h3>\n<p>问题点在于：我们还需保证 <code>Surface</code> 内部 <code>Buffer</code> 缓冲区的 <strong>线程安全</strong>。</p>\n<p>这样的描述，对于读者似乎太过飘渺，但从结论来说，最终，一条 <code>Android</code>开发者 <strong>耳熟能详</strong> 的规则因此而诞生：</p>\n<p><strong>主线程不能执行耗时操作</strong>。</p>\n<p>我们知道， <code>UI</code> 的所有操作，一定会涉及到视图（<code>View</code> 树) 内部大量状态的维护，而 <code>Surface</code> 内部的缓冲区也会不断地被读写，并交给系统渲染。因此，如果 <code>UI</code> 相关的操作，放在不同的线程中执行，而多线程对这一块内存区域的读写，势必会引发内部状态的混乱。</p>\n<p>为了避免这个问题，设计者就需要通过某种手段保证线程同步（比如加锁），而这种同步所带来的巨大开销，对于开发者而言，是不可接受的。</p>\n<p>因此，最合理的方案就是保证所有<code>UI</code>相关操作都在同一个线程，而这个线程也被称作 <strong>主线程</strong> 或 <code>UI</code> 线程。</p>\n<p>现在，我们将<code>UI</code>操作限制到主线程去执行，以解决了本小节开始时提到的线程问题，但开发者仍需小心—— 众所周知，主线程除了执行<code>UI</code>相关的操作之外，还负责接收各种各样的 <strong>输入事件</strong>（比如触摸、按键等），因此，为了保证用户的输入事件能够及时得到响应，我们就要保证 <code>UI</code> 操作的 <strong>稳定高效</strong>，尽可能避免耗时的 <code>UI</code> 操作。</p>\n<h3>2.动机</h3>\n<p>挑战随之而来。</p>\n<p>当渲染的缓冲数据来自外部的其它系统服务或<code>API</code>时——比如系统媒体解码器的音视频数据，或者 <code>Camera API</code> 的相机数据等，这时 <code>UI</code> 渲染的效率要求会变得非常高。</p>\n<p>开发者有了新的诉求：能否有这样一种特殊的视图，它拥有独立的 <code>Surface</code> ，这样就可以脱离现有 <code>Activity</code> 宿主的限制，在一个独立的线程中进行绘制。</p>\n<p><strong>由于该视图不会占用主线程资源，一方面可以实现复杂而高效的 <code>UI</code> 渲染，另一方面可以及时响应用户其它输入事件</strong>。</p>\n<p>因此，<code>SurfaceView</code> 应运而生：与常规视图控件不同，<code>SurfaceView</code> 拥有独立的 <code>Surface</code>，如果我们将一个 <code>Surface</code> 理解为一个层级 （<code>Layer</code>)，最终 <code>SurfaceFlinger</code> 会将前后两者的<code>2</code>个 <code>Layer</code> 进行 <strong>合成</strong> 和 <strong>渲染</strong> ：</p>\n<p class=\"img-center\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/8372f34b4bd3ab40e48f77fbbeb7c5e3.webp?x-oss-process=image/format,png\"/></p>\n<p>现在，我们引用官方文档的描述，再次重申适用 <code>SurfaceView</code> 的场景：</p>\n<blockquote>\n<p>在需要渲染到单独的 <code>Surface</code>（例如，使用 <code>Camera API</code> 或 <code>OpenGL ES</code> 上下文进行渲染）时，使用 <code>SurfaceView</code> 进行渲染很有帮助。使用 <code>SurfaceView</code> 进行渲染时，<code>SurfaceFlinger</code> 会直接将缓冲区合成到屏幕上。</p>\n<p>如果没有 <code>SurfaceView</code>，您需要将缓冲区合成到屏幕外的 <code>Surface</code>，然后该 <code>Surface</code> 会合成到屏幕上，而使用 <code>SurfaceView</code> 进行渲染可以省去额外的工作。</p>\n</blockquote>\n<h3>3.具体思路</h3>\n<p>根据当前的设想，我们针对 <strong>SurfaceView</strong> 设计思路进行细化。</p>\n<p>首先，我们需对现有的视图树结构进行改造。为了便于使用，我们允许开发者将 <code>SurfaceView</code> 直接加入到现有的视图树中（即作为控件，它受限于宿主 <code>View Hierachy</code>的结构关系），但在系统服务端中，对于 <code>SurfaceFlinger</code> 而言，<code>SurfaceView</code> 又是完全与宿主完全分离开的：</p>\n<p class=\"img-center\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/94ebc5e484c2ab5ffaffe842a2bc199d.webp?x-oss-process=image/format,png\"/></p>\n<p>在上图中，我们可以看到，在 <code>z</code> 轴上，<code>SurfaceView</code> 默认是低于 <code>DecorView</code> 的，也就是说，<code>SurfaceView</code> 通常总是处于当前页面的最下方。</p>\n<p>这似乎有些违反直觉，但仔细考虑 <code>SurfaceView</code> 的应用场景，无论是 <code>Camera</code> 相机应用、音视频播放页，亦或者是渲染游戏画面等，<code>SurfaceView</code> 承载的画面似乎总应该在页面的最下面。</p>\n<p>实际设计中也是如此，用来描述 <code>SurfaceView</code> 的 <code>Layer</code> 或者 <code>LayerBuffer</code> 的 <code>z</code> 轴位置默认是低于宿主窗口的。与此同时，为了便于最底层的视图可见， <code>SurfaceView</code> 在宿主 <code>Activity</code> 的窗口上设置了一块透明区域（<strong>挖了一个洞</strong>）。</p>\n<p>最终，<code>SurfaceFlinger</code> 把所有的 <code>Layer</code> 通过用统一流程来绘制和合成对应的 <code>UI</code>。</p>\n<p>在整个过程中，我们需更进一步深入研究几个细节：</p>\n<ol><li><code>SurfaceView</code> 与宿主视图树结构的关系，以及 <strong>挖洞</strong> 过程的实现；</li><li><code>SurfaceView</code> 与系统服务的通信创建 <code>Surface</code>的实现；</li><li><code>SurfaceView</code> 具体绘制流程的实现。</li></ol>\n<h2>三、施工</h2>\n<h3>1. 视图树与挖洞</h3>\n<p>一句话总结 <code>SurfaceView</code> 与视图树的关系： <strong>在视图树内部，但又没完全在内部</strong> 。</p>\n<p>首先，<code>SurfaceView</code> 的设计依然遵循 <code>Android</code> 的 <code>View</code> 体系，继承了 <code>View</code>，这意味着使用时，它可以声明在 <code>xml</code> 布局文件中：</p>\n<pre><code>// /frameworks/base/core/java/android/view/SurfaceView.java\npublic class SurfaceView extends View  { }\n复制代码</code></pre>\n<blockquote>\n<p>出于安全性的考量，<code>SurfaceView</code> 相关源码并未直接开放出来，开发者只能看到自动生成的一个接口类，源码可以借助梯子在 <a href=\"https://link.juejin.cn?target=http%3A%2F%2Faospxref.com%2Fandroid-10.0.0_r47%2Fxref%2Fframeworks%2Fbase%2Fcore%2Fjava%2Fandroid%2Fview%2FSurfaceView.java\" title=\"这里\">这里</a> 查阅。</p>\n</blockquote>\n<p><code>LayoutInflater</code> 布局填充阶段，按既有的布局填充流程，将 <code>SurfaceView</code> 构造并加入到视图树的某个结点；接下来，根布局会通过深度遍历依次执行 <code>onAttachedToWindow()</code> 处理视图挂载窗口的事件：</p>\n<pre><code>// /frameworks/base/core/java/android/view/SurfaceView.java\n@Override\nprotected void onAttachedToWindow() {\n    // ...\n    mParent.requestTransparentRegion(SurfaceView.this);   // 1.\n    ViewTreeObserver observer = getViewTreeObserver();\n    observer.addOnPreDrawListener(mDrawListener);         // 2.\n}\n\n@UnsupportedAppUsage\nprivate final ViewTreeObserver.OnPreDrawListener mDrawListener = new ViewTreeObserver.OnPreDrawListener() {\n    @Override\n    public boolean onPreDraw() {\n        updateSurface();                                 // 3.\n        return true;\n    }\n};\n\nprotected void updateSurface() {\n  // ...\n  mSurfaceSession = new SurfaceSession();\n  mSurfaceControl = new SurfaceControl.Builder(mSurfaceSession);    // 4\n  //...\n}\n复制代码</code></pre>\n<p>步骤 <code>1</code> 中，<code>SurfaceView</code> 会向父视图依次向上请求创造一份透明区域，根视图统计到最终的信息后，通过 <code>Binder</code> 通知 <code>WindowManagerService</code> 将对应区域设置为透明。</p>\n<p>步骤 <code>2、3、4</code> 是在同一个方法的调用栈中，由此可见，<code>SurfaceView</code> 向系统请求透明区域后，会立即创建一个与绘图表面的连接 <code>SurfaceSession</code> ，并创建一个对应的控制器 <code>SurfaceControl</code>，便于对这个独立的绘图表面进行直接通信。</p>\n<p>由此可见，<code>Android</code> 自有的视图树体系中，<code>SurfaceView</code> 作为一个普通的 <code>View</code> 被挂载上去之后，通过 <code>Binder</code> 通信，<code>WindowManagerService</code> 将其所在区域设置为透明（挖洞）；并建立了与独立绘图表面的连接，后续便可与其直接通信。</p>\n<h3>2. 子图层类型</h3>\n<p>在阐述绘制流程之前，读者需简单了解 <strong>子图层类型</strong> 的概念。</p>\n<p>上文说到，<code>SurfaceView</code> 的绝大多数使用场景中，其 <code>z</code> 轴的位置通常是在页面的 <strong>最下方</strong> 。但在实际开发中，随着业务场景复杂度的上升，仍然有部分场景是无法被满足的，比如：在页面的最上方播放一条全屏的视频广告。</p>\n<p>因此，<code>SurfaceView</code> 的设计中引入了一个 <strong>子图层类型</strong> 的概念，用于定义这个独立的 <code>Surface</code> 相比较当前页面窗口 (即<code>Activity</code>) 的位置：</p>\n<pre><code>// /frameworks/base/core/java/android/view/SurfaceView.java\npublic class SurfaceView extends View {\n  \n  // SurfaceView 的子图层类型\n  int mSubLayer = APPLICATION_MEDIA_SUBLAYER;\n  \n  // SurfaceView 是否展示在当前窗口的最上方\n  // 该方法在挖洞和绘制流程中都有使用，最终影响到用户的视觉效果\n  private boolean isAboveParent() {\n    return mSubLayer &gt;= 0;\n  }\n}\n\n// /frameworks/base/core/java/android/view/WindowManagerPolicyConstants.java\npublic interface WindowManagerPolicyConstants {\n  // ...\n  int APPLICATION_MEDIA_SUBLAYER = -2;\n  int APPLICATION_MEDIA_OVERLAY_SUBLAYER = -1;\n  int APPLICATION_PANEL_SUBLAYER = 1;\n  int APPLICATION_SUB_PANEL_SUBLAYER = 2;\n  int APPLICATION_ABOVE_SUB_PANEL_SUBLAYER = 3; \n  // ...\n}\n复制代码</code></pre>\n<p>如代码所示，<code>mSubLayer</code> 默认值为 <code>-2</code>，这表示 <code>SurfaceView</code> 默认总是在 <code>Activity</code> 的下方，想要让 <code>SurfaceView</code> 展示在 <code>Activity</code> 上方，可以调用 <code>setZOrderOnTop(true)</code> 以修改 <code>mSubLayer</code> 的值:</p>\n<pre><code>// /frameworks/base/core/java/android/view/SurfaceView.java\npublic class SurfaceView extends View {\n  \n  public void setZOrderOnTop(boolean onTop) {\n      if (onTop) {\n          mSubLayer = APPLICATION_PANEL_SUBLAYER;\n      } else {\n          mSubLayer = APPLICATION_MEDIA_SUBLAYER;\n      }\n  }\n  \n  public void setZOrderMediaOverlay(boolean isMediaOverlay) {\n    mSubLayer = isMediaOverlay ? APPLICATION_MEDIA_OVERLAY_SUBLAYER : APPLICATION_MEDIA_SUBLAYER;\n  }\n}\n复制代码</code></pre>\n<p>现在，无论是将 <code>SurfaceView</code> 放在页面的上方还是下方，都轻而易举。</p>\n<p>但这仍然无法满足所有诉求，比如针对具有 <code>alpha</code> 通道的透明视频进行渲染时，产品希望其所在的图层位置能够更灵活（在两个 <code>View</code> 之间），但由于 <code>SurfaceView</code> 自身设计的原因，其并无法与视图树融合，这也正是 <code>SurfaceView</code> 饱受诟病的主要原因之一。</p>\n<p>通过辩证的观点来看， <code>SurfaceView</code> 的这种设计虽然满足不了严苛的业务诉求，但在绝大多数场景下，<strong>独立绘图表面</strong> 这种设计都能够保证足够的渲染性能，同时不影响主线程输入事件的处理，绝对是一个优秀的设计。</p>\n<h3>3.子图层类型-插曲</h3>\n<p>值得一提的是，在 <code>SurfaceView</code> 的设计中，设计者还考虑到了音视频渲染时，字幕相关业务的场景，因此额外提供了一个 <code>setZOrderMediaOverlay()</code> 方法：</p>\n<pre><code>// /frameworks/base/core/java/android/view/SurfaceView.java\npublic class SurfaceView extends View {\n  public void setZOrderMediaOverlay(boolean isMediaOverlay) {\n    mSubLayer = isMediaOverlay ? APPLICATION_MEDIA_OVERLAY_SUBLAYER : APPLICATION_MEDIA_SUBLAYER;\n  }\n}\n复制代码</code></pre>\n<p>该方法的设计说明了<code>2</code>点：</p>\n<p>首先，由于 <code>APPLICATION_MEDIA_SUBLAYER</code> 和 <code>APPLICATION_MEDIA_OVERLAY_SUBLAYER</code> 都小于<code>0</code>，因此，无论如何，字幕始终被渲染在页面的下方。又因为视频理应渲染在字幕的下方，所以 <strong>不推荐</strong> 开发者在使用 <code>SurfaceView</code> 渲染视频时调用 <code>setZOrderOnTop(true)</code>，将视频放在页面视图的顶层。</p>\n<p>其次，同时具有 <code>setZOrderOnTop()</code> 和 <code>setZOrderMediaOverlay()</code> 方法，显然是提供给两个不同 <code>SurfaceView</code> 分别使用的，以定义不同的渲染层级，因此同一个页面存在多个 <code>SurfaceView</code> 是正常的，开发者完全可以根据业务场景，合理运用。</p>\n<h3>4. 令人头大的黑屏问题</h3>\n<p>在使用 <code>SurfaceView</code> 的过程中，笔者最终也遇到了 <strong>默认黑屏</strong> 的问题：</p>\n<p>由于视频本身的加载和编解码的耗时，用户总是会先看到 <code>SurfaceView</code> 的黑色背景一闪而过，然后视频才开始播放的情况，对于产品而言，这种交互体验是 <strong>不可容忍</strong> 的。</p>\n<p>通过上文读者知道，<code>SurfaceView</code> 拥有独立的绘制表面，因此常规对付 <code>View</code> 的一些手段——比如 <code>setVisibility()</code> 、<code>setAlpha()</code> 、<code>setBackgroundColor()</code> 并不能解决上述问题；因此，想真正解决它，就必须先弄清楚 <code>SurfaceView</code> 底层的绘制流程。</p>\n<p><code>SurfaceView</code> 虽然特殊，但其作为视图树的一个结点，其依然参与到了视图树常规绘制流程，这里我们直接看 <code>SurfaceView</code> 的 <code>draw()</code> 方法：</p>\n<pre><code>// /frameworks/base/core/java/android/view/SurfaceView.java\npublic class SurfaceView extends View {\n  \n  //...\n  @Override\n  public void draw(Canvas canvas) {\n      if (mDrawFinished &amp;&amp; !isAboveParent()) {             // 1.\n          if ((mPrivateFlags &amp; PFLAG_SKIP_DRAW) == 0) {\n              clearSurfaceViewPort(canvas);\n          }\n      }\n      super.draw(canvas);\n  } \n  \n  private void clearSurfaceViewPort(Canvas canvas) {\n      // ...\n      canvas.drawColor(0, PorterDuff.Mode.CLEAR);         // 2.\n  }\n}\n复制代码</code></pre>\n<p>由此可见，当满足 <code>!isAboveParent()</code> 的条件——即 <code>SurfaceView</code> 的子图层类型位于宿主视图的下方时，<code>SurfaceView</code> 默认会将绘图表面的颜色指定为黑色。</p>\n<p>显然，该问题最简单的解决方式就是对源码进行<code>hook</code>或者反射，遗憾的是，上文我们也提到了，出于安全性的考量，<code>SurfaceView</code> 的源码是没有公开暴露的。</p>\n<p>设计者其实也想到了这个问题，因此额外提供了一个 <code>SurfaceHolder</code> 的 <code>API</code> 接口，通过该接口，开发者可以直接拿到独立绘图表面的 <code>Canvas</code> 对象，以及对这个画布进行绘制操作：</p>\n<pre><code>// /frameworks/base/core/java/android/view/SurfaceHolder.java\npublic interface SurfaceHolder {\n  // ...\n  public Canvas lockCanvas();\n  \n  public void unlockCanvasAndPost(Canvas canvas);\n  //...\n}\n复制代码</code></pre>\n<p>遗憾的是，即使拿到 <code>Canvas</code>，开发者仍然会受到限制：</p>\n<pre><code>// /frameworks/base/core/java/com/android/internal/view/BaseSurfaceHolder.java\npublic abstract class BaseSurfaceHolder implements SurfaceHolder {\n   \n   private final Canvas internalLockCanvas(Rect dirty, boolean hardware) {\n    if (mType == SURFACE_TYPE_PUSH_BUFFERS) {\n        throw new BadSurfaceTypeException(\"Surface type is SURFACE_TYPE_PUSH_BUFFERS\");\n    }\n    // ...\n  }\n}\n复制代码</code></pre>\n<p>这里的代码，笔者引用   <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fblog.csdn.net%2Fluoshengyang%2Farticle%2Fdetails%2F8744683\" title=\"罗升阳\">罗升阳</a> 的 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fwww.kancloud.cn%2Falex_wsc%2Fandroids%2F473787\" title=\"这篇文章\">这篇文章</a> 中的一段来解释：</p>\n<blockquote>\n<p>注意，只有在一个 <code>SurfaceView</code> 的绘图表面的类型不是 <code>SURFACE_TYPE_PUSH_BUFFERS</code> 的时候，我们才可以自由地在上面绘制 <code>UI</code>。我们使用 <code>SurfaceView</code> 来显示摄像头预览或者播放视频时，一般就是会将它的绘图表面的类型设置为 <code>SURFACE_TYPE_PUSH_BUFFERS</code> 。在这种情况下，<code>SurfaceView</code> 的绘图表面所使用的图形缓冲区是完全由摄像头服务或者视频播放服务来提供的，因此，我们就不可以随意地去访问该图形缓冲区，而是要由摄像头服务或者视频播放服务来访问，因为该图形缓冲区有可能是在专门的硬件里面分配的。</p>\n</blockquote>\n<p>由此可见，<code>SurfaceView</code> 黑屏问题的原因是综合且复杂的，无论是通过 <code>setZOrderOnTop()</code> 等方法设置为背景透明（但是会在页面层级的最上方），亦或者调整布局参数，都会有大大小小的一些问题。</p>\n<h2>小结</h2>\n<p>综合来看，<code>SurfaceView</code> 这些饱受争议的问题，从设计的角度来看，都是有其自身考量的。</p>\n<p>而为了解决这些问题，官方后续提供了 <code>TextureView</code> 以替换 <code>SurfaceView</code>，<code>TextureView</code> 的原理是和 <code>View</code> 一样绘制到当前 <code>Activity</code> 的窗口上，因此不存在 <code>SurfaceView</code> 的这些问题。</p>\n<p>换个角度来看，由于 <code>TextureView</code> 渲染依赖于主线程，因此也会导致了新的问题出现。除了性能比较 <code>SurfaceView</code> 会有明显下降外，还会有经常掉帧的问题，有机会笔者会另起一篇进行分享。</p>\n<h2>参考 &amp; 感谢</h2>\n<blockquote>\n<p>细心的读者应该能够发现，关于 <strong>参考&amp;感谢</strong> 一节，笔者着墨越来越多，原因无他，笔者 从不认为 一篇文章就能够讲一个知识体系讲解的面面俱到，本文亦如是。</p>\n<p>因此，读者应该有选择性查看其它优质内容的权利，甚至是为其增加一些简洁的介绍（因为标题大多都很相似），而不是文章末尾甩一堆 <code>https</code> 开头的链接不知所云。</p>\n</blockquote>\n<p><br/>  </p>\n</div>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-09-07 13:28:24", "summary": "启程如果你有过的使用经历，那么你一定和我一样，曾经被它所引发出层出不穷的异状折磨的怀疑人生毕竟，作为一个有理想的开发者，在深入了解之前，你很难想通这样一个问题：为什么把设计的这么难用？不支持动画；不支"}