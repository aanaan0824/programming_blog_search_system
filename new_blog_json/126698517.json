{"blogid": "126698517", "writerAge": "码龄2年", "writerBlogNum": "177", "writerCollect": "59", "writerComment": "19", "writerFan": "20", "writerGrade": "5级", "writerIntegral": "1829", "writerName": "旧事渐暖", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126698517.jpg", "writerRankTotal": "13022", "writerRankWeekly": "7528", "writerThumb": "13", "writerVisitNum": "38662", "blog_read_count": "99", "blog_time": "于 2022-09-05 16:49:17 发布", "blog_title": "2023lc笔试复盘", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>1.友元<br/> 1）全局函数<br/> 2）类<br/> 3）成员函数做友元<br/> 关键字：friend<br/> 主要功能;为了让外部函数可以直接使用私有变量<br/> <a href=\"https://blog.csdn.net/weixin_46098577/article/details/116596183\">https://blog.csdn.net/weixin_46098577/article/details/116596183</a></p>\n<p>2.野指针<br/> 野指针就是指针指向的位置是不可知的（随机的、不正确的、没有明确限制的）指针变量在定义时如果未初始化，其值是随机的，指针变量的值是别的变量的地址，意味着指针指向了一个地址是不确定的变量，此时去解引用就是去访问了一个不确定的地址，所以结果是不可知的。<br/> 指针变量未初始化<br/> 指针变量释放后没有置为NULL<br/> 超出变量作用域<br/> <a href=\"https://blog.csdn.net/lxw907304340/article/details/49759251\">https://blog.csdn.net/lxw907304340/article/details/49759251</a><br/> 3.函数参数传递方式<br/> 值传递、地址传递（引用传递、指针传递）<br/> 4.浅拷贝和深拷贝<br/> 浅拷贝：一个人，之前叫张三，现在叫李四，还是那个人<br/> 深拷贝：一个人，叫张三，克隆了新的一具肉体出来，叫李四<br/> 5.构造函数和析构函数重载<br/> 构造函数可以，析构不可以<br/> 构造函数可以被重载，因为构造函数可以有多个且可以带参数。</p>\n<p>析构函数不可以被重载，因为析构函数只能有一个，且不能带参数。</p>\n<blockquote>\n<p>构造函数主要用来在创建对象时完成对对象属性的一些初始化等操作, 当创建对象时, 对象会自动调用它的构造函数。一般来说,<br/> 构造函数有以下三个方面的作用:</p>\n<p>1、给创建的对象建立一个标识符；</p>\n<p>2、为对象数据成员开辟内存空间；</p>\n<p>3、完成对象数据成员的初始化。</p>\n</blockquote>\n<p>6.<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\40a122fbdfc342d5aa0ea71ec413ac65.png\"/><br/> 这个最后删除的是父类对象，不会调用子类析构函数<br/> 7.类的大小<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0296332db48a4d89bd0c8d671913c9c2.png\"/><br/> 这个是16.。。<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ea0e0bcf19a84ba4980a4110f6e37044.png\"/><br/> <a href=\"https://blog.csdn.net/fengxinlinux/article/details/72836199\">https://blog.csdn.net/fengxinlinux/article/details/72836199</a><br/> 8.静态成员变量和静态成员函数<br/> 静态成员函数类外定义不能加static前缀<a href=\"https://blog.csdn.net/wcybrain/article/details/79048052?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E7%B1%BB%E5%A4%96%E5%AE%9A%E4%B9%89&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-7-79048052.142%5Ev46%5Epc_ran_alice&amp;spm=1018.2226.3001.4187\">https://blog.csdn.net/wcybrain/article/details/79048052?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E7%B1%BB%E5%A4%96%E5%AE%9A%E4%B9%89&amp;utm_medium=distribute.pc_search_result.none-task-blog-2<sub>all</sub>sobaiduweb~default-7-79048052.142<sup>v46</sup>pc_ran_alice&amp;spm=1018.2226.3001.4187</a></p>\n<p><strong>静态成员变量可以在建立对象前就初始化：</strong><br/> 静态成员变量的初始化是在类外进行的，和建立对象与否没有关系；<br/> <strong>静态成员函数中不可以使用this指针：</strong><br/> 静态成员函数并不是针对某个类的实例对象，而是属于整个类的，为所有的对象实例所共有。他在作用域的范围内是全局的，独立于类的对象之外的。他只对类内部的静态成员变量做操作。当实例化一个类的对象时候，里面不存在静态成员的。this指针是相当于一个类的实例的指针，this是用来操作对象实例的内容的，既然静态成员函数和变量都是独立于类的实例对象之外的，他就不能用this指针。也不能操作非静态成员。再有你要想想设计静态成员的用意在哪里，就会更加明了了。</p>\n<h4><a id=\"_47\"></a>操作符重载</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\28906e8292454b8cb8760b7d4defb354.png\"/></p>\n<h4><a id=\"_50\"></a>权限修饰符</h4>\n<p><a href=\"https://www.runoob.com/cplusplus/cpp-class-access-modifiers.html\">https://www.runoob.com/cplusplus/cpp-class-access-modifiers.html</a></p>\n<h4><a id=\"C_53\"></a>C++空类，默认产生哪些函数</h4>\n<p>默认构造函数、默认拷贝构造函数、默认析构函数、默认赋值运算符</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Empty</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n<span class=\"token function\">Empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 缺省构造函数</span>\n\n<span class=\"token function\">Empty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Empty<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 拷贝构造函数</span>\n\n<span class=\"token operator\">~</span><span class=\"token function\">Empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 析构函数</span>\n\nEmpty<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Empty<span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 赋值运算符</span>\n\nEmpty<span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 取址运算符</span>\n\n<span class=\"token keyword\">const</span> Empty<span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 取址运算符 const</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<h4><a id=\"_76\"></a>引用与指针区别</h4>\n<p><a href=\"https://blog.csdn.net/xsydalao/article/details/93623647\">https://blog.csdn.net/xsydalao/article/details/93623647</a><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0cd63707abc94daba1aeecc957fd7ca2.png\"/></p>\n<h4><a id=\"_79\"></a>内存分配的方式</h4>\n<p>静态存储、堆、栈</p>\n<h4><a id=\"_81\"></a>友元没有破坏封装性</h4>\n<p>原来是用public、private等来做权限限制，现在是用关键字friend来进行权限制。</p>\n<h4><a id=\"_83\"></a>不可以同时存在相同名称的虚函数和静态函数</h4>\n<p>虽然非静态的多了一个指向对象的指针做为参数，但当用类对象调用此函数时，编译器仍分不清调用的是哪个，故不允许重载具有相同参数类型的静态和非静态成员函数 但同名同参的const函数与非const函数则是可以</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-05 16:49:17", "summary": "友元全局函数类成员函数做友元关键字：主要功能为了让外部函数可以直接使用私有变量野指针野指针就是指针指向的位置是不可知的随机的、不正确的、没有明确限制的指针变量在定义时如果未初始化，其值是随机的，指针变"}