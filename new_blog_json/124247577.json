{"blogid": "124247577", "writerAge": "码龄3年", "writerBlogNum": "14", "writerCollect": "12", "writerComment": "1", "writerFan": "161", "writerGrade": "2级", "writerIntegral": "114", "writerName": "不知道取啥..", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124247577.jpg", "writerRankTotal": "95104", "writerRankWeekly": "692894", "writerThumb": "2", "writerVisitNum": "8850", "blog_read_count": "5691", "blog_time": "已于 2022-07-17 11:29:04 修改", "blog_title": "JS indexOf 用法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h3>1.Array.indexOf()方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。</h3>\n<p>语法：arr.indexOf(searchElement[, fromIndex])</p>\n<p>参数：</p>\n<p>searchElement：需要查招的元素</p>\n<p>fromIndex：开始查找的位置。如果该索引值大于或等于数组长度，意味着不会在数组里查找，返回-1。如果参数中提供的索引值是一个负值，则将其作为数组末尾的一个抵消，即-1表示从最后一个元素开始查找，-2表示从倒数第二个元素开始查找 ，以此类推。 注意：如果参数中提供的索引值是一个负值，并不改变其查找顺序，查找顺序仍然是从前向后查询数组。如果抵消后的索引值仍小于0，则整个数组都将会被查询。其默认值为0.</p>\n<p>返回值：首个被找到的索引位置，如果找不到则返回-1</p>\n<p>例子：</p>\n<pre><code class=\"language-javascript\">let arr = [1,2,3,4,5,4,3,2,1];\n\nconsole.log(arr.indexOf(1)); // 没有填fromIndex所以默认从索引为0的位置开始往后查找\n// 0\nconsole.log(arr.indexOf(1,1)); // 表示从索引为1的位置开始往后查找\n// 8</code></pre>\n<p>案例：利用indexOf实现数组去重</p>\n<pre><code class=\"language-javascript\">// 想要的结果是[1,2,3,4,5]\nlet arr = [1, 2, 3, 1, 2, 4, 5];\n// 利用arr.filter遍历出arr数组里的所有值和相对索引\nlet newArr = arr.filter(function (value, index, step) {\n    // 判断他第一次出现的位置是不是当前索引，是的话返回给newArr\n    return step.indexOf(value) == index;\n});\nconsole.log(newArr);\n// [1,2,3,4,5]\n</code></pre>\n<p> <strong>扩展：上面代码中的<span style=\"color:#fe2c24;\">filter</span>的使用：<a class=\"link-info\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" title=\"点击查看\">点击查看</a></strong></p>\n<h3>2.String.indexOf() 方法返回调用它的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\" title=\"String\">String</a> 对象中第一次出现的指定值的索引，如果不存在，则返回-1。</h3>\n<p>语法：str.indexOf(searchElement[, fromIndex])</p>\n<p>参数：</p>\n<p>searchStr：需要查招的字符</p>\n<p>fromIndex：开始查找的位置。如果该索引值大于或等于数组长度，意味着不会在数组里查找，返回-1。如果参数中提供的索引值是一个负值，则将其作为数组末尾的一个抵消，即-1表示从最后一个元素开始查找，-2表示从倒数第二个元素开始查找 ，以此类推。 注意：如果参数中提供的索引值是一个负值，并不改变其查找顺序，查找顺序仍然是从前向后查询数组。如果抵消后的索引值仍小于0，则整个数组都将会被查询。其默认值为0.</p>\n<p>返回值：首个被找到的索引位置，如果找不到则返回-1</p>\n<p>例子：</p>\n<pre><code class=\"language-javascript\">let str = 'abcdcba';\n\nconsole.log(str.indexOf('a')); // 没有填fromIndex所以默认从索引为0的位置开始往后查找\n// 0\nconsole.log(str.indexOf('a',1)); // 表示从索引为1的位置开始往后查找\n// 6\n\n</code></pre>\n<p>str.indexOf有一个奇怪的现象，当searchStr是一个空字符串的时候，他会返回fromIndex的值，比如fromIndex不填的时候他默认是0，他返回的结果就是0。</p>\n<p>如果fromIndex的值是他本身的长度还是大于他，他都会返回他本身的length，直接看代码</p>\n<pre><code class=\"language-javascript\">let str = 'abcdcba';\n\nconsole.log(str.indexOf(''));\n// 0\nconsole.log(str.indexOf('',0));\n// 0\nconsole.log(str.indexOf('',3));\n// 3\nconsole.log(str.indexOf('',str.length));\n// 7\nconsole.log(str.indexOf('',100));\n// 7</code></pre>\n<p>案例：屏蔽关键是：wc</p>\n<pre><code class=\"language-javascript\">let str = 'on tow wc tow wc on';\nlet k = 'wc';\nwhile (str.indexOf(k) != -1){\n    str = str.replace(k,'*' * k.length);\n}\nconsole.log(str);\n// on tow * tow * on</code></pre>\n<p>扩展：<a class=\"link-info\" href=\"https://blog.csdn.net/qq_45578842/article/details/124249014?spm=1001.2014.3001.5501\" title=\"str.replace的使用\">str.replace的使用</a></p>\n</div>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-07-17 11:29:04", "summary": "方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回。语法：参数：：需要查招的元素：开始查找的位置。如果该索引值大于或等于数组长度，意味着不会在数组里查找，返回。如果参数中提供的索引值"}