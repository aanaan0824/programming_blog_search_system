{"blogid": "125521606", "writerAge": "码龄2年", "writerBlogNum": "373", "writerCollect": "46704", "writerComment": "49114", "writerFan": "114715", "writerGrade": "10级", "writerIntegral": "103428", "writerName": "呆呆敲代码的小Y", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125521606.jpg", "writerRankTotal": "13", "writerRankWeekly": "238", "writerThumb": "18671", "writerVisitNum": "11979742", "blog_read_count": "1220", "blog_time": "于 2022-07-18 08:34:00 发布", "blog_title": "【100个 Unity实用技能】| C#中List.Find 方法详解 查找符合要求的第一个元素并返回", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\54341edb9ab04ca98afc7a96d1bab2c3.png\"/></p>\n<h2><a id=\"font_colorff6984_size5_Unity_font_6\"></a><font color=\"#ff6984\" size=\"5\"> Unity </font>小科普</h2>\n<p>老规矩，先介绍一下<font color=\"#ff6984\" size=\"4\"> <strong>Unity</strong> </font>的科普小知识：</p>\n<ul><li><font color=\"#ff6984\" size=\"4\"><strong>Unity</strong></font>是 实时3D互动内容创作和运营平台 。</li><li>包括<font color=\"#green\" size=\"4\">游戏开发</font>、<font color=\"#green\" size=\"4\">美术</font>、<font color=\"#green\" size=\"4\">建筑</font>、<font color=\"#green\" size=\"4\">汽车设计</font>、<font color=\"#green\" size=\"4\">影视</font>在内的所有创作者，借助<font color=\"#ff6984\" size=\"4\"> <strong>Unity</strong> </font>将创意变成现实。</li><li><font color=\"#ff6e84\" size=\"4\"><strong>Unity</strong></font> 平台提供一整套完善的软件解决方案，可用于创作、运营和变现任何实时互动的2D和3D内容，支持平台包括<font color=\"#green\" size=\"4\">手机</font>、<font color=\"#green\" size=\"4\">平板电脑</font>、<font color=\"#green\" size=\"4\">PC</font>、<font color=\"#green\" size=\"4\">游戏主机</font>、<font color=\"#green\" size=\"4\">增强现实</font>和<font color=\"#green\" size=\"4\">虚拟现实设备。 </font></li><li>也可以简单把 <font color=\"#ff6e84\" size=\"4\"><strong>Unity</strong></font> 理解为一个<font color=\"#ee82ee\" size=\"4\">游戏引擎</font>，可以用来专业制作<font color=\"#ee0000\" size=\"4\">游戏</font>！</li></ul>\n<hr/>\n<h2><a id=\"font_colorff6984_size5_Unity_font_15\"></a><font color=\"#ff6984\" size=\"5\"> Unity </font>实用小技能学习</h2>\n<h3><a id=\"CListFind___16\"></a>C#中List.Find 方法详解 查找符合要求的第一个元素并返回</h3>\n<p>前面有篇文章介绍了List通过<code>Exists</code>来判断是否存在这个对象，返回一个布尔值。</p>\n<p>这篇文章与其类似，不过返回的不是布尔值，而是具体的对象。</p>\n<pre><code class=\"prism language-csharp\"> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">T</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Predicate<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> match<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>泛型T为list定义的时候用户决定的存储类型，Predicate match 是一个委托，可理解为函数指针。</p>\n<p>具体用法如下：</p>\n<p><strong>基础类型</strong></p>\n<pre><code class=\"prism language-csharp\">        <span class=\"token comment\">//基础类型</span>\n        <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> l <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=&gt;</span> t <span class=\"token operator\">==</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"返回的值：\"</span><span class=\"token operator\">+</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>引用类型</strong></p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">//引用类型</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">UserTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//引用类型</span>\n        <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">&gt;</span></span> list1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">User</span> <span class=\"token punctuation\">{<!-- --></span> Name <span class=\"token operator\">=</span> <span class=\"token string\">\"小Y\"</span><span class=\"token punctuation\">,</span> Age <span class=\"token operator\">=</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">User</span>  <span class=\"token punctuation\">{<!-- --></span> Name <span class=\"token operator\">=</span> <span class=\"token string\">\"小小Y\"</span><span class=\"token punctuation\">,</span> Age <span class=\"token operator\">=</span> <span class=\"token number\">22</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n              <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">User</span>  <span class=\"token punctuation\">{<!-- --></span> Name <span class=\"token operator\">=</span> <span class=\"token string\">\"小Y\"</span><span class=\"token punctuation\">,</span> Age <span class=\"token operator\">=</span> <span class=\"token number\">12</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> l <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=&gt;</span> t<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">==</span> <span class=\"token string\">\"小Y\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Age：\"</span> <span class=\"token operator\">+</span> l<span class=\"token punctuation\">.</span>Age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>返回结果如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dcbf714a6a4b47d6804972f72154981b.png\"/></p>\n<p><strong>注意点：</strong></p>\n<ul><li>Find返回的值，如果找到，会返回List中的被找到的对象的值，如果找不到，就会返回该种对象的默认值。</li><li>对象为 <strong>引用类型</strong> 时，对象的值为指向该对象的内存地址，可以直接用那个返回值直接修改list内的元素，此时对象的默认值为null。</li><li>如果对象为 <strong>值类型</strong> ，对象的值就是对象本身，返回值传回的是该对象的一个拷贝，对传回那个对象的修改不能影响list中的元素。</li></ul>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-07-18 08:34:00", "summary": "在这里插入图片描述小科普老规矩，先介绍一下的科普小知识：是实时互动内容创作和运营平台。包括游戏开发、美术、建筑、汽车设计、影视在内的所有创作者，借助将创意变成现实。平台提供一整套完善的软件解决方案，可"}