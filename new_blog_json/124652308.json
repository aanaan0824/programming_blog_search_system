{"blogid": "124652308", "writerAge": "码龄3年", "writerBlogNum": "5", "writerCollect": "17", "writerComment": "12", "writerFan": "21", "writerGrade": "1级", "writerIntegral": "92", "writerName": "V3geD4g", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124652308.jpg", "writerRankTotal": "107842", "writerRankWeekly": "1072574", "writerThumb": "10", "writerVisitNum": "7839", "blog_read_count": "1686", "blog_time": "已于 2022-05-08 18:44:59 修改", "blog_title": "春秋杯CTF2022 WP", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>已经过了交wp的时间了，这里就不再详细写了，写个大概吧</p>\n<h1><a id=\"WEB_2\"></a>WEB</h1>\n<h2><a id=\"Mercycode_4\"></a>Mercy-code</h2>\n<p>无参数RCE，参考bytectf boring code</p>\n<p><a href=\"https://blog.csdn.net/a3320315/article/details/102989485/\">https://blog.csdn.net/a3320315/article/details/102989485/</a></p>\n<p>简单的说就是想办法构造 ‘.’ 然后拿到文件名，show_source就能拿到flag，这里我用的是数学函数</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\606c74158d0e4f868537edc8271c4394.png\"/></p>\n<h2><a id=\"picture_convert_15\"></a>picture convert</h2>\n<p>flask的题，实际上是个命令注入，源码如下</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\n<span class=\"token keyword\">import</span> hashlib\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> request<span class=\"token punctuation\">,</span>session\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> render_template\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> uuid\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">'SECRET_KEY'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\nBlack_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">b\"metadata\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b\"$\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b\"qx\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'tmp'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'&amp;#'</span><span class=\"token punctuation\">]</span>\n\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">check_data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> black_key <span class=\"token keyword\">in</span> Black_list<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> black_key <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">file_md5</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> hashlib<span class=\"token punctuation\">.</span>md5<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">\"index.html\"</span><span class=\"token punctuation\">)</span>\n\n\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/upload'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">upload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">type</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jpg\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">)</span>\n    file_info <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token string\">'file'</span><span class=\"token punctuation\">]</span>\n    file_data <span class=\"token operator\">=</span> file_info<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> check_data<span class=\"token punctuation\">(</span>file_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"No hacker\"</span>\n    f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./static/images/tmpimg\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span>\n    f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>file_data<span class=\"token punctuation\">)</span>\n    f<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    new_filename <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>uuid<span class=\"token punctuation\">.</span>uuid4<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">type</span>\n    session<span class=\"token punctuation\">[</span><span class=\"token string\">\"filename\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> new_filename\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"文件上传成功，其他模块还在开发中~~~\"</span>\n\n\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/info'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    json_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"info\"</span><span class=\"token punctuation\">:</span> os<span class=\"token punctuation\">.</span>popen<span class=\"token punctuation\">(</span><span class=\"token string\">\"su - exif -c '/app/exiftool-12.23/exiftool /app/static/images/tmpimg'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>json_data<span class=\"token punctuation\">)</span>\n\n\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/convert'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    os<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"su - conv -c 'cd /app/static/images/ &amp;&amp; convert tmpimg </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>session<span class=\"token punctuation\">[</span><span class=\"token string\">'filename'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">[</span><span class=\"token string\">\"filename\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    json_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">:</span> session<span class=\"token punctuation\">[</span><span class=\"token string\">'filename'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>json_data<span class=\"token punctuation\">)</span>\n\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>可以看到原本可以就行exiftool的rce，但是被过滤了。<br/> 仔细观察可以发现</p>\n<pre><code class=\"prism language-python\"><span class=\"token builtin\">type</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jpg\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>这里，type是我们可以控制的，最后作为 <strong>session[“filename”]</strong> 在convert路由中会拼接到os.system中执行，所以就造成了代码注入<br/> 首先我们需要upload一个文件，拿到恶意文件名的session值，然后拿着这个session值访问convert路由，即可造成命令注入</p>\n<p>这里当时没有截图，数据包大概是这个样子的</p>\n<p>拿到包含恶意文件名的session</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\64f6fe2c101647a28aa5b6dd5aa6b004.png\"/><br/> 访问convert触发</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3eb5b1824af84a9b8f0d120dfec5b175.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\427bd7473d1d4e459e9dcb3293ea8071.png\"/></p>\n<h1><a id=\"MISC_111\"></a>MISC</h1>\n<h2><a id=\"_113\"></a>签到</h2>\n<p>去公众号拿到图片，按照图片上弹琴就有flag</p>\n<h2><a id=\"tiger_117\"></a>tiger</h2>\n<p>套娃题目，简单说下吧</p>\n<p>1.png-key，rot47 ：28a217fe</p>\n<p>2.python lsb.py extract key.png-stego.png 1.txt 28a217fe</p>\n<p>得到压缩包密码</p>\n<p><strong>71zr9H6jnXRHn64WBxMbCzz16saCZWiw</strong></p>\n<p>3.明文攻击，得到解压密码为</p>\n<p><strong>Nh6i@=</strong></p>\n<p>4.解压出来是个二维码，用python扫一下，得到一串0宽</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pyzbar<span class=\"token punctuation\">.</span>pyzbar <span class=\"token keyword\">as</span> pyzbar\n<span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image\n\nimg <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flag.png'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># decode image</span>\nbarcodes <span class=\"token operator\">=</span> pyzbar<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># extract results</span>\n<span class=\"token keyword\">for</span> barcode <span class=\"token keyword\">in</span> barcodes<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># render barcode and data to image</span>\n    f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span>\n    f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>barcode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    f<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>barcode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7651812787bc492985bdafbe87fed645.png\"/><br/> 解码用这个</p>\n<p><a href=\"https://yuanfux.github.io/zero-width-web/\">https://yuanfux.github.io/zero-width-web/</a></p>\n<p>解出来</p>\n<p>Ƀwl wvn n xhkm SBWav krttqbu gfq gja jhheu up yljycxjpu, vvtx R jzeh pydv usd zp lalhmk, ic brtkac ya whep{866q3755-t358-5119-txnr-juw666e8099m}, uroa okv!</p>\n<p>5.维吉尼亚</p>\n<p><a href=\"https://www.guballa.de/vigenere-solver\">https://www.guballa.de/vigenere-solver</a></p>\n<p>Ƀou are a good CTFer because you can solve my challenge, next I will give you my secret, my secret is flag{866d3755-c358-5119-abeb-bda666a8099d}, have fun!</p>\n<h2><a id=\"Capture_Radiate_Chart_165\"></a>Capture Radiate Chart</h2>\n<p>有点小猜谜，仔细看题目发现首字母是crc，加上题目给的png分了那么多idat，肯定有问题，观察可以发现每个idat的crc合起来可以得到一个rar压缩包<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c17acb5e5fb1475fbf9813fa612ca57b.png\"/></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image\n<span class=\"token keyword\">def</span> <span class=\"token function\">subStrIndex</span><span class=\"token punctuation\">(</span>substr<span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">while</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>substr<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        temIndex <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>substr<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>temIndex<span class=\"token punctuation\">)</span>\n        index <span class=\"token operator\">=</span> temIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> result\nf <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'alien.png'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nIDAT_index <span class=\"token operator\">=</span> subStrIndex<span class=\"token punctuation\">(</span><span class=\"token string\">b'IDAT'</span><span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">)</span>\nIDAT_len <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> IDAT_index<span class=\"token punctuation\">:</span>\n    IDAT_len<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">.</span>from_bytes<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string\">'big'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nCRC <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> IDAT_index<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># print(f[i-8:i-4].hex())</span>\n    CRC<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span>i<span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nCRC<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token string\">b'IEND'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">:</span>f<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token string\">b'IEND'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nCRC <span class=\"token operator\">=</span> CRC<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># print(CRC)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">.</span>fromhex<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>CRC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nf <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1.rar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span>\nf<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">.</span>fromhex<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>CRC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>压缩包解压出来是个pdf，但是无内容，仔细观察发现里面塞了张png的IDAT块，但是去了头尾，自己加回去就行，宽高pdf里也都有<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b00a9731e83e42c79568aeecd1c3da19.png\"/><br/> 补全头尾得到flag<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ba1d92be180242da83818fb9c3b57231.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\01ec22a1e3e24c4faa9a3aa479a1430f.png\"/></p>\n<h2><a id=\"PINTU_203\"></a>PINTU</h2>\n<p>基础的拼图题，坐标在bmp的前面的冗余位里面，读取出来写个脚本拼就行<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bd0a9e5e984646c0a1134d992bc1c406.png\"/></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\nimg <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span><span class=\"token string\">'RGB'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token operator\">*</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token operator\">*</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">14400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'img/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>i<span class=\"token punctuation\">}</span></span><span class=\"token string\">.bmp'</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token punctuation\">,</span>y <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n    tmpimg <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'img/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>i<span class=\"token punctuation\">}</span></span><span class=\"token string\">.bmp'</span></span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">.</span>paste<span class=\"token punctuation\">(</span>tmpimg<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">*</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nimg<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">'all.bmp'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"_223\"></a>被带走的机密文件</h2>\n<p>磁盘取证，如果有取证大师的话非常好做，可以直接发现有残留的打印机缓存文件，没有就麻烦一点，这里可以用ftk挂载后去做</p>\n<p>ftk挂载后，进入这个目录<strong>Windows\\System32\\spool\\PRINTERS\\00004.SPL</strong></p>\n<p>这个是打印机的缓存文件，可以用下面这个软件打开</p>\n<p><a href=\"http://www.prnwatch.com/ok-printer-viewer/\">http://www.prnwatch.com/ok-printer-viewer/</a></p>\n<p>打开后拿到flag<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\03ae417e48de45efad2d9b5a4745b998.png\"/></p>\n<h2><a id=\"RecoverMe_235\"></a>RecoverMe</h2>\n<p>首先给了一个文本文档，说给了vera加密的磁盘文件，同时也给了密码表，可以去爆破，这里我用的是passware，只能说passware真的好用，yyds！</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9e2795c36d1b4c7ab07c7fec314a52b9.png\"/></p>\n<p>拿到密码后用veracrypt挂载，发现两张没啥用的图片，所以用winhex试了下，发现流量包</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3446759064e942a38e7ec846e9cddc3e.png\"/></p>\n<p>导出后发现是icmp流量，每个包的长度都不一样，用tshark导出后转hex，发现是个压缩包</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d366e79adeb246d78e903e72724a52f0.png\"/></p>\n<pre><code class=\"prism language-python\">tshark<span class=\"token punctuation\">.</span>exe <span class=\"token operator\">-</span>r <span class=\"token punctuation\">.</span>\\secret<span class=\"token punctuation\">.</span>pcapng <span class=\"token operator\">-</span>T fields <span class=\"token operator\">-</span>e data<span class=\"token punctuation\">.</span><span class=\"token builtin\">len</span> <span class=\"token operator\">-</span>Y icmp<span class=\"token punctuation\">.</span>resp_to <span class=\"token operator\">&gt;</span> out<span class=\"token punctuation\">.</span>txt\n</code></pre>\n<pre><code>f = open('out.txt').readlines()\nfor i in f:\n    if i.strip() == '':\n        print('00', end='')\n    else:\n        print(hex(int(i.strip()))[2:].zfill(2),end='')\ns = bytes.fromhex('504b0304140001000000c99e7c54f14d019732000000260000000a0000007365637265742e747874ca074c3412d95fd1106721520cf2ce8a67b8f1412b394b2b82706bb2596cbed90bf669edb520eaf3e2f0b682616d0184c4a8504b01023f00140001000000c99e7c54f14d019732000000260000000a00240000000000000020000000000000007365637265742e7478740a0020000000000001001800ed4faa8d9a42d8012210ebaa9a42d80118ff50729a42d801504b050600000000010001005c0000005a00000015006970b5c4b1e4bbafcac7b9cad2e2b5c4c2f0a3bf00')\nf1 = open('1.zip','wb')\nf1.write(s)\nf1.close()\n</code></pre>\n<p>拿到压缩包后发现有密码，但是注释给了提示，说看ip，返现ip在有38和39，拿出来转01就是密码<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\07941eeadc9b40d8b91f7904c4f6b2ea.png\"/></p>\n<pre><code class=\"prism language-python\">tshark<span class=\"token punctuation\">.</span>exe <span class=\"token operator\">-</span>r <span class=\"token punctuation\">.</span>\\secret<span class=\"token punctuation\">.</span>pcapng <span class=\"token operator\">-</span>T fields <span class=\"token operator\">-</span>e ip<span class=\"token punctuation\">.</span>src <span class=\"token operator\">-</span>Y icmp<span class=\"token punctuation\">.</span>resp_to <span class=\"token operator\">&gt;</span> out1<span class=\"token punctuation\">.</span>txt\n</code></pre>\n<pre><code class=\"prism language-python\">f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'out1.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token string\">'38'</span> <span class=\"token keyword\">in</span> i<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\ns <span class=\"token operator\">=</span> <span class=\"token string\">'011100000110000101110011011100110111011101101111011100100110010001101000001100110111001000110011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'</span>\ntmp <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">:</span>\n    tmp <span class=\"token operator\">+=</span> i\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">8</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n        tmp <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n</code></pre>\n<p>解压后得到flag</p>\n<h1><a id=\"CRYPTO_294\"></a>CRYPTO</h1>\n<h2><a id=\"Train_296\"></a>Train</h2>\n<p>题目多半是出错了，通过第一步sha256校验后直接随便输入两个一样的字符串就能得到flag</p>\n<p>源码</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>number <span class=\"token keyword\">import</span><span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> hashlib <span class=\"token keyword\">import</span> sha256\n<span class=\"token keyword\">import</span> socketserver\n<span class=\"token keyword\">import</span> signal\n<span class=\"token keyword\">import</span> string\n<span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">from</span> secret <span class=\"token keyword\">import</span> flag\nbanner <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">br'''\n .oooooo..o                             oooo  oooo  ooooooooooooo                     o8o            \nd8P'    `Y8                             `888  `888  8'   888   `8                     `\"'            \nY88bo.      ooo. .oo.  .oo.    .oooo.    888   888       888      oooo d8b  .oooo.   oooo  ooo. .oo.   \n `\"Y8888o.  `888P\"Y88bP\"Y88b  `P  )88b   888   888       888      `888\"\"8P `P  )88b  `888  `888P\"Y88b  \n     `\"Y88b  888   888   888   .oP\"888   888   888       888       888      .oP\"888   888   888   888  \noo     .d8P  888   888   888  d8(  888   888   888       888       888     d8(  888   888   888   888  \n8\"\"88888P'  o888o o888o o888o `Y888\"\"8o o888o o888o     o888o     d888b    `Y888\"\"8o o888o o888o o888o \n'''</span>\nn0 <span class=\"token operator\">=</span> <span class=\"token number\">30798082519452208630254982405300548841337042015746308462162479889627080155514391987610153873334549377764946092629701</span>\ng <span class=\"token operator\">=</span> <span class=\"token number\">64146569863628228208271069055817252751116365290967978172021890038925428672043</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">TrainHash</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    n <span class=\"token operator\">=</span> n0\n    msg <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">,</span>msg<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> msg <span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> g <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span>\n        n <span class=\"token operator\">=</span> n <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">383</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">-</span> <span class=\"token number\">0xf5e33dabb114514</span>\ntable <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span>ascii_letters<span class=\"token operator\">+</span>string<span class=\"token punctuation\">.</span>digits\nMENU <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">br'''\n&lt;OPTION&gt;\n'''</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Task</span><span class=\"token punctuation\">(</span>socketserver<span class=\"token punctuation\">.</span>BaseRequestHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_recvall</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        BUFF_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">2048</span>\n        data <span class=\"token operator\">=</span> <span class=\"token string\">b''</span>\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            part <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>BUFF_SIZE<span class=\"token punctuation\">)</span>\n            data <span class=\"token operator\">+=</span> part\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>part<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> BUFF_SIZE<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">break</span>\n        <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> newline<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> newline<span class=\"token punctuation\">:</span>\n                msg <span class=\"token operator\">+=</span> <span class=\"token string\">b'\\n'</span>\n            self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>sendall<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> prompt<span class=\"token operator\">=</span><span class=\"token string\">b'SERVER &lt;INPUT&gt;: '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>prompt<span class=\"token punctuation\">,</span> newline<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_recvall<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">proof_of_work</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        proof <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">)</span><span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        sha <span class=\"token operator\">=</span> sha256<span class=\"token punctuation\">(</span>proof<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">b\"[+] sha256(XXXX+\"</span> <span class=\"token operator\">+</span> proof<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">b\") == \"</span> <span class=\"token operator\">+</span> sha <span class=\"token punctuation\">)</span>\n        XXXX <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>prompt <span class=\"token operator\">=</span> <span class=\"token string\">b'[+] Plz Tell Me XXXX :'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>XXXX<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">4</span> <span class=\"token keyword\">or</span> sha256<span class=\"token punctuation\">(</span>XXXX <span class=\"token operator\">+</span> proof<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> sha<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n        <span class=\"token keyword\">return</span> sha<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        signal<span class=\"token punctuation\">.</span>alarm<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n        FirstBlockHash <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>proof_of_work<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> FirstBlockHash<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>banner<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">b\"\\nPlease give me 2 strings that are same when are hashed  =.=  \"</span><span class=\"token punctuation\">)</span>\n        string1 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        string2 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> TrainHash<span class=\"token punctuation\">(</span>string1<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> TrainHash<span class=\"token punctuation\">(</span>string2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\nJust do it!~ You can do more!'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> string2<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">50</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> string1<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">50</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">b\"\\nConnection has been closed  =.=  \"</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadedServer</span><span class=\"token punctuation\">(</span>socketserver<span class=\"token punctuation\">.</span>ThreadingMixIn<span class=\"token punctuation\">,</span> socketserver<span class=\"token punctuation\">.</span>TCPServer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ForkedServer</span><span class=\"token punctuation\">(</span>socketserver<span class=\"token punctuation\">.</span>ForkingMixIn<span class=\"token punctuation\">,</span> socketserver<span class=\"token punctuation\">.</span>TCPServer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    HOST<span class=\"token punctuation\">,</span> PORT <span class=\"token operator\">=</span> <span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10012</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HOST:POST \"</span> <span class=\"token operator\">+</span> HOST<span class=\"token operator\">+</span><span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>PORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    server <span class=\"token operator\">=</span> ForkedServer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>HOST<span class=\"token punctuation\">,</span> PORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Task<span class=\"token punctuation\">)</span>\n    server<span class=\"token punctuation\">.</span>allow_reuse_address <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    server<span class=\"token punctuation\">.</span>serve_forever<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>sha256爆破</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 爆破sha256</span>\n<span class=\"token keyword\">import</span> hashlib\n<span class=\"token keyword\">def</span> <span class=\"token function\">sha256</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    m <span class=\"token operator\">=</span> hashlib<span class=\"token punctuation\">.</span>sha256<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    m<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> m<span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">from</span> string <span class=\"token keyword\">import</span> ascii_letters<span class=\"token punctuation\">,</span>digits\nd <span class=\"token operator\">=</span> ascii_letters <span class=\"token operator\">+</span> digits\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> d<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> d<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> d<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> l <span class=\"token keyword\">in</span> d<span class=\"token punctuation\">:</span>\n                res <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span>j<span class=\"token operator\">+</span>k<span class=\"token operator\">+</span>l\n                <span class=\"token keyword\">if</span> sha256<span class=\"token punctuation\">(</span>res<span class=\"token operator\">+</span><span class=\"token string\">'FcPzD2zaMLX8gwqF'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token string\">'639a9844067973c82a5b11cc432d9c18caf2316146a03b59b4787130fcaa41ed'</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">break</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-05-08 18:44:59", "summary": "已经过了交的时间了，这里就不再详细写了，写个大概吧无参数，参考简单的说就是想办法构造然后拿到文件名，就能拿到，这里我用的是数学函数在这里插入图片描述的题，实际上是个命令注入，源码如下"}