{"blogid": "123543847", "writerAge": "码龄1年", "writerBlogNum": "76", "writerCollect": "151", "writerComment": "19", "writerFan": "174", "writerGrade": "4级", "writerIntegral": "992", "writerName": "__JAN__", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123543847.jpg", "writerRankTotal": "18506", "writerRankWeekly": "215917", "writerThumb": "44", "writerVisitNum": "52165", "blog_read_count": "3027", "blog_time": "于 2022-03-17 14:16:22 发布", "blog_title": "C++——bitset", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>顾名思义，bitset就是比特集合，用于位运算等操作。</p>\n<p>固定长度，支持随机访问</p>\n<p>同替他模板类一样，bitset的使用方法和其他模板类差别不大</p>\n<blockquote>\n<p><strong>bitset&lt;n&gt; b   </strong>     b有n位，被默认设置位0，n必须为常量表达式</p>\n<p><strong>bitset&lt;n&gt; b(u) </strong>   b是<strong>unsigned long long </strong>的低n位比特串拷贝，如果超出u的位数，剩余的被设置为0</p>\n<p>有时候可能将字符串与比特串之间互相转换，可用到下面的构造函数</p>\n<p><strong>bitset&lt;n&gt; b(s, pos, m, zero, one) </strong></p>\n<p>b是string <strong>s</strong> 从<strong>pos</strong>位开始m个字符的拷贝s只能包含<strong>zero/one</strong>， 否则会抛出一个<strong>invalid_arguement</strong>异常。字符在b中分别保存位zero one. pos默认值为0， m默认为std::string::npos，zero默认为'0', one 默认为'1'</p>\n<p><strong>bitset&lt;n&gt; b(cp, pos, m, zero, one)</strong></p>\n<p>同上面的构造函数相同，但是从cp指向的字符数组中拷贝字符。如果没有提供m, 则cp必须指向一个C风格的字符串。如果提供了m，则从cp开始必须至少有m个zero/one字符</p>\n<p>注意：上述两个构造函数，即接受string或者字符指针的构造函数是<strong>explicit</strong>的。在新标准中增加了为0和1指定其他字符的功能</p>\n</blockquote>\n<p>演示</p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;bitset&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\nint main()\n{\n    const unsigned bit_num = 13;\n    bitset&lt;13&gt; b1 (0xbeef);\n    for(int i = bit_num -1;i&gt;=0;--i)\n        cout &lt;&lt; b1[i];\n    cout &lt;&lt; endl;\n    bitset&lt;20&gt; b2 (0xbeff);\n\n    for(int i= 20-1;i&gt;=0;--i)\n        cout &lt;&lt; b2[i];\n    return 0;\n}</code></pre>\n<p>运行结果</p>\n<p><img alt=\"\" height=\"137\" src=\"..\\..\\static\\image\\6cc7f1a3b99e4ce7a298d9901a3311f6.png\" width=\"343\"/></p>\n<p> 演示</p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;bitset&gt;\nusing namespace std;\n\nint main()\n{\n    string bit_string = \"1001001100\";\n    //const unsigned bit_length = bit_string.length(); //error bit_length不能够编译时确定，所以他不是一个常量表达式\n    bitset&lt;10&gt; b1 (bit_string); // b1 is 1001001100\n    bitset&lt;4&gt; b2(bit_string,5,4,'0','1');\n    for(int i = 4-1;i&gt;=0;--i)\n    {\n        cout &lt;&lt; b2[i];\n    }\n    cout &lt;&lt; endl;\n    bitset&lt;4&gt; b3(bit_string,bit_string.length()-4);\n    for(int i=4-1;i&gt;=0;--i)\n    {\n        cout &lt;&lt; b3[i];\n    }\n    return 0;\n}</code></pre>\n<p> 运行结果</p>\n<p><img alt=\"\" height=\"143\" src=\"..\\..\\static\\image\\66334ac7005f44fe9a481457de512eb6.png\" width=\"276\"/></p>\n<p>可以看出，类似头迭代器和超尾迭代器的规则在bitset的构造时候依然适用 </p>\n<p>先介绍一些概念</p>\n<p>置位：将某一位设置为1</p>\n<p>复位：将某一位设置为0</p>\n<p>bitset方法</p>\n<blockquote>\n<p>关于bitset的状态</p>\n<p>.any()         是存在置位的二进制返回true</p>\n<p>.none()        不存在置位的二进制返回true</p>\n<p>.all()           所有位都置位返回true</p>\n<p>.count()       返回置位的位数</p>\n<p>.size()        一个constexpr函数，返回位数</p>\n<p>.test(pos)   pos位为真返回true</p>\n<p>关于设置bitset状态的函数</p>\n<p>.set(pos,v)        设置pos位为v，v默认值为真值</p>\n<p>.set()                无实参的情况下将所有位置位</p>\n<p>.reset(pos)        复位pos位</p>\n<p>.reset()                无实参的情况下复位所有位</p>\n<p>.flip(pos)            切换pos位    </p>\n<p>.filp()                   无实参的情况下切换所有位</p>\n<p>b[pos]                下标访问</p>\n<p>其它功能</p>\n<p>返回一个unsigned long / unsigned long long值，如果b中位模式不能放入指定的结果类型，抛出一个overflow_error异常</p>\n<p>.to_ulong()        </p>\n<p>.to_ullong()</p>\n<p>返回一个true为one flase为zero的字符串默认为'1', '0'</p>\n<p>.to_string(zero, one)</p>\n<p>os &lt;&lt; b        将b中的二进制位打印到流os</p>\n<p>is &gt;&gt; b         从is流中输入二进制位</p>\n</blockquote>\n<p>演示</p>\n<p>用一个bitset来存放10人的成绩及格状况</p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;bitset&gt;\n#include &lt;algorithm&gt;\n#define grade_table GT\nusing namespace std;\n\nint main()\n{\n    const unsigned stu_num = 10;\n    bitset&lt;stu_num&gt; grade_table;\n    cin &gt;&gt; grade_table;\n    if(GT.none()) //or !GT.any()\n        cout &lt;&lt; \"没有人及格\" &lt;&lt; endl;\n    else\n        cout &lt;&lt; \"一共有\" &lt;&lt; GT.count() &lt;&lt; \"人及格\" &lt;&lt; endl;\n    string bit_string = GT.to_string();\n    cout &lt;&lt; \".to_string()返回了一个比特字符串: \" &lt;&lt; bit_string &lt;&lt; endl;\n    cout &lt;&lt; \"老师大发慈悲，所有人都过了，好耶！\" &lt;&lt; endl;\n    GT.set();\n    cout &lt;&lt; GT.to_string() &lt;&lt; endl;\n    GT.reset(1);\n    cout &lt;&lt; \"但是一号小伙得罪了老师，老师没有给他过: \" &lt;&lt; GT.to_string() &lt;&lt; endl;\n    cout &lt;&lt; \"不知道将这个比特串转换为无符号整形有什么意义的操作\" &lt;&lt; GT.to_ulong();\n    return 0;\n}</code></pre>\n<p>运行结果</p>\n<p><img alt=\"\" height=\"331\" src=\"..\\..\\static\\image\\99deb2f6a7f0434cbf1c83d174244e2e.png\" width=\"734\"/></p>\n<p>可以看见，适用bitset比适用传统的位运算要方便许多，不用我们自己设计mask，不用进行令人头疼的位移操作，甚至输入输出比特串也经为我们定义好了。</p>\n<p>一些其他的东西</p>\n<p>上面可以看出bitset为了泛型的功能，有着zero和one这两个东西，提供让用户自定义的功能</p>\n<p>一些有趣的东西</p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;bitset&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\nint main() {\n    const string str = \"ynynyynnyn\";\n    bitset&lt;10&gt; b(str, 0, string::npos, 'n', 'y');\n    cout &lt;&lt; b &lt;&lt; endl;\n    cout &lt;&lt; b.to_string('n','y');\n    return 0;\n}</code></pre>\n<p> 可以猜猜运行的结果时什么</p>\n<p><img alt=\"\" height=\"134\" src=\"..\\..\\static\\image\\710c4365ee154e868f77f99f161e2be6.png\" width=\"325\"/></p>\n<p> 相关链接</p>\n<p><a class=\"has-card\" href=\"http://www.cplusplus.com/reference/bitset/bitset/?kw=bitset\" title=\"bitset - C++ Reference (cplusplus.com)\"><span class=\"link-card-box\"><span class=\"link-title\">bitset - C++ Reference (cplusplus.com)</span><span class=\"link-link\"><img alt=\"icon-default.png?t=M276\" class=\"link-link-icon\" src=\"..\\..\\static\\image\\icon-default.png\"/>http://www.cplusplus.com/reference/bitset/bitset/?kw=bitset</span></span></a></p>\n</div>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-17 14:16:22", "summary": "顾名思义，就是比特集合，用于位运算等操作。固定长度，支持随机访问同替他模板类一样，的使用方法和其他模板类差别不大有位，被默认设置位，必须为常量表达式是的低位比特串拷贝，如果超出的位数，剩余的被设置为有"}