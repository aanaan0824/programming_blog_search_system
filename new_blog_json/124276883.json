{"blogid": "124276883", "writerAge": "码龄19年", "writerBlogNum": "56", "writerCollect": "26", "writerComment": "15", "writerFan": "28", "writerGrade": "3级", "writerIntegral": "795", "writerName": "Coding到灯火阑珊", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124276883.jpg", "writerRankTotal": "31430", "writerRankWeekly": "129340", "writerThumb": "74", "writerVisitNum": "55821", "blog_read_count": "857", "blog_time": "于 2022-04-19 16:33:58 发布", "blog_title": "用Rust实现区块链 - 1 区块和区块链", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>区块链从技术角度上看就是一个去中心化的，点对点的，保证最终一致性的分布式数据库。下面我们先来实现区块及区块链。</p>\n<p></p>\n<h2>区块</h2>\n<p>区块存储了区块链中的有效信息，如交易等。这一部分我们先实现简单的区块及区块链，把框架搭建起来，后面随着新功能的加入，再逐渐去完善。</p>\n<p></p>\n<p><span style=\"color:#4da8ee;\"><strong>区块头</strong></span></p>\n<pre><code class=\"language-rust\">#[derive(Debug, Serialize, Deserialize, PartialEq, Eq)]\npub struct BlockHeader {\n    timestamp: i64,\n    prev_hash: String,\n    nonce: usize,\n}</code></pre>\n<ul><li> <p>timestamp：时间戳</p> </li><li> <p>prev_hash：前一个区块的Hash值</p> </li><li> <p>nonce：随机数，用于计算工作量证明</p> </li></ul>\n<p></p>\n<p><span style=\"color:#4da8ee;\"><strong>区块</strong></span></p>\n<pre><code class=\"language-rust\">#[derive(Debug, Serialize, Deserialize, PartialEq, Eq)]\npub struct Block {\n    header: BlockHeader,\n    data: String,\n    hash: String,\n}</code></pre>\n<ul><li> <p>header：区块头</p> </li><li> <p>data：区块存储的数据，后面在实现交易的功能时，这个字段会修改为交易集合。</p> </li><li> <p>hash：块的Hash值</p> </li></ul>\n<p></p>\n<p>每个区块都计算存储了一个hash值，区块头中存储了前一个区块的hash，这样就形成了一个区块链。如图：</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\757e1775f3aff698a49d04d3f83ba372.png\"/></p>\n<p></p>\n<p><span style=\"color:#4da8ee;\"><strong>计算hash值</strong></span></p>\n<p>我们对区块头进行hash就可以了，因为区块头包含了区块的所有信息，后面会把交易的hash值也加入到区块头中。</p>\n<p></p>\n<p>先使用serde和bincode库把区块头序列化成字节，然后再使用SHA256计算hash值。</p>\n<pre><code class=\"language-rust\">pub fn serialize&lt;T&gt;(data: &amp;T) -&gt; Result&lt;Vec&lt;u8&gt;, BlockchainError&gt; \nwhere\n    T: Serialize + ?Sized\n{\n    Ok(bincode::serialize(data)?)\n}\n\npub fn hash_to_str(data: &amp;[u8]) -&gt; String {\n    let mut hasher = Sha3::sha3_256();\n    hasher.input(data);\n    hasher.result_str()\n}</code></pre>\n<p> </p>\n<p><span style=\"color:#4da8ee;\"><strong>新建区块及实现创世块</strong></span></p>\n<p>创世块是区块链中的第一个区块，所以区块头中的prev_hash没有值。</p>\n<pre><code class=\"language-rust\">pub fn new(data: &amp;str, prev_hash: &amp;str) -&gt; Self {\n    let mut block = Block {\n        header: BlockHeader { \n            timestamp: Utc::now().timestamp(), \n            prev_hash: prev_hash.into(), \n            nonce: 0, \n        },\n        data: data.into(),\n        hash: String::new(),\n    };\n    block.set_hash();\n\n    block\n}\n\npub fn create_genesis_block() -&gt; Self {\n    Self::new(\"创世区块\", \"\")\n}</code></pre>\n<p></p>\n<h2><strong>区块链</strong></h2>\n<p>我们现在先把区块存储在内存中，后面部分会把区块存储到KV数据库中。</p>\n<pre><code class=\"language-rust\">pub struct Blockchain {\n    blocks: Vec&lt;Block&gt;,\n    height: usize,\n}</code></pre>\n<ul><li> <p>blocks：区块集合</p> </li><li> <p>height：区块链的高度，即区块个数。</p> </li></ul>\n<p></p>\n<p><span style=\"color:#4da8ee;\"><strong>挖矿</strong></span></p>\n<p>就是将区块加入到链中</p>\n<pre><code class=\"language-rust\">pub fn mine_block(&amp;mut self, data: &amp;str) {\n    let prev_block = self.blocks.last().unwrap();\n    let block = Block::new(data, prev_block.get_hash().as_str());\n    self.blocks.push(block);\n    self.height += 1;\n}</code></pre>\n<p></p>\n<p><span style=\"color:#4da8ee;\"><strong>创建区块链及加入区块</strong></span></p>\n<pre><code class=\"language-rust\">let mut bc = Blockchain::new();\n\nbc.mine_block(\"Justin -&gt; Bob 2 btc\");\nbc.mine_block(\"Justin -&gt; Bruce 2 btc\");\n\nbc.blocks_info();\n</code></pre>\n<p></p>\n<p>执行结果：</p>\n<pre><code>$ RUST_LOG=info cargo run --example gen_bc --quiet\n\nINFO blockchain_rust_part_1::blocks::blockchain: Block {\n    header: BlockHeader {\n        timestamp: 1650188197,\n        prev_hash: \"\",\n        nonce: 0,\n    },\n    data: \"创世区块\",\n    hash: \"dc7e47a45b9b898269efbc4e05cff5d2c8c9dac17cd181451471e62cdcd646c6\",\n}\nINFO blockchain_rust_part_1::blocks::blockchain: Block {\n    header: BlockHeader {\n        timestamp: 1650188197,\n        prev_hash: \"dc7e47a45b9b898269efbc4e05cff5d2c8c9dac17cd181451471e62cdcd646c6\",\n        nonce: 0,\n    },\n    data: \"Justin -&gt; Bob 2 btc\",\n    hash: \"8620a3e7965c71ccf391898bb53a374db8d133a2c7dcbfa05cea9b83a06c04dc\",\n}\nINFO blockchain_rust_part_1::blocks::blockchain: Block {\n    header: BlockHeader {\n        timestamp: 1650188197,\n        prev_hash: \"8620a3e7965c71ccf391898bb53a374db8d133a2c7dcbfa05cea9b83a06c04dc\",\n        nonce: 0,\n    },\n    data: \"Justin -&gt; Bruce 2 btc\",\n    hash: \"3618c57b1aec52b56f820bc20a03f171174a059c5a982e486e0975c1eccbaa12\",\n}</code></pre>\n<p></p>\n<h2>工程结构</h2>\n<p class=\"img-center\"><img alt=\"\" height=\"302\" src=\"..\\..\\static\\image\\dd59fd3787d08408b2b556b74feb3f3f.png\" width=\"238\"/></p>\n<p></p>\n<p></p>\n<p><span style=\"color:#4da8ee;\"><strong>完整代码：</strong></span></p>\n<p><a class=\"link-info\" href=\"https://github.com/Justin02180218/blockchain_rust\" title=\"https://github.com/Justin02180218/blockchain_rust\">https://github.com/Justin02180218/blockchain_rust</a></p>\n<hr/>\n<p><strong>更多文章，请关注公众号：coding到灯火阑珊</strong></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\20190204204525201.jpg\"/></p>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-04-19 16:33:58", "summary": "区块链从技术角度上看就是一个去中心化的，点对点的，保证最终一致性的分布式数据库。下面我们先来实现区块及区块链。区块区块存储了区块链中的有效信息，如交易等。这一部分我们先实现简单的区块及区块链，把框架搭"}