{"blogid": "123327620", "writerAge": "码龄3年", "writerBlogNum": "51", "writerCollect": "295", "writerComment": "37", "writerFan": "702", "writerGrade": "3级", "writerIntegral": "651", "writerName": "暄踽", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123327620.jpg", "writerRankTotal": "51418", "writerRankWeekly": "60370", "writerThumb": "121", "writerVisitNum": "63036", "blog_read_count": "8834", "blog_time": "于 2022-03-07 12:48:12 发布", "blog_title": "C#学习教程12——Windows窗体应用程序", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#12Windows_1\">12.Windows窗体应用程序</a></li><li><ul><li><a href=\"#121_Windows_5\">12.1 创建Windows窗体应用程序</a></li><li><a href=\"#122__67\">12.2 窗体属性</a></li><li><a href=\"#123__144\">12.3 窗体事件</a></li><li><a href=\"#124__282\">12.4 窗体方法</a></li><li><a href=\"#125_McssageBox_405\">12.5 McssageBox：消息框</a></li><li><a href=\"#126__502\">12.6 控件</a></li><li><a href=\"#127_LabelLinkLabel_511\">12.7 Label和LinkLabel：标签控件</a></li><li><a href=\"#128_TextBox_579\">12.8 TextBox：文本框控件</a></li><li><a href=\"#129_Button_694\">12.9 Button：按钮控件</a></li><li><a href=\"#1210_RadioButton_791\">12.10 RadioButton：单选按钮控件</a></li><li><a href=\"#1211_CheckBox_850\">12.11 CheckBox：复选框控件</a></li><li><a href=\"#1212_CheckedListBox_920\">12.12 CheckedListBox：复选列表框控件</a></li><li><a href=\"#1213_ListBox_992\">12.13 ListBox：列表框控件</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"12Windows_1\"></a>12.Windows窗体应用程序</h1>\n<p><code>WinForm</code>是<code>Windows Form</code>的简称，是基于<code>.NET Framework</code>平台的客户端（PC软件）开发技术，一般使用C#编程。Windows应用程序与Windows操作系统的界面类似，每个界面都是由窗体构成的，并且能通过鼠标单击、键盘输入等操作完成相应的功能。</p>\n<h2><a id=\"121_Windows_5\"></a>12.1 创建Windows窗体应用程序</h2>\n<ul><li>在Visual Studio 2019软件中，点击创建新项目。</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\552daf896a664795bda10348bd575586.png\"/></p>\n<ul><li>选择Windows窗体应用，点击下一步。</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\46d3e78a3b8b4d68aaa763a535e27243.png\"/></p>\n<ul><li>设置配置信息后点击下一步。</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\72d0326f93414db9a5b9e60e768fe452.png\"/></p>\n<ul><li>默认选择目标框架<code>.NET Core 3.1</code>后可完成Windows窗体应用程序的创建。</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2ec27c68c8674fef8742271b2b527d23.png\"/></p>\n<p>在每一个Windows窗体应用程序的项目文件夹中，都会有一个默认的窗体程序Form1.cs，并且在项目的Program.cs文件中指定要运行的窗体。</p>\n<p>Program.cs 文件的代码如下。</p>\n<pre><code class=\"prism language-c#\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace WinFormsApp1\n{\n    static class Program\n    {\n        /// &lt;summary&gt;\n        ///  The main entry point for the application.\n        /// &lt;/summary&gt;\n        [STAThread]\n        static void Main()\n        {\n            Application.SetHighDpiMode(HighDpiMode.SystemAware);\n            // 用于启动应用程序中可视的样式，如果控件和操作系统支持，那么 控件的绘制就能根据显不风格来实现\n            Application.EnableVisualStyles();\n            // 控件支持UseCompatibleTextRenderingproperty属性，该方法将此属性设置为默认值\n            Application.SetCompatibleTextRenderingDefault(false);\n            // 用于设置在当前项目中要启动的窗体，new Form1()即为要启动的窗体\n            Application.Run(new Form1());\n        }\n    }\n}\n\n</code></pre>\n<p>在Windows窗体应用程序中界面是由不同类型的控件构成的，系统中默认的控件全部存放到工具箱中，工具箱在视图选项卡下，如下图所示。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\de0fd840974c400f9fe7844e8d6637a8.png\"/></p>\n<p>在工具箱中将控件划分为公共控件、容器、菜单和工具栏、数据、组件、打印、对话框等。</p>\n<h2><a id=\"122__67\"></a>12.2 窗体属性</h2>\n<p>每一个Windows窗体应用程序都是由若干个窗体构成的，窗体中的属性主要用于设置窗体的外观。</p>\n<p>在Windows窗体应用程序中右击窗体，在弹出的右键菜单中选择<code>属性</code>，弹出如下图所示的属性面板。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\efd91fd8b9b3488bb88400bf368bfff8.png\"/></p>\n<p>窗体的常用属性如下表所示。</p>\n<table><thead><tr><th align=\"center\">属性</th><th align=\"center\">作用</th></tr></thead><tbody><tr><td align=\"center\"><code>Design</code>:Name</td><td align=\"center\">用来获取或设置窗体的名称</td></tr><tr><td align=\"center\"><code>布局</code>:WindowState</td><td align=\"center\">获取或设置窗体的初始可视状态，取值有3种，即Normal（正常）、Minimized（最小化）、Maximized（最大化），默认为Normal，即正常显示</td></tr><tr><td align=\"center\"><code>布局</code>:StartPosition</td><td align=\"center\">获取或设置窗体第一次出现时的位置，取值有5种，即Manual（窗体位置由Location属性决定）、CenterScreen（屏幕居中）、WindowsDefaultLocation（ Windows默认位置）、WindowsDefaultBounds（Windows默认位置，边界由Windows决定）、CenterParent（在父窗体中居中），默认为WindowsDefaultLocation</td></tr><tr><td align=\"center\"><code>窗口样式</code>:Icon</td><td align=\"center\">获取或设置窗体上显示的图标</td></tr><tr><td align=\"center\"><code>窗口样式</code>:MaximizeBox</td><td align=\"center\">获取或设置窗体标题栏右上角是否有最大化按钮，默认为True</td></tr><tr><td align=\"center\"><code>窗口样式</code>:MinimizeBox</td><td align=\"center\">获取或设置窗体标题栏右上角是否有最小化按钮，默认为True</td></tr><tr><td align=\"center\"><code>外观</code>:Text</td><td align=\"center\">获取或设置窗口标题栏中的文字</td></tr><tr><td align=\"center\"><code>外观</code>:BackColor</td><td align=\"center\">获取或设置窗体的背景色</td></tr><tr><td align=\"center\"><code>外观</code>:BackgroundImage</td><td align=\"center\">获取或设置窗体的背景图像</td></tr><tr><td align=\"center\"><code>外观</code>:BackgroundImageLayout</td><td align=\"center\">获取或设置图像布局，取值有 5 种，即None（图片居左显示）、Tile（图像重复，默认值）、Stretch（拉伸）、Center（居中）、Zoom（按比例放大到合适大小）</td></tr><tr><td align=\"center\"><code>外观</code>:Font</td><td align=\"center\">获取或设置窗体上文字的字体</td></tr><tr><td align=\"center\"><code>外观</code>:ForeColor</td><td align=\"center\">获取或设置窗体上文字的颜色</td></tr><tr><td align=\"center\"><code>行为</code>:Enabled</td><td align=\"center\">获取或设置窗体是否可用</td></tr></tbody></table>\n<p>下面实现一个简单的Windows窗体应用程序，部分属性取值如下。</p>\n<table><thead><tr><th align=\"center\">属性</th><th align=\"center\">属性值</th></tr></thead><tbody><tr><td align=\"center\">Name</td><td align=\"center\">Form1</td></tr><tr><td align=\"center\">StartPosition</td><td align=\"center\">CenterScreen</td></tr><tr><td align=\"center\">Text</td><td align=\"center\">第一个窗体</td></tr><tr><td align=\"center\">MaximizeBox</td><td align=\"center\">False</td></tr><tr><td align=\"center\">MinimizeBox</td><td align=\"center\">False</td></tr><tr><td align=\"center\">Backgroundimage</td><td align=\"center\">example.jpg</td></tr><tr><td align=\"center\">BackgroundlmageLayout</td><td align=\"center\">Stretch</td></tr></tbody></table>\n<p>在上述属性中除了背景图片 (Backgroundimage) 属性以外，其他属性直接添加上表中对应的属性值即可。设置背景图片属性 （Backgroimdlmage）的方法是单击Backgroundimage属性后的按钮，在弹出的对话框中单击“导入”按钮。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\19925ed356244beeac8302ea481e1f6f.png\"/></p>\n<p>每一个Windows窗体应用程序在运行时仅能指定一个启动窗体，设置启动窗体的方式是在项目的Program.cs文件中指定。具体的代码如下。</p>\n<pre><code class=\"prism language-c#\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace WinFormsApp1\n{\n    static class Program\n    {\n        /// &lt;summary&gt;\n        ///  The main entry point for the application.\n        /// &lt;/summary&gt;\n        [STAThread]\n        static void Main()\n        {\n            Application.SetHighDpiMode(HighDpiMode.SystemAware);\n            Application.EnableVisualStyles();\n            Application.SetCompatibleTextRenderingDefault(false);\n            Application.Run(new Form1());\n        }\n    }\n}\n</code></pre>\n<p>最后按<code>Ctrl+F5</code>键运行程序，效果如下图所示。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8156bec485394746bd9c54edf053bff3.png\"/></p>\n<h2><a id=\"123__144\"></a>12.3 窗体事件</h2>\n<p>在窗体属性面板中单击闪电图标即可查看到窗体中的事件，如下图所示。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\51c92329722d48958d7dcf1ab80bbc7b.png\"/></p>\n<table><thead><tr><th align=\"center\">事件</th><th align=\"center\">作用</th></tr></thead><tbody><tr><td align=\"center\"><code>行为</code>:Load</td><td align=\"center\">窗体加载事件，在运行窗体时即可执行该事件</td></tr><tr><td align=\"center\"><code>操作</code>:MouseClick</td><td align=\"center\">鼠标单击事件</td></tr><tr><td align=\"center\"><code>操作</code>:MouseDoubleClick</td><td align=\"center\">鼠标双击事件</td></tr><tr><td align=\"center\"><code>鼠标</code>:MouseMove</td><td align=\"center\">鼠标移动事件</td></tr><tr><td align=\"center\"><code>钥匙</code>:KeyDown</td><td align=\"center\">键盘按下事件</td></tr><tr><td align=\"center\"><code>钥匙</code>:KeyUp</td><td align=\"center\">键盘释放事件</td></tr><tr><td align=\"center\"><code>行为</code>:FormClosing</td><td align=\"center\">窗体关闭事件，关闭窗体时发生</td></tr><tr><td align=\"center\"><code>行为</code>:FormClosed</td><td align=\"center\">窗体关闭事件，关闭窗体后发生</td></tr></tbody></table>\n<p>下面的例子通过事件操作改变窗体背景颜色。</p>\n<ul><li>在事件界面中选中需要创建的事件，并双击该事件右侧的单元格，系统会自动为其生成对应事件的处理方法。</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\41d2f97d44df47948b031b2d7a0e1db1.png\"/></p>\n<ul><li>设置好事件后会在窗体对应的代码文件中自动生成与事件对应的4个方法，代码如下。</li></ul>\n<pre><code class=\"prism language-c#\">using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\nnamespace WinFormsApp1\n{\n    public partial class Form1 : Form\n    {\n        public Form1()\n        {\n            InitializeComponent();\n        }\n\n        private void Form1_MouseClick(object sender, MouseEventArgs e)\n        {\n\n        }\n\n        private void Form1_MouseDoubleClick(object sender, MouseEventArgs e)\n        {\n\n        }\n\n        private void Form1_Load(object sender, EventArgs e)\n        {\n\n        }\n    }\n}\n</code></pre>\n<ul><li>添加事件处理代码，除了可以在属性面板中设置外，使用代码设置的方式是使用this关键字代表当前窗体的实例。、</li></ul>\n<pre><code class=\"prism language-c#\">using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace WinFormsApp1\n{\n    public partial class Form1 : Form\n    {\n        public Form1()\n        {\n            InitializeComponent();\n        }\n\n        private void Form1_MouseClick(object sender, MouseEventArgs e)\n        {\n            //设置窗体背景颜色为黑色\n            this.BackColor = Color.Black;\n        }\n\n        private void Form1_MouseDoubleClick(object sender, MouseEventArgs e)\n        {\n            //设置窗体背景颜色为蓝色\n            this.BackColor = Color.Blue;\n        }\n\n        private void Form1_Load(object sender, EventArgs e)\n        {\n            //设置窗体颜色为红色\n            this.BackColor = Color.Red;\n        }\n    }\n}\n</code></pre>\n<ul><li>设置启动窗体，在<code>Program.cs</code>类中将Form1窗体设置为启动窗体。</li></ul>\n<pre><code class=\"prism language-c#\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace WinFormsApp1\n{\n    static class Program\n    {\n        /// &lt;summary&gt;\n        ///  The main entry point for the application.\n        /// &lt;/summary&gt;\n        [STAThread]\n        static void Main()\n        {\n            Application.SetHighDpiMode(HighDpiMode.SystemAware);\n            Application.EnableVisualStyles();\n            Application.SetCompatibleTextRenderingDefault(false);\n            // 设置启动窗体\n            Application.Run(new Form1());\n        }\n    }\n}\n</code></pre>\n<img src=\"https://media.giphy.com/media/Ef6dyj1bH67rqy1SIK/giphy.gif\"/>\n<h2><a id=\"124__282\"></a>12.4 窗体方法</h2>\n<p>自定义的窗体都继承自<code>System.Windows.Form</code>类，能使用Form类中已有的成员，包括属性、方法、事件等。</p>\n<table><thead><tr><th align=\"center\">方法</th><th align=\"center\">作用</th></tr></thead><tbody><tr><td align=\"center\">void Show()</td><td align=\"center\">显示窗体</td></tr><tr><td align=\"center\">void Hide()</td><td align=\"center\">隐藏窗体</td></tr><tr><td align=\"center\">DialogResult ShowDialog()</td><td align=\"center\">以对话框模式显示窗体</td></tr><tr><td align=\"center\">void CenterToParent()</td><td align=\"center\">使窗体在父窗体边界内居中</td></tr><tr><td align=\"center\">void CenterToScreen()</td><td align=\"center\">使窗体在当前屏幕上居中</td></tr><tr><td align=\"center\">void Activate()</td><td align=\"center\">激活窗体并给予它焦点</td></tr><tr><td align=\"center\">void Close()</td><td align=\"center\">关闭窗体</td></tr></tbody></table>\n<p>下面的例子实现在一个窗体中打开另外一个窗体。</p>\n<ul><li>在项目中创建两个窗体。</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\36fd3e52b8be44d4bffbddb86ba175ac.png\"/></p>\n<ul><li>设置Form1窗体的事件。</li></ul>\n<pre><code class=\"prism language-c#\">using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace WinFormsApp1\n{\n    public partial class Form1 : Form\n    {\n        public Form1()\n        {\n            InitializeComponent();\n        }\n\n        private void Form1_MouseClick(object sender, MouseEventArgs e)\n        {\n            //创建Form2窗体实例\n            Form2 form2 = new Form2();\n            //打开form2窗体\n            form2.Show();\n        }\n    }\n}\n</code></pre>\n<ul><li>设置Form2窗体的事件。</li></ul>\n<pre><code class=\"prism language-c#\">using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Text;\nusing System.Windows.Forms;\n\nnamespace WinFormsApp1\n{\n    public partial class Form2 : Form\n    {\n        public Form2()\n        {\n            InitializeComponent();\n        }\n\n        private void Form2_MouseClick(object sender, MouseEventArgs e)\n        {\n            //将窗体居中\n            this.CenterToScreen();\n        }\n\n        private void Form2_MouseDoubleClick(object sender, MouseEventArgs e)\n        {\n            //关闭窗体\n            this.Close();\n        }\n    }\n}\n</code></pre>\n<ul><li>将Form1窗体设置为启动窗体。</li></ul>\n<pre><code class=\"prism language-c#\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace WinFormsApp1\n{\n    static class Program\n    {\n        /// &lt;summary&gt;\n        ///  The main entry point for the application.\n        /// &lt;/summary&gt;\n        [STAThread]\n        static void Main()\n        {\n            Application.SetHighDpiMode(HighDpiMode.SystemAware);\n            Application.EnableVisualStyles();\n            Application.SetCompatibleTextRenderingDefault(false);\n            //设置启动窗体\n            Application.Run(new Form1());\n        }\n    }\n}\n</code></pre>\n<img src=\"https://media.giphy.com/media/Ef6dyj1bH67rqy1SIK/giphy.gif\"/>\n<p>在使用窗体中的方法时需要注意，如果是当前窗体需要调用方法直接使用 <code>this</code>关键字代表当前窗体，通过<code>this.方法名(参数列表)</code>的方式调用即可。如果要操作其他窗体，则需要用窗体的实例来调用方法。</p>\n<h2><a id=\"125_McssageBox_405\"></a>12.5 McssageBox：消息框</h2>\n<p>在Windows窗体应用程序中向用户提示操作时采用消息框弹出的形式。消息框是通过<code>McssageBox</code>类来实现的，定义了 Show 的多个重载方法，该方法的作用就是弹出一个消息框。由于Show方法是一个静态的方法，因此调用该方法只需要使用<code>MessageBox.Show(参数)</code>的形式即可弹出消息框。</p>\n<table><thead><tr><th align=\"center\">方法</th><th align=\"center\">说明</th></tr></thead><tbody><tr><td align=\"center\">DialogResult Show(string text)</td><td align=\"center\">指定消息框中显示的文本（text）</td></tr><tr><td align=\"center\">DialogResult Show(string text, string caption)</td><td align=\"center\">指定消息框中显示的文本（text）以及消息框的标题（caption）</td></tr><tr><td align=\"center\">DialogResult Show(string text, string caption, MessageBoxButtons buttons)</td><td align=\"center\">指定消息框中显示的文本（text）、消息框的 标题（caption）以及消息框中显示的按钮 （buttons）</td></tr><tr><td align=\"center\">DialogResult Show(string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon)</td><td align=\"center\">指定消息框中显示的文本（text）、消息框的 标题（caption ）、消息框中显示的按钮 （buttons）以及消息框中显示的图标（icon）</td></tr></tbody></table>\n<p>在上面所列出方法的参数中涉及两个枚举类型MessageBoxButtons和MessageBoxIcon。</p>\n<p>MessageBoxButtons枚举类型主要用于设置消息框中显示的按钮，具体的枚举值如下：</p>\n<ul><li>OK：在消息框中显示“确定”按钮。</li><li>OKCancel：在消息框中显示“确定”和“取消”按钮。</li><li>AbortRetryIgnore：在消息框中显示“中止” “重试”和“忽略”按钮。</li><li>YesNoCancel：在消息框中显示“是” “否”和“取消”按钮。</li><li>YesNo：在消息框中显示“是”和“否”按钮。</li><li>RetryCancel：在消息框中显示“重试”和“取消”按钮。</li></ul>\n<hr/>\n<p>MessageBoxIcon枚举类型主要用于设置消息框中显示的图标，具体的枚举值如下。</p>\n<ul><li>None：在消息框中不显示任何图标。</li><li>Hand、Stop、Error：在消息框中显示由一个红色背景的圆圈及其中的白色X组成 的图标。</li><li>Question：在消息框中显示由圆圈和其中的一个问号组成的图标。</li><li>Exclamation、Warning：在消息框中显示由一个黄色背景的三角形及其中的一个感叹号组成的图标。</li><li>Asterisk、Information：在消息框中显示由一个圆圈及其中的小写字母<code>i</code>组成的图标。</li></ul>\n<hr/>\n<p>调用 MessageBox 类中的Show方法将返回一个DialogResult类型的值。DialogResult也是一个枚举类型，是消息框的返回值，通过单击消息框中不同的按钮得到不同的消息框返回值。具体值如下。</p>\n<ul><li>None：消息框没有返回值，表明有消息框继续运行。</li><li>OK：消息框的返回值是0K（通常从标签为“确定”的按钮发送）。</li><li>Cancel：消息框的返回值是Cancel（通常从标签为“取消”的按钮发送）。</li><li>Abort：消息框的返回值是Abort（通常从标签为“中止”的按钮发送）。</li><li>Retry：消息框的返回值是Retry（通常从标签为“重试”的按钮发送）。</li><li>Ignore：消息框的返回值是Ignore（通常从标签为“忽略“的按钮发送）。</li><li>Yes：消息框的返回值是Yes（通常从标签为“是“的按钮发送）。</li><li>No：消息框的返回值是No（通常从标签为“否“的按钮发送）。</li></ul>\n<hr/>\n<p>下面的例子实现通过消息框提示打开新窗体。</p>\n<ul><li>在项目中创建两个窗体。</li><li>设置Form1窗体的事件。</li></ul>\n<pre><code class=\"prism language-c#\">using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace WinFormsApp1\n{\n    public partial class Form1 : Form\n    {\n        public Form1()\n        {\n            InitializeComponent();\n        }\n\n        private void Form1_MouseClick(object sender, MouseEventArgs e)\n        {\n            //弹出消息框，并获取消息框的返回值\n            DialogResult dr = MessageBox.Show(\"是否打开新窗体？\", \"提示\", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);\n            //如果消息框返回值是Yes，显示新窗体\n            if (dr == DialogResult.Yes)\n            {\n                Form2 form2 = new Form2();\n                form2.Show();\n            }\n            //如果消息框返回值是No，关闭当前窗体\n            else if (dr == DialogResult.No)\n            {\n                //关闭当前窗体\n                this.Close();\n            }\n        }\n    }\n}\n</code></pre>\n<ul><li>设置项目的启动窗体Form1。</li></ul>\n<img src=\"https://media.giphy.com/media/97FDLrKBDUI8rik5Cx/giphy.gif\"/>\n<h2><a id=\"126__502\"></a>12.6 控件</h2>\n<p>在Windows窗体应用程序中每个窗体都是由若干个控件构成的。控件就是指能输入文本的位置、能选择的位置、能单击的位置、图片显示的位置等。其中：</p>\n<ul><li>能输入文本的位置对应于Windows窗体应用程序中的文本框、多行文本框等。</li><li>能选择的位置对应于Windows窗体应用程序中的复选框、单选按钮、下拉列表框。</li><li>能单击的位置对应于Windows窗体应用程序中的按钮、超链接标签、菜单栏、工具栏等。</li><li>图片显示的位置对应于Windows窗体应用程序中的图片控件。</li></ul>\n<h2><a id=\"127_LabelLinkLabel_511\"></a>12.7 Label和LinkLabel：标签控件</h2>\n<p>通常使用标签控件来显示文本，标签控件王要分为普通的标签（Label）和超链接形式的标签（LinkLabel） 。</p>\n<table><thead><tr><th align=\"center\">属性名</th><th align=\"center\">作用</th></tr></thead><tbody><tr><td align=\"center\">Name</td><td align=\"center\">标签对象的名称，区别不同标签唯一标志</td></tr><tr><td align=\"center\">Text</td><td align=\"center\">标签对象上显示的文本</td></tr><tr><td align=\"center\">Font</td><td align=\"center\">标签中显示文本的样式</td></tr><tr><td align=\"center\">ForeColor</td><td align=\"center\">标签中显示文本的颜色</td></tr><tr><td align=\"center\">BackColor</td><td align=\"center\">标签的背景颜色</td></tr><tr><td align=\"center\">Image</td><td align=\"center\">标签中显示的图片</td></tr><tr><td align=\"center\">AutoSize</td><td align=\"center\">标签的大小是否根据内容自动调整，True为自动调整，False为用户自定义大小</td></tr><tr><td align=\"center\">Size</td><td align=\"center\">指定标签控件的大小</td></tr><tr><td align=\"center\">Visible</td><td align=\"center\">标签是否可见，True 为可见，False 为不可见</td></tr></tbody></table>\n<p>普通标签控件（Label）中的事件与窗体的事件类似，常用的事件主要有鼠标单击事件、 鼠标双击事件、标签上文本改变的事件等。</p>\n<p>超链接标签控件（LinkLabel）也具有相同的属性和事件，主要应用的事件是鼠标单击事件。</p>\n<p>下面的例子实现通过超链接单击事件交换两个普通标签的文本信息。</p>\n<ul><li>在工具箱中设置控件并修改文本信息。</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c4f1dc0a5c4b4846ad17f8375722fe66.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2f556b122e9d4fbe86f52e4f6c6108f5.png\"/></p>\n<ul><li>双击超链接文本创建点击事件。</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e5adb1455c3c44ad8a020d7c11190bab.png\"/></p>\n<pre><code class=\"prism language-c#\">using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace WinFormsApp1\n{\n    public partial class Form1 : Form\n    {\n        public Form1()\n        {\n            InitializeComponent();\n        }\n\t\t// 超链接点击事件\n        private void linkLabel1_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)\n        {\n            //交换标签上的信息。\n            string temp = label1.Text;\n            label1.Text = label2.Text;\n            label2.Text = temp;\n        }\n    }\n}\n</code></pre>\n<img src=\"https://media.giphy.com/media/MN4v4smDqhLL7Jq1iJ/giphy.gif\"/>\n<h2><a id=\"128_TextBox_579\"></a>12.8 TextBox：文本框控件</h2>\n<p>文本框（TextBox）是在窗体中输入信息时最常用的控件，通过设置文本框属性可以实现多行文本框、密码框等。</p>\n<table><thead><tr><th align=\"center\">属性名</th><th align=\"center\">作用</th></tr></thead><tbody><tr><td align=\"center\">Text</td><td align=\"center\">文本框对象中显示的文本</td></tr><tr><td align=\"center\">MaxLength</td><td align=\"center\">在文本框中最多输入的文本的字符个数</td></tr><tr><td align=\"center\">WordWrap</td><td align=\"center\">文本框中的文本是否自动换行，如果是True，则自动换行，如果是False，则不能自动换行</td></tr><tr><td align=\"center\">PasswordChar</td><td align=\"center\">将文本框中出现的字符使用指定的字符替换，通常会使用<code>*</code>字符</td></tr><tr><td align=\"center\">Multiline</td><td align=\"center\">指定文本框是否为多行文本框，如果为True，则为多行文本框，如果为False，则为单行文本框</td></tr><tr><td align=\"center\">ReadOnly</td><td align=\"center\">指定文本框中的文本是否可以更改，如果为True，则不能更改，即只读文本框，如果为False，则允许更改文本框中的文本</td></tr><tr><td align=\"center\">Lines</td><td align=\"center\">指定文本框中文本的行数</td></tr><tr><td align=\"center\">ScrollBars</td><td align=\"center\">指定文本框中是否有滚动条，如果为True，则有滚动条，如果为False， 则没有滚动条</td></tr></tbody></table>\n<p>文本框控件最常使用的事件是文本改变事件(TextChange)，即在文本框控件中的内容改变时触发该事件。</p>\n<p>下面的例子实现简单的登录窗体。</p>\n<ul><li>设置控件信息。</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d3a4d451a69b43efb651d4d2a809eb86.png\"/></p>\n<pre><code class=\"prism language-c#\">            // textBox1\n            // \n            this.textBox1.Location = new System.Drawing.Point(310, 112);\n            this.textBox1.Name = \"textBox1\";\n            this.textBox1.Size = new System.Drawing.Size(125, 27);\n            this.textBox1.TabIndex = 0;\n            // \n            // textBox2\n            // \n            this.textBox2.Location = new System.Drawing.Point(310, 174);\n            this.textBox2.Name = \"textBox2\";\n\t\t\t// 密码框，将用户输入的密码用*替代\n            this.textBox2.PasswordChar = '*';\n            this.textBox2.Size = new System.Drawing.Size(125, 27);\n            this.textBox2.TabIndex = 1;\n            // \n            // label1\n            // \n            this.label1.AutoSize = true;\n            this.label1.Location = new System.Drawing.Point(240, 113);\n            this.label1.Name = \"label1\";\n            this.label1.Size = new System.Drawing.Size(69, 20);\n            this.label1.TabIndex = 2;\n            this.label1.Text = \"用户名：\";\n            // \n            // label2\n            // \n            this.label2.AutoSize = true;\n            this.label2.Location = new System.Drawing.Point(240, 175);\n            this.label2.Name = \"label2\";\n            this.label2.Size = new System.Drawing.Size(54, 20);\n            this.label2.TabIndex = 3;\n            this.label2.Text = \"密码：\";\n            // \n            // linkLabel1\n            // \n            this.linkLabel1.AutoSize = true;\n            this.linkLabel1.Location = new System.Drawing.Point(310, 266);\n            this.linkLabel1.Name = \"linkLabel1\";\n            this.linkLabel1.Size = new System.Drawing.Size(39, 20);\n            this.linkLabel1.TabIndex = 4;\n            this.linkLabel1.TabStop = true;\n            this.linkLabel1.Text = \"登录\";\n            this.linkLabel1.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.linkLabel1_LinkClicked); \n</code></pre>\n<ul><li>设置超链接点击事件。</li></ul>\n<pre><code class=\"prism language-c#\">using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace WinFormsApp1\n{\n    public partial class Form1 : Form\n    {\n        public Form1()\n        {\n            InitializeComponent();\n        }\n\n        private void linkLabel1_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)\n        {\n            //获取用户名\n            string username = textBox1.Text;\n            //获取密码\n            string password = textBox2.Text;\n            //判断用户名密码是否正确\n            if (\"Kint\".Equals(username) &amp;&amp; \"1111\".Equals(password))\n            {\n                MessageBox.Show(\"登录成功！\");\n            }\n            else\n            {\n                MessageBox.Show(\"登录失败！\");\n            }\n        }\n    }\n}\n</code></pre>\n<img src=\"https://media.giphy.com/media/BHb9Z52RSd1yTVGmMq/giphy.gif\"/>\n<h2><a id=\"129_Button_694\"></a>12.9 Button：按钮控件</h2>\n<p>按钮主要用于提交页面的内容，或者是确认某种操作等。常用的属性包括在按钮中显示的文字 (Text) 以及按钮外观设置的属性，最常用的事件是单击事件。</p>\n<p>下面的例子实现一个简单的用户注册功能，并将提交的注册信息显示在新窗体的文本框中。</p>\n<ul><li>设置Form1控件和Form2控件</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5495f1bbdad14efc8281b42a8065f0f1.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\548f05b881634dbaad11f63376bb5eb5.png\"/></p>\n<ul><li>在注册时判断用户名和密码不能为空，并且要求两次输入的密码一致，设置Form1中的按钮代码如下。</li></ul>\n<pre><code class=\"prism language-c#\">using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace WinFormsApp1\n{\n    public partial class Form1 : Form\n    {\n        public Form1()\n        {\n            InitializeComponent();\n        }\n        //“确定”按钮的单击事件，用于判断注册信息并跳转到新窗口显示注册信息\n        private void button1_Click(object sender, EventArgs e)\n        {\n            string name = textBox1.Text;\n            string pwd = textBox2.Text;\n            string repwd = textBox3.Text;\n            if (string.IsNullOrEmpty(name))\n            {\n                MessageBox.Show(\"用户名不能为空！\");\n                return;\n            }\n            else if (string.IsNullOrEmpty(textBox2.Text))\n            {\n                MessageBox.Show(\"密码不能为空！\");\n                return;\n            }\n            else if (!textBox2.Text.Equals(textBox3.Text))\n            {\n                MessageBox.Show(\"两次输入的密码不一致！\");\n                return;\n            }\n            //将用户名和密码传递到Form2中\n            Form2 form2 = new Form2(name, pwd);\n            form2.Show();\n        }\n        //“取消”按钮的事件，用于关闭窗体\n        private void button2_Click(object sender, EventArgs e)\n        {\n            //关闭窗体\n            this.Close();\n        }\n    }\n}\n</code></pre>\n<ul><li>设置Form2中的代码。</li></ul>\n<pre><code class=\"prism language-c#\">using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Text;\nusing System.Windows.Forms;\n\nnamespace WinFormsApp1\n{\n    public partial class Form2 : Form\n    {\n        public Form2(string name, string pwd)\n        {\n            InitializeComponent();\n            label2.Text = \"用户名：\" + name;\n            label3.Text = \"密  码：\" + pwd;\n        }\n    }\n}\n</code></pre>\n<img src=\"https://media.giphy.com/media/4vPeLVwukkenf6nNRL/giphy.gif\"/>\n<h2><a id=\"1210_RadioButton_791\"></a>12.10 RadioButton：单选按钮控件</h2>\n<p>RadioButton是单选按钮控件，多个RadioButton控件可以为一组，这一组内的RadioButton控件只能有一个被选中。</p>\n<p>下面通过一个例子使用单选按钮控件。</p>\n<ul><li>设置控件。</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fc66485907774b9cb74ac298099dd3de.png\"/></p>\n<ul><li>设置确认按钮点击事件。</li></ul>\n<pre><code class=\"prism language-c#\">using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace WinFormsApp1\n{\n    public partial class Form1 : Form\n    {\n        public Form1()\n        {\n            InitializeComponent();\n        }\n\t\t// 单击“确定”按钮的事件\n        private void button1_Click(object sender, EventArgs e)\n        {\n            string msg = \"\";\n            if (radioButton1.Checked)\n            {\n                msg = radioButton1.Text;\n            }\n            else if (radioButton2.Checked)\n            {\n                msg = radioButton2.Text;\n            }\n            else if (radioButton3.Checked)\n            {\n                msg = radioButton3.Text;\n            }\n            MessageBox.Show(\"您喜欢的编程语言是：\" + msg, \"提示\");\n        }\n    }\n}\n</code></pre>\n<p><code>Checked</code>属性可用于判断单选按钮是否被选中。如果该属性的返回值为True，则代表选中；如果返回值为False，则表示未选中。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9f78e44202ca4b4d887eaa226b4b9c0d.png\"/></p>\n<h2><a id=\"1211_CheckBox_850\"></a>12.11 CheckBox：复选框控件</h2>\n<p>复选框主要的属性有：</p>\n<ul><li>Name：表示这个组件的名称；</li><li>Text：表示这个组件的标题；</li><li>Checked：表示这个组件是否已经选中。</li></ul>\n<p>主要的事件就是<code>CheckedChanged</code>事件。</p>\n<p>下面通过一个例子使用复选框控件。</p>\n<ul><li>设置控件。</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1877340bd2f14008b52532a8564f2270.png\"/></p>\n<ul><li>设置点击事件。</li></ul>\n<pre><code class=\"prism language-c#\">using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace WinFormsApp1\n{\n    public partial class Form1 : Form\n    {\n        public Form1()\n        {\n            InitializeComponent();\n        }\n\n        private void button1_Click(object sender, EventArgs e)\n        {\n            string msg = \"\";\n            // 界面上的每一个控件都继承自Control类\n            foreach (Control c in Controls)\n            {\n                //判断控件是否为复选框控件\n                if (c is CheckBox)\n                {\n                    if (((CheckBox)c).Checked)\n                    {\n                        msg = msg + \" \" + ((CheckBox)c).Text;\n                    }\n                }\n            }\n            if (msg != \"\")\n            {\n                MessageBox.Show(\"您选择的爱好是：\" + msg, \"提示\");\n            }\n            else\n            {\n                MessageBox.Show(\"您没有选择爱好\", \"提示\");\n            }\n        }\n    }\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9e7a7dab0b66474fbcfbe85fb8c85e26.png\"/></p>\n<h2><a id=\"1212_CheckedListBox_920\"></a>12.12 CheckedListBox：复选列表框控件</h2>\n<p>复选列表框显示的效果与复选框类似，但在选择多个选项时操作比一般的复选框更方便。</p>\n<p>下面通过一个例子使用复选列表框控件。</p>\n<ul><li>设置控件。</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0ce74e5fc8ce45428ca50789dee8ba5d.png\"/></p>\n<pre><code class=\"prism language-c#\">\t\t\t// checkedListBox1\n            // \n            this.checkedListBox1.FormattingEnabled = true;\n\t\t\t// 设置可选项\n            this.checkedListBox1.Items.AddRange(new object[] {\n            \"苹果\",\n            \"香蕉\",\n            \"梨\"});\n            this.checkedListBox1.Location = new System.Drawing.Point(275, 135);\n            this.checkedListBox1.Name = \"checkedListBox1\";\n            this.checkedListBox1.Size = new System.Drawing.Size(165, 136);\n            this.checkedListBox1.TabIndex = 18;\n            // \n</code></pre>\n<ul><li>设置按钮点击事件。</li></ul>\n<pre><code class=\"prism language-c#\">using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\nnamespace WinFormsApp1\n{\n    public partial class Form1 : Form\n    {\n        public Form1()\n        {\n            InitializeComponent();\n        }\n        private void button1_Click(object sender, EventArgs e)\n        {\n            string msg = \"\";\n            for (int i = 0; i &lt; checkedListBox1.CheckedItems.Count; i++)\n            {\n                msg = msg + \" \" + checkedListBox1.CheckedItems[i].ToString();\n            }\n            if (msg != \"\")\n            {\n                MessageBox.Show(\"您购买的水果有：\" + msg, \"提示\");\n            }\n            else\n            {\n                MessageBox.Show(\"您没有选购水果！\", \"提示\");\n            }\n        }\n    }\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e8a96279630b40c18f38a6a2b496f783.png\"/></p>\n<p>在使用复选列表框控件时需要注意获取列表中的项使用的是<code>Checkedltems</code>属性，获取当前选中的文本（上图中蓝色的区域）使用的是 <code>Selectedltem</code>属性。</p>\n<h2><a id=\"1213_ListBox_992\"></a>12.13 ListBox：列表框控件</h2>\n<p>列表框 (ListBox) 将所提供的内容以列表的形式显示出来，可以选择其中的一项或多项内容。</p>\n<table><thead><tr><th align=\"center\">属性名</th><th align=\"center\">作用</th></tr></thead><tbody><tr><td align=\"center\">MultiColumn</td><td align=\"center\">获取或设置列表框是否支持多列，如果设置为 True，则表示支持多列； 如果设置为 False，则表示不支持多列，默认为 False</td></tr><tr><td align=\"center\">Items</td><td align=\"center\">获取或设置列表框控件中的值</td></tr><tr><td align=\"center\">SelectedItems</td><td align=\"center\">获取列表框中所有选中项的集合</td></tr><tr><td align=\"center\">SelectedItem</td><td align=\"center\">获取列表框中当前选中的项</td></tr><tr><td align=\"center\">SelectedIndex</td><td align=\"center\">获取列表框中当前选中项的索引，索引从 0 开始</td></tr><tr><td align=\"center\">SelectionMode</td><td align=\"center\">获取或设置列表框中选择的模式，当值为 One 时，代表只能选中一项， 当值为 MultiSimple 时，代表能选择多项，当值为 None 时，代表不能选 择，当值为 MultiExtended 时，代表能选择多项，但要在按下 Shift 键后 再选择列表框中的项</td></tr></tbody></table>\n<p>列表框还提供了一些方法来操作列表框中的选项，由于列表框中的选项是一个集合形式的，列表项的操作都是用Items属性进行的。</p>\n<ul><li><code>Items.Add</code> 方法用于向列表框中添加项；</li><li><code>Items.Insert</code> 方法用于向列表框中的指定位置添加项；</li><li><code>Items.Remove</code> 方法用于移除列表框中的项。</li></ul>\n<p>下面通过一个例子使用列表框控件。</p>\n<ul><li>设置控件。</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b46a26c5f7bc4c55b7ba94e279e9437f.png\"/></p>\n<pre><code class=\"prism language-c#\">            // listBox1\n            // \n            this.listBox1.FormattingEnabled = true;\n            this.listBox1.ItemHeight = 20;\n            this.listBox1.Location = new System.Drawing.Point(241, 145);\n            this.listBox1.Name = \"listBox1\";\n            this.listBox1.Size = new System.Drawing.Size(285, 164);\n            this.listBox1.TabIndex = 18;\n            this.listBox1.Items.AddRange(new object[] {\"篮球\",\"排球\",\"游泳\" });\n            // \n</code></pre>\n<ul><li>设置相应事件。</li></ul>\n<pre><code class=\"prism language-c#\">using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace WinFormsApp1\n{\n    public partial class Form1 : Form\n    {\n        public Form1()\n        {\n            InitializeComponent();\n        }\n        // 将文本框中的值添加到列表框中\n        private void button1_Click(object sender, EventArgs e)\n        {\n            // 当文本框中的值不为空时将其添加到列表框中\n            if (textBox1.Text != \"\")\n            {\n                listBox1.Items.Add(textBox1.Text);\n            }\n            else\n            {\n                MessageBox.Show(\"请添加爱好！\");\n            }\n        }\n        // 将列表框中的选中项删除\n        private void button3_Click(object sender, EventArgs e)\n        {\n            // 由于列表框控件中允许多选所以需要循环删除所有已选项\n            int count = listBox1.SelectedItems.Count;\n            List&lt;string&gt; itemValues = new List&lt;string&gt;();\n            if (count != 0)\n            {\n                for (int i = 0; i &lt; count; i++)\n                {\n                    itemValues.Add(listBox1.SelectedItems[i].ToString());\n                }\n                foreach (string item in itemValues)\n                {\n                    listBox1.Items.Remove(item);\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"请选择需要删除的爱好！\");\n            }\n        }\n    }\n}\n</code></pre>\n<img src=\"https://media.giphy.com/media/Nf3snh5n8aMEeDPfUh/giphy.gif\"/>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-07 12:48:12", "summary": "文章目录窗体应用程序创建窗体应用程序窗体属性窗体事件窗体方法：消息框控件和：标签控件：文本框控件：按钮控件：单选按钮控件：复选框控件：复选列表框控件：列表框控件窗体应用程序是的简称，是基于平台的客户端"}