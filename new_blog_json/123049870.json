{"blogid": "123049870", "writerAge": "码龄7年", "writerBlogNum": "107", "writerCollect": "1540", "writerComment": "108", "writerFan": "467", "writerGrade": "5级", "writerIntegral": "2252", "writerName": "泠山", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123049870.jpg", "writerRankTotal": "7916", "writerRankWeekly": "13195", "writerThumb": "330", "writerVisitNum": "277607", "blog_read_count": "3711", "blog_time": "已于 2022-02-23 11:57:21 修改", "blog_title": "VSCode的C/C++扩展功能", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>VSCode的C/C++扩展功能</h3>\n<ul><li><a href=\"#1__Linux___C_6\">1. 在 Linux 上 使用 C++</a></li><li><ul><li><a href=\"#11__Hello_World_7\">1.1 创建 Hello World</a></li><li><a href=\"#12__IntelliSense_41\">1.2 探索 IntelliSense</a></li><li><a href=\"#font_colorred13__helloworldcppfont_45\"><font color=\"red\">1.3 构造 helloworld.cpp</font></a></li><li><ul><li><a href=\"#131__build_82\">1.3.1 运行 build</a></li><li><a href=\"#132__tasksjson_90\">1.3.2 修改 tasks.json</a></li></ul>\n</li><li><a href=\"#14_Debug_helloworldcpp_93\">1.4 Debug helloworld.cpp</a></li><li><ul><li><a href=\"#141__133\">1.4.1 启动调试会话</a></li></ul>\n</li><li><a href=\"#15__142\">1.5 一步步执行代码</a></li><li><a href=\"#16__Watch_158\">1.6 设置一个 Watch</a></li><li><a href=\"#17_CC__164\">1.7 C/C++ 配置</a></li></ul>\n</li><li><a href=\"#2__191\">2. 一些快捷键</a></li><li><ul><li><a href=\"#21_kbdCtrlP_kbd_192\">2.1 导航到当前源文件中的一个特定的符号（<kbd>Ctrl+P, @符号名称</kbd>）</a></li><li><a href=\"#22_kbdCtrlP_kbd_194\">2.2 导航到其他源文件中的一个特定的符号（<kbd>Ctrl+P, #符号名称</kbd>）</a></li><li><a href=\"#23_kbdF12kbd_196\">2.3 转到定义（<kbd>F12</kbd>）</a></li><li><a href=\"#24_kbdAlt__F12kbd_199\">2.4 查看定义（<kbd>Alt + F12</kbd>）</a></li><li><a href=\"#25_Ctrl___202\">2.5 Ctrl + 光标悬停</a></li></ul>\n</li></ul>\n</div>\n<br/> Reference:\n<p></p>\n<ol><li><a href=\"https://docs.microsoft.com/zh-cn/archive/blogs/c/visual-studio-code%E7%9A%84cc%E6%89%A9%E5%B1%95%E5%8A%9F%E8%83%BD\">Visual Studio Code的C/C++扩展功能</a></li><li><a href=\"https://code.visualstudio.com/docs/cpp/config-linux#_modifying-tasksjson\">Using C++ on Linux in VS Code</a></li></ol>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\35247c93f196447b8514792b8560b1eb.png\"/></p>\n<h1><a id=\"1__Linux___C_6\"></a>1. 在 Linux 上 使用 C++</h1>\n<h2><a id=\"11__Hello_World_7\"></a>1.1 创建 Hello World</h2>\n<p>从 terminal 窗口，创建一个叫做 <code>projects</code> 的空文件夹来存储 VS Code 项目。然后创建一个叫做 <code>helloworld</code> 的子文件夹，导航到里面后，输入最下面的命令打开 VS Code：</p>\n<pre><code>mkdir projects\ncd projects\nmkdir helloworld\ncd helloworld\ncode .\n</code></pre>\n<p><code>code .</code> 命令打开当前文件夹下的 VS Code，也就是 ”workspace“。在该 workspace 内的 <code>.vscode</code> 文件夹下会创建三个文件：</p>\n<ul><li><code>tasks.json</code> (<font color=\"red\">compiler build 设置</font>)</li><li><code>launch.json</code> (<font color=\"red\">debugger 设置</font>)</li><li><code>c_cpp_properties.json</code> (<font color=\"red\">compiler path and IntelliSense 设置</font>)</li></ul>\n<p>创建文件 <code>helloworld.cpp</code> 并复制以下源代码：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> msg <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C++\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"World\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"from\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"VS Code\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"and the C++ extension!\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> word <span class=\"token operator\">:</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> word <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"12__IntelliSense_41\"></a>1.2 探索 IntelliSense</h2>\n<p>在 <code>helloworld.cpp</code> 文件中，将鼠标悬停在 <code>vector</code> 或 <code>string</code> 上查看类型信息。在申明 <code>msg</code> 变量后面，开始输入 <code>msg.</code>。这时看到一个显示所有成员函数的补全列表，以及一个显示 <code>msg</code> 对象类型信息的窗口：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\adb9841c1f11497d968fe79030e6d284.png\" width=\"600\"/>按 <code>Tab</code> 键插入选中的成员。然后，当添加开括号时，会看到关于函数所需参数的信息。</p>\n<h2><a id=\"font_colorred13__helloworldcppfont_45\"></a><font color=\"red\">1.3 构造 helloworld.cpp</font></h2>\n<p>这时需要创建一个 <code>tasks.json</code> 文件来告诉 VS Code 如何构造(搭建)该程序。<strong>这个文件会唤醒 g++ 编译器，并从源代码创建一个可执行文件</strong>。</p>\n<p><font color=\"red\">在编辑器中打开 <code>helloworld.cpp</code> 非常重要，因为下一步将使用上下文编辑器中的 <strong>active file(活动文件:该文件处于可编辑或更改状态，内容、大小及属性都是可以随时间变化的)</strong> 来创建下一步的构建任务</font>：<br/> 在主菜单中，选择 Terminal &gt; Configure Default Build Task。下拉菜单显示了C++编译器的各种预定义构建任务，这里选择 <kbd>C/C++: g++ build active file</kbd>。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cfe02d40537f4e30ad56cc9944dae190.png\" width=\"700\"/>这里会在 <code>.vscode</code> 文件夹内创建一个 <code>tasks.json</code> 文件并在编译器内打开它。这时的 <code>tasks.json</code> 文件看起来应该跟下面的 JSON 相似：</p>\n<pre><code>{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"type\": \"shell\",\n      \"label\": \"g++ build active file\",\n      \"command\": \"/usr/bin/g++\",\n      \"args\": [\"-g\", \"${file}\", \"-o\", \"${fileDirname}/${fileBasenameNoExtension}\"],\n      \"options\": {\n        \"cwd\": \"/usr/bin\"\n      },\n      \"problemMatcher\": [\"$gcc\"],\n      \"group\": {\n        \"kind\": \"build\",\n        \"isDefault\": true\n      }\n    }\n  ]\n}\n</code></pre>\n<blockquote>\n<p>可以在<a href=\"https://code.visualstudio.com/docs/editor/variables-reference\">variables reference</a>了解更多关于 <code>task.json</code> 变量。</p>\n</blockquote>\n<p><code>command</code> 设置指定要运行的程序;在本例中，使用的是 g++。<code>args</code> 数组指定将传递给 g++ 的命令行参数。这些参数必须按照编译器期望的顺序指定。</p>\n<p>这个文件告诉 g++ 获取 active file(<code>${file}</code>)，编译它，并在当前目录(<code>${fileDirname}</code>)中创建一个与 active file 同名但没有扩展名(<code>${fileBasenameNoExtension}</code>)(比如.exe等)的可执行文件，从而得到示例中的 <code>helloworld</code>。</p>\n<p><code>label</code> 的值是会在 tasks list 中看到的，可以给它随便命名。</p>\n<p><code>group</code> 对象中的 <code>\"isDefault\": true</code> 值指定该任务将在按下 <kbd>Ctrl+Shift+B</kbd> 时运行。这个属性只是为了方便;如果将这个值设置为 false，仍然可以从终端菜单的 <strong>Tasks: Run Build Task</strong> 运行它。</p>\n<h3><a id=\"131__build_82\"></a>1.3.1 运行 build</h3>\n<ol><li>回到 <code>helloworld.cpp</code>。现在的任务是搭建 active file，这时想要搭建 <code>helloworld.cpp</code>。</li><li>为了运行定义在 <code>tasks.json</code> 内的 build task，按下 <kbd>Ctrl+Shift+B</kbd> 或者从主菜单 <kbd>Terminal</kbd> 选择 <kbd>Run Build Task</kbd>。</li><li>当任务开始时，会看到集成终端面板出现在源代码编辑器下面。任务完成后，终端显示编译器的输出，指示构建是成功还是失败。对于一个成功的 g++ 构建，输出如下所示:<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9fb2c62caa6545e4888e5aa272438b4c.png\"/></li><li>使用 <kbd>+</kbd> 按钮创建一个新的终端，将会拥有一个运行默认 shell 的终端，并将 <code>helloworld</code> 文件夹作为工作目录。运行 <code>ls</code>，应该看到可执行文件 <code>helloworld</code>(没有文件扩展名)。</li><li>可以通过输入 <code>./helloworld</code> 在终端运行 <code>helloworld</code>。</li></ol>\n<h3><a id=\"132__tasksjson_90\"></a>1.3.2 修改 tasks.json</h3>\n<p>也可以修改 <code>tasks.json</code> 文件，用 <code>\"${workspaceFolder}/*.cpp\"</code> 替代 <code>${file}</code> 来构建多个 C++ 文件。也可以通过用硬编码的文件名(例如helloworld.out)替换 <code>\"${fileDirname}/${fileBasenameNoExtension}\"</code> 来修改输出文件名。</p>\n<h2><a id=\"14_Debug_helloworldcpp_93\"></a>1.4 Debug helloworld.cpp</h2>\n<p>接下来，将创建一个 <code>launch.json</code> 文件。当按下 <kbd>F5</kbd> 调试程序时，VS Code 将启动 GDB 调试器。</p>\n<p>从主菜单上，选择 <kbd>Run &gt; Add Configuration</kbd>，然后选择 <kbd>C++ (GDB/LLDB)</kbd>。</p>\n<p>然后，会看到一个用于各种预定义调试配置的下拉菜单。选择 <kbd>g++ build and debug active file</kbd>。<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9db75f6742414530a5d779e4994a8142.png\"/>这时 VS Code 创建了一个 <code>launch.json</code> 文件。在编辑器中打开它，并搭建和运行 ‘helloworld’。</p>\n<pre><code class=\"prism language-json\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token string\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.2.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"configurations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"g++ build and debug active file\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cppdbg\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"launch\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"program\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"${fileDirname}/${fileBasenameNoExtension}\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"args\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"stopAtEntry\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"cwd\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"${workspaceFolder}\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"environment\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"externalConsole\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"MIMode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gdb\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"setupCommands\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token string\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Enable pretty-printing for gdb\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"text\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"-enable-pretty-printing\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"ignoreFailures\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"preLaunchTask\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"g++ build active file\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"miDebuggerPath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/usr/bin/gdb\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在上面的 JSON，<code>prgoram</code> 指定想要去 debug 的程序。在这里，它被设置为 active file folder <code>${fileDirname}</code> 和没有扩展名的 active filename <code>${fileBasenameNoExtension}</code>，如果 <code>helloworld.cpp</code> 是所需的 active file，那就是 <code>helloworld</code>。</p>\n<p>默认情况下，C++ 扩展不会向源代码添加任何断点，<code>stopAtEntry</code> 值设置为 <code>false</code>。</p>\n<p>将 <code>stopAtEntry</code> 值更改为 <code>true</code>，以使调试器在开始调试时<strong>在 <code>main</code> 方法上</strong>停止。</p>\n<h3><a id=\"141__133\"></a>1.4.1 启动调试会话</h3>\n<ol><li>返回 <code>hellloworld.cpp</code> 使得该程序变为 active file。</li><li>按下 <kbd>F5</kbd> 或从主菜单中选择 <kbd>Run &gt; Start Debugging</kbd>。在开始逐步分析代码之前，让我们花点时间注意用户界面中的几个变化：</li></ol>\n<ul><li>集成终端显示在源代码编辑器的底部。在 <kbd>Debug Output</kbd> 选项中，可以看到显示调试器已启动并正在运行的输出。</li><li>编辑器高亮 <code>main</code> 方法中的第一个语句。这是 C++ 扩展自动为您设置的一个断点:<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1a2fcfeb7eca43eba2bfefb0a756f096.png\"/></li><li>在左侧的“Run”视图中显示调试信息。将在本教程后面看到一个示例。</li><li>在代码编辑器的顶部，出现一个调试控制面板。可以通过抓取左边的点在屏幕上移动它。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\747ac0aa24a84ed383689bdb23036a2b.png\"/></li></ul>\n<h2><a id=\"15__142\"></a>1.5 一步步执行代码</h2>\n<p>现在开始一步步执行代码：</p>\n<ol><li>点击调试控制面板上的 <kbd>Step over</kbd> 图标。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2008876f8a1b4bd2b755c644fd6a6196.png\"/><br/> 这将把程序执行推进到 for 循环的第一行，并跳过在创建和初始化 <code>ms</code>g 变量时调用的 <code>vector</code> 和 <code>string</code> 类中的所有<strong>内部函数调用</strong>。注意旁边变量窗口中的变化。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\210983765ab646e7ace88df117248b90.png\" width=\"300\"/></li><li>再次按 <kbd>Step over</kbd> 键进入程序中的下一条语句(跳过所有用于初始化循环的内部代码)。现在，<kbd>Variables</kbd> 窗口显示了关于循环变量的信息。</li><li>再次按Step执行cout语句。(请注意，在2019年3月发布的版本中，c++扩展在最后一次cout执行之前不会向调试控制台输出任何输出。)</li><li>如果愿意，可以一直按 <kbd>Step over</kbd> 键，直到向量中的所有单词都被打印到控制台上。但如果您对此感到好奇，请尝试按 <kbd>Step Into</kbd> 按钮来逐步浏览 C++ 标准库中的源代码!<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f81ea022af1e4741b91c022b5b84ab9a.png\"/><br/> 要返回到自己的代码，一种方法是一直按 <kbd>Step over</kbd>。另一种方法是在代码中设置断点，方法是切换到代码编辑器中的 <code>helloworld.cpp</code> 标签，将插入点放在循环中 <code>cout</code> 语句的某个位置，然后按F9。左边的 gutter 中出现一个红点，表示已在该行设置了断点。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\62f8a28de9c14395bb0d5a36b556e46a.png\"/><br/> 然后按 <kbd>F5</kbd> 从标准库头的当前行开始执行。执行将会在 <code>cout</code> 中断。如果愿意，可以再次按 <kbd>F9</kbd> 关闭断点。<br/> <br/> 当循环完成时，您可以在集成终端的 <kbd>Debug Console</kbd> 选项卡中看到输出，以及由 GDB 输出的其他一些诊断信息。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b965b42f4a6c41249384e7cf4fae4730.png\"/></li></ol>\n<h2><a id=\"16__Watch_158\"></a>1.6 设置一个 Watch</h2>\n<p>要在程序执行时跟踪变量的值，请对该变量设置一个 <kbd>watch</kbd>。</p>\n<ol><li>将插入点放置在循环内部。在 <kbd>watch</kbd> 窗口中，单击加号，并在文本框中输入 <code>word</code>，这是循环变量的名称。现在，在遍历循环时查看 Watch 窗口。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5a8a51dde4eb44289d074c6e43a32890.png\"/></li><li>要在断点上暂停执行时快速查看任何变量的值，可以使用鼠标指针悬停在该变量上。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\26e0816a523945a4bbd1fe89c4549d65.png\"/></li></ol>\n<h2><a id=\"17_CC__164\"></a>1.7 C/C++ 配置</h2>\n<p>如果要更好地控制 C/C++ extension，可以创建一个 <code>c_cpp_properties.json</code> 文件，该文件将允许更改设置，例如编译器的路径、包含路径、C++标准（默认值为 C++17）等。</p>\n<p>可以通过运行命令面板(<kbd>Ctrl+Shift+P</kbd>)中的命令 C/C++: Edit Configurations (UI) 来查看 C/C++ 配置 UI。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\408b4c38d91746efb759880e93b77e76.png\" width=\"600\"/><br/> 这将打开 <kbd>C/C++ Configurations</kbd> 页。在此处进行更改时，VS Code 会将它们写入 <code>.vscode</code> 文件夹中名为 <code>c_cpp_properties.json</code> 的文件。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2e3b25040b6d4376acf78eda4859da3b.png\" width=\"600\"/><br/> 仅当程序包含不在工作区或标准库路径中的头文件时，才需要修改 <kbd>Include path</kbd> 设置。</p>\n<p>VS Code 将这些设置放在 <code>.vscode/c_cpp_properties.json</code> 中。如果直接打开该文件，它应该如下所示：</p>\n<pre><code class=\"prism language-json\"><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token string\">\"configurations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Linux\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"includePath\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"${workspaceFolder}/**\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"defines\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"compilerPath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/usr/bin/gcc\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"cStandard\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"c11\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"cppStandard\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"c++17\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"intelliSenseMode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"clang-x64\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"2__191\"></a>2. 一些快捷键</h1>\n<h2><a id=\"21_kbdCtrlP_kbd_192\"></a>2.1 导航到当前源文件中的一个特定的符号（<kbd>Ctrl+P, @符号名称</kbd>）</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/1340721cf5594405a1c874661e50c1e3.gif#pic_center\"/></p>\n<h2><a id=\"22_kbdCtrlP_kbd_194\"></a>2.2 导航到其他源文件中的一个特定的符号（<kbd>Ctrl+P, #符号名称</kbd>）</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/c17c649562514443b66d901b5a18c9b4.gif#pic_center\"/></p>\n<h2><a id=\"23_kbdF12kbd_196\"></a>2.3 转到定义（<kbd>F12</kbd>）</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\407cbc0af72d4940a9fd4905719d2552.png\"/></p>\n<h2><a id=\"24_kbdAlt__F12kbd_199\"></a>2.4 查看定义（<kbd>Alt + F12</kbd>）</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/196d70dff948431e94f1c6b40699b9d7.gif#pic_center\"/></p>\n<h2><a id=\"25_Ctrl___202\"></a>2.5 Ctrl + 光标悬停</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/2154ffab2c9a4ccd87667b795ddcd699.gif#pic_center\"/><br/> 相关文章：<br/> <a href=\"https://blog.csdn.net/qq_28087491/article/details/123049132\">VSCode必备插件-C++等</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-02-23 11:57:21", "summary": "的扩展功能在上使用创建探索构造运行修改启动调试会话一步步执行代码设置一个配置一些快捷键导航到当前源文件中的一个特定的符号符号名称导航到其他源文件中的一个特定的符号符号名称转到定义查看定义光标悬停的扩展"}