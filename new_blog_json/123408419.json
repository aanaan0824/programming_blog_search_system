{"blogid": "123408419", "writerAge": "码龄4年", "writerBlogNum": "75", "writerCollect": "557", "writerComment": "148", "writerFan": "90", "writerGrade": "4级", "writerIntegral": "1006", "writerName": "被代码折磨的狗子", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123408419.jpg", "writerRankTotal": "18658", "writerRankWeekly": "25953", "writerThumb": "145", "writerVisitNum": "134050", "blog_read_count": "4831", "blog_time": "于 2022-03-10 22:37:36 发布", "blog_title": "Unity中关于委托与事件的使用及区别", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>一、前言</h1>\n<p>1.什么是委托？</p>\n<blockquote>\n<p>委托是一种容器，容器里面放的是函数方法。而函数的形式各不相同，参数，返回值各不相同，所以你做委托之前，先得要定义好这个委托容器存放的函数的类型,即委托类型。</p>\n<p>定义了好了函数类型后，将函数加入到委托容器后，你只要触发委托调用，委托就会帮你把容器里面的每个函数都调用一次,触发的时候和调用普通函数没有区别。</p>\n</blockquote>\n<p>2.什么是事件？</p>\n<blockquote>\n<p>事件在类中声明且生成，且通过使用同一个类或其他类中的委托与事件处理程序关联。包含事件的类用于发布事件。这被称为 <strong>发布器（publisher）</strong> 类。其他接受该事件的类被称为 <strong>订阅器（subscriber）</strong> 类。事件使用 <strong>发布-订阅（publisher-subscriber）</strong> 模型。</p>\n</blockquote>\n<h1>二、简单案例介绍解析</h1>\n<h3>1.委托</h3>\n<p>举个例子来使用委托：我们先定义一个宠物名称委托，在TestA类中实现狗和猫的方法</p>\n<pre><code class=\"language-cs\">using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic delegate void PetName(string name); //委托 (需要一个string类型的参数当宠物名称)\n\n//陆地动物类\npublic class TestA : MonoBehaviour\n{\n    PetName petName; //声明委托\n\n    void Start()\n    {\n        //委托\n        petName += Dog; //狗\n        petName += Cat; //猫\n\n        //调用委托事件\n        petName(\"大白\");\n\n    }\n\n    //狗 因为委托调用所以需要一个string参数\n    void Dog(string name)\n    {\n        Debug.Log($\"我叫{name}，是一只猫\");\n    }\n\n    //猫\n    void Cat(string name)\n    {\n        Debug.Log($\"我叫{name}，是一只狗\");\n    }\n}\n</code></pre>\n<p>运行结果：</p>\n<p><img alt=\"\" height=\"123\" src=\"..\\..\\static\\image\\3c54a738a08b4059855bb2bf62f002ce.png\" width=\"545\"/></p>\n<p>从中我们可以看到，当我们把两个方法（狗，猫）“添加”到委托中时，我们只需要调用定义的委托（petName方法） 就可以同时执行添加的两个方法。根据上面的委托的含义来解释，我们创建了一个petName委托当作容器，然后将dog（狗），cat（猫）方法添加到容器中，这样我们只需要执行容器就可以将容器中的所有方法都给执行。</p>\n<h3>2.事件</h3>\n<p> 需要基于上一个委托来实现，我们先创建一个TestB类，里面有两个方法Parrot(string name)鹦鹉、Pigeon(string name)鸽子。同时创建一个Event事件。</p>\n<pre><code class=\"language-cs\">using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\n//鸟类\npublic class TestB : MonoBehaviour\n{\n    public static event PetName SayHelloEvent;//事件\n\n    void Start()\n    {\n        //在事件中添加方法\n        SayHelloEvent = Parrot;\n        SayHelloEvent += Pigeon;\n\n        SayHelloEvent(\"小白\");\n    }\n\n    //鹦鹉\n    public static void Parrot(string name) \n    {\n        Debug.Log($\"我叫{name}，是一只鹦鹉\");\n    }\n\n    //鸽子\n    public static void Pigeon(string name)\n    {\n        Debug.Log($\"我叫{name}，是一只鸽子\");\n    }\n}\n</code></pre>\n<p>把上一个脚本TestA禁用 将TestB拖入场景运行效果：</p>\n<p><img alt=\"\" height=\"117\" src=\"..\\..\\static\\image\\0a894932d1444b3ea58a9cd0f9f7e083.png\" width=\"542\"/></p>\n<h1>三、委托与事件的区别</h1>\n<p> 委托与事件的使用是一样的，但是事件会有很多限制条件。两者定义与区别如下：</p>\n<h3>1.委托创建时会定义方法的类型。（是否有无参数、有无返回值）</h3>\n<pre><code class=\"language-cs\">using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic delegate void DelegateA();               //无参无返回值\npublic delegate void DelegateB(string name);    //有参无返回值\npublic delegate string DelegateC();             //无参有返回值\npublic delegate string DelegateD(string name);  //有参有返回值\n\n//陆地动物类\npublic class TestA : MonoBehaviour\n{\n    //委托定义\n    DelegateA delegateA;        //无参无返回值\n    DelegateB delegateB;        //有参无返回值\n    DelegateC delegateC;        //无参有返回值        \n    DelegateD delegateD;        //有参有返回值\n\n    void Start()\n    {\n        //添加方法\n        delegateA = A;\n        delegateB = B;\n        delegateC = C;\n        delegateD = D;\n\n        //这里错误示范  delegateA委托添加B方法会报错，原因委托定义了方法类型，B方法类型不符合delegateA定义的方法类型会报错\n        //delegateA += B;\n\n        //运行\n        delegateA();\n        delegateB(\"\");\n        delegateC();\n        delegateD(\"\");\n\n    }\n\n    void A() \n    {\n        Debug.Log(\"无参无返回值\");\n    }\n    void B(string name)\n    {\n        Debug.Log(\"有参无返回值\");\n    }\n    string C()\n    {\n        Debug.Log(\"无参有返回值\");\n        return \"\";\n    }\n    string D(string name)\n    {\n        Debug.Log(\"有参有返回值\");\n        return \"\";\n    }\n}</code></pre>\n<p>运行结果：</p>\n<p><img alt=\"\" height=\"193\" src=\"..\\..\\static\\image\\f8eb86a8e03d4846913e9adc7b8b74e2.png\" width=\"541\"/> </p>\n<p>错误示范：</p>\n<p><img alt=\"\" height=\"160\" src=\"..\\..\\static\\image\\eb6c5bb8cdf14d35a25d0ee47d0a24a8.png\" width=\"1158\"/></p>\n<h3>2.事件的创建需要一个委托才能声明，</h3>\n<p><img alt=\"\" height=\"219\" src=\"..\\..\\static\\image\\16fcf2df789d4441a87c18289af1c439.png\" width=\"558\"/></p>\n<h3>3.委托可以在任何类中或类外声明，但是事件只能在类中声明，如下：</h3>\n<p><img alt=\"\" height=\"286\" src=\"..\\..\\static\\image\\cba041e964024435bb6f14b1b09bef3c.png\" width=\"1005\"/></p>\n<h3>4.事件只能在当前声明的类中使用，无论将事件设置成public还是static其他类都无法调用</h3>\n<p><img alt=\"\" height=\"530\" src=\"..\\..\\static\\image\\87a5dedb48c3465b9c75600e2334c09a.png\" width=\"1052\"/></p>\n<p> 总的来说事件Event是一个添加了许多限制的委托。</p>\n<h1> 四、案例使用</h1>\n<h3>案例一：</h3>\n<blockquote>\n<p>举一个大家经常用的例子，你在CSDN中订阅一个博主的专栏（游戏专栏），当这个博主发布了这个专栏的一个最新文章，就会收到消息。这个就是用的委托，实现如下</p>\n</blockquote>\n<p>1.创建一个博主类Blogger，负责书写文章，并且调用委托事件向订阅专栏的用于发送最新文章</p>\n<pre><code class=\"language-cs\">using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\n\n\n//这是一个博主类负责书写文章，并且调用委托事件向订阅专栏的用于发送最新文章\npublic class Blogger : MonoBehaviour\n{\n    public InputField articleName; //文章名称\n    public Button uploadBtn; //上传文章\n\n    void Start()\n    {\n        //按钮监听\n        uploadBtn.onClick.AddListener(UpLoad);\n    }\n\n    //上传事件\n    void UpLoad() \n    {\n        //上传文章名称不为空时\n        if (articleName.text!=string.Empty)\n        {\n            Debug.Log($\"博主上传文章：{articleName.text}\");\n        }\n    }\n}\n</code></pre>\n<p> 2.创建一个有参无返回值的订阅委托，用于存放订阅人员推送信息方法，并在博主类中声明创建。与上方博主类结合，完整代码如下：</p>\n<pre><code class=\"language-cs\">using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\n\npublic delegate void Subscribe(string name);//订阅委托 用于存放订阅人员的推送方法\n\n//这是一个博主类负责书写文章，并且调用委托事件向订阅专栏的用于发送最新文章\npublic class Blogger : MonoBehaviour\n{\n    public InputField articleName; //文章名称\n    public Button uploadBtn; //上传文章\n\n    public static Subscribe subscribe; //创建公用的静态订阅委托\n\n    void Start()\n    {\n        //按钮监听\n        uploadBtn.onClick.AddListener(UpLoad);\n    }\n\n    //上传事件\n    void UpLoad() \n    {\n        //上传文章名称不为空时\n        if (articleName.text!=string.Empty)\n        {\n            Debug.Log($\"博主上传文章：{articleName.text}\");\n            subscribe(articleName.text); //向订阅的人员发送信息\n        }\n    }\n}\n</code></pre>\n<p>3.新建两个PeopleA、PeopleB人员类，在里面声明Push推送消息方法，并且在strat里添加到订阅委托中 </p>\n<p>PeopleA：</p>\n<pre><code class=\"language-cs\">using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\n//订阅人员A\npublic class PeopleA : MonoBehaviour\n{\n    void Start()\n    {\n        Blogger.subscribe += Push; //向订阅委托中添加人员A的推送方法\n    }\n\n    //推送信息\n    void Push(string name)\n    {\n        Debug.Log($\"我是人员A，接收到博主最新文章：{name}\");\n    }\n}\n</code></pre>\n<p>PeopleB：</p>\n<pre><code class=\"language-cs\">using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\n//订阅人员B\npublic class PeopleB : MonoBehaviour\n{\n    void Start()\n    {\n        Blogger.subscribe += Push; //向订阅委托中添加人员A的推送方法\n    }\n    //推送信息\n    void Push(string name) \n    {\n        Debug.Log($\"我是人员B，接收到博主最新文章：{name}\");\n    }\n}\n</code></pre>\n<p>将这三个脚本拖入场景布局如下：</p>\n<p><img alt=\"\" height=\"752\" src=\"..\\..\\static\\image\\18aeec4683cc4b018218ae323f8032bb.png\" width=\"1116\"/></p>\n<p> 运行结果：</p>\n<p><img alt=\"\" height=\"336\" src=\"https://img-blog.csdnimg.cn/4312f5e6683a4cc386dd5613b631c513.gif\" width=\"718\"/></p>\n<p>其他案例：</p>\n<p><a class=\"link-info\" href=\"https://blog.csdn.net/ChinarCSDN/article/details/80387157?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161232462616780255284165%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161232462616780255284165&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-1-80387157.first_rank_v2_pc_rank_v29_10&amp;utm_term=unity%E4%B8%AD%E5%AE%9A%E4%B9%89delegate%E5%A7%94%E6%89%98%E5%9C%A8%E5%85%B6%E4%BB%96%E8%84%9A%E6%9C%AC%E4%B8%AD%E8%B0%83%E7%94%A8&amp;spm=1018.2226.3001.4187\" title=\"https://blog.csdn.net/ChinarCSDN/article/details/80387157?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161232462616780255284165%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161232462616780255284165&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-1-80387157.first_rank_v2_pc_rank_v29_10&amp;utm_term=unity%E4%B8%AD%E5%AE%9A%E4%B9%89delegate%E5%A7%94%E6%89%98%E5%9C%A8%E5%85%B6%E4%BB%96%E8%84%9A%E6%9C%AC%E4%B8%AD%E8%B0%83%E7%94%A8&amp;spm=1018.2226.3001.4187\">https://blog.csdn.net/ChinarCSDN/article/details/80387157?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161232462616780255284165%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161232462616780255284165&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-1-80387157.first_rank_v2_pc_rank_v29_10&amp;utm_term=unity%E4%B8%AD%E5%AE%9A%E4%B9%89delegate%E5%A7%94%E6%89%98%E5%9C%A8%E5%85%B6%E4%BB%96%E8%84%9A%E6%9C%AC%E4%B8%AD%E8%B0%83%E7%94%A8&amp;spm=1018.2226.3001.4187</a> </p>\n<p></p>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-10 22:37:36", "summary": "一、前言什么是委托？委托是一种容器，容器里面放的是函数方法。而函数的形式各不相同，参数，返回值各不相同，所以你做委托之前，先得要定义好这个委托容器存放的函数的类型即委托类型。定义了好了函数类型后，将函"}