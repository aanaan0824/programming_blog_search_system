{"blogid": "124036655", "writerAge": "码龄6年", "writerBlogNum": "40", "writerCollect": "75", "writerComment": "9", "writerFan": "10", "writerGrade": "4级", "writerIntegral": "957", "writerName": "墨池象牙白", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124036655.jpg", "writerRankTotal": "27268", "writerRankWeekly": "55171", "writerThumb": "25", "writerVisitNum": "72634", "blog_read_count": "3437", "blog_time": "于 2022-04-08 11:14:40 发布", "blog_title": "Unity URP 简单的Renderer Feature", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>Unity 2019.4.30<br/> URP 7.7.1<br/> 刚把测试项目升级到URP，本想看官方的Demo工程学习写一个简单后效，快速GettingStart<br/> 结果官方示例已经是 Unity 2020 URP 10.8.1 内容变化很多</p>\n<p>最后还是结合Unity教程，终于把简单的后效跑起来了</p>\n<h2><a id=\"Forward_Renderer_Data_7\"></a>Forward Renderer Data</h2>\n<p>创建Pipeline Asset之后，有一个同名的Forward Renderer Data</p>\n<p>创建Forward Render Data，我命名的是DistortForwardData，扭曲的效果，测试的话默认ImageEffect就行。</p>\n<p>添加到 PipelineAsset RenderList</p>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\158ac3e15aa44b83b637cde948079e44.png\"/></p>\n<p>回到DistortForwardData</p>\n<p>Add Renderer Feature 可以添加Renderer Feature，但是此时只能添加Renderer Objects，还是实验性的</p>\n<p>后效需要构建自己的Renderer Feature</p>\n<h2><a id=\"Renderer_Feature_28\"></a>Renderer Feature</h2>\n<p>创建DistortFeature类，继承ScriptableRendererFeature</p>\n<p>再加两个类，逻辑比较简单直接作为内部类就行。</p>\n<p>CustomPass类，继承ScriptableRenderPass，核心的渲染逻辑写在这里。</p>\n<p>DistortSettings类，主要是用于传参，会出现在Renderer Feature的面板上，可以把材质参数放这里。</p>\n<p>这时候在DistortForwardData就可以看到我们写的Feature啦</p>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\79b127a3306e45978e9d7eb6f445f18a.png\"/></p>\n<p>大致的代码结构如下：</p>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\1fe11d92c3054cb58f208dd8787957bb.png\"/></p>\n<p>Create()</p>\n<p>可以在这里做初始化操作。</p>\n<p>比如把Setting的参数赋值给CustomPass，我们会在CustomPass对材质参数进行设置。</p>\n<pre><code>    public override void Create()\n    {\n        customPass = new CustomPass();\n        customPass.renderPassEvent = Settings.renderPassEvent;\n        customPass.Material = Settings.Material;\n        customPass.Distortion = Settings.Distortion;\n        customPass.Scale = Settings.Scale;\n    }\n</code></pre>\n<p>AddRenderPasses()</p>\n<p>在这里将CustomPass加入队列</p>\n<p>我们的CustomPass还需要相机的输出，就来自ScriptableRenderer.cameraColorTarget，</p>\n<p>给CustomPass增加Setup方法，在加入队列之前，由Setup传给CustomPass</p>\n<pre><code class=\"prism language-c#\"> public override void AddRenderPasses(ScriptableRenderer renderer, ref RenderingData renderingData)\n {\n     customPass.Setup(renderer.cameraColorTarget);\n     renderer.EnqueuePass(customPass);\n }\n</code></pre>\n<h2><a id=\"Renderer_Pass_95\"></a>Renderer Pass</h2>\n<p>核心方法就是Execute，我们在这里创建CommandBuffer，由ScriptableRenderContext执行。</p>\n<p>CustomPass的父类ScriptableRenderPass属性renderPassEvent指定执行的阶段。</p>\n<pre><code class=\"prism language-c#\">public class DistortFeature : ScriptableRendererFeature\n{\n    [System.Serializable]\n    public class DistortSettings\n    {\n        public RenderPassEvent renderPassEvent = RenderPassEvent.AfterRenderingTransparents;\n        public Material Material = null;\n        [Range(0.001f, 10)] public float Distortion;\n        [Range(0.001f, 10)] public float Scale;\n    }\n\n    public class CustomPass : ScriptableRenderPass\n    {\n        static readonly string renderTag = \"My Distort Effect\";\n        public Material Material = null;\n        public float Distortion;\n        public float Scale;\n\n        RenderTargetIdentifier currentTarget;\n        int TempTargetId = Shader.PropertyToID(\"_TempTarget\");\n\n        public void Setup(in RenderTargetIdentifier target)\n        {\n            currentTarget = target;\n        }\n\n        public override void Execute(ScriptableRenderContext context, ref RenderingData renderingData)\n        {\n            if (Material == null) return;\n\n            var source = currentTarget;\n            var destination = TempTargetId;\n\n            Material.SetFloat(\"_distortion\", Distortion);\n            Material.SetFloat(\"_scale\", Scale);\n\n            CommandBuffer cmd = CommandBufferPool.Get(renderTag);\n            cmd.Clear();\n\n            cmd.GetTemporaryRT(destination, Screen.width, Screen.height, 0);\n            cmd.Blit(source, destination, Material);\n            cmd.Blit(destination, source);\n\n            context.ExecuteCommandBuffer(cmd);\n            CommandBufferPool.Release(cmd);\n        }\n    }\n\n    public DistortSettings Settings = new DistortSettings();\n\n    private CustomPass customPass;\n\n    public override void Create()\n    {\n        customPass = new CustomPass();\n        customPass.renderPassEvent = Settings.renderPassEvent;\n        customPass.Material = Settings.Material;\n        customPass.Distortion = Settings.Distortion;\n        customPass.Scale = Settings.Scale;\n    }\n\n    public override void AddRenderPasses(ScriptableRenderer renderer, ref RenderingData renderingData)\n    {\n        customPass.Setup(renderer.cameraColorTarget);\n        renderer.EnqueuePass(customPass);\n    }\n}\n</code></pre>\n<p>回到场景把相机设置上<br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\1991d5f0195047198978960afd3db04f.png\"/></p>\n<p>然后就可以在Forward Renderer Data修改参数查看效果</p>\n<p><img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\026af72b73ab4bf58b7ac6b2e546bb75.png\"/></p>\n<p>参考资料：</p>\n<p>[1] URP系列教程 | 如何使用Scriptable Renderer Feature来自定义后处理效果(https://zhuanlan.zhihu.com/p/373273390)</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-04-08 11:14:40", "summary": "刚把测试项目升级到，本想看官方的工程学习写一个简单后效，快速结果官方示例已经是内容变化很多最后还是结合教程，终于把简单的后效跑起来了创建之后，有一个同名的创建，我命名的是，扭曲的效果，测试的话默认就行"}