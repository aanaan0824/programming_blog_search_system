{"blogid": "119830756", "writerAge": "码龄7年", "writerBlogNum": "130", "writerCollect": "3831", "writerComment": "1801", "writerFan": "2128", "writerGrade": "6级", "writerIntegral": "8334", "writerName": "夜雨飘零1", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_119830756.jpg", "writerRankTotal": "4164", "writerRankWeekly": "11515", "writerThumb": "768", "writerVisitNum": "945925", "blog_read_count": "10046", "blog_time": "已于 2022-04-26 15:37:34 修改", "blog_title": "基于Pytorch实现的声音分类", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"_0\"></a>前言</h1>\n<p>本章我们来介绍如何使用Pytorch训练一个区分不同音频的分类模型，例如你有这样一个需求，需要根据不同的鸟叫声识别是什么种类的鸟，这时你就可以使用这个方法来实现你的需求了。</p>\n<p><strong>源码地址：<a href=\"https://github.com/yeyupiaoling/AudioClassification-Pytorch\">https://github.com/yeyupiaoling/AudioClassification-Pytorch</a></strong></p>\n<h1><a id=\"_7\"></a>环境准备</h1>\n<p>主要介绍libsora，PyAudio，pydub的安装，其他的依赖包根据需要自行安装。</p>\n<ul><li>Python 3.7</li><li>Pytorch 1.10.0</li></ul>\n<h2><a id=\"libsora_14\"></a>安装libsora</h2>\n<p>最简单的方式就是使用pip命令安装，如下：</p>\n<pre><code class=\"prism language-shell\">pip <span class=\"token function\">install</span> pytest-runner\npip <span class=\"token function\">install</span> <span class=\"token assign-left variable\">librosa</span><span class=\"token operator\">==</span><span class=\"token number\">0.9</span>.1\n</code></pre>\n<p><strong>注意：</strong> 如果pip命令安装不成功，那就使用源码安装，下载源码：<a href=\"https://github.com/librosa/librosa/releases/\">https://github.com/librosa/librosa/releases/</a>， windows的可以下载zip压缩包，方便解压。</p>\n<pre><code class=\"prism language-shell\">pip <span class=\"token function\">install</span> pytest-runner\n<span class=\"token function\">tar</span> xzf librosa-<span class=\"token operator\">&lt;</span>版本号<span class=\"token operator\">&gt;</span>.tar.gz 或者 <span class=\"token function\">unzip</span> librosa-<span class=\"token operator\">&lt;</span>版本号<span class=\"token operator\">&gt;</span>.tar.gz\n<span class=\"token builtin class-name\">cd</span> librosa-<span class=\"token operator\">&lt;</span>版本号<span class=\"token operator\">&gt;</span>/\npython setup.py <span class=\"token function\">install</span>\n</code></pre>\n<p>如果出现 <code>libsndfile64bit.dll': error 0x7e</code>错误，请指定安装版本0.6.3，如 <code>pip install librosa==0.6.3</code></p>\n<p>安装ffmpeg， 下载地址：<a href=\"http://blog.gregzaal.com/how-to-install-ffmpeg-on-windows/\">http://blog.gregzaal.com/how-to-install-ffmpeg-on-windows/</a>，笔者下载的是64位，static版。<br/> 然后到C盘，笔者解压，修改文件名为 <code>ffmpeg</code>，存放在 <code>C:\\Program Files\\</code>目录下，并添加环境变量 <code>C:\\Program Files\\ffmpeg\\bin</code></p>\n<p>最后修改源码，路径为 <code>C:\\Python3.7\\Lib\\site-packages\\audioread\\ffdec.py</code>，修改32行代码，如下：</p>\n<pre><code class=\"prism language-python\">COMMANDS <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'C:\\\\Program Files\\\\ffmpeg\\\\bin\\\\ffmpeg.exe'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'avconv'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"PyAudio_43\"></a>安装PyAudio</h2>\n<p>使用pip安装命令，如下：</p>\n<pre><code class=\"prism language-shell\">pip <span class=\"token function\">install</span> pyaudio\n</code></pre>\n<p>在安装的时候需要使用到C++库进行编译，如果读者的系统是windows，Python是3.7，可以在这里下载whl安装包，下载地址：<a href=\"https://github.com/intxcc/pyaudio_portaudio/releases\">https://github.com/intxcc/pyaudio_portaudio/releases</a></p>\n<h2><a id=\"pydub_53\"></a>安装pydub</h2>\n<p>使用pip命令安装，如下：</p>\n<pre><code class=\"prism language-shell\">pip <span class=\"token function\">install</span> pydub\n</code></pre>\n<h1><a id=\"_61\"></a>训练分类模型</h1>\n<p>把音频转换成训练数据最重要的是使用了librosa，使用librosa可以很方便得到音频的梅尔频谱（Mel Spectrogram），使用的API为 <code>librosa.feature.melspectrogram()</code>，输出的是numpy值。关于梅尔频谱具体信息读者可以自行了解，跟梅尔频谱同样很重要的梅尔倒谱（MFCCs）更多用于语音识别中，对应的API为 <code>librosa.feature.mfcc()</code>。同样以下的代码，就可以获取到音频的梅尔频谱。</p>\n<pre><code class=\"prism language-python\">wav<span class=\"token punctuation\">,</span> sr <span class=\"token operator\">=</span> librosa<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>data_path<span class=\"token punctuation\">,</span> sr<span class=\"token operator\">=</span><span class=\"token number\">16000</span><span class=\"token punctuation\">)</span>\nfeatures <span class=\"token operator\">=</span> librosa<span class=\"token punctuation\">.</span>feature<span class=\"token punctuation\">.</span>melspectrogram<span class=\"token punctuation\">(</span>y<span class=\"token operator\">=</span>wav<span class=\"token punctuation\">,</span> sr<span class=\"token operator\">=</span>sr<span class=\"token punctuation\">,</span> n_fft<span class=\"token operator\">=</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> n_mels<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span> hop_length<span class=\"token operator\">=</span><span class=\"token number\">160</span><span class=\"token punctuation\">,</span> win_length<span class=\"token operator\">=</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\nfeatures <span class=\"token operator\">=</span> librosa<span class=\"token punctuation\">.</span>power_to_db<span class=\"token punctuation\">(</span>features<span class=\"token punctuation\">,</span> ref<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> amin<span class=\"token operator\">=</span><span class=\"token number\">1e-10</span><span class=\"token punctuation\">,</span> top_db<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"_71\"></a>生成数据列表</h2>\n<p>生成数据列表，用于下一步的读取需要，<code>audio_path</code>为音频文件路径，用户需要提前把音频数据集存放在<code>dataset/audio</code>目录下，每个文件夹存放一个类别的音频数据，每条音频数据长度在3秒以上，如 <code>dataset/audio/鸟叫声/······</code>。<code>audio</code>是数据列表存放的位置，生成的数据类别的格式为 <code>音频路径\\t音频对应的类别标签</code>，音频路径和标签用制表符 <code>\\t</code>分开。读者也可以根据自己存放数据的方式修改以下函数。</p>\n<p>Urbansound8K 是目前应用较为广泛的用于自动城市环境声分类研究的公共数据集，包含10个分类：空调声、汽车鸣笛声、儿童玩耍声、狗叫声、钻孔声、引擎空转声、枪声、手提钻、警笛声和街道音乐声。数据集下载地址：<a href=\"https://zenodo.org/record/1203745/files/UrbanSound8K.tar.gz\">https://zenodo.org/record/1203745/files/UrbanSound8K.tar.gz</a>。以下是针对Urbansound8K生成数据列表的函数。如果读者想使用该数据集，请下载并解压到 <code>dataset</code>目录下，把生成数据列表代码改为以下代码。</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 生成数据列表</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_data_list</span><span class=\"token punctuation\">(</span>audio_path<span class=\"token punctuation\">,</span> list_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sound_sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    audios <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>audio_path<span class=\"token punctuation\">)</span>\n\n    f_train <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>list_path<span class=\"token punctuation\">,</span> <span class=\"token string\">'train_list.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span>\n    f_test <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>list_path<span class=\"token punctuation\">,</span> <span class=\"token string\">'test_list.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>audios<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        sounds <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>audio_path<span class=\"token punctuation\">,</span> audios<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> sound <span class=\"token keyword\">in</span> sounds<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token string\">'.wav'</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> sound<span class=\"token punctuation\">:</span><span class=\"token keyword\">continue</span>\n            sound_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>audio_path<span class=\"token punctuation\">,</span> audios<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sound<span class=\"token punctuation\">)</span>\n            t <span class=\"token operator\">=</span> librosa<span class=\"token punctuation\">.</span>get_duration<span class=\"token punctuation\">(</span>filename<span class=\"token operator\">=</span>sound_path<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 过滤小于2.1秒的音频</span>\n            <span class=\"token keyword\">if</span> t <span class=\"token operator\">&gt;=</span> <span class=\"token number\">2.1</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> sound_sum <span class=\"token operator\">%</span> <span class=\"token number\">100</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    f_test<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'%s\\t%d\\n'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>sound_path<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    f_train<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'%s\\t%d\\n'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>sound_path<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                sound_sum <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Audio：%d/%d\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>audios<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    f_test<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    f_train<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    get_data_list<span class=\"token punctuation\">(</span><span class=\"token string\">'dataset/UrbanSound8K/audio'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dataset'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>创建 <code>reader.py</code>用于在训练时读取数据。编写一个 <code>CustomDataset</code>类，用读取上一步生成的数据列表。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomDataset</span><span class=\"token punctuation\">(</span>Dataset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data_list_path<span class=\"token punctuation\">,</span> model<span class=\"token operator\">=</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">,</span> sr<span class=\"token operator\">=</span><span class=\"token number\">16000</span><span class=\"token punctuation\">,</span> chunk_duration<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>CustomDataset<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>data_list_path<span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>lines <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> model\n        self<span class=\"token punctuation\">.</span>sr <span class=\"token operator\">=</span> sr\n        self<span class=\"token punctuation\">.</span>chunk_duration <span class=\"token operator\">=</span> chunk_duration\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__getitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            audio_path<span class=\"token punctuation\">,</span> label <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>lines<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'\\t'</span><span class=\"token punctuation\">)</span>\n            spec_mag <span class=\"token operator\">=</span> load_audio<span class=\"token punctuation\">(</span>audio_path<span class=\"token punctuation\">,</span> mode<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> sr<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>sr<span class=\"token punctuation\">,</span> chunk_duration<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>chunk_duration<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> spec_mag<span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>int64<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> ex<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"[</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">] 数据: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>self<span class=\"token punctuation\">.</span>lines<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> 出错，错误信息: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>ex<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">file</span><span class=\"token operator\">=</span>sys<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">)</span>\n            rnd_idx <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>__len__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>__getitem__<span class=\"token punctuation\">(</span>rnd_idx<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>lines<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>下面是在训练时或者测试时读取音频数据，训练时对转换的梅尔频谱数据随机裁剪，如果是测试，就取前面的，最好要执行归一化。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">load_audio</span><span class=\"token punctuation\">(</span>audio_path<span class=\"token punctuation\">,</span> mode<span class=\"token operator\">=</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">,</span> sr<span class=\"token operator\">=</span><span class=\"token number\">16000</span><span class=\"token punctuation\">,</span> chunk_duration<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 读取音频数据</span>\n    wav<span class=\"token punctuation\">,</span> sr_ret <span class=\"token operator\">=</span> librosa<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>audio_path<span class=\"token punctuation\">,</span> sr<span class=\"token operator\">=</span>sr<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> mode <span class=\"token operator\">==</span> <span class=\"token string\">'train'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 随机裁剪</span>\n        num_wav_samples <span class=\"token operator\">=</span> wav<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\"># 数据太短不利于训练</span>\n        <span class=\"token keyword\">if</span> num_wav_samples <span class=\"token operator\">&lt;</span> sr<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'音频长度不能小于1s，实际长度为：</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">(</span>num_wav_samples <span class=\"token operator\">/</span> sr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.2f</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">s'</span></span><span class=\"token punctuation\">)</span>\n        num_chunk_samples <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>chunk_duration <span class=\"token operator\">*</span> sr<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> num_wav_samples <span class=\"token operator\">&gt;</span> num_chunk_samples <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            start <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> num_wav_samples <span class=\"token operator\">-</span> num_chunk_samples <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            stop <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> num_chunk_samples\n            wav <span class=\"token operator\">=</span> wav<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">:</span>stop<span class=\"token punctuation\">]</span>\n            <span class=\"token comment\"># 对每次都满长度的再次裁剪</span>\n            <span class=\"token keyword\">if</span> random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">:</span>\n                wav<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> sr <span class=\"token operator\">//</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n                wav <span class=\"token operator\">=</span> wav<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> sr <span class=\"token operator\">//</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">elif</span> mode <span class=\"token operator\">==</span> <span class=\"token string\">'eval'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 为避免显存溢出，只裁剪指定长度</span>\n        num_wav_samples <span class=\"token operator\">=</span> wav<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        num_chunk_samples <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>chunk_duration <span class=\"token operator\">*</span> sr<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> num_wav_samples <span class=\"token operator\">&gt;</span> num_chunk_samples <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            wav <span class=\"token operator\">=</span> wav<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>num_chunk_samples<span class=\"token punctuation\">]</span>\n    features <span class=\"token operator\">=</span> librosa<span class=\"token punctuation\">.</span>feature<span class=\"token punctuation\">.</span>melspectrogram<span class=\"token punctuation\">(</span>y<span class=\"token operator\">=</span>wav<span class=\"token punctuation\">,</span> sr<span class=\"token operator\">=</span>sr<span class=\"token punctuation\">,</span> n_fft<span class=\"token operator\">=</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> n_mels<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span> hop_length<span class=\"token operator\">=</span><span class=\"token number\">160</span><span class=\"token punctuation\">,</span> win_length<span class=\"token operator\">=</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n    features <span class=\"token operator\">=</span> librosa<span class=\"token punctuation\">.</span>power_to_db<span class=\"token punctuation\">(</span>features<span class=\"token punctuation\">,</span> ref<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> amin<span class=\"token operator\">=</span><span class=\"token number\">1e-10</span><span class=\"token punctuation\">,</span> top_db<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 归一化</span>\n    mean <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>features<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> keepdims<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    std <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>std<span class=\"token punctuation\">(</span>features<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> keepdims<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    features <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>features <span class=\"token operator\">-</span> mean<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>std <span class=\"token operator\">+</span> <span class=\"token number\">1e-5</span><span class=\"token punctuation\">)</span>\n    features <span class=\"token operator\">=</span> features<span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">'float32'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> features\n</code></pre>\n<h2><a id=\"_173\"></a>训练</h2>\n<p>接着就可以开始训练模型了，创建 <code>train.py</code>。我们搭建简单的卷积神经网络，如果音频种类非常多，可以适当使用更大的卷积神经网络模型。通过把音频数据转换成梅尔频谱。然后定义优化方法和获取训练和测试数据。要注意 <code>args.num_classes</code>参数的值，这个是类别的数量，要根据你数据集中的分类数量来修改。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">train</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 获取数据</span>\n    train_dataset <span class=\"token operator\">=</span> CustomDataset<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>train_list_path<span class=\"token punctuation\">,</span> model<span class=\"token operator\">=</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">)</span>\n    train_loader <span class=\"token operator\">=</span> DataLoader<span class=\"token punctuation\">(</span>dataset<span class=\"token operator\">=</span>train_dataset<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span>args<span class=\"token punctuation\">.</span>batch_size<span class=\"token punctuation\">,</span> shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> collate_fn<span class=\"token operator\">=</span>collate_fn<span class=\"token punctuation\">,</span> num_workers<span class=\"token operator\">=</span>args<span class=\"token punctuation\">.</span>num_workers<span class=\"token punctuation\">)</span>\n\n    test_dataset <span class=\"token operator\">=</span> CustomDataset<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>test_list_path<span class=\"token punctuation\">,</span> model<span class=\"token operator\">=</span><span class=\"token string\">'eval'</span><span class=\"token punctuation\">)</span>\n    test_loader <span class=\"token operator\">=</span> DataLoader<span class=\"token punctuation\">(</span>dataset<span class=\"token operator\">=</span>test_dataset<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span>args<span class=\"token punctuation\">.</span>batch_size<span class=\"token punctuation\">,</span> collate_fn<span class=\"token operator\">=</span>collate_fn<span class=\"token punctuation\">,</span> num_workers<span class=\"token operator\">=</span>args<span class=\"token punctuation\">.</span>num_workers<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 获取分类标签</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>label_list_path<span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        lines <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        class_labels <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> l <span class=\"token keyword\">in</span> lines<span class=\"token punctuation\">]</span>\n    <span class=\"token comment\"># 获取模型</span>\n    device <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">\"cuda\"</span><span class=\"token punctuation\">)</span>\n    model <span class=\"token operator\">=</span> EcapaTdnn<span class=\"token punctuation\">(</span>num_classes<span class=\"token operator\">=</span>args<span class=\"token punctuation\">.</span>num_classes<span class=\"token punctuation\">)</span>\n    model<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 获取优化方法</span>\n    optimizer <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>optim<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span>params<span class=\"token operator\">=</span>model<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                 lr<span class=\"token operator\">=</span>args<span class=\"token punctuation\">.</span>learning_rate<span class=\"token punctuation\">,</span>\n                                 weight_decay<span class=\"token operator\">=</span><span class=\"token number\">5e-4</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 获取学习率衰减函数</span>\n    scheduler <span class=\"token operator\">=</span> CosineAnnealingLR<span class=\"token punctuation\">(</span>optimizer<span class=\"token punctuation\">,</span> T_max<span class=\"token operator\">=</span>args<span class=\"token punctuation\">.</span>num_epoch<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 恢复训练</span>\n    <span class=\"token keyword\">if</span> args<span class=\"token punctuation\">.</span>resume <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        model<span class=\"token punctuation\">.</span>load_state_dict<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>resume<span class=\"token punctuation\">,</span> <span class=\"token string\">'model.pth'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        state <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>resume<span class=\"token punctuation\">,</span> <span class=\"token string\">'model.state'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        last_epoch <span class=\"token operator\">=</span> state<span class=\"token punctuation\">[</span><span class=\"token string\">'last_epoch'</span><span class=\"token punctuation\">]</span>\n        optimizer_state <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>resume<span class=\"token punctuation\">,</span> <span class=\"token string\">'optimizer.pth'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        optimizer<span class=\"token punctuation\">.</span>load_state_dict<span class=\"token punctuation\">(</span>optimizer_state<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'成功加载第 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>last_epoch<span class=\"token punctuation\">}</span></span><span class=\"token string\"> 轮的模型参数和优化方法参数'</span></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 获取损失函数</span>\n    loss <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>CrossEntropyLoss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>最后执行训练，每100个batch打印一次训练日志，训练一轮之后执行测试和保存模型，在测试时，把每个batch的输出都统计，最后求平均值。</p>\n<pre><code class=\"prism language-python\">    <span class=\"token keyword\">for</span> epoch <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>num_epoch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        loss_sum <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        accuracies <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> batch_id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>spec_mag<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>train_loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            spec_mag <span class=\"token operator\">=</span> spec_mag<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span>\n            label <span class=\"token operator\">=</span> label<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">long</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            output <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>spec_mag<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 计算损失值</span>\n            los <span class=\"token operator\">=</span> loss<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">)</span>\n            optimizer<span class=\"token punctuation\">.</span>zero_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            los<span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            optimizer<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># 计算准确率</span>\n            output <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>functional<span class=\"token punctuation\">.</span>softmax<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">,</span> dim<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            output <span class=\"token operator\">=</span> output<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>cpu<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            output <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            label <span class=\"token operator\">=</span> label<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>cpu<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            acc <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>output <span class=\"token operator\">==</span> label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            accuracies<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">)</span>\n            loss_sum<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>los<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> batch_id <span class=\"token operator\">%</span> <span class=\"token number\">100</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'[</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">] Train epoch [</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>epoch<span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>args<span class=\"token punctuation\">.</span>num_epoch<span class=\"token punctuation\">}</span></span><span class=\"token string\">], batch: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>batch_id<span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>train_loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, '</span></span>\n                      <span class=\"token string-interpolation\"><span class=\"token string\">f'lr: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>scheduler<span class=\"token punctuation\">.</span>get_last_lr<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.8f</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, loss: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>loss_sum<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>loss_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.8f</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, '</span></span>\n                      <span class=\"token string-interpolation\"><span class=\"token string\">f'accuracy: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>accuracies<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>accuracies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.8f</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n        scheduler<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>每轮训练结束之后都会执行一次评估，和保存模型。评估会出来输出准确率，还保存了混合矩阵图片，如下。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c62b3ba636d44aa9b8f5efd22990e6a6.png\"/></p>\n<h1><a id=\"_249\"></a>预测</h1>\n<p>在训练结束之后，我们得到了一个模型参数文件，我们使用这个模型预测音频，在执行预测之前，需要把音频转换为梅尔频谱数据，最后输出的结果即为预测概率最大的标签。</p>\n<pre><code class=\"prism language-python\">parser <span class=\"token operator\">=</span> argparse<span class=\"token punctuation\">.</span>ArgumentParser<span class=\"token punctuation\">(</span>description<span class=\"token operator\">=</span>__doc__<span class=\"token punctuation\">)</span>\nadd_arg <span class=\"token operator\">=</span> functools<span class=\"token punctuation\">.</span>partial<span class=\"token punctuation\">(</span>add_arguments<span class=\"token punctuation\">,</span> argparser<span class=\"token operator\">=</span>parser<span class=\"token punctuation\">)</span>\nadd_arg<span class=\"token punctuation\">(</span><span class=\"token string\">'audio_path'</span><span class=\"token punctuation\">,</span>       <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>    <span class=\"token string\">'dataset/UrbanSound8K/audio/fold5/156634-5-2-5.wav'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'图片路径'</span><span class=\"token punctuation\">)</span>\nadd_arg<span class=\"token punctuation\">(</span><span class=\"token string\">'num_classes'</span><span class=\"token punctuation\">,</span>      <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>    <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>                        <span class=\"token string\">'分类的类别数量'</span><span class=\"token punctuation\">)</span>\nadd_arg<span class=\"token punctuation\">(</span><span class=\"token string\">'label_list_path'</span><span class=\"token punctuation\">,</span>  <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>    <span class=\"token string\">'dataset/label_list.txt'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'标签列表路径'</span><span class=\"token punctuation\">)</span>\nadd_arg<span class=\"token punctuation\">(</span><span class=\"token string\">'model_path'</span><span class=\"token punctuation\">,</span>       <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>    <span class=\"token string\">'models/model.pth'</span><span class=\"token punctuation\">,</span>        <span class=\"token string\">'模型保存的路径'</span><span class=\"token punctuation\">)</span>\nargs <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span>parse_args<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 获取分类标签</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>label_list_path<span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    lines <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nclass_labels <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> l <span class=\"token keyword\">in</span> lines<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 获取模型</span>\ndevice <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">\"cuda\"</span><span class=\"token punctuation\">)</span>\nmodel <span class=\"token operator\">=</span> EcapaTdnn<span class=\"token punctuation\">(</span>num_classes<span class=\"token operator\">=</span>args<span class=\"token punctuation\">.</span>num_classes<span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>load_state_dict<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>model_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">infer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    data <span class=\"token operator\">=</span> load_audio<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>audio_path<span class=\"token punctuation\">,</span> mode<span class=\"token operator\">=</span><span class=\"token string\">'infer'</span><span class=\"token punctuation\">)</span>\n    data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>np<span class=\"token punctuation\">.</span>newaxis<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n    data <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">,</span> device<span class=\"token operator\">=</span>device<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 执行预测</span>\n    output <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>functional<span class=\"token punctuation\">.</span>softmax<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">,</span> dim<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>cpu<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 显示图片并输出结果最大的label</span>\n    lab <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>argsort<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'音频：</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>args<span class=\"token punctuation\">.</span>audio_path<span class=\"token punctuation\">}</span></span><span class=\"token string\"> 的预测结果标签为：</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>class_labels<span class=\"token punctuation\">[</span>lab<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    infer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"_292\"></a>其他</h1>\n<p>为了方便读取录制数据和制作数据集，这里提供了两个程序，首先是 <code>record_audio.py</code>，这个用于录制音频，录制的音频帧率为44100，通道为1，16bit。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> pyaudio\n<span class=\"token keyword\">import</span> wave\n<span class=\"token keyword\">import</span> uuid\n<span class=\"token keyword\">from</span> tqdm <span class=\"token keyword\">import</span> tqdm\n<span class=\"token keyword\">import</span> os\n\ns <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入你计划录音多少秒：'</span><span class=\"token punctuation\">)</span>\n\nCHUNK <span class=\"token operator\">=</span> <span class=\"token number\">1024</span>\nFORMAT <span class=\"token operator\">=</span> pyaudio<span class=\"token punctuation\">.</span>paInt16\nCHANNELS <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nRATE <span class=\"token operator\">=</span> <span class=\"token number\">44100</span>\nRECORD_SECONDS <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\nWAVE_OUTPUT_FILENAME <span class=\"token operator\">=</span> <span class=\"token string\">\"save_audio/%s.wav\"</span> <span class=\"token operator\">%</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>uuid<span class=\"token punctuation\">.</span>uuid1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\np <span class=\"token operator\">=</span> pyaudio<span class=\"token punctuation\">.</span>PyAudio<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nstream <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">format</span><span class=\"token operator\">=</span>FORMAT<span class=\"token punctuation\">,</span>\n                channels<span class=\"token operator\">=</span>CHANNELS<span class=\"token punctuation\">,</span>\n                rate<span class=\"token operator\">=</span>RATE<span class=\"token punctuation\">,</span>\n                <span class=\"token builtin\">input</span><span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n                frames_per_buffer<span class=\"token operator\">=</span>CHUNK<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始录音, 请说话......\"</span><span class=\"token punctuation\">)</span>\n\nframes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> tqdm<span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>RATE <span class=\"token operator\">/</span> CHUNK <span class=\"token operator\">*</span> RECORD_SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    data <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span>CHUNK<span class=\"token punctuation\">)</span>\n    frames<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"录音已结束!\"</span><span class=\"token punctuation\">)</span>\n\nstream<span class=\"token punctuation\">.</span>stop_stream<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nstream<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>terminate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token string\">'save_audio'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    os<span class=\"token punctuation\">.</span>makedirs<span class=\"token punctuation\">(</span><span class=\"token string\">'save_audio'</span><span class=\"token punctuation\">)</span>\n\nwf <span class=\"token operator\">=</span> wave<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>WAVE_OUTPUT_FILENAME<span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span>\nwf<span class=\"token punctuation\">.</span>setnchannels<span class=\"token punctuation\">(</span>CHANNELS<span class=\"token punctuation\">)</span>\nwf<span class=\"token punctuation\">.</span>setsampwidth<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>get_sample_size<span class=\"token punctuation\">(</span>FORMAT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nwf<span class=\"token punctuation\">.</span>setframerate<span class=\"token punctuation\">(</span>RATE<span class=\"token punctuation\">)</span>\nwf<span class=\"token punctuation\">.</span>writeframes<span class=\"token punctuation\">(</span><span class=\"token string\">b''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>frames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nwf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文件保存在：%s'</span> <span class=\"token operator\">%</span> WAVE_OUTPUT_FILENAME<span class=\"token punctuation\">)</span>\nos<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'pause'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>创建 <code>crop_audio.py</code>，在训练是只是裁剪前面的3秒的音频，所以我们要把录制的硬盘安装每3秒裁剪一段，把裁剪后音频存放在音频名称命名的文件夹中。最后把这些文件按照训练数据的要求创建数据列表和训练数据。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> uuid\n<span class=\"token keyword\">import</span> wave\n<span class=\"token keyword\">from</span> pydub <span class=\"token keyword\">import</span> AudioSegment\n\n\n<span class=\"token comment\"># 按秒截取音频</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_part_wav</span><span class=\"token punctuation\">(</span>sound<span class=\"token punctuation\">,</span> start_time<span class=\"token punctuation\">,</span> end_time<span class=\"token punctuation\">,</span> part_wav_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    save_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>part_wav_path<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span>save_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        os<span class=\"token punctuation\">.</span>makedirs<span class=\"token punctuation\">(</span>save_path<span class=\"token punctuation\">)</span>\n    start_time <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>start_time<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span>\n    end_time <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>end_time<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span>\n    word <span class=\"token operator\">=</span> sound<span class=\"token punctuation\">[</span>start_time<span class=\"token punctuation\">:</span>end_time<span class=\"token punctuation\">]</span>\n    word<span class=\"token punctuation\">.</span>export<span class=\"token punctuation\">(</span>part_wav_path<span class=\"token punctuation\">,</span> <span class=\"token builtin\">format</span><span class=\"token operator\">=</span><span class=\"token string\">\"wav\"</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">crop_wav</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> crop_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> src_wav_path <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        wave_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> src_wav_path<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>wave_path<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> wave_path<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'.wav'</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">continue</span>\n        <span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> wave<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>wave_path<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 帧总数</span>\n        a <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>getparams<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>nframes\n        <span class=\"token comment\"># 采样频率</span>\n        f <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>getparams<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>framerate\n        <span class=\"token comment\"># 获取音频时间长度</span>\n        t <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">/</span> f<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'总时长为 %d s'</span> <span class=\"token operator\">%</span> t<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 读取语音</span>\n        sound <span class=\"token operator\">=</span> AudioSegment<span class=\"token punctuation\">.</span>from_wav<span class=\"token punctuation\">(</span>wave_path<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> start_time <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> crop_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            save_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>basename<span class=\"token punctuation\">(</span>wave_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>uuid<span class=\"token punctuation\">.</span>uuid1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'.wav'</span><span class=\"token punctuation\">)</span>\n            get_part_wav<span class=\"token punctuation\">(</span>sound<span class=\"token punctuation\">,</span> start_time<span class=\"token punctuation\">,</span> start_time <span class=\"token operator\">+</span> crop_len<span class=\"token punctuation\">,</span> save_path<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    crop_len <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    crop_wav<span class=\"token punctuation\">(</span><span class=\"token string\">'save_audio'</span><span class=\"token punctuation\">,</span> crop_len<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>创建 <code>infer_record.py</code>，这个程序是用来不断进行录音识别，录音时间之所以设置为6秒，所以我们可以大致理解为这个程序在实时录音识别。通过这个应该我们可以做一些比较有趣的事情，比如把麦克风放在小鸟经常来的地方，通过实时录音识别，一旦识别到有鸟叫的声音，如果你的数据集足够强大，有每种鸟叫的声音数据集，这样你还能准确识别是那种鸟叫。如果识别到目标鸟类，就启动程序，例如拍照等等。</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># 录音参数</span>\nCHUNK <span class=\"token operator\">=</span> <span class=\"token number\">1024</span>\nFORMAT <span class=\"token operator\">=</span> pyaudio<span class=\"token punctuation\">.</span>paInt16\nCHANNELS <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nRATE <span class=\"token operator\">=</span> <span class=\"token number\">44100</span>\nRECORD_SECONDS <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\nWAVE_OUTPUT_FILENAME <span class=\"token operator\">=</span> <span class=\"token string\">\"infer_audio.wav\"</span>\n\n<span class=\"token comment\"># 打开录音</span>\np <span class=\"token operator\">=</span> pyaudio<span class=\"token punctuation\">.</span>PyAudio<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nstream <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">format</span><span class=\"token operator\">=</span>FORMAT<span class=\"token punctuation\">,</span>\n                channels<span class=\"token operator\">=</span>CHANNELS<span class=\"token punctuation\">,</span>\n                rate<span class=\"token operator\">=</span>RATE<span class=\"token punctuation\">,</span>\n                <span class=\"token builtin\">input</span><span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n                frames_per_buffer<span class=\"token operator\">=</span>CHUNK<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 获取录音数据</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">record_audio</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始录音......\"</span><span class=\"token punctuation\">)</span>\n\n    frames <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>RATE <span class=\"token operator\">/</span> CHUNK <span class=\"token operator\">*</span> RECORD_SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        data <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span>CHUNK<span class=\"token punctuation\">)</span>\n        frames<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"录音已结束!\"</span><span class=\"token punctuation\">)</span>\n\n    wf <span class=\"token operator\">=</span> wave<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>WAVE_OUTPUT_FILENAME<span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span>\n    wf<span class=\"token punctuation\">.</span>setnchannels<span class=\"token punctuation\">(</span>CHANNELS<span class=\"token punctuation\">)</span>\n    wf<span class=\"token punctuation\">.</span>setsampwidth<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>get_sample_size<span class=\"token punctuation\">(</span>FORMAT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    wf<span class=\"token punctuation\">.</span>setframerate<span class=\"token punctuation\">(</span>RATE<span class=\"token punctuation\">)</span>\n    wf<span class=\"token punctuation\">.</span>writeframes<span class=\"token punctuation\">(</span><span class=\"token string\">b''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>frames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    wf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> WAVE_OUTPUT_FILENAME\n\n\n<span class=\"token comment\"># 预测</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">infer</span><span class=\"token punctuation\">(</span>audio_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    data <span class=\"token operator\">=</span> load_audio<span class=\"token punctuation\">(</span>audio_path<span class=\"token punctuation\">,</span> mode<span class=\"token operator\">=</span><span class=\"token string\">'infer'</span><span class=\"token punctuation\">)</span>\n    data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>np<span class=\"token punctuation\">.</span>newaxis<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n    data <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">,</span> device<span class=\"token operator\">=</span>device<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 执行预测</span>\n    output <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>functional<span class=\"token punctuation\">.</span>softmax<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">,</span> dim<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>cpu<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 显示图片并输出结果最大的label</span>\n    lab <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>argsort<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> class_labels<span class=\"token punctuation\">[</span>lab<span class=\"token punctuation\">]</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 加载数据</span>\n            audio_path <span class=\"token operator\">=</span> record_audio<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 获取预测结果</span>\n            label <span class=\"token operator\">=</span> infer<span class=\"token punctuation\">(</span>audio_path<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'预测的标签为：</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>label<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n        stream<span class=\"token punctuation\">.</span>stop_stream<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        stream<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        p<span class=\"token punctuation\">.</span>terminate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 1, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-04-26 15:37:34", "summary": "前言本章我们来介绍如何使用训练一个区分不同音频的分类模型，例如你有这样一个需求，需要根据不同的鸟叫声识别是什么种类的鸟，这时你就可以使用这个方法来实现你的需求了。源码地址：环境准备主要介绍，，的安装，"}