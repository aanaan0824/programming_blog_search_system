{"blogid": "123853047", "writerAge": "码龄12年", "writerBlogNum": "236", "writerCollect": "444", "writerComment": "90", "writerFan": "60", "writerGrade": "6级", "writerIntegral": "5222", "writerName": "liberg", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123853047.jpg", "writerRankTotal": "6699", "writerRankWeekly": "20160", "writerThumb": "257", "writerVisitNum": "417363", "blog_read_count": "1856", "blog_time": "已于 2022-08-21 18:24:18 修改", "blog_title": "Rust 09: 字符串详解（String、&str、内存布局、常用方法）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><ul><li><a href=\"#_1\">字符串字面量</a></li><li><a href=\"#String_17\">字符串(String)</a></li><li><a href=\"#str_55\">字符串切片(&amp;str）</a></li><li><a href=\"#Stringstr_68\">String和&amp;str的内存布局</a></li><li><a href=\"#_93\">字符串遍历，判断字符是数字还是字母</a></li><li><a href=\"#String_106\">String中追加和删除字符</a></li><li><a href=\"#String_131\">String遍历</a></li><li><a href=\"#findcontains_144\">find()查找/contains()包含</a></li><li><a href=\"#split_151\">split()分割，返回一个迭代器</a></li><li><a href=\"#starts_withends_with_157\">starts_with()/ends_with()</a></li><li><a href=\"#String_163\">如何高效修改String中的一个字符？</a></li><li><ul><li><a href=\"#removeinsert_164\">借助remove()和insert()</a></li><li><a href=\"#_175\">更高效的方式</a></li><li><a href=\"#SetByIndex_trait_186\">更进一步，自定义SetByIndex trait</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h3><a id=\"_1\"></a>字符串字面量</h3>\n<p>字符串字面量和全局变量、static变量一样位于程序运行之后<strong>虚拟地址空间中的代码区</strong>。<br/> 关于<strong>虚拟地址空间</strong>，之前有一小节详细分析过：<a href=\"https://blog.csdn.net/linysuccess/article/details/123765834\">Rust 06: 变量分配在堆还是栈上 + 虚拟地址空间</a></p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">const</span> g_array<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token constant\">G_VAR</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n<span class=\"token attribute attr-name\">#[test]</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">test09_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> s<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"test string\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//字符串字面量，位于代码区的ROData段</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;str: {:p}\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&amp;str: 0x7ff77e4c6b88</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:p}\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>g_array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//位于data段:0x7ff6c5fc6bb8</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:p}\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token constant\">G_VAR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//位于data段:0x7ff77e4c6200</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>字符串字面量位于代码区的ROData段，是只读（Read Only）的，在Rust代码中字符串字面量会被处理成<strong>字符串切片</strong>类型，即<code>&amp;str</code>。如果想要对字符串进行追加等操作，必须先将ROData段的字符串字面量复制一份到<strong>堆</strong>上，构造一个<code>String</code>类型出来。</p>\n<h3><a id=\"String_17\"></a>字符串(String)</h3>\n<p>String内部其实是一个Vec，是一个可变长度的类型，末尾应该可以追加字符。String类型占用24个字节。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">String</span> <span class=\"token punctuation\">{<!-- --></span>\n    vec<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">u8</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-rust\"><span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"size: {}\"</span><span class=\"token punctuation\">,</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>mem<span class=\"token punctuation\">::</span></span><span class=\"token function\">size_of</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">u8</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//24</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"size: {}\"</span><span class=\"token punctuation\">,</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>mem<span class=\"token punctuation\">::</span></span><span class=\"token function\">size_of</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//24</span>\n</code></pre>\n<p>String对象的内存结构，也就是<code>Vec&lt;u8&gt;</code>的内存结构，为 <code>8(ptr) + 8(capacity) + 8(length)</code>。</p>\n<hr/>\n<p>从字符串字面量构造出一个堆上的String有多种方式：</p>\n<ol><li><code>\"xxx\".to_owned()</code>方法内部掉clone()，将字符串字面量从ROData区复制一份到堆上，并返回堆上数据的所有权；</li><li><code>String::from(\"xxx\")</code>内部实际调用的是\"xxx\".to_owned()；</li><li><code>\"xxx\".to_string()</code>内部实际调用的是String::from(“xxx”)；<br/> 也就是说，下面3种方式最终都是调用了<code>clone()</code>：</li></ol>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> s1<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello Rust!\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_owned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> s2<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Rust!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> s3<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello Rust!\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">,</span>s3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span>s3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s1: {:p}\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//s1: 0x32a62fec08</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s2: {:p}\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//s2: 0x32a62fec20</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s3: {:p}\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>s3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//s3: 0x32a62fec38</span>\n</code></pre>\n<p>可以看到，&amp;s1、&amp;s2、&amp;s3是3个虚拟地址比较小，互不相同的栈地址。但是，实际上他们最终指向的字符串内容本身是位于堆上。<br/> 根据以上信息，我们尝试画一下<code>let s: String = String::from(\"Hello\");</code>的内存布局：<br/> <img alt=\"String内存布局\" src=\"..\\..\\static\\image\\1dedceea8e754041bd1c23c38edd17b8.png\"/></p>\n<h3><a id=\"str_55\"></a>字符串切片(&amp;str）</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> s1<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello Rust!\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_owned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> s2<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s1<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> s3<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello Rust!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> slice1<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">..</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//对String类型进行切片引用</span>\n<span class=\"token keyword\">let</span> slice2<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">..</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//对&amp;String类型进行切片引用</span>\n<span class=\"token keyword\">let</span> slice3<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s3<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">..</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//对&amp;str切片类型，进行切片引用</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> slice1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> slice2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> slice3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"Stringstr_68\"></a>String和&amp;str的内存布局</h3>\n<p>还是先来做个小测试，验证一些想法：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// String内部其实是一个Vec&lt;u8&gt;，是一个可变长度的类型，末尾应该可以追加字符。</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"size: {}\"</span><span class=\"token punctuation\">,</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>mem<span class=\"token punctuation\">::</span></span><span class=\"token function\">size_of</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">u8</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//24</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"size: {}\"</span><span class=\"token punctuation\">,</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>mem<span class=\"token punctuation\">::</span></span><span class=\"token function\">size_of</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//24</span>\n\n<span class=\"token keyword\">let</span> s1<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello Rust!\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_owned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> s2<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Rust!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> s3<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello Rust!\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 将占用的24个字节，当成3个usize取出</span>\n<span class=\"token keyword\">let</span> raw1<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">usize</span><span class=\"token punctuation\">;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>mem<span class=\"token punctuation\">::</span></span><span class=\"token function\">transmute</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// raw1[0]是一个堆内存地址</span>\n<span class=\"token comment\">// ptr: 0x2749d72c2d0, cap: 11, len: 11</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr: 0x{:x}, cap: {}, len: {}\"</span><span class=\"token punctuation\">,</span> raw1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> raw1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> raw1<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> raw2<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">usize</span><span class=\"token punctuation\">;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>mem<span class=\"token punctuation\">::</span></span><span class=\"token function\">transmute</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ptr: 0x2749d72c190, cap: 11, len: 11</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr: 0x{:x}, cap: {}, len: {}\"</span><span class=\"token punctuation\">,</span> raw2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> raw2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> raw2<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\n<span class=\"token comment\">// ptr: 0x2749d72c1d0, cap: 11, len: 11</span>\n<span class=\"token keyword\">let</span> raw3<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">usize</span><span class=\"token punctuation\">;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>mem<span class=\"token punctuation\">::</span></span><span class=\"token function\">transmute</span><span class=\"token punctuation\">(</span>s3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr: 0x{:x}, cap: {}, len: {}\"</span><span class=\"token punctuation\">,</span> raw3<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> raw3<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> raw3<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>借助<code>unsafe</code>关键字和<code>std::mem::transmute</code>可以将变量对应的值的内存暴露出来。对比虚拟内存地址，我们发现<br/> s1、s2、s3实际上是位于堆上不同的位置。也就是说s1、s2、s3分别是从ROData区的\"Hello Rust\"字面量复制了一份放到堆内存上面。</p>\n<h3><a id=\"_93\"></a>字符串遍历，判断字符是数字还是字母</h3>\n<p><code>is_alphabetic()</code>，判断字符是否是<code>A-Za-z</code>。<br/> <code>is_ascii_digit()</code>，判断字符是否是<code>0-9</code>。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> s<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"abc123\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">chars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">is_alphabetic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{} 是字母\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">is_ascii_digit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{} 是数字\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"String_106\"></a>String中追加和删除字符</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// String的追加</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> s1<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns1<span class=\"token punctuation\">.</span><span class=\"token function\">push_str</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Rust!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token char\">'!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns1<span class=\"token punctuation\">.</span><span class=\"token function\">write_char</span><span class=\"token punctuation\">(</span><span class=\"token char\">'!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns1 <span class=\"token operator\">+=</span> <span class=\"token string\">\" Hello Rust!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Hello Rust!!! Hello Rust!</span>\n\n<span class=\"token comment\">//repeat()</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//HelloHello</span>\n\n<span class=\"token comment\">// String的insert和remove方法</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> ss <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">with_capacity</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nss<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nss<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'o'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nss<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'o'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> ss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nss<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nss<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'t'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"too\"</span><span class=\"token punctuation\">,</span> ss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nss<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> ss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"String_131\"></a>String遍历</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// Chars是一个u8类型的迭代器，</span>\n<span class=\"token comment\">// 遍历String中的u8字符</span>\n<span class=\"token keyword\">let</span> chs<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Chars</span> <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">chars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> chs <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> byts<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">u8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">as_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> b <span class=\"token keyword\">in</span> byts <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"findcontains_144\"></a>find()查找/contains()包含</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Some(2)</span>\n<span class=\"token keyword\">if</span> <span class=\"token string\">\"hello kitty\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kitty\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"haha kitty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"split_151\"></a>split()分割，返回一个迭代器</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">let</span> letters <span class=\"token operator\">=</span> <span class=\"token string\">\"a b c d\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>x<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token macro property\">print!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{x} \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// a b c d </span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"starts_withends_with_157\"></a>starts_with()/ends_with()</h3>\n<pre><code class=\"prism language-rust\"><span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lemon tree\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">starts_with</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lemon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lemon tree\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">ends_with</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tree\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"String_163\"></a>如何高效修改String中的一个字符？</h3>\n<h4><a id=\"removeinsert_164\"></a>借助remove()和insert()</h4>\n<p>可以借助<code>remove()</code>和<code>insert()</code>，但是这2个方法都会导致字符串整体迁移，<strong>是O(n)复杂度的方法</strong>。如果字符串比较长，这样做代价很大。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// remove和insert都是O(n)复杂度的</span>\n<span class=\"token comment\">// remove会导致删除位置后面的所有字符整体前移1个位置</span>\n<span class=\"token comment\">// insert会导致插入位置后面的所有字符整体后移1个位置</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> s1<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns1<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'X'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Xello\"</span><span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4><a id=\"_175\"></a>更高效的方式</h4>\n<p>对于追求极致效率的rust而言，提供了<code>unsafe</code>关键字。这里有一个O(1)复杂度的<code>unsafe</code>方法：</p>\n<pre><code class=\"prism language-rust\"><span class=\"token comment\">// 如何高效修改String中的一个字符</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> s1<span class=\"token punctuation\">:</span><span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> s1_bytes<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">u8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">as_bytes_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s1_bytes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'X'</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">u8</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s1 new={}\"</span><span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//s1 new=Xello</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"SetByIndex_trait_186\"></a>更进一步，自定义SetByIndex trait</h4>\n<p>为了调用更加方便，我们完全可以自定义一个根据位置修改字符的<code>trait</code>，并且为<code>String</code>类型实现这个<code>trait</code>。</p>\n<pre><code class=\"prism language-rust\"><span class=\"token keyword\">trait</span> <span class=\"token type-definition class-name\">SetByIndex</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">set_by_index</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">:</span> <span class=\"token keyword\">usize</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">SetByIndex</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">set_by_index</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">:</span> <span class=\"token keyword\">usize</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> idx<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> idx<span class=\"token operator\">&gt;=</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token macro property\">panic!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Index out of bounds: {}, expected: [0,{})\"</span><span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">let</span> _buf<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">u8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">as_bytes_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            _buf<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> ss <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_owned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nss<span class=\"token punctuation\">.</span><span class=\"token function\">set_by_index</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'X'</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">u8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ss={}\"</span><span class=\"token punctuation\">,</span> ss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//ss=Xello</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-21 18:24:18", "summary": "文章目录字符串字面量字符串字符串切片和的内存布局字符串遍历，判断字符是数字还是字母中追加和删除字符遍历查找包含分割，返回一个迭代器如何高效修改中的一个字符？借助和更高效的方式更进一步，自定义字符串字面"}