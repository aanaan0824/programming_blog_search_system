{"blogid": "122128445", "writerAge": "码龄8年", "writerBlogNum": "796", "writerCollect": "1154", "writerComment": "172", "writerFan": "18776", "writerGrade": "6级", "writerIntegral": "8615", "writerName": "菊头蝙蝠", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122128445.jpg", "writerRankTotal": "1693", "writerRankWeekly": "613", "writerThumb": "495", "writerVisitNum": "251271", "blog_read_count": "6806", "blog_time": "已于 2022-04-16 14:35:02 修改", "blog_title": "c++优先队列priority_queue（自定义比较函数）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-dracula\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>c++优先队列（自定义比较函数）</h3>\n<ul><li><ul><li><a href=\"#font_colorcc99ccfontstruct_11\"><font color=\"-#cc99cc\">方式一</font>：struct重载运算符()</a></li><li><a href=\"#font_colorcc99cc_fontclass_22\"><font color=\"-#cc99cc\"> 方式二</font>：class重载运算符()</a></li><li><a href=\"#font_colorcc99cc_font_35\"><font color=\"-#cc99cc\"> 方式三</font>：定义函数</a></li><li><a href=\"#font_colorcc99cc_fontlambda_60\"><font color=\"-#cc99cc\"> 方式四</font>：lambda表达式</a></li><li><a href=\"#font_colorcc99cc_fontfunctionlambda_69\"><font color=\"-#cc99cc\"> 方式五</font>：function包装lambda表达式</a></li><li><a href=\"#font_colorcc99cc_font_83\"><font color=\"-#cc99cc\"> 测试用例</font></a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\696925e85cbf4fc7b8693d3a9aa7431d.png\"/><br/> 可以使用现成的<br/> <code>less&lt;T&gt;</code>来定义大顶堆<br/> <code>greater&lt;T&gt;</code>来定义小顶堆</p>\n<p>从文档出可以看到，传入的可以是 函数指针或者 函数对象（类对操作符()进行了重载，）</p>\n<p><a href=\"https://blog.csdn.net/vict_wang/article/details/81590984\">参考链接：函数指针和函数对象</a><br/> <a href=\"https://blog.csdn.net/u014609638/article/details/106987131/\">参考链接：decltype</a></p>\n<h2><a id=\"font_colorcc99ccfontstruct_11\"></a><font color=\"-#cc99cc\">方式一</font>：struct重载运算符()</h2>\n<p>通过struct重载()操作符，定义了一个函数对象</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">cmp</span><span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\npriority_queue<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">,</span>cmp<span class=\"token operator\">&gt;</span> q<span class=\"token punctuation\">;</span><span class=\"token comment\">//小顶堆</span>\n</code></pre>\n<p><strong>这是属于传入 函数对象 的方式</strong></p>\n<h2><a id=\"font_colorcc99cc_fontclass_22\"></a><font color=\"-#cc99cc\"> 方式二</font>：class重载运算符()</h2>\n<p>通过class重载()操作符，定义了一个函数对象<br/> <em>注意要加public</em></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">cmp</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\npriority_queue<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">,</span>cmp<span class=\"token operator\">&gt;</span> q<span class=\"token punctuation\">;</span><span class=\"token comment\">//小顶堆</span>\n</code></pre>\n<p><strong>这是属于传入 函数对象 的方式</strong></p>\n<h2><a id=\"font_colorcc99cc_font_35\"></a><font color=\"-#cc99cc\"> 方式三</font>：定义函数</h2>\n<p>首先定义一个比较函数</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">bool</span> <span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>decltype()是用于获得函数指针的 类型的。在模板中也要传入它们的类型。<br/> decltype()要传入的是一个对象的地址，因此需要对cmp加取值符，&amp;cmp为对象的地址<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d43a65327da743fd9c79d21c28dbeda6.png\"/><br/> 因此可以由函数地址<code>cmp</code> 转为函数指针 类型 <code>decltype(&amp;cmp)</code></p>\n<pre><code class=\"prism language-cpp\">priority_queue<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>cmp<span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">q</span><span class=\"token punctuation\">(</span>cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//小顶堆</span>\n</code></pre>\n<p><font color=\"#ff9900\"><strong>写法一：</strong></font><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\23147934ce7145a5bf31992cd8387289.png\"/><br/> <font color=\"#ff9900\"><strong>写法二：</strong></font><br/> 如果作为类成员函数，一定要声明<code>static</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f04c7baff480426a9744c5cce9073129.png\"/></p>\n<p><strong>这是属于传入 函数指针的方式。</strong></p>\n<h2><a id=\"font_colorcc99cc_fontlambda_60\"></a><font color=\"-#cc99cc\"> 方式四</font>：lambda表达式</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">auto</span> cmp<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\npriority_queue<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>cmp<span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">q</span><span class=\"token punctuation\">(</span>cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//小顶堆</span>\n</code></pre>\n<p><strong>这是属于传入 函数指针的方式。</strong></p>\n<h2><a id=\"font_colorcc99cc_fontfunctionlambda_69\"></a><font color=\"-#cc99cc\"> 方式五</font>：function包装lambda表达式</h2>\n<p>要加入头文件<code>#include&lt;functional&gt;</code></p>\n<p>由于function对lambda函数进行了包装 ,cmp本身就是一个对象地址。（function对象）<br/> 直接decltype(cmp)获得函数指针 的类型。</p>\n<pre><code class=\"prism language-cpp\">function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span> cmp<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\npriority_queue<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>cmp<span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">q</span><span class=\"token punctuation\">(</span>cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//小顶堆</span>\n</code></pre>\n<p><strong>这是属于传入 函数指针的方式。</strong></p>\n<h2><a id=\"font_colorcc99cc_font_83\"></a><font color=\"-#cc99cc\"> 测试用例</font></h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;queue&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">auto</span> cmp<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    priority_queue<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>cmp<span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">q</span><span class=\"token punctuation\">(</span>cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//小顶堆</span>\n\n    \n    q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> vec<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cout<span class=\"token operator\">&lt;&lt;</span>vec<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>vec<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e57176da7a5d45149b2ae70a821368f7.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-04-16 14:35:02", "summary": "优先队列自定义比较函数方式一：重载运算符方式二：重载运算符方式三：定义函数方式四：表达式方式五：包装表达式测试用例在这里插入图片描述可以使用现成的来定义大顶堆来定义小顶堆从文档出可以看到，传入的可以是"}