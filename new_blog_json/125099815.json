{"blogid": "125099815", "writerAge": "码龄14年", "writerBlogNum": "46", "writerCollect": "64", "writerComment": "25", "writerFan": "9", "writerGrade": "4级", "writerIntegral": "1079", "writerName": "小三金", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125099815.jpg", "writerRankTotal": "30535", "writerRankWeekly": "23638", "writerThumb": "22", "writerVisitNum": "84673", "blog_read_count": "2113", "blog_time": "已于 2022-06-24 15:40:02 修改", "blog_title": "vue 读取excel内容", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>tips：</p>\n<p>文件地址（按需自己改造去）<a href=\"https://download.csdn.net/download/tdjqqq/85761940\" title=\"https://download.csdn.net/download/tdjqqq/85761940\">https://download.csdn.net/download/tdjqqq/85761940</a></p>\n<p>xlsx.js读取日期时，如果默认转成js日期的话，会比正常的时间少43秒，设置日期读取时，直接转成字符串即可，如下图所示，那么转换后的数据就是字符串型日期：\"2022-05-09\"，如果需要到具体时分秒，请自行减43秒。</p>\n<p><img alt=\"\" height=\"435\" src=\"..\\..\\static\\image\\2e65086566ff407c96ecec80eb3d9793.png\" width=\"822\"/></p>\n<p></p>\n<pre><code class=\"language-javascript\">//转换数据\n                    //let tempSheetData = _this.handleGetData(XLSX.utils.sheet_to_json(workSheet))\n                    let tempSheetData = XLSX.utils.sheet_to_json(workSheet, {\n                        defval: null            //单元格为空时的默认值\n                        , raw: false            //使用w的值而不是v\n                        , dateNF: 'yyyy-MM-dd'   //日期格式\n                    })</code></pre>\n<p>1 需要安装如下依赖内容，该依赖也可以导出excel</p>\n<pre><code>npm install -S file-saver\nnpm install -S xlsx\nnpm install -S xlsx-style\nnpm install -D script-loader</code></pre>\n<p>2 读取excel内容</p>\n<p>说明：</p>\n<ol><li>excel表必须要有工作表（sheet）,且隐藏的工作表也会一起读取</li><li>结果会以对象形式导出</li><li>我用的组件是ant-vue</li><li>注意，你的上传组件方法，传参中一定要有file，el-element可用on-change，且注意ACTIONS要为空，否则只能读取一次</li></ol>\n<p> 组件如下：</p>\n<pre><code class=\"language-javascript\">&lt;template&gt;\n    &lt;div class=\"excel-reader\"&gt;\n        &lt;a-upload name=\"avatar\" class=\"avatar-uploader\" v-loading=\"loading\" :show-upload-list=\"false\"\n            :before-upload=\"handleBeforeUpload\"&gt;\n            &lt;a-button title=\"读取Excel\"&gt;\n                &lt;a-icon type=\"file-excel\" /&gt; Excel Reader\n            &lt;/a-button&gt;\n        &lt;/a-upload&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n  \n&lt;script&gt;\nvar XLSX = require('xlsx')\nimport { readFile } from './excelRreadFile.js'; //读取excel文件方法\n\nexport default {\n    name: 'ViExcelReader',\n    props: {\n        allowed: {\n            type: Array,\n            default () {\n                //类型列表\n                return [\n                    'xlsx', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n                    'xls', \"application/vnd.ms-excel\",\n                    'csv', \"text/csv\"]\n            },\n        },\n    },\n    data () {\n        return {\n            loading: false\n        }\n    },\n    // 定义引入的组件\n    components: {},\n    //变量监听\n    watch: {},\n    // 页面初始化\n    created () { },\n    // 页面DOM加载完成\n    mounted () {\n\n    },\n    //离开页面时执行\n    destroyed () { },\n    // 页面方法\n    methods: {\n        async handleBeforeUpload (file) {\n            //选择文件后\n            let _this = this\n\n            _this.showLoading(true)\n\n            //检测文件类型\n            if (!_this.checkFileType(file)) {\n                _this.$common.showMsg({\n                    type: 'error',\n                    content: `抱歉，请选择excel文件`,\n                })\n\n                _this.showLoading(false)\n                return false\n            }\n\n            //选择excel文件后，并读取其内容（文件流）\n            let dataBinary = await readFile(file)\n            if (dataBinary != null) {\n                // 将整个文件以二进制形式读取\n                let workBook = XLSX.read(dataBinary, { type: 'binary', cellDates: true })\n\n                // 工作表数量\n                let workBookLen = workBook.SheetNames.length\n                \n                // excel工作簿内容\n                let excelBook = []\n\n                //读取每个sheets表\n                for (let i = 0; i &lt; workBookLen; i++) {\n                    let workSheet = workBook.Sheets[workBook.SheetNames[i]]\n                    excelBook.push({\n                        sheetName: workBook.SheetNames[i],\n                        data: XLSX.utils.sheet_to_json(workSheet, {\n                        defval: null            //单元格为空时的默认值\n                        , raw: false            //使用w的值而不是v\n                        , dateNF: 'yyyy-MM-dd'   //日期格式\n                        })\n                    })\n                }\n\n                _this.showLoading(false)\n                console.log({\n                    name: file.name,\n                    length: workBookLen,\n                    data: excelBook\n                })\n                //导出工作表内容\n                _this.$emit(\"onChange\", {\n                    name: file.name,\n                    length: workBookLen,\n                    data: excelBook\n                })\n\n            }\n        },\n\n        showLoading (val) {\n            let _this = this\n            _this.loading = val\n        },\n        checkFileType (file) {\n            let _this = this\n\n            let flog = false\n\n            //得到上传文件的值\n            let fileName = file.name\n\n            //取其类型\n            let fileType = fileName.lastIndexOf('.')\n\n            //返回位于String对象中指定位置的子字符串并转换为小写.\n            let extension = fileName\n                .substring(fileType)\n                .toLowerCase()\n                .replace('.', '')\n            //判断允许上传的文件格式\n            if (_this.allowed.includes(extension)) {\n                flog = true\n            } else {\n                flog = false\n            }\n\n            return flog\n        }\n    },\n}\n&lt;/script&gt;\n \n&lt;style lang=\"less\" scoped&gt;\n.excel-reader {\n    display: inline-block;\n    .ant-upload-text {\n    }\n}\n&lt;/style&gt;</code></pre>\n<p>excelRreadFile.js</p>\n<pre><code>export const readFile = (file) =&gt; {\n    return new Promise((resolve) =&gt; {\n        if (window.FileReader) {\n            let reader = new FileReader()\n            //将文件读取为二进制码\n            reader.readAsBinaryString(file)\n\n            //文件读取成功完成时，若失败，结果为null，否则为读取的结果\n            reader.onload = (ev) =&gt; {\n                resolve(ev.target.result)\n            }\n        } else {\n            //不支持，返回结果为null\n            alert('抱歉，您的浏览器，无法支持读取文件功能！')\n            resolve(null)\n        }\n    })\n}</code></pre>\n<p></p>\n<p>只有一张工作表的excel，及结果 </p>\n<p><img alt=\"\" height=\"289\" src=\"..\\..\\static\\image\\173e14428b1245fd9c6e848ca4a30ef4.png\" width=\"739\"/></p>\n<p> <img alt=\"\" height=\"252\" src=\"..\\..\\static\\image\\772dd9499b7b4e288813ce5854b60588.png\" width=\"589\"/></p>\n<p>有多张工作表的excel，及结果 </p>\n<p><img alt=\"\" height=\"289\" src=\"..\\..\\static\\image\\3654a348ac604860bcfb83719169b836.png\" width=\"739\"/></p>\n<p> <img alt=\"\" height=\"268\" src=\"..\\..\\static\\image\\660c682fcc464d058b55628624e3a4f5.png\" width=\"641\"/></p>\n<p></p>\n<p>自动转数据格式版本</p>\n<pre><code class=\"language-javascript\">&lt;template&gt;\n    &lt;div class=\"excel-reader\"&gt;\n        &lt;a-upload name=\"avatar\" class=\"avatar-uploader\" v-loading=\"loading\" :show-upload-list=\"false\"\n            :before-upload=\"handleBeforeUpload\"&gt;\n            &lt;a-button title=\"读取Excel\"&gt;\n                &lt;a-icon type=\"file-excel\" /&gt; Excel Reader\n            &lt;/a-button&gt;\n        &lt;/a-upload&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n  \n&lt;script&gt;\nvar XLSX = require('xlsx')\nimport { readFile } from './excelRreadFile.js'; //读取excel文件方法\n\nexport default {\n    name: 'ViExcelReader',\n    props: {\n        allowed: {\n            type: Array,\n            default () {\n                //类型列表\n                return [\n                    'xlsx', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n                    'xls', \"application/vnd.ms-excel\",\n                    'csv', \"text/csv\"]\n            },\n        },\n        transFiled: {\n            type: Object,\n            default () {\n                return {\n                    origin: 'zh',\n                    target: 'field'\n                }\n            }\n        },\n        header: {\n            type: Array,\n            default () {\n                return [{\n                    field: 'no',//字段列\n                    zh: '序号',//excel的标题\n                    en: 'No',//转换的列名\n                },\n                {\n                    field: 'student_name',//字段列\n                    zh: '姓名',//excel的标题\n                    en: 'student name',//转换的列名\n                },\n                {\n                    field: 'chinese',//字段列\n                    zh: '语文',//excel的标题\n                    en: 'chinese',//转换的列名\n                },\n                {\n                    field: 'math',//字段列\n                    zh: '数学',//excel的标题\n                    en: 'math',//转换的列名\n                },\n                {\n                    field: 'english',//字段列\n                    zh: '英语',//excel的标题\n                    en: 'english',//转换的列名\n                },\n                {\n                    field: 'exam_date',//字段列\n                    zh: '考试日期',//excel的标题\n                    en: 'exam date',//转换的列名\n                },\n                ]\n            },\n        },\n        field: {\n            type: Array,\n            default () {\n                return []\n            },\n        },\n    },\n    data () {\n        return {\n            loading: false\n        }\n    },\n    // 定义引入的组件\n    components: {},\n    //变量监听\n    watch: {},\n    // 页面初始化\n    created () { },\n    // 页面DOM加载完成\n    mounted () {\n\n    },\n    //离开页面时执行\n    destroyed () { },\n    // 页面方法\n    methods: {\n        async handleBeforeUpload (file) {\n            //选择文件后\n            let _this = this\n\n            _this.showLoading(true)\n\n            //检测文件类型\n            if (!_this.checkFileType(file)) {\n                _this.$common.showMsg({\n                    type: 'error',\n                    content: `抱歉，请选择excel文件`,\n                })\n\n                _this.showLoading(false)\n                return false\n            }\n\n            //选择excel文件后，并读取其内容（文件流）\n            let dataBinary = await readFile(file)\n            if (dataBinary != null) {\n                // 将整个文件以二进制形式读取\n                let workBook = XLSX.read(dataBinary, { type: 'binary', cellDates: true, cellText: false })\n\n                // 工作表数量\n                let workBookLen = workBook.SheetNames.length\n\n                // excel工作簿内容\n                let excelBook = []\n\n                //读取每个sheets表\n                for (let i = 0; i &lt; workBookLen; i++) {\n                    let workSheet = workBook.Sheets[workBook.SheetNames[i]]\n\n                    //转换数据\n                    let tempSheetData = []\n                    if (Object.keys(_this.transFiled).length == 0 || _this.header.length == 0) {\n                        //默认导出，不转换\n                        tempSheetData = XLSX.utils.sheet_to_json(workSheet, {\n                            defval: null            //单元格为空时的默认值\n                            , raw: false            //使用w的值而不是v\n                            , dateNF: 'yyyy-MM-dd'   //日期格式\n                        })\n                    } else {\n                        //根据实际情况导出\n                        tempSheetData = _this.handleGetData(XLSX.utils.sheet_to_json(workSheet, {\n                            defval: null            //单元格为空时的默认值\n                            , raw: false            //使用w的值而不是v\n                            , dateNF: 'yyyy-MM-dd'   //日期格式\n                        }))\n                    }\n\n                    excelBook.push({\n                        sheetName: workBook.SheetNames[i],\n                        data: tempSheetData\n                    })\n                }\n\n                _this.showLoading(false)\n                console.log({\n                    name: file.name,\n                    length: workBookLen,\n                    data: excelBook\n                })\n                //导出工作表内容\n                _this.$emit(\"onChange\", {\n                    name: file.name,\n                    length: workBookLen,\n                    data: excelBook\n                })\n\n            }\n        },\n        handleGetData (data) {\n            //转换数据\n            let _this = this\n            if (data.length == 0) {\n                return []\n            }\n\n            let resultArr = []\n            data.filter(item =&gt; {\n                let row = {}\n                for (let i in item) {\n                    for (let m = 0; m &lt; _this.header.length; m++) {\n                        let mItem = _this.header[m]\n                        if (mItem[_this.transFiled.origin] == i) {\n                            row[mItem[_this.transFiled.target]] = item[i]\n                            break\n                        }\n                    }\n                }\n                resultArr.push(row)\n            })\n\n            return resultArr\n        },\n        showLoading (val) {\n            let _this = this\n            _this.loading = val\n        },\n        checkFileType (file) {\n            let _this = this\n\n            let flog = false\n\n            //得到上传文件的值\n            let fileName = file.name\n\n            //取其类型\n            let fileType = fileName.lastIndexOf('.')\n\n            //返回位于String对象中指定位置的子字符串并转换为小写.\n            let extension = fileName\n                .substring(fileType)\n                .toLowerCase()\n                .replace('.', '')\n            //判断允许上传的文件格式\n            if (_this.allowed.includes(extension)) {\n                flog = true\n            } else {\n                flog = false\n            }\n\n            return flog\n        }\n    },\n}\n&lt;/script&gt;\n \n&lt;style lang=\"less\" scoped&gt;\n.excel-reader {\n    display: inline-block;\n    .ant-upload-text {\n    }\n}\n&lt;/style&gt;</code></pre>\n<p></p>\n<p></p>\n<p>结论：</p>\n<p>千万要注意，隐藏的sheet表也会被读取出来的，且转换后的数据，会以中文为标题出现，有需要的朋友可以转换下对象，否则可能会有问题。 </p>\n<p></p>\n</div>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-06-24 15:40:02", "summary": "：文件地址按需自己改造去读取日期时，如果默认转成日期的话，会比正常的时间少秒，设置日期读取时，直接转成字符串即可，如下图所示，那么转换后的数据就是字符串型日期：，如果需要到具体时分秒，请自行减秒。转换"}