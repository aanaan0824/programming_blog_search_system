{"blogid": "126603279", "writerAge": "码龄1年", "writerBlogNum": "26", "writerCollect": "94", "writerComment": "143", "writerFan": "78", "writerGrade": "4级", "writerIntegral": "828", "writerName": "爱喝酸奶！", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126603279.jpg", "writerRankTotal": "23118", "writerRankWeekly": "329", "writerThumb": "195", "writerVisitNum": "10174", "blog_read_count": "303", "blog_time": "于 2022-08-30 17:50:03 发布", "blog_title": "C++三大特性之继承(一)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"1.%E7%BB%A7%E6%89%BF%E7%9A%84%E5%BC%95%E5%85%A5-toc\" style=\"margin-left:0px;\"><a href=\"#1.%E7%BB%A7%E6%89%BF%E7%9A%84%E5%BC%95%E5%85%A5\">1.继承的引入</a></p>\n<p id=\"2.%E7%BB%A7%E6%89%BF%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E5%AE%9A%E4%B9%89-toc\" style=\"margin-left:0px;\"><a href=\"#2.%E7%BB%A7%E6%89%BF%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E5%AE%9A%E4%B9%89\">2.继承的概念和定义</a></p>\n<p id=\"%C2%A0%20(1)%E7%BB%A7%E6%89%BF%E7%9A%84%E6%A6%82%E5%BF%B5-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%20%281%29%E7%BB%A7%E6%89%BF%E7%9A%84%E6%A6%82%E5%BF%B5\">  (1)继承的概念</a></p>\n<p id=\"%C2%A0%20(2)%E7%BB%A7%E6%89%BF%E7%9A%84%E5%AE%9A%E4%B9%89-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%20%282%29%E7%BB%A7%E6%89%BF%E7%9A%84%E5%AE%9A%E4%B9%89\">  (2)继承的定义</a></p>\n<p id=\"3.%E7%BB%A7%E6%89%BF%E7%9A%84%E8%AE%BF%E9%97%AE%E9%99%90%E5%AE%9A%E7%AC%A6-toc\" style=\"margin-left:0px;\"><a href=\"#3.%E7%BB%A7%E6%89%BF%E7%9A%84%E8%AE%BF%E9%97%AE%E9%99%90%E5%AE%9A%E7%AC%A6\">3.继承的访问限定符</a></p>\n<p id=\"%C2%A0%20(1)%E7%B1%BB%E4%B8%AD%E6%88%90%E5%91%98%E8%AE%BF%E9%97%AE%E9%99%90%E5%AE%9A%E7%AC%A6%E5%9B%9E%E9%A1%BE-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%20%281%29%E7%B1%BB%E4%B8%AD%E6%88%90%E5%91%98%E8%AE%BF%E9%97%AE%E9%99%90%E5%AE%9A%E7%AC%A6%E5%9B%9E%E9%A1%BE\">  (1)类中成员访问限定符回顾</a></p>\n<p id=\"%C2%A0%20(2)%E7%BB%A7%E6%89%BF%E4%B8%AD%E7%9A%84%E8%AE%BF%E9%97%AE%E9%99%90%E5%AE%9A%E7%AC%A6%E5%8F%8A%E5%85%B6%E9%AA%8C%E8%AF%81-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%20%282%29%E7%BB%A7%E6%89%BF%E4%B8%AD%E7%9A%84%E8%AE%BF%E9%97%AE%E9%99%90%E5%AE%9A%E7%AC%A6%E5%8F%8A%E5%85%B6%E9%AA%8C%E8%AF%81\">  (2)继承中的访问限定符及其验证</a></p>\n<p id=\"%C2%A0%20%C2%A0%20%5B1%5D%E9%AA%8C%E8%AF%81%E5%AD%90%E7%B1%BB%E6%98%AF%E5%90%A6%E7%BB%A7%E6%89%BF%E4%BA%86%E7%88%B6%E7%B1%BB%E6%88%90%E5%91%98%C2%A0-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%20%C2%A0%20%5B1%5D%E9%AA%8C%E8%AF%81%E5%AD%90%E7%B1%BB%E6%98%AF%E5%90%A6%E7%BB%A7%E6%89%BF%E4%BA%86%E7%88%B6%E7%B1%BB%E6%88%90%E5%91%98%C2%A0\">    [1]验证子类是否继承了父类成员 </a></p>\n<p id=\"%C2%A0%20%C2%A0%20%5B2%5Dpublic%E7%BB%A7%E6%89%BF-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%20%C2%A0%20%5B2%5Dpublic%E7%BB%A7%E6%89%BF\">    [2]public继承</a></p>\n<p id=\"%C2%A0%20%C2%A0%20%5B3%5Dprotected%E7%BB%A7%E6%89%BF-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%20%C2%A0%20%5B3%5Dprotected%E7%BB%A7%E6%89%BF\">    [3]protected继承</a></p>\n<p id=\"%C2%A0%20%C2%A0%20%5B4%5Dprivate%E7%BB%A7%E6%89%BF-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%20%C2%A0%20%5B4%5Dprivate%E7%BB%A7%E6%89%BF\">    [4]private继承</a></p>\n<p id=\"%C2%A0%20(3)%E9%BB%98%E8%AE%A4%E7%BB%A7%E6%89%BF%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%20%283%29%E9%BB%98%E8%AE%A4%E7%BB%A7%E6%89%BF%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90\">  (3)默认继承访问权限</a></p>\n<p id=\"%C2%A0%20%C2%A0%20%5B1%5Dstruct%E5%85%B3%E9%94%AE%E5%AD%97%E5%AE%9A%E4%B9%89%E7%B1%BB-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%20%C2%A0%20%5B1%5Dstruct%E5%85%B3%E9%94%AE%E5%AD%97%E5%AE%9A%E4%B9%89%E7%B1%BB\">    [1]struct关键字定义类</a></p>\n<p id=\"%C2%A0%20%C2%A0%20%5B2%5Dclass%E5%85%B3%E9%94%AE%E5%AD%97%E5%AE%9A%E4%B9%89%E7%B1%BB-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%20%C2%A0%20%5B2%5Dclass%E5%85%B3%E9%94%AE%E5%AD%97%E5%AE%9A%E4%B9%89%E7%B1%BB\">    [2]class关键字定义类</a></p>\n<p id=\"%C2%A0%20(4)%E8%AE%BF%E9%97%AE%E9%99%90%E5%AE%9A%E7%AC%A6%E6%80%BB%E7%BB%93%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%20%284%29%E8%AE%BF%E9%97%AE%E9%99%90%E5%AE%9A%E7%AC%A6%E6%80%BB%E7%BB%93%C2%A0\">  (4)访问限定符总结 </a></p>\n<p id=\"4.%E5%9F%BA%E7%B1%BB%E5%92%8C%E6%B4%BE%E7%94%9F%E7%B1%BB%E5%AF%B9%E8%B1%A1%E8%B5%8B%E5%80%BC%E8%BD%AC%E6%8D%A2-toc\" style=\"margin-left:0px;\"><a href=\"#4.%E5%9F%BA%E7%B1%BB%E5%92%8C%E6%B4%BE%E7%94%9F%E7%B1%BB%E5%AF%B9%E8%B1%A1%E8%B5%8B%E5%80%BC%E8%BD%AC%E6%8D%A2\">4.基类和派生类对象赋值转换</a></p>\n<p id=\"%C2%A0%20(1)%E8%B5%8B%E5%80%BC%E8%BD%AC%E6%8D%A2%E8%A7%84%E5%88%99-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%20%281%29%E8%B5%8B%E5%80%BC%E8%BD%AC%E6%8D%A2%E8%A7%84%E5%88%99\">  (1)赋值转换规则</a></p>\n<p id=\"%C2%A0%20(2)%E8%A7%84%E5%88%99%E7%90%86%E8%A7%A3-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%20%282%29%E8%A7%84%E5%88%99%E7%90%86%E8%A7%A3\">  (2)规则理解</a></p>\n<p id=\"%C2%A0%20%C2%A0%20%5B1%5D%E8%A7%84%E5%88%991%E5%92%8C2%E7%90%86%E8%A7%A3-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%20%C2%A0%20%5B1%5D%E8%A7%84%E5%88%991%E5%92%8C2%E7%90%86%E8%A7%A3\">    [1]规则1和2理解</a></p>\n<p id=\"%C2%A0%20%C2%A0%20%5B2%5D%E8%A7%84%E5%88%993%E7%90%86%E8%A7%A3-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%20%C2%A0%20%5B2%5D%E8%A7%84%E5%88%993%E7%90%86%E8%A7%A3\">    [2]规则3理解</a></p>\n<p id=\"5.%E7%BB%A7%E6%89%BF%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F-toc\" style=\"margin-left:0px;\"><a href=\"#5.%E7%BB%A7%E6%89%BF%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F\">5.继承中的作用域</a></p>\n<p id=\"%C2%A0%20(1)%E4%BD%9C%E7%94%A8%E5%9F%9F%E8%A7%84%E5%88%99-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%20%281%29%E4%BD%9C%E7%94%A8%E5%9F%9F%E8%A7%84%E5%88%99\">  (1)作用域规则</a></p>\n<p id=\"%C2%A0%20(2)%E9%AA%8C%E8%AF%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E8%A7%84%E5%88%99-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%20%282%29%E9%AA%8C%E8%AF%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E8%A7%84%E5%88%99\">  (2)验证作用域规则</a></p>\n<p id=\"%C2%A0%20%C2%A0%20%5B1%5D%E8%A7%84%E5%88%991-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%20%C2%A0%20%5B1%5D%E8%A7%84%E5%88%991\">    [1]规则1</a></p>\n<p id=\"%C2%A0%20%C2%A0%20%5B2%5D%E8%A7%84%E5%88%992%E5%92%8C3-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%20%C2%A0%20%5B2%5D%E8%A7%84%E5%88%992%E5%92%8C3\">    [2]规则2和3</a></p>\n<p id=\"-toc\" style=\"margin-left:0px;\"></p>\n<hr id=\"hr-toc\"/>\n<h1>1.继承的引入</h1>\n<p>        现实中的继承很好理解，例如<strong>回家继承家产</strong>。而C++中的继承则是<strong>继承代码</strong>。如下举个例子，这段代码较长，但非常好理解。(本文代码均在win10系统上的vs2019上验证)</p>\n<p>        代码一：这段代码定义了两个类，一个狗的类，一个猫的类。但可以发现里面的代码高度相似，狗和猫的很多行为都很像，只有个别行为不一样，比如狗喜欢吃骨头，猫喜欢吃鱼。这样就感觉<strong>代码复用性很低，有大量代码冗余</strong>。而继承就可以解决这种问题。</p>\n<p>        代码一：</p>\n<pre><code class=\"language-cpp\">//代码一\n#include \"iostream\"\nusing namespace std;\n\nclass Dog {\npublic:\n\tDog(string name, int age)\n\t{\n\t\t_name = name;\n\t\t_age = age;\n\t\tPrin();\n\t}\n\tvoid Prin() {\n\t\tcout &lt;&lt; _name &lt;&lt; \"的年龄是\" &lt;&lt; _age &lt;&lt; \"岁\" &lt;&lt; endl;\n\t}\n\tvoid Eat() {\n\t\tcout &lt;&lt; _name &lt;&lt; \"吃饭\" &lt;&lt; endl;\n\t}\n\tvoid Sleep() {\n\t\tcout &lt;&lt; _name &lt;&lt; \"睡觉\" &lt;&lt; endl;\n\t}\n\t//该种动物特有的行为\n\tvoid Act() {\n\t\tcout &lt;&lt; _name &lt;&lt; \"爱吃骨头\" &lt;&lt; endl;\n\t}\nprivate:\n\tstring _name;//姓名\n\tint _age;//年龄\n};\n\nclass Cat {\npublic:\n\tCat(string name, int age)\n\t{\n\t\t_name = name;\n\t\t_age = age;\n\t\tPrin();\n\t}\n\tvoid Prin() {\n\t\tcout &lt;&lt; _name &lt;&lt; \"的年龄是\" &lt;&lt; _age &lt;&lt; \"岁\" &lt;&lt; endl;\n\t}\n\tvoid Eat() {\n\t\tcout &lt;&lt; _name &lt;&lt; \"吃饭\" &lt;&lt; endl;\n\t}\n\tvoid Sleep() {\n\t\tcout &lt;&lt; _name &lt;&lt; \"睡觉\" &lt;&lt; endl;\n\t}\n\t//该种动物特有的行为\n\tvoid Act() {\n\t\tcout &lt;&lt; _name &lt;&lt; \"爱吃鱼\" &lt;&lt; endl;\n\t}\nprivate:\n\tstring _name;//姓名\n\tint _age;//年龄\n};\n\nint main() {\n\tDog d(\"大黄\", 6);\n\tCat c(\"小花\", 5);\n}</code></pre>\n<h1 id=\"2.%E7%BB%A7%E6%89%BF%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E5%AE%9A%E4%B9%89\">2.继承的概念和定义</h1>\n<h2 id=\"%C2%A0%20(1)%E7%BB%A7%E6%89%BF%E7%9A%84%E6%A6%82%E5%BF%B5\">  (1)继承的概念</h2>\n<p>        继承机制是面向对象程序设计使代码可以<strong>复用</strong>的最重要的手段，它允许程序员在保持原有类特性的基础上进行扩展，增加功能，这样产生新的类，称<strong>派生类</strong>。继承呈现了面向对象程序设计的层次结构，体现了由简单到复杂的认知过程。以前我们接触的复用都是函数复用，<strong>继承是类设计层次的复用</strong>。</p>\n<p>       <span style=\"background-color:#e7fafa;\"> 简单来说，继承就是把猫类和狗类共同包含的成员提取出来组成一个基础的类，而猫类和狗类可以直接从基础的类里面把共同成员继承下来，自己只需要实现自己独有的功能即可。</span></p>\n<h2 id=\"%C2%A0%20(2)%E7%BB%A7%E6%89%BF%E7%9A%84%E5%AE%9A%E4%B9%89\">  (2)继承的定义</h2>\n<p>        在这里统一下名称，派生类称为子类，基础类称为父类，子类从父类中衍生出来。</p>\n<p><strong>        继承语法：class 子类名 ：访问限定符 父类名 {}</strong></p>\n<p>        为了更好理解继承的概念，我们把代码一的代码按照继承的概念进行修改。猫和狗都是动物，所以我们把基础类命名为动物类，共同具有姓名、年龄、吃饭、睡觉的方法，那么就把这些成员都放在动物类中。</p>\n<p>        代码二：</p>\n<pre><code class=\"language-cpp\">//代码二\n#include \"iostream\"\nusing namespace std;\n\nclass Animal {\npublic:\n\tvoid Prin() {\n\t\tcout &lt;&lt; _name &lt;&lt; \"的年龄是\" &lt;&lt; _age &lt;&lt; \"岁\" &lt;&lt; endl;\n\t}\n\tvoid Eat() {\n\t\tcout &lt;&lt; _name &lt;&lt; \"吃饭\" &lt;&lt; endl;\n\t}\n\tvoid Sleep() {\n\t\tcout &lt;&lt; _name &lt;&lt; \"睡觉\" &lt;&lt; endl;\n\t}\n\t//该种动物特有的行为\n\tvoid Act() {\n\t\tcout &lt;&lt; _name &lt;&lt; \"爱吃骨头\" &lt;&lt; endl;\n\t}\npublic:\n\tstring _name;//姓名\n\tint _age;//年龄\n};\n\nclass Dog : public Animal{\npublic:\n\t//设置动物信息\n\tvoid Set(string name, int age) {\n\t\t_name = name;\n\t\t_age = age;\n\t\tcout &lt;&lt; _name &lt;&lt; \"是一只狗\" &lt;&lt; endl;\n\t}\n\t//该种动物特有的行为\n\tvoid Act() {\n\t\tcout &lt;&lt; _name &lt;&lt;\"爱吃骨头\" &lt;&lt; endl;\n\t}\n};\n\nclass Cat : public Animal {\npublic:\n\t//设置动物信息\n\tvoid Set(string name,int age) {\n\t\t_name = name;\n\t\t_age = age;\n\t\tcout &lt;&lt; _name &lt;&lt; \"是一只猫\" &lt;&lt; endl;\n\t}\n\t//该种动物特有的行为\n\tvoid Act() {\n\t\tcout &lt;&lt; _name &lt;&lt;\"爱吃鱼\" &lt;&lt; endl;\n\t}\n};\n\nint main() {\n\tDog d;\n\td.Set(\"大黄\", 5);\n\td.Sleep();\n\tCat c;\n\tc.Set(\"小花\", 4);\n\tc.Sleep();\n}</code></pre>\n<h1 id=\"3.%E7%BB%A7%E6%89%BF%E7%9A%84%E8%AE%BF%E9%97%AE%E9%99%90%E5%AE%9A%E7%AC%A6\">3.继承的访问限定符</h1>\n<h2 id=\"%C2%A0%20(1)%E7%B1%BB%E4%B8%AD%E6%88%90%E5%91%98%E8%AE%BF%E9%97%AE%E9%99%90%E5%AE%9A%E7%AC%A6%E5%9B%9E%E9%A1%BE\">  (1)类中成员访问限定符回顾</h2>\n<p>        这是在类与对象初阶的时候给出的访问限定符作用，当时只给出了很简单的性质：</p>\n<p>        <span style=\"color:#0d0016;\"><strong><span style=\"background-color:#edf6e8;\">public成员可以在类内类外直接访问，protected和private成员只能在类内直接访问，不能在类外直接访问。</span></strong></span></p>\n<p><span style=\"color:#0d0016;\">        接下来将扩展它在继承中的性质。</span></p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\ccef6d543cde451284052cbdfd197c14.png\"/></p>\n<p></p>\n<h2 id=\"%C2%A0%20(2)%E7%BB%A7%E6%89%BF%E4%B8%AD%E7%9A%84%E8%AE%BF%E9%97%AE%E9%99%90%E5%AE%9A%E7%AC%A6%E5%8F%8A%E5%85%B6%E9%AA%8C%E8%AF%81\">  (2)继承中的访问限定符及其验证</h2>\n<p>        这里给出继承中的访问限定符性质：比如第二列的含义是：当子类public继承基类后，基类中的public成员在子类中也是public属性，基类中的protected成员在子类中也是protected属性，基类中的private成员在子类中不可见。</p>\n<p>        下面将会证明这三种继承的性质。首先要证明子类是否会继承父类中的成员。</p>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\"><tbody><tr><td>基类成员及其属性</td><td>public继承后基类成员在子类中的属性</td><td>protected继承后基类成员在子类中的属性</td><td>private继承后基类成员在子类中的属性</td></tr><tr><td>基类的public成员</td><td>子类的public成员</td><td>子类的protected成员</td><td>子类的private成员</td></tr><tr><td>基类的protected成员</td><td>子类的protected成员</td><td>子类的protected成员</td><td>子类的private成员</td></tr><tr><td>基类的private成员</td><td>派生类中不可见</td><td>派生类中不可见</td><td>派生类中不可见</td></tr></tbody></table>\n<h3 id=\"%C2%A0%20%C2%A0%20%5B1%5D%E9%AA%8C%E8%AF%81%E5%AD%90%E7%B1%BB%E6%98%AF%E5%90%A6%E7%BB%A7%E6%89%BF%E4%BA%86%E7%88%B6%E7%B1%BB%E6%88%90%E5%91%98%C2%A0\">    [1]验证子类是否继承了父类成员 </h3>\n<p>        通过计算子类和父类的大小来判断子类是否继承了父类的成员变量。 </p>\n<p>        代码三：<strong><span style=\"background-color:#e7fafa;\">计算得到子类与父类大小相等，证明子类完全继承父类成员变量。</span></strong></p>\n<pre><code class=\"language-cpp\">//代码三\n#include \"iostream\"\nusing namespace std;\n\nclass Base {\npublic:\n\tvoid Set(int a, int b, int c) {\n\t\t_a = a;\n\t\t_b = b;\n\t\t_c = c;\n\t}\npublic:\n\tint _a;\nprotected:\n\tint _b;\nprivate:\n\tint _c;\n};\n\nclass Son : public Base {};\n\nint main() {\n\tcout &lt;&lt; sizeof(Base) &lt;&lt; endl;//12\n\tcout &lt;&lt; sizeof(Son) &lt;&lt; endl;//12\n}</code></pre>\n<h3 id=\"%C2%A0%20%C2%A0%20%5B2%5Dpublic%E7%BB%A7%E6%89%BF\">    [2]public继承</h3>\n<p>        代码四：代码四中有两次继承，第一次是Base类派生Son类，Son类派生孙子类。</p>\n<p>        验证原理如下：Base类的public和protected成员可以在Base的子类Son类中访问，说明这两种成员在Son类中的属性可能是public 或者 protected 或者 private。但是<strong>Base类的private成员不可以在Son中访问</strong>。</p>\n<p>        那么对Son类再继承一次，发现Son类的public成员和protected成员在孙子类中依然可以访问，说明它们在Son类中的属性绝对是public 或者 protected，而不是private属性。</p>\n<p>        <strong>因为如果在Son类中是private，孙子类中就不可以访问了。</strong></p>\n<p>        然后对Son类进行实例化，发现Son中的_a可以在类外访问，说明在Son类中是public，_b不可以在类外访问，说明是在Son类中是protected。<strong>_c在类外依然不可以访问。</strong></p>\n<p>        说明<strong><span style=\"background-color:#fbd4d0;\">在public继承中，父类的public成员在子类中还是public成员，protected成员在子类中还是protected成员，但private成员在子类中不可见！</span></strong>        </p>\n<pre><code class=\"language-cpp\">//代码四\n#include \"iostream\"\nusing namespace std;\n\nclass Base {\npublic:\n\tvoid Set(int a,int b,int c) {\n\t\t_a = a;\n\t\t_b = b;\n\t\t_c = c;\n\t}\npublic:\n\tint _a;\nprotected:\n\tint _b;\nprivate:\n\tint _c;\n};\n\nclass Son : public Base {\n\tvoid Set(int a = 10,int b = 11,int c = 12) {\n\t\t_a = a;//_a可以在子类中访问 说明在子类中是public 或者 protected 或者 private\n\t\t_b = b;//_b可以在子类中访问 说明在子类中是public 或者 protected 或者 private\n\t\t//_c = c;  _c不可以在子类中访问 \n\t}\n};\n\nclass Grandson : public Son {\n\tvoid Set(int a, int b, int c) {\n\t\t_a = 10;//_a在孙子类中可以访问，说明在Son类中是public 或者 protected成员\n\t\t_b = b;//_b可以在孙子类中访问，说明在Son类中是public 或者 protected成员\n\t\t\n\t\t//_a和_b绝对不是 private成员，因为基类的private成员在Son类中不可访问\n        //那么子类的private成员自然也在孙子类中不可访问\n\t\t\n\t\t//_c = 19；_c在孙子类中依然不可访问\n\t}\n};\n\nint main() {\n\tSon s;\n\ts._a = 10;//_a可以在类外访问 说明在Son类中是public成员\n\t//s._b = 1; _b不可以在类外访问 说明在Son类中是protected成员\n\t//s._c = 2; _c不可以在子类和孙子类外或类中访问，说明在Son类中是不可见成员\n}\n</code></pre>\n<h3 id=\"%C2%A0%20%C2%A0%20%5B3%5Dprotected%E7%BB%A7%E6%89%BF\">    [3]protected继承</h3>\n<p>        代码五：</p>\n<p>           验证原理如下，Base类的public和protected成员可以在Base的子类Son类中访问，说明这两种成员在Son类中的属性可能是public 或者 protected 或者 private。</p>\n<p>        对Son类再继承一次，Son类的public成员和protected成员在孙子类中依然可以访问，说明在Son类中的属性绝对是public 或者 protected。</p>\n<p>        对Son类进行实例化，发现Son中的_a和_b不可以在类外访问，说明在Son类中是protected。_c在类外依然不可以访问。</p>\n<p>        说明<strong><span style=\"background-color:#fbd4d0;\">在protected继承中，父类的protected成员在子类中是protected成员，protected成员在子类中还是protected成员，但private成员在子类中不可见！</span></strong>        </p>\n<pre><code class=\"language-cpp\">//代码五\n#include \"iostream\"\nusing namespace std;\n\nclass Base {\npublic:\n\tvoid Set(int a,int b,int c) {\n\t\t_a = a;\n\t\t_b = b;\n\t\t_c = c;\n\t}\npublic:\n\tint _a;\nprotected:\n\tint _b;\nprivate:\n\tint _c;\n};\n\nclass Son : protected Base {\n\tvoid Set(int a = 10,int b = 11,int c = 12) {\n\t\t_a = a;//_a可以在子类中访问 说明在子类中是public 或者 protected 或者 private\n\t\t_b = b;//_b可以在子类中访问 说明在子类中是public 或者 protected 或者 private\n\t\t//_c = c;  _c不可以在子类中访问 \n\t}\n};\n\nclass Grandson : public Son {\n\tvoid Set(int a, int b, int c) {\n\t\t_a = 10;//_a在孙子类中可以访问，说明在Son类中是public 或者 protected成员\n\t\t_b = b;//_b可以在孙子类中访问，说明在Son类中是public 或者 protected成员\n\t\t\n\t\t//_a和_b绝对不是 private成员，因为基类的private成员在子类中不可访问\n\t\t\n\t\t//_c = 19；_c在孙子类中依然不可访问\n\t}\n};\n\nint main() {\n\tSon s;\n\t//s._a = 10;_a不可以在类外访问 说明在Son类中是protected成员\n\t//s._b = 1; _b不可以在类外访问 说明在Son类中是protected成员\n\t//s._c = 2; _c不可以在类外或类中访问，说明在Son类中是不可见成员\n}\n\n\n</code></pre>\n<h3 id=\"%C2%A0%20%C2%A0%20%5B4%5Dprivate%E7%BB%A7%E6%89%BF\">    [4]private继承</h3>\n<p>        代码六：</p>\n<p>         验证原理如下：Base类的public和protected成员可以在Base的子类son类中访问，说明这两种成员在Son类中的属性可能是public 或者 protected 或者 private。</p>\n<p>        对Son类再继承一次，发现Son类的public成员和protected成员在孙子类中不可以访问，说明在Son类中的属性绝对是private。</p>\n<p>        然后对Son类进行实例化，发现_c在类外依然不可以访问。</p>\n<p>        说明<strong><span style=\"background-color:#fbd4d0;\">在private继承中，父类的public和protected成员在子类中都是private，而父类的private成员依然在子类中是不可见。</span></strong>    </p>\n<pre><code class=\"language-cpp\">//代码六\n#include \"iostream\"\nusing namespace std;\n\nclass Base {\npublic:\n\tvoid Set(int a, int b, int c) {\n\t\t_a = a;\n\t\t_b = b;\n\t\t_c = c;\n\t}\npublic:\n\tint _a;\nprotected:\n\tint _b;\nprivate:\n\tint _c;\n};\n\nclass Son : private Base {\n\tvoid Set(int a = 10, int b = 11, int c = 12) {\n\t\t_a = a;//_a可以在子类中访问 说明在子类中是public 或者 protected 或者 private\n\t\t_b = b;//_b可以在子类中访问 说明在子类中是public 或者 protected 或者 private\n\t\t//_c = c;  _c不可以在子类中访问 \n\t}\n};\n\nclass Grandson : public Son {\n\tvoid Set(int a, int b, int c) {\n\t\t//_a = 10;//_a在孙子类中不可以访问，说明在Son类中是private\n\t\t//_b = b;//_b不可以在孙子类中访问，说明在Son类中是private\n\n\t\t//_c = 19；_c在孙子类中依然不可访问\n\t}\n};\n\nint main() {\n\tSon s;\n\t//s._a = 10;_a 在Son类中是private\n\t//s._b = 1; _b 在Son类中是private\n\t//s._c = 2; _c不可以在类外或类中访问，说明在Son类中是不可见成员\n}</code></pre>\n<h2 id=\"%C2%A0%20(3)%E9%BB%98%E8%AE%A4%E7%BB%A7%E6%89%BF%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90\">  (3)默认继承访问权限</h2>\n<h3 id=\"%C2%A0%20%C2%A0%20%5B1%5Dstruct%E5%85%B3%E9%94%AE%E5%AD%97%E5%AE%9A%E4%B9%89%E7%B1%BB\">    [1]struct关键字定义类</h3>\n<p>        <span style=\"color:#fe2c24;\"><strong>struct关键字定义的类，其默认的继承限定符是public。</strong></span></p>\n<p><span style=\"color:#0d0016;\">        代码七：</span></p>\n<pre><code class=\"language-cpp\">//代码七\n#include \"iostream\"\nusing namespace std;\n\nclass Farther {\npublic:\n\tint a;\nprotected:\n\tint b;\nprivate:\n\tint c;\n};\n\nstruct Son : Farther {\n\tvoid Set(int aa, int bb, int cc) {\n\t\ta = aa;\n\t\tb = bb;\n\t\t//c = cc; 无法访问\n\t}\n};\n\nstruct GrandSon :  Son {\n\tvoid Set(int aa, int bb, int cc) {\n\t\ta = aa;//无法访问\n\t\tb = bb;//无法访问\n\t\t//c = cc; 无法访问\n\t}\n};\n\nint main() {\n\tSon s;\n\ts.a = 10; \n\t//s.b = 10; 不可访问\n\t//s.c = 10; 无法访问\n}</code></pre>\n<h3 id=\"%C2%A0%20%C2%A0%20%5B2%5Dclass%E5%85%B3%E9%94%AE%E5%AD%97%E5%AE%9A%E4%B9%89%E7%B1%BB\">    [2]class关键字定义类</h3>\n<p>        <span style=\"color:#fe2c24;\"><strong>class关键字定义的类，其默认的继承限定符是private。</strong></span></p>\n<p><span style=\"color:#0d0016;\">        代码八：</span></p>\n<pre><code class=\"language-cpp\">//代码八\n#include \"iostream\"\nusing namespace std;\n\nclass Farther {\npublic:\n\tint a;\nprotected:\n\tint b;\nprivate:\n\tint c;\n};\n\nclass Son : Farther {\n\tvoid Set(int aa, int bb, int cc) {\n\t\ta = aa;\n\t\tb = bb;\n\t\t//c = cc; 无法访问\n\t}\n};\n\nclass GrandSon : public Son {\n\tvoid Set(int aa, int bb, int cc) {\n\t\t//a = aa;无法访问\n\t\t//b = bb;无法访问\n\t\t//c = cc; 无法访问\n\t}\n};\n\nint main() {\n\tSon s;\n\t//s.a = 10; 无法访问\n\t//s.b = 10; 无法访问\n\t//s.c = 10; 无法访问\n}</code></pre>\n<h2 id=\"%C2%A0%20(4)%E8%AE%BF%E9%97%AE%E9%99%90%E5%AE%9A%E7%AC%A6%E6%80%BB%E7%BB%93%C2%A0\">  (4)访问限定符总结 </h2>\n<p>        <span style=\"background-color:#fbd4d0;\">1. 基类private成员在派生类中无论以什么方式继承都是不可见的。这里的</span><strong><span style=\"background-color:#fbd4d0;\">不可见是指基类的私有成员还是被继承到了派生类对象中，但是语法上限制派生类对象不管在类里面还是类外面都不能去访问它</span></strong><span style=\"background-color:#fbd4d0;\">。</span><br/>         <span style=\"background-color:#fbd4d0;\">2. 基类private成员在派生类中是不能被访问，如果</span><strong><span style=\"background-color:#fbd4d0;\">基类成员不想在类外直接被访问，但需要在派生类中能访问，就定义为protected</span></strong><span style=\"background-color:#fbd4d0;\">。</span><br/>         <span style=\"background-color:#fbd4d0;\">3. 基类的私有成员在子类都是不可见。基类的其他成员在子类的访问方式 == Min(成员在基类的访问限定符，继承方式)，public &gt; protected &gt; private。</span><br/>         <span style=\"background-color:#fbd4d0;\">4. 使用关键字class时默认的继承方式是private，使用struct时默认的继承方式是public，最好显示的写出继承方式。</span><br/>         <span style=\"background-color:#fbd4d0;\">5. 在实际运用中一般使用都是public继承。</span></p>\n<h1 id=\"4.%E5%9F%BA%E7%B1%BB%E5%92%8C%E6%B4%BE%E7%94%9F%E7%B1%BB%E5%AF%B9%E8%B1%A1%E8%B5%8B%E5%80%BC%E8%BD%AC%E6%8D%A2\">4.基类和派生类对象赋值转换</h1>\n<p>       <span style=\"color:#fe2c24;\"><strong> 赋值转换前提：必须是public继承。</strong></span></p>\n<h2 id=\"%C2%A0%20(1)%E8%B5%8B%E5%80%BC%E8%BD%AC%E6%8D%A2%E8%A7%84%E5%88%99\">  (1)赋值转换规则</h2>\n<p><strong>      </strong>  <span style=\"background-color:#e7fafa;\">1.</span><strong><span style=\"background-color:#e7fafa;\">派生类对象</span></strong><span style=\"background-color:#e7fafa;\"> 可以赋值给 </span><strong><span style=\"background-color:#e7fafa;\">基类的对象</span></strong><span style=\"background-color:#e7fafa;\"> / </span><strong><span style=\"background-color:#e7fafa;\">基类的指针</span></strong><span style=\"background-color:#e7fafa;\"> / </span><strong><span style=\"background-color:#e7fafa;\">基类的引用</span></strong><span style=\"background-color:#e7fafa;\">。这里有个形象的说法叫切片或者切割。寓意</span><strong><span style=\"background-color:#e7fafa;\">把派生类中父类那部分切来赋值过去</span></strong><span style=\"background-color:#e7fafa;\">。</span><br/>         <span style=\"background-color:#e7fafa;\">2.基类对象不能赋值给派生类对象</span><br/>         <span style=\"background-color:#e7fafa;\">3.基类的指针可以通过强制类型转换赋值给派生类的指针。但是必须是</span><strong><span style=\"background-color:#e7fafa;\">基类的指针是指向派生类对象</span></strong><span style=\"background-color:#e7fafa;\">时才是安全的。</span></p>\n<h2 id=\"%C2%A0%20(2)%E8%A7%84%E5%88%99%E7%90%86%E8%A7%A3\">  (2)规则理解</h2>\n<h3 id=\"%C2%A0%20%C2%A0%20%5B1%5D%E8%A7%84%E5%88%991%E5%92%8C2%E7%90%86%E8%A7%A3\">    [1]规则1和2理解</h3>\n<p>        Animal类派生出Dog类，如下是animal对象和dog对象的对象模型。将dog赋值给animal对象，只需要将继承来的元素赋值给animal对应的变量即可。</p>\n<p>        但如果用animal给dog对象赋值，dog对象中有三个变量，animal对象只有两个变量，那么_color变量拿什么赋值？</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\d2201ac1100148e285e57d983f876597.jpeg\"/></p>\n<h3 id=\"%C2%A0%20%C2%A0%20%5B2%5D%E8%A7%84%E5%88%993%E7%90%86%E8%A7%A3\">    [2]规则3理解</h3>\n<p>        类的设置和上文相同。当用Animal类型的指针指向dog对象时，因为指针类型是Animal，所以指针指向的空间只包括从Animal中继承来的变量。</p>\n<p>        但如果试图用Dog类的指针指向animal对象，因为指针类型是Dog，那么指针可能就会去访问_color变量，可是animal对象跟本没有这个变量，怎么访问呢？</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\d7549fe9efb64113bb29e9eb60943616.jpeg\"/></p>\n<p></p>\n<h1 id=\"5.%E7%BB%A7%E6%89%BF%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F\">5.继承中的作用域</h1>\n<h2 id=\"%C2%A0%20(1)%E4%BD%9C%E7%94%A8%E5%9F%9F%E8%A7%84%E5%88%99\">  (1)作用域规则</h2>\n<p>       <span style=\"background-color:#e7fafa;\"> 1. 在继承体系中基类和派生类都有独立的作用域。子类和基类隶属于不同的作用域，所以子类不可以访问基类中的私有成员。</span><br/>         <span style=\"background-color:#e7fafa;\">2. </span><strong><span style=\"background-color:#e7fafa;\">同名隐藏</span></strong><span style=\"background-color:#e7fafa;\">/</span><strong><span style=\"background-color:#e7fafa;\">重定义</span></strong><span style=\"background-color:#e7fafa;\">：子类和父类中有同名成员变量或成员函数，子类成员将屏蔽对父类同名成员的<strong>直接访问</strong>。（在子类成员函数中，可以使用 基类::基类成员 显示访问父类的同名成员）</span><br/>         <span style=\"background-color:#e7fafa;\">3. 需要注意的是如果是成员函数的隐藏，只需要<strong>函数名相同就构成隐藏</strong>。</span><br/>         <span style=\"background-color:#e7fafa;\">4. 注意在实际中在继承体系里面最好不要定义同名的成员</span></p>\n<h2 id=\"%C2%A0%20(2)%E9%AA%8C%E8%AF%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E8%A7%84%E5%88%99\">  (2)验证作用域规则</h2>\n<h3 id=\"%C2%A0%20%C2%A0%20%5B1%5D%E8%A7%84%E5%88%991\">    [1]规则1</h3>\n<p>        代码九：子类中无法访问父类私有成员</p>\n<pre><code class=\"language-cpp\">//代码九\n#include \"iostream\"\nusing namespace std;\n\nclass Father {\nprivate:\n\tint a;\n};\n\nclass Son : public Father {\n\tvoid Set() {\n\t\t//a = 10; 报错\n\t}\n};\n\nint main() {\n}</code></pre>\n<h3 id=\"%C2%A0%20%C2%A0%20%5B2%5D%E8%A7%84%E5%88%992%E5%92%8C3\">    [2]规则2和3</h3>\n<p>        代码十：</p>\n<pre><code class=\"language-cpp\">//代码十\n//代码八\n#include \"iostream\"\nusing namespace std;\n\nclass Father {\npublic:\n\tint a;\n\tint b;\n\n\tvoid Prin() {\n\t\tcout &lt;&lt; \"基类\" &lt;&lt; endl;\n\t}\n};\n\nclass Son : public Father {\npublic:\n\tvoid Set() {\n\t\tFather::a = 10;\n\t}\n\n\tint a;\n\n\tvoid Prin() {\n\t\tcout &lt;&lt; \"子类\" &lt;&lt; endl;\n\t}\n};\n\nint main() {\n\tSon s;\n\ts.a = 10;\n\ts.Father::a = 12;\n\ts.Prin();// 子类\n\ts.Father::Prin();// 基类\n}</code></pre>\n<h1></h1>\n</div>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-30 17:50:03", "summary": "目录继承的引入继承的概念和定义继承的概念继承的定义继承的访问限定符类中成员访问限定符回顾继承中的访问限定符及其验证验证子类是否继承了父类成员继承继承继承默认继承访问权限关键字定义类关键字定义类访问限定"}