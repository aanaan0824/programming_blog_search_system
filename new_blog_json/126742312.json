{"blogid": "126742312", "writerAge": "码龄10天", "writerBlogNum": "52", "writerCollect": "0", "writerComment": "1", "writerFan": "1", "writerGrade": "3级", "writerIntegral": "520", "writerName": "java_lujj", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126742312.jpg", "writerRankTotal": "61396", "writerRankWeekly": "14085", "writerThumb": "0", "writerVisitNum": "814", "blog_read_count": "11", "blog_time": "于 2022-09-07 11:35:44 发布", "blog_title": "Java基础知识（知识点）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>1、Java是一种高级计算机语言，是可以编写跨平台应用软件、完全面向对象的程序设计语言。</p>\n<p>2、Java划分为三个技术平台：Java SE、Java EE、Java ME</p>\n<p>Java SE是桌面应用，Java EE是web应用，平台企业版，Java ME是手机应用，平台微型版</p>\n<p>3、Java语言的特点：简单易用、安全可靠、跨平台（通过Java虚拟机实现）、面向对象、支持多线程、自动进行垃圾回收(c语言没有)。</p>\n<p>Java引入了虚拟机的概念，通过虚拟机（JVM）可以在不同的操作系统上运行Java程序，从而实现跨平台特性。</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\53bc33ee1ed569bc373c1afa864787e6.png\"/></p>\n<p>4、所有的可执行文件都在bin文件夹下</p>\n<p>5、bin目录：该目录用于存放一些可执行程序，如javac.exe(Java编译器)、java.exe(Java运行工具)、jar.exe（打包工具）和 javadoc.exe（文档生成工具）</p>\n<p>javac.exe是Java编译器工具，它可以将编写好的Java文件编译成Java字节码文件(可执行的Java程序)。就是将.java文件编译成.class文件。</p>\n<p>java.exe是Java运行工具，它会启动一个Java虚拟机(JVM)进程，专门负责运行由Java编译器生成的字节码文件(.class文件)</p>\n<p>6、db目录：db目录是一个小型数据库</p>\n<p>7、include目录：在启动时引入一些C语言的头文件。</p>\n<p>8、jre目录：此目录时Java运行时环境的根目录，它包含Java虚拟机、运行时的类包、Java应用启动器以及一个bin目录，但不包含开发环境中的开发工具。</p>\n<p>jre只负责编写，不负责编译(只有java没有javac)</p>\n<p>9、lib目录：为Java类库或库文件，是开发工使用的归档包文件</p>\n<p>10、src文件夹：放置JDK核心类的源代码。</p>\n<h2>1、PATH配置bin文件夹的目录</h2>\n<p>2、PATH环境变量用于存储Java的编译和运行工具所在的路径。</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\9c1f27798063345317f38ccf0faf8647.png\"/></p>\n<p>3、因为Hello World.class字节码文件不是二进制的，不能直接执行，所以需要进行解析。</p>\n<p>4、解析器使用“java HelloWorld”命令启动Java虚拟机运行程序，Java虚拟机首先将编译好的字节码问价加载到内存，这个过程称为类加载。</p>\n<p>5、Java通过虚拟机，一次编译，到处运行。</p>\n<p>6、Java程序通过Java虚拟机可以实现跨平台特性，但是Java虚拟机并不是跨平台的。</p>\n<p>7、一个Java文件编译后一定生产一个class文件(:x:)</p>\n<p>一个Java文件可以有很多类，一个类对应一个class文件，有几个类就编译生成几个class文件。</p>\n<p>8、一个文件中只能有一个公共类(public 修饰的类)</p>\n<p>9、一个Java文件中可以没有公共类，但是一旦有了公共类，那么公共类的名字一定要和文件名保持一致。</p>\n<h2>1、Java的三大体系是：Java EE、Java SE、Java ME</h2>\n<p>2、Java程序的运行环境简称：JRE</p>\n<p>3、编译Java程序需要使用 javac 命令</p>\n<p>4、javac.exe和java.exe两个可执行程序存放在JDK安装的目录下的 bin 目录下。</p>\n<p>5、Path环境变量用来存储Java的编译和运行工具所在的路径，而classpath环境变量则用来保存Java虚拟机要运行的“,class”文件路径。</p>\n<p>6、Java.util包含Java中大量工具类、集合类，例如：Arrays、List、Set等。</p>\n<p>7、JDK工具包括：Java编译器、Java运行工具、Java文档生成工具、Java打包工具。</p>\n<p>8、.class文件可以在Java虚拟机中运行。</p>\n<p>9、java.exe命令的作用是Java解释器</p>\n<p>1、 <strong>标识符</strong> ：经常需要在程序中定义一些符号来标记一些名称，如包名、类名、方法名、参数名、变量名等，这些符号被称之为标识符。</p>\n<p>标识符可以由任意顺序的大小写字母、数字、下画线(_)和美元符号( $ )组成，但是标识符不能以数字开头，也不能是Java中的关键字，也不能和JDK中的类同名。否则会在编译的时候出错</p>\n<h3>2、Java中的命名约定：</h3>\n<p>1⃣️：包名所有的字母一律小写。</p>\n<p>2⃣️：类名和接口名每个单词的首字母都要大写，例如：ArrayList。</p>\n<p>3⃣️：常量名的所有字母都大写，单词之间用下画线连接，例：DAY_OF_MONTH。</p>\n<p>4⃣️：变量名和方法名的第一个单词首字母小写，从第二个单词开始每个单词首字母大写(驼峰命名法)，例：lineNumber</p>\n<p>5⃣️：尽量使用有意义英文单词来定义标识符。</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\a3568c01ed92ef84f7823963108fa1ec.png\"/></p>\n<p>3、为一个float类型的变量赋值的时候，所赋值的后面一定要加上F或者f</p>\n<p>而在为一个double类型的变量赋值的时候，可以在后面加上D或者d，当然这个double类型的后面可以不加D或者d。</p>\n<p>4、Java的字符类型采用的是Unicode编码方案，每个Unicode码占用16个字节。</p>\n<p>5、对于char类型的赋值时需要使用一对单引号括起来，而且单引号中必须有且只能有一个字符。</p>\n<p>6、Java中不能使用1、0表示真假，只能用true、false表示真假，而c语言用非0表示真，用0表示假，C语言中没有true、false。</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\32a339e0612a3c6f26b6d6b86345e644.png\"/></p>\n<p>范围小的能够自动转换为范围大的。</p>\n<p>7、如果对表达式加强制类型转换，那么表达式一定加括号</p>\n<p>例：(类型)(表达式)</p>\n<p>8、理解几个转换：</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\9295101fcd121c211514a3779b692c05.png\"/></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\bd77862fc95003290ca6943069e6853c.png\"/></p>\n<p>9、常量分为数值常量、符号常量：100，‘a’ ，true</p>\n<p>10、整型常量：</p>\n<p>1⃣️：二进制：由数字0和1组成，使用二进制面值来表示整数的时候，二进制数前面要以0b或0B开头，目的是为了和十进制进行区分，例：0b01101100</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\9e5934417bcc0fa5fb4a1de6e872e593.png\"/></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\d59a9081e9ecc2f477a95b789a569d72.png\"/></p>\n<p>2⃣️：八进制：以0开头，并且其后由0～7(包括0和7)的整数组成的数字序列，如：0324</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\97e6672943caa68871a11ce18c572986.png\"/></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\ce089d10ecab8e561234dc1bd00ab7e9.png\"/></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\fa9ad0e8fb3d464eba48532a1c89ec15.png\"/></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\e6d345e0f289ee4b6b6a9a0666fa0de0.png\"/></p>\n<p>3⃣️：十进制：由数字0～9(包括0和9)的整数组成的数字序列，如198.</p>\n<p>4⃣️：十六进制：以0x或者0X开头，并且后面跟随着0~9、A～F组成的字符序列，如0x25AF</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\6af0e8d8e5e12f701e879672254bcb9d.png\"/></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\adf3db58133dca5e31ef541a2d600fed.png\"/></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\8933ca65c28c59664b8752324cf2bbb7.png\"/></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\b774890eb721e946717c22c8e6ac4005.png\"/></p>\n<p>1、java常量需要声明定义常量类型、常量名，并且可以对该常量进行初始化赋值，也可以后续赋值，但是Java常量一旦赋值后，值就不允许更改。</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\f60059edc434ccfeb2e73105fc2dbce2.png\"/></p>\n<p>2、注意%的使用</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\ff41ee67692f98c6aded022a495f022a.png\"/></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\cb312e2855149b8c7daa5626ef00ab4d.png\"/></p>\n<p>3、位运算符的使用</p>\n<p>&amp; 按位与 只有当&amp;左右的两个数相同的时候才会返回值1</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\781d0046ae2a062742c641ac3fedd4a4.png\"/></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\ea74e4cae6b0b7eed8024b93e3ca536b.png\"/></p>\n<p>按位或 只有当 | 左右都取0的时候才会返回值0</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\283a82ce1b7f8df736177fa465b721b9.png\"/></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\f03c71effcc8ae840a6952dc4dd7333e.png\"/></p>\n<p>~ 取反</p>\n<p>例：</p>\n<p>7 ：二进制 00000111</p>\n<p>～7: 二进制 11111000</p>\n<p>我们看到最高位是1，这表示这个～7得到的是一个负数，负数以补码的形式存储的。是个负数还是比较麻烦的。</p>\n<p>先进行减1 ： 11110111</p>\n<p>再取反：00001000</p>\n<p>得到的这个二进制数的值是8</p>\n<p>但因为我们一开始知道～7是一个负数，所以我们要对8加上一个负号，即最终结果为：-8</p>\n<p>自己求～-7的值，反正我不知道该怎么办了。</p>\n<p>^ 按位异或</p>\n<p>只有当^左右的两个数不相同的时候，才会输出值1</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\86f3bfddb6b0de53f2e2447829e657e4.png\"/></p>\n<p>&lt;&lt; 逻辑左移，&lt;&lt;就是将操作数所有二进制位向左移动制定的位数。运算时，左边移走的部分舍去，右边的空位补0.</p>\n<p>&gt;&gt;逻辑右移，就是将操作数所有的二进制位向右移动制定的位数。运算时，左边的空位根据原数的符号位补0或1(原本是负数就全部补1，原本是整数就全部补0)，右边移走的部分舍去。</p>\n<p>&gt;&gt;&gt;无符号右移，就是将所有操作数所有二进制位不考虑正负向右移动指定尾数。运算时，左边的空位全部补0，右边移走的部分舍去。</p>\n<p>对于switch语句，支持字符型，整型，字符串，不支持小数(float、double)，也不支持布尔型。</p>\n<p>方法的三要素：方法名、参数、返回值的类型</p>\n<p>对于return回去什么类型的值，返回值的类型就是什么。</p>\n<p>System.in.read();</p>\n<p>用于读取一个字符，返回的是一个整数值，可以通过强制转换转换为字符型，对于输入的是单个字符的时候可以用这种方法。</p>\n<p>如果输入的字符很多的时候或者是一个字符串的时候使用：</p>\n<p>Scanner sc =new Scanner(System.in);</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\0857d2c504bb6c21cc49229b8d2eb6f5.png\"/></p>\n<p>数组的常用操作：插入、删除、修改、查找、排序、初始化</p>\n<p>遍历数组可以使用通过下标使用for循环进行遍历</p>\n<p>也可以shying增强for循环来遍历数组</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\6326647f9ceefae68916153193802e6c.png\"/></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\7cd9f83797720c7354d5fbefa43ab8e4.png\"/></p>\n<p>二维数组是按照行进行存储的：</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\b217fa770ed60ab46ee5d9547970c816.png\"/></p>\n<p>不规则数组：int [][]b = new int[3][];</p>\n<p>此时不能输出b[0][0]</p>\n<p>因为没有指定列：</p>\n<p>所以可能会出现下面的情况：</p>\n<p>a[0] = new int a[3];</p>\n<p>a[1] = new int a[2];</p>\n<p>a [2 ] = new int a[5]</p>\n<p>数组的赋值也可以按照下面的形式：</p>\n<p>int [][]a = {<!-- -->{1,2,3},{4,5},{7,8,9}};</p>\n<p>java 中的变量分为两种数据类型：基本数据类型、引用数据类型。</p>\n<p>Java语言严格区分大小写。</p>\n<p>1、面向对象的三大特征：封装、继承、多态</p>\n<p>2、子类是不能够继承父类的构造方法的，所以子类不能将父类中所有的东西都继承。</p>\n<p>3、类是对某一类事物的抽象的描述，而对象用于表示现实中该类事物的个体。类是对某一类事物的抽象描述的集合。</p>\n<p>4、通过构造方法给成员变量赋初始值。</p>\n<p>5、一个类中的构造方法是可以相互调用的，但调用的时候必须是构造方法的第一行语句，使用的关键字是this</p>\n<p>比如：</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\54caca5d264d469ceb88c9a64411304c.png\"/></p>\n<p>6、类的封装：</p>\n<p>1⃣️：成员变量私有化(private)</p>\n<p>2⃣️：提供公开的set、get方法</p>\n<p>set方法是void方法，但是需要参数</p>\n<p>get方法是有返回值的，但是不需要参数。</p>\n<p>7、类是不能够使用private、protected修饰的。</p>\n<p>类也不能同时使用abstract和final修饰，只能选择其中一个，是不能共存的。</p>\n<p>8、方法的重载：前提是在同一个类中有多个同名的方法，其参数的个数与参数的类型不同，这与返回的类型(方法)无关。</p>\n<p>1、静态的方法只能访问静态的方法和静态的成员。</p>\n<p>2、什么时候使用static修饰方法</p>\n<p>所有的对象的成员变量都是一样的时候使用static修饰。</p>\n<p>方法中的内容与对象调用是无关时，用static修饰。</p>\n<p>即两个不同的对象同时调用同一个方法，若这两个对象获取的方法的内容相同就可以使用static来修饰方法。</p>\n<p>3、在非静态成员方法中，可以使用this访问类的其他非静态成员。</p>\n<p>4、类对象(使用static修饰的)在未创建对象之前就已经被加载了。</p>\n<p>5、声明构造方法的时候，不能使用private关键字修饰。(default、protected、public都可以修饰构造方法)</p>\n<p>6、static关键字不可以修饰类。</p>\n<p>7、static关键字不可以修饰所有的变量。因为static不能修饰局部变量。</p>\n<p>8、构造方法不能被继承。</p>\n<p>1、构造方法不能被继承。</p>\n<p>2、super关键字用于访问父类的成员，例如访问父类的成员变量、成员方法、构造方法。</p>\n<p>3、方法的重写时方法的三要素必须是一致的。</p>\n<p>方法的三要素：方法名、参数、返回值类型</p>\n<p>4、方法的重写的时候可以改变方法的权限，但是子类的权限范围要比父类的权限范围大。</p>\n<p>5、方法的重写的时候子类不呢个抛出比父类抛出的更多的异常。</p>\n<p>6、final关键字用于修饰类、变量、和方法，它有“不可更改”或者“最终”的含义，因此被final修饰的类、变量、和方法有以下特征。</p>\n<p>1⃣️：final修饰的类不能被继承</p>\n<p>2⃣️：final修饰的方法不能被子类重写</p>\n<p>3⃣️：final修饰的变量(成员变量和局部变量)是常量，只能赋值一次，赋值后不再允许改变其值。</p>\n<p>7、String类就是被static、final修饰的类。</p>\n<p>8、包含抽象方法的类一定是抽象类，抽象类不一定含有抽象方法。— abstract</p>\n<p>9、接口是一种特殊的抽象类--------- interface</p>\n<p>1、接口中除了抽象方法外，还可以有默认方法和静态方法(类方法)，默认方法使用default修饰，静态方法使用static修饰，并且这两种方法都允许有方法体。</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\ea17ea9f5ba3dc683aa9e9d5b72fc0ee.png\"/></p>\n<p>2、接口中默认的方法都是使用public abstract进行修饰的。</p>\n<p>3、接口中的变量默认都是public static final 进行修饰的。</p>\n<p>这里的变量相当于是常量。</p>\n<p>4、继承只能是单继承，但是实现接口可以实现多实现。</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\9bf9dc88f0b061896f45a35347aef28c.png\"/></p>\n<p>5、父类对象可以指向子类对象，但是子类对象不能指向父类对象，但是子类对象可以通过强制类型转换可以进行转换为父类对象，但是强转是有条件的，只有当父类的对象就是指向的子类的对象的时候才能够发生强制转换。</p>\n<p>6、方法的重写、重载都是一种多态的体现（同一种事物、多种形态）</p>\n<p>7、注意：if(a instance of cat) 的使用。</p>\n<p>1、异常分为编译时异常和运行时异常，编译时异常是必须要出来的异常。</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\98bf549bef2af1e0a20fe08f21d35d7a.png\"/></p>\n<p>2、数组下标越界异常时运行时(处理时)异常。</p>\n<p>3、Error类称为错误类，错误是我们处理不了的。</p>\n<p>4、Throwable常用方法：</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\c5ed5bc7f0204affce6d224a503b1b27.png\"/></p>\n<p>5、我们自己定义的方法，将来别人要去调用，所以我们自己定义的方法要消极的处理异常，别人谁调用谁就积极的处理异常。</p>\n<p>6、catch后面如果有多个异常，子类要在父类异常前。</p>\n<p>7、注意抛出异常的throws和throw关键字。</p>\n<p>8、注意自定义异常的使用。</p>\n<p>1、String表示的是不可变得字符串</p>\n<p>String Buffer表示的是可变的字符串</p>\n<p>2、</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\3c558eccd80e63a9d593fbd73cdf437e.png\"/></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\86c93a68e19e4fa530d38893aaa17a71.png\"/></p>\n<p>3、[ int ] capacity; 返回的是当前的容量。</p>\n<p>4、String类转换为StringBuffer类：通过StringBuffer的构造方法</p>\n<p>StringBuffer类转换为String类：通过使用toString方法。</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\de46c52dd62d5f737e4710cb33593bf9.png\"/></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\ad169cd70e64cad38083d412251c4163.png\"/></p>\n<p>5、注意包装类：</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\07bb6dcfd0b89009c54ee5334cfcff9f.png\"/></p>\n<p>6、SimpleDateFormat类是将Date类输出的美式格式的日期转换为自己想要的格式串的形式。</p>\n<p>7、SimpleDateFormat 返回的是String字符串</p>\n<p>1、Java中操作日期的类有：Date、Calendar、DateFormat</p>\n<p>2、Java中专门用于将日期格式化为字符串的类是：DateFormat</p>\n<p>3、System类中所提供的属性和方法都是静态的。</p>\n<p>4、在进行字符串的比较的运算中，==用于比较地址和值，而equals只用与比较值，是不比较地址的。</p>\n<p>5、System类中的currentTimeMillis()方法返回一个long类型的值。</p>\n<p>6、Date、Calendar都位于java.util包下，而DateFormat类位于java.text包下。</p>\n<p>1、在创建TreeSet对象时，可以传入自定义比较器，自定义比较器需要实现 Comparator接口。</p>\n<p>2、使用Iterator遍历集合的时候，首先需要调用的是hasNext()方法判断是否存在下一个元素，若存在下一个元素，则调用next()方法取出该元素。</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\87d37c68a45e8a3468825456009943bc.png\"/></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\61ff1659ffeeb58c1c84752f5939328c.png\"/></p>\n<p>3、List集合中存放的元素是有序的，可重复的（所谓的有序是添加元素到集合的顺序和从集合中取出元素的顺序是一致的。）</p>\n<p>Set集合存放的元素无序的，不可重复。</p>\n<p>4、List集合的主要实现类有：ArrayList、LinkedList，</p>\n<p>Set集合的主要实现类有：HashSet、TreeSet</p>\n<p>Map集合的主要实现类有：HashMap、TreeMap</p>\n<p>5、在JDK1.8中，根据Lambda表达式特性还增加了一个 forEach(Consumer action) 方法来遍历集合。</p>\n<p>6、集合中不能存放基本数据类型，而只能存放引用数据类型。</p>\n<p>7、在程序开发时，经常会使用 Properties 类来存储程序中所需的配置</p>\n<p>1、编译Java程序需要使用___javac________命令。</p>\n<p>2、用户可以根据需要自定义异常，但自定义异常一定要继承__Exception__类。</p>\n<p>3、在Java 中，可以使用关键字____new_______来创建类的实例对象。</p>\n<p>4、在非静态成员方法中，可以使用关键字_____this______访问类的其他非静态成员。</p>\n<p>5、定义一个Java类时，如果前面使用____final_______关键字修饰，那么该类不可以被继承。</p>\n<p>6、如果子类想使用父类中的成员，可以通过关键字___super________引用父类的成员</p>\n<p>7、接口是一种只含有常量和___抽象方法________的一种特殊的抽象类。</p>\n<p>8、JDK中提供了一系列可以存储任意对象的类，统称为_____集合______。</p>\n<p>9、在Java语言中，以下throws关键字用于在方法上声明抛出异常</p>\n<p>10、System类位于java.lang包中</p>\n<p>11、static方法不能访问实例变量，也不能访问实例方法，不能使用this关键字</p>\n<p>1、被static修饰的成员变量被称为_类变量_________，它可以被该类所有对象共享。</p>\n<p>2、JDK中定义了大量的异常类，这些类都是__Throwable________类的子类或者间接子类。</p>\n<p>3、接口中的方法都是__抽象的________，不能实例化对象。</p>\n<p>4、一个超类可以有多个子类，但是一个子类不能有多个超类</p>\n<p>5、覆盖只有发生在父类与子类之间，而重载可以发生在同一个类中</p>\n<p>6、实现一个接口必须实现接口的所有方法</p>\n<p>7、父类的引用指向自己子类的对象是多态的一种体现形式。</p>\n<p>8、 throws关键字用于对外声明方法可能发生的异常，这样调用者在调用方法时，可以明确知道该方法有异常，并进行相关处理</p>\n<p>9、不存在继承关系的情况下，不能实现方法的重写。</p>\n<p>10、如果一个方法的参数是接口类型的参数，调用该方法时可以传递任何可以实现该接口的类的实例。</p>\n<p>1、Java的封装性是通过访问权限控制实现的</p>\n<p>2、Java中的标识符和关键字都是区分大小写的，如果把声明类的class写成Class或者CLASS，编译会出错。</p>\n<p>3、一个类的所有对象共享static修饰的类变量。</p>\n<p>4、重载方法的参数形式（类型、参数个数或参数顺序）必须不同</p>\n<p>5、Java程序的运行环境简称之为___JRE___。</p>\n<p>6、Java中的变量可分为两种数据类型，分别是__基本数据类型__和__引用数据类型__。</p>\n<p>1、如果子类中的某个方法名、返回值类型和 参数 与父类中的某个方法完全一致，则称子类中的这个方法覆盖了父类的同名方法。</p>\n<p>2、在Java程序中，通过类的定义只能实现单重继承，但通过_接口_ 的定义可以实现多重继承关系。</p>\n<p>3、类方法在内存中只有一个副本，能被该类的所有实例共享，实例方法则在每个对象中有独立的内存空间</p>\n<p>4、类方法允许用实例方式和类名方式调用。被static修饰的方法称为类方法。</p>\n<p>5、如果子类的构造函数没有通过super调用父类构造函数，那么子类会先调用父类不含参数的构造函数，再调用子类自己的构造函数</p>\n<p>6、main方法一定是static修饰的。</p>\n<p>7、一个abstract类不可以被声明为final类。 因为一个类要么是abstract要么是final修饰</p>\n<p>8、Java编译器使用文件系统来保存程序包。</p>\n</div>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-09-07 11:35:44", "summary": "、是一种高级计算机语言，是可以编写跨平台应用软件、完全面向对象的程序设计语言。、划分为三个技术平台：、、是桌面应用，是应用，平台企业版，是手机应用，平台微型版、语言的特点：简单易用、安全可靠、跨平台通"}