{"blogid": "123795776", "writerAge": "码龄8年", "writerBlogNum": "19", "writerCollect": "63", "writerComment": "2", "writerFan": "12", "writerGrade": "2级", "writerIntegral": "281", "writerName": "唐芬奇", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123795776.jpg", "writerRankTotal": "104881", "writerRankWeekly": "120096", "writerThumb": "52", "writerVisitNum": "21649", "blog_read_count": "11404", "blog_time": "已于 2022-04-19 15:04:53 修改", "blog_title": "ConcurrentHashMap详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#ConcurrentHashMap_1\">什么是ConcurrentHashMap</a></li><li><a href=\"#ConcurrentHashMap_5\">ConcurrentHashMap结构</a></li><li><ul><li><a href=\"#_14\">如何高效的执行并发操作</a></li><li><a href=\"#_19\">如何进行锁的选择</a></li><li><a href=\"#Node_23\">Node节点类型与作用</a></li><li><a href=\"#_38\">扩容的方式</a></li></ul>\n</li><li><a href=\"#_70\">源码分析</a></li><li><ul><li><a href=\"#putVal_71\">putVal()方法</a></li><li><a href=\"#spread_154\">spread()方法，获取槽位。</a></li><li><a href=\"#initTable_167\">initTable()方法，初始化容器</a></li><li><a href=\"#addCount__197\">addCount() ，计算成员数量</a></li><li><ul><li><a href=\"#transfer_248\">transfer()，进行扩容</a></li></ul>\n</li><li><a href=\"#compute_447\">compute()</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"ConcurrentHashMap_1\"></a>什么是ConcurrentHashMap</h1>\n<p>concurrentHashMap是一个支持高并发更新与查询的哈希表(基于HashMap)。<br/> 在保证安全的前提下，进行检索不需要锁定。与hashtable不同，该类不依赖于synchronization去保证线程操作的安全。</p>\n<h1><a id=\"ConcurrentHashMap_5\"></a>ConcurrentHashMap结构</h1>\n<p>根据上述，知道ConcurrentHashMap的目标，接下来就是看该目标需要解决哪些问题。<br/> 以put()方法为例：<br/> ● 计算出key的槽位<br/> ● 根据槽位类型进行操作(链表，红黑树)<br/> ● 根据槽位中成员数量进行数据转换,扩容等操作</p>\n<p>回顾hashMap的数据结构：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\70d75c961cb94d43ab500bd9b95c4955.png\"/></p>\n<h2><a id=\"_14\"></a>如何高效的执行并发操作</h2>\n<p>根据上面hashMap的数据结构可以直观的看到，如果以整个容器为一个资源进行锁定，那么就变为了串行操作。而根据hash表的特性，具有冲突的操作只会出现在同一槽位，而与其它槽位的操作互不影响。<br/> 基于此种判断，那么就可以将资源锁粒度缩小到槽位上，这样热点一分散，冲突的概率就大大降低，并发性能就能得到很好的增强。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a1607a4e861148138e0cf48cb9e1bafe.png\"/></p>\n<h2><a id=\"_19\"></a>如何进行锁的选择</h2>\n<p>ConcurrentHashMap使用JUC包中通过直接操作内存中的对象，将比较与替换合并为一个原子操作的乐观锁形式（CAS）来进行简单的值替换操作，对于一些含有复杂逻辑的流程对Node节点对象使用synchronize进行同步。</p>\n<h2><a id=\"Node_23\"></a>Node节点类型与作用</h2>\n<p>回顾HashMap，其中Node节点类型包含两种，第一种链表，第二种红黑树。<br/> 而在ConcurrentHashMap中节点类型在上述两种的基础上扩展了，两种分别是ForwardingNode<br/> 和 ReservationNode。<br/> ForwardingNode：用于解决当进行扩容的时候，进行查询的问题。<br/> ReservationNode：用于解决当进行计算时，计算的对象为空的问题。</p>\n<p>槽位hash值含义：<br/> 链表：大于0<br/> ForwardingNode：-1<br/> 红黑树：-2<br/> ReservationNode：-3<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f805d31beab747f2a95df078dcb41b2e.png\"/></p>\n<h2><a id=\"_38\"></a>扩容的方式</h2>\n<p>基于hashMap的扩容方式，通过成员的最新bit位是1or0来决定是否将成员迁入新的槽位中。<br/> 显而易见，这种扩容方式对于槽位之间也是互不影响的，那么就可以进行并发的执行扩容以达到高效的目的。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9ca530cd38834c9a88f9ee2e76c59d71.png\"/></p>\n<p>节点为空则直接替换为Forwarding，后续操作就在新容器中开展。<br/> 如果节点不为空，则对节点处理完毕后变更为Forwarding。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2d276845fe384cf38c1ba5c1b382eb07.png\"/></p>\n<pre><code class=\"prism language-java\">    <span class=\"token comment\">/**\n     * Table initialization and resizing control.  When negative, the\n     * table is being initialized or resized: -1 for initialization,\n     * else -(1 + the number of active resizing threads).  Otherwise,\n     * when table is null, holds the initial table size to use upon\n     * creation, or 0 for default. After initialization, holds the\n     * next element count value upon which to resize the table.\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> sizeCtl<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>○ 负数<br/> ■ -1：容器进行初始化<br/> ■ 其余负数：高16存储resizeStamp()返回的扩容标识符，低16位（1+进行扩容的线程数）<br/> ○ 正数<br/> ■ 0：未初始化，需要进行初始化<br/> ■ 其余正数：当前容器的大小</p>\n<h1><a id=\"_70\"></a>源码分析</h1>\n<h2><a id=\"putVal_71\"></a>putVal()方法</h2>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">V</span> <span class=\"token function\">putVal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> onlyIfAbsent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> value <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//获取hash值</span>\n        <span class=\"token keyword\">int</span> hash <span class=\"token operator\">=</span> <span class=\"token function\">spread</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> binCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> f<span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> fh<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//容器为空进行初始化流程</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tab <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                tab <span class=\"token operator\">=</span> <span class=\"token function\">initTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//如果槽位中为空的    </span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">=</span> <span class=\"token function\">tabAt</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//以cas方式进行替换，替换成功就中断循环，替换失败则进行下一次循环</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">casTabAt</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n                             <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// no lock when adding to empty bin</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">//一种特殊的节点（forwarding 节点，迁移节点，只在迁移过程中存在）的处理方式</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fh <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> MOVED<span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">//帮助进行扩容</span>\n                tab <span class=\"token operator\">=</span> <span class=\"token function\">helpTransfer</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//如果槽位不为空，并且不是（forwarding节点）    </span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">V</span> oldVal <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//将整个槽位锁住</span>\n                <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">//double check，如果槽位里面的数据发生变更则重新走流程</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">tabAt</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token comment\">//如果是链表</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fh <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                            binCount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> e <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>binCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                                <span class=\"token class-name\">K</span> ek<span class=\"token punctuation\">;</span>\n                                <span class=\"token comment\">//如果存在成员则覆盖</span>\n                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash <span class=\"token operator\">&amp;&amp;</span>\n                                    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ek <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span>\n                                     <span class=\"token punctuation\">(</span>ek <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>ek<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                                    oldVal <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n                                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>onlyIfAbsent<span class=\"token punctuation\">)</span>\n                                        e<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n                                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span>\n                                <span class=\"token comment\">//不存在成员则新增</span>\n                                <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> pred <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                                    pred<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span>\n                                                              value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token comment\">//如果是红黑树</span>\n                        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">TreeBin</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                            <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> p<span class=\"token punctuation\">;</span>\n                            binCount <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeBin</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">)</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">putTreeVal</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span>\n                                                           value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                                oldVal <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>onlyIfAbsent<span class=\"token punctuation\">)</span>\n                                    p<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\">//如果一个槽位中的数量大于1（只有大于1的才会有binCount）</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>binCount <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">//如果槽位中的成员数量大于等于8，则变更为</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>binCount <span class=\"token operator\">&gt;=</span> TREEIFY_THRESHOLD<span class=\"token punctuation\">)</span>\n                        <span class=\"token comment\">//进行转换成红黑树处理</span>\n                        <span class=\"token function\">treeifyBin</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldVal <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">return</span> oldVal<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">addCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">1L</span><span class=\"token punctuation\">,</span> binCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"spread_154\"></a>spread()方法，获取槽位。</h2>\n<p>作用：用于获取槽位值</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">spread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> h<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//h为key值得hash值,将高16位也参与运算，然后与int最大值进行&amp;运算(效果为将值变为正数，其他位置不变)</span>\n        <span class=\"token comment\">//HASH_BITS为int最大值，最高位为0</span>\n        <span class=\"token comment\">//HashMap中没有处理为正数的步骤，这里负数有其它含义，查看节点类型</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> HASH_BITS<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"initTable_167\"></a>initTable()方法，初始化容器</h2>\n<pre><code class=\"prism language-java\">   <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">initTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab<span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> sc<span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> tab<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token comment\">//sizeCtl，代表着初始化资源或者扩容资源的锁，必须要获取到该锁才允许进行初始化或者扩容的操作</span>\n           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sc <span class=\"token operator\">=</span> sizeCtl<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n               <span class=\"token comment\">//放弃当前cpu的使用权，让出时间片，线程计入就绪状态参与竞争</span>\n               <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// lost initialization race; just spin</span>\n           <span class=\"token comment\">//比较并尝试将sizeCtl替换成-1，如果失败则继续循环    </span>\n           <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> SIZECTL<span class=\"token punctuation\">,</span> sc<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n               <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                   <span class=\"token comment\">//进行一次double check 防止在进入分支前，容器发生了变更</span>\n                   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> tab<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                       <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sc <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> sc <span class=\"token operator\">:</span> DEFAULT_CAPACITY<span class=\"token punctuation\">;</span>\n                       <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span>\n                       <span class=\"token comment\">//初始化容器</span>\n                       <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                       table <span class=\"token operator\">=</span> tab <span class=\"token operator\">=</span> nt<span class=\"token punctuation\">;</span>\n                       sc <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                   <span class=\"token punctuation\">}</span>\n               <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n                   sizeCtl <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">}</span>\n               <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">}</span>\n       <span class=\"token keyword\">return</span> tab<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"addCount__197\"></a>addCount() ，计算成员数量</h2>\n<p>问题：如果每一个线程的更新都去修改baseCount，当竞争比较小的时候问题不大，但是当非常频繁就会导致同一时候只有一个线程能更新成功，其它线程需要自旋等待机会，如果将baseCount拆成一个个cell也就是CounterCell[]，每个线程绑定一个cell单元进行自身size的添加，那么就可以分散热点。<br/> 作用：和LongAdder思路一样，分散热点，提高性能，同时增加查询size时候的性能问题，只有当竞争强度上升才会启用</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d3530e2489824a57ad1986a1552f8130.png\"/></p>\n<pre><code class=\"prism language-java\">   <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> check<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">CounterCell</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> as<span class=\"token punctuation\">;</span> <span class=\"token keyword\">long</span> b<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//统计单元不为空or数量增加失败</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>as <span class=\"token operator\">=</span> counterCells<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span>\n            <span class=\"token operator\">!</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapLong</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> BASECOUNT<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> baseCount<span class=\"token punctuation\">,</span> s <span class=\"token operator\">=</span> b <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">CounterCell</span> a<span class=\"token punctuation\">;</span> <span class=\"token keyword\">long</span> v<span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">boolean</span> uncontended <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>as <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">=</span> as<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span>\n                <span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> as<span class=\"token punctuation\">[</span><span class=\"token class-name\">ThreadLocalRandom</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProbe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span>\n                <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>uncontended <span class=\"token operator\">=</span>\n                  <span class=\"token class-name\">U</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapLong</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> CELLVALUE<span class=\"token punctuation\">,</span> v <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> v <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//创建cells或者进行数量增加</span>\n                <span class=\"token function\">fullAddCount</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> uncontended<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>check <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            s <span class=\"token operator\">=</span> <span class=\"token function\">sumCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//检查是否需要扩容</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>check <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab<span class=\"token punctuation\">,</span> nt<span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> sc<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">&gt;=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>sc <span class=\"token operator\">=</span> sizeCtl<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>tab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span>\n                   <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> MAXIMUM_CAPACITY<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">int</span> rs <span class=\"token operator\">=</span> <span class=\"token function\">resizeStamp</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sc <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sc <span class=\"token operator\">&gt;&gt;&gt;</span> RESIZE_STAMP_SHIFT<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> rs <span class=\"token operator\">||</span> sc <span class=\"token operator\">==</span> rs <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span>\n                        sc <span class=\"token operator\">==</span> rs <span class=\"token operator\">+</span> MAX_RESIZERS <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>nt <span class=\"token operator\">=</span> nextTable<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span>\n                        transferIndex <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> SIZECTL<span class=\"token punctuation\">,</span> sc<span class=\"token punctuation\">,</span> sc <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> nt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> SIZECTL<span class=\"token punctuation\">,</span> sc<span class=\"token punctuation\">,</span>\n                                             <span class=\"token punctuation\">(</span>rs <span class=\"token operator\">&lt;&lt;</span> RESIZE_STAMP_SHIFT<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                s <span class=\"token operator\">=</span> <span class=\"token function\">sumCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"transfer_248\"></a>transfer()，进行扩容</h3>\n<pre><code class=\"prism language-java\">    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nextTab<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> stride<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//【第一步】</span>\n        <span class=\"token comment\">//决定当前线程在需要处理的槽位充足下，分配到的槽位数</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>stride <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>NCPU <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> NCPU <span class=\"token operator\">:</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> MIN_TRANSFER_STRIDE<span class=\"token punctuation\">)</span>\n            stride <span class=\"token operator\">=</span> MIN_TRANSFER_STRIDE<span class=\"token punctuation\">;</span> <span class=\"token comment\">// subdivide range</span>\n        <span class=\"token comment\">//新容器为空则创建容器    </span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextTab <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>            <span class=\"token comment\">// initiating</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//多出一个赋值操作，尝试处理内存溢出？不明白原理</span>\n                <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                nextTab <span class=\"token operator\">=</span> nt<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>      <span class=\"token comment\">// try to cope with OOME</span>\n                sizeCtl <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            nextTable <span class=\"token operator\">=</span> nextTab<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//转移索引数设置为当前容器容量</span>\n            transferIndex <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//将下个容器的转移搜索引数设置为新容器容量</span>\n        <span class=\"token keyword\">int</span> nextn <span class=\"token operator\">=</span> nextTab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//创建ForwardingNode容器并放入新容器</span>\n        <span class=\"token class-name\">ForwardingNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> fwd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ForwardingNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>nextTab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span> advance <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span> finishing <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// to ensure sweep before committing nextTab</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bound <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> f<span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> fh<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//【第二步，划分槽位，帮助推进】</span>\n            <span class=\"token comment\">//选择当前线程进行transfer的槽位，从最后一个槽位向前</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>advance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">int</span> nextIndex<span class=\"token punctuation\">,</span> nextBound<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//向前推进一个槽位，或者已经完成了</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>i <span class=\"token operator\">&gt;=</span> bound <span class=\"token operator\">||</span> finishing<span class=\"token punctuation\">)</span>\n                    advance <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//槽位被其它线程选择完了    </span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nextIndex <span class=\"token operator\">=</span> transferIndex<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    i <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    advance <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\">//尝试获取槽位的操作权</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">.</span>compareAndSwapInt\n                         <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> TRANSFERINDEX<span class=\"token punctuation\">,</span> nextIndex<span class=\"token punctuation\">,</span>\n                          nextBound <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>nextIndex <span class=\"token operator\">&gt;</span> stride <span class=\"token operator\">?</span>\n                                       nextIndex <span class=\"token operator\">-</span> stride <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">//槽位下限                   </span>\n                    bound <span class=\"token operator\">=</span> nextBound<span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">//当前选中进行处理的槽位</span>\n                    i <span class=\"token operator\">=</span> nextIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    advance <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">//被选择完毕，选中槽位大于当前容器容量，选中槽位+当前容器容量大于新容器容量</span>\n            <span class=\"token comment\">//【第三步，设置结束条件，变更地址】</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">&gt;=</span> n <span class=\"token operator\">||</span> i <span class=\"token operator\">+</span> n <span class=\"token operator\">&gt;=</span> nextn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">int</span> sc<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//扩容完毕</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>finishing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">//清除扩容时创建的临时表</span>\n                    nextTable <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">//将当前表指向临时表</span>\n                    table <span class=\"token operator\">=</span> nextTab<span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">//设置下次扩容的临界点为 0.75*扩容容量</span>\n                    sizeCtl <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\">//将扩容标识中的线程标识减一</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> SIZECTL<span class=\"token punctuation\">,</span> sc <span class=\"token operator\">=</span> sizeCtl<span class=\"token punctuation\">,</span> sc <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">//存在其它线程进行扩容处理，则当前线程处理完自己的槽位后直接退出</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sc <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token function\">resizeStamp</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> RESIZE_STAMP_SHIFT<span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">//不存在其它线程处理，说明自己是唯一处理线程   </span>\n                    finishing <span class=\"token operator\">=</span> advance <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">//将i重置，在看下还有没有transferIndex</span>\n                    <span class=\"token comment\">//如果已经是唯一处理线程并且满足前置条件，为何需要检查下？</span>\n                    i <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// recheck before commit</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">//【第四步，处理槽位】</span>\n            <span class=\"token comment\">//如果当前槽中没有成员，用forwarding节点占位</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">=</span> <span class=\"token function\">tabAt</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                advance <span class=\"token operator\">=</span> <span class=\"token function\">casTabAt</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> fwd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//如果当前槽中成员为forwarding节点，代表已经被处理过了    </span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fh <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> MOVED<span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">//处理下一个槽</span>\n                advance <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// already processed</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//锁住槽位</span>\n                <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">//double check</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">tabAt</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> ln<span class=\"token punctuation\">,</span> hn<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fh <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                            <span class=\"token comment\">//计算当前成员最高位</span>\n                            <span class=\"token comment\">//runBit是0 or 1</span>\n                            <span class=\"token keyword\">int</span> runBit <span class=\"token operator\">=</span> fh <span class=\"token operator\">&amp;</span> n<span class=\"token punctuation\">;</span>\n                            <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> lastRun <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> p <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span> p <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                                <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">&amp;</span> n<span class=\"token punctuation\">;</span>\n                                <span class=\"token comment\">//查找最后重复的链，获得开始位置p，和重复的高位值runBit</span>\n                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">!=</span> runBit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                                    runBit <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n                                    lastRun <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span>\n                            <span class=\"token punctuation\">}</span>\n                            <span class=\"token comment\">//如果从p开始后面高位全是0，那么就不需要移动到新槽中</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>runBit <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                                ln <span class=\"token operator\">=</span> lastRun<span class=\"token punctuation\">;</span>\n                                hn <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                            <span class=\"token comment\">//如果从p开始后面全是1，那么就需要移动到新槽中</span>\n                            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                                hn <span class=\"token operator\">=</span> lastRun<span class=\"token punctuation\">;</span>\n                                ln <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                            <span class=\"token comment\">//从链的头部一直遍历到p的位置（因为p以后高位都一样）</span>\n                            <span class=\"token comment\">//为何需要提前找一部分重复？效率更高？这么处理是否有理论依据？</span>\n                            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> p <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span> p <span class=\"token operator\">!=</span> lastRun<span class=\"token punctuation\">;</span> p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                                <span class=\"token keyword\">int</span> ph <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">;</span> <span class=\"token class-name\">K</span> pk <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span> <span class=\"token class-name\">V</span> pv <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n                                <span class=\"token comment\">//高位为0放到旧槽位中</span>\n                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ph <span class=\"token operator\">&amp;</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                                    ln <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>ph<span class=\"token punctuation\">,</span> pk<span class=\"token punctuation\">,</span> pv<span class=\"token punctuation\">,</span> ln<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token comment\">//高位为1放到新槽位中</span>\n                                <span class=\"token keyword\">else</span>\n                                    hn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>ph<span class=\"token punctuation\">,</span> pk<span class=\"token punctuation\">,</span> pv<span class=\"token punctuation\">,</span> hn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                            <span class=\"token comment\">//将ln放到新容器的旧槽位中</span>\n                            <span class=\"token function\">setTabAt</span><span class=\"token punctuation\">(</span>nextTab<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> ln<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token comment\">//将hn放到新容器的新槽位中</span>\n                            <span class=\"token function\">setTabAt</span><span class=\"token punctuation\">(</span>nextTab<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> n<span class=\"token punctuation\">,</span> hn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token comment\">//将老容器中的该节点设置为forwarding节点</span>\n                            <span class=\"token function\">setTabAt</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> fwd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token comment\">//处理下一个槽位</span>\n                            advance <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token comment\">//TreeBin的hash固定为-2，红黑树的调整</span>\n                        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">TreeBin</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                            <span class=\"token class-name\">TreeBin</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeBin</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">)</span>f<span class=\"token punctuation\">;</span>\n                            <span class=\"token class-name\">TreeNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> lo <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> loTail <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token class-name\">TreeNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> hi <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> hiTail <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">int</span> lc <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> hc <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> e <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span> e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> e <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                                <span class=\"token keyword\">int</span> h <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">;</span>\n                                <span class=\"token class-name\">TreeNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span>\n                                    <span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>h <span class=\"token operator\">&amp;</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> loTail<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                                        lo <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n                                    <span class=\"token keyword\">else</span>\n                                        loTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n                                    loTail <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n                                    <span class=\"token operator\">++</span>lc<span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span>\n                                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> hiTail<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                                        hi <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n                                    <span class=\"token keyword\">else</span>\n                                        hiTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n                                    hiTail <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n                                    <span class=\"token operator\">++</span>hc<span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span>\n                            <span class=\"token punctuation\">}</span>\n                            <span class=\"token comment\">//槽位里成员少于等于6，退化为链表</span>\n                            ln <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>lc <span class=\"token operator\">&lt;=</span> UNTREEIFY_THRESHOLD<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">untreeify</span><span class=\"token punctuation\">(</span>lo<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n                                <span class=\"token punctuation\">(</span>hc <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeBin</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>lo<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> t<span class=\"token punctuation\">;</span>\n                            hn <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hc <span class=\"token operator\">&lt;=</span> UNTREEIFY_THRESHOLD<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">untreeify</span><span class=\"token punctuation\">(</span>hi<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n                                <span class=\"token punctuation\">(</span>lc <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeBin</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>hi<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> t<span class=\"token punctuation\">;</span>\n                            <span class=\"token function\">setTabAt</span><span class=\"token punctuation\">(</span>nextTab<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> ln<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token function\">setTabAt</span><span class=\"token punctuation\">(</span>nextTab<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> n<span class=\"token punctuation\">,</span> hn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token function\">setTabAt</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> fwd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            advance <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>将容器中的槽位分成多份，由后往前分割槽位，线程处理自己获取到的分段槽位（分段槽位内部连续，分段槽位间不出现交集，避免竞争提高性能），根据槽位中成员扩容的最高位是0是1选择新旧槽位进行分配到新容器中，0保持旧槽位，1移动到新槽位，由处理最后一段的线程将旧容器替换为新容器</p>\n<ol><li>处理好新容器，确定每段的槽位数是多少<br/> stride【分段槽位的大小】<br/> nextTab【临时扩容容器】<br/> tab【临时当前容器】</li><li>尝试获取到分段槽位，槽为从后向前进行分配<br/> bound【槽位下限】<br/> nextIndex【槽位上限】<br/> i【当前处理槽位】</li><li>处理槽位，如果槽位为空放入forwarding节点，不为空则根据成员最高位判断是否分配到新槽位or旧槽位，如果是红黑树判断分配完后槽位中的成员少于等于6则退化位链表<br/> ln【旧槽位】<br/> hn【新槽位】</li><li>槽位分段处理完毕，如果是最后一个线程，那么需要将新容器地址覆盖旧容器，旧容器直接丢弃，状态重置为正标识下次触发扩容的阈值<br/> table【当前容器】<br/> nextTable【扩容容器】<br/> sizeCtl【状态值】</li></ol>\n<h2><a id=\"compute_447\"></a>compute()</h2>\n<pre><code class=\"prism language-java\">    <span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span>\n                     <span class=\"token class-name\">BiFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> remappingFunction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> remappingFunction <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//获取到对应的槽位</span>\n        <span class=\"token keyword\">int</span> h <span class=\"token operator\">=</span> <span class=\"token function\">spread</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">V</span> val <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> delta <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> binCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> f<span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> fh<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//初始化容器</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tab <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                tab <span class=\"token operator\">=</span> <span class=\"token function\">initTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//槽位无成员</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">=</span> <span class=\"token function\">tabAt</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//定义新节点</span>\n                <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReservationNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//提前加锁，避免后续cas成功后其它线程获取到</span>\n                <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">//尝试将槽位替换为ReservationNode节点，解决槽位为null无法进行锁定问题</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">casTabAt</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        binCount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                            <span class=\"token comment\">//进行计算</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>val <span class=\"token operator\">=</span> remappingFunction<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                                delta <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                                node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n                            <span class=\"token comment\">//设置node节点替换ReservationNode节点</span>\n                            <span class=\"token function\">setTabAt</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>binCount <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">//槽位节点为forwarding</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fh <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> MOVED<span class=\"token punctuation\">)</span>\n                tab <span class=\"token operator\">=</span> <span class=\"token function\">helpTransfer</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//存在成员    </span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">tabAt</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token comment\">//成员为链表</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fh <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                            binCount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> e <span class=\"token operator\">=</span> f<span class=\"token punctuation\">,</span> pred <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>binCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                                <span class=\"token class-name\">K</span> ek<span class=\"token punctuation\">;</span>\n                                <span class=\"token comment\">//找到成员</span>\n                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> h <span class=\"token operator\">&amp;&amp;</span>\n                                    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ek <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span>\n                                     <span class=\"token punctuation\">(</span>ek <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>ek<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                                    <span class=\"token comment\">//进行计算</span>\n                                    val <span class=\"token operator\">=</span> remappingFunction<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                                        e<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n                                    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                                        delta <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                                        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> en <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n                                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pred <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                                            pred<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> en<span class=\"token punctuation\">;</span>\n                                        <span class=\"token keyword\">else</span>\n                                            <span class=\"token function\">setTabAt</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> en<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token punctuation\">}</span>\n                                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span>\n                                pred <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                                    val <span class=\"token operator\">=</span> remappingFunction<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                                        delta <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                                        pred<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span>\n                                            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token punctuation\">}</span>\n                                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token comment\">//成员为红黑树</span>\n                        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">TreeBin</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                            binCount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token class-name\">TreeBin</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeBin</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">)</span>f<span class=\"token punctuation\">;</span>\n                            <span class=\"token class-name\">TreeNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> r<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                                p <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">findTreeNode</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">else</span>\n                                p <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token class-name\">V</span> pv <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> p<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n                            val <span class=\"token operator\">=</span> remappingFunction<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> pv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                                    p<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n                                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                                    delta <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                                    t<span class=\"token punctuation\">.</span><span class=\"token function\">putTreeVal</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span>\n                            <span class=\"token punctuation\">}</span>\n                            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                                delta <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">removeTreeNode</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                                    <span class=\"token function\">setTabAt</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token function\">untreeify</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\">//根据链表成员数量，判断是否需要转为红黑树</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>binCount <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>binCount <span class=\"token operator\">&gt;=</span> TREEIFY_THRESHOLD<span class=\"token punctuation\">)</span>\n                        <span class=\"token function\">treeifyBin</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>delta <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">addCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>delta<span class=\"token punctuation\">,</span> binCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-04-19 15:04:53", "summary": "文章目录什么是结构如何高效的执行并发操作如何进行锁的选择节点类型与作用扩容的方式源码分析方法方法，获取槽位。方法，初始化容器，计算成员数量，进行扩容什么是是一个支持高并发更新与查询的哈希表基于。在保证"}