{"blogid": "124790461", "writerAge": "码龄4年", "writerBlogNum": "137", "writerCollect": "1777", "writerComment": "296", "writerFan": "173", "writerGrade": "5级", "writerIntegral": "3091", "writerName": "地球被支点撬走啦", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124790461.jpg", "writerRankTotal": "6419", "writerRankWeekly": "24580", "writerThumb": "617", "writerVisitNum": "322568", "blog_read_count": "5443", "blog_time": "已于 2022-05-16 15:43:56 修改", "blog_title": "pandas 处理excel表格数据的常用方法（python）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>最近助教改作业导出的成绩表格跟老师给的名单顺序不一致，脑壳一亮就用pandas写了个脚本自动吧原始导出的成绩誊写到老师给的名单中了哈哈哈，这里就记录下用到的pandas处理excel的常用方式。（注意：只适用于.xlsx类型的文件）</p>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"1%E3%80%81%E8%AF%BB%E5%8F%96xlsx%E8%A1%A8%E6%A0%BC%EF%BC%9Apd.read_excel()-toc\" style=\"margin-left:40px;\"><a href=\"#1%E3%80%81%E8%AF%BB%E5%8F%96xlsx%E8%A1%A8%E6%A0%BC%EF%BC%9Apd.read_excel%28%29\">1、读取xlsx表格：pd.read_excel()</a></p>\n<p id=\"2%E3%80%81%E8%8E%B7%E5%8F%96%E8%A1%A8%E6%A0%BC%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A4%A7%E5%B0%8F%EF%BC%9Ashape-toc\" style=\"margin-left:40px;\"><a href=\"#2%E3%80%81%E8%8E%B7%E5%8F%96%E8%A1%A8%E6%A0%BC%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A4%A7%E5%B0%8F%EF%BC%9Ashape\">2、获取表格的数据大小：shape</a></p>\n<p id=\"3%E3%80%81%E7%B4%A2%E5%BC%95%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%9A%5B%20%5D%20%2F%20loc%5B%5D%20%2F%20iloc%5B%5D-toc\" style=\"margin-left:40px;\"><a href=\"#3%E3%80%81%E7%B4%A2%E5%BC%95%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%9A%5B%20%5D%20%2F%20loc%5B%5D%20%2F%20iloc%5B%5D\">3、索引数据的方法：[ ] / loc[] / iloc[]</a></p>\n<p id=\"4%E3%80%81%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E4%B8%BA%E7%A9%BA%EF%BC%9Anp.isnan()%20%2F%20pd.isnull()-toc\" style=\"margin-left:40px;\"><a href=\"#4%E3%80%81%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E4%B8%BA%E7%A9%BA%EF%BC%9Anp.isnan%28%29%20%2F%20pd.isnull%28%29\">4、判断数据为空：np.isnan() / pd.isnull()</a></p>\n<p id=\"5%E3%80%81%E6%9F%A5%E6%89%BE%E7%AC%A6%E5%90%88%E6%9D%A1%E4%BB%B6%E7%9A%84%E6%95%B0%E6%8D%AE-toc\" style=\"margin-left:40px;\"><a href=\"#5%E3%80%81%E6%9F%A5%E6%89%BE%E7%AC%A6%E5%90%88%E6%9D%A1%E4%BB%B6%E7%9A%84%E6%95%B0%E6%8D%AE\">5、查找符合条件的数据</a></p>\n<p id=\"6%E3%80%81%E4%BF%AE%E6%94%B9%E5%85%83%E7%B4%A0%E5%80%BC%EF%BC%9Areplace()-toc\" style=\"margin-left:40px;\"><a href=\"#6%E3%80%81%E4%BF%AE%E6%94%B9%E5%85%83%E7%B4%A0%E5%80%BC%EF%BC%9Areplace%28%29\">6、修改元素值：replace()</a></p>\n<p id=\"7%E3%80%81%E5%A2%9E%E5%8A%A0%E6%95%B0%E6%8D%AE%EF%BC%9A%5B%20%5D-toc\" style=\"margin-left:40px;\"><a href=\"#7%E3%80%81%E5%A2%9E%E5%8A%A0%E6%95%B0%E6%8D%AE%EF%BC%9A%5B%20%5D\">7、增加数据：[ ]</a></p>\n<p id=\"8%E3%80%81%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%EF%BC%9Adel()%20%2F%20drop()-toc\" style=\"margin-left:40px;\"><a href=\"#8%E3%80%81%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%EF%BC%9Adel%28%29%20%2F%20drop%28%29\">8、删除数据：del() / drop()</a></p>\n<p id=\"9%E3%80%81%E4%BF%9D%E5%AD%98%E5%88%B0excel%E6%96%87%E4%BB%B6%EF%BC%9Ato_excel()-toc\" style=\"margin-left:40px;\"><a href=\"#9%E3%80%81%E4%BF%9D%E5%AD%98%E5%88%B0excel%E6%96%87%E4%BB%B6%EF%BC%9Ato_excel%28%29\">9、保存到excel文件：to_excel()</a></p>\n<hr id=\"hr-toc\"/>\n<h2>1、读取xlsx表格：pd.read_excel()</h2>\n<p>原始内容如下：</p>\n<p class=\"img-center\"><img alt=\"\" height=\"171\" src=\"..\\..\\static\\image\\ddd68e0b7d654e94a3bf499abbab25cd.png\" width=\"407\"/></p>\n<p></p>\n<p><strong>a）读取第n个Sheet（子表，在左下方可以查看或增删子表）的数据</strong></p>\n<pre><code class=\"language-python\">import pandas as pd\n# 每次都需要修改的路径\npath = \"test.xlsx\"\n# sheet_name默认为0，即读取第一个sheet的数据\nsheet = pd.read_excel(path, sheet_name=0)\nprint(sheet)\n\"\"\"\n  Unnamed: 0  name1  name2  name3\n0       row1      1    2.0      3\n1       row2      4    NaN      6\n2       row3      7    8.0      9\n\"\"\"</code></pre>\n<p>可以注意到，原始表格左上角没有填入内容，读取的结果是“<strong>Unnamed: 0</strong>” ，这是由于read_excel函数会<strong>默认把表格的第一行为列索引名</strong>。另外，对于行索引名来说，默认从第二行开始编号（因为默认第一行是列索引名，所以默认第一行不是数据），如果不特意指定，则自动从0开始编号，如下。</p>\n<pre><code class=\"language-python\">sheet = pd.read_excel(path)\n# 查看列索引名，返回列表形式\nprint(sheet.columns.values)\n# 查看行索引名，默认从第二行开始编号，如果不特意指定，则自动从0开始编号，返回列表形式\nprint(sheet.index.values)\n\"\"\"\n['Unnamed: 0' 'name1' 'name2' 'name3']\n[0 1 2]\n\"\"\"</code></pre>\n<p><strong>b）列索引名</strong>还可以自定义，如下：</p>\n<pre><code class=\"language-python\">sheet = pd.read_excel(path, names=['col1', 'col2', 'col3', 'col4'])\nprint(sheet)\n# 查看列索引名，返回列表形式\nprint(sheet.columns.values)\n\"\"\"\n   col1  col2  col3  col4\n0  row1     1   2.0     3\n1  row2     4   NaN     6\n2  row3     7   8.0     9\n['col1' 'col2' 'col3' 'col4']\n\"\"\"</code></pre>\n<p><strong>c）也可以指定第n列为行索引名</strong>，如下：</p>\n<pre><code class=\"language-python\"># 指定第一列为行索引\nsheet = pd.read_excel(path, index_col=0)\nprint(sheet)\n\"\"\"\n      name1  name2  name3\nrow1      1    2.0      3\nrow2      4    NaN      6\nrow3      7    8.0      9\n\"\"\"</code></pre>\n<p><strong>d）读取时跳过第n行的数据</strong></p>\n<pre><code class=\"language-python\"># 跳过第2行的数据（第一行索引为0）\nsheet = pd.read_excel(path, skiprows=[1])\nprint(sheet)\n\"\"\"\n  Unnamed: 0  name1  name2  name3\n0       row2      4    NaN      6\n1       row3      7    8.0      9\n\"\"\"</code></pre>\n<h2 id=\"2%E3%80%81%E8%8E%B7%E5%8F%96%E8%A1%A8%E6%A0%BC%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A4%A7%E5%B0%8F%EF%BC%9Ashape\">2、获取表格的数据大小：shape</h2>\n<pre><code class=\"language-python\">path = \"test.xlsx\"\n# 指定第一列为行索引\nsheet = pd.read_excel(path, index_col=0)\nprint(sheet)\nprint('==========================')\nprint('shape of sheet:', sheet.shape)\n\"\"\"\n      name1  name2  name3\nrow1      1    2.0      3\nrow2      4    NaN      6\nrow3      7    8.0      9\n==========================\nshape of sheet: (3, 3)\n\"\"\"</code></pre>\n<h2 id=\"3%E3%80%81%E7%B4%A2%E5%BC%95%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%9A%5B%20%5D%20%2F%20loc%5B%5D%20%2F%20iloc%5B%5D\">3、索引数据的方法：[ ] / loc[] / iloc[]</h2>\n<p><span style=\"color:#fe2c24;\"><strong>1、直接加方括号索引</strong></span></p>\n<p>可以使用方括号加列名的方式 <strong>[col_name] </strong>来提取某列的数据，然后再用方括号加索引数字 <strong>[index] </strong>来索引这列的具体位置的值。这里索引名为name1的列，然后打印位于该列第1行（索引是1）位置的数据：4，如下：</p>\n<pre><code class=\"language-python\">sheet = pd.read_excel(path)\n# 读取列名为 name1 的列数据\ncol = sheet['name1']\nprint(col)\n# 打印该列第二个数据\nprint(col[1]) # 4\n\"\"\"\n0    1\n1    4\n2    7\nName: name1, dtype: int64\n\n4\n\"\"\"</code></pre>\n<p><span style=\"color:#fe2c24;\"><strong>2、iloc方法，按整数编号索引</strong></span></p>\n<p>使用 <strong>sheet.iloc[ ]</strong> 索引，方括号内为行列的整数位置编号（除去作为行索引的那一列和作为列索引的哪一行后，从 0 开始编号）。<br/><strong>a）sheet.iloc[1, 2]</strong> ：提取<strong>第2行第3列</strong>数据。第一个是行索引，第二个是列索引</p>\n<p><strong>b）sheet.iloc[0: 2]</strong> ：提取<strong>前两行</strong>数据</p>\n<p><strong>c）sheet.iloc[0:2, 0:2]</strong> ：通过分片的方式提取 <strong>前两行</strong> 的 <strong>前两列</strong> 数据</p>\n<pre><code class=\"language-python\"># 指定第一列数据为行索引\nsheet = pd.read_excel(path, index_col=0)\n# 读取第2行（row2）的第3列（6）数据\n# 第一个是行索引，第二个是列索引\ndata = sheet.iloc[1, 2]\nprint(data)  # 6\nprint('================================')\n# 通过分片的方式提取 前两行 数据\ndata_slice = sheet.iloc[0:2]\nprint(data_slice)\nprint('================================')\n# 通过分片的方式提取 前两行 的 前两列 数据\ndata_slice = sheet.iloc[0:2, 0:2]\nprint(data_slice)\n\"\"\"\n6\n================================\n      name1  name2  name3\nrow1      1    2.0      3\nrow2      4    NaN      6\n================================\n      name1  name2\nrow1      1    2.0\nrow2      4    NaN\n\"\"\"</code></pre>\n<p><strong><span style=\"color:#fe2c24;\">3、loc方法，按行列名称索引</span></strong></p>\n<p>使用 <strong>sheet.loc[ ]</strong> 索引，方括号内为<strong>行列的名称字符串</strong>。具体使用方式同 <strong>iloc </strong>，只是把 iloc 的整数索引替换成了行列的名称索引。这种索引方式用起来更直观。</p>\n<p><strong>注意</strong>：<strong>iloc[1: 2]</strong> 是不包含2的，但是 <strong>loc['row1': 'row2']</strong> 是包含 'row2' 的。</p>\n<pre><code class=\"language-python\"># 指定第一列数据为行索引\nsheet = pd.read_excel(path, index_col=0)\n# 读取第2行（row2）的第3列（6）数据\n# 第一个是行索引，第二个是列索引\ndata = sheet.loc['row2', 'name3']\nprint(data)  # 1\nprint('================================')\n# 通过分片的方式提取 前两行 数据\ndata_slice = sheet.loc['row1': 'row2']\nprint(data_slice)\nprint('================================')\n# 通过分片的方式提取 前两行 的 前两列 数据\ndata_slice1 = sheet.loc['row1': 'row2', 'name1': 'name2']\nprint(data_slice1)\n\"\"\"\n6\n================================\n      name1  name2  name3\nrow1      1    2.0      3\nrow2      4    NaN      6\n================================\n      name1  name2\nrow1      1    2.0\nrow2      4    NaN\n\"\"\"</code></pre>\n<h2 id=\"4%E3%80%81%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E4%B8%BA%E7%A9%BA%EF%BC%9Anp.isnan()%20%2F%20pd.isnull()\">4、判断数据为空：np.<strong>isnan()</strong> / pd.<strong>isnull()</strong></h2>\n<p>1、使用 <strong>numpy 库的 isnan()</strong> 或<strong> pandas 库的 isnull() </strong>方法判断是否等于 <strong>nan </strong>。</p>\n<pre><code class=\"language-python\">sheet = pd.read_excel(path)\n# 读取列名为 name1 的列数据\ncol = sheet['name2']\n\nprint(np.isnan(col[1]))  # True\nprint(pd.isnull(col[1]))  # True\n\"\"\"\nTrue\nTrue\n\"\"\"</code></pre>\n<p>2、使用 str() 转为字符串，判断是否等于 <strong>'nan' </strong>。</p>\n<pre><code class=\"language-python\">sheet = pd.read_excel(path)\n# 读取列名为 name1 的列数据\ncol = sheet['name2']\nprint(col)\n# 打印该列第二个数据\nif str(col[1]) == 'nan':\n    print('col[1] is nan')\n\"\"\"\n0    2.0\n1    NaN\n2    8.0\nName: name2, dtype: float64\ncol[1] is nan\n\"\"\"</code></pre>\n<h2 id=\"5%E3%80%81%E6%9F%A5%E6%89%BE%E7%AC%A6%E5%90%88%E6%9D%A1%E4%BB%B6%E7%9A%84%E6%95%B0%E6%8D%AE\">5、查找符合条件的数据</h2>\n<p>下面的代码意会一下吧</p>\n<pre><code class=\"language-python\"># 提取name1 == 1 的行\nmask = (sheet['name1'] == 1)\nx = sheet.loc[mask]\nprint(x)\n\"\"\"\n      name1  name2  name3\nrow1      1    2.0      3\n\"\"\"</code></pre>\n<h2 id=\"6%E3%80%81%E4%BF%AE%E6%94%B9%E5%85%83%E7%B4%A0%E5%80%BC%EF%BC%9Areplace()\">6、修改元素值：<strong>replace()</strong></h2>\n<p><strong>sheet['name2'].replace(2, 100, inplace=True) </strong>：把 name2 列的元素 2 改为元素 100，原位操作。</p>\n<pre><code class=\"language-python\">sheet['name2'].replace(2, 100, inplace=True)\nprint(sheet)\n\"\"\"\n      name1  name2  name3\nrow1      1  100.0      3\nrow2      4    NaN      6\nrow3      7    8.0      9\n\"\"\"</code></pre>\n<p><strong>sheet['name2'].replace(np.nan, 100, inplace=True) </strong>：把 name2 列的空元素（nan）改为元素 100，原位操作。</p>\n<pre><code class=\"language-python\">import numpy as np \nsheet['name2'].replace(np.nan, 100, inplace=True)\nprint(sheet)\nprint(type(sheet.loc['row2', 'name2']))\n\"\"\"\n      name1  name2  name3\nrow1      1    2.0      3\nrow2      4  100.0      6\nrow3      7    8.0      9\n\"\"\"</code></pre>\n<h2 id=\"7%E3%80%81%E5%A2%9E%E5%8A%A0%E6%95%B0%E6%8D%AE%EF%BC%9A%5B%20%5D\">7、增加数据：[ ]</h2>\n<p><strong>增加列，直接使用中括号 [ 要添加的名字 ] 添加。</strong></p>\n<p><strong>sheet['name_add'] = [55, 66, 77]</strong> ：添加名为 name_add 的列，值为[55, 66, 77]</p>\n<pre><code class=\"language-python\">path = \"test.xlsx\"\n# 指定第一列为行索引\nsheet = pd.read_excel(path, index_col=0)\nprint(sheet)\nprint('====================================')\n# 添加名为 name_add 的列，值为[55, 66, 77]\nsheet['name_add'] = [55, 66, 77]\nprint(sheet)\n\"\"\"\n      name1  name2  name3\nrow1      1    2.0      3\nrow2      4    NaN      6\nrow3      7    8.0      9\n====================================\n      name1  name2  name3  name_add\nrow1      1    2.0      3        55\nrow2      4    NaN      6        66\nrow3      7    8.0      9        77\n\"\"\"</code></pre>\n<h2 id=\"8%E3%80%81%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%EF%BC%9Adel()%20%2F%20drop()\">8、删除数据：del() / drop()</h2>\n<p><strong>a）del(sheet['name3'])</strong> ：使用 del 方法删除</p>\n<pre><code class=\"language-python\">sheet = pd.read_excel(path, index_col=0)\n# 使用 del 方法删除 'name3' 的列\ndel(sheet['name3'])\nprint(sheet)\n\"\"\"\n      name1  name2\nrow1      1    2.0\nrow2      4    NaN\nrow3      7    8.0\n\"\"\"</code></pre>\n<p><strong>b）sheet.drop('row1', axis=0)</strong></p>\n<p>使用 drop 方法删除 row1 行，删除列的话对应的 axis=1。</p>\n<p>当 inplace 参数为 True 时，不会返回参数，直接在原数据上删除</p>\n<p>当 inplace 参数为 False （默认）时不会修改原数据，而是返回修改后的数据</p>\n<pre><code class=\"language-python\">sheet.drop('row1', axis=0, inplace=True)\nprint(sheet)\n\"\"\"\n      name1  name2  name3\nrow2      4    NaN      6\nrow3      7    8.0      9\n\"\"\"</code></pre>\n<p><strong>c）sheet.drop(labels=['name1', 'name2'], axis=1)</strong></p>\n<p>使用 label=[ ] 参数可以删除多行或多列</p>\n<pre><code class=\"language-python\"># 删除多列，默认 inplace 参数位 False，即会返回结果\nprint(sheet.drop(labels=['name1', 'name2'], axis=1))\n\"\"\"\n      name3\nrow1      3\nrow2      6\nrow3      9\n\"\"\"</code></pre>\n<h2 id=\"9%E3%80%81%E4%BF%9D%E5%AD%98%E5%88%B0excel%E6%96%87%E4%BB%B6%EF%BC%9Ato_excel()\">9、保存到excel文件：to_excel()</h2>\n<p><strong>1、把 pandas 格式的数据另存为 .xlsx 文件</strong></p>\n<pre><code class=\"language-python\">names = ['a', 'b', 'c']\nscores = [99, 100, 99]\nresult_excel = pd.DataFrame()\nresult_excel[\"姓名\"] = names\nresult_excel[\"评分\"] = scores\n# 写入excel\nresult_excel.to_excel('test3.xlsx')</code></pre>\n<p class=\"img-center\"><img alt=\"\" height=\"133\" src=\"..\\..\\static\\image\\fad206db466e4c289f3c93c2ded18c41.png\" width=\"271\"/></p>\n<p> <strong>2、把改好的 excel 文件另存为 .xlsx 文件。</strong></p>\n<p>比如修改原表格中的 nan 为 100 后，保存文件：</p>\n<pre><code class=\"language-python\">import numpy as np \n# 指定第一列为行索引\nsheet = pd.read_excel(path, index_col=0)\nsheet['name2'].replace(np.nan, 100, inplace=True)\nsheet.to_excel('test2.xlsx')</code></pre>\n<p>打开 test2.xlsx 结果如下：</p>\n<p class=\"img-center\"><img alt=\"\" height=\"134\" src=\"..\\..\\static\\image\\9e01243e83514d88bd46de9865690988.png\" width=\"329\"/></p>\n<p></p>\n</div>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-05-16 15:43:56", "summary": "最近助教改作业导出的成绩表格跟老师给的名单顺序不一致，脑壳一亮就用写了个脚本自动吧原始导出的成绩誊写到老师给的名单中了哈哈哈，这里就记录下用到的处理的常用方式。注意：只适用于类型的文件目录、读取表格："}