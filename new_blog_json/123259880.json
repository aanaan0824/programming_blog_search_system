{"blogid": "123259880", "writerAge": "码龄7年", "writerBlogNum": "71", "writerCollect": "172", "writerComment": "41", "writerFan": "16", "writerGrade": "4级", "writerIntegral": "812", "writerName": "休息一下接着来", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123259880.jpg", "writerRankTotal": "28843", "writerRankWeekly": "282551", "writerThumb": "60", "writerVisitNum": "48549", "blog_read_count": "4311", "blog_time": "已于 2022-03-03 17:43:37 修改", "blog_title": "大小端及转换(C++)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"1__0\"></a>1. 基本概念</h1>\n<p><strong>大小端表示数据在存储器中存放的顺序。</strong></p>\n<ul><li> <p><strong>大端模式： 数据的高字节保存在内存的低地址中，而数据的低字节保存在内存的高地址中</strong>，这样的存储模式有点儿类似于把数据当作字符串顺序处理：地址由小向大增加，而数据从高位往低位放；</p> </li><li> <p><strong>小端模式：数据的高字节保存在内存的高地址中，而数据的低字节保存在内存的低地址中</strong>，这种存储模式将地址的高低和数据位权有效地结合起来，高地址部分权值高，低地址部分权值低，和我们的逻辑方法一致。</p> </li></ul>\n<p>假如在一段内存中存储如下数据</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">uint8_t</span> A <span class=\"token operator\">=</span> <span class=\"token number\">0xA1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">uint8_t</span> B <span class=\"token operator\">=</span> <span class=\"token number\">0xB1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">uint16_t</span> C <span class=\"token operator\">=</span> <span class=\"token number\">0xC1C2</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>在大小端的存储如下图所示：<br/> <img alt=\"请添加图片描述\" src=\"..\\..\\static\\image\\cb15429bf43e4588b84bdd604f709cd4.png\"/></p>\n<p><strong>由上图可以看出：</strong></p>\n<ul><li> <p>对于单字节(8位)的数据，在内存中存储没有任何区别，如A，B。</p> </li><li> <p>对于多字节的数据，在内存中的存储数据是不同。如上图中的C。</p> </li></ul>\n<p><strong>小端： 低地址，存放低位</strong></p>\n<p><strong>大端： 低地址，存放高位</strong></p>\n<h1><a id=\"2__31\"></a>2. 大小端的原因及使用</h1>\n<p><strong>小端模式： x86和一般的OS（如windows，FreeBSD,Linux）使用的是小端模式</strong></p>\n<p><strong>大端模式：Mac OS是大端模式</strong></p>\n<p><strong>网络传输： 在网络上传输数据时，由于数据传输的两端对应不同的硬件平台，采用的存储字节顺序可能不一致。所以在TCP/IP协议规定在网络上必须采用网络字节顺序，也就是大端模式。</strong></p>\n<p>在计算机系统中，我们是以字节为单位的，每个地址单元都对应着一个字节，一个字节为8bit。但是在C语言中除了8bit的char之外，还有16bit的short型，32bit的long型（要看具体的编译器）。另外，对于位数大于8位的处理器，例如16位或者32位的处理器，由于寄存器宽度大于一个字节，那么必然存在着一个如果将多个字节安排的问题。<strong>不通过的CPU对字节的安排存在差异，因此就导致了大端存储模式和小端存储模式。</strong></p>\n<h1><a id=\"3_C_43\"></a>3. C++中的大小端转换</h1>\n<p>一般只在本机不需要考虑存储的问题。进行网络传输时，不同电脑存储方式不同，需要考虑大小端转换。常用的函数如下</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 在linux上</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h&gt;</span></span>\n\n<span class=\"token keyword\">uint32_t</span> <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span> hostlong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// host to net long int 32位</span>\n\n<span class=\"token keyword\">uint16_t</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint16_t</span> hostshort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// host to net short int 16位</span>\n\n<span class=\"token keyword\">uint32_t</span> <span class=\"token function\">ntohl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span> netlong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// net to host long int</span>\n\n<span class=\"token keyword\">uint16_t</span> <span class=\"token function\">ntohs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint16_t</span> netshort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// net to host short int 16位</span>\n</code></pre>\n<p>参考： https://www.cnblogs.com/Alandre/p/4878841.html</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-03 17:43:37", "summary": "基本概念大小端表示数据在存储器中存放的顺序。大端模式：数据的高字节保存在内存的低地址中，而数据的低字节保存在内存的高地址中，这样的存储模式有点儿类似于把数据当作字符串顺序处理：地址由小向大增加，而数据"}