{"blogid": "126428819", "writerAge": "码龄1年", "writerBlogNum": "27", "writerCollect": "167", "writerComment": "190", "writerFan": "273", "writerGrade": "4级", "writerIntegral": "818", "writerName": "守夜人st", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126428819.jpg", "writerRankTotal": "22762", "writerRankWeekly": "323", "writerThumb": "204", "writerVisitNum": "3908", "blog_read_count": "575", "blog_time": "已于 2022-08-31 19:39:37 修改", "blog_title": "Java基础——final关键字", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>🏡个人主页 ：@ <a href=\"https://blog.csdn.net/shouyeren_st?type=lately\">守夜人st</a><br/> 🚀系列专栏：<a href=\"https://blog.csdn.net/shouyeren_st/category_11939082.html?spm=1001.2014.3001.5482\">Java</a><br/> …持续更新中敬请关注…<br/> 🙉博主简介：软件工程专业，在校学生，写博客是为了总结回顾一些所学知识点</p>\n</blockquote>\n<blockquote>\n<p>✈️推荐一款模拟面试，刷题，从基础走向大场面试👉 <a href=\"https://www.nowcoder.com/link/pc_csdncpt_syr_sf\">开启你的刷题之路吧</a></p>\n</blockquote>\n<h1><a id=\"Javafinal_10\"></a>Java基础——final关键字</h1>\n<blockquote>\n<p>在前面的学习过程中，为了声明常量使用过final关键字，在Java中final关键字的作用还有很多，final关键字能修饰变量、方法和类。</p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#Javafinal_10\">Java基础——final关键字</a></li><li><ul><li><a href=\"#final_15\">final修饰变量</a></li><li><a href=\"#final_72\">final修饰类</a></li><li><a href=\"#final_91\">final修饰方法</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"final_15\"></a>final修饰变量</h2>\n<p>final修饰的变量即成为常量，只能赋值一次，但是final所修饰局部变量和成员变量有所不同。</p>\n<ol><li> <p>final修饰的局部变量必须使用之前被赋值一次才能使用。</p> </li><li> <p>final修饰的成员变量在声明时没有赋值的叫“空白final变量”。空白final变量必须在构造方法或</p> </li></ol>\n<p>静态代码块中初始化。</p>\n<p>final修饰变量示例代码如下：</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//FinalDemo.java文件</span>\n<span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>shouyerenst</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FinalDemo</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    \t<span class=\"token comment\">// 没有在声明的同时赋值</span>\n\t\t<span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> e<span class=\"token punctuation\">;</span> ① \n        <span class=\"token comment\">// 只能赋值一次 </span>\n        e <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>② \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 声明的同时赋值</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> f <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span> ③\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//实例常量</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接赋值④ </span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 空白final变量 ⑤ </span>\n    \n    <span class=\"token comment\">//静态常量</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接赋值 ⑥</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> d<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 空白final变量 ⑦ </span>\n    \n    <span class=\"token comment\">// 静态代码块</span>\n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{<!-- --></span> \n    \t<span class=\"token comment\">// 初始化静态变量</span>\n        d <span class=\"token operator\">=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span> ⑧\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 构造方法</span>\n    <span class=\"token class-name\">FinalDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 初始化实例变量</span>\n        b <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> ⑨ \n            <span class=\"token comment\">// 第二次赋值，会发生编译错误</span>\n            <span class=\"token comment\">// b = 4; ⑩ </span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上述代码第①行和第③行是声明局部常量，其中第①行只是声明没有赋值，但必须在使用之前赋值（见代码第②行），其实局部常量最好在声明的同时初始化。</p>\n<p>代码第④、⑤、⑥和⑦行都声明成员常量。代码第④和⑤行是实例常量，如果是空白final变量（见代码第⑤行），则需要在构造方法中初始化（见代码第⑨行）。代码第⑥和⑦行是静态常量，如果是空白final变量（见代码第⑦行），则需要在静态代码块中初始化（见代码第⑧行）。</p>\n<p>另外，无论是那种常量只能赋值一次，见代码第⑩行为b常量赋值，因为之前b已经赋值过一次，因此</p>\n<p>这里会发生编译错误。</p>\n<h2><a id=\"final_72\"></a>final修饰类</h2>\n<blockquote>\n<p>final修饰的类不能被继承。有时出于设计安全的目的，不想让自己编写的类被别人继承，这时可以使用final关键字修饰父类。</p>\n</blockquote>\n<p>示例代码如下：</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//SuperClass.java文件</span>\n<span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>shouyerenst</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SuperClass</span> <span class=\"token punctuation\">{<!-- --></span>\n    \n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SubClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SuperClass</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//编译错误</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>在声明SubClass类时会发生编译错误。</strong></p>\n<h2><a id=\"final_91\"></a>final修饰方法</h2>\n<blockquote>\n<p>final修饰的方法不能被子类覆盖。有时也是出于设计安全的目的，父类中的方法不想被别人覆盖，这是可以使用final关键字修饰父类中方法。</p>\n</blockquote>\n<p>示例代码如下：</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//SuperClass.java文件</span>\n<span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>shouyerenst</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SuperClass</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"in SuperClass.doSomething()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SubClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SuperClass</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//编译错误</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"in SubClass.doSomething()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>子类中的void doSomething()方法试图覆盖父类中void doSomething()方法，父类中的voiddoSomething()方法是final的，因此会发生编译错误。</p>\n<blockquote>\n<p>算法对程序员来说及其重要，语言和开发平台不断变化，但是万变不离其宗的是那些算法和理论，刷算法最最最直白的原因就是找一个好的工作，那刷题一定是必不可少的<br/> 现在算法刷题平台还是蛮多的，给大家介绍一个我认为与大厂关联最深的平台——牛客网 <a href=\"https://www.nowcoder.com/link/pc_csdncpt_syr_sf\">跳转链接</a></p>\n</blockquote>\n<p>​​<img alt=\"在这里插入图片描述\" height=\"60\" src=\"..\\..\\static\\image\\13c9432f9a464a25be3341e5fa02da6c.jpeg\" width=\"60\"/><br/> </p>\n<center>\n<strong><mark>感觉不错的话，动手点个赞吧！</mark></strong>\n</center>\n<p></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-08-31 19:39:37", "summary": "个人主页：守夜人系列专栏：持续更新中敬请关注博主简介：软件工程专业，在校学生，写博客是为了总结回顾一些所学知识点推荐一款模拟面试，刷题，从基础走向大场面试开启你的刷题之路吧基础关键字在前面的学习过程中"}