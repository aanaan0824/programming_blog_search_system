{"blogid": "124748539", "writerAge": "码龄3年", "writerBlogNum": "88", "writerCollect": "36", "writerComment": "8", "writerFan": "1507", "writerGrade": "4级", "writerIntegral": "828", "writerName": "枫茗、", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124748539.jpg", "writerRankTotal": "27565", "writerRankWeekly": "4367", "writerThumb": "12", "writerVisitNum": "28225", "blog_read_count": "5900", "blog_time": "已于 2022-05-21 16:35:09 修改", "blog_title": "Python打包为exe文件", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p></p>\n<h2><strong>前言</strong></h2>\n<p>我们开发的python脚本一般都会用到一些第三方包，当别人需要用到我们编写的脚本时，如果我们将脚本文件发给他，他是不能直接运行去用的，他需要安装python解释器，配置相应的环境，这是相当麻烦的。那怎么办呢?我们可以将脚本和解释器打包成exe，再发给别人去使用。</p>\n<blockquote>\n<p><strong>PyInstaller介绍</strong></p>\n<p>PyInstaller是一个的打包python的py文件的库。</p>\n<p>PyInstaller除了win32平台外还支持Linux,Unix平台 </p>\n<p>PyInstaller本身并不是Python模块，所以安装时放到哪里都可以</p>\n<p>优点：</p>\n<ol><li>可将python文件转成可执行文件</li><li>跨平台</li><li>可以选择exe文件的图标 (Windows only)</li></ol>\n<p>python脚本是不能脱离python解释器单独运行的，所以在打包的时候，至少会将python解释器和脚本一起打包，同样，为了打包的exe能正常运行，会把我们所有安装的第三方包一并打包到exe。</p>\n</blockquote>\n<blockquote>\n<p><strong>安装</strong><strong>pyinstaller</strong></p>\n<pre><code>pip install pyinstaller</code></pre>\n</blockquote>\n<blockquote>\n<p><strong>使用pyinstaller进行打包</strong></p>\n<p>1.我习惯在Anaconda中创建虚拟环境来完成一个个的项目，所以我的PyInstaller库就直接安装在了我要打包的项目的虚拟环境(face)中</p>\n<p><img alt=\"\" height=\"60\" src=\"..\\..\\static\\image\\a5cba6bb1e444abd9a8badbe6a378b1b.png\" width=\"467\"/></p>\n<p>2.通过pip命令在虚拟环境中安装好包之后，通过cd命令转移到主文件所在的项目目录中，如cd C:\\Users\\80621\\Desktop\\python_learning\\recongz</p>\n<p><img alt=\"\" height=\"27\" src=\"..\\..\\static\\image\\3312e9b4d4354575bd924654c482c514.png\" width=\"596\"/></p>\n<p>3.我的主文件是run.py</p>\n<p><img alt=\"\" height=\"52\" src=\"..\\..\\static\\image\\8e49ffe4e5b54fa3972d09c22c6684fb.png\" width=\"645\"/></p>\n<p>等待打包完成就可以了。 <img alt=\"\" height=\"34\" src=\"..\\..\\static\\image\\04ef5ac6bdba4535aed1ed7337e2439f.png\" width=\"648\"/></p>\n<p> 打包完成后项目文件夹中会多一个dist目录，exe文件就在其中</p>\n<p><img alt=\"\" height=\"232\" src=\"..\\..\\static\\image\\a8300096fb3944ad80e6d51a5a1e785d.png\" width=\"296\"/><img alt=\"\" height=\"92\" src=\"..\\..\\static\\image\\826c9029584c4dd0a1c232cfbd5f8cb4.png\" width=\"396\"/></p>\n<p>若项目中有文件用到了相对路径，需要把那些用到的文件再拷贝一份放到dist目录下。</p>\n<p><img alt=\"\" height=\"175\" src=\"..\\..\\static\\image\\8426937a481a44f496245c5c52e75f47.png\" width=\"391\"/></p>\n<p><img alt=\"\" height=\"208\" src=\"..\\..\\static\\image\\024e225fa3da48ed84b3d80b4877cd65.png\" width=\"378\"/></p>\n</blockquote>\n<blockquote>\n<p><strong>查用打包命令</strong></p>\n<p>Pyinstaller -F setup.py 打包exe</p>\n<p>Pyinstaller -F -w setup.py 不带控制台的打包</p>\n<p>Pyinstaller -F -i xx.ico setup.py 指定exe图标打包</p>\n<p>Pyinstaller -F -w -i xx.ico setup.py 指定exe图标并且不带控制台的打包</p>\n<p><a href=\"https://app.xunjiepdf.com/img2icon/\" title=\"ico转换  ：在线图片转icon格式 – 图片转换成icon在线工具 – 迅捷PDF转换器在线免费版\">ico转换  ：在线图片转icon格式 – 图片转换成icon在线工具 – 迅捷PDF转换器在线免费版</a></p>\n</blockquote>\n<blockquote>\n<p><span style=\"color:#ff9900;\"><strong>以下问题需要注意！！！ 、</strong></span></p>\n<p><strong><span style=\"color:#0d0016;\">1）路径问题</span></strong></p>\n<p>如果你的程序中有图片等资源，是需要根据程序中的相对路径加入到dist文件中，也要在.exe同目录中加入images的文件夹（图片资源）</p>\n<p>如果原.py程序使用了图片等素材，并且添加图片是相对路径（同一个文件夹下可以不使用绝对路径），打包文件后，需要将图片等素材拷贝一份放在打包后的文件夹下，否则运行.exe程序会找不到图片素材。</p>\n<p>如果原.py程序使用图片添加的是绝对路径，在本地电脑上运行时可能不会发现错误。但是你将打包后的文件发给另一台机器，运行.exe程序会报错，大概意思是“根据你写的绝对路径找不到图片等素材”，即使你在文件夹下拷贝了素材，但是绝对路径也是错误的，所以，最好使用上一种方法。</p>\n<p><strong>2）打包的主文件问题</strong></p>\n<p>只能指定一个要打包的模块，也就是启动模块</p>\n<p>发布后，可执行文件执行路径不能有中文（最好也不要有空格）</p>\n<p>启动执行的文件中不要有下面这种判断，否则可执行文件执行会没有任何效果</p>\n<pre><code>  if __name__=='__main__':</code></pre>\n<p>将exe放到其他机子上运行，弹出“找不到msvcr100.dll“ ，手动将”msvcr100.dll“拷贝到dist目录下即可</p>\n<p><strong>3）养成良好习惯</strong></p>\n<p>写代码的时候应当养成良好的习惯，用什么函数导什么函数，不要上来就import整个库，最后你会发现你一个100KB的代码打包出来有500MB，全是库</p>\n</blockquote>\n<p><a href=\"https://blog.csdn.net/qq_37443862/article/details/106163315?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-106163315-blog-105630127.pc_relevant_antiscanv3&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=4\" title=\"使用Inno SetUp制作安装包_鱼生艰难啊的博客-CSDN博客_inno安装包\">使用Inno SetUp制作安装包_鱼生艰难啊的博客-CSDN博客_inno安装包</a> </p>\n</div>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-05-21 16:35:09", "summary": "前言我们开发的脚本一般都会用到一些第三方包，当别人需要用到我们编写的脚本时，如果我们将脚本文件发给他，他是不能直接运行去用的，他需要安装解释器，配置相应的环境，这是相当麻烦的。那怎么办呢我们可以将脚本"}