{"blogid": "124198574", "writerAge": "码龄3年", "writerBlogNum": "159", "writerCollect": "514", "writerComment": "53", "writerFan": "162", "writerGrade": "5级", "writerIntegral": "2235", "writerName": "玛丽莲茼蒿", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124198574.jpg", "writerRankTotal": "16447", "writerRankWeekly": "31433", "writerThumb": "405", "writerVisitNum": "210310", "blog_read_count": "3044", "blog_time": "已于 2022-04-28 21:48:20 修改", "blog_title": "【C++】Vscode 中使用CMakeLists（推荐）构建C++项目：项目结构、各个文件夹的作用、从编码到debug", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E4%B8%80%E3%80%81vscode%E9%85%8D%E7%BD%AE-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81vscode%E9%85%8D%E7%BD%AE\">一、vscode配置</a></p>\n<p id=\"%E4%BA%8C%E3%80%81%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84\">二、项目结构</a></p>\n<p id=\"%E4%B8%89%E3%80%81%E7%BC%96%E8%AF%91-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%89%E3%80%81%E7%BC%96%E8%AF%91\">三、编译</a></p>\n<p id=\"3.1%20%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86-toc\" style=\"margin-left:80px;\"><a href=\"#3.1%20%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\">3.1 工作原理</a></p>\n<p id=\"3.2%20%E5%9C%A8vscode%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8cmake%E8%BF%9B%E8%A1%8C%E7%BC%96%E8%AF%91-toc\" style=\"margin-left:80px;\"><a href=\"#3.2%20%E5%9C%A8vscode%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8cmake%E8%BF%9B%E8%A1%8C%E7%BC%96%E8%AF%91\">3.2 在vscode中如何使用cmake进行编译</a></p>\n<p id=\"%E4%B8%89%E3%80%81%E8%B0%83%E8%AF%95-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%89%E3%80%81%E8%B0%83%E8%AF%95\">三、调试</a></p>\n<hr/>\n<p style=\"margin-left:0px;\"> </p>\n<p><a class=\"has-card\" href=\"https://blog.csdn.net/qq_44886213/article/details/124194352?spm=1001.2014.3001.5501\" title=\"Vscode建立C++项目结构及各个文件夹的作用（不使用CMakeList.txt版）_玛丽莲茼蒿的博客-CSDN博客\"><span class=\"link-card-box\"><span class=\"link-title\">Vscode建立C++项目结构及各个文件夹的作用（不使用CMakeList.txt版）_玛丽莲茼蒿的博客-CSDN博客</span><span class=\"link-desc\">首先要明白，vscode只是一个记事本，本身是不能够进行任何程序语言开发的。只不过这个记事本可以安装插件，可以和命令行程序结合起来使用，使得它可以进行开发。一、Vscode下C++项目的目录结构首先，类似于我们在IDEA中新建一个普通java项目，项目的目录结构是这样的：新建一个maven模板的java项目，项目的目录结构是这样的：构建一个web模板的java项目，项目的目录结构是这样的：用springboot模板构建一个java项目，项目的目录结构是这样的：对于C++.</span><span class=\"link-link\"><img alt=\"\" class=\"link-link-icon\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\"/>https://blog.csdn.net/qq_44886213/article/details/124194352?spm=1001.2014.3001.5501</span></span></a>        由这篇博客可知，如果不使用CMakeLists.txt构建C++项目的话，就要编写.vscode文件夹中的三个json文件。除了麻烦外，还必须依托vscode这个平台，没法单独在shell/cmd<span style=\"color:#fe2c24;\"><strong>编译</strong></span>。下面就要介绍一下，如何在vscode中使用CMakeLists.txt构建C++项目。</p>\n<h1 id=\"%E4%B8%80%E3%80%81vscode%E9%85%8D%E7%BD%AE\">一、vscode配置</h1>\n<p>插件：</p>\n<ul><li>CMake</li><li>CMake tools</li><li>CMake Tools Helper</li></ul>\n<p>插件的功能是CMake语法高亮、自动补全，结合VSCode IDE生成CMake项目、构建CMake项目等。<strong>CMake工具本身还是要下载到本地，并且配置环境变量</strong>。</p>\n<h1 id=\"%E4%BA%8C%E3%80%81%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84\">二、项目结构</h1>\n<p>完整的项目结构一般是这样：</p>\n<blockquote>\n<p>- build</p>\n<p>- include</p>\n<p>- src</p>\n<p>- bin</p>\n<p>- lib</p>\n<p>CMakeLists.txt</p>\n</blockquote>\n<p>给出两个真实项目的项目结构：<img alt=\"\" height=\"144\" src=\"..\\..\\static\\image\\b993cf897a9540299e468bcad9933146.png\" width=\"112\"/> <img alt=\"\" height=\"132\" src=\"..\\..\\static\\image\\e9f8ee52026f46b39448339f95877c2a.png\" width=\"156\"/></p>\n<p>包括6部分：<strong>build文件夹</strong>、<strong>include文件夹</strong>、<strong>src文件夹、lib文件夹、bin文件夹</strong>和<strong>CMakeLists.txt</strong>。</p>\n<p> 其中，各个文件夹的作用已经介绍过了。下面重点介绍在vscode中使用CMakeLists.txt。</p>\n<h1 id=\"%E4%B8%89%E3%80%81%E7%BC%96%E8%AF%91\">三、编译</h1>\n<h3 id=\"3.1%20%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\">3.1 工作原理</h3>\n<p>        首先，我们需要知道<strong>make</strong>工具，它是一个<strong>自动化编译</strong>工具，用来批处理编译源文件，使用make工具进行编译需要编写一个规则文件<strong>Makefile</strong>，但是对于一个大工程，编写Makefile也是一件很复杂的事情。所以我们又向上抽象了一层，设计出了更为简单的<strong>CMakeLists.txt</strong>，开发人员只需要去编写简单的CMakeLists.txt，然后用<strong>cmake</strong>工具，它能够<strong>自动生成Makefile文件</strong>。然后再用make。。。。。</p>\n<h3 id=\"3.2%20%E5%9C%A8vscode%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8cmake%E8%BF%9B%E8%A1%8C%E7%BC%96%E8%AF%91\">3.2 在vscode中如何使用cmake进行编译</h3>\n<p>有两种方式，一种是直接在vscode的内嵌命令行里输命令，见下面这篇博客。</p>\n<p><a class=\"has-card\" href=\"https://blog.csdn.net/qq_44886213/article/details/124484239?spm=1001.2014.3001.5501\" title=\"【C++】CMakeList.txt在命令行的使用_玛丽莲茼蒿的博客-CSDN博客\"><span class=\"link-card-box\"><span class=\"link-title\">【C++】CMakeList.txt在命令行的使用_玛丽莲茼蒿的博客-CSDN博客</span><span class=\"link-desc\">前提：在官网下载好了cmake工具，并且配置好了环境变量。一、编写CMakeLists.txt在项目的顶层目录中，建立一个CMakeLists.txt文件。以某个真实项目为例，内容如下：cmake_minimum_required (VERSION 3.10.0)SET(CMAKE_BUILD_TYPE \"Debug\")SET(CMAKE_CXX_FLAGS_DEBUG \"$ENV{CXXFLAGS} -O0 -Wall -g -ggdb\")SET(CMAKE_CXX_FLAGS_R.</span><span class=\"link-link\"><img alt=\"\" class=\"link-link-icon\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\"/>https://blog.csdn.net/qq_44886213/article/details/124484239?spm=1001.2014.3001.5501</span></span></a>还有一种是结合vscode的插件，详见这篇博客。<a class=\"has-card\" href=\"https://blog.csdn.net/jiasike/article/details/107474368?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165115041316782390596774%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=165115041316782390596774&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-5-107474368.142%5Ev9%5Epc_search_result_cache,157%5Ev4%5Enew_style&amp;utm_term=vscode++cmake&amp;spm=1018.2226.3001.4187\" title=\"VSCode与CMake搭配使用之基本配置_501007162021的博客-CSDN博客_cmake vscode\"><span class=\"link-card-box\"><span class=\"link-title\">VSCode与CMake搭配使用之基本配置_501007162021的博客-CSDN博客_cmake vscode</span><span class=\"link-desc\">1.首先安装VSCode插件CMake和CMake ToolsCMake插件主要功能是CMake语法高亮、自动补全CMake Tools的功能主要是结合VSCode IDE使用CMake这个工具，比如生成CMake项目、构建CMake项目等2.新建CMake项目Ctrl+Shift+p打开VSCode的指令面板，然后输入cmake:q，VSCode会根据输入自动提示，然后选择CMake: Quick Start然后选择适合你的编译器（VSCode会将你安装的编译器都罗列出来供你选择。如果你</span><span class=\"link-link\"><img alt=\"\" class=\"link-link-icon\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\"/>https://blog.csdn.net/jiasike/article/details/107474368?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165115041316782390596774%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=165115041316782390596774&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-5-107474368.142^v9^pc_search_result_cache,157^v4^new_style&amp;utm_term=vscode++cmake&amp;spm=1018.2226.3001.4187</span></span></a><strong> <code>Ctrl+Shift+p</code></strong>打开VSCode的指令面板，然后输入<strong><code>cmake:q</code></strong>，VSCode会根据输入自动提示，然后选择<strong><code>CMake: Quick Start</code></strong></p>\n<p><img alt=\"\" height=\"66\" src=\"..\\..\\static\\image\\e5d65dabd63e4d8d9208ec22685d6819.png\" width=\"559\"/></p>\n<p> 然后选择适合你的<a href=\"https://so.csdn.net/so/search?q=%E7%BC%96%E8%AF%91%E5%99%A8&amp;spm=1001.2101.3001.7020\" title=\"编译器\">编译器</a>（VSCode会将你安装的编译器都罗列出来供你选择。如果你是交叉编译，那么就可以在这里配置你的交叉编译器）,为方便演示这里我们选择<code>GCC7.4.0</code>：</p>\n<p><img alt=\"\" height=\"173\" src=\"..\\..\\static\\image\\54d918b384e842bf9ec5309f2ed457f1.png\" width=\"573\"/></p>\n<p> 然后根据提示输入项目名称：</p>\n<p><img alt=\"\" height=\"74\" src=\"..\\..\\static\\image\\7317f90629e346fc8b160f24908c6df0.png\" width=\"558\"/></p>\n<p> 然后选择该项目是创建库还是可执行文件（选择不同，自动生成的CMakeLists.txt的内容也就不同），这里我们选择可执行文件<code>Executable</code>：</p>\n<p><img alt=\"\" height=\"85\" src=\"..\\..\\static\\image\\fc2084a63e194b9093a54f653111189f.png\" width=\"578\"/></p>\n<p> 然后VSCode就会为你生成一个CMake项目，如下所示：</p>\n<p><img alt=\"\" height=\"454\" src=\"..\\..\\static\\image\\d7e385c3b386484ba2d43fe2f84fdeaa.png\" width=\"954\"/></p>\n<p>默认只给出了main.cpp。其他的文件夹比如include文件夹、src文件夹、bin文件夹等自己建立就行。</p>\n<p>接下来是如何结合插件编译。点击底部的Build就行了，是不是比命令行简单一些？而且还有高亮显示。</p>\n<p><img alt=\"\" height=\"443\" src=\"..\\..\\static\\image\\8c13e98477d8460abf1c72c73f749428.png\" width=\"618\"/></p>\n<p> </p>\n<blockquote>\n<p><strong>PS</strong>: 不过还是推荐我们每次编写程序的时候编写一下<strong>c_cpp_properties.json</strong>，因为该文件中includePath参数可以很好指定头文件目录，这样就算没有CMakeLists.txt文件，我们在vscode编写程序的时候它也自动包含了头文件，这样就可以具有代码提示功能 。而且，有了CMakeLists.txt以后，即使写了c_cpp_properties.json文件，也并不影响项目脱离vscode单独在shell/cmd里编译运行。</p>\n</blockquote>\n<h1 id=\"%E4%B8%89%E3%80%81%E8%B0%83%E8%AF%95\">三、调试</h1>\n<p>为什么把debug单独拿出来说呢？因为有的时候我的编码习惯是这样的：<span style=\"color:#fe2c24;\"><strong>只是把vscode当作具有代码提示功能的编辑器，然后编译和运行直接用本地的cmake在shell进行，得到可执行程序以后用gdb进行代码的调试</strong></span>。</p>\n<p><span style=\"color:#ed7976;\">按照我之前的这种习惯，除了简单地下载C/C++插件以外不需要对vscode进行任何配置，因为除了打代码外，后续的过程直接不在vscode里。这是一种思路。</span></p>\n<p>但是呢，如果想要在vscode里实现从编码到调试的一体化过程，还需要<strong>和上一篇博客一样</strong>对vscode进行额外的配置，即配置launch.json文件。这篇博客讲的比较好<a class=\"has-card\" href=\"https://blog.csdn.net/wanzew/article/details/83097457\" title=\"一步一步学CMake 之 VSCode+CMakeLists 调试 C++ 工程_芝士锅的博客-CSDN博客_cmake vscode 调试\"><span class=\"link-card-box\"><span class=\"link-title\">一步一步学CMake 之 VSCode+CMakeLists 调试 C++ 工程_芝士锅的博客-CSDN博客_cmake vscode 调试</span><span class=\"link-desc\">目录1. 插件推荐2. 文件准备3. 开始调试一步一步学 CMake 系列文章1. 插件推荐CMakeCMake toolsCMake Tools Helper2. 文件准备新建文件夹：TEST新建文件：CMakeLists.txt内容如下：cmake_minimum_required(VERSION 2.6)project(vscode_...</span><span class=\"link-link\"><img alt=\"\" class=\"link-link-icon\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\"/>https://blog.csdn.net/wanzew/article/details/83097457</span></span></a></p>\n<p> <strong>步骤</strong>：</p>\n<p>假设我们有如下的CMakeLists.txt</p>\n<pre><code class=\"language-python\">cmake_minimum_required(VERSION 2.6)\n\n。。。\n\nadd_executable(result ${SRC_LIST}) # 可执行文件命名为result</code></pre>\n<p>点击图中最左侧第四个小蜘蛛形状的图标（调试），点击左上方的小齿轮，添加配置（C++GDB/LLDB）</p>\n<p><img alt=\"\" height=\"290\" src=\"..\\..\\static\\image\\b95db9cf1a0f410a95782a8cdfec4709.png\" width=\"256\"/></p>\n<p><img alt=\"\" height=\"220\" src=\"..\\..\\static\\image\\d05b83534892489cb5ddae5246947577.png\" width=\"490\"/></p>\n<p> 这个时候资源管理器下就会生成.<a href=\"https://so.csdn.net/so/search?q=vscode&amp;spm=1001.2101.3001.7020\" title=\"vscode\">vscode</a>文件夹，下面有个launch.json文件，内容如下</p>\n<pre><code class=\"language-python\">{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"(gdb) Launch\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"enter program name, for example ${workspaceFolder}/a.out\",\n            \"args\": [],\n            \"stopAtEntry\": false,\n            \"cwd\": \"${workspaceFolder}\",\n            \"environment\": [],\n            \"externalConsole\": true,\n            \"MIMode\": \"gdb\",\n            \"setupCommands\": [\n                {\n                    \"description\": \"Enable pretty-printing for gdb\",\n                    \"text\": \"-enable-pretty-printing\",\n                    \"ignoreFailures\": true\n                }\n            ]\n        }\n    ]\n}</code></pre>\n<p>把下面一句：</p>\n<pre><code class=\"language-python\">\"program\": \"enter program name, for example ${workspaceFolder}/a.out\",</code></pre>\n<p>改成：（根据CMakeLists.txt文件内容，将会在build文件夹下生成result可执行文件）</p>\n<pre><code class=\"language-python\">\"program\": \"${workspaceFolder}/build/result\"</code></pre>\n<p>然后就可以加断点调试了。</p>\n</div>\n</div>", "first_tag": "Java", "cpp": 1, "csharp": 0, "python": 1, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-04-28 21:48:20", "summary": "目录一、配置二、项目结构三、编译工作原理在中如何使用进行编译三、调试建立项目结构及各个文件夹的作用不使用版玛丽莲茼蒿的博客博客建立项目结构及各个文件夹的作用不使用版玛丽莲茼蒿的博客博客首先要明白，只是"}