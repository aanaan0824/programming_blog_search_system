{"blogid": "126216785", "writerAge": "码龄1年", "writerBlogNum": "22", "writerCollect": "663", "writerComment": "911", "writerFan": "1418", "writerGrade": "5级", "writerIntegral": "2609", "writerName": "是Lay", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126216785.jpg", "writerRankTotal": "7782", "writerRankWeekly": "106", "writerThumb": "774", "writerVisitNum": "15288", "blog_read_count": "221", "blog_time": "于 2022-08-07 22:16:48 发布", "blog_title": "【Java基础】程序流程控制", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p style=\"text-align:center;\"><img alt=\"\" height=\"75\" src=\"..\\..\\static\\image\\9ebfe5647dac408a9896786589f6591b.png\" width=\"685\"/> </p>\n<p><strong>​个人简介</strong></p>\n<blockquote>\n<p>&gt; 📦个人主页：<a href=\"https://blog.csdn.net/LKS_010620?type=lately\" title=\"轻狂客_零度的主页\">轻狂客_零度的主页</a><br/> &gt; 🏆学习方向：JAVA后端开发 <br/> &gt; 📣种一棵树最好的时间是十年前，其次是现在！<br/> &gt; ⏰往期文章：<a href=\"https://blog.csdn.net/LKS_010620/article/details/126147061?spm=1001.2014.3001.5501\" title=\"VUE [入门篇(三)]\">VUE [入门篇(三)]</a><br/> &gt; 🧡喜欢的话麻烦点点关注喔，你们的支持是我的最大动力。</p>\n</blockquote>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"1.%20%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84-toc\" style=\"margin-left:40px;\"><a href=\"#1.%20%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84\">1. 顺序结构</a></p>\n<p id=\"2.%20%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84-toc\" style=\"margin-left:40px;\"><a href=\"#2.%20%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84\">2. 分支结构</a></p>\n<p id=\"%C2%A02.1%20if%20%E5%88%86%E6%94%AF-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A02.1%20if%20%E5%88%86%E6%94%AF\"> 2.1 if 分支</a></p>\n<p id=\"%C2%A02.1.1%20%E5%8D%95%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A02.1.1%20%E5%8D%95%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84\"> 2.1.1 单分支结构</a></p>\n<p id=\"%C2%A02.1.2%20%E5%A4%9A%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A02.1.2%20%E5%A4%9A%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84\"> 2.1.2 多分支结构</a></p>\n<p id=\"%C2%A02.1.3%20%E5%B5%8C%E5%A5%97%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A02.1.3%20%E5%B5%8C%E5%A5%97%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84\"> 2.1.3 嵌套分支结构</a></p>\n<p id=\"%C2%A02.2%20switch%20%E5%88%86%E6%94%AF-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A02.2%20switch%20%E5%88%86%E6%94%AF\"> 2.2 switch 分支</a></p>\n<p id=\"3.%20%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84-toc\" style=\"margin-left:40px;\"><a href=\"#3.%20%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84\">3. 循环结构</a></p>\n<p id=\"%C2%A03.%201%20%E6%99%AE%E9%80%9Afor%E5%BE%AA%E7%8E%AF-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A03.%201%20%E6%99%AE%E9%80%9Afor%E5%BE%AA%E7%8E%AF\"> 3. 1 普通for循环</a></p>\n<p id=\"%C2%A03.2%20%E5%B5%8C%E5%A5%97for%20%E5%BE%AA%E7%8E%AF-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A03.2%20%E5%B5%8C%E5%A5%97for%20%E5%BE%AA%E7%8E%AF\"> 3.2 嵌套for 循环</a></p>\n<p id=\"%C2%A03.3%20%E9%AB%98%E6%95%88for%20%E5%BE%AA%E7%8E%AF-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A03.3%20%E9%AB%98%E6%95%88for%20%E5%BE%AA%E7%8E%AF\"> 3.3 高效for 循环</a></p>\n<p id=\"%C2%A03.4%20while%E5%BE%AA%E7%8E%AF-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A03.4%20while%E5%BE%AA%E7%8E%AF\"> 3.4 while循环</a></p>\n<p id=\"%C2%A03.5%20do-while%E5%BE%AA%E7%8E%AF%C2%A0-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A03.5%20do-while%E5%BE%AA%E7%8E%AF%C2%A0\"> 3.5 do-while循环 </a></p>\n<p id=\"%C2%A04.%20%E8%B7%B3%E8%BD%AC%E5%85%B3%E9%94%AE%E5%AD%97-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A04.%20%E8%B7%B3%E8%BD%AC%E5%85%B3%E9%94%AE%E5%AD%97\"> 4. 跳转关键字</a></p>\n<p id=\"%C2%A04.1%20break-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A04.1%20break\"> 4.1 break</a></p>\n<p id=\"%C2%A04.2%20continue-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A04.2%20continue\"> 4.2 continue</a></p>\n<p id=\"%C2%A05.%20%E6%A1%88%E4%BE%8B%E6%8A%80%E6%9C%AF%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A05.%20%E6%A1%88%E4%BE%8B%E6%8A%80%E6%9C%AF%C2%A0\"> 5. 案例技术 </a></p>\n<p id=\"%C2%A05.1%20%E9%9A%8F%E6%9C%BA%E6%95%B0Random%E7%B1%BB-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A05.1%20%E9%9A%8F%E6%9C%BA%E6%95%B0Random%E7%B1%BB\"> 5.1 随机数Random类</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<blockquote>\n<p>活动地址：<a href=\"https://marketing.csdn.net/p/bdabfb52c5d56532133df2adc1a728fd\" title=\"CSDN21天学习挑战赛\">CSDN21天学习挑战赛</a></p>\n</blockquote>\n<h2 id=\"1.%20%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84\">1. 顺序结构</h2>\n<p>顺序结构中的代码会按照顺序一行一行向下执行所有的代码语句,可以用来进行输入 输出 计算等的操作<br/> 但顺序结构不可以完成先做判断,再做选择的流程</p>\n<h2 id=\"2.%20%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84\">2. 分支结构</h2>\n<h3 id=\"%C2%A02.1%20if%20%E5%88%86%E6%94%AF\"> 2.1 if 分支</h3>\n<h3 id=\"%C2%A02.1.1%20%E5%8D%95%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84\"> 2.1.1 单分支结构</h3>\n<p>适合只有一个判断条件时使用，符合条件，执行大括号里的代码，不符合条件，大括号里的代码跳过</p>\n<pre><code class=\"language-java\">if(判断条件){\n            如果判断条件的结果为true,就执行此处代码,不符合条件,此处跳过\n }\n</code></pre>\n<h3 id=\"%C2%A02.1.2%20%E5%A4%9A%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84\"> 2.1.2 多分支结构</h3>\n<p>适合有两种情况时使用，符合条件，执行代码1，其他情况执行代码2</p>\n<pre><code class=\"language-java\">if(判断条件){\n    如果判断条件的结果为true,就执行此处的代码\n}else{\n    如果不符合条件,执行else处的代码\n}\n</code></pre>\n<h3 id=\"%C2%A02.1.3%20%E5%B5%8C%E5%A5%97%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84\"> 2.1.3 嵌套分支结构</h3>\n<p>适合有多个条件时使用，else-if的个数没有限制，else可加可不加</p>\n<pre><code class=\"language-java\">if(判断条件1){\n    符合判断条件1,执行此处代码,不符合,继续向下判断\n}else if(判断条件2){\n    符合判断条件2,执行此处代码,不符合,继续向下判断\n}else if(判断条件3){\n    符合判断条件3,执行此处代码,不符合,继续向下判断\n}else{\n    保底选项,以上条件均不符合的情况下,执行此处代码\n}\n</code></pre>\n<p><strong>练习:</strong></p>\n<pre><code class=\"language-java\">package com.example.basic;\n\nimport java.util.Scanner;\n\n/*本类用于复习分支结构*/\npublic class TestIf {\n    public static void main(String[] args) {\n        //1.提示并接收用户输入的月份\n        System.out.println(\"请输入您要测试的月份:\");\n        int month = new Scanner(System.in).nextInt();\n\n        //2.对用户输入的数据进行判断\n        if(month&lt;=0 || month &gt;12){\n            System.out.println(\"您输入的数据不正确!\");\n        }else{\n            //3.如果用户输入的数据正确,我们就进行季节的判断\n            if(month &gt;=3 &amp;&amp; month &lt;=5){\n                System.out.println(month+\"月是春天\");\n            }else if(month &gt;=6 &amp;&amp; month &lt;=8){\n                System.out.println(month+\"月是夏天\");\n            }else if(month &gt;=9 &amp;&amp; month&lt;=11){\n                System.out.println(month+\"月是秋天\");\n            }else{\n                System.out.println(\"冬天就要来啦,春天还会远吗?\");\n            }\n        }\n    }\n}\n</code></pre>\n<h3 id=\"%C2%A02.2%20switch%20%E5%88%86%E6%94%AF\"> 2.2 switch 分支</h3>\n<pre><code class=\"language-java\">switch (变量名){\n            case value1 : 操作1;break;//可选\n            case value2 : 操作2;break;//可选\n            case value3 : 操作3;break;//可选\n            case value4 : 操作4;break;//可选\n            default:保底选项;//可选\n        }\n</code></pre>\n<p>执行顺序: 先拿着变量a的值，依次与每个case后的值做比较，如果相等，就执行当前case后的操作，若case后没有break,就绪继续执行下一个case后的操作，如果一直没有遇到break,就会发生穿透的现象，包括default</p>\n<p>注意事项：</p>\n<p> 1. 变量a支持的类型byte short char int String<br/>  2. 变量a的数据类型与case后value的数据类型必须一致<br/>  3. 如果没有添加break,并且又有case被匹配到，会发生穿透的现象，包括deafult<br/>  4. case的个数 是否加break 是否加default 完全根据自己的业务来决定<br/>  5. 如果添加了default保底选项，又没有任何一个case被匹配到，就会执行default后的语句<br/>  6. 一般我们习惯在每个case后加break【这个只是建议，具体还是根据业务来写】</p>\n<h2 id=\"3.%20%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84\">3. 循环结构</h2>\n<p>当你想多次重复干某件事的时候，可以使用循环结构</p>\n<h3 id=\"%C2%A03.%201%20%E6%99%AE%E9%80%9Afor%E5%BE%AA%E7%8E%AF\"> 3. 1 普通for循环</h3>\n<pre><code class=\"language-java\">for(开始条件 ; 循环条件 ; 更改条件){\n     循环体\n}\n</code></pre>\n<p> 注意1：写法小窍门：从哪开始 到哪结束 循环变量如何变化<br/>  注意2：for循环能够执行多少次，取决于循环变量可以取到几个值 </p>\n<p><img alt=\"\" height=\"320\" src=\"..\\..\\static\\image\\c78ee9a1f4734a5bb4a305225a2c143f.png\" width=\"633\"/></p>\n<h3 id=\"%C2%A03.2%20%E5%B5%8C%E5%A5%97for%20%E5%BE%AA%E7%8E%AF\"> 3.2 嵌套for 循环</h3>\n<p>外层循环控制的是轮数，内层循环控制的是每一轮中执行的次数<br/> 对于图形而言，外层循环控制的是行数，内层循环控制的是列数</p>\n<pre><code class=\"language-java\">for(开始条件;循环条件;更改条件){//外层循环\n\t\tfor(开始条件;循环条件;更改条件){//内层循环\n\t\t\t\t循环体\n\t\t}\n}\n</code></pre>\n<p>​注意:外层循环控制的是行数,内层循环控制的是列数<br/> 注意:外层循环控制的是轮数,内层循环控制的是在这一轮中执行的次数</p>\n<h3 id=\"%C2%A03.3%20%E9%AB%98%E6%95%88for%20%E5%BE%AA%E7%8E%AF\"> 3.3 高效for 循环</h3>\n<pre><code class=\"language-java\">for(遍历到的元素的类型 遍历到的元素的名字 ：要遍历的数组/集合名){\n\t\t循环体\n}\n</code></pre>\n<p>优点：写法简单，效率高<br/> 缺点：只能从头到尾的遍历数据，不能进行步长的选择</p>\n<h3 id=\"%C2%A03.4%20while%E5%BE%AA%E7%8E%AF\"> 3.4 while循环</h3>\n<pre><code class=\"language-java\">while(判断条件){\n\t\t如果符合判断条件,继续循环\n}\n</code></pre>\n<p>注意:常用来完成死循环,但死循环必须设置出口!</p>\n<p>练习:</p>\n<pre><code class=\"language-java\">package com.example.basic;\n/*本类用于复习while循环*/\npublic class TestWhile {\n    public static void main(String[] args) {\n        //需求:通过while循环打印10次\"小可爱们中午好~\"\n        //f1();\n        //需求:通过while循环打印1 2 3 ... 10\n        //f2();\n        //需求:通过while循环打印1 3 5 7... 99\n        f3();\n        //需求:通过while计算1+2+3+4...+10\n        f4();\n        //需求:通过while计算2+4+6+8...+100\n        f5();\n    }\n\n    private static void f5() {\n        //需求:通过while计算2+4+6+8...+100\n        int i = 2;//定义循环变量i用来控制循环\n        int sum = 0;//定义变量用来保存累加的结果\n        while (i&lt;=100){\n            //sum += i;\n            sum = sum + i;//累加\n            //i += 2;\n            i = i + 2;//循环变量i每次+2\n        }\n        System.out.println(\"2到100所有偶数的和为:\"+sum);\n    }\n\n    private static void f4() {\n        //需求:通过while计算1+2+3+4...+10\n        int i = 1;//用于控制循环,相当于循环变量\n        int sum = 0;//用于保存求和累加的结果\n        while(i&lt;=10){\n            sum = sum + i;\n            i++;\n        }\n        System.out.println(\"1到10累加的结果为:\"+sum);\n    }\n\n    private static void f3() {\n        //需求:通过while循环打印1 3 5 7... 99\n        int sum = 1;\n        while(sum &lt;100){\n            System.out.println(sum);\n            //sum = sum +2;\n            sum += 2;\n        }\n    }\n\n    private static void f2() {\n        //需求:通过while循环打印1 2 3 ... 10\n        //1.定义一个变量来控制执行的次数\n        int i = 1;\n        while(i&lt;=10){\n            System.out.println(i);\n            i++;\n        }\n    }\n\n    private static void f1() {\n        //需求:通过while循环打印10次\"小可爱们中午好~\"\n        //1.定义一个变量用来控制执行的次数\n        int count = 1;\n        while(count &lt;= 10){\n            System.out.println(\"小可爱们中午好~\");\n            count++;//注意count的值需要自增,否则还是一个死循环\n        }\n    }\n}\n</code></pre>\n<h3 id=\"%C2%A03.5%20do-while%E5%BE%AA%E7%8E%AF%C2%A0\"> 3.5 do-while循环 </h3>\n<p> do-while循环一定会执行一次，然后再判断，如果符合条件，再执行后面的循环</p>\n<pre><code class=\"language-java\">do{\n\t\t循环体\n}while(判断条件);\n</code></pre>\n<p>几种循环的区别:</p>\n<ol><li>如果明确知道循环的次数/需要设置循环变量的变化情况时–使用for循环</li><li>如果想写死循环–while(true){}</li><li>如果需要先执行一次，再做判断–do-while循环</li><li>循环之间是可以互相替换的，但是最好使用比较合适的循环结构</li></ol>\n<h2 id=\"%C2%A04.%20%E8%B7%B3%E8%BD%AC%E5%85%B3%E9%94%AE%E5%AD%97\"> 4. 跳转关键字</h2>\n<h3 id=\"%C2%A04.1%20break\"> 4.1 break</h3>\n<p> 跳出并结束当前循环的执行</p>\n<p> 注意: 只能用于结束所在循环, 或者结束所在switch 分支的执行 </p>\n<h3 id=\"%C2%A04.2%20continue\"> 4.2 continue</h3>\n<p> 用于跳出当前循环的档当次执行, 进入下一次循环</p>\n<p> 注意: 只能在循环中使用</p>\n<h2 id=\"%C2%A05.%20%E6%A1%88%E4%BE%8B%E6%8A%80%E6%9C%AF%C2%A0\"> 5. 案例技术 </h2>\n<h3 id=\"%C2%A05.1%20%E9%9A%8F%E6%9C%BA%E6%95%B0Random%E7%B1%BB\"> 5.1 随机数Random类</h3>\n<p> 作用: 用于在程序中获取随机数的技术</p>\n<p> 使用步骤: </p>\n<p> 1. <span style=\"color:#262626;\">导包：告诉程序去JDK的哪个包中找随机数技术 </span></p>\n<p><span style=\"color:#262626;\"> 2. 写一行代码代表得到随机数对象 </span></p>\n<p><span style=\"color:#262626;\"> 3. 调用随机数的功能获取0-9的随机数</span></p>\n<pre><code class=\"language-java\">package com.example.random;\n\nimport java.util.Random; //1.导包\n\npublic class Test {\n\n    public static void main(String[] args) {\n        Random r = new Random(); //2.\n        \n        int number = r.nextInt(10); //3.\n        System.out.println(\"随机生成了:\"+ number);\n        \n    }\n}\n\n </code></pre>\n<p>注意: nextInt(n)功能只能生成: 0至n-1之间的随机数,不包含n</p>\n<p></p>\n<p></p>\n</div>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-08-07 22:16:48", "summary": "个人简介个人主页：轻狂客零度的主页轻狂客零度的主页学习方向：后端开发种一棵树最好的时间是十年前，其次是现在！往期文章：入门篇三入门篇三喜欢的话麻烦点点关注喔，你们的支持是我的最大动力。目录顺序结构分支"}