{"blogid": "119782562", "writerAge": "码龄9年", "writerBlogNum": "367", "writerCollect": "1267", "writerComment": "228", "writerFan": "270", "writerGrade": "7级", "writerIntegral": "11030", "writerName": "jackletter", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_119782562.jpg", "writerRankTotal": "1297", "writerRankWeekly": "14576", "writerThumb": "355", "writerVisitNum": "905753", "blog_read_count": "13413", "blog_time": "已于 2022-08-17 14:22:50 修改", "blog_title": "c#：HttpClient使用详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><strong>环境：</strong></p>\n<ul><li>window10</li><li>vs2019</li><li>.netcore 3.1</li><li>centos 7.6</li></ul>\n<h2><a id=\"chttp_6\"></a>一、在c#中发送http请求的方式</h2>\n<blockquote>\n<p>本部分参考：<a href=\"https://www.cnblogs.com/xiaoliangge/p/9535027.html\">《WebClient, HttpClient, HttpWebRequest ,RestSharp之间的区别与抉择》</a></p>\n</blockquote>\n<p>在c#中常见发送http请求的方式如下：</p>\n<ul><li> <p>HttpWebRequest：</p>\n<blockquote>\n<p>.net 平台原生提供，这是.NET创建者最初开发用于使用HTTP请求的标准类。使用HttpWebRequest可以让开发者控制请求/响应流程的各个方面，如 timeouts, cookies, headers, protocols。<br/> .<br/> 关于使用HttpWebRequest上传和下载文件，可参考：<a href=\"https://blog.csdn.net/u010476739/article/details/105074171\">《c#使用Http上传下载文件》</a></p>\n</blockquote> </li><li> <p>WebClient：</p>\n<blockquote>\n<p>.net 平台原生提供，WebClient是一种更高级别的抽象，是HttpWebRequest为了简化最常见任务而创建的，但也因此缺少了HttpWebRequest的灵活性。</p>\n</blockquote> </li><li> <p><code>HttpClient</code>：</p>\n<blockquote>\n<p>.net 平台原生提供，也是这次主讲的内容。</p>\n</blockquote> </li><li> <p>RestSharp：</p>\n<blockquote>\n<p>开源项目，它是基于HttpWebRequest做的二次封装，这里不再说明，可参考：<a href=\"https://blog.csdn.net/u010476739/article/details/105216936\">《c#: 使用restsharp发送http请求、下载文件》</a>。</p>\n</blockquote> </li><li> <p>Flurl：</p>\n<blockquote>\n<p>开源项目，基于<code>HttpClient</code>做的二次封装，项目地址：<a href=\"https://github.com/tmenier/Flurl\">https://github.com/tmenier/Flurl</a></p>\n</blockquote> </li></ul>\n<p>在.net core平台下推荐使用<code>HttpClient</code>。</p>\n<h2><a id=\"HttpClient_26\"></a>二、HttpClient介绍</h2>\n<blockquote>\n<p>本部分参考： <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.net.http.socketshttphandler?view=netcore-3.1\">《MSDN: SocketsHttpHandler 》</a></p>\n</blockquote>\n<p>在System.Net.Http命名空间下的<code>HttpClient</code>是.net core平台最常用的http请求工具，它直接基于Socket开发，提供了异步友好的代码编写方式。</p>\n<p>下面是简单示例：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d76edb6abbdb421ea8766a975decfe91.png\"/><br/> 看样子使用起来挺简单的。其实隐藏了一些细节，如果我们要对这些细节进行配置的话，建议写成下面的形式：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">// 在.net core 2.1之后，默认所有的http请求都会交给SocketsHttpHandler处理</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> socketsHttpHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SocketsHttpHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    AllowAutoRedirect <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 默认为true,是否允许重定向</span>\n    MaxAutomaticRedirections <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//最多重定向几次,默认50次</span>\n    <span class=\"token comment\">//MaxConnectionsPerServer = 100,//连接池中统一TcpServer的最大连接数</span>\n    UseCookies <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token comment\">// 是否自动处理cookie</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span>socketsHttpHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"HttpClient_46\"></a>三、HttpClient相关的类</h2>\n<ul><li>HttpClient类：提供用户调用的入口；</li><li>HttpRequestMessage类：表示用户请求消息；</li><li>HttpResponseMessage类：表示http响应消息；</li></ul>\n<p>上面是我们最常见的类，除此之外还有：</p>\n<ul><li>HttpMessageInvoker：表示发起http消息的入口，HttpClient类就是继承了它，但也仅有HttpClient继承它；</li><li><code>HttpMessageHandler</code>：虽然HttpMessageInvoker表示http消息的入口，但发送http消息还要靠HttpMessageHandler，事实上，HttpMessageInvoker内部就封装者一个HttpMessageHandler；</li><li><code>SocketsHttpHandler</code>：继承HttpMessageHandler，它是.net core2.1之后事实上的HttpMessageHandler，也就是说我们代码中发送http消息基本用的就是它；</li><li>HttpClientHandler：也继承自HttpMessageHandler，但其内部封装者SocketsHttpHandler，一般情况下http请求是转发给内部的SocketsHttpHandler处理的；</li><li>DelegatingHandler：也继承自HttpMessageHandler，不过它是一个抽象类，旨在提供一个http请求管道的基类；</li></ul>\n<h2><a id=\"HttpClient_59\"></a>四、HttpClient使用时的注意事项</h2>\n<p>HttpClient类旨在提供一个用户入口，其内部管理着不同服务器的TCP连接池，如下图所示：</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\04c02f05261a41dab9c6520fc98b60b4.png\"/><br/> 所以，当我们需要发起http请求时，最好使用全局单例的HttpClient，而不是每次都new一个HttpClient。</p>\n<p>另外，由于TCP本身在断开连接的时候需要4次挥手动作，而其中又有一个等待时间，所以我们即使将HttpClient.Dispose()掉也会造成这个TCP连接短时间内无法断开（最长要持续4分钟），如果遇到高并发的话，很可能端口就不够用了。</p>\n<blockquote>\n<p>注意：上面缓存连接的时候是以传入的地址前缀做key，而不是最终解析的ip地址，所以，HttpClient对DNS解析不太友好。<br/> HttpClient是线程安全的，里面封装了链接池，使用DnSpy验证如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0877e6cfb6c24c5baf67a0ec7856035d.png\"/></p>\n</blockquote>\n<h2><a id=\"HttpClient_72\"></a>五、HttpClient的使用配置</h2>\n<p>当我们发送http请求时，我们需要关注一些事情，比如：</p>\n<ul><li> <p>是否自动处理cookie；</p>\n<blockquote>\n<p>默认HttpClient是自动处理cookie的，即：上一个请求返回的cookie，可能会随着下次请求发送出去。<br/> 然而，最佳的使用方式是多次请求使用相同的HttpClient所以这个cookie隔离性就很差，我们可以在创建HttpClient的时候进行配置禁用cookie自动处理：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> socketsHttpHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SocketsHttpHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   UseCookies <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 是否自动处理cookie</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span>socketsHttpHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</blockquote> </li><li> <p>是否自动重定向以及最多重定向几次；</p>\n<blockquote>\n<p>默认HttpClient自动处理重定向请求，并且最多重定向50次，一般我们不需要修改这个配置，但我们做测试的话，可以向下面写法：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> socketsHttpHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SocketsHttpHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    AllowAutoRedirect<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//是否自动重定向</span>\n    MaxAutomaticRedirections<span class=\"token operator\">=</span><span class=\"token number\">50</span><span class=\"token comment\">//自动重定向的最大次数</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span>socketsHttpHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</blockquote> </li><li> <p>内部TCP链接池的设置；</p>\n<blockquote>\n<p>这个地方有三个配置项：</p>\n<ul><li>MaxConnectionsPerServer: 每个url（如：http://www.baidu.com:80）最多有几个链接，默认是int.MaxValue。注意：url是不带路径及参数；</li><li>PooledConnectionIdleTimeout: 每个TCP链接空闲的时间，因为TCP长时间不用也要及时释放嘛，此处默认2分钟；</li><li>PooledConnectionLifetime: 每个TCP链接从创建开始存活的时间，默认是不限制的，一般也不用设置这个参数；</li></ul>\n<p>直接看代码示例：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> socketsHttpHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SocketsHttpHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token comment\">//每个请求连接的最大数量，默认是int.MaxValue,可以认为是不限制</span>\n   MaxConnectionsPerServer <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n   <span class=\"token comment\">//连接池中TCP连接最多可以闲置多久,默认2分钟</span>\n   PooledConnectionIdleTimeout <span class=\"token operator\">=</span> TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromMinutes</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token comment\">//连接最长的存活时间,默认是不限制的,一般不用设置</span>\n   PooledConnectionLifetime <span class=\"token operator\">=</span> Timeout<span class=\"token punctuation\">.</span>InfiniteTimeSpan<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span>socketsHttpHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</blockquote> </li><li> <p>是否压缩；</p>\n<blockquote>\n<p>默认是不压缩，如果设置开启压缩的话，http请求头中会自动加上<code>Accept-Encoding: gzip</code>（当然你得设置压缩选项是gzip），如果后台也支持这种压缩的话，就会把消息体压缩并在响应头中添加<code>Content-Encoding: gzip</code>。asp.net core添加压缩支持参考：<a href=\"https://www.cnblogs.com/wucy/p/13395674.html\">《ASP.NET Core中的响应压缩》</a><br/> 设置的代码示例如下：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> socketsHttpHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SocketsHttpHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token comment\">//默认是None，即不压缩</span>\n   AutomaticDecompression <span class=\"token operator\">=</span> DecompressionMethods<span class=\"token punctuation\">.</span>GZip<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span>socketsHttpHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</blockquote> </li><li> <p>超时设置；</p>\n<blockquote>\n<p>有三个配置项：</p>\n<ul><li>ConnectTimeout: 连接时超时时间，默认不限制</li><li>Expect100ContinueTimeout: 等待返回100状态码的时间，默认1秒，根据msdn解释，当请求头有<code>Expect: 100-continue</code>的时候，服务端应返回100状态码</li><li>Timeout: 等待响应超时时间，默认：100秒。</li></ul>\n<p>看下面的代码示例：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> socketsHttpHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SocketsHttpHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token comment\">//建立TCP连接时的超时时间,默认不限制</span>\n   ConnectTimeout <span class=\"token operator\">=</span> Timeout<span class=\"token punctuation\">.</span>InfiniteTimeSpan<span class=\"token punctuation\">,</span>\n   <span class=\"token comment\">//等待服务返回statusCode=100的超时时间,默认1秒</span>\n   Expect100ContinueTimeout <span class=\"token operator\">=</span> TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span>socketsHttpHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//等待响应超时时间，默认：100秒。</span>\nclient<span class=\"token punctuation\">.</span>Timeout <span class=\"token operator\">=</span> TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</blockquote> </li><li> <p>响应头数据大小限制；</p>\n<blockquote>\n<p>MaxResponseHeadersLength: http响应头最大字节数（单位：KB），默认：64，即：http响应头最大64KB，一般不用设置<br/> 看代码设置：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> socketsHttpHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SocketsHttpHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   MaxResponseHeadersLength <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//单位: KB</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span>socketsHttpHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</blockquote> </li><li> <p>关于Drain的配置；</p>\n<blockquote>\n<p>没有搞懂什么是Drain，好像是：当关闭连接时需要从这个连接中排出未使用的数据，当排出超时或排出的字节数超出限制时就直接把连接关闭了，而不是放到池子里重用。对应的配置项：<br/> MaxResponseDrainSize、ResponseDrainTimeout。</p>\n</blockquote> </li><li> <p>关于BaseAddress的配置：可以给HttpClient设置基地址，当HttpClient发送的请求不包含前缀时，将自动拼接上，否则不予拼接，如下：</p> <pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nclient<span class=\"token punctuation\">.</span>BaseAddress <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Uri</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://192.168.0.9:9000/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"/index.html\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">GetAsync</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 真实地址是： http://192.168.0.9:9000/index.html</span>\n</code></pre> </li><li> <p>默认的http版本、请求头：</p>\n<blockquote>\n<p>默认的http版本是1.1，实验设置2.0没效果；<br/> 默认请求头为空，可以自己设置如下：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nclient<span class=\"token punctuation\">.</span>DefaultRequestVersion <span class=\"token operator\">=</span> HttpVersion<span class=\"token punctuation\">.</span>Version20<span class=\"token punctuation\">;</span>\nclient<span class=\"token punctuation\">.</span>DefaultRequestHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"machine-id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</blockquote> </li><li> <p>关于SslOptions:</p>\n<blockquote>\n<p>可以在这里面配置SSL相关的东西。这里我只实验了一种场景，即：访问https网站时由于网站自身的证书不规范导致报错：“AuthenticationException: The remote certificate is invalid according to the validation procedure.”<br/> 在我们使用HttpWebRequest的时候我们可以通过下面回调设置：<br/> <code>httpWebRequest.ServerCertificateValidationCallback = (sender, cer, chain, err) =&gt; true;</code><br/> 在HttpClient时，我们对应的设置为：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> socketsHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SocketsHttpHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    SslOptions <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Security<span class=\"token punctuation\">.</span>SslClientAuthenticationOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n          RemoteCertificateValidationCallback <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> cer<span class=\"token punctuation\">,</span> chain<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token boolean\">true</span>                    \n    <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> httpClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span>socketsHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>需要注意： 这是由于网站自身的证书不规范造成的，我们正常访问 https://www.baidu.com 即使不加这个配置也是正常的。</p>\n</blockquote> </li></ul>\n<p>验证相关：PreAuthenticate、Credentials，不过这两个怎么实验都看不到效果，应该也用不到。<br/> 代理相关：Proxy、UseProxy、DefaultProxyCredentials 这几个未做实验。</p>\n<h2><a id=\"HttpClient_195\"></a>六、HttpClient提供的方法</h2>\n<h3><a id=\"61_Get_196\"></a>6.1 通过Get请求数据</h3>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> httpClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:9000/index.html\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">GetAsync</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAsStringAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"62_Get_203\"></a>6.2 通过Get下载文件</h3>\n<p>现在我们要下载一个文件，假如这个文件不超过2G且不需要下载进度提示，那么我们可以如下操作：</p>\n<pre><code class=\"prism language-csharp\">  <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> httpClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">GetAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:9000/middledata.mp4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//763M</span>\n  <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> fileStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FileStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"e:\\\\middle.db\"</span><span class=\"token punctuation\">,</span> FileMode<span class=\"token punctuation\">.</span>OpenOrCreate<span class=\"token punctuation\">,</span> FileAccess<span class=\"token punctuation\">.</span>Write<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">.</span><span class=\"token function\">CopyToAsync</span><span class=\"token punctuation\">(</span>fileStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  fileStream<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>但考虑到下载的文件会过大，比如：3GB，这个时候首先HttpClient的缓冲区就不够用了，因为它最大设置的是：int.MaxValue=2^31-1≈2GB，看下面的报错代码：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> httpClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//默认缓冲大小为: 2147483647=int.MaxValue=2^31-1≈2GB，如果下载的文件过大就会报异常:  \"Cannot write more bytes to the buffer than the configured maximum buffer size: 2147483647.\"</span>\n<span class=\"token comment\">//可以手动设置缓冲区大小，但最大就是int.MaxValue，再大就会报错: \"Buffering more than 2147483647 bytes is not supported.\"</span>\nhttpClient<span class=\"token punctuation\">.</span>MaxResponseContentBufferSize <span class=\"token operator\">=</span> <span class=\"token number\">2L</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//调成4GB，发现报错</span>\n</code></pre>\n<p>这个时候我们就不能一次性获取Http响应报文的全部内容了，需要如下操作：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> httpClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:9000/bigdata.mp4\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//3GB大小</span>\n<span class=\"token comment\">//注意：因为太大，必须指定 HttpCompletionOption.ResponseHeadersRead，即：拿到响应头就返回</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">GetAsync</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> HttpCompletionOption<span class=\"token punctuation\">.</span>ResponseHeadersRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> fileStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FileStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"e:\\\\bigdata.db\"</span><span class=\"token punctuation\">,</span> FileMode<span class=\"token punctuation\">.</span>OpenOrCreate<span class=\"token punctuation\">,</span> FileAccess<span class=\"token punctuation\">.</span>Write<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 虽然上面指定拿到响应头就返回，但这里依然可以拿到下载的文件流</span>\n<span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">.</span><span class=\"token function\">CopyToAsync</span><span class=\"token punctuation\">(</span>fileStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfileStream<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>现在，需要对这个大文件加上下载进度提示，我们需要事先获取文件的大小，这通过http响应头的Content-Length可以获取到（但并不总能获取到）：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> httpClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:9000/bigdata.mp4\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">GetAsync</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> HttpCompletionOption<span class=\"token punctuation\">.</span>ResponseHeadersRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> totalLength <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>ContentLength<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> contentStream <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAsStreamAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> fileStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FileStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"e:\\\\bigdata.db\"</span><span class=\"token punctuation\">,</span> FileMode<span class=\"token punctuation\">.</span>OpenOrCreate<span class=\"token punctuation\">,</span> FileAccess<span class=\"token punctuation\">.</span>Write<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">byte</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//5KB缓存</span>\n<span class=\"token class-name\"><span class=\"token keyword\">long</span></span> readLength <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> length<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> contentStream<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAsync</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    readLength <span class=\"token operator\">+=</span> length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>totalLength <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"下载进度: \"</span> <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">Round</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>readLength <span class=\"token operator\">/</span> totalLength<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"%\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已下载: \"</span> <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">Round</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>readLength <span class=\"token operator\">/</span> <span class=\"token number\">1024.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"KB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    fileStream<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nfileStream<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"63_Post_applicationxwwwformurlencoded_259\"></a>6.3 通过Post请求数据： application/x-www-form-urlencoded</h3>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> httpClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://192.168.0.9:9000/Demo/PostUrlCode\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">PostAsync</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FormUrlEncodedContent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>KeyValuePair<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">KeyValuePair<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">KeyValuePair<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"20\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAsStringAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>上面的请求报文:</p>\n<pre><code class=\"prism language-http\">POST /Demo/PostUrlCode HTTP/1.1\nHost: 192.168.0.9:9000\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 30\n\nname=%E5%B0%8F%E6%98%8E&amp;age=20\n</code></pre>\n<p>对应的asp.net core后台：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">//注意：asp.net core webapi和mvc模式解析参数的时候存在差别，这里是asp.net core webapi</span>\n<span class=\"token punctuation\">[</span>HttpPost<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">PostUrlCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">FromForm</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">FromForm</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> age<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> header <span class=\"token keyword\">in</span> Request<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        str <span class=\"token operator\">+=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">header<span class=\"token punctuation\">.</span>Key</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">header<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\\r\\n\"</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss.fff\"</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">age</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> \\r\\n</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">str</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>http响应报文体：</p>\n<pre><code class=\"prism language-text\">2021-08-19 19:35:04.804 小明 20 \nContent-Type: application/x-www-form-urlencoded\nHost: 192.168.0.9:9000\nContent-Length: 30\n</code></pre>\n<p>如果想传递数组，发送请求时如下：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> httpClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://192.168.0.9:9000/Demo/PostUrlCode\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">PostAsync</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FormUrlEncodedContent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>KeyValuePair<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">KeyValuePair<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"names[0]\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">KeyValuePair<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"names[1]\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"小红\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">KeyValuePair<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"20\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAsStringAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>对应的请求报文：</p>\n<pre><code class=\"prism language-html\">POST /Demo/PostUrlCodeArr HTTP/1.1\nHost: 192.168.0.9:9000\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 70\n\nnames%5B0%5D=%E5%B0%8F%E6%98%8E&amp;names%5B1%5D=%E5%B0%8F%E7%BA%A2&amp;age=20\n</code></pre>\n<p>此时asp.net core后台：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token comment\">//注意：asp.net core webapi和mvc模式解析参数的时候存在差别，这里是asp.net core webapi</span>\n<span class=\"token punctuation\">[</span>HttpPost<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">PostUrlCodeArr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">FromForm</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> names<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">FromForm</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> age<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> header <span class=\"token keyword\">in</span> Request<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        str <span class=\"token operator\">+=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">header<span class=\"token punctuation\">.</span>Key</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">header<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\\r\\n\"</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss.fff\"</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> names<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">age</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> \\r\\n</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">str</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>http响应报文体：</p>\n<pre><code class=\"prism language-text\">2021-08-19 19:37:16.874 小明,小红 20 \nContent-Type: application/x-www-form-urlencoded\nHost: 192.168.0.9:9000\nContent-Length: 70\n</code></pre>\n<h3><a id=\"64_Postapplicationjson_344\"></a>6.4 使用Post请求数据：application/json</h3>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> httpClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://192.168.0.9:9000/Demo/PostUrlJson\"</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">PostAsync</span><span class=\"token punctuation\">(</span>\n    url<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StringContent</span><span class=\"token punctuation\">(</span>\n        Newtonsoft<span class=\"token punctuation\">.</span>Json<span class=\"token punctuation\">.</span>JsonConvert<span class=\"token punctuation\">.</span><span class=\"token function\">SerializeObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">{<!-- --></span> Name <span class=\"token operator\">=</span> <span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">,</span> Id <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAsStringAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>产生的请求报文：</p>\n<pre><code class=\"prism language-http\">POST /Demo/PostUrlJson HTTP/1.1\nHost: 192.168.0.9:9000\nContent-Type: application/json; charset=utf-8\nContent-Length: 24\n\n{\"Name\":\"小明\",\"Id\":1}\n</code></pre>\n<p>此时asp.net core后台：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">HttpPost</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">PostUrlJson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">FromBody</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">RequestModel</span> req<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> header <span class=\"token keyword\">in</span> Request<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        str <span class=\"token operator\">+=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">header<span class=\"token punctuation\">.</span>Key</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">header<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\\r\\n\"</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss.fff\"</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">req<span class=\"token punctuation\">.</span>Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">req<span class=\"token punctuation\">.</span>Id</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> \\r\\n</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">str</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RequestModel</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Id <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>返回的http响应体：</p>\n<pre><code class=\"prism language-text\">2021-08-19 19:51:00.901 小明 1 \nContent-Type: application/json; charset=utf-8\nHost: 192.168.0.9:9000\nContent-Length: 24\n</code></pre>\n<h3><a id=\"65_Postmultipartformdata_392\"></a>6.5 通过Post上传文件：multipart/form-data</h3>\n<p>此处假设上传的文件不大。<br/> 上传代码如下：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> httpClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:9000/Demo/PostMulti\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> content <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MultipartFormDataContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncontent<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StringContent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncontent<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StringContent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"18\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//注意：要指定filename，即：test.txt，否则后台不认为是一个文件，而是普通的参数</span>\ncontent<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ByteArrayContent</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAllBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"e:\\\\test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"file\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">PostAsync</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAsStringAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这里用到的文件很小：</p>\n<pre><code class=\"prism language-text\">// test.txt\nthis is file.\n</code></pre>\n<p>产生的请求报文如下：</p>\n<pre><code class=\"prism language-http\">POST /Demo/PostMulti HTTP/1.1\nHost: 192.168.0.9:9000\nContent-Type: multipart/form-data; boundary=\"ecc429f8-1f51-43a6-af5b-0fc8a88da513\"\nContent-Length: 451\n\n--ecc429f8-1f51-43a6-af5b-0fc8a88da513\nContent-Type: text/plain; charset=utf-8\nContent-Disposition: form-data; name=name\n\n小明\n--ecc429f8-1f51-43a6-af5b-0fc8a88da513\nContent-Type: text/plain; charset=utf-8\nContent-Disposition: form-data; name=age\n\n18\n--ecc429f8-1f51-43a6-af5b-0fc8a88da513\nContent-Disposition: form-data; name=file; filename=test.txt; filename*=utf-8''test.txt\n\nthis is file.\n--ecc429f8-1f51-43a6-af5b-0fc8a88da513--\n\n</code></pre>\n<p>后台aspet core代码如下：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">HttpPost</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">PostMulti</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">FromForm</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">FromForm</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> age<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> header <span class=\"token keyword\">in</span> Request<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        str <span class=\"token operator\">+=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">header<span class=\"token punctuation\">.</span>Key</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">header<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\\r\\n\"</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Request<span class=\"token punctuation\">.</span>Form<span class=\"token punctuation\">.</span>Files<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> file <span class=\"token operator\">=</span> Request<span class=\"token punctuation\">.</span>Form<span class=\"token punctuation\">.</span>Files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> fileName <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span>FileName<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> fileLength <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> stream <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">OpenReadStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bytearr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">byte</span></span><span class=\"token punctuation\">[</span>fileLength<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        stream<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAsync</span><span class=\"token punctuation\">(</span>bytearr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> fileContent <span class=\"token operator\">=</span> Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetString</span><span class=\"token punctuation\">(</span>bytearr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        str <span class=\"token operator\">+=</span> <span class=\"token string\">\"\\r\\n\"</span> <span class=\"token operator\">+</span> fileContent<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss.fff\"</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">age</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> \\r\\n</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">str</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>对应的http响应报文体：</p>\n<pre><code class=\"prism language-text\">2021-08-19 22:40:25.626  \nContent-Type: multipart/form-data; boundary=\"ecc429f8-1f51-43a6-af5b-0fc8a88da513\"\nHost: 192.168.0.9:9000\nContent-Length: 451\n\nthis is file.\n</code></pre>\n<p>现在，客户端要上传一个大文件，该如何操作？<br/> 我们知道作为一个web服务器一般是不会允许上传太大文件的，所以这里首先要说一下服务器端的限制。<br/> 假设asp.net core直接在Kestrel下面运行，那么它将有如下限制：</p>\n<ul><li>kestrel限制请求体最大为：28M；</li><li>formbody最大为：128M</li></ul>\n<p>先看第一个限制：<br/> 可引发异常 “Microsoft.AspNetCore.Server.Kestrel.Core.BadHttpRequestException: Request body too large”</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IHostBuilder</span> <span class=\"token function\">CreateHostBuilder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n   Host<span class=\"token punctuation\">.</span><span class=\"token function\">CreateDefaultBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureWebHostDefaults</span><span class=\"token punctuation\">(</span>webBuilder <span class=\"token operator\">=&gt;</span>\n       <span class=\"token punctuation\">{<!-- --></span>\n           webBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureKestrel</span><span class=\"token punctuation\">(</span>options <span class=\"token operator\">=&gt;</span>\n           <span class=\"token punctuation\">{<!-- --></span>\n               <span class=\"token comment\">//options.Limits.MaxRequestBodySize = 30000000L;//默认约28M</span>\n               <span class=\"token comment\">//options.Limits.MaxRequestBodySize = 2 * 2L &lt;&lt; 30;//指定最大2G</span>\n               options<span class=\"token punctuation\">.</span>Limits<span class=\"token punctuation\">.</span>MaxRequestBodySize <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//去掉限制</span>\n           <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           webBuilder<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">UseStartup</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Startup<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>第二个限制：<br/> 可引发异常：“Failed to read the request form. Multipart body length limit 134217728 exceeded.”</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Configure</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>FormOptions<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=&gt;</span>\n   <span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token comment\">//x.MultipartBodyLengthLimit = 134217728;//默认128MB</span>\n       x<span class=\"token punctuation\">.</span>MultipartBodyLengthLimit <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token number\">2L</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这里手动设置为5GB,这么大的数值仅用于演示</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   services<span class=\"token punctuation\">.</span><span class=\"token function\">AddControllers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>除了服务器端的限制，客户端也有限制，那就是因为上传的文件太大，导致等待响应时间超时，引发的异常为：System.Threading.Tasks.TaskCanceledException:“A task was canceled.”。<br/> 解决办法：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> httpClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhttpClient<span class=\"token punctuation\">.</span>Timeout <span class=\"token operator\">=</span> Timeout<span class=\"token punctuation\">.</span>InfiniteTimeSpan<span class=\"token punctuation\">;</span><span class=\"token comment\">//仅用于演示，将时间改为无限长</span>\n</code></pre>\n<p>其实上传大文件的时候遇到的限制，无非就是时间和空间的。在做项目的时候注意其配置就可以了。</p>\n<p>下面演示上传大文件：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> httpClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhttpClient<span class=\"token punctuation\">.</span>Timeout <span class=\"token operator\">=</span> Timeout<span class=\"token punctuation\">.</span>InfiniteTimeSpan<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://192.168.0.9:9000/Demo/PostMulti2\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> content <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MultipartFormDataContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncontent<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StringContent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncontent<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StringContent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"18\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> filepath <span class=\"token operator\">=</span> <span class=\"token string\">@\"E:\\BaiduNetdiskDownload\\Docker实战.pdf\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//97.6MB</span>\nfilepath <span class=\"token operator\">=</span> <span class=\"token string\">@\"E:\\BaiduNetdiskDownload\\dnSpy_v6.14.zip\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//151.6MB</span>\nfilepath <span class=\"token operator\">=</span> <span class=\"token string\">@\"E:\\BaiduNetdiskDownload\\dotnetfx35.exe\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//231MB</span>\nfilepath <span class=\"token operator\">=</span> <span class=\"token string\">@\"E:\\BaiduNetdiskDownload\\Photoshop_13_LS3（cs6）安装包.7z\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1.12GB</span>\nfilepath <span class=\"token operator\">=</span> <span class=\"token string\">@\"E:\\BaiduNetdiskDownload\\cn_windows_10_business_editions_version_2004_updated_june_2020_x64_dvd_49d8dbba.iso\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4.83GB</span>\n<span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> fileStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FileStream</span><span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">,</span> FileMode<span class=\"token punctuation\">.</span>Open<span class=\"token punctuation\">,</span> FileAccess<span class=\"token punctuation\">.</span>Read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> streamContent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StreamContent</span><span class=\"token punctuation\">(</span>fileStream<span class=\"token punctuation\">,</span> <span class=\"token number\">2048</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncontent<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>streamContent<span class=\"token punctuation\">,</span> <span class=\"token string\">\"file\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bigdata.db\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">PostAsync</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAsStringAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>放开限制后，上面的最大文件4.83G也是可以上传的。</p>\n<p>对了，后端的代码为：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">HttpPost</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">PostMulti2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">FromForm</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">FromForm</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> age<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"F\"</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> comming... \"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> header <span class=\"token keyword\">in</span> Request<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        str <span class=\"token operator\">+=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">header<span class=\"token punctuation\">.</span>Key</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">header<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\\r\\n\"</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Request<span class=\"token punctuation\">.</span>Form<span class=\"token punctuation\">.</span>Files<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> file <span class=\"token operator\">=</span> Request<span class=\"token punctuation\">.</span>Form<span class=\"token punctuation\">.</span>Files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> fileName <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span>FileName<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> fileLength <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> stream <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">OpenReadStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> filepath <span class=\"token operator\">=</span> <span class=\"token string\">\"e:\\\\bigdataupload.db\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">Exists</span><span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> destStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FileStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"e:\\\\bigdataupload.db\"</span><span class=\"token punctuation\">,</span> FileMode<span class=\"token punctuation\">.</span>CreateNew<span class=\"token punctuation\">,</span> FileAccess<span class=\"token punctuation\">.</span>Write<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">CopyToAsync</span><span class=\"token punctuation\">(</span>destStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        str <span class=\"token operator\">+=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"\\r\\nfileName=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">fileName</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\\r\\n</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">fileLength</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">=fileLength\"</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        str <span class=\"token operator\">+=</span> <span class=\"token string\">\"no file\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss.fff\"</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">age</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> \\r\\n</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">str</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"DelegatingHandlerhttp_571\"></a>七、使用DelegatingHandler实现http请求拦截管道</h2>\n<p>类比asp.net core的请求管道，借助DelegatingHandler我们也能在HttpClient中轻松实现中间拦截。</p>\n<p>拦截的核心是使用DelegatingHandler，它继承自HttpMessageHandler，并且封装了一个HttpMessageHandler，这样就允许我们对HttpMessageHandler进行层层封装，每封装的一层就可认为是asp.net core中的中间件，封装完成后将最外层的DelegatingHandler交给HttpClient去使用便完成了构建过程。</p>\n<p>下面演示构造的两个中间件，拦截示意图：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d3666813cf2b4ea48132416a063ffe01.png\"/><br/> 代码如下：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> httpClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">InterceptAMessageHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">InterceptBMessageHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SocketsHttpHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> resposne <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">GetAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://www.baidu.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InterceptAMessageHandler</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">DelegatingHandler</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">InterceptAMessageHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpMessageHandler</span> innerHandler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">(</span>innerHandler<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>HttpResponseMessage<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">SendAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpRequestMessage</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> cancellationToken<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss.fff\"</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> InterceptAMessageHandler before Send\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">SendAsync</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> cancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss.fff\"</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> InterceptAMessageHandler after Send\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InterceptBMessageHandler</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">DelegatingHandler</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">InterceptBMessageHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpMessageHandler</span> innerHandler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">(</span>innerHandler<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>HttpResponseMessage<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">SendAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpRequestMessage</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> cancellationToken<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss.fff\"</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> InterceptBMessageHandler before Send\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">SendAsync</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> cancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss.fff\"</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> InterceptBMessageHandler after Send\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行效果：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1d79e62c994c4d979a44c4fc73543740.png\"/></p>\n<h2><a id=\"FAQ_624\"></a>八、FAQ</h2>\n<h3><a id=\"81__Authorization__625\"></a>8.1 向请求头里放非标准的 Authorization 引发报错</h3>\n<blockquote>\n<p>参照：<a href=\"https://www.e-learn.cn/topic/3951198\">https://www.e-learn.cn/topic/3951198</a></p>\n</blockquote>\n<p>比如：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpRequestMessage</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    Method <span class=\"token operator\">=</span> HttpMethod<span class=\"token punctuation\">.</span>Get<span class=\"token punctuation\">,</span>\n    RequestUri <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Uri</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test:123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// System.FormatException:“The format of value 'test:123' is invalid.”</span>\n</code></pre>\n<p>解决办法：使用 <code>req.Headers.TryAddWithoutValidation(\"Authorization\",\"test:123\")</code></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-17 14:22:50", "summary": "环境：一、在中发送请求的方式本部分参考：《之间的区别与抉择》在中常见发送请求的方式如下：：平台原生提供，这是创建者最初开发用于使用请求的标准类。使用可以让开发者控制请求响应流程的各个方面，如。关于使用"}