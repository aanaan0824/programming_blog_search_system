{"blogid": "125103432", "writerAge": "码龄3年", "writerBlogNum": "59", "writerCollect": "241", "writerComment": "69", "writerFan": "1952", "writerGrade": "3级", "writerIntegral": "748", "writerName": "SteveDraw", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125103432.jpg", "writerRankTotal": "29562", "writerRankWeekly": "6033", "writerThumb": "77", "writerVisitNum": "86468", "blog_read_count": "3212", "blog_time": "已于 2022-07-16 10:17:29 修改", "blog_title": "C#调用OpenCV（C++原版）思路和实现方法（小白教程）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录：</h3>\n<ul><li><a href=\"#_1\">前言：</a></li><li><a href=\"#OpenCV_5\">一，下载和安装OpenCV到本地</a></li><li><a href=\"#_13\">二，主要原理</a></li><li><a href=\"#CCOpenCVdll_24\">三，C++生成供C#调用OpenCV的.dll</a></li><li><ul><li><a href=\"#1_29\">1.添加头文件</a></li><li><a href=\"#2cpp_40\">2.添加cpp文件</a></li><li><a href=\"#3_77\">3.添加模块定义文件</a></li></ul>\n</li><li><a href=\"#Cdll_103\">四，建立C#调用.dll的控制台程序</a></li><li><a href=\"#_139\">五，参考资料推荐</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>前言：</h1>\n<blockquote>\n<p>原本想着用OpenCV的话，只需考虑在编程语言环境下调用对应的库（包）就行了，因为之前也是做了一个利用python（OpenCV-python接口）下编写了一个停车场空位识别项目，但是没接触过实际的我，天真地认为这些语言封装库接口已经可以实现原本OpenCV的所有功能，但是看了面试题目和网上查询相关资料，发现语言封装库其实或多或少是原版OpenCV的各种阉割版，毕竟也可以理解：在为各种语言封装时肯定会牺牲本身的一些接口和API功能！<br/> 因此，原版的OpenCV非常强大，继承了C的快速和C++优秀的图形处理性能，由于C++和C语法糖和应用项目化其实没有.net C#好，实际的生成环境更是一种特殊的情况：用C#编写脚本（项目）调用原版的OpenCV（C++）!<br/> 为了展示和记录特意写了这一博文，希望大家能多多勘误！</p>\n</blockquote>\n<h1><a id=\"OpenCV_5\"></a>一，下载和安装OpenCV到本地</h1>\n<p><mark>为什么要本地安装呢？因为既然调用那么必须是要获得相应OpenCV接口的调头文件或者C++文件！</mark></p>\n<blockquote>\n<p>下载可到<a href=\"https://opencv.org/releases/\">官网</a>去下载，主要看看是什么对应的系统环境（windows,Linux，Mac OX）!<br/> 由于你的VS版本要与OpenCV的SDK文件对应（比如我的VS2019是要VC15或16）,这里是<a href=\"https://blog.csdn.net/HW140701/article/details/92850154\">VS-VC对应版本表</a><br/> 下载文件安装程序其实可以发现，该版本是269MB,实际安装到文件目录后是2点多个G!(<mark>可见里面的功能和文件是多么丰富的！随着版本的更新，这只会越庞大，所以要留足内存哦！</mark>)<br/> 实际配置方法可参考我写的这个：<a href=\"https://blog.csdn.net/SteveZhou212/article/details/125109387?spm=1001.2014.3001.5502\">VS2019如何永久配置本地OpenCV4.5.5使用</a><br/> <mark>配置必须完成，不然后面的步骤根本没办法做！</mark></p>\n</blockquote>\n<h1><a id=\"_13\"></a>二，主要原理</h1>\n<p>c#和C++虽然两者衍生自C语言爸爸，两者更是有多个类似的地方，但是终究语言环境的差异，这两者并不能互通，但是做好接口和生成和调用.dll（动态链接库）就可以无缝连接，这也是目前C#做视觉应用的一个常用点！</p>\n<ul><li>C#调用OpenCV（c++的.dll主要有两种常见的方式：托管和非托管两种形式！</li><li>非托管的形式即是采用[DllImport]的形式，这种形式只能调用的C++的函数，适合用于简单的图形处理调用，这也是非常便捷的方法，由于只是演示C#调用OpenCV（c++的.dll）,本文主要采用该方法！</li><li>托管的形式用的是ref，可以调用C++类中的方法，适用于处理比较复杂的图形处理，特别是封装成类和方法，使得C#调用时处理复杂情景更好！</li></ul>\n<blockquote>\n<p>开发环境：与上文配置vs与opencv一样！</p>\n<ul><li>windows10专业版</li><li>opencv4.5.5</li><li>VS2019</li><li>C# .NET Framework4.5控制台应用程序</li></ul>\n</blockquote>\n<h1><a id=\"CCOpenCVdll_24\"></a>三，C++生成供C#调用OpenCV的.dll</h1>\n<p>既然要用到第一种方法那么就要建立一个C++空项目来生成.dll文件！</p>\n<ul><li>在vs2019下，新建空项目：<br/> <img alt=\"在这里插入图片描述\" height=\"600\" src=\"..\\..\\static\\image\\a6f95d461eb24f248772ef9720964f37.png\" width=\"800\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\708fbc1130884089a95cd4acd52f1e58.png\"/></li></ul>\n<h2><a id=\"1_29\"></a>1.添加头文件</h2>\n<p>点击头文件夹，右键点击添加-&gt;添加新建项（或者点击头文件后，快捷键Ctrl+Shift+A）<br/> <img alt=\"在这里插入图片描述\" height=\"450\" src=\"..\\..\\static\\image\\f8bdb5565fc24b53904e857543cb687e.png\" width=\"500\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\442930c2303a4c638b847d5d70455272.png\"/><br/> 接着添加demo.h内容：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span>\n<span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>dllexport<span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> <span class=\"token function\">toCV</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>上面得说明下的是，toCV();是我们后面在demo.cpp文件添加的返回为空的调用函数名，可根据自己实际添加！</p>\n</blockquote>\n<h2><a id=\"2cpp_40\"></a>2.添加cpp文件</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1d49ecae67da4c55868cc1e54e2365fd.png\" width=\"450\"/></p>\n<ul><li>在demo.cpp文件下添加以下代码：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"opencv2/highgui/highgui.hpp\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"opencv2/imgcodecs/legacy/constants_c.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;opencv2/opencv.hpp&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"demo.h\"</span>  <span class=\"token comment\">//这里对应你新建的那个头文件</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> cv<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">toCV</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//从文件中读入图像</span>\n    Mat img <span class=\"token operator\">=</span> <span class=\"token function\">imread</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.jpg\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Mat dst<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//如果读入图像失败</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打开图片失败！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">namedWindow</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RGB\"</span><span class=\"token punctuation\">,</span> WINDOW_AUTOSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">imshow</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RGB\"</span><span class=\"token punctuation\">,</span> img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cvtColor</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">,</span> COLOR_BGR2GRAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">namedWindow</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GRAY\"</span><span class=\"token punctuation\">,</span> WINDOW_AUTOSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">imshow</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GRAY\"</span><span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"测试成功！成功把rgb图转成灰度图！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//此函数等待按键，按键盘任意键就返回</span>\n    <span class=\"token function\">waitKey</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>以上代码主要是将一个RGB原图转化为灰度图，并打印输出成功提示和两张图的窗口的函数toCV(),与前面的demo.h那个名称对应！</p>\n</blockquote>\n<h2><a id=\"3_77\"></a>3.添加模块定义文件</h2>\n<p>点击源文件夹，右键点击添加-&gt;添加新建项（或者点击头文件后，快捷键Ctrl+Shift+A）<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b523e5d8421d44f6a8c34c1d6bfe1d21.png\"/><br/> 在Source.def下添加下面代码：</p>\n<pre><code class=\"prism language-cpp\">LIBRARY demo\n  EXPORTS toCV\n\n</code></pre>\n<blockquote>\n<p>这里说明下：</p>\n<ul><li>LIBRARY 后跟着你的项目名（比如demo）；</li><li>EXPORTS 后跟着你的调用函数名（比如toCV）;</li></ul>\n</blockquote>\n<blockquote>\n<p>接着，先保存所有文件，看看有误语法错误等提示，如果没有，再按下面指示操作！<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\545893b3f6b242fb894f2bbeeab46198.png\"/><br/> 点击vs最顶的菜单-&gt;项目-&gt;对应的项目名属性<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\757fdb069ee24cee86b11c231d80d586.png\"/></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f5b399b681cd4168b2d4f4f793b5dbc8.png\"/></p>\n<blockquote>\n<p>完成上面配置方可点击重新生成解决方案，不然会报错，常见是上面配置类型没有选择.dll而是选择了.exe！<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f9d7a9c9678f4579b850e53b1e9d3be2.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c740cfbe9276438aadbf51efa148b93d.png\"/></p>\n</blockquote>\n<h1><a id=\"Cdll_103\"></a>四，建立C#调用.dll的控制台程序</h1>\n<ul><li>你可以选择其他应用项目，只要能利用C++.dll中的tocv函数都行，为了简单演示，只是新建.net 控制台程序！<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d679690bfc8b4f19a7e11bf2d8f2c1dc.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e53fdb2e371b4c4babae89b37ae73c90.png\"/></li></ul>\n<blockquote>\n<p>完成配置后，点击启动程序（此时程序代码是默认给出的，可先不用管），让项目生成x64的debug文件先！接着把所需图片和C++生成的.dll放到该目录下，如下所示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dc1a36625a924697ac687c417fe267ab.png\"/></p>\n</blockquote>\n<ul><li>接着添加Program.cs的代码：</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Linq<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">static</span> System<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>InteropServices<span class=\"token punctuation\">;</span><span class=\"token comment\">//由于使用非托管，一定得添加这个</span>\n\n<span class=\"token keyword\">namespace</span> App\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token punctuation\">[</span><span class=\"token function\">DllImport</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo.dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>    \n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">extern</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">toCV</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">toCV</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">ReadKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<blockquote>\n<p>再点击启动程序，即可出现以下画面！<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\75febf4949fb4d608fffb101562b7b38.png\"/><br/> 接着想说的是，由于OpenCV版本太新，里面应用的函数名参数配置，头文件引用等，都会发生很大的变化，当你用的是新版本，vs中使用一般的图形处理函数可能函数构造和引用都发生很大变化，vs会提示引用文件不存在或函数构造无标识，所以不要怀疑，得查看官方源码或文档，及时替换，另一种解决方式是，使用旧版本的OpenCV，这样变化不多，而且资料很多！</p>\n</blockquote>\n<h1><a id=\"_139\"></a>五，参考资料推荐</h1>\n<ul><li><a href=\"https://blog.csdn.net/SteveZhou212/article/details/125109387?spm=1001.2014.3001.5501\">VS2019如何永久配置本地OpenCV4.5.5使用</a></li><li><a href=\"https://blog.csdn.net/zhangzhe_0305/article/details/78399224?spm=1001.2014.3001.5506\">如何通过C#调用OpenCV函数（自制OpenCV的c++ dll文件）</a></li><li><a href=\"https://blog.csdn.net/yeyang911/article/details/51158621?spm=1001.2014.3001.5506\">C#调用 opencv cv::Mat 图像, 采用折中方法</a></li><li><a href=\"https://blog.csdn.net/Timy_/article/details/82385310?spm=1001.2014.3001.5506\">自制OpenCV的C++ dll文件，C#调用OpenCV函数</a></li><li><a href=\"https://www.cnblogs.com/zkwarrior/p/4871114.html\">OpenCV C++如何使RGB图像变为灰度图像</a></li><li><a href=\"https://blog.css8.cn/post/10595196.html\">C#调用C++、Opencv的Dll</a></li><li>最后附上该例程的项目文件，直接点击下载即可:<a href=\"https://download.csdn.net/download/SteveZhou212/85534587\">C#调用C++文件（OpenCV）思路和实现方法（小白教程）的例程文件</a></li></ul>\n<blockquote>\n<p>最后文中若有不足，敬请批评指正！</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 1, "csharp": 1, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-07-16 10:17:29", "summary": "目录：前言：一，下载和安装到本地二，主要原理三，生成供调用的添加头文件添加文件添加模块定义文件四，建立调用的控制台程序五，参考资料推荐前言：原本想着用的话，只需考虑在编程语言环境下调用对应的库包就行了"}