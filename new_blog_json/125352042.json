{"blogid": "125352042", "writerAge": "码龄4年", "writerBlogNum": "189", "writerCollect": "962", "writerComment": "95", "writerFan": "1216", "writerGrade": "5级", "writerIntegral": "3140", "writerName": "人工智睿", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125352042.jpg", "writerRankTotal": "9024", "writerRankWeekly": "12240", "writerThumb": "248", "writerVisitNum": "168675", "blog_read_count": "1456", "blog_time": "已于 2022-06-19 13:01:50 修改", "blog_title": "牛客C++笔试ACM模式输入输出练习", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>平时用力扣刷题，换成牛客这种需要打印输出结果对比判定的OJ不是很习惯，所以特别练习一下。尤其是对于8、9、10部分关于字符串的。</p>\n<p>”纸上得来终觉浅，绝知此事要躬行“：<a href=\"https://ac.nowcoder.com/acm/contest/5657#question\">练习代码</a></p>\n<p>注意：变量在定义时最好就初始化，防止意想不到的bug<br/> </p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#1__6\">1 不知道多少组</a></li><li><a href=\"#2__34\">2 已知输入组数</a></li><li><a href=\"#3_0_67\">3 未知多组+结束条件+0结束</a></li><li><a href=\"#4_n_96\">4 未知多组+组内给定n数据</a></li><li><a href=\"#5_tn_132\">5 t组输入+组内给定n数据</a></li><li><a href=\"#6_n_165\">6 未知多组+组内n数据</a></li><li><a href=\"#7__193\">7 未知多组+空格隔开的未知多数</a></li><li><a href=\"#8__n_236\">8 n个空格隔开的字符串</a></li><li><a href=\"#9__274\">9 未知多行+行内空格分开的字符</a></li><li><a href=\"#10__324\">10 未知多行+行内逗号隔开</a></li><li><a href=\"#11__381\">11 格局、自省</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"1__6\"></a>1 不知道多少组</h2>\n<p>输入：</p>\n<ul><li>输入包括两个正整数a,b(1 &lt;= a, b &lt;= 1000),输入数据包括多组。</li></ul>\n<p>输出：</p>\n<ul><li>输出a+b的结果</li></ul>\n<p>分析：</p>\n<ul><li>不知道具体有多少组，所以外层的while循环应该在接收不到输入时停止 \n  <ul><li><code>while(cin&gt;&gt;a&gt;&gt;b)</code></li></ul> </li><li>每一组结果之间要换行 \n  <ul><li><code>cout&lt;&lt;a+b&lt;&lt;endl;</code></li></ul> </li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cin<span class=\"token operator\">&gt;&gt;</span>a<span class=\"token operator\">&gt;&gt;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">+</span>b<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"2__34\"></a>2 已知输入组数</h2>\n<p>输入描述:</p>\n<ul><li>输入第一行包括一个数据组数t(1 &lt;= t &lt;= 100)</li><li>接下来每行包括两个正整数a,b(1 &lt;= a, b &lt;= 1000)</li></ul>\n<p>输出描述：</p>\n<ul><li>输出a+b的结果</li></ul>\n<p>分析：</p>\n<ul><li> <p>已知组数n了，直接循环n次，在循环体中处理输出逻辑</p>\n<ul><li><code>while(n--){}</code></li></ul> </li><li> <p>输出之间换行<code>cout&lt;&lt;a+b&lt;&lt;\"\\n\";</code></p> </li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">&gt;&gt;</span>n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span>\n        cin<span class=\"token operator\">&gt;&gt;</span>a<span class=\"token operator\">&gt;&gt;</span>b<span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">+</span>b<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"3_0_67\"></a>3 未知多组+结束条件+0结束</h2>\n<p>输入描述:</p>\n<ul><li>输入包括两个正整数a,b(1 &lt;= a, b &lt;= 10^9)</li><li>输入数据有多组</li><li>如果输入为0 0则结束输入</li></ul>\n<p>输出描述:</p>\n<ul><li>输出a+b的结果</li></ul>\n<p>思考：</p>\n<ul><li>未知多组+两个输入均为0结束的条件 \n  <ul><li><code>while(cin&gt;&gt;a&gt;&gt;b &amp;&amp; （a||b）</code></li></ul> </li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin<span class=\"token operator\">&gt;&gt;</span>a<span class=\"token operator\">&gt;&gt;</span>b <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">||</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">+</span>b<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"4_n_96\"></a>4 未知多组+组内给定n数据</h2>\n<p>输入描述:</p>\n<ul><li>输入数据包括多组。</li><li>每组数据一行,每行的第一个整数为整数的个数n(1 &lt;= n &lt;= 100), n为0的时候结束输入。</li><li>接下来n个正整数,即需要求和的每个正整数。</li></ul>\n<p>输出描述:</p>\n<ul><li>每组数据输出求和的结果</li></ul>\n<p>思路：</p>\n<ul><li>未知多组，每组中的第一个数n决定了后面的走向，所以外层循环的条件输入为n <strong>且</strong> n为0时结束输入 \n  <ul><li><code>while(cin&gt;&gt;n &amp;&amp; n!=0)</code></li></ul> </li><li>在循环体内部,根据n的数量处理，循环n次，输入到数组nums（跳出循环后处理）或tmp（在此循环内部累加）中 \n  <ul><li><code>while(n--) { }</code></li></ul> </li><li>输出换行</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cin <span class=\"token operator\">&gt;&gt;</span> n <span class=\"token operator\">&amp;&amp;</span> n <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            cin <span class=\"token operator\">&gt;&gt;</span> tmp<span class=\"token punctuation\">;</span>\n            sum <span class=\"token operator\">+=</span> tmp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> sum <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"5_tn_132\"></a>5 t组输入+组内给定n数据</h2>\n<p>输入描述:</p>\n<ul><li>输入的第一行包括一个正整数t(1 &lt;= t &lt;= 100), 表示数据组数。</li><li>接下来t行, 每行一组数据。</li><li>每行的第一个整数为整数的个数n(1 &lt;= n &lt;= 100)。</li><li>接下来n个正整数, 即需要求和的每个正整数。</li></ul>\n<p>输出描述:</p>\n<ul><li>每组数据输出求和的结果</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">&gt;&gt;</span>t<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n        cin<span class=\"token operator\">&gt;&gt;</span>n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            cin<span class=\"token operator\">&gt;&gt;</span>tmp<span class=\"token punctuation\">;</span>\n            sum <span class=\"token operator\">+=</span> tmp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>sum<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"6_n_165\"></a>6 未知多组+组内n数据</h2>\n<p>输入描述:</p>\n<ul><li>输入数据有多组, 每行表示一组输入数据。</li><li>每行的第一个整数为整数的个数n(1 &lt;= n &lt;= 100)。</li><li>接下来n个正整数, 即需要求和的每个正整数。</li></ul>\n<p>输出描述:</p>\n<ul><li>每组数据输出求和的结果</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin<span class=\"token operator\">&gt;&gt;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            cin<span class=\"token operator\">&gt;&gt;</span>tmp<span class=\"token punctuation\">;</span>\n            sum <span class=\"token operator\">+=</span> tmp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>sum<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"7__193\"></a>7 未知多组+空格隔开的未知多数</h2>\n<p>输入描述:</p>\n<ul><li>输入数据有多组, 每行表示一组输入数据。</li><li>每行不定有n个整数，空格隔开。(1 &lt;= n &lt;= 100)。</li></ul>\n<p>输出描述:</p>\n<ul><li>每组数据输出求和的结果</li></ul>\n<p>思考：</p>\n<p>不知道多少组也不知道组里多少数，我们能把握的就是一组是一行，组内是空格分隔的</p>\n<ul><li>每组是由<code>'\\n'</code>区分</li><li>cin自动过滤空格</li></ul>\n<p>根据上面的规则，化整为零，while循环条件是输入单个数据</p>\n<ul><li>在循环体内部，用<code>cin.get()</code>继续获取下一个字符 \n  <ul><li>如果是换行符，则执行输出逻辑</li></ul> </li></ul>\n<p>注：</p>\n<ul><li>cin是流对象，&gt;&gt;自动过滤空白符 tab 换行符</li><li>cin.get()得到的是char类型，所以判断<code>'\\n'</code>用单引号！</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> cur<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cin<span class=\"token operator\">&gt;&gt;</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        sum <span class=\"token operator\">+=</span> cur<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            cout<span class=\"token operator\">&lt;&lt;</span>sum<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n            sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"8__n_236\"></a>8 n个空格隔开的字符串</h2>\n<p>输入描述:</p>\n<ul><li>输入有两行，第一行n</li><li>第二行是n个字符串，字符串之间用空格隔开</li></ul>\n<p>输出描述:</p>\n<ul><li>输出一行排序后的字符串，空格隔开，<strong>无结尾空格</strong></li></ul>\n<p>思路：</p>\n<ul><li>读取n，设置n大小的vector，for 循环n, cin&gt;&gt;</li><li>输出时，索引i==0时只输出数，其余情况输出空格+数</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">&gt;&gt;</span>n<span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> <span class=\"token function\">ans</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    string tmp<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        cin<span class=\"token operator\">&gt;&gt;</span>ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            cout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"9__274\"></a>9 未知多行+行内空格分开的字符</h2>\n<p>输入描述:</p>\n<ul><li>多个测试用例，每个测试用例一行。</li><li>每行通过空格隔开，有n个字符，n＜100</li></ul>\n<p>输出描述:</p>\n<ul><li>对于每组测试用例，输出一行排序过的字符串</li><li>每个字符串通过空格隔开</li></ul>\n<p>思路：</p>\n<ul><li>化整为零,循环输入单个字符串cur</li><li>循环体内加入到vector中</li><li>在函数体内cin.get()=='\\n’判断是否换行 \n  <ul><li>是，则处理这一行数据的输出逻辑<br/> 注：打印的时候注意最后一个字符串后面没有空格</li></ul> </li><li>可以单独写一个printv函数，提高代码可读性</li><li>还要注意换行</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">printv</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> strs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>strs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            cout<span class=\"token operator\">&lt;&lt;</span>strs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span>strs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    string cur<span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> strs<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin<span class=\"token operator\">&gt;&gt;</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        strs<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>strs<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">printv</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            strs<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"10__324\"></a>10 未知多行+行内逗号隔开</h2>\n<p>输入描述:</p>\n<ul><li>多个测试用例，每个测试用例一行。</li><li>每行通过,隔开，有n个字符，n＜100</li></ul>\n<p>输出描述:</p>\n<ul><li>对于每组用例输出一行排序后的字符串，用’,'隔开，无结尾空格</li></ul>\n<p>思考：</p>\n<ul><li>循环输入str，读入每行</li><li>对循环体内，首先要根据逗号将str分解为多个”cur“字符串，加入到<code>vector&lt;string&gt; strs</code>当中 \n  <ul><li>遍历str的每个字符str[i]，判断是否为逗号 \n    <ul><li>否，<code>cur+=str[i];</code></li><li>是，<code>strs.emplace_back(cur);</code>，注意还要记得清空cur为后续循环用 <code>cur.clear();</code></li><li>注意:遍历结束后，重复\"是\"部分的代码，将没有逗号结尾的最后一组也加入<code>strs</code></li></ul> </li></ul> </li><li>得到的<code>strs</code>就是我们要处理的输入，随后编写输出逻辑</li><li>单独写个函数printv( )打印输出</li><li>注意,最后还要清空strs和cur，进入下一次循环</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">printv</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> <span class=\"token operator\">&amp;</span> strs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>strs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> strs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\",\"</span><span class=\"token operator\">&lt;&lt;</span> strs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    string str<span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> strs<span class=\"token punctuation\">;</span>\n    string cur<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cin<span class=\"token operator\">&gt;&gt;</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token char\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n               cur <span class=\"token operator\">+=</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n                strs<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                cur<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        strs<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cur<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>strs<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printv</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        strs<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"11__381\"></a>11 格局、自省</h2>\n<p>输入描述:</p>\n<ul><li>输入有多组测试用例，每组空格隔开两个整数</li></ul>\n<p>输出描述:</p>\n<ul><li>对于每组数据输出一行两个整数的和</li></ul>\n<p>思考：</p>\n<ul><li>看到上面简单的情况直接手撕了，但还有错误</li><li>我又考虑了换行，最后一行不换行，但也错了</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">&gt;&gt;</span>a<span class=\"token operator\">&gt;&gt;</span>b<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cin<span class=\"token operator\">&gt;&gt;</span>a<span class=\"token operator\">&gt;&gt;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>正当我怀疑题目出错的时候，我突然意识到自己的盲目性</p>\n<ul><li>看到整数想都没想直接定义了int整型，但没有考虑其范围 \n  <ul><li>题目的范围是：<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6bc50cfe6b694a27ada032bb443582ed.png\"/></li></ul> </li></ul>\n<p>**当头暴击！！！！**所以，如果自己认为自己写的算法没有问题，测试也没有问题，但是提交还是错误的时候，考虑考虑漏掉了什么corner case，考虑考虑自己选择的变量是不是”格局“小了！！！</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">&gt;&gt;</span>a<span class=\"token operator\">&gt;&gt;</span>b<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cin<span class=\"token operator\">&gt;&gt;</span>a<span class=\"token operator\">&gt;&gt;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-06-19 13:01:50", "summary": "平时用力扣刷题，换成牛客这种需要打印输出结果对比判定的不是很习惯，所以特别练习一下。尤其是对于、、部分关于字符串的。纸上得来终觉浅，绝知此事要躬行：练习代码注意：变量在定义时最好就初始化，防止意想不到"}