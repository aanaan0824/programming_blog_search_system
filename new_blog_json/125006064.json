{"blogid": "125006064", "writerAge": "码龄8年", "writerBlogNum": "112", "writerCollect": "349", "writerComment": "36", "writerFan": "57", "writerGrade": "5级", "writerIntegral": "2280", "writerName": "MelonSuika", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125006064.jpg", "writerRankTotal": "8841", "writerRankWeekly": "8853", "writerThumb": "129", "writerVisitNum": "117251", "blog_read_count": "3637", "blog_time": "已于 2022-06-04 19:16:11 修改", "blog_title": "一篇看懂C#中的Task任务_初级篇", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_1\">一、前言</a></li><li><a href=\"#_28\">二、认识</a></li><li><ul><li><a href=\"#21__31\">2.1. 基于任务的多线程编程</a></li><li><a href=\"#22__43\">2.2. 隐式地创建并运行一个任务</a></li><li><a href=\"#23__56\">2.3. 显示地创建并运行一个任务</a></li><li><ul><li><a href=\"#231_Task_59\">2.3.1. Task常规使用</a></li><li><a href=\"#232_TaskRun_88\">2.3.2. Task.Run()</a></li><li><a href=\"#233_TaskFactoryStartNew_94\">2.3.3. Task.Factory.StartNew()</a></li><li><a href=\"#234_Task_TResult__146\">2.3.4. 带有返回值的Task&lt; TResult &gt;</a></li><li><a href=\"#235_lambda_186\">2.3.5. 结合lambda使用时出现的特殊情况</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_327\">三、总结</a></li><li><a href=\"#_334\">四、参考资料</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>一、前言</h1>\n<p>    在.NET平台使用C#进行编程时，遇到了并行操作的需求，于是上网一搜多线程，一个非常简单语句出现了：</p>\n<pre><code class=\"prism language-csharp\">Task<span class=\"token punctuation\">.</span>Factory<span class=\"token punctuation\">.</span><span class=\"token function\">StartNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>还有，</p>\n<pre><code class=\"prism language-csharp\">Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>    于是，拿来一用，往花括号中填入一些业务代码。<br/> “嗯，确实是多线程。”<br/>     我在其他平台使用多线程的印象当中，使用多线程都是先建一个线程对象，然后往里面填许多参数，然后还要手动启停。</p>\n<pre><code class=\"prism language-c\">\tThread thread <span class=\"token operator\">=</span> new <span class=\"token function\">Thread</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">,</span> 一堆看不懂的参数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tthread<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>中间省略一万步\n\tthread<span class=\"token punctuation\">.</span><span class=\"token function\">Abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>    相比之下，.net平台这种极简的多线程操作方法对新手真是友好。（毕竟是微软的嘛，非常善于对底层复杂应用抽象，到应用层程序员这一侧，只管用就行了）。<br/>     随着项目的进行，并行操作越来越复杂，我也愈来愈觉得不能就这么简单一用就完事了，得稍微了解下它的特性以及使用时的注意项。</p>\n<h1><a id=\"_28\"></a>二、认识</h1>\n<p>    于是上网搜了下C# Task使用，大部分都是翻译了一下<a href=\"https://docs.microsoft.com/en-gb/dotnet/standard/parallel-programming/task-based-asynchronous-programming\">微软官方文档</a>里的东西（而且是自带的机翻）。那既然如此，我也试着结合官方文档来理解一下。<br/>     <strong>下文出现的Task、task和任务基本上就是指一个东西</strong>，结合语境体会，不过一般首字母大写根据微软的习惯应该是表示类。</p>\n<h2><a id=\"21__31\"></a>2.1. 基于任务的多线程编程</h2>\n<p>    Task并行库（就是你用Task这个东西的相关库，全名Task Parallel Library，简称TPL）是基于Task这个概念的，它代表了一个并行操作。也确实，如果你对一个不玩编程的人说某个线程xxx，人家可能听不懂，线程明显是个专业术语嘛；如果说任务，是不是感觉更贴近现实了呢。<br/>     某种程度上来说，一个<strong>task类似于thread（线程）或者ThreadPool工作项</strong>（线程池的一项嘛，还是线程），但是它处在一个更高的抽象层面上（毕竟本质上还是线程嘛？大概吧）。<br/>     接着，文档还亲民地解释了一下，“并行任务”这个术语指的是一个或者多个独立的任务同时进行。<br/>     Task提供了两点基本的好处：</p>\n<ul><li>更效率且更灵活的使用系统资源。<br/> 在背后呢（通常说在底层实现上），任务是排在线程池当中的，并且它用了一些算法（决策、调整线程数量和提供了负载均衡以加大吞吐量）进行增强。这使得任务相对轻量级，你可以创建许多任务使得并行操作更精细化。</li><li>相比使用线程或者线程池，有更多的程序模块可以使用。<br/> 任务和平台框架（指.NET这个平台吧）提供了丰富的API支持waiting, cancellation, continuations, robust exception handling, detailed status, custom scheduling等功能。</li></ul>\n<p>    因此，对于在.NET上使用多线程、异步操作和并行代码的你来说，TPL是更好的API（也就是说，在.NET下，微软非常建议你使用Task）。<br/>     看完这一段，很明显感觉到微软在说它好用，但是底层实现上是一笔带过的，就讲了<strong>它底层是用了线程池</strong>那一套的，并且有所优化（我开始有点理解，为什么大家都说，微软的东西好入门，但是难深入了。因为确实好用易上手，但是细节屏蔽太多了）。</p>\n<h2><a id=\"22__43\"></a>2.2. 隐式地创建并运行一个任务</h2>\n<p>    Parallel.Invoke方法可以很便捷地让你同时运行任意数量的任意语句。仅仅需要为每个工作条目（item of work，或者说工作项）传递一个Action委托。创建这些委托最简单的方式是使用lambda表达式（这也是我一开始觉得task很简单的原因之一，因为不需要显示创建对象，用lambda就搞定了）。lambda表达式可以调用方法也可以添加代码行。下面的例子就展示了一个创建并启用两个同时运行任务的Invoke调用。</p>\n<pre><code class=\"prism language-csharp\">\tParallel<span class=\"token punctuation\">.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">DoSomeWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">DoSomeOtherWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>第一个任务表示通过lambda表达式调用了DoSomeWork方法，同理，第二个任务表示调用了DoSomeOtherWork。（温馨提示：如果你不了解lambda表达式，你可以先看看其他文章了解一下）。</p>\n<pre><code>备注：\n由Invoke在底层创建的任务（Task）实例数量并不是一定与委托（Delegate）的数量相等的。\nTPL可能会使用各种优化，尤其当有大量委托的时候。\n</code></pre>\n<p>    上面是一个隐式使用任务的例子，为了更好地控制任务的执行，你应该更明确地使用任务对象。</p>\n<h2><a id=\"23__56\"></a>2.3. 显示地创建并运行一个任务</h2>\n<p>    用System.Threading.Tasks.Task类表示的任务不会返回值。用System.Threading.Tasks.Task&lt;TResult&gt;的任务会返回一个值，它继承自Task类。task对象处理基本的底层细节并提供了在任务生命周期内可由调用线程访问的方法和属性。例如，你可以在任意时刻访问任务的状态（Status）属性，以确定它是否在运行、是否运行完成、是否被取消或者是否抛出了异常。TaskStatus枚举描述了各种状态。<br/> <img alt=\"任务状态\" src=\"..\\..\\static\\image\\27dc2279f5d342e796e7e944a3d3c661.png\"/></p>\n<h3><a id=\"231_Task_59\"></a>2.3.1. Task常规使用</h3>\n<p>    当你创建一个任务时，你给它一个用户委托，该委托内封装了任务要执行的代码。这个委托可以是一个有命名的委托也可以是匿名的，还可以是lambda表达式。lambda表达式可以包含命名方法的调用，在下面的例子中予以展示。注意这个例子包含了一个Task.Wait方法的调用，用以确保任务在控制台模式结束前完成执行。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">{<!-- --></span>\n      Thread<span class=\"token punctuation\">.</span>CurrentThread<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Main\"</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Create a task and supply a user delegate by using a lambda expression.</span>\n      <span class=\"token class-name\">Task</span> taskA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Task</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello from taskA.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// Start the task.</span>\n      taskA<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Output a message from the calling thread.</span>\n      Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello from thread '{0}'.\"</span><span class=\"token punctuation\">,</span>\n                        Thread<span class=\"token punctuation\">.</span>CurrentThread<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      taskA<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// The example displays output like the following:</span>\n<span class=\"token comment\">//       Hello from thread 'Main'.</span>\n<span class=\"token comment\">//       Hello from taskA.</span>\n</code></pre>\n<h3><a id=\"232_TaskRun_88\"></a>2.3.2. Task.Run()</h3>\n<p>    你也可以使用Task.Run来一次性创建并启动一个任务。为了管理这个任务，Run方法使用了默认的任务调度器，无论这个任务调度器是否与当前线程相关。<strong>当你不需要对任务的创建和调度进行太多控制时，Run方法是更适用一些。</strong>（明显相对于上面的方式，Run将创建和启动合并为一步了）</p>\n<pre><code class=\"prism language-csharp\">\t<span class=\"token class-name\">Task</span> taskA <span class=\"token operator\">=</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello from taskA.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"233_TaskFactoryStartNew_94\"></a>2.3.3. Task.Factory.StartNew()</h3>\n<p>    你还可以使用TaskFactory.StartNew来一次性创建并启动一个任务。当创建和调度不必分离并且<strong>你需要额外的任务创建配置项或者使用特定的调度器，又或者你需要传递额外的状态到任务</strong>（你可以通过Task.AsyncState属性回收 ）中时，<strong>你可以使用TaskFactory.StartNew方法</strong>。下面是一个例子：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomData</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">long</span></span> CreationTime<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> ThreadNum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token class-name\">Task<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> taskArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Task</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> taskArray<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\ttaskArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Task<span class=\"token punctuation\">.</span>Factory<span class=\"token punctuation\">.</span><span class=\"token function\">StartNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token class-name\">CustomData</span> data <span class=\"token operator\">=</span> obj <span class=\"token keyword\">as</span> <span class=\"token class-name\">CustomData</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t\t\tdata<span class=\"token punctuation\">.</span>ThreadNum <span class=\"token operator\">=</span> Thread<span class=\"token punctuation\">.</span>CurrentThread<span class=\"token punctuation\">.</span>ManagedThreadId<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CustomData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>Name <span class=\"token operator\">=</span> i<span class=\"token punctuation\">,</span> CreationTime <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span>Ticks<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tTask<span class=\"token punctuation\">.</span><span class=\"token function\">WaitAll</span><span class=\"token punctuation\">(</span>taskArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> task <span class=\"token keyword\">in</span> taskArray<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> data <span class=\"token operator\">=</span> task<span class=\"token punctuation\">.</span>AsyncState <span class=\"token keyword\">as</span> <span class=\"token class-name\">CustomData</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\t\t\t\tConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Task #{0} created at {1}, ran on thread #{2}.\"</span><span class=\"token punctuation\">,</span>\n                              data<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>CreationTime<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>ThreadNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// The example displays output like the following:</span>\n<span class=\"token comment\">//       Task #0 created at 635116412924597583 on thread #3.</span>\n<span class=\"token comment\">//       Task #1 created at 635116412924607584 on thread #4.</span>\n<span class=\"token comment\">//       Task #3 created at 635116412924607584 on thread #4.</span>\n<span class=\"token comment\">//       Task #4 created at 635116412924607584 on thread #4.</span>\n<span class=\"token comment\">//       Task #2 created at 635116412924607584 on thread #3.</span>\n<span class=\"token comment\">//       Task #6 created at 635116412924607584 on thread #3.</span>\n<span class=\"token comment\">//       Task #5 created at 635116412924607584 on thread #4.</span>\n<span class=\"token comment\">//       Task #8 created at 635116412924607584 on thread #4.</span>\n<span class=\"token comment\">//       Task #7 created at 635116412924607584 on thread #3.</span>\n<span class=\"token comment\">//       Task #9 created at 635116412924607584 on thread #4.</span>\n</code></pre>\n<h3><a id=\"234_Task_TResult__146\"></a>2.3.4. 带有返回值的Task&lt; TResult &gt;</h3>\n<p>    Task和Task&lt;TResult&gt;都暴露了一个静态的Factory属性，该属性返回一个默认的TaskFactory实例，以便调用Task.Factory.StartNew()方法。同样，在下面的例子中，因为任务都是 System.Threading.Tasks.Task&lt;TResult&gt;类型的，它们都有一个 Task&lt;TResult&gt;.Result属性，该属性包含了运算的结果。任务是异步运行的，可能以任意时序执行完。若Result属性在运行结束前被访问，这个属性会阻塞调用线程直到该值可访问。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Task<span class=\"token punctuation\">&lt;</span>Double<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> taskArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> Task<span class=\"token operator\">&lt;</span>Double<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span>Factory<span class=\"token punctuation\">.</span><span class=\"token function\">StartNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">DoComputation</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                     Task<span class=\"token operator\">&lt;</span>Double<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span>Factory<span class=\"token punctuation\">.</span><span class=\"token function\">StartNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">DoComputation</span><span class=\"token punctuation\">(</span><span class=\"token number\">100.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                     Task<span class=\"token operator\">&lt;</span>Double<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span>Factory<span class=\"token punctuation\">.</span><span class=\"token function\">StartNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">DoComputation</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Double</span><span class=\"token punctuation\">[</span>taskArray<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Double</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> taskArray<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            results<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> taskArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Result<span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0:N1} {1}\"</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                              i <span class=\"token operator\">==</span> taskArray<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">?</span> <span class=\"token string\">\"= \"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"+ \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            sum <span class=\"token operator\">+=</span> results<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0:N1}\"</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Double</span> <span class=\"token function\">DoComputation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span> start<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token class-name\">Double</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> <span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> <span class=\"token keyword\">value</span> <span class=\"token operator\">&lt;=</span> start <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">value</span> <span class=\"token operator\">+=</span> <span class=\"token number\">.1</span><span class=\"token punctuation\">)</span>\n         sum <span class=\"token operator\">+=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// The example displays the following output:</span>\n<span class=\"token comment\">//        606.0 + 10,605.0 + 100,495.0 = 111,706.0</span>\n</code></pre>\n<h3><a id=\"235_lambda_186\"></a>2.3.5. 结合lambda使用时出现的特殊情况</h3>\n<p>    当你使用lambda表达式创建一个委托时，你有权限访问在你源代码中此时可见的的所有变量。可是，在某些情况下，尤其是在循环中，一个lambda表达式无法如期捕获变量。它仅仅<strong>捕获了变量的引用</strong>，而不是每次迭代后发生变化的值（试着解释一下，任务的创建&amp;启动需要时间大于循环执行完的事件，又因为任务委托中取得的是i的引用，所以委托真正执行时，循环已经执行完，引用去取出来的值都是最后的值了）。下面的例子说明了这个问题。它传递了一个循环计数器（int i）给lambda表达式，该表达式实例化了一个CustomData对象并使用了这个循环计数器作为对象的标识符。正如样例的输出展示的那样，每个CustomData对象都有完全一样的标识符，但这并不是你所期望的。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomData</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">long</span></span> CreationTime<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Name<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> ThreadNum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token comment\">// Create the task object by using an Action(Of Object) to pass in the loop</span>\n      <span class=\"token comment\">// counter. This produces an unexpected result.</span>\n      <span class=\"token class-name\">Task<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> taskArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Task</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> taskArray<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n      <span class=\"token punctuation\">{<!-- --></span>\n         taskArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Task<span class=\"token punctuation\">.</span>Factory<span class=\"token punctuation\">.</span><span class=\"token function\">StartNew</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n         \t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CustomData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>Name <span class=\"token operator\">=</span> i<span class=\"token punctuation\">,</span> CreationTime <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span>Ticks<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            data<span class=\"token punctuation\">.</span>ThreadNum <span class=\"token operator\">=</span> Thread<span class=\"token punctuation\">.</span>CurrentThread<span class=\"token punctuation\">.</span>ManagedThreadId<span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Task #{0} created at {1} on thread #{2}.\"</span><span class=\"token punctuation\">,</span>\n            \tdata<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>CreationTime<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>ThreadNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      Task<span class=\"token punctuation\">.</span><span class=\"token function\">WaitAll</span><span class=\"token punctuation\">(</span>taskArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// The example displays output like the following:</span>\n<span class=\"token comment\">//       Task #10 created at 635116418427727841 on thread #4.</span>\n<span class=\"token comment\">//       Task #10 created at 635116418427737842 on thread #4.</span>\n<span class=\"token comment\">//       Task #10 created at 635116418427737842 on thread #4.</span>\n<span class=\"token comment\">//       Task #10 created at 635116418427737842 on thread #4.</span>\n<span class=\"token comment\">//       Task #10 created at 635116418427737842 on thread #4.</span>\n<span class=\"token comment\">//       Task #10 created at 635116418427737842 on thread #4.</span>\n<span class=\"token comment\">//       Task #10 created at 635116418427727841 on thread #3.</span>\n<span class=\"token comment\">//       Task #10 created at 635116418427747843 on thread #3.</span>\n<span class=\"token comment\">//       Task #10 created at 635116418427747843 on thread #3.</span>\n<span class=\"token comment\">//       Task #10 created at 635116418427737842 on thread #4.</span>\n</code></pre>\n<p>    在每次迭代时，你可以通过给任务的构造函数提供一个状态对象访问这该值。下面的样例程序通过在创建CustomData对象时使用循环计数器来修改了前面的例子，而CustomData对象又被传给了lambda表达式。正如样例输出的那样，现在每个CustomData对象都有唯一的基于循环计数器的标识符了。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomData</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">long</span></span> CreationTime<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Name<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> ThreadNum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token comment\">// Create the task object by using an Action(Of Object) to pass in custom data</span>\n      <span class=\"token comment\">// to the Task constructor. This is useful when you need to capture outer variables</span>\n      <span class=\"token comment\">// from within a loop.</span>\n      <span class=\"token class-name\">Task<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> taskArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Task</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> taskArray<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n         taskArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Task<span class=\"token punctuation\">.</span>Factory<span class=\"token punctuation\">.</span><span class=\"token function\">StartNew</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj <span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n         \t<span class=\"token class-name\">CustomData</span> data <span class=\"token operator\">=</span> obj <span class=\"token keyword\">as</span> <span class=\"token class-name\">CustomData</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            \t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            data<span class=\"token punctuation\">.</span>ThreadNum <span class=\"token operator\">=</span> Thread<span class=\"token punctuation\">.</span>CurrentThread<span class=\"token punctuation\">.</span>ManagedThreadId<span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Task #{0} created at {1} on thread #{2}.\"</span><span class=\"token punctuation\">,</span>\n            \tdata<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>CreationTime<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>ThreadNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n         <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CustomData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>Name <span class=\"token operator\">=</span> i<span class=\"token punctuation\">,</span> CreationTime <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span>Ticks<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      Task<span class=\"token punctuation\">.</span><span class=\"token function\">WaitAll</span><span class=\"token punctuation\">(</span>taskArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// The example displays output like the following:</span>\n<span class=\"token comment\">//       Task #0 created at 635116412924597583 on thread #3.</span>\n<span class=\"token comment\">//       Task #1 created at 635116412924607584 on thread #4.</span>\n<span class=\"token comment\">//       Task #3 created at 635116412924607584 on thread #4.</span>\n<span class=\"token comment\">//       Task #4 created at 635116412924607584 on thread #4.</span>\n<span class=\"token comment\">//       Task #2 created at 635116412924607584 on thread #3.</span>\n<span class=\"token comment\">//       Task #6 created at 635116412924607584 on thread #3.</span>\n<span class=\"token comment\">//       Task #5 created at 635116412924607584 on thread #4.</span>\n<span class=\"token comment\">//       Task #8 created at 635116412924607584 on thread #4.</span>\n<span class=\"token comment\">//       Task #7 created at 635116412924607584 on thread #3.</span>\n<span class=\"token comment\">//       Task #9 created at 635116412924607584 on thread #4.</span>\n</code></pre>\n<p>    该状态作为一个参数传给了任务的委托，并且它能够被任务对象用Task.AsyncState属性访问。下面示例是上一个示例的变种。它使用了AsyncState属性来显示被传入到lambda表达式中的CustomData对象的信息。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomData</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">long</span></span> CreationTime<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Name<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> ThreadNum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token class-name\">Task<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> taskArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Task</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> taskArray<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n      <span class=\"token punctuation\">{<!-- --></span>\n         taskArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Task<span class=\"token punctuation\">.</span>Factory<span class=\"token punctuation\">.</span><span class=\"token function\">StartNew</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj <span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n         \t<span class=\"token class-name\">CustomData</span> data <span class=\"token operator\">=</span> obj <span class=\"token keyword\">as</span> <span class=\"token class-name\">CustomData</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            \t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            data<span class=\"token punctuation\">.</span>ThreadNum <span class=\"token operator\">=</span> Thread<span class=\"token punctuation\">.</span>CurrentThread<span class=\"token punctuation\">.</span>ManagedThreadId<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CustomData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>Name <span class=\"token operator\">=</span> i<span class=\"token punctuation\">,</span> CreationTime <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span>Ticks<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      Task<span class=\"token punctuation\">.</span><span class=\"token function\">WaitAll</span><span class=\"token punctuation\">(</span>taskArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> task <span class=\"token keyword\">in</span> taskArray<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n         <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> data <span class=\"token operator\">=</span> task<span class=\"token punctuation\">.</span>AsyncState <span class=\"token keyword\">as</span> <span class=\"token class-name\">CustomData</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Task #{0} created at {1}, ran on thread #{2}.\"</span><span class=\"token punctuation\">,</span>\n                              data<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>CreationTime<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>ThreadNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// The example displays output like the following:</span>\n<span class=\"token comment\">//       Task #0 created at 635116412924597583 on thread #3.</span>\n<span class=\"token comment\">//       Task #1 created at 635116412924607584 on thread #4.</span>\n<span class=\"token comment\">//       Task #3 created at 635116412924607584 on thread #4.</span>\n<span class=\"token comment\">//       Task #4 created at 635116412924607584 on thread #4.</span>\n<span class=\"token comment\">//       Task #2 created at 635116412924607584 on thread #3.</span>\n<span class=\"token comment\">//       Task #6 created at 635116412924607584 on thread #3.</span>\n<span class=\"token comment\">//       Task #5 created at 635116412924607584 on thread #4.</span>\n<span class=\"token comment\">//       Task #8 created at 635116412924607584 on thread #4.</span>\n<span class=\"token comment\">//       Task #7 created at 635116412924607584 on thread #3.</span>\n<span class=\"token comment\">//       Task #9 created at 635116412924607584 on thread #4.</span>\n</code></pre>\n<h1><a id=\"_327\"></a>三、总结</h1>\n<p>    归纳一下，task的几个特点：</p>\n<ul><li>底层是在线程池中运作的，且微软用了一些增强性能的算法（这点使你在大部分场景中可以无忧地使用它）</li><li>实际使用往往会结合lambda表达式，正如网上搜到的那样 task(()=&gt;{Your code}))</li><li>结合lambda表达式在循环中使用计数器时，需要注意lambda内使用计数器是其引用。可以使用自定义传参给任务来回避这种情况。</li></ul>\n<p>    看了以上几个例子后，对task有个大致的了解，并且基本使用应该是没有太大问题了。但是文档往下翻，还有许多详细参数，细节方面的问题。必要时进行深入学习。</p>\n<h1><a id=\"_334\"></a>四、参考资料</h1>\n<p><a href=\"https://docs.microsoft.com/en-gb/dotnet/standard/parallel-programming/task-based-asynchronous-programming\">微软文档</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-06-04 19:16:11", "summary": "文章目录一、前言二、认识基于任务的多线程编程隐式地创建并运行一个任务显示地创建并运行一个任务常规使用带有返回值的结合使用时出现的特殊情况三、总结四、参考资料一、前言在平台使用进行编程时，遇到了并行操作"}