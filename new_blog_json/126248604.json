{"blogid": "126248604", "writerAge": "码龄178天", "writerBlogNum": "58", "writerCollect": "3064", "writerComment": "3483", "writerFan": "4575", "writerGrade": "7级", "writerIntegral": "11993", "writerName": "XIN-XIANG荣", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126248604.jpg", "writerRankTotal": "1042", "writerRankWeekly": "53", "writerThumb": "4141", "writerVisitNum": "53272", "blog_read_count": "1542", "blog_time": "已于 2022-08-10 16:51:05 修改", "blog_title": "【Java】封装的实现，访问限定符、包", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>活动地址：<a href=\"https://marketing.csdn.net/p/bdabfb52c5d56532133df2adc1a728fd\">CSDN21天学习挑战赛</a><br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/078b66f87e3c4e309d7f34d79c5776c4.gif#pic_center\"/><font size=\"4\">✨</font><font color=\"gray\" size=\"3\"><b>博客主页:</b></font><a href=\"https://blog.csdn.net/Trong_?spm=1000.2115.3001.5343\"><font color=\"\tLightSkyBlue\" size=\"3\"><b> XIN-XIANG荣</b></font></a><br/> <font size=\"4\">✨</font><font color=\"gray\" size=\"3\"><b>系列专栏:</b></font><a href=\"https://blog.csdn.net/trong_/category_11933690.html?spm=1001.2014.3001.5482\"><font color=\"\tLightSkyBlue\" size=\"3\"><b>【Java SE】</b></font></a><br/> <font size=\"4\">✨</font><font color=\"gray\" size=\"3\"><b>一句短话:</b></font><font color=\"\tCrimson\" size=\"3\"><b> 难在坚持,贵在坚持,成在坚持!</b></font></p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#__8\">一. 封装</a></li><li><a href=\"#__22\">二. 访问限定符(修饰符)</a></li><li><a href=\"#__91\">三. 包</a></li><li><ul><li><a href=\"#1__93\">1. 包的概念</a></li><li><a href=\"#2__101\">2. 导入包中的类</a></li><li><ul><li><a href=\"#21__103\">2.1 导入方法一</a></li><li><a href=\"#22__117\">2.2 导入方法二</a></li><li><a href=\"#23__132\">2.3 导入方法三</a></li><li><a href=\"#24__179\">2.4 导入静态的方法和字段</a></li></ul>\n</li><li><a href=\"#3__207\">3. 自定义包</a></li><li><ul><li><a href=\"#31__209\">3.1 基本使用规则：</a></li><li><a href=\"#32_IDEA_216\">3.2 IDEA中创键自定义包</a></li></ul>\n</li><li><a href=\"#4__238\">4. 不同包中的访问权限控制</a></li><li><a href=\"#5__276\">5. 常见的包</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"__8\"></a>一. 封装</h1>\n<p>封装是面向对象的三大特性之一；<strong>面向对象程序三大特性：封装、继承、多态 。</strong></p>\n<p><strong>封装：将数据和操作数据的方法进行有机结合，隐藏对象的属性和实现细节，仅对外公开接口来和对象进行交互（简单来说就是套壳屏蔽细节）。</strong></p>\n<p>用生活中的实物来理解封装，比如电脑：</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\dfb9bac2f5cdbefbb865c332700d6d4c.png\"/></p>\n<p>对于电脑这样一个复杂的设备，提供给用户的就只是：开关机、通过键盘输入，显示器，USB插孔等，让用户来和计算机进行交互，完成日常事务。</p>\n<p>但实际上：电脑真正工作的却是CPU、显卡、内存等一些硬件元件。对于计算机使用者而言，不用关心内部核心部件，比如主板上线路是如何布局的，CPU内部是如何设计的等，用户只需要知道，怎么开机、怎么通过键盘和鼠标与计算机进行交互即可。因此<strong>计算机厂商在出厂时，在外部套上壳子，将内部实现细节隐藏起来，仅仅对外提供开关机、鼠标以及键盘插孔等，让用户可以与计算机进行交互即可</strong>。</p>\n<h1><a id=\"__22\"></a>二. 访问限定符(修饰符)</h1>\n<p>Java中主要通过类和访问权限来实现封装：<strong>类可以将数据以及封装数据的方法结合在一起</strong>，更符合人类对事物的认知，而<strong>访问权限用来控制类或者类中方法或者字段能否直接在类外使用</strong>。Java中提供了四种访问限定符：</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\e809ce08451098c049a18220c127863f.png\"/><br/> public：公开的，可以理解为一个人的外貌特征，谁都可以看得到</p>\n<p>protected：受保护的，涉及到继承中的知识，继承博客中详细介绍</p>\n<p>default: 什么都不写时的默认权限，对于自己家族中(同一个包中)不是什么秘密，对于其他人来说就是隐私了</p>\n<p>private：私有的，只有自己知道，其他人都不知道</p>\n<p><strong>通过下面给出的代码示例理解封装：</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//private修饰的成员变量只能在本类中访问</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">String</span> sex<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//这里不加修饰符即为默认权限，默认是default权限</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//在其他类中不能直接访问name和age，</span>\n    <span class=\"token comment\">//但可以在本类中提供公开的（public修饰）访问方法和外界进行交互</span>\n    <span class=\"token comment\">//这里就是对成员变量进行了封装</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"姓名：\"</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span><span class=\"token string\">\" 年龄: \"</span><span class=\"token operator\">+</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//person.name = \"bit\";//不能直接进行访问</span>\n        person<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"XIN-XIANG荣\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        person<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//通过提供Person类中提供的方法间接进行访问</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" =&gt; \"</span><span class=\"token operator\">+</span>person<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>一般情况下成员变量设置为private，成员方法设置为public，通过这个例子就可以很好的理解封装了，这里对 类 内部的实现细节进行了隐藏/封装，对 外 只提供一些公开的方法供其他用户进行访问。<br/> <strong>【访问限定符的使用场景】：</strong></p>\n<ul><li>我们希望类要尽量做到 “封装”, 即隐藏内部实现细节, 只暴露出 <strong>必要</strong> 的信息给类的调用者.</li><li>因此我们在使用的时候应该尽可能的使用 <strong>比较严格</strong> 的访问权限；例如如果一个方法能用 private, 就尽量不要<br/> 用 public.</li><li>另外, 还有一种 <strong>简单粗暴</strong> 的做法: 将所有的字段设为 private, 将所有的方法设为 public. 不过这种方式属于是对访问权限的滥用, 不过最好写代码的时候思考该类提供的字段方法到底给 “谁” 使用(是类内部自己用, 还是类的调用者使用, 还是子类使用)</li></ul>\n<h1><a id=\"__91\"></a>三. 包</h1>\n<h2><a id=\"1__93\"></a>1. 包的概念</h2>\n<p>在面向对象体系中，提出了一个软件包的概念，即：<strong>为了更好的管理类，把多个类收集在一起成为一组，称为软件包</strong>。 有点类似于目录。比如：为了更好的管理电脑中的图片，一种好的方式就是将相同属性的图片放在相同文件下，也可以对某个文件夹下的图片进行更详细的分类 。</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\383cf5d001ba9008e18da00e270f8a2d.png\"/></p>\n<p>在Java中也引入了包，<strong>包是对类、接口等的封装机制的体现，是一种对类或者接口等的很好的组织方式</strong>，比如：一个包中的类不想被其他包中的类使用。包还有一个重要的作用：<strong>在同一个工程中允许存在相同名称的类，只要处在不同的包中即可</strong>。</p>\n<h2><a id=\"2__101\"></a>2. 导入包中的类</h2>\n<h3><a id=\"21__103\"></a>2.1 导入方法一</h3>\n<p>Java 中已经提供了很多现成的类供我们使用. 例如Date类：可以使用<code> java.util.Date</code> 导入 java.util 这个包中的 Date类.</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test1</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 得到一个毫秒级别的时间戳</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"22__117\"></a>2.2 导入方法二</h3>\n<p>但是这种写法比较麻烦一些, 可以<strong>使用 import语句导入包</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test1</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 得到一个毫秒级别的时间戳</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"23__132\"></a>2.3 导入方法三</h3>\n<p>如果需要使用 java.util 中的其他类, 可以使用 <code>import java.util.* </code>，这里可以导入java.util这个包中的所有类，但要注意不是一下子将所有类都导进来，在代码中用到谁就会导入谁。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test1</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 得到一个毫秒级别的时间戳</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>但是<strong>更建议显式的指定要导入的类名</strong>. <strong>否则还是容易出现冲突</strong>的情况.</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test1</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token comment\">// util 和 sql 中都存在一个 Date 这样的类, 此时就会出现歧义, 编译出错</span>\n        <span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// 编译出错</span>\n<span class=\"token comment\">//Error:(5, 9) java: 对Date的引用不明确</span>\n<span class=\"token comment\">//java.sql 中的类 java.sql.Date 和 java.util 中的类 java.util.Date 都匹配</span>\n</code></pre>\n<p>在这种情况下需要使用完整的类名</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test1</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"24__179\"></a>2.4 导入静态的方法和字段</h3>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> y <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 静态导入的方式写起来更方便一些.</span>\n<span class=\"token comment\">// double result = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));</span>\n        <span class=\"token keyword\">double</span> result <span class=\"token operator\">=</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">//对比正常的导入和使用</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test1</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> y <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"3__207\"></a>3. 自定义包</h2>\n<h3><a id=\"31__209\"></a>3.1 基本使用规则：</h3>\n<ul><li>在文件的最上方加上一个 package 语句指定该代码在哪个包中.</li><li>包名需要尽量指定成唯一的名字, 通常会用公司域名的颠倒形式(例如com.bat.demo1 ).</li><li>包名要和代码路径相匹配. 例如创建 com.bat.demo1 的包, 那么会存在一个对应的路径 com/bat/demo1 来存储代码</li><li>如果一个类没有 package 语句, 则该类被放到一个默认包中</li></ul>\n<h3><a id=\"32_IDEA_216\"></a>3.2 IDEA中创键自定义包</h3>\n<ol><li>在 IDEA 中先新建一个包: 右键 src -&gt; 新建 -&gt; 包</li></ol>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\c7bfe28719a4ea9001fea167e1c8a5d5.png\"/></p>\n<ol><li>在弹出的对话框中输入包名, 例如 com.bat.demo1 ，敲入回车即可</li></ol>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\8b2437d55491d4a7b3ccc068cb98edcc.png\"/></p>\n<ol><li>在包中创建类, 右键包名 -&gt; 新建 -&gt; 类, 然后输入类名回车即可.</li></ol>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\65c854a62bc4e544ba1bd84360deee15.png\"/></p>\n<ol><li>此时可以看到我们的磁盘上的目录结构已经被 IDEA 自动创建出来了</li></ol>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\b76e78f7bf9a10acb37183c2228c02a8.png\"/></p>\n<ol><li>同时我们也看到了, 在新创建的 Test.java 文件的最上方, 就出现了一个 package 语句</li></ol>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\4fd24a6701ca6689fed6bc152b34c6fe.png\"/></p>\n<h2><a id=\"4__238\"></a>4. 不同包中的访问权限控制</h2>\n<p>Computer类位于com.bat.demo1包中，TestComputer位置com.bat.demo2包中</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>bat<span class=\"token punctuation\">.</span>demo1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Computer</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> cpu<span class=\"token punctuation\">;</span> <span class=\"token comment\">// cpu</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> memory<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 内存</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> screen<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 屏幕</span>\n    <span class=\"token class-name\">String</span> brand<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 品牌</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> brand<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> cpu<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> memory<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> screen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>brand <span class=\"token operator\">=</span> brand<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cpu <span class=\"token operator\">=</span> cpu<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>memory <span class=\"token operator\">=</span> memory<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>screen <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开机~~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">PowerOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"关机~~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">SurfInternet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"上网~~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\799f98ea701700d77a700dd9b0cb2980.png\"/></p>\n<p>注意：如果去掉Computer类之前的public修饰符，Computer类为默认权限，只能在同一包中访问，代码也会编译失败</p>\n<h2><a id=\"5__276\"></a>5. 常见的包</h2>\n<ol><li>java.lang:系统常用基础类(String、Object),此包从JDK1.1后自动导入。</li><li>java.lang.reflect:java 反射编程包;</li><li>java.net:进行网络编程开发包。</li><li>java.sql:进行数据库开发的支持包。</li><li>java.util:是java提供的工具程序包；(集合类等) <strong>非常重要</strong></li><li>java.io:I/O编程开发包。</li></ol>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-08-10 16:51:05", "summary": "活动地址：天学习挑战赛在这里插入图片描述博客主页荣系列专栏一句短话难在坚持贵在坚持成在坚持文章目录一封装二访问限定符修饰符三包包的概念导入包中的类导入方法一导入方法二导入方法三导入静态的方法和字段自定"}