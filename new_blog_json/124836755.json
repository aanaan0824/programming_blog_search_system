{"blogid": "124836755", "writerAge": "码龄3年", "writerBlogNum": "5", "writerCollect": "44", "writerComment": "0", "writerFan": "7", "writerGrade": "1级", "writerIntegral": "62", "writerName": "愿做春风", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124836755.jpg", "writerRankTotal": "146845", "writerRankWeekly": "963203", "writerThumb": "9", "writerVisitNum": "5690", "blog_read_count": "2474", "blog_time": "已于 2022-05-22 10:02:23 修改", "blog_title": "机器学习---sklearn", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\498e510d0ff64c30a12a247ed052e434.png\"/></p>\n<h2><a id=\"1Sklearn_1\"></a>1.Sklearn简介</h2>\n<p>sklearn (全称 Scikit-Learn) 是基于 Python 语言的机器学习工具,Sklea是处理机器学习 (有监督学习和无监督学习) 的包。它建立在 NumPy, SciPy, Pandas 和 Matplotlib 之上，其主要集成了数据预处理、数据特征选择，sklearn有六个任务模块和一个数据引入模块：</p>\n<ul><li>有监督学习的<strong>分类任务</strong></li><li>有监督学习的<strong>回归任务</strong></li><li>无监督学习的<strong>聚类任务</strong></li><li>无监督学习的<strong>降维任务</strong></li><li>数据预处理任务</li><li>模型选择任务</li><li>数据引入</li></ul>\n<p>具体流程如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2167826f434146f8aed19d25d641f6a9.png\"/>下载 sklearn。</p>\n<pre><code>// 已经下载过Anaconda\n\nconda install scikit-learn\n</code></pre>\n<h2><a id=\"2Sklearn_19\"></a>2.Sklearn数据</h2>\n<h3><a id=\"21__20\"></a>2.1 数据格式</h3>\n<p>在 Sklean 里，模型能即用的数据有两种形式：</p>\n<ol><li>Numpy 二维数组 (ndarray) 的稠密数据 (dense data)，通常都是这种格式。</li><li>SciPy 矩阵 (scipy.sparse.matrix) 的稀疏数据 (sparse data)，比如文本分析每个单词 (字典有 100000 个词) 做独热编码得到矩阵有很多 0，这时用 ndarray 就不合适了，太耗内存。<br/> 上述数据在机器学习中通常用符号 X 表示，是模型自变量。它的大小 = [样本数, 特征数]，<strong>有监督学习除了需要特征 X 还需要标签 y，而 y 通常就是 Numpy 一维数组，无监督学习没有 y。</strong></li></ol>\n<h3><a id=\"22__25\"></a>2.2 自带数据集</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\32cc3d60b2da460fb9f182d7e16dc1f8.png\"/><br/> 引入数据集的方法：</p>\n<ol><li>获取小数据：load_dataname</li><li>获取大数据：fetch_dataname</li><li>构造随机数据：make_dataname</li></ol>\n<p>Load一个数字小数据集 digits</p>\n<pre><code class=\"prism language-javascript\">digits<span class=\"token operator\">=</span>datasets<span class=\"token punctuation\">.</span><span class=\"token function\">load_digits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndigits<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\63abf058b1cf4dfe84671f360841b809.png\"/><br/> Fetch 一个加州房屋大数据集 california_housing</p>\n<pre><code class=\"prism language-javascript\">housing<span class=\"token operator\">=</span>datasets<span class=\"token punctuation\">.</span><span class=\"token function\">fetch_california_housing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nhousing<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f7790393e62645cc9277b47290bdc54c.png\"/><br/> Make 一个高斯分位数数据集 gaussian_quantile</p>\n<pre><code class=\"prism language-javascript\">gaussian<span class=\"token operator\">=</span>datasets<span class=\"token punctuation\">.</span><span class=\"token function\">make_gaussian_quantiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">type</span><span class=\"token punctuation\">(</span>gaussian<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>gaussian<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>引入数据集的两种代码：</p>\n<pre><code class=\"prism language-javascript\">from sklearn <span class=\"token keyword\">import</span> datasets\n#使用数据集时<span class=\"token punctuation\">,</span>以鸢尾花数据集为例\niris<span class=\"token operator\">=</span>datasets<span class=\"token punctuation\">.</span><span class=\"token function\">load_iris</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<pre><code class=\"prism language-javascript\">from sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> load_iris\n#使用数据集时<span class=\"token punctuation\">,</span>以鸢尾花数据集为例\niris<span class=\"token operator\">=</span><span class=\"token function\">load_iris</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\niris<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n#结果\n<span class=\"token function\">dict_keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'target'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'frame'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'target_names'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'DESCR'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'feature_names'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'filename'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>键里面的名称解释如下：</p>\n<pre><code>data：特征值 (数组)\n\ntarget：标签值 (数组)\n\ntarget_names：标签 (列表)\n\nDESCR：数据集描述\n\nfeature_names：特征 (列表)\n\nfilename：iris.csv 文件路径\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a86e19b8b17f48d6929081cdaf510649.png\"/>将数据集转换为DataFram:</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\niris_data<span class=\"token operator\">=</span>pd<span class=\"token punctuation\">.</span><span class=\"token function\">DataFrame</span><span class=\"token punctuation\">(</span>iris<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span>\n                      columns<span class=\"token operator\">=</span>iris<span class=\"token punctuation\">.</span>feature_names<span class=\"token punctuation\">)</span>\niris_data<span class=\"token punctuation\">[</span><span class=\"token string\">'species'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>iris<span class=\"token punctuation\">.</span>target_names<span class=\"token punctuation\">[</span>iris<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">]</span>\niris_data<span class=\"token punctuation\">.</span><span class=\"token function\">head</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>iris_data<span class=\"token punctuation\">.</span><span class=\"token function\">tail</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\48cfa5ce4afc40cf9a40b3d943fab6c6.png\"/>可视化seaborn</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> seaborn <span class=\"token keyword\">as</span> sns\nsns<span class=\"token punctuation\">.</span><span class=\"token function\">pairplot</span><span class=\"token punctuation\">(</span>iris_data<span class=\"token punctuation\">,</span>hue<span class=\"token operator\">=</span><span class=\"token string\">'species'</span><span class=\"token punctuation\">,</span>palette<span class=\"token operator\">=</span><span class=\"token string\">'husl'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7f005b31f8ef470e81dedd0a1bfcfa56.png\"/></p>\n<h2><a id=\"3API_93\"></a>3.核心API</h2>\n<p>三大API：<br/> 1.估计器(estimator) ：拟合器（fitter）可把它当成一个模型 (用来回归、分类、聚类、降维)。<br/> 2. 预测器 (predictor) 是具有预测功能的估计器<br/> 3.转换器 (transformer) 是具有转换功能的估计器</p>\n<h3><a id=\"31__98\"></a>3.1 估计器</h3>\n<p><strong>定义：任何可以基于数据集对一些参数进行估计的对象都被称为估计器</strong><br/> 拟合估计器:在有监督学习中的代码范式为</p>\n<pre><code>model.fit( X_train, y_train )\n</code></pre>\n<p>在无监督学习中的代码范式为</p>\n<pre><code>model.fit( X_train )\n</code></pre>\n<p>拟合之后可以访问 model 里学到的参数，比如线性回归里的特征前的系数 coef_，或 K 均值里聚类标签 labels_。</p>\n<pre><code>model.coef_\nmodel.labels_\n</code></pre>\n<p><code>线性回归</code></p>\n<pre><code class=\"prism language-javascript\">from sklearn<span class=\"token punctuation\">.</span>linear_model <span class=\"token keyword\">import</span> LinearRegression\nmodel<span class=\"token operator\">=</span><span class=\"token function\">LinearRegression</span><span class=\"token punctuation\">(</span>normalize<span class=\"token operator\">=</span>True<span class=\"token punctuation\">)</span>\nmodel\n</code></pre>\n<p>创建一个简单的数据集</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\nx<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span><span class=\"token function\">arange</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\ny<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span>\nplt<span class=\"token punctuation\">.</span><span class=\"token function\">plot</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">)</span>\n<span class=\"token constant\">X</span><span class=\"token operator\">=</span>x<span class=\"token punctuation\">[</span><span class=\"token operator\">:</span><span class=\"token punctuation\">,</span>np<span class=\"token punctuation\">.</span>newaxis<span class=\"token punctuation\">]</span> #Sklearn 里模型要求特征 <span class=\"token constant\">X</span> <span class=\"token function\">是个两维变量么</span> <span class=\"token punctuation\">(</span>样本数×特征数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>但在本例中 <span class=\"token constant\">X</span> 是一维，因为我们用 np<span class=\"token punctuation\">.</span>newaxis 加一个维度，就是把一维 <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> 转成 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\nmodel<span class=\"token punctuation\">.</span><span class=\"token function\">fit</span><span class=\"token punctuation\">(</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>coef_<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>intercept_<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0b777398009d48b497eddf971e487021.png\"/><br/> <code>K均值</code></p>\n<pre><code class=\"prism language-javascript\">from sklearn<span class=\"token punctuation\">.</span>cluster <span class=\"token keyword\">import</span> KMeans\nmodel<span class=\"token operator\">=</span><span class=\"token function\">KMeans</span><span class=\"token punctuation\">(</span>n_clusters<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token constant\">X</span><span class=\"token operator\">=</span>iris<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token operator\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\nmodel<span class=\"token punctuation\">.</span><span class=\"token function\">fit</span><span class=\"token punctuation\">(</span><span class=\"token constant\">X</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>cluster_centers_<span class=\"token punctuation\">,</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>labels_<span class=\"token punctuation\">,</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>inertia_<span class=\"token punctuation\">,</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>iris<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\98c79286af2741d2bde4bcd92b1c9cd3.png\"/>解释一下 KMeans 模型这几个参数：<br/> model.cluster_centers_：簇中心。三个簇那么有三个坐标。</p>\n<pre><code>model.labels_：聚类后的标签\n\nmodel.inertia_：所有点到对应的簇中心的距离平方和 (越小越好)\n</code></pre>\n<p><code>左图是根据聚类得到的标签画出散点图，而右图是根据真实标签画出散点图，对比两幅图看很像，聚类的效果还不错</code>。</p>\n<pre><code class=\"prism language-javascript\">from  matplotlib<span class=\"token punctuation\">.</span>colors <span class=\"token keyword\">import</span> ListedColormap\ncmap_light<span class=\"token operator\">=</span><span class=\"token function\">ListedColormap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'#FFAAAA'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'#AAFFAA'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'#AAAAFF'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ncmap_bold1<span class=\"token operator\">=</span><span class=\"token function\">ListedColormap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'#FFAAAA'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'#AAFFAA'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'#AAAAFF'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ncmap_bold2<span class=\"token operator\">=</span><span class=\"token function\">ListedColormap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'#FFAAAA'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'#AAFFAA'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'#AAAAFF'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ncentroid<span class=\"token operator\">=</span>model<span class=\"token punctuation\">.</span>cluster_centers_\nlabel<span class=\"token operator\">=</span>iris<span class=\"token punctuation\">.</span>target\ntrue_centroid<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span><span class=\"token function\">vstack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token constant\">X</span><span class=\"token punctuation\">[</span>label<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">mean</span><span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                         <span class=\"token constant\">X</span><span class=\"token punctuation\">[</span>label<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">mean</span><span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                         <span class=\"token constant\">X</span><span class=\"token punctuation\">[</span>label<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token operator\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">mean</span><span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span><span class=\"token function\">figure</span><span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nplt<span class=\"token punctuation\">.</span><span class=\"token function\">subplot</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span><span class=\"token function\">scatter</span><span class=\"token punctuation\">(</span><span class=\"token constant\">X</span><span class=\"token punctuation\">[</span><span class=\"token operator\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">[</span><span class=\"token operator\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span>model<span class=\"token punctuation\">.</span>labels_<span class=\"token punctuation\">,</span>cmap<span class=\"token operator\">=</span>cmap_bold1<span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span><span class=\"token function\">scatter</span><span class=\"token punctuation\">(</span>centroid<span class=\"token punctuation\">[</span><span class=\"token operator\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>centroid<span class=\"token punctuation\">[</span><span class=\"token operator\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>marker<span class=\"token operator\">=</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span>s<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n            edgecolors<span class=\"token operator\">=</span><span class=\"token string\">'k'</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>cmap<span class=\"token operator\">=</span>cmap_light<span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span><span class=\"token function\">xlabel</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sepal length'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span><span class=\"token function\">ylabel</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sepal width'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span><span class=\"token function\">title</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Cluster class'</span><span class=\"token punctuation\">)</span>\n\nplt<span class=\"token punctuation\">.</span><span class=\"token function\">subplot</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span><span class=\"token function\">scatter</span><span class=\"token punctuation\">(</span><span class=\"token constant\">X</span><span class=\"token punctuation\">[</span><span class=\"token operator\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">[</span><span class=\"token operator\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span>model<span class=\"token punctuation\">.</span>labels_<span class=\"token punctuation\">,</span>cmap<span class=\"token operator\">=</span>cmap_bold2<span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span><span class=\"token function\">scatter</span><span class=\"token punctuation\">(</span>centroid<span class=\"token punctuation\">[</span><span class=\"token operator\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>centroid<span class=\"token punctuation\">[</span><span class=\"token operator\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>marker<span class=\"token operator\">=</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span>s<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n            edgecolors<span class=\"token operator\">=</span><span class=\"token string\">'k'</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>cmap<span class=\"token operator\">=</span>cmap_light<span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span><span class=\"token function\">xlabel</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sepal length'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span><span class=\"token function\">ylabel</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sepal width'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span><span class=\"token function\">title</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Cluster class'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b9f6e9866d46449382c701127b4255e7.png\"/></p>\n<h3><a id=\"32__177\"></a>3.2 预测器</h3>\n<p>最常见的就是 predict() 函数：</p>\n<ul><li>model.predict(X_test)：评估模型在新数据上的表现</li><li>model.predict(X_train)：确认模型在老数据上的表现<br/> 做预测之前，将数据分为8:2的的训练集 (X_train, y_train) 和测试集 (X_test, y_test)，用从训练集上拟合 fit() 的模型在测试集上预测 predict()。</li></ul>\n<pre><code class=\"prism language-javascript\">from sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> load_iris\nfrom sklearn<span class=\"token punctuation\">.</span>model_selection <span class=\"token keyword\">import</span> train_test_split\niris<span class=\"token operator\">=</span><span class=\"token function\">load_iris</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nx_train<span class=\"token punctuation\">,</span>x_text<span class=\"token punctuation\">,</span>y_train<span class=\"token punctuation\">,</span>y_test<span class=\"token operator\">=</span><span class=\"token function\">train_test_split</span><span class=\"token punctuation\">(</span>iris<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>iris<span class=\"token punctuation\">[</span><span class=\"token string\">'target'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                              test_size<span class=\"token operator\">=</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>y_train<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>x_text<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b078af9f9076425cbc55005acdd41b2f.png\"/> <code>监督学习的对率回顾</code>。</p>\n<pre><code class=\"prism language-javascript\">from sklearn<span class=\"token punctuation\">.</span>linear_model <span class=\"token keyword\">import</span> LogisticRegression\nmodel<span class=\"token operator\">=</span><span class=\"token function\">LogisticRegression</span><span class=\"token punctuation\">(</span>solver<span class=\"token operator\">=</span><span class=\"token string\">'lbfgs'</span><span class=\"token punctuation\">,</span>multi_class<span class=\"token operator\">=</span><span class=\"token string\">'multinomial'</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span><span class=\"token function\">fit</span><span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">,</span>y_train<span class=\"token punctuation\">)</span>\ny_pred<span class=\"token operator\">=</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">predict</span><span class=\"token punctuation\">(</span>x_text<span class=\"token punctuation\">)</span>\np_pred<span class=\"token operator\">=</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">predict_proba</span><span class=\"token punctuation\">(</span>x_text<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>y_pred<span class=\"token punctuation\">,</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>p_pred<span class=\"token punctuation\">,</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>其中predict &amp; predict_proba，前者是预测的类别，后者是只预测的准确度</p>\n<p>预测器里还有额外的两个函数可以使用。在分类问题中</p>\n<ul><li><strong>score()</strong> 返回的是分类准确率</li><li><strong>decision_function()</strong> 返回的是每个样例在每个类下的分数值<br/> <code>监督学习的K均值</code>。</li></ul>\n<pre><code class=\"prism language-javascript\">from sklearn<span class=\"token punctuation\">.</span>cluster <span class=\"token keyword\">import</span> KMeans\nmodel<span class=\"token operator\">=</span><span class=\"token function\">KMeans</span><span class=\"token punctuation\">(</span>n_clusters<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span><span class=\"token function\">fit</span><span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">[</span><span class=\"token operator\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\npred<span class=\"token operator\">=</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">predict</span><span class=\"token punctuation\">(</span>x_text<span class=\"token punctuation\">[</span><span class=\"token operator\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span><span class=\"token function\">score</span><span class=\"token punctuation\">(</span>x_text<span class=\"token punctuation\">[</span><span class=\"token operator\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\574fb080f09445ce9a6599f85fb7e9bd.png\"/>以上例子是以有监督学习的 LinearRegression 和无监督学习的 KMeans 举例，在实际应用时可以替换成其他模型。使用的通用伪代码如下<br/> <code>有监督学习</code>。</p>\n<pre><code>#有监督学习\nfrom sklearn.xxx import SomeModel\n#xxx 可以是 linear_model 或 ensemble 等\nmodel = SomeModel( hyperparameter )\nmodel.fit( X, y )\ny_pred = model.predict( X_new )\ns = model.score( X_new )\n</code></pre>\n<p><code>无监督学习</code>。</p>\n<pre><code>from sklearn.xxx import SomeModel\n# xxx 可以是 cluster 或 decomposition 等\nmodel = SomeModel( hyperparameter )\nmodel.fit( X )\nidx_pred = model.predict( X_new )\ns = model.score( X_new )\n</code></pre>\n<h3><a id=\"33__241\"></a>3.3 转换器</h3>\n<p><strong>定义：转换器也是一种估计器，两者都带拟合功能，但估计器做完拟合来预测，而转换器做完拟合来转换</strong><br/> 估计器里：fit+predict<br/> 转换器：fit+transform<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8bef6798af89487289c1117ec719ba5f.png\"/>preprocessing.scale( ) 标准化<br/> preprocessing.MinMaxScaler( ) 最大最小值标准化<br/> preprocessing.StandardScaler( ) 数据标准化<br/> preprocessing.MaxAbsScaler( ) 绝对值最大标准化<br/> preprocessing.RobustScaler( ) 带离群值数据集标准化<br/> preprocessing.QuantileTransformer( ) 使用分位数信息变换特征<br/> preprocessing.PowerTransformer( ) 使用幂变换执行到正态分布的映射<br/> preprocessing.Normalizer( ) 正则化<br/> preprocessing.OrdinalEncoder( ) 将分类特征转换为分类数值<br/> preprocessing.LabelEncoder( ) 将分类特征转换为分类数值<br/> preprocessing.MultiLabelBinarizer( ) 多标签二值化<br/> preprocessing.OneHotEncoder( ) 独热编码<br/> preprocessing.KBinsDiscretizer( ) 将连续数据离散化<br/> preprocessing.FunctionTransformer( ) 自定义特征处理函数<br/> preprocessing.Binarizer( ) 特征二值化<br/> preprocessing.PolynomialFeatures( ) 创建多项式特征<br/> preprocesssing.Normalizer( ) 正则化<br/> preprocessing.Imputer( ) 弥补缺失值<br/> 下面展示一些 <code>预处理代码</code>。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nfrom sklearn <span class=\"token keyword\">import</span> preprocessing\n#标准化\nx<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nx_scale<span class=\"token operator\">=</span>preprocessing<span class=\"token punctuation\">.</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>x_scale<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>x_scale<span class=\"token punctuation\">.</span><span class=\"token function\">mean</span><span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>x_scale<span class=\"token punctuation\">.</span><span class=\"token function\">std</span><span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\193f452ff60b464dafdd38bb90be3b6b.png\"/><br/> 上述preprocessing类函数的方法如下：<br/> name.fit( ) 拟合数据<br/> name.fit_transform( ) 拟合并转换数据<br/> name.get_params( ) 获取函数参数<br/> name.inverse_transform( ) 逆转换<br/> name.set_params( ) 设置参数<br/> name.transform( ) 转换数据</p>\n<p>本文主要介绍两大类转换器</p>\n<ol><li>将分类型变量 (categorical) 编码成数值型变量 (numerical)</li><li>规范化 (normalize) 或标准化 (standardize) 数值型变量<br/> <strong>分类型变量编码</strong><br/> LabelEncoder 和 OrdinalEncoder 都可以将字符转成数字，但是</li></ol>\n<ul><li>LabelEncoder 的输入是一维，比如 1d ndarray</li><li>OrdinalEncoder 的输入是二维，比如 DataFrame</li></ul>\n<pre><code class=\"prism language-javascript\">enc <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'win'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'draw'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'lose'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'win'</span><span class=\"token punctuation\">]</span>\ndec <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'draw'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'draw'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'win'</span><span class=\"token punctuation\">]</span>\nfrom sklearn<span class=\"token punctuation\">.</span>preprocessing <span class=\"token keyword\">import</span> LabelEncoder\nle<span class=\"token operator\">=</span><span class=\"token function\">LabelEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>le<span class=\"token punctuation\">.</span><span class=\"token function\">fit</span><span class=\"token punctuation\">(</span>enc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>le<span class=\"token punctuation\">.</span>classes_<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>le<span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>dec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2619c78fbf63434586bb9c89e125bfc3.png\"/><br/> <code>OrdinalEncoder</code></p>\n<pre><code class=\"prism language-javascript\">from sklearn<span class=\"token punctuation\">.</span>preprocessing <span class=\"token keyword\">import</span> OrdinalEncoder\noe<span class=\"token operator\">=</span><span class=\"token function\">OrdinalEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nenc_df<span class=\"token operator\">=</span>pd<span class=\"token punctuation\">.</span><span class=\"token function\">DataFrame</span><span class=\"token punctuation\">(</span>enc<span class=\"token punctuation\">)</span>\ndec_df<span class=\"token operator\">=</span>pd<span class=\"token punctuation\">.</span><span class=\"token function\">DataFrame</span><span class=\"token punctuation\">(</span>dec<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>oe<span class=\"token punctuation\">.</span><span class=\"token function\">fit</span><span class=\"token punctuation\">(</span>enc_df<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>oe<span class=\"token punctuation\">.</span>categories_<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>oe<span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>dec_df<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e1bca0b04b7148c79977179d3dd64e4d.png\"/>独热编码是把一个整数用向量的形式表现。转化器OneHotEncoder可以接受两种类型的输入：<br/> 1）用 LabelEncoder 编码好的一维数组 (元素为整数)，重塑 (用 reshape(-1,1)) 成二维数组作为 OneHotEncoder 输入。<br/> <code>转化独热编码</code>。</p>\n<pre><code class=\"prism language-javascript\">from sklearn<span class=\"token punctuation\">.</span>preprocessing <span class=\"token keyword\">import</span> OneHotEncoder\nohe<span class=\"token operator\">=</span><span class=\"token function\">OneHotEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nnum<span class=\"token operator\">=</span>le<span class=\"token punctuation\">.</span><span class=\"token function\">fit_transform</span><span class=\"token punctuation\">(</span>enc<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>#打印编码结果<span class=\"token punctuation\">[</span><span class=\"token number\">2</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\nohe_y<span class=\"token operator\">=</span>ohe<span class=\"token punctuation\">.</span><span class=\"token function\">fit_transform</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">reshape</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>#将其转成独热形式，输出是一个「稀疏矩阵」形式，因为实操中通常类别很多，因此就一步到位用稀疏矩阵来节省内存\nohe_y\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\09ba2833102f4e1f98d8dd1834fac2b3.png\"/></p>\n<p>2） DataFrame作为 OneHotEncoder 输入。<br/> <code>转化独热编码</code>。</p>\n<pre><code class=\"prism language-javascript\">ohe<span class=\"token operator\">=</span><span class=\"token function\">OneHotEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nohe<span class=\"token punctuation\">.</span><span class=\"token function\">fit_transform</span><span class=\"token punctuation\">(</span>enc_df<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toarray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>特征缩放</strong>数据要做的最重要的转换之一是特征缩放 (feature scaling)。当输入的数值的量刚不同时，机器学习算法的性能都不会好。<br/> 具体来说，对于某个特征，有两种方法：</p>\n<ul><li>规范化 (normalization)：每个维度的特征减去该特征最小值，除以该特征的最大值与最小值之差。将数据缩放到0和1之间，用<strong>MinMaxScaler</strong>函数.</li><li>标准化 (standardization)：每个维度的特征减去该特征均值，除以该维度的标准差。将数据缩放到以0位中心而分散为1的区间，使用<strong>StandardScaler</strong>函数<br/> <code>MinMaxScaler</code>。</li></ul>\n<pre><code class=\"prism language-javascript\">from sklearn<span class=\"token punctuation\">.</span>preprocessing <span class=\"token keyword\">import</span> MinMaxScaler\nx<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nx_scale<span class=\"token operator\">=</span><span class=\"token function\">MinMaxScaler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fit_transform</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">reshape</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nx_scale\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\370fb9cf1c1b48e6a31196e7a4c8e263.png\"/> <code>StandardScaler</code>。</p>\n<pre><code class=\"prism language-javascript\">from sklearn<span class=\"token punctuation\">.</span>preprocessing <span class=\"token keyword\">import</span> StandardScaler\nx_scale<span class=\"token operator\">=</span><span class=\"token function\">StandardScaler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fit_transform</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">reshape</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nx_scale\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6942fbe023a0400db34489ea5c6bfb2f.png\"/></p>\n<h2><a id=\"4_348\"></a>4.分类模型</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6d60042a882a46afa4d77c64377426bd.png\"/></p>\n<table><thead><tr><th>Sklearn.tree</th><th>功能</th></tr></thead><tbody><tr><td>tree.DecisionTreeClassifier</td><td>决策树</td></tr></tbody></table>\n<p><code>决策树</code>。</p>\n<pre><code class=\"prism language-javascript\">from sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> load_iris\nfrom sklearn <span class=\"token keyword\">import</span> tree\nfrom sklearn<span class=\"token punctuation\">.</span>tree <span class=\"token keyword\">import</span> DecisionTreeClassifier\nx<span class=\"token punctuation\">,</span>y<span class=\"token operator\">=</span><span class=\"token function\">load_iris</span><span class=\"token punctuation\">(</span>return_X_y<span class=\"token operator\">=</span>True<span class=\"token punctuation\">)</span>\nclf<span class=\"token operator\">=</span><span class=\"token function\">DecisionTreeClassifier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nclf<span class=\"token operator\">=</span>clf<span class=\"token punctuation\">.</span><span class=\"token function\">fit</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span>\ntree<span class=\"token punctuation\">.</span><span class=\"token function\">plot_tree</span><span class=\"token punctuation\">(</span>clf<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\aff7064bb9d44a148372fa5a77297a48.png\"/></p>\n<p>Ensemble 估计器是用来做集成学习，该估计器里面有若干个分类器 (classifier) 或回归器 (regressor)。其中分类器统计每个子分类器的预测类别数，再用「多数投票」原则得到最终预测。</p>\n<table><thead><tr><th>Sklearn.ensemble</th><th>功能</th></tr></thead><tbody><tr><td>BaggingClassifier()</td><td>装袋法集成学习</td></tr><tr><td>AdaBoostClassifier( )</td><td>提升法集成学习</td></tr><tr><td>RandomForestClassifier( )</td><td>随机森林分类</td></tr><tr><td>ExtraTreesClassifier( )</td><td>极限随机树分类</td></tr><tr><td>RandomTreesEmbedding( )</td><td>嵌入式完全随机树</td></tr><tr><td>GradientBoostingClassifier( )</td><td>梯度提升树</td></tr><tr><td>VotingClassifier( )</td><td>投票分类法</td></tr></tbody></table>\n<p><code>BaggingClassifier()</code>。</p>\n<pre><code class=\"prism language-javascript\">#使用sklearn库实现的决策树装袋法提升分类效果。其中<span class=\"token constant\">X</span>和<span class=\"token constant\">Y</span>分别是鸢尾花（iris）数据集中的自变量（花的特征）和因变量（花的类别）\n\nfrom sklearn<span class=\"token punctuation\">.</span>model_selection <span class=\"token keyword\">import</span> KFold\nfrom sklearn<span class=\"token punctuation\">.</span>model_selection <span class=\"token keyword\">import</span> cross_val_score\nfrom sklearn<span class=\"token punctuation\">.</span>ensemble <span class=\"token keyword\">import</span> BaggingClassifier\nfrom sklearn<span class=\"token punctuation\">.</span>tree <span class=\"token keyword\">import</span> DecisionTreeClassifier\nfrom sklearn <span class=\"token keyword\">import</span> datasets\n\n#加载iris数据集\niris<span class=\"token operator\">=</span>datasets<span class=\"token punctuation\">.</span><span class=\"token function\">load_iris</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token constant\">X</span><span class=\"token operator\">=</span>iris<span class=\"token punctuation\">.</span>data\n<span class=\"token constant\">Y</span><span class=\"token operator\">=</span>iris<span class=\"token punctuation\">.</span>target\n\n#生成<span class=\"token constant\">K</span>折交叉验证数据\nkfold<span class=\"token operator\">=</span><span class=\"token function\">KFold</span><span class=\"token punctuation\">(</span>n_splits<span class=\"token operator\">=</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n\n#决策树及交叉验证\ncart<span class=\"token operator\">=</span><span class=\"token function\">DecisionTreeClassifier</span><span class=\"token punctuation\">(</span>criterion<span class=\"token operator\">=</span><span class=\"token string\">'gini'</span><span class=\"token punctuation\">,</span>max_depth<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\ncart<span class=\"token operator\">=</span>cart<span class=\"token punctuation\">.</span><span class=\"token function\">fit</span><span class=\"token punctuation\">(</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token constant\">Y</span><span class=\"token punctuation\">)</span>\nresult<span class=\"token operator\">=</span><span class=\"token function\">cross_val_score</span><span class=\"token punctuation\">(</span>cart<span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token constant\">Y</span><span class=\"token punctuation\">,</span>cv<span class=\"token operator\">=</span>kfold<span class=\"token punctuation\">)</span>  #采用<span class=\"token constant\">K</span>折交叉验证的方法来验证算法效果\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CART数结果:'</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">mean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n#装袋法及交叉验证\nmodel<span class=\"token operator\">=</span><span class=\"token function\">BaggingClassifier</span><span class=\"token punctuation\">(</span>base_estimator<span class=\"token operator\">=</span>cart<span class=\"token punctuation\">,</span>n_estimators<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> #n_estimators<span class=\"token operator\">=</span><span class=\"token number\">100</span>为建立<span class=\"token number\">100</span>个分类模型\nresult<span class=\"token operator\">=</span><span class=\"token function\">cross_val_score</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token constant\">Y</span><span class=\"token punctuation\">,</span>cv<span class=\"token operator\">=</span>kfold<span class=\"token punctuation\">)</span>  #采用<span class=\"token constant\">K</span>折交叉验证的方法来验证算法效果\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'装袋法提升后的结果:'</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">mean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\df0c11e0fa64449fb525e208da2941f0.png\"/></p>\n<table><thead><tr><th>Sklearn.linear_model</th><th>功能</th></tr></thead><tbody><tr><td>LogisticRegression( )</td><td>逻辑回归</td></tr><tr><td>Perceptron( )</td><td>线性模型感知机</td></tr><tr><td>SGDClassifier( )</td><td>具有SGD训练的线性分类器</td></tr><tr><td>PassiveAggressiveClassifier( )</td><td>增量学习分类器</td></tr></tbody></table>\n<table><thead><tr><th>Sklearn.svm</th><th>功能</th></tr></thead><tbody><tr><td>svm.SVC( )</td><td>支持向量机分类</td></tr><tr><td>svm.NuSVC( )</td><td>Nu支持向量分类</td></tr><tr><td>svm.LinearSVC( )</td><td>线性支持向量分类</td></tr></tbody></table>\n<table><thead><tr><th>Sklearn.naive_bayes</th><th>功能</th></tr></thead><tbody><tr><td>naive_bayes.GaussianNB( )</td><td>朴素贝叶斯</td></tr><tr><td>naive_bayes.MultinomialNB( )</td><td>多项式朴素贝叶斯</td></tr><tr><td>naive_bayes.BernoulliNB( )</td><td>伯努利朴素贝叶斯</td></tr></tbody></table>\n<h2><a id=\"5_428\"></a>5.回归模型</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d56c122d0a2d479f95c85a91ef3af374.png\"/> <code>GradientBoostingRegressor</code>。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nfrom sklearn<span class=\"token punctuation\">.</span>ensemble <span class=\"token keyword\">import</span> GradientBoostingRegressor <span class=\"token keyword\">as</span> <span class=\"token constant\">GBR</span>\nfrom sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> make_regression\n\n<span class=\"token constant\">X</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token function\">make_regression</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> noise<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>#make_regression函数能生成回归样本数据。样本数<span class=\"token number\">100</span>，参与的特征<span class=\"token number\">2</span>\n\ngbr <span class=\"token operator\">=</span> <span class=\"token constant\">GBR</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ngbr<span class=\"token punctuation\">.</span><span class=\"token function\">fit</span><span class=\"token punctuation\">(</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\ngbr_preds <span class=\"token operator\">=</span> gbr<span class=\"token punctuation\">.</span><span class=\"token function\">predict</span><span class=\"token punctuation\">(</span><span class=\"token constant\">X</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"6_442\"></a>6.超参数调节</h2>\n<p>超参数的优化或调整是为学习算法选择一组最佳超参数的问题。</p>\n<h3><a id=\"61__445\"></a>6.1 手动调参</h3>\n<p>在传统调优中，我们通过训练算法来手动检查随机的超参数集，并选择适合我们目标的最佳参数集。</p>\n<pre><code class=\"prism language-javascript\">from sklearn<span class=\"token punctuation\">.</span>neighbors <span class=\"token keyword\">import</span> KNeighborsClassifier\nfrom sklearn<span class=\"token punctuation\">.</span>model_selection <span class=\"token keyword\">import</span> train_test_split\nfrom sklearn<span class=\"token punctuation\">.</span>model_selection <span class=\"token keyword\">import</span> KFold <span class=\"token punctuation\">,</span> cross_val_score\nfrom sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> load_wine\n\nwine <span class=\"token operator\">=</span> <span class=\"token function\">load_wine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token constant\">X</span> <span class=\"token operator\">=</span> wine<span class=\"token punctuation\">.</span>data\ny <span class=\"token operator\">=</span> wine<span class=\"token punctuation\">.</span>target\n\n#划分训练集和测试集\nX_train<span class=\"token punctuation\">,</span>X_test<span class=\"token punctuation\">,</span>y_train<span class=\"token punctuation\">,</span>y_test <span class=\"token operator\">=</span> <span class=\"token function\">train_test_split</span><span class=\"token punctuation\">(</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>test_size <span class=\"token operator\">=</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span>random_state <span class=\"token operator\">=</span> <span class=\"token number\">14</span><span class=\"token punctuation\">)</span>\n\n#声明参数范围\nk_value <span class=\"token operator\">=</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nalgorithm <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'auto'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ball_tree'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'kd_tree'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'brute'</span><span class=\"token punctuation\">]</span>\nscores <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nbest_comb <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nkfold <span class=\"token operator\">=</span> <span class=\"token function\">KFold</span><span class=\"token punctuation\">(</span>n_splits<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n#超参数循环找最优\n<span class=\"token keyword\">for</span> algo <span class=\"token keyword\">in</span> <span class=\"token literal-property property\">algorithm</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> <span class=\"token literal-property property\">k_value</span><span class=\"token operator\">:</span>\n    knn <span class=\"token operator\">=</span> <span class=\"token function\">KNeighborsClassifier</span><span class=\"token punctuation\">(</span>n_neighbors<span class=\"token operator\">=</span>k<span class=\"token punctuation\">,</span>algorithm<span class=\"token operator\">=</span>algo<span class=\"token punctuation\">)</span>\n    results <span class=\"token operator\">=</span> <span class=\"token function\">cross_val_score</span><span class=\"token punctuation\">(</span>knn<span class=\"token punctuation\">,</span>X_train<span class=\"token punctuation\">,</span>y_train<span class=\"token punctuation\">,</span>cv <span class=\"token operator\">=</span> kfold<span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token string\">'Score:{round(results.mean(),4)} with algo = {algo} , K = {k}'</span><span class=\"token punctuation\">)</span>\n    scores<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span><span class=\"token function\">mean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    best_comb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span>algo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nbest_param <span class=\"token operator\">=</span> best_comb<span class=\"token punctuation\">[</span>scores<span class=\"token punctuation\">.</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token string\">'\\nThe Best Score : {max(scores)}'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token string\">\"['algorithm': {best_param[1]} ,'n_neighbors': {best_param[0]}]\"</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c542080f03764eee95641db5de742e03.png\"/></p>\n<h3><a id=\"61__484\"></a>6.1 网格搜索</h3>\n<p>网格搜索是一种基本的超参数调整技术。它类似于手动调整，在手动调整中，它为网格中指定的所有给定超参数集合构建一个模型，评估并选择最佳模型。考虑上面的示例，它有两个超参数 k_value = [2,3,4,5,6,7,8,9,10]＆algorithm = [‘auto’，‘ball_tree’，‘kd_tree’，‘brute’] ，在这种情况下，它总共构建了 9 * 4 = 36 个不同的模型。官方文档：<a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html\">网格搜索</a></p>\n<pre><code class=\"prism language-javascript\">from sklearn<span class=\"token punctuation\">.</span>model_selection <span class=\"token keyword\">import</span> RandomizedSearchCV\nknn <span class=\"token operator\">=</span> <span class=\"token function\">KNeighborsClassifier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ngrid_param <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token string-property property\">'n_neighbors'</span> <span class=\"token operator\">:</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> \n              <span class=\"token string-property property\">'algorithm'</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'auto'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ball_tree'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'kd_tree'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'brute'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n\nrand_ser <span class=\"token operator\">=</span> <span class=\"token function\">RandomizedSearchCV</span><span class=\"token punctuation\">(</span>knn<span class=\"token punctuation\">,</span>grid_param<span class=\"token punctuation\">,</span>n_iter<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nrand_ser<span class=\"token punctuation\">.</span><span class=\"token function\">fit</span><span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span>y_train<span class=\"token punctuation\">)</span>\n\n#best parameter combination\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>rand_ser<span class=\"token punctuation\">.</span>best_params_<span class=\"token punctuation\">)</span>\n\n#score achieved <span class=\"token keyword\">with</span> best parameter combination\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>rand_ser<span class=\"token punctuation\">.</span>best_score_<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h3><a id=\"63_505\"></a>6.3随机搜索</h3>\n<p>随机搜索代替网格搜索的动机是，在许多情况下，所有超参数可能都没有同等重要。随机搜索从超参数空间中选择参数的随机组合，参数将以 n_iter 给出的固定迭代次数进行选择。<strong>一般情况下，随机搜索比网格搜索可提供更好的结果。</strong><br/> 官方文档：<a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.RandomizedSearchCV.html\">随机搜索</a></p>\n<pre><code class=\"prism language-javascript\">from sklearn<span class=\"token punctuation\">.</span>model_selection <span class=\"token keyword\">import</span> RandomizedSearchCV\n\nknn <span class=\"token operator\">=</span> <span class=\"token function\">KNeighborsClassifier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ngrid_param <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token string-property property\">'n_neighbors'</span> <span class=\"token operator\">:</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> \n              <span class=\"token string-property property\">'algorithm'</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'auto'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ball_tree'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'kd_tree'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'brute'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n\nrand_ser <span class=\"token operator\">=</span> <span class=\"token function\">RandomizedSearchCV</span><span class=\"token punctuation\">(</span>knn<span class=\"token punctuation\">,</span>grid_param<span class=\"token punctuation\">,</span>n_iter<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nrand_ser<span class=\"token punctuation\">.</span><span class=\"token function\">fit</span><span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span>y_train<span class=\"token punctuation\">)</span>\n\nrand_ser<span class=\"token punctuation\">.</span>best_params_\nrand_ser<span class=\"token punctuation\">.</span>best_score_\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 1, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-05-22 10:02:23", "summary": "在这里插入图片描述简介全称是基于语言的机器学习工具是处理机器学习有监督学习和无监督学习的包。它建立在和之上，其主要集成了数据预处理、数据特征选择，有六个任务模块和一个数据引入模块：有监督学习的分类任务"}