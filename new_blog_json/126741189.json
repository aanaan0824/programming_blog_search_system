{"blogid": "126741189", "writerAge": "码龄4年", "writerBlogNum": "58", "writerCollect": "310", "writerComment": "24", "writerFan": "52", "writerGrade": "3级", "writerIntegral": "793", "writerName": "勿宁", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126741189.jpg", "writerRankTotal": "22416", "writerRankWeekly": "289800", "writerThumb": "35", "writerVisitNum": "40103", "blog_read_count": "10", "blog_time": "于 2022-09-07 11:40:54 发布", "blog_title": "常见面试问题及回答——集合", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>常见面试问题及回答——集合</h3>\n<ul><li><a href=\"#JAVA_1\">谈谈对JAVA集合的了解</a></li><li><a href=\"#_10\">线程安全的集合</a></li><li><a href=\"#HashMap_14\">HashMap的底层原理</a></li><li><a href=\"#font_color900font_20\">&lt;font color=#900&gt;红黑树&lt;font&gt;</a></li><li><a href=\"#hashmaphashtable_23\">hashmap和hashtable的区别</a></li><li><a href=\"#concurrenthashmap_29\">concurrenthashmap</a></li><li><a href=\"#Arraylist_41\">Arraylist</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"JAVA_1\"></a>谈谈对JAVA集合的了解</h1>\n<p>1、java集合主要分为两大类collection和map（具有映射关系的集合）<br/> 2、collection主要list（有序的可重复的）,set（无序的不可重复的）,queue（先进先出队列）<br/> 3、常见的list有arraylist，linkedlist<br/> 4、常见的set有hashset，treeset<br/> 5、常见的queue有PriorityQueue,可以用来实现大小顶堆<br/> 6、常见的map有hashmap和treemap</p>\n<h1><a id=\"_10\"></a>线程安全的集合</h1>\n<p>1、HashTable，Vector古老的API虽然线程安全，但是性能差<br/> 2、JUC下面提供了concurrentHashMap/copyonwritearraylist支持线程安全，并保持了较好的性能</p>\n<h1><a id=\"HashMap_14\"></a>HashMap的底层原理</h1>\n<p>1、1.7之间hashmap采用链表和数组的方式构建，就是拉链法解决hash冲突<br/> 2、1.8之后hashmap采用链表/红黑树和数组的方式构建，初始的时候结构是链表和数组，如果当数组的大小&gt;64，链表的大小大于8，链表转换成红黑树，如果数组没有到达64，只会进行扩容<br/> 3、hashmap的数组扩容机制，初始数组长度为16，默认负载因子为0.75，如果现在插入第12个数，就会进行扩容，每次扩容为原本长度的两倍<br/> 4、1.7中采用头插法并发下的扩容造成死循环，1.8中采用尾插法避免这个问题</p>\n<h1><a id=\"font_color900font_20\"></a><font color=\"#900\">红黑树</font></h1>\n<p>后续补充</p>\n<h1><a id=\"hashmaphashtable_23\"></a>hashmap和hashtable的区别</h1>\n<p>1、都是map接口的实现<br/> 2、hashtable线程安全，效率低，hashmap线程不安全，效率高<br/> <font color=\"#900\"> 3、hashmapkey和value可以为null，只能有一个key为null,可以有多个value为 null,hashtable不允许存入null <br/> 4、hashtable虽然线程安全，但是不建议使用，建议使用concurrenthashmap</font></p>\n<h1><a id=\"concurrenthashmap_29\"></a>concurrenthashmap</h1>\n<p>1、JUC下提供的线程安全的集合<br/> 2、早期采用分段锁的形式，<br/> 3、后面采用数组+链表+红黑树，采用锁定头节点的方式降低锁的粒度，以较低的代价实现了线程安全<br/> 实现机制<br/> 1、初始化数组或头节点时，不加锁，采用CAS的方式进行原子替换<br/> 2、插入数据时会进行加锁处理，锁定的是头节点，锁的粒度小，并发性能好<br/> 3、扩容时会进行加锁处理，锁定的仍然是头节点<br/> 4、查找数据的时候不会加锁<br/> 5、扩容时支持查找操作，可以从旧数据中获取，扩容时如果另外一个线程进行插入操作，另外线程会加入扩容工作，等扩容完成后再插入数据</p>\n<h1><a id=\"Arraylist_41\"></a>Arraylist</h1>\n<p>1、可扩容数组<br/> 2、初始化大小问10，每次扩容1.5倍<br/> 3、线程不安全</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-09-07 11:40:54", "summary": "常见面试问题及回答集合谈谈对集合的了解线程安全的集合的底层原理红黑树和的区别谈谈对集合的了解、集合主要分为两大类和具有映射关系的集合、主要有序的可重复的无序的不可重复的先进先出队列、常见的有，、常见的"}