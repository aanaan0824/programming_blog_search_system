{"blogid": "124087535", "writerAge": "码龄3年", "writerBlogNum": "19", "writerCollect": "30", "writerComment": "2", "writerFan": "2", "writerGrade": "2级", "writerIntegral": "199", "writerName": "搬砖大强", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124087535.jpg", "writerRankTotal": "99906", "writerRankWeekly": "496431", "writerThumb": "4", "writerVisitNum": "14121", "blog_read_count": "4479", "blog_time": "已于 2022-04-10 23:33:49 修改", "blog_title": "Java自定义注解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"JavaJava_0\"></a>Java-Java自定义注解</h1>\n<hr/>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#JavaJava_0\">Java-Java自定义注解</a></li><li><a href=\"#_7\">前言</a></li><li><a href=\"#1_12\">1、简介</a></li><li><a href=\"#2_18\">2、元注解</a></li><li><a href=\"#3_61\">3、自定义注解</a></li><li><ul><li><ul><li><a href=\"#31__67\">3.1 自定义注解</a></li><li><a href=\"#32__77\">3.2 数据模型使用注解</a></li><li><a href=\"#33__105\">3.3 定义一个“注解解析器”</a></li><li><a href=\"#34__146\">3.4 运行的代码</a></li><li><a href=\"#35__157\">3.5 结果</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_7\"></a>前言</h1>\n<p>Java 骚操作之一：自定义注解</p>\n<hr/>\n<h1><a id=\"1_12\"></a>1、简介</h1>\n<p>注解是一种能被添加到java源代码中的元数据，方法、类、参数和包都可以用注解来修饰。注解可以看作是一种特殊的标记，可以用在方法、类、参数和包上，程序在编译或者运行时可以检测到这些标记而进行一些特殊的处理。</p>\n<h1><a id=\"2_18\"></a>2、元注解</h1>\n<p>元注解的作用就是负责注解其他注解。Java5.0定义了4个标准的meta-annotation类型，它们被用来提供对其它 annotation类型作说明。Java5.0定义的元注解：</p>\n<pre><code>@Target,\n@Retention,\n@Documented,\n@Inherited\n</code></pre>\n<p>下面我们看一下每个元注解的作用和相应分参数的使用说明。</p>\n<p>2.1、@Target</p>\n<p>表明该注解可以应用的java元素类型：</p>\n<table><thead><tr><th>Target类型</th><th>描述</th></tr></thead><tbody><tr><td>ElementType.TYPE</td><td>应用于类、接口（包括注解类型）、枚举</td></tr><tr><td>ElementType.FIELD</td><td>应用于属性（包括枚举中的常量）</td></tr><tr><td>ElementType.METHOD</td><td>应用于方法</td></tr><tr><td>ElementType.PARAMETER</td><td>应用于方法的形参</td></tr><tr><td>ElementType.CONSTRUCTOR</td><td>应用于构造函数</td></tr><tr><td>ElementType.LOCAL_VARIABLE</td><td>应用于局部变量</td></tr><tr><td>ElementType.ANNOTATION_TYPE</td><td>应用于注解类型</td></tr><tr><td>ElementType.PACKAGE</td><td>应用于包</td></tr><tr><td>ElementType.TYPE_PARAMETER</td><td>应用于类型变量</td></tr><tr><td>ElementType.TYPE_USE</td><td>应用于任何使用类型的语句中（例如声明语句、泛型和强制转换语句中的类型）</td></tr></tbody></table>\n<p>2.2、@Retention<br/> 表明该注解的生命周期</p>\n<table><thead><tr><th>生命周期类型</th><th>描述</th></tr></thead><tbody><tr><td>RetentionPolicy.SOURCE</td><td>编译时被丢弃，不包含在类文件中</td></tr><tr><td>RetentionPolicy.CLASS</td><td>JVM加载时被丢弃，包含在类文件中，默认值</td></tr><tr><td>RetentionPolicy.RUNTIME</td><td>由JVM 加载，包含在类文件中，在运行时可以被获取到</td></tr></tbody></table>\n<p>2.3、@Document<br/> 表明该注解标记的元素可以被Javadoc 或类似的工具文档化。</p>\n<p>2.4、@Inherited<br/> 表明使用了@Inherited注解的注解，所标记的类的子类也会拥有这个注解。</p>\n<h1><a id=\"3_61\"></a>3、自定义注解</h1>\n<pre><code>修饰符： 访问修饰符必须为public,不写默认为pubic；\n关键字： 关键字为@interface；\n注解名称： 注解名称为自定义注解的名称，使用时还会用到；\n注解内容： 注解中内容，对注解的描述。\n</code></pre>\n<h3><a id=\"31__67\"></a>3.1 自定义注解</h3>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Inherited</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>FIELD<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>METHOD <span class=\"token punctuation\">,</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//可以在字段、枚举的常量、方法</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Init</span> <span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"32__77\"></a>3.2 数据模型使用注解</h3>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Init</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"louis\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Init</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"22\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h3><a id=\"33__105\"></a>3.3 定义一个“注解解析器”</h3>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> userFactory <span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">User</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n            <span class=\"token comment\">// 获取User类中所有的方法（getDeclaredMethods也行）</span>\n            <span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> methods <span class=\"token operator\">=</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n            <span class=\"token keyword\">try</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> method <span class=\"token operator\">:</span> methods<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">// 如果一个注解指定注解类型是存在于此元素上此方法返回true，否则返回false</span>\n                    <span class=\"token comment\">//参数 -- 对应于注解类型的Class对象</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Init</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token comment\">//此方法返回该元素的注解在此元素的指定注释类型（如果存在），否则返回null</span>\n                        <span class=\"token class-name\">Init</span> init <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Init</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">// 如果Method代表了一个方法 那么调用它的invoke就相当于执行了它代表的这个方法,在这里就是给set方法赋值</span>\n                        method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> init<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n\n            <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h3><a id=\"34__146\"></a>3.4 运行的代码</h3>\n<pre><code class=\"prism language-java\">   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userFactory<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"30\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"35__157\"></a>3.5 结果</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\07ae5ff0ba544bfa9fa4ff20010df30b.png\"/><br/> 更多demo 参考 https://github.com/wangzhiqiang1008/common-framework</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-04-10 23:33:49", "summary": "自定义注解文章目录自定义注解前言、简介、元注解、自定义注解自定义注解数据模型使用注解定义一个注解解析器运行的代码结果前言骚操作之一：自定义注解、简介注解是一种能被添加到源代码中的元数据，方法、类、参数"}