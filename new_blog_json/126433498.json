{"blogid": "126433498", "writerAge": "码龄8年", "writerBlogNum": "187", "writerCollect": "2859", "writerComment": "790", "writerFan": "22467", "writerGrade": "6级", "writerIntegral": "6663", "writerName": "墨家巨子@俏如来", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126433498.jpg", "writerRankTotal": "2516", "writerRankWeekly": "1772", "writerThumb": "2288", "writerVisitNum": "355600", "blog_read_count": "825", "blog_time": "于 2022-08-20 08:36:07 发布", "blog_title": "使用canal解决Mysql和Redis数据同步(TCP)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_0\"></a>前言</h2>\n<p>之前写过一篇文章《<a href=\"https://blog.csdn.net/u014494148/article/details/123336787\">使用canal解决Mysql和Redis数据同步问题</a>》，也是使用canal实现mysql和redis的数据同步，和该篇文章不一样的是，上一篇是基于MQ实现数据同步，该篇文章是基于TCP方式来实现。</p>\n<h2><a id=\"_3\"></a>工作原理分析</h2>\n<p>我们在面试的时候常常听面试官问这么一个问题：你们的Mysql和Redis怎么做数据同步的，根据不同的业务场景又很多方案，你可能会说先写库再删缓存，或者延迟双删或其他方案。今天我要给大家分享的就是比较成熟的方案-使用Canal实现Mysql和Redis数据的同步。</p>\n<p>我不知道你是否了解Mysql主从，根据2/8原则，80%的性能问题都在读上面，当我们数据库的读并发较大的时候，我们可以使用Mysql主从来分担读的压力。它的原理是所有的写操作在主库上，读操作在从库上，当然主库也可以承担读请求，而从库的数据则通过主库复制而来，Mysql自带主从复制的功能。如下图<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b663bc521ba74681b7785895b8c4f82c.png\"/></p>\n<p>主从复制步骤：</p>\n<ol><li>将Master的binary-log日志文件打开，mysql会把所有的DDL,DML,TCL写入BinaryLog日志文件中</li><li>Master会生成一个 log dump 线程，用来给从库的 i/o线程传binlog</li><li>从库的i/o线程去请求主库的binlog，并将得到的binlog日志写到中继日志（relaylog）中</li><li>从库的sql线程，会读取relaylog文件中的日志，并解析成具体操作，通过主从的操作一致，而达到最终数据一致</li></ol>\n<p>而Canal的原理就是伪装成Slave从Binlog中复制SQL语句或者数据。</p>\n<h2><a id=\"MysqlRedis_18\"></a>Mysql和Redis数据同步方案</h2>\n<p>根据上面所说，我们就可以通过Canal去自动同步数据库的binlog数据日志文件，然后再把数据同步到Redis，从而达到Mysql和Redis自动同步的功能。很遗憾的是Canal没办法直接把数据库同步到Redis，它支持的是组件有 ： mysql、Kafka、ElasticSearch、Hbase、RocketMQ等<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2ea95f67947c4a719e3df78dbacb6c46.png\"/><br/> 当然 canal 特别设计了 client-server 模式，交互协议使用 protobuf 3.0 , client 端可采用不同语言实现不同的消费逻辑</p>\n<ul><li>canal java 客户端: https://github.com/alibaba/canal/wiki/ClientExample</li><li>canal c# 客户端: https://github.com/dotnetcore/CanalSharp</li><li>canal go客户端: https://github.com/CanalClient/canal-go</li><li>canal Python客户端: https://github.com/haozi3156666/canal-python</li></ul>\n<p>canal 作为 MySQL binlog 增量获取和解析工具，可将数据通过TCP协议将数据同步到canal-client也就是我们的应用中，因此我们可以使用下面这种方案来同步数据<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\da7380d5fbba47b6870fbf0461e9b40f.png\"/></p>\n<ol><li>首选需要开启Mysql的bin-log</li><li>然后需要安装canal-server伪装成slave同步mysql中的数据</li><li>编写canal-client客户端监听canal-server，把数据从canal-server中同步过来</li><li>然后把拿到的数据写入Redis即可</li></ol>\n<h2><a id=\"Mysql_binlog_34\"></a>开启Mysql bin-log日志</h2>\n<p>找到Mysql安装目录中的my.ini 配置文件，我以mysql 5.5为例,在 mysqld 下做如下配置</p>\n<pre><code class=\"prism language-ini\">[mysqld]\n#开启bInlog\nlog-bin=mysql-bin\n#给mysql服务指定一个唯一的ID\nserver-id=1\n#以数据的方式写binlog日志 ：statement 是记录SQL，row是记录数据\nbinlog-format=ROW\n#同步的数据库名\n#binlog-do-db=canaldb\n#忽略的表\nbinlog-ignore-db=mysql\n# 启动mysql时不启动grant-tables授权表\nskip-grant-tables\n</code></pre>\n<p>修改好之后，重启Mysql服务。注意：我这里指定了需要同步的数据库为canaldb，所以需要创建一个数据库，同时创建了一个employee表作为演示<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\10a2a98f5b2349c28a854a59fd69e715.png\"/><br/> 然后创建一个用户提供给canal来链接Mysql做数据同步</p>\n<pre><code class=\"prism language-sql\">flush <span class=\"token keyword\">privileges</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#创建用户cannal</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">USER</span> canal IDENTIFIED <span class=\"token keyword\">BY</span> <span class=\"token string\">'canal'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#把所有权限赋予canal，密码也是canal</span>\n<span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">PRIVILEGES</span> <span class=\"token keyword\">ON</span> canaldb<span class=\"token punctuation\">.</span><span class=\"token keyword\">user</span> <span class=\"token keyword\">TO</span> <span class=\"token string\">'canal'</span><span class=\"token variable\">@'%'</span> identified <span class=\"token keyword\">by</span> <span class=\"token string\">\"canal\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//GRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'canal'@'%' identified by \"canal\";</span>\n<span class=\"token comment\">#刷新权限</span>\nflush <span class=\"token keyword\">privileges</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>到这，Mysql部分就搞定了</p>\n<h2><a id=\"Canal_67\"></a>安装Canal</h2>\n<p>去官网下载 Canal : https://github.com/alibaba/canal/releases ，我使用的是canal.deployer-1.1.5.tar.gz版本<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\05ecc84e6b5242fa8c335659240c1699.png\"/></p>\n<p>下载好之后解压，目录结构如下<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\14dc8873b39d4582b967d24402eed656.png\"/><br/> 接下来修改instance 配置文件 ： conf/example/instance.properties</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\">#  按需修改成自己的数据库信息</span>\n<span class=\"token comment\">#################################################</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token comment\">#我的端口是3307</span>\ncanal<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>master<span class=\"token punctuation\">.</span>address<span class=\"token operator\">=</span><span class=\"token number\">192.168</span><span class=\"token number\">.1</span><span class=\"token number\">.20</span>:<span class=\"token number\">3307</span>\n<span class=\"token comment\"># username/password,数据库的用户名和密码</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token comment\">#刚才开通的mysql的账户密码</span>\ncanal<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>dbUsername <span class=\"token operator\">=</span> canal\ncanal<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>dbPassword <span class=\"token operator\">=</span> canal\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token comment\"># 同步的表的规则</span>\n<span class=\"token comment\"># table regex</span>\n<span class=\"token comment\"># 同步所有表</span>\n<span class=\"token comment\">#canal.instance.filter.regex=.*\\\\..*</span>\n<span class=\"token comment\"># 同步多个表，用逗号隔开</span>\ncanal<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">.</span>regex<span class=\"token operator\">=</span>canaldb<span class=\"token punctuation\">.</span>employee<span class=\"token punctuation\">,</span>canaldb<span class=\"token punctuation\">.</span>dept\n<span class=\"token comment\">#################################################</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>省略<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n</code></pre>\n<p>这里注意如下几个东西，其他的不用管</p>\n<ul><li>master.address ：Mysql的地址，我的端口是3307，默认是3306</li><li>dbUsername ：上面开通的Mysql用户</li><li>dbPassword ： 密码</li><li>ccanal.instance.filter.regex ： 要同步的表，多个表用逗号隔开</li></ul>\n<p>接着修改canal 配置文件 conf/canal.properties</p>\n<pre><code class=\"prism language-sql\"><span class=\"token comment\"># ...</span>\n<span class=\"token comment\"># 可选项: tcp(默认), kafka, RocketMQ</span>\n<span class=\"token comment\"># 这里使用tcp , 还支持kafka和rocketmq</span>\ncanal<span class=\"token punctuation\">.</span>serverMode <span class=\"token operator\">=</span> tcp\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>省略<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n</code></pre>\n<p>这里需要注意 : canal.serverMode = tcp： 我这里以tcp为例,指的是以tcp协议把数据同步数据，而不是同步到mq</p>\n<p>配置好之后，找到 canal 安装目录下 bin目录下的 startup.bat 双击启动，linux上启动：startup.sh<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6868860aa59b46e188a51b3b966b8c1b.png\"/></p>\n<h2><a id=\"canalclient_116\"></a>编写canal-client</h2>\n<p>接下来我们需要在项目中整合canal-client来同步canal-server中的数据，然后写入Redis</p>\n<p>第一步：导入如下依赖，我这里使用了 <code>canal-spring-boot-starter</code> 来整合canal-client</p>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.2.5.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>optional</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>optional</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-data-redis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token comment\">&lt;!--Canal 依赖--&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>top.javatool<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>canal-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.2.1-RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>fastjson<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.2.50<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>第二步：在yaml配置canal地址，以及Redis相关参数</p>\n<pre><code class=\"prism language-yaml\"><span class=\"token key atrule\">canal</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span> 127.0.0.1<span class=\"token punctuation\">:</span><span class=\"token number\">11111</span> <span class=\"token comment\">#canal的地址</span>\n  <span class=\"token key atrule\">destination</span><span class=\"token punctuation\">:</span> example <span class=\"token comment\">#默认的数据同步的目的地</span>\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 127.0.0.1\n    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123456</span>\n</code></pre>\n<p>编写启动类</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CanalApplication</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CanalApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>第三步：对Redis做配置，实现自动序列化</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//缓存的配置</span>\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisConfig</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token annotation punctuation\">@Resource</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RedisConnectionFactory</span> factory<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token comment\">//使用JSON进行序列化</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">redisTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> redisTemplate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionFactory</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//JSON格式序列化</span>\n        <span class=\"token class-name\">GenericFastJsonRedisSerializer</span> serializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericFastJsonRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token comment\">//key的序列化</span>\n        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setKeySerializer</span><span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//value的序列化</span>\n        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setValueSerializer</span><span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//hash结构key的虚拟化</span>\n        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setHashKeySerializer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//hash结构value的虚拟化</span>\n        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setHashValueSerializer</span><span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span> \n</code></pre>\n<p>第四步：编写实体类，对应要同步的数据库的表</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>第五步：编写数据同步处理器，canal-client提供了EntryHandler，该handler中提供了insert,delete,update方法，当监听到某张表的相关操作后，会回调对应的方法把数据传递进来，我们就可以拿到数据往Redis同步了。</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@CanalTable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"employee\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmployeeHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">EntryHandler</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t<span class=\"token comment\">//把数据往Redis同步</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> redisTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span> employee<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"EMP:\"</span><span class=\"token operator\">+</span>employee<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>employee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span> employee<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"EMP:\"</span><span class=\"token operator\">+</span>employee<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span> before<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Employee</span> after<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"EMP:\"</span><span class=\"token operator\">+</span>after<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>after<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<ul><li>@CanalTable(“employee”) ：监听的表</li><li><code>EntryHandler&lt;Employee&gt;</code> ： 拿到employee表的改变后的数据之后，会封装为Employee实体 投递给我们</li></ul>\n<p>到这里代码就编写完成了，启动程序可以从控制台看到canal-client在不同尝试获取数据</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e641e57abd7140d5a6a21b0064abd1c4.png\"/><br/> 启动redis后， 尝试手动修改数据库 employee表中的数据，然后实例redis-cli 查看 数据，下面是表中的数据</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2a18412701a842558cbcd2f20c251af6.png\"/></p>\n<p>下面是redis中的数据</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c09d02cbc0b24bfe8e171c8374ddc195.png\"/></p>\n<p>好了文章就到这里把，喜欢的话请给个好评，一不小心来个一键三连就更好啦!!!</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 1, "python": 1, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-08-20 08:36:07", "summary": "前言之前写过一篇文章《使用解决和数据同步问题》，也是使用实现和的数据同步，和该篇文章不一样的是，上一篇是基于实现数据同步，该篇文章是基于方式来实现。工作原理分析我们在面试的时候常常听面试官问这么一个问"}