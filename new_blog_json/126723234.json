{"blogid": "126723234", "writerAge": "码龄17年", "writerBlogNum": "185", "writerCollect": "908", "writerComment": "594", "writerFan": "2526", "writerGrade": "6级", "writerIntegral": "8700", "writerName": "丁劲犇", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126723234.jpg", "writerRankTotal": "1903", "writerRankWeekly": "2101", "writerThumb": "548", "writerVisitNum": "667493", "blog_read_count": "17", "blog_time": "于 2022-09-07 09:00:00 发布", "blog_title": "使用C语言+USRP B210从零开始实现无线通信(2) 获取以太网数据并封装", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>在<a href=\"https://goldenhawking.blog.csdn.net/article/details/126702493\">使用C语言+USRP B210从零开始实现无线通信(1) 基本情况介绍</a>中，介绍了本次实验的大致情况。从这篇文章开始，逐一环节介绍技术细节。</p>\n<h1><a id=\"1__2\"></a>1. 获取以太网数据</h1>\n<p>在<a href=\"https://goldenhawking.blog.csdn.net/article/details/126292692\">我的另一篇文章</a>中，介绍了使用pcap库实现以太网层面数据收发的技术。本次实验，把以太网收发做成了taskBus的源和宿。只要安装了npcap驱动，即可进行包的吞吐。<br/> <img alt=\"SourcePCAP\" src=\"..\\..\\static\\image\\40686034391c41b7bf752dca7b242723.png\"/><img alt=\"SInk\" src=\"..\\..\\static\\image\\e08a0129141944b79957dee76a5e882d.png\"/></p>\n<p>需要注意的事项是正确的填写过滤条件。在实验中，网卡B所在计算机要避免把网卡A所在计算机生成的包再吐回A去，否则会造成无限循环，类似下图：</p>\n<p><img alt=\"同一份数据被无限次转交\" src=\"..\\..\\static\\image\\25043beb65c54b9483ced71b17cb97aa.png\"/><br/> 只需要明确指定网卡的来源MAC地址，即可避免这个情况。如果不确定条件语句是否正确设置，可在wireshark里使用相同的条件测试。</p>\n<p><strong>需要注意的是，wireshark的抓包条件，和显示界面的过滤条件的语法不同，新手容易混淆！</strong></p>\n<h1><a id=\"2__14\"></a>2. 封装数据</h1>\n<p>考虑在无线电波中发送一包以太网数据，接收方如何知道哪里是数据的开始呢？进一步，知道了数据的开始，又如何了解数据的长度呢？</p>\n<ul><li> <p>对问题1，只要设计一个较为独特的数据头，在接收时，检测这个数据头就可以了。</p> </li><li> <p>对问题2，可以有很多方法。一种朴素的方法是直接把长度先发送给接收者。设计时要确保长度字段很少发生错误，并且在万一发生错误后，也不会得到无限长的解析结果，这样通信过程就能自动恢复。</p> </li></ul>\n<h2><a id=\"21__21\"></a>2.1 包头</h2>\n<p>包头采用32比特数据：</p>\n<pre><code class=\"prism language-cpp\">std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">&gt;</span> vec_bits<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> header<span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//1. Header Bits.</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">32</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\tvec_bits<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这头部样式设计的要点是强调数学的强自相关性，以及在时间滑动中的弱相关。一般随机生成的序列都有很好的区分度。</p>\n<h2><a id=\"22__33\"></a>2.2 长度</h2>\n<p>长度字段是一个16位的整数。为了保证长度部分的可靠性，使用直接序列扩频来获得额外的增益。</p>\n<p>最简单的方法是使用1字节表示1比特，如此一来，16位整数变成128位长度。扩频序列选取只要考虑0,1个数平衡，并且具备不同的停顿特性。比如一个在某处有连续的0或者1，则另一个在对应的部位则是0101这样的切换样式：</p>\n<pre><code class=\"prism language-cpp\">\t<span class=\"token comment\">//2. Length 16 bits</span>\n\t<span class=\"token comment\">//Length, protected by coding spread 1:8,16bits:128bits</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&gt;=</span><span class=\"token number\">65536</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> err<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> sprheader<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">16</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>len<span class=\"token operator\">&gt;&gt;</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0x01</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n\t\t\tvec_bits<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>sprheader<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>经过这样的处理，长度52，二进制00110100，则变成（假设最低位最先发送）：</p>\n<pre><code class=\"prism language-txt\">1,1,0,1,0,0,0,1\n1,1,0,1,0,0,0,1\n0,1,0,1,1,0,1,1\n1,1,0,1,0,0,0,1\n0,1,0,1,1,0,1,1\n0,1,0,1,1,0,1,1\n1,1,0,1,0,0,0,1\n1,1,0,1,0,0,0,1\n</code></pre>\n<p>经过如此处理，一包数据类似：</p>\n<table><thead><tr><th>包头</th><th>长度</th><th>信息</th></tr></thead><tbody><tr><td>32bits</td><td>128bits</td><td>Nbits</td></tr></tbody></table>\n<p>包头理论上应该采用额外的校验策略，比如CRC16，确保接收的正确性。但在本例子里，考虑到室内实验，我们省略了。</p>\n<h1><a id=\"3__74\"></a>3. 信息处理与纠错</h1>\n<p>信息部分，要考虑极端的情况。如果发送的数据里存在大量的0，会导致波形中出现恒定的直流（取决于调制），不利于器件的处理。一种经典的做法是在原始数据上覆盖一层看似很乱的伪随机序列。覆盖后，一般不会出现长传的恒定电平值。</p>\n<p>信息部分，因为不采用扩频，需要额外的保护。这里，直接采用较为经典的卷积码进行保护：</p>\n<pre><code class=\"prism language-cpp\">\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> reg<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//xor code</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> scm<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> ib <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span><span class=\"token number\">8</span> <span class=\"token operator\">+</span> j<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;&gt;</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0x01</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> b <span class=\"token operator\">^</span> scm<span class=\"token punctuation\">[</span>ib <span class=\"token operator\">%</span> <span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\tscm<span class=\"token punctuation\">[</span>ib<span class=\"token operator\">%</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^=</span> <span class=\"token punctuation\">(</span>scm<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>ib<span class=\"token operator\">+</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> scm<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>ib<span class=\"token operator\">+</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\tvec_bits<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">^</span>reg<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">^</span>reg<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">^</span>reg<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">^</span>reg<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tvec_bits<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">^</span>reg<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">^</span>reg<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">^</span>reg<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">^</span>reg<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tvec_bits<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">^</span>reg<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">^</span>reg<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">^</span>reg<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">^</span>reg<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\treg<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> reg<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\treg<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> reg<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\treg<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> reg<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\treg<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> reg<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\treg<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> reg<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\treg<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>其结构如下图所示：<br/> <img alt=\"CodeGraph\" src=\"..\\..\\static\\image\\4b305cac9a724b1abd5f22b14ebbd578.png\"/></p>\n<p>这里略过了冲洗的部分，相关的算法背景知识参考这里：<br/> <a href=\"https://zhuanlan.zhihu.com/p/54777886\">卷积码</a><br/> <a href=\"https://zhuanlan.zhihu.com/p/166022257\">伪随机序列</a></p>\n<h1><a id=\"4__114\"></a>4. 后续部分</h1>\n<p>经过如此处理，已经在二进制层面把要发射的数据造出来了。完整代码<a href=\"https://gitcode.net/coloreaglestdio/taskbus_course/-/blob/master/src/a1frame_encap/main.cpp\">参考仓库</a>。</p>\n<table><thead><tr><th>包头</th><th>长度</th><th>信息</th></tr></thead><tbody><tr><td>32bits</td><td>128bits（取值为N字节）</td><td>3<em>N</em>8+21bits</td></tr></tbody></table>\n<p>但是，如何把二进制的数据，变成无线电波的参数呢？这就涉及到调制的问题。借鉴<a href=\"https://github.com/antirez/dump1090/blob/master/dump1090.c\">Github ADS-B</a> 代码的思路，下一篇文章来介绍最简单的幅度调制。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-07 09:00:00", "summary": "在使用语言从零开始实现无线通信基本情况介绍中，介绍了本次实验的大致情况。从这篇文章开始，逐一环节介绍技术细节。获取以太网数据在我的另一篇文章中，介绍了使用库实现以太网层面数据收发的技术。本次实验，把以"}