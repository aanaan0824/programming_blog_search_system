{"blogid": "125646836", "writerAge": "码龄3年", "writerBlogNum": "57", "writerCollect": "2240", "writerComment": "352", "writerFan": "469", "writerGrade": "5级", "writerIntegral": "2974", "writerName": "璇焱如柳", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125646836.jpg", "writerRankTotal": "6334", "writerRankWeekly": "19224", "writerThumb": "440", "writerVisitNum": "283257", "blog_read_count": "896", "blog_time": "于 2022-07-07 09:42:42 发布", "blog_title": "C++ 引用的用法总结", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><font face=\"宋体\" size=\"4\"><b> 引用（reference）是C++极为重要的一部分，本文对其用法进行简单总结。</b></font><br/> <font face=\"宋体\" size=\"4\"><b> </b></font></p>\n<p><font face=\"宋体\" size=\"5\"><b> 1. 引用的基本用法</b></font></p>\n<p><font face=\"宋体\" size=\"4\"><b>   引用的关键字为<code>&amp;</code>，表示取地址的意思，引用变量定义如下：</b></font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>n <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//定义</span>\ncout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"n=:\"</span><span class=\"token operator\">&lt;&lt;</span>n<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" m=\"</span><span class=\"token operator\">&lt;&lt;</span>m<span class=\"token operator\">&lt;&lt;</span>endl；\ncout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">&amp;</span>n<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"  \"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">&amp;</span>m<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\nn <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//修改</span>\n输出为：\nn<span class=\"token operator\">=</span><span class=\"token operator\">:</span><span class=\"token number\">2</span> m<span class=\"token operator\">=</span><span class=\"token number\">2</span>\n<span class=\"token number\">0x75fe78</span>  <span class=\"token number\">0x75fe78</span>\n</code></pre>\n<p><font face=\"宋体\" size=\"4\"><b>   从结果可以看出来，变量<code>n</code>和<code>m</code>地址是一样的，而且修改<code>n</code>，<code>m</code>也会改变，这与指针有这异曲同工之妙。可以理解把引用为数据的另一个称呼。</b></font><br/> <font face=\"宋体\" size=\"4\"><b>  引用要在定义的时候就赋值，并且不能再去引用别的变量，这一点和常指针类似（指向不变的指针）。引用变量在使用的时候直接使用变量名即可，不用带<code>&amp;</code>，带上<code>&amp;</code>表示取地址。 </b></font></p>\n<p><font face=\"宋体\" size=\"5\"><b>2. 引用作为形参 </b></font></p>\n<p><font face=\"宋体\" size=\"4\"><b>   将引用变量作为函数的形参，与指针作为形参类似，可以在函数内部对输入参数进行修改。</b></font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n    m <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    n <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"before: a=\"</span><span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\", b=\"</span><span class=\"token operator\">&lt;&lt;</span>b<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"after: a=\"</span><span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\", b=\"</span><span class=\"token operator\">&lt;&lt;</span>b<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n输出：\nbefore<span class=\"token operator\">:</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">100</span>\nafter<span class=\"token operator\">:</span> a<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n</code></pre>\n<p><font face=\"宋体\" size=\"4\"><b>   引用变量在使用的时候似乎比指针简洁一些，变量本身就代表了引用的数据，而指针则需要加上<code>*</code>。</b></font></p>\n<p><font face=\"宋体\" size=\"5\"><b>3. 引用与指针的区别</b></font><br/> <font face=\"宋体\" size=\"4\"><b>  引用和指针都可以对被引用（指向）数据进行操作，具有相似的功能，不过还是有一些区别：</b></font></p>\n<p><font face=\"宋体\" size=\"4\"><b>   ①引用必须从一而终，不能再指向其他数据；指针可以随意改变指向。<br/>   ②<code>int &amp; const p = a</code>是非法的，因为引用本身就自带有“常量”的属性，不用再刻意限制；而<code>int * const p = &amp;a</code>是合法。此外，虽然<code>int &amp; const p = a</code>不合法，但是<code>const int &amp; p = a</code>依旧是合法的，意思是引用的数据不可修改。<br/>   ③指针可以有多级，引用不可以。<code>int **p = &amp;a</code>合法，<code>int &amp;&amp;p = a</code>非法。</b></font></p>\n<p><font face=\"宋体\" size=\"4\"><b>  关于指针和引用的区别，有人认为引用其实就是指针的简单封装，而且引用是占有内存的，但是无法获取地址，不是简单的一份数据两个名字。因为如果在类中定义引用变量，用<code>sizeof</code>可以计算出引用确实占用了内存。为啥无法获取引用本身的地址，解释是编译器不想让我们获取。</b></font></p>\n<p><font face=\"宋体\" size=\"5\"><b>4. const 引用</b></font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n    m <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    n <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>a1 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>      <span class=\"token comment\">//合法</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>a2 <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//非法</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>a3 <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//非法</span>\n    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//非法</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font face=\"宋体\" size=\"4\"><b>  从上边代码可以看到，不能引用临时变量，临时变量一般是表达式形式的，一般会储存在寄存器上且无法修改，寄存器是无法寻址的，所以也无法引用（指针也一样），同样，临时变量也不能作为实参传给引用形参。<br/>   这种限制，会使引用在使用的时候很不方便，但是借助const关键字，可以解决这一问题。在引用变量前边添加const关键字，就是告诉编译器，我不会去修改你的临时变量，编译器就会为临时变量分配内存，于是引用就可以用了（指针不行）。</b></font></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    \n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>a1 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>a2 <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>a3 <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font face=\"宋体\" size=\"4\"><b> 添加const后，这些代码就不会报错了。</b></font></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-07-07 09:42:42", "summary": "宋体引用是极为重要的一部分，本文对其用法进行简单总结。宋体宋体引用的基本用法宋体引用的关键字为，表示取地址的意思，引用变量定义如下：定义；修改输出为：宋体从结果可以看出来，变量和地址是一样的，而且修改"}