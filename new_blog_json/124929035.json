{"blogid": "124929035", "writerAge": "码龄7年", "writerBlogNum": "1", "writerCollect": "9", "writerComment": "1", "writerFan": "3", "writerGrade": "1级", "writerIntegral": "10", "writerName": "读书人张七七", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124929035.jpg", "writerRankTotal": "236000", "writerRankWeekly": "1215586", "writerThumb": "0", "writerVisitNum": "921", "blog_read_count": "921", "blog_time": "于 2022-05-23 16:57:08 发布", "blog_title": "Labview创建webservice与C#进行简单的http通信(post，get)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>手里有个项目需要labview与C#使用http进行通讯，简单写了个demo，C#是个半吊子水平，记录一下过程方便以后查阅</p>\n<h2>1.labview webservice的创建和编写</h2>\n<p>有关使用labview创建webservice的方法与实例网上有很多，这里主要介绍Post，Get方法的创建和使用，如果是之前没有相关的通讯经验，推荐简单了解一下基本概念再进行程序编写</p>\n<p><a class=\"has-card\" href=\"https://www.runoob.com/http/http-tutorial.html\" title=\"HTTP 教程 | 菜鸟教程\"><span class=\"link-card-box\"><span class=\"link-title\">HTTP 教程 | 菜鸟教程</span><span class=\"link-desc\">HTTP 教程 HTTP 协议一般指 HTTP（超文本传输协议）。 超文本传输协议（英语：HyperText Transfer Protocol，缩写：HTTP）是一种用于分布式、协作式和超媒体信息系统的应用层协议，是因特网上应用最为广泛的一种网络传输协议，所有的 WWW 文件都必须遵守这个标准。 HTTP 是为 Web 浏览器与 Web 服务器之间的通信而设计的，但也可以用于其他目的。 HTTP 是一个基于 TCP/IP 通信协议..</span><span class=\"link-link\"><img alt=\"\" class=\"link-link-icon\" src=\"https://static.runoob.com/images/favicon.ico\"/>https://www.runoob.com/http/http-tutorial.html</span></span></a>这边创建两个方法，一个Post一个Get，实现一个简单的加减乘除计算器</p>\n<p><img alt=\"\" height=\"88\" src=\"..\\..\\static\\image\\e63de698edc84b3489826b57565c31b7.png\" width=\"236\"/></p>\n<p> 在web资源新建vi后，在右键菜单里选择这个vi是什么方法</p>\n<p><img alt=\"\" height=\"488\" src=\"..\\..\\static\\image\\dd68735c7668421ab4b1da465c529b10.png\" width=\"282\"/></p>\n<p> </p>\n<p>Get方法只是简单的把当前Post的数据返回，这里使用json字符串进行传递，传递的结构如下</p>\n<p><img alt=\"\" height=\"171\" src=\"..\\..\\static\\image\\04bb5fab7be54b4a872dfd92cf7f743f.png\" width=\"211\"/></p>\n<p> <img alt=\"\" height=\"243\" src=\"..\\..\\static\\image\\d796432085ec4819b6631e54aa9c81c7.png\" width=\"664\"/></p>\n<p><strong><span style=\"color:#4da8ee;\"> 需要注意两点，首先生成exe之后，存在于webservice中方法vi里的全局变量好像失效了（需要的朋友们自己再验证一下，我这里只是简单的测试），所以使用了功能型全局变量，也就是类似labview中自带的值改变函数（2017以及之后才有），使用while循环里移位寄存器进行存储</span></strong></p>\n<p>这是labview自带的值改变函数</p>\n<p><img alt=\"\" height=\"488\" src=\"..\\..\\static\\image\\5042a6e457754048b45b540b3fd8a3dc.png\" width=\"479\"/></p>\n<p>这是我自己写的功能型全局变量</p>\n<p> <img alt=\"\" height=\"213\" src=\"..\\..\\static\\image\\e57738d98f3a444399ad2401a18cc9be.png\" width=\"318\"/></p>\n<p>下面是Post方法，读取传入的ison字符解析后进行计算，然后返回</p>\n<p> <img alt=\"\" height=\"519\" src=\"..\\..\\static\\image\\37065feb0f3844afa3784046f04d6e7b.png\" width=\"1200\"/></p>\n<p> 这样，post，get方法就创建好了，其中一些东西需要在webservice右键属性进行修改</p>\n<p><img alt=\"\" height=\"577\" src=\"..\\..\\static\\image\\5676bdfce5104e928a73d21e4f2d4937.png\" width=\"850\"/></p>\n<p>这里同样可以修改vi的方法，以及url的构成方式</p>\n<p><img alt=\"\" height=\"581\" src=\"..\\..\\static\\image\\c9fedd83beb34253a4f690d3923a54a9.png\" width=\"852\"/></p>\n<p> 这个界面如果选择ison，会把输出的response在用json转换一层，所以我还是用了简单的方法，自己生成json，直接输出text，<span style=\"color:#4da8ee;\"><strong>下面的数据流选项如果不勾选，需要在方法vi的接线板上连接response，才能有response的输出</strong></span></p>\n<p> 至此，labview上web服务器的创建就已经完成，右键发布再右键开始即可进行其他客户端的代码调试</p>\n<h2>2.labview客户端编写</h2>\n<p>先贴界面</p>\n<p><img alt=\"\" height=\"462\" src=\"https://img-blog.csdnimg.cn/18464c7a02614686badb0d5fa48f7ed1.gif\" width=\"528\"/></p>\n<p> 后面板截图如下，简单的使用封装vi进行通讯，就不详细说明了</p>\n<p><img alt=\"\" height=\"590\" src=\"..\\..\\static\\image\\d958d9e1109a46bbb8419c0ff5777a84.png\" width=\"1167\"/></p>\n<p> <img alt=\"\" height=\"587\" src=\"..\\..\\static\\image\\6f6700fb70b047fb82fc14f40d1c7be6.png\" width=\"1162\"/></p>\n<h2> 3.C#客户端的编写</h2>\n<p>界面与labview客户端基本一致</p>\n<p><img alt=\"\" height=\"536\" src=\"..\\..\\static\\image\\05af3f5bb1ac494d8416279f6ff31b2c.png\" width=\"639\"/></p>\n<p> MainWindow代码</p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing Newtonsoft.Json;\n\nnamespace HttpTest\n{\n    /// &lt;summary&gt;\n    /// Interaction logic for MainWindow.xaml\n    /// &lt;/summary&gt;\n    public partial class MainWindow : Window\n    {\n        \n        public MainWindow()\n        {\n            InitializeComponent();\n        }\n        private void windowload(object sender, RoutedEventArgs e)\n        {\n            string[] op = new string[] {\"Add\", \"Subtract\", \"Multiply\", \"Divide\" };\n            ipaddress.Text = \"127.0.0.1\";\n            port.Text = \"8080\"; \n            timeout.Text = \"2000\";\n            A.Text = \"\";\n            B.Text = \"\";\n            operation.ItemsSource = op;\n            operation.Text = op[0];\n            rev.Text = \"\";\n        }\n        private HttpTest.http.httpser webser = new http.httpser();\n        class httpjsonstruct\n\n        {\n\n            public string? a { get; set; }\n\n            public string? b { get; set; }\n\n            public string? operation { get; set; }\n\n        }\n        private void post_Click(object sender, RoutedEventArgs e)//Response=333.00\n        {\n            httpjsonstruct ob = new httpjsonstruct() { a = A.Text, b = B.Text, operation = operation.Text };\n            string jsonString = JsonConvert.SerializeObject(ob, new JsonSerializerSettings() { ReferenceLoopHandling = ReferenceLoopHandling.Ignore});\n            int time = Convert.ToInt32(timeout.Text);\n            rev.Text = webser.HttpPost(\"http://\"+ipaddress.Text+ \":\"+port.Text+ \"/BasicOperation/Update_Operand\", jsonString, time);//http://127.0.0.1:8001/BasicOperation/Update_Operand\n        }\n\n        private void get_Click(object sender, RoutedEventArgs e)//Response={\"a\":\"12\",\"b\":\"24\",\"operation\":\"Add\"}\n        {\n            int time = Convert.ToInt32(timeout.Text);\n            string getstring = webser.HttpGet(\"http://\" + ipaddress.Text + \":\" + port.Text + \"/BasicOperation/Get_Content\", time);\n            getstring = getstring.Substring(getstring.IndexOf('=')+1);\n            httpjsonstruct? getcontent = JsonConvert.DeserializeObject(getstring, typeof(httpjsonstruct)) as httpjsonstruct;\n            rev.Text = \"a=\" + getcontent?.a+\"\\r\\n\"+\"b=\" + getcontent?.b+ \"\\r\\n\"+\"operation=\" + getcontent?.operation+ \"\\r\\n\";\n        }\n    }\n}</code></pre>\n<p>添加了一个自定义的类，用来写http的post和get方法</p>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Web;\nusing System.Net;\nusing System.IO;\n\nnamespace HttpTest\n{\n        public static class http\n        {\n            public static string receive = \"\";\n            public class httpser \n            {\n                public string HttpPost(string Url, string postDataStr, int timeout)\n                {\n                    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(Url);\n                    request.Timeout = timeout;\n                    request.Method = \"POST\";\n                    request.ContentType = \"application/x-www-form-urlencoded\";\n                    Encoding encoding = Encoding.UTF8;\n                    byte[] postData = encoding.GetBytes(postDataStr);\n                    request.ContentLength = postData.Length;\n                    Stream HttpRequestStream = request.GetRequestStream();\n                    HttpRequestStream.Write(postData, 0, postData.Length);\n                    HttpRequestStream.Close();\n                    HttpWebResponse response = (HttpWebResponse)request.GetResponse();\n                    Stream HttpResponseStream = response.GetResponseStream();\n                    StreamReader myStreamReader = new StreamReader(HttpResponseStream, encoding);\n                    string retString = myStreamReader.ReadToEnd();\n                    myStreamReader.Close();\n                    HttpResponseStream.Close();\n\n                    return retString;\n                }\n                public string HttpGet(string Url, int timeout)\n                {\n                    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(Url);\n                    request.Timeout = timeout;\n                    request.Method = \"GET\";\n                    request.ContentType = \"text/html;charset=UTF-8\";\n                    HttpWebResponse response = (HttpWebResponse)request.GetResponse();\n                    Stream HttpResponseStream = response.GetResponseStream();\n                    StreamReader myStreamReader = new StreamReader(HttpResponseStream, Encoding.GetEncoding(\"utf-8\"));\n                    string retString = myStreamReader.ReadToEnd();\n                    myStreamReader.Close();\n                    HttpResponseStream.Close();\n                    return retString;\n                }\n            }\n            \n        }\n    }</code></pre>\n<p>全部完成后，最终实现的效果如下<img alt=\"\" height=\"513\" src=\"https://img-blog.csdnimg.cn/e297683f96824fbc8b861f1c656995ef.gif\" width=\"1122\"/></p>\n<p>源代码地址</p>\n<p><a class=\"has-card\" href=\"https://download.csdn.net/download/qq_29898917/85444567\" title=\"Labview创建webservice与C#进行简单的http通信(post，get)-C#文档类资源-CSDN下载\"><span class=\"link-card-box\"><span class=\"link-title\">Labview创建webservice与C#进行简单的http通信(post，get)-C#文档类资源-CSDN下载</span><span class=\"link-desc\">labview创建webservice，客户端，C#创建客户端最终实现C#和labview使用ht更多下载资源、学习资料请访问CSDN下载频道.</span><span class=\"link-link\"><img alt=\"\" class=\"link-link-icon\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\"/>https://download.csdn.net/download/qq_29898917/85444567</span></span></a></p>\n</div>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-05-23 16:57:08", "summary": "手里有个项目需要与使用进行通讯，简单写了个，是个半吊子水平，记录一下过程方便以后查阅的创建和编写有关使用创建的方法与实例网上有很多，这里主要介绍，方法的创建和使用，如果是之前没有相关的通讯经验，推荐简"}