{"blogid": "125908011", "writerAge": "码龄2年", "writerBlogNum": "48", "writerCollect": "669", "writerComment": "1135", "writerFan": "1942", "writerGrade": "5级", "writerIntegral": "2353", "writerName": "广龙宇", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125908011.jpg", "writerRankTotal": "8128", "writerRankWeekly": "115", "writerThumb": "618", "writerVisitNum": "1805888", "blog_read_count": "24198", "blog_time": "于 2022-07-26 07:28:36 发布", "blog_title": "【一起学Rust | 基础篇】Rust基础——变量和数据类型", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p style=\"text-align:center;\"> <img alt=\"\" src=\"..\\..\\static\\image\\c25d1bdfde5f45a78978e3c27a3cac87.png\"/></p>\n<p></p>\n<h1 id=\"main-toc\" style=\"text-align:center;\"><strong>目录</strong></h1>\n<p id=\"%E5%89%8D%E8%A8%80-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></p>\n<p id=\"%E4%B8%80%E3%80%81%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F\">一、定义变量</a></p>\n<p id=\"%E4%B8%80%E3%80%81Rust%E5%8F%98%E9%87%8F%E7%9A%84%E5%8F%AF%E5%8F%98%E6%80%A7-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81Rust%E5%8F%98%E9%87%8F%E7%9A%84%E5%8F%AF%E5%8F%98%E6%80%A7\">二、Rust变量的可变性</a></p>\n<p id=\"%E4%BA%8C%E3%80%81Rust%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81Rust%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">​编辑</a></p>\n<p id=\"%E4%B8%89%E3%80%81Rust%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%89%E3%80%81Rust%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">三、Rust基本数据类型</a></p>\n<p id=\"1.%E5%BC%95%E5%85%A5%E5%BA%93-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E5%BC%95%E5%85%A5%E5%BA%93\">1.数值类型</a></p>\n<p id=\"%E6%95%B4%E5%9E%8B-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%95%B4%E5%9E%8B\">整型</a></p>\n<p id=\"%E6%B5%AE%E7%82%B9%E5%9E%8B-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%B5%AE%E7%82%B9%E5%9E%8B\">浮点型</a></p>\n<p id=\"2.%E8%AF%BB%E5%85%A5%E6%95%B0%E6%8D%AE-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E8%AF%BB%E5%85%A5%E6%95%B0%E6%8D%AE\">2.字符类型</a></p>\n<p id=\"3.%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B-toc\" style=\"margin-left:40px;\"><a href=\"#3.%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B\">3.布尔类型</a></p>\n<p id=\"4.%E5%85%83%E7%BB%84%E7%B1%BB%E5%9E%8B-toc\" style=\"margin-left:40px;\"><a href=\"#4.%E5%85%83%E7%BB%84%E7%B1%BB%E5%9E%8B\">四、复合类型</a></p>\n<p id=\"%E5%85%83%E7%BB%84-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%85%83%E7%BB%84\">元组</a></p>\n<p id=\"%E6%95%B0%E7%BB%84-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%95%B0%E7%BB%84\">数组</a></p>\n<p id=\"%E5%9B%9B%E3%80%81%E5%B8%B8%E9%87%8F-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%9B%9B%E3%80%81%E5%B8%B8%E9%87%8F\">五、常量</a></p>\n<p id=\"%E6%80%BB%E7%BB%93-toc\" style=\"margin-left:0px;\"><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></p>\n<p id=\"%E4%BD%9C%E4%B8%9A-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BD%9C%E4%B8%9A\">作业</a></p>\n<p id=\"%E5%8F%98%E9%87%8F%E5%8F%AA%E6%9C%89%E5%88%9D%E5%A7%8B%E5%8C%96%E4%BA%86%E6%89%8D%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%8F%98%E9%87%8F%E5%8F%AA%E6%9C%89%E5%88%9D%E5%A7%8B%E5%8C%96%E4%BA%86%E6%89%8D%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8\">变量只有初始化了才可以使用</a></p>\n<p id=\"%E4%BD%BF%E7%94%A8%C2%A0mut%C2%A0%E5%B0%86%E5%8F%98%E9%87%8F%E6%A0%87%E8%AE%B0%E4%B8%BA%E5%8F%AF%E5%8F%98-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%BD%BF%E7%94%A8%C2%A0mut%C2%A0%E5%B0%86%E5%8F%98%E9%87%8F%E6%A0%87%E8%AE%B0%E4%B8%BA%E5%8F%AF%E5%8F%98\">使用 mut 将变量标记为可变</a></p>\n<p id=\"%E5%8F%98%E9%87%8F%E8%A7%A3%E6%9E%84-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%8F%98%E9%87%8F%E8%A7%A3%E6%9E%84\">变量解构</a></p>\n<hr id=\"hr-toc\"/>\n<p><strong>前言</strong></p>\n<p>经过前面几期的学习，大家应该对Rust已经有了个初步的了解。现在我们将从Rust的基础开始学习。</p>\n<p>变量是一个编程语言必要的内容，学习任何一门编程语言都离不开变量，而是基础中的基础，学习Rust也是这样的。本期我们将从Rust变量的概念开始讲起，同时搭配编程案例，辅以作业，帮助大家学习和理解Rust的变量基础概念。</p>\n<hr/>\n<p></p>\n<h1 id=\"%E4%B8%80%E3%80%81%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F\">一、定义变量</h1>\n<p>Rust定义变量需要使用关键词<strong><span style=\"color:#fe2c24;\">let</span></strong><span style=\"color:#0d0016;\">，这点和Javascript是一致的，如果你有JS开发的经验，那你应该很熟悉。现在我们定义几个变量</span></p>\n<pre><code class=\"language-rust\">let x = 5;\nlet y = 5.0;\nlet str = String::from(\"Hello\");</code></pre>\n<p>以上的几个变量都是没有问题的，定义了三个变量，x是整数型的，y是浮点型的，z是字符串型的。除此以外，Rust还支持指定变量类型来定义变量</p>\n<p></p>\n<pre><code class=\"language-rust\">let x: i32 = 5;\nlet y: f64 = 5.0;\nlet str: String = String::from(\"Hello\");</code></pre>\n<p>其实我们并不是一定得指定类型，因为Rust可以自动推断你使用的是哪种类型。 </p>\n<h1 id=\"%E4%B8%80%E3%80%81Rust%E5%8F%98%E9%87%8F%E7%9A%84%E5%8F%AF%E5%8F%98%E6%80%A7\"><a id=\"pandas_16\"></a>二、Rust变量的可变性</h1>\n<p>在Rust中，变量默认是<strong><span style=\"color:#fe2c24;\">不可变</span></strong>的。如果你写了如下代码，就会报错</p>\n<pre><code class=\"language-rust\">fn main() {\n    let x = 5;\n    println!(\"The value of x is: {x}\");\n    x = 6;\n    println!(\"The value of x is: {x}\");\n}</code></pre>\n<p>报错如下</p>\n<h1 id=\"%E4%BA%8C%E3%80%81Rust%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><a id=\"_19\"></a><img alt=\"\" height=\"445\" src=\"..\\..\\static\\image\\a77d4f25641f4535bc28209699ffe9ab.png\" width=\"1200\"/></h1>\n<p>现在我们分析一下这个报错，首先看<span style=\"color:#fe2c24;\">红色</span>的报错，翻译过来的意思是，<span style=\"color:#fe2c24;\">不可变的变量不可以赋值两次</span>。意思就是不可变的变量不能再次赋值。</p>\n<p>然后我们看<span style=\"color:#38d8f0;\">蓝色</span>的部分，<span style=\"color:#38d8f0;\">第一次给x分配值，帮助：考虑使x变得可变，`mut x`。</span><span style=\"color:#0d0016;\">可以看出，蓝色的部分是帮助我们修改这个错误的，这也是Rust比较强大的地方之一。按照这个提示，我们应该这么改，</span></p>\n<pre><code class=\"language-rust\">    let mut x: i32 = 5;\n    print!(\"The value of x is: {}\", x);\n    x = 6;\n    print!(\"The value of x is: {}\", x);</code></pre>\n<p> 此时我们继续运行看看，</p>\n<p><img alt=\"\" height=\"189\" src=\"..\\..\\static\\image\\6d10ea86f46a4b7cb60b135b15ed94b3.png\" width=\"733\"/></p>\n<p>因此我们得出结论，Rust的变量默认是不可变的，只有添加<span style=\"color:#38d8f0;\">mut</span>关键字以后才会变得<span style=\"color:#fe2c24;\">可变</span>。 </p>\n<p></p>\n<h1 id=\"%E4%B8%89%E3%80%81Rust%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">三、Rust基本数据类型</h1>\n<h2 id=\"1.%E5%BC%95%E5%85%A5%E5%BA%93\"><a id=\"1_20\"></a>1.数值类型</h2>\n<p><span style=\"color:#4d4d4d;\">数值类型又分为</span><span style=\"color:#fe2c24;\">整数型、浮点数、序列类型</span><span style=\"color:#4d4d4d;\">。</span></p>\n<h3 id=\"%E6%95%B4%E5%9E%8B\"><span style=\"color:#4d4d4d;\">整型</span></h3>\n<table align=\"center\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\"><tbody><tr><td><strong>长度</strong></td><td><strong>有符号</strong></td><td><strong>无符号</strong></td></tr><tr><td>8-bit</td><td>i8</td><td>u8</td></tr><tr><td>16-bit</td><td>i16</td><td>u16</td></tr><tr><td>32-bit</td><td>i32</td><td>u32</td></tr><tr><td>64-bit</td><td>i64</td><td>u64</td></tr><tr><td>128-bit</td><td>i128</td><td>u128</td></tr><tr><td>arch</td><td>isize</td><td>usize</td></tr></tbody></table>\n<p>其中，每个长度都有有符号和无符号两种，有符号表示这个数分正数和负数，无符号则表示这个数据类型只有正数。</p>\n<p>有符号的整型取值范围是</p>\n<p class=\"img-center\"><img alt=\"\" height=\"51\" src=\"..\\..\\static\\image\\354dc3379e534ddd9f026e5c1ee76e40.png\" width=\"177\"/></p>\n<p> 其中n是长度。</p>\n<p>另外，<code>isize</code> 和 <code>usize</code> 类型依赖运行程序的计算机架构：64 位架构上它们是 64 位的， 32 位架构上它们是 32 位的。</p>\n<p>同时也支持用不同的形式表示不同进制的字面量。</p>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\"><thead><tr><th>数字字面值</th><th>例子</th></tr></thead><tbody><tr><td>Decimal (十进制)</td><td><code>98_222</code></td></tr><tr><td>Hex (十六进制)</td><td><code>0xff</code></td></tr><tr><td>Octal (八进制)</td><td><code>0o77</code></td></tr><tr><td>Binary (二进制)</td><td><code>0b1111_0000</code></td></tr><tr><td>Byte (单字节字符)(仅限于<code>u8</code>)</td><td><code>b'A'</code></td></tr></tbody></table>\n<h3 id=\"%E6%B5%AE%E7%82%B9%E5%9E%8B\">浮点型</h3>\n<p>Rust 也有两个原生的 <strong>浮点数 </strong>类型，它们是带小数点的数字。Rust 的浮点数类型是 <code>f32</code> 和 <code>f64</code>，分别占 32 位和 64 位。浮点数采用 IEEE-754 标准表示。<code>f32</code> 是单精度浮点数，<code>f64</code> 是双精度浮点数。默认类型是 <code>f64</code>，因为在现代 CPU 中，它与 <code>f32</code> 速度几乎一样，不过精度更高。<span style=\"color:#fe2c24;\">所有的浮点型都是有符号的</span>。以下是使用浮点型的实例。</p>\n<pre><code class=\"language-rust\">fn main() {\n    let x = 2.0; // f64\n\n    let y: f32 = 3.0; // f32\n}</code></pre>\n<p></p>\n<h2 id=\"2.%E8%AF%BB%E5%85%A5%E6%95%B0%E6%8D%AE\"><a id=\"2_34\"></a>2.字符类型</h2>\n<p>和C语言一样，char也是Rust的原生类型。但是与之不同的是，Rust的char类型是Unicode的，支持更多的字符，以下是使用字符类型的例子，<span style=\"background-color:#cccccc;\">（如果你能复制到梵文，连梵文也能编码了。）</span></p>\n<pre><code class=\"language-rust\">fn main() {\n    let c = 'z';\n    let z: char = 'ℤ'; // 指定变量类型\n    let heart_eyed_cat = '😻';\n}</code></pre>\n<p>要注意分清楚字符和字符串，字符使用的是<span style=\"color:#fe2c24;\">单引号</span>，字符串使用的是<span style=\"color:#fe2c24;\">双引号</span>。 </p>\n<h2 id=\"3.%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B\">3.布尔类型</h2>\n<p>Rust 中的布尔类型有两个可能的值：<code>true</code> 和 <code>false</code>。Rust 中的布尔类型使用 <code>bool</code> 表示。例如：</p>\n<pre><code class=\"language-rust\">fn main() {\n    let t = true;\n\n    let f: bool = false; // 指定变量类型\n}\n</code></pre>\n<h2 id=\"4.%E5%85%83%E7%BB%84%E7%B1%BB%E5%9E%8B\">四、复合类型</h2>\n<p><strong>复合类型</strong>可以将多个值组合成一个类型。Rust 有两个原生的复合类型：<span style=\"color:#a2e043;\">元组</span>（tuple）和<span style=\"color:#a2e043;\">数组</span>（array）。</p>\n<h3 id=\"%E5%85%83%E7%BB%84\">元组</h3>\n<p>元组是一个将多个其他类型的值组合进一个复合类型的主要方式。可以将多个不同类型的值进行复合，<strong><span style=\"color:#fe2c24;\">但是</span></strong>元组长度固定：一旦声明，其长度不会增大或缩小。</p>\n<pre><code class=\"language-rust\">fn main() {\n    let tup1 = (500, 6.4, 1);\n    let tup2: (i32, f64, u8) = (500, 6.4, 1); // 指定类型\n}\n</code></pre>\n<p>同时元组也支持<span style=\"color:#fe2c24;\"><strong>解构</strong></span>操作 </p>\n<pre><code class=\"language-rust\">fn main() {\n    let tup = (500, 6.4, 1);\n\n    let (x, y, z) = tup;\n\n    println!(\"y的值是: {y}\");\n}</code></pre>\n<p>访问元组的值是使用元素在元组中的索引来访问的，<strong><span style=\"color:#fe2c24;\">索引是从0开始的</span></strong>，与数组是一样的</p>\n<pre><code class=\"language-rust\">fn main() {\n    let x: (i32, f64, u8) = (500, 6.4, 1);\n\n    let x1 = x.0;\n\n    let x2 = x.1;\n\n    let x3 = x.2;\n}</code></pre>\n<p></p>\n<h3 id=\"%E6%95%B0%E7%BB%84\">数组</h3>\n<p>与元组不同，数组中的每个元素的<strong><span style=\"color:#fe2c24;\">类型必须相同</span></strong>。Rust 中的数组与一些其他语言中的数组不同，Rust中的<strong><span style=\"color:#fe2c24;\">数组长度是固定的</span></strong>。使用方式如下</p>\n<pre><code class=\"language-rust\">fn main() {\n    let a = [1, 2, 3, 4, 5];\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n              \"August\", \"September\", \"October\", \"November\", \"December\"];\n}\n</code></pre>\n<p>同时也可以指定元素类型</p>\n<pre><code class=\"language-rust\">let a: [i32; 5] = [1, 2, 3, 4, 5];</code></pre>\n<p>如果初始化数组里面的值都是一样的，那么就有种简便的写法，如下，创建了一个数组a，其中有5个元素，这五个元素都是整数型3</p>\n<pre><code class=\"language-rust\">let a = [3; 5];</code></pre>\n<p> 访问数组中的元素也是同其他编程语言一样</p>\n<pre><code class=\"language-rust\">fn main() {\n    let a = [1, 2, 3, 4, 5];\n\n    let a1 = a[0];\n    let a2 = a[1];\n}\n</code></pre>\n<p>但是要注意，不要尝试越界访问数组元素，也就是说，要访问数组长度内的元素。 </p>\n<h1 id=\"%E5%9B%9B%E3%80%81%E5%B8%B8%E9%87%8F\">五、常量</h1>\n<p>常量与不可变量是类似的，但是是不同的。<em>常量(constants)</em> 是绑定到一个名称的不允许改变的值。</p>\n<ul><li>不可变量是默认不可变</li><li>常量是总是不能变</li><li>常量可以在任何作用域中声明</li><li>常量只能被设置为常量表达式，而不可以是其他任何只能在运行时计算出的值</li></ul>\n<p>申明一个常量要用<span style=\"color:#fe2c24;\"><strong>const</strong></span></p>\n<pre><code class=\"language-rust\">\nfn main() {\nconst THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3;\n}\n</code></pre>\n<hr/>\n<h1 id=\"%E6%80%BB%E7%BB%93\"><a id=\"_45\"></a>总结</h1>\n<p>以上就是本期所要讲述的内容了。本期主要讲了</p>\n<ul><li>变量的定义</li><li>变量的可变性</li><li>基本变量类型 \n  <ul><li>整型</li><li>布尔型</li><li>字符型</li></ul></li><li>复合型 \n  <ul><li>数组</li><li>元组</li></ul></li><li>常量</li></ul>\n<p>虽然很努力的组织内容了，但还是感觉不是很合理，在后期一定要调整，方便新手入门，让更多人能够学到Rust。</p>\n<p></p>\n<h1 id=\"%E4%BD%9C%E4%B8%9A\"><strong>作业</strong></h1>\n<p>完成以下作业是你学好rust的重要组成部分。以下题目摘自《Rust练习实践》</p>\n<h3 id=\"%E5%8F%98%E9%87%8F%E5%8F%AA%E6%9C%89%E5%88%9D%E5%A7%8B%E5%8C%96%E4%BA%86%E6%89%8D%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8\">变量只有初始化了才可以使用</h3>\n<pre><code class=\"language-rust\">\n// 修复下面代码的错误并尽可能少的修改\nfn main() {\n    let x: i32; // 未初始化，但被使用\n    let y: i32; // 未初始化，也未被使用\n    println!(\"x is equal to {}\", x); \n}\n</code></pre>\n<h3 id=\"%E4%BD%BF%E7%94%A8%C2%A0mut%C2%A0%E5%B0%86%E5%8F%98%E9%87%8F%E6%A0%87%E8%AE%B0%E4%B8%BA%E5%8F%AF%E5%8F%98\">使用 <code>mut</code> 将变量标记为可变</h3>\n<pre><code class=\"language-rust\">\n// 完形填空，让代码编译\nfn main() {\n    let __ = 1;\n    __ += 2; \n    \n    println!(\"x = {}\", x); \n}\n</code></pre>\n<h3 id=\"%E5%8F%98%E9%87%8F%E8%A7%A3%E6%9E%84\">变量解构</h3>\n<p></p>\n<pre><code class=\"language-rust\">\n// 修复下面代码的错误并尽可能少的修改\nfn main() {\n    let (x, y) = (1, 2);\n    x += 2;\n\n    assert_eq!(x, 3);\n    assert_eq!(y, 2);\n}\n</code></pre>\n<p></p>\n<p></p>\n</div>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-07-26 07:28:36", "summary": "目录前言一、定义变量二、变量的可变性编辑三、基本数据类型数值类型整型浮点型字符类型布尔类型四、复合类型元组数组五、常量总结作业变量只有初始化了才可以使用使用将变量标记为可变变量解构前言经过前面几期的学"}