{"blogid": "126743694", "writerAge": "码龄1年", "writerBlogNum": "461", "writerCollect": "358", "writerComment": "29", "writerFan": "10608", "writerGrade": "6级", "writerIntegral": "4872", "writerName": "web18334137065", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126743694.jpg", "writerRankTotal": "3649", "writerRankWeekly": "714", "writerThumb": "82", "writerVisitNum": "231690", "blog_read_count": "11", "blog_time": "于 2022-09-07 13:19:44 发布", "blog_title": "JVM内存分配规则", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"JVM_2\"></a>JVM内存分配规则</h1>\n<h1><a id=\"_5\"></a>堆内存分配：</h1>\n<p>JDK8 默认的，新生代（Young）与老年代的比例值为 1:2（该值可以通过参数 -XX:NewRatio来指定）。</p>\n<p>新生代分为 Eden和两个Survior区域，分别被命名为from和to，以示区分。</p>\n<p>默认的，Eden:from:to = 8:1:1（可以通过参数-XX:SurvivorRatio来设定）。</p>\n<p>JVM初始分配的内存由-Xms指定，默认是物理内存的1/64；</p>\n<p>JVM最大分配的内存由-Xmx指 定，默认是物理内存的1/4。默认空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制；空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制。因此服务器一般设置-Xms、-Xmx相等以避免在每次GC 后调整堆的大小。</p>\n<h2><a id=\"_18\"></a>非堆内存分配：</h2>\n<p>-XX:PermSize 256MB</p>\n<p>-XX:MaxPermSize 256MB</p>\n<p>JVM使用-XX:PermSize来设置非堆内存初始值，默认是物理内存的 1/64</p>\n<p>由-XX:MaxPermSize设置最大非堆内存的大小，默认是物理内存的1/4</p>\n<p>非堆内存分为</p>\n<p>Perm Gen 永久代</p>\n<p>JVM Stack Java 虚拟机栈</p>\n<p>Local Method Stack 本地方法栈</p>\n<h2><a id=\"_37\"></a>举个例子</h2>\n<p>初始设置-Xms=512MB后 JVM内存分布如下所示：</p>\n<p>Young 年轻代默认大小大概为 170MB</p>\n<p>Tenured 老年代默认大小大概为 340MB</p>\n<p>新生代中 Eden的默认大小为 136MB</p>\n<p>Survivor区的默认大小为 34MB</p>\n<p>To 和 From区的默认大小为 17MB</p>\n<p>当Eden区的对象经过15次的MInor GC后晋升到老年代</p>\n<h2><a id=\"Promotion_54\"></a>对象提升(Promotion)规则</h2>\n<p>1. 对象优先分配在 Eden 区</p>\n<p>2. 大对象直接进入老年区</p>\n<p>3. 长期存活的对象进入老年代</p>\n<p>4. 动态判断对象年龄</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-09-07 13:19:44", "summary": "内存分配规则堆内存分配：默认的，新生代与老年代的比例值为该值可以通过参数来指定。新生代分为和两个区域，分别被命名为和，以示区分。默认的，可以通过参数来设定。初始分配的内存由指定，默认是物理内存的；最大"}