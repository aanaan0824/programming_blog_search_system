{"blogid": "123821901", "writerAge": "码龄6年", "writerBlogNum": "226", "writerCollect": "865", "writerComment": "75", "writerFan": "172", "writerGrade": "6级", "writerIntegral": "5103", "writerName": "Ashley zhao", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123821901.jpg", "writerRankTotal": "3951", "writerRankWeekly": "6658", "writerThumb": "259", "writerVisitNum": "296656", "blog_read_count": "7993", "blog_time": "已于 2022-03-29 16:17:46 修改", "blog_title": "C++中vector＜vector＜int＞ ＞的用法", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><strong><strong>注意<code>vector&lt;vector&lt;int&gt; &gt;</code>后面的尖括号前面要加上空格,否则在有些编译器出现问题</strong></strong></p>\n<blockquote>\n<p>vector&lt;vector<code>&lt;int&gt;</code>&gt; A;//错误的定义方式<br/> vector&lt;vector<code>&lt;int&gt;</code> &gt; A;//正确的定义方式</p>\n</blockquote>\n<h2><a id=\"vector_5\"></a>一、为什么是vector？</h2>\n<p>对于数组，大家常用索引和指针来操作数组，给程序设计带来了很大的灵活性。但是数组的越界可能会引起程序的崩溃，而且动态性不好，包括动态改变大小，动态申请。有什么办法可以解决这些问题吗？<br/> 关于vector我不想多说，我假设大家都了解temlplate 和 STL比如map、list、vector等）。 学习C++的时候学到过STL（标准模板库）知道vector提供了operator[]函数。可以像数组一样的操作，而且还有边界检查，动态改变大小。vector本来就是可以用来代替一维数组的，vector提供了operator[]函数，可以像数组一样的操作，而且还有边界检查，动态改变大小。这里只介绍用它来代替二维的数组，二维以上的可以依此类推。<br/> <code>vector&lt;vector&lt;int&gt; &gt; array2(3);</code></p>\n<pre><code>   array2可以保存3个向量，向量的长度是可以改变的。array2[i]返回的是第i个向量。同理，array2[i][j]返回的是第i个向量中的第j个元素。\n   vector&lt;vector&lt;int&gt;  &gt; array2(3);\n   array2[1][2]=9;\n</code></pre>\n<p>我保证你的程序会segement failed,原因就是你没有指定向量的大小。用push_back函数可以解决问题,如下：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n   array2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//就定义了一个3X3的数组了（另一个3在 申明时定义的）。而且你可以随时改变它的大小</span>\n</code></pre>\n<h2><a id=\"vector_18\"></a>二、什么是vector？</h2>\n<p>向量（Vector）是一个封装了动态大小数组的顺序容器（Sequence Container）。跟任意其它类型容器一样，它能够存放<strong>各种类型的对象</strong>。可以简单的认为，向量是一个能够<strong>存放任意类型</strong>的<strong>动态数组</strong>。</p>\n<h3><a id=\"20__21\"></a>2.0 容器特性</h3>\n<p>1）顺序序列<br/> 顺序容器中的元素按照严格的线性顺序排序。可以通过元素在序列中的位置访问对应的元素。<br/> 2）动态数组<br/> 支持对序列中的任意元素进行快速直接访问，甚至可以通过指针算述进行该操作。操供了在序列末尾相对快速地添加/删除元素的操作。<br/> 3）能够感知内存分配器的<br/> 容器使用一个内存分配器对象来动态地处理它的存储需求。</p>\n<h3><a id=\"21__28\"></a>2.1. 基本操作</h3>\n<p>a. 头文件<code>#include&lt;vector&gt;</code><br/> b. 创建vector对象：vector dp;<br/> c. 尾部插入数字：vec.push_back(a);<br/> d. 使用下标访问元素，cout&lt;&lt;dp[0]&lt;&lt;endl;记住下标是从0开始的。<br/> 使用迭代器访问元素.<br/> <code>vector::iterator it;</code><br/> <code>for(it=vec.begin();it!=vec.end();it++) cout&lt;&lt;*it&lt;&lt;endl;</code></p>\n<p>e. 插入元素： vec.insert(vec.begin()+i,a);在第i个元素后面插入a;<br/> f. 删除元素： vec.erase(vec.begin()+2);删除第3个元素<br/> vec.erase(vec.begin()+i,vec.end()+j);删除区间[i,j-1];区间从0开始<br/> h. 向量大小:vec.size();<br/> g. 清空:vec.clear();//清空之后，vec.size()为０</p>\n<h3><a id=\"22__42\"></a>2.2. 常见定义方法：</h3>\n<p>(1) <code>vector&lt;int&gt; a(5);</code> //定义了5个整型元素的向量（&lt;&gt;中为元素类型名，它可以是任何合法的数据类型），但没有给出初值，其值是不确定的.<br/> (2）<code>vector&lt;int&gt; a(5,1);</code>//定义了5个整型元素的向量,且给出每个元素的初值为1<br/> (3）<code>vector&lt;int&gt; a(b);</code> //用b向量来创建a向量，整体复制性赋值<br/> (4）<code>vector&lt;int&gt; a(b.begin(),b.begin+3);</code> //定义了a值为b中第0个到第2个（共3个）元素<br/> (5）<code>int b[7]={1,2,3,4,5,9,8};</code> <code>vector&lt;int&gt; a(b,b+7);</code> //从数组中获得初值</p>\n<h3><a id=\"23__49\"></a>2.3. 使用方法</h3>\n<h5><a id=\"231_vector_50\"></a>2.3.1 创建一维vector：</h5>\n<blockquote>\n<p>vector<code>&lt;int&gt;</code>nums;//不指定长度<br/> vector<code>&lt;int&gt;</code>nums(n); // 指定长度为n</p>\n</blockquote>\n<p>添加元素</p>\n<blockquote>\n<p>nums.push_back(1);//直接从数组末端添加<br/> nums[i] = 1;//直接赋值给第i个位置</p>\n</blockquote>\n<p>删除元素</p>\n<blockquote>\n<p>nums.resize(nums.size-i); //直接将数组长度减小，某种方式上删掉了后面i个<br/> nums.pop_back();//删掉最后一个元素</p>\n</blockquote>\n<p>数组遍历</p>\n<blockquote>\n<p>for(int i = 0; i &lt; nums.size(); i++) cout&lt;&lt;nums[i]&lt;&lt;endl;</p>\n</blockquote>\n<p>获得长度</p>\n<blockquote>\n<p>nums.size()</p>\n</blockquote>\n<p>排序(O(nlogn))</p>\n<blockquote>\n<p>sort(nums.begin(),nums.end());</p>\n</blockquote>\n<p>翻转</p>\n<blockquote>\n<p>reverse(nums.begin(), nums.end());</p>\n</blockquote>\n<p>合并两个vector<br/> 合并nums1和nums2，并将合并后的数组赋值给nums</p>\n<blockquote>\n<p>vector<code>&lt;int&gt;</code>nums1(m),nums2(n);<br/> vector<code>&lt;int&gt;</code>nums;<br/> nums.resize(m+n);<br/> merge(nums1.begin(), nums1.end(),nums2.begin(),nums2.end(),nums);</p>\n</blockquote>\n<h5><a id=\"232_vector_82\"></a>2.3.2 定义二维vector</h5>\n<blockquote>\n<p>vector&lt;vector<code>&lt;int&gt;</code> &gt; v;</p>\n</blockquote>\n<p>访问二维vector的元素: 如果指定外层和内层向量的大小，就可用operator[]进行读和写；如果只指定外层向量大小，就能用push_back()函数进行写，不能用operator[]进行读和写。</p>\n<p>1). 创建m*n的二维vector:</p>\n<blockquote>\n<p>vector&lt;vector <code>&lt;int&gt; &gt;</code>nums(m ,vector<code>&lt;int&gt;</code>(n)); //m*n的二维vector</p>\n</blockquote>\n<p>定义了一个vector容器，元素类型为vector，初始化为包含m个vector对象，每个对象都是一个新创立的vector对象的拷贝，而这个新创立的vector对象被初始化为包含n个0。<br/> vector(n)表示构造一个无名且含n个0的vector对象。</p>\n<p>2). 动态创建m*n的二维vector<br/> 方法一：</p>\n<pre><code class=\"prism language-cpp\">vector<span class=\"token operator\">&lt;</span>vector <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&gt;</span> nums<span class=\"token punctuation\">;</span>\nnums<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>方法二：</p>\n<pre><code class=\"prism language-cpp\">vector<span class=\"token operator\">&lt;</span>vector <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&gt;</span> nums<span class=\"token punctuation\">;</span>\nnums<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>3).初始化二维数组</p>\n<pre><code class=\"prism language-cpp\">vector<span class=\"token operator\">&lt;</span>vector `<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span>` <span class=\"token operator\">&gt;</span> <span class=\"token function\">nums</span><span class=\"token punctuation\">(</span>m <span class=\"token punctuation\">,</span>vector`<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span>`<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//m*n的二维vector，所有元素为0</span>\n</code></pre>\n<p>获得二维数组的行数：nums.size();<br/> 获得二维数组的列数：nums[0].size()</p>\n<p>4). 数组遍历</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"vectorint_125\"></a>三、<code>vector&lt;int&gt;</code>指针形式比较</h2>\n<p>在使用STL容器（比如map、list、vector等）的时候，是用放一个对象还是放一个对象指针？<br/> 即是用vector还是vector&lt;int*&gt;，这里的vector可以换成其他的容器，int可以换成其他基本类型，也可以自定义的数据结构或类。</p>\n<p>1）. vector不需要动态操作内存，不用担心内存泄露等问题；vector&lt;int*&gt;要注意new和delete成对使用。<br/> 2）. 当int改变成其他类型或结构或类的时候，用vector&lt;int*&gt;这种方式比较方便，容器里放的内容占用的内存也相对要少一些，指针在用的时候，去申请空间，不用，那就是个占用4个字节的地址。<br/> 3）. 当需要对变量不断读写操作时，最好得用指针形式，仅仅通过传递指针加快了访问速度。</p>\n<pre><code class=\"prism language-cpp\">vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> vecTemp<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tvecTemp<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//这种方式不需要动态new内存，当然也不用delete。</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-cpp\">vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> vecTemp<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> nTemp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n      <span class=\"token operator\">*</span>nTemp <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n      vecTemp<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nTemp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>vector&lt;int&gt; *a</code>;<br/> 当使用这种vector指针时，指针a代表的是：不能通过a[i]访问值，只可能通过a-&gt;at(i)访问值。</p>\n<h2><a id=\"_154\"></a>四.几种常见场景</h2>\n<h3><a id=\"41_vectorint_nums_155\"></a>4.1 <code>vector&lt;int&gt;&amp; nums</code></h3>\n<p>1） int &amp;nums：一个整型变量的引用<br/> 2） vector nums：nums是一个容器变量，容器名称为vector，容器内存的数据为int型<br/> 3） vector &amp;nums：nums为一个引用，引用的内容是vector这个容器内部存放的整型数据</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//1) 创建一维vector</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> nums<span class=\"token punctuation\">;</span> <span class=\"token comment\">//不指定长度</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">nums</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//指定长度 </span>\n<span class=\"token comment\">//2) 添加元素</span>\nnums<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//直接在末端添加元素1</span>\n<span class=\"token comment\">//3) 删除元素</span>\nnums<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span>size<span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//删除后面i个元素</span>\nnums<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//删除最后一个元素 </span>\n<span class=\"token comment\">//4) 获取长度</span>\nnums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//5) 判空</span>\nnums<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"42__vectorint_nums_174\"></a>4.2 <code>vector&lt;int&gt; nums</code></h3>\n<pre><code class=\"prism language-cpp\">vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> a<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>说明： 带&amp;表示传入函数的是vector的引用（即物理位置），函数内部对vector改动，vector就会改变；<br/> 不带&amp;表示传入的是vector的复制品（开辟了另一块位置），函数内部对其改动，不会影响原本的vector；</p>\n<h3><a id=\"43_vector_vectorint__vm_vectorintn__182\"></a>4.3 <code>vector&lt; vector&lt;int&gt; &gt; v(m, vector&lt;int&gt;(n) );</code></h3>\n<p>定义了一个vector容器，元素类型为vector，初始化为包含m个vector对象，每个对象都是一个新创立的vector对象的拷贝，而这个新创立的vector对象被初始化为包含n个0。<br/> 从结果上看，类似于创建了一个m×n的二维数组，而且可以通过v[i][j]的方式来访问元素（vector支持下标访问元素）。</p>\n<h3><a id=\"44_vector_vector_int__dpm_vectorintn__185\"></a>4.4 <code>vector&lt; vector &lt;int&gt; &gt; dp(m, vector&lt;int&gt;(n) )</code></h3>\n<p><code>vector&lt;类型&gt;标识符(最大容量,初始所有值)</code><br/> <code>vector&lt; vector&lt;int&gt; &gt; v(m, vector&lt;int&gt;(n) );</code>定义了一个vector容器，元素类型为vector，初始化为包含m个vector对象，每个对象都是一个新创立的vector对象的拷贝，而这个新创立的vector对象被初始化为包含n个0。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-29 16:17:46", "summary": "注意后面的尖括号前面要加上空格否则在有些编译器出现问题错误的定义方式正确的定义方式一、为什么是？对于数组，大家常用索引和指针来操作数组，给程序设计带来了很大的灵活性。但是数组的越界可能会引起程序的崩溃"}