{"blogid": "126743351", "writerAge": "码龄24天", "writerBlogNum": "50", "writerCollect": "0", "writerComment": "1", "writerFan": "26", "writerGrade": "3级", "writerIntegral": "510", "writerName": "web13116256725", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126743351.jpg", "writerRankTotal": "39599", "writerRankWeekly": "11447", "writerThumb": "0", "writerVisitNum": "1947", "blog_read_count": "10", "blog_time": "于 2022-09-07 12:48:58 发布", "blog_title": "JVM 性能调优监控工具之jstack", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"JVM_jstack_2\"></a>JVM 性能调优监控工具之jstack</h1>\n<h3><a id=\"_5\"></a>文章目录</h3>\n<ul><li><a href=\"#JVM_jstack_0\">JVM 性能调优监控工具之jstack</a></li><li><a href=\"#_5\">前言</a></li><li><a href=\"#jstack____10\">一、jstack 是什么？</a></li><li><a href=\"#_18\">二、使用步骤</a></li><li>\n<ul><li><a href=\"#1pid_19\">1.查询服务器pid</a></li><li><a href=\"#2CPU_27\">2.查看服务器进程中最耗费CPU的线程</a></li><li><a href=\"#316_35\">3.转换成16进制码</a></li><li><a href=\"#3jstackpid_41\">3.通过jstack输出进程pid的堆栈信息</a></li><li><a href=\"#3_48\">3.定位代码</a></li></ul> </li><li><a href=\"#_54\">总结</a></li></ul>\n<h1><a id=\"_18\"></a>前言</h1>\n<hr/>\n<p>提示：以下是本篇文章正文内容，下面案例可供参考</p>\n<h1><a id=\"jstack__25\"></a>一、jstack 是什么？</h1>\n<p>示例：jstack主要用来查看某个Java进程内的线程堆栈信息。语法格式如下。</p>\n<pre><code>jstack  pid\n</code></pre>\n<h1><a id=\"_33\"></a>二、使用步骤</h1>\n<h2><a id=\"1pid_36\"></a>1.查询服务器pid</h2>\n<p>代码如下（示例）：</p>\n<pre><code>ps -ef|gerp  服务器名称 \n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\08f66c2bf4504db7b0164a193e4132ce.png\"/></p>\n<h2><a id=\"2CPU_46\"></a>2.查看服务器进程中最耗费CPU的线程</h2>\n<p>找出该进程内最耗费CPU的线程，可以使用ps -Lfp pid或者ps -mp pid -o THREAD, tid, time或者top -Hp pid，我这里用第三个：</p>\n<pre><code>top -Hp pid\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\07b75827d8bc4b00acbec2bbb55ef0ba.png\"/></p>\n<h2><a id=\"316_56\"></a>3.转换成16进制码</h2>\n<p>TIME列就是各个Java线程耗费的CPU时间，CPU时间最长的是线程ID为67720的线程，用得到67720的十六进制值为10888，下面会用到。</p>\n<pre><code>printf \"%x\" 67720\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d39ee542340d49c7857c13e5b327d685.png\"/></p>\n<h2><a id=\"3jstackpid_66\"></a>3.通过jstack输出进程pid的堆栈信息</h2>\n<p>然后根据线程ID的十六进制值grep</p>\n<pre><code> jstack 67252 | grep 10888\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b939fa02952f450fb5db3aed5376b18c.png\"/></p>\n<h2><a id=\"3_76\"></a>3.定位代码</h2>\n<p>这是我们项目中用到的占用CPU最高的代码片段，就是线程池的单一模式。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cd4255ef05f6494cb380d95832303d79.png\"/></p>\n<hr/>\n<h1><a id=\"_84\"></a>总结</h1>\n<p>提示：jstack可以定位到线程堆栈，根据堆栈信息我们可以定位到具体代码，所以它在JVM性能调优中使用得非常多。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-09-07 12:48:58", "summary": "性能调优监控工具之文章目录性能调优监控工具之前言一、是什么？二、使用步骤查询服务器查看服务器进程中最耗费的线程转换成进制码通过输出进程的堆栈信息定位代码总结前言提示：以下是本篇文章正文内容，下面案例可"}