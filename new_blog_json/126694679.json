{"blogid": "126694679", "writerAge": "码龄8年", "writerBlogNum": "55", "writerCollect": "1031", "writerComment": "90", "writerFan": "4605", "writerGrade": "4级", "writerIntegral": "1076", "writerName": "青空の霞光", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126694679.jpg", "writerRankTotal": "14930", "writerRankWeekly": "3310", "writerThumb": "416", "writerVisitNum": "99153", "blog_read_count": "244", "blog_time": "于 2022-09-04 21:11:12 发布", "blog_title": "数据结构与算法（四）图形结构篇", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"image-20220818210450592\" src=\"..\\..\\static\\image\\d0f71cc6b22730ae85d3ec0087a6ebc1.png\"/></p>\n<h1><a id=\"_2\"></a>图结构篇</h1>\n<p>图结构在我们的生活中实际上是非常常见的，其中最显著的就是我们的地图了，比如我的家乡重庆：</p>\n<p><img alt=\"image-20220821222600741\" src=\"..\\..\\static\\image\\5ddf584758667cd9d27290b64c0ca260.png\"/></p>\n<p>可以看到，地图盘根错节，错综复杂，不同的道路相互连接，我们可以自由地从这些道路通过，从一个地点到达另一个地点。当然除了地图，我们的计算机网络、你的人际关系网等等，这些都可以用图结构来表示。图结构也是整个数据结构中比较难的一部分，而这一章，我们将探讨图结构的性质与应用。</p>\n<p>图也是由多个结点连接而成的，但是一个结点可以同时连接多个其他结点，多个结点也可以同时指向一个结点，跟我们之前讲解的树结构不同，它是一种多对多的关系：</p>\n<p><img alt=\"image-20220821223128857\" src=\"..\\..\\static\\image\\b32caea622c2736aa4426b67003c9f69.png\"/></p>\n<p>它比树形结构更加复杂，没有明确的层次关系，结点与结点之间的连接关系更加自由，图结构是<strong>任意两个数据对象之间都有可能存在某种特定关系</strong>的数据结构。</p>\n<h2><a id=\"_16\"></a>基本概念</h2>\n<p>图（Graph）一般由两个集合共同构成，一个是非空但是有限的顶点集合V（Vertex），另一个是描述顶点之间连接关系的边集合E（Edge，边集合可以为空集，比如只有一个顶点的情况下，没得连啊），一个图实际上正是由这些结点（顶点）和对应的边组成的。因此，图可以表示为：<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        G\n       \n       \n        =\n       \n       \n        (\n       \n       \n        V\n       \n       \n        ,\n       \n       \n        E\n       \n       \n        )\n       \n      \n      \n       G = (V, E)\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right: 0.2222em;\">V</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0576em;\">E</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>比如一个图我们可以表示为，集合<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        V\n       \n       \n        =\n       \n       \n        {\n       \n       \n        A\n       \n       \n        ,\n       \n       \n        B\n       \n       \n        ,\n       \n       \n        C\n       \n       \n        ,\n       \n       \n        D\n       \n       \n        }\n       \n      \n      \n       V = \\{A,B,C,D\\}\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.2222em;\">V</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">{<!-- --></span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0502em;\">B</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0715em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0278em;\">D</span><span class=\"mclose\">}</span></span></span></span></span>，集合<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        E\n       \n       \n        =\n       \n       \n        {\n       \n       \n        (\n       \n       \n        A\n       \n       \n        ,\n       \n       \n        B\n       \n       \n        )\n       \n       \n        ,\n       \n       \n        (\n       \n       \n        B\n       \n       \n        ,\n       \n       \n        C\n       \n       \n        )\n       \n       \n        ,\n       \n       \n        (\n       \n       \n        C\n       \n       \n        ,\n       \n       \n        D\n       \n       \n        )\n       \n       \n        ,\n       \n       \n        (\n       \n       \n        D\n       \n       \n        ,\n       \n       \n        A\n       \n       \n        )\n       \n       \n        ,\n       \n       \n        (\n       \n       \n        C\n       \n       \n        ,\n       \n       \n        A\n       \n       \n        )\n       \n       \n        }\n       \n      \n      \n       E = \\{(A,B),(B,C),(C,D),(D,A),(C,A)\\}\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0576em;\">E</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">{(</span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0502em;\">B</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right: 0.0502em;\">B</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0715em;\">C</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right: 0.0715em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0278em;\">D</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right: 0.0278em;\">D</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right: 0.0715em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)}</span></span></span></span></span>，图有两种基本形式，一种是上面那样的有向图（有向图表明了方向，从哪个点到哪个点），还有一种是无向图（无向图仅仅是连接，并不指明方向），比如我们上面这样表示就是一个无向图：</p>\n<p><img alt=\"image-20220822101619660\" src=\"..\\..\\static\\image\\09dfd4f8e08ff3ccda00394dfd5ce4b2.png\"/></p>\n<p>每个结点的度就是与其连接的边数，每条边是可以包含权值的，当前也可以不包含。</p>\n<p>当然我们也可以将其表示为有向图，集合<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        V\n       \n       \n        =\n       \n       \n        {\n       \n       \n        A\n       \n       \n        ,\n       \n       \n        B\n       \n       \n        ,\n       \n       \n        C\n       \n       \n        ,\n       \n       \n        D\n       \n       \n        }\n       \n      \n      \n       V = \\{A,B,C,D\\}\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.2222em;\">V</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">{<!-- --></span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0502em;\">B</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0715em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0278em;\">D</span><span class=\"mclose\">}</span></span></span></span></span>，集合<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        E\n       \n       \n        =\n       \n       \n        {\n       \n       \n        &lt;\n       \n       \n        A\n       \n       \n        ,\n       \n       \n        B\n       \n       \n        &gt;\n       \n       \n        ,\n       \n       \n        &lt;\n       \n       \n        B\n       \n       \n        ,\n       \n       \n        C\n       \n       \n        &gt;\n       \n       \n        ,\n       \n       \n        &lt;\n       \n       \n        C\n       \n       \n        ,\n       \n       \n        D\n       \n       \n        &gt;\n       \n       \n        ,\n       \n       \n        &lt;\n       \n       \n        D\n       \n       \n        ,\n       \n       \n        A\n       \n       \n        &gt;\n       \n       \n        ,\n       \n       \n        &lt;\n       \n       \n        C\n       \n       \n        ,\n       \n       \n        A\n       \n       \n        &gt;\n       \n       \n        }\n       \n      \n      \n       E = \\{&lt;A,B&gt;,&lt;B,C&gt;,&lt;C,D&gt;,&lt;D,A&gt;,&lt;C,A&gt;\\}\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0576em;\">E</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">{<!-- --></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.8778em; vertical-align: -0.1944em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0502em;\">B</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">&gt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.7335em; vertical-align: -0.1944em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.8778em; vertical-align: -0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0502em;\">B</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0715em;\">C</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">&gt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.7335em; vertical-align: -0.1944em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.8778em; vertical-align: -0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0715em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0278em;\">D</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">&gt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.7335em; vertical-align: -0.1944em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.8778em; vertical-align: -0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0278em;\">D</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">&gt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.7335em; vertical-align: -0.1944em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.8778em; vertical-align: -0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0715em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">&gt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mclose\">}</span></span></span></span></span>注意有向图的边使用尖括号&lt;&gt;表示。比如上面这个有向图，那么就长这样：</p>\n<p><img alt=\"image-20220822104015728\" src=\"..\\..\\static\\image\\1c586507d4ab2be989aa210ae360fa3e.png\"/></p>\n<p>如果是无向图的一条边(A,B)，那么就称A、B互为邻接点；如果是有向图的一条边&lt;A,B&gt;，那么就称起点A邻接到终点B。有向图的每个结点分为入度和出度，其中入度就是与顶点相连且指向该顶点的边的个数，出度就是从该顶点指向邻接顶点的边的个数。</p>\n<p>只要我们的图中不出现自回路边或是重边，那么我们就可以称这个图为简单图，比如上面两张图都是简单图。而下面的则是典型的非简单图了，其中图一出现了自回路，而图二出现了重边：</p>\n<p><img alt=\"image-20220822112214106\" src=\"..\\..\\static\\image\\5606fba0b00954ccafb23fd61677bc0a.png\"/></p>\n<p>如果在一个无向图中，任意两个顶点都有一条边相连，则称该图为<strong>无向完全图</strong>：</p>\n<p><img alt=\"image-20220822121243988\" src=\"..\\..\\static\\image\\f4a0891deb6f80a2e1ceb8e3cbc25bb0.png\"/></p>\n<p>同样的，在一个有向图中，如果任意两顶点之间都有由方向互为相反的两条边连接，则称该图为<strong>有向完全图</strong>：</p>\n<p><img alt=\"image-20220822113126420\" src=\"..\\..\\static\\image\\77125a074a53d47d43d09bd0c92f027c.png\"/></p>\n<p>图通过边将顶点相连，这样我们就可以从一个顶点经过某条路径到达其他顶点了，比如我们现在想要从下面的V5点到达V1点：</p>\n<p><img alt=\"image-20220822205354964\" src=\"..\\..\\static\\image\\75c4e6af06c59cc995b61ff1b9b45677.png\"/></p>\n<p>那么我们可以有很多种路线，比如经过V2到达，经过V3到达等：</p>\n<p><img alt=\"image-20220822205824613\" src=\"..\\..\\static\\image\\d17e109f1a6c6fdb8405b4b3ce9a301f.png\"/></p>\n<p>在一个无向图中，如果从一个顶点到另一个顶点有路径，那么就称这两个顶点是连通的。可以看到，要从V5到达V1我们可以有很多种选择，从V5可以到达V1（当然也可以反着来），所以，我们称V5和V1连通的。特别的，如果图中任意两点都是连通的，那么我们就称这个图为<strong>连通图</strong>。对于有向图，如果图中任意顶点A和B，既有从A到B的路径，也有B到A的路径，则称该有向图是<strong>强连通图</strong>。</p>\n<p>对于图 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        G\n       \n       \n        =\n       \n       \n        (\n       \n       \n        V\n       \n       \n        ,\n       \n       \n        E\n       \n       \n        )\n       \n      \n      \n       G = (V, E)\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right: 0.2222em;\">V</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0576em;\">E</span><span class=\"mclose\">)</span></span></span></span></span> 和 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        \n         G\n        \n        \n         ′\n        \n       \n       \n        =\n       \n       \n        (\n       \n       \n        \n         V\n        \n        \n         ′\n        \n       \n       \n        ,\n       \n       \n        \n         E\n        \n        \n         ′\n        \n       \n       \n        )\n       \n      \n      \n       G' = (V', E')\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.7519em;\"><span class=\"\" style=\"top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1.0019em; vertical-align: -0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right: 0.2222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.7519em;\"><span class=\"\" style=\"top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right: 0.0576em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.7519em;\"><span class=\"\" style=\"top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span>，若满足 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        \n         V\n        \n        \n         ′\n        \n       \n      \n      \n       V'\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right: 0.2222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.7519em;\"><span class=\"\" style=\"top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span> 是 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        V\n       \n      \n      \n       V\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.2222em;\">V</span></span></span></span></span> 的子集，并且 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        \n         E\n        \n        \n         ′\n        \n       \n      \n      \n       E'\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right: 0.0576em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.7519em;\"><span class=\"\" style=\"top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span> 是 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        E\n       \n      \n      \n       E\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0576em;\">E</span></span></span></span></span> 的子集，则称 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        \n         G\n        \n        \n         ′\n        \n       \n      \n      \n       G'\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.7519em;\"><span class=\"\" style=\"top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span> 是 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        G\n       \n      \n      \n       G\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span></span> 的<strong>子图</strong>，比如下面的两个图：</p>\n<p><img alt=\"image-20220822212041079\" src=\"..\\..\\static\\image\\64af9908eb68971ddcd89d03750ed2e7.png\"/></p>\n<p>其中右边的图就满足上述性质，所以说右边的图是左边图的子图。</p>\n<p>无向图的极大连通子图称为<strong>连通分量</strong>，有向图的极大连通子图称为<strong>强连通分量</strong>。那么什么是极大连通子图呢？首先连通子图就是原图的子图，并且子图也是连通图，同时应该具有最大的顶点数，即再加入原图中的其他顶点会导致子图不连通，拥有极大顶点数的同时也要包含依附于这点顶点所有的边才行，比如：</p>\n<p><img alt=\"image-20220822214010526\" src=\"..\\..\\static\\image\\b0f6ddef2331bc5379fd5c5e930f3850.png\"/></p>\n<p>可以看到右侧图1、2、3都是左图的子图，但是它们并不都是原图的连通分量，首先我们来看图1，它也是一个连通图，并且包含极大顶点数和所有的边（也就是原图内部的这一块）所以说它是连通分量，我们接着来看图2，它虽然也是连通图，但是并没有包含极大顶点数（最多可以吧D也给加上，但是这里没加）所以说并不是。最后来看图3，它也是连通图，并且包含了极大顶点数和边，所以说是连通分量。</p>\n<ul><li>原图为连通图，那么连通分量就是其本身，有且仅有一个。</li><li>原图为非连通图，那么连通分量会有多个。</li></ul>\n<p>对于极小连通子图，我们会在后面的生成树部分进行讲解。</p>\n<hr/>\n<h2><a id=\"_73\"></a>存储结构</h2>\n<p>前面我们介绍了图的一些基本概念，我们接着来看如何在程序中对图结构进行表示，这一部分可能会涉及到某些在《线性代数》这门课程中出现的概念。</p>\n<h3><a id=\"_77\"></a>邻接矩阵</h3>\n<p>邻接矩阵实际上就是用矩阵去表示图中各顶点之间的邻接关系和权值。假设有一个图 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        G\n       \n       \n        =\n       \n       \n        (\n       \n       \n        V\n       \n       \n        ,\n       \n       \n        E\n       \n       \n        )\n       \n      \n      \n       G = (V, E)\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right: 0.2222em;\">V</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0576em;\">E</span><span class=\"mclose\">)</span></span></span></span></span>，其中有N个顶点，那么我们就可以使用一个N×N的矩阵来表示，比如下面有A、B、C、D四个顶点的图：</p>\n<p><img alt=\"image-20220822104015728\" src=\"..\\..\\static\\image\\57c8dc628036b4359f1e98f9320dae4a.png\"/></p>\n<p>此时我们需要使用邻接矩阵来表示它，就像下面这样：</p>\n<p><img alt=\"image-20220822220549501\" src=\"..\\..\\static\\image\\4d3b2a6d0fbd6b3bda55849ecada47ce.png\"/></p>\n<p>对于一个不带权值的图来说：<br/> <span class=\"katex--display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          G\n         \n         \n          \n           i\n          \n          \n           j\n          \n         \n        \n        \n         =\n        \n        \n         \n          {\n         \n         \n          \n           \n            \n             \n              \n               1\n              \n              \n               ,\n              \n              \n               无向图的\n              \n              \n               (\n              \n              \n               \n                v\n               \n               \n                i\n               \n              \n              \n               ,\n              \n              \n               \n                v\n               \n               \n                j\n               \n              \n              \n               )\n              \n              \n               或有向图的\n              \n              \n               &lt;\n              \n              \n               \n                v\n               \n               \n                i\n               \n              \n              \n               ,\n              \n              \n               \n                v\n               \n               \n                j\n               \n              \n              \n               &gt;\n              \n              \n               是图中的边\n              \n             \n            \n           \n          \n          \n           \n            \n             \n              \n               0\n              \n              \n               ,\n              \n              \n               无向图的\n              \n              \n               (\n              \n              \n               \n                v\n               \n               \n                i\n               \n              \n              \n               ,\n              \n              \n               \n                v\n               \n               \n                j\n               \n              \n              \n               )\n              \n              \n               或有向图的\n              \n              \n               &lt;\n              \n              \n               \n                v\n               \n               \n                i\n               \n              \n              \n               ,\n              \n              \n               \n                v\n               \n               \n                j\n               \n              \n              \n               &gt;\n              \n              \n               不是图中的边\n              \n             \n            \n           \n          \n         \n        \n       \n       \n         G_{ij} = \\begin{cases} 1, 无向图的(v_i,v_j)或有向图的&lt;v_i,v_j&gt;是图中的边\\\\ 0, 无向图的(v_i,v_j)或有向图的&lt;v_i,v_j&gt;不是图中的边 \\end{cases} \n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.9694em; vertical-align: -0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3117em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0572em;\">ij</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.2861em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 3em; vertical-align: -1.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top: 0em;\"><span class=\"delimsizing size4\">{<!-- --></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 1.69em;\"><span class=\"\" style=\"top: -3.69em;\"><span class=\"pstrut\" style=\"height: 3.008em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord cjk_fallback\">无向图的</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right: 0.0359em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3117em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.0359em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right: 0.0359em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3117em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.0359em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0572em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.2861em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">或有向图的</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right: 0.0359em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3117em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.0359em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right: 0.0359em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3117em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.0359em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0572em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.2861em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mord cjk_fallback\">是图中的边</span></span></span><span class=\"\" style=\"top: -2.25em;\"><span class=\"pstrut\" style=\"height: 3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord cjk_fallback\">无向图的</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right: 0.0359em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3117em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.0359em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right: 0.0359em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3117em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.0359em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0572em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.2861em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">或有向图的</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right: 0.0359em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3117em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.0359em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right: 0.0359em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3117em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.0359em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0572em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.2861em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mord cjk_fallback\">不是图中的边</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 1.19em;\"><span class=\"\"></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></span><br/> 对于一个带权值的图来说，如果有边，则直接填写对应边的权值，如果没有，那么就填写0或是∞（因为某些图会认为0也是权值，所以说可以用∞，它可以是一个计算机允许的最大值大于所有边的权值的数）来进行表示：<br/> <span class=\"katex--display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          G\n         \n         \n          \n           i\n          \n          \n           j\n          \n         \n        \n        \n         =\n        \n        \n         \n          {\n         \n         \n          \n           \n            \n             \n              \n               \n                w\n               \n               \n                \n                 i\n                \n                \n                 j\n                \n               \n              \n              \n               ,\n              \n              \n               无向图的\n              \n              \n               (\n              \n              \n               \n                v\n               \n               \n                i\n               \n              \n              \n               ,\n              \n              \n               \n                v\n               \n               \n                j\n               \n              \n              \n               )\n              \n              \n               或有向图的\n              \n              \n               &lt;\n              \n              \n               \n                v\n               \n               \n                i\n               \n              \n              \n               ,\n              \n              \n               \n                v\n               \n               \n                j\n               \n              \n              \n               &gt;\n              \n              \n               是图中的边\n              \n             \n            \n           \n          \n          \n           \n            \n             \n              \n               0\n              \n              \n               或\n              \n              \n               ∞\n              \n              \n               ,\n              \n              \n               无向图的\n              \n              \n               (\n              \n              \n               \n                v\n               \n               \n                i\n               \n              \n              \n               ,\n              \n              \n               \n                v\n               \n               \n                j\n               \n              \n              \n               )\n              \n              \n               或有向图的\n              \n              \n               &lt;\n              \n              \n               \n                v\n               \n               \n                i\n               \n              \n              \n               ,\n              \n              \n               \n                v\n               \n               \n                j\n               \n              \n              \n               &gt;\n              \n              \n               不是图中的边\n              \n             \n            \n           \n          \n         \n        \n       \n       \n         G_{ij} = \\begin{cases} w_{ij}, 无向图的(v_i,v_j)或有向图的&lt;v_i,v_j&gt;是图中的边\\\\ 0或∞, 无向图的(v_i,v_j)或有向图的&lt;v_i,v_j&gt;不是图中的边 \\end{cases} \n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.9694em; vertical-align: -0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3117em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0572em;\">ij</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.2861em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 3em; vertical-align: -1.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top: 0em;\"><span class=\"delimsizing size4\">{<!-- --></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 1.69em;\"><span class=\"\" style=\"top: -3.69em;\"><span class=\"pstrut\" style=\"height: 3.008em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right: 0.0269em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3117em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.0269em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0572em;\">ij</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.2861em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord cjk_fallback\">无向图的</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right: 0.0359em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3117em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.0359em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right: 0.0359em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3117em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.0359em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0572em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.2861em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">或有向图的</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right: 0.0359em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3117em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.0359em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right: 0.0359em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3117em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.0359em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0572em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.2861em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mord cjk_fallback\">是图中的边</span></span></span><span class=\"\" style=\"top: -2.25em;\"><span class=\"pstrut\" style=\"height: 3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord cjk_fallback\">或</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord cjk_fallback\">无向图的</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right: 0.0359em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3117em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.0359em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right: 0.0359em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3117em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.0359em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0572em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.2861em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">或有向图的</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right: 0.0359em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3117em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.0359em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right: 0.0359em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3117em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.0359em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0572em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.2861em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mord cjk_fallback\">不是图中的边</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 1.19em;\"><span class=\"\"></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></span><br/> 所以说，对于上面的有向图，我们应该像这样填写：</p>\n<p><img alt=\"image-20220822221214967\" src=\"..\\..\\static\\image\\ba5a4fa6eb8d9bb03b02e53a034eb487.png\"/></p>\n<p>那么我们来看看无向图的邻接矩阵呢？比如下面的这个图：</p>\n<p><img alt=\"image-20220822101619660\" src=\"..\\..\\static\\image\\55a13132a12cadc64886f9b331efbd5f.png\"/></p>\n<p>对于无向图来说，一条边两边是相互连接的，所以说，A连接B，那么B也连接A，所以说就像这样：</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-DX0hNBkW-1662297027117)(/Users/nagocoler/Library/Application Support/typora-user-images/image-20220822222331925.png)]</p>\n<p>可以看到得到的矩阵用我们在《线性代数》中的定义来说就是一个对称矩阵（上半和下半都是一样的）因为没有自回路顶点，所以说主对角线上的元素全都是<code>0</code>。由于无向图没有方向之分，顶点之间是相互连接的，所以说无向图的邻接矩阵必定是一个对称矩阵。</p>\n<p>我们可以来总结一下性质：</p>\n<ul><li>无向图的邻接矩阵一定是一个对称矩阵，因此，有时为了节省时间，我们可以只存放上半部分。</li><li>对于无向图，邻接矩阵的第<code>i</code>行非0（或非∞）的个数就是第<code>i</code>个顶点的度。</li><li>对于有向图，邻接矩阵的第<code>i</code>行非0（或非∞）的个数就是第<code>i</code>个顶点的出度（纵向就是入度了）</li></ul>\n<p>接着我们来看看如何通过代码实现，首先我们需要对结构体进行一下定义，这里我们以有向图为例：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MaxVertex</span> <span class=\"token expression\"><span class=\"token number\">5</span></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> E<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//顶点存放的数据类型，这个不用我多说了吧</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">MatrixGraph</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> vertexCount<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//顶点数</span>\n    <span class=\"token keyword\">int</span> edgeCount<span class=\"token punctuation\">;</span>     <span class=\"token comment\">//边数</span>\n    <span class=\"token keyword\">int</span> matrix<span class=\"token punctuation\">[</span>MaxVertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>MaxVertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//邻接矩阵</span>\n    E data<span class=\"token punctuation\">[</span>MaxVertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//各个顶点对应的数据</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">*</span> Graph<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>接着我们可以对其进行一下初始化创建后返回：</p>\n<pre><code class=\"prism language-c\">Graph <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>   <span class=\"token comment\">//创建时，我们可以指定图中初始有多少个结点</span>\n    Graph graph <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">MatrixGraph</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token operator\">-&gt;</span>vertexCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//顶点和边数肯定一开始是0</span>\n    graph<span class=\"token operator\">-&gt;</span>edgeCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MaxVertex<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>    <span class=\"token comment\">//记得把矩阵每个位置都置为0</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> MaxVertex<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n            graph<span class=\"token operator\">-&gt;</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> graph<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    Graph graph <span class=\"token operator\">=</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//这里咱们就搞一个</span>\n    \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>接着我们就可以编写一下添加顶点和添加边的函数了：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span>Graph graph<span class=\"token punctuation\">,</span> E element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>graph<span class=\"token operator\">-&gt;</span>vertexCount <span class=\"token operator\">&gt;=</span> MaxVertex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">[</span>graph<span class=\"token operator\">-&gt;</span>vertexCount<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//添加新元素</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span>Graph graph<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>   <span class=\"token comment\">//添加几号顶点到几号顶点的边</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>graph<span class=\"token operator\">-&gt;</span>matrix<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        graph<span class=\"token operator\">-&gt;</span>matrix<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//注意如果是无向图的话，需要[a][b]和[b][a]都置为1</span>\n        graph<span class=\"token operator\">-&gt;</span>edgeCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们来尝试构建一下这个有向图：</p>\n<p><img alt=\"image-20220822104015728\" src=\"..\\..\\static\\image\\64bcb7e69fa30fb2eef7fec71a9bc1a6.png\"/></p>\n<pre><code class=\"prism language-c\">Graph graph <span class=\"token operator\">=</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token char\">'A'</span><span class=\"token punctuation\">;</span> c <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'D'</span> <span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>c<span class=\"token punctuation\">)</span> \n    <span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//A -&gt; B</span>\n<span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//B -&gt; C</span>\n<span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//C -&gt; D</span>\n<span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//D -&gt; A</span>\n<span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//C -&gt; A</span>\n</code></pre>\n<p>接着我们打印此领接矩阵，看看是否变成了我们预想中的那样：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">printGraph</span><span class=\"token punctuation\">(</span>Graph graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> graph<span class=\"token operator\">-&gt;</span>vertexCount<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> graph<span class=\"token operator\">-&gt;</span>vertexCount<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'A'</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%3c\"</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'A'</span> <span class=\"token operator\">+</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%3d\"</span><span class=\"token punctuation\">,</span> graph<span class=\"token operator\">-&gt;</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>最后得到：</p>\n<p><img alt=\"image-20220830123847943\" src=\"..\\..\\static\\image\\ee61f2760597448f9346b5b7152273f8.png\"/></p>\n<p>可以看到结果跟我们上面推导得出的邻接矩阵一模一样，当然这里仅仅是演示了普通的有向图，我们也可以稍微将代码进行修改，将其变成一个无向图或是带权有向图，这里就不做演示了。</p>\n<h3><a id=\"_210\"></a>邻接表</h3>\n<p>前面我们介绍了领接矩阵，我们可以使用邻接矩阵在程序中保存一个图的边相关信息，它采用二维数组的形式，将对应边的连接关系进行存储，但是我们知道，数组存在容量上的局限性（学了这么多节课了，应该能体会到，数组需要一段连续空间，无论是申请还是用起来都很麻烦）同时，我们创建邻接矩阵后，如果图的边数较多（稠密图）利用率还是挺高的，但是一旦遇到边数很少的图（稀疏图）那么表中大量的位置实际上都是<code>0</code>，根本没有被利用起来，是很浪费的。</p>\n<p>此时，我们可以考虑使用链式结构来解决这种问题，就像下面这样：</p>\n<p><img alt=\"image-20220830125309778\" src=\"..\\..\\static\\image\\d107ff581772c7c05b9a75a0fabaf998.png\"/></p>\n<p>对于图中的每个顶点，建立一个数组，存放一个头结点，我们将与其邻接的顶点，通过一个链表进行记录（看着挺像前面讲的哈希表）这样，也可以表示一个图的连接关系，并且内存空间能够得到更加有效的利用。当然，对于无向图来说，跟之前一样，两边都需要进行保存：</p>\n<p><img alt=\"image-20220830141940278\" src=\"..\\..\\static\\image\\677e82c2724a9f63f1c0d950ba643dac.png\"/></p>\n<p>我们来尝试编写一下代码实现，首先还是定义：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MaxVertex</span> <span class=\"token expression\"><span class=\"token number\">5</span></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> E<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{<!-- --></span>   <span class=\"token comment\">//结点和头结点分开定义，普通结点记录邻接顶点信息</span>\n    <span class=\"token keyword\">int</span> nextVertex<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">*</span> Node<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">HeadNode</span> <span class=\"token punctuation\">{<!-- --></span>   <span class=\"token comment\">//头结点记录元素</span>\n    E element<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">AdjacencyGraph</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> vertexCount<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//顶点数</span>\n    <span class=\"token keyword\">int</span> edgeCount<span class=\"token punctuation\">;</span>     <span class=\"token comment\">//边数</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">HeadNode</span> vertex<span class=\"token punctuation\">[</span>MaxVertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">*</span> Graph<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>接着是对其进行初始化：</p>\n<pre><code class=\"prism language-c\">Graph <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>   <span class=\"token comment\">//创建时，我们可以指定图中初始有多少个结点</span>\n    Graph graph <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">AdjacencyGraph</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token operator\">-&gt;</span>vertexCount <span class=\"token operator\">=</span> graph<span class=\"token operator\">-&gt;</span>edgeCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> graph<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//头结点数组一开始可以不用管</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在添加边和顶点时，稍微麻烦一些：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span>Graph graph<span class=\"token punctuation\">,</span> E element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>graph<span class=\"token operator\">-&gt;</span>vertexCount <span class=\"token operator\">&gt;=</span> MaxVertex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//跟之前一样</span>\n    graph<span class=\"token operator\">-&gt;</span>vertex<span class=\"token punctuation\">[</span>graph<span class=\"token operator\">-&gt;</span>vertexCount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>element <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//添加新结点时，再来修改也行</span>\n    graph<span class=\"token operator\">-&gt;</span>vertex<span class=\"token punctuation\">[</span>graph<span class=\"token operator\">-&gt;</span>vertexCount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  \tgraph<span class=\"token operator\">-&gt;</span>vertexCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span>Graph graph<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    Node node <span class=\"token operator\">=</span> graph<span class=\"token operator\">-&gt;</span>vertex<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    Node newNode <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    newNode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    newNode<span class=\"token operator\">-&gt;</span>nextVertex <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>    <span class=\"token comment\">//如果头结点下一个都没有，那么直接连上去</span>\n        graph<span class=\"token operator\">-&gt;</span>vertex<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>   <span class=\"token comment\">//否则说明当前顶点已经连接了至少一个其他顶点了，有可能会出现已经连接过的情况，所以说要特别处理一下</span>\n        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-&gt;</span>nextVertex <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//如果已经连接了对应的顶点，那么直接返回</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">)</span> node <span class=\"token operator\">=</span> node<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//否则继续向后遍历</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//如果没有下一个了，那就找到最后一个结点了，直接结束</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        node<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  \tgraph<span class=\"token operator\">-&gt;</span>edgeCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//边数计数+1</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们来将其构建一下吧，还是以上面的图为例：</p>\n<p><img alt=\"image-20220822104015728\" src=\"..\\..\\static\\image\\3bc0b2f60086009fcf5ef333b5d69819.png\"/></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    Graph graph <span class=\"token operator\">=</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token char\">'A'</span><span class=\"token punctuation\">;</span> c <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'D'</span> <span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>c<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//A -&gt; B</span>\n    <span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//B -&gt; C</span>\n    <span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//C -&gt; D</span>\n    <span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//D -&gt; A</span>\n    <span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//C -&gt; A</span>\n\n    <span class=\"token function\">printGraph</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们来打印看看效果：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">printGraph</span><span class=\"token punctuation\">(</span>Graph graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> graph<span class=\"token operator\">-&gt;</span>vertexCount<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d | %c\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> graph<span class=\"token operator\">-&gt;</span>vertex<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Node node <span class=\"token operator\">=</span> graph<span class=\"token operator\">-&gt;</span>vertex<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" -&gt; %d\"</span><span class=\"token punctuation\">,</span> node<span class=\"token operator\">-&gt;</span>nextVertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>得到结果如下：</p>\n<p><img alt=\"image-20220830132526621\" src=\"..\\..\\static\\image\\96a0f3fd066d34d72876edc22402a0ec.png\"/></p>\n<p>可以看到结果符合我们的预期。</p>\n<p>不过虽然这样的方式看上去更加的简单高效，但是会给我们带来一些不必要的麻烦，比如上面创建的领接表，我们只能快速得到某个顶点指向了哪些顶点，也就是只能计算到顶点的出度，但是无法快速计算顶点的入度，只能将所有结点统计之后才能得到入度。所以说在表示有向图时，查找上并没有邻接矩阵来的方便。</p>\n<p>为了解决这种问题，我们可以建立一个逆领接表，来表示所有指向当前顶点的顶点列表：</p>\n<p><img alt=\"image-20220830133244446\" src=\"..\\..\\static\\image\\47ffd7e5bf3152fcdbff2a26be5b2b15.png\"/></p>\n<p>实际上就是反着来而已，通过建立这两个领接表，就能在一定程度上缓解不方便的情况。</p>\n<p><strong>图练习题：</strong></p>\n<ol><li> <p>在一个具有n个顶点的有向图中，若所有顶点的出度之和为s，则所有顶点的入度数之和为？</p> <p>A. s B. s - 1 C. s + 1 D. 2s</p> <p><em>有向图的所有出度实际上就是所有顶点连向其他顶点的边数，对于单个顶点来说，要么是自己指向别人（自己的出度，别人的入度），要么别人指向自己（别人的出度，自己的入度），这东西就是个相对的而已，而这些都可以一律看做出度，所以说所有顶点入度数之和就是所有顶点出度之和，所以选A</em></p> </li><li> <p>在一个具有n个顶点的无向完全图中，所含的边数为？</p> <p>A. n B. n(n-1) C. n(n - 1)/2 D. n(n + 1)/2</p> <p><em>首先回顾一下无向完全图的定义：在一个无向图中，任意两个顶点都有一条边相连，则称该图为无向完全图。既然任意两个顶点都有一个，那么每个结点都会有n-1条与其连接的边，所以说总数为 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n       \n        \n         \n          \n           n\n          \n          \n           ×\n          \n          \n           (\n          \n          \n           n\n          \n          \n           −\n          \n          \n           1\n          \n          \n           )\n          \n         \n         \n          n \\times (n-1)\n         \n        \n       </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6667em; vertical-align: -0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span> 但是由于是无向图，没有方向之分，所以说需要去掉一半的数量，得到 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n       \n        \n         \n          \n           \n            \n             n\n            \n            \n             ×\n            \n            \n             (\n            \n            \n             n\n            \n            \n             −\n            \n            \n             1\n            \n            \n             )\n            \n           \n           \n            2\n           \n          \n         \n         \n          \\frac {n \\times (n-1)} {2}\n         \n        \n       </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1.355em; vertical-align: -0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 1.01em;\"><span class=\"\" style=\"top: -2.655em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"\" style=\"top: -3.23em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width: 0.04em;\"></span></span><span class=\"\" style=\"top: -3.485em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">×</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.345em;\"><span class=\"\"></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>，选择C</em></p> </li><li> <p>若要把n个顶点连接为一个连通图，则至少需要几条边？</p> <p>A. n B. n - 1 C. n + 1 D. 2n</p> <p><em>连通图的定义是，每个顶点至少有一条到达其他顶点的路径，所以说我们只需要找一个最简单能够保证每个结点都有与其相连的就行了，也就是连成一根直线（或者是树）的情况，选择B</em></p> </li><li> <p>对于一个具有 n 个顶点和 e 条边的无向图，在其对应的邻接表中，所含边结点有多少个？</p> <p>A. n B. ne C. e D. 2e</p> <p><em>对于无向图，这结点个数等于边数的两倍，对于有向图，刚好等于边数，所以说选择 D</em></p> </li></ol>\n<hr/>\n<h2><a id=\"_362\"></a>图的遍历</h2>\n<p>记得小时候每次去书店，都能看到迷宫书：</p>\n<p><img alt=\"image-20220831141620073\" src=\"..\\..\\static\\image\\8307243947ef719be3a1b1d8963da605.png\"/></p>\n<p>每次看到都想买一本，但是当时家里条件并不允许消费这么贵的书，所以都只能在书店多看几眼再回去。迷宫的解，实际上就是我们在一个复杂的地图中寻找一条能够从起点到达终点的路径。可以看到从起点开始，每到一个路口，可能都会出现多个分叉，可能有的分叉就会走进死胡同，有的分叉就会走到下一个路口。</p>\n<p>那么我们人脑是怎么去寻找到正确的路径呢？</p>\n<p><img alt=\"image-20220831142540478\" src=\"..\\..\\static\\image\\d49660f3cb2132f5ab2953975a6d7807.png\"/></p>\n<p>我们首先还是会从起点开始看，我们会尝试去走分叉路的每一个方向，如果遇到死胡同，那么我们就退回到上一个路口，再去尝试其他方向，直到能一直往下走为止。经过不断重复上述的操作，最后我们就肯定能够到达迷宫的出口了。</p>\n<p>而图的搜索，实际上也是类似于迷宫这样的形式，我们需要从图的某一个顶点出发，去寻找到图中对应顶点的位置，这一部分，我们将对图的搜索算法进行讨论。</p>\n<p><img alt=\"image-20220831144250794\" src=\"..\\..\\static\\image\\e1426352e6088bf1bd2078440dfa103d.png\"/></p>\n<h3><a id=\"DFS_380\"></a>深度优先搜索（DFS）</h3>\n<p>我们之前在学习二叉树的过程中，讲解了树的前序遍历，各位回想一下，我们当时是如何在进行遍历的？</p>\n<p><img alt=\"image-20220814145531577\" src=\"..\\..\\static\\image\\0dc848085c77c4334dab8b1c99b77069.png\"/></p>\n<p>前序遍历就是勇往直前，直接走到底，然后再回去走其他的分支，而我们的图其实也可以像这样，我们可以一路向前，如果到了死胡同，那么就倒回去再走其他的方向，如果所有方向都走不通，继续再回到上一个路口（实际上就是我们人脑的思维）这样不断的寻找，肯定是可以找到的。</p>\n<p>比如现在我们要从A开始寻找下图中的I：</p>\n<p><img alt=\"image-20220831145024885\" src=\"..\\..\\static\\image\\4b2dd25c5609471c80f6212ccd268eea.png\"/></p>\n<p>那么我们的路线可以是这样的：</p>\n<p><img alt=\"image-20220831145204170\" src=\"..\\..\\static\\image\\84f58256e5293dca9ec960fd4456c791.png\"/></p>\n<p>此时顶点B有三个方向，那么我们可以先随便选一个方向（当然，一般情况下为了规范，推荐按照字母排列顺序来走，这里为了演示，就随便走了）看看：</p>\n<p><img alt=\"image-20220831145313492\" src=\"..\\..\\static\\image\\8696515244449fb722c61807c1f3999c.png\"/></p>\n<p>此时来到K，我们发现K已经是一个死胡同，没有其他路了，那么此时我们就需要回到上一个路口，继续去探索其他的路径：</p>\n<p><img alt=\"image-20220831145530501\" src=\"..\\..\\static\\image\\f06e1a70906bcb6dec18293faf199ff3.png\"/></p>\n<p>此时我们接着往下一个相邻的顶点G走，发现G有其他的分叉，那么我们就继续向前：</p>\n<p><img alt=\"image-20220831145910420\" src=\"..\\..\\static\\image\\a68f6e4052913dbe4a36c453cd79382f.png\"/></p>\n<p>此时走到F发现又是死路，那么退回到G，走其他的方向：</p>\n<p><img alt=\"image-20220831150008288\" src=\"..\\..\\static\\image\\6f16e619b89273aeffb4a4a8951bb5cd.png\"/></p>\n<p>运气太垃了，又到死胡同了，同样的，回到G继续走其他方向：</p>\n<p><img alt=\"image-20220831150236884\" src=\"..\\..\\static\\image\\8bcd3912334e6566351e833dedc07869.png\"/></p>\n<p>走到C之后，我们有其他的路，我们继续往后走：</p>\n<p><img alt=\"image-20220831150354010\" src=\"..\\..\\static\\image\\a710d9dd5cdb6abfd21494bc8f76a082.png\"/></p>\n<p>此时走到顶点H，发现H只有一条路，并且H再向前是已经走过的顶点B，那么此时不能再向前了，所以说直接退回到C，走另一边：</p>\n<p><img alt=\"image-20220831150617828\" src=\"..\\..\\static\\image\\5571e4381fdbdd1109b9cc01a9fdc99a.png\"/></p>\n<p>此时来到E，又有两条路，那么继续随便选一条走：</p>\n<p><img alt=\"image-20220831150820472\" src=\"..\\..\\static\\image\\b61042a39bce730d509eab47a2b03758.png\"/></p>\n<p>此时来到顶点J，发现又是死胡同，退回到E，继续走另一边：</p>\n<p><img alt=\"image-20220831150913443\" src=\"..\\..\\static\\image\\8a75497ed78c4111fe657622a946d683.png\"/></p>\n<p>好了，经过了这么多试错，终于是找到了I顶点，这种方式就是深度优先搜索了。</p>\n<p>那么我们就来打个代码玩玩吧，这里我们构建一个简单一点的图：</p>\n<p><img alt=\"image-20220831152924911\" src=\"..\\..\\static\\image\\afc0dc8fc0fd9dd79d9f5f714acf7b10.png\"/></p>\n<p>这里我们使用邻接表表示图，因为邻接表直接保存相邻顶点，所以说到达顶点时遍历相邻顶点会更快（能够到达 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        O\n       \n       \n        (\n       \n       \n        V\n       \n       \n        +\n       \n       \n        E\n       \n       \n        )\n       \n      \n      \n       O(V + E)\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0278em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right: 0.2222em;\">V</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0576em;\">E</span><span class=\"mclose\">)</span></span></span></span></span> 线性阶）而如果使用邻接矩阵的话，我们得完整遍历整个二维数组，就比较费时间了（需要 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        O\n       \n       \n        (\n       \n       \n        \n         V\n        \n        \n         2\n        \n       \n       \n        )\n       \n      \n      \n       O(V^2)\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1.0641em; vertical-align: -0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0278em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right: 0.2222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.8141em;\"><span class=\"\" style=\"top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span> 平方阶）。</p>\n<p>比如现在我们想从A开始查找顶点F，首先先把图给建好（注意有6个顶点，记得容量写好）：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    Graph graph <span class=\"token operator\">=</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token char\">'A'</span><span class=\"token punctuation\">;</span> c <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'F'</span> <span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>c<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//A -&gt; B</span>\n    <span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//B -&gt; C</span>\n    <span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//B -&gt; D</span>\n    <span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//D -&gt; E</span>\n    <span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//E -&gt; F</span>\n\n    <span class=\"token function\">printGraph</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"image-20220831154358394\" src=\"..\\..\\static\\image\\df17a24954bb416356b6af714ee5ff94.png\"/></p>\n<p>然后就是我们的深度优先搜索算法了：</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">/**\n * 深度优先搜索算法\n * @param graph 图\n * @param startVertex 起点顶点下标\n * @param targetVertex 目标顶点下标\n * @param visited 已到达过的顶点数组\n */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>Graph graph<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> startVertex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> targetVertex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们先将深度优先遍历写出来：</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">/**\n * 深度优先搜索算法（无向图和有向图都适用）\n * @param graph 图\n * @param startVertex 起点顶点下标\n * @param targetVertex 目标顶点下标\n * @param visited 已到达过的顶点数组\n */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>Graph graph<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> startVertex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> targetVertex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> visited<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    visited<span class=\"token punctuation\">[</span>startVertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//走过之后一定记得mark一下</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c -&gt; \"</span><span class=\"token punctuation\">,</span> graph<span class=\"token operator\">-&gt;</span>vertex<span class=\"token punctuation\">[</span>startVertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//打印当前顶点值</span>\n    Node node <span class=\"token operator\">=</span> graph<span class=\"token operator\">-&gt;</span>vertex<span class=\"token punctuation\">[</span>startVertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//遍历当前顶点所有的分支</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>node<span class=\"token operator\">-&gt;</span>nextVertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//如果已经到过（有可能是走其他分支到过，或是回头路）那就不继续了</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> node<span class=\"token operator\">-&gt;</span>nextVertex<span class=\"token punctuation\">,</span> targetVertex<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//没到过就继续往下走，这里将startVertex设定为对于分支的下一个顶点，按照同样的方式去寻找</span>\n        node <span class=\"token operator\">=</span> node<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span>graph<span class=\"token operator\">-&gt;</span>vertexCount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> graph<span class=\"token operator\">-&gt;</span>vertexCount<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>深度优先遍历结果如下：</p>\n<p><img alt=\"image-20220831163728799\" src=\"..\\..\\static\\image\\71294eb46840419aa9b8734d1fdadd90.png\"/></p>\n<p>路线如下：</p>\n<p><img alt=\"image-20220831163909522\" src=\"..\\..\\static\\image\\7878f45ea31d2cb8895358df8c51c4fa.png\"/></p>\n<p>现在我们将需要查找的顶点进行判断：</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">/**\n * 深度优先搜索\n * @param graph 图\n * @param startVertex 起点顶点下标\n * @param targetVertex 目标顶点下标\n * @param visited 已到达过的顶点数组\n * @return 搜索结果，如果找到返回1，没找到返回0\n */</span>\n<span class=\"token keyword\">_Bool</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>Graph graph<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> startVertex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> targetVertex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> visited<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    visited<span class=\"token punctuation\">[</span>startVertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c -&gt; \"</span><span class=\"token punctuation\">,</span> graph<span class=\"token operator\">-&gt;</span>vertex<span class=\"token punctuation\">[</span>startVertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>startVertex <span class=\"token operator\">==</span> targetVertex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//如果当前顶点就是要找的顶点，直接返回</span>\n    Node node <span class=\"token operator\">=</span> graph<span class=\"token operator\">-&gt;</span>vertex<span class=\"token punctuation\">[</span>startVertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>node<span class=\"token operator\">-&gt;</span>nextVertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> node<span class=\"token operator\">-&gt;</span>nextVertex<span class=\"token punctuation\">,</span> targetVertex<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//如果查找成功，直接返回1，不用再看其他分支了</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        node <span class=\"token operator\">=</span> node<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//while结束那肯定是没找到了，直接返回0</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span>graph<span class=\"token operator\">-&gt;</span>vertexCount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> graph<span class=\"token operator\">-&gt;</span>vertexCount<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>得到结果如下：</p>\n<p><img alt=\"image-20220831164615659\" src=\"..\\..\\static\\image\\d56e6d25222cf7a7567e3fbba9315d01.png\"/></p>\n<p>再来找一下顶点D呢：</p>\n<p><img alt=\"image-20220831164641467\" src=\"..\\..\\static\\image\\aff41f6afa8e74bb55fd9dddcbc60805.png\"/></p>\n<p>可以看到到D之后就停止了，因为已经找到了。那么要是去寻找一个没有连接到图中的结点呢？</p>\n<p><img alt=\"image-20220831164739301\" src=\"..\\..\\static\\image\\8856b2e5583739a14d09d667ff0fd76d.png\"/></p>\n<p>可以看到整个图按照深度优先遍历找完了都没找到。</p>\n<h3><a id=\"BFS_560\"></a>广度优先搜索（BFS）</h3>\n<p>前面我们介绍了深度优先搜索，我们接着来看另一种方案。还记得我们在前面二叉树中学习的层序遍历吗？</p>\n<p><img alt=\"image-20220831165617419\" src=\"..\\..\\static\\image\\7dcb0d0c2dcff2c6662e7d41e9df7ba1.png\"/></p>\n<p>层序遍历实际上是优先将每一层进行遍历，而不是像前序遍历那样勇往直前，而图的搜索其实也可以采用这种方案，我们可以先探索顶点所有的分支，然后再依次去看这些分支的所有分支：</p>\n<p><img alt=\"image-20220831170114857\" src=\"..\\..\\static\\image\\6cb644a741b43394a155c5c4230001f2.png\"/></p>\n<p>首先咱还是从A来到B，此时B有三条分叉路，我们依次访问这三条路的各个顶点：</p>\n<p><img alt=\"image-20220831172011576\" src=\"..\\..\\static\\image\\323e8ca415e0cfc2c231849b9194e554.png\"/></p>\n<p>我们先记录一下这三个顶点，同样需要使用队列来完成：H、G、K</p>\n<p>注意访问之后不要再继续向下了，接着我们从这三个里面的第一个顶点H开始，按照同样的方法继续：</p>\n<p><img alt=\"image-20220831172153888\" src=\"..\\..\\static\\image\\9c814bb358014a3f716294c8a6ef28fb.png\"/></p>\n<p>此时因为只有一个分支，所以说找到C，继续记录，将C也添加进去：G、K、C</p>\n<p>注意此时需要回去，继续看之前三个顶点的第二个顶点G：</p>\n<p><img alt=\"image-20220831172312762\" src=\"..\\..\\static\\image\\6a88ae445234a302997b76364e3f7c17.png\"/></p>\n<p>此时C已经看过了，接着就找到了F和D，也是记录一下：K、C、F、D</p>\n<p>然后，我们继续看之前三个结点的最后一个：</p>\n<p><img alt=\"image-20220831172726616\" src=\"..\\..\\static\\image\\b8b08930b63ef50d483581709961349f.png\"/></p>\n<p>此时K已经是死胡同了，那么就结束，然后继续看下一个C：</p>\n<p><img alt=\"image-20220831172941671\" src=\"..\\..\\static\\image\\8d592a2383b9e5ca6982ce013293bb86.png\"/></p>\n<p>此时继续将E给记录进去：F、D、E，接着看D和F，也没有后续了，那么最后就只有E了：</p>\n<p><img alt=\"image-20220831173224689\" src=\"..\\..\\static\\image\\df00971280cae29a2d2b76d0024227af.png\"/></p>\n<p>成功找到目标I顶点，实际上广度优先遍历就是尽可能地扩展范围，多去探索广阔的土地，而不是死拽着一根不放，就像爱情，实在得不到就算了吧，她至始至终就没爱过你，不要继续在她身上浪费感情了，多去结交新的朋友，相信你会遇到更好的。</p>\n<p>那么按照这个思路，我们就来尝试代码实现一下，首先把队列搬过来：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> T<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//这里将顶点下标作为元素</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">QueueNode</span> <span class=\"token punctuation\">{<!-- --></span>\n    T element<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">QueueNode</span> <span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">QueueNode</span> <span class=\"token operator\">*</span> QNode<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">{<!-- --></span>\n    QNode front<span class=\"token punctuation\">,</span> rear<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Queue</span> <span class=\"token operator\">*</span> LinkedQueue<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">_Bool</span> <span class=\"token function\">initQueue</span><span class=\"token punctuation\">(</span>LinkedQueue queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    QNode node <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">QueueNode</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    queue<span class=\"token operator\">-&gt;</span>front <span class=\"token operator\">=</span> queue<span class=\"token operator\">-&gt;</span>rear <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">_Bool</span> <span class=\"token function\">offerQueue</span><span class=\"token punctuation\">(</span>LinkedQueue queue<span class=\"token punctuation\">,</span> T element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    QNode node <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">QueueNode</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">-&gt;</span>element <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\n    queue<span class=\"token operator\">-&gt;</span>rear<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n    queue<span class=\"token operator\">-&gt;</span>rear <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">_Bool</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>LinkedQueue queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> queue<span class=\"token operator\">-&gt;</span>front <span class=\"token operator\">==</span> queue<span class=\"token operator\">-&gt;</span>rear<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nT <span class=\"token function\">pollQueue</span><span class=\"token punctuation\">(</span>LinkedQueue queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    T e <span class=\"token operator\">=</span> queue<span class=\"token operator\">-&gt;</span>front<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">-&gt;</span>element<span class=\"token punctuation\">;</span>\n    QNode node <span class=\"token operator\">=</span> queue<span class=\"token operator\">-&gt;</span>front<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    queue<span class=\"token operator\">-&gt;</span>front<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> queue<span class=\"token operator\">-&gt;</span>front<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>queue<span class=\"token operator\">-&gt;</span>rear <span class=\"token operator\">==</span> node<span class=\"token punctuation\">)</span> queue<span class=\"token operator\">-&gt;</span>rear <span class=\"token operator\">=</span> queue<span class=\"token operator\">-&gt;</span>front<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们还是以上面的图为例：</p>\n<p><img alt=\"image-20220831152924911\" src=\"..\\..\\static\\image\\58f4bda6b1c565dba53d88cd821b7c8f.png\"/></p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">/**\n * 广度优先遍历\n * @param graph 图\n * @param startVertex 起点顶点下标\n * @param targetVertex 目标顶点下标\n * @param visited 已到达过的顶点数组\n * @param queue 辅助队列\n */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>Graph graph<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> startVertex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> targetVertex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> visited<span class=\"token punctuation\">,</span> LinkedQueue queue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">offerQueue</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> startVertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//首先把起始位置顶点丢进去</span>\n    visited<span class=\"token punctuation\">[</span>startVertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//起始位置设置为已走过</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> next <span class=\"token operator\">=</span> <span class=\"token function\">pollQueue</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c -&gt; \"</span><span class=\"token punctuation\">,</span> graph<span class=\"token operator\">-&gt;</span>vertex<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//从队列中取出下一个顶点，打印</span>\n        Node node <span class=\"token operator\">=</span> graph<span class=\"token operator\">-&gt;</span>vertex<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//同样的，把每一个分支都遍历一下</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>node<span class=\"token operator\">-&gt;</span>nextVertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>   <span class=\"token comment\">//如果没有走过，那么就直接入队</span>\n                <span class=\"token function\">offerQueue</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> node<span class=\"token operator\">-&gt;</span>nextVertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                visited<span class=\"token punctuation\">[</span>node<span class=\"token operator\">-&gt;</span>nextVertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//入队时就需要设定为1了</span>\n            <span class=\"token punctuation\">}</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们来测试一下吧：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n  \t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n      \n    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span>graph<span class=\"token operator\">-&gt;</span>vertexCount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Queue</span> queue<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">initQueue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> graph<span class=\"token operator\">-&gt;</span>vertexCount<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>成功得到结果：</p>\n<p><img alt=\"image-20220831184445728\" src=\"..\\..\\static\\image\\531a8dbe8618e992c9e2ee24ab4019f7.png\"/></p>\n<p>如果要指定查找的话，就更简单了：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">_Bool</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>Graph graph<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> startVertex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> targetVertex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> visited<span class=\"token punctuation\">,</span> LinkedQueue queue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">offerQueue</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> startVertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    visited<span class=\"token punctuation\">[</span>startVertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> next <span class=\"token operator\">=</span> <span class=\"token function\">pollQueue</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c -&gt; \"</span><span class=\"token punctuation\">,</span> graph<span class=\"token operator\">-&gt;</span>vertex<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Node node <span class=\"token operator\">=</span> graph<span class=\"token operator\">-&gt;</span>vertex<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-&gt;</span>nextVertex <span class=\"token operator\">==</span> targetVertex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//如果就是我们要找的，直接返回1</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>node<span class=\"token operator\">-&gt;</span>nextVertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token function\">offerQueue</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> node<span class=\"token operator\">-&gt;</span>nextVertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                visited<span class=\"token punctuation\">[</span>node<span class=\"token operator\">-&gt;</span>nextVertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//找完了还没有，那就返回0</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这样，我们就实现了图的广度优先搜索。</p>\n<p><strong>图练习题：</strong></p>\n<ol><li> <p>若一个图的边集为：{(A, B),(A, C),(B, D),(C, F),(D, E),(D, F)}，对该图进行深度优先搜索，得到的顶点序列可能是：</p> <p>A. ABCFDE B. ACFDEB C. ABDCFE D. ABDFEC</p> <p><em>这种题直接把图画出来，因为边集是圆括号，说是肯定是一个无向图，图先画出来再说：</em></p> <p><img alt=\"image-20220902112113153\" src=\"..\\..\\static\\image\\69d0d29a3e3c7969f37f6eefd539e881.png\"/></p> <p><em>因为这四个选项都是A开始的，所以说我们从A开始看，因为A连接了B和C，所以说A后面紧跟B或是C都可以，接着往下看，先看走B的情况，因为B只连接了一个D，所以说选项A直接排除，接着往下看，D链接了E和F，所以说选项C直接排除，此时只有选项D了，我们接着往后看，此时我们走F，紧接着的只有C，D也不满足，所以选择B（当然你怕不稳的话把B选项也推出来就行了）</em></p> </li><li> <p>若一个图的边集为：{(A, B),(A, C),(B, D),(C, F),(D, E),(D, F)}，对该图进行广度优先搜索，得到的顶点序列可能是：</p> <p>A. ABCDEF B. ABCFDE C. ABDCEF D. ACBFDE</p> <p><em>跟上面是同样的思路，只要各位小伙伴听懂了BFS和DFS的思路，肯定没问题的，选择 D</em></p> </li><li> <p>如下图所示的无向连通图，从顶点A开始对该图进行广度优先遍历，得到的顶点序列可能是：</p> <p><img alt=\"image-20220902110829087\" src=\"..\\..\\static\\image\\ff3e0daebc75d72e879d65c75396f88e.png\"/></p> <p><em>同样的思路，选择D</em></p> </li></ol>\n<hr/>\n<h2><a id=\"_750\"></a>图应用</h2>\n<p>前面我们介绍了图的相关性质，以及图的遍历方式，这一部分我们接着来看图的相关应用。</p>\n<h3><a id=\"_754\"></a>生成树和最小生成树</h3>\n<p>在开始讲解最小生成树之前，我们先来回顾一下之前讲解的连通分量。</p>\n<ul><li>对于无向图来说，如果图中任意两点都是连通的，那么我们就称这个图为<strong>连通图</strong>。</li><li>对于有向图来说，如果图中任意顶点A和B，既有从A到B的路径，也有B到A的路径，则称该有向图是<strong>强连通图</strong>。</li></ul>\n<p>而连通分量则要求是某个图的子图（子图可以是只包原图含部分顶点和边的图，也可以就是原图本身，因为定义只是子集，不是真子集），并且子图也要是连通的才可以，还有一个重要条件是必须拥有极大顶点数（能够保证图连通的且包含原图最大的顶点数）并且包含所有依附于这些顶点的边（这个极大更偏向于顶点数的极大），我们就称这个子图为极大连通子图。</p>\n<ul><li>无向图的极大连通子图称为连通分量。</li><li>有向图的极大强连通子图称为强连通分量。</li></ul>\n<p>比如下面的有向图，这个图本身并不是连通的：</p>\n<p><img alt=\"image-20220903101036333\" src=\"..\\..\\static\\image\\9f1bdd326856661bc10add7781f53c91.png\"/></p>\n<p>其中图1和图2都满足上述条件，都是强连通分量，本身就是连通并且已经到达最大的顶点数和边数了（只要再加入其他的顶点和边就会导致不连通）但是图3并不是子图（A到B的边缺失）并且不是强连通的，所以说不是强连通分量。</p>\n<p>又比如下面这个无向图，这个图本身也是不连通的：</p>\n<p><img alt=\"image-20220822214010526\" src=\"..\\..\\static\\image\\3fa7dcaf65c957aaabdcaea191e3df81.png\"/></p>\n<p>其中图1和图3都满足条件，都是连通分量，但是图2并没有到达最大的顶点数和边数，所以说不是连通分量。</p>\n<p>当然上面都是原图不连通的情况，如果原图就是一个连通图，包含其所有顶点和边的子图就已经满足条件了，所以其本身就是一个连通分量；同样的，如果原图就是一个强连通图，那么其本身就是一个强连通分量。</p>\n<p>总结如下：</p>\n<ul><li>如果原图本身不连通，那么其连通分量（强连通分量）不止一个。</li><li>如果原图本身连通，那么其连通分量（强连通分量）就是其本身。</li></ul>\n<p>极大连通子图我们回顾完了，那么我们接着来讨论一下<strong>极小连通子图</strong>。这里的极小主要是说的边数的极小，首先依然要是原图的子图并且是连通的，但是此时要求具有最大的顶点数和最小的边数，也就是说再去掉任意一条边会导致图不连通（直接理解为极大连通子图尽可能去掉能去掉的边就行了）</p>\n<p>针对于极小连通子图，我们一般只讨论无向图（对于有向图，不存在极小强连通子图的说法，因为主要是讨论生成树）我们依然将原图就是连通图和原图不是连通图分开分析，首先是原图本身就是连通图的情况：</p>\n<p><img alt=\"image-20220901180909877\" src=\"..\\..\\static\\image\\817c1088ac2b3739f1a403e80a5d9c0d.png\"/></p>\n<p>原图本身就是连通图，那么其极大连通子图就是其本身，此时我们需要尽可能去掉那些“不必要”的边，依然能够保证其是连通的，也就是极小连通子图。可以看到右边两幅图，跟左边这幅图包含了同样的顶点数量，但是边数被去掉了一些，并且如果再继续去掉任意一条边的话，那么就会导致不连通，所以说左边两幅图都是右边这幅图的极小连通图（当然，就像上面这样，可能会出现多种方案，极小连通图不唯一）</p>\n<p>我们发现，无论是去掉哪些边的情况，到最后一定是只留下 N-1 条边（其中N是顶点数）每个顶点有且仅有一条路径相连，也就是包含原图全部N个顶点的极小连通子图，我们一般称其为：<strong>生成树</strong>，为什么叫生成树呢，因为结点数和边数正好满足树的定义（且不存在回路的情况），我们可以将其调整为一棵树：</p>\n<p><img alt=\"image-20220903103444346\" src=\"..\\..\\static\\image\\b98c4e162289964f7173622118869aef.png\"/></p>\n<p>当然，这是原图本身就连通的情况，如果原图本身不连通的话，那么就会出现多个连通分量，此时就会得到一片<strong>生成森林</strong>，森林中的树的数量就是其连通分量的数量。</p>\n<p>那么我们在程序中要怎么才能得到一个有向图的生成树呢？我们可以使用前面讲解的两种图的遍历方式来进行生成，我们以下图为例，这是一个普通的无向连通图：</p>\n<p><img alt=\"image-20220903111255127\" src=\"..\\..\\static\\image\\910364a1243264ef23d61524fa7acad4.png\"/></p>\n<p>我们如果按照深度优先遍历的方式，从G开始，那么就会得到下面的顺序：</p>\n<p><img alt=\"image-20220903112122707\" src=\"..\\..\\static\\image\\e312c79917e4d2a764a1d36647d44b60.png\"/></p>\n<p>按照顺序我们就可以得到一棵生成树：</p>\n<p><img alt=\"image-20220903112332571\" src=\"..\\..\\static\\image\\8431cf359b4c57650e01fb342c3a9348.png\"/></p>\n<p>虽然看着很奇怪，但是按照我们的顺序，得到的树就是这样的，可以发现，因为我们的深度优先搜索不会去走那些回头路，相当于直接把哪些导致回路和多余的边给去掉了，最后遍历得到的结果就是一颗生成树了。</p>\n<p>同样的，我们来看看如果是按照广度优先遍历的方式，又会得到什么结果呢？</p>\n<p><img alt=\"image-20220903112733812\" src=\"..\\..\\static\\image\\72b43afc0c74fd8371ee974593df4093.png\"/></p>\n<p>最后得到的生成树为：</p>\n<p><img alt=\"image-20220903113108162\" src=\"..\\..\\static\\image\\86764377dea26b199b8bd9e04eed2d59.png\"/></p>\n<p>实际上我们发现，在广度优先遍历下得到的生成树，也是按照每一层在进行排列的，非常清晰。当然，因为深度优先遍历和广度优先遍历本身的顺序就不是唯一的，所以最后得到的生成树也不是唯一的。</p>\n<p>生成树讨论完成之后，我们接着来讨论一下最小生成树，那么这个最小指的是什么最小呢？如果我们给一个无向图的边都加上权值（网图）现在要求生成树边的权值总和最小，我们就称这棵树为<strong>最小生成树</strong>（注意最小生成树不唯一，因为有可能出现多种方案都是最小的情况）比如下面的就是最后得到的最小生成树了：</p>\n<p><img alt=\"image-20220903113954010\" src=\"..\\..\\static\\image\\3aaa61733fd026e4fa261f18343206dd.png\"/></p>\n<p>构建最小生成树有两种算法，一种是**普利姆（Prim）<strong>算法，还有一种是</strong>克鲁斯卡尔（Kruskal）**算法，我们先来讨论第一种：</p>\n<p>我们以下图为例：</p>\n<p><img alt=\"image-20220903142138573\" src=\"..\\..\\static\\image\\524367c6dca27f986df8bc336ad074cc.png\"/></p>\n<p>普利姆算法的核心就是从任意一个顶点开始，不断成长为一棵树，每次都会选择尽可能小的方向去进行延伸，比如我们一开始还是从顶点A开始：</p>\n<p>此时与A相连的边有B和E，A的延伸方向有两个，此时我们只需要选择一个最小的就可以了：</p>\n<p><img alt=\"image-20220903142208537\" src=\"..\\..\\static\\image\\ad9f23f7cf80642b43e1ca3ad625b53c.png\"/></p>\n<p>此时我们已经构建出了由A、E组成的一棵树，同样的，我们需要去寻找与当前树中A、E顶点相连的所有顶点，包括B、G、H，哪一个最小，那么下一个延伸的就是哪一个，此时发现H和E之间最小，继续延伸：</p>\n<p><img alt=\"image-20220903142245688\" src=\"..\\..\\static\\image\\7f17e44dc6346fc4148ef2b50f27e826.png\"/></p>\n<p>现在已经变成了由A、E、H组成的一棵树，同样的，按照之前的思路继续寻找一个最小的方向进行延伸：</p>\n<p><img alt=\"image-20220903142413604\" src=\"..\\..\\static\\image\\cac7f819eebed30b735ef9559209aca4.png\"/></p>\n<p>继续进行延伸，发现F、K之间最小：</p>\n<p><img alt=\"image-20220903142558882\" src=\"..\\..\\static\\image\\71d86f43d94e3ba879b73f74442dbe52.png\"/></p>\n<p>此时K、B和K、D和K、H的权重都是4，其中H顶点已经走过了，不能出现回路，所以说不考虑，此时随便选择K、B或是K、D都可以，不会影响后续结果：</p>\n<p><img alt=\"image-20220903142829606\" src=\"..\\..\\static\\image\\17f9df378d8af01e94f8ea3c090a97a6.png\"/></p>\n<p>此时依然是K、D为最小，所以说直接选择：</p>\n<p><img alt=\"image-20220903142917096\" src=\"..\\..\\static\\image\\3d190e6df2ca957adfd42e0f6834a539.png\"/></p>\n<p>紧接着，我们发现最小权重的来到了5，此时权重为5的边有B、E和H、I和B、D，但是由于E、D已经走过，此时直接选择H、I即可：</p>\n<p><img alt=\"image-20220903143057702\" src=\"..\\..\\static\\image\\fbb622c28647ea7f25a210062530772a.png\"/></p>\n<p>接着，我们发现I、G也是5，直接选择即可：</p>\n<p><img alt=\"image-20220903143509563\" src=\"..\\..\\static\\image\\2da12b82239074ef8426cfbc929ff278.png\"/></p>\n<p>然后最小权重此时就是6了，选择H、J和I、J都可以，随便选择一个即可：</p>\n<p><img alt=\"image-20220903143532060\" src=\"..\\..\\static\\image\\bdb89a69ee0f9debe725a938f6a517e6.png\"/></p>\n<p>此时，整个图的所有顶点就遍历完成了，现在我们去掉那些没用被采用的边，得到的结果就是我们的最小生成树了：</p>\n<p><img alt=\"image-20220903143645249\" src=\"..\\..\\static\\image\\56530993c9a3b9d0a03c7eef9cc706c1.png\"/></p>\n<p>虽然样子有点丑，但是把它捋一捋就好了。可以看到省去的边都是尽可能大的边，或是那种导致回路的边，留下的边基本都是权重小的边，得到的就是最小生成树了（注意考试的时候只要按照我们的思路推是肯定没问题的，但是千万要仔细看，不要把边给看漏了，不然会出大问题）</p>\n<p>我们接着来看另一种，克鲁斯卡尔算法，它的核心思想就是我们主动去选择那些小的边，而不是像上面一样被动地扩展延伸。</p>\n<p>在一开始的时候，直接去掉所有的边，我们从这些边中一个一个选择出来（注意是任意一条边都可以选择，并不是只有选择的顶点旁边才能选择，这个过程中可能会出现多棵树，但是最后一定会连成一棵树的），最后形成一颗最小生成树，假设一开始什么都没选择，被选中的边我们一会用橙色标注：</p>\n<p><img alt=\"image-20220903144403449\" src=\"..\\..\\static\\image\\c8c842efe71442eb7a47dbb43830fa0e.png\"/></p>\n<p>首先我们直接找到最小边，K、F，它的权值为2，所以说直接选择就行：</p>\n<p><img alt=\"image-20220903144533239\" src=\"..\\..\\static\\image\\1035d51ed1e24aaee1952c0ee3774f41.png\"/></p>\n<p>紧接着就是F、H的边，权重为3，目前最小的了：</p>\n<p><img alt=\"image-20220903144828106\" src=\"..\\..\\static\\image\\0dc6c2f180b4a4b25db3f5e915628b4c.png\"/></p>\n<p>此时最小的权重就只有4了，目前有4条边都可以进行选择，但是K、H这条边因为K和H都已经在树中了，所以说不能考虑，其他三条边都是没问题的，我们随便选择一条就行了：</p>\n<p><img alt=\"image-20220903145239074\" src=\"..\\..\\static\\image\\55d3686a3caca7c3dbe917095bfb1315.png\"/></p>\n<p>继续选择权重为4的边：</p>\n<p><img alt=\"image-20220903145321395\" src=\"..\\..\\static\\image\\64a6e01cd5665c1a3b4c5ce1d400cc3d.png\"/></p>\n<p>此时权重就来到了5，那么权重为5的顶点我们也可以随便选择一条，只要不会导致出现回路就行了：</p>\n<p><img alt=\"image-20220903145431925\" src=\"..\\..\\static\\image\\24e4d30c22298977a4bc9926a99189f2.png\"/></p>\n<p>此时连接G、I，我们发现出现了两棵树，没关系的，最后会连成一棵树的，我们继续选择其他权重为5的边：</p>\n<p><img alt=\"image-20220903145551091\" src=\"..\\..\\static\\image\\688decc669d554c4a657212c7effd6e7.png\"/></p>\n<p>此时我们选择A、E这条边，然后是H、I这条边，虽然这条边上的H和I顶点都已经在树中了，但是它们并不属于同一棵树，这种情况也是可以连接的，然后我们继续选择权重为6的顶点：</p>\n<p><img alt=\"image-20220903145828812\" src=\"..\\..\\static\\image\\c5dee465cd137bb375505d16e00f038b.png\"/></p>\n<p>此时选择I、J或是H、J都可以（最小生成树不唯一）现在我们已经连接上所有的顶点了，最小生成树构建完成，我们把那些没有选择都边都扔了：</p>\n<p><img alt=\"image-20220903143645249\" src=\"..\\..\\static\\image\\d3f5a130e7cdca175a637910bfa85519.png\"/></p>\n<p>其实无论是哪种算法，最后都能够得到一棵最小生成树，有关实现代码，由于太过复杂，这里就不进行编写了。</p>\n<h3><a id=\"_917\"></a>最短路径问题</h3>\n<p>前面我们介绍了最小生成树，通过两种算法就能够从众多的边中选择那些尽可能小的边得到一个权重最小的树，这一块我们将继续讨论最小开销相关的问题。</p>\n<p><img alt=\"image-20220903150609366\" src=\"..\\..\\static\\image\\e0a52e00c87a4ffb82f40cb4cf73e164.png\"/></p>\n<p>地铁线路错综复杂，我们想要从一个站点坐到另一个站点，其实是有很多种方案的，比如我们可以选择少的换乘数放的方案，或是距离近的方案，不同的方案可能坐的站点数就不同，而最后我们出站时，始终是按照从A地点到B地点最小经过的站点数进行收费的（比如从A到B有两种方案，前者要坐11个站，后者要坐7个站，但是最后只会按7个站进行收费），那么这么多线路，我们要如何计算得到一条最短的路径呢？</p>\n<p>我们首先从最简单的<strong>单源最短路径</strong>进行讨论，所谓单源最短路径，就是一个顶点出发，到其他顶点的最短路径，比如下面的这张图：</p>\n<p><img alt=\"image-20220903153802247\" src=\"..\\..\\static\\image\\b3bec1400048165053c92ad03fdc9b54.png\"/></p>\n<p>要解决这种问题，我们可以采用**迪杰斯特拉（Dijkstra）**算法，下面我们来看看迪杰斯特拉算法是如何让计算机来计算最短路径的，它跟普利姆算法求最小生成树有着很多相似之处，我们就从A出发，这里我们需要一个表来记录：</p>\n<p><img alt=\"image-20220903195351496\" src=\"..\\..\\static\\image\\71687f632510d4ed699e63ddc4e5486f.png\"/></p>\n<p>dist这一行记录A到其他顶点的最短路径，path这一行记录的是最短路径所邻接的顶点，我们首先还是从A开始，与A直接相邻的两个分别是B和D，其中B的距离是2，D的距离是5，那么我们就先进行一下记录：</p>\n<p><img alt=\"image-20220903195723929\" src=\"..\\..\\static\\image\\c030cc4bf5124b43279cb8c06974a83d.png\"/></p>\n<p>因为都是从A过来的，所以说直接记录为A即可，接着我们继续找到当前A路径最短的一个顶点B，此时顶点B可以到达C、D、A，因为不能走回头路，不考虑A，那么目前从A到达C的最短距离就是经过B到达的，相当于A-&gt;B加上B-&gt;C的距离：</p>\n<p><img alt=\"image-20220903230103368\" src=\"..\\..\\static\\image\\4b18004b199f0c19c5cac4f9fc1cd196.png\"/></p>\n<p>然后我们来看顶点D，此时我们发现，除了A直接到D之外，从B也可以到达D，那么我们就可以比较一下，看是从B到D更短一些，还是从A直接到D更短一些 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        m\n       \n       \n        i\n       \n       \n        n\n       \n       \n        (\n       \n       \n        2\n       \n       \n        +\n       \n       \n        2\n       \n       \n        ,\n       \n       \n        5\n       \n       \n        )\n       \n      \n      \n       min(2 + 2, 5)\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathnormal\">min</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord\">5</span><span class=\"mclose\">)</span></span></span></span></span> ，通过比较，我们发现从B绕过去会更短一些，只需要4即可，所以说我们将其更新一下：</p>\n<p><img alt=\"image-20220903230254335\" src=\"..\\..\\static\\image\\55c347f0275af77c9aa730770ee78531.png\"/></p>\n<p>接着我们继续找到下一个离A最近的顶点D，D与顶点E和J相连，直接更新即可，比如E的最短路径就是相当于是A到D的最短路径加上D到E的路径，D到J也是同理：</p>\n<p><img alt=\"image-20220903230521739\" src=\"..\\..\\static\\image\\e4a29b3e22bf7a316a2e303733c2aa20.png\"/></p>\n<p>此时继续找到表中下一个距离A最近的顶点J，J可以到达H或者是E，按照同样的方式，我们看看是从D直接到E更短，还是从J到E更短，进行比较 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        m\n       \n       \n        i\n       \n       \n        n\n       \n       \n        (\n       \n       \n        6\n       \n       \n        +\n       \n       \n        3\n       \n       \n        ,\n       \n       \n        8\n       \n       \n        )\n       \n      \n      \n       min(6 + 3, 8)\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathnormal\">min</span><span class=\"mopen\">(</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord\">8</span><span class=\"mclose\">)</span></span></span></span></span> ，得到结果是D直接过去更短，所以说不需要更新。然后H更新为J过去的最短路径：</p>\n<p><img alt=\"image-20220903231152767\" src=\"..\\..\\static\\image\\d9d5463ed103bd5d2a1b57d04834b70a.png\"/></p>\n<p>我们接着来看下一个距离A最近的顶点C，此时C可以到达F和E，我们先来看E，还是对其进行比较，如果从C到达E更短，那么就更新为新的值，<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        m\n       \n       \n        i\n       \n       \n        n\n       \n       \n        (\n       \n       \n        7\n       \n       \n        +\n       \n       \n        4\n       \n       \n        ,\n       \n       \n        8\n       \n       \n        )\n       \n      \n      \n       min(7 + 4, 8)\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathnormal\">min</span><span class=\"mopen\">(</span><span class=\"mord\">7</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord\">8</span><span class=\"mclose\">)</span></span></span></span></span>，最后仍然是从D到E最短，所以说不变，接着我们把F的值更新一下：</p>\n<p><img alt=\"image-20220903231449081\" src=\"..\\..\\static\\image\\84bda13e80ce5a9181a0de56ee9515cb.png\"/></p>\n<p>然后我们来看下一个距离A最近的顶点E，E连接的就比较多了，此时E最短路径是从D过来的，那么我们就不考虑D，我们来依次看看与其相连的C、F、G、H、J（注意这里比较的是从E到这些顶点，之前比较的是从这些顶点到E，不要以为是一样的了）</p>\n<ul><li>从E到达顶点C：<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         m\n        \n        \n         i\n        \n        \n         n\n        \n        \n         (\n        \n        \n         8\n        \n        \n         +\n        \n        \n         4\n        \n        \n         ,\n        \n        \n         7\n        \n        \n         )\n        \n       \n       \n        min(8 + 4, 7)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathnormal\">min</span><span class=\"mopen\">(</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord\">7</span><span class=\"mclose\">)</span></span></span></span></span>，故C继续采用原方案。</li><li>从E到达顶点F：<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         m\n        \n        \n         i\n        \n        \n         n\n        \n        \n         (\n        \n        \n         8\n        \n        \n         +\n        \n        \n         2\n        \n        \n         ,\n        \n        \n         15\n        \n        \n         )\n        \n       \n       \n        min(8 + 2, 15)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathnormal\">min</span><span class=\"mopen\">(</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord\">15</span><span class=\"mclose\">)</span></span></span></span></span>，此时从E到达F路径更短，更新F。</li><li>从E到达顶点G：直接更新。</li><li>从E到达顶点H：<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         m\n        \n        \n         i\n        \n        \n         n\n        \n        \n         (\n        \n        \n         8\n        \n        \n         +\n        \n        \n         6\n        \n        \n         ,\n        \n        \n         13\n        \n        \n         )\n        \n       \n       \n        min(8 + 6, 13)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathnormal\">min</span><span class=\"mopen\">(</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">6</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord\">13</span><span class=\"mclose\">)</span></span></span></span></span>，故H继续采用原方案。</li><li>从E到达顶点J：<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         m\n        \n        \n         i\n        \n        \n         n\n        \n        \n         (\n        \n        \n         8\n        \n        \n         +\n        \n        \n         3\n        \n        \n         ,\n        \n        \n         6\n        \n        \n         )\n        \n       \n       \n        min(8 + 3, 6)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathnormal\">min</span><span class=\"mopen\">(</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord\">6</span><span class=\"mclose\">)</span></span></span></span></span>，故J继续采用原方案。</li></ul>\n<p>最后得到：</p>\n<p><img alt=\"image-20220903232316607\" src=\"..\\..\\static\\image\\90d05b5be726bc6a729778c4629054d5.png\"/></p>\n<p>我们继续来到下一个离A最近的顶点F，F连接了G和E，但是由于当前最短路径是从E过来的，不能走回头路，所以说直接去看G，比较 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        m\n       \n       \n        i\n       \n       \n        n\n       \n       \n        (\n       \n       \n        10\n       \n       \n        +\n       \n       \n        5\n       \n       \n        ,\n       \n       \n        17\n       \n       \n        )\n       \n      \n      \n       min(10 + 5, 17)\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathnormal\">min</span><span class=\"mopen\">(</span><span class=\"mord\">10</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord\">17</span><span class=\"mclose\">)</span></span></span></span></span>，得到从F到达G会更短，所以说更新G：</p>\n<p><img alt=\"image-20220903232542904\" src=\"..\\..\\static\\image\\640cdcb7b43cfc0403dcc790cdff42bf.png\"/></p>\n<p>然后我们接着看到下一个最短的顶点H，此时H与G和I相连，我们先来看G，<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        m\n       \n       \n        i\n       \n       \n        n\n       \n       \n        (\n       \n       \n        13\n       \n       \n        +\n       \n       \n        3\n       \n       \n        ,\n       \n       \n        15\n       \n       \n        )\n       \n      \n      \n       min(13 + 3, 15)\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathnormal\">min</span><span class=\"mopen\">(</span><span class=\"mord\">13</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord\">15</span><span class=\"mclose\">)</span></span></span></span></span>，维持原方案。然后是I，直接更新即可：</p>\n<p><img alt=\"image-20220903232752582\" src=\"..\\..\\static\\image\\1f4490cd45e52e12ad1c57642685e2e3.png\"/></p>\n<p>虽然此时表已经填完了，但是我们还没有把所有的顶点都遍历完，有可能还会存在更短的路径，所以说别着急，我们还得继续看。此时继续选择下一个离A最近的顶点G，它与E、F、H、I相连，由于其实从F过来的，排除掉F，我们来看看其他三个：</p>\n<ul><li>从G到达顶点E：<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         m\n        \n        \n         i\n        \n        \n         n\n        \n        \n         (\n        \n        \n         15\n        \n        \n         +\n        \n        \n         9\n        \n        \n         ,\n        \n        \n         8\n        \n        \n         )\n        \n       \n       \n        min(15 + 9, 8)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathnormal\">min</span><span class=\"mopen\">(</span><span class=\"mord\">15</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">9</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord\">8</span><span class=\"mclose\">)</span></span></span></span></span>，显然选择原方案就行。</li><li>从G到达顶点H：<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         m\n        \n        \n         i\n        \n        \n         n\n        \n        \n         (\n        \n        \n         15\n        \n        \n         +\n        \n        \n         3\n        \n        \n         ,\n        \n        \n         13\n        \n        \n         )\n        \n       \n       \n        min(15 + 3, 13)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathnormal\">min</span><span class=\"mopen\">(</span><span class=\"mord\">15</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord\">13</span><span class=\"mclose\">)</span></span></span></span></span>，依然是选择原方案更短。</li><li>从G到达顶点I：<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         m\n        \n        \n         i\n        \n        \n         n\n        \n        \n         (\n        \n        \n         15\n        \n        \n         +\n        \n        \n         4\n        \n        \n         ,\n        \n        \n         21\n        \n        \n         )\n        \n       \n       \n        min(15 + 4, 21)\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathnormal\">min</span><span class=\"mopen\">(</span><span class=\"mord\">15</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord\">21</span><span class=\"mclose\">)</span></span></span></span></span>，从G到达I更短，更新。</li></ul>\n<p>最后得到：</p>\n<p><img alt=\"image-20220903233144469\" src=\"..\\..\\static\\image\\9bb4f5db7c46fc7104078c5b1bd6779d.png\"/></p>\n<p>此时我们来看最后一个顶点I，与其连接的有G和H，因为是从G过来的，直接比较H就行了，<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n    \n     \n      \n       \n        m\n       \n       \n        i\n       \n       \n        n\n       \n       \n        (\n       \n       \n        19\n       \n       \n        +\n       \n       \n        8\n       \n       \n        ,\n       \n       \n        13\n       \n       \n        )\n       \n      \n      \n       min(19 + 8, 13)\n      \n     \n    </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathnormal\">min</span><span class=\"mopen\">(</span><span class=\"mord\">19</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">8</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord\">13</span><span class=\"mclose\">)</span></span></span></span></span>，维持原方案就行，至此，迪杰斯特拉算法结束。最后得到的表，就是最终的A到达各个顶点的最短路径值了，并且根据path这一栏的数据，我们就可以直接推出一条路径出来。</p>\n<p>当然，这只是解决了<strong>单源最短路径</strong>问题，现在我们将问题的难度提升一下，比如我们现在想要求得图中每一对顶点之间的最短路径，那么该如何进行计算呢？最简单的办法就是，我们可以将所有的顶点都执行一次迪杰斯特拉算法，这样我们就可以求到所有顶点之间的最短距离了。只不过这种方式并不是最好的选择，对于这种问题，我们可以选择<strong>弗洛伊德</strong>（Floyd）算法。</p>\n<p>比如下面的有向网图（权值别出现负数了，不然要出大问题）：</p>\n<p><img alt=\"image-20220904094948962\" src=\"..\\..\\static\\image\\7f708f2a890a8ea0aa467f454af87841.png\"/></p>\n<p>我们可以很轻松地得到它的邻接矩阵：</p>\n<p><img alt=\"image-20220904101234641\" src=\"..\\..\\static\\image\\f11a9739881b4f4d06f83d2517eb63f4.png\"/></p>\n<p>而弗洛伊德算法则是根据最初的邻接矩阵进行推导得出的。规则如下：</p>\n<ul><li>从1开始，一直到n（n就是顶点数）的一个矩阵序列A1、A2、…An，我们需要从最初的邻接矩阵开始，从A1开始不断往后推。</li><li>每一轮，我们都会去更新那些非对角线（对角线都是0，更新了还是0，所以说没必要看）、<code>i</code>行<code>i</code>列以外的元素，判断水平和垂直方向投影的两个元素之和是否比原值小，如果是，那就更新为新的值。迭代公式为：<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          A\n         \n         \n          k\n         \n        \n        \n         (\n        \n        \n         i\n        \n        \n         ,\n        \n        \n         j\n        \n        \n         )\n        \n        \n         =\n        \n        \n         m\n        \n        \n         i\n        \n        \n         n\n        \n        \n         (\n        \n        \n         \n          A\n         \n         \n          \n           k\n          \n          \n           −\n          \n          \n           1\n          \n         \n        \n        \n         (\n        \n        \n         i\n        \n        \n         ,\n        \n        \n         j\n        \n        \n         )\n        \n        \n         ,\n        \n        \n         \n          A\n         \n         \n          \n           k\n          \n          \n           −\n          \n          \n           1\n          \n         \n        \n        \n         (\n        \n        \n         i\n        \n        \n         ,\n        \n        \n         k\n        \n        \n         )\n        \n        \n         +\n        \n        \n         \n          A\n         \n         \n          \n           k\n          \n          \n           −\n          \n          \n           1\n          \n         \n        \n        \n         (\n        \n        \n         k\n        \n        \n         ,\n        \n        \n         j\n        \n        \n         )\n        \n        \n         )\n        \n       \n       \n        A_k(i,j)=min(A_{k−1}(i,j), A_{k−1}(i,k)+A_{k−1}(k,j))\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3361em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0315em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0572em;\">j</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathnormal\">min</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3361em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0315em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.2083em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0572em;\">j</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3361em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0315em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.2083em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0315em;\">k</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.3361em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right: 0.0315em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.2083em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right: 0.0315em;\">k</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.0572em;\">j</span><span class=\"mclose\">))</span></span></span></span></span></li><li>经历n轮后，最后得到的就是最终的最短距离了。</li></ul>\n<p>我们从第一轮开始，第一轮是基于原有的邻接矩阵来进行处理的：</p>\n<p><img alt=\"image-20220904102258851\" src=\"..\\..\\static\\image\\8fb76f562a091ca7a90f2d8862dcdcab.png\"/></p>\n<p>此时我们看到，除了对角线以外，就是B-&gt;C和C-&gt;B的这两个位置，我们按照上面的规则，进行计算：</p>\n<p><img alt=\"image-20220904102738649\" src=\"..\\..\\static\\image\\1605a86d84a54203cb22458868c1ca91.png\"/></p>\n<p>同样的，我们继续看到C-&gt;B这个为止，按照同样的方式进行更新：</p>\n<p><img alt=\"image-20220904103010762\" src=\"..\\..\\static\\image\\60047439b18c3a5d58f37e300def12c0.png\"/></p>\n<p>最后更新完成得到的结果如下：</p>\n<p><img alt=\"image-20220904103033008\" src=\"..\\..\\static\\image\\048bc52fd3f98b533e22cd48452bbf21.png\"/></p>\n<p>实际上我们发现，我们计算的和相当于是绕路的结果与当前直接走的结果相比较得到的。按照的同样的方式，我们开始第二轮：</p>\n<p><img alt=\"image-20220904103410691\" src=\"..\\..\\static\\image\\02c89da38e2ed9efa317860292862d70.png\"/></p>\n<p>更新完成之后，C-&gt;A的距离变成了5：</p>\n<p><img alt=\"image-20220904103549079\" src=\"..\\..\\static\\image\\3c78daa7e432f0f5138ecd3bbae1e98f.png\"/></p>\n<p>我们接着来看最后一轮：</p>\n<p><img alt=\"image-20220904103724239\" src=\"..\\..\\static\\image\\f3fccfab002faf2a61c0878f356fb7f0.png\"/></p>\n<p>此时我们将A-&gt;B的距离也更新一下：</p>\n<p><img alt=\"image-20220904103815369\" src=\"..\\..\\static\\image\\97b91ee401aa139c065e44aa5d677230.png\"/></p>\n<p>最后我们得到的矩阵，存放的就是所有顶点之间的最短距离了，当然这里我们只计算了最短距离，没有去记录从哪个方向到达此顶点的，各位小伙伴也可以在计算的同时单独在另一个表中记录一下从哪个顶点过去计算出来的最小距离，这里就不演示了。实际上这个算法对我们来说是更好理解的一种算法，并且在编写程序时也会很简单，我们以下图为例：</p>\n<p><img alt=\"image-20220904105442929\" src=\"..\\..\\static\\image\\1ec67e83723e5857b248f94d7c8863c6.png\"/></p>\n<p>代码如下：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">INF</span> <span class=\"token expression\"><span class=\"token number\">210000000</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">N</span> <span class=\"token expression\"><span class=\"token number\">4</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">&gt;</span> b <span class=\"token operator\">?</span> b <span class=\"token operator\">:</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">floyd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> matrix<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span>    <span class=\"token comment\">//一共需要执行K轮</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>   <span class=\"token comment\">//i和j从0开始就行了，直接全看，不会影响结果的</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n                matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> matrix<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//按照规则更新就行了</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> matrix<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> INF<span class=\"token punctuation\">,</span> INF<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> INF<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token punctuation\">{<!-- --></span>INF<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> INF<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> INF<span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">floyd</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>最后得到的结果为：</p>\n<p><img alt=\"image-20220904110149836\" src=\"..\\..\\static\\image\\3bff2d5165b9f394cdbe31caad9918c5.png\"/></p>\n<p>经过对比，确实是最短的路径了。</p>\n<h3><a id=\"_1080\"></a>拓扑排序</h3>\n<p>我们接着来看<strong>拓扑排序</strong>，实际上我们生活中可能会遇到下面的问题：</p>\n<p>比如我们的大学课程的学习，一些课程开启可能需要修完一些前置课程，比如数据结构开课需要先修完C语言程序设计，Java开课需要修完计算机网络、计算机组成原理等课程，我们在到达某个阶段之前，需要完成一些前置条件才可以解锁。包括我们游戏中的任务，需要先完成哪些主线任务，完成哪些支线任务，才能解锁新的阶段。</p>\n<p>我们可以将这些任务都看做是一个顶点，最后就能够连接成一个有向图：</p>\n<p><img alt=\"image-20220904110937920\" src=\"..\\..\\static\\image\\8d7e2b9a7cbc7fd7949e6b7c0aa5b70f.png\"/></p>\n<p>因为始终是由前置条件来解锁后续，所以说整个图中是不可以出现循环的（要是有循环的话就没办法继续了，就像先有鸡还是先有蛋的问题一样）所以说构建出来的这种图我们也称为<strong>有向无环图</strong>（DAG），其实按照我们通俗的话来说，它就是个流程图罢了，我们只需要按照这个流程图来进行即可。像这种顶点表示活动或任务的图也称为<strong>AOV图</strong>。</p>\n<p><strong>拓扑排序</strong>（Topological Order）是指，将一个有向无环图（Directed Acyclic Graph）进行排序进而得到一个有序的线性序列。</p>\n<p>比如上图的拓扑排序可以是以下的几种：</p>\n<ul><li>A,B,C,D,E,F,G,H,I,J</li><li>A,C,D,B,E,F,G,H,I,J</li><li>A,D,C,B,E,F,G,H,I,J</li><li>A,B,D,C,E,F,G,H,I,J</li></ul>\n<p>只要我们保证前置任务在后续任务之前完成即可，前置任务的完成顺序不做要求，所以拓扑排序不唯一。</p>\n<p><img alt=\"image-20220904121459739\" src=\"..\\..\\static\\image\\b268fe3f1ca45b4394971f26201e18c8.png\"/></p>\n<p>那么我们在程序中如何对一个有向无环图进行拓扑排序呢？以上图为例，其实很简单，我们还是利用队列来完成，我们每次只需要将那些入度为0的顶点，丢进队列中（注意丢进去之后记得更新一下图中其他顶点的入度）首先从A：</p>\n<p><img alt=\"image-20220904122602140\" src=\"..\\..\\static\\image\\3adbaf4c5765e66c19c10b676e4aee0d.png\"/></p>\n<p>此时队列中有A这个顶点，接着我们来看看图中剩余的顶点，哪些又是入度为0的顶点，可以看到D也是：</p>\n<p><img alt=\"image-20220904122621668\" src=\"..\\..\\static\\image\\c13e9639e79c4b38e4d677e5cb434f3e.png\"/></p>\n<p>当目前所有度数为0的顶点进入队列之后，我们开始出队，正式开始拓扑排序，在出队时直接打印，并且查看，当此顶点离开图之后，图中会不会有其他顶点的入度变为0，如果有，将其他顶点入队。比如此时A出队之后，那么A要从图中移除，现在B也变成了入度为0的顶点，所以说将B丢进队列：</p>\n<p><img alt=\"image-20220904122914376\" src=\"..\\..\\static\\image\\e0ddf1cc9571a190357b407dfa6813f9.png\"/></p>\n<p>接着，我们继续让D出队，我们发现D出队之后，E变成了入度为0的顶点，所以说将E入队：</p>\n<p><img alt=\"image-20220904123206951\" src=\"..\\..\\static\\image\\d2c78817eb8a3545ae2a6c0189b6569a.png\"/></p>\n<p>接着我们继续出队，B出队之后，我们发现没有任何顶点入度变为0了，所以说不管，继续：</p>\n<p><img alt=\"image-20220904123257858\" src=\"..\\..\\static\\image\\dea4de9ddf5a392ae3921d71ec806aed.png\"/></p>\n<p>继续将E出队，在E出队之后，顶点F、C都变成了入度为0的顶点，统统入队：</p>\n<p><img alt=\"image-20220904123445483\" src=\"..\\..\\static\\image\\d34d30544c67d976912f39c13fd5b7a7.png\"/></p>\n<p>此时继续将C出队，我们发现没有任何顶点入队变为0，我们继续来看F：</p>\n<p><img alt=\"image-20220904123544940\" src=\"..\\..\\static\\image\\461d57ac5d37aca29b8f7cda74f68530.png\"/></p>\n<p>当F出队后，顶点G变成了入度为0的顶点，此时将G入队：</p>\n<p><img alt=\"image-20220904123635522\" src=\"..\\..\\static\\image\\0d8dcebec7d969cf0d6f3d8b39575ec0.png\"/></p>\n<p>剩下就是把G出队，然后F入队F再出队了：</p>\n<p><img alt=\"image-20220904123742305\" src=\"..\\..\\static\\image\\7c8c1bb3cc5293f678686fe44fef2c0b.png\"/></p>\n<p>最后得到的拓扑序列为：ADBECFGH，其实思路还是比较简单的，当然，其实我们利用拓扑排序算法可以检测一个有向图是否为有向无环图，也就是说顶点还没遍历完队列就空了的话，说明一定出现了回路。</p>\n<h3><a id=\"_1143\"></a>关键路径计算</h3>\n<p>经过前面的学习，我们知道一个任务可能会存在前置任务，只不过我们仅仅是简单讨论了任务的完成顺序，如果此时我们为每个任务添加一个权重，表示任务所需要花费的时间，那么我们的后续任务就需要前置任务全部按时间完成之后才能继续：</p>\n<p><img alt=\"image-20220904130014247\" src=\"..\\..\\static\\image\\5f3a386ec7faad2c274a4fb589ed6787.png\"/></p>\n<p>比如A代表某个任务（事件），B代表另一个任务，我们需要先花费2天时间完成A之后，才能开始B，活动包括时间用边来表示，我们将边作为活动的图称为<strong>AOE图</strong>，每个事件对应着多个活动（多条边）它就像一个大工程一样，从A开始，中间需要经过各种各样的步骤，最后到H完工作为结束。</p>\n<p>而我们需要计算的是那些最拖延工期的活动，比如要开始任务C，那么需要完成A、B才可以，完成A需要7天，完成B需要5天，由于C需要同时完成A和B才能继续，所以说A就变成了最拖延工期的任务，因为它的时间比B还长，B都完工了，还需要等待A完成才可以。只要计算出这些最拖延工期的任务，得到一条<strong>关键路径</strong>，我们就可以得到完成整个工程最早的时间以及各项任务可以在什么时候开工了。</p>\n<p>我们来看看如何进行计算，我们以下图为例：</p>\n<p><img alt=\"image-20220904132328013\" src=\"..\\..\\static\\image\\ab1cafd6c274ce3273a492ef330c93af.png\"/></p>\n<p>我们需要计算两个东西，一个是<strong>事件最早完成时间</strong>（也就是要完成这个事件最快要多久），还有一个是<strong>事件最晚开始时间</strong>（就是这个事件在不影响工期的情况下最晚可以多久开始）：</p>\n<p><img alt=\"image-20220904132930050\" src=\"..\\..\\static\\image\\9cad0fffd7080d0790e80e115f9751f9.png\"/></p>\n<p>我们依然是按照之前的拓扑排序的顺序进行，首先一开始是A，因为只有一个起点A肯定是可以直接开始的，所以说最早和最晚时间都是0（注意如果出现多个起点的话，最晚开始时间就不一定了），我们接着AOE图的工作顺序，来计算任务B和C的最早和最晚时间：</p>\n<p><img alt=\"image-20220904133246766\" src=\"..\\..\\static\\image\\712014b9d2f924518aed8365f2112f77.png\"/></p>\n<p>接着就是D和E，首先D需要B和C同时完工之后才能继续，那么也就是说需要选择B和C过来时间最长的那一个：</p>\n<p><img alt=\"image-20220904133658962\" src=\"..\\..\\static\\image\\ac05e6d43e05f847551676e1f9a7a67e.png\"/></p>\n<p>最后就是F，到达F一共有三条路径，我们依然是选择最长的那一条，从D过来总共需要8天时间：</p>\n<p><img alt=\"image-20220904133802361\" src=\"..\\..\\static\\image\\ee734dad27e71cc4728d000882ae0e3a.png\"/></p>\n<p>故整个工程的最早完成时间为8天，我们接着来看活动的最晚开始时间，现在我们要从终点倒着往回看：</p>\n<p><img alt=\"image-20220904134114068\" src=\"..\\..\\static\\image\\5d33d8cf56b3448275b36d8ef6f1c03a.png\"/></p>\n<p>首先终点一定是8，因为工期最快是在8天结束的，我们继续倒着往回走，先来看E，E需要6天才能到达，但是只需要1天就可以结束，所以 8 - 1 = 7，最晚可以在第7天时动工：</p>\n<p><img alt=\"image-20220904134310369\" src=\"..\\..\\static\\image\\b8017e0fe56012f882d1a4b80be68db6.png\"/></p>\n<p>然后是D，因为D到F需要2天时间，而D已经是第6天了，总时间8天，所以说D刻不容缓，第6天就需要马上开工：</p>\n<p><img alt=\"image-20220904134445037\" src=\"..\\..\\static\\image\\33ee8a7eb17ac6a719498c214b3f25a4.png\"/></p>\n<p>然后是C，C比较复杂，因为C有两个活动，一个是指向D的，一个是指向F的，我们需要单独计算每一个活动：</p>\n<ul><li>C -&gt; F：用F的最晚开始时间减去任务时间 = 8 - 3 = 5，此时C最晚可以从第5天开始。</li><li>C -&gt; D：用D的最晚开始时间减去任务时间 = 6 - 4 = 2，此时因为C的最早开始时间就是2，所以说C不能晚点开始。</li></ul>\n<p>综上，C不能晚点开始，只能从第2天就开始，因为要满足D的条件：</p>\n<p><img alt=\"image-20220904135059487\" src=\"..\\..\\static\\image\\1aaf91c19d2c812fa669f6256e0b4f45.png\"/></p>\n<p>最后是B，B也是有两个任务，一个是指向E一个是指向D：</p>\n<ul><li>B -&gt; E：用E的最晚开始时间减去任务时间 = 7 - 3 = 4，此时B最晚可以第4天开工。</li><li>B -&gt; D：用D的最晚开始时间减去任务时间 = 6 - 2 = 4，同上。</li></ul>\n<p>所以，B的最晚开始时间可以是第4天：</p>\n<p><img alt=\"image-20220904135338214\" src=\"..\\..\\static\\image\\baf0a5c8bca3a3b54efe654643d5fb42.png\"/></p>\n<p>当然最后我们也可以计算一下A -&gt; B和A -&gt; C，但是由于只有这一个起点，所以说算出来肯定是0，当然如果出现多个起点的情况，还需要进行计算得到的。</p>\n<p>计算完成之后，我们就可以得到关键路径了，也就是那些最早和最晚时间都一样的顶点（说明是刻不容缓的，时间很紧）这些顶点连成的路线，就是我们要找的关键路径了：A -&gt; C -&gt; D -&gt; F，这条路径被安排的满满当当。关键路径上的所有活动都是<strong>关键活动</strong>，整个工期就是由这些活动在决定的，因此，我们可通过适当加快关键活动来缩短整个项目的工期，但是注意不能加快得太猛，因为如果用力过猛可能会导致关键路径发生变化。当然，关键路径并不是唯一的，可能会出现一样的情况。</p>\n<p>至此，有关图结构相关的内容，我们就讲解到这里。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-09-04 21:11:12", "summary": "图结构篇图结构在我们的生活中实际上是非常常见的，其中最显著的就是我们的地图了，比如我的家乡重庆：可以看到，地图盘根错节，错综复杂，不同的道路相互连接，我们可以自由地从这些道路通过，从一个地点到达另一个"}