{"blogid": "120609606", "writerAge": "码龄6年", "writerBlogNum": "4", "writerCollect": "4", "writerComment": "1", "writerFan": "1", "writerGrade": "1级", "writerIntegral": "78", "writerName": "RavenRayRust", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_120609606.jpg", "writerRankTotal": "1187464", "writerRankWeekly": "1132362", "writerThumb": "3", "writerVisitNum": "18681", "blog_read_count": "839", "blog_time": "于 2021-10-04 23:20:47 发布", "blog_title": "Rust踩坑日记（二）Option,Some和None", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"OptionSomeNone_0\"></a>Option,Some和None</h1>\n<p>Option是Rust中核心的枚举类型，其提出是为了让空值得到有效的处理。任何可能为空值的结果都应被处理为Option。<br/> Option&lt;T&gt;的值，有Some(T)和None两种。</p>\n<h2><a id=\"_5\"></a>常用的取值方法</h2>\n<h3><a id=\"unwarp_7\"></a>unwarp()</h3>\n<ol><li>当Some(T)调用时，能将T类型的值取出，若T未实现Copy trait，则发生所有权转移。</li><li>当None调用时，若在编译阶段，会由编译器报错，无法通过编译；若在运行阶段，程序会Panic。</li><li>调用unwarp的Option不要求是mut的。</li><li>为了防止None调用unwarp()，除了进行None检查外，还可以选各站调用unwarp_or系列方法，让程序在检测到None时自动进行额外处理。</li></ol>\n<pre><code class=\"prism language-rust\">let a_string_option = Some(String::new());\nlet res:String = a_string_option.unwrap_or_default();\n</code></pre>\n<h3><a id=\"ifwhile_let_19\"></a>if/while let</h3>\n<pre><code class=\"prism language-rust\"> if let Some(a_T) = a_option { \n  //a_T生命周期仅在花括号内生效。\n  //a_option将发生move或copy。\n}\n\n while let Some(a_T) = a_option { \n  //当a_option 为None时退出循环。\n  //若T没有实现Copy，则需要在花括号中为a_option进行修改。\n}\n\n</code></pre>\n<h3><a id=\"match_34\"></a>match</h3>\n<pre><code class=\"prism language-rust\">match a_string_option {\n    Some(_a_string) =&gt;println!(\"{}\",_a_string),//匹配成功\n    _=&gt;{}//'_'表示其余匹配结果，在这里除了Some，自然是None。\n}\n</code></pre>\n<h2><a id=\"replacetake_43\"></a>replace()与take()</h2>\n<ol><li>replace方法顾名思义，用参数的值替换原Option内的值。将原值用Some包装后返回。</li><li>take方法相当于replace的空值版本,原来的Option变量留下None值。</li><li>执行replace和take方法后的Option仍是有效的，并未发生move。</li><li>replace和take方法的Option都会要求mut。</li></ol>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-10-04 23:20:47", "summary": "和是中核心的枚举类型，其提出是为了让空值得到有效的处理。任何可能为空值的结果都应被处理为。的值，有和两种。常用的取值方法当调用时，能将类型的值取出，若未实现，则发生所有权转移。当调用时，若在编译阶段，"}