{"blogid": "124156206", "writerAge": "码龄4年", "writerBlogNum": "2", "writerCollect": "52", "writerComment": "20", "writerFan": "121", "writerGrade": "1级", "writerIntegral": "75", "writerName": "神晟的光辉", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124156206.jpg", "writerRankTotal": "152110", "writerRankWeekly": "490879", "writerThumb": "40", "writerVisitNum": "14327", "blog_read_count": "10586", "blog_time": "已于 2022-04-14 15:15:32 修改", "blog_title": "wandb使用方法以及具体设置", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"-toc\" style=\"margin-left:40px;\"></p>\n<p id=\"wandb%E6%98%AF%E4%BB%80%E4%B9%88%20%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#wandb%E6%98%AF%E4%BB%80%E4%B9%88%20%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">wandb是什么       </a></p>\n<p id=\"wandb%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C%E7%99%BB%E9%99%86-toc\" style=\"margin-left:40px;\"><a href=\"#wandb%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C%E7%99%BB%E9%99%86\">wandb安装与注册登陆</a></p>\n<p id=\"wandb%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:40px;\"><a href=\"#wandb%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0\">wandb常用函数</a></p>\n<p id=\"wandb.init()-toc\" style=\"margin-left:80px;\"><a href=\"#wandb.init%28%29\">wandb.init()</a></p>\n<p id=\"wandb.config()-toc\" style=\"margin-left:80px;\"><a href=\"#wandb.config%28%29\">wandb.config()</a></p>\n<p id=\"wandb.log()%E5%92%8Cwandb.Image()-toc\" style=\"margin-left:80px;\"><a href=\"#wandb.log%28%29%E5%92%8Cwandb.Image%28%29\">wandb.log()和wandb.Image()</a></p>\n<p id=\"%E5%85%B7%E4%BD%93%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%85%B7%E4%BD%93%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95\">具体使用方法</a></p>\n<p id=\"%E5%90%8E%E4%BC%A0-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%90%8E%E4%BC%A0\">后传</a></p>\n<p id=\"-toc\" style=\"margin-left:0px;\"></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h2 id=\"wandb%E6%98%AF%E4%BB%80%E4%B9%88%20%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">wandb是什么       </h2>\n<p style=\"text-align:justify;\">wandb是Weight &amp; Bias的缩写，这是一个与Tensorboard类似的参数可视化平台。不过，相比较TensorBoard而言，Wandb更加的强大，主要体现在以下的几个方面：</p>\n<blockquote>\n<ol><li>复现模型：Wandb更有利于复现模型。<br/> 这是因为Wandb不仅记录指标，还会记录超参数和代码版本。</li><li>自动上传云端：<br/> 如果你把项目交给同事或者要去度假，Wandb可以让你便捷地查看你制作的所有模型，你就不必花费大量时间来重新运行旧实验。</li><li>快速、灵活的集成：<br/> 只需5分钟即可把Wandb加到自己的项目。<br/> 下载Wandb免费的开源Python包，然后在代码中插入几行，以后你每次运行模型都会得到记录完备的指标和记录。</li><li>集中式指示板：<br/> Wandb提供同样的集中式指示板。不管在哪里训练模型，不管是在本地机器、实验室集群还是在云端实例；<br/> 这样就不必花时间从别的机器上复制TensorBoard文件。</li><li>强大的表格：<br/> 对不同模型的结果进行搜索、筛选、分类和分组。<br/> 可以轻而易举地查看成千上万个模型版本，并找到不同任务的最佳模型。</li></ol>\n</blockquote>\n<p> 详细内容：<a href=\"https://zhuanlan.zhihu.com/p/342300434\" title=\"Wandb：模型训练最强辅助 - 知乎\">Wandb：模型训练最强辅助 - 知乎</a></p>\n<h2 id=\"wandb%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C%E7%99%BB%E9%99%86\">wandb安装与注册登陆</h2>\n<p>1.在终端里运行如下代码用于安装wandb库。</p>\n<pre><code>pip install wandb</code></pre>\n<p>2. 在安装好wandb库之后，输入如下代码进行wandb的登陆。</p>\n<p style=\"text-align:justify;\">如果之前没有使用过wanbd的话，在运行wandb login之前最好先去wandb的官网注册一个账号，这样在输入API key时可以方便不少。<a class=\"link-info\" href=\"https://wandb.ai/site\" title=\"点这里注册\">点这里注册</a></p>\n<pre><code>wandb login</code></pre>\n<p>在输入上面的代码之后终端里就会出现这两行，这时候需要做的就是点开第一行的链接，将里面的神秘代码复制粘贴到第二行里，敲一下回车，就完成了wandb的登陆。</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\54c7d5a91fdf43a6860c401a9c0a7cb0.png\"/> 测试代码:</p>\n<pre><code class=\"language-python\">import wandb\n\nconfig = dict (\n  learning_rate = 0.01,\n  momentum = 0.2,\n  architecture = \"CNN\",\n  dataset_id = \"peds-0192\",\n  infra = \"AWS\",\n)\n\nwandb.init(\n  project=\"detect-pedestrians\",\n  notes=\"tweak baseline\",\n  tags=[\"baseline\", \"paper1\"],\n  config=config,\n)</code></pre>\n<p>打开运行结果里有火箭那一行的链接，浏览器中出现如下结果就说明成功了。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\baf3db6b02ac41e7943c8ba38135c069.png\"/></p>\n<p></p>\n<h2 id=\"wandb%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0\">wandb常用函数</h2>\n<h3 id=\"wandb.init()\">wandb.init()</h3>\n<p style=\"text-align:justify;\">这个函数的作用与平常定义类里面的init函数作用类似，都是起初始化的作用。在官方文档里面，init中包含20多个作用不同的参数，我从这20多个里面挑了几个自认为比较重要的参数进行具体的说明。官方文档：<a href=\"https://docs.wandb.ai/ref/python/init\" title=\"wandb.init - Documentation\">wandb.init - Documentation</a></p>\n<p style=\"text-align:justify;\">1.project：字符串格式，这个参数用于定义你的项目名称，wandb在运行的过程中会自动帮你创建一个项目文件，将所有项目名称相同的文件都放在一起。</p>\n<p style=\"text-align:justify;\">2.name：字符串格式，表示具体的名称，不写的话也可以，官方文档中说不定义具体名称的工程系统会自动使用两个随机单词进行命名，为了方便记忆以及防止出现例如green-wood-250之类的奇怪名字，还是定义一下比较好。</p>\n<p style=\"text-align:justify;\">3.conifg：见wandb.config()。</p>\n<p style=\"text-align:justify;\">4.resume：用于设置可恢复行为，通俗的理解就是当遇见意外中断时是否可继续。通常设置为默认None。</p>\n<pre><code class=\"language-python\">wandb.init(project='project',\n           name='name',\n           config=config,\n           resume='None')\n</code></pre>\n<h3 id=\"wandb.config()\">wandb.config()</h3>\n<p style=\"text-align:justify;\">wandb.config()用于保存训练配置，这些配置包含超参数、数据集名称或模型类型等输入设置，以及其他自变量。在使用的时候可以在wandb.init()中就进行对config的定义，这时候就能够直接对config内容进行输入。如果在init中没有设置conifg，那么就使用wandb.config.update()进行具体内容的输入。官方文档：<a href=\"https://docs.wandb.ai/ref/python/config\" title=\"wandb.config - Documentation\">wandb.config - Documentation</a></p>\n<pre><code class=\"language-python\">#init中定义了config\nconfig=dic(learing rate=0.1,batch size=2,epoch=50)\n#init中没有定义config\nwandb.config.update(dic(learing rate=0.1,batch size=2,epoch=50))</code></pre>\n<h3 id=\"wandb.log()%E5%92%8Cwandb.Image()\" style=\"text-align:justify;\">wandb.log()和wandb.Image()</h3>\n<p>wandb.log()会将数据记录到当前的历史记录，换句话说就是每次运行到这里，系统就会将log内的参数值自动上传更新，一般数据会直接绘制成表格。wandb.Image()用于图像的显示，numpy格式的数组或者PIL实例转化为PNG，从而在网页上直接显示出来。</p>\n<p>官方文档：<a href=\"https://docs.wandb.ai/ref/python/log\" title=\"wandb.log - Documentation\">wandb.log - Documentation</a> &amp; wandb.Imgae的我没有找到</p>\n<pre><code class=\"language-python\">wandb.log({'loss': loss, 'epoch': epoch, 'learning rate': cur_lr，\n           'images': wandb.Image(images.float()),\n           'masks': {'true': wandb.Image(targets.float()),\n                     'pred': wandb.Image(pred.float())}\n          })</code></pre>\n<h2 id=\"%E5%85%B7%E4%BD%93%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95\">具体使用方法</h2>\n<p style=\"text-align:justify;\">一般wandb都是写在网络的Train函数里，这里我就只放一个Train函数来举例了。大家可以照葫芦画瓢，把这个应用到自己的网络里。</p>\n<p style=\"text-align:justify;\"> 首先，导入wandb库。</p>\n<pre><code class=\"language-python\">import os\nimport argparse\nimport time\nimport shutil\nimport wandb     #wandb库\n\nimport numpy as np\nimport torch\nimport torch.utils.data as data\nimport torch.backends.cudnn as cudnn\n\nfrom torchvision import transforms\nfrom data_loader import get_segmentation_dataset\nfrom models.fast_scnn import get_fast_scnn\nfrom utils.loss import MixSoftmaxCrossEntropyLoss, MixSoftmaxCrossEntropyOHEMLoss\nfrom utils.lr_scheduler import LRScheduler\nfrom utils.metric import SegmentationMetric</code></pre>\n<p style=\"text-align:justify;\">然后，找到合适的地方进行wandb的初始化和config内容的设置。通常写在train这个函数里面，不过也有例外，这时候就需要仔细看看代码了。比如我改的这个就是需要设置在main函数里面的。</p>\n<pre><code class=\"language-python\">if __name__ == '__main__':\n    args = parse_args()\n    test = wandb.init(project=\"Fast-SCNN\", resume=\"allow\")\n    test.config.update(dict(epoch=args.epochs, lr=args.lr, batch_size=args.batch_size))\n    trainer = Trainer(args)\n    if args.eval:\n        print('Evaluation model: ', args.resume)\n        trainer.validation(args.start_epoch)\n    else:\n        print('Starting Epoch: %d, Total Epochs: %d' % (args.start_epoch, args.epochs))\n        trainer.train()</code></pre>\n<p style=\"text-align:justify;\">数据显示部分要找到合适的位置，基本上放在train函数里面的for循环中就基本不会有太大问题了，最多就是在显示图片的时候仔细查看一下，输入的格式是否符合wandb.Image的需求，防止在使用的过程中报错。</p>\n<pre><code class=\"language-python\">    def train(self):\n        cur_iters = 0\n        start_time = time.time()\n        for epoch in range(self.args.start_epoch, self.args.epochs):\n            self.model.train()\n\n            for i, (images, targets) in enumerate(self.train_loader):\n                cur_lr = self.lr_scheduler(cur_iters)\n                for param_group in self.optimizer.param_groups:\n                    param_group['lr'] = cur_lr\n\n                images = images.to(self.args.device)\n                targets = targets.to(self.args.device)\n\n                outputs = self.model(images)\n                loss = self.criterion(outputs, targets)\n                pred = torch.argmax(outputs[0], 1)\n\n\n                test.log({'loss': loss, 'epoch': epoch, 'learning rate': cur_lr})\n                test.log({'images': wandb.Image(images.float()),\n                          'masks': {\n                              'true': wandb.Image(targets.float()),\n                              'pred': wandb.Image(pred.float()),\n                         }}\n                         )\n\n                self.optimizer.zero_grad()\n                loss.backward()\n                self.optimizer.step()\n\n                cur_iters += 1\n                if cur_iters % 10 == 0:\n                    print('Epoch: [%2d/%2d] Iter [%4d/%4d] || Time: %4.4f sec || lr: %.8f || Loss: %.4f' % (\n                        epoch, args.epochs, i + 1, len(self.train_loader),\n                        time.time() - start_time, cur_lr, loss.item()))\n\n            if self.args.no_val:\n                # save every epoch\n                save_checkpoint(self.model, self.args, is_best=False)\n            else:\n                self.validation(epoch)\n\n        save_checkpoint(self.model, self.args, is_best=False)</code></pre>\n<p>运行结果：</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\3a8b60d2706a4b14a23db60a2dfb04ca.png\"/></p>\n<p> 大功告成！</p>\n<h2 id=\"%E5%90%8E%E4%BC%A0\">后传</h2>\n<p style=\"text-align:justify;\">近期本人所在的某洛可可式实验室内开始了内卷这一不良风气，但由于我们研一的除了以K神、W神、H神为首的几位神明之外基本都是彩笔，不能内卷论文，于是大家纷纷开始效仿R神开始内卷CSDN。这篇文章一方面是记录一下自己的学习成果，另一方面也希望能给大伙提供一些小小的帮助。</p>\n</div>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-04-14 15:15:32", "summary": "目录是什么安装与注册登陆常用函数和具体使用方法后传是什么是的缩写，这是一个与类似的参数可视化平台。不过，相比较而言，更加的强大，主要体现在以下的几个方面：复现模型：更有利于复现模型。这是因为不仅记录指"}