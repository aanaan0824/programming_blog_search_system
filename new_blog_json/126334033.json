{"blogid": "126334033", "writerAge": "码龄160天", "writerBlogNum": "75", "writerCollect": "388", "writerComment": "34", "writerFan": "270", "writerGrade": "4级", "writerIntegral": "842", "writerName": "单纯的一比", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126334033.jpg", "writerRankTotal": "19963", "writerRankWeekly": "730", "writerThumb": "55", "writerVisitNum": "38542", "blog_read_count": "12843", "blog_time": "于 2022-08-14 17:29:47 发布", "blog_title": "MySQL数据库——SQL语言", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#MySQLSQL_1\">MySQL数据库——SQL语言</a></li><li><ul><li><a href=\"#_3\">前言</a></li><li><a href=\"#DDL_7\">一、数据定义语言（DDL）</a></li><li><a href=\"#DML_37\">二、数据操纵语言（DML）</a></li><li><a href=\"#TCL_53\">三、事务控制语言（TCL）</a></li><li><a href=\"#DQL_77\">四、数据查询语言（DQL）</a></li><li><ul><li><a href=\"#1selectfor__81\">1.select/for 基本查询语句</a></li><li><a href=\"#2_88\">2.给列起别名（临时）</a></li><li><a href=\"#3where_120\">3.where子句</a></li><li><a href=\"#4_Order_By_152\">4.排序查询 Order By子句</a></li><li><a href=\"#5Distinct_168\">5.Distinct去重</a></li><li><a href=\"#6_Group_By_180\">6.分组查询 Group By子句</a></li><li><a href=\"#7Having_209\">7.分组查询添加条件Having子句</a></li><li><a href=\"#8Exists_219\">8.Exists判断</a></li><li><a href=\"#9Limit_236\">9.Limit分页</a></li><li><a href=\"#9_246\">9.基本查询总结</a></li><li><a href=\"#10_256\">10.高级关联查询</a></li></ul>\n</li><li><a href=\"#DCL_284\">五、数据控制语言（DCL）</a></li><li><ul><li><a href=\"#1_288\">1.创建用户</a></li><li><a href=\"#2_296\">2.显示用户权限</a></li><li><a href=\"#3_302\">3.授权</a></li><li><a href=\"#4_319\">4.撤销权限</a></li><li><a href=\"#5_326\">5.删除用户</a></li></ul>\n</li><li><a href=\"#Mysql_333\">六、Mysql操作实例</a></li><li><ul><li><a href=\"#1_335\">1.创建表</a></li><li><a href=\"#2_367\">2.查看表结构</a></li><li><a href=\"#3_375\">3.插入数据</a></li><li><a href=\"#4_385\">4.数据查询</a></li><li><a href=\"#5_399\">5.修改表名</a></li><li><a href=\"#6_407\">6.增加字段</a></li><li><a href=\"#7_433\">7.删除字段</a></li><li><a href=\"#8_441\">8.修改字段</a></li><li><a href=\"#9_459\">9.删除表</a></li><li><a href=\"#10_467\">10.复制表结构</a></li><li><a href=\"#11_477\">11.操作表数据行</a></li></ul>\n</li><li><a href=\"#_516\">七、多表操作</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"MySQLSQL_1\"></a>MySQL数据库——SQL语言</h1>\n<h2><a id=\"_3\"></a>前言</h2>\n<p>结构化查询语言（Structured Query Language），简称SQL，是数据库的标准语言，可以通过DBMS对数据库进行定义数据，操纵数据，查询数据，数据控制等。</p>\n<h2><a id=\"DDL_7\"></a>一、数据定义语言（DDL）</h2>\n<p>• Data Dafinitaon Language</p>\n<p>• 如何创建表——<strong>create</strong></p>\n<p>• 删除表——<strong>drop</strong></p>\n<p>• 修改表——<strong>alter</strong></p>\n<p>• 清空表——<strong>truncate</strong>，彻底清空，无法找回</p>\n<pre><code class=\"prism language-mysql\">show databases;\t\t\t\t\t\t\t\t\t #查看所有数据库\nshow tables;\t\t\t\t\t\t\t\t\t #查看所有表\ndrop database 库名;\t\t\t\t\t\t\t\t#删除数据库\ncreate database 库名 default character set utf8;\t#创建数据库\nuse 库名;\t\t\t\t\t\t\t\t\t\t\t#选择数据库\ncreate table 表名(id int(3),name varchar(20));\t#创建表\ndesc 表名;\t\t\t\t\t\t\t\t\t\t#查看表\ninsert into 表名 values(1,'user1');\t\t\t\t#插入数据\nalter table 表名 add(age int(3));\t\t\t\t\t#添加表字段语句\nalter table 表名 drop id;\t\t\t\t\t\t\t#删除表字段语句\nalter table 表名 modify age varchar(2);\t\t\t#修改表字段类型格式\nalter table 表名 change age plage int(3);\t\t\t#修改表字段名称\nalter table 表名1 rename 新表名;\t\t\t\t\t  #修改表名\ntruncate table 表名;\t\t\t\t\t\t\t\t#清空表结构\ndrop table 表名;\t\t\t\t\t\t\t\t\t#删除表结构\n</code></pre>\n<h2><a id=\"DML_37\"></a>二、数据操纵语言（DML）</h2>\n<p>• <strong>insert</strong>：向表中插入数据</p>\n<p>• <strong>delete</strong>：删除表中数据，格式——<code>delete from 表名 [where 条件]</code></p>\n<p>• <strong>update</strong>:修改表中的数据，格式——<code>update 表名 set 字段1=值1[,字段2=值2] [where 条件]</code></p>\n<p>• <strong>where</strong>:对表中的数据增加条件限制，起到过滤的作用</p>\n<p>格式：where 字段名 关系运算符 值 [or|and 条件2]</p>\n<p>关系运算符：&gt;,&gt;=,&lt;,&lt;=,=,不等于!=或&lt;&gt;</p>\n<p>• <strong>null值操作</strong>：比较null时，不能使用=或者!=和&lt;&gt;，而是使用 is或者is not，在select子句中，使用关系运算符。</p>\n<h2><a id=\"TCL_53\"></a>三、事务控制语言（TCL）</h2>\n<p>事务控制语言(Transation Control Language)有时可能需要使用DML进行批量数据的删除、修改、增加。比如，在一个员工系统中，想删除一个人的信息，除了删除这个人的基本信息外，还应该删除与此人的其他信息，如邮箱、地址等，那么从开始执行到结束，就会构成一个事务，对于事物，要保证事务的完整性，要么成功，要么撤回。</p>\n<p>事务要符合四个条件（ACID）：</p>\n<p>1.<strong>原子性</strong>(Atomicity)：事务要么成功，要么撤回，不可切割性。</p>\n<p>2.<strong>一致性</strong>(Consistency)：事务开始前和结束后，要保证数据的一致性。转账前账号A和账号B的钱的总数为1000，转账后账号A和账号B的钱总数还是1000。</p>\n<p>3.<strong>隔离性</strong>(Isolation)：当涉及到多用户操作同一张表时，数据库会为每一个用户开启一个事务，那么当其中一个事务正在进行时，其他事务应该处于等待状态，保证食物之间不会受影响。</p>\n<p>4.<strong>持久性</strong>(Durability)：当一个事务被提交后，我们要保证数据库里的数据是永久改变的。即使数据库崩溃了，我们也要保证事务的完整性。</p>\n<pre><code>commit：提交\nrollback：撤回，回滚\nsavepoint：保存点\n</code></pre>\n<p>只有DML操作会触发一个事务。存储引擎（Engine）：就是指表类型，当存储引擎为innodb时，才会支持事务；Myisam引擎不支持事务。</p>\n<p>事务的验证：第一步：start transaction（交易）；第二步：savepoint 保存点名称；第三步：DML；第四步：commit/rollback。</p>\n<h2><a id=\"DQL_77\"></a>四、数据查询语言（DQL）</h2>\n<p>数据查询语言(Data Query Language)</p>\n<h3><a id=\"1selectfor__81\"></a>1.select/for 基本查询语句</h3>\n<pre><code>格式：select 子句 from 子句 \nselect 字段名[,字段名2……] from 表名;\n</code></pre>\n<h3><a id=\"2_88\"></a>2.给列起别名（临时）</h3>\n<pre><code>格式：select 列名1 as '要起的名' [,列名 as '要起的名',……] from 表名;\n例：select name as 'xingming',job as 'gongzuo' from test1;\n</code></pre>\n<p>as也可以用于克隆表，复制表。</p>\n<pre><code class=\"prism language-mysql\">create table 新表名 as (select * from 被克隆表名);\n</code></pre>\n<p>#将结果集做为一张表进行查询的时候，我们也需要用到别名，示例：</p>\n<p>需求：从info表中的id和name字段的内容做为\"内容\"输出id的部分</p>\n<p>mysql&gt;select id from (select id,name from info);</p>\n<p>ERROR 1248 (42000):Every derived table must have its own alias</p>\n<p>此时会报错，原因为：</p>\n<p>select * from表名，此为标准格式，而以上的查询语句，“表名\"的位置其实是一个完整结果集，mysql并不能直接识别，而此时给与结果集设置一个别名，以\"select a.id from a\"的方式查询将此结果集视为一张\"表”，就可以正常查询数据了，如下：</p>\n<pre><code class=\"prism language-mysql\">select a.id from (select id,name from info)a;\n相当于\nselect info.id,name from info;\nselect 表.字段，字段from表;\n</code></pre>\n<h3><a id=\"3where_120\"></a>3.where子句</h3>\n<p>作用：在增删改查时，起到条件限制的作用。</p>\n<p>多条件写法：in | not in （集合元素，使用逗号分开）;注意同一个字段有多个值的情况下使用。in相当于or，not in相当于and。</p>\n<p>all | any与集合连用，此时集合中的元素不能是固定的必须是从表中查询到的数据。</p>\n<p>范围查询：colname between val1 and val2——查询val1到val2范围中的数据。</p>\n<p>模糊查询：like；通配符：%表示0或0个以上的字符，_表示匹配一个字符；格式：colname like value。</p>\n<pre><code class=\"prism language-mysql\">#查询test表中部门号为1和2的员工编号，姓名，年龄\nselect id,name,age from test where deptid=1 or deptid=2;\n或select id,name,age from test were deptid in(1,2);\n\n#查询test表中部门号不是1和2的员工的所有信息\nselect * from test where deptid&lt;&gt;1 and deptid&lt;&gt;2;\n或select * from test where deptid not in (1,2);\n\n#查询年龄大于员工a,b,c三人的员工的信息(all|any与集合的连用)\nselect * from test where age&gt;all(select age from test where name in ('a','b','c'));\n\n#查询年龄在40到50范围之间的员工\nselect * from test where age between 40 and 50；\n\n#查询名字中有a和s的员工\nselect * from test where name like '%a%' and name like '%s%';\n或select * from test where name like '%a%s%' or name like '%s%a%';\n</code></pre>\n<h3><a id=\"4_Order_By_152\"></a>4.排序查询 Order By子句</h3>\n<p>当在查询表中数据时，记录比较多，有可能需要进行排序，此时使用order by子句。</p>\n<pre><code class=\"prism language-mysql\">语法：select 字段名 from 表名 [where 子句] [order by 子句]\n</code></pre>\n<p>注意：可以通过一个或多个字段排序，多字段的时候先执行左边的排序，当左边的排序结果一致时，再执行往右一个逗号的排序，以此类推。</p>\n<pre><code class=\"prism language-mysql\">order by 字段名 [ASC | DESC][,字段名2 [ASC | DESC]];\n</code></pre>\n<p>排序规则：ASC——升序；DESC——降序。如果不输入则默认是升序排序。</p>\n<h3><a id=\"5Distinct_168\"></a>5.Distinct去重</h3>\n<p>有的时候我们需要对重复的记录进行去重操作，比如，查询表中有哪些IP地址，此时一个IP地址只需要显示一条记录就够。</p>\n<p>位置：必须在select关键字后。</p>\n<pre><code class=\"prism language-mysql\">select distinct 字段名 from 表名\n#查test表中所有的名字并去重\nselect distinct name from test\n</code></pre>\n<h3><a id=\"6_Group_By_180\"></a>6.分组查询 Group By子句</h3>\n<p>分组查询与分组函数（聚合函数）：有的时候，我们可能需要查询表中的记录总数，或者查询表中每个部门的总工资，平均工资，总人数。这种情况需要对表中的数据进行分组统计，需要group by子句。</p>\n<pre><code class=\"prism language-mysql\">#位置\nselect …… from name [where 条件] [group by子句] [order by子句]\n#用法\ngroup by Field1[,Firld2]\n#注意：在分组查询时，select子句中的字段，除了聚合函数外，只能写分组字段。\n#例：求每个部门的平均工资\nselect bumen,avg(gongzi) as pingjungongzi from test group by bumen;\n\n</code></pre>\n<p><strong>聚合函数</strong>：</p>\n<p>1.count(Filed)：统计FIled字段的记录数。</p>\n<p>2.sum(Filed)：统计Filed字段的和。</p>\n<p>3.avg(Filed)：统计Filed字段的平均值。</p>\n<p>4.max(Filed)：统计Filed字段中的最大值。</p>\n<p>5.min(Filed)：统计Filed字段中的最小值。</p>\n<p>聚合函数会忽略null的值。因此有时候需要使用函数：ifnull（field，value）（如果field字段对应的值不是null，就使用field原来的值，如果是null，就使用value默认值）。</p>\n<h3><a id=\"7Having_209\"></a>7.分组查询添加条件Having子句</h3>\n<p>在分组查询时，有的时候可能需要再次使用条件进行过滤，这个时候不能where子句，应该使用having子句。having子句后面可以使用聚合函数。</p>\n<pre><code class=\"prism language-mysql\">#位置在group by之后\n#例：查询以员工平均年龄大于20的部门\nselect bumen,avg(age) as page from test group by bumen having avg(age)&gt;20;\n</code></pre>\n<h3><a id=\"8Exists_219\"></a>8.Exists判断</h3>\n<p>EXISTS这个关键字在查询时，主要用于判断子查询的结果集是否为空。如果不为空，则返回TRUE；反之，则返回FALSE</p>\n<pre><code class=\"prism language-mysql\">#查询如果存在分数等于80的记录则计算t1表中的字段数\nselect count(*) from t1 where exists(select id from t1 where score=80)；\n</code></pre>\n<p>成功则显示：</p>\n<p><img alt=\"image-20220812141506219\" src=\"..\\..\\static\\image\\82cd4f277e9d30e9152c096d13bf73ef.png\"/></p>\n<p>如果不成立中没有则显示：</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\157ac987a09c45cfce1881bfc65173fa.png\"/></p>\n<h3><a id=\"9Limit_236\"></a>9.Limit分页</h3>\n<pre><code>limit offset,size\n</code></pre>\n<p>offset表示：行数据索引；size表示：取多少条数据。即从sffset行开始，取size行数据。</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\59c2d4c5140326da33e6bb3b3cc88991.png\"/></p>\n<h3><a id=\"9_246\"></a>9.基本查询总结</h3>\n<p>基本的查询语句包含的子句有：select子句，from子句，group by子句，having子句，order by子句。一个完整的查询语句：</p>\n<pre><code class=\"prism language-mysql\">select … from … [where …][group by …][having …][order by…]\n</code></pre>\n<p>执行顺序：先执行from子句，再执行where子句，然后group by子句，再次having子句，之后是select子句，最后order by子句。</p>\n<h3><a id=\"10_256\"></a>10.高级关联查询</h3>\n<p>有的时候，查询的数据以简单的查询语句满足不了，并且使用的数据在表中不能直观体现出来，而是需要预先经过一次查询才会有所体现。子查询嵌入到的查询语句称之为父查询。</p>\n<p>子查询返回的数据特点：</p>\n<p>1.可能是单行单列的数据</p>\n<p>2.可能是多行单列的数据</p>\n<p>3.可能是单行多列的数据</p>\n<p>4.可能是多行多列的数据</p>\n<p>子查询可以在where、from、having、select子句中，在select子句中时相当于外连接的另外一种写法。</p>\n<p>子查询也被称作内查询或者嵌套查询，是指在一个查询语句里面还嵌套着另一个查询语句。子查询语句是先于主查询语句被执行的，其结果作为外层的条件返回给主查询进行下一步的查询过滤。</p>\n<p>PS:子语句可以与主语句所查询的表相同，也可以是不同表</p>\n<pre><code class=\"prism language-mysql\">#查询表中各部门人员中年龄大于平均值的人\nselect name，age，a.bumen,b.page from test a,\n(select id,avg(ifnull(age,0)) as av from test group by id) b\nwhere a.id=b.id and a.age&gt;b.page\norder by id ASC;\n</code></pre>\n<h2><a id=\"DCL_284\"></a>五、数据控制语言（DCL）</h2>\n<p>数据控制语言Data Control Language，作用是用来创建用户，给用户授权，撤销权限，删除用户。</p>\n<h3><a id=\"1_288\"></a>1.创建用户</h3>\n<pre><code class=\"prism language-mysql\">create user '用户名'@'ip' identified by 新密码;\n例：\ncreate user 'user1'@'192.168.1.1' identified by '111';\n</code></pre>\n<h3><a id=\"2_296\"></a>2.显示用户权限</h3>\n<pre><code class=\"prism language-mysql\">show grants for '用户名'@'ip';\n</code></pre>\n<h3><a id=\"3_302\"></a>3.授权</h3>\n<pre><code class=\"prism language-mysql\">grant 权限1，权限2… on 库名.* to '用户名'@'ip';\n例：\ngrant select,drop,insert on test.* to 'user1'@'192.168.1.%';\n#192.168.1.%——整个网段\n</code></pre>\n<p>DML权限：insert，delete，update</p>\n<p>DQL权限：select</p>\n<p>DDL权限：create，alter，drop…</p>\n<p>（8.0版本不能直接通过授权的方式创建用户）</p>\n<h3><a id=\"4_319\"></a>4.撤销权限</h3>\n<pre><code class=\"prism language-mysql\">revoke 权限1，权限2…… on 库名.* from 用户名@ip;\nrevoke drop on test.* from user1@192.168.222.%;\n</code></pre>\n<h3><a id=\"5_326\"></a>5.删除用户</h3>\n<pre><code class=\"prism language-mysql\">drop user 用户名@ip/主机名;\t#删除用户一定要加ip/主机名\nflush privileges;\t\t\t#刷新\n</code></pre>\n<h2><a id=\"Mysql_333\"></a>六、Mysql操作实例</h2>\n<h3><a id=\"1_335\"></a>1.创建表</h3>\n<p><strong>语法</strong></p>\n<pre><code class=\"prism language-mysql\">create table 表名(\n\t字段名 列类型 [可选的参数],\t#记住加逗号\n\t字段名 列类型 [可选的参数],\t#记住加逗号\n\t字段名 列类型 [可选的参数],\t#最后一行不加逗号\n)charset=utf8;\t\t\t\t   #后面加分号\n</code></pre>\n<p><strong>列约束</strong></p>\n<p>• auto_increment：自增 1，注入数据的时候不输入值的话自动增加1</p>\n<p>• primary key：主键索引，加快查询速度，列的值不能重复</p>\n<p>• not null：标识该字段不能为空</p>\n<p>• default：为该字段设置默认值</p>\n<p><strong>实例</strong></p>\n<pre><code class=\"prism language-mysql\">mysql&gt; create table test(\t\t \t\t#创建test表\nid int(2) auto_increment primary key,\t#id值为整数，主键，自增1，不超过2个字节\nname char(5) not null,\t\t\t\t\t#名字不为空\nage varchar(3) not null default''\t\t#年龄不为空，不输入则填入默认值\n);\n</code></pre>\n<h3><a id=\"2_367\"></a>2.查看表结构</h3>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\d748475fbaccddd00ba29c791d13b242.png\"/></p>\n<p>此时的表数据为空：</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\1a08da5ecba5cd0dd0d6ab9d115acd5c.png\"/></p>\n<h3><a id=\"3_375\"></a>3.插入数据</h3>\n<p><strong>语法</strong></p>\n<pre><code>insert into 表名 (列1,列2) values (值1,'值2');\n</code></pre>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\cdb3ca09151b2e141befa87453c7fd48.png\"/></p>\n<h3><a id=\"4_385\"></a>4.数据查询</h3>\n<p>此时我们再查看表发现已经有数据了：</p>\n<pre><code class=\"prism language-mysql\">select 列1,列2（*代表所有） from 表名；\n</code></pre>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\f7fafcd4b36853d98b562106b297325a.png\"/></p>\n<p>我们可以对表中数据进行查询，比如查看年龄小于80岁的姓名：</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\b74a1104968adedbacb8d24168422e9a.png\"/></p>\n<h3><a id=\"5_399\"></a>5.修改表名</h3>\n<pre><code>alter table 旧表名 rename 新表名;\n</code></pre>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\725895adc7e712b47f2babd60e2f89a5.png\"/></p>\n<h3><a id=\"6_407\"></a>6.增加字段</h3>\n<p><strong>添加到末尾</strong></p>\n<pre><code class=\"prism language-mysql\">alter table 表名 add 字段名1 列类型 [可选参数],add 字段名2 列类型 [可选参数];\n</code></pre>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\893e46badb1abf7bee9651e6e0f0fc04.png\"/></p>\n<p><strong>添加到开头</strong></p>\n<pre><code class=\"prism language-mysql\">alter table 表名 add 字段名 列类型 [可选参数] first;\n</code></pre>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\3870ba718cea4ee820bb356ce11f21c0.png\"/></p>\n<p><strong>添加到指定字段后面</strong></p>\n<pre><code class=\"prism language-mysql\">alter table 表名 add 字段名 列类型 [可选参数] after 指定字段名;\n</code></pre>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\c04211f317da8927b63bb67adcccc08d.png\"/></p>\n<h3><a id=\"7_433\"></a>7.删除字段</h3>\n<pre><code class=\"prism language-mysql\">alter table 表名 drop 字段名;\n</code></pre>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\f96d6fb1b2355145694ef250ca1a788c.png\"/></p>\n<h3><a id=\"8_441\"></a>8.修改字段</h3>\n<p><strong>修改字段类型格式</strong></p>\n<pre><code class=\"prism language-mysql\">alter table 表名 modify 字段名 数据类型 [完整性的约束条件..];\n</code></pre>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\094c0791ea9d41e005e2c0ff58105f53.png\"/></p>\n<p><strong>修改字段名</strong></p>\n<pre><code class=\"prism language-mysql\">alter table 表名 change 旧字段名 新字段名 数据类型 [完整性的约束条件..];\n</code></pre>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\340d4d84c9b189c56aecd83e113a5467.png\"/></p>\n<h3><a id=\"9_459\"></a>9.删除表</h3>\n<pre><code class=\"prism language-mysql\">drop table 表名;\n</code></pre>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\1db55d224b5700abe26c24ba86a73c74.png\"/></p>\n<h3><a id=\"10_467\"></a>10.复制表结构</h3>\n<pre><code class=\"prism language-mysql\">create table 新表名 like 被复制的表名;\n</code></pre>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\7bf8021692a22423aa1f845fe2c55d63.png\"/></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\fe011eb0347b1852018db7d6387e579c.png\"/></p>\n<h3><a id=\"11_477\"></a>11.操作表数据行</h3>\n<p><strong>增加数据</strong></p>\n<pre><code class=\"prism language-mysql\">insert into 表名 (列1,列2) values (值1,'值2')\n</code></pre>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\249ffd91cb3adf46d9cbba399bd00282.png\"/></p>\n<pre><code class=\"prism language-mysql\">#暴力复制\ninsert into 被添加数据的表名 (字段) select 字段 from 被复制的表名;\n</code></pre>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\5adb2b1bac4805e5095702cfb47978a9.png\"/></p>\n<p><strong>删除数据</strong></p>\n<pre><code class=\"prism language-mysql\">delete from 表名 where 字段名[条件]\n</code></pre>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\da497f24c06e9ae701be38c3e8999e47.png\"/></p>\n<pre><code class=\"prism language-mysql\">truncate 表名;\n</code></pre>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\8d342470469940adf8b3fc8651e74633.png\"/></p>\n<p>delete与truncate删除的区别：</p>\n<p>delete之后，插入的数据从上一次主键自增加1开始，truncae则是从1开始。</p>\n<p>delete删除，是一行一行的删除，truncate是全选删除之后再重新创建结构属性一致的表。</p>\n<p>所以truncate删除的速度是高于delete的，truncate删除的数据无法恢复。</p>\n<h2><a id=\"_516\"></a>七、多表操作</h2>\n<p><strong>概念</strong>：上述的操作中，基本都是在单表中进行操作，那当在查询时，所需要的数据不在一张表中，可能在两张或多张表中。此时需要同时操作这些表，即关联查询。</p>\n<p><strong>等值连接</strong>：在做多张表查询时，这些表中应该存在着有关联的两个字段，使用某一张表中的一条记录与另外一张表通过相关联的两个字段进行匹配，组合成一条记录。</p>\n<p><strong>笛卡尔积</strong>：在做多张表查询时，使用某一张表中的每一条记录都与另外一张表的所有记录进行组合。比如A表有x条，B表有y条，最终组合数为x*y，这个值就是笛卡尔积，通常没有意义。</p>\n<p><strong>内连接</strong>：只要使用了join on，就是内连接，查询效果与等值连接一样。</p>\n<pre><code class=\"prism language-mysql\">用法：\nselect 字段n from 表A inner join 表B on 关联条件\n或\nselect 字段n from 表A，表B where 关联条件\n</code></pre>\n<p><strong>外连接</strong>：在做多张表查询时，所需要的数据，除了满足关联条件的数据外，还有不满足关联条件的数据，此时需要使用外连接。</p>\n<p>1.驱动表（主表）：除了显示满足条件的数据，还需要显示不满足条件的数据的表。</p>\n<p>2.从表（副表）：只显示满足关联条件的数据的表。</p>\n<p>3.外连接分为三种：</p>\n<table><thead><tr><th>种类</th><th>指令</th><th>含义</th></tr></thead><tbody><tr><td>左外连接</td><td>表A left [outer] join 表B on 关联条件</td><td>表A是驱动表，表B是从表</td></tr><tr><td>右外连接</td><td>表A rihgt [outer] join 表B on 关联条件</td><td>表B是驱动表，表A是从表</td></tr><tr><td>全外连接</td><td>表A full [outer] join 表B on 关联条件</td><td>两张表数据不管满不满足条件都显示</td></tr></tbody></table>\n<p><strong>自连接</strong>：是内连接查询中一种特殊的等值连接，所谓的自连接就是指表与其自己当前表进行连接。自己和自己做连接。</p>\n<p><strong>外键</strong>：MySQL中“键”和“索引”的定义相同，所以外键和主键一样也是索引的一种。不同的是MySQL会自动为所有表的主键进行索引，但是外键字段必须由用户进行明确的索引。用于外键关系的字段必须在所有的参照表中进行明确地索引，InnoDB不能自动地创建索引。</p>\n<p>使用条件：</p>\n<p>① 两个表必须是InnoDB表，MyISAM表暂时不支持外键。</p>\n<p>② 外键关系的两个表的列必须是数据类型相似，也就是可以相互转换类型的列，比如int和tinyint可以，而int和char则不可以。</p>\n<p>外键可以是一对一的，一个表的记录只能与另一个表的一条记录连接，或者是一对多的，一个表的记录与另一个表的多条记录连接。例：</p>\n<p>1.一对多，外键约束</p>\n<pre><code class=\"prism language-mysql\">constraint 自定义外键名 foreign key (被约束的字段) references 约束的表(约束的字段)\n#可以在 create 和 alter 时使用，如果不指定constraint 外键名，MYSQL会自动生成一个名字\n\n</code></pre>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\81cac0ec51d652a44a1aa70787723857.png\"/></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\a4f1b6df4d7eb3ae09fbf499d4c0bc8b.png\"/></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\1e5b748575f78def6a9886ccdccf99f9.png\"/></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\267e06bda6e6e485b570ccdf154e8587.png\"/></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\e439b55a8ad472ef6257dbf3a0ce8f11.png\"/></p>\n<p>2.多对多</p>\n<p>例：先创建一个男生表一个女生表，在进行左链接查询</p>\n<pre><code class=\"prism language-mysql\">#创建男生表，并插入数据\nmysql&gt; create table boy (id int auto_increment primary key,bname varchar(5) not null default '');\nmysql&gt; insert into boy (bname) values('jim'),('jack'),('tom');\n#创建女生表，并插入数据\nmysql&gt; create table girl (id int auto_increment primary key,gname varchar(5) not null default '');\nmysql&gt; insert into girl values (1,'May'),(2,'Jessice'),(3,'Monice');\n#创建关联表，并插入数据\nmysql&gt; create table class(id int auto_increment primary key,boyid int not null default '1',girlid int not null default '0',constraint fk_class_boy foreign key (boyid) references boy(id),constraint fk_class_girl foreign key (girlid) references girl(id));\nmysql&gt; insert into class(boyid,girlid) values (1,1),(1,2),(2,3),(3,3),(2,2);\n#用left join左连接查询\nmysql&gt; select * from boy left join class on boy.id=class.boyid left join girl on girl.id=class.girlid;\n\n</code></pre>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\3c62a943b70f9a3c46d943060da741ac.png\"/></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\6f33c8ac283d832e74bab98d28c97c8d.png\"/></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\1b79d220163483c2d16affd0d71f4fa5.png\"/></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\a0d21a986fceff34be641af6bd41bc1e.png\"/></p>\n<p>外键的好处：可以使得两张表关联，保证数据的一致性和实现一些级联操作。保持数据一致性，完整性，主要目的是控制存储在外键表中的数据。 使两张表形成关联，外键只能引用外表中的列的值！可以使得两张表关联，保证数据的一致性和实现一些级联操作。</p>\n<p><strong>END</strong></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2022-08-14 17:29:47", "summary": "文章目录数据库语言前言一、数据定义语言二、数据操纵语言三、事务控制语言四、数据查询语言基本查询语句给列起别名临时子句排序查询子句去重分组查询子句分组查询添加条件子句判断分页基本查询总结高级关联查询五、"}