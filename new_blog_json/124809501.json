{"blogid": "124809501", "writerAge": "码龄1年", "writerBlogNum": "204", "writerCollect": "867", "writerComment": "387", "writerFan": "17313", "writerGrade": "5级", "writerIntegral": "2904", "writerName": "燕穗子博客", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124809501.jpg", "writerRankTotal": "8411", "writerRankWeekly": "508", "writerThumb": "568", "writerVisitNum": "192385", "blog_read_count": "4379", "blog_time": "已于 2022-06-01 22:13:29 修改", "blog_title": "vue是什么？vue的优点有哪些？", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"-toc\" style=\"margin-left:0px;\"></p>\n<p id=\"%E4%B8%80%E3%80%81vue%E6%98%AF%E4%BB%80%E4%B9%88-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81vue%E6%98%AF%E4%BB%80%E4%B9%88\">一、vue是什么</a></p>\n<p id=\"%E4%BA%8C%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8Vue%EF%BC%9F-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8Vue%EF%BC%9F\">二、为什么要用Vue？</a></p>\n<p id=\"1.%20%E7%BB%84%E4%BB%B6%E5%8C%96-toc\" style=\"margin-left:40px;\"><a href=\"#1.%20%E7%BB%84%E4%BB%B6%E5%8C%96\">1. 组件化</a></p>\n<p id=\"2.%20MVVM%20%E6%95%B0%E6%8D%AE%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A-toc\" style=\"margin-left:40px;\"><a href=\"#2.%20MVVM%20%E6%95%B0%E6%8D%AE%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A\">2. MVVM 数据双向绑定</a></p>\n<p id=\"3.%20%E5%93%8D%E5%BA%94%E5%BC%8F%20%E8%99%9A%E6%8B%9FDOM-toc\" style=\"margin-left:40px;\"><a href=\"#3.%20%E5%93%8D%E5%BA%94%E5%BC%8F%20%E8%99%9A%E6%8B%9FDOM\">3. 响应式 虚拟DOM</a></p>\n<p id=\"4.%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-toc\" style=\"margin-left:40px;\"><a href=\"#4.%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\">4.生命周期</a></p>\n<p id=\"%E4%B8%89%E3%80%81Vue%E7%9A%84%E4%BC%98%E7%82%B9%C2%A0-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%89%E3%80%81Vue%E7%9A%84%E4%BC%98%E7%82%B9%C2%A0\">三、Vue的优点 </a></p>\n<p id=\"1.%20%E8%BD%BB%E9%87%8F%E7%BA%A7-toc\" style=\"margin-left:40px;\"><a href=\"#1.%20%E8%BD%BB%E9%87%8F%E7%BA%A7\">1. 轻量级</a></p>\n<p id=\"2.%20%E9%AB%98%E6%80%A7%E8%83%BD-toc\" style=\"margin-left:40px;\"><a href=\"#2.%20%E9%AB%98%E6%80%A7%E8%83%BD\">2. 高性能</a></p>\n<p id=\"3.%20%E5%A5%BD%E4%B8%8A%E6%89%8B-toc\" style=\"margin-left:40px;\"><a href=\"#3.%20%E5%A5%BD%E4%B8%8A%E6%89%8B\">3. 好上手</a></p>\n<p id=\"4.%20%E6%8F%92%E4%BB%B6%E5%8C%96-toc\" style=\"margin-left:40px;\"><a href=\"#4.%20%E6%8F%92%E4%BB%B6%E5%8C%96\">4. 插件化</a></p>\n<p id=\"5.%20%E4%BE%BF%E4%BA%8E%E6%B5%8B%E8%AF%95-toc\" style=\"margin-left:40px;\"><a href=\"#5.%20%E4%BE%BF%E4%BA%8E%E6%B5%8B%E8%AF%95\">5. 便于测试</a></p>\n<p id=\"6.%E8%BF%90%E8%A1%8C%E9%80%9F%E5%BA%A6%E6%9B%B4%E5%BF%AB-toc\" style=\"margin-left:40px;\"><a href=\"#6.%E8%BF%90%E8%A1%8C%E9%80%9F%E5%BA%A6%E6%9B%B4%E5%BF%AB\">6.运行速度更快</a></p>\n<p id=\"7.%E8%A7%86%E5%9B%BE%2C%E6%95%B0%E6%8D%AE%2C%E7%BB%93%E6%9E%84%E5%88%86%E7%A6%BB-toc\" style=\"margin-left:40px;\"><a href=\"#7.%E8%A7%86%E5%9B%BE%2C%E6%95%B0%E6%8D%AE%2C%E7%BB%93%E6%9E%84%E5%88%86%E7%A6%BB\">7.视图,数据,结构分离</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 id=\"%E4%B8%80%E3%80%81vue%E6%98%AF%E4%BB%80%E4%B9%88\">一、vue是什么</h1>\n<blockquote>\n<p>Vue是一套用于构建用户界面的<strong>渐进式</strong>JavaScript框架</p>\n</blockquote>\n<p> vue就是一个js库，并且无依赖别的js库，直接引入一个js文件就可以使用，与传统JS和<a href=\"https://so.csdn.net/so/search?q=JQuery&amp;spm=1001.2101.3001.7020\" title=\"JQuery\">JQuery</a>框架不同，Vue的<strong>渐进式框架</strong>表示开发者可以由简单组件写起，渐渐搭建出一个复杂的前端平台。<br/> 形成Vue渐进式框架的核心概念为：<strong>组件化</strong>，<strong>MVVM</strong>，<strong>响应式</strong>，和<strong>生命周期</strong>。<br/> `Vue一切是数据为核心，使用数据来驱动视图刷新，我们不建议去操作dom`</p>\n<h1 id=\"%E4%BA%8C%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8Vue%EF%BC%9F\">二、为什么要用Vue？</h1>\n<h2 id=\"1.%20%E7%BB%84%E4%BB%B6%E5%8C%96\">1. 组件化</h2>\n<p>        Vue将组成一个页面的<strong>HTML，CSS和JS</strong>合并到一个组件中，可以被其他组件或页面引入而<strong>重复利用</strong>。通常每个.Vue文件作为一个组件导出，组件可以作为基础组件（如按钮）或一个页面（如登录页面）。组件化很好的将一个庞大复杂的前端工程拆分为一个个组件，重复利用的性质也大大提高了开发的效率。</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n\t&lt;div class=\"demo\"&gt;\n\t\t&lt;h2&gt;学校名称：{<!-- -->{name}}&lt;/h2&gt;\n\t\t&lt;button @click=\"showName\"&gt;点我提示学校名&lt;/button&gt;\t\n\t&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n\t export default {\n\t\tname:'School',\n\t\tdata(){\n\t\t\treturn {\n\t\t\t\tname:'bdqn',\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\tshowName(){\n\t\t\t\talert(this.name)\n\t\t\t}\n\t\t},\n\t}\n&lt;/script&gt;\n\n&lt;style&gt;\n\t.demo{\n\t\tbackground-color: orange;\n\t}\n&lt;/style&gt;</code></pre>\n<h2 id=\"2.%20MVVM%20%E6%95%B0%E6%8D%AE%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A\">2. MVVM 数据双向绑定</h2>\n<p>        MVVM模式（全称为Model-View-ViewModel）为Vue实现数据双向绑定。</p>\n<p>        在MVVM中，View为视图层，ViewModel为业务逻辑层，Model为数据层。</p>\n<p> 什么是数据双向绑定呢？</p>\n<p>当用户使View变化时（如填写表单），变化会自动同步到ViewModel处理相应逻辑，并将变化更新到Model数据库。</p>\n<p>反之，若服务端数据变化（如股价波动），变化会自动同步到ViewModel处理相应逻辑，并将变化同步到View展现给用户。</p>\n<p>在用Vue之前，完成HTML和JS之间的交互需要使用大量的DOM操作来实现动态加载。</p>\n<p>MVVM的数据双向绑定减少了DOM操作，更高效地实现了视图和数据的交互。同时，MVVM使界面、交互和数据层分离，便于设计人员负责设计界面，后端开发人员提供数据接口，而前端开发人员专注于业务交互逻辑的实现。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\d06e8fdc85224529a50578720448214d.png\"/><br/>  </p>\n<h2 id=\"3.%20%E5%93%8D%E5%BA%94%E5%BC%8F%20%E8%99%9A%E6%8B%9FDOM\">3. 响应式 虚拟DOM</h2>\n<p>        对于DOM来说，当HTML的一个元素（如div）需要响应数据更改时，会刷新整个页面，导致效率堪忧。</p>\n<p>对于虚拟DOM，浏览器会将HTML文件转换为JS文件并复制<strong>一个额外使用（虚拟）</strong>。对于任何更改，虚拟DOM都将复制的JS与原始JS进行比较，只重新加载更改的部分，<strong>局部修改到真实DOM上。</strong></p>\n<p>在Vue中，每个绑定data属性的组件都有一个Watcher检测data属性的变化。一旦检测到改变，则重新渲染该组件，这就是响应式。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\53ab906dc95848f4a510fb2ad685d051.png\"/><br/>  </p>\n<h2 id=\"4.%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\">4.生命周期</h2>\n<p>最后，每个Vue组件都有生命周期，过程为<strong>创建 -&gt; 挂载 -&gt; 更新 -&gt; 销毁</strong>。开发者可以通过<strong>钩子函数</strong>（如mounted）在组件生命周期中的不同时刻进行操作。下面是一张Vue生命周期的完整图解。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\d598ac420b5d4908b54177bed931af8d.png\"/></p>\n<h1 id=\"%E4%B8%89%E3%80%81Vue%E7%9A%84%E4%BC%98%E7%82%B9%C2%A0\">三、Vue的优点 </h1>\n<h2 id=\"1.%20%E8%BD%BB%E9%87%8F%E7%BA%A7\">1. 轻量级</h2>\n<p>Vue作为一款轻量级前端框架，大小只有18–21KB，工程搭建简单，只需要几行命令符。因为Vue使用的主体语言为JS，开发者可以灵活地将其他框架（如React和Angular）的项目迁移到Vue，具有很高的集成能力。Vue提供的router路由可以便捷地搭建一个多界面应用。</p>\n<h2 id=\"2.%20%E9%AB%98%E6%80%A7%E8%83%BD\">2. 高性能</h2>\n<p>虚拟DOM和响应式避免了不必要的全局重新渲染，提升了用户体验，使用户操作更加流畅。</p>\n<h2 id=\"3.%20%E5%A5%BD%E4%B8%8A%E6%89%8B\">3. 好上手</h2>\n<p>与面向对象编程性质类似，组件化更符合人类思维。打个比方，我们在设计网页时，通常会把一个界面分成一块一块的、用于某功能的特定样式模块。Vue的组件化使前端开发更加容易理解，同时MVVM可以更便捷地实现交互，对新手十分友好。</p>\n<h2 id=\"4.%20%E6%8F%92%E4%BB%B6%E5%8C%96\">4. 插件化</h2>\n<p>由于Vue框架的流行性，目前有许多基于Vue的npm扩展包和开发工具（如Vuex）。Vue可以在一个文件下统一管理所有外部插件的全局使用。</p>\n<h2 id=\"5.%20%E4%BE%BF%E4%BA%8E%E6%B5%8B%E8%AF%95\">5. 便于测试</h2>\n<p>组件化利于开发者对于单一组件进行测试，很少发生在整个页面下找不到是哪个地方报错的情况。</p>\n<h2 id=\"6.%E8%BF%90%E8%A1%8C%E9%80%9F%E5%BA%A6%E6%9B%B4%E5%BF%AB\">6.运行速度更快</h2>\n<p>像比较与react而言,同样都是操作虚拟dom,就性能而言,vue存在很大的优势</p>\n<h2 id=\"7.%E8%A7%86%E5%9B%BE%2C%E6%95%B0%E6%8D%AE%2C%E7%BB%93%E6%9E%84%E5%88%86%E7%A6%BB\">7.视图,数据,结构分离</h2>\n<p>使数据的更改更为简单,不需要进行逻辑代码的修改,只需要操作数据就能完成相关操作</p>\n<p></p>\n</div>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-06-01 22:13:29", "summary": "目录一、是什么二、为什么要用？组件化数据双向绑定响应式虚拟生命周期三、的优点轻量级高性能好上手插件化便于测试运行速度更快视图数据结构分离一、是什么是一套用于构建用户界面的渐进式框架就是一个库，并且无依"}