{"blogid": "123359959", "writerAge": "码龄2年", "writerBlogNum": "109", "writerCollect": "1544", "writerComment": "179", "writerFan": "1113", "writerGrade": "5级", "writerIntegral": "2045", "writerName": "秃头披风侠.", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123359959.jpg", "writerRankTotal": "11826", "writerRankWeekly": "25433", "writerThumb": "697", "writerVisitNum": "177069", "blog_read_count": "21873", "blog_time": "已于 2022-03-08 20:30:15 修改", "blog_title": "cookie是什么？有什么用？cookie详解，一篇文章彻底搞懂cookie", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h2>Cookie是什么</h2>\n<p>        cookie的中文翻译是曲奇，小甜饼的意思。cookie其实就是一些数据信息，类型为“<strong>小型文本文件</strong>”，存储于电脑上的文本文件中。</p>\n<hr/>\n<h2>Cookie有什么用</h2>\n<p>        我们想象一个场景，当我们打开一个网站时，如果这个网站我们曾经登录过，那么当我们再次打开网站时，发现就不需要再次登录了，而是直接进入了首页。例如bilibili，csdn等网站。</p>\n<p>        这是怎么做到的呢？其实就是游览器保存了我们的cookie，里面记录了一些信息，当然，这些cookie是服务器创建后返回给游览器的。游览器只进行了保存。下面展示bilibili网站保存的cookie。</p>\n<p><img alt=\"\" height=\"811\" src=\"..\\..\\static\\image\\c935d116e49344f6a9e4ef9a97982247.png\" width=\"1200\"/></p>\n<hr/>\n<h2>Cookie的表示 </h2>\n<p>        一般情况下，cookie是以键值对进行表示的(key-value)，例如name=jack，这个就表示cookie的名字是name，cookie携带的值是jack。</p>\n<hr/>\n<h2>Cookie的组成</h2>\n<p>        下面我自己写了一个简易Servlet来设置cookie，我们游览器抓包进行查看。然后进行分析</p>\n<p><img alt=\"\" height=\"662\" src=\"..\\..\\static\\image\\6635770f0959461d937263dcba0d4edc.png\" width=\"1200\"/></p>\n<p>         以下是cookie中常用属性的解释。</p>\n<ul><li>Name：这个是cookie的名字</li><li>Value：这个是cooke的值</li><li>Path：这个定义了Web站点上可以访问该Cookie的目录</li><li>Expires：这个值表示cookie的过期时间，也就是有效值，cookie在这个值之前都有效。</li><li>Size：这个表示cookie的大小</li></ul>\n<p>        想要完全了解所有cookie属性，请参考<a class=\"link-info\" href=\"https://baike.baidu.com/item/cookie/1119#reference-%5B3%5D-5062332-wrap\" title=\"百度知道：cookie\">百度知道：cookie</a></p>\n<hr/>\n<h2>Cookie的HTTP传输</h2>\n<p>        我们还是通过抓包进行查看。首先查看cookie在HTTP请求中是怎样进行表示的。</p>\n<p><span style=\"color:#fe2c24;\"><strong>HTTP请求</strong></span></p>\n<p><img alt=\"\" height=\"432\" src=\"..\\..\\static\\image\\046cfd41d5b34376a8bd48a6241a8ed4.png\" width=\"1200\"/></p>\n<blockquote>\n<p>        我们在发送HTTP请求时，发现游览器将我们的cookie都进行了携带<strong>(注意：游览器只会携带在当前请求的url中包含了该cookie中path值的cookie)</strong>，并且是以key：value的形式进行表示的。多个cookie用；进行隔开。 </p>\n</blockquote>\n<p>        我们再来查看cookie在HTTP响应中是如何进行表示的。</p>\n<p><span style=\"color:#fe2c24;\"><strong>HTTP响应</strong></span></p>\n<p><img alt=\"\" height=\"515\" src=\"..\\..\\static\\image\\09f69d7f814242a580f70c2ba4ade8d6.png\" width=\"1200\"/></p>\n<blockquote>\n<p>        我在服务器设置了2个cookie，返回给游览器。通过抓包，我们发现在HTTP响应中， cookie的表示形式是，Set-Cookie：cookie的名字，cookie的值。如果有多个cookie，那么在HTTP响应中就使用多个Set-Cookie进行表示。</p>\n</blockquote>\n<hr/>\n<h2>Cookie的生命周期</h2>\n<p>        cookie有2种存储方式，一种是会话性，一种是持久性。</p>\n<ul><li>会话性：如果cookie为会话性，那么cookie仅会保存在客户端的内存中，当我们关闭客服端时cookie也就失效了</li><li>持久性：如果cookie为持久性，那么cookie会保存在用户的硬盘中，直至生存期结束或者用户主动将其销毁。</li></ul>\n<p>        cookie我们是可以进行设置的，我们可以人为设置cookie的有效时间，什么时候创建，什么时候销毁。</p>\n<hr/>\n<h2>Cookie使用的常见方法</h2>\n<blockquote>\n<p>        下面，我对java中Cookie对象的方法进行讲解</p>\n</blockquote>\n<ul><li>new Cookie(String name, String value)：创建一个Cookie对象，必须传入cookie的名字和cookie的值</li><li>getValue()：得到cookie保存的值</li><li>getName()：获取cookie的名字</li><li>setMaxAge(int expiry)：设置cookie的有效期，默认为-1。这个如果设置负数，表示客服端关闭，cookie就会删除。0表示马上删除。正数表示有效时间，单位是秒。</li><li>setPath(String uri)：设置cookie的作用域</li></ul>\n<blockquote>\n<p>        HttpServletRequest和HttpServletResponse对Cookie进行操作的常见方法</p>\n</blockquote>\n<ul><li>response.addCookie(Cookie cookie)：将cookie给客户端进行保存</li><li>resquest.getCookies()：得到客服端传过来的所有cookie对象</li></ul>\n<hr/>\n<h2>Cookie应用实例</h2>\n<p>        我们使用cookie来实现一个功能，就是当用户登录成功后，我们在下次登录时就自动填入用户名和密码。这个功能我们使用cookie和jsp页面来完成(用html页面也可以，只不过要使用javascript，有点麻烦，所以就使用jsp进行演示)</p>\n<blockquote>\n<p>        我们首先写一个简单的jsp页面，就是一个登录页面</p>\n</blockquote>\n<p>      <span style=\"color:#fe2c24;\"><strong>  JSP页面</strong></span></p>\n<pre><code class=\"language-html\">&lt;%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" isELIgnored=\"false\" %&gt;\n\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;登录&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n  &lt;form action=\"${pageContext.request.contextPath}/main\" method=\"post\"&gt;\n    用户名：&lt;input type=\"text\" name=\"username\" value=\"&lt;%=request.getAttribute(\"username\")%&gt;\"&gt;&lt;br/&gt;\n    密　码：&lt;input type=\"password\" name=\"password\" value=\"&lt;%=request.getAttribute(\"password\")%&gt;\"&gt;&lt;br/&gt;\n    &lt;input type=\"submit\" value=\"登录\"&gt;\n  &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p><span style=\"color:#fe2c24;\"><strong>请求转发页面，我们是通过访问Servlet转发到jsp页面的，而不是直接访问。</strong></span></p>\n<pre><code class=\"language-java\">import javax.servlet.*;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.*;\nimport java.io.IOException;\n\n@WebServlet(\"/cookieLogin\")\npublic class CookieLogin extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        //设置默认值\n        request.setAttribute(\"username\",\"\");\n        request.setAttribute(\"password\",\"\");\n        //得到所有cookie\n        Cookie[] cookies = request.getCookies();\n        //对所有cookie进行遍历\n        for (Cookie cookie : cookies) {\n            //得到存储用户名和密码的cookie并且存入request域中\n            if (\"username\".equals(cookie.getName())){\n                String value = cookie.getValue();\n                request.setAttribute(\"username\",value);\n            }\n            if(\"password\".equals(cookie.getName())){\n                String value = cookie.getValue();\n                request.setAttribute(\"password\",value);\n            }\n        }\n        //转发到login.jsp页面\n        request.getRequestDispatcher(\"/login.jsp\").forward(request,response);\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        this.doGet(request, response);\n    }\n}\n</code></pre>\n<p><span style=\"color:#fe2c24;\"><strong>登录成功后的首页</strong></span></p>\n<pre><code class=\"language-java\">import javax.servlet.*;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.*;\nimport java.io.IOException;\n\n@WebServlet(\"/main\")\npublic class MainServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        //设置响应类型\n        response.setContentType(\"text/html;charset=utf-8\");\n        //得到用户名和密码\n        String username = request.getParameter(\"username\");\n        String password = request.getParameter(\"password\");\n        //判断是否登录成功\n        if (\"root\".equals(username) &amp;&amp; \"root\".equals(password)) {\n            //编写cookie\n            Cookie usernameCookie = new Cookie(\"username\", username);\n            Cookie passwordCookie = new Cookie(\"password\", password);\n            //设置有效时间，我这里设置3天有效\n            usernameCookie.setMaxAge(60 * 60 * 24 * 3);\n            passwordCookie.setMaxAge(60 * 60 * 24 * 3);\n            //存入客户端\n            response.addCookie(usernameCookie);\n            response.addCookie(passwordCookie);\n            //返回提示\n            response.getWriter().write(\"&lt;h1&gt;登录成功~~~~&lt;/h1&gt;\");\n        }else {\n            response.getWriter().write(\"&lt;h1&gt;登录失败....&lt;/h1&gt;\");\n        }\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        this.doGet(request, response);\n    }\n}\n</code></pre>\n<hr/>\n<blockquote>\n<p>        下面我们来进行测试一下，首先访问<a href=\"http://localhost:8080/cs/cookieLogin\" title=\"http://localhost:8080/cs/cookieLogin\">http://localhost:8080/cs/cookieLogin</a>，我们这里设置的虚拟路径是cs，下面是我们访问cookieLogin显示的页面。发现确实没有自动填写，因为我们还没有登录。游览器中也没有存有用户名和密码的cookie</p>\n</blockquote>\n<p><img alt=\"\" height=\"246\" src=\"..\\..\\static\\image\\62b9b24726a84704a524461590aa7475.png\" width=\"981\"/></p>\n<p><img alt=\"\" height=\"500\" src=\"..\\..\\static\\image\\8a24baa8a6d64a7a94b25af1e475be15.png\" width=\"1200\"/></p>\n<blockquote>\n<p>         输入正确的账号和密码进行登录。也就是账号和密码都输入root，页面显示登录成功</p>\n</blockquote>\n<p><img alt=\"\" height=\"173\" src=\"..\\..\\static\\image\\17c82082ff8d4d18900247533a84c081.png\" width=\"750\"/></p>\n<blockquote>\n<p>        下面我们来查看游览器是否存储了用户名和密码的cookie</p>\n</blockquote>\n<p><img alt=\"\" height=\"458\" src=\"..\\..\\static\\image\\03231af6d4094f49b4b46cce7faa0fcb.png\" width=\"1200\"/></p>\n<blockquote>\n<p>        游览器确实存储了cookie，没有问题，接下来，我们关闭游览器后重新访问登录页面。 </p>\n</blockquote>\n<p><img alt=\"\" height=\"205\" src=\"..\\..\\static\\image\\1b50adff5d6e4cbeb94e4c23d6ae9a34.png\" width=\"853\"/></p>\n<blockquote>\n<p>         我们一访问登录页面，用户名和密码就自动填写了，成功实现了功能</p>\n</blockquote>\n<hr/>\n<h2>总结 </h2>\n<p>        <strong>Cookie就是一些数据，用于存储服务器返回给客服端的信息，客户端进行保存。在下一次访问该网站时，客户端会将保存的cookie一同发给服务器，服务器再利用cookie进行一些操作。利用cookie我们就可以实现自动登录，保存游览历史，身份验证等功能。</strong></p>\n</div>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-03-08 20:30:15", "summary": "是什么的中文翻译是曲奇，小甜饼的意思。其实就是一些数据信息，类型为小型文本文件，存储于电脑上的文本文件中。有什么用我们想象一个场景，当我们打开一个网站时，如果这个网站我们曾经登录过，那么当我们再次打开"}