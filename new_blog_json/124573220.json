{"blogid": "124573220", "writerAge": "码龄1年", "writerBlogNum": "103", "writerCollect": "11148", "writerComment": "4682", "writerFan": "37312", "writerGrade": "7级", "writerIntegral": "14242", "writerName": "Albert Edison", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124573220.jpg", "writerRankTotal": "657", "writerRankWeekly": "248", "writerThumb": "6824", "writerVisitNum": "410318", "blog_read_count": "3747", "blog_time": "已于 2022-06-10 13:41:01 修改", "blog_title": "C语言每日一练——第195天：折半查找（升级版）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-github-gist\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\571aefb4f64f441faa7ab5d65bdc4b48.png\"/></p>\n<h1><a id=\"__1\"></a>🌟 前言</h1>\n<p><em><strong>Wassup guys，我是Edison</strong></em> 😎</p>\n<p><strong>今天是C语言每日一练，第161天！</strong></p>\n<p><em><strong>Let’s get it！</strong></em></p>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/619dab44fa9b4ff4bb475ed4a345d63b.gif#pic_center\"/></p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#__1\">🌟 前言</a></li><li><a href=\"#1__16\">1. 题目描述</a></li><li><a href=\"#2__24\">2. 问题分析</a></li><li><a href=\"#3__37\">3. 算法设计</a></li><li><a href=\"#4__55\">4. 动图演示</a></li><li><a href=\"#5__60\">5. 代码实现</a></li><li><a href=\"#6__138\">6. 知识点补充</a></li><li><ul><li><a href=\"#_continue__140\">🍑 continue 语句</a></li><li><a href=\"#_break__148\">🍑 break 语句</a></li><li><a href=\"#_continue__break_160\">🍑 continue语句 和 break语句的区别</a></li></ul>\n</li><li><a href=\"#7__165\">7. 问题拓展</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"1__16\"></a>1. 题目描述</h1>\n<blockquote>\n<p><font color=\"#008000\">N 个有序整数数列已放在一维数组中，利用二分查找法查找整数 m 在数组中的位置。<br/>  <br/> 若找到，则输出其下标值；反之，则输出 “ Not be found！”。</font><br/>  <br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/3df8143dbad84d438db9019e33d1531d.gif#pic_center\"/></p>\n</blockquote>\n<h1><a id=\"2__24\"></a>2. 问题分析</h1>\n<blockquote>\n<p><strong>二分查找法</strong>（也叫折半查找）其本质是分治算法的一种。<br/>  <br/> 所谓分治算法是指的分而治之，<font color=\"#FF0000\">即将较大规模的问题分解成几个较小规模的问题，这些子问题互相独立且与原问题相同，通过对较小规模问题的求解达到对整个问题的求解。</font><br/>  <br/> 我们把将问题分解成两个较小问题求解的分治方法称为二分法。需要注意的是，二分查找法只适用于有序序列。<br/>  <br/> 二分查找的基本思想是：每次查找前先确定数组中待查的范围，假设指针 <strong>low</strong> 和 <strong>high</strong> (low&lt;high) 分别指示待查范围的 <strong>下界</strong> 和 <strong>上界</strong>，指针 <strong>mid</strong> 指示区间的 <strong>中间位置</strong>，即 <strong>mid=(low+high)/2</strong>，把 <strong>m</strong> 与 <strong>中间位置 (mid)</strong> 中元素的值进行比较。<br/>  <br/> 如果m的值大于中间位置元素中的值，则下一次的查找范围放在中间位置之后的元素中；<br/>  <br/> 反之，下一次的查找范围放在中间位置之前的元素中。直到 <strong>low&gt;high</strong>，查找结束。</p>\n</blockquote>\n<h1><a id=\"3__37\"></a>3. 算法设计</h1>\n<blockquote>\n<p><strong>N</strong> 个有序数应存放在数组中，根据数组下标的取值范围知指针 <strong>low</strong> 和 <strong>high</strong> 的初值分别为 <strong>0</strong>、<strong>N-1</strong>。<br/>  <br/> 除了三个指针变量 <strong>low</strong>、<strong>high</strong>、<strong>mid</strong> 之外还需要一个变量（假设为 <strong>k</strong>）来 <strong>记录下标</strong>，利用变量 <strong>k</strong> 的值来 <font color=\"#FF0000\">判断整数是否在所给出的数组中。</font>下面我们用示意图来表示二分查找的过程。<br/>  <br/> 假设一维数组中存储的有序数列为：<code>5 13 19 21 37 56 64 75 80 88 92</code>，要查找的整数 <strong>m</strong> 为 <strong>21</strong>。<br/>  <br/> 根据二分查找方法可知指针 <strong>low</strong> 和 <strong>high</strong> 最初分别指向元素 <strong>5</strong> 和 <strong>92</strong>，由 <strong>mid=(low+high)/2</strong> 知，指针 mid 指向元素 <strong>56</strong>。示意图如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6135597e0bb04ce589f621af7229053e.png\"/><br/> <strong>变量 m</strong> 所代表的整数 <strong>21</strong> 与 <strong>指针 mid</strong> 所指的元素 <strong>56</strong> 进行比较， <strong>21 小于 56</strong>， 根据二分查找算法知， 查找范围现在缩小到指针 mid 所指元素的前面， 即从 5~37 的范围。<br/>  <br/> <strong>指针 high</strong> 原来指向下标为 N-1 的元素，现在指向<strong>下标为 mid-1</strong> 的元素，接着重新计算指针 mid 所指元素的下标。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7eeefab4335e4478a4994901f8ebd9be.png\"/><br/> 再次进行比较，<strong>21 大于 19</strong>，现在比较范围再次转移到 mid 所指元素的后面，low 元素所指元素下标由 0 变为 mid+1。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\27064519e5e244029063b98b7bca08ca.png\"/><br/> 当前 mid 所指元素的值为 21，与要查找的整数值相同，因此查找成功，所查元素在表中序号等于指针 mid 的值。</p>\n</blockquote>\n<h1><a id=\"4__55\"></a>4. 动图演示</h1>\n<p><strong>动图解析</strong></p>\n<blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/0f18e1b623234b22ad9ce8419a8689bf.gif#pic_center\"/></p>\n</blockquote>\n<h1><a id=\"5__60\"></a>5. 代码实现</h1>\n<p><strong>流程图设计</strong></p>\n<blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bab81d646c454f89957bd13bdfc0db97.png\"/></p>\n</blockquote>\n<p><font color=\"#4169E1\">完整代码</font>📝</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">N</span> <span class=\"token expression\"><span class=\"token number\">10</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span><span class=\"token number\">67</span><span class=\"token punctuation\">,</span><span class=\"token number\">89</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">180</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">int</span> low <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">int</span> high <span class=\"token operator\">=</span> N <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">int</span> mid<span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> m<span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a 数组中的数据如下：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter m：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;=</span> high<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tmid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">+</span> high<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> \n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\thigh <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">&gt;</span> a<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tlow <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tk <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> \n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"m=%d index=%d\\n\"</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not be found!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font color=\"#2E8B57\">运行结果</font>👇</p>\n<blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c8de61fadc75415186c352971ac3ac4f.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\abcd6ed82868458fb99dd9f891fc71eb.png\"/></p>\n</blockquote>\n<p><font color=\"#2E8B57\">代码贴图</font>👇</p>\n<blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a4c66e8095134ac8a9f9c9efc3d6b33b.png\"/></p>\n</blockquote>\n<p><strong>程序分析</strong></p>\n<blockquote>\n<p>在上述程序中循环结束可以有两种情况。<br/>  <br/> 一种是由于循环的判定条件 <code>low &lt;= high</code> 不成立的情况下跳出循环，此时可知查找不成功。<br/>  <br/> 在查找不成功的情况下，语句 <code>else {k=mid; break;}</code> 是不执行的，所以变量 <strong>k</strong> 的值不变仍为初值 <strong>-1</strong>。<br/>  <br/> 第二种结束循环的情况是由于执行了 <code>break;</code> 语句而跳出循环，在此情况下，变量 <strong>k</strong> 的值由 -1 变成了一个大于等于 0 的数，即指针 mid 所指元素的下标值。<br/>  <br/> 所以在最后用选择结构来判定 k 的值，从而确定整个查找过程是否成功。</p>\n</blockquote>\n<h1><a id=\"6__138\"></a>6. 知识点补充</h1>\n<h2><a id=\"_continue__140\"></a>🍑 continue 语句</h2>\n<p>continue 语句的格式为：</p>\n<blockquote>\n<p><code>continue;</code><br/>  <br/> continue 语句用于循环语句（<code>while循环语句</code> 或 <code>do...while循环语句</code> 或 <code>for循环语句</code>）中，作为循环体的一部分。<br/>  <br/> 在程序执行时，一旦遇到了 continue 语句，则立即结束本次循环，即跳过循环体中 continue 后面尚未执行的语句，接着进行是否继续循环的条件判定。</p>\n</blockquote>\n<h2><a id=\"_break__148\"></a>🍑 break 语句</h2>\n<p>break 语句的格式如下：</p>\n<blockquote>\n<p><code>break;</code><br/>  <br/> break 语句 可用在 switch 语句中。<br/>  <br/> 在程序执行时， 一旦遇到了 break 语句， 则立即退出当前的 switch 语句。<br/>  <br/> 除此之外， break 语句还能用于循环语句（<code>while循环语句</code> 或 <code>do...while 循环语句</code> 或 <code>for 循环语句</code>)）中， 作为循环体的一部分。<br/>  <br/> 在程序执行时， 一旦遇到了 break语句， 则立即退出当前的循环体，接着执行当前循环体下面的语句。</p>\n</blockquote>\n<h2><a id=\"_continue__break_160\"></a>🍑 continue语句 和 break语句的区别</h2>\n<blockquote>\n<p><font color=\"#FF0000\">continue 只是结束本次循环，不再执行循环体中 continue 后面的其余语句，并不是终止当前循环。<br/>  <br/> break 是直接终止当前的循环。</font></p>\n</blockquote>\n<h1><a id=\"7__165\"></a>7. 问题拓展</h1>\n<blockquote>\n<p>在一个给定的数据结构中查找某个指定的元素，通常根据不同的数据结构，应采用不同的查找方法。对于一个有序数列，除了采用二分查找法之外还可以采用 <strong>顺序查找</strong> 的方法。<br/>  <br/> 顺序查找一般是指 <strong>在线性表中查找指定的元素</strong>，其基本方法如下：<br/>  <br/> <font color=\"#FF0000\">从线性表的第一个元素开始，依次将线性表的元素与被查元素进行比较，若相等则表示找到即查找成功；<br/>  <br/> 若线性表中所有的元素都与被查元素进行了比较但都不相等，则表示线性表中没有要找的元素即查找失败。</font><br/>  <br/> 在长度为 n 的线性表中查找指定元素，最好的情况是比较一次成功，最坏的情况是比较 n 次，平均要比较 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         (\n        \n        \n         1\n        \n        \n         ＋\n        \n        \n         2\n        \n        \n         ＋\n        \n        \n         3\n        \n        \n         ＋\n        \n        \n         ⋅\n        \n        \n         ⋅\n        \n        \n         ⋅\n        \n        \n         ＋\n        \n        \n         n\n        \n        \n         )\n        \n        \n         /\n        \n        \n         n\n        \n        \n         ＝\n        \n        \n         (\n        \n        \n         1\n        \n        \n         ＋\n        \n        \n         n\n        \n        \n         )\n        \n        \n         /\n        \n        \n         2\n        \n       \n       \n        (1＋2＋3＋···＋n) / n＝(1＋n) / 2\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mord cjk_fallback\">＋</span><span class=\"mord\">2</span><span class=\"mord cjk_fallback\">＋</span><span class=\"mord\">3</span><span class=\"mord cjk_fallback\">＋</span><span class=\"mpunct\">⋅</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mpunct\">⋅</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mpunct\">⋅</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord cjk_fallback\">＋</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">n</span><span class=\"mord cjk_fallback\">＝</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mord cjk_fallback\">＋</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord\">2</span></span></span></span></span> 次。<br/>  <br/> 尽管顺序查找的效率低，但对于一些情况只能采用顺序查找的方法，如对于一个无序表进行查找。</p>\n</blockquote>\n<p><font color=\"#4169E1\">完整代码</font>📝</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">N</span> <span class=\"token expression\"><span class=\"token number\">10</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span><span class=\"token number\">67</span><span class=\"token punctuation\">,</span><span class=\"token number\">89</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">180</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> k <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a数组中的数据如下: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出数组中原数据序列</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter m: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//由键盘输入要查找的整数值</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">==</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tk <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//一旦找到所要查找的元素便跳出循环</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%m=%d index=%d\\n\"</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not be found!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><font color=\"#2E8B57\">运行结果</font>👇</p>\n<blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6d5a44fcb44c468aab48ce6c2e8e25b7.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\56b0c5e4284a4729a2c8ad5abf831fd6.png\"/></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/e1540f1269f24b4e8e60a8f329ecbf7c.gif#pic_center\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-06-10 13:41:01", "summary": "在这里插入图片描述前言，我是今天是语言每日一练，第天！！在这里插入图片描述文章目录前言题目描述问题分析算法设计动图演示代码实现知识点补充语句语句语句和语句的区别问题拓展题目描述个有序整数数列已放在一维"}