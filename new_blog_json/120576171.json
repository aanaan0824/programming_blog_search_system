{"blogid": "120576171", "writerAge": "码龄10年", "writerBlogNum": "24", "writerCollect": "140", "writerComment": "5", "writerFan": "12", "writerGrade": "3级", "writerIntegral": "496", "writerName": "wolf_king_586", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_120576171.jpg", "writerRankTotal": "41469", "writerRankWeekly": "183290", "writerThumb": "24", "writerVisitNum": "37392", "blog_read_count": "8317", "blog_time": "于 2021-10-01 15:18:07 发布", "blog_title": "clang-format的使用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>clang-format使用</h3>\n<ul><li><a href=\"#1_clangformat_1\">1. clang-format简介</a></li><li><a href=\"#2_clangformat_6\">2. clang-format的使用</a></li><li><ul><li><a href=\"#21_clangformatclangformat_file_7\">2.1 clang-format中.clang-format file</a></li><li><a href=\"#22_google_26\">2.2 示例：配置google的代码风格</a></li><li><a href=\"#23_vscode_clangformat_39\">2.3 vscode clang-format配置</a></li></ul>\n</li><li><a href=\"#3_clangformat__clangformat_fileyaml_43\">3. clang-format 中 .clang-format file配置（yaml格式）</a></li><li><ul><li><a href=\"#31__44\">3.1 配置多个语言的约束</a></li><li><a href=\"#32_format_72\">3.2 将某段代码忽略format</a></li><li><a href=\"#33__80\">3.3 对齐方式</a></li><li><a href=\"#34__82\">3.4 数组的左右对其设置</a></li><li><a href=\"#35__87\">3.5 连续赋值语句的格式设置，是否等号对齐</a></li><li><a href=\"#36_AlignConsecutiveBitFields_93\">3.6 AlignConsecutiveBitFields</a></li><li><a href=\"#37_AlignConsecutiveDeclarations_96\">3.7 AlignConsecutiveDeclarations</a></li><li><a href=\"#38_AlignConsecutiveMacros_99\">3.8 宏的对齐AlignConsecutiveMacros</a></li><li><a href=\"#39_AlignEscapedNewlines_102\">3.9 AlignEscapedNewlines（对齐选项中的反斜杠转义换行符）</a></li><li><a href=\"#310__104\">3.10 对齐操作符</a></li><li><a href=\"#311__106\">3.11 尾部注释格式</a></li><li><a href=\"#312__108\">3.12 函数调用</a></li><li><a href=\"#313__110\">3.13 函数对齐</a></li></ul>\n</li><li><a href=\"#_116\">参考文献</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"1_clangformat_1\"></a>1. clang-format简介</h1>\n<p>Clang-Format可用于格式化（排版）多种不同语言的代码。<br/> 其自带的排版格式主要有：LLVM, Google, Chromium, Mozilla, WebKit等; 利用style参数配置风格。<br/> 通过编写 .clang-format 文件，可以实现代码风格的配置。</p>\n<h1><a id=\"2_clangformat_6\"></a>2. clang-format的使用</h1>\n<h2><a id=\"21_clangformatclangformat_file_7\"></a>2.1 clang-format中.clang-format file</h2>\n<p>我们可以自定制代码风格约束，通过一下命令进行使用：</p>\n<pre><code class=\"prism language-bash\">clang-format -sytle<span class=\"token operator\">=</span>file \n</code></pre>\n<p>注意：file不是 .clang-format file的路径，就是file关键字；说明使用 the .clang-format file located in the closest parent directory of the input file. clang-format的设置进行代码约束；其他选项：-style=LLVM, Google, Chromium, Mozilla, WebKit</p>\n<p>而.clang-format file由一下命令生成：生成google风格的clang-format配置文件</p>\n<pre><code class=\"prism language-bash\">clang-format -style<span class=\"token operator\">=</span>google -dump-config <span class=\"token operator\">&gt;</span> .clang-format\n</code></pre>\n<p>第二种方法配置：也可以通过设置key:value的方式进行<br/> 如：</p>\n<pre><code class=\"prism language-bash\">clang-format -style<span class=\"token operator\">=</span><span class=\"token string\">\"{BasedOnStyle: llvm, IndentWidth:8} ...\"</span>\n</code></pre>\n<h2><a id=\"22_google_26\"></a>2.2 示例：配置google的代码风格</h2>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\">#1) 生成.clang-format文件</span>\nclang-format -style<span class=\"token operator\">=</span>google -dump-config <span class=\"token operator\">&gt;</span> .clang-format\n<span class=\"token comment\"># 2) 配置.clang-format: 参考：https://clang.llvm.org/docs/ClangFormatStyleOptions.html</span>\n<span class=\"token comment\"># 3）通过.clang-format文件，进行代码风格约束</span>\n<span class=\"token comment\"># 格式化结果打印到中断</span>\nclang-format -style<span class=\"token operator\">=</span>file code.cpp\n<span class=\"token comment\"># 直接修改文件</span>\nclang-format -style<span class=\"token operator\">=</span>file -i code.cpp\n</code></pre>\n<h2><a id=\"23_vscode_clangformat_39\"></a>2.3 vscode clang-format配置</h2>\n<h1><a id=\"3_clangformat__clangformat_fileyaml_43\"></a>3. clang-format 中 .clang-format file配置（yaml格式）</h1>\n<h2><a id=\"31__44\"></a>3.1 配置多个语言的约束</h2>\n<pre><code class=\"prism language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token comment\"># We'll use defaults from the LLVM style, but with 4 columns indentation.</span>\n<span class=\"token key atrule\">BasedOnStyle</span><span class=\"token punctuation\">:</span> LLVM\n<span class=\"token key atrule\">IndentWidth</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span>\n<span class=\"token punctuation\">---</span>\n<span class=\"token comment\"># C++</span>\n<span class=\"token key atrule\">Language</span><span class=\"token punctuation\">:</span> Cpp\n<span class=\"token comment\"># Force pointers to the type for C++.</span>\n<span class=\"token key atrule\">DerivePointerAlignment</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token key atrule\">PointerAlignment</span><span class=\"token punctuation\">:</span> Left\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">Language</span><span class=\"token punctuation\">:</span> JavaScript\n<span class=\"token comment\"># Use 100 columns for JS.</span>\n<span class=\"token key atrule\">ColumnLimit</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">Language</span><span class=\"token punctuation\">:</span> Proto\n<span class=\"token comment\"># Don't format .proto files.</span>\n<span class=\"token key atrule\">DisableFormat</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">Language</span><span class=\"token punctuation\">:</span> CSharp\n<span class=\"token comment\"># Use 100 columns for C#.</span>\n<span class=\"token key atrule\">ColumnLimit</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>\n<span class=\"token punctuation\">...</span>\n</code></pre>\n<h2><a id=\"32_format_72\"></a>3.2 将某段代码忽略format</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> formatted_code<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// clang-format off</span>\n    <span class=\"token keyword\">void</span>    unformatted_code  <span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// clang-format on</span>\n<span class=\"token keyword\">void</span> formatted_code_again<span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"33__80\"></a>3.3 对齐方式</h2>\n<p><img alt=\"官方截图\" src=\"..\\..\\static\\image\\15595a917c5e4ad29ab81bd8a325dc16.png\"/></p>\n<h2><a id=\"34__82\"></a>3.4 数组的左右对其设置</h2>\n<p>实际None设置为false;<br/> 注意：clang-format的版本，只有13是支持的<br/> 13版本前不支持<br/> <img alt=\"官方截图\" src=\"..\\..\\static\\image\\0f83664fb46f4e758e3685b17db04159.png\"/></p>\n<h2><a id=\"35__87\"></a>3.5 连续赋值语句的格式设置，是否等号对齐</h2>\n<p>根据下面的示例可以清楚的设置不同的格式情况；<br/> 注意：clang-format的版本，只有13是支持的<br/> 13版本前只支持true/false<br/> <img alt=\"官方图片\" src=\"..\\..\\static\\image\\c3ec294469204be1baeb0bdc41838e88.png\"/><br/> <img alt=\"官方图片\" src=\"..\\..\\static\\image\\296a076be3c64bd0b04b0b3acb65d347.png\"/></p>\n<h2><a id=\"36_AlignConsecutiveBitFields_93\"></a>3.6 AlignConsecutiveBitFields</h2>\n<p><img alt=\"官方截图-13\" src=\"..\\..\\static\\image\\990e0f8392bc4727adfa7182cf9d3a5e.png\"/><br/> <img alt=\"官方截图\" src=\"..\\..\\static\\image\\c66204a8580a4787be2cb36199f922a3.png\"/></p>\n<h2><a id=\"37_AlignConsecutiveDeclarations_96\"></a>3.7 AlignConsecutiveDeclarations</h2>\n<p>与AlignConsecutiveAssignments一样配置； 将声明语句与赋值语句对齐</p>\n<h2><a id=\"38_AlignConsecutiveMacros_99\"></a>3.8 宏的对齐AlignConsecutiveMacros</h2>\n<p><img alt=\"官方截图\" src=\"..\\..\\static\\image\\6b142a2554f24e69b4f3907d04a750da.png\"/><br/> <img alt=\"官方截图\" src=\"..\\..\\static\\image\\9183f46e6f134103b81bafb4b99d9b63.png\"/></p>\n<h2><a id=\"39_AlignEscapedNewlines_102\"></a>3.9 AlignEscapedNewlines（对齐选项中的反斜杠转义换行符）</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\01690e8ac21b4019b374291fb17ce937.png\"/></p>\n<h2><a id=\"310__104\"></a>3.10 对齐操作符</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c50528d676ef4d0aaf0ba4f9ea288dc7.png\"/></p>\n<h2><a id=\"311__106\"></a>3.11 尾部注释格式</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2cd1ea861fca408d8ef3cf67c917be00.png\"/></p>\n<h2><a id=\"312__108\"></a>3.12 函数调用</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\66ef5525a5e74a83ab512e1ec38994df.png\"/></p>\n<h2><a id=\"313__110\"></a>3.13 函数对齐</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b46f92ff836c487c8802226b20845bf0.png\"/><br/> 根据需要设定不同的配置：<br/> 具体说明：https://clang.llvm.org/docs/ClangFormatStyleOptions.html</p>\n<h1><a id=\"_116\"></a>参考文献</h1>\n<ol><li><a href=\"https://clang.llvm.org/docs/ClangFormatStyleOptions.html\">https://clang.llvm.org/docs/ClangFormatStyleOptions.html</a></li></ol>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 1, "csharp": 1, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2021-10-01 15:18:07", "summary": "使用简介的使用中示例：配置的代码风格配置中配置格式配置多个语言的约束将某段代码忽略对齐方式数组的左右对其设置连续赋值语句的格式设置，是否等号对齐宏的对齐对齐选项中的反斜杠转义换行符对齐操作符尾部注释格"}