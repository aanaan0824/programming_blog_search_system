{"blogid": "120899401", "writerAge": "码龄5年", "writerBlogNum": "76", "writerCollect": "1216", "writerComment": "43", "writerFan": "136", "writerGrade": "5级", "writerIntegral": "1679", "writerName": "还没想好~", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_120899401.jpg", "writerRankTotal": "80219", "writerRankWeekly": "38013", "writerThumb": "198", "writerVisitNum": "169115", "blog_read_count": "6189", "blog_time": "于 2021-10-22 09:42:56 发布", "blog_title": "C++常用语法——unordered_set", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h3><a id=\"_0\"></a>一、使用前提</h3>\n<p>引入头文件：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_set&gt;</span></span>\n</code></pre>\n<h3><a id=\"unordered_set_5\"></a>二、unordered_set是什么</h3>\n<p>unordered_set 容器，可直译为“无序 set 容器”。即 unordered_set 容器和 set 容器很像，唯一的区别就在于 set 容器会自行对存储的数据进行排序，而 unordered_set 容器不会。</p>\n<p><strong>unordered_set的几个特性：</strong></p>\n<blockquote>\n<ol><li>不再以键值对的形式存储数据，而是直接存储数据的值 ；</li><li>容器内部存储的各个元素的值都互不相等，且不能被修改；</li><li>不会对内部存储的数据进行排序</li></ol>\n</blockquote>\n<h3><a id=\"unordered_set_13\"></a>三、unordered_set的初始化</h3>\n<p><strong>创建空的set</strong></p>\n<pre><code class=\"prism language-cpp\">unordered_set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> set1<span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>拷贝构造</strong></p>\n<pre><code class=\"prism language-cpp\">unordered_set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">set2</span><span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>使用迭代器构造</strong></p>\n<pre><code class=\"prism language-cpp\">unordered_set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">set3</span><span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> set1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>使用数组作为其初值进行构造</strong></p>\n<pre><code class=\"prism language-cpp\">unordered_set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">set4</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>arr<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>移动构造</strong></p>\n<pre><code class=\"prism language-cpp\">unordered_set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">set5</span><span class=\"token punctuation\">(</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>set2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>使用处置列表进行构造</strong></p>\n<pre><code class=\"prism language-cpp\">unordered_set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> set6 <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a id=\"unordered_set_38\"></a>四、unordered_set的常用内置函数</h3>\n<p><strong>empty()函数——判断是否为空</strong><br/> //若容器为空，则返回 true；否则 false</p>\n<pre><code class=\"prism language-cpp\">set1<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>find()函数——查找</strong><br/> //查找2，找到返回迭代器，失败返回end()</p>\n<pre><code class=\"prism language-cpp\">set1<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>count()函数——出现次数</strong><br/> //返回指2出现的次数，0或1</p>\n<pre><code class=\"prism language-cpp\">set1<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>insert()函数——插入元素</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//插入元素，返回pair&lt;unordered_set&lt;int&gt;::iterator, bool&gt;</span>\nset1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//使用initializer_list插入元素</span>\nset1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//指定插入位置，如果位置正确会减少插入时间，返回指向插入元素的迭代器</span>\nset1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//使用范围迭代器插入</span>\nset1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>set2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> set2<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>关于insert函数的返回值：</strong><br/> <strong>insert()只传入单个参数（待插入元素）</strong></p>\n<blockquote>\n<ol><li>会返回一个 pair 对象</li><li>这个 pair 对象包含一个迭代器，以及一个附加的布尔值用来说明插入是否成功</li><li>如果元素被插入，返回的迭代器会指向新元素</li><li>如果没有被插入，迭代器指向阻止插入的元素</li></ol>\n</blockquote>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">auto</span> pr <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ninety\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns a pair - an iterator &amp; a bool value</span>\n</code></pre>\n<p><strong>insert()传入两个参数（迭代器+待插入元素）</strong></p>\n<blockquote>\n<ol><li>可以用一个迭代器作为insert()的第一个参数，它指定了元素被插入的位置</li><li>在这种情况下，只会返回一个迭代器</li></ol>\n</blockquote>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">auto</span> iter <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span> <span class=\"token punctuation\">(</span>pr<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> <span class=\"token string\">\"nine\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1st arg is a hint. Returns an iterator</span>\n</code></pre>\n<p><strong>insert()传入初始化列表</strong></p>\n<blockquote>\n<ol><li>插入初始化表中的元素</li><li>在这种情况下，什么都没有返回</li></ol>\n</blockquote>\n<pre><code class=\"prism language-cpp\">words<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"ten\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"seven\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"six\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Inserting an initializer list</span>\n</code></pre>\n<p><strong>emplace()函数——插入元素(转移构造)</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//使用转移构造函数添加新元素3，比insert效率高</span>\nset1<span class=\"token punctuation\">.</span><span class=\"token function\">emplace</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>erase()函数——删除元素</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//删除操作，成功返回1，失败返回0</span>\nset1<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//删除操作，成功返回下一个pair的迭代器</span>\nset1<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//删除set1的所有元素，返回指向end的迭代器</span>\nset1<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> set1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>bucket_count()函数——篮子数目</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//返回容器中的篮子总数</span>\nset1<span class=\"token punctuation\">.</span><span class=\"token function\">bucket_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>bucket_size()函数——篮子中元素数目</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//返回1号篮子中的元素数</span>\nset1<span class=\"token punctuation\">.</span><span class=\"token function\">bucket_size</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>bucket()函数——在哪个篮子</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//元素1在哪一个篮子</span>\nset1<span class=\"token punctuation\">.</span><span class=\"token function\">bucket</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>clear()函数——清空</strong></p>\n<pre><code class=\"prism language-cpp\">set1<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>load_factor()函数——负载因子</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//负载因子，返回每个篮子元素的平均数，即size/float(bucket_count);</span>\nset1<span class=\"token punctuation\">.</span><span class=\"token function\">load_factor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>rehash()函数——设置篮子数目并重新分布</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">//设置篮子的数量为20，并且重新rehash</span>\nset1<span class=\"token punctuation\">.</span><span class=\"token function\">rehash</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-10-22 09:42:56", "summary": "一、使用前提引入头文件：二、是什么容器，可直译为无序容器。即容器和容器很像，唯一的区别就在于容器会自行对存储的数据进行排序，而容器不会。的几个特性：不再以键值对的形式存储数据，而是直接存储数据的值；容"}