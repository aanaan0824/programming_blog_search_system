{"blogid": "121138176", "writerAge": "码龄2年", "writerBlogNum": "21", "writerCollect": "74", "writerComment": "6", "writerFan": "2", "writerGrade": "2级", "writerIntegral": "236", "writerName": "unonoi", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_121138176.jpg", "writerRankTotal": "56870", "writerRankWeekly": "742677", "writerThumb": "19", "writerVisitNum": "28732", "blog_read_count": "6152", "blog_time": "于 2021-11-04 11:12:52 发布", "blog_title": "【C++】C++ 单例模式总结（5种单例实现方法）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>本文对 C++ 的单例模式进行简单介绍和实现。</p>\n<blockquote>\n<p>参考：</p>\n<ol><li><a href=\"https://juejin.im/post/6844903928497176584\">C++ 线程安全的单例模式总结</a>（强烈建议阅读原文，本文相当于做了总结，留作学习，并添加了一种新的单例方法 std::call_once ）</li></ol>\n</blockquote>\n<h1><a id=\"_5\"></a>目录</h1>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_5\">目录</a></li><li><a href=\"#1__9\">1. 什么是单例模式</a></li><li><ul><li><a href=\"#_13\">为什么需要单例模式</a></li><li><a href=\"#_26\">单例模式分类</a></li><li><a href=\"#_40\">单例类的特点</a></li></ul>\n</li><li><a href=\"#2__48\">2. 单例模式实现</a></li><li><ul><li><a href=\"#_52\">普通懒汉式单例（线程不安全）</a></li><li><a href=\"#_58\">加锁的懒汉式单例（线程安全）</a></li><li><ul><li><a href=\"#1_62\">方法1：返回普通指针</a></li><li><a href=\"#2_149\">方法2：返回智能指针</a></li></ul>\n</li><li><a href=\"#C11_194\">静态局部变量的懒汉单例（C++11线程安全）</a></li><li><a href=\"#_263\">饿汉式单例（本身就线程安全）</a></li><li><a href=\"#_C11_stdcall_once_C11_335\">使用 C++11 std::call_once 实现单例（C++11线程安全）</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"1__9\"></a>1. 什么是单例模式</h1>\n<p>单例模式是指在整个系统生命周期内，保证一个类只能产生一个实例，确保该类的唯一性。</p>\n<h2><a id=\"_13\"></a>为什么需要单例模式</h2>\n<p>单例模式是为了保证程序的线程安全。</p>\n<ul><li>什么是线程安全？</li></ul>\n<p>在拥有共享数据的多条线程并行执行的程序中，线程安全的代码会通过同步机制保证各个线程都可以正常且正确的执行，不会出现数据污染等意外情况。</p>\n<ul><li>如何保证线程安全？</li></ul>\n<ol><li>给共享的资源加把锁，保证每个资源变量每时每刻至多被一个线程占用。</li><li>让线程也拥有资源，不用去共享进程中的资源。如：使用threadlocal可以为每个线程维护一个私有的本地变量。</li></ol>\n<h2><a id=\"_26\"></a>单例模式分类</h2>\n<p>单例模式可以分为 <strong>懒汉式</strong> 和 <strong>饿汉式</strong> ，两者之间的区别在于创建实例的时间不同。</p>\n<ul><li>懒汉式</li></ul>\n<p>系统运行中，实例并不存在，只有当需要使用该实例时，才会去创建并使用实例。这种方式要考虑线程安全。</p>\n<ul><li>饿汉式</li></ul>\n<p>系统一运行，就初始化创建实例，当需要时，直接调用即可。这种方式本身就线程安全，没有多线程的线程安全问题。</p>\n<h2><a id=\"_40\"></a>单例类的特点</h2>\n<ul><li>构造函数和析构函数为私有类型，目的是禁止外部构造和析构。</li><li>拷贝构造函数和赋值构造函数是私有类型，目的是禁止外部拷贝和赋值，确保实例的唯一性。</li><li>类中有一个获取实例的静态方法，可以全局访问。</li></ul>\n<h1><a id=\"2__48\"></a>2. 单例模式实现</h1>\n<h2><a id=\"_52\"></a>普通懒汉式单例（线程不安全）</h2>\n<p>这种情况是线程不安全的，不作详细介绍。</p>\n<h2><a id=\"_58\"></a>加锁的懒汉式单例（线程安全）</h2>\n<p>使用互斥锁保证线程安全。</p>\n<h3><a id=\"1_62\"></a>方法1：返回普通指针</h3>\n<p>头文件：</p>\n<pre><code class=\"prism language-c++\">///  加锁的懒汉式实现  //\n\nclass SingleInstance\n{\n\npublic:\n    // 获取单实例对象\n    static SingleInstance *&amp;GetInstance();\n\n    //释放单实例，进程退出时调用\n    static void deleteInstance();\n\t\n    // 打印实例地址\n    void Print();\n\nprivate:\n    // 将其构造和析构成为私有的, 禁止外部构造和析构\n    SingleInstance();\n    ~SingleInstance();\n\n    // 将其拷贝构造和赋值构造成为私有函数, 禁止外部拷贝和赋值\n    SingleInstance(const SingleInstance &amp;signal);\n    const SingleInstance &amp;operator=(const SingleInstance &amp;signal);\n\nprivate:\n    // 唯一单实例对象指针\n    static SingleInstance *m_SingleInstance;\n    static std::mutex m_Mutex;\n};\n</code></pre>\n<p>源文件：</p>\n<pre><code class=\"prism language-c++\">//初始化静态成员变量\nSingleInstance *SingleInstance::m_SingleInstance = nullptr;\nstd::mutex SingleInstance::m_Mutex;\n\n// 注意：返回的是指针的引用\nSingleInstance *&amp; SingleInstance::GetInstance()\n{\n\n    //  这里使用了两个 if 判断语句的技术称为双检锁；好处是，只有判断指针为空的时候才加锁，\n    //  避免每次调用 GetInstance的方法都加锁，锁的开销毕竟还是有点大的。\n    if (m_SingleInstance == nullptr) \n    {\n        std::unique_lock&lt;std::mutex&gt; lock(m_Mutex); // 加锁\n        if (m_SingleInstance == nullptr)\n        {\n            m_SingleInstance = new (std::nothrow) SingleInstance();\n        }\n    }\n\n    return m_SingleInstance;\n}\n\nvoid SingleInstance::deleteInstance()\n{\n    std::unique_lock&lt;std::mutex&gt; lock(m_Mutex); // 加锁\n    if (m_SingleInstance)\n    {\n        delete m_SingleInstance;\n        m_SingleInstance = nullptr;\n    }\n}\n\nvoid SingleInstance::Print()\n{\n\tstd::cout &lt;&lt; \"我的实例内存地址是:\" &lt;&lt; this &lt;&lt; std::endl;\n}\n\nSingleInstance::SingleInstance()\n{\n    std::cout &lt;&lt; \"构造函数\" &lt;&lt; std::endl;\n}\n\nSingleInstance::~SingleInstance()\n{\n    std::cout &lt;&lt; \"析构函数\" &lt;&lt; std::endl;\n}\n</code></pre>\n<h3><a id=\"2_149\"></a>方法2：返回智能指针</h3>\n<pre><code class=\"prism language-c++\">#include &lt;iostream&gt;\n#include &lt;memory&gt;\n#include &lt;mutex&gt;\n\n\nclass Singleton {\n\npublic:\n\n    static std::shared_ptr&lt;Singleton&gt; getSingleton();\n\n    void print() {\n        std::cout &lt;&lt; \"Hello World.\" &lt;&lt; std::endl;\n    }\n\n    ~Singleton() {\n        std::cout &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; std::endl;\n    }\n\nprivate:\n\n    Singleton() {\n        std::cout &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; std::endl;\n    }\n};\n\nstatic std::shared_ptr&lt;Singleton&gt; singleton = nullptr;\nstatic std::mutex singletonMutex;\n\nstd::shared_ptr&lt;Singleton&gt; Singleton::getSingleton() {\n    if (singleton == nullptr) {\n        std::unique_lock&lt;std::mutex&gt; lock(singletonMutex);\n        if (singleton == nullptr) {\n            auto temp = std::shared_ptr&lt;Singleton&gt;(new Singleton());\n            singleton = temp;\n        }\n    }\n    return singleton;\n}\n</code></pre>\n<h2><a id=\"C11_194\"></a>静态局部变量的懒汉单例（C++11线程安全）</h2>\n<p>头文件：</p>\n<pre><code class=\"prism language-c++\">///  内部静态变量的懒汉实现  //\n\nclass Single\n{\n\npublic:\n    // 获取单实例对象\n    static Single &amp;GetInstance();\n\t\n\t// 打印实例地址\n    void Print();\n\nprivate:\n    // 禁止外部构造\n    Single();\n\n    // 禁止外部析构\n    ~Single();\n\n    // 禁止外部拷贝构造\n    Single(const Single &amp;signal);\n\n    // 禁止外部赋值操作\n    const Single &amp;operator=(const Single &amp;signal);\n};\n</code></pre>\n<p>源文件：</p>\n<pre><code class=\"prism language-c++\">Single &amp;Single::GetInstance()\n{\n    /**\n     * 局部静态特性的方式实现单实例。\n     * 静态局部变量只在当前函数内有效，其他函数无法访问。\n     * 静态局部变量只在第一次被调用的时候初始化，也存储在静态存储区，生命周期从第一次被初始化起至程序结束止。\n     */\n    static Single signal;\n    return signal;\n}\n\nvoid Single::Print()\n{\n    std::cout &lt;&lt; \"我的实例内存地址是:\" &lt;&lt; this &lt;&lt; std::endl;\n}\n\nSingle::Single()\n{\n    std::cout &lt;&lt; \"构造函数\" &lt;&lt; std::endl;\n}\n\nSingle::~Single()\n{\n    std::cout &lt;&lt; \"析构函数\" &lt;&lt; std::endl;\n}\n\n</code></pre>\n<p>但是，这种方法也有点问题：在多线程场景下还是有可能会存在线程安全的问题，因为多线程同时调用 <em>GetInstance()</em> 方法有可能还是会产生竞争。</p>\n<p>解决这个问题的一种做法是：在程序的单线程启动阶段就调用 <em>GetInstance()</em> 方法。</p>\n<h2><a id=\"_263\"></a>饿汉式单例（本身就线程安全）</h2>\n<p>头文件：</p>\n<pre><code class=\"prism language-c++\">// 饿汉实现 /\n\nclass Singleton\n{\npublic:\n    // 获取单实例\n    static Singleton* GetInstance();\n\n    // 释放单实例，进程退出时调用\n    static void deleteInstance();\n    \n    // 打印实例地址\n    void Print();\n\nprivate:\n    // 将其构造和析构成为私有的, 禁止外部构造和析构\n    Singleton();\n    ~Singleton();\n\n    // 将其拷贝构造和赋值构造成为私有函数, 禁止外部拷贝和赋值\n    Singleton(const Singleton &amp;signal);\n    const Singleton &amp;operator=(const Singleton &amp;signal);\n\nprivate:\n    // 唯一单实例对象指针\n    static Singleton *g_pSingleton;\n};\n</code></pre>\n<p>源文件：</p>\n<pre><code class=\"prism language-c++\">// 代码一运行就初始化创建实例 ，本身就线程安全\nSingleton* Singleton::g_pSingleton = new (std::nothrow) Singleton();\n\nSingleton* Singleton::GetInstance()\n{\n    return g_pSingleton;\n}\n\nvoid Singleton::deleteInstance()\n{\n    if (g_pSingleton)\n    {\n        delete g_pSingleton;\n        g_pSingleton = nullptr;\n    }\n}\n\nvoid Singleton::Print()\n{\n    std::cout &lt;&lt; \"我的实例内存地址是:\" &lt;&lt; this &lt;&lt; std::endl;\n}\n\nSingleton::Singleton()\n{\n    std::cout &lt;&lt; \"构造函数\" &lt;&lt; std::endl;\n}\n\nSingleton::~Singleton()\n{\n    std::cout &lt;&lt; \"析构函数\" &lt;&lt; std::endl;\n}\n\n</code></pre>\n<h2><a id=\"_C11_stdcall_once_C11_335\"></a>使用 C++11 std::call_once 实现单例（C++11线程安全）</h2>\n<pre><code class=\"prism language-c++\">#include &lt;iostream&gt;\n#include &lt;memory&gt;\n#include &lt;mutex&gt;\n\nclass Singleton {\npublic:\n    static std::shared_ptr&lt;Singleton&gt; getSingleton();\n\n    void print() {\n        std::cout &lt;&lt; \"Hello World.\" &lt;&lt; std::endl;\n    }\n\n    ~Singleton() {\n        std::cout &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; std::endl;\n    }\n\nprivate:\n    Singleton() {\n        std::cout &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; std::endl;\n    }\n};\n\nstatic std::shared_ptr&lt;Singleton&gt; singleton = nullptr;\nstatic std::once_flag singletonFlag;\n\nstd::shared_ptr&lt;Singleton&gt; Singleton::getSingleton() {\n    std::call_once(singletonFlag, [&amp;] {\n        singleton = std::shared_ptr&lt;Singleton&gt;(new Singleton());\n    });\n    return singleton;\n}\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-11-04 11:12:52", "summary": "本文对的单例模式进行简单介绍和实现。参考：线程安全的单例模式总结强烈建议阅读原文，本文相当于做了总结，留作学习，并添加了一种新的单例方法目录文章目录目录什么是单例模式为什么需要单例模式单例模式分类单例"}