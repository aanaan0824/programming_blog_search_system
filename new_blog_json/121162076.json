{"blogid": "121162076", "writerAge": "码龄1年", "writerBlogNum": "15", "writerCollect": "464", "writerComment": "560", "writerFan": "2817", "writerGrade": "5级", "writerIntegral": "2750", "writerName": "许同学。。", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_121162076.jpg", "writerRankTotal": "36060", "writerRankWeekly": "131979", "writerThumb": "951", "writerVisitNum": "27498", "blog_read_count": "4871", "blog_time": "于 2021-11-05 21:04:40 发布", "blog_title": "c语言—常见字符串函数与sizeof详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>1.sizeof使用</p>\n<p>a.代码1</p>\n<pre><code class=\"language-cpp\">int main()\n{\n\tint a = 0;\n\tint arr[] = { 1,2,3,4 };\n\tprintf(\"%d\\n\", sizeof(a));\n\tprintf(\"%d\\n\", sizeof a);\n\tprintf(\"%d\\n\", sizeof(&amp;a));//表示地址的大小\n\tprintf(\"%d\\n\", sizeof(int));\n\tprintf(\"%d\\n\", sizeof(arr));//计算数组arr的大小(单位为字节）\n\tprintf(\"%d\\n\", sizeof(arr)/sizeof(arr[0]));//计算数组arr的空间个数\n\treturn 0;\n}</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\5425e269cc574886b4b14d307e69667c.png\"/></p>\n<p>解释：</p>\n<p>(1)sizeof是计算大小的（单位为字节）， sizeof后面可以跟变量，类型（跟类型时一定要将类型括起来），地址(因为是32位机器，所以地址大小为4字节，如果是64位，结果就是8字节），数组名。</p>\n<p>(2)sizeof也可以计算数组的空间的个数。</p>\n<p>2.strlen函数</p>\n<p>a.代码1</p>\n<pre><code class=\"language-cpp\">int main()\n{\n\tchar arr1[] = { 'a','b','c','\\0'};\n\tchar arr2[] = { 'a','b','c' };\n\tchar arr3[4] = { 'a','b','c' };\n\tchar*str = \"abc\";\n\tprintf(\"%d\\n\", strlen(arr1));\n\tprintf(\"%d\\n\", strlen(arr2));\n\tprintf(\"%d\\n\", strlen(arr3));\n\tprintf(\"%d\\n\", strlen(str));\n\treturn 0;\n}</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\2f0aa7757ccb4566bf5e2aadc04255df.png\"/></p>\n<p>解释：</p>\n<p>(1)strlen函数是计算'\\0'前的元素个数，此时arr1数组有4个空间，有'\\0'，'\\0'前面有3个元素。</p>\n<p>(2)此时arr2数组有3个空间,没有'\\0',所以就产生了一个随机数。</p>\n<p>(3)此时arr3数组有4个空间，前面3个空间放的是\"abc\",最后一个空间系统添加了一个'\\0'。</p>\n<p>(4)指针变量指向字符串\"abc\"等价与\"abc\\0\"。</p>\n<p>注意：</p>\n<p>(1)strlen(包括strcmp strcpy strcat等)函数是用于字符串的，而不是整型数组的。</p>\n<p>(2)strlen函数是计算'\\0'前的字符个数，即有效字符的个数。</p>\n<p>b.代码2</p>\n<pre><code class=\"language-cpp\">int main()\n{\n\tchar* str1 = \"abc\";\n\tchar* str2 = \"abcd\";\n\tif (strlen(\"abc\") &lt; strlen(\"abcd\"))\n\t{\n\t\tprintf(\"aa\\n\");\n\t}\n\telse\n\t{\n\t\t;\n\t}\n\tif (strlen(str1) - strlen(str2) &gt; 0)\n\t{\n\t\tprintf(\"aa\\n\");\n\t}\n\telse\n\t{\n\t\t;\n\t}\n\treturn 0;\n}</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\aebcc16a11f140bfbeaf8bb966f1ac39.png\"/></p>\n<p>解释:</p>\n<p>(1)strlen的返回值是无符号的整型(unsigned int），所以(strlen(str1) - strlen(str2))最终的值也是无符号的，即&gt;=0。</p>\n<p>注意:</p>\n<p>(1)一定要引头文件&lt;string.h&gt;,不然结果就只有一个\"aa\"</p>\n<p>3.sizeof与strlen函数对比</p>\n<p>a.代码1</p>\n<pre><code class=\"language-cpp\">int main()\n{\n\tchar arr1[] = { 'a','b','c' };//3个空间，没有字符'\\0'\n\tchar arr2[] = \"abc\";//4个空间，字符'c'后面默认跟一个'\\0'\n\tchar arr3[] = \"a\\0bc\";\n\tprintf(\"%d\\n\", sizeof(arr1));\n\tprintf(\"%d\\n\", sizeof(arr2));\n\tprintf(\"%d\\n\", sizeof(arr3));\n\tprintf(\"%d\\n\", strlen(arr1));\n\tprintf(\"%d\\n\", strlen(arr2));\n\tprintf(\"%d\\n\", strlen(arr3));\n\treturn 0;\n}</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\c0883fcf60584eea8147e8a61854a788.png\"/></p>\n<p>解释:</p>\n<p>(1)sizeof是计算大小的，strlen是计算'\\0'前的字符个数的。 </p>\n<p>4.strcmp函数</p>\n<p>a.代码1</p>\n<pre><code class=\"language-cpp\">int main()\n{\n\tchar arr1[] = \"abc\";\n\tchar arr2[] = \"abc\";\n\tchar arr3[] = \"bcd\";\n\tprintf(\"%d\\n\", strcmp(arr1, arr2));\n\tprintf(\"%d\\n\", strcmp(arr1, arr3));\n\treturn 0;\n\t\n}</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\d550d13ca8a84d6b9144f8c26dc12673.png\"/></p>\n<p>解释:</p>\n<p>(1)两个字符串比较，就是字符逐个比较，直到发现不匹配为止。</p>\n<p>注意：</p>\n<p>(1)两个字符串进行比较时，如果arr1等于arr2,strcmp返回零。arr1小于arr2，strcmp返回一个小于零的数(不一定是-1）。arr1大于arr2,strcmp返回一个大于零的数(不一定是1）。</p>\n<p>(2)进行两个字符串比较时，一定要有'\\0'。</p>\n<p>b.代码2</p>\n<pre><code class=\"language-cpp\">int main()\n{\n\tchar arr1[] = \"abc\";\n\tchar arr2[] = \"abc\";\n\tif (strcmp(arr1, arr2))\n\t{\n\t\tprintf(\"aa\");\n\t}\n\telse\n\t{\n\t\tprintf(\"bb\");\n\t}\n\treturn 0;\n}</code></pre>\n<p> <img alt=\"\" src=\"..\\..\\static\\image\\a8a6e8c9524844b9b964b9374c8d6ebc.png\"/></p>\n<p>注意:</p>\n<p>(1)不要把代码解读成arr1与arr2相等，结果为真，执行if语句。此时的strcmp的返回值是0，所以执行else语句。</p>\n<p>5.strncmp函数</p>\n<p>a.代码1</p>\n<pre><code class=\"language-cpp\">​\nint main()\n{\n\tchar* str1 = \"abc\";\n\tchar* str2 = \"abcd\";\n\tprintf(\"%d\\n\", strncmp(str1, str2, 2));\n    printf(\"%d\\n\", strncmp(str1, str2, 4));\n\treturn 0;\n}\n\n​</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\755ccc22c4474d13bc033007dd777061.png\"/></p>\n<p>解释:</p>\n<p>(1)选择需要比较的个数，返回值和strcmp一样。</p>\n<pre><code class=\"language-cpp\">int strncmp( const char *string1, const char *string2, size_t count );</code></pre>\n<p>6.strcpy函数</p>\n<p>a.代码1</p>\n<pre><code class=\"language-cpp\">int main()\n{\n\tchar dest[] = \"abc\";\n\tchar* src = \"de\";//\"de\"等价于\"de\\0\"\n\tprintf(\"%s\", strcpy(dest, src));\n\treturn 0;\n}</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\878b3a3c8d554eafa6ce4052fe5452ef.png\"/></p>\n<p> 解释:</p>\n<p>(1)</p>\n<pre><code class=\"language-cpp\">char *strcpy( char *strDestination, const char *strSource );</code></pre>\n<p>将src字符串的副本(所以src是不能改变的),拷贝到到dest(所以dest是可以改变的)，返回dest的地址 。</p>\n<p>(2)\"de\"字符串后面是有'\\0'的，当再次读取dest时，字符'c'是无效字符。</p>\n<p>(3)拷贝后的结果</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\1fa904792390484a9e678b886af1471a.png\"/></p>\n<p>注意:</p>\n<p>(1)数组dest是可以改变的，一定不是字符串常量，即char*dest=\"abc\";</p>\n<p>(2)src一定要以'\\0'结尾，不然程序会崩溃的。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\8108541cbd1f4e4298a415ec5aabf08b.png\"/></p>\n<p>(3)保证dest的空间足以容纳拷贝过来的字符串，不然会导致溢出。</p>\n<p>b.代码2</p>\n<pre><code class=\"language-cpp\">int main()\n{\n\tchar dest[4] = \"abc\";\n\tchar* src = \"efgh\";\n\tprintf(\"%s\", strcpy(dest, src));\n\treturn 0;\n}</code></pre>\n<p style=\"text-align:center;\"> <img alt=\"\" src=\"..\\..\\static\\image\\c882ab260ba64332b959a7a5f7f7377f.png\"/></p>\n<p> 解释:</p>\n<p>(1)dest的空间只有4个，拷贝过去的字符有5个(\"efgh\"==\"efgh\\0\")，即使最终的结果能打印出来，但是dest周围的栈空间破坏了。</p>\n<p>7.strncpy函数</p>\n<p>a.代码1</p>\n<pre><code class=\"language-cpp\">int main()\n{\n\tchar dest[] = \"abcde\";\n\tchar* src = \"fgh\";\n\tprintf(\"%s\\n\", strncpy(dest, src, 5));\n\treturn 0;\n}</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\ffa5695928b54d4dac87ef209f4f7623.png\"/></p>\n<p>解释:</p>\n<p>(1)</p>\n<pre><code class=\"language-cpp\">char *strncpy( char *strDest, const char *strSource, size_t count );</code></pre>\n<p>strncpy函数最后一个参数(count)是控制拷贝到dest里面的字符个数。当count大于src字符串个数时，数组dest将用'\\0'填充到count。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\9d3baa64bf8a440d95e608170de8ecf6.png\"/></p>\n<p>b.代码2</p>\n<pre><code class=\"language-cpp\">int main()\n{\n\tchar dest[] = \"abcde\";\n\tchar* src = \"fgh\";\n\tprintf(\"%s\\n\", strncpy(dest, src, 2));\n\treturn 0;\n}</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\c65d7e5965064d9ca0b28691b5e43981.png\"/></p>\n<p>解释:</p>\n<p>(1)src的字符个数大于count ，就拷贝count个字符到dest。</p>\n<p>8.strcat函数</p>\n<p>a.代码1</p>\n<pre><code class=\"language-cpp\">int main()\n{\n\tchar dest[7] = \"abc\";\n\tchar*src = \"def\";\n\tprintf(\"%s\", strcat(dest, src));\n\treturn 0;\n}</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\f42b886b75634544b7c57178650a2e1d.png\"/></p>\n<p> 解释:</p>\n<p>(1)将字符串\"def\"(等价于\"def\\0\")追加到dest后面。</p>\n<p>(2)返回值为字符数组dest的地址。</p>\n<p>注意:</p>\n<p>(1)保证dest剩余的空间，足以容纳下追加的字符串，否则会出现溢出的情况。</p>\n<p>(2)字符数组dest可以改变，src指向的字符串不可以改变。</p>\n<p>9.strncat函数</p>\n<p>a.代码1</p>\n<pre><code class=\"language-cpp\">int main()\n{\n\tchar dest[7] = \"abc\";\n\tchar*src = \"def\";\n\tprintf(\"%s\", strncat(dest, src,2));\n\treturn 0;\n}</code></pre>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"..\\..\\static\\image\\5e62f3c1418d436ab82019e67f55454f.png\"/></p>\n<p>解释:</p>\n<p>(1)在dest后面追加2个字符，即\"de\" (\"de\"后面有一个'\\0',作为结束标志)。</p>\n<p>(2)返回值为数组dest的地址。</p>\n<p>注意:</p>\n<p>(1)保证dest剩余的空间，足以容纳下追加的字符，否则会出现溢出的情况。</p>\n<p>(2)字符数组dest可以改变，src指向的字符串不可以改变。</p>\n<p></p>\n<p>     字符串函数与sizeof的使用今天就分享到这里了，如果对你有帮助的话，可以给个关注，随便给个赞。</p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"240\" src=\"https://img-blog.csdnimg.cn/4d714d9644cd42e6b3df2f1190f10ecb.gif\" width=\"240\"/></p>\n<p></p>\n<p></p>\n<p style=\"text-align:center;\">  </p>\n<p></p>\n<p></p>\n<p></p>\n<p style=\"text-align:center;\"></p>\n<p style=\"text-align:center;\"></p>\n<p style=\"text-align:center;\"></p>\n<p style=\"text-align:center;\"></p>\n<p style=\"text-align:center;\"></p>\n<p style=\"text-align:center;\"></p>\n<p></p>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-11-05 21:04:40", "summary": "使用代码表示地址的大小计算数组的大小单位为字节计算数组的空间个数解释：是计算大小的单位为字节，后面可以跟变量，类型跟类型时一定要将类型括起来，地址因为是位机器，所以地址大小为字节，如果是位，结果就是字"}