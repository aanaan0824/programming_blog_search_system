{"blogid": "124299086", "writerAge": "码龄6年", "writerBlogNum": "51", "writerCollect": "64", "writerComment": "8", "writerFan": "12", "writerGrade": "4级", "writerIntegral": "1280", "writerName": "土司家的土豆", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124299086.jpg", "writerRankTotal": "37972", "writerRankWeekly": "75631", "writerThumb": "13", "writerVisitNum": "97632", "blog_read_count": "1069", "blog_time": "已于 2022-04-22 22:05:57 修改", "blog_title": "Apache详解，并发数设置", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"Apache_httpd_0\"></a>Apache httpd服务器简介</h1>\n<p>Apache是一个跨平台的、采用模块化设计的服务器。为了应对不同的平台和不同的环境产生的各种不同的需求，也为了在具体的平台或环境下达到最 佳的效果，Apache在web服务器的基础功能方面(端口绑定、接收请求等)也同样采用了模块化设计，这个Apache的核心模块就叫做多路处理模块 (Multi-Processing Module，简称MPM)。</p>\n<p>Apache针对不同的操作系统提供了多个不同的MPM模块，例如：mpm_beos、mpm_event、mpm_netware、mpmt_os2、mpm_prefork、mpm_winnt、mpm_worker。 如果条件允许，我们可以根据实际需求将指定的MPM模块编译进我们自己的Apache中(Apache的源码是开放的，允许用户自行编译)。不过，如果在 编译时我们没有选择，Apache将按照如下表格根据不同的操作系统自行选择对应的MPM模块，这也是Apache针对不同平台推荐使用的MPM模块。</p>\n<h1><a id=\"Apache_mpmMultiProcessing_Module_5\"></a>Apache mpm（Multi-Processing Module，多进程处理模块）模式</h1>\n<h2><a id=\"prefork_MPM_6\"></a>prefork MPM</h2>\n<p>prefork是比较古老而又稳定的apache模式，特点是每个进程都是单线程，在一个时间点只能处理一个连接，需要启动大量的进程来处理高并发的请求。由于是单线程进程，因而无须考虑线程安全的问题，可以使用非线程安全的库，例如mod_php。<br/> 优点是成熟稳定，缺点是比较消耗内存，而且并发支持受限于进程数量，对高并发支持稍差。</p>\n<h2><a id=\"work_MPM_9\"></a>work MPM</h2>\n<p>worker同样使用多个进程，但每个进程又拥有多个线程，每个线程处理一个连接。由于线程是轻量级的，因而具有较高的并发性，同时，多个进程又获得了一定的稳定性。<br/> worker模式特点是占用内存少，并发性比较高，缺点是必须考虑线程安全。如果使用了keep-alive方式，一个线程可能会被一直保持一个连接，但中间没有请求，直到超时。如果有多个线程被这样占据，在高并发场景下同样会出现无线程可用的情形。</p>\n<h2><a id=\"event_MPM_12\"></a>event MPM</h2>\n<p>event模式是在2.4版本中才稳定发布的模式，它在worker的基础上，解决了keep-alive连接不能释放的问题。event MPM中，会有一个专门的线程来管理这些keep-alive类型的线程，当有真实请求过来的时候，将请求传递给服务线程，执行完毕后，又允许它释放。这样增强了高并发场景下的请求处理能力。<br/> event相比于worker的优势是，它解决了worker模式下长连接线程的阻塞问题。<br/> 值得一提的是，worker/event模式的请求处理模式，已经和nginx的libevent模式相同了。在mod_php模式下，每个apache进程都需要直接执行php，所以很容易达到系统资源限制。但是在php-fpm模式下，apache只负责建立连接，然后把请求传递给php-fpm来处理。这样，apache可以保持大量的连接，请求处理能力取决于php服务器的性能。<br/> 由于event是明显优于worker的，所以在apache2.4及后续版本中，一般优先选择event模式。</p>\n<h2><a id=\"_18\"></a>模式查看</h2>\n<pre><code>apachectl -V | grep -i mpm\n</code></pre>\n<h1><a id=\"_Apache_23\"></a>查看系统 Apache服务器的并发数</h1>\n<h2><a id=\"_24\"></a>命令行查看</h2>\n<p>输入命令<code>apachectl status</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\75ac64fcecf34d0b96bdd16a1f9573ac.png\"/></p>\n<h2><a id=\"apacheipserverstatus_27\"></a>访问：apache主机ip/server-status</h2>\n<p>如何开启server-status参见：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\371f339331d34081a151e00bc1ef971a.png\"/></p>\n<h1><a id=\"_31\"></a>参考文章</h1>\n<p><a href=\"https://www.cnblogs.com/bushuwei/p/13618692.html\">apache2三种模式及切换到event模式</a><br/> <a href=\"https://blog.csdn.net/aerchi/article/details/80895252\">Apache优化：修改最大并发连接数</a><br/> <a href=\"https://blog.csdn.net/qq_29806777/article/details/106382586\">apache并发数量级</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 1, "time": "2022-04-22 22:05:57", "summary": "服务器简介是一个跨平台的、采用模块化设计的服务器。为了应对不同的平台和不同的环境产生的各种不同的需求，也为了在具体的平台或环境下达到最佳的效果，在服务器的基础功能方面端口绑定、接收请求等也同样采用了模"}