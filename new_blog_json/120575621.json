{"blogid": "120575621", "writerAge": "码龄4年", "writerBlogNum": "421", "writerCollect": "4375", "writerComment": "361", "writerFan": "3111", "writerGrade": "6级", "writerIntegral": "8303", "writerName": "山山而川'", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_120575621.jpg", "writerRankTotal": "2520", "writerRankWeekly": "9409", "writerThumb": "898", "writerVisitNum": "1925334", "blog_read_count": "21642", "blog_time": "于 2021-10-01 20:05:53 发布", "blog_title": "Python 正则表达式详解（建议收藏！）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"match-toc\" style=\"margin-left:0px;\"><a href=\"#match\" title=\"match\">match</a></p>\n<p id=\"%E5%8C%B9%E9%85%8D%E5%AD%97%E7%AC%A6%E4%B8%B2-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%8C%B9%E9%85%8D%E5%AD%97%E7%AC%A6%E4%B8%B2\" title=\"匹配字符串\">匹配字符串</a></p>\n<p id=\"%E5%8D%95%E5%AD%97%E7%AC%A6%E5%8C%B9%E9%85%8D-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%8D%95%E5%AD%97%E7%AC%A6%E5%8C%B9%E9%85%8D\" title=\"单字符匹配\">单字符匹配</a></p>\n<p id=\".%20%E5%8C%B9%E9%85%8D%E4%BB%BB%E6%84%8F%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6-toc\" style=\"margin-left:80px;\"><a href=\"#.%20%E5%8C%B9%E9%85%8D%E4%BB%BB%E6%84%8F%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6\" title=\". 匹配任意一个字符\">. 匹配任意一个字符</a></p>\n<p id=\"%C2%A0%5Cd%20%E5%8C%B9%E9%85%8D%E5%8D%95%E4%B8%AA%E6%95%B0%E5%AD%97-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%5Cd%20%E5%8C%B9%E9%85%8D%E5%8D%95%E4%B8%AA%E6%95%B0%E5%AD%97\" title=\"\\d 匹配数字\">\\d 匹配数字</a></p>\n<p id=\"%C2%A0%5CD%20%E5%8C%B9%E9%85%8D%E9%9D%9E%E6%95%B0%E5%AD%97%E7%9A%84-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%5CD%20%E5%8C%B9%E9%85%8D%E9%9D%9E%E6%95%B0%E5%AD%97%E7%9A%84\" title=\"\\D 匹配非数字\">\\D 匹配非数字</a></p>\n<p id=\"%5Cs%20%E5%8C%B9%E9%85%8D%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%EF%BC%8C%E5%A6%82%E7%A9%BA%E7%99%BD%EF%BC%8C%E7%A9%BA%E6%A0%BC%EF%BC%8Ctab%E7%AD%89-toc\" style=\"margin-left:80px;\"><a href=\"#%5Cs%20%E5%8C%B9%E9%85%8D%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%EF%BC%8C%E5%A6%82%E7%A9%BA%E7%99%BD%EF%BC%8C%E7%A9%BA%E6%A0%BC%EF%BC%8Ctab%E7%AD%89\" title=\"\\s 匹配特殊字符，如空白，空格，tab等\">\\s 匹配特殊字符，如空白，空格，tab等</a></p>\n<p id=\"%C2%A0%5CS%20%E5%8C%B9%E9%85%8D%E9%9D%9E%E7%A9%BA%E7%99%BD-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%5CS%20%E5%8C%B9%E9%85%8D%E9%9D%9E%E7%A9%BA%E7%99%BD\" title=\"\\S 匹配非空白\">\\S 匹配非空白</a></p>\n<p id=\"%5Cw%20%E5%8C%B9%E9%85%8D%E5%8D%95%E8%AF%8D%E3%80%81%E5%AD%97%E7%AC%A6%EF%BC%8C%E5%A6%82%E5%A4%A7%E5%B0%8F%E5%86%99%E5%AD%97%E6%AF%8D%EF%BC%8C%E6%95%B0%E5%AD%97%EF%BC%8C_%20%E4%B8%8B%E5%88%92%E7%BA%BF-toc\" style=\"margin-left:80px;\"><a href=\"#%5Cw%20%E5%8C%B9%E9%85%8D%E5%8D%95%E8%AF%8D%E3%80%81%E5%AD%97%E7%AC%A6%EF%BC%8C%E5%A6%82%E5%A4%A7%E5%B0%8F%E5%86%99%E5%AD%97%E6%AF%8D%EF%BC%8C%E6%95%B0%E5%AD%97%EF%BC%8C_%20%E4%B8%8B%E5%88%92%E7%BA%BF\" title=\"\\w 匹配单词、字符，如大小写字母，数字，_ 下划线\">\\w 匹配单词、字符，如大小写字母，数字，_ 下划线</a></p>\n<p id=\"%C2%A0%5CW%20%E5%8C%B9%E9%85%8D%E9%9D%9E%E5%8D%95%E8%AF%8D%E5%AD%97%E7%AC%A6-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%5CW%20%E5%8C%B9%E9%85%8D%E9%9D%9E%E5%8D%95%E8%AF%8D%E5%AD%97%E7%AC%A6\" title=\"\\W 匹配非单词字符\">\\W 匹配非单词字符</a></p>\n<p id=\"%5B%20%5D%20%E5%8C%B9%E9%85%8D%5B%20%5D%E4%B8%AD%E5%88%97%E4%B8%BE%E7%9A%84%E5%AD%97%E7%AC%A6-toc\" style=\"margin-left:80px;\"><a href=\"#%5B%20%5D%20%E5%8C%B9%E9%85%8D%5B%20%5D%E4%B8%AD%E5%88%97%E4%B8%BE%E7%9A%84%E5%AD%97%E7%AC%A6\" title=\"[ ] 匹配[ ]中列举的字符\">[ ] 匹配[ ]中列举的字符</a></p>\n<p id=\"%E8%A1%A8%E7%A4%BA%E6%95%B0%E9%87%8F-toc\" style=\"margin-left:40px;\"><a href=\"#%E8%A1%A8%E7%A4%BA%E6%95%B0%E9%87%8F\" title=\"表示数量\">表示数量</a></p>\n<p id=\"%C2%A0*%20%E5%87%BA%E7%8E%B00%E6%AC%A1%E6%88%96%E6%97%A0%E6%95%B0%E6%AC%A1-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0*%20%E5%87%BA%E7%8E%B00%E6%AC%A1%E6%88%96%E6%97%A0%E6%95%B0%E6%AC%A1\" title=\" * 出现0次或无数次\"> * 出现0次或无数次</a></p>\n<p id=\"%2B%20%E8%87%B3%E5%B0%91%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1-toc\" style=\"margin-left:80px;\"><a href=\"#%2B%20%E8%87%B3%E5%B0%91%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1\" title=\"+ 至少出现一次\">+ 至少出现一次</a></p>\n<p id=\"%3F%201%E6%AC%A1%E6%88%96%E5%88%990%E6%AC%A1-toc\" style=\"margin-left:80px;\"><a href=\"#%3F%201%E6%AC%A1%E6%88%96%E5%88%990%E6%AC%A1\" title=\"? 1次或则0次\">? 1次或则0次</a></p>\n<p id=\"%7Bm%7D%E6%8C%87%E5%AE%9A%E5%87%BA%E7%8E%B0m%E6%AC%A1-toc\" style=\"margin-left:80px;\"><a href=\"#%7Bm%7D%E6%8C%87%E5%AE%9A%E5%87%BA%E7%8E%B0m%E6%AC%A1\" title=\"{m}指定出现m次\">{m}指定出现m次</a></p>\n<p id=\"%7Bm%2C%7D%20%E8%87%B3%E5%B0%91%E5%87%BA%E7%8E%B0m%E6%AC%A1-toc\" style=\"margin-left:80px;\"><a href=\"#%7Bm%2C%7D%20%E8%87%B3%E5%B0%91%E5%87%BA%E7%8E%B0m%E6%AC%A1\" title=\"{m,} 至少出现m次\">{m,} 至少出现m次</a></p>\n<p id=\"%7Bm%2Cn%7D%20%E6%8C%87%E5%AE%9A%E4%BB%8Em-n%E6%AC%A1%E7%9A%84%E8%8C%83%E5%9B%B4-toc\" style=\"margin-left:80px;\"><a href=\"#%7Bm%2Cn%7D%20%E6%8C%87%E5%AE%9A%E4%BB%8Em-n%E6%AC%A1%E7%9A%84%E8%8C%83%E5%9B%B4\" title=\"{m,n} 指定从m-n次的范围\">{m,n} 指定从m-n次的范围</a></p>\n<p id=\"%E5%8C%B9%E9%85%8D%E8%BE%B9%E7%95%8C-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%8C%B9%E9%85%8D%E8%BE%B9%E7%95%8C\" title=\"匹配边界\">匹配边界</a></p>\n<p id=\"%24%20%E5%8C%B9%E9%85%8D%E7%BB%93%E5%B0%BE%E5%AD%97%E7%AC%A6-toc\" style=\"margin-left:80px;\"><a href=\"#%24%20%E5%8C%B9%E9%85%8D%E7%BB%93%E5%B0%BE%E5%AD%97%E7%AC%A6\" title=\"$ 匹配结尾字符\">$ 匹配结尾字符</a></p>\n<p id=\"%5E%20%E5%8C%B9%E9%85%8D%E5%BC%80%E5%A4%B4%E5%AD%97%E7%AC%A6-toc\" style=\"margin-left:80px;\"><a href=\"#%5E%20%E5%8C%B9%E9%85%8D%E5%BC%80%E5%A4%B4%E5%AD%97%E7%AC%A6\" title=\"^ 匹配开头字符\">^ 匹配开头字符</a></p>\n<p id=\"%5Cb%20%E5%8C%B9%E9%85%8D%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E8%BE%B9%E7%95%8C-toc\" style=\"margin-left:80px;\"><a href=\"#%5Cb%20%E5%8C%B9%E9%85%8D%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E8%BE%B9%E7%95%8C\" title=\"\\b 匹配一个单词的边界\">\\b 匹配一个单词的边界</a></p>\n<p id=\"%5CB%20%E5%8C%B9%E9%85%8D%E9%9D%9E%E5%8D%95%E8%AF%8D%E8%BE%B9%E7%95%8C-toc\" style=\"margin-left:80px;\"><a href=\"#%5CB%20%E5%8C%B9%E9%85%8D%E9%9D%9E%E5%8D%95%E8%AF%8D%E8%BE%B9%E7%95%8C\" title=\"\\B 匹配非单词边界\">\\B 匹配非单词边界</a></p>\n<p id=\"%E5%8C%B9%E9%85%8D%E5%88%86%E7%BB%84-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%8C%B9%E9%85%8D%E5%88%86%E7%BB%84\" title=\"匹配分组\">匹配分组</a></p>\n<p id=\"%7C%20%E5%8C%B9%E9%85%8D%E5%B7%A6%E5%8F%B3%E4%BB%BB%E6%84%8F%E4%B8%80%E4%B8%AA%E8%A1%A8%E8%BE%BE%E5%BC%8F-toc\" style=\"margin-left:80px;\"><a href=\"#%7C%20%E5%8C%B9%E9%85%8D%E5%B7%A6%E5%8F%B3%E4%BB%BB%E6%84%8F%E4%B8%80%E4%B8%AA%E8%A1%A8%E8%BE%BE%E5%BC%8F\" title=\"| 匹配左右任意一个表达式\">| 匹配左右任意一个表达式</a></p>\n<p id=\"(ab)%20%E5%B0%86%E6%8B%AC%E5%8F%B7%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%88%86%E7%BB%84-toc\" style=\"margin-left:80px;\"><a href=\"#%28ab%29%20%E5%B0%86%E6%8B%AC%E5%8F%B7%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%88%86%E7%BB%84\" title=\"(ab) 将括号中字符作为一个分组\">(ab) 将括号中字符作为一个分组</a></p>\n<p id=\"search-toc\" style=\"margin-left:0px;\"><a href=\"#search\" title=\"search\">search</a></p>\n<p id=\"findall-toc\" style=\"margin-left:0px;\"><a href=\"#findall\" title=\"findall\">findall</a></p>\n<p id=\"re.s-toc\" style=\"margin-left:40px;\"><a href=\"#re.s\" title=\"re.s\">re.s</a></p>\n<p id=\"sub-toc\" style=\"margin-left:0px;\"><a href=\"#sub\" title=\"sub\">sub</a></p>\n<p id=\"split-toc\" style=\"margin-left:0px;\"><a href=\"#split\" title=\"split\">split</a></p>\n<p id=\"%E8%B4%AA%E5%A9%AA%E4%B8%8E%E9%9D%9E%E8%B4%AA%E5%A9%AA-toc\" style=\"margin-left:0px;\"><a href=\"#%E8%B4%AA%E5%A9%AA%E4%B8%8E%E9%9D%9E%E8%B4%AA%E5%A9%AA\" title=\"贪婪与非贪婪\">贪婪与非贪婪</a></p>\n<p id=\"%E6%A1%88%E4%BE%8B-toc\" style=\"margin-left:0px;\"><a href=\"#%E6%A1%88%E4%BE%8B\" title=\"案例\">案例</a></p>\n<p id=\"%E5%8C%B9%E9%85%8D%E6%89%8B%E6%9C%BA%E5%8F%B7-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%8C%B9%E9%85%8D%E6%89%8B%E6%9C%BA%E5%8F%B7\" title=\"匹配手机号\">匹配手机号</a></p>\n<p id=\"%E6%8F%90%E5%8F%96%E7%BD%91%E9%A1%B5%E6%BA%90%E7%A0%81%E4%B8%AD%E6%89%80%E6%9C%89%E7%9A%84%E6%96%87%E5%AD%97-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%8F%90%E5%8F%96%E7%BD%91%E9%A1%B5%E6%BA%90%E7%A0%81%E4%B8%AD%E6%89%80%E6%9C%89%E7%9A%84%E6%96%87%E5%AD%97\" title=\"提取网页源码中所有的文字\">提取网页源码中所有的文字</a></p>\n<p id=\"%C2%A0%E6%8F%90%E5%8F%96%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0%E6%8F%90%E5%8F%96%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80\" title=\" 提取图片地址\"> 提取图片地址</a></p>\n<hr id=\"hr-toc\"/>\n<p>正则表达式是对字符串提取的一套规则，我们把这个规则用正则里面的特定语法表达出来，去匹配满足这个规则的字符串。正则表达式具有通用型，不仅python里面可以用，其他的语言也一样适用。</p>\n<p>python中<span style=\"color:#fe2c24;\">re模块</span>提供了正则表达式的功能，常用的有四个方法(match、search、findall)都可以用于匹配字符串</p>\n<h1 id=\"match\"><span style=\"color:#956fe7;\">match</span></h1>\n<h2 id=\"%E5%8C%B9%E9%85%8D%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span style=\"color:#be191c;\">匹配字符串</span></h2>\n<p><strong>re.match()必须从字符串开头匹配！</strong>match方法尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。主要参数如下：</p>\n<pre><code class=\"language-python\">re.match(pattern, string)\n# pattern     匹配的正则表达式\n# string      要匹配的字符串</code></pre>\n<p>例子</p>\n<pre><code class=\"language-python\">import re\na = re.match('test','testasdtest')  \nprint(a)                             #返回一个匹配对象\nprint(a.group())                     #返回test，获取不到则报错\nprint(a.span())           #返回匹配结果的位置，左闭右开区间\nprint(re.match('test','atestasdtest'))  #返回None</code></pre>\n<p><img alt=\"\" height=\"89\" src=\"..\\..\\static\\image\\20211001103807810.png\" width=\"498\"/></p>\n<p>从例子中我们可以看出，re.match()方法返回一个匹配的对象，而不是匹配的内容。如果需要返回内容则需要调用group()。通过调用span()可以获得匹配结果的位置。而如果从起始位置开始没有匹配成功，即便其他部分包含需要匹配的内容，re.match()也会返回None。</p>\n<h2 id=\"%E5%8D%95%E5%AD%97%E7%AC%A6%E5%8C%B9%E9%85%8D\"><span style=\"color:#be191c;\">单字符匹配</span></h2>\n<p>以下字符，都匹配单个字符数据。<span style=\"background-color:#dad5e9;\">且开头（从字符串0位置开始）没匹配到，即使字符串其他部分包含需要匹配的内容，.match也会返回none</span></p>\n<p id=\"%E2%80%8B\"><img alt=\"\" height=\"289\" src=\"..\\..\\static\\image\\20211001104058570.png\" width=\"334\"/></p>\n<h3 id=\".%20%E5%8C%B9%E9%85%8D%E4%BB%BB%E6%84%8F%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6\">. 匹配任意一个字符</h3>\n<p> 使用几个点号就代表几个字符</p>\n<pre><code class=\"language-python\">import re\na = re.match('..','testasdtest')  \nprint(a.group())   #输出te                             \nb = re.match('ab.','testasdtest')  \nprint(b) #返回none，因为表达式是以固定的ab开头然后跟上通配符. 所以必须要先匹配上ab才会往后进行匹配</code></pre>\n<p><img alt=\"\" height=\"47\" src=\"..\\..\\static\\image\\20211001112224757.png\" width=\"238\"/></p>\n<h3 id=\"%C2%A0%5Cd%20%E5%8C%B9%E9%85%8D%E5%8D%95%E4%B8%AA%E6%95%B0%E5%AD%97\">\\d 匹配数字</h3>\n<p> 一个\\d代表一个数字。开头没匹配到，即使字符串其他部分包含需要匹配的内容，.match也会返回none</p>\n<pre><code class=\"language-python\">import re\na = re.match('\\d\\d','23es12testasdtest')  \nprint(a)                               \nb = re.match('\\d\\d\\d','23es12testasdtest')   \nprint(b)   #要求匹配三个数字，匹配不到返回none\nc = re.match('\\d','es12testasdtest')   \nprint(c)   #起始位置没有匹配成功，一样返回none</code></pre>\n<p><img alt=\"\" height=\"69\" src=\"..\\..\\static\\image\\20211001104943436.png\" width=\"479\"/></p>\n<h3 id=\"%C2%A0%5CD%20%E5%8C%B9%E9%85%8D%E9%9D%9E%E6%95%B0%E5%AD%97%E7%9A%84\">\\D 匹配非数字</h3>\n<p>开头没匹配到，即使字符串其他部分包含需要匹配的内容，.match也会返回none</p>\n<pre><code class=\"language-python\">import re\na = re.match('\\D','23es12testasdtest')  \nprint(a)     #开头为数字所以返回none                          \nb = re.match('\\D\\D','*es12testasdtest')   \nprint(b)   #返回*e</code></pre>\n<h3 id=\"%5Cs%20%E5%8C%B9%E9%85%8D%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%EF%BC%8C%E5%A6%82%E7%A9%BA%E7%99%BD%EF%BC%8C%E7%A9%BA%E6%A0%BC%EF%BC%8Ctab%E7%AD%89\">\\s 匹配特殊字符，如空白，空格，tab等</h3>\n<pre><code class=\"language-python\">import re\nprint(re.match('\\s',' 23es 12testasdtest'))   #匹配空格\nprint(re.match('\\s','   23es 12testasdtest')) #匹配tab\nprint(re.match('\\s','\\r23es 12testasdtest')) #匹配\\r换行\nprint(re.match('\\s','23es 12testasdtest')) #返回none</code></pre>\n<p><img alt=\"\" height=\"90\" src=\"..\\..\\static\\image\\20211001110212257.png\" width=\"478\"/></p>\n<h3 id=\"%C2%A0%5CS%20%E5%8C%B9%E9%85%8D%E9%9D%9E%E7%A9%BA%E7%99%BD\">\\S 匹配非空白</h3>\n<pre><code class=\"language-python\">import re\nprint(re.match('\\S',' 23es 12testasdtest'))   #返回none\nprint(re.match('\\S','\\r23es 12testasdtest'))   #none\nprint(re.match('\\S','23es 12testasdtest'))   </code></pre>\n<p><img alt=\"\" height=\"69\" src=\"..\\..\\static\\image\\20211001110418947.png\" width=\"463\"/></p>\n<h3 id=\"%5Cw%20%E5%8C%B9%E9%85%8D%E5%8D%95%E8%AF%8D%E3%80%81%E5%AD%97%E7%AC%A6%EF%BC%8C%E5%A6%82%E5%A4%A7%E5%B0%8F%E5%86%99%E5%AD%97%E6%AF%8D%EF%BC%8C%E6%95%B0%E5%AD%97%EF%BC%8C_%20%E4%B8%8B%E5%88%92%E7%BA%BF\">\\w 匹配单词、字符，如大小写字母，数字，_ 下划线</h3>\n<pre><code class=\"language-python\">import re\nprint(re.match('\\w','23es 12testasdtest'))   #返回none\nprint(re.match('\\w\\w\\w','aA_3es 12testasdtest'))   #返回none\nprint(re.match('\\w\\w\\w','\\n12testasdtest'))   #返回none\n</code></pre>\n<p><img alt=\"\" height=\"65\" src=\"..\\..\\static\\image\\20211001110706683.png\" width=\"482\"/></p>\n<h3 id=\"%C2%A0%5CW%20%E5%8C%B9%E9%85%8D%E9%9D%9E%E5%8D%95%E8%AF%8D%E5%AD%97%E7%AC%A6\">\\W 匹配非单词字符</h3>\n<pre><code class=\"language-python\">import re\nprint(re.match('\\W','23es 12testasdtest'))   #返回none\nprint(re.match('\\W',' 23es 12testasdtest'))   #匹配空格</code></pre>\n<p><img alt=\"\" height=\"47\" src=\"..\\..\\static\\image\\20211001110835914.png\" width=\"486\"/></p>\n<h3 id=\"%5B%20%5D%20%E5%8C%B9%E9%85%8D%5B%20%5D%E4%B8%AD%E5%88%97%E4%B8%BE%E7%9A%84%E5%AD%97%E7%AC%A6\">[ ] 匹配[ ]中列举的字符</h3>\n<p>只允许出现[ ]中列举的字符</p>\n<pre><code class=\"language-python\">import re\nprint(re.match('12[234]','232s12testasdtest'))  #因为开头的12没匹配上，所以直接返回none\nprint(re.match('12[234]','1232s12testasdtest')) #返回123</code></pre>\n<p><img alt=\"\" height=\"51\" src=\"..\\..\\static\\image\\20211001111142606.png\" width=\"501\"/></p>\n<p><strong>[^2345] 不匹配2345中的任意一个</strong></p>\n<pre><code class=\"language-python\">import re\nprint(re.match('12[^234]','232s12testasdtest'))  #因为开头的12没匹配上，所以直接返回none\nprint(re.match('12[^234]','1232s12testasdtest')) #返回none\nprint(re.match('12[^234]','1252s12testasdtest')) #返回125</code></pre>\n<p><strong>[a-z3-5] 匹配a-z或者3-5中的字符</strong></p>\n<pre><code class=\"language-python\">import re\nprint(re.match('12[1-3a-c]','1232b12testasdtest'))  #123\nprint(re.match('12[1-3a-c]','12b2b12testasdtest'))  #12b\nprint(re.match('12[1-3a-c]','12s2b12testasdtest'))  #返回none</code></pre>\n<h2 id=\"%E8%A1%A8%E7%A4%BA%E6%95%B0%E9%87%8F\"><span style=\"color:#be191c;\">表示数量</span></h2>\n<p> 像上面写的那些都是匹配单个字符，如果我们要匹配多个字符的话，只能重复写匹配符。这样显然是不人性化的，所以我们还需要学习表达数量的字符</p>\n<p><img alt=\"\" height=\"248\" src=\"..\\..\\static\\image\\20211001112641902.png\" width=\"500\"/></p>\n<h3 id=\"%C2%A0*%20%E5%87%BA%E7%8E%B00%E6%AC%A1%E6%88%96%E6%97%A0%E6%95%B0%E6%AC%A1\"> * 出现0次或无数次</h3>\n<pre><code class=\"language-python\">import re\na = re.match('..','testasdtest')  \nprint(a.group())   #输出te                             \na = re.match('.*','testasdtest')  \nprint(a.group())   #全部输出</code></pre>\n<p><img alt=\"\" height=\"44\" src=\"..\\..\\static\\image\\20211001113125727.png\" width=\"234\"/></p>\n<pre><code class=\"language-python\">import re\nprint(re.match('a*','aatestasdtest')) #匹配跟随在字母a后面的所有a字符\nprint(re.match('\\d*','23aatestasdtest')) #匹配前面为数字的字符\nprint(re.match('a\\d*','ad23aatestasdtest')) #输出a, 因为*也可以代表0次\n</code></pre>\n<p><img alt=\"\" height=\"74\" src=\"..\\..\\static\\image\\20211001113720584.png\" width=\"501\"/></p>\n<h3 id=\"%2B%20%E8%87%B3%E5%B0%91%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1\">+ 至少出现一次</h3>\n<pre><code class=\"language-python\">import re\nprint(re.match('a+','aaatestasdtest')) #匹配前面为字母a的字符，且a至少有1一个\nprint(re.match('a+','atestasdtest'))   #a\nprint(re.match('a+','caaatestasdtest'))  #none</code></pre>\n<p><img alt=\"\" height=\"70\" src=\"..\\..\\static\\image\\20211001114039233.png\" width=\"483\"/></p>\n<h3 id=\"%3F%201%E6%AC%A1%E6%88%96%E5%88%990%E6%AC%A1\">? 1次或则0次</h3>\n<pre><code class=\"language-python\">import re\nprint(re.match('a?','abatestasdtest')) #匹配a出现0次或者1次数\nprint(re.match('a?','batestasdtest'))  #输出空，因为a可以为0次\nprint(re.match('a?','aaatestasdtest')) #a出现0次或者1次，输出1个a</code></pre>\n<p><img alt=\"\" height=\"69\" src=\"..\\..\\static\\image\\20211001114706629.png\" width=\"468\"/></p>\n<h3 id=\"%7Bm%7D%E6%8C%87%E5%AE%9A%E5%87%BA%E7%8E%B0m%E6%AC%A1\">{m}指定出现m次</h3>\n<pre><code class=\"language-python\">import re\nprint(re.match('to{3}','toooooabatestasdtest')) #匹配t以及跟随在后面的三个ooo\nprint(re.match('to{3}','tooabatestasdtest')) #只有两个0,返回none</code></pre>\n<p><img alt=\"\" height=\"44\" src=\"..\\..\\static\\image\\20211001120037697.png\" width=\"488\"/></p>\n<h3 id=\"%7Bm%2C%7D%20%E8%87%B3%E5%B0%91%E5%87%BA%E7%8E%B0m%E6%AC%A1\">{m,} 至少出现m次</h3>\n<pre><code class=\"language-python\">import re\nprint(re.match('to{3,}','toooooabatestasdtest')) #匹配t以及跟随在后面的三个ooo至少出现3次\nprint(re.match('to{3,}','tooabatestasdtest')) #只有两个0,返回none</code></pre>\n<p><img alt=\"\" height=\"47\" src=\"..\\..\\static\\image\\202110011202208.png\" width=\"518\"/></p>\n<h3 id=\"%7Bm%2Cn%7D%20%E6%8C%87%E5%AE%9A%E4%BB%8Em-n%E6%AC%A1%E7%9A%84%E8%8C%83%E5%9B%B4\">{m,n} 指定从m-n次的范围</h3>\n<pre><code class=\"language-python\">import re\nprint(re.match('to{3,4}','toooabatestasdtest')) #刚好有三个ooo，成功匹配\nprint(re.match('to{3,4}','tooabatestasdtest'))  #只有两个o,返回none\nprint(re.match('to{3,4}','toooooabatestasdtest')) #提取最多四个o</code></pre>\n<p><img alt=\"\" height=\"73\" src=\"..\\..\\static\\image\\20211001120646151.png\" width=\"513\"/></p>\n<h2 id=\"%E5%8C%B9%E9%85%8D%E8%BE%B9%E7%95%8C\">匹配边界</h2>\n<p><img alt=\"\" height=\"188\" src=\"..\\..\\static\\image\\20211001120752216.png\" width=\"346\"/></p>\n<h3 id=\"%24%20%E5%8C%B9%E9%85%8D%E7%BB%93%E5%B0%BE%E5%AD%97%E7%AC%A6\">$ 匹配结尾字符</h3>\n<p>定义整个字符串必须以指定字符串结尾</p>\n<pre><code class=\"language-python\">import re\nprint(re.match('.*d$','2testaabcd')) #字符串必须以d结尾 \nprint(re.match('.*c','2testaabcd'))  #字符串不是以c结尾，返回none</code></pre>\n<p><img alt=\"\" height=\"44\" src=\"..\\..\\static\\image\\20211001123110409.png\" width=\"577\"/> </p>\n<h3 id=\"%5E%20%E5%8C%B9%E9%85%8D%E5%BC%80%E5%A4%B4%E5%AD%97%E7%AC%A6\">^ 匹配开头字符</h3>\n<p>定义整个字符串必须以指定字符开头</p>\n<pre><code class=\"language-python\">import re\nprint(re.match('^2','2stoooabatestas')) #规定必须以2开头，否则none \nprint(re.match('^2s','2stoooabatestas')) #必须以2s开头</code></pre>\n<h3 id=\"%5Cb%20%E5%8C%B9%E9%85%8D%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E8%BE%B9%E7%95%8C\">\\b 匹配一个单词的边界</h3>\n<p>\\b：表示字母数字与非字母数字的边界，非字母数字与字母数字的边界。即下面ve的右边不能有字母和数字</p>\n<pre><code class=\"language-python\">import re\nprint(re.match(r'.*ve\\b','ve.2testaabcd'))  #因为在python中\\代表转义，所以前面加上r消除转义\nprint(re.match(r'.*ve\\b','ve2testaabcd'))</code></pre>\n<p><img alt=\"\" height=\"52\" src=\"..\\..\\static\\image\\20211001180810358.png\" width=\"493\"/></p>\n<h3 id=\"%5CB%20%E5%8C%B9%E9%85%8D%E9%9D%9E%E5%8D%95%E8%AF%8D%E8%BE%B9%E7%95%8C\">\\B 匹配非单词边界</h3>\n<p></p>\n<pre><code class=\"language-python\">import re\nprint(re.match(r'.*ve\\B','2testaavebcdve'))  #ve的右边需要有字母或者数字 \nprint(re.match(r'.*ve\\B','2testaave3bcdve'))</code></pre>\n<p><img alt=\"\" height=\"44\" src=\"..\\..\\static\\image\\20211001181306128.png\" width=\"510\"/></p>\n<h2 id=\"%E5%8C%B9%E9%85%8D%E5%88%86%E7%BB%84\"><span style=\"color:#be191c;\">匹配分组</span></h2>\n<p> <img alt=\"\" height=\"207\" src=\"..\\..\\static\\image\\20211001181501339.png\" width=\"465\"/></p>\n<h3 id=\"%7C%20%E5%8C%B9%E9%85%8D%E5%B7%A6%E5%8F%B3%E4%BB%BB%E6%84%8F%E4%B8%80%E4%B8%AA%E8%A1%A8%E8%BE%BE%E5%BC%8F\">| 匹配左右任意一个表达式</h3>\n<p>只要|两边任意一个表达式符合要求就行</p>\n<p></p>\n<pre><code class=\"language-python\">import re\nprint(re.match(r'\\d[1-9]|\\D[a-z]','2233'))  #匹配|两边任意一个表达式\nprint(re.match(r'\\d[1-9]|\\D[a-z]','as'))  </code></pre>\n<p><img alt=\"\" height=\"47\" src=\"..\\..\\static\\image\\2021100118191728.png\" width=\"485\"/></p>\n<h3 id=\"(ab)%20%E5%B0%86%E6%8B%AC%E5%8F%B7%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%88%86%E7%BB%84\">(ab) 将括号中字符作为一个分组</h3>\n<p></p>\n<p>()中的内容会作为一个元组字符装在元组中</p>\n<pre><code class=\"language-python\">import re\na = re.match(r'&lt;h1&gt;(.*)&lt;h1&gt;','&lt;h1&gt;你好啊&lt;h1&gt;')\nprint(a.group())    #输出匹配的字符\nprint(a.groups())   #会将()中的内容会作为一个元组字符装在元组中\nprint('`````````````')\nb = re.match(r'&lt;h1&gt;(.*)(&lt;h1&gt;)','&lt;h1&gt;你好啊&lt;h1&gt;')\nprint(b.groups()) #有两括号就分为两个元组元素\nprint(b.group(0))  #group中默认是0\nprint(b.group(1))  #你好啊\nprint(b.group(2))  #h1</code></pre>\n<p><img alt=\"\" height=\"164\" src=\"..\\..\\static\\image\\20211001183507965.png\" width=\"358\"/></p>\n<h1 id=\"search\"><span style=\"color:#956fe7;\">search</span></h1>\n<p>和match差不多用法，从字符串中进行搜索</p>\n<pre><code class=\"language-python\">import re\nprint(re.match(r'\\d\\d','123test123test'))\nprint(re.search(r'\\d\\d','123test123test'))</code></pre>\n<p><img alt=\"\" height=\"76\" src=\"..\\..\\static\\image\\2021100118400962.png\" width=\"478\"/></p>\n<h1 id=\"findall\"><span style=\"color:#956fe7;\">findall</span></h1>\n<p>从字面意思上就可以看到，findall是寻找所有能匹配到的字符，并以列表的方式返回</p>\n<pre><code class=\"language-python\">import re\nprint(re.search(r'test','123test123test'))\nprint(re.findall(r'test','123test123test'))  #以列表的方式返回</code></pre>\n<p><img alt=\"\" height=\"63\" src=\"..\\..\\static\\image\\20211001184302380.png\" width=\"417\"/></p>\n<h2 id=\"re.s\">re.s</h2>\n<p>findall中另外一个属性re.S</p>\n<p></p>\n<p>在字符串a中，包含换行符\\n，在这种情况下</p>\n<ul><li>如果不使用re.S参数，则只在每一行内进行匹配，如果一行没有，就换下一行重新开始。</li><li>而使用re.S参数以后，正则表达式会将这个字符串作为一个整体，在整体中进行匹配。</li></ul>\n<p></p>\n<p></p>\n<p></p>\n<p> 如下要寻找test.*123的数据，因为test和123在不同的行，如果没加re.s的话，他会在每一个进行匹配查找而不是将字符串作为一个整体进行查找</p>\n<pre><code class=\"language-python\">import re\na = \"\"\"aaatestaa     \naaaa123\"\"\"\nprint(re.findall(r'test.*123',a))       \nprint(re.findall(r'test.*123',a,re.S))</code></pre>\n<p><img alt=\"\" height=\"83\" src=\"..\\..\\static\\image\\20211001190037530.png\" width=\"339\"/></p>\n<h1 id=\"sub\"><span style=\"color:#956fe7;\">sub</span></h1>\n<p>查找字符串中所有相匹配的数据进行替换</p>\n<blockquote>\n<p>sub(要替换的数据，替换成什么，要替换的数据所在的数据)</p>\n</blockquote>\n<pre><code class=\"language-python\">import re\nprint(re.sub('php','python','php是世界上最好的语言——php'))  \n#输出 \"python是世界上最好的语言——python\"\n</code></pre>\n<h1 id=\"split\"><span style=\"color:#956fe7;\">split</span></h1>\n<p>对字符串进行分割，并返回一个列表</p>\n<p></p>\n<pre><code class=\"language-python\">import re\ns = \"itcase,java:php-php3;html\"\nprint(re.split(r\",\",s))           #以,号进行分割\nprint(re.split(r\",|:|-|;\",s))     #以,或者：或者-或者;进行分割\nprint(re.split(r\",|:|-|%\",s))    #找不到的分隔符就忽略</code></pre>\n<p><img alt=\"\" height=\"95\" src=\"..\\..\\static\\image\\2021100119082568.png\" width=\"494\"/></p>\n<h1 id=\"%E8%B4%AA%E5%A9%AA%E4%B8%8E%E9%9D%9E%E8%B4%AA%E5%A9%AA\"><span style=\"color:#956fe7;\">贪婪与非贪婪</span></h1>\n<p></p>\n<p>python里的数量词默认是贪婪的，总是尝试尽可能的匹配更多的字符。python中使用?号关闭贪婪模式</p>\n<p>如</p>\n<pre><code class=\"language-python\">import re\nprint(re.match(r\"aa\\d+\",\"aa2323\"))   #会尽可能多的去匹配\\d\nprint(re.match(r\"aa\\d+?\",\"aa2323\"))  #尽可能少的去匹配\\d</code></pre>\n<p></p>\n<p><img alt=\"\" height=\"81\" src=\"..\\..\\static\\image\\20211001192655487.png\" width=\"521\"/></p>\n<pre><code class=\"language-python\">import re\ns = \"this is a number 234-235-22-423\"\n# 1.贪婪模式\nresule = re.match(r\"(.+)(\\d+-\\d+-\\d+-\\d)\",s)   #我们本想数字和字母拆解成两个分组\nprint(resule.groups())  #('this is a number 23', '4-235-22-4')但我们发现输出的结果中23的数字竟然被弄到前面去了\n\n#因为+它会尽可能多的进行匹配，\\d，只需要一个4就能满足，所以前面就尽可能多的匹配\n# 2.关闭贪婪模式\n#在数量词后面加上 ?，进入非贪婪模式，尽可能少的进行匹配\nresult = re.match(r\"(.+?)(\\d+-\\d+-\\d+-\\d)\",s)\nprint(result.groups())   #('this is a number ', '234-235-22-4')</code></pre>\n<p><img alt=\"\" height=\"81\" src=\"..\\..\\static\\image\\20211001192036635.png\" width=\"444\"/></p>\n<h1 id=\"%E6%A1%88%E4%BE%8B\"><span style=\"color:#956fe7;\">案例</span></h1>\n<h2 id=\"%E5%8C%B9%E9%85%8D%E6%89%8B%E6%9C%BA%E5%8F%B7\">匹配手机号</h2>\n<p>要求，手机号为11位，必须以1开头，且第二个数字为35678其种一个</p>\n<pre><code class=\"language-python\">import re\nresult = re.match(r'1[35678]\\d{9}','13111111111')\nprint(result.group())   #匹配成功\nresult = re.match(r'1[35678]\\d{9}','12111111111')\nprint(result)     #none，第二位为2\nresult = re.match(r'1[35678]\\d{9}','121111111112')\nprint(result)     #none，有12位</code></pre>\n<p><img alt=\"\" height=\"94\" src=\"..\\..\\static\\image\\20211001193249688.png\" width=\"306\"/></p>\n<h2 id=\"%E6%8F%90%E5%8F%96%E7%BD%91%E9%A1%B5%E6%BA%90%E7%A0%81%E4%B8%AD%E6%89%80%E6%9C%89%E7%9A%84%E6%96%87%E5%AD%97\">提取网页源码中所有的文字</h2>\n<p></p>\n<p>如下，将其中的所有文字提取出来，去掉标签。思路就是运用sub方法，将标签替换为空</p>\n<pre><code class=\"language-html\">s = \"\"\"&lt;div&gt;\n&lt;p&gt;岗位职责:&lt;/p&gt;\n&lt;p&gt;完成推荐算法、数据统计、接口、后台等服务器端相关工作&lt;/p&gt;\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n&lt;P&gt;必备要求:&lt;/p&gt;\n&lt;p&gt;良好的自我驱动力和职业素养，工作积极主动、结果导向&lt;/p&gt;\n&lt;p&gt;&amp;nbsp;&lt;br&gt;&lt;/p&gt;\n&lt;p&gt;技术要求:&lt;/p&gt;\n&lt;p&gt;1、一年以上 Python开发经验，掌握面向对象分析和设计，了解设计模式&lt;/p&gt;\n&lt;p&gt;2、掌握HTTP协议，熟悉NVC、MVVM等概念以及相关wEB开发框架&lt;/p&gt;\n&lt;p&gt;3、掌握关系数据库开发设计，掌握SQL，熟练使用 MySQL/PostgresQL中的一种&lt;br&gt;&lt;/p&gt;\n&lt;p&gt;4、掌握NoSQL、MQ，熟练使用对应技术解决方案&lt;/p&gt;\n&lt;p&gt;5、熟悉 Javascript/cSS/HTML5，JQuery,React.Vue.js&lt;/p&gt;\n&lt;p&gt;&amp;nbsp;&lt;br&gt;&lt;/p&gt;\n&lt;p&gt;加分项:&lt;/p&gt;\n&lt;p&gt;大数据，数理统计，机器学习，sklearn，高性能，大并发。&lt;/p&gt;\n&lt;/div&gt;\"\"\"</code></pre>\n<p>要提取出来最重要的就是关闭贪婪模式，</p>\n<pre><code class=\"language-python\">result = re.sub(r'&lt;.*?&gt;|&amp;nbsp','',s)  #\nprint(result)</code></pre>\n<p><img alt=\"\" height=\"268\" src=\"..\\..\\static\\image\\20211001194122230.png\" width=\"562\"/></p>\n<p> 如果关闭贪婪模式，&lt;xx&gt;中的内容会尽可能多的匹配，只要能够满足后面的&gt;就行，然后&lt;&gt;xxx&lt;&gt;中xxx内容也替换掉了</p>\n<h2 id=\"%C2%A0%E6%8F%90%E5%8F%96%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80\"> 提取图片地址</h2>\n<pre><code class=\"language-python\">import re\ns = \"\"\"&lt;img data-original=\"https://img02.sogoucdn.com/app/a/100520024/36189693dc8db6bd7c0be389f8aaddbd.jpg\" src=\"https://img02.sogoucdn.com/app/a/100520024/36189693dc8db6bd7c0be389f8aaddbd.jpg\" width=\"250\" height=\"375\" .jpg&gt;\"\"\"\nresult1 = re.search(r\"src=\\\"https.*.jpg\\\"\",s)   \nprint(result1.group())\n\nresult2 = re.search(r\"src=\\\"(https.*.jpg)\\\"\",s) #我只是想将网址提取出来，所以httpxx加括号，这样我就可以把它单独提取出来，src则不会出来\nprint(result2.groups()[0])</code></pre>\n<p><img alt=\"\" height=\"50\" src=\"..\\..\\static\\image\\2021100120003865.png\" width=\"660\"/></p>\n<p></p>\n</div>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 1, "javascript": 1, "java": 0, "sql": 1, "php": 1, "time": "2021-10-01 20:05:53", "summary": "目录匹配字符串匹配字符串单字符匹配单字符匹配匹配任意一个字符匹配任意一个字符匹配数字匹配数字匹配非数字匹配非数字匹配特殊字符，如空白，空格，等匹配特殊字符，如空白，空格，等匹配非空白匹配非空白匹配单词"}