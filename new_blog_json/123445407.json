{"blogid": "123445407", "writerAge": "码龄3年", "writerBlogNum": "380", "writerCollect": "392", "writerComment": "33", "writerFan": "168", "writerGrade": "5级", "writerIntegral": "3977", "writerName": "_洋", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123445407.jpg", "writerRankTotal": "7845", "writerRankWeekly": "40468", "writerThumb": "115", "writerVisitNum": "178250", "blog_read_count": "3529", "blog_time": "已于 2022-03-12 17:07:55 修改", "blog_title": "c++随机数", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>计算机的运行是通过代码来进行的，而代码的执行需要确定的数字，即计算机的运行过程是一个确定的过程，计算机的运行过程是一个确定的过程，所以不可能产生一个真正有意义的数字，即计算机只能产生<mark>伪随机数</mark>。</p>\n<p>引用随机数需要引用头文件</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdlib&gt;</span></span>\n</code></pre>\n<p><strong>1.随机数函数</strong><br/> (1) c++提供产生随机数的函数：<br/> rand()，原型为：int rand(void);<br/> rand() 产生一个 [0…RAND_MAX] 之间的数字，RAND_MAX是可以产生的最大随机数（2^31-1），是一个常量：</p>\n<pre><code class=\"prism language-cpp\">  <span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> RAND_MAX Ox7FFF</span>\n</code></pre>\n<p>(2) 使用：<br/> 生成[0…max-1]之间的随机数：</p>\n<pre><code class=\"prism language-cpp\">  <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>max    <span class=\"token comment\">//这个表达式会生成[0..max-1]之间的随机数</span>\n</code></pre>\n<p><strong>2.随机数种子</strong><br/> 直接使用rand()确实可以产生随机数，但是有一个问题：发现每一次 rand（）产生的都是同一个值，不信你试试：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdlib&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这就和我们所说的随机数种子有关了。</p>\n<p>种子函数：srand(seed)；原型为：void srand(unsigned seed);</p>\n<p>如果我们在使用 rand()之前 ，如果不写srand(seed)，那么就会默认调用 srand（1），这就是问题所在：<br/> rand()看似是产生一个随机数，但是实际上就是rand（）在一个<mark>固定的数字序列</mark>不断取值生成所谓的随机数，而这个数字序列是由srand(seed)产生，数字序列的数字大小和排序由seed确定，只要seed相同，生成的随机数列就是一样的。</p>\n<p>比方说，我执行10次rand（）</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdlib&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n   cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n   cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n   cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n   cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n   cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n   cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n   cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n   cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n   cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>发现输出结果都是一样的。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token number\">41</span>\n<span class=\"token number\">18467</span>\n<span class=\"token number\">6334</span>\n<span class=\"token number\">26500</span>\n<span class=\"token number\">19169</span>\n<span class=\"token number\">15724</span>\n<span class=\"token number\">11478</span>\n<span class=\"token number\">29358</span>\n<span class=\"token number\">26962</span>\n<span class=\"token number\">24464</span>\n</code></pre>\n<p>这就说明在我的电脑里 srand(1)产生的数字序列就是<br/> 41<br/> 18467<br/> 6334<br/> 26500<br/> 19169<br/> 15724<br/> 11478<br/> 29358<br/> 26962<br/> 24464<br/> …… ……<br/> 当然，不同的电脑可能是不一样的。<br/> 当产生一个序列之后，只要不更新队列，每调用一次rand()，rand()就会从上到下依次取值给程序使用，但是若途中调用srand(seed)更新队列，rand（）就会从新队列的头再开始依次向下取值。<br/> eg：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdlib&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n   cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n   cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n   cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n   cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n   <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n   cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n   cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n   cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n   cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token number\">41</span>\n<span class=\"token number\">18467</span>\n<span class=\"token number\">6334</span>\n<span class=\"token number\">26500</span>\n<span class=\"token number\">19169</span>\n\n<span class=\"token number\">41</span>\n<span class=\"token number\">18467</span>\n<span class=\"token number\">6334</span>\n<span class=\"token number\">26500</span>\n<span class=\"token number\">19169</span>\n</code></pre>\n<p>过程分析：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ea66bcdf5a584b9aa76d90d8ed250f9b.png\"/><br/> <strong>3.产生真正的随机数</strong></p>\n<p>根据前面的说明我们知道，需要再让seed动起来才能产生近似随机的伪随机数。<br/> 所以我们可以使用系统的时间来做种子，系统的时间是不断变化的，符合我们更菜的要求。<br/> 系统的时间获取：<code>time(NULL)</code>，单位是s<br/> 它的头文件是：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctime&gt;</span></span>\n</code></pre>\n<p>eg：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdlib&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctime&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxs<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>maxs<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>第一次运行</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token number\">17717</span>\n<span class=\"token number\">21613</span>\n<span class=\"token number\">1852</span>\n<span class=\"token number\">28959</span>\n<span class=\"token number\">371</span>\n<span class=\"token number\">10155</span>\n<span class=\"token number\">11222</span>\n<span class=\"token number\">1420</span>\n<span class=\"token number\">9654</span>\n<span class=\"token number\">23944</span>\n<span class=\"token number\">19598</span>\n</code></pre>\n<p>第二次运行</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token number\">17894</span>\n<span class=\"token number\">12203</span>\n<span class=\"token number\">16245</span>\n<span class=\"token number\">17658</span>\n<span class=\"token number\">302</span>\n<span class=\"token number\">25591</span>\n<span class=\"token number\">15455</span>\n<span class=\"token number\">7187</span>\n<span class=\"token number\">16544</span>\n<span class=\"token number\">19629</span>\n<span class=\"token number\">11611</span>\n</code></pre>\n<p>发现是不一样的数据。</p>\n<p><strong>4.问题</strong><br/> 执行如下代码</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdlib&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctime&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>发现执行结果是一样的数据</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token number\">18299</span>\n<span class=\"token number\">18299</span>\n<span class=\"token number\">18299</span>\n<span class=\"token number\">18299</span>\n<span class=\"token number\">18299</span>\n<span class=\"token number\">18299</span>\n<span class=\"token number\">18299</span>\n<span class=\"token number\">18299</span>\n<span class=\"token number\">18299</span>\n<span class=\"token number\">18299</span>\n<span class=\"token number\">18299</span>\n\n</code></pre>\n<p>这是因为<code>srand(seed)</code>每执行一次就更新一次数字序列，并且将rand()的指向放在序列首部；而程序的运行效率很快，不到1s就执行完循环，seed还没来的及改变，每次产生的数字序列一样，所以每个rand都是取序列首部数据，就是一样的了。<br/> 所以说还是不能真正地完全实现随机数的产生。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-12 17:07:55", "summary": "计算机的运行是通过代码来进行的，而代码的执行需要确定的数字，即计算机的运行过程是一个确定的过程，计算机的运行过程是一个确定的过程，所以不可能产生一个真正有意义的数字，即计算机只能产生伪随机数。引用随机"}