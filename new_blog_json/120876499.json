{"blogid": "120876499", "writerAge": "码龄4年", "writerBlogNum": "156", "writerCollect": "208", "writerComment": "13", "writerFan": "19", "writerGrade": "5级", "writerIntegral": "1861", "writerName": "Gavynlee", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_120876499.jpg", "writerRankTotal": "14103", "writerRankWeekly": "31483", "writerThumb": "77", "writerVisitNum": "45804", "blog_read_count": "2892", "blog_time": "于 2021-10-20 22:53:36 发布", "blog_title": "string与int之间转换", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atelier-sulphurpool-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"int__string_0\"></a>一、int 转换为 string</h2>\n<h4><a id=\"1to_string_1\"></a>（1）使用to_string()函数</h4>\n<p>格式：string str = to_string(number);</p>\n<p>需引入头文件:<code>#include&lt;string&gt;</code></p>\n<blockquote>\n<p>string to_string (int val);</p>\n<p>string to_string (long val);</p>\n<p>string to_string (long long val);</p>\n<p>string to_string (unsigned val);</p>\n<p>string to_string (unsigned long val);</p>\n<p>string to_string (unsigned long long val);</p>\n<p>string to_string (float val);</p>\n<p>string to_string (double val);</p>\n<p>string to_string (long double val);</p>\n</blockquote>\n<p>举例：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\t\n\t\n\t<span class=\"token keyword\">int</span> number <span class=\"token operator\">=</span> <span class=\"token number\">1001</span><span class=\"token punctuation\">;</span>\n\tstring str <span class=\"token operator\">=</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> str <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//输出：1001</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"2sstream_40\"></a>（2）采用sstream中定义的字符串流对象来实现</h4>\n<pre><code class=\"prism language-cpp\">ostringstream os<span class=\"token punctuation\">;</span> <span class=\"token comment\">//构造一个输出字符串流，流内容为空 </span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span> \nos <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">//向输出字符串流中输出int整数i的内容 </span>\ncout <span class=\"token operator\">&lt;&lt;</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//利用字符串流的str函数获取流中的内容 </span>\n</code></pre>\n<h2><a id=\"string__int_49\"></a>二、string 转换为 int</h2>\n<h4><a id=\"1stoi_50\"></a>（1）使用stoi()函数</h4>\n<p>（stoi == string to int(个人理解)）<br/> 格式：<code>int number = stoi(str.c_str());</code><br/> 需引入头文件:<code>#include&lt;string&gt;</code></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\t\n\t\n\tstring str <span class=\"token operator\">=</span> <span class=\"token string\">\"1001\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> number <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> number <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//输出：1001</span>\n\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h4><a id=\"2sstream_71\"></a>（2）采用sstream中定义的字符串流对象来实现</h4>\n<pre><code class=\"prism language-cpp\">istringstream <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"12\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//构造输入字符串流，流的内容初始化为“12”的字符串 </span>\n<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> \nis <span class=\"token operator\">&gt;&gt;</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">//从is流中读入一个int整数存入i中</span>\n</code></pre>\n<h4><a id=\"3_78\"></a>（3）隐式转换</h4>\n<p><strong>例题：</strong></p>\n<blockquote>\n<p>一个字符串中只包含字符数字，’(’, ‘)’,<br/> ','几种字符，例如：“4，（2（3，1），（5，（3)))”表示4在第0层，2在第一层，315在第二层，3在第三层，输出结果为每个元素与所在层数的乘积和。</p>\n</blockquote>\n<p>例子：“100，(1,(8)，(1))\" 输出：19，0<em>100+1</em>1+2<em>8 + 2</em>1=19；</p>\n<p><strong>思路</strong>：统计层数和数字即可。<br/> 层数规律：遇左括号加1，遇右括号减1；<br/> 数字规律：每次遇到一个数字后，遍历后面所有的数字，直到遇到非数字。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">MultplySum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> level <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        level <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">')'</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 遇左括号加1，遇右括号减1；</span>\n        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'9'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">// 次遇到一个数字后，遍历后面所有的数字，直到遇到非数字</span>\n            tmp <span class=\"token operator\">=</span> tmp <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 字符转换为数字</span>\n            j<span class=\"token operator\">++</span>\n        <span class=\"token punctuation\">}</span>\n        i <span class=\"token operator\">+=</span> j<span class=\"token punctuation\">;</span>\n        res <span class=\"token operator\">+=</span> tmp <span class=\"token operator\">*</span> level<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-10-20 22:53:36", "summary": "一、转换为使用函数格式：需引入头文件举例：输出：采用中定义的字符串流对象来实现构造一个输出字符串流，流内容为空向输出字符串流中输出整数的内容利用字符串流的函数获取流中的内容二、转换为使用函数个人理解格"}