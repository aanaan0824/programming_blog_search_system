{"blogid": "124217213", "writerAge": "码龄8年", "writerBlogNum": "9", "writerCollect": "56", "writerComment": "0", "writerFan": "8", "writerGrade": "2级", "writerIntegral": "105", "writerName": "imtool", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124217213.jpg", "writerRankTotal": "139382", "writerRankWeekly": "219385", "writerThumb": "11", "writerVisitNum": "11309", "blog_read_count": "6475", "blog_time": "已于 2022-04-16 17:42:00 修改", "blog_title": "uni-app中调取接口的三种方式与封装uni.request()", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>uni-app中调取接口的三种方式与封装uni.request()</h1>\n<h2><a id=\"uniapp_1\"></a>一、uni-app中调取接口的三种方式</h2>\n<p><a id=\"1unirequest_3\"></a>1、uni.request({})</p>\n<pre><code class=\"language-javascript\">uni.request({\n\turl:'/api/getIndexCarousel.jsp',\n\tmethod:'get',\n\tsuccess:res=&gt;{\n\t\tconsole.log(res.data);\n\t\tthis.carouselData = res.data\n\t}\n})\n</code></pre>\n<p><a id=\"2unirequestthen_16\"></a>2、uni.request({}).then()</p>\n<pre><code class=\"language-javascript\">uni.request({\n\turl:'/api/getIndexCarousel.jsp',\n\tmethod:'get',\n}).then((result)=&gt;{\n\tlet [error,res] = result;\n\t//result将返回一个数组[error,{NativeData}]\n\t//NativeData：调取接口后返回的原生数据\n\tif(res.statusCode === 200){\n\t\tthis.carouselData = res.data\n\t}\n\tif(res.statusCode === 404){\n\t\tconsole.log('请求的接口没有找到');\n\t}\n})\n\n</code></pre>\n<p><a id=\"3asyncawait_36\"></a>3、async/await</p>\n<pre><code class=\"language-javascript\">async：用在函数定义的前面\nasync request(){\t//函数体;}\nawait：用在标明了async关键字的函数内部，异步操作的前面。\n</code></pre>\n<pre><code class=\"language-javascript\">onLoad() {\n\tthis.request();\n},\nmethods: {\n\tasync request(){\n\t\tlet result = await uni.request({\n\t\t\turl:'/api/getIndexCarousel.jsp'\n\t\t})\n\t\tconsole.log(result)\n\t\tlet [err,res] = result;\n\t\tif(res.statusCode === 200){\n\t\t\tthis.carouselData = res.data;\n\t\t}\n\t}\n}\n</code></pre>\n<h2><a id=\"unirequest_62\"></a>二、封装uni.request();</h2>\n<p><a id=\"1Vue_64\"></a>1、创建一个对象，将该对象挂在Vue的原型下</p>\n<p>新建<code>@/common/request.js</code>文件</p>\n<p>初步写法（仅供参考）：</p>\n<pre><code class=\"language-javascript\">export default {\n\trequest(options){\n\t\tuni.request({\n\t\t\t...options,\n\t\t\tsuccess:res=&gt;{\n\t\t\t\tconsole.log(res)\n\t\t\t}\n\t\t})\n\t},\n\tget(url,data={},options={}){\n\t\toptions.url=url,\n\t\toptions.data=data,\n\t\toptions.method='get',\n\t\tthis.request(options)\n\t},\n\tpost(url,data={},options={}){\n\t\toptions.url=url,\n\t\toptions.data=data,\n\t\toptions.method='post',\n\t\tthis.request(options)\n\t}\n}\n</code></pre>\n<p>二次更改：</p>\n<pre><code class=\"language-javascript\">export default{\n\t//封装uni.request()：\n\trequest(options){\n\t\treturn new Promise((resolve,reject)=&gt;{\n\t\t\t//书写异步操作的代码\n\t\t\tuni.request({\n\t\t\t\t...options,\n\t\t\t\tsuccess:res=&gt;{\n\t\t\t\t\tif(options.native){\n\t\t\t\t\t\tresolve(res)\t//调取接口后返回的原生数据\t\n\t\t\t\t\t}\n\t\t\t\t\tif(res.statusCode === 200){\n\t\t\t\t\t\tresolve(res.data)\t//异步操作执行成功\n\t\t\t\t\t}else{\n\t\t\t\t\t\tconsole.log('请求的接口没有找到');\n\t\t\t\t\t\treject(res) \t//异步操作执行失败\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t},\n\tget(url,data={},options={}){\n\t\toptions.url=url;\n\t\toptions.data=data;\n\t\toptions.method='get';\n\t\treturn this.request(options)\n\t},\n\tpost(url,data={},options={}){\n\t\toptions.url=url;\n\t\toptions.data=data;\n\t\toptions.method='post';\n\t\treturn this.request(options)\n\t}\n\n}\n</code></pre>\n<p><a id=\"2mainjs_135\"></a>2、进入main.js文件</p>\n<pre><code class=\"language-javascript\">import request from '@/common/request.js';\nVue.prototype.$Z = request;\n</code></pre>\n<p>例：在任意文件中书写下列代码可以调用。<code>this.$Z.get();</code></p>\n<p><a id=\"3_144\"></a>3、在页面中调用</p>\n<pre><code class=\"language-javascript\">//封装uni.request()：\nthis.$Z.get('/api/getIndexCarousel.jsp',{},{\n\tnative:false\n}).then(res=&gt;{\n\t//异步操作成功\n\tconsole.log(res)\n}).catch(res=&gt;{\n\t//异步操作失败\n\tconsole.log(res)\n}).finally(res=&gt;{\n\t//异步操作完成\n});</code></pre>\n<p>uniapp的网络请求方法</p>\n<p><a id=\"more\"></a></p>\n<p>CODE</p>\n<table><tbody><tr><td> <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre> </td><td> <pre>uni.request({\n    url: 'https://www.example.com/request', //仅为示例，并非真实接口地址。\n    data: {\n        name: 'name',\n        age: 18\n    },\n    header: {\n        'custom-header': 'hello' //自定义请求头信息\n    },\n    success: function (res) {\n        console.log(res.data);\n    }\n});\n</pre> </td></tr></tbody></table>\n<p>uniapp网络请求的get和post</p>\n<p>对于 GET 方法，会将数据转换为 query string。例如 { name: ‘name’, age: 18 } 转换后的结果是 name=name&amp;age=18。<br/> 对于 POST 方法且 header[‘content-type’] 为 application/json 的数据，会进行 JSON 序列化。<br/> 对于 POST 方法且 header[‘content-type’] 为 application/x-www-form-urlencoded 的数据，会将数据转换为 query string。</p>\n<p>请求的 header 中 content-type 默认为 application/json</p>\n<h1 id=\"注意-post请求必须加header-‘content-type’\">注意 post请求必须加header[‘content-type’]</h1>\n<p></p>\n<h2>uni-app 封装接口request请求</h2>\n<p>我们知道一个项目中对于前期架构的搭建工作对于后期的制作有多么重要，所以不管做什么项目我们拿到需求后一定要认真的分析一下，要和产品以及后台沟通好，其中尤为重要的一个环节莫过于封装接口请求了。因为前期封装好了，后面我们真的可以实现粘贴复制了。所以今天<a href=\"https://www.aliyue.net/\" title=\"小月博客\">小月博客</a>给大家分享一个在<a href=\"https://www.aliyue.net/9697.html\" title=\"uni-app\">uni-app</a>中如何封装一个request请求。</p>\n<h3>第一步、根目录下新建 config.js 文件</h3>\n<pre><code class=\"language-javascript\">const config = {\nbase_url: '这里可以是生产环境或者测试环境'\n}\nexport { config }</code></pre>\n<p>这里主要配置接口的基本路径</p>\n<h3>第二步、根目录下新建 utils/http.js 文件</h3>\n<pre><code class=\"language-javascript\">import {\n\tconfig\n} from '../config.js'\n\nexport const apiResquest = (prams) =&gt; { //prams 为我们需要调用的接口API的参数 下面会贴具体代码\n\n\t// 判断请求类型\n\tlet headerData = {\n\t\t'content-type': 'application/json'\n\t}\n\n\tlet dataObj = null\n        //因为我们的GET和POST请求结构不同这里我们做处理，大家根据自己后台接口所需结构灵活做调整吧\n\tif (prams.method === \"GET\") {\n\t\theaderData = {\n\t\t\t'content-type': 'application/json',\n\t\t\t'token': uni.getStorageSync('token')\n\t\t}\n\t} else {\n\t\tdataObj = {\n\t\t\t'data': prams.query,\n\t\t\t'token': uni.getStorageSync('token')\n\t\t}\n\t}\n\treturn new Promise((resolve, reject) =&gt; {\n\t\tlet url = config.base_url + prams.url; //请求的网络地址和局地的api地址组合\n\t\tuni.showLoading({\n\t\t\ttitle: '加载中',\n\t\t\tmask: true\n\t\t})\n\t\treturn uni.request({\n\t\t\turl: url,\n\t\t\tdata: dataObj,\n\t\t\tmethod: prams.method,\n\t\t\theader: headerData,\n\t\t\tsuccess: (res) =&gt; {\n\t\t\t\tuni.hideLoading()\n                                //这里是成功的返回码，大家根据自己的实际情况调整\n\t\t\t\tif (res.data.code !== '00000') {\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '获取数据失败:' + res.data.msg,\n\t\t\t\t\t\tduration: 1000,\n\t\t\t\t\t\ticon: \"none\"\n\t\t\t\t\t})\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tresolve(res.data);\n\t\t\t\tconsole.log(res.data)\n\t\t\t},\n\t\t\tfail: (err) =&gt; {\n\t\t\t\treject(err);\n\t\t\t\tconsole.log(err)\n\t\t\t\tuni.hideLoading()\n\t\t\t},\n\t\t\tcomplete: () =&gt; {\n\t\t\t\tconsole.log('请求完成')\n\t\t\t\tuni.hideLoading()\n\t\t\t}\n\t\t});\n\t})\n}</code></pre>\n<h3>第三步、 创建model 层 根目录下新建 models/index.js 文件</h3>\n<p>——-⚠️注意： 这里可以根据自己的项目功能需求分解models 层——-</p>\n<pre><code class=\"language-javascript\">import { apiResquest } from '../utils/http.js'\n\n//POST 请求案例\n\nexport const login = (query) =&gt; {\n\treturn apiResquest({\n\t\turl: '这里是API的地址',\n\t\tmethod: 'POST',\n\t\tquery: {...query}\n\t})\n}\n\n//GET 请求案例可以传递参数也可以不传递\nexport const validateCode  = (query) =&gt; {\n\tlet str = query\n\treturn apiResquest({\n\t\turl: `您的API地址 ?${str}`,\n\t\tmethod: 'GET'\n\t})\n}</code></pre>\n<h3>第四步、页面中调用</h3>\n<pre><code class=\"language-javascript\">import { login } from '../../models/index.js'\n//页面中的 methods 里面就可以直接调用了\nLogin(){\n        //这里可以设置需要传递的参数\n\tlet uid = uni.getStorageSync('userId')\n\tlogin(uid).then((res) =&gt; {\n\t\tconsole.log(res)\n\t}).catch(err =&gt; {\n\t\tconsole.log(err)\n\t})\n}</code></pre>\n<p>以上代码就是完整的接口封装了，真的超级实用，其实网上有很多关于uni-app接口封装的案例，但是个人感觉亲测了好几种，这种是最好用的。分享在这里希望和大家一起交流。</p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p> </p>\n</div>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-04-16 17:42:00", "summary": "中调取接口的三种方式与封装一、中调取接口的三种方式、、将返回一个数组：调取接口后返回的原生数据请求的接口没有找到、：用在函数定义的前面函数体：用在标明了关键字的函数内部，异步操作的前面。二、封装、创建"}