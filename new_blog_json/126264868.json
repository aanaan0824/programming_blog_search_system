{"blogid": "126264868", "writerAge": "码龄1年", "writerBlogNum": "53", "writerCollect": "2667", "writerComment": "1947", "writerFan": "4858", "writerGrade": "6级", "writerIntegral": "5849", "writerName": "老师我作业忘带了", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126264868.jpg", "writerRankTotal": "2756", "writerRankWeekly": "26", "writerThumb": "1767", "writerVisitNum": "157770", "blog_read_count": "2028", "blog_time": "于 2022-08-12 12:54:13 发布", "blog_title": "openCV实践项目：图片文本检测", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>上一期我们通过对实验：银行卡卡号识别 加深了对前面所学openCV图像处理的一些理解</p>\n<p><a href=\"https://blog.csdn.net/suic009/article/details/126212602\" title=\"openCV实践项目：银行卡卡号识别_老师我作业忘带了的博客-CSDN博客\">openCV实践项目：银行卡卡号识别_老师我作业忘带了的博客-CSDN博客</a></p>\n<p>本次图片文本检测相对于要容易一些，内容如下：</p>\n<p></p>\n<h1>一、流程说明</h1>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"409\" src=\"..\\..\\static\\image\\69de0c29672a4306b50ddf0838e8fbb7.png\" width=\"309\"/> <img alt=\"\" height=\"410\" src=\"..\\..\\static\\image\\3123e6f4479b4e09bf75ce7397cf0a9e.png\" width=\"307\"/></p>\n<p>把一个这样的图片，通过仿射变换转换成那样的图片。</p>\n<p>然后再通过 pytesseract 读取图片内容得到图片中的文本就好了。</p>\n<p class=\"img-center\"><img alt=\"\" height=\"494\" src=\"..\\..\\static\\image\\17528cf09b814e87a88d26172bb6b300.png\" width=\"329\"/></p>\n<p>所用到的知识同样大部分来源于入门opencv的第三篇文章： <a href=\"https://blog.csdn.net/suic009/article/details/126167747?spm=1001.2014.3001.5501\" title=\"第三篇文章\">第三篇文章</a></p>\n<p><span style=\"color:#fe2c24;\"><strong>新增知识</strong></span>：仿射变换、ocr识别，下面代码处会有讲解。</p>\n<p>注：本文使用现成图片，轮廓检测较为明显，若是自己拍照，建议让轮廓/边缘清晰一些。</p>\n<p></p>\n<h1>二、tesseract-ocr安装配置</h1>\n<h3>第一步：下载安装 </h3>\n<p>在开始前，我们需要去 <a href=\"https://digi.bib.uni-mannheim.de/tesseract/\" title=\"下载(连接)\">下载(连接)</a> 一下tesseract-ocr，建议选择一个稳定点的版本下载。</p>\n<p>现在完成之后安装的时候点下一步下一步就行了，记得记一下安装路径，下一步要配置环境变量(不配置也可以)</p>\n<p></p>\n<h3>第二步：环境变量</h3>\n<p><strong>注：</strong>即使不配置环境变量也不影响后面在代码中的操作，即这一步可以跳过。不理解环境变量意义的可以看一下这篇文章： <a href=\"https://blog.csdn.net/suic009/article/details/122803865?spm=1001.2014.3001.5502\" title=\"这篇文章\">这篇文章</a></p>\n<p>上一步安装完成后，把路径加进去：</p>\n<p class=\"img-center\"><img alt=\"\" height=\"401\" src=\"..\\..\\static\\image\\efa4c3056b4f45fdbd86abb74c9f581f.png\" width=\"380\"/></p>\n<p>打开cmd，输入tesseract -v 得到版本信息，没报错就说明环境变量配置成功。</p>\n<p class=\"img-center\"><img alt=\"\" height=\"148\" src=\"..\\..\\static\\image\\ae5c3f3b1086408b89aee04477f43847.png\" width=\"1111\"/></p>\n<p>进行测试，比如我桌面上有这样一张图片：</p>\n<p class=\"img-center\"><img alt=\"\" height=\"184\" src=\"..\\..\\static\\image\\49ae9691acd6492c876c22c3e60d3e8f.jpeg\" width=\"601\"/></p>\n<p>在cmd中输入：tesseract 图片路径 输出路径   如：</p>\n<p class=\"img-center\"><img alt=\"\" height=\"233\" src=\"..\\..\\static\\image\\63cdf40c750f44b4aa28052d8618c42b.png\" width=\"834\"/></p>\n<p>注：这个路径不用手打，直接把图片拖进去。默认的话路径就是C:\\Users\\suichu</p>\n<p>然后我的桌面上出现了一个叫result.txt的文本文件：</p>\n<p class=\"img-center\"><img alt=\"\" height=\"456\" src=\"..\\..\\static\\image\\7dfc8f41d80249c48bc46873a1f6d3c8.png\" width=\"664\"/></p>\n<p></p>\n<h3>第三步：下载pytesseract</h3>\n<pre><code class=\"language-python\">pip install pytesseract </code></pre>\n<p>下载完成之后，有一件事要记得注意一下，我们打开对应的python环境的文件，比如我下载在anaconda中，那我的路径就是：C:\\Anaconda01<strong>\\Lib\\site-packages\\pytesseract </strong>总之，打开它：</p>\n<p class=\"img-center\"><img alt=\"\" height=\"201\" src=\"..\\..\\static\\image\\c6f94b2229a44595b48be795246e5eb5.png\" width=\"684\"/></p>\n<p>这里原本是相对路径，把它手动设置成绝对路径，以防报错。</p>\n<p class=\"img-center\"><img alt=\"\" height=\"70\" src=\"..\\..\\static\\image\\3e482002719a4debbe98613c62931813.png\" width=\"429\"/></p>\n<p> 当然 也可以不管，报错了再回来看。</p>\n<pre><code class=\"language-python\">from PIL import Image\nimport pytesseract\n\n# 有时也可以提前加一些灰度转换 二值处理 滤波操作等，效果可能会更好一些。\n\ntext = pytesseract.image_to_string(Image.open(r'./data/image.png'))\nprint(text)</code></pre>\n<p></p>\n<h3>第四步：下载中文包</h3>\n<p>这一步是用来识别中文的，其实安装的时候有一个选项会问你是否下载中文包，不过比较慢还是自己下载吧。</p>\n<p><strong>github下载中文包</strong>：<a href=\"https://github.com/tesseract-ocr/tessdata\" title=\"下载连接\">下载连接</a></p>\n<p class=\"img-center\"><img alt=\"\" height=\"254\" src=\"..\\..\\static\\image\\25ea949cb4ea4858979a8e5aa9ec05eb.png\" width=\"980\"/></p>\n<p>下载完成后放到tessdata里就好</p>\n<p class=\"img-center\"><img alt=\"\" height=\"282\" src=\"..\\..\\static\\image\\2f16000a0ee54a07ae43930529c44ff2.png\" width=\"737\"/></p>\n<p>我们识别下方这句诗：</p>\n<p class=\"img-center\"><img alt=\"\" height=\"154\" src=\"..\\..\\static\\image\\e096c10d80954aaf97d860190f981832.jpeg\" width=\"508\"/></p>\n<pre><code class=\"language-python\">import pytesseract\nfrom PIL import Image\n\n# lang='chi_sim'设置为中文识别\ntext = pytesseract.image_to_string(Image.open('./images/yylm.jpg'), lang='chi_sim')\nprint(text)</code></pre>\n<p class=\"img-center\"><img alt=\"\" height=\"138\" src=\"..\\..\\static\\image\\3c5ad06d616747458a2ae0b34b2985ce.png\" width=\"640\"/></p>\n<p></p>\n<h1>三、代码及原理</h1>\n<h3>定义图片展示函数 和 图片大小设置函数</h3>\n<pre><code class=\"language-python\">import cv2\nimport numpy as np\n\n\ndef cv_show(name, img):\n    cv2.imshow(name, img)\n    cv2.waitKey(0)\n    cv2.destroyAllWindows()\n\ndef resize(image, width=None, height=None, inter=cv2.INTER_AREA):\n    dim = None\n    (h, w) = image.shape[:2]\n    if width is None and height is None:\n        return image\n    if width is None:\n        r = height / float(h)\n        dim = (int(w * r), height)\n    else:\n        r = width / float(w)\n        dim = (width, int(h * r))\n    resized = cv2.resize(image, dim, interpolation=inter)\n    return resized</code></pre>\n<p>前者是为了方便代码执行过程中图片处理得如何了，方便我们观察。</p>\n<p>后者是为了方便我们管理图的大小，比如resize(img, width=500) 或 resize(img, height=500)  可以把大大小小的图片转换成相应比例的统一宽高的图片，方便我们观察。</p>\n<p></p>\n<h3>读取输入图片，做预处理；</h3>\n<pre><code class=\"language-python\"># 读取输入\nimage = cv2.imread(\"./images/receipt.jpg\")\n\n# 统一图片大小\norig = image.copy()\nimage = resize(orig, height=500)\n\n# 记录变化比例 后面会用到\nratio = image.shape[0] / 500.0\n\n# 预处理\ngray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) # 转化为灰度图\ngray = cv2.GaussianBlur(gray, (5, 5), 0) # 高斯滤波降噪\ncv_show('edged',gray)</code></pre>\n<p class=\"img-center\"><img alt=\"\" height=\"404\" src=\"..\\..\\static\\image\\c83b58c8899147a5959203921efc77a4.png\" width=\"538\"/></p>\n<p></p>\n<h3>进行边缘检测；</h3>\n<pre><code class=\"language-python\"># 边缘检测\nedged = cv2.Canny(gray, 75, 200)\ncv_show('edged',edged)</code></pre>\n<p class=\"img-center\"><img alt=\"\" height=\"402\" src=\"..\\..\\static\\image\\87b04b64c05347a19fba269a8455508e.png\" width=\"535\"/></p>\n<p></p>\n<h3>进行轮廓检测；</h3>\n<p>由于我们后面仿射变换需要的只是图片中对象的四个角的坐标，因此轮廓检测时把面积最大的轮廓拿出来就行。 </p>\n<pre><code class=\"language-python\"># 轮廓检测\ncnts = cv2.findContours(edged.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)[0]\n# 根据面积倒序 只要最大的面积那n组。\nneed_cnts = sorted(cnts, key=cv2.contourArea, reverse=True)[:4]# 几组都行，其实倒序后的第一个基本上就是面积最大的。</code></pre>\n<p>此时，第一个轮廓也有可能与第二个轮廓很像或者基本表示同一个轮廓，毕竟图片中的对象不够平整。 我们先一步进行边缘检测，后一步进行轮廓检测。本例中排序完成后，cnts[0]与cnts[1]都是我们想要的那部分。即下一步绿色框中的图片:</p>\n<p></p>\n<h3>遍历轮廓，进行轮廓近似；</h3>\n<p>由于我们上一步取出好几组(基本上第一组就是了)可能的轮廓(每个轮廓是一组点集，因为图像并不平整，所以我们接下来进行<span style=\"color:#ed7976;\">轮廓近似</span>，我们对这几组进行遍历，确定它有四个点就说明是我们想要的答案。 不明白轮廓近似的建议去了解一下。</p>\n<pre><code class=\"language-python\"># 遍历轮廓\nfor c in cnts:\n    # 轮廓近似\n    peri = cv2.arcLength(c, True)\n    approx = cv2.approxPolyDP(c, 0.02 * peri, True)\n    # 近似成4个点的时候就拿出来\n    if len(approx) == 4:\n        screenCnt = approx\n        break\n\ncv2.drawContours(image, [screenCnt], -1, (0, 255, 0), 2)\ncv_show('Outline',image)</code></pre>\n<p class=\"img-center\"><img alt=\"\" height=\"335\" src=\"..\\..\\static\\image\\63ee81e5a445420485f1e35dc7b204c0.png\" width=\"446\"/></p>\n<p>解释一下这一步和上一步：其实就是我们<span style=\"background-color:#ed7976;\">边缘检测</span>后的图片进行<span style=\"background-color:#4da8ee;\">轮廓检测</span>，取出轮廓面积最大的n组轮廓，每个轮廓是一组点集，不一定就是四个点，也可能是100个构成一个轮廓，我们按顺序进行<span style=\"color:#fe2c24;\"><strong>轮廓近似</strong></span>，一般循环到第一遍的时候就可以近似成我们想要的上图的这个轮廓了，我们也就得到了这<span style=\"color:#4da8ee;\"><strong>四个顶点</strong></span>。</p>\n<p></p>\n<h3>透视变换</h3>\n<p class=\"img-center\"><img alt=\"\" height=\"205\" src=\"..\\..\\static\\image\\262bf2d9e5954855a59cf9041c2b5f22.png\" width=\"380\"/></p>\n<p>我们上一步拿到了那四个点的坐标，那个对应的轮廓也不是平行的，我们要做的就是把“它正过来”，平铺在图片上。</p>\n<p>我们首先要确定四个的位置，左上、右上、右下、左上。</p>\n<pre><code class=\"language-python\"># 处理点坐标，返回rect使其顺序为左上，右上，右下，左下\ndef order_points(pts):\n    # 一共4个坐标点\n    rect = np.zeros((4, 2), dtype=\"float32\")\n\n    # 计算左上，右下  左上的x和y都是最小的 右下的x和y都是最大的 \n    s = pts.sum(axis=1)\n    rect[0] = pts[np.argmin(s)]\n    rect[2] = pts[np.argmax(s)]\n\n    # 计算右上和左下  np.diff后一项减前一项\n    diff = np.diff(pts, axis=1)\n    rect[1] = pts[np.argmin(diff)]\n    rect[3] = pts[np.argmax(diff)]\n    return rect</code></pre>\n<p>两点间距离公式，我们计算最长的宽高，知道宽和高了我们就可以自己规定个矩阵，根据<span style=\"color:#fe2c24;\"><strong>变换矩阵</strong></span></p>\n<p>把原图转换为“铺平 铺满”后的图片：</p>\n<pre><code class=\"language-python\">def four_point_transform(image, pts):\n    # 获取输入坐标点\n    rect = order_points(pts)\n    tl, tr, br, bl = rect\n\n    # 两点间距离公式计算输入的w和h值\n    widthTop = np.sqrt(((tr[0] - tl[0]) ** 2) + ((tr[1] - tl[1]) ** 2))\n    widthBot = np.sqrt(((br[0] - bl[0]) ** 2) + ((br[1] - bl[1]) ** 2))\n    # 要最大的 看着方便 下同 \n    maxWidth = max(int(widthTop), int(widthBot))\n\n    heightRight = np.sqrt(((tr[0] - br[0]) ** 2) + ((tr[1] - br[1]) ** 2))\n    heightLeft = np.sqrt(((tl[0] - bl[0]) ** 2) + ((tl[1] - bl[1]) ** 2))\n    maxHeight = max(int(heightRight), int(heightLeft))\n\n    # 变换后对应坐标位置\n    dst = np.array([\n        [0, 0],\n        [maxWidth - 1, 0],\n        [maxWidth - 1, maxHeight - 1],\n        [0, maxHeight - 1]], dtype=\"float32\")   \n    \n    # 计算变换矩阵\n    M = cv2.getPerspectiveTransform(rect, dst)\n    warped = cv2.warpPerspective(image, M, (maxWidth, maxHeight))\n      \n    # 返回变换后结果\n    return warped</code></pre>\n<p>我们执行上方函数：</p>\n<pre><code class=\"language-python\"># 透视变换  记得乘以比例，我们之前为了方便观察统一过大小。\nwarped = four_point_transform(orig, screenCnt.reshape(4, 2) * ratio)\ncv_show('warped',resize(warped, height=650))</code></pre>\n<p class=\"img-center\"><img alt=\"\" height=\"464\" src=\"..\\..\\static\\image\\9f1dcbc636674aada4a479d3b9069a22.png\" width=\"682\"/></p>\n<p></p>\n<h3>最后进行ocr检测</h3>\n<p>对上一步获得的warped进行二值处理，使用pytesseract.image_to_string()即可。</p>\n<pre><code class=\"language-python\">from PIL import Image\nimport pytesseract\n\n\nwarped = cv2.cvtColor(warped, cv2.COLOR_BGR2GRAY)\nref = cv2.threshold(warped, 100, 255, cv2.THRESH_BINARY)[1]\n   \nfilename = \"{}.png\".format('内容')\ncv2.imwrite(filename, gray)\n    \ntext = pytesseract.image_to_string(Image.open(filename))\nprint(text)\nos.remove(filename)</code></pre>\n<p>得到结果</p>\n<p class=\"img-center\"><img alt=\"\" height=\"595\" src=\"..\\..\\static\\image\\4d3f235efbca4a0bac3ce7f0a0841e05.png\" width=\"465\"/></p>\n<p></p>\n<h1>四、完整代码</h1>\n<pre><code class=\"language-python\"># 导入工具包\nimport os\nimport cv2\nimport pytesseract\nimport numpy as np\nfrom PIL import Image\n\n\ndef cv_show(name, img):\n    cv2.imshow(name, img)\n    cv2.waitKey(0)\n    cv2.destroyAllWindows()\n\n\ndef resize(image, width=None, height=None, inter=cv2.INTER_AREA):\n    dim = None\n    (h, w) = image.shape[:2]\n    if width is None and height is None:\n        return image\n    if width is None:\n        r = height / float(h)\n        dim = (int(w * r), height)\n    else:\n        r = width / float(w)\n        dim = (width, int(h * r))\n    resized = cv2.resize(image, dim, interpolation=inter)\n    return resized\n\n\ndef order_points(pts):\n    # 一共4个坐标点\n    rect = np.zeros((4, 2), dtype=\"float32\")\n\n    # 按顺序找到对应坐标0123分别是 左上，右上，右下，左下\n    # 计算左上，右下\n    s = pts.sum(axis=1)\n    rect[0] = pts[np.argmin(s)]\n    rect[2] = pts[np.argmax(s)]\n\n    # 计算右上和左下\n    diff = np.diff(pts, axis=1)\n    rect[1] = pts[np.argmin(diff)]\n    rect[3] = pts[np.argmax(diff)]\n    return rect\n\n\ndef four_point_transform(image, pts):\n    # 获取输入坐标点\n    rect = order_points(pts)\n    tl, tr, br, bl = rect\n\n    # 两点间距离公式计算输入的w和h值\n    widthTop = np.sqrt(((tr[0] - tl[0]) ** 2) + ((tr[1] - tl[1]) ** 2))\n    widthBot = np.sqrt(((br[0] - bl[0]) ** 2) + ((br[1] - bl[1]) ** 2))\n    maxWidth = max(int(widthTop), int(widthBot))\n\n    heightRight = np.sqrt(((tr[0] - br[0]) ** 2) + ((tr[1] - br[1]) ** 2))\n    heightLeft = np.sqrt(((tl[0] - bl[0]) ** 2) + ((tl[1] - bl[1]) ** 2))\n    maxHeight = max(int(heightRight), int(heightLeft))\n\n    # 变换后对应坐标位置\n    dst = np.array([\n        [0, 0],\n        [maxWidth - 1, 0],\n        [maxWidth - 1, maxHeight - 1],\n        [0, maxHeight - 1]], dtype=\"float32\")   \n    \n    # 计算变换矩阵\n    M = cv2.getPerspectiveTransform(rect, dst)\n    warped = cv2.warpPerspective(image, M, (maxWidth, maxHeight))\n      \n    # 返回变换后结果\n    return warped\n\n\n# 读取输入\nimage = cv2.imread(\"./images/receipt.jpg\")\n# 记录比例 后面会用到\nratio = image.shape[0] / 500.0\norig = image.copy()\n# 统一图片大小\nimage = resize(orig, height=500)\n\n# 预处理\ngray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\ngray = cv2.GaussianBlur(gray, (5, 5), 0)\n\n# 边缘检测\nedged = cv2.Canny(gray, 75, 200)\n\n# 轮廓检测\ncnts = cv2.findContours(edged.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)[0]\ncnts = sorted(cnts, key=cv2.contourArea, reverse=True)[:3]\n\n# 遍历轮廓\nfor c in cnts:\n    # 计算轮廓近似\n    peri = cv2.arcLength(c, True)\n    approx = cv2.approxPolyDP(c, 0.02 * peri, True)\n    # 4个点的时候就拿出来\n    if len(approx) == 4:\n        screenCnt = approx\n        break\n\n# 透视变换\nwarped = four_point_transform(orig, screenCnt.reshape(4, 2) * ratio)\n\n\n# 文本检测\ngray = cv2.cvtColor(warped, cv2.COLOR_BGR2GRAY)\n# gray = cv2.threshold(gray, 0, 255,cv2.THRESH_BINARY | cv2.THRESH_OTSU)[1]\ngray = cv2.medianBlur(gray, 3)\nfilename = \"{}.png\".format('finally_picture')\ncv2.imwrite(filename, gray)\n    \ntext = pytesseract.image_to_string(Image.open(filename))\nprint(text)\nos.remove(filename)</code></pre>\n</div>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-12 12:54:13", "summary": "上一期我们通过对实验：银行卡卡号识别加深了对前面所学图像处理的一些理解实践项目：银行卡卡号识别老师我作业忘带了的博客博客实践项目：银行卡卡号识别老师我作业忘带了的博客博客本次图片文本检测相对于要容易一"}