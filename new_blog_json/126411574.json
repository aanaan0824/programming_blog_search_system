{"blogid": "126411574", "writerAge": "码龄8年", "writerBlogNum": "102", "writerCollect": "411", "writerComment": "85", "writerFan": "169", "writerGrade": "4级", "writerIntegral": "1511", "writerName": "ghimi", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126411574.jpg", "writerRankTotal": "12830", "writerRankWeekly": "17542", "writerThumb": "167", "writerVisitNum": "171851", "blog_read_count": "908", "blog_time": "已于 2022-08-18 19:01:42 修改", "blog_title": "MySQL大数据量查询方案", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>在业务开发过程中,有时会遇到大数据量查询的情况,如果将一次性加载全部查询结果的话会导致内存量暴增,甚至出现OOM异常,为了解决这种场景,MySQL中提供了针对此类场景解决方案,本文针对此类场景进行了研究.</p>\n<p>测试表</p>\n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> tb_user_stream<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> tb_user_stream<span class=\"token punctuation\">(</span>\n  id <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">auto_increment</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'主键'</span><span class=\"token punctuation\">,</span>\n  name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'姓名'</span><span class=\"token punctuation\">,</span>\n  address <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token keyword\">engine</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">charset</span><span class=\"token operator\">=</span>utf8<span class=\"token punctuation\">,</span><span class=\"token keyword\">comment</span><span class=\"token operator\">=</span><span class=\"token string\">'用户表'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> tb_user_stream<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>gender<span class=\"token punctuation\">,</span>address<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"male\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"吴巷1号, 营口, 宁 418354\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"female\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"丁栋3号, 大庆, 鄂 151355\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>使用 JDBC 驱动：</p>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>5.1.49<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>Mybatis 版本：</p>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>3.5.10<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<h3><a id=\"_ResultHandler__32\"></a>使用 ResultHandler 接收结果</h3>\n<p>我们平常使用 Mybatis进行对象映射逻辑是这样子的：</p>\n<pre><code class=\"prism language-xml\"><span class=\"token comment\">&lt;!--UserMapper.xml--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>select<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    SELECT * FROM tb_user_stream\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">// UserMapper.java</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>在这样逻辑下，我们得到的返回结果集会被封装成为一个 List 对象，当我们进行大数据量查询时，Mybatis 不会进行额外处理，而是封装为一个大的 List 返回，在这种情况下这样的大 List 就有可能将内存撑爆。</p>\n<p>要想解决这个问题，我们可以调整接口方法，不使用 List 接收结果，而是使用一个 <code>ResultHandler</code> 回调返回结果：</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">// UserMapper.java</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultHandler</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>调用时传入一个 lambda 表达式获取结果：</p>\n<pre><code class=\"prism language-java\">mapper<span class=\"token punctuation\">.</span><span class=\"token function\">handlerFetch50000</span><span class=\"token punctuation\">(</span>resultContext <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">UserDO</span> user <span class=\"token operator\">=</span> resultContext<span class=\"token punctuation\">.</span><span class=\"token function\">getResultObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>相同的 SQL 调整下接口方法。这样由于是逐条处理,所以在 JDBC 取到数据后会立即回调 <code>ResultHandler</code>处理数据,在数据处理完成后重复上述逻辑，已经处理过的数据就可以被GC掉，避免占用大量内存。<br/> <img alt=\"\" src=\"..\\..\\static\\image\\32d6d384bc45411896dc71b488af3f9e.png\"/></p>\n<p>从上面对比图中可以看到，在使用 ResultHandler 接收结果的情况下，内存增长速度更加平缓从而降低了 OOM 的风险。</p>\n<h3><a id=\"Stream__67\"></a>Stream 流式查询</h3>\n<h4><a id=\"_Stream__68\"></a>通过配置实现 Stream 流式查询</h4>\n<p>我下面要讲一些流式查询的实现思路,但是从实现上讲,使用<code>ResultHandler</code> 的方式已经完全能够满足要求了.流式查询的思路不过是将每次取回的批量数据变为取单条数据并且为流式读取的逻辑。</p>\n<p>使用 JDBC 实现流式查询的的条件有两个，首先需要设置 <code>fetchSize</code> 为 <code>Integer.MIN_VALUE</code>,然后设置取值方式为<code>java.sql.ResultSet.TYPE_FORWARD_ONLY</code></p>\n<pre><code class=\"prism language-java\">stmt<span class=\"token punctuation\">.</span><span class=\"token function\">setFetchSize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstmt <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span>ResultSet</span><span class=\"token punctuation\">.</span>TYPE_FORWARD_ONLY<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span>ResultSet</span><span class=\"token punctuation\">.</span>CONCUR_READ_ONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>在 JDBC 中，如果判断上述条件满足，则会将查询方式设置为流式查询：</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">// com.mysql.jdbc.StatementImpl#createStreamingResultSet</span>\n<span class=\"token comment\">/**\n  * We only stream result sets when they are forward-only, read-only, and the\n  * fetch size has been set to Integer.MIN_VALUE\n  * \n  * @return true if this result set should be streamed row at-a-time, rather\n  *         than read all at once.\n  */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">createStreamingResultSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resultSetType <span class=\"token operator\">==</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span>ResultSet</span><span class=\"token punctuation\">.</span>TYPE_FORWARD_ONLY<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resultSetConcurrency <span class=\"token operator\">==</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span>ResultSet</span><span class=\"token punctuation\">.</span>CONCUR_READ_ONLY<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fetchSize <span class=\"token operator\">==</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在 Mybatis 中，我们只需要在编写 SQL 时设置 <code>fetchSize</code> 为 <code>-2147483648</code> 即可满足流式查询的条件：</p>\n<pre><code class=\"prism language-xml\"><span class=\"token comment\">&lt;!--UserMapper.xml--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>select<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">fetchSize</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-2147483648<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    SELECT * FROM tb_user_stream\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>其中 <code>-2147483648</code> 是 <code>Integer.MIN_VALUE</code>。当然，如果我们在设置流式查询后，还是直接使用 <code>List</code> 方式接收结果，则仍然看不到流式查询的效果，一种解决方案就是使用上面提到的 <code>ResultHandler</code> 回调结果：</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">// UserMapper.java</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultHandler</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>或者直接使用注解的方式：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from tb_user_stream\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Options</span><span class=\"token punctuation\">(</span>resultSetType <span class=\"token operator\">=</span> <span class=\"token class-name\">ResultSetType</span><span class=\"token punctuation\">.</span>FORWARD_ONLY<span class=\"token punctuation\">,</span> fetchSize <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@ResultType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserDO</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultHandler</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9aa4b375afcf4dc4b889ade9a851d0df.png\"/></p>\n<p>上图是使用流式查询后堆内存的变化情况，相对于只使用<code>ResultHandler</code>的情况内存占用进一步降低。</p>\n<h4><a id=\"_Cursor__123\"></a>使用游标 Cursor 实现流式查询</h4>\n<p>当然除了上述实现方式外我们还可以直接使用Mybatis 提供的 Cursor 以游标的方式接收结果实现流式查询,这种方式下就不需要我们设置 <code>fetchSize</code>了。</p>\n<pre><code class=\"prism language-java\">在<span class=\"token class-name\">Cursor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserDO</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\907de5e0adc7495c96d8f483df8773d9.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\da39cd4a3d9f4f1ba29bc1452fba1916.png\"/><br/> 使用 Cursor 进行获取结果的方式在 Spring 中可能会遇到问题，这是由于Spring 在没有事务的情况下在查询结果返回后就将不再使用的连接关闭了，导致虽然获取到了 Cursor ，但是在拿到 Cursor 的同时连接池就将对应的连接回收了，最终的 Cursor 可能是一个已关闭的状态。</p>\n<p>要想解决这个问题也很简单，创建一个事务 Transaction ，使得整个查询逻辑都在事务中执行即可。</p>\n<pre><code class=\"prism language-java\">transactionTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>status<span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cursor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserDO</span><span class=\"token punctuation\">&gt;</span></span> cursor <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    cursor<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>或者手动创建一个connection，由开发者自己维护 connection 的关闭：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> sqlSessionTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token class-name\">Cursor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserDO</span><span class=\"token punctuation\">&gt;</span></span> cursor <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cursor<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<br/>\n<h3><a id=\"_155\"></a>参考资料</h3>\n<p><a href=\"https://zhuanlan.zhihu.com/p/421952313\">MySQL如何流式读取千万级大数据</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000042050623\">MySQL 流式查询的用法和坑</a></p>\n<p><a href=\"https://www.jianshu.com/p/c7c5dbe63019\">JDBC操作MySQL（3）—查询（普通、流式、游标）</a></p>\n<p><a href=\"https://www.cnblogs.com/fnlingnzb-learner/p/10245971.html\">聊聊jdbc statement的fetchSize</a></p>\n<p><a href=\"https://docs.oracle.com/middleware/1212/toplink/TLJPA/q_jdbc_fetch_size.htm\">jdbc.fetch-size官网文档</a></p>\n<p><a href=\"https://stackoverflow.com/questions/1318354/what-does-statement-setfetchsizensize-method-really-do-in-sql-server-jdbc-driv\">What does Statement.setFetchSize(nSize) method really do in SQL Server JDBC driver?</a></p>\n<p><a href=\"https://blog.csdn.net/bisal/article/details/82735614\">JDBC读取数据优化-fetch size</a></p>\n<p><a href=\"http://allenn.cn/articles/2016-12/2016-12-13-fetchsize-jdbc-memory/\">Fetch Size 与 JDBC 内存管理</a></p>\n<p><a href=\"https://www.jianshu.com/p/8773d0e786d8\">mybatis之ResultHandler如何使用</a></p>\n<p><a href=\"https://www.huangchaoyu.com/2022/01/11/mybatis%E5%AE%9E%E7%8E%B0%E7%9C%9F%E6%B5%81%E5%BC%8F%E6%9F%A5%E8%AF%A2mysql/\">mybatis实现mysql流式查询的原理</a></p>\n<p><a href=\"https://juejin.cn/post/6844904103600996366\">Mybatis流式查询避免OOM</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-08-18 19:01:42", "summary": "在业务开发过程中有时会遇到大数据量查询的情况如果将一次性加载全部查询结果的话会导致内存量暴增甚至出现异常为了解决这种场景中提供了针对此类场景解决方案本文针对此类场景进行了研究测试表主键姓名用户表吴巷号"}