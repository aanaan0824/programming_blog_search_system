{"blogid": "124000339", "writerAge": "码龄4年", "writerBlogNum": "8", "writerCollect": "122", "writerComment": "26", "writerFan": "164", "writerGrade": "2级", "writerIntegral": "190", "writerName": "椎名mikan", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124000339.jpg", "writerRankTotal": "69889", "writerRankWeekly": "216017", "writerThumb": "41", "writerVisitNum": "17616", "blog_read_count": "4832", "blog_time": "于 2022-04-06 22:35:41 发布", "blog_title": "Unity(C#)读写xml文件详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><a href=\"#xml_1\">什么是xml文件？</a></li><li><a href=\"#xml_3\">xml文件的结构</a></li><li><a href=\"#xml_29\">如何读写xml文件</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"xml_1\"></a>什么是xml文件？</h1>\n<p>xml文件是一种可拓展标记语言，由于简单易用，常被应用程序用于保存数据，unity也是如此，在我们需要控制读写用户的存档时，除了unity自带的PlayerPrefs或者是json，最常用到的就是xml文件，本篇 文章详细介绍unity（c#）中如何操控xml文件</p>\n<h1><a id=\"xml_3\"></a>xml文件的结构</h1>\n<p>先来看看一个完整的xml文件长什么样</p>\n<pre><code class=\"prism language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>student</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>student1</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>椎名<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>age</span><span class=\"token punctuation\">&gt;</span></span>5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>age</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>sex</span><span class=\"token punctuation\">&gt;</span></span>man<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>sex</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>student1</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>student2</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mikan<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>age</span><span class=\"token punctuation\">&gt;</span></span>10<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>age</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>sex</span><span class=\"token punctuation\">&gt;</span></span>woman<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>sex</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>student2</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>student3</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>みかん<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>age</span><span class=\"token punctuation\">&gt;</span></span>15<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>age</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>sex</span><span class=\"token punctuation\">&gt;</span></span>woman<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>sex</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>student3</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>student</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>一、文档声明：从文档可见，第一行的\"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\"为xml文件的声明，意思是文档符合xml1.0规范，默认编码为UTF-8</p>\n<p>二、根节点：这里的&lt;student&gt;为根节点，名称可以随意定义，它是文档里唯一的节点，开始于文档开头，结束于文档最末尾</p>\n<p>三、元素：示例中&lt;age&gt;10&lt;/age&gt;即为xml中的元素，&lt;age&gt;和&lt;/age&gt;分别为开始标签和结束标签，10为元素的内容（注：xml的标签区分大小写，如写成&lt;age&gt;和&lt;/Age&gt;则无法识别）</p>\n<p>四：属性：文档示例\"&lt;student1 name=“椎名”&gt;&lt;/student1&gt;\"中，name即为元素student1的属性，一个元素可以拥有多个属性</p>\n<h1><a id=\"xml_29\"></a>如何读写xml文件</h1>\n<p>大致介绍完xml文件，现在来看看如何在unity中读写xml文件（后面使用的示例还是上面的文档）</p>\n<ul><li>C#要读写xml文件，首先要引用System.Xml</li></ul>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Xml</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>用unity的Resources.Load加载文件</li></ul>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">TextAsset</span> xmlFile <span class=\"token operator\">=</span> Resources<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Load</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TextAsset<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//加载path路径下的xml文件内容</span>\n<span class=\"token class-name\">XmlDocument</span> document <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">XmlDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//创建xml文件的变量</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">LoadXml</span><span class=\"token punctuation\">(</span>xmlFile<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//让xml文件变量读取xmlFile内的文本</span>\n</code></pre>\n<ul><li>解析xml，先获取根节点下的所有子节点</li></ul>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">XmlNodeList</span> nodeList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">SelectSingleNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ChildNodes<span class=\"token punctuation\">;</span> <span class=\"token comment\">//将student节点的子节点加入至nodeList</span>\n</code></pre>\n<ul><li>将nodelist下的某个子节点转化成xml元素，就可以进行读写了</li></ul>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">XmlElement</span> elementStudent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>XmlElement<span class=\"token punctuation\">)</span>nodeList<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//子节点转化为元素</span>\n\nelementStudent<span class=\"token punctuation\">.</span><span class=\"token function\">GetAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取元素的name属性，如果上一行num为0，则这里返回的是\"椎名\"</span>\nelementStudent<span class=\"token punctuation\">.</span>InnerText <span class=\"token comment\">//获取元素的内容</span>\n</code></pre>\n<ul><li>完整代码</li></ul>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Xml</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">XmlTest</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">TextAsset</span> xmlFile <span class=\"token operator\">=</span> Resources<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Load</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TextAsset<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">XmlDocument</span> document <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">XmlDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">LoadXml</span><span class=\"token punctuation\">(</span>xmlFile<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">XmlNodeList</span> nodeList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">SelectSingleNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ChildNodes<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">XmlElement</span> elementStudent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>XmlElement<span class=\"token punctuation\">)</span>nodeList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>elementStudent<span class=\"token punctuation\">.</span><span class=\"token function\">GetAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">XmlElement</span> element <span class=\"token keyword\">in</span> elementStudent<span class=\"token punctuation\">.</span>ChildNodes<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>InnerText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li>将文章开头的完整xml文档放在unity中Resources文件夹里，然后将上面的代码随便挂在一个物体上，运行游戏</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cb4b18dcae6441ce81e4d6eef5ba7c93.png\"/><br/> 可以发现成功将student1的属性\"name\"和student1中的age和sex这两个元素的内容打印出来了<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dd3f0530048a475fa1ce95151238bdba.png\"/><br/> ok，关于如何unity读写xml文件就介绍到这里，感谢大家的阅读。<br/> 如果对unity开发感兴趣，可以加入我们的交流群共同探讨！！<br/> 群号：385075578<br/> 个人QQ：792006305</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-04-06 22:35:41", "summary": "目录什么是文件？文件的结构如何读写文件什么是文件？文件是一种可拓展标记语言，由于简单易用，常被应用程序用于保存数据，也是如此，在我们需要控制读写用户的存档时，除了自带的或者是，最常用到的就是文件，本篇"}