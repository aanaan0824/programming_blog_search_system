{"blogid": "125520025", "writerAge": "码龄13年", "writerBlogNum": "19", "writerCollect": "12", "writerComment": "1", "writerFan": "3", "writerGrade": "3级", "writerIntegral": "533", "writerName": "迷津幻渡", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125520025.jpg", "writerRankTotal": "49759", "writerRankWeekly": "197959", "writerThumb": "3", "writerVisitNum": "31931", "blog_read_count": "946", "blog_time": "已于 2022-06-30 21:37:48 修改", "blog_title": "PHP-FPM 配置文件详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_5\">说明</a></li><li><a href=\"#phpfpmconf__46\">一、php-fpm.conf 文件</a></li><li><ul><li><a href=\"#1Global_Options_47\">1.全局配置（Global Options）</a></li><li><a href=\"#2Pool_Definitions_141\">2.进程池设置（Pool Definitions）</a></li></ul>\n</li><li><a href=\"#wwwconf__153\">二、www.conf 文件</a></li><li><ul><li><a href=\"#1_155\">1.进程池基本设置+监听设置</a></li><li><a href=\"#2process_216\">2.process（干嘛的？）</a></li><li><a href=\"#3process_managerpm_228\">3.进程管理器（process manager，简称pm）</a></li><li><a href=\"#4FPM_FPM_status_page_256\">4.FPM 运行状态页面（FPM status page）</a></li><li><a href=\"#5_269\">5.日志和请求</a></li><li><a href=\"#6_294\">6.其他</a></li></ul>\n</li><li><a href=\"#_337\">总结</a></li><li><ul><li><a href=\"#1_338\">1.初次安装时，需要更改或可以关注的配置项</a></li><li><a href=\"#2_static__dynamic_362\">2.到底选择 static 还数 dynamic？</a></li><li><a href=\"#3_368\">3.慢日志查询</a></li><li><a href=\"#4nginx__unix_sock__phpfpm__381\">4.nginx 通过 unix sock 与 php-fpm 通信</a></li><li><a href=\"#5_FPM_status_page_389\">5.启用 FPM status page</a></li><li><a href=\"#6backlog__394\">6.backlog 配置问题</a></li><li><a href=\"#7pmmax_children__request_terminate_timeout_399\">7.pm.max_children 与 request_terminate_timeout</a></li><li><a href=\"#8_409\">8.其他参考内容</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_5\"></a>说明</h1>\n<p>系统：macOS 10.14.6<br/> PHP：homebrew 安装的 PHP8.0.20 (fpm-fcgi)</p>\n<p>除了有 php-fpm.conf 配置文件外，通常还有其他的 *.conf 配置文件（也可以不要，直接在 php-fpm.conf 配置）用于配置进程池，不同的进程池可以用不同的用户执行，监听不同的端口，处理不同的任务；多个进程池共用一个全局配置。</p>\n<p>关于路径问题，原文是这样说的：<br/> All relative paths in this configuration file are relative to PHP’s install prefix (/usr/local/Cellar/php@8.0/8.0.20). This prefix can be dynamically changed by using the ‘-p’ argument from the command line.<br/> “此配置文件中的所有相对路径都相对于 PHP 的安装前缀。 可以使用命令行中的“-p”参数动态更改此前缀。”。<br/> 通过 phpinfo() 看到编译参数 ‘–prefix=/usr/local/Cellar/php@8.0/8.0.20’ ‘–localstatedir=/usr/local/var’<br/> 所以我的环境下，prefix=/usr/local/Cellar/php@8.0/8.0.20。按照他的说法，如果我使用以下设置：</p>\n<pre><code class=\"prism language-php\">pid <span class=\"token operator\">=</span> run<span class=\"token operator\">/</span>php<span class=\"token operator\">-</span>fpm<span class=\"token operator\">.</span>pid\nerror_log <span class=\"token operator\">=</span> log<span class=\"token operator\">/</span>php<span class=\"token operator\">-</span>fpm<span class=\"token operator\">.</span>log\n</code></pre>\n<p>那么应该出现以下两个文件<br/> /usr/local/Cellar/php@8.0/8.0.20/run/php-fpm.pid<br/> /usr/local/Cellar/php@8.0/8.0.20/log/php-fpm.log<br/> 但实际出现的是以下两个文件<br/> /usr/local/var/run/php-fpm.pid<br/> /usr/local/var/log/php-fpm.log<br/> 也就是说这两个指令的相对地址是/usr/local/var（从结果上对应“–localstatedir”）。看原文说明也特别说明了他们的相对地址是 /usr/local/var：</p>\n<pre><code class=\"prism language-php\"><span class=\"token punctuation\">;</span> Pid file\n<span class=\"token punctuation\">;</span> Note<span class=\"token punctuation\">:</span> the <span class=\"token keyword\">default</span> prefix is <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span><span class=\"token keyword\">var</span>\n<span class=\"token punctuation\">;</span> <span class=\"token keyword\">Default</span> Value<span class=\"token punctuation\">:</span> none\npid <span class=\"token operator\">=</span> run<span class=\"token operator\">/</span>php<span class=\"token operator\">-</span>fpm<span class=\"token operator\">.</span>pid\n\n<span class=\"token punctuation\">;</span> Error log file\n<span class=\"token punctuation\">;</span> <span class=\"token keyword\">If</span> it's set to <span class=\"token string double-quoted-string\">\"syslog\"</span><span class=\"token punctuation\">,</span> log is sent to syslogd instead of being written\n<span class=\"token punctuation\">;</span> into a local file<span class=\"token operator\">.</span>\n<span class=\"token punctuation\">;</span> Note<span class=\"token punctuation\">:</span> the <span class=\"token keyword\">default</span> prefix is <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span><span class=\"token keyword\">var</span>\n<span class=\"token punctuation\">;</span> <span class=\"token keyword\">Default</span> Value<span class=\"token punctuation\">:</span> log<span class=\"token operator\">/</span>php<span class=\"token operator\">-</span>fpm<span class=\"token operator\">.</span>log\nerror_log <span class=\"token operator\">=</span> log<span class=\"token operator\">/</span>php<span class=\"token operator\">-</span>fpm<span class=\"token operator\">.</span>log\n</code></pre>\n<p>不明白是上下文为什么会有这种冲突。难道这两个指令是相对于 localstatedir？不管是他的问题还是我理解的问题，涉及的路径的问题，最好还是直接使用完整路径，放在哪了清晰明了。</p>\n<hr/>\n<h1><a id=\"phpfpmconf__46\"></a>一、php-fpm.conf 文件</h1>\n<h2><a id=\"1Global_Options_47\"></a>1.全局配置（Global Options）</h2>\n<pre><code class=\"prism language-php\">pid <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>run<span class=\"token operator\">/</span>php8<span class=\"token operator\">.</span><span class=\"token number\">0</span><span class=\"token operator\">-</span>fpm<span class=\"token operator\">.</span>pid\n<span class=\"token comment\">#fpm 主进程 pid 存放位置，进程会根据设置自动生成文件</span>\n\nerror_log <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>log<span class=\"token operator\">/</span>php8<span class=\"token operator\">/</span>php<span class=\"token operator\">-</span>fpm<span class=\"token operator\">.</span>log\n<span class=\"token comment\">#错误日志存放位置，设置成本地文件即可，进程会根据设置自动生成文件</span>\n<span class=\"token comment\">#若设置成\"syslog\"，日志将发送给 syslogd。（syslogd 不熟悉可以无视）</span>\n\n针对 error_log <span class=\"token operator\">=</span> syslog  个人建议有明确需要再来关注这两个指令\n<span class=\"token punctuation\">;</span>syslog<span class=\"token operator\">.</span>facility <span class=\"token operator\">=</span> daemon\n<span class=\"token comment\">#用于说明正在记录消息的程序是什么类型，</span>\n<span class=\"token comment\">#syslogd 可以对不同类型的 facility（设备）信息采取不同的处理方式。</span>\n<span class=\"token comment\">#当前环境默认：daemon（可能是因为我们通常是以守护进程的方式在运行 fpm）以下是可以被</span>\n<span class=\"token comment\">#识别的值：</span>\n<span class=\"token comment\">#kern     内核信息，首先通过 klogd 传递；</span>\n<span class=\"token comment\">#user     用户进程；</span>\n<span class=\"token comment\">#mail     邮件；</span>\n<span class=\"token comment\">#daemon   后台进程；</span>\n<span class=\"token comment\">#authpriv 授权信息；</span>\n<span class=\"token comment\">#syslog   系统日志；</span>\n<span class=\"token comment\">#lpr      打印信息；</span>\n<span class=\"token comment\">#news     新闻组信息；</span>\n<span class=\"token comment\">#uucp     由uucp生成的信息</span>\n<span class=\"token comment\">#cron     计划和任务信息。</span>\n<span class=\"token comment\">#mark     syslog 内部功能用于生成时间戳</span>\n<span class=\"token comment\">#local0----local7   与自定义程序使用，例如使用 local5 做为 ssh 功能</span>\n<span class=\"token comment\">#扩展阅读：https://blog.csdn.net/zyy617532750/article/details/74942090</span>\n<span class=\"token punctuation\">;</span>syslog<span class=\"token operator\">.</span>ident <span class=\"token operator\">=</span> php<span class=\"token operator\">-</span>fpm\n<span class=\"token comment\">#当启用了多割进程池，这一项负责区分出不同的进程池消息，所有有多个进程池配置时，此项的值应该也不同</span>\n<span class=\"token comment\">#当前环境默认：php-fpm</span>\n\n<span class=\"token punctuation\">;</span>log_level <span class=\"token operator\">=</span> notice\n<span class=\"token comment\">#记录日志的级别：alert、error、warning、notice、debug。当前环境默认：notice</span>\n\n<span class=\"token punctuation\">;</span>log_limit <span class=\"token operator\">=</span> <span class=\"token number\">1024</span>\n<span class=\"token comment\">#单行字符数。如果该行超出限制，则换行。当前环境默认：1024。</span>\n\n<span class=\"token punctuation\">;</span>log_buffering <span class=\"token operator\">=</span> yes   重日志场景关注此项\n<span class=\"token comment\">#google 翻译：日志缓冲指定日志行是否被缓冲，这意味着该行是在单个写入操作中写入的。</span>\n<span class=\"token comment\">#如果值为 false，则数据直接写入文件描述符。这是一个实验性的选项，可以在一些繁重的日志</span>\n<span class=\"token comment\">#记录场景中潜在地提高日志记录性能和内存使用率。如果记录到 syslog，则忽略此选项，</span>\n<span class=\"token comment\">#因为它必须始终被缓冲。</span>\n<span class=\"token comment\">#当前环境默认：yes</span>\n\n<span class=\"token punctuation\">;</span>emergency_restart_threshold <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">;</span>emergency_restart_interval <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token comment\">#表示在 emergency_restart_interval 所设置的时间内（如设置：60s）出现SIGSEGV</span>\n<span class=\"token comment\">#或者SIGBUS错误的 php-cgi 进程数如果超过了 emergency_restart_threshold 个，</span>\n<span class=\"token comment\">#php-fpm 就会优雅重启。这对于解决加速器共享内存中的意外损坏非常有用。</span>\n<span class=\"token comment\">#这两个选项一般保持默认值。0 表示 “关闭该功能”。 当前环境默认: 0 (关闭)。</span>\n\n<span class=\"token punctuation\">;</span>process_control_timeout <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token comment\">#设置子进程等待主进程对信号做出反应的超时时间。</span>\n<span class=\"token comment\">#默认单位：s(秒)。 默认值：0（不限制超时时间）。</span>\n\n<span class=\"token punctuation\">;</span> process<span class=\"token operator\">.</span>max <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token comment\">#允许 FPM 可 fork 出的进程的最大数。</span>\n<span class=\"token comment\">#当开启了多个进程池并在多个进程池中使用动态 PM（下面有讲）时，</span>\n<span class=\"token comment\">#用来限制全局进程数。谨慎使用。默认：0，没有限制</span>\n\n<span class=\"token punctuation\">;</span> process<span class=\"token operator\">.</span>priority <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">19</span>\n<span class=\"token comment\">#设置子进程的优先级，在 master 进程以 root 用户启动时有效；如果没有设置，子进程会</span>\n<span class=\"token comment\">#继承 master 进程的优先级，值范围-19（最高）到20（最低），默认不设置。</span>\n\ndaemonize <span class=\"token operator\">=</span> yes\n<span class=\"token comment\">#设置 yes，FPM 将在后台运行；</span>\n<span class=\"token comment\">#设置 no，FPM将在前台运行，此模式有助于调试时及时展示错误信息</span>\n\n当程序提示打开文件数量受到限制时，关注这两项。\n在一些并发或多线程情况下，需要突破这个限制。\n<span class=\"token punctuation\">;</span>rlimit_files <span class=\"token operator\">=</span> <span class=\"token number\">1024</span>\n<span class=\"token comment\">#设置 master 进程最多能打开的文件数。nginx.conf中也能看到相关指令。默认为系统的值。</span>\n<span class=\"token punctuation\">;</span>rlimit_core <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token comment\">#设置 master 进程核心 rlimit 限制值；可选 unlimited 或 &gt;=0 的整数，默认为系统的值。</span>\n<span class=\"token comment\">#ulimit -n 和-u 可以查看 linux 的最大进程数和最大文件打开数。</span>\n\n<span class=\"token punctuation\">;</span>events<span class=\"token operator\">.</span>mechanism <span class=\"token operator\">=</span> epoll\n<span class=\"token comment\">#一直不知道干嘛的 默认自动检测</span>\n<span class=\"token comment\"># Specify the event mechanism FPM will use. The following is available:</span>\n<span class=\"token comment\"># - select     (any POSIX os)</span>\n<span class=\"token comment\"># - poll       (any POSIX os)</span>\n<span class=\"token comment\"># - epoll      (linux &gt;= 2.5.44)</span>\n<span class=\"token comment\"># - kqueue     (FreeBSD &gt;= 4.1, OpenBSD &gt;= 2.9, NetBSD &gt;= 2.0)</span>\n<span class=\"token comment\"># - /dev/poll  (Solaris &gt;= 7)</span>\n<span class=\"token comment\"># - port       (Solaris &gt;= 10)</span>\n\n<span class=\"token punctuation\">;</span>systemd_interval <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token comment\">#当 fpm 被设置为系统服务时，多久向服务器报告一次运行报告，单位有s、m、h。</span>\n<span class=\"token comment\">#默认单位s，默认值10。（原来程序也要打卡上班的）默认即可，不用管他。</span>\n\n</code></pre>\n<h2><a id=\"2Pool_Definitions_141\"></a>2.进程池设置（Pool Definitions）</h2>\n<pre><code class=\"prism language-php\"><span class=\"token comment\">#在不同的监听端口和不同的管理选项下可以跑任意数量的池，并没有个数限制；</span>\n<span class=\"token comment\">#进程池的名字用于 标记哪些属于本进程池进程的日志和统计数据。</span>\n<span class=\"token comment\">#像 nginx 可以把不同的虚拟主机的配置写在自己的文件中然后再通过 include 引入一样</span>\n<span class=\"token comment\">#多个进程池配置也可以单独写进不同的文件，引入文件时可以写相对路径，也可以写绝对路径</span>\n<span class=\"token comment\">#默认只有 www.conf</span>\n<span class=\"token keyword\">include</span><span class=\"token operator\">=</span><span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>php<span class=\"token operator\">/</span><span class=\"token number\">8.0</span><span class=\"token operator\">/</span>php<span class=\"token operator\">-</span>fpm<span class=\"token operator\">.</span>d<span class=\"token operator\">/</span><span class=\"token operator\">*</span><span class=\"token operator\">.</span>conf\n</code></pre>\n<blockquote>\n<p>当前环境下 include 引入的文件是 /usr/local/etc/php/8.0/php-fpm.d/www.conf 下文继续介绍 www.conf</p>\n</blockquote>\n<h1><a id=\"wwwconf__153\"></a>二、www.conf 文件</h1>\n<h2><a id=\"1_155\"></a>1.进程池基本设置+监听设置</h2>\n<pre><code class=\"prism language-php\"><span class=\"token punctuation\">[</span>www<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#启动一个名为'www'的进程池，这个值会写入$pool变量，可以在本文中任何指令中使用，</span>\n<span class=\"token comment\">#需要使用进程池名称的地方，都可以直接使用$pool作为代替。</span>\n\n<span class=\"token punctuation\">;</span>prefix <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>path<span class=\"token operator\">/</span>to<span class=\"token operator\">/</span>pools<span class=\"token operator\">/</span><span class=\"token variable\">$pool</span> 使用相对路径时关注下\n<span class=\"token comment\">#本配置文件中的相对路径前缀 prefix，默认不设置，将使用全局默认 prefix</span>\n<span class=\"token comment\">#一般我喜欢设置完整路径</span>\n<span class=\"token comment\">#只影响下面的指令（如果它们设置的是相对路径的话）:</span>\n<span class=\"token comment\"># - 'access.log'</span>\n<span class=\"token comment\"># - 'slowlog'</span>\n<span class=\"token comment\"># - 'listen' (unixsocket)</span>\n<span class=\"token comment\"># - 'chroot'</span>\n<span class=\"token comment\"># - 'chdir'</span>\n<span class=\"token comment\"># - 'php_values'</span>\n<span class=\"token comment\"># - 'php_admin_values'</span>\n\nuser <span class=\"token operator\">=</span> nobody\ngroup <span class=\"token operator\">=</span> nobody\n<span class=\"token comment\">#设置 worker 进程启动时的 user 和 group，必须要设置 user，而 group 在未设置的情</span>\n<span class=\"token comment\">#况下，默认使用 user 所在的 group，默认都是 nobody，一般系统中也会存在这个用户和组</span>\n\nlisten <span class=\"token operator\">=</span> <span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token punctuation\">:</span><span class=\"token number\">9999</span>\n<span class=\"token comment\">#监听的 ip 和端口号。</span>\n<span class=\"token comment\">#可以的格式如下:</span>\n<span class=\"token comment\"># 'ip.add.re.ss:port'    - 通过 a TCP socket 监听 IPv4:port</span>\n<span class=\"token comment\"># '[ip:6:addr:ess]:port' - 通过 a TCP socket 监听 IPv6:port</span>\n<span class=\"token comment\"># 'port'                 - 通过 a TCP socket 监听 以上所有地址类型</span>\n<span class=\"token comment\"># '/path/to/unix/socket' - 通过 a unix socket 监听</span>\n\n<span class=\"token punctuation\">;</span>listen<span class=\"token operator\">.</span>backlog <span class=\"token operator\">=</span> <span class=\"token number\">511</span>       高并发时关注（注释是抄的，我没太理解）\n<span class=\"token comment\">#设置 listen(2) 函数的 backlog 参数值，默认: 511。</span>\n<span class=\"token comment\">#未 accept 处理的 socket 队列大小，-1 on FreeBSD and OpenBSD，其他平台默认</span>\n<span class=\"token comment\">#65535，高并发时重要，合理设置会及时处理排队的请求；太大会积压太多，处理完后 </span>\n<span class=\"token comment\">#nginx 在前面都等超时断开这个和 fpm 的 socket 连接了，就杯具了。</span>\n<span class=\"token comment\">#不要用-1，建议1024以上，最好是2的幂值。</span>\n<span class=\"token comment\">#一个池共用一个 backlog 队列，所有的池进程都去这个队列里 accept 连接。</span>\n<span class=\"token comment\">#最大数量受限于系统配置 cat /proc/sys/net/core/somaxconn，系统配置修改：</span>\n<span class=\"token comment\">#vim /etc/sysctl.conf，增加 net.core.somaxconn = 2000 则最大为2000，</span>\n<span class=\"token comment\">#然后 php 最大的 backlog 可以到2000。</span>\n<span class=\"token comment\">#http://blog.chinaunix.net/uid-28541347-id-5748886.html</span>\n\n针对 unix socket 连接方式的设置\n<span class=\"token punctuation\">;</span>listen<span class=\"token operator\">.</span>owner <span class=\"token operator\">=</span> nobody\n<span class=\"token punctuation\">;</span>listen<span class=\"token operator\">.</span>group <span class=\"token operator\">=</span> nobody\n<span class=\"token punctuation\">;</span>listen<span class=\"token operator\">.</span>mode <span class=\"token operator\">=</span> <span class=\"token number\">0660</span>\n<span class=\"token comment\">#用 unix socket 连接方式时，指定拥有 unix socket 权限的用户，</span>\n<span class=\"token comment\">#默认和运行的用户一样；用 tcp 连接可以注释掉</span>\n<span class=\"token punctuation\">;</span>listen<span class=\"token operator\">.</span>acl_users <span class=\"token operator\">=</span>\n<span class=\"token punctuation\">;</span>listen<span class=\"token operator\">.</span>acl_groups <span class=\"token operator\">=</span>\n<span class=\"token comment\">#当支持 POSIX 访问控制列表时，您可以使用这些选项设置它们，值是用逗号分隔的用户/组</span>\n<span class=\"token comment\">#名称的列表。 设置后，listen.owner 和 listen.group 将被忽略</span>\n \n<span class=\"token punctuation\">;</span>listen<span class=\"token operator\">.</span>allowed_clients <span class=\"token operator\">=</span> <span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>\n<span class=\"token comment\">#设置允许连接 fpm 的地址，多个地址用逗号隔开，如果不配置，则默认任意地址都能来连。</span>\n默认：any，任何主机都可以连接。仅对 tcp socket 有意义。\n<span class=\"token comment\"># Equivalent to the FCGI_WEB_SERVER_ADDRS environment variable </span>\n<span class=\"token comment\"># in the original PHP FCGI (5.2.2+).</span>\n</code></pre>\n<h2><a id=\"2process_216\"></a>2.process（干嘛的？）</h2>\n<pre><code class=\"prism language-php\"><span class=\"token punctuation\">;</span> process<span class=\"token operator\">.</span>priority <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">19</span>       不理解优先级的用途，默认就好\n<span class=\"token comment\">#set nice(2) priority 参数。</span>\n<span class=\"token comment\">#池进程的权限，同样要 master 进程是 root 用户才有效，和全局那个一样，</span>\n<span class=\"token comment\">#不设置的话会继承 master 进程的优先级。默认不设置。</span>\n<span class=\"token punctuation\">;</span> process<span class=\"token operator\">.</span>dumpable <span class=\"token operator\">=</span> no         不知道实际用途，默认就好\n<span class=\"token comment\">#即使进程用户或组不同于主进程用户，也要设置进程可转储标志 (PR_SET_DUMPABLE prctl)。 </span>\n<span class=\"token comment\">#它允许为池用户创建进程核心转储和 ptrace 进程。默认值：no</span>\n\n\n</code></pre>\n<h2><a id=\"3process_managerpm_228\"></a>3.进程管理器（process manager，简称pm）</h2>\n<pre><code class=\"prism language-php\">pm <span class=\"token operator\">=</span> dynamic\n<span class=\"token comment\">#决定进程管理器以哪种算法来控制进程数量，提供了三种算法：</span>\n<span class=\"token comment\">#static  - 固定数量，数值由 pm.max_children 确定;</span>\n<span class=\"token comment\">#dynamic - 子进程的数量是根据以下指令动态设置的。有了这个流程管理，总会有至少1个子进程：</span>\n<span class=\"token comment\">#          pm.max_children      - 可以同时活跃的最大子进程数。</span>\n<span class=\"token comment\">#          pm.start_servers     - fpm 启动时创建的子进程数量（就是初始值）</span>\n<span class=\"token comment\">#          pm.min_spare_servers - 空闲子进程的最小值，低于这个值就会创建新的子进程</span>\n<span class=\"token comment\">#          pm.max_spare_servers - 空闲子进程的最大值，高于这个值就会kill部分子进程</span>\n<span class=\"token comment\">#ondemand - fpm 启动时不创建子进程. 有连接请求时才会创建子进程，涉及指令：</span>\n<span class=\"token comment\">#             pm.max_children         - 可以同时活跃的最大子进程数。</span>\n<span class=\"token comment\">#             pm.process_idle_timeout - 指定空闲进程空闲多久后被killed</span>\n<span class=\"token comment\">#默认dynamic 小内存建议dynamic 8G以上建议static 因为创建和回收进程也是有开销的</span>\n\n<span class=\"token comment\">#pm.max_children 等效于带有 mpm_prefork 的 ApacheMaxClients 指令。等效于原始</span>\n<span class=\"token comment\">#PHP CGI 中的 PHP_FCGI_CHILDREN 环境变量。以下默认值基于没有太多资源的服务器。</span>\npm<span class=\"token operator\">.</span>max_children <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token comment\">#dynamic static ondemand</span>\npm<span class=\"token operator\">.</span>start_servers <span class=\"token operator\">=</span> <span class=\"token number\">2</span>  <span class=\"token comment\">#dynamic </span>\n\t\t\t\t\t  <span class=\"token comment\">#计算公式：(min_spare_servers + max_spare_servers) / 2</span>\npm<span class=\"token operator\">.</span>min_spare_servers <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">#dynamic</span>\npm<span class=\"token operator\">.</span>max_spare_servers <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token comment\">#dynamic</span>\n<span class=\"token punctuation\">;</span>pm<span class=\"token operator\">.</span>process_idle_timeout <span class=\"token operator\">=</span> <span class=\"token number\">10</span>s<span class=\"token punctuation\">;</span> <span class=\"token comment\">#ondemand 默认值10s </span>\n\n<span class=\"token punctuation\">;</span>pm<span class=\"token operator\">.</span>max_requests <span class=\"token operator\">=</span> <span class=\"token number\">500</span>\n<span class=\"token comment\">#每个子进程最大处理500请求就被回收，可防止内存泄露。默认没有开启，进程永远不重启。</span>\n<span class=\"token comment\">#等效于 PHP_FCGI_MAX_REQUESTS</span>\n</code></pre>\n<h2><a id=\"4FPM_FPM_status_page_256\"></a>4.FPM 运行状态页面（FPM status page）</h2>\n<p>非常有意思的功能（默认关闭状态），fpm 提供了获取进程运行状态的入口，并提供了一个静态页面来展示这些数据。文章结尾有设置参考</p>\n<pre><code class=\"prism language-php\"><span class=\"token punctuation\">;</span>pm<span class=\"token operator\">.</span>status_path <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>status <span class=\"token comment\">#负责开启或关闭 FPM status page</span>\n<span class=\"token punctuation\">;</span>pm<span class=\"token operator\">.</span>status_listen <span class=\"token operator\">=</span> <span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token punctuation\">:</span><span class=\"token number\">9001</span> <span class=\"token comment\">#这是干嘛的 反正默认就好了</span>\n\n<span class=\"token punctuation\">;</span>ping<span class=\"token operator\">.</span>path <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>ping\n<span class=\"token comment\">#FPM 监控页面的 ping 网址。 如果没有设置，则无法访问 ping 页面。该页面用于外部</span>\n<span class=\"token comment\">#检测 FPM 是否存活并且可以响应请求。请注意必须以斜线开头 (/)。默认没有设置</span>\n<span class=\"token punctuation\">;</span>ping<span class=\"token operator\">.</span>response <span class=\"token operator\">=</span> pong\n<span class=\"token comment\">#用于定义 ping 请求的返回相应. 返回为 HTTP 200 的 text/plain 格式文本。</span>\n<span class=\"token comment\">#默认值：pong。</span>\n</code></pre>\n<h2><a id=\"5_269\"></a>5.日志和请求</h2>\n<pre><code class=\"prism language-php\"><span class=\"token punctuation\">;</span>access<span class=\"token operator\">.</span>log <span class=\"token operator\">=</span> log<span class=\"token operator\">/</span><span class=\"token variable\">$pool</span><span class=\"token operator\">.</span>access<span class=\"token operator\">.</span>log\n<span class=\"token comment\">#类似于 nginx 的访问日志，fpm 也有访问日志，每次有请求过来都可以记录日志，默认关闭</span>\n<span class=\"token punctuation\">;</span>access<span class=\"token operator\">.</span>format <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"%R - %u %t \\\"%m %r%Q%q\\\" %s %f %{mili}d %{kilo}M %C%%\"</span>\n<span class=\"token comment\">#此处定义访问日志的格式，具体格式参见原文</span>\n\n<span class=\"token punctuation\">;</span>slowlog <span class=\"token operator\">=</span> log<span class=\"token operator\">/</span><span class=\"token variable\">$pool</span><span class=\"token operator\">.</span>log<span class=\"token operator\">.</span>slow   <span class=\"token comment\">#php慢日志 默认关闭</span>\n<span class=\"token punctuation\">;</span>request_slowlog_timeout <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\">#超过指定时间的请求将被写进慢日志 默认0</span>\n<span class=\"token punctuation\">;</span>request_slowlog_trace_depth <span class=\"token operator\">=</span> <span class=\"token number\">20</span> <span class=\"token comment\">#慢日志堆栈信息深度 默认20</span>\n\n<span class=\"token punctuation\">;</span>request_terminate_timeout <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token comment\">#设置单个请求的超时中止时间. 该选项可能会对php.ini设置中的'max_execution_time'因为</span>\n<span class=\"token comment\">#某些特殊原因没有中止运行的脚本有用. 设置为 '0' 表示 'Off'.当经常出现502错误时可以尝试</span>\n<span class=\"token comment\">#更改此选项。默认为0</span>\n\n<span class=\"token punctuation\">;</span>request_terminate_timeout_track_finished <span class=\"token operator\">=</span> no\n<span class=\"token comment\"># 在应用程序调用 'fastcgi_finish_request' 或应用程序完成并调用关闭函数（通过</span>\n<span class=\"token comment\"># register_shutdown_function 注册）后，不使用 'request_terminate_timeout' ini </span>\n<span class=\"token comment\"># 选项设置的超时。 即使在这种情况下，此选项也将启用无条件应用超时限制。 默认no关闭</span>\n\n<span class=\"token comment\">#和上面含义一样 按照上下文的意思 只限制当前线程池 默认系统默认值</span>\n<span class=\"token punctuation\">;</span>rlimit_files <span class=\"token operator\">=</span> <span class=\"token number\">1024</span>\n<span class=\"token punctuation\">;</span>rlimit_core <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n</code></pre>\n<h2><a id=\"6_294\"></a>6.其他</h2>\n<pre><code class=\"prism language-php\"><span class=\"token punctuation\">;</span>chroot <span class=\"token operator\">=</span>\n<span class=\"token comment\">#启动时的chroot目录. 所定义的目录需要是绝对路径. 如果没有设置, 则chroot不被使用.</span>\n<span class=\"token comment\">#默认没有设置</span>\n<span class=\"token punctuation\">;</span>chdir <span class=\"token operator\">=</span> <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>www\n<span class=\"token comment\">#设置启动目录，启动时会自动chdir到该目录. 所定义的目录需要是绝对路径. 默认值: 当前目录，</span>\n<span class=\"token comment\">#或者/目录（chroot时）</span>\n<span class=\"token comment\">#注意：chroot和chdir是两个系统命令，开启这两项时，php-fpm在启动时会执行这两个命令，而参数值就是此处设置的值，至于实际用途不是很理解，暂时保持默认好了。</span>\n\n<span class=\"token punctuation\">;</span>catch_workers_output <span class=\"token operator\">=</span> yes\n<span class=\"token comment\">#重定向运行过程中的stdout和stderr到主要的错误日志文件中. 如果没有设置, stdout </span>\n<span class=\"token comment\">#和 stderr 将会根据FastCGI的规则被重定向到 /dev/null . 默认值: no.</span>\n<span class=\"token punctuation\">;</span>decorate_workers_output <span class=\"token operator\">=</span> yes\n<span class=\"token comment\">#使用前缀和后缀装饰工作输出，其中包含有关写入日志的子节点的信息，以及是否使用了 stdout 或 </span>\n<span class=\"token comment\">#stderr 以及日志级别和时间。 仅当 catch_workers_output 为 yes 时才使用此选项。 </span>\n<span class=\"token comment\">#设置为“no”将输出写入 stdout 或 stderr 的数据。</span>\n\n<span class=\"token punctuation\">;</span>clear_env <span class=\"token operator\">=</span> no <span class=\"token comment\">#清理环境 默认yes 默认即可</span>\n<span class=\"token punctuation\">;</span>security<span class=\"token operator\">.</span>limit_extensions <span class=\"token operator\">=</span> <span class=\"token operator\">.</span>php <span class=\"token operator\">.</span>php3 <span class=\"token operator\">.</span>php4 <span class=\"token operator\">.</span>php5 <span class=\"token operator\">.</span>php7\n<span class=\"token comment\">#设置fpm执行解析的扩展名 默认 .php</span>\n\n<span class=\"token comment\">#传递环境变量，如 LD_LIBRARY_PATH。 所有 $VARIABLEs 都取自当前环境。</span>\n<span class=\"token punctuation\">;</span> <span class=\"token keyword\">Default</span> Value<span class=\"token punctuation\">:</span> clean env\n<span class=\"token punctuation\">;</span>env<span class=\"token punctuation\">[</span><span class=\"token constant\">HOSTNAME</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$HOSTNAME</span>\n<span class=\"token punctuation\">;</span>env<span class=\"token punctuation\">[</span><span class=\"token constant\">PATH</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span>bin<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>bin\n<span class=\"token punctuation\">;</span>env<span class=\"token punctuation\">[</span><span class=\"token constant\">TMP</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>tmp\n<span class=\"token punctuation\">;</span>env<span class=\"token punctuation\">[</span><span class=\"token constant\">TMPDIR</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>tmp\n<span class=\"token punctuation\">;</span>env<span class=\"token punctuation\">[</span><span class=\"token constant\">TEMP</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>tmp\n\n<span class=\"token comment\">#php.ini 的附加设置，只应用于这个进程池。这些设置会覆盖之前在 php.ini 中定义的值。</span>\n<span class=\"token comment\">#此处若定义 disable_functions 或者 disable_classes ，会将新的设置附加在原有值的后面。</span>\n<span class=\"token comment\">#使用 php_admin_value 或者 php_admin_flag 定义的值，不能被 PHP 代码中的 ini_set() 覆盖。</span>\n<span class=\"token punctuation\">;</span>php_admin_value<span class=\"token punctuation\">[</span>sendmail_path<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>sbin<span class=\"token operator\">/</span>sendmail <span class=\"token operator\">-</span>t <span class=\"token operator\">-</span>i <span class=\"token operator\">-</span>f www@my<span class=\"token operator\">.</span>domain<span class=\"token operator\">.</span>com\n<span class=\"token punctuation\">;</span>php_flag<span class=\"token punctuation\">[</span>display_errors<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> off\n<span class=\"token punctuation\">;</span>php_admin_value<span class=\"token punctuation\">[</span>error_log<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>log<span class=\"token operator\">/</span>fpm<span class=\"token operator\">-</span>php<span class=\"token operator\">.</span>www<span class=\"token operator\">.</span>log\n<span class=\"token punctuation\">;</span>php_admin_flag<span class=\"token punctuation\">[</span>log_errors<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> on\n<span class=\"token punctuation\">;</span>php_admin_value<span class=\"token punctuation\">[</span>memory_limit<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">32</span>M\n\n</code></pre>\n<hr/>\n<h1><a id=\"_337\"></a>总结</h1>\n<h2><a id=\"1_338\"></a>1.初次安装时，需要更改或可以关注的配置项</h2>\n<pre><code class=\"prism language-php\">pid <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>run<span class=\"token operator\">/</span>php8<span class=\"token operator\">.</span><span class=\"token number\">0</span><span class=\"token operator\">-</span>fpm<span class=\"token operator\">.</span>pid\nerror_log <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>log<span class=\"token operator\">/</span>php8<span class=\"token operator\">/</span>php<span class=\"token operator\">-</span>fpm<span class=\"token operator\">.</span>log\nlog_level <span class=\"token operator\">=</span> notice\ndaemonize <span class=\"token operator\">=</span> yes\nuser <span class=\"token operator\">=</span> nobody\ngroup <span class=\"token operator\">=</span> nobody\nlisten <span class=\"token operator\">=</span> <span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token punctuation\">:</span><span class=\"token number\">9999</span>\nlisten<span class=\"token operator\">.</span>allowed_clients <span class=\"token operator\">=</span> ipaddress_1<span class=\"token punctuation\">,</span>ipaddress_2<span class=\"token punctuation\">,</span><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>\npm <span class=\"token operator\">=</span> dynamic 同时关注下其他相关设置\npm<span class=\"token operator\">.</span>max_requests <span class=\"token operator\">=</span> <span class=\"token number\">0</span> 按需要选择是否开启\n\n访问日志 默认关闭\naccess<span class=\"token operator\">.</span>log <span class=\"token operator\">=</span> log<span class=\"token operator\">/</span><span class=\"token variable\">$pool</span><span class=\"token operator\">.</span>access<span class=\"token operator\">.</span>log 按需要选择是否开启\naccess<span class=\"token operator\">.</span>format <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"%R - %u %t \\\"%m %r%Q%q\\\" %s %f %{mili}d %{kilo}M %C%%\"</span>\n\n慢日志 默认关闭\nslowlog <span class=\"token operator\">=</span> log<span class=\"token operator\">/</span><span class=\"token variable\">$pool</span><span class=\"token operator\">.</span>log<span class=\"token operator\">.</span>slow\nrequest_slowlog_timeout <span class=\"token operator\">=</span> <span class=\"token number\">15</span>\nrequest_slowlog_trace_depth <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n</code></pre>\n<h2><a id=\"2_static__dynamic_362\"></a>2.到底选择 static 还数 dynamic？</h2>\n<p>一般原则是：动态适合小内存机器，灵活分配进程，省内存。静态适用于大内存机器，动态创建回收进程对服务器资源也是一种消耗。</p>\n<p>如果你的内存很大，有8-20G，按照一个 php-fpm 进程 20M 算，100个就2G内存了，那就可以开启 static 模式。如果你的内存很小，比如才256M，那就要小心设置了，因为你的机器里面的其他的进程也算需要占用内存的，所以设置成 dynamic 是最好的，比如：pm.max_chindren = 8, 占用内存160M左右，而且可以随时变化，对于一般访问量的网站足够了。</p>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/zoutong/p/13523934.html\">文本出处</a></p>\n</blockquote>\n<h2><a id=\"3_368\"></a>3.慢日志查询</h2>\n<p>我们有时候会经常饱受500，502问题困扰。当 Nginx 收到如上错误码时，可以确定后端 php-fpm 解析 php 出了某种问题，比如，执行错误，执行超时。<br/> 这个时候，我们是可以开启慢日志功能的。<br/> slowlog = /usr/local/var/log/php-fpm.log.slow<br/> request_slowlog_timeout = 15s<br/> 当一个请求该设置的超时时间15秒后，就会将对应的PHP调用堆栈信息完整写入到慢日志中。<br/> php-fpm慢日志会记录下进程号，脚本名称，具体哪个文件哪行代码的哪个函数执行时间过长：<br/> [21-Nov-2013 14:30:38] [pool www] pid 11877<br/> script_filename = /usr/local/lnmp/nginx/html/www.quancha.cn/www/fyzb.php<br/> [0xb70fb88c] file_get_contents() /usr/local/lnmp/nginx/html/www.quancha.cn/www/fyzb.php:2<br/> 通过日志，我们就可以知道第2行的 file_get_contents 函数有点问题，这样我们就能追踪问题了。</p>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/zoutong/p/13523934.html\">文本出处</a></p>\n</blockquote>\n<h2><a id=\"4nginx__unix_sock__phpfpm__381\"></a>4.nginx 通过 unix sock 与 php-fpm 通信</h2>\n<p>适用场景：nginx 和 php-fpm 在同一台服务器上，这时可以直接用 unixs ocket 进行进程间通信，不走 tcp 端口通信，可以节约创建连接的时间，从而提高性能。</p>\n<p>1、设置 php-fpm 的 listen 为 /you_path/php-fpm.sock，然后重启 fpm 就会自动创建该文件<br/> 2、nginx 的 fastcgi_pass 参数修改为 unix:/you_path/php-fpm.sock；通过 php-fpm.sock 文件去和 fpm 通信，需要保证该 nginx 有权限访问 php-fpm.sock 文件 。</p>\n<p>sock 文件随便创建到哪里都可以，只要 fpm 有权限在那个目录里写文件，nginx有权限去读就可以。tcp 连接会更稳定，因为有 tcp 协议保证数据的正确性，但是sock 有更少的数据拷贝和上下文切换，更少的资源占用。不过只能在 nginx 和fpm 在同一台机器上才能用 sock。</p>\n<h2><a id=\"5_FPM_status_page_389\"></a>5.启用 FPM status page</h2>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/ffzhihua/article/details/88844259\">相关配置参考此处</a><br/> <a href=\"https://blog.csdn.net/casennew/article/details/120620784\">另一处参考</a><br/> <em>注意：使用file://协议访问 status.html 时，要解决跨域问题</em></p>\n</blockquote>\n<h2><a id=\"6backlog__394\"></a>6.backlog 配置问题</h2>\n<p>一个 fpm 子进程在同一时间只能处理一个请求，如果 backlog 设置得过大，nginx之类的客户端发起的请求一直没有 fpm 子进程进行 accept，nginx 就会直接断掉这个连接，等 fpm 忙过来了再去 accept 的时候，就会发现断开了，于是报错。backlog 设置得过小，访问量大时 fpm 子进程全部处于忙碌状态，backlog 也塞满了，就会拒绝新的连接，此时 nginx 再请求，就会直接被拒。所以需要合理的设置 backlog 参数。</p>\n<p>大部分参数只要系统默认的就可以了，我们只需要知道几个比较重要的参数设置，什么时候用到可以回头查询相关说明</p>\n<h2><a id=\"7pmmax_children__request_terminate_timeout_399\"></a>7.pm.max_children 与 request_terminate_timeout</h2>\n<p>在php-fpm的配置文件中，有两个指令非常重要，就是\"pm.max_children\" 和 “request_terminate_timeout”<br/> 第一个指令\"pm.max_children\" 确定了php-fpm的处理能力，原则上时越多越好，但这个是在内存足够打的前提下，每开启一个php-fpm进程要占用近30M左右的内存</p>\n<p>如果请求访问较多，那么可能会出现502，504错误。对于502错误来说，属于繁忙进程而造成的，对于504来说，就是客户发送的请求在限定的时间内没有得到相应，过多的请求导致“504 Gateway Time-out”。这里也有可能是服务器带宽问题。</p>\n<p>另外一个需要注意的指令\"request_terminate_timeout\"，它决定php-fpm进程的连接/发送和读取的时间，如果设置过小很容易出现\"502 Bad Gateway\" 和 “504 Gateway Time-out”，默认为0，就是说没有启用，不加限制，但是这种设置前提是你的php-fpm足够健康，这个需要根据实际情况加以限定。</p>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_33862644/article/details/86544130\">其他参考页 *php-fpm超时时间设置request_terminate_timeout分析</a></p>\n</blockquote>\n<h2><a id=\"8_409\"></a>8.其他参考内容</h2>\n<blockquote>\n<p><a href=\"https://m.php.cn/article/478798.html\">一分钟了解PHP-FPM配置及使用总结</a></p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 1, "time": "2022-06-30 21:37:48", "summary": "文章目录说明一、文件全局配置进程池设置二、文件进程池基本设置监听设置干嘛的？进程管理器，简称运行状态页面日志和请求其他总结初次安装时，需要更改或可以关注的配置项到底选择还数？慢日志查询通过与通信启用配"}