{"blogid": "124529812", "writerAge": "码龄5年", "writerBlogNum": "172", "writerCollect": "1149", "writerComment": "124", "writerFan": "15578", "writerGrade": "5级", "writerIntegral": "3237", "writerName": "智能之心", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124529812.jpg", "writerRankTotal": "22803", "writerRankWeekly": "2122", "writerThumb": "165", "writerVisitNum": "284173", "blog_read_count": "5158", "blog_time": "已于 2022-06-10 15:51:32 修改", "blog_title": "C++开发UDP通信：使用socket创建UDP服务器端和客户端", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"5BE68891E79A84E4B8BBE9A1B5E8A786E9A291E8AEB2E8A7A35D28httpswwwixiguacomhome15209875431list_entrancesearch29_1\"></a>我的主页视频讲解</h1>\n<h1><a id=\"_2\"></a>博客不经常在线，私信请到西瓜视频搜索“智能之心”，以智能之心赴智能之梦。</h1>\n<h1><a id=\"UDP_4\"></a>UDP通信步骤</h1>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qwdpoiguw/article/details/72985676\">引用UDP通信步骤</a><br/> 一、UDP套接字服务端架构步骤<br/> 1． //初始化套接字环境WSAStartup<br/> 2． //初始化地址和端口<br/> 3． //创建UDP套接字socket<br/> 4． //绑定端口bind<br/> 5． //用recvfrom接收数据<br/> 6． //用sendto发送数据<br/> 7． //退出或者返回第5步继续 二、UDP客户端架构步骤<br/> 1． //初始化套接字环境WSAStartup<br/> 2． //初始化地址和端口<br/> 3． //创建UDP套接字socket<br/> 4． //用sendto发送数据<br/> 5． //用recvfrom接收数据</p>\n</blockquote>\n<h1><a id=\"UDP_Socket_22\"></a>UDP Socket</h1>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/weixin_29809927/article/details/112736542\">引用UDP Socket</a><br/> UDP Socket网络编程的API不多，socket()用于创建套接字，close()用于关闭套接字，sendto()用于发送数据，recvfrom()用于接收数据。</p>\n</blockquote>\n<p>bind()顾名思义是绑定，TCP可以绑定，UDP也可以，bind用于UDP等于告诉内核：这个套接字跟网络远端的一个对子关联上了。以后就可以直接调用send()往那个标识的主机上的进程发送UDP数据报了。<br/> 而没有bind之前，只能通过sendto()接口(通过参数指定目的地)。UDP套接字recv()返回的是UDP数据报的数据部分(Payload)，不包括UDP数据报首部，这是因为UDP首部的字段用于分发或者校验，不需要透传给应用程序。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e4d1f7f5234745eb9a091ff13fb30095.png\"/></p>\n<h1><a id=\"_30\"></a>每个函数含义</h1>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> domain<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> protocol<span class=\"token punctuation\">)</span>  \n</code></pre>\n<ul><li>domain：指明了协议族/域，通常 AF_INET, AF_INET6, AF_LOCAL;</li><li>type：套接口类型，主要 SOCK_STREAM(TCP), SOCK_DGRAM(UDP), SOCK_RAW(原始socket);</li><li>protocol：一般取为0。成功时，返回一个小的非负整数值，与文件描述符类似;</li><li>return：成功0; 失败-1;</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span> my_addr<span class=\"token punctuation\">,</span> socklen_t addrlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n</code></pre>\n<blockquote>\n<p>bind 功能是把一个本地协议地址赋予一个套接字，告知内核去选择该IP地址。</p>\n</blockquote>\n<ul><li>sockfd: 套接字实例;</li><li>my_addr：指向 sockaddr 结构体类型的指针;</li><li>addrlen：表示 my_addr 结构的长度，用 sizeof 操作符获取;</li><li>return：成功0; 失败-1;</li></ul>\n<pre><code class=\"prism language-cpp\">ssize_t <span class=\"token function\">sendto</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">,</span>\n\t\t\t   <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>dest_addr<span class=\"token punctuation\">,</span> socklen_t addrlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul><li>sockfd: 正在监听端口的套接口实例;</li><li>buf：要发送的数组;</li><li>len: 要发送的数组的字节大小;</li><li>flags: 填0即可;</li><li>dest_addr: 指定数据要发送到哪个主机，哪个进程;</li><li>addrlen: 表示 dest_addr 所指向内容的长度;</li><li>return：成功: 数据长度; 失败: -1;</li></ul>\n<pre><code class=\"prism language-cpp\">ssize_t <span class=\"token function\">recvfrom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">,</span>\n                 <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>src_addr<span class=\"token punctuation\">,</span> socklen_t <span class=\"token operator\">*</span>addrlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n</code></pre>\n<ul><li>sockfd: 正在监听端口的套接口实例;</li><li>buf: 要接收的数组;</li><li>len: 要接收的数组的字节大小;</li><li>flags: 填0即可;</li><li>src_addr: 获取接收的数据是从哪个主机地址发来的;</li><li>addrlen: 表示 src_addr 所指向内容的长度;</li><li>返回值: 成功: 数据长度; 失败: -1;</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> soctfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span> addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> addrlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n</code></pre>\n<blockquote>\n<p>connect 功能是用于建立与指定socket的连接，可用可不用。</p>\n</blockquote>\n<ul><li>soctfd：标识一个未连接socket;</li><li>addr：指向要连接套接字的sockaddr结构体的指针;</li><li>addrlen：sockaddr结构体的字节长度;</li><li>return：成功0; 失败-1;<br/> a. 硬错：端口号错误，服务器进程未开启，收到RST，立刻返回ECONNREFUSED;<br/> b. 软错：IP不可达，协议ICMP，比如 no route to host，通常是发送arp请求无响应;</li></ul>\n<p><strong>小工具使用</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 打印ip和port</span>\nstd<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收到一个连接, 其ip: %s, port: %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">inet_ntoa</span><span class=\"token punctuation\">(</span>m_RemoteAddress<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ntohs</span><span class=\"token punctuation\">(</span>m_RemoteAddress<span class=\"token punctuation\">.</span>sin_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-cpp\"><span class=\"token comment\">// 将ip转格式到sin_addr</span>\n<span class=\"token function\">inet_pton</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m_RemoteAddress<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n</code></pre>\n<h1><a id=\"cpp_UDP_97\"></a>cpp_UDP</h1>\n<h2><a id=\"cpp_UDP_99\"></a>一、cpp_UDP客户端</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;winsock2.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;WS2tcpip.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span>  std<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//添加动态库的lib</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"ws2_32.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tSOCKET m_Socket<span class=\"token punctuation\">;</span>\n\tSOCKADDR_IN m_RemoteAddress<span class=\"token punctuation\">;</span> <span class=\"token comment\">//远程地址</span>\n\t<span class=\"token keyword\">int</span> m_RemoteAddressLen<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// socket环境</span>\n\tWSADATA  wsaData<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">WSAStartup</span><span class=\"token punctuation\">(</span><span class=\"token function\">MAKEWORD</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>wsaData<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"WSAStartup error:\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// socket对象</span>\n\tm_Socket <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_DGRAM<span class=\"token punctuation\">,</span> IPPROTO_UDP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_Socket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">closesocket</span><span class=\"token punctuation\">(</span>m_Socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tm_Socket <span class=\"token operator\">=</span> INVALID_SOCKET<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// 远端地址</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> ip <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span>\tport <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n\tm_RemoteAddress<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span>\n\tm_RemoteAddress<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tm_RemoteAddressLen <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>m_RemoteAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">inet_pton</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m_RemoteAddress<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 接收和发送</span>\n\t<span class=\"token keyword\">char</span> recvBuf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> sendBuf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Nice to meet you!\"</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> sendLen <span class=\"token operator\">=</span> <span class=\"token function\">sendto</span><span class=\"token punctuation\">(</span>m_Socket<span class=\"token punctuation\">,</span> sendBuf<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>sendBuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>sockaddr<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>m_RemoteAddress<span class=\"token punctuation\">,</span> m_RemoteAddressLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sendLen <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tstd<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送到远程端连接, 其ip: %s, port: %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">inet_ntoa</span><span class=\"token punctuation\">(</span>m_RemoteAddress<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ntohs</span><span class=\"token punctuation\">(</span>m_RemoteAddress<span class=\"token punctuation\">.</span>sin_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"发送到远程端的信息： \"</span> <span class=\"token operator\">&lt;&lt;</span> sendBuf <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">int</span> recvLen <span class=\"token operator\">=</span> <span class=\"token function\">recvfrom</span><span class=\"token punctuation\">(</span>m_Socket<span class=\"token punctuation\">,</span> recvBuf<span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>recvLen <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tstd<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收到一个连接, 其ip: %s, port: %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">inet_ntoa</span><span class=\"token punctuation\">(</span>m_RemoteAddress<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ntohs</span><span class=\"token punctuation\">(</span>m_RemoteAddress<span class=\"token punctuation\">.</span>sin_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"接收到一个信息： \"</span> <span class=\"token operator\">&lt;&lt;</span> recvBuf <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">closesocket</span><span class=\"token punctuation\">(</span>m_Socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">WSACleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"客户端实验\" src=\"..\\..\\static\\image\\83f573dc14fd4a81a418c995d0eef436.png\"/></p>\n<h2><a id=\"cpp_UDP_169\"></a>二、cpp_UDP服务端</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;winsock2.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;WS2tcpip.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span>  std<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//添加动态库的lib</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"ws2_32.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tSOCKET m_Socket<span class=\"token punctuation\">;</span>\n\tSOCKADDR_IN m_BindAddress<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//绑定地址</span>\n\tSOCKADDR_IN m_RemoteAddress<span class=\"token punctuation\">;</span> <span class=\"token comment\">//远程地址</span>\n\t<span class=\"token keyword\">int</span> m_RemoteAddressLen<span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\">// socket环境</span>\n\tWSADATA  wsaData<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">WSAStartup</span><span class=\"token punctuation\">(</span><span class=\"token function\">MAKEWORD</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>wsaData<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"WSAStartup error:\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// socket对象</span>\n\tm_Socket <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_DGRAM<span class=\"token punctuation\">,</span> IPPROTO_UDP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_Socket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">closesocket</span><span class=\"token punctuation\">(</span>m_Socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tm_Socket <span class=\"token operator\">=</span> INVALID_SOCKET<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// 绑定占用&lt;ip, port&gt;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> ip <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> port <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n\tm_BindAddress<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span>\n\tm_BindAddress<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>S_un<span class=\"token punctuation\">.</span>S_addr <span class=\"token operator\">=</span> <span class=\"token function\">inet_addr</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tm_BindAddress<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>m_Socket<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>sockaddr<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>m_BindAddress<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SOCKADDR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> SOCKET_ERROR<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">closesocket</span><span class=\"token punctuation\">(</span>m_Socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tm_Socket <span class=\"token operator\">=</span> INVALID_SOCKET<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// 接收和发送</span>\n\t<span class=\"token keyword\">char</span> recvBuf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> sendBuf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Nice to meet you, too!\"</span><span class=\"token punctuation\">;</span>\n\tm_RemoteAddressLen <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>m_RemoteAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tstd<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已设置绑定占用的连接, 其ip: %s, port: %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">inet_ntoa</span><span class=\"token punctuation\">(</span>m_BindAddress<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ntohs</span><span class=\"token punctuation\">(</span>m_BindAddress<span class=\"token punctuation\">.</span>sin_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">int</span> recvLen <span class=\"token operator\">=</span> <span class=\"token function\">recvfrom</span><span class=\"token punctuation\">(</span>m_Socket<span class=\"token punctuation\">,</span> recvBuf<span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>sockaddr<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>m_RemoteAddress<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m_RemoteAddressLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>recvLen <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tstd<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收到一个连接, 其ip: %s, port: %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">inet_ntoa</span><span class=\"token punctuation\">(</span>m_RemoteAddress<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ntohs</span><span class=\"token punctuation\">(</span>m_RemoteAddress<span class=\"token punctuation\">.</span>sin_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"接收到一个信息： \"</span> <span class=\"token operator\">&lt;&lt;</span> recvBuf <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">int</span> sendLen <span class=\"token operator\">=</span> <span class=\"token function\">sendto</span><span class=\"token punctuation\">(</span>m_Socket<span class=\"token punctuation\">,</span> sendBuf<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>sendBuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>sockaddr<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>m_RemoteAddress<span class=\"token punctuation\">,</span> m_RemoteAddressLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sendLen <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"发送到远程端的信息： \"</span> <span class=\"token operator\">&lt;&lt;</span> sendBuf <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">closesocket</span><span class=\"token punctuation\">(</span>m_Socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">WSACleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"服务端实验\" src=\"..\\..\\static\\image\\9a83340d2ed7411fad5519123d48c2cc.png\"/></p>\n<p><a href=\"https://blog.csdn.net/xunmeng2002/article/details/121145017\">C++ UDP 封装示例</a><br/> <a href=\"https://blog.csdn.net/qq_29344757/article/details/71616748\">udp: connect+send 或 sendto</a><br/> <a href=\"https://blog.csdn.net/weixin_44522306/article/details/117734571\">UDP函数详解</a><br/> <a href=\"https://blog.csdn.net/u010477528/article/details/88616395\">在MFC全局使用UDP</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-06-10 15:51:32", "summary": "我的主页视频讲解博客不经常在线，私信请到西瓜视频搜索智能之心，以智能之心赴智能之梦。通信步骤引用通信步骤一、套接字服务端架构步骤初始化套接字环境初始化地址和端口创建套接字绑定端口用接收数据用发送数据退"}