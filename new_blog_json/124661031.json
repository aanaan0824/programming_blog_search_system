{"blogid": "124661031", "writerAge": "码龄1年", "writerBlogNum": "41", "writerCollect": "128", "writerComment": "11", "writerFan": "12", "writerGrade": "3级", "writerIntegral": "443", "writerName": "前端路啊", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124661031.jpg", "writerRankTotal": "70534", "writerRankWeekly": "367427", "writerThumb": "21", "writerVisitNum": "27788", "blog_read_count": "4005", "blog_time": "于 2022-05-09 19:00:00 发布", "blog_title": "箭头函数与普通函数的区别？", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h2>1. 箭头函数比普通函数更加简洁</h2>\n<p>如果没有参数，就直接写一个空括号即可</p>\n<p>如果只有一个参数，可以省去参数的括号</p>\n<p>如果有多个参数，用逗号分割</p>\n<p>如果函数体的返回值只有一句，可以省略大括号</p>\n<h2>2. 箭头函数没有自己的this</h2>\n<p>箭头函数不会创建自己的this， 所以它没有自己的this，它只会在自己作用域的上一层继承this。所以箭头函数中this的指向在它在定义时已经确定了，之后不会改变。</p>\n<h2>3. 箭头函数继承来的this指向永远不会改变</h2>\n<pre><code class=\"language-javascript\">var id = 'GLOBAL';\nvar obj = {\n  id: 'OBJ',\n  a: function(){\n    console.log(this.id);\n  },\n  b: () =&gt; {\n    console.log(this.id);\n  }\n};\nobj.a();    // 'OBJ'\nobj.b();    // 'GLOBAL'\nnew obj.a()  // undefined\nnew obj.b()  // Uncaught TypeError: obj.b is not a constructor\n</code></pre>\n<p>对象obj的方法b是使用箭头函数定义的，这个函数中的this就永远指向它定义时所处的全局执行环境中的this，即便这个函数是作为对象obj的方法调用，this依旧指向Window对象。需要注意，定义对象的大括号<strong>{ }</strong>是无法形成一个单独的执行环境的，它依旧是处于全局执行环境中。</p>\n<h2>4. call()、apply()、bind()等方法不能改变箭头函数中this的指向 </h2>\n<pre><code class=\"language-javascript\">var id = 'Global';\nlet fun1 = () =&gt; {\n    console.log(this.id)\n};\nfun1();                     // 'Global'\nfun1.call({id: 'Obj'});     // 'Global'\nfun1.apply({id: 'Obj'});    // 'Global'\nfun1.bind({id: 'Obj'})();   // 'Global'\n</code></pre>\n<h2>5. 箭头函数不能作为构造函数使用 </h2>\n<p>由于箭头函数时没有自己的this，且this指向外层的执行环境，且不能改变指向，所以不能当做构造函数使用。</p>\n<h2>6. 箭头函数没有自己的arguments</h2>\n<p>箭头函数没有自己的arguments对象。在箭头函数中访问arguments实际上获得的是它外层函数的arguments值。</p>\n<h2>7. 箭头函数没有prototype</h2>\n<h2>8. 箭头函数的this指向哪⾥？</h2>\n<p>箭头函数不同于传统JavaScript中的函数，箭头函数并没有属于⾃⼰的this，它所谓的this是捕获其所在上下⽂的 this 值，作为⾃⼰的 this 值，并且由于没有属于⾃⼰的this，所以是不会被new调⽤的，这个所谓的this也不会被改变。</p>\n<p></p>\n</div>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-05-09 19:00:00", "summary": "箭头函数比普通函数更加简洁如果没有参数，就直接写一个空括号即可如果只有一个参数，可以省去参数的括号如果有多个参数，用逗号分割如果函数体的返回值只有一句，可以省略大括号箭头函数没有自己的箭头函数不会创建"}