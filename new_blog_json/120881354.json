{"blogid": "120881354", "writerAge": "码龄18年", "writerBlogNum": "25", "writerCollect": "135", "writerComment": "28", "writerFan": "49", "writerGrade": "3级", "writerIntegral": "629", "writerName": "swanmy", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_120881354.jpg", "writerRankTotal": "1641071", "writerRankWeekly": "93259", "writerThumb": "45", "writerVisitNum": "52017", "blog_read_count": "2966", "blog_time": "于 2021-10-21 10:29:26 发布", "blog_title": "在Windows上搭建Rust开发环境——Clion篇", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#WindowsRustClion_1\">在Windows上搭建Rust开发环境——Clion篇</a></li><li><ul><li><a href=\"#mingw64_5\">安装mingw64</a></li><li><a href=\"#Rust_35\">安装Rust</a></li><li><a href=\"#hello_world_161\">hello world</a></li><li><a href=\"#Clion_201\">安装Clion</a></li><li><a href=\"#Clion_220\">使用Clion创建并调试项目</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"WindowsRustClion_1\"></a>在Windows上搭建Rust开发环境——Clion篇</h1>\n<p>刚开始学习Rust的时候，写过一篇《<a href=\"https://blog.csdn.net/zhmh326/article/details/103805485\">在Windows上搭建Rust开发环境</a>》，当时选择使用VSCode作为开发工具。由于工作的原因，放下Rust很久了，Rust的生态也发生了很大的变化。听闻Jetbrains出品的Clion配置Rust插件已经可以很好的支持Rust的开发了。一向对jetbrains很有好感的我决定再使用Clion开始新一期Rust学习。</p>\n<h2><a id=\"mingw64_5\"></a>安装mingw64</h2>\n<ol><li> <p>mingw的下载托管在<a href=\"https://sourceforge.net/projects/mingw-w64/files/mingw-w64/\">sourceforge</a>，点击进入后选择x86_64-posix-seh进行下载（下载有些慢，还请耐心等待）。</p> </li><li> <p>此版本是一个免安装版本，可以直接解压在你想要的目录下（最好不要有中文）。</p> </li><li> <p>修改环境变量PATH，添加解压目录下的bin<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d5997250513644eeaaa91d15cedc5033.png\"/></p> </li><li> <p>打开cmd窗口，输入gcc --version，如果显示如下内容，则配置成功：</p> <pre><code>gcc.exe (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0\nCopyright (C) 2018 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n</code></pre> </li></ol>\n<p><em>注：</em><br/> <em>mingw版本号中有三个字段分别代表如下含义：</em></p>\n<ul><li><em>x86_64：64位版本</em></li><li><em>i686：32位版本</em></li><li><em>posix：操作系统接口标准为posix，相比win32，posix对C++11的标准库支持的更好</em></li><li><em>win32：操作系统接口标准为win32</em></li><li><em>sjlj：采用sjlj的异常处理，这种方式比起其他异常处理会慢得多</em></li><li><em>dwarf：采用dwarf的异常处理，这种方式需要在可执行程序中添加额外的调试信息，使得程序体积较大</em></li><li><em>seh：采用seh的异常处理，即使用windows自身的异常处理机制</em></li></ul>\n<h2><a id=\"Rust_35\"></a>安装Rust</h2>\n<ol><li> <p>从Rust的官网下载<a href=\"https://win.rustup.rs/\">rustup-init</a></p> </li><li> <p>rustup-init为在线安装工具，默认的安装源为国外的站点，安装较慢，可设置环境变量，使其从科大的镜像中下载：</p>\n<ul><li>RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static</li><li>RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup</li></ul> </li></ol>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b333ae0455b847e5921f6bf1353b660f.png\"/></p>\n<ol start=\"3\"><li> <p>打开cmd窗口，运行rustup-init，显示如下内容：</p> <pre><code>Rust Visual C++ prerequisites\n\nRust requires the Microsoft C++ build tools for Visual Studio 2013 or later,\nbut they don't seem to be installed.\n\nThe easiest way to acquire the build tools is by installing Microsoft Visual\nC++ Build Tools 2019 which provides just the Visual C++ build tools:\n\nhttps://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2019\n\nPlease ensure the Windows 10 SDK and the English language pack components are\nincluded when installing the Visual C++ Build Tools.\n\nAlternately, you can install Visual Studio 2019, Visual Studio 2017, Visual\nStudio 2015, or Visual Studio 2013 and during install select the \"C++ tools\":\n\nhttps://visualstudio.microsoft.com/downloads/\n\nInstall the C++ build tools before proceeding.\n\nIf you will be targeting the GNU ABI or otherwise know what you are doing then\nit is fine to continue installation without the build tools, but otherwise,\ninstall the C++ build tools before proceeding.\n\nContinue? (Y/n)\n</code></pre> </li><li> <p>意思是首先要安装C/C++的编译环境，我们已经安装了mingw，直接Y，又会输出下面的内容：</p> <pre><code>Welcome to Rust!                                                             \nThis will download and install the official compiler for the Rust programming   \nlanguage, and its package manager, Cargo. \t\t\t\t\t\t\t\t\t\t\nIt will add the cargo, rustc, rustup and other commands to Cargo's bin          \ndirectory, located at:\t\n\tC:\\Users\\zhang\\.cargo\\bin  \t\t\t\t\t\t\t\t\t\t\t\t\t\nThis can be modified with the CARGO_HOME environment variable. \t\t\t\t\t\t\t\t\t\t\t\t\t\t\nRustup metadata and toolchains will be installed into the Rustup home           \ndirectory, located at: \n\tC:\\Users\\zhang\\.rustup  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\nThis can be modified with the RUSTUP_HOME environment variable. \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\nThis path will then be added to your PATH environment variable by modifying the \nHKEY_CURRENT_USER/Environment/PATH registry key. \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\nYou can uninstall at any time with rustup self uninstall and these changes will \nbe reverted.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\nCurrent installation options:\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tdefault host triple: x86_64-pc-windows-msvc                                  \n\tdefault toolchain: stable                                                  \n\tmodify PATH variable: yes\t\t\t\t\t\t\t\t\t\t\t\t\t\n1) Proceed with installation (default)\n2) Customize installation   \n3) Cancel installation\n</code></pre> </li><li> <p>开始介绍了一下将cargo、rustc、rustup和其他的工具安装到用户主目录的.cargo\\bin目录中，将rust的工具链安装到用户主目录的.rustup目录中。然后询问要安装rust的哪个工具链，默认的是微软的windows-msvc，因此，我们要修改一下默认的选项，选择2</p> <pre><code>I'm going to ask you the value of each of these installation options.\nYou may simply press the Enter key to leave unchanged.\n\nDefault host triple?\n</code></pre> </li><li> <p>输入x86_64-pc-windows-gnu，表示我要安装64位的gnu版本</p> <pre><code>Default toolchain? (stable/beta/nightly/none)\n</code></pre> </li><li> <p>选择默认的工具链为stable，即稳定版本：</p> <pre><code>Modify PATH variable? (y/n)\n</code></pre> </li><li> <p>选择y允许安装程序修改PATH环境变量：</p> <pre><code>Current installation options:\n\n\tdefault host triple: x86_64-pc-windows-gnu\n\tdefault toolchain: stable\n\tmodify PATH variable: yes\n\n1) Proceed with installation (default)\n2) Customize installation\n3) Cancel installation\n</code></pre> </li><li> <p>默认的安装选项已经被修改，此时输入1开始安装。安装过程中要从网络下载很多东西，请耐心等待。</p> </li><li> <p>安装完成后，在命令行窗口中输入rustc --version，输出：</p> <pre><code>rustc 1.54.0 (a178d0322 2021-07-26)\n</code></pre> <p>表示安装成功。</p> </li><li> <p>cargo是rust的包管理工具，类似于python的pip，默认的cargo会从国外网站下载包，也可以修改为从科大下载。在用户主目录的.cargo目录下新建一个文件，命名为config（没有扩展名），并输入以下内容：</p> <pre><code>[source.crates-io]\nregistry = \"https://github.com/rust-lang/crates.io-index\"\nreplace-with = 'ustc'\n[source.ustc]\nregistry = \"git://mirrors.ustc.edu.cn/crates.io-index\"\n</code></pre> <p>经过这么多步骤，rust终于安装完成了。</p> </li></ol>\n<h2><a id=\"hello_world_161\"></a>hello world</h2>\n<p>经过了一系列的安装配置，终于可以动手写hello world了。<br/> 首先，我们通过cargo来创建项目，在cmd窗口中输入</p>\n<pre><code>cargo new hello --bin\n     Created binary (application) `hello` package\n</code></pre>\n<p>cargo已经帮我们创建好了hello项目，自动生成了一系列文件：</p>\n<pre><code>D:\\TEST\\RUST\\HELLO\n|   .gitignore\n|   Cargo.toml\n|\n\\---src\n        main.rs\n</code></pre>\n<p>其中src下的main.rs为rust代码文件，其内容为：</p>\n<pre><code>fn main() {\n    println!(\"Hello, world!\");\n}\n</code></pre>\n<p>使用如下命令可以直接运行这段代码：</p>\n<pre><code>cd hello\ncargo run\n   Compiling hello v0.1.0 (D:\\test\\rust\\hello)\n    Finished dev [unoptimized + debuginfo] target(s) in 1.36s\n     Running `target\\debug\\hello.exe`\nHello, world!\n</code></pre>\n<h2><a id=\"Clion_201\"></a>安装Clion</h2>\n<p>Clion是Jetbrains出品的一款C/C++ IDE，它配合Rust的插件可以很好的支持Rust开发。Jetbrains出品，必属精品。可以直接在<a href=\"https://www.jetbrains.com/clion/download/download-thanks.html?platform=windows\">Jetbrains</a>下载最新版本的Clion进行安装。</p>\n<p>安装时，建议勾选创建桌面快捷方式和在右键菜单中添加将目录打开为项目的选项，以后用起来会非常方便。如下图：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\56aab99d8d1c4d0eb25a3d82b167bcf3.png\"/></p>\n<p>安装完成，第一次启动时选择试用，需要登录Jetbrains账号，可以使用Github的第三方账号登录，然后点击开始试用即可。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\af0688ea36194d0aa13b80a79eebee92.png\"/></p>\n<p>在Clion弹出的启动界面上，选择插件，第一项就是Rust插件，点击安装。然后，根据zhile.io的指引，做一些你懂得的事情。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2f248b44871f4f3ab4639cc1c317ad1d.png\"/></p>\n<p>可以顺带着安装如Rainbow Brackets（使用不同的颜色标识不同层次的括号）、Chinese Simplified（汉化）等插件。全部安装完成后重启Clion。</p>\n<h2><a id=\"Clion_220\"></a>使用Clion创建并调试项目</h2>\n<p>在启动界面中，点击New Project：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9d524de910a940f4870b3ea9db88ef49.png\"/></p>\n<p>在左边选择Rust，然后在右边选择项目目录，工程模板选择Binary，点击创建按钮</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7b735e0d0eed4c7cb399a925749a1304.png\"/></p>\n<p>然后在弹出的窗口中设置MinGW在选项，全部保持默认，点击OK就可以了</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f6bd147dd54a4b8dac5f5676b7eaceb9.png\"/></p>\n<p>Clion生成的项目与刚才使用cargo创建的项目是一样的，修改一下代码，就可以进行调试了。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7811f8d960644967bebf07ab84863d65.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 1, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-10-21 10:29:26", "summary": "文章目录在上搭建开发环境篇安装安装安装使用创建并调试项目在上搭建开发环境篇刚开始学习的时候，写过一篇《在上搭建开发环境》，当时选择使用作为开发工具。由于工作的原因，放下很久了，的生态也发生了很大的变化"}