{"blogid": "126541192", "writerAge": "码龄1年", "writerBlogNum": "32", "writerCollect": "295", "writerComment": "904", "writerFan": "458", "writerGrade": "5级", "writerIntegral": "1852", "writerName": "南猿北者", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126541192.jpg", "writerRankTotal": "10642", "writerRankWeekly": "475", "writerThumb": "639", "writerVisitNum": "11515", "blog_read_count": "600", "blog_time": "于 2022-08-26 15:55:06 发布", "blog_title": "C++核心编程（三）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atelier-sulphurpool-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_6\">前言</a></li><li><a href=\"#_10\">友元</a></li><li><ul><li><a href=\"#_12\">全局函数做友元</a></li><li><a href=\"#_50\">类做友元</a></li><li><a href=\"#_103\">成员函数做友元</a></li></ul>\n</li><li><a href=\"#_181\">运算符重载</a></li><li><ul><li><a href=\"#_208\">加号运算符重载</a></li><li><a href=\"#_222\">左移运算符重载</a></li><li><a href=\"#_235\">递增运算符重载</a></li><li><ul><li><a href=\"#_236\">前置++</a></li><li><a href=\"#_240\">后置++</a></li></ul>\n</li><li><a href=\"#_245\">赋值运算符重载</a></li><li><a href=\"#_283\">关系运算符重载</a></li><li><a href=\"#_287\">函数调用运算符</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"_6\"></a>前言</h1>\n<p>C++核心编程（三）</p>\n<hr/>\n<h1><a id=\"_10\"></a>友元</h1>\n<p>首先生活中我们自己家里面，有自己的卧室，也有客厅；客厅呢只要是个人来了就能坐，但是对于卧室来说就不是这样的，比如说自己的卧室属于私人的空间，不是随便一个人就可以访问的，但是对于你的好基友、好朋友只要给你打了招呼是可以访问的；对于一个类来说也是这样的，对于一个类的公共属性我们在哪里都能访问它，但是对于一个类的私有属性不是随都能访问的、如果某个程序想要访问的话、就必须和这个类打招呼告诉他我是你的好基友，这样我们就能正常访问其私有属性了；</p>\n<h2><a id=\"_12\"></a>全局函数做友元</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Building</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tstring bedroom<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\tstring living_room<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Building</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tbedroom <span class=\"token operator\">=</span> <span class=\"token string\">\"卧室\"</span><span class=\"token punctuation\">;</span>\n\t\tliving_room <span class=\"token operator\">=</span> <span class=\"token string\">\"客厅\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ShowHouse1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tBuilding p1<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"void ShowHouse1()正在访问:\"</span> <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token punctuation\">.</span>living_room <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">ShowHouse1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>首先我们知道我们的全局函数ShowHouse1是可以正常访问客厅的，应为living_room这个成员属性是公共的，是我们可以正常访问的，但是如果我们想要访问bedroom这个属性是访问不到的，因为这是个私有属性，编译器还会报错；<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\84f4644cfbdd475abb16f63844c1fbc1.png\"/><br/> 但是如果我们就是想要访问它怎么办？<br/> 当然是成为Building类的好朋友啊！<br/> 怎么成为它的好朋友？<br/> 利用friend关键字加以修饰<br/> 怎么修饰？<br/> 当然是在需要成为好朋友的类里面声明一下就行了：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e772221e1f4442c687b33b3c9a4d9bd7.png\"/><br/> 只需像这样声明，我们就能在ShowHouse1函数里面正常访问Building类的私有属性了；</p>\n<h2><a id=\"_50\"></a>类做友元</h2>\n<p>既然一个全局函数都能做类的友元，那么一个类能不能做另一个类的友元呢？比如说：A类、B类；<br/> 我们能不能实现在A类中访问B类的私有属性呢？<br/> 当然可以！！！<br/> 我们只需向刚才一样声明一下就行了：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Building</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tstring bedroom<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\tstring living_room<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Building</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tbedroom <span class=\"token operator\">=</span> <span class=\"token string\">\"卧室\"</span><span class=\"token punctuation\">;</span>\n\t\tliving_room <span class=\"token operator\">=</span> <span class=\"token string\">\"客厅\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\tBuilding<span class=\"token operator\">*</span> house<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\thouse <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Building<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">SetHouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\thouse<span class=\"token operator\">-&gt;</span>living_room <span class=\"token operator\">=</span> <span class=\"token string\">\"客厅2号\"</span><span class=\"token punctuation\">;</span>\n\t\thouse<span class=\"token operator\">-&gt;</span>bedroom <span class=\"token operator\">=</span> <span class=\"token string\">\"卧室2号\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//正常情况下我们是无法访问的</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">ShowHouse2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"void ShowHouse1()正在访问:\"</span> <span class=\"token operator\">&lt;&lt;</span> house<span class=\"token operator\">-&gt;</span>living_room <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"void ShowHouse1()正在访问:\"</span> <span class=\"token operator\">&lt;&lt;</span> house<span class=\"token operator\">-&gt;</span>bedroom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//正常情况下我们是无法访问的</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tPerson p1<span class=\"token punctuation\">;</span>\n\tp1<span class=\"token punctuation\">.</span><span class=\"token function\">ShowHouse2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tp1<span class=\"token punctuation\">.</span><span class=\"token function\">SetHouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tp1<span class=\"token punctuation\">.</span><span class=\"token function\">ShowHouse2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们知道像这样一般情况下，我们是无法正常访问的；那我们就来声明一下呗！我们根据上面全局函数的声明来照猫画虎试一试：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bcb7bf5f9a5f45e29bc789dcf38de306.png\"/><br/> 这样声明编译器没报任何错误，我们来运行看看：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\91ab1961f3bf46ba830ec259b98a9104.png\"/><br/> 我们可以看到实际是符合预期的，证明我们这样声明是没有错的！</p>\n<h2><a id=\"_103\"></a>成员函数做友元</h2>\n<p>说到这个做友元，可把我折腾坏了，明明改了这个bug右出现了这个bug，可谓是屡屡碰壁！！人都要崩溃了！！😭😭😭；<br/> 接下来我们来继续看看：（还是类做友元的代码）</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Building</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//向BUilding类声明一下，Person类是你的好朋友</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tstring bedroom<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\tstring living_room<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Building</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tbedroom <span class=\"token operator\">=</span> <span class=\"token string\">\"卧室\"</span><span class=\"token punctuation\">;</span>\n\t\tliving_room <span class=\"token operator\">=</span> <span class=\"token string\">\"客厅\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\tBuilding<span class=\"token operator\">*</span> house<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\thouse <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Building<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">SetHouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\thouse<span class=\"token operator\">-&gt;</span>living_room <span class=\"token operator\">=</span> <span class=\"token string\">\"客厅2号\"</span><span class=\"token punctuation\">;</span>\n\t\thouse<span class=\"token operator\">-&gt;</span>bedroom <span class=\"token operator\">=</span> <span class=\"token string\">\"卧室2号\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//正常情况下我们是无法访问的</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">ShowHouse2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"void ShowHouse1()正在访问:\"</span> <span class=\"token operator\">&lt;&lt;</span> house<span class=\"token operator\">-&gt;</span>living_room <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"void ShowHouse1()正在访问:\"</span> <span class=\"token operator\">&lt;&lt;</span> house<span class=\"token operator\">-&gt;</span>bedroom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//正常情况下我们是无法访问的</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tPerson p1<span class=\"token punctuation\">;</span>\n\tp1<span class=\"token punctuation\">.</span><span class=\"token function\">ShowHouse2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//输出客厅 卧室</span>\n\tp1<span class=\"token punctuation\">.</span><span class=\"token function\">SetHouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tp1<span class=\"token punctuation\">.</span><span class=\"token function\">ShowHouse2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//输出客厅2 卧室2</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们都知道，现在Person类是Building类的好朋友可以访问Building私有属性；可是现在BUilding类不干了，它说凭什么你Person类里面任何地方都能访问我？我岂不是太随便？我不同意！！我的对你访问我们地方做一些限制，我不能让你在类内任何地方都能访问我，我要求你只能通过ShowHouse1函数来访问我，其它任何地方访问我都不行！！！<br/> 那我们应该怎么做？<br/> 按照上面的方法照猫画虎呗：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1a1f78236c634c43ae22b12658a8b6a2.png\"/><br/> 我们来运行看看：<br/> 发什么一大堆错误，头皮发麻🐵🐵🐵，我们来分析一下这些错误<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f56ad902bad04c648db652027e022234.png\"/><br/> 我们先声明一下Person类：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6c8a206664674f9487f2f870ca93c76d.png\"/><br/> 现在声明好了，我们再来运行：<br/> 还是一大堆Warning：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a404cdcb66bc4bcd95fd73aac38de393.png\"/><br/> 首先什么无法访问之类的东西，就是我们友元的声明是失败的；我们主要看看C2027错误：<br/> 使用未定义类型？我不是声明了吗：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7c7656c13cb84d258055ebcbc77a4ca5.png\"/><br/> 对，我们的确是声明了，编译器也的确知道了Person是个类，但是编译器仅仅知道Person是个类，编译器怎么知道这个类里面有些啥？你说Person类下有个ShowHouse2函数，编译器说“从上到这我也没发现Person里面有个啥啊！你说ShowHouse2函数是Person类下的就是啊？我反正没看见，我只知道Person是个类，但里面具体有啥我也不知道啊，难保你乱写的一个函数说是Person类里面的，为了防止出现Bug，就给你报错”；既然编译器不知道这里面有啥，我们就直接将Person类定义在Building前面：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\126b85ed258649ac8d921f11ed8348c8.png\"/><br/> 我们运行看看：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a8e81637cc954e9dbe080b60dfae71d5.png\"/><br/> 它奶奶滴！又是一大堆错误：刚才说是Person都错误，现在又是BUilding的错误，我要崩溃了！！到底该怎么改？<br/> 经过我多方查找，我终于找到了办法：<br/> 首先我们把自己先想象成一个编译器，我们现在对这段代码就行检查：<br/> 我们发现第一个错误出现在37行，我们去37行看看：<br/> 我们发现在37我们new空间的时候，new出来的空间是Building类型，是会发生Building拷贝构造函数的调用的，但是编译器只知道Building是个类，里面有啥它也不是知道，他也不知道你实没实现这个函数，编译器也不敢给你乱提供；干脆就报错，让你来消除这个歧义；<br/> 既然这样的话：我们干脆将声明和实现分开，先将两个类一起声明了在一起实现里面的成员函数：（先告诉编译器我有这个东西，实现在后面）<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3fb7fd2b16e54714a26a954f929e5692.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5b9a113a06bf4c438e65b60338adfce6.png\"/></p>\n<p>我们可以看见现在现在只有58行有错误了，其实这个错误出现在我们的预期之内，因为我们只声明的Person类下面的ShowHouse2函数是Building类的好朋友，而SetHouse不是，但是却访问了私有属性。自然也就会报错，我们只需注释掉就行了：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6d3890ee841d448bae905a5567e225e9.png\"/><br/> 我们发现完美解决！！！</p>\n<h1><a id=\"_181\"></a>运算符重载</h1>\n<p>运算符重载概念：对已有的运算符进行重新定义，赋予其另一种功能，以适应不同的数据类型；<br/> 比如说class Person；<br/> +对于自定义类型来说是不能实现的把，+的操作数之内是编译器的自定义类型比如：int 、char、double等；<br/> 如果我们想让+也能实现自定义类型的加法，我们可以利用函数来实现；C++很好的提供了这个技术；<br/> 为了避免五花八门的函数名字，函数的名字编译器也已经帮我们想好了：<br/> 返回值 <strong>operator</strong>+需要重载的运算符（参数）；<br/> 测试类：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> m_age<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> m_weight<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tm_age <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tm_weight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">m_age</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_weight</span><span class=\"token punctuation\">(</span>weight<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"_208\"></a>加号运算符重载</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ec86c725b9d44deaa7580d06eaafa19a.png\"/><br/> 正常情况下，我们发现肯定是出错的，我们线记住这个错误，在后面我们会经常见到；<br/> 首先我们有两种实现该函数的方式：<br/> 1、全局函数实现；<br/> 2、成员函数实现；<br/> 我们先来看看全局函数实现：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7c50e2234ee749a49e7ce0102cee0a36.png\"/></p>\n<p>我们应该将返回值设置为Person类型，因为我们需要接收，同时也满足连+的实现；<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7e8a6ef6b3c84c98a09832bb102e2fd8.png\"/><br/> 我们再来看看成员函数实现：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\10a944a5bbe14f4786416c352a413316.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\41384c731d7a44bd9712aefd731c665f.png\"/></p>\n<h2><a id=\"_222\"></a>左移运算符重载</h2>\n<p>Person p;<br/> 我们想实现cout&lt;&lt;p&lt;&lt;endl;<br/> 我们知道这是不行的，我们也可以通过operator重载一下：<br/> 首先我们在成员函数内部无法实现这样的函数，我们实现出来的只能是:p&lt;&lt;cout这种形式，也我们预期不符合：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\934e6d3c3a3e44c9ae13554f01201e5d.png\"/></p>\n<p>cout也是一个对象，属于ostream类；<br/> 我们用全局函数实现一下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\51407d195dca4fb28ecc915bb205552d.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\33f93534cdca4c72a5f72bbacf17e5c7.png\"/></p>\n<h2><a id=\"_235\"></a>递增运算符重载</h2>\n<h3><a id=\"_236\"></a>前置++</h3>\n<p>成员函数实现：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e18d721ddec04394a669e174103d0a3b.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fd99b1b2a83e417e8a9bf0a047be3c7f.png\"/></p>\n<h3><a id=\"_240\"></a>后置++</h3>\n<p>为了与前置++区分，我们用一个占位符来表示operator的参数：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\73a65a02ee8140e2a9efcd56f3cb3d9e.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\94542fa496694a57945467e0fdd54e2e.png\"/></p>\n<h2><a id=\"_245\"></a>赋值运算符重载</h2>\n<p>其实编译器给我们自动提供的有这个函数，我们如果细心一点的话，我们会发现：<br/> Person p1；Person p2；<br/> p1=p2；//是行的通的，但是我们并没有去实现它，我们还是能用；<br/> 虽然编译器给我们提供了这个东西，但是也并是那么好用：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> height<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tage <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\theight <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">delete</span> height<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tPerson p1<span class=\"token punctuation\">;</span>\n\tPerson p2<span class=\"token punctuation\">;</span>\n\tp1 <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fbfe142a8e18481fa9d33a43c64c1c47.png\"/><br/> 我们可以发现p1和p2两个的height是不一样的，这个能理解，接下来我们在看看：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0fb8633438db41c0abc9425cf9e96464.png\"/><br/> 我们发现两个height的值都一样了，这是编译器提供的=出现的情况，从此我们应该已经开始发觉问题了，这似乎就是浅拷贝出现的情况，我们在销毁p1，p2的时候会对p1的height和p2的height进行释放，但是这两个height都指向同一块空间，我们会对其进行多次释放，显然编译器会崩，同时我们也少释放一块空间，同时会造成内存泄漏！！解决该问题就是利用深拷贝的方法，我们用自己写的重载=，不用编译器的；<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\34ba428b2d3e45bbae0883df9bd796c4.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7de9eadd00cf436293c5a4e887f2812c.png\"/><br/> 我们这样就很好的解决了这个问题；</p>\n<h2><a id=\"_283\"></a>关系运算符重载</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\99dfbc32010e4ab7815cde92674880b5.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bfdf636dfda2445d861d1ffab01c685a.png\"/></p>\n<h2><a id=\"_287\"></a>函数调用运算符</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6db720c2226045b795814982cb7911fd.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5878b4bb4d1940adb07f2a92d1ae4c57.png\"/><br/> 匿名对象的调用即用既毁；</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-26 15:55:06", "summary": "文章目录前言友元全局函数做友元类做友元成员函数做友元运算符重载加号运算符重载左移运算符重载递增运算符重载前置后置赋值运算符重载关系运算符重载函数调用运算符前言核心编程三友元首先生活中我们自己家里面，有"}