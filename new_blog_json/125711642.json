{"blogid": "125711642", "writerAge": "码龄1年", "writerBlogNum": "73", "writerCollect": "664", "writerComment": "1176", "writerFan": "1002", "writerGrade": "5级", "writerIntegral": "3581", "writerName": "Hey pear!", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125711642.jpg", "writerRankTotal": "5805", "writerRankWeekly": "483", "writerThumb": "1024", "writerVisitNum": "34715", "blog_read_count": "454", "blog_time": "于 2022-07-10 22:11:09 发布", "blog_title": "C++入门(上）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-kimbie-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#1_CC98_1\">1. C++关键字(C++98)</a></li><li><a href=\"#2__20\">2. 命名空间</a></li><li><ul><li><a href=\"#21_27\">2.1域</a></li><li><a href=\"#22_45\">2.2实例</a></li><li><a href=\"#23_100\">2.3命名空间可以嵌套</a></li></ul>\n</li><li><a href=\"#3__184\">3. 缺省参数</a></li><li><ul><li><a href=\"#31__185\">3.1 缺省参数概念</a></li><li><a href=\"#32_222\">3.2实际运用：</a></li></ul>\n</li><li><a href=\"#4__265\">4. 函数重载</a></li><li><ul><li><a href=\"#41__269\">4.1 函数重载概念</a></li><li><a href=\"#42_318\">4.2实例问题</a></li><li><a href=\"#43_336\">4.3函数重载意义：</a></li><li><a href=\"#44_342\">4.4函数名修饰：</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"1_CC98_1\"></a>1. C++关键字(C++98)</h1>\n<blockquote>\n<p>C++总计63个关键字，C语言32个关键字<br/> asm do if return try continue auto double inline<br/> short typedef for bool dynamic_cast int signed typeid public break<br/> else long sizeof typename throw case enum mutable static union wchar_t<br/> catch explicit namespace static_cast unsigned default char export new<br/> struct using friend class extern operator switch virtual register<br/> const false private template void true const_cast float protected this<br/> volatile while delete goto reinterpret_cast</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"hello world\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"2__20\"></a>2. 命名空间</h1>\n<p>在C/C++中，变量、函数和后面要学到的类都是大量存在的，这些变量、函数和类的名称将都存在于全局作用域中，可能会导致很多冲突。</p>\n<p>使用命名空间的目的是对标识符的名称进行本地化，以避免命名冲突或名字污染，namespace关键字的出现就是针对这种问题的。</p>\n<p>C++的语法基本都是为了补C语言的坑</p>\n<h2><a id=\"21_27\"></a>2.1域</h2>\n<p>什么是域？<br/> 注意：同一个域里面不能定义同一个变量<br/> 不同的域里面就可以定义同一个<br/> 局部优先，就近原则</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/*printf(\"%d\\n\", a);*/</span><span class=\"token comment\">//1 先访问局部域</span>\n\t<span class=\"token comment\">//::域作用限定符  左边空白就表示是全局域</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">::</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//0</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p> </p>\n<h2><a id=\"22_45\"></a>2.2实例</h2>\n<p>当我们用C语言写一下代码的时候，会报错：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\06014e78c85b4b2898477b8e8158f25b.png\"/><br/> 那么如何解决？</p>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//命名空间</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\nnamespace haha\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> rand <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> rand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//局部</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> haha<span class=\"token operator\">::</span>rand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//指定去haha域里找</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>用关键字namespace 定义一个命名空间域，就不会报错了</p>\n<p>命名空间用来做名字隔离，防止命名冲突<br/> 命名空间里除了定义变量也可以定义函数、类型<br/> 在主函数中直接调用是找不到的，需要指定去找</p>\n<pre><code class=\"prism language-c\">namespace haha\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> rand <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"func()\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tstruvt TReeNode\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">TreeNode</span><span class=\"token operator\">*</span> left<span class=\"token punctuation\">;</span>\n\t\tstruvt TreeNode<span class=\"token operator\">*</span> right<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> rand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//局部</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> haha<span class=\"token operator\">::</span>rand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//指定去haha域里找</span>\n\nhaha<span class=\"token operator\">::</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">haha</span><span class=\"token operator\">::</span>TreeNode node<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"23_100\"></a>2.3命名空间可以嵌套</h2>\n<pre><code class=\"prism language-c\">namespace cc\n<span class=\"token punctuation\">{<!-- --></span>\n    \n\nnamespace haha\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span> rand <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"func()\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tstruvt TReeNode\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">TreeNode</span><span class=\"token operator\">*</span> left<span class=\"token punctuation\">;</span>\n\t\tstruvt TreeNode<span class=\"token operator\">*</span> right<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> rand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//局部</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> cc<span class=\"token operator\">::</span>haha<span class=\"token operator\">::</span>rand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//指定去haha域里找</span>\n\ncc<span class=\"token operator\">::</span>haha<span class=\"token operator\">::</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">cc</span><span class=\"token operator\">::</span>haha<span class=\"token operator\">::</span>TreeNode node<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>项目里四个文件都需要放进命名空间：<br/> 同一个工程中允许存在多个相同名称的命名空间,编译器最后会合成同一个命名空间中。</p>\n<p>不指定也能用命名空间：<br/> using namespace haha;定义域展开<br/> 主函数中就会先去全局域中找，找不到再去带展开的haha域中找</p>\n<p>c++的特点是自动识别类型，不需要指定类型，直接打印出整型或浮点型之类的</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token comment\">//std是C++标准库的命名空间</span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"hello world\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// cout是对象，endl是换行符</span>\n<span class=\"token comment\">//运算符&lt;&lt;流插入</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token number\">11.11</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d,%f\\n\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncout<span class=\"token operator\">&lt;&lt;</span>i<span class=\"token operator\">&lt;&lt;</span>d<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//自动识别类型</span>\n\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">//如果不展开，怎么使用：</span>\n<span class=\"token comment\">//using namespace std;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tstd<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"hello world\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n  std<span class=\"token operator\">::</span>cin<span class=\"token punctuation\">;</span><span class=\"token comment\">//控制台 scanf</span>\n <span class=\"token comment\">//&gt;&gt;流提取</span>\n std<span class=\"token operator\">::</span>cin<span class=\"token operator\">&gt;&gt;</span>i<span class=\"token operator\">&gt;&gt;</span>d<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">//只展开一部分,只展开常用的</span>\nusing std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\nusing std<span class=\"token operator\">::</span>cin<span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p><code>总结</code>：</p>\n<ol><li>项目中尽量不要用using namespace std;</li><li>日常练习可以用using namespace std;</li><li>项目，指定命名空间访问+展开常用</li></ol>\n</blockquote>\n<p> <br/>  </p>\n<h1><a id=\"3__184\"></a>3. 缺省参数</h1>\n<h2><a id=\"31__185\"></a>3.1 缺省参数概念</h2>\n<p>缺省参数是声明或定义函数时<code>为函数的参数指定一个默认值</code>。在调用该函数时，如果没有指定实参则采用该默认值，否则使用指定的实参</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">Func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tstd<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//全缺省  调用灵活 参数从左往右 不能跳过前面的传后面</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">TestFunc1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b = \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//半缺省（缺省部分）  必须连续的从右往左缺省，不能间隔</span>\n<span class=\"token comment\">//(int a,int b=0,int c) 这种写法就是错的</span>\n<span class=\"token comment\">//想要缺省a，就必须把bc都缺省了</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">TestFunc2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b = \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">Func</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span>\n\t<span class=\"token function\">Func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//0</span>\n\n\t<span class=\"token function\">TestFunc1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">TestFunc1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">TestFunc1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p> </p>\n<h2><a id=\"32_222\"></a>3.2实际运用：</h2>\n<pre><code class=\"prism language-c\"><span class=\"token comment\">//栈</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stack</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> _a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> top<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">StackInit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stack</span><span class=\"token operator\">*</span> ps<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> capacity <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//初始化</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tps <span class=\"token operator\">-&gt;</span>_a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//...</span>\n\tps<span class=\"token operator\">-&gt;</span>top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tps<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">=</span> capacity<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t\n\t<span class=\"token comment\">//知道我一定会插入100个数据，就可以显示传参数100</span>\n\t<span class=\"token comment\">//提前开好空间，插入数据时就可以避免扩容（有代价）</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stack</span> st1<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">StackInit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>st1<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stack</span> st2<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">StackInit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>st2<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><code> 注意</code>：</p>\n<ol><li>半缺省参数必须从右往左依次来给出，不能间隔着给</li><li>缺省参数不能在函数声明和定义中同时出现</li><li>分离定义时：以声明为准，就算声明没给定义给了也不算</li><li>缺省值必须是常量或者全局变量</li><li>C语言不支持（编译器不支持）</li></ol>\n</blockquote>\n<p> <br/>  </p>\n<h1><a id=\"4__265\"></a>4. 函数重载</h1>\n<p>自然语言中，一个词可以有多重含义，人们可以通过上下文来判断该词真实的含义，即该词被重载了。<br/> <code>一词多义</code><br/>  </p>\n<h2><a id=\"41__269\"></a>4.1 函数重载概念</h2>\n<p>函数重载:是函数的一种特殊情况，C++允许在同一作用域中声明几个功能类似的同名函数，这些同名函数的形参列表(参数个数 或 类型 或 顺序)必须不同，常用来处理实现功能类似数据类型不同的问题编译器能区分才有价值</p>\n<pre><code class=\"prism language-c\">\n\n\n<span class=\"token comment\">//类型不同</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> right<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//顺序不同</span>\n\n<span class=\"token comment\">//double Add(double left, double right)//不是指这里交换left和right的位置</span>\n<span class=\"token comment\">//{<!-- --></span>\n<span class=\"token comment\">//\treturn left + right;</span>\n<span class=\"token comment\">//}</span>\n\n<span class=\"token comment\">//类型不同，顺序不同，编译器可以进行区分的才叫重载</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"void func(int i,char ch)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"void func(char ch,int i)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p> </p>\n<h2><a id=\"42_318\"></a>4.2实例问题</h2>\n<p>下面两个函数属于函数重载吗？</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">short</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">short</span> right<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">return</span> left<span class=\"token operator\">+</span>right<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">int</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">short</span> right<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">return</span> left<span class=\"token operator\">+</span>right<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>返回值不同，不构成重载，只有参数构成重载 调用时也无法区分</p>\n</blockquote>\n<p> </p>\n<h2><a id=\"43_336\"></a>4.3函数重载意义：</h2>\n<p>自动识别类型本质是函数重载支持的<br/> 在调用的时候很方便，就向在使用同一个函数一样<br/> 有模板之后会更方便，直接使用一个就行</p>\n<p> </p>\n<h2><a id=\"44_342\"></a>4.4函数名修饰：</h2>\n<p>提出一个大命题：<br/> <code>为什么C++支持函数重载？而C语言不支持呢？怎么支持的</code><br/> 在C/C++中，一个程序要运行起来，需要经历以下几个阶段：<strong>预处理、编译、汇编、链接</strong><br/> 必须要记住：<br/> fun.h func.c main.c<br/> <code>预处理</code>：头文件展开，宏替换，条件编译，去掉注释</p>\n<p>func.i main.i<br/> <code>编译</code>：语法检查，生成汇编代码</p>\n<p>func.s main.s<br/> <code>汇编</code>：把汇编代码转换成二进制机器码</p>\n<p>func.o main.o<br/> <code>链接</code>：.o的目标文件合并到一起，其次还需要找一些只给声明函数变量的地址<br/> a.out<br/> xxx.exe</p>\n<p>编译错误一般都是语法错误，链接错误一般都是找不到定义</p>\n<p>通过函数名修饰规则:</p>\n<ol><li>通过下面我们可以看出gcc的函数修饰后名字不变。而g++的函数修饰后变成【_Z+函数长度+函数名+类型首字母】</li><li>在linux下，采用g++编译完成后，函数名字的修饰发生改变，编译器将函数参数类型信息添加到修改后的名字中。</li><li>通过这里就理解了C语言没办法支持重载，因为同名函数没办法区分。而C++是通过函数修饰规则来区分，只要参数不同，修饰出来的名字就不一样，就支持了重载</li><li>这也就是为什么函数重载要求参数不同，与返回值没有关系</li></ol>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-07-10 22:11:09", "summary": "文章目录关键字命名空间域实例命名空间可以嵌套缺省参数缺省参数概念实际运用：函数重载函数重载概念实例问题函数重载意义：函数名修饰：关键字总计个关键字，语言个关键字命名空间在中，变量、函数和后面要学到的类"}