{"blogid": "124937631", "writerAge": "码龄6年", "writerBlogNum": "510", "writerCollect": "373", "writerComment": "70", "writerFan": "73", "writerGrade": "7级", "writerIntegral": "9973", "writerName": "LongtengGensSupreme", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124937631.jpg", "writerRankTotal": "1938", "writerRankWeekly": "14450", "writerThumb": "84", "writerVisitNum": "604534", "blog_read_count": "1239", "blog_time": "于 2022-05-23 23:51:33 发布", "blog_title": "WebSocket(SuperSocket.WebSocket实现)服务端主动断开客户端的连接", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>WebSocket(SuperSocket.WebSocket实现)服务端主动断开客户端的连接</p>\n<p>使用SuperSocket.WebSocket实现的WebSocket服务端，当有WebSocket客户端连接上以后，WebSocket客户端如果发消息太长或者过大时，就会出现WebSocket主动断开客户端的连接的问题，解决如下：</p>\n<pre>using SuperSocket.SocketBase.Config;\nusing SuperWebSocket;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Web;\n\nnamespace TESTeee\n{\n    internal class Program\n    {\n        public static WebSocketServer ws = null;\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"WebSocket服务\");\n            ws = new WebSocketServer();\n            ws.NewSessionConnected += Ws_NewSessionConnected;\n            ws.NewMessageReceived += Ws_NewMessageReceived;\n            ws.SessionClosed += Ws_SessionClosed;\n            //SuperSocket可以通过对ServerConfig对象进行设置，可以设置最大接收缓存大小(ReceiveBufferSize),也可以设置请求信息的最大长度(MaxRequestLength)有所限制，默认请求最大长度为1024. 该配置可以通过一个ServerConfig的对象进行设置\n            var config = new ServerConfig()\n            {\n                #region MyRegion\n                //public const int DefaultReceiveBufferSize = 4096;\n                //public const int DefaultListenBacklog = 100;\n                //public const int DefaultKeepAliveTime = 600;\n                //public const int DefaultSessionSnapshotInterval = 5;\n                //public const int DefaultSendBufferSize = 2048;\n                //public const int DefaultIdleSessionTimeOut = 300;\n                //public const int DefaultKeepAliveInterval = 60;\n                //public const int DefaultSendTimeout = 5000;\n                //public const int DefaultMaxRequestLength = 1024;\n                //public const int DefaultSendingQueueSize = 5;\n                //public const int DefaultMaxConnectionNumber = 100;\n                //public const int DefaultClearIdleSessionInterval = 120;\n                #endregion\n                // 限制请求的数据长度最大为1M\n                MaxRequestLength = 1024 * 1024,\n                ReceiveBufferSize = 1024 * 1024,\n                Ip = \"127.0.0.1\",\n                Port = 1234\n            };\n            //ws.Setup(config);\n            //if (!ws.Setup(\"127.0.0.1\", 1234))\n            //if (!ws.Setup(config))\n            //{\n            //    Console.WriteLine(\"ChatWebSocket 设置WebSocket服务侦听地址失败\");\n            //    return;\n            //}\n            ws.Setup(config, logFactory: new SuperSocket.SocketBase.Logging.ConsoleLogFactory());\n            if (!ws.Start())\n            {\n                Console.WriteLine(\"ChatWebSocket 启动WebSocket服务侦听失败\");\n                return;\n            }\n            Console.WriteLine(\"ChatWebSocket 启动服务成功\");\n            Console.ReadKey();\n            ws.Stop();\n        }\n\n        public static void Ws_NewSessionConnected(WebSocketSession session)\n        {\n            Console.WriteLine(\"{0:HH:MM:ss}  与客户端:{1}创建新会话\", DateTime.Now, GetSessionName(session));\n            var msg = string.Format(\"{0:HH:MM:ss} {1} 进入聊天室\", DateTime.Now, GetSessionName(session));\n\n            SendToAll(session, msg);\n        }\n\n        private static void Ws_NewMessageReceived(WebSocketSession session, string value)\n        {\n            var msg = string.Format(\"{0:HH:MM:ss} {1} 说: {2}\", DateTime.Now, GetSessionName(session), value);\n            Console.WriteLine($\"{msg}\");\n            SendToAll(session, value);\n        }\n\n        public static void Ws_SessionClosed(WebSocketSession session, SuperSocket.SocketBase.CloseReason value)\n        {\n            Console.WriteLine(\"{0:HH:MM:ss}  与客户端:{1}的会话被关闭 原因：{2}\", DateTime.Now, GetSessionName(session), value);\n            var msg = string.Format(\"{0:HH:MM:ss} {1} 离开聊天室\", DateTime.Now, GetSessionName(session));\n            SendToAll(session, msg);\n        }\n\n        /// &lt;summary&gt;\n        /// 启动服务\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public static void Start()\n        {\n            if (!ws.Setup(\"127.0.0.1\", 1234))\n            {\n                Console.WriteLine(\"ChatWebSocket 设置WebSocket服务侦听地址失败\");\n                return;\n            }\n\n            if (!ws.Start())\n            {\n                Console.WriteLine(\"ChatWebSocket 启动WebSocket服务侦听失败\");\n                return;\n            }\n\n            Console.WriteLine(\"ChatWebSocket 启动服务成功\");\n        }\n\n        /// &lt;summary&gt;\n        /// 停止侦听服务\n        /// &lt;/summary&gt;\n        public static void Stop()\n        {\n\n            if (ws != null)\n            {\n                ws.Stop();\n            }\n        }\n\n        public static string GetSessionName(WebSocketSession session)\n        {\n            return HttpUtility.UrlDecode(session.Path.TrimStart('/'));\n        }\n\n        public static void SendToAll(WebSocketSession session, string msg)\n        {\n            foreach (var sendSession in session.AppServer.GetAllSessions())\n            {\n                sendSession.Send(msg);\n            }\n        }\n    }\n}</pre>\n<p></p>\n<p>SuperSocket可以通过一个ServerConfig的对象进行配置设置，ServerConfig对象中默认配置如下：</p>\n<pre> //\n        // Summary:\n        //     Default ReceiveBufferSize\n        public const int DefaultReceiveBufferSize = 4096;\n        //\n        // Summary:\n        //     The default listen backlog\n        public const int DefaultListenBacklog = 100;\n        //\n        // Summary:\n        //     The default keep alive time\n        public const int DefaultKeepAliveTime = 600;\n        //\n        // Summary:\n        //     The default session snapshot interval\n        public const int DefaultSessionSnapshotInterval = 5;\n        //\n        // Summary:\n        //     The default send buffer size\n        public const int DefaultSendBufferSize = 2048;\n        //\n        // Summary:\n        //     Default idle session timeout\n        public const int DefaultIdleSessionTimeOut = 300;\n        //\n        // Summary:\n        //     The default keep alive interval\n        public const int DefaultKeepAliveInterval = 60;\n        //\n        // Summary:\n        //     Default send timeout value, in milliseconds\n        public const int DefaultSendTimeout = 5000;\n        //\n        // Summary:\n        //     Default MaxRequestLength\n        public const int DefaultMaxRequestLength = 1024;\n        //\n        // Summary:\n        //     Default sending queue size\n        public const int DefaultSendingQueueSize = 5;\n        //\n        // Summary:\n        //     Default MaxConnectionNumber\n        public const int DefaultMaxConnectionNumber = 100;\n        //\n        // Summary:\n        //     Default clear idle session interval\n        public const int DefaultClearIdleSessionInterval = 120;</pre>\n<p></p>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-05-23 23:51:33", "summary": "实现服务端主动断开客户端的连接使用实现的服务端，当有客户端连接上以后，客户端如果发消息太长或者过大时，就会出现主动断开客户端的连接的问题，解决如下：服务可以通过对对象进行设置，可以设置最大接收缓存大小"}