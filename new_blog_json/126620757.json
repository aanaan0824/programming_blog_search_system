{"blogid": "126620757", "writerAge": "码龄1年", "writerBlogNum": "374", "writerCollect": "209", "writerComment": "11", "writerFan": "8396", "writerGrade": "5级", "writerIntegral": "3906", "writerName": "m0_67391907", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126620757.jpg", "writerRankTotal": "5051", "writerRankWeekly": "936", "writerThumb": "32", "writerVisitNum": "158385", "blog_read_count": "344", "blog_time": "于 2022-08-31 11:33:32 发布", "blog_title": "（利用IDEA+Maven）定制属于自己的jar包", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>在日常的Java开发中，我们有时候会想定制属于自己的jar包：</p>\n<p>我们提前写好一些工具类的代码，然后在想使用的时候就把自己的jar包导入。</p>\n<p><strong>下面我将介绍如何创建属于自己的jar包。</strong></p>\n<hr/>\n<p>环境：IDEA+Maven开发环境</p>\n<p>实现思路：我们将在IDEA中创建两个Maven工程：A_utils 和 B_comply。其中A_utils是一个工具类，接下来我们将要把A_utils项目打包成一个jar包，然后在B_comply项目中引入并使用。</p>\n<hr/>\n<p>项目开始：</p>\n<p>首先，我们创建了一个工程A_utils，可以看到我们只在其中定义了一个类PrintUtils，类中只有一个简单的静态方法：echo( )——负责打印一句话。</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\225b52e277b442929000d176d1008989.png\"/></p>\n<p>接下来利用Maven的功能将它打包为jar包。</p>\n<p>选择IDEA右边的Maven，点击Maven生命周期控制器–Lifecyccle，执行package操作。（注意，如果是初次执行Package操作，则IDEA会自动连接网络去下载一些必要的组件，等待一分钟左右即可）</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\9022d51abda0432e8cdeb27a53e73bf8.png\"/></p>\n<p>接下来IDEA的控制台将会提示我们打包已经完成，并且返回给我们一个本地地址。</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\eedf00217ad343fdb448b80c93c3c38f.png\"/></p>\n<h3><a id=\"_jar_32\"></a>我们按照上面那个地址，在文件系统中把生成的 jar包选中，拷贝。</h3>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\135447fff0544c5694de55ae3ed9a437.png\"/></p>\n<h3><a id=\"_A_utils_jar_36\"></a>至此，我们就已经成功的把 A_utils项目打包成了一个可复用的 jar包。</h3>\n<hr/>\n<p><strong>接下来</strong>我们创建第二个工程B_comply ，将刚才所拷贝的 jar包直接粘贴在当前项目的resources目录下。</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\02360185a0c047a78f572f33875f1753.png\"/></p>\n<p>然后我们在B_comply项目中导入依赖：</p>\n<p>选择File — Project Structure — Libraries — 添加新的jar包依赖</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\bf6cb7c14aaa48ea923276ec008cfe95.png\"/></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\b4d749ff56994d90a831725d6a0d0507.png\"/></p>\n<p>选中我们刚刚拷贝进来的 jar包，点击OK。</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\fb414f4132a3416b805fc806f0ff25d4.png\"/></p>\n<p>jar包导入完毕。</p>\n<hr/>\n<h2><a id=\"_60\"></a>接下来就是测试环节了！！！</h2>\n<p>我们直接在B_comply项目中调用A_utils中的静态方法echo( )试试看。</p>\n<pre><code>// 测试 jar包导入是否成功\npublic class Test {\n    public static void main(String[] args) {\n       \n        PrintUtils.echo();  // A_utils项目中的echo()静态方法\n\n    }\n}\n</code></pre>\n<p>可以观察到控制台直接打印出信息，我们定制的专属 jar包已经成功导入了项目B_comply。</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\b0bc896d6d324c929457a4a9ac18c931.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-08-31 11:33:32", "summary": "在日常的开发中，我们有时候会想定制属于自己的包：我们提前写好一些工具类的代码，然后在想使用的时候就把自己的包导入。下面我将介绍如何创建属于自己的包。环境：开发环境实现思路：我们将在中创建两个工程：和。"}