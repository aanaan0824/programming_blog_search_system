{"blogid": "121865094", "writerAge": "码龄2年", "writerBlogNum": "50", "writerCollect": "1466", "writerComment": "498", "writerFan": "3206", "writerGrade": "5级", "writerIntegral": "1727", "writerName": "Yuan-Programmer", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_121865094.jpg", "writerRankTotal": "21386", "writerRankWeekly": "6631", "writerThumb": "417", "writerVisitNum": "114051", "blog_read_count": "11072", "blog_time": "已于 2022-06-26 17:37:06 修改", "blog_title": "使用SpringBoot一小时快速搭建一个简单后台管理（后端篇）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p></p>\n<blockquote>\n<p>不好意思让大家久等啦，最近也是因为学期末了，事情多了一点，所以更新的比较慢，请大家谅解下~</p>\n<p>好了话不多说，进入今天的教程环节</p>\n<p><strong>本次案例一共两篇文章教学：</strong></p>\n<p>（第一篇）：数据表设计，前端框架引入和编写前端页面，搭建基本的springboot项目，引入前端到springboot项目中，在浏览器显示</p>\n<p>（第二篇）：后端代码的设计，这部分逻辑涉及的比较多，所以单独放一篇出来讲，代码从0手敲讲解，保证你能学会，完成增删改查的功能</p>\n<p><a class=\"link-info\" href=\"https://blog.csdn.net/weixin_47971206/article/details/121368075\" title=\"各大技术基础教学、实战开发教学（最新更新时间2021-12-11）\">各大技术基础教学、实战开发教学（最新更新时间2021-12-11）</a></p>\n</blockquote>\n<blockquote>\n<h3 id=\"%E6%95%88%E6%9E%9C%E6%BC%94%E7%A4%BA\">效果演示</h3>\n<div class=\"csdn-video-box\">\n<iframe allowfullscreen=\"true\" data-mediaembed=\"bilibili\" id=\"IINtUEig-1639225125840\" src=\"https://player.bilibili.com/player.html?aid=977341412\"></iframe>\n<p></p>\n</div>\n</blockquote>\n<blockquote>\n<h3 id=\"main-toc\"><strong>目录</strong></h3>\n<p id=\"%E5%89%8D%E8%A8%80-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></p>\n<p id=\"%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D-toc\" style=\"margin-left:0px;\"><a href=\"#%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D\">项目结构介绍</a></p>\n<p id=\"bean%EF%BC%88%E6%95%B0%E6%8D%AE%E5%B1%82%EF%BC%89-toc\" style=\"margin-left:0px;\"><a href=\"#bean%EF%BC%88%E6%95%B0%E6%8D%AE%E5%B1%82%EF%BC%89\">bean（数据层）</a></p>\n<p id=\"repository%EF%BC%88%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E5%B1%82%EF%BC%89-toc\" style=\"margin-left:0px;\"><a href=\"#repository%EF%BC%88%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E5%B1%82%EF%BC%89\">repository（数据访问层）</a></p>\n<p id=\"service%EF%BC%88%E4%B8%9A%E5%8A%A1%E5%B1%82%E6%8E%A5%E5%8F%A3%EF%BC%89-toc\" style=\"margin-left:0px;\"><a href=\"#service%EF%BC%88%E4%B8%9A%E5%8A%A1%E5%B1%82%E6%8E%A5%E5%8F%A3%EF%BC%89\">service（业务层接口）</a></p>\n<p id=\"serviceImpl%EF%BC%88%E4%B8%9A%E5%8A%A1%E5%B1%82%E5%AE%9E%E7%8E%B0%EF%BC%89-toc\" style=\"margin-left:0px;\"><a href=\"#serviceImpl%EF%BC%88%E4%B8%9A%E5%8A%A1%E5%B1%82%E5%AE%9E%E7%8E%B0%EF%BC%89\">serviceImpl（业务层实现）</a></p>\n<p id=\"controller%EF%BC%88%E6%8E%A7%E5%88%B6%E5%B1%82%EF%BC%89-toc\" style=\"margin-left:0px;\"><a href=\"#controller%EF%BC%88%E6%8E%A7%E5%88%B6%E5%B1%82%EF%BC%89\">controller（控制层）</a></p>\n<p id=\"%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E6%98%BE%E7%A4%BA%E6%95%B0%E6%8D%AE-toc\" style=\"margin-left:40px;\"><a href=\"#%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E6%98%BE%E7%A4%BA%E6%95%B0%E6%8D%AE\">页面加载显示数据</a></p>\n<p id=\"IndexController%EF%BC%88%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E6%98%BE%E7%A4%BA%E6%89%80%E6%9C%89%E7%94%A8%E6%88%B7%EF%BC%89-toc\" style=\"margin-left:80px;\"><a href=\"#IndexController%EF%BC%88%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E6%98%BE%E7%A4%BA%E6%89%80%E6%9C%89%E7%94%A8%E6%88%B7%EF%BC%89\">IndexController（页面加载显示所有用户）</a></p>\n<p id=\"%E5%89%8D%E7%AB%AF%E4%BF%AE%E6%94%B9-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%89%8D%E7%AB%AF%E4%BF%AE%E6%94%B9\">前端修改</a></p>\n<p id=\"%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C-toc\" style=\"margin-left:80px;\"><a href=\"#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C\">运行结果</a></p>\n<p id=\"%E6%9F%A5%E8%AF%A2%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%9F%A5%E8%AF%A2%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97\">查询功能模块</a></p>\n<p id=\"Ajax%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%E5%B1%80%E9%83%A8%E5%88%B7%E6%96%B0-toc\" style=\"margin-left:80px;\"><a href=\"#Ajax%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%E5%B1%80%E9%83%A8%E5%88%B7%E6%96%B0\">Ajax异步请求局部刷新</a></p>\n<p id=\"UserController%E5%A4%84%E7%90%86%E6%9F%A5%E8%AF%A2%E8%AF%B7%E6%B1%82-toc\" style=\"margin-left:80px;\"><a href=\"#UserController%E5%A4%84%E7%90%86%E6%9F%A5%E8%AF%A2%E8%AF%B7%E6%B1%82\">UserController处理查询请求</a></p>\n<p id=\"%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C-toc\" style=\"margin-left:80px;\"><a href=\"#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C\">运行结果</a></p>\n<p id=\"%E5%88%A0%E9%99%A4%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%88%A0%E9%99%A4%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97\">删除功能模块</a></p>\n<p id=\"%E4%BF%AE%E6%94%B9%E5%89%8D%E7%AB%AF-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%BF%AE%E6%94%B9%E5%89%8D%E7%AB%AF\">修改前端</a></p>\n<p id=\"UserController%E5%A4%84%E7%90%86%E5%88%A0%E9%99%A4%E8%AF%B7%E6%B1%82-toc\" style=\"margin-left:80px;\"><a href=\"#UserController%E5%A4%84%E7%90%86%E5%88%A0%E9%99%A4%E8%AF%B7%E6%B1%82\">UserController处理删除请求</a></p>\n<p id=\"%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C-toc\" style=\"margin-left:80px;\"><a href=\"#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C\">运行结果</a></p>\n<p id=\"%E6%B7%BB%E5%8A%A0%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%B7%BB%E5%8A%A0%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97\">添加功能模块</a></p>\n<p id=\"JS%E5%92%8CAjax%E9%83%A8%E5%88%86-toc\" style=\"margin-left:80px;\"><a href=\"#JS%E5%92%8CAjax%E9%83%A8%E5%88%86\">JS和Ajax部分</a></p>\n<p id=\"UserController%E5%A4%84%E7%90%86%E6%B7%BB%E5%8A%A0%E8%AF%B7%E6%B1%82-toc\" style=\"margin-left:80px;\"><a href=\"#UserController%E5%A4%84%E7%90%86%E6%B7%BB%E5%8A%A0%E8%AF%B7%E6%B1%82\">UserController处理添加请求</a></p>\n<p id=\"%E4%BF%AE%E6%94%B9%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97-toc\" style=\"margin-left:40px;\"><a href=\"#%E4%BF%AE%E6%94%B9%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97\">修改功能模块</a></p>\n<p id=\"%E4%BF%AE%E6%94%B9%E5%89%8D%E7%AB%AF-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%BF%AE%E6%94%B9%E5%89%8D%E7%AB%AF\">修改前端</a></p>\n<p id=\"JS%E9%80%BB%E8%BE%91%E5%A4%84%E7%90%86-toc\" style=\"margin-left:80px;\"><a href=\"#JS%E9%80%BB%E8%BE%91%E5%A4%84%E7%90%86\">JS逻辑处理</a></p>\n<p id=\"UserController%E5%A4%84%E7%90%86%E4%BF%AE%E6%94%B9%E8%AF%B7%E6%B1%82-toc\" style=\"margin-left:80px;\"><a href=\"#UserController%E5%A4%84%E7%90%86%E4%BF%AE%E6%94%B9%E8%AF%B7%E6%B1%82\">UserController处理修改请求</a></p>\n<p id=\"%E6%80%BB%E7%BB%93-toc\" style=\"margin-left:0px;\"><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></p>\n<p id=\"Gitee%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%9C%B0%E5%9D%80%EF%BC%88%E6%9C%AC%E6%AC%A1%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%EF%BC%89-toc\" style=\"margin-left:0px;\"><a href=\"#Gitee%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%9C%B0%E5%9D%80%EF%BC%88%E6%9C%AC%E6%AC%A1%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%EF%BC%89\">Gitee开源项目下载地址（所以项目都在这里）</a></p>\n<p id=\"articleContentId-toc\" style=\"margin-left:0px;\"><a href=\"#articleContentId\">各大技术基础教学、实战项目开发教学</a></p>\n<hr id=\"hr-toc\"/>\n<p id=\"%E4%BF%AE%E6%94%B9%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97-toc\" style=\"margin-left:0px;\"></p>\n</blockquote>\n<blockquote>\n<h1 id=\"%E5%89%8D%E8%A8%80\">前言</h1>\n<p>我们在上一篇中呢已经简单的搭建了一个前端页面，有基础的增删改查按钮</p>\n<p>同时呢也创建了一个SpringBoot项目，也做了一些初始配置，并且已经成功的将项目运行了起来，那么，我们今天就把后端完善，实现基本的增删改查功能</p>\n</blockquote>\n<blockquote>\n<h1 id=\"%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D\">项目结构介绍</h1>\n<p>项目的整体结构目录如下</p>\n<p><img alt=\"\" height=\"281\" src=\"..\\..\\static\\image\\036dee477c96483588f4aa79329a210a.png\" width=\"391\"/></p>\n<p>学过SSM的同学对这个目录结构是不是非常的熟悉，我们大致介绍一下每个目录的作用</p>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:600px;\"><tbody><tr><td style=\"width:192px;\">bean</td><td style=\"width:406px;\">数据层（存放数据类）</td></tr><tr><td style=\"width:192px;\">config</td><td style=\"width:406px;\">存放一些基本配置文件</td></tr><tr><td style=\"width:192px;\">controller</td><td style=\"width:406px;\">控制层（处理客户端的请求）</td></tr><tr><td style=\"width:192px;\">repository</td><td style=\"width:406px;\">相当于DAO层（数据访问层，和数据库打交道）</td></tr><tr><td style=\"width:192px;\">service</td><td style=\"width:406px;\">业务层的接口类（定义接口方法）</td></tr><tr><td style=\"width:192px;\">serviceImpl</td><td style=\"width:406px;\">业务层的实现类（处理逻辑）</td></tr></tbody></table>\n<p>好了，整体项目结构以及每个目录的作用已经介绍完毕，接下来我们就开始设计吧~</p>\n</blockquote>\n<blockquote>\n<h1 id=\"bean%EF%BC%88%E6%95%B0%E6%8D%AE%E5%B1%82%EF%BC%89\">bean（数据层）</h1>\n<p>我们在bean包下新建一个User类，添加两个注解</p>\n<p>这里的<span style=\"background-color:#f9eda6;\">@Entity</span>注解里面为什么要加上<span style=\"background-color:#f9eda6;\">name</span>这个属性值呢，因为我们在上一篇中创建表的时候，保存表的表名为 <span style=\"background-color:#f9eda6;\">t_user </span>，不知道大伙还记得没</p>\n<p>如果不加上name这个属性，会默认类名小写（user）去识别数据库中的表，这时候就会对应不上，所以需要加上name属性与t_user表绑定</p>\n<p><span style=\"background-color:#f9eda6;\">@Data</span>注解会自动生成set,get,toString等方法</p>\n<p><span style=\"background-color:#f9eda6;\">@GeneratedValue</span>注解设置主键id为自增长，不然和数据库不一致会报错哦~</p>\n<pre><code class=\"language-java\">@Entity(name = \"t_user\")\n@Data\npublic class User {\n\n    @Id\n    @GeneratedValue(strategy= GenerationType.IDENTITY)\n    private Integer id;\n    private String username;\n    private String nickname;\n    private String password;\n}\n</code></pre>\n</blockquote>\n<blockquote>\n<h1 id=\"repository%EF%BC%88%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E5%B1%82%EF%BC%89\">repository（数据访问层）</h1>\n<p>在repository包下新建一个UserRepository接口类（注意是接口哦！）</p>\n<p>这里只需要定义接口类就行了，我们暂时还用不到自定义sql语句，所以其他不用写</p>\n<pre><code class=\"language-java\">public interface UserRepository extends JpaRepository&lt;User, Integer&gt; {\n\n}\n</code></pre>\n</blockquote>\n<blockquote>\n<h1 id=\"service%EF%BC%88%E4%B8%9A%E5%8A%A1%E5%B1%82%E6%8E%A5%E5%8F%A3%EF%BC%89\">service（业务层接口）</h1>\n<p>在service包下新建一个UserService接口类（注意是接口哦！）</p>\n<p>定义五个方法（增删改查），其中查询有两个方法，一个是页面加载要显示所有用户信息的，一个是通过搜索框搜索的模糊查询</p>\n<pre><code class=\"language-java\">public interface UserService {\n    \n    void insertUser(User user);// 添加用户\n    \n    void deleteUser(Integer uid);// 删除用户\n    \n    void updateUser(User user);// 修改用户\n    \n    List&lt;User&gt; selectAllUser();// 查询所有用户\n    \n    List&lt;User&gt; selectLike(String search);// 模糊查询\n}\n</code></pre>\n</blockquote>\n<blockquote>\n<h1 id=\"serviceImpl%EF%BC%88%E4%B8%9A%E5%8A%A1%E5%B1%82%E5%AE%9E%E7%8E%B0%EF%BC%89\">serviceImpl（业务层实现）</h1>\n<p>在serviceImpl包下新建一个UserServiceImpl类，实现UserService接口</p>\n<p>前面四个基本的增删改查就不多说啦~大伙应该都知道</p>\n<p>主要是第五个<span style=\"color:#ed7976;\"><strong>selectLike（重点！原创）</strong></span><span style=\"color:#0d0016;\">这个方法，大伙可以仔细研究一下我的这个</span><span style=\"color:#ed7976;\"><strong>模糊查询设计模式</strong></span><span style=\"color:#0d0016;\">，很有帮助的哦~ 这里不多介绍了，可以自己仔细学一学</span></p>\n<pre><code class=\"language-java\">@Service\npublic class UserServiceImpl implements UserService {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Override\n    public void insertUser(User user) {\n        userRepository.save(user);\n    }\n\n    @Override\n    public void deleteUser(Integer uid) {\n        userRepository.deleteById(uid);\n    }\n\n    @Override\n    public void updateUser(User user) {\n        userRepository.saveAndFlush(user);\n    }\n\n    @Override\n    public List&lt;User&gt; selectAllUser() {\n        return userRepository.findAll();\n    }\n\n    /**\n     * 查询优先级：\n     * 1.先查询是否为整型，为整型则通过ID主键查询，返回结果，不为整型则模糊查询其他字段\n     * 2.模糊查询字段，忽略密码的模糊查询，对用户名和昵称进行模糊查询，返回结果\n     * @param search 查询字段\n     * @return 查询列表集合\n     */\n    @Override\n    public List&lt;User&gt; selectLike(String search) {\n        List&lt;User&gt; list = new ArrayList&lt;&gt;();// 查询列表集合\n        User user = new User();\n        user.setUsername(search);\n        user.setNickname(search);\n        try {\n            Integer uid = Integer.parseInt(search);\n            Optional&lt;User&gt; optional = userRepository.findById(uid);\n            if (!optional.isPresent()) {\n                list = selectVague(user);\n            } else {\n                list.add(optional.get());\n            }\n        }catch (NumberFormatException e) {\n            // 查询字段不为整型数据，捕获异常\n            list = selectVague(user);\n        }\n\n        return list;\n    }\n\n    /**\n     * 模糊查询\n     * @param user\n     * @return\n     */\n    private List&lt;User&gt; selectVague(User user) {\n        List&lt;User&gt; list = null;\n        ExampleMatcher matcher = ExampleMatcher.matchingAny()\n                .withMatcher(\"username\", ExampleMatcher.GenericPropertyMatchers.contains())\n                .withMatcher(\"nickname\", ExampleMatcher.GenericPropertyMatchers.contains())\n                .withIgnoreCase(\"uid\")\n                .withIgnoreCase(\"password\");\n        Example&lt;User&gt; example = Example.of(user, matcher);\n        list = userRepository.findAll(example);\n        return list;\n    }\n}</code></pre>\n</blockquote>\n<blockquote>\n<h1 id=\"controller%EF%BC%88%E6%8E%A7%E5%88%B6%E5%B1%82%EF%BC%89\">controller（控制层）</h1>\n<p>基本的一个整体流程已经搭建完毕，最后就是处理controller控制层的逻辑，我们首先完善一下上一篇中的IndexController的代码，让页面加载时候就能显示所有用户的数据、</p>\n<p>在controller包下新建一个UserController类，设置改控制类处理所有/user下的请求</p>\n<pre><code class=\"language-java\">@RestController\n@RequestMapping(value = \"/user\")\npublic class UserController {\n\n}</code></pre>\n<h2 id=\"%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E6%98%BE%E7%A4%BA%E6%95%B0%E6%8D%AE\">页面加载显示数据</h2>\n<h3 id=\"IndexController%EF%BC%88%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E6%98%BE%E7%A4%BA%E6%89%80%E6%9C%89%E7%94%A8%E6%88%B7%EF%BC%89\">IndexController（页面加载显示所有用户）</h3>\n<pre><code class=\"language-java\">@RestController\npublic class IndexController {\n\n    @Autowired\n    private UserService userService;\n\n    @RequestMapping(value = \"/index\") // 访问路径\n    public ModelAndView toIndex() {\n        // 返回templates目录下index.html\n        ModelAndView view = new ModelAndView(\"index\");\n        // 查询所有的用户，添加到model视图里\n        view.addObject(\"user_list\", userService.selectAllUser());\n        return view;\n    }\n}</code></pre>\n<h3 id=\"%E5%89%8D%E7%AB%AF%E4%BF%AE%E6%94%B9\">前端修改</h3>\n<p>同时修改前端内容，通过<span style=\"background-color:#f9eda6;\">th:each遍历user_list</span>，分别获取编号，用户名，昵称，密码，通过<span style=\"background-color:#f9eda6;\">th:text</span>标签赋值text（对thymeleaf语法不熟悉的可以先去简单看一下基础语法哦~）</p>\n<p><img alt=\"\" height=\"398\" src=\"..\\..\\static\\image\\b0981feee8f04bd2a7a79578a1314e0e.png\" width=\"1139\"/></p>\n<p>还有HTML顶部不要忘了添加支持thymeleaf语法哦~</p>\n<p><img alt=\"\" height=\"122\" src=\"..\\..\\static\\image\\08532113bc5f4178824f43e4abbfd49a.png\" width=\"778\"/></p>\n<h3 id=\"%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C\">运行结果</h3>\n<p>为了方便查看结果，预先在数据库插入几条数据</p>\n<p><img alt=\"\" height=\"251\" src=\"..\\..\\static\\image\\8494ae4cd43847939d5eaafcdcda08e1.png\" width=\"519\"/></p>\n<p>回到IDEA项目，点击右上角的debug模式启动项目，打开浏览器输入localhost:8081/index（路径根据自己情况来），就能看到数据已经成功显示上来啦</p>\n<p><img alt=\"\" height=\"677\" src=\"..\\..\\static\\image\\35045bd6e7f64d868aea9089ccc17dc0.png\" width=\"1038\"/></p>\n<hr/>\n<hr/>\n<h2 id=\"%E6%9F%A5%E8%AF%A2%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97\">查询功能模块</h2>\n<h3 id=\"Ajax%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%E5%B1%80%E9%83%A8%E5%88%B7%E6%96%B0\">Ajax异步请求局部刷新</h3>\n<p>给搜索按钮和搜索框都设置一个ID，同时给数据显示部分的div设置th:fragment标签，获取后端的代码片段</p>\n<p><img alt=\"\" height=\"279\" src=\"..\\..\\static\\image\\67404feae9e147598a1d95ecebe5ddfe.png\" width=\"1091\"/></p>\n<p> 在index.js中添加代码，向后端发送异步请求</p>\n<pre><code class=\"language-javascript\">// 查询\n$('#findBtn').click(function () {\n\t// 发送GET异步请求\n\t$.ajax({\n\t\ttype: 'GET',\n\t\turl: '/user/select', // 请求路径\n\t\tdata: {\n\t\t\t'search': $('#search').val()\n\t\t},\n\t\tsuccess: function (data) {\n\t\t\t// 局部刷新数据显示部分的div\n\t\t\t$('#userTable').html(data)\n\t\t},\n\t\terror: function (err) {\n\t\t\tconsole.log(err)\n\t\t\talert('操作失败，请刷新重新尝试！')\n\t\t}\n\t})\n})</code></pre>\n<h3 id=\"UserController%E5%A4%84%E7%90%86%E6%9F%A5%E8%AF%A2%E8%AF%B7%E6%B1%82\">UserController处理查询请求</h3>\n<pre><code class=\"language-java\">@RestController\n@RequestMapping(value = \"/user\")\npublic class UserController {\n\n    // 注入业务层对象\n    @Autowired\n    private UserService userService;\n\n    @GetMapping(value = \"/select\")\n    public ModelAndView selectLike(String search) {\n        // 返回th:fragment代码片段\n        ModelAndView view = new ModelAndView(\"index::userTable\");\n        view.addObject(\"user_list\", userService.selectLike(search));\n        return view;\n    }\n}</code></pre>\n<h3>运行结果</h3>\n<p>重新启动，输入xiao，成功显示</p>\n<p><img alt=\"\" height=\"559\" src=\"..\\..\\static\\image\\074ae09bdbc8477bbab35022d3357d79.png\" width=\"1029\"/></p>\n<p> 输入数值，优先查询编号</p>\n<p><img alt=\"\" height=\"450\" src=\"..\\..\\static\\image\\3954e7a0442643c4b7439ec41b1c48e5.png\" width=\"1009\"/></p>\n<hr/>\n<hr/>\n<h2 id=\"%E5%88%A0%E9%99%A4%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97\">删除功能模块</h2>\n<p>刚刚的查询功能前端呢我是在index.js里面处理的，接下来删除模块我们换一个方法</p>\n<p>首先，删除一条数据，我们是不是通关编号id进行删除呀，所以发送请求的时候是不是要传递编号数据</p>\n<h3 id=\"%E4%BF%AE%E6%94%B9%E5%89%8D%E7%AB%AF\">修改前端</h3>\n<p>在删除按钮中添加一个th:onclick标签，传递参数为当前行的编号</p>\n<p><img alt=\"\" height=\"162\" src=\"..\\..\\static\\image\\3b755131266e4945a9358237936da2e0.png\" width=\"869\"/></p>\n<p> 接着在html底部添加如下代码</p>\n<pre><code class=\"language-javascript\">&lt;script th:inline=\"javascript\"&gt;\n\tfunction deleteBtn(id) {\n        // 发送请求\n\t\t$.ajax({\n\t\t\ttype: 'POST',\n\t\t\turl: '/user/delete',\n\t\t\tdata: {\n\t\t\t\t'id': 'id' // 编号\n\t\t\t},\n\t\t\tsuccess: function (data) {\n                // 局部刷新\n\t\t\t\t$('#userTable').html(data)\n\t\t\t},\n\t\t\terror: function (err) {\n\t\t\t\tconsole.log(err)\n\t\t\t\talert(\"操作失败，请刷新重新尝试！\")\n\t\t\t}\n\t\t})\n\t}\n&lt;/script&gt;</code></pre>\n<h3 id=\"UserController%E5%A4%84%E7%90%86%E5%88%A0%E9%99%A4%E8%AF%B7%E6%B1%82\">UserController处理删除请求</h3>\n<p>添加新的方法</p>\n<pre><code class=\"language-java\">@PostMapping(value = \"/delete\")\npublic ModelAndView deleteUser(Integer id) {\n    // 通过编号删除用户\n    userService.deleteUser(id);\n    ModelAndView view = new ModelAndView(\"index::userTable\");\n    // 返回新的数据列表\n    view.addObject(\"user_list\", userService.selectAllUser());\n    return view;\n}</code></pre>\n<h3>运行结果</h3>\n<p>点击删除第五条数据，成功删除了第五条数据并刷新表格 </p>\n<p><img alt=\"\" height=\"608\" src=\"..\\..\\static\\image\\411f85040df84c09a02c769ea803e1d5.png\" width=\"1045\"/></p>\n<hr/>\n<hr/>\n<h2 id=\"%E6%B7%BB%E5%8A%A0%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97\">添加功能模块</h2>\n<h3 id=\"JS%E5%92%8CAjax%E9%83%A8%E5%88%86\">JS和Ajax部分</h3>\n<p>通过JQuery对提交的表单进行一些非空检验，通过之后发出POST异步请求</p>\n<p>在index.js添加下面代码</p>\n<pre><code class=\"language-javascript\">// 添加\n$('#addSubmitBtn').click(function () {\n\tvar username = $('#addUserName').val()\n\tvar nickname = $('#addNickname').val()\n\tvar password = $(\"#addPassword\").val()\n\n\t// 非空效验\n\tif (username.length == 0){\n\t\talert(\"用户名不能为空\")\n\t}else if(nickname.length == 0){\n\t\talert(\"昵称不能为空\")\n\t}else if (password.length == 0){\n\t\talert(\"密码不能为空\")\n\t}else {\n\t\t$.ajax({\n\t\t\ttype: 'POST',\n\t\t\turl: '/user/insert',\n\t\t\tdata: {\n\t\t\t\t'username': username, //用户名\n\t\t\t\t'nickname': nickname, //昵称\n\t\t\t\t'password': password //密码\n\t\t\t},\n\t\t\tsuccess: function (data) {\n\t\t\t\t// 关闭modal框\n\t\t\t\t$('#modal-form-add').modal('hide')\n\t\t\t\t// 清空modal框里上一次的数据\n\t\t\t\tdocument.getElementById(\"addForm\").reset()\n\t\t\t\t// 局部刷新\n\t\t\t\t$('#userTable').html(data)\n\t\t\t},\n\t\t\terror: function (err) {\n\t\t\t\tconsole.log(err)\n\t\t\t\talert(\"操作失败，请刷新重新尝试！\")\n\t\t\t}\n\t\t})\n\t}\n})</code></pre>\n<h3 id=\"UserController%E5%A4%84%E7%90%86%E6%B7%BB%E5%8A%A0%E8%AF%B7%E6%B1%82\">UserController处理添加请求</h3>\n<p>添加新的方法</p>\n<pre><code class=\"language-java\">@PostMapping(value = \"/insert\")\npublic ModelAndView insertUser(User user) {\n    // 插入数据\n    userService.insertUser(user);\n    // 回传代码片段\n    ModelAndView view = new ModelAndView(\"index::userTable\");\n    view.addObject(\"user_list\", userService.selectAllUser());\n    return view;\n}</code></pre>\n<hr/>\n<hr/>\n<h2 id=\"%E4%BF%AE%E6%94%B9%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97\">修改功能模块</h2>\n<h3>修改前端</h3>\n<p>当我们点击的修改的时候，弹出一个修改信息框，我们是不是要在信息框显示当前修改前的用户数据</p>\n<p>这次我们使用th:onclick的方法快速绑定数据到弹出框，但是这次的数据有string字符串类型，之前的方法会报错，我们采用另一种新的方法</p>\n<p>通过<span style=\"background-color:#f9eda6;\">[[${ }]]</span>方法传递字符串数据（那个报错小红点不用理，正常运行）</p>\n<p><img alt=\"\" height=\"338\" src=\"..\\..\\static\\image\\bf68e5a754c8491aa06dd8f8164191bf.png\" width=\"1200\"/></p>\n<p> 接着在HTML底部的内联javascript里加上代码</p>\n<pre><code class=\"language-javascript\">// 点击修改按钮\nfunction updateBtn(id, username, nickname, password) {\n\t// 传递数据到弹出框\n\t$('#modal-form-update').modal('show');\n\t$('#updateUserId').val(id)\n\t$('#updateUsername').val(username)\n\t$('#updateNickname').val(nickname)\n\t$('#updatePassword').val(password)\n}</code></pre>\n<p>刷新浏览器，随便点击一个修改，成功显示数据上来了</p>\n<p><img alt=\"\" height=\"534\" src=\"..\\..\\static\\image\\1c625a1a8b904a6d9d9390051c71571b.png\" width=\"1200\"/></p>\n<p>同时给编号的input标签设置disabled属性，禁止修改</p>\n<p><img alt=\"\" height=\"507\" src=\"..\\..\\static\\image\\f5e2948636f146cd9e3ec4aabfe13332.png\" width=\"1200\"/></p>\n<h3 id=\"JS%E9%80%BB%E8%BE%91%E5%A4%84%E7%90%86\">JS逻辑处理</h3>\n<p>在index.js添加如下代码</p>\n<pre><code class=\"language-javascript\">// 修改提交\n$('#updateSubmitBtn').click(function () {\n\tvar id = $('#updateUserId').val()\n\tvar username = $('#updateUsername').val()\n\tvar nickname = $('#updateNickname').val()\n\tvar password = $(\"#updatePassword\").val()\n\n    // 非空检验\n\tif (username.length ==0) {\n\t\talert('用户名不能为空')\n\t}else if (nickname.length == 0) {\n\t\talert('昵称不能为空')\n\t}else if (password.length == 0) {\n\t\talert('密码不能为空')\n\t}else {\n\t\t$.ajax({\n\t\t\ttype: 'POST',\n\t\t\turl: '/user/update',\n\t\t\tdata: {\n\t\t\t\t'id': id, //编号\n\t\t\t\t'username': username, //用户名\n\t\t\t\t'nickname': nickname, //昵称\n\t\t\t\t'password': password  //密码\n\t\t\t},\n\t\t\tsuccess: function (data) {\n\t\t\t\t// 关闭modal框\n\t\t\t\t$('#modal-form-update').modal('hide')\n\t\t\t\t// 清空modal框里上一次的数据\n\t\t\t\tdocument.getElementById(\"updateForm\").reset()\n\t\t\t\t// 局部刷新\n\t\t\t\t$('#userTable').html(data)\n\t\t\t},\n\t\t\terror: function (err) {\n\t\t\t\tconsole.log(err)\n\t\t\t\talert('操作失败，请刷新重新尝试！')\n\t\t\t}\n\t\t})\n\t}\n})</code></pre>\n<h3 id=\"UserController%E5%A4%84%E7%90%86%E4%BF%AE%E6%94%B9%E8%AF%B7%E6%B1%82\">UserController处理修改请求</h3>\n<pre><code class=\"language-java\">@PostMapping(value = \"update\")\npublic ModelAndView updateUser(User user) {\n    userService.updateUser(user);\n    ModelAndView view = new ModelAndView(\"index::userTable\");\n    view.addObject(\"user_list\", userService.selectAllUser());\n    return view;\n}</code></pre>\n</blockquote>\n<blockquote>\n<h1 id=\"%E6%80%BB%E7%BB%93\">总结</h1>\n<p>整体的一个项目呢已经做完了，增删改查的功能都有了</p>\n<p><strong>其实还有很多地方可以完善的，比如搜索框回车搜索、重复代码抽取成函数单独进行等等，这些有兴趣的小伙伴自己再去优化啦~ 或者私信我帮忙也行~</strong></p>\n<p>这里总结我再帮大家捋一捋整个流程</p>\n<ul><li>表的设计和创建</li><li>搭建前端静态页面</li><li>搭建后端 \n   <ul><li>bean数据层</li><li>repository数据访问层</li><li>service业务接口</li><li>serviceImpl业务实现</li><li>controller控制层</li></ul></li><li>优化前端（JS，Ajax）</li></ul>\n</blockquote>\n<blockquote>\n<h1 id=\"Gitee%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%9C%B0%E5%9D%80%EF%BC%88%E6%9C%AC%E6%AC%A1%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%EF%BC%89\">Gitee开源项目下载地址（所以项目都在这里）</h1>\n<p><a class=\"link-info\" href=\"https://gitee.com/yuandewei/Yuan-SpringBoot\" title=\"SpringBoot项目教学合集: CSDN中的所有SpringBoot项目开源，持续更新新项目、新教学文章\">SpringBoot项目教学合集: CSDN中的所有SpringBoot项目开源，持续更新新项目、新教学文章</a></p>\n<h1 id=\"articleContentId\">各大技术基础教学、实战项目开发教学</h1>\n<p><a class=\"link-info\" href=\"https://blog.csdn.net/weixin_47971206/article/details/121368075\" title=\"各大技术基础教学、实战开发教学（最新更新时间2021-12-11）\">各大技术基础教学、实战开发教学（最新更新时间2021-12-11）</a></p>\n<p><strong>没有Gitee账号可以后台CSDN私聊我获取项目源码，或者文章留言你的邮箱我也会发给你</strong></p>\n</blockquote>\n</div>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 1, "php": 0, "time": "2022-06-26 17:37:06", "summary": "不好意思让大家久等啦，最近也是因为学期末了，事情多了一点，所以更新的比较慢，请大家谅解下好了话不多说，进入今天的教程环节本次案例一共两篇文章教学：第一篇：数据表设计，前端框架引入和编写前端页面，搭建基"}