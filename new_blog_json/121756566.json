{"blogid": "121756566", "writerAge": "码龄14年", "writerBlogNum": "109", "writerCollect": "1238", "writerComment": "700", "writerFan": "7786", "writerGrade": "5级", "writerIntegral": "3293", "writerName": "FlyLolo", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_121756566.jpg", "writerRankTotal": "14348", "writerRankWeekly": "4229", "writerThumb": "931", "writerVisitNum": "233541", "blog_read_count": "6403", "blog_time": "已于 2022-02-05 21:12:02 修改", "blog_title": "拆解Tomcat10: (一) 如何快速的学习一门新的语言（上）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"1_0\"></a>1.你是一个什么程序员</h2>\n<p>经常听到有人说，我是Java程序员、我是.NET程序员、我是PHP程序员（PHP是世界上最好的语言），现在编程语言越来越多，不说全栈，只算后端开发常用的语言就有好几种。但随着工作年限增长，接触的产品、项目越来越多，“跨语言”的情形经常发生。以后端程序员为例，如何快速的“跨界\"到另一门编程语言？</p>\n<p>工作这些年，做过PHP、.NET、Java这样的后端服务，也做过PB、Delphi、Winform（.NET）这样的桌面软件，以及iOS 的移动端APP，前端相关技术也有一定的了解。个人感觉同类型的技术跨语言学习还是比较容易的，现在通过几篇文章分享一下我对于一门新语言的学习心得。</p>\n<h2><a id=\"2__6\"></a>2. 现状</h2>\n<p>现在的情况是，程序员的分工越来越细。除了一些特定场景的软件，比如桌面软件、上位机等，做web相关开发的程序员应该是最多的。虽然现在招人的都想招个“全栈程序员“，但那估计也只能是一厢情愿了。随着涉及到的技术种类和技术方向越来越多，分工反而向着越来越细的方向发展。比如现在流行的“前后端分离”，拆分出来了“前端程序员”和“后端程序员”，“后端程序员”只要专注的给前端提供好API即可，原来的HTML、CSS完全可以抛掉。虽然是拆掉了一大部分需要关注的技术，但后端需要涉猎的技术也在膨胀。以数据库为例，多年前只是一门编程语言加上熟悉一两种数据库即可。但现在数据库除了关系型数据库，还有MongoDB等NoSql数据库，以及现在常用的Redis等。其他需要学习的还有MQ、Docker、Elasticsearch等等相关知识。如下图：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\423d02979390928b3bd387185de1e34a.png\"/></p>\n<p>其实反过来说，这样的条件下，换一门语言也很容易。因为通过这样的图也可以看到，在目前新技术越来越多的情况下，需要变化的只是复杂的技术版图中的一个小方块。从PHP、Java、.NET这些语言互换，如果只是做后端API，大部分“技术版图”都是不变的。网络、数据结构及算法是基础，数据库、Git、docker、k8s这些又都是支持多种语言的，完全都是通用的。</p>\n<p>而在这些后端语言内部，大部分都是面向对象语言，那么面向对象的思想、设计模式、SOLID和KISS等法则这些程序设计思想也是通用的，可以说这些程序设计思想相当于“内功”，具体的编程语言是表现形式，也就是“招式”。</p>\n<blockquote>\n<p><strong>张无忌</strong>：内功深厚，学啥都快。</p>\n</blockquote>\n<h2><a id=\"3_19\"></a>3.简单入门新的语言很容易</h2>\n<p>对于面向对象编程范畴的语言来说，工作过几年了“老鸟”都有这样的体会：学习一门新语言并快速的做一些CRUD的功能很容易。</p>\n<ul><li>快速的浏览一下新语言的基本语法，网上好多基础教程，找本实体书看看也是个很不错的选择。而且好多语言都脱胎于C/C++, 变量定义、循环和判断语句都或多或少的类似。特别是从Java或C#转到对方来说，那更是太方便了，好多语法都一样，甚至好大一段代码拷过去都不带报错的。这里需要说一下，各个语言的官方文档一般都是学习的好材料。这里需要表扬一下.NET,官方文档这块估计是做的最棒的。</li><li>着重看一下新语言的一些特殊语法，这样看别人的代码的时候不至于懵掉。</li><li>网上找一些CRUD的例子、开源代码等，如果是往现有项目中添加功能那就更简单了，照着写几个功能就差不多成为初级选手了。</li></ul>\n<h2><a id=\"4__27\"></a>4. 如何提高</h2>\n<p>简单入门容易，如果想继续提高，个人的经验是看一些开源项目，尤其以相应语言的基础开源框架的源码为最好，例如Java相关的Tomcat、Spring Framework，.NET的.NET Core、ASP.NET Core源码，为什么呢？</p>\n<ul><li>学习“最佳实践”。同样实现一个功能，可能会有N种方式，比如判断一个字符串是否有内容，第一想法是它不为空并且长度大于0。但也会想，这么新语言是否有更优雅的方法，自己这样实现会不会太Low？</li><li>学习架构思想和设计模式的运用。可以思考一下，如果让自己实现这样的一个框架， 该如何设计？个人认为供人使用的框架类项目更容易体现设计模式的使用，因为一般要考虑对多种场景的支持，易用、易扩展。</li><li>如果是学习的基础框架，那还有一些额外的好处。比如知道框架的处理逻辑，能准确的选择框架预留的扩展点，添加自己的逻辑。还有就是个性化配置及性能调优，基础框架一般都有一些默认的配置，但对于不同的业务系统场景，例如功能的增减、处理模式的选择、性能相关的比如并发量等等，需要对一些配置进行改变，从而达到更好的效果。</li></ul>\n<h2><a id=\"5__35\"></a>5. 尝试开始源码阅读之旅</h2>\n<p>从现在起，尝试开始阅读一门语言的基础框架源码，如何开始呢？第一步肯定是下载源码并搭建调试环境，但接下来，面对一个庞大的框架，从哪个类或者方法开始阅读呢？</p>\n<p>建议按照“事情发展的顺序”来进行，对于一个后端应用来说，主要的功能就是相应客户端的请求。为了避免前端语言的干扰，我们以JSON请求为例，比如以POST方式提交一个JSON到后端服务，服务接收到请求并进行处理，最终将处理结果返回给客户端，基本上就是这样的处理流程。而这个流程一般以HTTP协议的请求为主。</p>\n<h3><a id=\"51_HTTP_41\"></a>5.1 简要回顾一下HTTP相关知识</h3>\n<p>一个请求可以分为请求地址和请求方法，请求头和请求体。如下图所示<br/> <img alt=\"image-20211206094921655\" src=\"..\\..\\static\\image\\233eb2da9819cce8e4b885186eac43c7.png\"/><br/> 这是已POST请求的例子，请求体中的⑤请求内容是一段JSON，目的是新建一个用户。</p>\n<p>请求头是由一些key-value组成的集合，常见的元素有请求的长度、③请求内容格式和④期望的返回结果格式等。</p>\n<p>③请求内容格式注明了当前请求体中的内容的格式，本例是JSON。</p>\n<p>④期望的返回结果格式，告诉服务器，自己期望返回JSON格式的内容。服务器端如果支持多种格式的返回，例如支持JSON、XML等，这里可以根据客户端的期望返回对应的格式。所以这里只是期望，服务器如果不支持，还是有可能返回其他格式的响应数据。</p>\n<p>响应结果也分为头和体两部分，大概结构如下图：<br/> <img alt=\"image-20211206100839399\" src=\"..\\..\\static\\image\\9e00b1b41e23b4f72f6c6d8b45128fc5.png\"/><br/> 响应头部主要包括HTTP协议的版本、状态码、响应内容的格式等，响应体一般为响应的具体内容。</p>\n<p>所以，后端服务器就是实现了接收HTTP请求并进行处理，然后返回相应结果的功能。而后端服务一般由HTTP服务器（IIS、Apache、Tomcat等，Tomcat比较特殊，既实现了HTTP服务器的功能，又实现了servlet容器的功能。）+处理程序组成，所以与计算机网络相关的内容一般由HTTP服务器进行处理，如果不想深入学习这部分的同学可以跳过。</p>\n<p>那么，我们只需要实现接收到HTTP服务传过来的请求数据并处理返回给HTTP服务器即可。</p>\n<h3><a id=\"52__61\"></a>5.2 从哪开始阅读</h3>\n<p>客户端发出的请求就像唐僧取经一样，携带通关文牒（可能存在的Token等）经过层层磨难（多层组件的处理）到达西天取得真经（HTML、JSON、XML等）返回。</p>\n<p>那么可以将整个故事分为两部分：</p>\n<ul><li>框架的构建及启动：取经路的构建过程，八十一难不是瞬间构成的。</li><li>请求的处理流程：请求是都经过了那些环节，被做了哪些验证和处理。</li></ul>\n<p><strong>对框架源码的阅读也可以从这两条线出发</strong>。</p>\n<h2><a id=\"6__73\"></a>6. 思考一下</h2>\n<p>从框架设计的角度，先思考一下，都会有哪些组件，组合关系如何，大概会涉及哪些设计原则和设计模式？也可以大概画个流程图。</p>\n<ul><li>涉及不同请求格式的处理，例如XML、JSON等，那么每种格式就可能会有对应的一个或一组处处理类，对于单独的处理类，会用到工厂模式？对于多个处理类的管理，策略模式？</li><li>庞大的框架构建工程，建造者模式？</li><li>各种状态的监听，观察者模式？</li></ul>\n<p>现在可以选一门目标语言开始学习了，</p>\n<p><strong>下一篇</strong>：<a href=\"https://blog.csdn.net/Lolo_cs_dn/article/details/121584359\">如何在Idea中调试最新版本的Tomcat10源代码</a>，以Tomcat为例，开启新的源码阅读。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "PHP", "cpp": 1, "csharp": 1, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 1, "time": "2022-02-05 21:12:02", "summary": "你是一个什么程序员经常听到有人说，我是程序员、我是程序员、我是程序员是世界上最好的语言，现在编程语言越来越多，不说全栈，只算后端开发常用的语言就有好几种。但随着工作年限增长，接触的产品、项目越来越多，"}