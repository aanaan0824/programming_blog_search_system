{"blogid": "123316482", "writerAge": "码龄3年", "writerBlogNum": "51", "writerCollect": "295", "writerComment": "37", "writerFan": "702", "writerGrade": "3级", "writerIntegral": "651", "writerName": "暄踽", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123316482.jpg", "writerRankTotal": "51418", "writerRankWeekly": "60370", "writerThumb": "121", "writerVisitNum": "63040", "blog_read_count": "1248", "blog_time": "已于 2022-03-07 08:10:37 修改", "blog_title": "C#学习教程10——文件操作", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#10__1\">10. 文件操作</a></li><li><ul><li><a href=\"#101_Driveinfo_5\">10.1 Driveinfo：获取计算机驱动器信息</a></li><li><a href=\"#102_Directoryinfo_83\">10.2 Directoryinfo类：文件夹操作</a></li><li><a href=\"#103_Directory_150\">10.3 Directory类：文件夹操作</a></li><li><a href=\"#104_FileInfo_196\">10.4 FileInfo类：文件操作</a></li><li><a href=\"#105_File_258\">10.5 File类：文件操作</a></li><li><a href=\"#106_Path_308\">10.6 Path类：文件路径操作</a></li><li><a href=\"#107__353\">10.7 流</a></li><li><a href=\"#108_StreamReader_363\">10.8 StreamReader类：读取文件</a></li><li><a href=\"#109_StreamWriter_413\">10.9 StreamWriter类：写入文件</a></li><li><a href=\"#1010_FileStream_466\">10.10 FileStream类：文件读写</a></li><li><a href=\"#1011_BinaryReader_606\">10.11 BinaryReader类：读取二进制文件</a></li><li><a href=\"#1012_BinaryWriter_695\">10.12 BinaryWriter类：写入二进制数据</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"10__1\"></a>10. 文件操作</h1>\n<p>在操作变量和常量时这些值都是存放到内存中的，当程序运行结束后使用的数据全部被删除。如果想要长久保存应用程序中的数据，可以选用文件或数据库来存储。文件操作类在<code>System.IO</code>命名空间中，包括<strong>Driveinfo类、Directory类、Directoryinfo类、File类、Filelnfo类、Path类等。</strong></p>\n<h2><a id=\"101_Driveinfo_5\"></a>10.1 Driveinfo：获取计算机驱动器信息</h2>\n<p>查看计算机驱动器信息主要包括查看磁盘的空间、磁盘的文件格式、磁盘的卷标等。</p>\n<p>Driveinfo类是一个密封类，即不能被继承，其仅提供了一个构造方法，语法形式如下。</p>\n<pre><code class=\"prism language-c#\">Driveinfo(string driveName)\n</code></pre>\n<p>dirveName参数是指有效驱动器路径或驱动器号，Null值是无效的。</p>\n<pre><code class=\"prism language-c#\">// 创建Driveinfo类的实例\n// 磁盘的盘符是C的驱动器实例，通过该实例能获取该盘符下的信息，包括磁盘的名称、磁盘的格式\nDriveinfo driveInfo=new Driveinfo(\"C\");\n</code></pre>\n<table><thead><tr><th align=\"center\">属性或方法</th><th align=\"center\">作用</th></tr></thead><tbody><tr><td align=\"center\">AvailableFreeSpace</td><td align=\"center\">只读属性，获取驱动器上的可用空闲空间量（以字节为单位）</td></tr><tr><td align=\"center\">DriveFormat</td><td align=\"center\">只读属性，获取文件系统格式的名称，例如NTFS或FAT32</td></tr><tr><td align=\"center\">DriveType</td><td align=\"center\">只读属性，获取驱动器的类型，例如CD-ROM、可移动驱动器、网络驱动器或固定驱动器</td></tr><tr><td align=\"center\">IsReady</td><td align=\"center\">只读属性，获取一个指示驱动器是否已准备好的值，True为准备好了， False为未准备好</td></tr><tr><td align=\"center\">Name</td><td align=\"center\">只读属性，获取驱动器的名称，例如C:\\</td></tr><tr><td align=\"center\">RootDirectory</td><td align=\"center\">只读属性，获取驱动器的根目录</td></tr><tr><td align=\"center\">TotalFreeSpace</td><td align=\"center\">只读属性，获取驱动器上的可用空闲空间总量（以字节为单位）</td></tr><tr><td align=\"center\">TotalSize</td><td align=\"center\">只读属性，获取驱动器上存储空间的总大小（以字节为单位）</td></tr><tr><td align=\"center\">VolumeLabel</td><td align=\"center\">属性， 获取或设置驱动器的卷标</td></tr><tr><td align=\"center\">Driveinfo[] GetDrives()</td><td align=\"center\">静态方法，检索计算机上所有逻辑驱动器的驱动器名称</td></tr></tbody></table>\n<pre><code class=\"prism language-c#\">using System;\nusing System.IO;\nclass Program\n{\n    //获取D盘中的驱动器类型、名称、文件系统名称、可用空间以及总空间大小\n    static void Main(string[] args)\n    {\n        DriveInfo driveInfo = new DriveInfo(\"D\");\n        Console.WriteLine(\"驱动器的名称：\" + driveInfo.Name);\n        Console.WriteLine(\"驱动器类型：\" + driveInfo.DriveType);\n        Console.WriteLine(\"驱动器的文件格式：\" + driveInfo.DriveFormat);\n        Console.WriteLine(\"驱动器中可用空间大小：\" + driveInfo.TotalFreeSpace);\n        Console.WriteLine(\"驱动器总大小：\" + driveInfo.TotalSize);\n    }\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\94c1fd92031643e2a17900973284e28d.png\"/></p>\n<p>驱动器类型中的Fixed值代表的本地磁盘、驱动器中可用空间的大小和总大小的单位是字节（B）。</p>\n<pre><code class=\"prism language-c#\">using System;\nusing System.IO;\nclass Program\n{\n    // 获取计算机中所有驱动器的名称和文件格式\n    static void Main(string[] args)\n    {\n        DriveInfo[] driveInfo = DriveInfo.GetDrives();\n        foreach (DriveInfo d in driveInfo)\n        {\n            if (d.IsReady)\n            {\n                Console.WriteLine(\"驱动器名称：\" + d.Name);\n                Console.WriteLine(\"驱动器的文件格式\" + d.DriveFormat);\n            }\n        }\n    }\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9811cf890b6d45d09efadc142655ec89.png\"/></p>\n<h2><a id=\"102_Directoryinfo_83\"></a>10.2 Directoryinfo类：文件夹操作</h2>\n<p>Directoryinfo类是对文件夹进行操作的，构造方法的语法形式如下。</p>\n<pre><code class=\"prism language-c#\">DirectoryInfo(string path)\n</code></pre>\n<p>path参数用于指定文件的目录，即路径。</p>\n<pre><code class=\"prism language-c#\">DirectoryInfo directoryInfo = new DirectoryInfo(\"D:\\\\Download\");\n</code></pre>\n<p><strong>路径中如果使用\\，要使用转义字符来表示，即\\\\；或者在路径中将\\字符换成/。</strong></p>\n<table><thead><tr><th align=\"center\">属性或方法</th><th align=\"center\">作用</th></tr></thead><tbody><tr><td align=\"center\">Exists</td><td align=\"center\">只读属性，获取指示目录是否存在的值</td></tr><tr><td align=\"center\">Name</td><td align=\"center\">只读属性，获取Directorylnfo实例的目录名称</td></tr><tr><td align=\"center\">Parent</td><td align=\"center\">只读属性，获取指定的子目录的父目录</td></tr><tr><td align=\"center\">Root</td><td align=\"center\">只读属性，获取目录的根部分</td></tr><tr><td align=\"center\">void Create()</td><td align=\"center\">创建目录</td></tr><tr><td align=\"center\">DirectoryInfo CreateSubdirectory(string path)</td><td align=\"center\">在指定路径上创建一个或多个子目录</td></tr><tr><td align=\"center\">void Delete()</td><td align=\"center\">如果目录中为空，则将目录删除</td></tr><tr><td align=\"center\">void Delete(bool recursive)</td><td align=\"center\">指定是否删除子目录和文件，如果recursive 参数的值为True，则删除，否则不删除</td></tr><tr><td align=\"center\">IEnumerable EnumerateDirectories()</td><td align=\"center\">返回当前目录中目录信息的可枚举集合</td></tr><tr><td align=\"center\">IEnumerable EnumerateDirectories(string searchPattern)</td><td align=\"center\">返回与指定的搜索模式匹配的目录信息的可枚举集合</td></tr><tr><td align=\"center\">IEnumerable EnumerateFiles()</td><td align=\"center\">返回当前目录中的文件信息的可枚举集合</td></tr><tr><td align=\"center\">IEnumerable EnumerateFiles(string searchPattern)</td><td align=\"center\">返回与搜索模式匹配的文件信息的可枚举集合</td></tr><tr><td align=\"center\">IEnumerable EnumerateFileSystemInfos()</td><td align=\"center\">返回当前目录中的文件系统信息的可枚举集合</td></tr><tr><td align=\"center\">IEnumerable EnumerateFileSystemInfos(string searchPattern)</td><td align=\"center\">返回与指定的搜索模式匹配的文件系统信息的可枚举集合</td></tr><tr><td align=\"center\">DirectoryInfo[] GetDirectories()</td><td align=\"center\">返回当前目录的子目录</td></tr><tr><td align=\"center\">DirectoryInfo[] GetDirectories(string searchPattern)</td><td align=\"center\">返回匹配给定的搜索条件的当前目录</td></tr><tr><td align=\"center\">FileInfo[] GetFiles()</td><td align=\"center\">返回当前目录的文件列表</td></tr><tr><td align=\"center\">FileInfo[] GetFiles(string searchPattern)</td><td align=\"center\">返回当前目录中与给定的搜索模式匹配的文件列表</td></tr><tr><td align=\"center\">FileSystemInfo[] GetFileSystemInfos()</td><td align=\"center\">返回所有文件和目录的子目录中的项</td></tr><tr><td align=\"center\">FileSystemInfo[] GetFileSystemInfos(string searchPattern)</td><td align=\"center\">返回与指定的搜索条件匹配的文件和目录的子目录中的项</td></tr><tr><td align=\"center\">void MoveTo(string destDirName)</td><td align=\"center\">移动DirectoryInfo实例中的目录到新的路径</td></tr></tbody></table>\n<pre><code class=\"prism language-c#\">using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Program\n{\n    static void Main(string[] args)\n    {\n        DirectoryInfo directoryInfo = new DirectoryInfo(\"D:\\\\test\");\n        // 创建文件夹\n        directoryInfo.Create();\n        directoryInfo.CreateSubdirectory(\"test01\");\n        directoryInfo.CreateSubdirectory(\"test02\");\n        // 查看文件夹，EnumerateDirectories方法只用于检索文件夹，不能检索文件\n        IEnumerable&lt;DirectoryInfo&gt; dir = directoryInfo.EnumerateDirectories();\n        foreach (var v in dir)\n        {\n            Console.WriteLine(v.Name);\n        }\n        // 删除文件夹\n        // directoryInfo.Delete(true);\n    }\n}\n</code></pre>\n<p>如果要删除一个非空文件夹，则要使用<code>Delete(True)</code>方法将文件夹中的文件一并删除，否则会岀现“文件夹不为空”的异常。</p>\n<h2><a id=\"103_Directory_150\"></a>10.3 Directory类：文件夹操作</h2>\n<p>Directory类也是对文件夹进行操作的，它是一个静态类，不能创建该类的实例，直接通过<code>类名.类成员</code>的形式调用其属性和方法。</p>\n<p>Directory类省去了创建类实例的步骤，其他操作也与Directoryinfo类似。</p>\n<pre><code class=\"prism language-c#\">using System;\nusing System.IO;\nclass Program\n{\n    static void Main(string[] args)\n    {\n        //在D盘下创建test文件夹\n        Directory.CreateDirectory(\"D:\\\\test\");\n        FileInfo fileInfo = new FileInfo(\"D:\\\\test\\\\test1.txt\");\n        if (!fileInfo.Exists)\n        {\n            //创建文件\n            fileInfo.Create().Close();\n            Console.WriteLine(\"创建test文件夹成功\");\n        }\n        fileInfo.Attributes = FileAttributes.Normal;//设置文件属性\n        Console.WriteLine(\"文件路径：\" + fileInfo.Directory);\n        Console.WriteLine(\"文件名称：\" + fileInfo.Name);\n        Console.WriteLine(\"文件是否只读：\" + fileInfo.IsReadOnly);\n        Console.WriteLine(\"文件大小：\" + fileInfo.Length);\n        //先创建code-1文件夹\n        //将文件移动到code-1文件夹下\n        Directory.CreateDirectory(\"D:\\\\test01\");\n        Console.WriteLine(\"创建test01文件夹成功\");\n        //判断目标文件夹中是否含有文件test1.txt\n        FileInfo newFileInfo = new FileInfo(\"D:\\\\test01\\\\test1.txt\");\n        if (!newFileInfo.Exists)\n        {\n            //移动文件到指定路径\n            fileInfo.MoveTo(\"D:\\\\test01\\\\test1.txt\");\n            Console.WriteLine(\"移动文件到test01文件夹中\");\n        }\n    }\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e8ee74e8eb424f2b9b5bc4b2183389a2.png\"/></p>\n<h2><a id=\"104_FileInfo_196\"></a>10.4 FileInfo类：文件操作</h2>\n<p>FileInfo类是用来操作文件的，构造方法的语法形式如下。</p>\n<pre><code class=\"prism language-c#\">FileInfo(string fileName)\n</code></pre>\n<p>fileName参数用于设置文件的路径。</p>\n<table><thead><tr><th align=\"center\">属性或方法</th><th align=\"center\">作用</th></tr></thead><tbody><tr><td align=\"center\">Directory</td><td align=\"center\">只读属性，获取父目录的实例</td></tr><tr><td align=\"center\">DirectoryName</td><td align=\"center\">只读属性，获取表示目录的完整路径的字符串</td></tr><tr><td align=\"center\">Exists</td><td align=\"center\">只读属性，获取指定的文件是否存在，若存在返回True，否则返回False</td></tr><tr><td align=\"center\">IsReadOnly</td><td align=\"center\">属性，获取或设置指定的文件是否为只读的</td></tr><tr><td align=\"center\">Length</td><td align=\"center\">只读属性，获取文件的大小</td></tr><tr><td align=\"center\">Name</td><td align=\"center\">只读属性，获取文件的名称</td></tr><tr><td align=\"center\">Filelnfo CopyTo(string destFileName)</td><td align=\"center\">将现有文件复制到新文件，不允许覆盖现有文件</td></tr><tr><td align=\"center\">Filelnfo CopyTo(string destFileName, bool overwrite)</td><td align=\"center\">将现有文件复制到新文件，允许覆盖现有文件</td></tr><tr><td align=\"center\">FileStream Create()</td><td align=\"center\">创建文件</td></tr><tr><td align=\"center\">void Delete()</td><td align=\"center\">删除文件</td></tr><tr><td align=\"center\">void MoveTo(string destFileName)</td><td align=\"center\">将指定文件移到新位置，提供要指定新文件名的选项</td></tr><tr><td align=\"center\">Filelnfo Replace(string destinationFileName, string destinationBackupFileName)</td><td align=\"center\">使用当前文件对象替换指定文件的内容，先删除原始文件， 再创建被替换文件的备份</td></tr></tbody></table>\n<pre><code class=\"prism language-c#\">using System;\nusing System.IO;\nclass Program\n{\n    static void Main(string[] args)\n    {\n        //在D盘下创建test文件夹\n        Directory.CreateDirectory(\"D:\\\\test\");\n        FileInfo fileInfo = new FileInfo(\"D:\\\\test\\\\test1.txt\");\n        if (!fileInfo.Exists)\n        {\n            //创建文件\n            fileInfo.Create().Close();\n        }\n        fileInfo.Attributes = FileAttributes.Normal;//设置文件属性\n        Console.WriteLine(\"文件路径：\" + fileInfo.Directory);\n        Console.WriteLine(\"文件名称：\" + fileInfo.Name);\n        Console.WriteLine(\"文件是否只读：\" + fileInfo.IsReadOnly);\n        Console.WriteLine(\"文件大小：\" + fileInfo.Length);\n        //先创建code-1文件夹\n        //将文件移动到code-1文件夹下\n        Directory.CreateDirectory(\"D:\\\\test01\");\n        //判断目标文件夹中是否含有文件test1.txt\n        FileInfo newFileInfo = new FileInfo(\"D:\\\\test01\\\\test1.txt\");\n        if (!newFileInfo.Exists)\n        {\n            //移动文件到指定路径\n            fileInfo.MoveTo(\"D:\\\\test01\\\\test1.txt\");\n        }\n    }\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\48c7ea715c8b479a81b4a88a9b46cebf.png\"/></p>\n<h2><a id=\"105_File_258\"></a>10.5 File类：文件操作</h2>\n<p>File类也是用来操作文件的，它是一个静态类，其成员也是静态的，通过<code>类名.类成员</code>的形式调用其属性和方法。</p>\n<p>File类中获取或设置文件信息的常用方法如下表所示。</p>\n<table><thead><tr><th align=\"center\">属性或方法</th><th align=\"center\">作用</th></tr></thead><tbody><tr><td align=\"center\">DateTime GetCreationTime(string path)</td><td align=\"center\">返回指定文件或目录的创建日期和时间</td></tr><tr><td align=\"center\">DateTime GetLastAccessTime(string path)</td><td align=\"center\">返回上次访问指定文件或目录的日期和时间</td></tr><tr><td align=\"center\">DateTime GetLastWriteTime(string path)</td><td align=\"center\">返回上次写入指定文件或目录的日期和时间</td></tr><tr><td align=\"center\">void SetCreationTime(string path, DateTime creationTime)</td><td align=\"center\">设置创建该文件的日期和时间</td></tr><tr><td align=\"center\">void SetLastAccessTime(string path, DateTime lastAccessTime)</td><td align=\"center\">设置上次访问指定文件的日期和时间</td></tr><tr><td align=\"center\">void SetLastWriteTime(string path, DateTime lastWriteTime)</td><td align=\"center\">设置上次写入指定文件的日期和时间</td></tr></tbody></table>\n<pre><code class=\"prism language-c#\">using System;\nusing System.IO;\nclass Program\n{\n    static void Main(string[] args)\n    {\n        //在D盘下创建code文件夹\n        Directory.CreateDirectory(\"D:\\\\test\");\n        Directory.CreateDirectory(\"D:\\\\test01\");\n        string path = \"D:\\\\test\\\\test1.txt\";\n        //创建文件\n        FileStream fs = File.Create(path);\n        //获取文件信息\n        Console.WriteLine(\"文件创建时间：\" + File.GetCreationTime(path));\n        Console.WriteLine(\"文件最后被写入时间：\" + File.GetLastWriteTime(path));\n        //关闭文件流\n        fs.Close();\n        //设置目标路径\n        string newPath = \"D:\\\\test01\\\\test1.txt\";\n        //判断目标文件是否存在\n        bool flag = File.Exists(newPath);\n        if (flag)\n        {\n            //删除文件\n            File.Delete(newPath);\n        }\n        File.Move(path, newPath);\n    }\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d993a33ea4c44edba5d4dd95fad3fce3.png\"/></p>\n<h2><a id=\"106_Path_308\"></a>10.6 Path类：文件路径操作</h2>\n<p>Path类主要用于文件路径的一些操作，它是一个静态类。</p>\n<table><thead><tr><th align=\"center\">属性或方法</th><th align=\"center\">作用</th></tr></thead><tbody><tr><td align=\"center\">string ChangeExtension(string path, string extension)</td><td align=\"center\">更改路径字符串的扩展名</td></tr><tr><td align=\"center\">string Combine(params string[] paths)</td><td align=\"center\">将字符串数组组合成一个路径</td></tr><tr><td align=\"center\">string Combine(string path1, string path2)</td><td align=\"center\">将两个字符串组合成一个路径</td></tr><tr><td align=\"center\">string GetDirectoryName(string path)</td><td align=\"center\">返回指定路径字符串的目录信息</td></tr><tr><td align=\"center\">string GetExtension(string path)</td><td align=\"center\">返回指定路径字符串的扩展名</td></tr><tr><td align=\"center\">string GetFileName(string path)</td><td align=\"center\">返回指定路径字符串的文件名和扩展名</td></tr><tr><td align=\"center\">string GetFileNameWithoutExtension(string path)</td><td align=\"center\">返回不具有扩展名的指定路径字符串的文件名</td></tr><tr><td align=\"center\">string GetFullPath(string path)</td><td align=\"center\">返回指定路径字符串的绝对路径</td></tr><tr><td align=\"center\">char[] GetInvalidFileNameChars()</td><td align=\"center\">获取包含不允许在文件名中使用的字符的数组</td></tr><tr><td align=\"center\">char[] GetInvalidPathChars()</td><td align=\"center\">获取包含不允许在路径名中使用的字符的数组</td></tr><tr><td align=\"center\">string GetPathRoot(string path)</td><td align=\"center\">获取指定路径的根目录信息</td></tr><tr><td align=\"center\">string GetRandomFileName()</td><td align=\"center\">返回随机文件夹名或文件名</td></tr><tr><td align=\"center\">string GetTempPath()</td><td align=\"center\">返回当前用户的临时文件夹的路径</td></tr><tr><td align=\"center\">bool HasExtension(string path)</td><td align=\"center\">返回路径是否包含文件的扩展名</td></tr><tr><td align=\"center\">bool IsPathRooted(string path)</td><td align=\"center\">返回路径字符串是否包含根</td></tr></tbody></table>\n<pre><code class=\"prism language-c#\">using System;\nusing System.IO;\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(\"请输入一个文件路径：\");\n        string path = Console.ReadLine();\n        Console.WriteLine(\"不包含扩展名的文件名：\" + Path.GetFileNameWithoutExtension(path));\n        Console.WriteLine(\"文件扩展名：\" + Path.GetExtension(path));\n        Console.WriteLine(\"文件全名：\" + Path.GetFileName(path));\n        Console.WriteLine(\"文件路径：\" + Path.GetDirectoryName(path));\n        //更改文件扩展名，未进行保存\n        string newPath = Path.ChangeExtension(path, \"doc\");\n        Console.WriteLine(\"更改后的文件全名：\" + Path.GetFileName(newPath));\n    }\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\510a075f1fae42f58289aca22512e744.png\"/></p>\n<h2><a id=\"107__353\"></a>10.7 流</h2>\n<p>流就是一个类的对象，很多文件的输入输出操作都以类的成员函数的方式来提供。</p>\n<p>计算机中的流其实是一种信息的转换。它是一种有序流，因此相对于某一对象，通常我们把对象接收外界的信息输入（Input）称为输入流，相应地从对象向外 输出（Output）信息为输出流，合称为输入/输出流（I/O Streams）。</p>\n<p>对象间进行信息或者数据的交换时总是先将对象或数据转换为某种形式的流，再通过流的传输，到达目的对象后再将流转换为对象数据。所以， 可以把流看作是一种数据的载体，通过它可以实现数据交换和传输。</p>\n<p>流所在的命名空间也是<code>System.IO</code>，主要包括文本文件的读写、图像和声音文件的读写、二进制文件的读写等。在<code>System.IO</code>命名空间中提供了多种类，用于进行文件和数据流的读写操作。要使用这些类，需要在程序的开头包含语句<code>using System.IO</code>。</p>\n<h2><a id=\"108_StreamReader_363\"></a>10.8 StreamReader类：读取文件</h2>\n<p>StreamReader类用于从流中读取字符串，它继承自 TextReader 类。</p>\n<table><thead><tr><th align=\"center\">构造方法</th><th align=\"center\">说明</th></tr></thead><tbody><tr><td align=\"center\">StreamReader(Stream stream)</td><td align=\"center\">为指定的流创建StreamReader类的实例</td></tr><tr><td align=\"center\">StreamReader(string path)</td><td align=\"center\">为指定路径的文件创建StreamReader类的实例</td></tr><tr><td align=\"center\">StreamReader(Stream stream, Encoding encoding)</td><td align=\"center\">用指定的字符编码为指定的流初始化StreamReader类的一个新实例</td></tr><tr><td align=\"center\">StreamReader(string path, Encoding encoding)</td><td align=\"center\">用指定的字符编码为指定的文件名初始化StreamReader类的一个新实例</td></tr></tbody></table>\n<p>StreamReader类中的常用属性和方法如下表所示。</p>\n<table><thead><tr><th align=\"center\">属性或方法</th><th align=\"center\">作用</th></tr></thead><tbody><tr><td align=\"center\">Encoding CurrentEncoding</td><td align=\"center\">只读属性，获取当前流中使用的编码方式</td></tr><tr><td align=\"center\">bool EndOfStream</td><td align=\"center\">只读属性，获取当前的流位置是否在流结尾</td></tr><tr><td align=\"center\">void Close()</td><td align=\"center\">关闭流</td></tr><tr><td align=\"center\">int Peek()</td><td align=\"center\">获取流中的下一个字符的整数，如果没有获取到字符， 则返回-1</td></tr><tr><td align=\"center\">int Read()</td><td align=\"center\">获取流中的下一个字符的整数</td></tr><tr><td align=\"center\">int Read(char[] buffer, int index, int count)</td><td align=\"center\">从指定的索引位置开始将来自当前流的指定的最多字符读到缓冲区</td></tr><tr><td align=\"center\">string ReadLine()</td><td align=\"center\">从当前流中读取一行字符并将数据作为字符串返回</td></tr><tr><td align=\"center\">string ReadToEnd()</td><td align=\"center\">读取来自流的当前位置到结尾的所有字符</td></tr></tbody></table>\n<pre><code class=\"prism language-c#\">using System;\nusing System.IO;\nclass Program\n{\n    static void Main(string[] args)\n    {\n        //定义文件路径\n        string path = @\"D:\\\\test01\\\\test1.txt\";\n        //创建 StreamReader 类的实例\n        StreamReader streamReader = new StreamReader(path);\n        //判断文件中是否有字符\n        while (streamReader.Peek() != -1)\n        {\n            //读取文件中的一行字符\n            string str = streamReader.ReadLine();\n            Console.WriteLine(str);\n        }\n        streamReader.Close();\n    }\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\138a4b510bd84d29b65945beee6eea37.png\"/></p>\n<h2><a id=\"109_StreamWriter_413\"></a>10.9 StreamWriter类：写入文件</h2>\n<p>StreamWriter类用于向流中写入数据。</p>\n<table><thead><tr><th align=\"center\">构造方法</th><th align=\"center\">说明</th></tr></thead><tbody><tr><td align=\"center\">StreamWriter(Stream stream)</td><td align=\"center\">为指定的流创建 StreamWriter 类的实例</td></tr><tr><td align=\"center\">StreamWriter(string path)</td><td align=\"center\">为指定路径的文件创建 StreamWriter 类的实例</td></tr><tr><td align=\"center\">StreamWriter(Stream stream, Encoding encoding)</td><td align=\"center\">用指定的字符编码为指定的流初始化 StreamWriter 类的一个新实例</td></tr><tr><td align=\"center\">StreamWriter(string path, Encoding encoding)</td><td align=\"center\">用指定的字符编码为指定的文件名初始化 StreamWriter 类的一个新实例</td></tr></tbody></table>\n<p>StreamWriter类中常用的属性和方法如下表所示。</p>\n<table><thead><tr><th align=\"center\">属性或方法</th><th align=\"center\">作用</th></tr></thead><tbody><tr><td align=\"center\">bool AutoFlush</td><td align=\"center\">属性，获取或设置是否自动刷新缓冲区</td></tr><tr><td align=\"center\">Encoding Encoding</td><td align=\"center\">只读属性，获取当前流中的编码方式</td></tr><tr><td align=\"center\">void Close()</td><td align=\"center\">关闭流</td></tr><tr><td align=\"center\">void Flush()</td><td align=\"center\">刷新缓冲区</td></tr><tr><td align=\"center\">void Write(char value)</td><td align=\"center\">将字符写入流中</td></tr><tr><td align=\"center\">void WriteLine(char value)</td><td align=\"center\">将字符换行写入流中</td></tr><tr><td align=\"center\">Task WriteAsync(char value)</td><td align=\"center\">将字符异步写入流中</td></tr><tr><td align=\"center\">Task WriteLineAsync(char value)</td><td align=\"center\">将字符异步换行写入流中</td></tr></tbody></table>\n<p><strong>Write、WriteAsync、WriteLineAsync方法还有很多不同类型写入的重载方法。</strong></p>\n<pre><code class=\"prism language-c#\">using System;\nusing System.IO;\nclass Program\n{\n    static void Main(string[] args)\n    {\n        string path = @\"D:\\\\test01\\\\test1.txt\";\n        //创建StreamWriter 类的实例\n        StreamWriter streamWriter = new StreamWriter(path);\n        //向文件中写入姓名\n        streamWriter.WriteLine(\"张三\");\n        //向文件中写入手机号\n        streamWriter.WriteLine(\"12354361358\");\n        //刷新缓存\n        streamWriter.Flush();\n        //关闭流\n        streamWriter.Close();\n    }\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2648feed887b46f0afbcff1f7412b2b9.png\"/></p>\n<p>写入的数据会覆盖文本的内容。</p>\n<h2><a id=\"1010_FileStream_466\"></a>10.10 FileStream类：文件读写</h2>\n<p>FileStream类主要用于文件的读写，不仅能读写普通的文本文件，还可以读取图像文件、声音文件等不同格式的文件。</p>\n<p>在创建 FileStream 类的实例时还会涉及多个枚举类型的值， 包括FileAccess、FileMode、FileShare、FileOptions等。</p>\n<hr/>\n<p>FileAccess 枚举类型主要用于设置文件的访问方式，具体的枚举值如下。</p>\n<ul><li>Read：以只读方式打开文件。</li><li>Write：以写方式打开文件。</li><li>ReadWrite：以读写方式打开文件。</li></ul>\n<hr/>\n<p>FileMode 枚举类型主要用于设置文件打开或创建的方式，具体的枚举值如下。</p>\n<ul><li>CreateNew：创建新文件，如果文件已经存在，则会抛出异常。</li><li>Create：创建文件，如果文件不存在，则删除原来的文件，重新创建文件。</li><li>Open：打开已经存在的文件，如果文件不存在，则会抛出异常。</li><li>OpenOrCreate：打开已经存在的文件，如果文件不存在，则创建文件。</li><li>Truncate：打开已经存在的文件，并清除文件中的内容，保留文件的创建日期。如果文件不存在，则会抛出异常。</li><li>Append：打开文件，用于向文件中追加内容，如果文件不存在，则创建一个新文件。</li></ul>\n<hr/>\n<p>FileShare 枚举类型主要用于设置多个对象同时访问同一个文件时的访问控制，具体的枚举值如下。</p>\n<ul><li>None：谢绝共享当前的文件。</li><li>Read：允许随后打开文件读取信息。</li><li>ReadWrite：允许随后打开文件读写信息。</li><li>Write：允许随后打开文件写入信息。</li><li>Delete：允许随后删除文件。</li><li>Inheritable：使文件句柄可由子进程继承。</li></ul>\n<hr/>\n<p>FileOptions 枚举类型用于设置文件的高级选项，包括文件是否加密、访问后是否删除等，具体的枚举值如下。</p>\n<ul><li>WriteThrough：指示系统应通过任何中间缓存、直接写入磁盘。</li><li>None：指示在生成 System.IO.FileStream 对象时不应使用其他选项。</li><li>Encrypted：指示文件是加密的，只能通过用于加密的同一用户账户来解密。</li><li>DeleteOnClose：指示当不再使用某个文件时自动删除该文件。</li><li>SequentialScan：指示按从头到尾的顺序访问文件。</li><li>RandomAccess：指示随机访问文件。</li><li>Asynchronous：指示文件可用于异步读取和写入。</li></ul>\n<hr/>\n<p>FileStream类的构造方法如下表所示。</p>\n<table><thead><tr><th align=\"center\">构造方法</th><th align=\"center\">说明</th></tr></thead><tbody><tr><td align=\"center\">FileStream(string path, FileMode mode)</td><td align=\"center\">使用指定路径的文件、文件模式创建 FileStream 类的实例</td></tr><tr><td align=\"center\">FileStream(string path, FileMode mode, FileAccess access)</td><td align=\"center\">使用指定路径的文件、文件打开模式、文件访问模式创建 FileStream 类的实例</td></tr><tr><td align=\"center\">FileStream(string path, FileMode mode, FileAccess access, FileShare share)</td><td align=\"center\">使用指定的路径、创建模式、读写权限和共享权限创建 FileStream 类的一个新实例</td></tr><tr><td align=\"center\">FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, FileOptions options)</td><td align=\"center\">使用指定的路径、创建模式、读写权限和共享权限、其他 文件选项创建 FileStream 类的实例</td></tr></tbody></table>\n<pre><code class=\"prism language-c#\">string path = \"D:\\\\test.txt\";\nFileStream fileStream1 = new FileStream(path, FileMode.Open);\nFileStream fileStream2 = new FileStream(path, FileMode.Open, FileAccess.Read);\nFileStream fileStream3 = new FileStream(path, FileMode.Open, FileAccess.ReadWrite, FileShare.Read);\nFileStream fileStream4 = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.Read, 10, FileOptions.None);\n</code></pre>\n<p>FileStream类中常用的属性和方法如下图所示。</p>\n<table><thead><tr><th align=\"center\">属性或方法</th><th align=\"center\">作用</th></tr></thead><tbody><tr><td align=\"center\">bool CanRead</td><td align=\"center\">只读属性，获取一个值，该值指示当前流是否支持读取</td></tr><tr><td align=\"center\">bool CanSeek</td><td align=\"center\">只读属性，获取一个值，该值指示当前流是否支持查找</td></tr><tr><td align=\"center\">bool CanWrite</td><td align=\"center\">只读属性，获取一个值，该值指示当前流是否支持写入</td></tr><tr><td align=\"center\">bool IsAsync</td><td align=\"center\">只读属性，获取一个值，该值指示 FileStream 是异步还 是同步打开的</td></tr><tr><td align=\"center\">long Length</td><td align=\"center\">只读属性，获取用字节表示的流长度</td></tr><tr><td align=\"center\">string Name</td><td align=\"center\">只读属性，获取传递给构造方法的 FileStream 的名称</td></tr><tr><td align=\"center\">long Position</td><td align=\"center\">属性，获取或设置此流的当前位置</td></tr><tr><td align=\"center\">int Read(byte[] array, int offset, int count)</td><td align=\"center\">从流中读取字节块并将该数据写入给定缓冲区中</td></tr><tr><td align=\"center\">int ReadByte()</td><td align=\"center\">从文件中读取一个字节，并将读取位置提升一个字节</td></tr><tr><td align=\"center\">long Seek(lorig offset, SeekOrigin origin)</td><td align=\"center\">将该流的当前位置设置为给定值</td></tr><tr><td align=\"center\">void Lock(long position, long length)</td><td align=\"center\">防止其他进程读取或写入System.IO.FileStream</td></tr><tr><td align=\"center\">void Unlock(long position, long length)</td><td align=\"center\">允许其他进程访问以前锁定的某个文件的全部或部分</td></tr><tr><td align=\"center\">void Write(byte[] array, int offset, int count)</td><td align=\"center\">将字节块写入文件流</td></tr><tr><td align=\"center\">void WriteByte(byte value)</td><td align=\"center\">将一个字节写入文件流中的当前位置</td></tr></tbody></table>\n<pre><code class=\"prism language-c#\">using System;\nusing System.IO;\nusing System.Text;\nclass Program\n{\n    static void Main(string[] args)\n    {\n        //定义文件路径\n        string path = @\"D:\\\\test01\\\\test1.txt\";\n        //创建 FileStream 类的实例\n        FileStream fileStream = new FileStream(path, FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite);\n        //定义学号\n        string msg = \"123456\";\n        //将字符串转换为字节数组，需要引入System.Text\n        byte[] bytes = Encoding.UTF8.GetBytes(msg);\n        //向文件中写入字节数组\n        fileStream.Write(bytes, 0, bytes.Length);\n        //刷新缓冲区\n        fileStream.Flush();\n        //关闭流\n        fileStream.Close();\n\n        //定义文件路径\n        string path1 = @\"D:\\\\test01\\\\test1.txt\";\n        //判断是否含有指定文件\n        if (File.Exists(path))\n        {\n            FileStream fileStream1 = new FileStream(path1, FileMode.Open, FileAccess.Read);\n            //定义存放文件信息的字节数组\n            byte[] bytes1 = new byte[fileStream1.Length];\n            //读取文件信息\n            fileStream1.Read(bytes1, 0, bytes.Length);\n            //将得到的字节型数组重写编码为字符型数组\n            char[] c = Encoding.UTF8.GetChars(bytes1);\n            Console.WriteLine(\"学生的学号为：\");\n            //输出学生的学号\n            Console.WriteLine(c);\n            //关闭流\n            fileStream1.Close();\n        }\n        else\n        {\n            Console.WriteLine(\"您查看的文件不存在！\");\n        }\n    }\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\be0df9fb350a48b5b9f6bcd0d641c096.png\"/></p>\n<p><code>FileMode.Open</code>模式下，写入的数据会覆盖文件的内容。如果写入的数据为中文，bytes数组的长度将不够用，改成使用<code>byte[] bytes= Encoding.UTF8.GetBytes(message);</code>的方式将数据从字符串类型转换为字节类型。</p>\n<h2><a id=\"1011_BinaryReader_606\"></a>10.11 BinaryReader类：读取二进制文件</h2>\n<p>BinaryReader类用于以二进制形式读取数据，构造方法有3种。</p>\n<pre><code class=\"prism language-c#\">// 1.\nBinaryReader(Stream input)   //input参数是输入流。\n// 2.\nBinaryReader(Stream input, Encoding encoding)   //input是输入流，encoding是编码方式\n// 3.\nBinaryReader(Stream input, Encoding encoding, bool leaveOpen)  //input是输入流，encoding是编码方式，leaveOpen是在流读取后是否包括流的打开状态\n</code></pre>\n<pre><code class=\"prism language-c#\">//创建文件流的实例\nFileStream fileStream = new FileStream(\"D:\\\\code\\\\test.txt\", FileMode.Open);\nBinaryReader binaryReader1 = new BinaryReader(fileStream);\nBinaryReader binaryReader2 = new BinaryReader(fileStream, Encoding.UTF8);\nBinaryReader binaryReader3 = new BinaryReader(fileStream, Encoding.UTF8, true);\n</code></pre>\n<p>BinaryReader类中的常用属性和方法如下表所示。</p>\n<table><thead><tr><th align=\"center\">属性或方法</th><th align=\"center\">作用</th></tr></thead><tbody><tr><td align=\"center\">int Read()</td><td align=\"center\">从指定的流中读取字符</td></tr><tr><td align=\"center\">int Read(byte[] buffer, int index, int count)</td><td align=\"center\">index为字节数组buffer中的起始点，从流中读取count个字节</td></tr><tr><td align=\"center\">int Read(char[] buffer, int index, int count)</td><td align=\"center\">index为字符数组buffer的起始点，从流中读取count个字符</td></tr><tr><td align=\"center\">bool ReadBoolean()</td><td align=\"center\">从当前流中读取Boolean值，并使该流的当前位置提升1个字节</td></tr><tr><td align=\"center\">byte ReadByte()</td><td align=\"center\">从当前流中读取下一个字节，并使流的当前位置提升1个字节</td></tr><tr><td align=\"center\">byte[] ReadBytes(int count)</td><td align=\"center\">从当前流中读取指定的字节数写入字节数组中，并将当前位置前移相应的字节数</td></tr><tr><td align=\"center\">char ReadChar()</td><td align=\"center\">从当前流中读取下一个字符，并根据所使用的Encoding和从流中读取的特定字符提升流的当前位置</td></tr><tr><td align=\"center\">char[] ReadChars(int count)</td><td align=\"center\">从当前流中读取指定的字符数，并以字符数组的形式返回数据，然后根据所使用的Encoding和从流中读取的特定字符将当前位置前移</td></tr><tr><td align=\"center\">decimal ReadDecimal()</td><td align=\"center\">从当前流中读取十进制数值，并将该流的当前位置提升16个字节</td></tr><tr><td align=\"center\">double ReadDouble()</td><td align=\"center\">从当前流中读取8字节浮点值，并使流的当前位置提升8个字节</td></tr><tr><td align=\"center\">short ReadInt16()</td><td align=\"center\">从当前流中读取2字节有符号整数，并使流的当前位置提升2个字节</td></tr><tr><td align=\"center\">int ReadInt32()</td><td align=\"center\">从当前流中读取4字节有符号整数，并使流的当前位置提升4个字节</td></tr><tr><td align=\"center\">long ReadInt64()</td><td align=\"center\">从当前流中读取8字节有符号整数，并使流的当前位置提升8个字节</td></tr><tr><td align=\"center\">sbyte ReadSByte()</td><td align=\"center\">从该流中读取1个有符号字节，并使流的当前位置提升1个字节</td></tr><tr><td align=\"center\">float ReadSingle()</td><td align=\"center\">从当前流中读取4字节浮点值，并使流的当前位置提升4个字节</td></tr><tr><td align=\"center\">string ReadString()</td><td align=\"center\">从当前流中读取一个字符串。字符串有长度前缀，一次7位地被编码为整数</td></tr><tr><td align=\"center\">ushort ReadUInt16()</td><td align=\"center\">从该流中读取的2字节无符号整数</td></tr><tr><td align=\"center\">uint ReadUInt32()</td><td align=\"center\">从该流中读取的4字节无符号整数</td></tr><tr><td align=\"center\">ulong ReadUInt64()</td><td align=\"center\">从该流中读取的8字节无符号整数</td></tr><tr><td align=\"center\">void FillBuffer(int numBytes)</td><td align=\"center\">用从流中读取的指定字节数填充内部缓冲区</td></tr></tbody></table>\n<p>在BinaryReader类中提供的方法并不是直接读取文件中指定数据类型的值，而是读取由 BinaryWriter类写入到文件中的。在上述方法中只有<code>Read</code>方法不要求读取的值必须由BinaryWriter类写入到文件中。</p>\n<pre><code class=\"prism language-c#\">using System;\nusing System.IO;\nusing System.Text;\nclass Program\n{\n    static void Main(string[] args)\n    {\n        FileStream fileStream = new FileStream(@\"D:\\\\test01\\\\test1.txt\", FileMode.Open);\n        BinaryReader binaryReader = new BinaryReader(fileStream);\n        //读取文件的一个字符\n        int a = binaryReader.Read();\n        //判断文件中是否含有字符，若不含字符，a的值为 -1\n        while (a != -1)\n        {\n            //输出读取到的字符\n            Console.Write((char)a);\n            a = binaryReader.Read();\n        }\n        fileStream.Close();\n        binaryReader.Close();\n        Console.WriteLine(\"***************************\");\n        FileStream fileStream1 = new FileStream(@\"D:\\\\test01\\\\test1.txt\", FileMode.Open, FileAccess.Read);\n        BinaryReader binaryReader1 = new BinaryReader(fileStream1);\n        //获取文件长度\n        long length = fileStream1.Length;\n        byte[] bytes = new byte[length];\n        //读取文件中的内容并保存到字节数组中\n        binaryReader1.Read(bytes, 0, bytes.Length);\n        //将字节数组转换为字符串，需要导入System.Text\n        string str = Encoding.Default.GetString(bytes);\n        Console.WriteLine(str);\n        fileStream1.Close();\n        binaryReader1.Close();\n    }\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cae1889d69a34d0aaf26b5f21b47407e.png\"/></p>\n<h2><a id=\"1012_BinaryWriter_695\"></a>10.12 BinaryWriter类：写入二进制数据</h2>\n<p>BinaryWriter类用于以二进制形式写入内容，构造方法也有3种，类似BinaryReader。</p>\n<pre><code class=\"prism language-c#\">// 1.\nBinaryWriter(Stream output)\n// 2.\nBinaryWriter(Stream output, Encoding encoding)\n// 3.\nBinaryWriter(Stream output, Encoding encoding, bool leaveOpen)\n</code></pre>\n<p>BinaryWriter类中常用的属性和方法如下表所示。</p>\n<table><thead><tr><th align=\"center\">属性或方法</th><th align=\"center\">作用</th></tr></thead><tbody><tr><td align=\"center\">void Close()</td><td align=\"center\">关闭流</td></tr><tr><td align=\"center\">void Flush()</td><td align=\"center\">清理当前编写器的所有缓冲区，使所有缓冲数据写入基础设备</td></tr><tr><td align=\"center\">long Seek(int offset, SeekOrigin origin)</td><td align=\"center\">返回查找的当前流的位置</td></tr><tr><td align=\"center\">void Write(char[] chars)</td><td align=\"center\">将字符数组写入当前流</td></tr><tr><td align=\"center\">Write7BitEncodedInt(int value)</td><td align=\"center\">以压缩格式写出 32 位整数</td></tr></tbody></table>\n<pre><code class=\"prism language-c#\">using System;\nusing System.IO;\nclass Program\n{\n    static void Main(string[] args)\n    {\n        FileStream fileStream = new FileStream(@\"D:\\\\test01\\\\test1.txt\", FileMode.Open, FileAccess.Write);\n        //创建二进制写入流的实例\n        BinaryWriter binaryWriter = new BinaryWriter(fileStream);\n        //向文件中写入图书名称\n        binaryWriter.Write(\"C#基础教程\");\n        //向文件中写入图书价格\n        binaryWriter.Write(49.5);\n        //清除缓冲区的内容，将缓冲区中的内容写入到文件中\n        binaryWriter.Flush();\n        //关闭二进制流\n        binaryWriter.Close();\n        //关闭文件流\n        fileStream.Close();\n        fileStream = new FileStream(@\"D:\\\\test01\\\\test1.txt\", FileMode.Open, FileAccess.Read);\n        //创建二进制读取流的实例\n        BinaryReader binaryReader = new BinaryReader(fileStream);\n        //输出图书名称\n        Console.WriteLine(binaryReader.ReadString());\n        //输出图书价格\n        Console.WriteLine(binaryReader.ReadDouble());\n        //关闭二进制读取流\n        binaryReader.Close();\n        //关闭文件流\n        fileStream.Close();\n    }\n}\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a4c4afeec3054014853c278130d6ce39.png\"/></p>\n<p>以二进制写入数据会显示乱码，猜测是编码方式不同导致的；但读取显示是正常的。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-07 08:10:37", "summary": "文章目录文件操作：获取计算机驱动器信息类：文件夹操作类：文件夹操作类：文件操作类：文件操作类：文件路径操作流类：读取文件类：写入文件类：文件读写类：读取二进制文件类：写入二进制数据文件操作在操作变量和"}