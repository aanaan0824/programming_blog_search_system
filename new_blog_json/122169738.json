{"blogid": "122169738", "writerAge": "码龄5年", "writerBlogNum": "25", "writerCollect": "196", "writerComment": "37", "writerFan": "859", "writerGrade": "3级", "writerIntegral": "444", "writerName": "若汝棋茗", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122169738.jpg", "writerRankTotal": "166817", "writerRankWeekly": "17800", "writerThumb": "51", "writerVisitNum": "82931", "blog_read_count": "5637", "blog_time": "已于 2022-07-26 17:09:44 修改", "blog_title": "C#搭建高效、便捷的WebSocket服务器和客户端", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#_3\">一、概述</a></li><li><ul><li><ul><li><a href=\"#11_WebSocket_4\">1.1 什么是WebSocket？？</a></li><li><a href=\"#12_TouchSocket_8\">1.2 TouchSocket特性</a></li></ul>\n</li></ul>\n</li><li><a href=\"#Demo_16\">二、程序集源码、Demo下载</a></li><li><ul><li><ul><li><a href=\"#21__18\">2.1 源码位置</a></li><li><a href=\"#22__22\">2.2 详细说明文档</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_25\">三、安装</a></li><li><a href=\"#WebSocket_30\">四、创建WebSocket服务器</a></li><li><a href=\"#WebSocket_102\">五、创建WebSocket客户端</a></li><li><a href=\"#_117\">六、发送数据</a></li><li><ul><li><ul><li><a href=\"#61__118\">6.1 直接发送</a></li><li><a href=\"#62__120\">6.2 分片发送</a></li><li><a href=\"#63__128\">6.3 发送数据帧</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<hr color=\"#000000\" size='1\"'/>\n<h2><a id=\"_3\"></a>一、概述</h2>\n<h4><a id=\"11_WebSocket_4\"></a>1.1 什么是WebSocket？？</h4>\n<p>WebSocket是一种在单个TCP连接上进行全双工通信的协议。WebSocket通信协议于2011年被IETF定为标准RFC 6455，并由RFC7936补充规范。WebSocket API也被W3C定为标准。<br/> WebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p>\n<h4><a id=\"12_TouchSocket_8\"></a>1.2 TouchSocket特性</h4>\n<ol><li>性能卓越，和同类产品相比，性能提升20%左右，这得益于强大的RRQMSocket。</li><li>封装优雅，从TCP继承封装，能够发送不分包的大数据，也能发送分片的小数据。</li><li>解析简单，在收到消息后，已经将数据帧转换为数据对象，可通过枚举值判断数据类型，通过布尔值判断FIN，RSV1-3等数据。</li><li>能够直接发送<strong>二进制数据</strong>，也能直接发送文本。</li><li>支持Ssl。</li></ol>\n<hr/>\n<h2><a id=\"Demo_16\"></a>二、程序集源码、Demo下载</h2>\n<h4><a id=\"21__18\"></a>2.1 源码位置</h4>\n<ul><li><a href=\"https://gitee.com/RRQM_Home\">Gitee</a></li><li><a href=\"https://github.com/RRQM\">Github</a></li></ul>\n<h4><a id=\"22__22\"></a>2.2 详细说明文档</h4>\n<p><a href=\"https://www.yuque.com/rrqm/touchsocket/index\">文档首页</a></p>\n<h2><a id=\"_25\"></a>三、安装</h2>\n<p>Nuget安装<code>TouchSocket</code>即可，具体步骤详看链接博客。</p>\n<p><a href=\"https://blog.csdn.net/qq_40374647/article/details/121464929\">VS、Unity安装和使用Nuget包</a></p>\n<h2><a id=\"WebSocket_30\"></a>四、创建WebSocket服务器</h2>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> service <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nservice<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddPlugin</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>WebSocketServerPlugin<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token comment\">//添加WebSocket功能</span>\n   <span class=\"token function\">SetWSUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/ws\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token comment\">//设定只有特定url能连接。</span>\n   <span class=\"token function\">SetCallback</span><span class=\"token punctuation\">(</span>WSCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//WSCallback回调函数是在WS收到数据时触发回调的。</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> config <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RRQMConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span><span class=\"token function\">UsePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">SetListenIPHosts</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">IPHost<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">IPHost</span><span class=\"token punctuation\">(</span><span class=\"token number\">7789</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nservice<span class=\"token punctuation\">.</span><span class=\"token function\">Setup</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Http服务器已启动\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WS访问：ws://127.0.0.1:7789/ws\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">WSCallback</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ITcpClientBase</span> client<span class=\"token punctuation\">,</span> <span class=\"token class-name\">WSDataFrameEventArgs</span> e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">.</span>Opcode<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">case</span> WSDataType<span class=\"token punctuation\">.</span>Cont<span class=\"token punctuation\">:</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"收到中间数据，长度为：</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">e<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">.</span>PayloadLength</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> WSDataType<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">:</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">.</span><span class=\"token function\">ToText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> WSDataType<span class=\"token punctuation\">.</span>Binary<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">.</span>FIN<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"收到二进制数据，长度为：</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">e<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">.</span>PayloadLength</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"收到未结束的二进制数据，长度为：</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">e<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">.</span>PayloadLength</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> WSDataType<span class=\"token punctuation\">.</span>Close<span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"远程请求断开\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                client<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"断开\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> WSDataType<span class=\"token punctuation\">.</span>Ping<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> WSDataType<span class=\"token punctuation\">.</span>Pong<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>【WSs服务器】</p>\n<p>创建WSs服务器时，其他配置不变，只需要在<code>config</code>中加入以下代码即可。</p>\n<p>在<a href=\"https://gitee.com/RRQM_Home/RRQMBox/tree/master/Ssl%E8%AF%81%E4%B9%A6%E7%9B%B8%E5%85%B3\">RRQMBox</a>中，放置了一个自制Ssl证书，密码为“RRQMSocket”以供测试。使用配置非常方便。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> config <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RRQMConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span><span class=\"token function\">UsePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">SetReceiveType</span><span class=\"token punctuation\">(</span>ReceiveType<span class=\"token punctuation\">.</span>Auto<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">SetListenIPHosts</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">IPHost<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">IPHost</span><span class=\"token punctuation\">(</span><span class=\"token number\">7789</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">SetServiceSslOption</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ServiceSslOption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//Ssl配置，当为null的时候，相当于创建了ws服务器，当赋值的时候，相当于wss服务器。</span>\n    <span class=\"token punctuation\">{<!-- --></span> \n        Certificate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">X509Certificate2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RRQMSocket.pfx\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"RRQMSocket\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n        SslProtocols <span class=\"token operator\">=</span> SslProtocols<span class=\"token punctuation\">.</span>Tls12 \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"WebSocket_102\"></a>五、创建WebSocket客户端</h2>\n<p>【WS客户端】</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">WebSocketClient</span> myWSClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WebSocketClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyWSClient<span class=\"token punctuation\">.</span><span class=\"token function\">Setup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RRQMConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">SetRemoteIPHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ws://127.0.0.1:7789/ws\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">SetSingletonLogger</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">LoggerGroup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ConsoleLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FileLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    myWSClient<span class=\"token punctuation\">.</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//myWSClient.Received += this.MyWSClient_Received; 客户端接收</span>\n\n    myWSClient<span class=\"token punctuation\">.</span>Logger<span class=\"token punctuation\">.</span><span class=\"token function\">Message</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"_117\"></a>六、发送数据</h2>\n<h4><a id=\"61__118\"></a>6.1 直接发送</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\63c38c2189524975867ff3b0c7e6e764.png\"/></p>\n<h4><a id=\"62__120\"></a>6.2 分片发送</h4>\n<p>WebSocket是支持分片发送的，这是为了解决大数据的传输而设计的，因为像浏览器这种接收缓存不足的组件，没办法一次性接收一个大数据包，所以必须分片。但是在RRQM中，并没有设计自动分片的功能，而是让发送者决定要不要分片，每个数据包应该多大等。</p>\n<p>分片的函数也已经封装，以第一个函数为例，前三个参数是定位发送数据，最后一个数据则决定每个数据包应当多少尺寸。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1d898525d427482d972cf045e9d26ab8.png\"/><br/> 以下列代码为例，则会把data数据，从索引1-8的数据发送，且每个数据包最大长度为4，刚好发送两个包。</p>\n<h4><a id=\"63__128\"></a>6.3 发送数据帧</h4>\n<p>RRQM已经重载了数据帧的发送，这意味着您可以发送任意数据类型的数据。</p>\n<p>数据帧的类型是<code>WSDataFrame</code>，它是一个完全开放的数据结构。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\82af017c5d5a4723bb464a081c96da6c.png\"/><br/> 当然为方便赋值，RRQM内部已经封装了扩展方法。例如：</p>\n<p>一直追加文本。</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">WSDataFrame</span> wSDataFrame <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WSDataFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwSDataFrame<span class=\"token punctuation\">.</span><span class=\"token function\">AppendText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwSDataFrame<span class=\"token punctuation\">.</span><span class=\"token function\">AppendText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"love\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwSDataFrame<span class=\"token punctuation\">.</span><span class=\"token function\">AppendText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"you\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>一直追加二进制。</p>\n<pre><code class=\"prism language-csharp\"> <span class=\"token class-name\">WSDataFrame</span> wSDataFrame <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WSDataFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n wSDataFrame<span class=\"token punctuation\">.</span><span class=\"token function\">AppendBinary</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n wSDataFrame<span class=\"token punctuation\">.</span><span class=\"token function\">AppendBinary</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n wSDataFrame<span class=\"token punctuation\">.</span><span class=\"token function\">AppendBinary</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>其扩展方法比较多，大家可以选择适合自己的使用。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a6eb099b133542b488ed208a3dfe6d12.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-07-26 17:09:44", "summary": "文章目录一、概述什么是？？特性二、程序集源码、下载源码位置详细说明文档三、安装四、创建服务器五、创建客户端六、发送数据直接发送分片发送发送数据帧一、概述什么是？？是一种在单个连接上进行全双工通信的协议"}