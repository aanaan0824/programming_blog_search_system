{"blogid": "125029860", "writerAge": "码龄2年", "writerBlogNum": "47", "writerCollect": "59", "writerComment": "1", "writerFan": "7", "writerGrade": "3级", "writerIntegral": "469", "writerName": "独立寒秋-", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125029860.jpg", "writerRankTotal": "42789", "writerRankWeekly": "91415", "writerThumb": "25", "writerVisitNum": "31676", "blog_read_count": "4055", "blog_time": "于 2022-05-29 13:13:05 发布", "blog_title": "JS事件循环机制", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#_1\">一、什么是事件循环机制？</a></li><li><a href=\"#JS_27\">二、JS的执行顺序</a></li><li><a href=\"#_33\">三、事件循环的执行过程</a></li><li><a href=\"#_57\">四、微任务和宏任务的根本区别</a></li><li><a href=\"#_72\">五、事件循环的整体过程</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"_1\"></a>一、什么是事件循环机制？</h2>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">//语句一</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//语句二</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//语句三</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>执行结果为1，3，2</p>\n<p>原因是JS引擎指向代码是从上往下执行的，首先会执行<code>语句一</code>。</p>\n<ul><li> <p>JS引擎会将<code>语句一</code>放在调用栈当中，然后执行代码，在控制台输出1，当<code>语句一</code>执行完毕后，便将其从调用栈中移出去。</p> </li><li> <p>接着<code>语句二</code>进入调用栈，<code>语句二</code>会调用Web API,1秒后进入回调队列，此时JS引擎将<code>语句二</code>移出调用栈，继续执行后面的代码。所以控制台输出了3。</p> </li><li> <p>此时进入事件循环（<code>EventLoop</code>）,他会不断循环的访问回调队列，等待1秒后Web API会将要执行的<code>语句二</code>放入回调队列；事件循环（<code>EventLoop</code>）将回调队列中的内容放入调用栈，开始执行，然后在控制台输出2。</p> </li></ul>\n<p><strong>JS的运行机制就是事件循环。</strong></p>\n<h2><a id=\"JS_27\"></a>二、JS的执行顺序</h2>\n<ul><li>JS代码是从上到下一行一行执行的</li><li>如果某一行报错，则停止执行下面的代码</li><li>先执行同步代码，再执行异步代码</li></ul>\n<h2><a id=\"_33\"></a>三、事件循环的执行过程</h2>\n<ul><li>同步代码：调用栈执行后直接出栈</li><li>异步代码：放到Web API中，等待合适的时机放入回调队列，等到栈空时事件循环（<code>EventLoop</code>）开始工作，进行轮询。</li><li>微任务比宏任务执行时机要早</li></ul>\n<pre><code class=\"prism language-js\"><span class=\"token comment\">// 语句一</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 语句二</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//语句三</span>\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 语句四</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//1，4，3，2</span>\n</code></pre>\n<ul><li>微任务在DOM渲染前触发，宏任务在DOM渲染后触发</li></ul>\n<h2><a id=\"_57\"></a>四、微任务和宏任务的根本区别</h2>\n<p>**宏任务：**由浏览器规定的</p>\n<ol><li>setTimeout</li><li>setInterval</li><li>Ajax</li><li>DOM事件</li></ol>\n<p>**微任务：**由ES6语法规定的</p>\n<ol><li>Promise</li><li>async</li><li>await</li></ol>\n<h2><a id=\"_72\"></a>五、事件循环的整体过程</h2>\n<ol><li>先清空调用栈（<code>call stack</code>）中的同步代码</li><li>执行微任务队列中的微任务</li><li>尝试DOM渲染</li><li>触发事件循环（<code>Event Loop</code>）反复询问回调队列中是否有要执行的语句，有则放入调用栈继续执行。</li></ol>\n<p><strong>目前的理解：</strong></p>\n<p>JS是单线程的，浏览器在执行JS代码时先执行同步代码，再执行异步代码。</p>\n<p>同步代码：调用栈执行后直接出栈</p>\n<p>异步代码：放到Web API中，等待合适的时机放入回调队列，等到栈空时 事件循环（<code>EventLoop</code>）开始工作，进行轮询。</p>\n<p>主要过程是：</p>\n<p>先清空调用栈（<code>call stack</code>）中的同步代码，执行微任务队列中的微任务，尝试DOM渲染，触发事件循环（<code>Event Loop</code>）反复询问回调队列中是否有要执行的语句，有则放入调用栈继续执行。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-05-29 13:13:05", "summary": "文章目录一、什么是事件循环机制？二、的执行顺序三、事件循环的执行过程四、微任务和宏任务的根本区别五、事件循环的整体过程一、什么是事件循环机制？语句一语句二语句三执行结果为，，原因是引擎指向代码是从上往"}