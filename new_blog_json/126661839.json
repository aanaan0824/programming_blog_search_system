{"blogid": "126661839", "writerAge": "码龄2年", "writerBlogNum": "63", "writerCollect": "168", "writerComment": "237", "writerFan": "337", "writerGrade": "4级", "writerIntegral": "1293", "writerName": "AKA|布鲁克林欧神仙", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126661839.jpg", "writerRankTotal": "15729", "writerRankWeekly": "201", "writerThumb": "235", "writerVisitNum": "11750", "blog_read_count": "339", "blog_time": "已于 2022-09-05 15:17:02 修改", "blog_title": "Tomcat服务（部署、虚拟主机配置、优化）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E4%B8%80%EF%BC%8CTomcat%E4%BB%8B%E7%BB%8D-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%EF%BC%8CTomcat%E4%BB%8B%E7%BB%8D\">一，Tomcat介绍</a></p>\n<p id=\"%E4%BA%8C%EF%BC%8CTomcat%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%EF%BC%8CTomcat%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6\">二，Tomcat核心组件</a></p>\n<p id=\"%E4%B8%89%EF%BC%8Ctomcat%E9%83%A8%E7%BD%B2-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%89%EF%BC%8Ctomcat%E9%83%A8%E7%BD%B2\">三，tomcat部署</a></p>\n<p id=\"1%EF%BC%8C%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99%EF%BC%9A%E6%A0%B8%E5%BF%83%E9%98%B2%E6%8A%A4-toc\" style=\"margin-left:40px;\"><a href=\"#1%EF%BC%8C%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99%EF%BC%9A%E6%A0%B8%E5%BF%83%E9%98%B2%E6%8A%A4\">1，关闭防火墙：核心防护</a></p>\n<p id=\"2%2C%E5%AE%89%E8%A3%85%E5%90%AF%E5%8A%A8tomcat-toc\" style=\"margin-left:40px;\"><a href=\"#2%2C%E5%AE%89%E8%A3%85%E5%90%AF%E5%8A%A8tomcat\">2,安装启动tomcat</a></p>\n<p id=\"%C2%A0%E4%B8%89%EF%BC%8C%E9%85%8D%E7%BD%AEtomcat-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0%E4%B8%89%EF%BC%8C%E9%85%8D%E7%BD%AEtomcat\"> 四，配置tomcat</a></p>\n<p id=\"1%EF%BC%8C%E4%BC%98%E5%8C%96tomcat%E5%90%AF%E5%8A%A8%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96-toc\" style=\"margin-left:40px;\"><a href=\"#1%EF%BC%8C%E4%BC%98%E5%8C%96tomcat%E5%90%AF%E5%8A%A8%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96\">1，优化tomcat启动速度优化</a></p>\n<p id=\"2%EF%BC%8Ctomcat%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE-toc\" style=\"margin-left:40px;\"><a href=\"#2%EF%BC%8Ctomcat%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE\">2，tomcat虚拟主机配置</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<p></p>\n<h1 id=\"%E4%B8%80%EF%BC%8CTomcat%E4%BB%8B%E7%BB%8D\">一，Tomcat介绍</h1>\n<p>Tomcat：java代码运行的平台</p>\n<p>tomcat属于轻量级的应用服务器，在中小型系统和并发访问用户不是很多的场合下普遍使用，是开发和调试JSP程序的首选。</p>\n<p>一般来说，Tomcat虽然和Apache或者nginx这些web服务器一样，具有处理HTML页面的功能，然而由于其处理静态HTML的能力远不及Apache和Nginx。</p>\n<p>所以Tomcat通常作为一个server和JSP容器，单独运行在后端。</p>\n<p>tomcat是目前比较流行的Web应用服务。</p>\n<h1 id=\"%E4%BA%8C%EF%BC%8CTomcat%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6\">二，Tomcat核心组件</h1>\n<p>通常意义上Web服务器接收请求后，只是单纯的响应静态资源，如HTML文件、图片文件等，不能再后端进行一定的处理操作。</p>\n<p>Tomcat是Apache 下的一个子项目，它具备Web服务器的所有功能，不仅可以监听接收请求并响应静态资源，而且可以在后端运行特定规范的 JAVA 代码 ，同时将执行的结果以HTML代码的形式写回客户端。</p>\n<pre><code>tomcat主要有三个容器，web容器，jsb容器，servlet容器\n容器就是封装一组资源/功能集合的个体\n</code></pre>\n<p><strong>Tomcat 由一系列的组件构成，其中核心的组件容器有三个：</strong></p>\n<p><strong>Web 容器</strong>： 完成Web服务器的功能HTTP/HTTPS 请求的接收和响应。<br/> ​ 描述： ①接收、响应请求，②展示动态页面</p>\n<p><strong>JSP 容器 </strong>： 用以将index.jsp文件中的java代码翻译成Servlet 代码。<br/> ​ 描述： index.jsp文件里面有静态展示的html语言，还有一些java类代码，但是文件中java代码无法直接被tomcat执行，所以需要先翻译为可以执行的代码方式，也就是翻译成servlet代码格式。</p>\n<p><strong>Servlet 容器</strong>： 由名称为Catalina的脚本来处理Servlet 代码。<br/> ​ 描述： 使用catalina进行处理JSP容器翻译过来的servlet代码</p>\n<p><strong>tomcat三个核心组件的含义</strong></p>\n<pre><code> web容器，作为，index.jsp接入和输出的web容器口，jsp容器将web服务器中输入进来的jsp动态页面，翻译为为servlet代码，之后（sevlet：Tomact中，执行动态请求任务的标准格式）将翻译为servlet基于servlet进行执行。catalina作为servlet容器中，具体写了一些和内存相关的执行方式tomcat中，会议一中脚本形式存在的。\n  简介:\n####web. 容器: 1、接收、响应请求2、展示动态页面\n#####JSP容器: (翻译java-》 serverlet)\n#####Servlet容器:\n借助于catal ina来执行servlet代码(动态任务执行的标准格式)</code></pre>\n<p><img alt=\"\" height=\"264\" src=\"..\\..\\static\\image\\7dcc7ce6983f4fb2906b3f5a5cd947ac.png\" width=\"703\"/></p>\n<p></p>\n<p><strong>tomcat处理请求过程</strong></p>\n<blockquote>\n<p>1，tomcat处理请求过程</p>\n<p>处理请求详细过程</p>\n<p>用户请求&gt;service（支撑tomcat的服务过程）</p>\n<p>2，用户点击网页内容，请求被发送到本机端8080，被在那里监听的cpyote（tomcat连接器框架/基础环境），HTTP/1.1 connector（连接器，用于对接请求）获得。</p>\n<p>3，接受请求之后交给container（容器）中的engine进行处理，engine（引擎）是作为容器运行的动力核心</p>\n<p>4，基于引擎支撑，容器中会跑很多host虚拟主机/项目，这些虚拟主机中也会有很多context（当前程序所处的环境）此处的context功能可以理解为：将java前端和java后端连接的展示的枢纽</p>\n<p>5，servlet处理完后会返回给context</p>\n<p>6，engine返回给端口</p>\n<p>7，端口最后将页面展示给用户</p>\n<p>开发————编译（gcc，jdk）——打包（jar，war）——发布（tomcat）——借助（tomcat）这个环境运行，将代码对应的功能模块运行起来。</p>\n</blockquote>\n<p><strong>小结</strong></p>\n<p>1，tomcat：首先，是一种web应用服务</p>\n<p>2，tomcat：所在的位置，一般来说是在nginx之后，作为动态处理的服务</p>\n<p>3，tomcat职能，作为java类语言开发的应用所执行和持续的平台</p>\n<p>4，tomcat组成部分，web容器，jsp容器，servlet容器</p>\n<p>5，tomcat工作流程：80——8080是由connector连接器监听——给予容器的engine引擎——host项目（webapps中对应项目的代码（解压后））——通过context 传递代码，连接————应用的运行环境，最后执行servlet代码（动态的请求任务）最后————要么对接数据库，要么直接返回nginx————展示给用户查看</p>\n<h1 id=\"%E4%B8%89%EF%BC%8Ctomcat%E9%83%A8%E7%BD%B2\">三，tomcat部署</h1>\n<p>环境部署</p>\n<h2 id=\"1%EF%BC%8C%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99%EF%BC%9A%E6%A0%B8%E5%BF%83%E9%98%B2%E6%8A%A4\">1，关闭防火墙：核心防护</h2>\n<blockquote>\n<p>[root@kya opt]#systemctl stop firewalld</p>\n<p>[root@kya opt]#setenforce 0</p>\n<p>[root@kya opt]#</p>\n<p>查看java环境</p>\n</blockquote>\n<p><img alt=\"\" height=\"110\" src=\"..\\..\\static\\image\\ccd8edc0df6048ddbe5865a821de0009.png\" width=\"622\"/></p>\n<p> 安装jdk环境包</p>\n<p><img alt=\"\" height=\"163\" src=\"..\\..\\static\\image\\9886f5f9ae404375a7041f495c32afba.png\" width=\"636\"/></p>\n<blockquote>\n<p> rpm -ivh jdk-8u201-linux-x64.rpm   #rpm安装</p>\n</blockquote>\n<p><img alt=\"\" height=\"205\" src=\"..\\..\\static\\image\\1e278f3dc05f416aa9d0f671bc016536.png\" width=\"629\"/></p>\n<p><strong>设置JDK的环境变量</strong></p>\n<pre><code>vim /etc/profile    或  vim /etc/profile.d/java.sh     #修改配置文件\n\nexport JAVA_HOME=/usr/java/jdk1.8.0_201-amd64           #设置路径\nexport CLASSPATH=.:$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar    #设置执行路径\nexport PATH=$JAVA_HOME/bin:$PATH                        #设置环境变量\n\nsource /etc/profile   或source /etc/profile.d/java.sh     #重新加载环境变量\n</code></pre>\n<p><img alt=\"\" height=\"115\" src=\"..\\..\\static\\image\\b85841a85a774e368aeb4a337e1be367.png\" width=\"637\"/></p>\n<p> <img alt=\"\" height=\"131\" src=\"..\\..\\static\\image\\363df9eb9fe147f1933b593efe48b60c.png\" width=\"637\"/></p>\n<p> <strong>再次查看java版本</strong></p>\n<h2 id=\"2%2C%E5%AE%89%E8%A3%85%E5%90%AF%E5%8A%A8tomcat\">2,安装启动tomcat</h2>\n<p><img alt=\"\" height=\"37\" src=\"..\\..\\static\\image\\4b6533c4089f4e1ba2c601634dfa23de.png\" width=\"549\"/></p>\n<p> <strong>将解压后的包剪切到/usr/local 目录中，并改名为tomcat</strong></p>\n<p><img alt=\"\" height=\"662\" src=\"..\\..\\static\\image\\490d48a187c5460383ce495892ca6a4a.png\" width=\"635\"/></p>\n<p> <img alt=\"\" height=\"294\" src=\"..\\..\\static\\image\\011d71920b3247289557f7ab87e70dc3.png\" width=\"797\"/></p>\n<p> 查看目录</p>\n<p><img alt=\"\" height=\"293\" src=\"..\\..\\static\\image\\0b83bbcbaf4c4da19b53f130947932e1.png\" width=\"537\"/></p>\n<pre><code class=\"language-html\">我们如果要执行、持续运行一个java开发应用服务，在经过简单配置之后，可以直接将war包、jar包，放入到webapps中，来让tomcat运行。\n\n主要目录说明\n1、bin :存放启动和关闭Tomcat的脚本文件，比较常用的是：catalina.sh 、 startup.sh 、 shutdown.sh\n2、conf: 存放Tomcat服务器的各种配置文件，比较常用的是server.xml、context.xml、tomcat-users.xml、web.xml\n3、lib: 存放Tomcat服务器的jar包，一般不做任何改动，除非连接第三方服务，比如redis，那就需要添加对应的jar包。\n4、logs:存放Tomcat日志\n5、temp:存放Tomcat运行时产生的文件\n****6、webapps:存放项目资源的目录\n7、work: Tomcat工作目录，一般清除Tomcat缓存的时候会使用到\n\nTomcat配置文件详解\n1、catalina.policy :权限控制配置文件\n2、catalina.properties: Tomcat的属性配置文件\n3、context.xml : 上下文配置文件\n4、logging.properties:日志相关配置文件\n***5、server.xml : 主配置文件，通过配置文件，可以修改tomcat的启动端口，网站目录，虚拟主机，开启https等功能\n6、tomacat-user.xml/.xsd: 管理用户配置文件\n7、web.xml: tomcal的servlet、servlet-mapping、filter、MIME等相关配置</code></pre>\n<p> <strong>将启动脚本放入环境中方便启动</strong></p>\n<pre><code class=\"language-Clojure\">后台启动\n/usr/local/tomcat/bin/startup.sh\n或\n/usr/local/tomcat/bin/catalina.sh  start\n\n前台启动(终端关闭，tomacat停止运行)\n/usr/local/tomcat/bin/catalina.sh  run\n\n关闭\n/usr/local/tomcat/bin/shutdown.sh \n\n将启动关闭脚本放入到环境中\nln -s /usr/local/tomcat/bin/startup.sh /usr/local/bin\nln -s /usr/local/tomcat/bin/shutdown.sh /usr/local/bin</code></pre>\n<p><img alt=\"\" height=\"90\" src=\"..\\..\\static\\image\\813199ebf4a044948c08b30de625b672.png\" width=\"715\"/></p>\n<p> <strong>启动tomcat</strong></p>\n<p><img alt=\"\" height=\"167\" src=\"..\\..\\static\\image\\9d9801412ecc4104b854b26f6139039a.png\" width=\"799\"/></p>\n<p> <img alt=\"\" height=\"123\" src=\"..\\..\\static\\image\\0ac58aeba7864f25a95486474baeea13.png\" width=\"796\"/></p>\n<p> 直接对tomcat8080端口进行访问</p>\n<p><img alt=\"\" height=\"620\" src=\"..\\..\\static\\image\\f7051d9834ef4dcb890aed322a877021.png\" width=\"799\"/></p>\n<h1 id=\"%C2%A0%E4%B8%89%EF%BC%8C%E9%85%8D%E7%BD%AEtomcat\"> 四，配置tomcat</h1>\n<h2 id=\"1%EF%BC%8C%E4%BC%98%E5%8C%96tomcat%E5%90%AF%E5%8A%A8%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96\">1，优化tomcat启动速度优化</h2>\n<p><img alt=\"\" height=\"54\" src=\"..\\..\\static\\image\\de0e008cffb741bcaef672b21f050784.png\" width=\"641\"/></p>\n<p> 修改117行</p>\n<p>以下部分用来提高tomcat以及里面应用代码来提高运行启动速度</p>\n<p><img alt=\"\" height=\"104\" src=\"..\\..\\static\\image\\af88f790b707445db31d213ae2cf7ad4.png\" width=\"558\"/></p>\n<p> <img alt=\"\" height=\"355\" src=\"..\\..\\static\\image\\e438172498744a03a6b8c549afcf59fd.png\" width=\"630\"/></p>\n<blockquote>\n<p>  69     &lt;Connector port=\"8080\" protocol=\"HTTP/1.1\"<br/>  70                connectionTimeout=\"20000\"<br/>  71                redirectPort=\"8443\" /&gt;</p>\n</blockquote>\n<h2 id=\"2%EF%BC%8Ctomcat%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE\">2，tomcat虚拟主机配置</h2>\n<p><img alt=\"\" height=\"485\" src=\"..\\..\\static\\image\\95af0dce439a484c9ee24747ebbf6343.png\" width=\"772\"/></p>\n<p> 创建kya和cxk项目目录和文件</p>\n<p><img alt=\"\" height=\"615\" src=\"..\\..\\static\\image\\a08d8fff84ed43e0bd2c774195617c60.png\" width=\"565\"/></p>\n<blockquote>\n<p> 修改tomcat主配置文件</p>\n<p></p>\n<p>&lt;Host name=\"www.kya.com\" appBase=\"webapps\" unpackWARs=\"true\" autoDeploy=\"true\" xmlValidation=\"false\" xmlNamespaceAware=\"false\"&gt;<br/>          &lt;Context docBase=\"/usr/local/tomcat/webapps/kya\" path=\"\" reloadable=\"true\" /&gt;<br/>      &lt;/Host&gt;</p>\n<p>     &lt;Host name=\"www.cxk.com\" appBase=\"webapps\" unpackWARs=\"true\" autoDeploy=\"true\" xmlValidation=\"false\"   xmlNamespaceAware=\"false\"&gt;<br/>         &lt;Context docBase=\"/usr/local/tomcat/webapps/cxk\" path=\"\" reloadable=\"true\" /&gt;<br/>     &lt;/Host&gt;</p>\n</blockquote>\n<p><img alt=\"\" height=\"362\" src=\"..\\..\\static\\image\\412aa070a4e14e0bbba78bac243138f9.png\" width=\"719\"/></p>\n<p> 验证</p>\n<p><img alt=\"\" height=\"237\" src=\"..\\..\\static\\image\\77cf785a29c0466ca0c83a3ae71d699d.png\" width=\"741\"/></p>\n<p> <img alt=\"\" height=\"228\" src=\"..\\..\\static\\image\\00e812f7c91f4ba6942c2bbb67f62bfc.png\" width=\"566\"/></p>\n<h1></h1>\n<p></p>\n<p></p>\n</div>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-09-05 15:17:02", "summary": "目录一，介绍二，核心组件三，部署，关闭防火墙：核心防护安装启动四，配置，优化启动速度优化，虚拟主机配置一，介绍：代码运行的平台属于轻量级的应用服务器，在中小型系统和并发访问用户不是很多的场合下普遍使用"}