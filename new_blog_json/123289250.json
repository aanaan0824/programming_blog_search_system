{"blogid": "123289250", "writerAge": "码龄12年", "writerBlogNum": "334", "writerCollect": "7473", "writerComment": "775", "writerFan": "10865", "writerGrade": "7级", "writerIntegral": "16332", "writerName": "luoyayun361", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123289250.jpg", "writerRankTotal": "1078", "writerRankWeekly": "1086", "writerThumb": "2075", "writerVisitNum": "1752716", "blog_read_count": "3101", "blog_time": "已于 2022-05-24 10:40:21 修改", "blog_title": "那些常见的C++、Qt基础面试题", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_0\"></a>前言</h2>\n<p>又到了金三银四的季节，每年这个时候都是跳槽的高峰期，在整理电脑资料的过程中发现一些之前记录的面试过程中最常提到的C++和Qt相关问题，其实都是些很基础的知识点，但是在面试过程中出镜率非常高。总结如下，仅供参考。</p>\n<h2><a id=\"_3\"></a>正文</h2>\n<p>废话不多说，直接上题。</p>\n<h4><a id=\"C_6\"></a>C++基础篇</h4>\n<ul><li>1.线程同步的方式有哪些</li><li>2.线程间通信如何实现</li><li>3.进程间通信如何实现 <a href=\"https://blog.csdn.net/weixin_38416696/article/details/90719388?spm=1001.2101.3001.6650.3&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-3-90719388-blog-118107510.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-3-90719388-blog-118107510.pc_relevant_default&amp;utm_relevant_index=6\">参考这里</a></li><li>4.IO模型用过哪些</li><li>5.IO实现的方式有哪些</li><li>6.用过哪些STL</li><li>7.迭代器失效怎么产生的，如何避免 <a href=\"https://blog.csdn.net/zm1_1zm/article/details/115699599\">参考这里</a></li><li>8.vector、list、map实现原理</li><li>9.如何实现多态</li><li>10.虚函数实现原理，虚函数表结构，对于菱形继承结构，虚函数表处理方式是什么</li><li>11.内存结构分配方式</li></ul>\n<blockquote>\n<p>C++ 内存分区：栈、堆、全局/静态存储区、常量存储区、代码区。<br/> 1.栈：存放函数的局部变量、函数参数、返回地址等，由编译器自动分配和释放。<br/> 2.堆：动态申请的内存空间，就是由 malloc 分配的内存块，由程序员控制它的分配和释放，如果程序执行结束还没有释放，操作系统会自动回收。<br/> 3.全局区/静态存储区（.bss 段和 .data 段）：存放全局变量和静态变量，程序运行结束操作系统自动释放，在 C 语言中，未初始化的放在 .bss 段中，初始化的放在 .data 段中，C++ 中不再区分了。<br/> 4.常量存储区（.data 段）：存放的是常量，不允许修改，程序运行结束自动释放。<br/> 5.代码区（.text 段）：存放代码，不允许修改，但可以执行。编译后的二进制文件存放在这里。</p>\n</blockquote>\n<ul><li>12.malloc free 和new delete的区别，为什么不能malloc和delete混用，会产生什么问题</li><li>13.红黑树实现原理</li><li>14.查找算法有哪些</li><li>15.排序算法有哪些</li><li>16.快排实现原理，时间复杂度是多少</li><li>17.指针和引用的区别</li></ul>\n<blockquote>\n<ul><li>指针有自己的一块空间，而引用只是一个别名</li><li>指针的大小是4，引用则是被引用对象的大小</li><li>指针可以被初始化为NULL，而引用必须被初始化且必须是一个已有对象的引用</li><li>作为参数传递时，指针需要被解引用才可以对对象进行操作，而直接对应用的修改都会改变引用所指向的对象</li><li>可以有const指针，但没有const引用</li><li>指针在使用中可以指向其他对象，但是引用只能是一个对象的引用，不能被改变</li><li>指针可以有多级指针（**p），而引用只有一级</li><li>指针和引用使用++运算符的意义不一样</li><li>如果返回动态内存分配的对象或者内存，必须使用指针，引用可能引起内存泄漏。</li></ul>\n</blockquote>\n<ul><li>18.const声明指针的问题</li><li>19.哪些运算符不能重载</li></ul>\n<blockquote>\n<p>1 . (点运算符)通常用于去对象的成员,但是-&gt;(箭头运算符),是可以重载的 <br/> 2 ::(域运算符)即类名+域运算符,取成员,不可以重载 <br/> 3 .* (点星运算符,)不可以重载,成员指针运算符\".*,即成员是指针类型 <br/> 4 ?: (条件运算符)不可以重载 <br/> 5 sizeof 不可以重载</p>\n</blockquote>\n<ul><li>20.什么是线程安全</li></ul>\n<blockquote>\n<p>线程安全是多线程编程时的计算机程序代码中的一个概念。在拥有共享数据的多条线程并行执行的程序中，线程安全的代码会通过同步机制保证各个线程都可以正常且正确的执行，不会出现数据污染等意外情况。</p>\n<p>多个线程访问同一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步，或者在调用方进行任何其他操作，调用这个对象的行为都可以获得正确的结果，那么这个对象就是线程安全的。</p>\n<p>线程安全问题大多是由全局变量及静态变量引起的，局部变量逃逸也可能导致线程安全问题。</p>\n</blockquote>\n<ul><li>21.C++11新特性用过哪些</li><li>22.vector的C++新特性有哪些</li><li>23.讲讲右值引用与完美转发</li><li>24.对象池的使用及场景</li><li>25.线程池介绍，使用场景和实现原理</li><li>26.内存池使用场景和实现原理</li><li>27.C++的锁</li><li>28.Lambda表达式传递值有哪些方式，如何确定lambda的返回值 <a href=\"https://luoyayun361.blog.csdn.net/article/details/123491439\">参考这里</a></li><li>29.智能指针介绍</li><li>30.shared_ptr相互引用的场景，如何解决</li><li>31.auto和decltype的区别</li><li>32.vector内存拷贝问题，什么情况下会出现内存拷贝，如何解决这个问题使其更加高效</li><li>33.vector中resize和reverse的区别</li></ul>\n<blockquote>\n<p>reserve是容器预留空间，但并不真正创建元素对象，在创建对象之前，不能引用容器内的元素，因此当加入新的元素时，需要用push_back()/insert()函数。<br/> resize是改变容器的大小，并且创建对象，因此，调用这个函数之后，就可以引用容器内的对象了，因此当加入新的元素时，用operator[]操作符，或者用迭代器来引用元素对象。<br/> 再者，两个函数的形式是有区别的，reserve函数之后一个参数，即需要预留的容器的空间；resize函数可以有两个参数，第一个参数是容器新的大小，第二个参数是要加入容器中的新元素，如果这个参数被省略，那么就调用元素对象的默认构造函数。</p>\n</blockquote>\n<ul><li>34.内存泄露的情况</li><li>35.链表实现原理</li><li>36.动态库和静态库的区别</li><li>37.多线程在什么场景下使用</li><li>38.动态库导出的接口设计有哪些需要注意的。工作中有没有做过动态接口设计，如何考虑不同版本的兼容性。假如已经导出了接口给外部使用，并且该版本已经发布出去了，如果新增加了接口，那么如何保障已经发出去的版本能够调用到这个新的接口，如何设计这个兼容性问题。 <a href=\"https://luoyayun361.blog.csdn.net/article/details/121480755\">参考这里</a></li><li>39.用过哪些设计模式，举例说明其原理 <a href=\"https://blog.csdn.net/luoyayun361/category_10165810.html\">参考这里</a></li><li>40.堆和栈的区别</li></ul>\n<blockquote>\n<p>1.申请方式：栈是系统自动分配，堆是程序员主动申请。<br/> 2.申请后系统响应：分配栈空间，如果剩余空间大于申请空间则分配成功，否则分配失败栈溢出；申请堆空间，堆在内存中呈现的方式类似于链表（记录空闲地址空间的链表），在链表上寻找第一个大于申请空间的节点分配给程序，将该节点从链表中删除，大多数系统中该块空间的首地址存放的是本次分配空间的大小，便于释放，将该块空间上的剩余空间再次连接在空闲链表上。<br/> 3.栈在内存中是连续的一块空间（向低地址扩展）最大容量是系统预定好的，堆在内存中的空间（向高地址扩展）是不连续的。<br/> 4.申请效率：栈是有系统自动分配，申请效率高，但程序员无法控制；堆是由程序员主动申请，效率低，使用起来方便但是容易产生碎片。<br/> 5.存放的内容：栈中存放的是局部变量，函数的参数；堆中存放的内容由程序员控制。</p>\n</blockquote>\n<ul><li>41.什么是二叉搜索树</li></ul>\n<blockquote>\n<p>二叉搜索树，左子树的所有节点都小于当前节点，右子树的所有节点都大于当前节点，并且每棵子树都具有上述特点</p>\n</blockquote>\n<h4><a id=\"Qt_99\"></a>Qt相关</h4>\n<ul><li>1.Qt创建线程的方式有哪些 <a href=\"https://blog.csdn.net/luoyayun361/article/details/97150788\">参考这里</a></li><li>2.信号槽实现原理</li><li>3.Qt的消息传输机制</li><li>4.QML和C++的交互方式</li><li>5.如何在C++中定义model并在qml中使用</li><li>6.moveToThread的优缺点</li><li>7.Qt中的http是同步还是异步，如何实现同步</li><li>8.Qt的信号槽是线程安全的吗，Qt信号的连接方式？</li></ul>\n<blockquote>\n<p>Qt 支持这些信号槽连接类型：<br/> AutoConnection：自动连接（默认）如果信号在接收对象具有亲和性的线程中发出，则行为与直接连接相同。否则，行为与排队连接相同。<br/> DirectConnection：直接连接，发出信号时立即调用槽。槽在发射器的线程中执行，不一定是接收器的线程。<br/> Queued Connection：当控制返回到接收者线程的事件循环时调用该槽。插槽在接收者的线程中执行。<br/> BlockingQueuedConnection：与 Queued Connection 一样调用槽，除了当前线程阻塞，直到槽返回。<br/> 注意：使用该类型连接同一线程中的对象会导致死锁。<br/> UniqueConnection：唯一连接行为 与自动连接相同，但只有在不复制现有连接时才会建立连接。即，如果相同的信号已经连接到同一对对象的相同槽，则不建立连接并且connect()返回false。</p>\n</blockquote>\n<blockquote>\n<p>可以通过将附加参数传递给connect()来指定连接类型。请注意，如果事件循环在接收者的线程中运行，则在发送者和接收者位于不同线程中时使用直接连接是不安全的，原因与调用位于另一个线程中的对象上的任何函数是不安全的原因相同。</p>\n</blockquote>\n<blockquote>\n<p>QObject::connect () 本身是线程安全的。</p>\n</blockquote>\n<ul><li>9.元对象系统介绍</li><li>10.QPixmap和QImage的区别 <a href=\"https://luoyayun361.blog.csdn.net/article/details/123366133?spm=1001.2014.3001.5502\">参考这里</a></li><li>11.Qt跨平台的优缺点</li></ul>\n<h4><a id=\"_126\"></a>平台相关</h4>\n<ul><li>1.win系统编程用过哪些系统接口</li><li>2.windows消息传递机制</li><li>3.如果要自己写消息循环会怎么写</li><li>4.windbg调试使用</li><li>5.内存泄露如何排查和解决</li><li>6.什么是消息队列</li><li>7.一个进程可以有多个消息队列吗</li><li>8.sendMessage和postMessage的区别</li><li>9.VS调试dump文件过程</li></ul>\n<h4><a id=\"_137\"></a>网络相关</h4>\n<ul><li>1.TCP底层原理</li><li>2.TCP三次握手，四次握手过程，发送的报文以及每次握手的状态，断开后为什么是time_wait状态</li><li>3.TCP粘包如何处理</li><li>4.网络传输协议如何制定，哪些字段必须定义</li></ul>\n<h4><a id=\"_143\"></a>编程相关</h4>\n<ul><li>1.手写快排代码 <a href=\"https://blog.csdn.net/luoyayun361/article/details/107027447?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165243203116782391820458%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=165243203116782391820458&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-107027447-null-null.nonecase&amp;utm_term=%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F&amp;spm=1018.2226.3001.4450\">参考这里</a></li><li>2.手写冒泡排序</li><li>3.创建单向链表，顺序添加10个元素</li><li>4.创建红黑树，添加元素</li><li>5.单项链表，如何快速查出倒数第N个数据的值</li><li>6.假设内存无限大，100万个short类型的数据，如何高效排序</li><li>7.vector一次循环删除多个元素<br/> 参考：</li></ul>\n<pre><code class=\"prism language-cpp\">std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"*it=\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            it <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n            it<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h4><a id=\"_165\"></a>项目相关</h4>\n<ul><li>1.libevent接口如何封装的</li><li>2.介绍自己设计的项目框架</li><li>3.项目中遇到的难题，如何解决的</li><li>4.如何调试程序，崩溃问题如何排查</li><li>5.git和svn区别 <a href=\"https://blog.csdn.net/young_0609/article/details/108267204\">参考这里</a></li></ul>\n<h2><a id=\"_172\"></a>相关</h2>\n<p>在之前的博客中也总结过一些关于C/C++ 的基础知识点，可供参考：<br/> <a href=\"https://luoyayun361.blog.csdn.net/article/details/105026257\">C/C++基础知识点(一)</a><br/> <a href=\"https://luoyayun361.blog.csdn.net/article/details/105031726\">C/C++基础知识点(二)</a><br/> <a href=\"https://luoyayun361.blog.csdn.net/article/details/105033095\">C/C++基础知识点(三)</a><br/> <a href=\"https://luoyayun361.blog.csdn.net/article/details/105052748\">C/C++基础知识点(四)</a></p>\n<h2><a id=\"_180\"></a>最后</h2>\n<p>上面这些是之前面试中遇到过的一些常见问题，另外，还整理了一份更详细的复习资料，也是关于C++基础知识以及相关经典面试题，还有一份数据结构和算法的面试手册，非常详细，有需要的可以下载学习。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8c95c22aa8d34f119f709bba131a3039.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d5ef660d01ee4fc28ff00edf4992bc53.png\"/><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4c58f4318f9848f68b35d4b3107b0b04.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4795d2f63ddd47018641be05db620302.png\"/></p>\n<p>以上资料附带详细答案。<br/> <a href=\"https://download.csdn.net/download/luoyayun361/85449022\">下载地址</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-05-24 10:40:21", "summary": "前言又到了金三银四的季节，每年这个时候都是跳槽的高峰期，在整理电脑资料的过程中发现一些之前记录的面试过程中最常提到的和相关问题，其实都是些很基础的知识点，但是在面试过程中出镜率非常高。总结如下，仅供参"}