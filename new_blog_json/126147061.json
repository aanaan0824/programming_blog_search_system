{"blogid": "126147061", "writerAge": "码龄1年", "writerBlogNum": "22", "writerCollect": "664", "writerComment": "912", "writerFan": "1435", "writerGrade": "5级", "writerIntegral": "2610", "writerName": "是Lay", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126147061.jpg", "writerRankTotal": "7782", "writerRankWeekly": "106", "writerThumb": "775", "writerVisitNum": "15324", "blog_read_count": "7791", "blog_time": "已于 2022-08-21 01:02:00 修改", "blog_title": "VUE [入门篇(三)]", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h2>Vue入门</h2>\n<p><strong>目录</strong></p>\n<p style=\"margin-left:40px;\"><a href=\"#Vue%E5%85%A5%E9%97%A8\">Vue入门</a></p>\n<p style=\"margin-left:40px;\"><a href=\"#1.6.%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4\">1.6.自定义指令</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#pOJEO\">1、示例代码</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#ceFKk\">2、调试步骤</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#wy17T\">3、参数说明</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#UJitj\">4、生命周期</a></p>\n<p style=\"margin-left:40px;\"><a href=\"#FTk5i\">1.7.组件基础</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#J9HU4\"> 1、组件注册</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#hx9CO\">2、props属性传值</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#vV6zB\">3、父子组件</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#vDbwI\">4、完整示例代码</a></p>\n<p style=\"margin-left:40px;\"><a href=\"#OeoqK\">1.8.制作模板</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#FWhLS\">1、选项模板</a></p>\n<p style=\"margin-left:80px;\"><a href=\"#BRqsC\">2、标签模板 </a></p>\n<p style=\"margin-left:80px;\"> </p>\n<p style=\"margin-left:80px;\"> </p>\n<p style=\"margin-left:40px;\"> </p>\n<p style=\"margin-left:80px;\"> </p>\n<p style=\"margin-left:80px;\"> </p>\n<p style=\"margin-left:80px;\"> </p>\n<p style=\"margin-left:80px;\"> </p>\n<p> </p>\n<h2>1.6.自定义指令</h2>\n<p>vue中的自定义指令通过Vue.directive来实现，主要完成内置指令不能完成的一些事情</p>\n<h3>1、示例代码</h3>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n\t&lt;html lang=\"en\"&gt;\n\t\t&lt;head&gt;\n\t\t&lt;meta charset=\"UTF-8\"&gt;\n\t\t\t&lt;title&gt;Vue入门之自定义指令&lt;/title&gt;\n&lt;script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\t&lt;div id=\"app\"&gt;\n\t\t&lt;div v-test=\"color\"&gt;\n\t\t\t{<!-- -->{num}}\n\t\t\t\t&lt;/div&gt;\n&lt;/div&gt;\n&lt;button onclick=\"unbindApp()\"&gt;解绑&lt;/button&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n\t// 解绑\n\tfunction unbindApp() {\n\tapp.$destroy();\n}\n\n// 自定义指令\nVue.directive(\"test\",{\n\t//1-被绑定\n\tbind:function (el, binding, vnode) {\n\t\tconsole.log(\"1-bind 被绑定\");\n\t\tconsole.log(\"el:\",el);\n\t\tconsole.log(\"binding:\",binding);\n\t\tconsole.log(\"vnode:\",vnode);\n\t\tel.style.color = binding.value;\n\t},\n\t//2-被插入\n\tinserted:function (el, binding, vnode) {\n\t\tconsole.log(\"2-inserted 被插入\");\n\t},\n\t//3-更新\n\tupdate:function (el, binding, vnode) {\n\t\tconsole.log(\"3-update 更新\");\n\t},\n\t//4-更新完成\n\tcomponentUpdated:function (el, binding, vnode) {\n\t\tconsole.log(\"4-componentUpdated 更新完成\");\n\t},\n\t//5-解绑\n\tunbind:function (el, binding, vnode) {\n\t\tconsole.log(\"5-unbind 解绑\");\n\t}\n});\n\nvar app = new Vue({\n\tel:'#app',\n\tdata:{\n\t\tnum: 123,\n\t\tcolor:'red'\n\t}\n})\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<h3>2、调试步骤</h3>\n<p>（1）chrome打开控制器查看<br/> （2）控制台输入“app.num=’通过控制台设置的新name’”<br/> （3）点击解绑按钮</p>\n<h3>3、参数说明</h3>\n<ul><li>el：指令所绑定的元素，可以用来直接操作DOM</li><li>binding： 一个对象，包含指令的很多信息</li><li>vnode:：Vue编译生成的虚拟节点</li></ul>\n<h3>4、生命周期</h3>\n<p>自定义指令有五个生命周期（也叫钩子函数），分别是bind、inserted、update、componentUpdated、unbind，说明如下：</p>\n<ol><li>bind：只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个绑定时执行一次的初始化动作</li><li>inserted：被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于document中）</li><li>update：被绑定于元素所在的模板更新时调用，而无论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新</li><li>componentUpdated：被绑定元素所在模板完成一次更新周期时调用</li><li>unbind：只调用一次，指令与元素解绑时调用</li></ol>\n<h2>1.7.组件基础</h2>\n<h3> 1、组件注册</h3>\n<p><strong>（1）全局注册</strong></p>\n<pre><code class=\"language-javascript\">// script\nVue.component('button-counter', {\n\tdata: function () {\n\t\treturn {\n\t\t\tcount: 0\n\t\t}\n\t},\n\ttemplate: '&lt;button v-on:click=\"count++\"&gt;全局组件显示： {<!-- -->{ count }}&lt;/button&gt;'\n});\n\nnew Vue({\n\tel: '#app'\n});\n\n// html使用\n&lt;button-counter&gt;&lt;/button-counter&gt;</code></pre>\n<p><strong>（2）局部注册</strong></p>\n<pre><code class=\"language-javascript\">// script\nnew Vue({\n\tel: '#app',\n\tcomponents:{\n\t\t\"button-inner\":{\n\t\t\tdata: function() {\n\t\t\t\treturn {\n\t\t\t\t\tinner: 0\n\t\t\t\t}\n\t\t\t},\n\t\t\ttemplate: '&lt;button v-on:click=\"inner++\"&gt;局部组件显示： {<!-- -->{ inner }}&lt;/button&gt;'\n\t\t}\n\t}\n});\n\n// html使用\n&lt;button-inner&gt;&lt;/button-inner&gt;</code></pre>\n<h3>2、props属性传值</h3>\n<p><strong>（1）属性取值</strong></p>\n<pre><code class=\"language-javascript\">// script\nnew Vue({\n\tel: '#app',\n\tcomponents:{\n\t\t\"button-props\":{\n\t\t\ttemplate:`&lt;div style=\"color:red;\"&gt;参数1： {<!-- -->{ here }}:---参数2： {<!-- -->{fromHere}}&lt;/div&gt;`,\n\t\t\tprops:['here', 'fromHere']\n\t\t}\n\t}\n});\n\n// html使用\n&lt;button-props here=\"hello\" from-here=\"world\"&gt;&lt;/button-props&gt;</code></pre>\n<p>PS：如果属性带“-”，props中需要驼峰取值</p>\n<p><strong>（2）在构造器向组件传值（v-bind）</strong></p>\n<pre><code class=\"language-javascript\">// script\nnew Vue({\n\tel: '#app',\n\tdata: {\n\t\tmessage: 'hello'\n\t},\n\tcomponents:{\n\t\t\"button-props\":{\n\t\t\ttemplate:`&lt;div style=\"color:red;\"&gt;参数1： {<!-- -->{ here }}:---参数2： {<!-- -->{fromHere}}&lt;/div&gt;`,\n\t\t\tprops:['here', 'fromHere']\n\t\t}\n\t}\n});\n\n// html使用\n&lt;button-props v-bind:here=\"message\" :from-here=\"message\"&gt;&lt;/button-props&gt;</code></pre>\n<h3>3、父子组件</h3>\n<pre><code class=\"language-javascript\">// script\n// 子组件\nvar city = {\n\ttemplate:`&lt;div&gt;Sichuan of China&lt;/div&gt;`\n}\n// 父组件\nvar parent = {\n\ttemplate:\n\t`&lt;div&gt;\n\t&lt;p&gt; Panda from China!&lt;/p&gt;\n\t&lt;city&gt;&lt;/city&gt;\n\t&lt;/div&gt;`,\n\tcomponents:{\n\t\t\"city\": city\n\t}\n}\n\n// 实例化\nnew Vue({\n\tel: '#app',\n\t// 定义局部组件\n\tcomponents:{\n\t\t// 组件注册\n\t\t\"parent\": parent\n\t}\n});\n\n// html使用\n&lt;parent&gt;&lt;/parent&gt;</code></pre>\n<h3>4、完整示例代码</h3>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset=\"UTF-8\"&gt;\n\t\t&lt;title&gt;Vue入门之组件&lt;/title&gt;\n\t\t&lt;script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"&gt;&lt;/script&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\t&lt;div id=\"app\"&gt;\n\t\t\t&lt;!-- 全局组件 --&gt;\n\t\t\t&lt;div&gt;\n\t\t\t\t&lt;button-counter&gt;&lt;/button-counter&gt;\n\t\t\t&lt;/div&gt;\n\t\t\t&lt;!-- 局部组件 --&gt;\n\t\t\t&lt;div&gt;\n\t\t\t\t&lt;button-inner&gt;&lt;/button-inner&gt;\n\t\t\t&lt;/div&gt;\n\t\t\t&lt;!-- 常规属性传值 --&gt;\n\t\t\t&lt;div&gt;\n\t\t\t\t&lt;button-props here=\"hello\" from-here=\"world\"&gt;&lt;/button-props&gt;\n\t\t\t&lt;/div&gt;\n\t\t\t&lt;!-- v-bind传值 --&gt;\n\t\t\t&lt;div&gt;\n\t\t\t\t&lt;button-props v-bind:here=\"message\" :from-here=\"message\"&gt;&lt;/button-props&gt;\n\t\t\t&lt;/div&gt;\n\t\t\t&lt;!-- 父子组件调用 --&gt;\n\t\t\t&lt;div&gt;\n\t\t\t\t&lt;parent&gt;&lt;/parent&gt;\n\t\t\t&lt;/div&gt;\n\n\t\t&lt;/div&gt;\n\n\t\t&lt;script type=\"text/javascript\"&gt;\n\t\t\t// 定义全局组件\n\t\t\tVue.component('button-counter', {\n\t\t\t\tdata: function() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcount: 0\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\ttemplate: '&lt;button v-on:click=\"count++\"&gt;全局组件显示： {<!-- -->{ count }}&lt;/button&gt;'\n\t\t\t});\n\n\t\t\t// 子组件\n\t\t\tvar city = {\n\t\t\t\ttemplate: `&lt;div&gt;Sichuan of China&lt;/div&gt;`\n\t\t\t}\n\t\t\t// 父组件\n\t\t\tvar parent = {\n\t\t\t\ttemplate: `&lt;div&gt;\n                &lt;p&gt; Panda from China!&lt;/p&gt;\n                &lt;city&gt;&lt;/city&gt;\n            &lt;/div&gt;`,\n\t\t\t\tcomponents: {\n\t\t\t\t\t\"city\": city\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 实例化\n\t\t\tnew Vue({\n\t\t\t\tel: '#app',\n\t\t\t\tdata: {\n\t\t\t\t\tmessage: 'hello'\n\t\t\t\t},\n\t\t\t\t// 定义局部组件\n\t\t\t\tcomponents: {\n\t\t\t\t\t\"button-inner\": {\n\t\t\t\t\t\tdata: function() {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tinner: 0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttemplate: '&lt;button v-on:click=\"inner++\"&gt;局部组件显示： {<!-- -->{ inner }}&lt;/button&gt;'\n\t\t\t\t\t},\n\t\t\t\t\t// 取值\n\t\t\t\t\t\"button-props\": {\n\t\t\t\t\t\ttemplate: `&lt;div style=\"color:red;\"&gt;参数1： {<!-- -->{ here }}:---参数2： {<!-- -->{fromHere}}&lt;/div&gt;`,\n\t\t\t\t\t\tprops: ['here', 'fromHere']\n\t\t\t\t\t},\n\t\t\t\t\t// 组件注册\n\t\t\t\t\t\"parent\": parent\n\t\t\t\t}\n\t\t\t});\n\t\t&lt;/script&gt;\n\t&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2>1.8.制作模板</h2>\n<p>vue中的模板使用template来实现</p>\n<h3>1、选项模板</h3>\n<pre><code class=\"language-javascript\">&lt;div id=\"app\"&gt;\n&lt;/div&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n    // 实例化\n    new Vue({\n        el: '#app',\n        data: {\n            message: 'hello'\n        },\n        template:`&lt;h1 style=\"color:red\"&gt;我是选项模板&lt;/h1&gt;`\n    });\n&lt;/script&gt;</code></pre>\n<h3>2、&lt;template&gt;标签模板</h3>\n<pre><code class=\"language-javascript\">&lt;div id=\"app\"&gt;\n    &lt;template id=\"demo2\"&gt;\n        &lt;h2 style=\"color:red\"&gt;我是template标签模板&lt;/h2&gt;\n    &lt;/template&gt;\n&lt;/div&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n    // 实例化\n    new Vue({\n        el: '#app',\n        data: {\n            message: 'hello'\n        },\n        template:'#demo2'\n    });\n&lt;/script&gt;</code></pre>\n<h3>3、&lt;script&gt;标签模板</h3>\n<pre><code class=\"language-javascript\">&lt;div id=\"app\"&gt;\n&lt;/div&gt;\n\n&lt;script type=\"x-template\" id=\"demo3\"&gt;\n    &lt;h2 style=\"color:red\"&gt;我是script标签模板&lt;/h2&gt;\n&lt;/script&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n    // 实例化\n    new Vue({\n        el: '#app',\n        data: {\n            message: 'hello'\n        },\n        template:'#demo3'\n    });\n&lt;/script&gt;</code></pre>\n<h3>4、完整示例代码</h3>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset=\"UTF-8\"&gt;\n\t\t&lt;title&gt;Vue入门之组件&lt;/title&gt;\n\t\t&lt;script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"&gt;&lt;/script&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\t&lt;div id=\"app\"&gt;\n\t\t\t&lt;!-- template标签模板 --&gt;\n\t\t\t&lt;template id=\"demo2\"&gt;\n\t\t\t\t&lt;h2 style=\"color:red\"&gt;我是template标签模板&lt;/h2&gt;\n\t\t\t&lt;/template&gt;\n\t\t&lt;/div&gt;\n\n\t\t&lt;!-- script标签模板 --&gt;\n\t\t&lt;script type=\"x-template\" id=\"demo3\"&gt;\n\t\t\t&lt;h2 style=\"color:red\"&gt;我是script标签模板&lt;/h2&gt;\n&lt;/script&gt;\n\n\t\t&lt;script type=\"text/javascript\"&gt;\n\t\t\t// 实例化\n\t\t\tnew Vue({\n\t\t\t\tel: '#app',\n\t\t\t\tdata: {\n\t\t\t\t\tmessage: 'hello'\n\t\t\t\t},\n\t\t\t\t// 选项模板\n\t\t\t\t//template:`&lt;h1 style=\"color:red\"&gt;我是选项模板&lt;/h1&gt;`\n\t\t\t\t//template:'#demo2'\n\t\t\t\ttemplate: '#demo3'\n\t\t\t});\n\t\t&lt;/script&gt;\n\t&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2>1.9.插槽slot</h2>\n<p>插槽，也就是slot，是组件的一块HTML模板(占位符)，一个slot最核心的两个问题是显不显示和怎样显示</p>\n<h3>1、单个slot</h3>\n<p>单个插槽，别名默认插槽、匿名插槽，不用设置name属性</p>\n<pre><code class=\"language-javascript\">&lt;div id=\"app\"&gt;\n\t&lt;children1&gt;\n\t&lt;span&gt;12345&lt;/span&gt;\n&lt;/children1&gt;\n&lt;/div&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n\tvar app = new Vue({\n\t\tel: '#app',\n\t\tcomponents: {\n\t\t\tchildren1: {\n\t\t\t\ttemplate: \"&lt;button&gt;&lt;slot&gt;&lt;/slot&gt;单个插槽&lt;/button&gt;\"\n\t\t\t}\n\t\t}\n\t});\n&lt;/script&gt;</code></pre>\n<h3>2、具名slot</h3>\n<p>插槽加了name属性，就变成了具名插槽。具名插槽可以在一个组件中出现N次，出现在不同的位置</p>\n<pre><code class=\"language-javascript\">&lt;div id=\"app\"&gt;\n\t&lt;children2&gt;\n\t&lt;span slot=\"first\" @click=\"tobeknow\"&gt;12345&lt;/span&gt;\n&lt;span slot=\"second\"&gt;56789&lt;/span&gt;\n&lt;/children2&gt;\n&lt;/div&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n\tvar app = new Vue({\n\t\tel: '#app',\n\t\tmethods: {\n\t\t\ttobeknow: function () {\n\t\t\t\tconsole.log(\"It is the parent's method\");\n\t\t\t}\n\t\t},\n\t\tcomponents: {\n\t\t\tchildren2: {//这个无返回值，不会继续派发  \n\t\t\t\ttemplate: \"&lt;button&gt;&lt;slot name='first'&gt;&lt;/slot&gt;具名插槽，&lt;slot name='second'&gt;&lt;/slot&gt;&lt;/button&gt;\"\n\t\t\t}\n\t\t}\n\t});\n&lt;/script&gt;</code></pre>\n<h3>3、作用域slot</h3>\n<p>vue2.5版本中slot-scope取代了scope，来实现作用域插槽，主要用在组件调用中，具体在template标签上面使用slot-scope来获取插槽slot上面的属性值，获取值的为一个对象，slot-scope=”它可以取任意字符串”，在element-ui的组件中经常看到。</p>\n<pre><code class=\"language-javascript\">&lt;div id=\"app\"&gt;\n\t&lt;!-- 将数据传递给组件 --&gt;\n\t&lt;tb-list :data=\"data\"&gt;\n\t\t&lt;!-- 获取slot上面的值 --&gt;\n\t\t&lt;template slot-scope=\"scope\"&gt;\n\t\t\t&lt;p&gt;索引：{<!-- -->{JSON.stringify(scope)}}&lt;/p&gt;\n\t\t\t&lt;p&gt;索引：{<!-- -->{scope.$index}}&lt;/p&gt;\n\t\t\t&lt;p&gt;姓名:{<!-- -->{scope.row.name}}&lt;/p&gt;\n\t\t\t&lt;p&gt;年龄: {<!-- -->{scope.row.age}}&lt;/p&gt;\n\t\t\t&lt;p&gt;性别: {<!-- -->{scope.row.sex}}&lt;/p&gt;\n\t\t&lt;/template&gt;\n\t&lt;/tb-list&gt;\n&lt;/div&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n\tvar app = new Vue({\n\t\tel: '#app',\n\t\tdata: {\n\t\t\tdata: [{\n\t\t\t\tname: 'kongzhi1',\n\t\t\t\tage: '29',\n\t\t\t\tsex: 'man'\n\t\t\t}]\n\t\t},\n\t\tcomponents: {\n\t\t\t// 作用域slot\n\t\t\t'tb-list': {\n\t\t\t\ttemplate:\n\t\t\t\t`&lt;ul&gt;\n\t\t\t\t&lt;li v-for=\"(item, index) in data\"&gt;\n\t\t\t\t&lt;slot :row=\"item\" :$index=\"index\"&gt;&lt;/slot&gt;\n\t\t\t\t&lt;/li&gt;\n\t\t\t\t&lt;/ul&gt;`,\n\t\t\t\t// 获取值\n\t\t\t\tprops: ['data']\n\t\t\t}\n\t\t}\n\t});\n&lt;/script&gt;</code></pre>\n<h3>4、完整示例代码</h3>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset=\"UTF-8\"&gt;\n\t\t&lt;title&gt;Vue入门之slot&lt;/title&gt;\n\t\t&lt;script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"&gt;&lt;/script&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\t&lt;div id=\"app\"&gt;\n\t\t\t&lt;children1&gt;\n\t\t\t\t&lt;span&gt;12345&lt;/span&gt;\n\t\t\t&lt;/children1&gt;\n\t\t\t\n\t\t\t&lt;children2&gt;\n\t\t\t\t&lt;span slot=\"first\" @click=\"tobeknow\"&gt;12345&lt;/span&gt;\n\t\t\t\t&lt;span slot=\"second\"&gt;56789&lt;/span&gt;\n\t\t\t&lt;/children2&gt;\n\t\t\t\n\t\t\t&lt;!-- 将数据传递给组件 --&gt;\n\t\t\t&lt;tb-list :data=\"data\"&gt;\n\t\t\t\t&lt;!-- 获取slot上面的值 --&gt;\n\t\t\t\t&lt;template slot-scope=\"scope\"&gt;\n&lt;p&gt;索引：{<!-- -->{JSON.stringify(scope)}}&lt;/p&gt;\n&lt;p&gt;索引：{<!-- -->{scope.$index}}&lt;/p&gt;\n&lt;p&gt;姓名:{<!-- -->{scope.row.name}}&lt;/p&gt;\n&lt;p&gt;年龄: {<!-- -->{scope.row.age}}&lt;/p&gt;\n&lt;p&gt;性别: {<!-- -->{scope.row.sex}}&lt;/p&gt;\n\t\t\t\t&lt;/template&gt;\n\t\t\t&lt;/tb-list&gt;\n\t\t&lt;/div&gt;\n\t\t\n\t\t&lt;script type=\"text/javascript\"&gt;\n\t\t\tvar app = new Vue({\n\t\t\t\tel: '#app',\n\t\t\t\tdata: {\n\t\t\t\t\tdata: [{\n\t\t\t\t\t\tname: 'kongzhi1',\n\t\t\t\t\t\tage: '29',\n\t\t\t\t\t\tsex: 'man'\n\t\t\t\t\t}]\n\t\t\t\t},\n\t\t\t\tmethods: {\n\t\t\t\t\ttobeknow: function() {\n\t\t\t\t\t\tconsole.log(\"It is the parent's method\");\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcomponents: {\n\t\t\t\t\t// 单个slot\n\t\t\t\t\tchildren1: {\n\t\t\t\t\t\ttemplate: \"&lt;button&gt;&lt;slot&gt;&lt;/slot&gt;单个插槽&lt;/button&gt;\"\n\t\t\t\t\t},\n\t\t\t\t\t// 具名slot\n\t\t\t\t\tchildren2: {\n\t\t\t\t\t\ttemplate: \"&lt;button&gt;&lt;slot name='first'&gt;&lt;/slot&gt;具名插槽，&lt;slot name='second'&gt;&lt;/slot&gt;&lt;/button&gt;\"\n\t\t\t\t\t},\n\t\t\t\t\t// 作用域slot\n\t\t\t\t\t'tb-list': {\n\t\t\t\t\t\ttemplate: `&lt;ul&gt;\n\t\t\t\t\t\t&lt;li v-for=\"(item, index) in data\"&gt;\n\t\t\t\t\t\t&lt;slot :row=\"item\" :$index=\"index\"&gt;&lt;/slot&gt;\n\t\t\t&lt;/li&gt;\n\t\t\t&lt;/ul&gt;`,\n\t\t\t\t\t\t// 获取值\n\t\t\t\t\t\tprops: ['data']\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t&lt;/script&gt;\n\t&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n</div>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-08-21 01:02:00", "summary": "入门目录入门自定义指令、示例代码、调试步骤、参数说明、生命周期组件基础、组件注册、属性传值、父子组件、完整示例代码制作模板、选项模板、标签模板自定义指令中的自定义指令通过来实现，主要完成内置指令不能完"}