{"blogid": "126595869", "writerAge": "码龄2年", "writerBlogNum": "523", "writerCollect": "664", "writerComment": "30", "writerFan": "12333", "writerGrade": "6级", "writerIntegral": "5648", "writerName": "无薪法师", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126595869.jpg", "writerRankTotal": "2934", "writerRankWeekly": "586", "writerThumb": "80", "writerVisitNum": "257747", "blog_read_count": "407", "blog_time": "于 2022-08-30 07:42:54 发布", "blog_title": "110道Java初级面试题及答案（最新Java初级面试题大汇总）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>史上最全Java初中级面试题，发现网上很多Java初级面试题都没有答案，所以花了很长时间搜集整理出来了这套Java面试题大全，希望对大家有帮助哈~</p>\n<p>本人发现网上虽然有不少Java相关的面试题，但第一未必全，第二未必有答案，第三虽然有答案，但未必能在面试中说，所以在本文里，会不断收集各种面试题，并站在面试官的立场上，给出我自己的答案。</p>\n<p>如果不背 Java面试题的答案，肯定面试会挂！</p>\n<h2><a id=\"Java_8\"></a>这套Java面试题大全，希望对大家有帮助哈~</h2>\n<h2><a id=\"JavaPDFhttpslinkzhihucomtargethttps3AgiteecomsouyunkuDevBooksblobmasterdocsindexmd_JavaPDF_11\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/DevBooks/blob/master/docs/index.md\" title=\"博主已将以下这些面试题整理成了一个Java面试手册，是PDF版的\">博主已将以下这些面试题整理成了一个Java面试手册，是PDF版的</a></h2>\n<h3><a id=\"1Executorhttpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E525A425A725E5258525A825EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E725AD259425E625A1258825E525A425A725E625B1258725E6258025BB25EF25BC2589md23125E425B825BA25E425BB258025E425B9258825E425BD25BF25E7259425A8executor25E625A1258625E6259E25B6_1Executor_14\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%231%25E4%25B8%25BA%25E4%25BB%2580%25E4%25B9%2588%25E4%25BD%25BF%25E7%2594%25A8executor%25E6%25A1%2586%25E6%259E%25B6\" title=\"1、为什么使用Executor框架？\">1、为什么使用Executor框架？</a></h3>\n<p>**1、**每次执行任务创建线程 new Thread()比较消耗性能，创建一个线程是比较耗时、耗资源的。</p>\n<p>**2、**调用 new Thread()创建的线程缺乏管理，被称为野线程，而且可以无限制的创建，线程之间的相互竞争会导致过多占用系统资源而导致系统瘫痪，还有线程之间的频繁交替也会消耗很多系统资源。</p>\n<p>**3、**接使用new Thread() 启动的线程不利于扩展，比如定时执行、定期执行、定时定期执行、线程中断等都不便实现。</p>\n<h3><a id=\"2_GC_httpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E525A425A725E5258525A825EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E725AD259425E625A1258825E525A425A725E625B1258725E6258025BB25EF25BC2589md23225E425BD25A025E8258325BD25E425BF259D25E825AF2581gc25E6258925A725E825A1258C25E525902597_2_GC__22\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%232%25E4%25BD%25A0%25E8%2583%25BD%25E4%25BF%259D%25E8%25AF%2581-gc-%25E6%2589%25A7%25E8%25A1%258C%25E5%2590%2597\" title=\"2、你能保证 GC 执行吗？\">2、你能保证 GC 执行吗？</a></h3>\n<p>不能，虽然你可以调用 System.gc() 或者 Runtime.gc()，但是没有办法保证 GC的执行。</p>\n<h3><a id=\"3UMLhttpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E525A425A725E5258525A825EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E725AD259425E625A1258825E525A425A725E625B1258725E6258025BB25EF25BC2589md233uml25E425B825AD25E6259C258925E5259325AA25E425BA259B25E525B825B825E7259425A825E7259A258425E5259B25BE_3UML_26\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%233uml%25E4%25B8%25AD%25E6%259C%2589%25E5%2593%25AA%25E4%25BA%259B%25E5%25B8%25B8%25E7%2594%25A8%25E7%259A%2584%25E5%259B%25BE\" title=\"3、UML中有哪些常用的图？\">3、UML中有哪些常用的图？</a></h3>\n<p>UML定义了多种图形化的符号来描述软件系统部分或全部的静态结构和动态结构，包括：用例图（use case diagram）、类图（class diagram）、时序图（sequence diagram）、协作图（collaboration diagram）、状态图（statechart diagram）、活动图（activity diagram）、构件图（component diagram）、部署图（deployment diagram）等。在这些图形化符号中，有三种图最为重要，分别是：用例图（用来捕获需求，描述系统的功能，通过该图可以迅速的了解系统的功能模块及其关系）、类图（描述类以及类与类之间的关系，通过该图可以快速了解系统）、时序图（描述执行特定任务时对象之间的交互关系以及执行顺序，通过该图可以了解对象能接收的消息也就是说对象能够向外界提供的服务）。</p>\n<p>用例图：</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\e83d13b0a0cf2a14289412bd19f547bd.png\"/></p>\n<p>类图：</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\d27a254b0eb8e28edc4bb295336a3864.png\"/></p>\n<p>时序图：</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\b9d2e64b485f6be9f80053eec4efe5d1.png\"/></p>\n<h3><a id=\"4volatilehttpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E525A425A725E5258525A825EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E725AD259425E625A1258825E525A425A725E625B1258725E6258025BB25EF25BC2589md234volatile25E5258525B325E9259425AE25E525AD259725E7259A258425E5258E259F25E72590258625E6259825AF25E425BB258025E425B9258825E525B925B225E425BB258025E425B9258825E7259425A825E7259A2584_4volatile_42\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%234volatile%25E5%2585%25B3%25E9%2594%25AE%25E5%25AD%2597%25E7%259A%2584%25E5%258E%259F%25E7%2590%2586%25E6%2598%25AF%25E4%25BB%2580%25E4%25B9%2588%25E5%25B9%25B2%25E4%25BB%2580%25E4%25B9%2588%25E7%2594%25A8%25E7%259A%2584\" title=\"4、volatile关键字的原理是什么？干什么用的？\">4、volatile关键字的原理是什么？干什么用的？</a></h3>\n<p>使用了volatile关键字的变量，每当变量的值有变动的时候，都会将更改立即同步到主内存中；而如果某个线程想要使用这个变量，就先要从主存中刷新到工作内存，这样就确保了变量的可见性。</p>\n<p>一般使用一个volatile修饰的bool变量，来控制线程的运行状态。</p>\n<p>volatile boolean stop = false; void stop(){ this.stop = true; } void start(){ new Thread(()-&gt;{ while (!stop){ //sth } }).start(); }</p>\n<h3><a id=\"5synchronized__Lock_httpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E525A425A725E5258525A825EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E725AD259425E625A1258825E525A425A725E625B1258725E6258025BB25EF25BC2589md235synchronized25E52592258Clock25E6259C258925E425BB258025E425B9258825E5258C25BA25E5258825AB_5synchronized__Lock__50\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%235synchronized-%25E5%2592%258C-lock-%25E6%259C%2589%25E4%25BB%2580%25E4%25B9%2588%25E5%258C%25BA%25E5%2588%25AB\" title=\"5、synchronized 和 Lock 有什么区别？\">5、synchronized 和 Lock 有什么区别？</a></h3>\n<p>**1、**首先synchronized是Java内置关键字，在JVM层面，Lock是个Java类；</p>\n<p>**2、**synchronized 可以给类、方法、代码块加锁；而 lock 只能给代码块加锁。</p>\n<p>**3、**synchronized 不需要手动获取锁和释放锁，使用简单，发生异常会自动释放锁，不会造成死锁；而 lock 需要自己加锁和释放锁，如果使用不当没有 unLock()去释放锁就会造成死锁。</p>\n<p>**4、**通过 Lock 可以知道有没有成功获取锁，而 synchronized 却无法办到。</p>\n<h3><a id=\"6httpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E525A425A725E5258525A825EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E725AD259425E625A1258825E525A425A725E625B1258725E6258025BB25EF25BC2589md23625E6258A25BD25E825B125A125E725B125BB25E525BF258525E925A125BB25E825A6258125E6259C258925E6258A25BD25E825B125A125E6259625B925E625B3259525E525902597_6_60\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%236%25E6%258A%25BD%25E8%25B1%25A1%25E7%25B1%25BB%25E5%25BF%2585%25E9%25A1%25BB%25E8%25A6%2581%25E6%259C%2589%25E6%258A%25BD%25E8%25B1%25A1%25E6%2596%25B9%25E6%25B3%2595%25E5%2590%2597\" title=\"6、抽象类必须要有抽象方法吗\">6、抽象类必须要有抽象方法吗</a></h3>\n<p>不是必须。抽象类可以没有抽象方法。</p>\n<h3><a id=\"7httpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E525A425A725E5258525A825EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E725AD259425E625A1258825E525A425A725E625B1258725E6258025BB25EF25BC2589md23725E525BC25BA25E525BC259525E7259425A825E825BD25AF25E525BC259525E7259425A825E525BC25B125E525BC259525E7259425A825E82599259A25E525BC259525E7259425A825E6259825AF25E425BB258025E425B9258825E6259C258925E425BB258025E425B9258825E5258C25BA25E5258825AB_7_64\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%237%25E5%25BC%25BA%25E5%25BC%2595%25E7%2594%25A8%25E8%25BD%25AF%25E5%25BC%2595%25E7%2594%25A8%25E5%25BC%25B1%25E5%25BC%2595%25E7%2594%25A8%25E8%2599%259A%25E5%25BC%2595%25E7%2594%25A8%25E6%2598%25AF%25E4%25BB%2580%25E4%25B9%2588%25E6%259C%2589%25E4%25BB%2580%25E4%25B9%2588%25E5%258C%25BA%25E5%2588%25AB\" title=\"7、强引用、软引用、弱引用、虚引用是什么，有什么区别？\">7、强引用、软引用、弱引用、虚引用是什么，有什么区别？</a></h3>\n<p>**1、**强引用，就是普通的对象引用关系，如 String s = new String(“ConstXiong”)</p>\n<p>**2、**软引用，用于维护一些可有可无的对象。只有在内存不足时，系统则会回收软引用对象，如果回收了软引用对象之后仍然没有足够的内存，才会抛出内存溢出异常。SoftReference 实现</p>\n<p>**3、**弱引用，相比软引用来说，要更加无用一些，它拥有更短的生命周期，当 JVM 进行垃圾回收时，无论内存是否充足，都会回收被弱引用关联的对象。WeakReference 实现</p>\n<p>**4、**虚引用是一种形同虚设的引用，在现实场景中用的不是很多，它主要用来跟踪对象被垃圾回收的活动。PhantomReference 实现</p>\n<h3><a id=\"8Servlethttpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E525A425A725E5258525A825EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E725AD259425E625A1258825E525A425A725E625B1258725E6258025BB25EF25BC2589md238servlet25E7259A258425E72594259F25E5259125BD25E5259125A825E6259C259F_8Servlet_74\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%238servlet%25E7%259A%2584%25E7%2594%259F%25E5%2591%25BD%25E5%2591%25A8%25E6%259C%259F\" title=\"8、Servlet的生命周期？\">8、Servlet的生命周期？</a></h3>\n<p>**1、**加载：判断servlet实例是否存在，如果不存在，就加载serlvet</p>\n<p>**2、**实例化：</p>\n<p>**3、**初始化</p>\n<p>4、服务</p>\n<p>5、销毁</p>\n<h3><a id=\"9Hibernatehttpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E525A425A725E5258525A825EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E725AD259425E625A1258825E525A425A725E625B1258725E6258025BB25EF25BC2589md239hibernate25E7259A258425E525AF25B925E825B125A125E6259C258925E5258725A025E725A7258D25E7258A25B625E625802581_9Hibernate_86\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%239hibernate%25E7%259A%2584%25E5%25AF%25B9%25E8%25B1%25A1%25E6%259C%2589%25E5%2587%25A0%25E7%25A7%258D%25E7%258A%25B6%25E6%2580%2581\" title=\"9、Hibernate的对象有几种状态\">9、Hibernate的对象有几种状态</a></h3>\n<p>**1、**瞬时态（transient）</p>\n<p>**2、**持久态（persistent）</p>\n<p>**3、**游离态（detached）</p>\n<h3><a id=\"10HashMaphttpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E525A425A725E5258525A825EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E725AD259425E625A1258825E525A425A725E625B1258725E6258025BB25EF25BC2589md231025E825AF25B425E425B8258025E425B8258Bhashmap25E7259A258425E525AE259E25E7258E25B025E5258E259F25E725902586_10HashMap_94\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%2310%25E8%25AF%25B4%25E4%25B8%2580%25E4%25B8%258Bhashmap%25E7%259A%2584%25E5%25AE%259E%25E7%258E%25B0%25E5%258E%259F%25E7%2590%2586\" title=\"10、说一下HashMap的实现原理？\">10、说一下HashMap的实现原理？</a></h3>\n<p>**1、**HashMap概述： HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。</p>\n<p>**2、**HashMap的数据结构： 在Java编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，HashMap也不例外。HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体。</p>\n<p><strong>HashMap 基于 Hash 算法实现的</strong></p>\n<p>**1、**当我们往HashMap中put元素时，利用key的hashCode重新hash计算出当前对象的元素在数组中的下标</p>\n<p>**2、**存储时，如果出现hash值相同的key，此时有两种情况。</p>\n<p>(1)如果key相同，则覆盖原始值；</p>\n<p>(2)如果key不同（出现冲突），则将当前的key-value放入链表中</p>\n<p>**3、**获取时，直接找到hash值对应的下标，在进一步判断key是否相同，从而找到对应值。</p>\n<p>**4、**理解了以上过程就不难明白HashMap是如何解决hash冲突的问题，核心就是使用了数组的存储方式，然后将冲突的key的对象放入链表中，一旦发现冲突就在链表中做进一步的对比。</p>\n<p>需要注意Jdk 1.8中对HashMap的实现做了优化，当链表中的节点数据超过八个之后，该链表会转为红黑树来提高查询效率，从原来的O(n)到O(logn)</p>\n<h3><a id=\"1javahttpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E6259525B425E72590258625EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E725AD259425E625A1258825E525A425A725E625B1258725E6258025BB25EF25BC2589md231java25E425B825AD25E6259C258925E5258725A025E725A7258D25E6259625B925E625B3259525E5258F25AF25E425BB25A525E525AE259E25E7258E25B025E425B8258025E425B825AA25E725BA25BF25E725A8258B_1java_116\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%231java%25E4%25B8%25AD%25E6%259C%2589%25E5%2587%25A0%25E7%25A7%258D%25E6%2596%25B9%25E6%25B3%2595%25E5%258F%25AF%25E4%25BB%25A5%25E5%25AE%259E%25E7%258E%25B0%25E4%25B8%2580%25E4%25B8%25AA%25E7%25BA%25BF%25E7%25A8%258B\" title=\"1、java中有几种方法可以实现一个线程？\">1、java中有几种方法可以实现一个线程？</a></h3>\n<p>继承 Thread 类</p>\n<p>实现 Runnable 接口</p>\n<p>实现 Callable 接口，需要实现的是 call() 方法</p>\n<h3><a id=\"2Java__HashSethttpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E6259525B425E72590258625EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E725AD259425E625A1258825E525A425A725E625B1258725E6258025BB25EF25BC2589md232java25E425B825AD25E7259A2584hashset25E52586258525E9258325A825E6259825AF25E525A6258225E425BD259525E525B725A525E425BD259C25E7259A2584_2Java__HashSet_124\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%232java-%25E4%25B8%25AD%25E7%259A%2584-hashset%25E5%2586%2585%25E9%2583%25A8%25E6%2598%25AF%25E5%25A6%2582%25E4%25BD%2595%25E5%25B7%25A5%25E4%25BD%259C%25E7%259A%2584\" title=\"2、Java 中的 HashSet，内部是如何工作的？\">2、Java 中的 HashSet，内部是如何工作的？</a></h3>\n<p>HashSet 的内部采用 HashMap来实现。由于 Map 需要 key 和 value，所以所有 key 的都有一个默认 value。类似于 HashMap，HashSet 不允许重复的 key，只允许有一个null key，意思就是 HashSet 中只允许存储一个 null 对象。</p>\n<h3><a id=\"3reduxhttpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E6259525B425E72590258625EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E725AD259425E625A1258825E525A425A725E625B1258725E6258025BB25EF25BC2589md233redux25E7259A258425E525B725A525E425BD259C25E625B5258125E725A8258B_3redux_128\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%233redux%25E7%259A%2584%25E5%25B7%25A5%25E4%25BD%259C%25E6%25B5%2581%25E7%25A8%258B\" title=\"3、redux的工作流程\">3、redux的工作流程?</a></h3>\n<p><strong>首先，我们看下几个核心概念：</strong></p>\n<p>**1、**Store：保存数据的地方，你可以把它看成一个容器，整个应用只能有一个Store。</p>\n<p>**2、**State：Store对象包含所有数据，如果想得到某个时点的数据，就要对Store生成快照，这种时点的数据集合，就叫做State。</p>\n<p>**3、**Action：State的变化，会导致View的变化。但是，用户接触不到State，只能接触到View。所以，State的变化必须是View导致的。Action就是View发出的通知，表示State应该要发生变化了。</p>\n<p>**4、**Action Creator：View要发送多少种消息，就会有多少种Action。如果都手写，会很麻烦，所以我们定义一个函数来生成Action，这个函数就叫Action Creator。</p>\n<p>**5、**Reducer：Store收到Action以后，必须给出一个新的State，这样View才会发生变化。这种State的计算过程就叫做Reducer。Reducer是一个函数，它接受Action和当前State作为参数，返回一个新的State。</p>\n<p>**6、**dispatch：是View发出Action的唯一方法。</p>\n<p><strong>然后我们过下整个工作流程：</strong></p>\n<p>**1、**首先，用户（通过View）发出Action，发出方式就用到了dispatch方法。</p>\n<p>**2、**然后，Store自动调用Reducer，并且传入两个参数：当前State和收到的Action，Reducer会返回新的State</p>\n<p>**3、**State一旦有变化，Store就会调用监听函数，来更新View。</p>\n<p>到这儿为止，一次用户交互流程结束。可以看到，在整个流程中数据都是单向流动的，这种方式保证了流程的清晰。</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\9c3ff73f39373ebc9d7d5bfdf9dadf85.png\"/></p>\n<blockquote>\n<p><a href=\"https://link.zhihu.com/target=https%3A//github.com/xiaomuzhu/front-end-interview/blob/master/docs/guide/redux.md\" title=\"redux原理详解\">redux原理详解</a></p>\n</blockquote>\n<h3><a id=\"4Stringhttpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E6259525B425E72590258625EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E725AD259425E625A1258825E525A425A725E625B1258725E6258025BB25EF25BC2589md234string25E725B125BB25E7259A258425E525B825B825E7259425A825E6259625B925E625B3259525E6259C258925E9258225A325E425BA259B_4String_158\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%234string%25E7%25B1%25BB%25E7%259A%2584%25E5%25B8%25B8%25E7%2594%25A8%25E6%2596%25B9%25E6%25B3%2595%25E6%259C%2589%25E9%2582%25A3%25E4%25BA%259B\" title=\"4、String类的常用方法有那些？\">4、String类的常用方法有那些？</a></h3>\n<p>**1、**charAt：返回指定索引处的字符</p>\n<p>**2、**indexOf()：返回指定字符的索引</p>\n<p>**3、**replace()：字符串替换</p>\n<p>**4、**trim()：去除字符串两端空白</p>\n<p>**5、**split()：分割字符串，返回一个分割后的字符串数组</p>\n<p>**6、**getBytes()：返回字符串的byte类型数组</p>\n<p>**7、**length()：返回字符串长度</p>\n<p>**8、**toLowerCase()：将字符串转成小写字母</p>\n<p>**9、**toUpperCase()：将字符串转成大写字符</p>\n<p>**10、**substring()：截取字符串</p>\n<p>**11、**format()：格式化字符串</p>\n<p>**12、**equals()：字符串比较</p>\n<h3><a id=\"5OOMhttpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E6259525B425E72590258625EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E725AD259425E625A1258825E525A425A725E625B1258725E6258025BB25EF25BC2589md23525E825AF25B725E425BD25A025E825B0258825E825B0258825E525AF25B9oom25E7259A258425E825AE25A425E825AF2586_5OOM_184\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%235%25E8%25AF%25B7%25E4%25BD%25A0%25E8%25B0%2588%25E8%25B0%2588%25E5%25AF%25B9oom%25E7%259A%2584%25E8%25AE%25A4%25E8%25AF%2586\" title=\"5、请你谈谈对OOM的认识\">5、请你谈谈对OOM的认识</a></h3>\n<p>OOM是非常严重的问题，除了<code>程序计数器</code>，其他内存区域都有溢出的风险。和我们平常工作最密切的，就是堆溢出。另外，元空间在方法区内容非常多的情况下也会溢出。还有就是栈溢出，这个通常影响比较小。堆外也有溢出的可能，这个就比较难排查一些。</p>\n<h3><a id=\"6ParNew_Serialhttpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E6259525B425E72590258625EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E725AD259425E625A1258825E525A425A725E625B1258725E6258025BB25EF25BC2589md236parnew25E5259E258325E5259C25BE25E6259425B625E9259B258625E5259925A8serial2B25E525A4259A25E725BA25BF25E725A8258B_6ParNew_Serial_188\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%236parnew-%25E5%259E%2583%25E5%259C%25BE%25E6%2594%25B6%25E9%259B%2586%25E5%2599%25A8serial%2B%25E5%25A4%259A%25E7%25BA%25BF%25E7%25A8%258B\" title=\"6、ParNew 垃圾收集器（Serial+多线程）\">6、ParNew 垃圾收集器（Serial+多线程）</a></h3>\n<p>ParNew 垃圾收集器其实是 Serial 收集器的多线程版本，也使用复制算法，除了使用多线程进行垃圾收集之外，其余的行为和 Serial 收集器完全一样， ParNew 垃圾收集器在垃圾收集过程中同样也要暂停所有其他的工作线程。</p>\n<p>ParNew 收集器默认开启和 CPU 数目相同的线程数，可以通过-XX:ParallelGCThreads 参数来限制垃圾收集器的线程数。【Parallel：平行的】</p>\n<p>ParNew 虽然是除了多线程外和Serial 收集器几乎完全一样，但是ParNew垃圾收集器是很多 java虚拟机运行在 Server 模式下新生代的默认垃圾收集器。</p>\n<h3><a id=\"7Java__ddMMyyyy_httpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E6259525B425E72590258625EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E725AD259425E625A1258825E525A425A725E625B1258725E6258025BB25EF25BC2589md237java25E425B825AD25E525A6258225E425BD259525E625A025BC25E525BC258F25E5258C259625E425B8258025E425B825AA25E6259725A525E6259C259F25E525A6258225E625A025BC25E525BC258F25E5258C259625E425B825BAddmmyyyy25E7259A258425E525BD25A225E525BC258F_7Java__ddMMyyyy__196\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%237java-%25E4%25B8%25AD%25E5%25A6%2582%25E4%25BD%2595%25E6%25A0%25BC%25E5%25BC%258F%25E5%258C%2596%25E4%25B8%2580%25E4%25B8%25AA%25E6%2597%25A5%25E6%259C%259F%25E5%25A6%2582%25E6%25A0%25BC%25E5%25BC%258F%25E5%258C%2596%25E4%25B8%25BA-ddmmyyyy-%25E7%259A%2584%25E5%25BD%25A2%25E5%25BC%258F\" title=\"7、Java 中如何格式化一个日期？如格式化为 ddMMyyyy 的形式？\">7、Java 中如何格式化一个日期？如格式化为 ddMMyyyy 的形式？</a></h3>\n<p><a href=\"https://link.zhihu.com/target=http%3A//javarevisited.blogspot.com/2011/09/convert-date-to-string-simpledateformat.html\" title=\"http://javarevisited.blogspot.com/2011/09/convert-date-to-string-simpledateformat.html\">http://javarevisited.blogspot.com/2011/09/convert-date-to-string-simpledateformat.html</a></p>\n<p>Java 中，可以使用 SimpleDateFormat 类或者 joda-time 库来格式日期。DateFormat 类允许你使用多种流行的格式来格式化日期。参见中的示例代码，代码中演示了将日期格式化成不同的格式，如 dd-MM-yyyy 或 ddMMyyyy。</p>\n<h3><a id=\"8Javahttpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E6259525B425E72590258625EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E725AD259425E625A1258825E525A425A725E625B1258725E6258025BB25EF25BC2589md23825E425BB258025E425B9258825E6259825AFjava25E82599259A25E6258B259F25E6259C25BA_8Java_202\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%238%25E4%25BB%2580%25E4%25B9%2588%25E6%2598%25AFjava%25E8%2599%259A%25E6%258B%259F%25E6%259C%25BA\" title=\"8、什么是Java虚拟机\">8、什么是Java虚拟机</a></h3>\n<p>任何一种可以运行Java字节码的软件均可看成是Java的虚拟机（JVM）</p>\n<h3><a id=\"9Java_httpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E6259525B425E72590258625EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E725AD259425E625A1258825E525A425A725E625B1258725E6258025BB25EF25BC2589md239java25E425B825AD25E7259A258425E52590258C25E625AD25A525E9259B258625E52590258825E425B8258E25E525B925B625E5258F259125E9259B258625E52590258825E6259C258925E425BB258025E425B9258825E5258C25BA25E5258825AB_9Java__206\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%239java-%25E4%25B8%25AD%25E7%259A%2584%25E5%2590%258C%25E6%25AD%25A5%25E9%259B%2586%25E5%2590%2588%25E4%25B8%258E%25E5%25B9%25B6%25E5%258F%2591%25E9%259B%2586%25E5%2590%2588%25E6%259C%2589%25E4%25BB%2580%25E4%25B9%2588%25E5%258C%25BA%25E5%2588%25AB\" title=\"9、Java 中的同步集合与并发集合有什么区别？\">9、Java 中的同步集合与并发集合有什么区别？</a></h3>\n<p>同步集合与并发集合都为多线程和并发提供了合适的线程安全的集合，不过并发集合的可扩展性更高。在 Java1.5 之前程序员们只有同步集合来用且在多线程并发的时候会导致争用，阻碍了系统的扩展性。Java5 介绍了并发集合像ConcurrentHashMap，不仅提供线程安全还用锁分离和内部分区等现代技术提高了可扩展性。</p>\n<h3><a id=\"10httpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E6259525B425E72590258625EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E725AD259425E625A1258825E525A425A725E625B1258725E6258025BB25EF25BC2589md231025E92580258225E92585258D25E5259925A825E625A825A125E525BC258F25E52592258C25E425BB25A325E72590258625E625A825A125E525BC258F25E425B9258B25E52589258D25E6259C258925E425BB258025E425B9258825E425B8258D25E52590258C_10_210\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%2310%25E9%2580%2582%25E9%2585%258D%25E5%2599%25A8%25E6%25A8%25A1%25E5%25BC%258F%25E5%2592%258C%25E4%25BB%25A3%25E7%2590%2586%25E6%25A8%25A1%25E5%25BC%258F%25E4%25B9%258B%25E5%2589%258D%25E6%259C%2589%25E4%25BB%2580%25E4%25B9%2588%25E4%25B8%258D%25E5%2590%258C\" title=\"10、适配器模式和代理模式之前有什么不同？\">10、适配器模式和代理模式之前有什么不同？</a></h3>\n<p>这个问题与前面的类似，适配器模式和代理模式的区别在于他们的意图不同。由于适配器模式和代理模式都是封装真正执行动作的类，因此结构是一致的，但是适配器模式用于接口之间的转换，而代理模式则是增加一个额外的中间层，以便支持分配、控制或智能访问。</p>\n<h3><a id=\"1G1httpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E625B1258725E6258025BB25EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E725AD259425E625A1258825E525A425A725E5258525A825EF25BC2589md23125E825AF25B425E825AF25B4g125E5259E258325E5259C25BE25E6259425B625E9259B258625E5259925A825E7259A258425E525B725A525E425BD259C25E5258E259F25E725902586_1G1_214\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%231%25E8%25AF%25B4%25E8%25AF%25B4g1%25E5%259E%2583%25E5%259C%25BE%25E6%2594%25B6%25E9%259B%2586%25E5%2599%25A8%25E7%259A%2584%25E5%25B7%25A5%25E4%25BD%259C%25E5%258E%259F%25E7%2590%2586\" title=\"1、说说G1垃圾收集器的工作原理\">1、说说G1垃圾收集器的工作原理</a></h3>\n<p>优点：指定最大停顿时间、分Region的内存布局、按收益动态确定回收集</p>\n<p>**1、**G1开创的基于Region的堆内存布局是它能够实现这个目标的关键。虽然G1也仍是遵循分代收集理论设计的，但其堆内存的布局与其他收集器有非常明显的差异：G1不再坚持固定大小以及固定数量的分代区域划分，而是把连续的Java堆划分为多个大小相等的独立区域（Region），每一个Region都可以根据需要，扮演新生代的Eden空间、Survivor空间，或者老年代空间。收集器能够对扮演不同角色的Region采用不同的策略去处理，这样无论是新创建的对象还是已经存活了一段时间、熬过多次收集的旧对象都能获取很好的收集效果。</p>\n<p>**2、**虽然G1仍然保留新生代和老年代的概念，但新生代和老年代不再是固定的了，它们都是一系列区域（不需要连续）的动态集合。G1收集器之所以能建立可预测的停顿时间模型，是因为它将Region作为单次回收的最小单元，即每次收集到的内存空间都是Region大小的整数倍，这样可以有计划地避免在整个Java堆中进行全区域的垃圾收集。更具体的处理思路是让G1收集器去跟踪各个Region里面的垃圾堆积的“价值”大小，价值即回收所获得的空间大小以及回收所需时间的经验值，然后在后台维护一个优先级列表，每次根据用户设定允许的收集停顿时间（使用参数-XX：MaxGCPauseMillis指定，默认值是200毫秒），优先处理回收价值收益最大的那些Region，这也就是“Garbage First”名字的由来。这种使用Region划分内存空间，以及具有优先级的区域回收方式，保证了G1收集器在有限的时间内获取尽可能高的收集效率。</p>\n<p>**3、**G1收集器的运作过程大致可划分为以下四个步骤：·初始标记 （Initial Marking）：仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS指针的值，让下一阶段用户线程并发运行时，能正确地在可用的Region中分配新对象。这个阶段需要停顿线程，但耗时很短，而且是借用进行Minor GC的时候同步完成的，所以G1收集器在这个阶段实际并没有额外的停顿。·并发标记 （Concurrent Marking）：从GC Root开始对堆中对象进行可达性分析，递归扫描整个堆里的对象图，找出要回收的对象，这阶段耗时较长，但可与用户程序并发执行。当对象图扫描完成以后，还要重新处理SATB记录下的在并发时有引用变动的对象。·最终标记 （Final Marking）：对用户线程做另一个短暂的暂停，用于处理并发阶段结束后仍遗留下来的最后那少量的SATB记录。·筛选回收 （Live Data Counting and Evacuation）：负责更新Region的统计数据，对各个Region的回收价值和成本进行排序，根据用户所期望的停顿时间来制定回收计划，可以自由选择任意多个Region构成回收集，然后把决定回收的那一部分Region的存活对象复制到空的Region中，再清理掉整个旧Region的全部空间。这里的操作涉及存活对象的移动，是必须暂停用户线程，由多条收集器线程并行完成的。从上述阶段的描述可以看出，G1收集器除了并发标记外，其余阶段也是要完全暂停用户线程的 。</p>\n<h3><a id=\"2JREJDKJVM__JIT_httpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E625B1258725E6258025BB25EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E725AD259425E625A1258825E525A425A725E5258525A825EF25BC2589md232jrejdkjvm25E5258F258Ajit25E425B9258B25E9259725B425E6259C258925E425BB258025E425B9258825E425B8258D25E52590258C_2JREJDKJVM__JIT__224\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%232jrejdkjvm-%25E5%258F%258A-jit-%25E4%25B9%258B%25E9%2597%25B4%25E6%259C%2589%25E4%25BB%2580%25E4%25B9%2588%25E4%25B8%258D%25E5%2590%258C\" title=\"2、JRE、JDK、JVM 及 JIT 之间有什么不同？\">2、JRE、JDK、JVM 及 JIT 之间有什么不同？</a></h3>\n<p>JRE 代表 Java 运行时（Java run-time），是运行 Java 引用所必须的。JDK 代表 Java 开发工具（Java development kit），是 Java 程序的开发工具，如 Java编译器，它也包含 JRE。JVM 代表 Java 虚拟机（Java virtual machine），它的责任是运行 Java 应用。JIT 代表即时编译（Just In Time compilation），当代码执行的次数超过一定的阈值时，会将 Java 字节码转换为本地代码，如，主要的热点代码会被准换为本地代码，这样有利大幅度提高 Java 应用的性能。</p>\n<h3><a id=\"3httpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E625B1258725E6258025BB25EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E725AD259425E625A1258825E525A425A725E5258525A825EF25BC2589mda><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%233%25E5%25BD%2593%25E7%2588%25B6%25E7%25B1%25BB%25E5%25BC%2595%25E7%2594%25A8%25E6%258C%2587%25E5%2590%2591%25E5%25AD%2590%25E7%25B1%25BB%25E5%25AF%25B9%25E8%25B1%25A1%25E7%259A%2584%25E6%2597%25B6%25E5%2580%2599%25E5%25AD%2590%25E7%25B1%25BB%25E9%2587%258D%25E5%2586%2599%25E4%25BA%2586%25E7%2588%25B6%25E7%25B1%25BB%25E6%2596%25B9%25E6%25B3%2595%25E5%2592%258C%25E5%25B1%259E%25E6%2580%25A7%25E9%2582%25A3%25E4%25B9%2588%25E5%25BD%2593%25E8%25AE%25BF%25E9%2597%25AE%25E5%25B1%259E%25E6%2580%25A7%25E7%259A%2584%25E6%2597%25B6%25E5%2580%2599%25E8%25AE%25BF%25E9%2597%25AE%25E6%2598%25AF%25E8%25B0%2581%25E7%259A%2584%25E5%25B1%259E%25E6%2580%25A7%25E8%25B0%2583%25E7%2594%25A8%25E6%2596%25B9%25E6%25B3%2595%25E6%2597%25B6%25E8%25B0%2583%25E7%2594%25A8%25E7%259A%2584%25E6%2598%25AF%25E8%25B0%2581%25E7%259A%2584%25E6%2596%25B9%25E6%25B3%2595\" title=\"3、当父类引用指向子类对象的时候，子类重写了父类方法和属性，那么当访问属性的时候，访问是谁的属性？调用方法时，调用的是谁的方法？\">3、当父类引用指向子类对象的时候，子类重写了父类方法和属性，那么当访问属性的时候，访问是谁的属性？调用方法时，调用的是谁的方法？</a></h3>\n<p>子类重写了父类方法和属性，访问的是父类的属性，调用的是子类的方法</p>\n<h3><a id=\"4httpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E625B1258725E6258025BB25EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E725AD259425E625A1258825E525A425A725E5258525A825EF25BC2589md23425E525A0258625E625BA25A225E5258725BA25E7259A258425E5258E259F25E5259B25A0_4_232\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%234%25E5%25A0%2586%25E6%25BA%25A2%25E5%2587%25BA%25E7%259A%2584%25E5%258E%259F%25E5%259B%25A0\" title=\"4、堆溢出的原因？\">4、堆溢出的原因？</a></h3>\n<p>堆用于存储对象实例，只要不断创建对象并保证 GC Roots 到对象有可达路径避免垃圾回收，随着对象数量的增加，总容量触及最大堆容量后就会 OOM，例如在 while 死循环中一直 new 创建实例。</p>\n<p>堆 OOM 是实际应用中最常见的 OOM，处理方法是通过内存映像分析工具对 Dump 出的堆转储快照分析，确认内存中导致 OOM 的对象是否必要，分清到底是内存泄漏还是内存溢出。</p>\n<p>如果是内存泄漏，通过工具查看泄漏对象到 GC Roots 的引用链，找到泄露对象是通过怎样的引用路径、与哪些 GC Roots 关联才导致无法回收，一般可以准确定位到产生内存泄漏代码的具***置。</p>\n<p>如果不是内存泄漏，即内存中对象都必须存活，应当检查 JVM 堆参数，与机器内存相比是否还有向上调整的空间。再从代码检查是否存在某些对象生命周期过长、持有状态时间过长、存储结构设计不合理等情况，尽量减少程序运行期的内存消耗。</p>\n<h3><a id=\"5_runnable__callable_httpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E625B1258725E6258025BB25EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E725AD259425E625A1258825E525A425A725E5258525A825EF25BC2589md23525E825AF25B425E425B8258025E425B8258Brunnable25E52592258Ccallable25E6259C258925E425BB258025E425B9258825E5258C25BA25E5258825AB_5_runnable__callable__242\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%235%25E8%25AF%25B4%25E4%25B8%2580%25E4%25B8%258B-runnable-%25E5%2592%258C-callable-%25E6%259C%2589%25E4%25BB%2580%25E4%25B9%2588%25E5%258C%25BA%25E5%2588%25AB\" title=\"5、说一下 runnable 和 callable 有什么区别\">5、说一下 runnable 和 callable 有什么区别</a></h3>\n<p><strong>相同点：</strong></p>\n<p>**1、**都是接口</p>\n<p>**2、**都可以编写多线程程序</p>\n<p>**3、**都采用Thread.start()启动线程</p>\n<p><strong>主要区别：</strong></p>\n<p>Runnable 接口 run 方法无返回值；Callable 接口 call 方法有返回值，是个泛型，和Future、FutureTask配合可以用来获取异步执行的结果</p>\n<p>Runnable 接口 run 方法只能抛出运行时异常，且无法捕获处理；Callable 接口 call 方法允许抛出异常，可以获取异常信息 注：Callalbe接口支持返回执行结果，需要调用FutureTask.get()得到，此方法会阻塞主进程的继续往下执行，如果不调用不会阻塞。</p>\n<h3><a id=\"6JVM_httpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E625B1258725E6258025BB25EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E725AD259425E625A1258825E525A425A725E5258525A825EF25BC2589md236jvm25E725B125BB25E5258A25A025E825BD25BD25E6259C25BA25E5258825B6_6JVM__258\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%236jvm-%25E7%25B1%25BB%25E5%258A%25A0%25E8%25BD%25BD%25E6%259C%25BA%25E5%2588%25B6\" title=\"6、JVM 类加载机制\">6、JVM 类加载机制</a></h3>\n<p>JVM 类加载机制分为五个部分：加载，验证，准备，解析，初始化。</p>\n<p><strong>加载</strong></p>\n<p>加载是类加载过程中的一个阶段， 这个阶段会在内存中生成一个代表这个类的 java.lang.Class 对象， 作为方法区这个类的各种数据的入口。注意这里不一定非得要从一个 Class 文件获取，这里既可以从 ZIP 包中读取（比如从 jar 包和 war 包中读取），也可以在运行时计算生成（动态代理），也可以由其它文件生成（比如将 JSP 文件转换成对应的 Class 类）。</p>\n<p><strong>验证</strong></p>\n<p>这一阶段的主要目的是为了确保 Class 文件的字节流中包含的信息是否符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p>\n<p><strong>准备</strong></p>\n<p>准备阶段是正式为类变量分配内存并设置类变量的初始值阶段，即在方法区中分配这些变量所使用的内存空间。注意这里所说的初始值概念，比如一个类变量定义为：</p>\n<p>实际上变量 v 在准备阶段过后的初始值为 0 而不是 8080， 将 v 赋值为 8080 的 put static 指令是程序被编译后， 存放于类构造器方法之中。</p>\n<p><strong>但是注意如果声明为：</strong></p>\n<p>public static final int v = 8080;</p>\n<p>在编译阶段会为 v 生成 ConstantValue 属性，在准备阶段虚拟机会根据 ConstantValue 属性将 v赋值为 8080。</p>\n<p><strong>解析</strong></p>\n<p>解析阶段是指虚拟机将常量池中的符号引用替换为直接引用的过程。符号引用就是 class 文件中的</p>\n<p>public static int v = 8080;</p>\n<p>实际上变量 v 在准备阶段过后的初始值为 0 而不是 8080， 将 v 赋值为 8080 的 put static 指令是程序被编译后， 存放于类构造器方法之中。但是注意如果声明为：</p>\n<p>在编译阶段会为 v 生成 ConstantValue 属性，在准备阶段虚拟机会根据 ConstantValue 属性将 v赋值为 8080。</p>\n<p><strong>解析</strong></p>\n<p>解析阶段是指虚拟机将常量池中的符号引用替换为直接引用的过程。符号引用就是 class 文件中的</p>\n<p>public static final int v = 8080;</p>\n<p>在编译阶段会为 v 生成 ConstantValue 属性，在准备阶段虚拟机会根据 ConstantValue 属性将 v赋值为 8080。</p>\n<p><strong>解析</strong></p>\n<p>解析阶段是指虚拟机将常量池中的符号引用替换为直接引用的过程。符号引用就是 class 文件中的：</p>\n<p>**1、**CONSTANT_Class_info</p>\n<p>**2、**CONSTANT_Field_info</p>\n<p>**3、**CONSTANT_Method_info</p>\n<p>等类型的常量。</p>\n<p><strong>符号引用</strong></p>\n<p>符号引用与虚拟机实现的布局无关， 引用的目标并不一定要已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须是一致的，因为符号引用的字面量形式明确定义在 Java 虚拟机规范的 Class 文件格式中。</p>\n<p><strong>直接引用</strong></p>\n<p>直接引用可以是指向目标的指针，相对偏移量或是一个能间接定位到目标的句柄。如果有了直接引用，那引用的目标必定已经在内存中存在。</p>\n<p><strong>初始化</strong></p>\n<p>初始化阶段是类加载最后一个阶段，前面的类加载阶段之后，除了在加载阶段可以自定义类加载器以外，其它操作都由 JVM 主导。到了初始阶段，才开始真正执行类中定义的 Java 程序代码。</p>\n<p><strong>类构造器</strong></p>\n<p>初始化阶段是执行类构造器方法的过程。方法是由编译器自动收集类中的类变量的赋值操作和静态语句块中的语句合并而成的。虚拟机会保证子方法执行之前，父类的方法已经执行完毕， 如果一个类中没有对静态变量赋值也没有静态语句块，那么编译器可以不为这个类生成()方法。</p>\n<p><strong>注意以下几种情况不会执行类初始化：</strong></p>\n<p>**1、**通过子类引用父类的静态字段，只会触发父类的初始化，而不会触发子类的初始化。</p>\n<p>**2、**定义对象数组，不会触发该类的初始化。</p>\n<p>**3、**常量在编译期间会存入调用类的常量池中，本质上并没有直接引用定义常量的类，不会触发定义常量所在的类。</p>\n<p>**4、**通过类名获取 Class 对象，不会触发类的初始化。</p>\n<p>**5、**通过 Class.forName 加载指定类时，如果指定参数 initialize 为 false 时，也不会触发类初始化，其实这个参数是告诉虚拟机，是否要对类进行初始化。</p>\n<p>**6、**通过 ClassLoader 默认的 loadClass 方法，也不会触发初始化动作。</p>\n<h3><a id=\"7httpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E625B1258725E6258025BB25EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E725AD259425E625A1258825E525A425A725E5258525A825EF25BC2589md23725E62580258E25E425B9258825E62589259325E725A025B425E5258F258C25E425BA25B225E525A7259425E625B425BE25E625A825A125E5259E258B_7_342\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%237%25E6%2580%258E%25E4%25B9%2588%25E6%2589%2593%25E7%25A0%25B4%25E5%258F%258C%25E4%25BA%25B2%25E5%25A7%2594%25E6%25B4%25BE%25E6%25A8%25A1%25E5%259E%258B\" title=\"7、怎么打破双亲委派模型？\">7、怎么打破双亲委派模型？</a></h3>\n<p>打破双亲委派机制则不仅要继承ClassLoader类，还要重写loadClass和findClass方法。</p>\n<h3><a id=\"8httpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E625B1258725E6258025BB25EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E725AD259425E625A1258825E525A425A725E5258525A825EF25BC2589md23825E5259E258325E5259C25BE25E6259425B625E9259B258625E725AE259725E625B32595_8_346\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%238%25E5%259E%2583%25E5%259C%25BE%25E6%2594%25B6%25E9%259B%2586%25E7%25AE%2597%25E6%25B3%2595\" title=\"8、垃圾收集算法\">8、垃圾收集算法</a></h3>\n<p>GC最基础的算法有三种：标记 -清除算法、复制算法、标记-压缩算法，我们常用的垃圾回收器一般都采用分代收集算法。</p>\n<p><strong>标记 -清除算法</strong></p>\n<p>“标记-清除”（Mark-Sweep）算法，如它的名字一样，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收掉所有被标记的对象。</p>\n<p><strong>复制算法</strong></p>\n<p>“复制”（Copying）的收集算法，它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。</p>\n<p><strong>标记-压缩算法</strong></p>\n<p>标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存</p>\n<p><strong>分代收集算法</strong></p>\n<p>“分代收集”（Generational Collection）算法，把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法</p>\n<h3><a id=\"9_OOM_httpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E625B1258725E6258025BB25EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E725AD259425E625A1258825E525A425A725E5258525A825EF25BC2589md23925E425BD25A025E6259C258925E5259325AA25E425BA259B25E62589258B25E625AE25B525E6259D25A525E6258E259225E6259F25A5oom25E7259A258425E9259725AE25E925A22598_9_OOM__366\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%239%25E4%25BD%25A0%25E6%259C%2589%25E5%2593%25AA%25E4%25BA%259B%25E6%2589%258B%25E6%25AE%25B5%25E6%259D%25A5%25E6%258E%2592%25E6%259F%25A5-oom-%25E7%259A%2584%25E9%2597%25AE%25E9%25A2%2598\" title=\"9、你有哪些手段来排查 OOM 的问题？\">9、你有哪些手段来排查 OOM 的问题？</a></h3>\n<p>**1、**增加两个参数 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp/heapdump.hprof，当 OOM 发生时自动 dump 堆内存信息到指定目录</p>\n<p>**2、**同时 jstat 查看监控 JVM 的内存和 GC 情况，先观察问题大概出在什么区域</p>\n<p>**3、**使用 MAT 工具载入到 dump 文件，分析大对象的占用情况，比如 HashMap 做缓存未清理，时间长了就会内存溢出，可以把改为弱引用</p>\n<h3><a id=\"10httpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E625B1258725E6258025BB25EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E725AD259425E625A1258825E525A425A725E5258525A825EF25BC2589mda><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%2310%25E5%2581%2587%25E8%25AE%25BE%25E6%258A%258A%25E5%25AE%259E%25E4%25BE%258B%25E5%258C%2596%25E7%259A%2584%25E6%2595%25B0%25E7%25BB%2584%25E7%259A%2584%25E5%258F%2598%25E9%2587%258F%25E5%25BD%2593%25E6%2588%2590%25E6%2596%25B9%25E6%25B3%2595%25E5%258F%2582%25E6%2595%25B0%25E5%25BD%2593%25E6%2596%25B9%25E6%25B3%2595%25E6%2589%25A7%25E8%25A1%258C%25E7%259A%2584%25E6%2597%25B6%25E5%2580%2599%25E6%2594%25B9%25E5%258F%2598%25E4%25BA%2586%25E6%2595%25B0%25E7%25BB%2584%25E5%2586%2585%25E7%259A%2584%25E5%2585%2583%25E7%25B4%25A0%25E9%2582%25A3%25E4%25B9%2588%25E5%259C%25A8%25E6%2596%25B9%25E6%25B3%2595%25E5%25A4%2596%25E6%2595%25B0%25E7%25BB%2584%25E5%2585%2583%25E7%25B4%25A0%25E6%259C%2589%25E5%258F%2591%25E7%2594%259F%25E6%2594%25B9%25E5%258F%2598%25E5%2590%2597\" title=\"10、假设把实例化的数组的变量当成方法参数，当方法执行的时候改变了数组内的元素，那么在方法外，数组元素有发生改变吗？\">10、假设把实例化的数组的变量当成方法参数，当方法执行的时候改变了数组内的元素，那么在方法外，数组元素有发生改变吗？</a></h3>\n<p>改变了，因为传递是对象的引用，操作的是引用所指向的对象</p>\n<h3><a id=\"1_Java_httpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E525A425A725E5258525A825E525B825A625E725AD259425E625A1258825EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E6259525B425E72590258625EF25BC2589md23125E62580258E25E425B9258825E8258E25B725E5258F2596java25E725A8258B25E525BA258F25E425BD25BF25E7259425A825E7259A258425E52586258525E525AD259825E525A0258625E425BD25BF25E7259425A825E7259A258425E7259925BE25E52588258625E625AF2594_1_Java__378\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E5%2585%25A8%25E5%25B8%25A6%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%2589.md%231%25E6%2580%258E%25E4%25B9%2588%25E8%258E%25B7%25E5%258F%2596-java-%25E7%25A8%258B%25E5%25BA%258F%25E4%25BD%25BF%25E7%2594%25A8%25E7%259A%2584%25E5%2586%2585%25E5%25AD%2598%25E5%25A0%2586%25E4%25BD%25BF%25E7%2594%25A8%25E7%259A%2584%25E7%2599%25BE%25E5%2588%2586%25E6%25AF%2594\" title=\"1、怎么获取 Java 程序使用的内存？堆使用的百分比？\">1、怎么获取 Java 程序使用的内存？堆使用的百分比？</a></h3>\n<p>可以通过 java.lang.Runtime 类中与内存相关方法来获取剩余的内存，总内存及最大堆内存。通过这些方法你也可以获取到堆使用的百分比及堆内存的剩余空间。Runtime.freeMemory() 方法返回剩余空间的字节数，Runtime.totalMemory() 方法总内存的字节数，Runtime.maxMemory() 返回最大内存的字节数。</p>\n<h3><a id=\"2httpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E525A425A725E5258525A825E525B825A625E725AD259425E625A1258825EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E6259525B425E72590258625EF25BC2589md23225E525BC25BA25E525BC259525E7259425A825E825BD25AF25E525BC259525E7259425A825E525BC25B125E525BC259525E7259425A825E82599259A25E525BC259525E7259425A825E6259825AF25E425BB258025E425B92588_2_382\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E5%2585%25A8%25E5%25B8%25A6%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%2589.md%232%25E5%25BC%25BA%25E5%25BC%2595%25E7%2594%25A8%25E8%25BD%25AF%25E5%25BC%2595%25E7%2594%25A8%25E5%25BC%25B1%25E5%25BC%2595%25E7%2594%25A8%25E8%2599%259A%25E5%25BC%2595%25E7%2594%25A8%25E6%2598%25AF%25E4%25BB%2580%25E4%25B9%2588\" title=\"2、强引用、软引用、弱引用、虚引用是什么？\">2、强引用、软引用、弱引用、虚引用是什么？</a></h3>\n<p><strong>普通的对象引用关系就是强引用</strong></p>\n<p>软引用用于维护一些可有可无的对象。只有在内存不足时，系统则会回收软引用对象，如果回收了软引用对象之后仍然没有足够的内存，才会抛出内存溢出异常。</p>\n<p>弱引用对象相比较软引用，要更加无用<code>一些</code>，它拥有更短的生命周期。当JVM进行垃圾回收时，无论内存是否充足，都会回收被弱引用关联的对象。</p>\n<p>虚引用是一种形同虚设的引用，在现实场景中用的不是很多，它主要用来跟踪对象被垃圾回收的活动。</p>\n<h3><a id=\"3G1_httpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E525A425A725E5258525A825E525B825A625E725AD259425E625A1258825EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E6259525B425E72590258625EF25BC2589md233g125E6259425B625E9259B258625E5259925A8_3G1__392\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E5%2585%25A8%25E5%25B8%25A6%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%2589.md%233g1-%25E6%2594%25B6%25E9%259B%2586%25E5%2599%25A8\" title=\"3、G1 收集器\">3、G1 收集器</a></h3>\n<p>Garbage first 垃圾收集器是目前垃圾收集器理论发展的最前沿成果，相比与 CMS 收集器， G1 收集器两个最突出的改进是：</p>\n<p>**1、**基于标记-整理算法，不产生内存碎片。</p>\n<p>**2、**可以非常精确控制停顿时间，在不牺牲吞吐量前提下，实现低停顿垃圾回收。G1 收集器避免全区域垃圾收集，它把堆内存划分为大小固定的几个独立区域，并且跟踪这些区域的垃圾收集进度，同时在后台维护一个优先级列表，每次根据所允许的收集时间， 优先回收垃圾最多的区域。区域划分和优先级区域回收机制，确保 G1 收集器可以在有限时间获得最高的垃圾收集效率</p>\n<h3><a id=\"4httpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E525A425A725E5258525A825E525B825A625E725AD259425E625A1258825EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E6259525B425E72590258625EF25BC2589md23425E825BF259025E825A1258C25E6259725B625E525B825B825E92587258F25E625B125A025E625BA25A225E5258725BA25E7259A258425E5258E259F25E5259B25A0_4_400\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E5%2585%25A8%25E5%25B8%25A6%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%2589.md%234%25E8%25BF%2590%25E8%25A1%258C%25E6%2597%25B6%25E5%25B8%25B8%25E9%2587%258F%25E6%25B1%25A0%25E6%25BA%25A2%25E5%2587%25BA%25E7%259A%2584%25E5%258E%259F%25E5%259B%25A0\" title=\"4、运行时常量池溢出的原因？\">4、运行时常量池溢出的原因？</a></h3>\n<p>String 的<code>intern</code>方法是一个本地方法，作用是如果字符串常量池中已包含一个等于此 String 对象的字符串，则返回池中这个字符串的 String 对象的引用，否则将此 String 对象包含的字符串添加到常量池并返回此 String 对象的引用。</p>\n<p>在 JDK6 及之前常量池分配在永久代，因此可以通过<code>-XX:PermSize</code>和<code>-XX:MaxPermSize</code>限制永久代大小，间接限制常量池。在 while 死循环中调用<code>intern</code>方法导致运行时常量池溢出。在 JDK7 后不会出现该问题，因为存放在永久代的字符串常量池已经被移至堆中。</p>\n<h3><a id=\"5Javahttpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E525A425A725E5258525A825E525B825A625E725AD259425E625A1258825EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E6259525B425E72590258625EF25BC2589md235java25E6259C258025E925A125B625E725BA25A725E7259A258425E7258825B625E725B125BB25E6259825AF25E5259325AA25E425B825AA_5Java_406\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E5%2585%25A8%25E5%25B8%25A6%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%2589.md%235java%25E6%259C%2580%25E9%25A1%25B6%25E7%25BA%25A7%25E7%259A%2584%25E7%2588%25B6%25E7%25B1%25BB%25E6%2598%25AF%25E5%2593%25AA%25E4%25B8%25AA\" title=\"5、Java最顶级的父类是哪个？\">5、Java最顶级的父类是哪个？</a></h3>\n<p>Object</p>\n<h3><a id=\"6JVM_httpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E525A425A725E5258525A825E525B825A625E725AD259425E625A1258825EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E6259525B425E72590258625EF25BC2589md236jvm25E7259B259125E6258E25A725E425B8258E25E52588258625E6259E259025E525B725A525E5258525B725E425BD25A025E7259425A825E825BF258725E5259325AA25E425BA259B25E425BB258B25E725BB258D25E425B8258025E425B8258B25E325802582_6JVM__410\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E5%2585%25A8%25E5%25B8%25A6%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%2589.md%236jvm-%25E7%259B%2591%25E6%258E%25A7%25E4%25B8%258E%25E5%2588%2586%25E6%259E%2590%25E5%25B7%25A5%25E5%2585%25B7%25E4%25BD%25A0%25E7%2594%25A8%25E8%25BF%2587%25E5%2593%25AA%25E4%25BA%259B%25E4%25BB%258B%25E7%25BB%258D%25E4%25B8%2580%25E4%25B8%258B%25E3%2580%2582\" title=\"6、JVM 监控与分析工具你用过哪些？介绍一下。\">6、JVM 监控与分析工具你用过哪些？介绍一下。</a></h3>\n<p>**1、**jps，显示系统所有虚拟机进程信息的命令行工具</p>\n<p>**2、**jstat，监视分析虚拟机运行状态的命令行工具</p>\n<p>**3、**jinfo，查看和调整虚拟机参数的命令行工具</p>\n<p>**4、**jmap，生成虚拟机堆内存转储快照的命令行工具</p>\n<p>**5、**jhat，显示和分析虚拟机的转储快照文件的命令行工具</p>\n<p>**6、**jstack，生成虚拟机的线程快照的命令行工具</p>\n<p>**7、**jcmd，虚拟机诊断工具，JDK 7 提供</p>\n<p>**8、**jhsdb，基于服务性代理实现的进程外可视化调试工具，JDK 9 提供</p>\n<p>**9、**JConsole，基于JMX的可视化监视和管理工具</p>\n<p>**10、**jvisualvm，图形化虚拟机使用情况的分析工具</p>\n<p>**11、**Java Mission Control，监控和管理 Java 应用程序的工具</p>\n<p>**1、**MAT，Memory Analyzer Tool，虚拟机内存分析工具</p>\n<p>**2、**vjtools，唯品会的包含核心类库与问题分析工具</p>\n<p>**3、**arthas，阿里开源的 Java 诊断工具</p>\n<p>**4、**greys，JVM进程执行过程中的异常诊断工具</p>\n<p>**5、**GCHisto，GC 分析工具</p>\n<p>**6、**GCViewer，GC 日志文件分析工具</p>\n<p>**7、**GCeasy，在线版 GC 日志文件分析工具</p>\n<p>**8、**JProfiler，检查、监控、追踪 Java 性能的工具</p>\n<p>**9、**BTrace，基于动态字节码修改技术(Hotswap)实现的Java程序追踪与分析工具</p>\n<p><strong>下面可以重点体验下：</strong></p>\n<p>JDK 自带的命令行工具方便快捷，不是特别复杂的问题可以快速定位；</p>\n<p>阿里的 arthas 命令行也不错；</p>\n<p>可视化工具 MAT、JProfiler 比较强大。</p>\n<h3><a id=\"7JVMEdenSurvivorhttpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E525A425A725E5258525A825E525B825A625E725AD259425E625A1258825EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E6259525B425E72590258625EF25BC2589md237jvm25E6259625B025E72594259F25E425BB25A325E425B825AD25E425B825BA25E425BB258025E425B9258825E825A6258125E52588258625E425B825BAeden25E52592258Csurvivor_7JVMEdenSurvivor_460\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E5%2585%25A8%25E5%25B8%25A6%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%2589.md%237jvm%25E6%2596%25B0%25E7%2594%259F%25E4%25BB%25A3%25E4%25B8%25AD%25E4%25B8%25BA%25E4%25BB%2580%25E4%25B9%2588%25E8%25A6%2581%25E5%2588%2586%25E4%25B8%25BAeden%25E5%2592%258Csurvivor\" title=\"7、JVM新生代中为什么要分为Eden和Survivor？\">7、JVM新生代中为什么要分为Eden和Survivor？</a></h3>\n<p>如果没有Survivor，Eden区每进行一次Minor GC，存活的对象就会被送到老年代。老年代很快被填满，触发Major GC.老年代的内存空间远大于新生代，进行一次Full GC消耗的时间比Minor GC长得多,所以需要分为Eden和Survivor。Survivor的存在意义，就是减少被送到老年代的对象，进而减少Full GC的发生，Survivor的预筛选保证，只有经历16次Minor GC还能在新生代中存活的对象，才会被送到老年代。设置两个Survivor区最大的好处就是解决了碎片化，刚刚新建的对象在Eden中，经历一次Minor GC，Eden中的存活对象就会被移动到第一块survivor space S0，Eden被清空；等Eden区再满了，就再触发一次Minor GC，Eden和S0中的存活对象又会被复制送入第二块survivor space S1（这个过程非常重要，因为这种复制算法保证了S1中来自S0和Eden两部分的存活对象占用连续的内存空间，避免了碎片化的发生）</p>\n<h3><a id=\"8Parallel_Old_httpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E525A425A725E5258525A825E525B825A625E725AD259425E625A1258825EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E6259525B425E72590258625EF25BC2589md238parallelold25E6259425B625E9259B258625E5259925A825E525A4259A25E725BA25BF25E725A8258B25E625A0258725E825AE25B025E6259525B425E72590258625E725AE259725E625B32595_8Parallel_Old__464\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E5%2585%25A8%25E5%25B8%25A6%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%2589.md%238parallel-old-%25E6%2594%25B6%25E9%259B%2586%25E5%2599%25A8%25E5%25A4%259A%25E7%25BA%25BF%25E7%25A8%258B%25E6%25A0%2587%25E8%25AE%25B0%25E6%2595%25B4%25E7%2590%2586%25E7%25AE%2597%25E6%25B3%2595\" title=\"8、Parallel Old 收集器（多线程标记整理算法）\">8、Parallel Old 收集器（多线程标记整理算法）</a></h3>\n<p>Parallel Old 收集器是Parallel Scavenge的年老代版本，使用多线程的标记-整理算法，在 JDK1.6才开始提供。</p>\n<p>在 JDK1.6 之前，新生代使用 ParallelScavenge 收集器只能搭配年老代的 Serial Old 收集器，只能保证新生代的吞吐量优先，无法保证整体的吞吐量， Parallel Old 正是为了在年老代同样提供吞吐量优先的垃圾收集器， 如果系统对吞吐量要求比较高，可以优先考虑新生代Parallel Scavenge和年老代 Parallel Old 收集器的搭配策略。</p>\n<h3><a id=\"9Javahttpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E525A425A725E5258525A825E525B825A625E725AD259425E625A1258825EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E6259525B425E72590258625EF25BC2589md239java25E725BA25BF25E725A8258B25E5258525B725E6259C258925E425BA259425E425B825AD25E5259F25BA25E6259C25AC25E7258A25B625E625802581_9Java_470\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E5%2585%25A8%25E5%25B8%25A6%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%2589.md%239java%25E7%25BA%25BF%25E7%25A8%258B%25E5%2585%25B7%25E6%259C%2589%25E4%25BA%2594%25E4%25B8%25AD%25E5%259F%25BA%25E6%259C%25AC%25E7%258A%25B6%25E6%2580%2581\" title=\"9、Java线程具有五中基本状态\">9、Java线程具有五中基本状态</a></h3>\n<p>**1、**新建状态（New）：当线程对象对创建后，即进入了新建状态，如：Thread t = new MyThread()；</p>\n<p>**2、**就绪状态（Runnable）：当调用线程对象的start()方法（t.start();），线程即进入就绪状态。处于就绪状态的线程，只是说明此线程已经做好了准备，随时等待CPU调度执行，并不是说执行了t.start()此线程立即就会执行；</p>\n<p>**3、**运行状态（Running）：当CPU开始调度处于就绪状态的线程时，此时线程才得以真正执行，即进入到运行状态。注：就 绪状态是进入到运行状态的唯一入口，也就是说，线程要想进入运行状态执行，首先必须处于就绪状态中；</p>\n<p>**4、**阻塞状态（Blocked）：处于运行状态中的线程由于某种原因，暂时放弃对CPU的使用权，停止执行，此时进入阻塞状态，直到其进入到就绪状态，才 有机会再次被CPU调用以进入到运行状态。</p>\n<p><strong>根据阻塞产生的原因不同，阻塞状态又可以分为三种：</strong></p>\n<p>**1、**等待阻塞：运行状态中的线程执行wait()方法，使本线程进入到等待阻塞状态；</p>\n<p>**2、**同步阻塞：线程在获取synchronized同步锁失败(因为锁被其它线程所占用)，它会进入同步阻塞状态；</p>\n<p>**3、**其他阻塞：通过调用线程的sleep()或join()或发出了I/O请求时，线程会进入到阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。</p>\n<p>**5、**死亡状态（Dead）：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。</p>\n<h3><a id=\"10httpslinkzhihucomtargethttps3AgiteecomsouyunkuNewDevBooksblobmasterdocsJavaJava25E425B825AD25E725BA25A725E9259D25A225E825AF259525E925A2259825E525A425A725E5258525A825E525B825A625E725AD259425E625A1258825EF25BC2588202125E525B925B4Java25E9259D25A225E825AF259525E925A2259825E5258F258A25E725AD259425E625A1258825E6259525B425E72590258625EF25BC2589md231025E5258F258C25E425BA25B225E525A7259425E625B425BE25E625A825A125E5259E258B25E6259825AF25E425BB258025E425B92588_10_490\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E5%2585%25A8%25E5%25B8%25A6%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%2589.md%2310%25E5%258F%258C%25E4%25BA%25B2%25E5%25A7%2594%25E6%25B4%25BE%25E6%25A8%25A1%25E5%259E%258B%25E6%2598%25AF%25E4%25BB%2580%25E4%25B9%2588\" title=\"10、双亲委派模型是什么？\">10、双亲委派模型是什么？</a></h3>\n<p>类加载器具有等级制度但非继承关系，以组合的方式复用父加载器的功能。双亲委派模型要求除了顶层的启动类加载器外，其余类加载器都应该有自己的父加载器。</p>\n<p>一个类加载器收到了类加载请求，它不会自己去尝试加载，而将该请求委派给父加载器，每层的类加载器都是如此，因此所有加载请求最终都应该传送到启动类加载器，只有当父加载器反馈无法完成请求时，子加载器才会尝试。</p>\n<p>类跟随它的加载器一起具备了有优先级的层次关系，确保某个类在各个类加载器环境中都是同一个，保证程序的稳定性。</p>\n<h2><a id=\"Java_70_498\"></a>更多Java 面试题70道</h2>\n<p><strong>01、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%231java%25E4%25B8%25AD%25E6%259C%2589%25E5%2587%25A0%25E7%25A7%258D%25E6%2596%25B9%25E6%25B3%2595%25E5%258F%25AF%25E4%25BB%25A5%25E5%25AE%259E%25E7%258E%25B0%25E4%25B8%2580%25E4%25B8%25AA%25E7%25BA%25BF%25E7%25A8%258B\" title=\"java中有几种方法可以实现一个线程？\">java中有几种方法可以实现一个线程？</a></p>\n<p><strong>02、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%232java-%25E4%25B8%25AD%25E7%259A%2584-hashset%25E5%2586%2585%25E9%2583%25A8%25E6%2598%25AF%25E5%25A6%2582%25E4%25BD%2595%25E5%25B7%25A5%25E4%25BD%259C%25E7%259A%2584\" title=\"Java 中的 HashSet，内部是如何工作的？\">Java 中的 HashSet，内部是如何工作的？</a></p>\n<p><strong>03、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%233redux%25E7%259A%2584%25E5%25B7%25A5%25E4%25BD%259C%25E6%25B5%2581%25E7%25A8%258B\" title=\"redux的工作流程\">redux的工作流程?</a></p>\n<p><strong>04、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%234string%25E7%25B1%25BB%25E7%259A%2584%25E5%25B8%25B8%25E7%2594%25A8%25E6%2596%25B9%25E6%25B3%2595%25E6%259C%2589%25E9%2582%25A3%25E4%25BA%259B\" title=\"String类的常用方法有那些？\">String类的常用方法有那些？</a></p>\n<p><strong>05、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%235%25E8%25AF%25B7%25E4%25BD%25A0%25E8%25B0%2588%25E8%25B0%2588%25E5%25AF%25B9oom%25E7%259A%2584%25E8%25AE%25A4%25E8%25AF%2586\" title=\"请你谈谈对OOM的认识\">请你谈谈对OOM的认识</a></p>\n<p><strong>06、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%236parnew-%25E5%259E%2583%25E5%259C%25BE%25E6%2594%25B6%25E9%259B%2586%25E5%2599%25A8serial%2B%25E5%25A4%259A%25E7%25BA%25BF%25E7%25A8%258B\" title=\"ParNew 垃圾收集器（Serial+多线程）\">ParNew 垃圾收集器（Serial+多线程）</a></p>\n<p><strong>07、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%237java-%25E4%25B8%25AD%25E5%25A6%2582%25E4%25BD%2595%25E6%25A0%25BC%25E5%25BC%258F%25E5%258C%2596%25E4%25B8%2580%25E4%25B8%25AA%25E6%2597%25A5%25E6%259C%259F%25E5%25A6%2582%25E6%25A0%25BC%25E5%25BC%258F%25E5%258C%2596%25E4%25B8%25BA-ddmmyyyy-%25E7%259A%2584%25E5%25BD%25A2%25E5%25BC%258F\" title=\"Java 中如何格式化一个日期？如格式化为 ddMMyyyy 的形式？\">Java 中如何格式化一个日期？如格式化为 ddMMyyyy 的形式？</a></p>\n<p><strong>08、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%238%25E4%25BB%2580%25E4%25B9%2588%25E6%2598%25AFjava%25E8%2599%259A%25E6%258B%259F%25E6%259C%25BA\" title=\"什么是Java虚拟机\">什么是Java虚拟机</a></p>\n<p><strong>09、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%239java-%25E4%25B8%25AD%25E7%259A%2584%25E5%2590%258C%25E6%25AD%25A5%25E9%259B%2586%25E5%2590%2588%25E4%25B8%258E%25E5%25B9%25B6%25E5%258F%2591%25E9%259B%2586%25E5%2590%2588%25E6%259C%2589%25E4%25BB%2580%25E4%25B9%2588%25E5%258C%25BA%25E5%2588%25AB\" title=\"Java 中的同步集合与并发集合有什么区别？\">Java 中的同步集合与并发集合有什么区别？</a></p>\n<p><strong>10、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%2310%25E9%2580%2582%25E9%2585%258D%25E5%2599%25A8%25E6%25A8%25A1%25E5%25BC%258F%25E5%2592%258C%25E4%25BB%25A3%25E7%2590%2586%25E6%25A8%25A1%25E5%25BC%258F%25E4%25B9%258B%25E5%2589%258D%25E6%259C%2589%25E4%25BB%2580%25E4%25B9%2588%25E4%25B8%258D%25E5%2590%258C\" title=\"适配器模式和代理模式之前有什么不同？\">适配器模式和代理模式之前有什么不同？</a></p>\n<p><strong>11、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%231%25E8%25AF%25B4%25E8%25AF%25B4g1%25E5%259E%2583%25E5%259C%25BE%25E6%2594%25B6%25E9%259B%2586%25E5%2599%25A8%25E7%259A%2584%25E5%25B7%25A5%25E4%25BD%259C%25E5%258E%259F%25E7%2590%2586\" title=\"说说G1垃圾收集器的工作原理\">说说G1垃圾收集器的工作原理</a></p>\n<p><strong>12、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%232jrejdkjvm-%25E5%258F%258A-jit-%25E4%25B9%258B%25E9%2597%25B4%25E6%259C%2589%25E4%25BB%2580%25E4%25B9%2588%25E4%25B8%258D%25E5%2590%258C\" title=\"JRE、JDK、JVM 及 JIT 之间有什么不同？\">JRE、JDK、JVM 及 JIT 之间有什么不同？</a></p>\n<p><strong>13、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%233%25E5%25BD%2593%25E7%2588%25B6%25E7%25B1%25BB%25E5%25BC%2595%25E7%2594%25A8%25E6%258C%2587%25E5%2590%2591%25E5%25AD%2590%25E7%25B1%25BB%25E5%25AF%25B9%25E8%25B1%25A1%25E7%259A%2584%25E6%2597%25B6%25E5%2580%2599%25E5%25AD%2590%25E7%25B1%25BB%25E9%2587%258D%25E5%2586%2599%25E4%25BA%2586%25E7%2588%25B6%25E7%25B1%25BB%25E6%2596%25B9%25E6%25B3%2595%25E5%2592%258C%25E5%25B1%259E%25E6%2580%25A7%25E9%2582%25A3%25E4%25B9%2588%25E5%25BD%2593%25E8%25AE%25BF%25E9%2597%25AE%25E5%25B1%259E%25E6%2580%25A7%25E7%259A%2584%25E6%2597%25B6%25E5%2580%2599%25E8%25AE%25BF%25E9%2597%25AE%25E6%2598%25AF%25E8%25B0%2581%25E7%259A%2584%25E5%25B1%259E%25E6%2580%25A7%25E8%25B0%2583%25E7%2594%25A8%25E6%2596%25B9%25E6%25B3%2595%25E6%2597%25B6%25E8%25B0%2583%25E7%2594%25A8%25E7%259A%2584%25E6%2598%25AF%25E8%25B0%2581%25E7%259A%2584%25E6%2596%25B9%25E6%25B3%2595\" title=\"当父类引用指向子类对象的时候，子类重写了父类方法和属性，那么当访问属性的时候，访问是谁的属性？调用方法时，调用的是谁的方法？\">当父类引用指向子类对象的时候，子类重写了父类方法和属性，那么当访问属性的时候，访问是谁的属性？调用方法时，调用的是谁的方法？</a></p>\n<p><strong>14、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%234%25E5%25A0%2586%25E6%25BA%25A2%25E5%2587%25BA%25E7%259A%2584%25E5%258E%259F%25E5%259B%25A0\" title=\"堆溢出的原因？\">堆溢出的原因？</a></p>\n<p><strong>15、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%235%25E8%25AF%25B4%25E4%25B8%2580%25E4%25B8%258B-runnable-%25E5%2592%258C-callable-%25E6%259C%2589%25E4%25BB%2580%25E4%25B9%2588%25E5%258C%25BA%25E5%2588%25AB\" title=\"说一下 runnable 和 callable 有什么区别\">说一下 runnable 和 callable 有什么区别</a></p>\n<p><strong>16、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%236jvm-%25E7%25B1%25BB%25E5%258A%25A0%25E8%25BD%25BD%25E6%259C%25BA%25E5%2588%25B6\" title=\"JVM 类加载机制\">JVM 类加载机制</a></p>\n<p><strong>17、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%237%25E6%2580%258E%25E4%25B9%2588%25E6%2589%2593%25E7%25A0%25B4%25E5%258F%258C%25E4%25BA%25B2%25E5%25A7%2594%25E6%25B4%25BE%25E6%25A8%25A1%25E5%259E%258B\" title=\"怎么打破双亲委派模型？\">怎么打破双亲委派模型？</a></p>\n<p><strong>18、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%238%25E5%259E%2583%25E5%259C%25BE%25E6%2594%25B6%25E9%259B%2586%25E7%25AE%2597%25E6%25B3%2595\" title=\"垃圾收集算法\">垃圾收集算法</a></p>\n<p><strong>19、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%239%25E4%25BD%25A0%25E6%259C%2589%25E5%2593%25AA%25E4%25BA%259B%25E6%2589%258B%25E6%25AE%25B5%25E6%259D%25A5%25E6%258E%2592%25E6%259F%25A5-oom-%25E7%259A%2584%25E9%2597%25AE%25E9%25A2%2598\" title=\"你有哪些手段来排查 OOM 的问题？\">你有哪些手段来排查 OOM 的问题？</a></p>\n<p><strong>20、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%2310%25E5%2581%2587%25E8%25AE%25BE%25E6%258A%258A%25E5%25AE%259E%25E4%25BE%258B%25E5%258C%2596%25E7%259A%2584%25E6%2595%25B0%25E7%25BB%2584%25E7%259A%2584%25E5%258F%2598%25E9%2587%258F%25E5%25BD%2593%25E6%2588%2590%25E6%2596%25B9%25E6%25B3%2595%25E5%258F%2582%25E6%2595%25B0%25E5%25BD%2593%25E6%2596%25B9%25E6%25B3%2595%25E6%2589%25A7%25E8%25A1%258C%25E7%259A%2584%25E6%2597%25B6%25E5%2580%2599%25E6%2594%25B9%25E5%258F%2598%25E4%25BA%2586%25E6%2595%25B0%25E7%25BB%2584%25E5%2586%2585%25E7%259A%2584%25E5%2585%2583%25E7%25B4%25A0%25E9%2582%25A3%25E4%25B9%2588%25E5%259C%25A8%25E6%2596%25B9%25E6%25B3%2595%25E5%25A4%2596%25E6%2595%25B0%25E7%25BB%2584%25E5%2585%2583%25E7%25B4%25A0%25E6%259C%2589%25E5%258F%2591%25E7%2594%259F%25E6%2594%25B9%25E5%258F%2598%25E5%2590%2597\" title=\"假设把实例化的数组的变量当成方法参数，当方法执行的时候改变了数组内的元素，那么在方法外，数组元素有发生改变吗？\">假设把实例化的数组的变量当成方法参数，当方法执行的时候改变了数组内的元素，那么在方法外，数组元素有发生改变吗？</a></p>\n<p><strong>21、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E5%2585%25A8%25E5%25B8%25A6%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%2589.md%231%25E6%2580%258E%25E4%25B9%2588%25E8%258E%25B7%25E5%258F%2596-java-%25E7%25A8%258B%25E5%25BA%258F%25E4%25BD%25BF%25E7%2594%25A8%25E7%259A%2584%25E5%2586%2585%25E5%25AD%2598%25E5%25A0%2586%25E4%25BD%25BF%25E7%2594%25A8%25E7%259A%2584%25E7%2599%25BE%25E5%2588%2586%25E6%25AF%2594\" title=\"怎么获取 Java 程序使用的内存？堆使用的百分比？\">怎么获取 Java 程序使用的内存？堆使用的百分比？</a></p>\n<p><strong>22、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E5%2585%25A8%25E5%25B8%25A6%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%2589.md%232%25E5%25BC%25BA%25E5%25BC%2595%25E7%2594%25A8%25E8%25BD%25AF%25E5%25BC%2595%25E7%2594%25A8%25E5%25BC%25B1%25E5%25BC%2595%25E7%2594%25A8%25E8%2599%259A%25E5%25BC%2595%25E7%2594%25A8%25E6%2598%25AF%25E4%25BB%2580%25E4%25B9%2588\" title=\"强引用、软引用、弱引用、虚引用是什么？\">强引用、软引用、弱引用、虚引用是什么？</a></p>\n<p><strong>23、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E5%2585%25A8%25E5%25B8%25A6%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%2589.md%233g1-%25E6%2594%25B6%25E9%259B%2586%25E5%2599%25A8\" title=\"G1 收集器\">G1 收集器</a></p>\n<p><strong>24、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E5%2585%25A8%25E5%25B8%25A6%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%2589.md%234%25E8%25BF%2590%25E8%25A1%258C%25E6%2597%25B6%25E5%25B8%25B8%25E9%2587%258F%25E6%25B1%25A0%25E6%25BA%25A2%25E5%2587%25BA%25E7%259A%2584%25E5%258E%259F%25E5%259B%25A0\" title=\"运行时常量池溢出的原因？\">运行时常量池溢出的原因？</a></p>\n<p><strong>25、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E5%2585%25A8%25E5%25B8%25A6%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%2589.md%235java%25E6%259C%2580%25E9%25A1%25B6%25E7%25BA%25A7%25E7%259A%2584%25E7%2588%25B6%25E7%25B1%25BB%25E6%2598%25AF%25E5%2593%25AA%25E4%25B8%25AA\" title=\"Java最顶级的父类是哪个？\">Java最顶级的父类是哪个？</a></p>\n<p><strong>26、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E5%2585%25A8%25E5%25B8%25A6%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%2589.md%236jvm-%25E7%259B%2591%25E6%258E%25A7%25E4%25B8%258E%25E5%2588%2586%25E6%259E%2590%25E5%25B7%25A5%25E5%2585%25B7%25E4%25BD%25A0%25E7%2594%25A8%25E8%25BF%2587%25E5%2593%25AA%25E4%25BA%259B%25E4%25BB%258B%25E7%25BB%258D%25E4%25B8%2580%25E4%25B8%258B%25E3%2580%2582\" title=\"JVM 监控与分析工具你用过哪些？介绍一下。\">JVM 监控与分析工具你用过哪些？介绍一下。</a></p>\n<p><strong>27、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E5%2585%25A8%25E5%25B8%25A6%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%2589.md%237jvm%25E6%2596%25B0%25E7%2594%259F%25E4%25BB%25A3%25E4%25B8%25AD%25E4%25B8%25BA%25E4%25BB%2580%25E4%25B9%2588%25E8%25A6%2581%25E5%2588%2586%25E4%25B8%25BAeden%25E5%2592%258Csurvivor\" title=\"JVM新生代中为什么要分为Eden和Survivor？\">JVM新生代中为什么要分为Eden和Survivor？</a></p>\n<p><strong>28、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E5%2585%25A8%25E5%25B8%25A6%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%2589.md%238parallel-old-%25E6%2594%25B6%25E9%259B%2586%25E5%2599%25A8%25E5%25A4%259A%25E7%25BA%25BF%25E7%25A8%258B%25E6%25A0%2587%25E8%25AE%25B0%25E6%2595%25B4%25E7%2590%2586%25E7%25AE%2597%25E6%25B3%2595\" title=\"Parallel Old 收集器（多线程标记整理算法）\">Parallel Old 收集器（多线程标记整理算法）</a></p>\n<p><strong>09、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E5%2585%25A8%25E5%25B8%25A6%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%2589.md%239java%25E7%25BA%25BF%25E7%25A8%258B%25E5%2585%25B7%25E6%259C%2589%25E4%25BA%2594%25E4%25B8%25AD%25E5%259F%25BA%25E6%259C%25AC%25E7%258A%25B6%25E6%2580%2581\" title=\"Java线程具有五中基本状态\">Java线程具有五中基本状态</a></p>\n<p><strong>30、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E5%2585%25A8%25E5%25B8%25A6%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%2589.md%2310%25E5%258F%258C%25E4%25BA%25B2%25E5%25A7%2594%25E6%25B4%25BE%25E6%25A8%25A1%25E5%259E%258B%25E6%2598%25AF%25E4%25BB%2580%25E4%25B9%2588\" title=\"双亲委派模型是什么？\">双亲委派模型是什么？</a></p>\n<p><strong>31、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E5%2585%25A8%25E5%25B8%25A6%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%2589.md%231%25E4%25BB%2580%25E4%25B9%2588%25E6%2598%25AF%25E6%2596%25B9%25E6%25B3%2595%25E5%2586%2585%25E8%2581%2594\" title=\"什么是方法内联？\">什么是方法内联？</a></p>\n<p><strong>32、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E5%2585%25A8%25E5%25B8%25A6%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%2589.md%232%25E4%25BD%25A0%25E5%25AF%25B9%25E7%25BA%25BF%25E7%25A8%258B%25E4%25BC%2598%25E5%2585%2588%25E7%25BA%25A7%25E7%259A%2584%25E7%2590%2586%25E8%25A7%25A3%25E6%2598%25AF%25E4%25BB%2580%25E4%25B9%2588\" title=\"你对线程优先级的理解是什么？\">你对线程优先级的理解是什么？</a></p>\n<p><strong>33、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E5%2585%25A8%25E5%25B8%25A6%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%2589.md%233java%25E6%2598%25AF%25E5%2590%25A6%25E9%259C%2580%25E8%25A6%2581%25E5%25BC%2580%25E5%258F%2591%25E4%25BA%25BA%25E5%2591%2598%25E5%259B%259E%25E6%2594%25B6%25E5%2586%2585%25E5%25AD%2598%25E5%259E%2583%25E5%259C%25BE%25E5%2590%2597\" title=\"Java是否需要开发人员回收内存垃圾吗？\">Java是否需要开发人员回收内存垃圾吗？</a></p>\n<p><strong>34、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E5%2585%25A8%25E5%25B8%25A6%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%2589.md%234%25E8%25AF%25B4%25E8%25AF%25B4java-%25E5%259E%2583%25E5%259C%25BE%25E5%259B%259E%25E6%2594%25B6%25E6%259C%25BA%25E5%2588%25B6\" title=\"说说Java 垃圾回收机制\">说说Java 垃圾回收机制</a></p>\n<p><strong>35、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E5%2585%25A8%25E5%25B8%25A6%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%2589.md%23562volatile-%25E5%258F%2598%25E9%2587%258F%25E5%2592%258C-atomic-%25E5%258F%2598%25E9%2587%258F%25E6%259C%2589%25E4%25BB%2580%25E4%25B9%2588%25E4%25B8%258D%25E5%2590%258C\" title=\"volatile 变量和 atomic 变量有什么不同？\">volatile 变量和 atomic 变量有什么不同？</a></p>\n<p><strong>36、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E5%2585%25A8%25E5%25B8%25A6%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%2589.md%236jvm-%25E5%2586%2585%25E5%25AD%2598%25E5%258C%25BA%25E5%259F%259F\" title=\"JVM 内存区域\">JVM 内存区域</a></p>\n<p><strong>37、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E5%2585%25A8%25E5%25B8%25A6%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%2589.md%237jvm-%25E6%259C%2589%25E5%2593%25AA%25E4%25BA%259B%25E8%25BF%2590%25E8%25A1%258C%25E6%2597%25B6%25E5%2586%2585%25E5%25AD%2598%25E5%258C%25BA%25E5%259F%259F\" title=\"JVM 有哪些运行时内存区域？\">JVM 有哪些运行时内存区域？</a></p>\n<p><strong>38、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E5%2585%25A8%25E5%25B8%25A6%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%2589.md%238spring%25E4%25B8%25ADbean%25E7%259A%2584%25E4%25BD%259C%25E7%2594%25A8%25E5%259F%259F%25E6%259C%2589%25E5%2593%25AA%25E4%25BA%259B\" title=\"Spring中Bean的作用域有哪些？\">Spring中Bean的作用域有哪些？</a></p>\n<p><strong>39、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E5%2585%25A8%25E5%25B8%25A6%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%2589.md%239string-str%3Daaa%2C%25E4%25B8%258Estring-str%3Dnew-string%25E2%2580%259Caaa%25E4%25B8%2580%25E6%25A0%25B7%25E5%2590%2597\" title=\"String str=”aaa”,与String str=new String(“aaa”)一样吗？\">String str=”aaa”,与String str=new String(“aaa”)一样吗？</a></p>\n<p><strong>40、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%25A4%25A7%25E5%2585%25A8%25E5%25B8%25A6%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%2589.md%2310%25E4%25BB%2580%25E4%25B9%2588%25E6%2598%25AF%25E5%25BB%25BA%25E9%2580%25A0%25E8%2580%2585%25E6%25A8%25A1%25E5%25BC%258F\" title=\"什么是建造者模式\">什么是建造者模式</a></p>\n<p><strong>41、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E6%25B1%2587%25E6%2580%25BB%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%231%25E4%25B8%25BA%25E4%25BB%2580%25E4%25B9%2588hashmap%25E4%25B8%25ADstringinteger%25E8%25BF%2599%25E6%25A0%25B7%25E7%259A%2584%25E5%258C%2585%25E8%25A3%2585%25E7%25B1%25BB%25E9%2580%2582%25E5%2590%2588%25E4%25BD%259C%25E4%25B8%25BAk\" title=\"为什么HashMap中String、Integer这样的包装类适合作为K？\">为什么HashMap中String、Integer这样的包装类适合作为K？</a></p>\n<p><strong>42、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E6%25B1%2587%25E6%2580%25BB%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%232%25E5%25B8%25B8%25E8%25A7%2581%25E7%259A%2584%25E8%25AE%25A1%25E7%25AE%2597%25E6%259C%25BA%25E7%25BD%2591%25E7%25BB%259C%25E5%258D%258F%25E8%25AE%25AE%25E6%259C%2589%25E9%2582%25A3%25E4%25BA%259B\" title=\"常见的计算机网络协议有那些？\">常见的计算机网络协议有那些？</a></p>\n<p><strong>43、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E6%25B1%2587%25E6%2580%25BB%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%233%25E4%25B8%2580%25E4%25B8%25AA%25E7%25BA%25BF%25E7%25A8%258B%25E8%25BF%2590%25E8%25A1%258C%25E6%2597%25B6%25E5%258F%2591%25E7%2594%259F%25E5%25BC%2582%25E5%25B8%25B8%25E4%25BC%259A%25E6%2580%258E%25E6%25A0%25B7\" title=\"一个线程运行时发生异常会怎样？\">一个线程运行时发生异常会怎样？</a></p>\n<p><strong>44、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E6%25B1%2587%25E6%2580%25BB%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%234%25E9%2581%258D%25E5%258E%2586%25E4%25B8%2580%25E4%25B8%25AA-list-%25E6%259C%2589%25E5%2593%25AA%25E4%25BA%259B%25E4%25B8%258D%25E5%2590%258C%25E7%259A%2584%25E6%2596%25B9%25E5%25BC%258F%25E6%25AF%258F%25E7%25A7%258D%25E6%2596%25B9%25E6%25B3%2595%25E7%259A%2584%25E5%25AE%259E%25E7%258E%25B0%25E5%258E%259F%25E7%2590%2586%25E6%2598%25AF%25E4%25BB%2580%25E4%25B9%2588java-%25E4%25B8%25AD-list-%25E9%2581%258D%25E5%258E%2586%25E7%259A%2584%25E6%259C%2580%25E4%25BD%25B3%25E5%25AE%259E%25E8%25B7%25B5%25E6%2598%25AF%25E4%25BB%2580%25E4%25B9%2588\" title=\"遍历一个 List 有哪些不同的方式？每种方法的实现原理是什么？Java 中 List 遍历的最佳实践是什么？\">遍历一个 List 有哪些不同的方式？每种方法的实现原理是什么？Java 中 List 遍历的最佳实践是什么？</a></p>\n<p><strong>45、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E6%25B1%2587%25E6%2580%25BB%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%235stringbufferstringbuilder%25E6%259C%2589%25E4%25BB%2580%25E4%25B9%2588%25E5%258C%25BA%25E5%2588%25AB\" title=\"StringBuffer，Stringbuilder有什么区别？\">StringBuffer，Stringbuilder有什么区别？</a></p>\n<p><strong>46、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E6%25B1%2587%25E6%2580%25BB%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%236%25E4%25BB%2580%25E4%25B9%2588%25E6%2598%25AF%25E7%25BA%25BF%25E7%25A8%258B%25E6%25B1%25A0\" title=\"什么是线程池？\">什么是线程池？</a></p>\n<p><strong>47、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E6%25B1%2587%25E6%2580%25BB%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%237jdbc%25E6%2593%258D%25E4%25BD%259C%25E7%259A%2584%25E6%25AD%25A5%25E9%25AA%25A4\" title=\"JDBC操作的步骤\">JDBC操作的步骤</a></p>\n<p><strong>48、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E6%25B1%2587%25E6%2580%25BB%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%238%25E8%25AF%25B4%25E4%25B8%2580%25E4%25B8%258B-jvm-%25E8%25B0%2583%25E4%25BC%2598%25E7%259A%2584%25E5%25B7%25A5%25E5%2585%25B7\" title=\"说一下 JVM 调优的工具？\">说一下 JVM 调优的工具？</a></p>\n<p><strong>49、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E6%25B1%2587%25E6%2580%25BB%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%239jvm-%25E6%258F%2590%25E4%25BE%259B%25E7%259A%2584%25E5%25B8%25B8%25E7%2594%25A8%25E5%25B7%25A5%25E5%2585%25B7\" title=\"JVM 提供的常用工具\">JVM 提供的常用工具</a></p>\n<p><strong>50、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E6%25B1%2587%25E6%2580%25BB%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%2310synchronizedmap%25E5%2592%258Cconcurrenthashmap%25E6%259C%2589%25E4%25BB%2580%25E4%25B9%2588%25E5%258C%25BA%25E5%2588%25AB\" title=\"SynchronizedMap和ConcurrentHashMap有什么区别？\">SynchronizedMap和ConcurrentHashMap有什么区别？</a></p>\n<p><strong>51、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E9%2599%2584%25E7%25AD%2594%25E6%25A1%2588%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%231%25E6%259C%2589%25E5%2593%25AA%25E4%25BA%259B%25E7%25B1%25BB%25E5%258A%25A0%25E8%25BD%25BD%25E5%2599%25A8\" title=\"有哪些类加载器？\">有哪些类加载器？</a></p>\n<p><strong>52、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E9%2599%2584%25E7%25AD%2594%25E6%25A1%2588%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%232mixinhocrender-propsreact-hooks%25E7%259A%2584%25E4%25BC%2598%25E5%258A%25A3%25E5%25A6%2582%25E4%25BD%2595\" title=\"mixin、hoc、render props、react-hooks的优劣如何？\">mixin、hoc、render props、react-hooks的优劣如何？</a></p>\n<p><strong>53、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E9%2599%2584%25E7%25AD%2594%25E6%25A1%2588%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%233%25E4%25BB%2580%25E4%25B9%2588%25E6%2598%25AFexecutors\" title=\"什么是Executors？\">什么是Executors？</a></p>\n<p><strong>54、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E9%2599%2584%25E7%25AD%2594%25E6%25A1%2588%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%234%25E5%25A6%2582%25E4%25BD%2595%25E5%2588%25A4%25E6%2596%25AD%25E5%25AF%25B9%25E8%25B1%25A1%25E6%2598%25AF%25E5%2590%25A6%25E6%2598%25AF%25E5%259E%2583%25E5%259C%25BE\" title=\"如何判断对象是否是垃圾？\">如何判断对象是否是垃圾？</a></p>\n<p><strong>55、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E9%2599%2584%25E7%25AD%2594%25E6%25A1%2588%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%235volatile-%25E7%25B1%25BB%25E5%259E%258B%25E5%258F%2598%25E9%2587%258F%25E6%258F%2590%25E4%25BE%259B%25E4%25BB%2580%25E4%25B9%2588%25E4%25BF%259D%25E8%25AF%2581\" title=\"volatile 类型变量提供什么保证？\">volatile 类型变量提供什么保证？</a></p>\n<p><strong>56、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E9%2599%2584%25E7%25AD%2594%25E6%25A1%2588%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%236%25E5%259C%25A8-java-%25E7%25A8%258B%25E5%25BA%258F%25E4%25B8%25AD%25E6%2580%258E%25E4%25B9%2588%25E4%25BF%259D%25E8%25AF%2581%25E5%25A4%259A%25E7%25BA%25BF%25E7%25A8%258B%25E7%259A%2584%25E8%25BF%2590%25E8%25A1%258C%25E5%25AE%2589%25E5%2585%25A8\" title=\"在 Java 程序中怎么保证多线程的运行安全？\">在 Java 程序中怎么保证多线程的运行安全？</a></p>\n<p><strong>57、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E9%2599%2584%25E7%25AD%2594%25E6%25A1%2588%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%237%25E7%25BA%25BF%25E4%25B8%258A%25E5%25B8%25B8%25E7%2594%25A8%25E7%259A%2584-jvm-%25E5%258F%2582%25E6%2595%25B0%25E6%259C%2589%25E5%2593%25AA%25E4%25BA%259B\" title=\"线上常用的 JVM 参数有哪些？\">线上常用的 JVM 参数有哪些？</a></p>\n<p><strong>58、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E9%2599%2584%25E7%25AD%2594%25E6%25A1%2588%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%238volatile-%25E5%2585%25B3%25E9%2594%25AE%25E5%25AD%2597%25E7%259A%2584%25E4%25BD%259C%25E7%2594%25A8\" title=\"volatile 关键字的作用\">volatile 关键字的作用</a></p>\n<p><strong>59、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E9%2599%2584%25E7%25AD%2594%25E6%25A1%2588%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%239%25E8%25A7%25A3%25E9%2587%258A%25E4%25BD%2595%25E6%2597%25B6%25E5%259C%25A8tomcat%25E4%25BD%25BF%25E7%2594%25A8ssl-\" title=\"解释何时在Tomcat使用SSL \">解释何时在Tomcat使用SSL ?</a></p>\n<p><strong>60、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E4%25B8%25AD%25E7%25BA%25A7%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E9%2599%2584%25E7%25AD%2594%25E6%25A1%2588%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%2589.md%2310%25E4%25BD%25BF%25E7%2594%25A8js%25E8%258E%25B7%25E5%258F%2596%25E4%25B8%2580%25E4%25B8%25AA%25E8%25A1%25A8%25E5%258D%2595%25E5%2585%2583%25E7%25B4%25A0\" title=\"使用js获取一个表单元素\">使用js获取一个表单元素</a></p>\n<p><strong>61、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%231sql%25E4%25BC%2598%25E5%258C%2596%25E6%259C%2589%25E9%2582%25A3%25E4%25BA%259B%25E6%2596%25B9%25E6%25B3%2595\" title=\"Sql优化有那些方法？\">Sql优化有那些方法？</a></p>\n<p><strong>62、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%232%25E7%2594%25A8-java-%25E5%2586%2599%25E4%25B8%2580%25E4%25B8%25AA%25E7%25BA%25BF%25E7%25A8%258B%25E5%25AE%2589%25E5%2585%25A8%25E7%259A%2584%25E5%258D%2595%25E4%25BE%258B%25E6%25A8%25A1%25E5%25BC%258Fsingleton\" title=\"用 Java 写一个线程安全的单例模式（Singleton）？\">用 Java 写一个线程安全的单例模式（Singleton）？</a></p>\n<p><strong>63、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%233%25E5%259C%25A8-java-%25E4%25B8%25AD%25E5%25AF%25B9%25E8%25B1%25A1%25E4%25BB%2580%25E4%25B9%2588%25E6%2597%25B6%25E5%2580%2599%25E5%258F%25AF%25E4%25BB%25A5%25E8%25A2%25AB%25E5%259E%2583%25E5%259C%25BE%25E5%259B%259E%25E6%2594%25B6\" title=\"在 Java 中，对象什么时候可以被垃圾回收？\">在 Java 中，对象什么时候可以被垃圾回收？</a></p>\n<p><strong>64、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%234%25E7%25BA%25BF%25E7%25A8%258B%25E7%259A%2584-run%25E5%2592%258C-start%25E6%259C%2589%25E4%25BB%2580%25E4%25B9%2588%25E5%258C%25BA%25E5%2588%25AB\" title=\"线程的 run()和 start()有什么区别？\">线程的 run()和 start()有什么区别？</a></p>\n<p><strong>65、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%235%25E9%2587%258D%25E6%258E%2592%25E5%25BA%258F%25E5%25AE%259E%25E9%2599%2585%25E6%2589%25A7%25E8%25A1%258C%25E7%259A%2584%25E6%258C%2587%25E4%25BB%25A4%25E6%25AD%25A5%25E9%25AA%25A4\" title=\"重排序实际执行的指令步骤\">重排序实际执行的指令步骤</a></p>\n<p><strong>66、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%236java%25E4%25B8%25AD%25E5%25BC%2582%25E5%25B8%25B8%25E5%2588%2586%25E4%25B8%25BA%25E5%2593%25AA%25E4%25B8%25A4%25E7%25A7%258D\" title=\"Java中异常分为哪两种？\">Java中异常分为哪两种？</a></p>\n<p><strong>67、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%237%25E4%25BB%2580%25E4%25B9%2588%25E6%2598%25AF%25E5%25B9%25B6%25E5%258F%2591%25E5%25AE%25B9%25E5%2599%25A8%25E7%259A%2584%25E5%25AE%259E%25E7%258E%25B0\" title=\"什么是并发容器的实现？\">什么是并发容器的实现？</a></p>\n<p><strong>68、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%238%25E5%2588%259B%25E5%25BB%25BA%25E7%25BA%25BF%25E7%25A8%258B%25E7%259A%2584%25E5%259B%259B%25E7%25A7%258D%25E6%2596%25B9%25E5%25BC%258F\" title=\"创建线程的四种方式\">创建线程的四种方式</a></p>\n<p><strong>69、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%239java-%25E4%25B8%25AD%25E7%259B%25B4%25E6%258E%25A5%25E7%25BC%2593%25E5%2586%25B2%25E5%258C%25BA%25E4%25B8%258E%25E9%259D%259E%25E7%259B%25B4%25E6%258E%25A5%25E7%25BC%2593%25E5%2586%25B2%25E5%2599%25A8%25E6%259C%2589%25E4%25BB%2580%25E4%25B9%2588%25E5%258C%25BA%25E5%2588%25AB\" title=\"Java 中，直接缓冲区与非直接缓冲器有什么区别？\">Java 中，直接缓冲区与非直接缓冲器有什么区别？</a></p>\n<p><strong>70、</strong><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/NewDevBooks/blob/master/docs/Java/Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E5%258F%258A%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E5%2585%25A8%25EF%25BC%25882021%25E5%25B9%25B4Java%25E9%259D%25A2%25E8%25AF%2595%25E9%25A2%2598%25E7%25AD%2594%25E6%25A1%2588%25E5%25A4%25A7%25E6%25B1%2587%25E6%2580%25BB%25EF%25BC%2589.md%2310poll-%25E6%2596%25B9%25E6%25B3%2595%25E5%2592%258C-remove-%25E6%2596%25B9%25E6%25B3%2595%25E7%259A%2584%25E5%258C%25BA%25E5%2588%25AB\" title=\"poll() 方法和 remove() 方法的区别？\">poll() 方法和 remove() 方法的区别？</a></p>\n<p>如果不背 Java面试题的答案，肯定面试会挂！</p>\n<h2><a id=\"Java_643\"></a>这套Java面试题大全，希望对大家有帮助哈~</h2>\n<h2><a id=\"JavaPDFhttpslinkzhihucomtargethttps3AgiteecomsouyunkuDevBooksblobmasterdocsindexmd_JavaPDF_646\"></a><a href=\"https://link.zhihu.com/target=https%3A//gitee.com/souyunku/DevBooks/blob/master/docs/index.md\" title=\"博主已将以下这些面试题整理成了一个Java面试手册，是PDF版的\">博主已将以下这些面试题整理成了一个Java面试手册，是PDF版的</a></h2>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-08-30 07:42:54", "summary": "史上最全初中级面试题，发现网上很多初级面试题都没有答案，所以花了很长时间搜集整理出来了这套面试题大全，希望对大家有帮助哈本人发现网上虽然有不少相关的面试题，但第一未必全，第二未必有答案，第三虽然有答案"}