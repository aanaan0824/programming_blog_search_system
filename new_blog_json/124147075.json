{"blogid": "124147075", "writerAge": "码龄1年", "writerBlogNum": "35", "writerCollect": "2282", "writerComment": "3780", "writerFan": "7379", "writerGrade": "6级", "writerIntegral": "7364", "writerName": "Dream_Y.Ocean", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124147075.jpg", "writerRankTotal": "1941", "writerRankWeekly": "114", "writerThumb": "2714", "writerVisitNum": "98015", "blog_read_count": "3666", "blog_time": "已于 2022-07-14 22:22:08 修改", "blog_title": "【数据结构】顺序表（增、删、查、改）的实现 [初阶篇_ 复习专用]", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><strong>💛 前情提要💛</strong></p>\n<p>恭喜大家成功完成<code>C语言</code>，入门了这美丽的世界呀</p>\n<p>本章节就开始进入<code>数据结构</code>啦~</p>\n<p>接下来我们即将进入一个全新的空间，对代码有一个全新的视角~</p>\n<p>以下的内容一定会让你对<code>数据结构</code>有一个颠覆性的认识哦！！！</p>\n<p>❗以下内容以<code>C语言</code>的方式实现，对于<code>数据结构</code>来说最重要的是<code>思想</code>哦❗</p>\n<p><font color=\"gray\" size=\"3\"><strong>以下内容干货满满，跟上步伐吧~</strong></font></p>\n<hr color=\"#000000\" size='1\"'/>\n<p><strong>作者介绍：</strong></p>\n<blockquote>\n<p>🎓 <strong>作者：</strong> 热爱编程不起眼的小人物🐐<br/> 🔎<strong>作者的Gitee：</strong><a href=\"https://gitee.com/Dream_Y-ocean\">代码仓库</a><br/> 📌<strong>系列文章&amp;专栏推荐：</strong></p>\n<ol><li> <p><a href=\"https://blog.csdn.net/qq_62817113/category_11605818.html?spm=1001.2014.3001.5482\">🐶《刷题特辑》—实现由小白至入门者的学习记录</a></p> </li><li> <p><a href=\"https://blog.csdn.net/qq_62817113/category_11534485.html\">😺C语言学习【小白-&gt;入门】_全过程_专栏</a></p> </li></ol>\n<p>📒<strong>我和大家一样都是初次踏入这个美妙的“元”宇宙🌏 希望在输出知识的同时，也能与大家共同进步、无限进步</strong>🌟</p>\n</blockquote>\n<hr color=\"#000000\" size='1\"'/>\n<blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>📌导航小助手📌</h3>\n<ul><li><a href=\"#_42\">💡本章重点</a></li><li><a href=\"#bb_56\"><b>🍞一.</b>线性表</a></li><li><ul><li><a href=\"#bb_60\"><b>🥐Ⅰ.</b>什么是线性表</a></li><li><a href=\"#bb_73\"><b>🥯Ⅱ.</b>总结</a></li></ul>\n</li><li><a href=\"#bb_81\"><b>🍞二.</b>顺序表</a></li><li><ul><li><a href=\"#bb_85\"><b>🥐Ⅰ.</b>什么是顺序表</a></li><li><a href=\"#bb_106\"><b>🥐Ⅱ.</b>静态版顺序表</a></li><li><a href=\"#bb_138\"><b>🥐Ⅲ.</b>动态版顺序表</a></li></ul>\n</li><li><a href=\"#bb_175\"><b>🍞三.</b>顺序表插口实现</a></li><li><ul><li><a href=\"#bb_213\"><b>🥐Ⅰ.</b>初始化顺序表</a></li><li><a href=\"#bb_233\"><b>🥐Ⅱ.</b>检查是否要扩容</a></li><li><a href=\"#bb_280\"><b>🥐Ⅲ.</b>尾插顺序表</a></li><li><a href=\"#bb_306\"><b>🥐Ⅳ.</b>头插顺序表</a></li><li><a href=\"#bb_339\"><b>🥐Ⅴ.</b>尾删顺序表</a></li><li><a href=\"#bb_366\"><b>🥐Ⅵ.</b>头删顺序表</a></li><li><a href=\"#bb_402\"><b>🥐Ⅶ.</b>查找元素</a></li><li><a href=\"#bb_438\"><b>🥐Ⅷ.</b>修改元素</a></li><li><a href=\"#bb_463\"><b>🥐Ⅸ.</b>任意位置前插入元素</a></li><li><ul><li><a href=\"#b1b_505\"><b>🧇1.</b>【复用】头插函数</a></li><li><a href=\"#b2b_517\"><b>🧇2.</b>【复用】尾插函数</a></li></ul>\n</li><li><a href=\"#bb_529\"><b>🥐Ⅹ.</b>任意位置删除元素</a></li><li><ul><li><a href=\"#b1b_565\"><b>🧇1.</b>【复用】头删函数</a></li><li><a href=\"#b2b_575\"><b>🧇2.</b>【复用】尾删函数</a></li></ul>\n</li><li><a href=\"#bb_585\"><b>🥐Ⅺ.</b>打印顺序表</a></li><li><a href=\"#bb_612\"><b>🥐Ⅻ.</b>销毁顺序表</a></li><li><a href=\"#bXb_636\"><b>🥯XⅢ.</b>总结</a></li></ul>\n</li><li><a href=\"#bb_646\"><b>🍞四.</b>顺序表的优缺点</a></li><li><a href=\"#_666\">🫓总结</a></li></ul>\n</div>\n<p></p>\n</blockquote>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_42\"></a>💡本章重点</h1>\n<ul><li> <p>线性表&amp;顺序表</p> </li><li> <p>顺序表接口的实现</p> </li><li> <p>顺序表的优缺点</p> </li></ul>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"bb_56\"></a><b>🍞一.</b>线性表</h1>\n<br/>\n<h2><a id=\"bb_60\"></a><b>🥐Ⅰ.</b>什么是线性表</h2>\n<ul><li> <p>线性表： 是<code>n</code>个具有相同特性的数据元素的有限序列</p> </li><li> <p>线性表：是一种在实际中广泛使用的数据结构，常见的线性表：顺序表、链表、栈、队列、字符串…</p> </li><li> <p>线性表：在<code>逻辑</code>上是<strong>线性结构</strong>，也就说是<strong>连续的一条直线</strong>。但是在<code>物理结构</code>上<strong>并不一定是连续的</strong>【线性表在<code>物理</code>上存储时，通常以<code>数组</code>和<code>链式结构</code>的形式存储】</p> </li></ul>\n<p>❗对于<code>数据结构</code>,<code>C语言</code>提供了<code>结构体</code>类型给我们使用，让我们更方便的整合一个结构，去利用<code>结构体</code>实现数据结构</p>\n<h2><a id=\"bb_73\"></a><b>🥯Ⅱ.</b>总结</h2>\n<p>✨综上：就是线性表的概念啦~</p>\n<p>➡️简单来说：线性表是一种常见的数据结构，它在逻辑结构上呈连续直线结构，但物理上就不一定是<code>连续</code>的啦</p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"bb_81\"></a><b>🍞二.</b>顺序表</h1>\n<br/>\n<h2><a id=\"bb_85\"></a><b>🥐Ⅰ.</b>什么是顺序表</h2>\n<p>💡<strong>概念及结构：</strong></p>\n<ul><li> <p>1️⃣顺序表是用一段<code>物理地址</code>连续的存储单元依次存储数据元素的线性结构</p> </li><li> <p>2️⃣一般情况下采用<code>数组</code>存储。</p> </li><li> <p>3️⃣在数组上完成数据的增删查改。</p> </li></ul>\n<p>➡️<strong>简单来说：</strong></p>\n<p>顺序表可以理解为就是数组，因为数组的元素存放，在物理结构和逻辑结构上都是连续，呈直线结构的</p>\n<p>但有<strong>一点不同</strong>就是：顺序表之所以称为顺序表，是因为里面的元素是按照<code>顺序</code>存放的【而数组内可随意存放】</p>\n<p>✨有了以上对<code>顺序表</code>的概念后，我们便可以实现它啦~</p>\n<br/>\n<h2><a id=\"bb_106\"></a><b>🥐Ⅱ.</b>静态版顺序表</h2>\n<p>💡<strong>静态版：</strong> 即顺序表的空间大小不会随存储的数据个数而发生空间大小的变化【即固定的存储空间】</p>\n<p>➡️<strong>简单来说：</strong> 使用<code>定长数组</code>存储</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">N</span> <span class=\"token expression\"><span class=\"token number\">100</span></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> SLDataType<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">SeqList</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tSLDataType array<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定长数组</span>\n\t<span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 有效数据的个数</span>\n\t\n<span class=\"token punctuation\">}</span>SeqList<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>👉<strong>由上述我们可知：</strong></p>\n<ul><li> <p>将存储的数据类型重命名为<code>SLDataType</code>，这样有利于后续对顺序表的维护，更改存储的数据类型</p> </li><li> <p><code>size_t size</code>是设置来<code>记录</code>顺序表内已存储的数据个数</p> </li></ul>\n<blockquote>\n<p><img alt=\"这里是引用\" src=\"..\\..\\static\\image\\3c72e15160aa4d8ca114ca0d80c3b5f0.png\"/></p>\n</blockquote>\n<p>❗<strong>缺点：</strong> 不能在存储的过程中进行<code>增容</code></p>\n<p>✨那么为了让我们的<code>顺序表</code>更加灵活，我们便可以将其写成<code>动态版</code>的</p>\n<br/>\n<h2><a id=\"bb_138\"></a><b>🥐Ⅲ.</b>动态版顺序表</h2>\n<p>💡<strong>静态版：</strong> 即实现了对顺序表内空间进行动态的增长，简称<code>增容</code></p>\n<p>➡️<strong>简单来说：</strong> 使用<code>动态开辟</code>的数组存储</p>\n<blockquote>\n<p><strong>Tips:</strong> 关于<code>动态开辟</code>不熟悉的同学可以跳转去🔍<a href=\"https://dream-yocean.blog.csdn.net/article/details/124055537\">【C语言】动态内存管理 [进阶篇_ 复习专用]</a>查看呀</p>\n</blockquote>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> SLDataType<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">SeqList</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tSLDataType<span class=\"token operator\">*</span> array<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指向动态开辟的数组</span>\n\t<span class=\"token class-name\">size_t</span> size <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 有效数据个数</span>\n\t<span class=\"token class-name\">size_t</span> capicity <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 容量空间的大小</span>\n\t\n<span class=\"token punctuation\">}</span>SeqList<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>👉<strong>由上述我们可知：</strong></p>\n<p>基本实现和静态版没什么不同，唯独将<code>定长数组</code>，改为可以接收动态开辟内存地址的<code>指针</code>，且增加了一个变量</p>\n<ul><li> <p><code>SLDataType* array</code>用来指向动态开辟的数组</p> </li><li> <p><code>size_t capicity</code>是用来记录动态开辟的数组的<code>总大小</code></p> </li></ul>\n<blockquote>\n<p><img alt=\"这里是引用\" src=\"..\\..\\static\\image\\aa0501dae2d04224854499659d97eee1.png\"/></p>\n</blockquote>\n<p>✨<strong>综上：</strong></p>\n<ul><li> <p>静态顺序表只适用于确定知道需要存多少数据的场景。静态顺序表的定长数组导致N定大了，空间开多了浪费，开少了不够用。</p> </li><li> <p>所以现实中基本都是使用动态顺序表，根据需要动态的分配空间大小，所以下面我们实现<code>动态顺序表</code></p> </li></ul>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"bb_175\"></a><b>🍞三.</b>顺序表插口实现</h1>\n<blockquote>\n<p>对于数据结构的接口实现，一般围绕<code>增</code>、<code>删</code>、<code>查</code>、<code>改</code>的内容</p>\n</blockquote>\n<p>💡<strong>如下的实现围绕此原码进行：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> SeqDataType<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">SeqList</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//int*a;</span>\n\tSeqDataType<span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">;</span>\n\t\n<span class=\"token punctuation\">}</span>SeqList<span class=\"token punctuation\">,</span> SEQ<span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">TestSeqList1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tSeqList s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">TestSeqList1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//顺序表一般不要自己去动它</span>\n\t<span class=\"token comment\">//而是交给函数去 初始化，去操纵</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"bb_213\"></a><b>🥐Ⅰ.</b>初始化顺序表</h2>\n<p><strong>1️⃣初始化的函数声明：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SeqListInit</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>2️⃣初始化函数的实现：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SeqListInit</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tpq<span class=\"token operator\">-&gt;</span> a <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tpq<span class=\"token operator\">-&gt;</span> capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span>；\n\tpq<span class=\"token operator\">-&gt;</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"bb_233\"></a><b>🥐Ⅱ.</b>检查是否要扩容</h2>\n<p>❗往后实现的接口都需要<code>检查顺序表是否需要扩容</code>，那我们便可以将其集成为一个函数，方便后续调用</p>\n<p>👉<strong>原理：</strong> 检查顺序表内的空间大小是否足够大</p>\n<ul><li>不够，则<code>增容</code></li></ul>\n<p>💥<strong>特别注意：</strong></p>\n<ul><li> <p>一般增容的大小：<strong>以2倍进行增容</strong></p> </li><li> <p>这样增下来不会导致增的太大，从而浪费空间</p> </li></ul>\n<p><strong>1️⃣检查扩容的函数声明：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SeqCheckCapacity</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>2️⃣检查扩容函数的实现：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SeqCheckCapacity</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//满了，需要增容</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pq<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">==</span> pq<span class=\"token operator\">-&gt;</span>capacity<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//通常 增容2倍</span>\n\t\t pq<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">4</span> <span class=\"token operator\">:</span> pq<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t \n\t\t<span class=\"token keyword\">int</span> newcapacity <span class=\"token operator\">=</span> pq<span class=\"token operator\">-&gt;</span>capacity<span class=\"token punctuation\">;</span>\n\t\t\n\t\tSeqDataType<span class=\"token operator\">*</span> newA <span class=\"token operator\">=</span> <span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>pq<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SeqDataType<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>newcapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newA <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"增容失败\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tpq<span class=\"token operator\">-&gt;</span>a <span class=\"token operator\">=</span> newA<span class=\"token punctuation\">;</span>\n\t\tpq<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">=</span> newcapacity<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"bb_280\"></a><b>🥐Ⅲ.</b>尾插顺序表</h2>\n<p>👉<strong>简单来说：</strong> 对顺序表进行尾部插入数据</p>\n<p>➡️<strong>实现：</strong> 直接访问顺序表的最后一个元素进行插入</p>\n<p><strong>1️⃣尾插的函数声明：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPushBack</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">,</span> SeqDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>2️⃣尾插函数的实现：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPushBack</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">,</span> SeqDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//检查空间大小</span>\n\t<span class=\"token function\">SeqCheckCapacity</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tpq<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>pq<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\tpq<span class=\"token operator\">-&gt;</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"bb_306\"></a><b>🥐Ⅳ.</b>头插顺序表</h2>\n<p>👉<strong>简单来说：</strong> 对顺序表进行头部插入数据</p>\n<p>➡️<strong>实现：</strong> 需要将顺序表整体往后移动，空出头部一个位置给插入</p>\n<p><strong>1️⃣头插的函数声明：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPushFront</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">,</span> SeqDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>2️⃣头插函数的实现：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPushFront</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">,</span> SeqDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">SeqCheckCapacity</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> pq<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tpq<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>end <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pq<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tend<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tpq<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\n\tpq<span class=\"token operator\">-&gt;</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"bb_339\"></a><b>🥐Ⅴ.</b>尾删顺序表</h2>\n<p>👉<strong>简单来说：</strong> 对顺序表进行删除最后一个数据</p>\n<p>➡️<strong>实现：</strong> 直接将记录<code>数组有效个数</code>的变量<code>size</code>减减即可，这样就访问不到了</p>\n<p>❗没必要对要删除的这个元素进行置空等等，因为不影响【因为当后面如果尾插的话，就会直接覆盖原来的数据了~】</p>\n<p>💥<strong>特别注意：</strong> 如果顺序表只剩下一个元素的时候，就不能执行<code>尾删</code>了</p>\n<p><strong>1️⃣尾删的函数声明：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPopBack</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>2️⃣尾删函数的实现：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPopBack</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pq<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tpq<span class=\"token operator\">-&gt;</span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"bb_366\"></a><b>🥐Ⅵ.</b>头删顺序表</h2>\n<p>👉<strong>简单来说：</strong> 对顺序表进行删除第一个数据</p>\n<p>➡️<strong>实现：</strong> 需要将顺序表整体前移数据，覆盖第一位数据即达到删除的目的</p>\n<p>💥<strong>特别注意：</strong> 如果顺序表只剩下一个元素的时候，就不能执行<code>头删</code>了</p>\n<p><strong>1️⃣头删的函数声明：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPopFront</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>2️⃣头删函数的实现：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPopFront</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pq<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> begin <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>begin <span class=\"token operator\">&lt;</span> pq<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tpq<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>begin<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pq<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>begin<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tbegin<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tpq<span class=\"token operator\">-&gt;</span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"bb_402\"></a><b>🥐Ⅶ.</b>查找元素</h2>\n<p>👉<strong>简单来说：</strong> 对顺序表进行查找所需的元素</p>\n<p>➡️<strong>实现：</strong> 遍历顺序表一一比较查找是否有我们想要的元素</p>\n<ul><li> <p>没有,则返回<code>-1</code></p> </li><li> <p>有，则返回元素的<code>下标</code>（若有多个符合要查找的元素，则返回优先找到的元素的下标）</p> </li></ul>\n<p><strong>1️⃣查找元素的函数声明：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">SeqListFind</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span>pq<span class=\"token punctuation\">,</span> SeqDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>2️⃣查找元素函数的实现：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">SeqListFind</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span>pq<span class=\"token punctuation\">,</span> SeqDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pq<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pq<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>  \n<span class=\"token comment\">//如果又 多个 x，返回的是 优先找到的那个x的 下标</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"bb_438\"></a><b>🥐Ⅷ.</b>修改元素</h2>\n<p>👉<strong>简单来说：</strong> 对顺序表的某个位置的元素进行修改</p>\n<p>➡️<strong>实现：</strong> 直接访问想要修改的元素的下标进行修改</p>\n<p>💥<strong>特别注意：</strong> 修改元素的下标要在顺序表有效个数的范围内</p>\n<p><strong>1️⃣修改元素的函数声明：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SeqListModify</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span>pq<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span> SeqDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>2️⃣修改元素函数的实现：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SeqListModify</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span>pq<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span> SeqDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> pos <span class=\"token operator\">&lt;</span> pq<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tpq<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"bb_463\"></a><b>🥐Ⅸ.</b>任意位置前插入元素</h2>\n<p>👉<strong>简单来说：</strong> 对顺序表的某个位置前进行插入</p>\n<p>➡️<strong>实现：</strong> 将从顺序表中要插入的位置开始，往后原有的元素整体往后移动，腾出空位来插入</p>\n<p>💥<strong>特别注意：</strong> 插入的位置要在顺序表有效个数的范围内</p>\n<p><strong>1️⃣任意位置插入元素的函数声明：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SeqListInsert</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span>pq<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span> SeqDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>2️⃣任意位置插入元素函数的实现：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SeqListInsert</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span>pq<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span> SeqDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">aseert</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> pos <span class=\"token operator\">&lt;</span> pq<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//判断是否需要 扩容</span>\n\t<span class=\"token function\">SeqCheckCapacity</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> pq<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">&gt;=</span> pos<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tpq<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>end<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pq<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tend<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tpq<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\n\tpq<span class=\"token operator\">-&gt;</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>💡有了<code>任意位置插入元素函数</code>的实现，我们的<code>头插</code>、<code>尾插</code>函数便可以复用这个函数来实现了</p>\n<h3><a id=\"b1b_505\"></a><b>🧇1.</b>【复用】头插函数</h3>\n<p><strong>👉复用</strong><code>任意位置插入函数</code><strong>的</strong><code>头插函数</code><strong>的实现：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPushFront</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">,</span> SeqDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">SeqListInsert</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"b2b_517\"></a><b>🧇2.</b>【复用】尾插函数</h3>\n<p><strong>👉复用</strong><code>任意位置插入函数</code><strong>的</strong><code>尾插函数</code><strong>的实现：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPushBack</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">,</span> SeqDataType x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">SeqListInsert</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">,</span> pq<span class=\"token operator\">-&gt;</span>size<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"bb_529\"></a><b>🥐Ⅹ.</b>任意位置删除元素</h2>\n<p>👉<strong>简单来说：</strong> 对顺序表的某个位置进行删除</p>\n<p>➡️<strong>实现：</strong> 将从顺序表中要删除的元素开始，往后所有的元素整体往前移动，后面的元素覆盖要删除的位置的元素，以达到<code>删除</code>的目的</p>\n<p>💥<strong>特别注意：</strong> 删除的位置要在顺序表有效个数的范围内</p>\n<p><strong>1️⃣任意位置删除元素的函数声明：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SeqListErase</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span>pq<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>2️⃣任意位置删除元素函数的实现：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SeqListErase</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span>pq<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">aseert</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> pos <span class=\"token operator\">&lt;</span> pq<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> begin <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>begin <span class=\"token operator\">&lt;=</span> pq<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tpq<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>begin<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pq<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>begin <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t\tbegin<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tpq<span class=\"token operator\">-&gt;</span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>💡有了<code>任意位置删除元素函数</code>的实现，我们的<code>头删</code>、<code>尾删</code>函数便可以复用这个函数来实现了</p>\n<h3><a id=\"b1b_565\"></a><b>🧇1.</b>【复用】头删函数</h3>\n<p><strong>👉复用</strong><code>任意位置删除函数</code><strong>的</strong><code>头删函数</code><strong>的实现：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPopFront</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">SeqListErase</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"b2b_575\"></a><b>🧇2.</b>【复用】尾删函数</h3>\n<p><strong>👉复用</strong><code>任意位置删除函数</code><strong>的</strong><code>尾删函数</code><strong>的实现：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPopBack</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">SeqListErase</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">,</span> pq<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"bb_585\"></a><b>🥐Ⅺ.</b>打印顺序表</h2>\n<p>👉<strong>简单来说：</strong> 对顺序表进行组个打印</p>\n<p>➡️<strong>实现：</strong> 遍历顺序表一一打印即可</p>\n<p><strong>1️⃣打印顺序表的函数声明：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPrint</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>2️⃣打印顺序表函数的实现：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SeqListPrint</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pq<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> pq<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"bb_612\"></a><b>🥐Ⅻ.</b>销毁顺序表</h2>\n<p>👉<strong>简单来说：</strong> 对顺序表进行销毁，释放内存空间</p>\n<p>➡️<strong>实现：</strong> 直接将顺序表中的成员变量置为<code>0</code>，且释放顺序表的空间即可</p>\n<p><strong>1️⃣销毁顺序表的函数声明：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SeqListDestory</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>2️⃣销毁顺序表函数的实现：</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">SeqListDestory</span><span class=\"token punctuation\">(</span>SeqList<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pq<span class=\"token operator\">-&gt;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpq<span class=\"token operator\">-&gt;</span>a <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tpq<span class=\"token operator\">-&gt;</span>capacity <span class=\"token operator\">=</span> pq<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"bXb_636\"></a><b>🥯XⅢ.</b>总结</h2>\n<p>✨综上：就是顺序表接口实现的内容啦~</p>\n<p>➡️相信大家对<code>顺序表</code>有不一样的看法了吧🧡</p>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"bb_646\"></a><b>🍞四.</b>顺序表的优缺点</h1>\n<p>🔵<strong>优点：</strong></p>\n<ul><li>可以按下标进行<code>随机访问</code></li></ul>\n<p>🔴<strong>缺点：</strong></p>\n<ul><li> <p><code>动态增容</code>有<code>性能缺陷</code>【且伴随着一定的空间浪费 ，有内存碎片】</p> </li><li> <p>头部或者中间插入删除数据，需要挪动数据，效率比较低【<code>O(N)</code>】</p> </li></ul>\n<hr color=\"#000000\" size='1\"'/>\n<h1><a id=\"_666\"></a>🫓总结</h1>\n<p>综上，我们基本了解了数据结构中的 <font color=\"#FF69B4\"><strong>“顺序表”</strong> </font> 🍭 <font color=\"black\">的知识啦~~</font></p>\n<p>恭喜你的内功又双叒叕得到了提高！！！</p>\n<p>感谢你们的阅读😆</p>\n<p>后续还会继续更新💓，欢迎持续关注📌哟~</p>\n<p>💫<strong>如果有错误❌，欢迎指正呀</strong>💫</p>\n<p><strong>✨如果觉得收获满满，可以点点赞👍支持一下哟~✨</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\180aeac4a0134c779c66a016ea0c8fb9.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-07-14 22:22:08", "summary": "前情提要恭喜大家成功完成语言，入门了这美丽的世界呀本章节就开始进入数据结构啦接下来我们即将进入一个全新的空间，对代码有一个全新的视角以下的内容一定会让你对数据结构有一个颠覆性的认识哦！！！以下内容以语"}