{"blogid": "125129195", "writerAge": "码龄6年", "writerBlogNum": "621", "writerCollect": "16511", "writerComment": "862", "writerFan": "86716", "writerGrade": "8级", "writerIntegral": "42777", "writerName": "bitcarmanlee", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125129195.jpg", "writerRankTotal": "99", "writerRankWeekly": "380", "writerThumb": "5382", "writerVisitNum": "8397968", "blog_read_count": "3104", "blog_time": "于 2022-06-05 10:34:00 发布", "blog_title": "c++ 字符串与数字相互转换", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>日常编码过程中，字符串与数字进行相互转换是常见的需求，下面我们总结一下在c++中，字符串与数字的转换都是如何来进行操作的。</p>\n<h2><a id=\"1c_2\"></a>1.字符串转数字c语言风格</h2>\n<p>首先看看，在c语言的风格中，我们怎么做到把字符串转为数字。</p>\n<pre><code>void func1() {\n    string s1 = \"123\";\n    string s2 = \"123.1\";\n    int i = atoi(s1.c_str());\n    double d = atof(s2.c_str());\n    cout&lt;&lt;i&lt;&lt;endl;\n    cout&lt;&lt;d&lt;&lt;endl;\n}\n</code></pre>\n<p>注意上述代码是在namespace为std的环境中运行。<br/> atoi, atof函数，均在stdlib.h中进行了声明，在头文件中，其声明的函数原型为</p>\n<pre><code>double\t atof(const char *);\nint\t atoi(const char *);\nlong\t atol(const char *);\n</code></pre>\n<p>不难看出，上面这些方法的输入均为const char *，即字符串，得到的输出为转化以后的各种数值类型。</p>\n<pre><code>123\n123.1\n</code></pre>\n<h2><a id=\"2c_31\"></a>2.字符串转数字c++风格</h2>\n<pre><code>void func2() {\n    string s1 = \"456\";\n    string s2 = \"456.2\";\n    int i = stoi(s1);\n    long l = stol(s1);\n    float f = stof(s2);\n    double d = stod(s2);\n    cout&lt;&lt;i&lt;&lt;endl;\n    cout&lt;&lt;l&lt;&lt;endl;\n    cout&lt;&lt;f&lt;&lt;endl;\n    cout&lt;&lt;d&lt;&lt;endl;\n}\n</code></pre>\n<p>上面代码也是在namespace为std的环境下运行</p>\n<p>这些函数均位于string类中，函数签名原型为</p>\n<pre><code>_LIBCPP_FUNC_VIS int                stoi  (const string&amp; __str, size_t* __idx = 0, int __base = 10);\n_LIBCPP_FUNC_VIS long               stol  (const string&amp; __str, size_t* __idx = 0, int __base = 10);\n_LIBCPP_FUNC_VIS unsigned long      stoul (const string&amp; __str, size_t* __idx = 0, int __base = 10);\n_LIBCPP_FUNC_VIS long long          stoll (const string&amp; __str, size_t* __idx = 0, int __base = 10);\n_LIBCPP_FUNC_VIS unsigned long long stoull(const string&amp; __str, size_t* __idx = 0, int __base = 10);\n\n_LIBCPP_FUNC_VIS float       stof (const string&amp; __str, size_t* __idx = 0);\n_LIBCPP_FUNC_VIS double      stod (const string&amp; __str, size_t* __idx = 0);\n_LIBCPP_FUNC_VIS long double stold(const string&amp; __str, size_t* __idx = 0);\n</code></pre>\n<p>最后代码运行结果为</p>\n<pre><code>456\n456\n456.2\n456.2\n</code></pre>\n<h2><a id=\"3_72\"></a>3.数字转字符串</h2>\n<p>上面是字符串转数字，接下来再看看数字如何转字符串。</p>\n<pre><code>void func3() {\n    int i = 123;\n    float f = 1.234;\n    double d = 2.012;\n    cout&lt;&lt;to_string(i)&lt;&lt;endl;\n    cout&lt;&lt;to_string(f)&lt;&lt;endl;\n    cout&lt;&lt;to_string(d)&lt;&lt;endl;\n}\n</code></pre>\n<p>c++11以后，string类中提供了to_string方法，可以将各种类型数字转成字符串。<br/> 上面的代码输出结果为：</p>\n<pre><code>123\n1.234000\n2.012000\n</code></pre>\n<p>输出的结果貌似与我们预期有差异，很明显是与浮点数精度相关。</p>\n<p>为了控制浮点数的精度，可以使用ostringstream来控制精度。</p>\n<pre><code>#include&lt;sstream&gt;\n#include &lt;iomanip&gt;\nusing namespace std;\n\nvoid func4() {\n    double d = 3.14159265358979;\n    cout &lt;&lt; d &lt;&lt; endl;\n    stringstream ss;\n    ss.precision(10);\n    ss &lt;&lt; d;\n    cout &lt;&lt; ss.str() &lt;&lt; endl;\n}\n</code></pre>\n<p>上面的代码运行，结果为</p>\n<pre><code>3.14159\n3.141592654\n</code></pre>\n<p>主要是通过precison控制浮点数精度</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-06-05 10:34:00", "summary": "日常编码过程中，字符串与数字进行相互转换是常见的需求，下面我们总结一下在中，字符串与数字的转换都是如何来进行操作的。字符串转数字语言风格首先看看，在语言的风格中，我们怎么做到把字符串转为数字。注意上述"}