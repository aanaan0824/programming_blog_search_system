{"blogid": "124305372", "writerAge": "码龄1年", "writerBlogNum": "6", "writerCollect": "39", "writerComment": "2", "writerFan": "6", "writerGrade": "1级", "writerIntegral": "76", "writerName": "疯了的猪丶", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124305372.jpg", "writerRankTotal": "115299", "writerRankWeekly": "488458", "writerThumb": "14", "writerVisitNum": "2950", "blog_read_count": "2826", "blog_time": "已于 2022-07-06 20:02:29 修改", "blog_title": "2022 MathorCup 数学建模B题思路解析", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><a href=\"#Mathorcup_B_6\">Mathorcup B题题目介绍</a></li><li><a href=\"#_10\">一、问题一</a></li><li><ul><li><a href=\"#1_12\">1、地图模型</a></li><li><a href=\"#2_16\">2、路径规划</a></li><li><a href=\"#3_106\">3、任务分配调度模型</a></li></ul>\n</li><li><a href=\"#_112\">二、问题二</a></li><li><a href=\"#_122\">三、问题三</a></li><li><ul><li><a href=\"#1_124\">1、分析</a></li><li><ul><li><a href=\"#1_128\">（1）点冲突</a></li><li><a href=\"#2_140\">（2）边冲突</a></li></ul>\n</li><li><a href=\"#2_147\">2、冲突处理及模型评价</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<hr/>\n<h2><a id=\"Mathorcup_B_6\"></a>Mathorcup B题题目介绍</h2>\n<p>​ B题无人仓的搬运机器人调度问题本题考虑在无人仓内的仓库管理问题之一，搬运机器人 AGV 的调度问 题。更多的背景介绍请参看附件-背景介绍。对于无人仓来说，仓库的地图 模型可以简化为图的数据结构。</p>\n<h2><a id=\"_10\"></a>一、问题一</h2>\n<h3><a id=\"1_12\"></a>1、地图模型</h3>\n<p>​ 题目中已经给出了地图的栅格模型，然后在题目给的附件里也有地图数据（map.csv），所以可以用Matlab建立一个栅格地图模型，之后再在这个模型基础上面进行路径规划，进行仿真模拟。</p>\n<h3><a id=\"2_16\"></a>2、路径规划</h3>\n<p>​ 现在有较多的路径规划算法，但在AGV和仓储搬运路径问题上常用的有A*算法、Dijkstra算法，在本题中可以选择A*算法、Dijkstra算法来计算AGV路径规划模型，但在本题中，从结果看来，A*算法是优于Dijkstra算法的，所以可以直接选用A*算法。</p>\n<blockquote>\n<p>A*算法的核心部分（Matlab）</p>\n</blockquote>\n<pre><code class=\"prism language-matlab\">%% 预处理\n% 初始化closeList\ncloseList = start_node;\ncloseList_path = {start_node,start_node};\ncloseList_cost = 0;\nchild_nodes = child_nodes_cal(start_node,  m, n, obs, closeList); %子节点搜索函数 \n\n% 初始化openList\nopenList = child_nodes;\nfor i = 1:size(openList,1)\n    openList_path{i,1} = openList(i,:);\n    openList_path{i,2} = [start_node;openList(i,:)];%从初始点到第i个子节点\nend\n\nfor i = 1:size(openList, 1)\n    g = norm(start_node - openList(i,1:2));%norm求范数，返回最大奇异值；abs求绝对值\n    h = abs(target_node(1) - openList(i,1)) + abs(target_node(2) - openList(i,2));\n    %终点横坐标距离加纵坐标距离\n    f = g + h;\n    openList_cost(i,:) = [g, h, f];\nend\n\n%% 开始搜索\n% 从openList开始搜索移动代价最小的节点\n[~, min_idx] = min(openList_cost(:,3));%输出openlist_cost表中最小值的位置\nparent_node = openList(min_idx,:);%父节点为代价最小节点\n\n\n%% 进入循环\nflag = 1;\nwhile flag   \n    \n    % 找出父节点的忽略closeList的子节点\n    child_nodes = child_nodes_cal(parent_node,  m, n, obs, closeList); \n    \n    % 判断这些子节点是否在openList中，若在，则比较更新；没在则追加到openList中\n    for i = 1:size(child_nodes,1)\n        child_node = child_nodes(i,:);\n        [in_flag,openList_idx] = ismember(child_node, openList, 'rows');%ismember函数表示子节点在open表中则返回1，判断flag,输出此子节点在openlist表中的位置\n        g = openList_cost(min_idx, 1) + norm(parent_node - child_node);%按照新父节点计算此子节点的g,h值\n        h = abs(child_node(1) - target_node(1)) + abs(child_node(2) - target_node(2));\n        f = g+h;\n        \n        if in_flag   % 若在，比较更新g和f        \n            if g &lt; openList_cost(openList_idx,1)\n                openList_cost(openList_idx, 1) = g;%将openlist_cost表中第id个位置的第一个数更新为以新父节点计算的g值\n                openList_cost(openList_idx, 3) = f;\n                openList_path{openList_idx,2} = [openList_path{min_idx,2}; child_node];\n            end\n        else         % 若不在，追加到openList\n            openList(end+1,:) = child_node;\n            openList_cost(end+1, :) = [g, h, f];\n            openList_path{end+1, 1} = child_node;\n            openList_path{end, 2} = [openList_path{min_idx,2}; child_node];\n        end\n    end\n   \n    \n    % 从openList移除移动代价最小的节点到 closeList\n    closeList(end+1,: ) =  openList(min_idx,:);\n    closeList_cost(end+1,1) =   openList_cost(min_idx,3);\n    closeList_path(end+1,:) = openList_path(min_idx,:);\n    openList(min_idx,:) = [];%openlist表中已跳出的最小值位置设为空\n    openList_cost(min_idx,:) = [];\n    openList_path(min_idx,:) = [];\n \n    % 重新搜索：从openList搜索移动代价最小的节点（重复步骤）\n    [~, min_idx] = min(openList_cost(:,3));\n    parent_node = openList(min_idx,:);\n    \n    % 判断是否搜索到终点\n    if parent_node == target_node\n        closeList(end+1,: ) =  openList(min_idx,:);\n        closeList_cost(end+1,1) =   openList_cost(min_idx,1);\n        closeList_path(end+1,:) = openList_path(min_idx,:);\n        flag = 0;\n    end\nend\n\n</code></pre>\n<h3><a id=\"3_106\"></a>3、任务分配调度模型</h3>\n<p>​ 通过遍历两个附件（订单、AGV）去选择挑选小车，利用上述的算法去计算路径的长度，之后挑选出路径最短的小车与任务，给AGV进行任务分配。</p>\n<blockquote>\n<p>注意：一个订单可能对应的托盘不止一个，在订单数量需求较大时，可能需要两个托盘甚至更多</p>\n</blockquote>\n<h2><a id=\"_112\"></a>二、问题二</h2>\n<p>​ 在这题中，可以加入遗传蚁群算法去优化拣货分区模型，之后建立多目标规划，可以引入几个指标，例如：转弯次数、路径长度、拣货台拣货数量平均度、拥挤度、拣货效率几个方面进行规划，下面是做出的分区结果：<br/> <img alt=\"分区结果\" src=\"..\\..\\static\\image\\7ed74453f68c4ac5b10b3db998b41d52.png\"/></p>\n<blockquote>\n<p>可以考虑建立多种分区结果，然后进行对比选取最优</p>\n</blockquote>\n<h2><a id=\"_122\"></a>三、问题三</h2>\n<h3><a id=\"1_124\"></a>1、分析</h3>\n<p>​ 冲突问题可以选用时间窗或者冲突搜索，去调整之前模型路径，把冲突情况分成边冲突和点冲突这两种情况：</p>\n<h4><a id=\"1_128\"></a>（1）点冲突</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c740bde9b1f841a6a90b643579e6d322.png\"/></p>\n<blockquote>\n<p>节点冲突</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a10078e3ed4243dd9e1fb20865e2e76b.png\"/></p>\n<blockquote>\n<p>相向冲突</p>\n</blockquote>\n<h4><a id=\"2_140\"></a>（2）边冲突</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ca3146e6e28849c9bbd70d6c53bb7655.png\"/></p>\n<blockquote>\n<p>在下一时刻交换位置</p>\n</blockquote>\n<h3><a id=\"2_147\"></a>2、冲突处理及模型评价</h3>\n<p>​ 选用了冲突搜索，计算结果更加优秀，可以用元组去存储冲突数据，建立一个冲突约束树，之后在不断建立下一层，直到没有冲突，此时这条最终路径，作为AGV的执行任务路径。之后可以利用各类指标去对比在一二问中的模型，例如：冲突处理代价（AGV为处理冲突之后多走的路）、转弯次数（可以与一二问中的结果数据进行对比）。<br/> <img alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-vrFJ5Qj5-1650454796775)(C:\\Users\\83411\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220420193029885.png)]\" src=\"..\\..\\static\\image\\6873af1b746644a7913b9fc90a83685c.png\"/></p>\n<blockquote>\n<p>部分数据结果:时间窗和冲突搜索两个模型转弯次数对比</p>\n</blockquote>\n<p>​ 或者如果能做到的话，做出路径热力图去分析不同栅格节点所被走过的次数，对比两者可以分析拥挤度，并且分析死锁次数及类型，在本题中最好不要出现死锁情况，题中已经提出避免死锁，所以模型中应尽量减少死锁情况甚至不出现。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-07-06 20:02:29", "summary": "文章目录题题目介绍一、问题一、地图模型、路径规划、任务分配调度模型二、问题二三、问题三、分析点冲突边冲突、冲突处理及模型评价题题目介绍题无人仓的搬运机器人调度问题本题考虑在无人仓内的仓库管理问题之一，"}