{"blogid": "126283645", "writerAge": "码龄2年", "writerBlogNum": "80", "writerCollect": "5547", "writerComment": "2850", "writerFan": "17329", "writerGrade": "6级", "writerIntegral": "7331", "writerName": "王子周棋洛", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126283645.jpg", "writerRankTotal": "2453", "writerRankWeekly": "180", "writerThumb": "3094", "writerVisitNum": "363709", "blog_read_count": "8401", "blog_time": "于 2022-08-12 05:58:52 发布", "blog_title": "面向对象视角下，理解Docker 镜像容器和仓库", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atelier-sulphurpool-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b0a3c4f49bac4677958efb862dcc9b9b.png\" width=\"2000\"/></p>\n<hr/>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_15\">一、写在前面</a></li><li><a href=\"#__25\">二、镜像【类】 容器【对象】</a></li><li><a href=\"#_78\">三、总结镜像和容器关系</a></li><li><a href=\"#repository_96\">四、仓库（repository）</a></li><li><a href=\"#_116\">五、全文总结</a></li><li><a href=\"#_132\">六、写在最后</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_15\"></a>一、写在前面</h1>\n<p>今天带大家在面向对象的视角下，理解镜像，容器和仓库到底是什么关系，相信大家读完本文一定会有更深刻的理解。</p>\n<p><code>注：面向对象语言有很多，本文基于Java语言进行描述</code></p>\n<h1><a id=\"__25\"></a>二、镜像【类】 容器【对象】</h1>\n<p>首先创建一个类，用来模拟 Docker 中的一个镜像 tomcat8，其中暴露了一个获取版本号和启动的方法</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * 模拟 Docker 中的镜像 Image\n * 假设这个类就是一个tomcat8的镜像\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Tomcat8</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 版本号 8.0</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> version <span class=\"token operator\">=</span> <span class=\"token string\">\"8.0\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 获取版本号</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getVersion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> version<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 启动方法</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tomcat8 running...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>创建了一个tomcat8，相当于docker run tomcat8 获取容器，它是独立的，互不影响的，于是我可以基于类模板再创建一个 tomcat8，这样就获得了两个独立隔离的 tomcat8 服务</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> test <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 相当于Docker中运行了一次镜像，获得了一个容器 container</span>\n        <span class=\"token comment\">// 它是独立的，不互相影响的</span>\n        <span class=\"token class-name\">Tomcat8</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Tomcat8</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 又运行了一次镜像，又获得了一个容器 container</span>\n        <span class=\"token class-name\">Tomcat8</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Tomcat8</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">.</span><span class=\"token function\">getVersion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">.</span><span class=\"token function\">getVersion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t1<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t2<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>看看结果，完全没问题</p>\n<pre><code>8.0\n8.0\nTomcat8 running...\nTomcat8 running...\n</code></pre>\n<h1><a id=\"_78\"></a>三、总结镜像和容器关系</h1>\n<blockquote>\n<p>Docker镜像文件类似于Javaa类模板，容器实例类似于Java中new出来的实例对象</p>\n</blockquote>\n<table><thead><tr><th>Docker</th><th>面向对象</th></tr></thead><tbody><tr><td>容器</td><td>对象</td></tr><tr><td>镜像</td><td>类</td></tr></tbody></table>\n<p>Docker利用容器独立运行一个或一组应用，应用或服务跑再容器里，容器类似一个虚拟化的运行环境，可以把容器看作是一个简易版的Linux环境（包含了root用户权限，进程空间，用户空间和网络等）</p>\n<p>容器是用镜像创建的运行实例，就像面向对象的类模板实例化对象一样，容器为镜像提供了一个隔离的运行环境，它可以被启动、复制、停止、删除，每个容器都相互隔离，保证运行安全。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5b6a4a278be2432fb7908f1cbde59ad3.png\" width=\"2000\"/></p>\n<h1><a id=\"repository_96\"></a>四、仓库（repository）</h1>\n<blockquote>\n<p>仓库（repository）是集中存放镜像文件的</p>\n</blockquote>\n<ul><li>Maven仓库，存放管理各种 jar 包</li><li>github仓库，存放各种git项目</li><li>Docker公司也提供了叫 docker hub的仓库，存放各种镜像模板</li></ul>\n<p>分为 <code>共有仓库</code> 和 <code>私有仓库</code> 两种，官方的仓库地址如下：<code>https://hub.docker.com</code></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ef8203458c0744a6a02ca870b9436e13.png\" width=\"2000\"/></p>\n<p>比如想要获取 mysql 镜像，只需要一行命令就可以获取了</p>\n<pre><code>docker pull mysql\n</code></pre>\n<h1><a id=\"_116\"></a>五、全文总结</h1>\n<p>Docker是一个容器运行载体，或者叫它容器运行的管理者。</p>\n<p>开发者将开发的应用和配置依赖打包好，形成一个可交付的运行环境，这份环境呢，就是Image镜像文件，通过这个镜像文件就能生成Docker容器实例，这个过程可以理解为 Java 通过 new 类模板创建对象。</p>\n<p>镜像文件是容器的模板，Docker 根据镜像文件生成容器实例，同一个镜像文件，可以生成多个同时且互相独立的运行实例。</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ec3e59dca5c04e11ba9d1a580bfa916b.png\" width=\"2000\"/></p>\n<h1><a id=\"_132\"></a>六、写在最后</h1>\n<p>这就是全部内容了，如果觉得写的不错记得点赞支持博主，你的支持是我写原创的不竭动力，更多精彩且关注后看下回讲解，我是小周，期待你的关注👋</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-08-12 05:58:52", "summary": "在这里插入图片描述文章目录一、写在前面二、镜像类容器对象三、总结镜像和容器关系四、仓库五、全文总结六、写在最后一、写在前面今天带大家在面向对象的视角下，理解镜像，容器和仓库到底是什么关系，相信大家读完"}