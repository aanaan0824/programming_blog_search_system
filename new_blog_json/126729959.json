{"blogid": "126729959", "writerAge": "码龄4年", "writerBlogNum": "414", "writerCollect": "3422", "writerComment": "731", "writerFan": "23037", "writerGrade": "7级", "writerIntegral": "10928", "writerName": "刘Java", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126729959.jpg", "writerRankTotal": "1119", "writerRankWeekly": "324", "writerThumb": "1895", "writerVisitNum": "852169", "blog_read_count": "31", "blog_time": "于 2022-09-06 17:38:31 发布", "blog_title": "RocketMQ源码(7)—Producer发送消息源码(1)—发送消息的总体流程【一万字】", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>基于RocketMQ 4.9.3，详细的介绍了Producer发送消息的总体流程的源码，包括生产者重试机制、生产者故障转移机制、VIP通道等知识都会一一介绍。</p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#1_send_76\">1 send源码入口</a></li><li><ul><li><a href=\"#11__78\">1.1 同步消息</a></li><li><a href=\"#12__111\">1.2 单向消息</a></li><li><a href=\"#13__134\">1.3 异步消息</a></li></ul>\n</li><li><a href=\"#2_sendDefaultImpl_196\">2 sendDefaultImpl发送消息实现</a></li><li><ul><li><a href=\"#21_makeSureStateOK_413\">2.1 makeSureStateOK确定生产者服务状态</a></li><li><a href=\"#22_checkMessage_429\">2.2 checkMessage校验消息的合法性</a></li><li><a href=\"#23_tryToFindTopicPublishInfotopic_485\">2.3 tryToFindTopicPublishInfo查找topic的发布信息</a></li><li><a href=\"#24_timesTotal_541\">2.4 计算发送次数timesTotal</a></li><li><a href=\"#25_selectOneMessageQueue_548\">2.5 selectOneMessageQueue选择消息队列</a></li><li><ul><li><a href=\"#251_selectOneMessageQueuemq_635\">2.5.1 selectOneMessageQueue选择一个mq</a></li></ul>\n</li><li><a href=\"#26_sendKernelImpl_684\">2.6 sendKernelImpl发送消息</a></li><li><ul><li><a href=\"#261_findBrokerAddressInPublishbroker_980\">2.6.1 findBrokerAddressInPublish查找broker地址</a></li><li><a href=\"#262_brokerVIPChannelvip_997\">2.6.2 brokerVIPChannel判断vip通道</a></li><li><a href=\"#263_setUniqIDuniqId_1023\">2.6.3 setUniqID生成uniqId</a></li><li><a href=\"#264_tryToCompressMessage_1037\">2.6.4 tryToCompressMessage压缩消息</a></li></ul>\n</li><li><a href=\"#27_updateFaultItem_1071\">2.7 updateFaultItem更新故障表</a></li><li><ul><li><a href=\"#271_computeNotAvailableDuration_1106\">2.7.1 computeNotAvailableDuration计算隔离时间</a></li><li><a href=\"#272_updateFaultItem_1145\">2.7.2 updateFaultItem更新故障表</a></li></ul>\n</li></ul>\n</li><li><a href=\"#3__1180\">3 总结</a></li></ul>\n</div>\n<p></p>\n<p>下面是一个最简单的producer的使用案例：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Producer</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MQClientException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token comment\">/*\n         * Instantiate with a producer group name.\n         */</span>\n        <span class=\"token class-name\">DefaultMQProducer</span> producer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultMQProducer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please_rename_unique_group_name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        producer<span class=\"token punctuation\">.</span><span class=\"token function\">setNamesrvAddr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1:9876\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/*\n         * Launch the instance.\n         */</span>\n        producer<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n\n            <span class=\"token comment\">/*\n             * Create a message instance, specifying topic, tag and message body.\n             */</span>\n            <span class=\"token class-name\">Message</span> msg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Message</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Topic1\"</span> <span class=\"token comment\">/* Topic */</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"TagA\"</span> <span class=\"token comment\">/* Tag */</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello RocketMQ \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RemotingHelper</span><span class=\"token punctuation\">.</span>DEFAULT_CHARSET<span class=\"token punctuation\">)</span> <span class=\"token comment\">/* Message body */</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">/*\n             * Call send message to deliver message to one of brokers.\n             */</span>\n            <span class=\"token class-name\">SendResult</span> sendResult <span class=\"token operator\">=</span> producer<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s%n\"</span><span class=\"token punctuation\">,</span> sendResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">//producer.shutdown();</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>可以看到producer通过调用send方法发送消息，实际上RocketMQ的producer发送消息的模式可以分为三种：</p>\n<ol><li><strong>单向发送</strong>：把消息发向Broker服务器，而不用管消息是否成功发送到Broker服务器，只管发送，不管结果。</li><li><strong>同步发送</strong>：把消息发送给Broker服务器，如果消息成功发送给Broker服务器，能得到Broker服务器的响应结果。</li><li><strong>异步发送</strong>：把消息发送给Broker服务器，如果消息成功发送给Broker服务器，能得到Broker服务器的响应结果。因为是异步发送，发送完消息以后，不用等待，等到Broker服务器的响应调用回调。</li></ol>\n<p>DefaultMQProducer提供了更多的send的重载方法，来实现上面三种发送模式：</p>\n<table><thead><tr><th>模式</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>同步</td><td>SendResult send(Collection msgs)</td><td>同步批量发送消息</td></tr><tr><td></td><td>SendResult send(Collection msgs, long timeout)</td><td>同步批量发送消息</td></tr><tr><td></td><td>SendResult send(Collection msgs, MessageQueue messageQueue)</td><td>向指定的消息队列同步批量发送消息</td></tr><tr><td></td><td>SendResult send(Collection msgs, MessageQueue messageQueue, long timeout)</td><td>向指定的消息队列同步批量发送消息，并指定超时时间</td></tr><tr><td></td><td>SendResult send(Message msg)</td><td>同步单条发送消息</td></tr><tr><td></td><td>SendResult send(Message msg, long timeout)</td><td>同步发送单条消息，并指定超时时间</td></tr><tr><td></td><td>SendResult send(Message msg, MessageQueue mq)</td><td>向指定的消息队列同步发送单条消息</td></tr><tr><td></td><td>SendResult send(Message msg, MessageQueue mq, long timeout)</td><td>向指定的消息队列同步单条发送消息，并指定超时时间</td></tr><tr><td></td><td>SendResult send(Message msg, MessageQueueSelector selector, Object arg)</td><td>向消息队列同步单条发送消息，并指定发送队列选择器</td></tr><tr><td></td><td>SendResult send(Message msg, MessageQueueSelector selector, Object arg, long timeout)</td><td>向消息队列同步单条发送消息，并指定发送队列选择器与超时时间</td></tr><tr><td>异步</td><td>void send(Message msg, MessageQueueSelector selector, Object arg, SendCallback sendCallback)</td><td>向指定的消息队列异步单条发送消息</td></tr><tr><td></td><td>void send(Message msg, MessageQueueSelector selector, Object arg, SendCallback sendCallback, long timeout)</td><td>向指定的消息队列异步单条发送消息，并指定超时时间</td></tr><tr><td></td><td>void send(Message msg, SendCallback sendCallback)</td><td>异步发送消息</td></tr><tr><td></td><td>void send(Message msg, SendCallback sendCallback, long timeout)</td><td>异步发送消息，并指定回调方法和超时时间</td></tr><tr><td></td><td>void send(Message msg, MessageQueue mq, SendCallback sendCallback)</td><td>向指定的消息队列异步单条发送消息，并指定回调方法</td></tr><tr><td></td><td>void send(Message msg, MessageQueue mq, SendCallback sendCallback, long timeout)</td><td>向指定的消息队列异步单条发送消息，并指定回调方法和超时时间</td></tr><tr><td>单向</td><td>void sendOneway(Message msg)</td><td>单向发送消息，不等待broker响应</td></tr><tr><td></td><td>void sendOneway(Message msg, MessageQueue mq)</td><td>单向发送消息到指定队列，不等待broker响应</td></tr><tr><td></td><td>void sendOneway(Message msg, MessageQueueSelector selector, Object arg)</td><td>单向发送消息到队列选择器的选中的队列，不等待broker响应</td></tr></tbody></table>\n<p>上次我们分析了producer的启动流程源码，这次我们分析producer发送消息的源码。</p>\n<h1><a id=\"1_send_76\"></a>1 send源码入口</h1>\n<p>DefaultMQProducer#send方法作为源码分析的入口方法，该方法被使用者直接调用。其内部调用defaultMQProducerImpl#send方法发送消息。</p>\n<h2><a id=\"11__78\"></a>1.1 同步消息</h2>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">SendResult</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">Message</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MQClientException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RemotingException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MQBrokerException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//根据namespace设置topic</span>\n    msg<span class=\"token punctuation\">.</span><span class=\"token function\">setTopic</span><span class=\"token punctuation\">(</span><span class=\"token function\">withNamespace</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">getTopic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//调用defaultMQProducerImpl#send发送消息</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQProducerImpl<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>该方法内部调用defaultMQProducerImpl#send发送消息。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">SendResult</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">Message</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MQClientException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RemotingException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MQBrokerException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//调用另一个send方法，设置超时时间参数，默认3000ms</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQProducer<span class=\"token punctuation\">.</span><span class=\"token function\">getSendMsgTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>该方法内部又调用另一个send方法，设置超时时间参数，默认3000ms。</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * DefaultMQProducerImpl的方法\n *\n * @param msg     消息\n * @param timeout 超时时间，毫秒值\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">SendResult</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Message</span> msg<span class=\"token punctuation\">,</span>\n                       <span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MQClientException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RemotingException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MQBrokerException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//调用另一个sendDefaultImpl方法，设置消息发送模式为SYNC，即同步；设置回调函数为null</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">sendDefaultImpl</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CommunicationMode</span><span class=\"token punctuation\">.</span>SYNC<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>该方法内部又调用另一个sendDefaultImpl方法，设置消息发送模式为SYNC，即同步；设置回调函数为null。</p>\n<h2><a id=\"12__111\"></a>1.2 单向消息</h2>\n<p>单向消息使用sendOneway发送。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendOneway</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Message</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MQClientException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RemotingException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span>\n <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//根据namespace设置topic</span>\n    msg<span class=\"token punctuation\">.</span><span class=\"token function\">setTopic</span><span class=\"token punctuation\">(</span><span class=\"token function\">withNamespace</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">getTopic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//调用defaultMQProducerImpl#sendOneway发送消息</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQProducerImpl<span class=\"token punctuation\">.</span><span class=\"token function\">sendOneway</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>该方法内部调用defaultMQProducerImpl#sendOneway。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendOneway</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Message</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MQClientException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RemotingException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//调用sendDefaultImpl方法，设置消息发送模式为ONEWAY，即单向；设置回调函数为null；设置超时时间参数，默认3000ms</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">sendDefaultImpl</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CommunicationMode</span><span class=\"token punctuation\">.</span>ONEWAY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQProducer<span class=\"token punctuation\">.</span><span class=\"token function\">getSendMsgTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MQBrokerException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MQClientException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unknown exception\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>最终调用sendDefaultImpl方法，设置消息发送模式为ONEWAY，即单向；设置回调函数为null；设置超时时间参数，默认3000ms。</p>\n<h2><a id=\"13__134\"></a>1.3 异步消息</h2>\n<p>异步消息使用带有callback函数的send方法发送。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Message</span> msg<span class=\"token punctuation\">,</span>                 <span class=\"token class-name\">SendCallback</span> sendCallback<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MQClientException</span><span class=\"token punctuation\">,</span>\n <span class=\"token class-name\">RemotingException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//根据namespace设置topic</span>\n    msg<span class=\"token punctuation\">.</span><span class=\"token function\">setTopic</span><span class=\"token punctuation\">(</span><span class=\"token function\">withNamespace</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">getTopic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//调用defaultMQProducerImpl#send发送消息，带有sendCallback参数</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQProducerImpl<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> sendCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>该方法内部调用defaultMQProducerImpl#send方法发送消息，带有sendCallback参数。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Message</span> msg<span class=\"token punctuation\">,</span>                 <span class=\"token class-name\">SendCallback</span> sendCallback<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MQClientException</span><span class=\"token punctuation\">,</span> \n<span class=\"token class-name\">RemotingException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//该方法内部又调用另一个send方法，设置超时时间参数，默认3000ms。</span>\n    <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> sendCallback<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQProducer<span class=\"token punctuation\">.</span><span class=\"token function\">getSendMsgTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>该方法内部又调用另一个send方法，设置超时时间参数，默认3000ms。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Message</span> msg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">SendCallback</span> sendCallback<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MQClientException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RemotingException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//调用起始时间</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> beginStartTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//获取异步发送执行器线程池</span>\n    <span class=\"token class-name\">ExecutorService</span> executor <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAsyncSenderExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">/*\n         * 使用线程池异步的执行sendDefaultImpl方法，即异步发送消息\n         */</span>\n        executor<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">/*\n                 * 发送之前计算超时时间，如果超时则不发送，直接执行回调函数onException方法\n                 */</span>\n                <span class=\"token keyword\">long</span> costTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> beginStartTime<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timeout <span class=\"token operator\">&gt;</span> costTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token comment\">//调用sendDefaultImpl方法执行发送操作</span>\n                        <span class=\"token function\">sendDefaultImpl</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CommunicationMode</span><span class=\"token punctuation\">.</span>ASYNC<span class=\"token punctuation\">,</span> sendCallback<span class=\"token punctuation\">,</span> timeout <span class=\"token operator\">-</span> costTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token comment\">//抛出异常，执行回调函数onException方法</span>\n                        sendCallback<span class=\"token punctuation\">.</span><span class=\"token function\">onException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">//超时，执行回调函数onException方法</span>\n                    sendCallback<span class=\"token punctuation\">.</span><span class=\"token function\">onException</span><span class=\"token punctuation\">(</span>\n                            <span class=\"token keyword\">new</span> <span class=\"token class-name\">RemotingTooMuchRequestException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DEFAULT ASYNC send call timeout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RejectedExecutionException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MQClientException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"executor rejected \"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>该方法内部会获取获取异步发送执行器线程池，使用线程池异步的执行sendDefaultImpl方法，即异步发送消息。<br/> 发送之前计算超时时间，如果超时则不发送，直接执行回调函数onException方法。</p>\n<h1><a id=\"2_sendDefaultImpl_196\"></a>2 sendDefaultImpl发送消息实现</h1>\n<p>该方法位于DefaultMQProducerImpl中，无论是同步消息、异步消息还是单向消息，最终都是调用该方法实现发送消息的逻辑的，因此该方法是真正的发送消息的方法入口。<br/> 该方法的大概步骤为：</p>\n<ol><li>调用makeSureStateOK方法，确定此producer的服务状态正常，如果服务状态不是RUNNING，那么抛出异常。</li><li>调用checkMessage方法，校验消息的合法性。</li><li>调用tryToFindTopicPublishInfo方法，尝试查找消息的一个topic路由，用以发送消息。</li><li>计算循环发送消息的总次数timesTotal，默认情况下，同步模式为3，即默认允许重试2次，可更改重试次数；其他模式为1，即不允许重试，不可更改。实际上异步发送消息也会重试，最多两次，只不过不是通过这里的逻辑重试的。</li><li>调用selectOneMessageQueue方法，选择一个消息队列MessageQueue，该犯法支持失败故障转移。</li><li>调用sendKernelImpl方法发送消息，异步、同步、单向发送消息的模式都是通过该方法实现的。</li><li>调用updateFaultItem方法，更新本地错误表缓存数据，用于延迟时间的故障转移的功能。</li><li>根据发送模式执行不同的处理，如果是异步或者单向模式则直接返回，如果是同步模式，如果开启了retryAnotherBrokerWhenNotStoreOK开关，那么如果返回值不是返回SEND_OK状态，则仍然会执行重试发送。</li><li>此过程中，如果抛出了RemotingException、MQClientException、以及部分MQBrokerException异常时，那么会进行重试，如果抛出了InterruptedException，或者因为超时则不再重试。</li></ol>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * DefaultMQProducerImpl的方法\n *\n * @param msg               方法\n * @param communicationMode 通信模式\n * @param sendCallback      回调方法\n * @param timeout           超时时间\n */</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">SendResult</span> <span class=\"token function\">sendDefaultImpl</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">Message</span> msg<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">CommunicationMode</span> communicationMode<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">SendCallback</span> sendCallback<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> timeout\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MQClientException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RemotingException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MQBrokerException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/*\n     * 1 确定此producer的服务状态正常，如果服务状态不是RUNNING，那么抛出异常\n     */</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">makeSureStateOK</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*\n     * 2 校验消息的合法性\n     */</span>\n    <span class=\"token class-name\">Validators</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkMessage</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQProducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//生成本次调用id</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> invokeID <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span><span class=\"token function\">nextLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//开始时间戳</span>\n    <span class=\"token keyword\">long</span> beginTimestampFirst <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> beginTimestampPrev <span class=\"token operator\">=</span> beginTimestampFirst<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//结束时间戳</span>\n    <span class=\"token keyword\">long</span> endTimestamp <span class=\"token operator\">=</span> beginTimestampFirst<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*\n     * 3 尝试查找消息的一个topic路由，用以发送消息\n     */</span>\n    <span class=\"token class-name\">TopicPublishInfo</span> topicPublishInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">tryToFindTopicPublishInfo</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">getTopic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//找到有效的topic信息</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>topicPublishInfo <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> topicPublishInfo<span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">boolean</span> callTimeout <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">MessageQueue</span> mq <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Exception</span> exception <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">SendResult</span> sendResult <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/*\n         * 4 计算发送消息的总次数\n         * 同步模式为3，即默认允许重试2次，可更改重试次数；其他模式为1，即不允许重试，不可更改\n         */</span>\n        <span class=\"token keyword\">int</span> timesTotal <span class=\"token operator\">=</span> communicationMode <span class=\"token operator\">==</span> <span class=\"token class-name\">CommunicationMode</span><span class=\"token punctuation\">.</span>SYNC <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQProducer<span class=\"token punctuation\">.</span><span class=\"token function\">getRetryTimesWhenSendFailed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> times <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//记录每一次重试时候发送消息目标Broker名字的数组</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> brokersSent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>timesTotal<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/*\n         * 在循环中，发送消息，包含消息重试的逻辑，总次数默认不超过3\n         */</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> times <span class=\"token operator\">&lt;</span> timesTotal<span class=\"token punctuation\">;</span> times<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//上次使用过的broker，可以为空，表示第一次选择</span>\n            <span class=\"token class-name\">String</span> lastBrokerName <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> mq <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> mq<span class=\"token punctuation\">.</span><span class=\"token function\">getBrokerName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">/*\n             * 5 选择一个消息队列MessageQueue\n             */</span>\n            <span class=\"token class-name\">MessageQueue</span> mqSelected <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">selectOneMessageQueue</span><span class=\"token punctuation\">(</span>topicPublishInfo<span class=\"token punctuation\">,</span> lastBrokerName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mqSelected <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                mq <span class=\"token operator\">=</span> mqSelected<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//设置brokerName</span>\n                brokersSent<span class=\"token punctuation\">[</span>times<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mq<span class=\"token punctuation\">.</span><span class=\"token function\">getBrokerName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">//调用的开始时间</span>\n                    beginTimestampPrev <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">//如果还有可调用次数，那么</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>times <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token comment\">//在重新发送期间用名称空间重置topic</span>\n                        msg<span class=\"token punctuation\">.</span><span class=\"token function\">setTopic</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQProducer<span class=\"token punctuation\">.</span><span class=\"token function\">withNamespace</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">getTopic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token comment\">//现在调用的开始时间 减去 开始时间，判断时候在调用发起之前就超时了</span>\n                    <span class=\"token keyword\">long</span> costTime <span class=\"token operator\">=</span> beginTimestampPrev <span class=\"token operator\">-</span> beginTimestampFirst<span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">//如果已经超时了，那么直接结束循环，不再发送</span>\n                    <span class=\"token comment\">//即超时的时候，即使还剩下重试次数，也不会再继续重试</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timeout <span class=\"token operator\">&lt;</span> costTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        callTimeout <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token comment\">/*\n                     * 6 异步、同步、单向发送消息\n                     */</span>\n                    sendResult <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">sendKernelImpl</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> mq<span class=\"token punctuation\">,</span> communicationMode<span class=\"token punctuation\">,</span> sendCallback<span class=\"token punctuation\">,</span> topicPublishInfo<span class=\"token punctuation\">,</span> timeout <span class=\"token operator\">-</span> costTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">//方法调用结束时间戳</span>\n                    endTimestamp <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">/*\n                     * 7 更新本地错误表缓存数据，用于延迟时间的故障转移的功能\n                     */</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateFaultItem</span><span class=\"token punctuation\">(</span>mq<span class=\"token punctuation\">.</span><span class=\"token function\">getBrokerName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> endTimestamp <span class=\"token operator\">-</span> beginTimestampPrev<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">/*\n                     * 8 根据发送模式执行不同的处理\n                     */</span>\n                    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>communicationMode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token comment\">//异步和单向模式直接返回null</span>\n                        <span class=\"token keyword\">case</span> ASYNC<span class=\"token operator\">:</span>\n                            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">case</span> ONEWAY<span class=\"token operator\">:</span>\n                            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">case</span> SYNC<span class=\"token operator\">:</span>\n                            <span class=\"token comment\">//同步模式，如果开启了retryAnotherBrokerWhenNotStoreOK开关，那么如果不是返回SEND_OK状态，则仍然会执行重试发送</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sendResult<span class=\"token punctuation\">.</span><span class=\"token function\">getSendStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token class-name\">SendStatus</span><span class=\"token punctuation\">.</span>SEND_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQProducer<span class=\"token punctuation\">.</span><span class=\"token function\">isRetryAnotherBrokerWhenNotStoreOK</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span>\n                            <span class=\"token punctuation\">}</span>\n                            <span class=\"token comment\">//如果发送成功，则返回</span>\n                            <span class=\"token keyword\">return</span> sendResult<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RemotingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">//RemotingException异常，会执行重试</span>\n                    endTimestamp <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateFaultItem</span><span class=\"token punctuation\">(</span>mq<span class=\"token punctuation\">.</span><span class=\"token function\">getBrokerName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> endTimestamp <span class=\"token operator\">-</span> beginTimestampPrev<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sendKernelImpl exception, resend at once, InvokeID: %s, RT: %sms, Broker: %s\"</span><span class=\"token punctuation\">,</span> invokeID<span class=\"token punctuation\">,</span> endTimestamp <span class=\"token operator\">-</span> beginTimestampPrev<span class=\"token punctuation\">,</span> mq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    exception <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MQClientException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">//MQClientException异常，会执行重试</span>\n                    endTimestamp <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateFaultItem</span><span class=\"token punctuation\">(</span>mq<span class=\"token punctuation\">.</span><span class=\"token function\">getBrokerName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> endTimestamp <span class=\"token operator\">-</span> beginTimestampPrev<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sendKernelImpl exception, resend at once, InvokeID: %s, RT: %sms, Broker: %s\"</span><span class=\"token punctuation\">,</span> invokeID<span class=\"token punctuation\">,</span> endTimestamp <span class=\"token operator\">-</span> beginTimestampPrev<span class=\"token punctuation\">,</span> mq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    exception <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MQBrokerException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">//MQBrokerException异常</span>\n                    endTimestamp <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateFaultItem</span><span class=\"token punctuation\">(</span>mq<span class=\"token punctuation\">.</span><span class=\"token function\">getBrokerName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> endTimestamp <span class=\"token operator\">-</span> beginTimestampPrev<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sendKernelImpl exception, resend at once, InvokeID: %s, RT: %sms, Broker: %s\"</span><span class=\"token punctuation\">,</span> invokeID<span class=\"token punctuation\">,</span> endTimestamp <span class=\"token operator\">-</span> beginTimestampPrev<span class=\"token punctuation\">,</span> mq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    exception <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">//如果返回的状态码属于一下几种，则支持重试：</span>\n                    <span class=\"token comment\">//ResponseCode.TOPIC_NOT_EXIST,</span>\n                    <span class=\"token comment\">//ResponseCode.SERVICE_NOT_AVAILABLE,</span>\n                    <span class=\"token comment\">//ResponseCode.SYSTEM_ERROR,</span>\n                    <span class=\"token comment\">//ResponseCode.NO_PERMISSION,</span>\n                    <span class=\"token comment\">//ResponseCode.NO_BUYER_ID,</span>\n                    <span class=\"token comment\">//ResponseCode.NOT_IN_CURRENT_UNIT</span>\n\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQProducer<span class=\"token punctuation\">.</span><span class=\"token function\">getRetryResponseCodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getResponseCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token comment\">//其他状态码不支持重试，如果有结果则返回，否则直接抛出异常</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sendResult <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                            <span class=\"token keyword\">return</span> sendResult<span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n\n                        <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">//InterruptedException异常，不会执行重试</span>\n                    endTimestamp <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateFaultItem</span><span class=\"token punctuation\">(</span>mq<span class=\"token punctuation\">.</span><span class=\"token function\">getBrokerName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> endTimestamp <span class=\"token operator\">-</span> beginTimestampPrev<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sendKernelImpl exception, throw exception, InvokeID: %s, RT: %sms, Broker: %s\"</span><span class=\"token punctuation\">,</span> invokeID<span class=\"token punctuation\">,</span> endTimestamp <span class=\"token operator\">-</span> beginTimestampPrev<span class=\"token punctuation\">,</span> mq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sendKernelImpl exception\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">/*\n         * 抛出异常的操作\n         */</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sendResult <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> sendResult<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">String</span> info <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Send [%d] times, still failed, cost [%d]ms, Topic: %s, BrokersSent: %s\"</span><span class=\"token punctuation\">,</span>\n                times<span class=\"token punctuation\">,</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> beginTimestampFirst<span class=\"token punctuation\">,</span>\n                msg<span class=\"token punctuation\">.</span><span class=\"token function\">getTopic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>brokersSent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        info <span class=\"token operator\">+=</span> <span class=\"token class-name\">FAQUrl</span><span class=\"token punctuation\">.</span><span class=\"token function\">suggestTodo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FAQUrl</span><span class=\"token punctuation\">.</span>SEND_MSG_FAILED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">MQClientException</span> mqClientException <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MQClientException</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">,</span> exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>callTimeout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RemotingTooMuchRequestException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sendDefaultImpl call timeout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exception <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MQBrokerException</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            mqClientException<span class=\"token punctuation\">.</span><span class=\"token function\">setResponseCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MQBrokerException</span><span class=\"token punctuation\">)</span> exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResponseCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exception <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">RemotingConnectException</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            mqClientException<span class=\"token punctuation\">.</span><span class=\"token function\">setResponseCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ClientErrorCode</span><span class=\"token punctuation\">.</span>CONNECT_BROKER_EXCEPTION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exception <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">RemotingTimeoutException</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            mqClientException<span class=\"token punctuation\">.</span><span class=\"token function\">setResponseCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ClientErrorCode</span><span class=\"token punctuation\">.</span>ACCESS_BROKER_TIMEOUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exception <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MQClientException</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            mqClientException<span class=\"token punctuation\">.</span><span class=\"token function\">setResponseCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ClientErrorCode</span><span class=\"token punctuation\">.</span>BROKER_NOT_EXIST_EXCEPTION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">throw</span> mqClientException<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">validateNameServerSetting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MQClientException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No route info of this topic: \"</span> <span class=\"token operator\">+</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">getTopic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">FAQUrl</span><span class=\"token punctuation\">.</span><span class=\"token function\">suggestTodo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FAQUrl</span><span class=\"token punctuation\">.</span>NO_TOPIC_ROUTE_INFO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setResponseCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ClientErrorCode</span><span class=\"token punctuation\">.</span>NOT_FOUND_TOPIC_EXCEPTION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"21_makeSureStateOK_413\"></a>2.1 makeSureStateOK确定生产者服务状态</h2>\n<p>首先会确定此producer的服务状态正常，如果服务状态不是RUNNING，那么抛出异常。</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * DefaultMQProducerImpl的方法\n */</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">makeSureStateOK</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MQClientException</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//服务状态不是RUNNING，那么抛出MQClientException异常。</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serviceState <span class=\"token operator\">!=</span> <span class=\"token class-name\">ServiceState</span><span class=\"token punctuation\">.</span>RUNNING<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MQClientException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The producer service state not OK, \"</span>\n                <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serviceState\n                <span class=\"token operator\">+</span> <span class=\"token class-name\">FAQUrl</span><span class=\"token punctuation\">.</span><span class=\"token function\">suggestTodo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FAQUrl</span><span class=\"token punctuation\">.</span>CLIENT_SERVICE_NOT_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"22_checkMessage_429\"></a>2.2 checkMessage校验消息的合法性</h2>\n<p>确定服务状态正常之后，还需要校验消息的合法性。校验规则为：</p>\n<ol><li>如果msg消息为null，抛出异常。</li><li>校验topic。如果topic为空，或者长度大于127个字符，或者topic的字符串不符合 \"<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">1</a></sup>+$\"模式，即包含非法字符，那么抛出异常。如果当前topic是不为允许使用的系统topic，那么抛出异常</li><li>校验消息体。如果消息体为null，或者为空数组，或者消息字节数组长度大于4,194,304，即消息的大小大于4M，那么抛出异常。</li></ol>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * Validators的方法\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">checkMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Message</span> msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DefaultMQProducer</span> defaultMQProducer<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MQClientException</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//如果消息为null，抛出异常</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MQClientException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResponseCode</span><span class=\"token punctuation\">.</span>MESSAGE_ILLEGAL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"the message is null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/*\n     * 校验topic\n     */</span>\n    <span class=\"token comment\">//如果topic为空，或者长度大于127个字符，或者topic的字符串不符合 \"^[%|a-zA-Z0-9_-]+$\"模式，即包含非法字符，那么抛出异常</span>\n    <span class=\"token class-name\">Validators</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkTopic</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">getTopic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//如果当前topic是不为允许使用的系统topic SCHEDULE_TOPIC_XXXX，那么抛出异常</span>\n    <span class=\"token class-name\">Validators</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotAllowedSendTopic</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">getTopic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// body</span>\n    <span class=\"token comment\">//如果消息体为null，那么抛出异常</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MQClientException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResponseCode</span><span class=\"token punctuation\">.</span>MESSAGE_ILLEGAL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"the message body is null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//如果消息体为空数组，那么抛出异常</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MQClientException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResponseCode</span><span class=\"token punctuation\">.</span>MESSAGE_ILLEGAL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"the message body length is zero\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//如果消息 字节数组长度大于4,194,304，即消息的大小大于4M，那么抛出异常</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">&gt;</span> defaultMQProducer<span class=\"token punctuation\">.</span><span class=\"token function\">getMaxMessageSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MQClientException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResponseCode</span><span class=\"token punctuation\">.</span>MESSAGE_ILLEGAL<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"the message body size over max value, MAX: \"</span> <span class=\"token operator\">+</span> defaultMQProducer<span class=\"token punctuation\">.</span><span class=\"token function\">getMaxMessageSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">checkTopic</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> topic<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MQClientException</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//如果topic为空，那么抛出异常</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UtilAll</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MQClientException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The specified topic is blank\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//如果topic长度大于127个字符，那么抛出异常</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> TOPIC_MAX_LENGTH<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MQClientException</span><span class=\"token punctuation\">(</span>\n                <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The specified topic is longer than topic max length %d.\"</span><span class=\"token punctuation\">,</span> TOPIC_MAX_LENGTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//如果topic字符串包含非法字符，那么抛出异常</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isTopicOrGroupIllegal</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MQClientException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"The specified topic[%s] contains illegal characters, allowing only %s\"</span><span class=\"token punctuation\">,</span> topic<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"^[%|a-zA-Z0-9_-]+$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"23_tryToFindTopicPublishInfotopic_485\"></a>2.3 tryToFindTopicPublishInfo查找topic的发布信息</h2>\n<p>该方法用于查找指定topic的发布信息TopicPublishInfo。</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * DefaultMQProducerImpl的方法\n * &lt;p&gt;\n * 查找指定topic的推送信息\n */</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">TopicPublishInfo</span> <span class=\"token function\">tryToFindTopicPublishInfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> topic<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//尝试直接从producer的topicPublishInfoTable中获取topic信息</span>\n    <span class=\"token class-name\">TopicPublishInfo</span> topicPublishInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>topicPublishInfoTable<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//如果没有获取到有效信息，</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> topicPublishInfo <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>topicPublishInfo<span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//那么立即创建一个TopicPublishInfo</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>topicPublishInfoTable<span class=\"token punctuation\">.</span><span class=\"token function\">putIfAbsent</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TopicPublishInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//立即从nameServer同步此topic的路由配置信息，并且更新本地缓存</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mQClientFactory<span class=\"token punctuation\">.</span><span class=\"token function\">updateTopicRouteInfoFromNameServer</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//再次获取topicPublishInfo</span>\n        topicPublishInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>topicPublishInfoTable<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//如果找到的路由信息是可用的，直接返回</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>topicPublishInfo<span class=\"token punctuation\">.</span><span class=\"token function\">isHaveTopicRouterInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> topicPublishInfo<span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> topicPublishInfo<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//再次从nameServer同步topic的数据，不过这次使用默认的topic “TBW102”去找路由配置信息作为本topic参数信息</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mQClientFactory<span class=\"token punctuation\">.</span><span class=\"token function\">updateTopicRouteInfoFromNameServer</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQProducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        topicPublishInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>topicPublishInfoTable<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> topicPublishInfo<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>首先在本地缓存topicPublishInfoTable获取，如果没有获取到有效数据，那么立即调用updateTopicRouteInfoFromNameServer方法从nameServer同步此topic的路由配置信息，并且更新本地缓存，如果还是没有获取到有效数据，那么再次从nameServer同步topic的数据，不过这次使用默认的topic “TBW102”去找路由配置信息作为本topic参数信息。<br/> updateTopicRouteInfoFromNameServer 方法我们在此前的producer启动流程中已经介绍了。<br/> TopicPublishInfo包含topic的各种属性：</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * 是否是顺序消息\n */</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> orderTopic <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * 是否包含路由信息\n */</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> haveTopicRouterInfo <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * topic的消息队列集合\n */</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MessageQueue</span><span class=\"token punctuation\">&gt;</span></span> messageQueueList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MessageQueue</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * 当前线程线程的消息队列的下标，循环选择消息队列使用+1\n */</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">ThreadLocalIndex</span> sendWhichQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadLocalIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * topic路由信息，包括topic的队列信息queueDatas，topic的broker信息brokerDatas，顺序topic配置orderTopicConf，消费过滤信息filterServerTable等属性\n */</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">TopicRouteData</span> topicRouteData<span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"24_timesTotal_541\"></a>2.4 计算发送次数timesTotal</h2>\n<p><strong>在发送消息之前，会先计算最大发送次数，同步模式为3，即默认允许重试2次，可更改重试次数；其他模式为1，即不允许重试，不可更改。</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">int</span> timesTotal <span class=\"token operator\">=</span> communicationMode <span class=\"token operator\">==</span> <span class=\"token class-name\">CommunicationMode</span><span class=\"token punctuation\">.</span>SYNC <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> \n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQProducer<span class=\"token punctuation\">.</span><span class=\"token function\">getRetryTimesWhenSendFailed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>注意，异步发送同样有重试，并且也是两次，只不过它的重试不在这个循环里面，而是是在MQClientAPIImpl#sendMessage方法中，后面会讲到。</strong></p>\n<h2><a id=\"25_selectOneMessageQueue_548\"></a>2.5 selectOneMessageQueue选择消息队列</h2>\n<p><strong>selectOneMessageQueue</strong>方法用于查找一个可用的消息队列，该方法内部调用<strong>mqFaultStrategy#selectOneMessageQueue</strong>方法：</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * DefaultMQProducerImpl的方法\n *\n * 选择一个消息队列\n * @param tpInfo topic信息\n * @param lastBrokerName 上次使用过的broker\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">MessageQueue</span> <span class=\"token function\">selectOneMessageQueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">TopicPublishInfo</span> tpInfo<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> lastBrokerName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//调用mqFaultStrategy#selectOneMessageQueue方法</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mqFaultStrategy<span class=\"token punctuation\">.</span><span class=\"token function\">selectOneMessageQueue</span><span class=\"token punctuation\">(</span>tpInfo<span class=\"token punctuation\">,</span> lastBrokerName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>mqFaultStrategy#selectOneMessageQueue</strong>方法支持故障转移机制，其选择步骤为：</p>\n<ol><li>首先判断是否开启了发送延迟故障转移机制，即sendLatencyFaultEnable属性是否为true，默认false不打开。如果开启了该机制： \n  <ol><li>首先仍然是遍历消息队列，按照轮询的方式选取一个消息队列，当消息队列可用（无故障）时，选择消息队列的工作就结束，否则循环选择其他队列。如果该mq的broker不存在LatencyFaultTolerance维护的faultItemTable集合属性中，或者当前时间戳已经大于该broker下一次开始可用的时间戳，表示无故障。</li><li>没有选出无故障的mq，那么从LatencyFaultTolerance维护的不是最好的broker集合faultItemTable中随机选择一个broker，随后判断如果写队列数大于0，那么选择该broker。然后遍历消息队列，采用取模的方式获取一个队列，即轮询的方式，重置其brokerName，queueId，进行消息发送。</li><li>如果上面的步骤抛出了异常，那么遍历消息队列，采用取模的方式获取一个队列，即轮询的方式。</li></ol> </li><li>如果没有发送延迟故障转移机制，那么那么遍历消息队列，即采用取模轮询的方式获取一个brokerName与lastBrokerName不相等的队列，即不会再次选择上次发送失败的broker。如果没有找到一个不同broker的mq，那么退回到轮询的方式。</li></ol>\n<p><strong>selectOneMessageQueue</strong>方法选择mq的时候的故障转移机制，其目的就是为了保证每次发送消息尽量更快的成功，是一种保证高可用的手段。总的来说，包括两种故障转移：</p>\n<ol><li>一种是延迟时间的故障转移，这需要将sendLatencyFaultEnable属性中设置为true，默认false。对于请求响应较慢的broker，可以在一段时间内将其状态置为不可用，消息队列选择时，会过滤掉mq认为不可用的broker，以此来避免不断向宕机的broker发送消息，选取一个延迟较短的broker，实现消息发送高可用。</li><li>另一种是没有开启延迟时间的故障转移的时候，在轮询选择mq的时候，不会选择上次发送失败的broker，实现消息发送高可用。</li></ol>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * MQFaultStrategy的方法\n * &lt;p&gt;\n * 选择一个消息队列，支持故障延迟转移\n *\n * @param tpInfo         topic信息\n * @param lastBrokerName 上次使用过的broker\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">MessageQueue</span> <span class=\"token function\">selectOneMessageQueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">TopicPublishInfo</span> tpInfo<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> lastBrokerName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">/*\n     * 判断是否开启了发送延迟故障转移机制，默认false不打开\n     * 如果开启了该机制，那么每次选取topic下对应的queue时，会基于之前执行的耗时，在有存在符合条件的broker的前提下，优选选取一个延迟较短的broker，否则再考虑随机选取。\n     */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sendLatencyFaultEnable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//当前线程线程的消息队列的下标，循环选择消息队列使用+1</span>\n            <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> tpInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getSendWhichQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//遍历消息队列，采用取模的方式获取一个队列，即轮询的方式</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tpInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getMessageQueueList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//取模</span>\n                <span class=\"token keyword\">int</span> pos <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> tpInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getMessageQueueList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                    pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//获取该消息队列</span>\n                <span class=\"token class-name\">MessageQueue</span> mq <span class=\"token operator\">=</span> tpInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getMessageQueueList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//如果当前消息队列是可用的，即无故障，那么直接返回该mq</span>\n                <span class=\"token comment\">//如果该broker不存在LatencyFaultTolerance维护的faultItemTable集合属性中，或者当前时间已经大于该broker下一次开始可用的时间点，表示无故障</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>latencyFaultTolerance<span class=\"token punctuation\">.</span><span class=\"token function\">isAvailable</span><span class=\"token punctuation\">(</span>mq<span class=\"token punctuation\">.</span><span class=\"token function\">getBrokerName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span> mq<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">//没有选出无故障的mq，那么一个不是最好的broker集合中随机选择一个</span>\n            <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> notBestBroker <span class=\"token operator\">=</span> latencyFaultTolerance<span class=\"token punctuation\">.</span><span class=\"token function\">pickOneAtLeast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//如果写队列数大于0，那么选择该broker</span>\n            <span class=\"token keyword\">int</span> writeQueueNums <span class=\"token operator\">=</span> tpInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getQueueIdByBroker</span><span class=\"token punctuation\">(</span>notBestBroker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>writeQueueNums <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//遍历消息队列，采用取模的方式获取一个队列，即轮询的方式</span>\n                <span class=\"token keyword\">final</span> <span class=\"token class-name\">MessageQueue</span> mq <span class=\"token operator\">=</span> tpInfo<span class=\"token punctuation\">.</span><span class=\"token function\">selectOneMessageQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>notBestBroker <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">//重置其brokerName，queueId，进行消息发送</span>\n                    mq<span class=\"token punctuation\">.</span><span class=\"token function\">setBrokerName</span><span class=\"token punctuation\">(</span>notBestBroker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    mq<span class=\"token punctuation\">.</span><span class=\"token function\">setQueueId</span><span class=\"token punctuation\">(</span>tpInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getSendWhichQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> writeQueueNums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">return</span> mq<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//如果写队列数小于0，那么移除该broker</span>\n                latencyFaultTolerance<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>notBestBroker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error occurred when selecting message queue\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//如果上面的步骤抛出了异常，那么遍历消息队列，采用取模的方式获取一个队列，即轮询的方式</span>\n        <span class=\"token keyword\">return</span> tpInfo<span class=\"token punctuation\">.</span><span class=\"token function\">selectOneMessageQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//如果没有发送延迟故障转移机制，那么那么遍历消息队列，即采用取模轮询的方式</span>\n    <span class=\"token comment\">//获取一个brokerName与lastBrokerName不相等的队列，即不会再次选择上次发送失败的broker</span>\n    <span class=\"token keyword\">return</span> tpInfo<span class=\"token punctuation\">.</span><span class=\"token function\">selectOneMessageQueue</span><span class=\"token punctuation\">(</span>lastBrokerName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"251_selectOneMessageQueuemq_635\"></a>2.5.1 selectOneMessageQueue选择一个mq</h3>\n<p>selectOneMessageQueue方法有两个重载方法，一个是有参数的，另一个是无参数的。<br/> 无参数的方法，即轮询选择一个mq，没有任何限制：</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * TopicPublishInfo的方法\n * &lt;p&gt;\n * 轮询的选择一个mq\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">MessageQueue</span> <span class=\"token function\">selectOneMessageQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//获取下一个index</span>\n    <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sendWhichQueue<span class=\"token punctuation\">.</span><span class=\"token function\">incrementAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//取模计算索引</span>\n    <span class=\"token keyword\">int</span> pos <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messageQueueList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//获取该索引的mq</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messageQueueList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>有参数的方法，其参数是上一次发送失败的brokerName，并且在选择的时候，不会选择上一次发送失败的brokerName的mq，即避免选择发送失败的broker继续发送。当然如果最后没有选出来，那么还是走轮询获取的逻辑。</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * TopicPublishInfo的方法\n *\n * @param lastBrokerName 上一次发送失败的brokerName\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">MessageQueue</span> <span class=\"token function\">selectOneMessageQueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> lastBrokerName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//如果lastBrokerName为null，即第一次发送，那么轮询选择一个</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastBrokerName <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">selectOneMessageQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messageQueueList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//轮询选择一个mq</span>\n            <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sendWhichQueue<span class=\"token punctuation\">.</span><span class=\"token function\">incrementAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> pos <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messageQueueList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">MessageQueue</span> mq <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messageQueueList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//如果mq的brokerName不等于lastBrokerName，就返回，否则选择下一个</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mq<span class=\"token punctuation\">.</span><span class=\"token function\">getBrokerName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>lastBrokerName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> mq<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//没有选出来，那么轮询选择一个</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">selectOneMessageQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"26_sendKernelImpl_684\"></a>2.6 sendKernelImpl发送消息</h2>\n<p>选择了消息队列之后，会调用sendKernelImpl方法进行消息的发送。该方法的大概步骤为：</p>\n<ol><li>首先调用findBrokerAddressInPublish方法从brokerAddrTable中查找Master broker地址。如果找不到，那么再次调用tryToFindTopicPublishInfo方法从nameServer远程拉取配置，并更新本地缓存，随后再次尝试获取Master broker地址。</li><li>调用brokerVIPChannel判断是否开启vip通道，如果开启了，那么将brokerAddr的port – 2，因为vip通道的端口为普通端口 – 2。</li><li>如果不是批量消息，那么设置唯一的uniqId。</li><li>如果不是批量消息，并且消息体大于4K，那么进行消息压缩。</li><li>如果存在CheckForbiddenHook，则执行checkForbidden钩子方法。如果存在SendMessageHook，则执行sendMessageBefore钩子方法。</li><li>设置请求头信息SendMessageRequestHeader，请求头包含各种基本属性，例如producerGroup、topic、queueId等，并且针对重试消息的处理，将消息重试次数和最大重试次数存入请求头中。</li><li>根据不同的发送模式发送消息。如果是异步发送模式，则需要先克隆并还原消息。最终异步、单向、同步模式都是调用MQClientAPIImpl#sendMessage方法发送消息的。</li><li>如果MQClientAPIImpl#sendMessage方法正常发送或者抛出RemotingException、MQBrokerException、InterruptedException异常，那么会判断如果存在SendMessageHook，则执行sendMessageAfter钩子方法。</li><li>在finally块中，对原始消息进行恢复。</li></ol>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * DefaultMQProducerImpl的方法\n * 发送消息\n *\n * @param msg               消息\n * @param mq                mq\n * @param communicationMode 发送模式\n * @param sendCallback      发送回调\n * @param topicPublishInfo  topic信息\n * @param timeout           超时时间\n * @return 发送结果\n */</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">SendResult</span> <span class=\"token function\">sendKernelImpl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Message</span> msg<span class=\"token punctuation\">,</span>\n                                  <span class=\"token keyword\">final</span> <span class=\"token class-name\">MessageQueue</span> mq<span class=\"token punctuation\">,</span>\n                                  <span class=\"token keyword\">final</span> <span class=\"token class-name\">CommunicationMode</span> communicationMode<span class=\"token punctuation\">,</span>\n                                  <span class=\"token keyword\">final</span> <span class=\"token class-name\">SendCallback</span> sendCallback<span class=\"token punctuation\">,</span>\n                                  <span class=\"token keyword\">final</span> <span class=\"token class-name\">TopicPublishInfo</span> topicPublishInfo<span class=\"token punctuation\">,</span>\n                                  <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MQClientException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RemotingException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MQBrokerException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//开始时间</span>\n    <span class=\"token keyword\">long</span> beginStartTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*\n     * 1 根据brokerName从brokerAddrTable中查找broker地址\n     */</span>\n    <span class=\"token class-name\">String</span> brokerAddr <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mQClientFactory<span class=\"token punctuation\">.</span><span class=\"token function\">findBrokerAddressInPublish</span><span class=\"token punctuation\">(</span>mq<span class=\"token punctuation\">.</span><span class=\"token function\">getBrokerName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//如果本地找不到 broker 的地址</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> brokerAddr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">/*\n         * 2 从nameServer远程拉取配置，并更新本地缓存\n         * 该方法此前就学习过了\n         */</span>\n        <span class=\"token function\">tryToFindTopicPublishInfo</span><span class=\"token punctuation\">(</span>mq<span class=\"token punctuation\">.</span><span class=\"token function\">getTopic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//再次获取地址</span>\n        brokerAddr <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mQClientFactory<span class=\"token punctuation\">.</span><span class=\"token function\">findBrokerAddressInPublish</span><span class=\"token punctuation\">(</span>mq<span class=\"token punctuation\">.</span><span class=\"token function\">getBrokerName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">SendMessageContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>brokerAddr <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">/*\n         * 3 vip通道判断\n         */</span>\n        brokerAddr <span class=\"token operator\">=</span> <span class=\"token class-name\">MixAll</span><span class=\"token punctuation\">.</span><span class=\"token function\">brokerVIPChannel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQProducer<span class=\"token punctuation\">.</span><span class=\"token function\">isSendMessageWithVIPChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> brokerAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> prevBody <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//for MessageBatch,ID has been set in the generating process</span>\n            <span class=\"token comment\">/*\n             * 4 如果不是批量消息，那么尝试生成唯一uniqId，即UNIQ_KEY属性。MessageBatch批量消息在生成时就已经设置uniqId\n             * uniqId也被称为客户端生成的msgId，从逻辑上代表唯一一条消息\n             */</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>msg <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MessageBatch</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">MessageClientIDSetter</span><span class=\"token punctuation\">.</span><span class=\"token function\">setUniqID</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">/*\n             * 设置nameSpace为实例Id\n             */</span>\n            <span class=\"token keyword\">boolean</span> topicWithNamespace <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mQClientFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getClientConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNamespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                msg<span class=\"token punctuation\">.</span><span class=\"token function\">setInstanceId</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mQClientFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getClientConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNamespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                topicWithNamespace <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">//消息标识符</span>\n            <span class=\"token keyword\">int</span> sysFlag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//消息压缩标识</span>\n            <span class=\"token keyword\">boolean</span> msgBodyCompressed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">/*\n             * 5 尝试压缩消息\n             */</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">tryToCompressMessage</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                sysFlag <span class=\"token operator\">|=</span> <span class=\"token class-name\">MessageSysFlag</span><span class=\"token punctuation\">.</span>COMPRESSED_FLAG<span class=\"token punctuation\">;</span>\n                msgBodyCompressed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">//事务消息标志，prepare消息</span>\n            <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> tranMsg <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageConst</span><span class=\"token punctuation\">.</span>PROPERTY_TRANSACTION_PREPARED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseBoolean</span><span class=\"token punctuation\">(</span>tranMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                sysFlag <span class=\"token operator\">|=</span> <span class=\"token class-name\">MessageSysFlag</span><span class=\"token punctuation\">.</span>TRANSACTION_PREPARED_TYPE<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">/*\n             * 6 如果存在CheckForbiddenHook，则执行checkForbidden方法\n             * 为什么叫禁止钩子呢，可能是想要使用者将不可发送消息的检查放在这个钩子函数里面吧（猜测）\n             */</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hasCheckForbiddenHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">CheckForbiddenContext</span> checkForbiddenContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CheckForbiddenContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                checkForbiddenContext<span class=\"token punctuation\">.</span><span class=\"token function\">setNameSrvAddr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQProducer<span class=\"token punctuation\">.</span><span class=\"token function\">getNamesrvAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                checkForbiddenContext<span class=\"token punctuation\">.</span><span class=\"token function\">setGroup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQProducer<span class=\"token punctuation\">.</span><span class=\"token function\">getProducerGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                checkForbiddenContext<span class=\"token punctuation\">.</span><span class=\"token function\">setCommunicationMode</span><span class=\"token punctuation\">(</span>communicationMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                checkForbiddenContext<span class=\"token punctuation\">.</span><span class=\"token function\">setBrokerAddr</span><span class=\"token punctuation\">(</span>brokerAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                checkForbiddenContext<span class=\"token punctuation\">.</span><span class=\"token function\">setMessage</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                checkForbiddenContext<span class=\"token punctuation\">.</span><span class=\"token function\">setMq</span><span class=\"token punctuation\">(</span>mq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                checkForbiddenContext<span class=\"token punctuation\">.</span><span class=\"token function\">setUnitMode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isUnitMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">executeCheckForbiddenHook</span><span class=\"token punctuation\">(</span>checkForbiddenContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">/*\n             * 7 如果存在SendMessageHook，则执行sendMessageBefore方法\n             */</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasSendMessageHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SendMessageContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                context<span class=\"token punctuation\">.</span><span class=\"token function\">setProducer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                context<span class=\"token punctuation\">.</span><span class=\"token function\">setProducerGroup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQProducer<span class=\"token punctuation\">.</span><span class=\"token function\">getProducerGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                context<span class=\"token punctuation\">.</span><span class=\"token function\">setCommunicationMode</span><span class=\"token punctuation\">(</span>communicationMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                context<span class=\"token punctuation\">.</span><span class=\"token function\">setBornHost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQProducer<span class=\"token punctuation\">.</span><span class=\"token function\">getClientIP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                context<span class=\"token punctuation\">.</span><span class=\"token function\">setBrokerAddr</span><span class=\"token punctuation\">(</span>brokerAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                context<span class=\"token punctuation\">.</span><span class=\"token function\">setMessage</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                context<span class=\"token punctuation\">.</span><span class=\"token function\">setMq</span><span class=\"token punctuation\">(</span>mq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                context<span class=\"token punctuation\">.</span><span class=\"token function\">setNamespace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQProducer<span class=\"token punctuation\">.</span><span class=\"token function\">getNamespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">String</span> isTrans <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageConst</span><span class=\"token punctuation\">.</span>PROPERTY_TRANSACTION_PREPARED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isTrans <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> isTrans<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    context<span class=\"token punctuation\">.</span><span class=\"token function\">setMsgType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageType<span class=\"token punctuation\">.</span>Trans_Msg_Half</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"__STARTDELIVERTIME\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageConst</span><span class=\"token punctuation\">.</span>PROPERTY_DELAY_TIME_LEVEL<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    context<span class=\"token punctuation\">.</span><span class=\"token function\">setMsgType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageType<span class=\"token punctuation\">.</span>Delay_Msg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">executeSendMessageHookBefore</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">/*\n             * 8 设置请求头信息\n             */</span>\n            <span class=\"token class-name\">SendMessageRequestHeader</span> requestHeader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SendMessageRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            requestHeader<span class=\"token punctuation\">.</span><span class=\"token function\">setProducerGroup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQProducer<span class=\"token punctuation\">.</span><span class=\"token function\">getProducerGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            requestHeader<span class=\"token punctuation\">.</span><span class=\"token function\">setTopic</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">getTopic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            requestHeader<span class=\"token punctuation\">.</span><span class=\"token function\">setDefaultTopic</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQProducer<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTopicKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            requestHeader<span class=\"token punctuation\">.</span><span class=\"token function\">setDefaultTopicQueueNums</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQProducer<span class=\"token punctuation\">.</span><span class=\"token function\">getDefaultTopicQueueNums</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            requestHeader<span class=\"token punctuation\">.</span><span class=\"token function\">setQueueId</span><span class=\"token punctuation\">(</span>mq<span class=\"token punctuation\">.</span><span class=\"token function\">getQueueId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            requestHeader<span class=\"token punctuation\">.</span><span class=\"token function\">setSysFlag</span><span class=\"token punctuation\">(</span>sysFlag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            requestHeader<span class=\"token punctuation\">.</span><span class=\"token function\">setBornTimestamp</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            requestHeader<span class=\"token punctuation\">.</span><span class=\"token function\">setFlag</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">getFlag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            requestHeader<span class=\"token punctuation\">.</span><span class=\"token function\">setProperties</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageDecoder</span><span class=\"token punctuation\">.</span><span class=\"token function\">messageProperties2String</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">getProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            requestHeader<span class=\"token punctuation\">.</span><span class=\"token function\">setReconsumeTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            requestHeader<span class=\"token punctuation\">.</span><span class=\"token function\">setUnitMode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isUnitMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            requestHeader<span class=\"token punctuation\">.</span><span class=\"token function\">setBatch</span><span class=\"token punctuation\">(</span>msg <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MessageBatch</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//针对重试消息的处理</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>requestHeader<span class=\"token punctuation\">.</span><span class=\"token function\">getTopic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MixAll</span><span class=\"token punctuation\">.</span>RETRY_GROUP_TOPIC_PREFIX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//获取消息重新消费次数属性值</span>\n                <span class=\"token class-name\">String</span> reconsumeTimes <span class=\"token operator\">=</span> <span class=\"token class-name\">MessageAccessor</span><span class=\"token punctuation\">.</span><span class=\"token function\">getReconsumeTime</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reconsumeTimes <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">//将重新消费次数设置到请求头中，并且清除该属性</span>\n                    requestHeader<span class=\"token punctuation\">.</span><span class=\"token function\">setReconsumeTimes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>reconsumeTimes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">MessageAccessor</span><span class=\"token punctuation\">.</span><span class=\"token function\">clearProperty</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MessageConst</span><span class=\"token punctuation\">.</span>PROPERTY_RECONSUME_TIME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\">//获取消息的最大重试次数属性值</span>\n                <span class=\"token class-name\">String</span> maxReconsumeTimes <span class=\"token operator\">=</span> <span class=\"token class-name\">MessageAccessor</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMaxReconsumeTimes</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxReconsumeTimes <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">//将最大重新消费次数设置到请求头中，并且清除该属性</span>\n                    requestHeader<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxReconsumeTimes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>maxReconsumeTimes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">MessageAccessor</span><span class=\"token punctuation\">.</span><span class=\"token function\">clearProperty</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MessageConst</span><span class=\"token punctuation\">.</span>PROPERTY_MAX_RECONSUME_TIMES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">/*\n             * 9 根据不同的发送模式，发送消息\n             */</span>\n            <span class=\"token class-name\">SendResult</span> sendResult <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>communicationMode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">/*\n                 * 异步发送模式\n                 */</span>\n                <span class=\"token keyword\">case</span> ASYNC<span class=\"token operator\">:</span>\n                    <span class=\"token comment\">/*\n                     * 首先克隆并还原消息\n                     *\n                     * 该方法的finally中已经有还原消息的代码了，为什么在异步发送消息之前，还要先还原消息呢？\n                     *\n                     * 因为异步发送时 finally 重新赋值的时机并不确定，有很大概率是在第一次发送结束前就完成了 finally 中的赋值，\n                     * 因此在内部重试前 msg.body 大概率已经被重新赋值过，而 onExceptionImpl 中的重试逻辑 MQClientAPIImpl.sendMessageAsync 不会再对数据进行压缩，\n                     * 简言之，在异步发送的情况下，如果调用 onExceptionImpl 内部的重试，有很大概率发送的是无压缩的数据\n                     */</span>\n                    <span class=\"token class-name\">Message</span> tmpMessage <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">boolean</span> messageCloned <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">//如果开启了消息压缩</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msgBodyCompressed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token comment\">//If msg body was compressed, msgbody should be reset using prevBody.</span>\n                        <span class=\"token comment\">//Clone new message using commpressed message body and recover origin massage.</span>\n                        <span class=\"token comment\">//Fix bug:https://github.com/apache/rocketmq-externals/issues/66</span>\n                        <span class=\"token comment\">//克隆一个message</span>\n                        tmpMessage <span class=\"token operator\">=</span> <span class=\"token class-name\">MessageAccessor</span><span class=\"token punctuation\">.</span><span class=\"token function\">cloneMessage</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        messageCloned <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">//恢复原来的消息体</span>\n                        msg<span class=\"token punctuation\">.</span><span class=\"token function\">setBody</span><span class=\"token punctuation\">(</span>prevBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token comment\">//如果topic整合了namespace</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>topicWithNamespace<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>messageCloned<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                            tmpMessage <span class=\"token operator\">=</span> <span class=\"token class-name\">MessageAccessor</span><span class=\"token punctuation\">.</span><span class=\"token function\">cloneMessage</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            messageCloned <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token comment\">//还原topic</span>\n                        msg<span class=\"token punctuation\">.</span><span class=\"token function\">setTopic</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NamespaceUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">withoutNamespace</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">getTopic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQProducer<span class=\"token punctuation\">.</span><span class=\"token function\">getNamespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token comment\">/*\n                     * 发送消息之前，进行超时检查，如果已经超时了那么取消本次发送操作，抛出异常\n                     */</span>\n                    <span class=\"token keyword\">long</span> costTimeAsync <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> beginStartTime<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timeout <span class=\"token operator\">&lt;</span> costTimeAsync<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RemotingTooMuchRequestException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sendKernelImpl call timeout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token comment\">/*\n                     * 10 发送异步消息\n                     */</span>\n                    sendResult <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mQClientFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getMQClientAPIImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span>\n                            brokerAddr<span class=\"token punctuation\">,</span>\n                            mq<span class=\"token punctuation\">.</span><span class=\"token function\">getBrokerName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                            tmpMessage<span class=\"token punctuation\">,</span>\n                            requestHeader<span class=\"token punctuation\">,</span>\n                            timeout <span class=\"token operator\">-</span> costTimeAsync<span class=\"token punctuation\">,</span>\n                            communicationMode<span class=\"token punctuation\">,</span>\n                            sendCallback<span class=\"token punctuation\">,</span>\n                            topicPublishInfo<span class=\"token punctuation\">,</span>\n                            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mQClientFactory<span class=\"token punctuation\">,</span>\n                            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQProducer<span class=\"token punctuation\">.</span><span class=\"token function\">getRetryTimesWhenSendAsyncFailed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                            context<span class=\"token punctuation\">,</span>\n                            <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">/*\n                 * 单向、同步发送模式\n                 */</span>\n                <span class=\"token keyword\">case</span> ONEWAY<span class=\"token operator\">:</span>\n                <span class=\"token keyword\">case</span> SYNC<span class=\"token operator\">:</span>\n                    <span class=\"token comment\">/*\n                     * 发送消息之前，进行超时检查，如果已经超时了那么取消本次发送操作，抛出异常\n                     */</span>\n                    <span class=\"token keyword\">long</span> costTimeSync <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> beginStartTime<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timeout <span class=\"token operator\">&lt;</span> costTimeSync<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RemotingTooMuchRequestException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sendKernelImpl call timeout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token comment\">/*\n                     * 10 发送单向、同步消息\n                     */</span>\n                    sendResult <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mQClientFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getMQClientAPIImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span>\n                            brokerAddr<span class=\"token punctuation\">,</span>\n                            mq<span class=\"token punctuation\">.</span><span class=\"token function\">getBrokerName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                            msg<span class=\"token punctuation\">,</span>\n                            requestHeader<span class=\"token punctuation\">,</span>\n                            timeout <span class=\"token operator\">-</span> costTimeSync<span class=\"token punctuation\">,</span>\n                            communicationMode<span class=\"token punctuation\">,</span>\n                            context<span class=\"token punctuation\">,</span>\n                            <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                    <span class=\"token keyword\">assert</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">/*\n             * 9 如果存在SendMessageHook，则执行sendMessageAfter方法\n             */</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasSendMessageHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                context<span class=\"token punctuation\">.</span><span class=\"token function\">setSendResult</span><span class=\"token punctuation\">(</span>sendResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">executeSendMessageHookAfter</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">//返回执行结果</span>\n            <span class=\"token keyword\">return</span> sendResult<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//如果抛出了异常，如果存在SendMessageHook，则执行sendMessageAfter方法</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RemotingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasSendMessageHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                context<span class=\"token punctuation\">.</span><span class=\"token function\">setException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">executeSendMessageHookAfter</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MQBrokerException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasSendMessageHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                context<span class=\"token punctuation\">.</span><span class=\"token function\">setException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">executeSendMessageHookAfter</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasSendMessageHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                context<span class=\"token punctuation\">.</span><span class=\"token function\">setException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">executeSendMessageHookAfter</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">/*\n             * 对消息进行恢复\n             * 1、因为客户端可能还需要查看原始的消息内容，如果是压缩消息，则无法查看\n             * 2、另外如果第一次压缩后消息还是大于4k，如果不恢复消息，那么客户端使用该message重新发送的时候，还会进行一次消息压缩\n             */</span>\n            msg<span class=\"token punctuation\">.</span><span class=\"token function\">setBody</span><span class=\"token punctuation\">(</span>prevBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            msg<span class=\"token punctuation\">.</span><span class=\"token function\">setTopic</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NamespaceUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">withoutNamespace</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">getTopic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQProducer<span class=\"token punctuation\">.</span><span class=\"token function\">getNamespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MQClientException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The broker[\"</span> <span class=\"token operator\">+</span> mq<span class=\"token punctuation\">.</span><span class=\"token function\">getBrokerName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"] not exist\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"261_findBrokerAddressInPublishbroker_980\"></a>2.6.1 findBrokerAddressInPublish查找broker地址</h3>\n<p>首先会根据brokerName从brokerAddrTable中查找broker地址。生产者只会向Master节点发送消息，因此只会返回Master节点的地址。</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * MQClientInstance的方法\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">findBrokerAddressInPublish</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> brokerName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//查询brokerAddrTable缓存的数据</span>\n    <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token comment\">/* brokerId */</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token comment\">/* address */</span><span class=\"token operator\">&gt;</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>brokerAddrTable<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>brokerName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//返回Mater节点的地址</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MixAll</span><span class=\"token punctuation\">.</span>MASTER_ID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"262_brokerVIPChannelvip_997\"></a>2.6.2 brokerVIPChannel判断vip通道</h3>\n<p><strong>获取到brokerAddr之后，需要判断是否开启vip通道，如果开启了，那么将brokerAddr的port – 2，因为vip通道的端口为普通通道端口– 2。</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * MixAll的方法\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">brokerVIPChannel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> isChange<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> brokerAddr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//如果开启了vip通道</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isChange<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">int</span> split <span class=\"token operator\">=</span> brokerAddr<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> ip <span class=\"token operator\">=</span> brokerAddr<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> split<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> port <span class=\"token operator\">=</span> brokerAddr<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>split <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//重新拼接brokerAddr，其中port - 2</span>\n        <span class=\"token class-name\">String</span> brokerAddrNew <span class=\"token operator\">=</span> ip <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> brokerAddrNew<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//如果没有开启vip通道，那么返回原地址</span>\n        <span class=\"token keyword\">return</span> brokerAddr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>消费者拉取消息只能请求普通通道，但是生产者发送消息可以选择vip通道或者普通通道。<br/> <a href=\"https://github.com/apache/rocketmq/issues/1510\">为什么要开启两个端口监听客户端请求呢</a>？答案是隔离读写操作。在消息的API中，最重要的是发送消息，需要高RTT。如果普通端口的请求繁忙，会使得netty的IO线程阻塞，例如消息堆积的时候，消费消息的请求会填满IO线程池，导致写操作被阻塞。在这种情况下，我们可以向VIP频道发送消息，以保证发送消息的RTT。<br/> 但是，请注意，在rocketmq 4.5.1版本之后，客户端发送消息的请求选择VIP通道的配置被改为false，想要手动默认开启需要配置com.rocketmq.sendMessageWithVIPChannel属性。或者在创建producer的时候调用producer.setVipChannelEnabled()方法更改当前producer的配置。<br/> ![image.png](https://img-blog.csdnimg.cn/img_convert/ff7aae11d4d751079660f6faa9f8a345.png#clientId=u152f5c72-8239-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=63&amp;id=u37e7c45c&amp;margin=[object Object]&amp;name=image.png&amp;originHeight=94&amp;originWidth=865&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=48241&amp;status=done&amp;style=none&amp;taskId=u8f119c8e-d03b-464c-b09f-7250b4c09fa&amp;title=&amp;width=576.6666666666666)<br/> <strong>因此，现在发送消息和消费消息实际上默认都走10911端口了，无需再关心10909端口的问题了。</strong></p>\n<h3><a id=\"263_setUniqIDuniqId_1023\"></a>2.6.3 setUniqID生成uniqId</h3>\n<p>该方法用于设置单条消息在客户端的uniqId，即设置到UNIQ_KEY属性中，批量消息在生成时就已经设置uniqId。<br/> uniqId也被称为msgId，从逻辑上代表客户端生成的唯一一条消息，更多见此<a href=\"https://blog.csdn.net/weixin_43767015/article/details/121751053\">文章</a>，<a href=\"https://blog.csdn.net/qq_21561501/article/details/105684989\">uniqId生成规则</a>。</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * MessageClientIDSetter的方法\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUniqID</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Message</span> msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//如果这条消息不存在\"UNIQ_KEY\"属性，那么创建uniqId并且存入\"UNIQ_KEY\"属性中</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageConst</span><span class=\"token punctuation\">.</span>PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        msg<span class=\"token punctuation\">.</span><span class=\"token function\">putProperty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageConst</span><span class=\"token punctuation\">.</span>PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX<span class=\"token punctuation\">,</span> <span class=\"token function\">createUniqID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"264_tryToCompressMessage_1037\"></a>2.6.4 tryToCompressMessage压缩消息</h3>\n<p>在发送单条消息的时候，会判断如果消息体超过4K，那么会进行消息压缩，压缩比默认为5，压缩完毕之后设置压缩标志，批量消息不支持压缩。消息压缩有利于更快的进行网络数据传输。</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * DefaultMQProducerImpl的方法\n */</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryToCompressMessage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Message</span> msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//如果是批量消息，那么不进行压缩</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MessageBatch</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//batch dose not support compressing right now</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>body <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//如果消息长度大于4K</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&gt;=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultMQProducer<span class=\"token punctuation\">.</span><span class=\"token function\">getCompressMsgBodyOverHowmuch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//进行压缩，使用的JDK自带的压缩类</span>\n                <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data <span class=\"token operator\">=</span> <span class=\"token class-name\">UtilAll</span><span class=\"token punctuation\">.</span><span class=\"token function\">compress</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> zipCompressLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">//重新设置到body中</span>\n                    msg<span class=\"token punctuation\">.</span><span class=\"token function\">setBody</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tryToCompressMessage exception\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"27_updateFaultItem_1071\"></a>2.7 updateFaultItem更新故障表</h2>\n<p>再发送消息完毕之后，无论是正常还是异常状态，都需要调用updateFaultItem方法，更新本地错误表缓存数据，用于延迟时间的故障转移的功能。<br/> 故障转移功能在此前的selectOneMessageQueue方法中被使用到，用于查找一个可用的消息队列。updateFaultItem方法在判断开启了故障转移之后，会更新LatencyFaultTolerance维护的faultItemTable集合属性中的异常broker数据。</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * DefaultMQProducerImpl的方法\n * @param brokerName brokerName\n * @param currentLatency 当前延迟\n * @param isolation 是否使用默认隔离\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updateFaultItem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> brokerName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> currentLatency<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> isolation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//调用MQFaultStrategy#updateFaultItem方法</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mqFaultStrategy<span class=\"token punctuation\">.</span><span class=\"token function\">updateFaultItem</span><span class=\"token punctuation\">(</span>brokerName<span class=\"token punctuation\">,</span> currentLatency<span class=\"token punctuation\">,</span> isolation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>看看<strong>MQFaultStrategy#updateFaultItem</strong>方法。其根据本次发送消息的延迟时间currentLatency，会去计算出该broker的隔离时间duration，即可以计算出该broker的下一个可用时间点。然后更新故障记录表。</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * MQFaultStrategy的方法\n *\n * @param brokerName     brokerName\n * @param currentLatency 当前延迟\n * @param isolation      是否使用默认隔离时间\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updateFaultItem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> brokerName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> currentLatency<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> isolation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//如果开启了故障转移，即sendLatencyFaultEnable为true，默认false</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sendLatencyFaultEnable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//根据消息当前延迟currentLatency计算当前broker的故障延迟的时间duration</span>\n        <span class=\"token comment\">//如果isolation为true，则使用默认隔离时间30000，即30s</span>\n        <span class=\"token keyword\">long</span> duration <span class=\"token operator\">=</span> <span class=\"token function\">computeNotAvailableDuration</span><span class=\"token punctuation\">(</span>isolation <span class=\"token operator\">?</span> <span class=\"token number\">30000</span> <span class=\"token operator\">:</span> currentLatency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//更新故障记录表</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>latencyFaultTolerance<span class=\"token punctuation\">.</span><span class=\"token function\">updateFaultItem</span><span class=\"token punctuation\">(</span>brokerName<span class=\"token punctuation\">,</span> currentLatency<span class=\"token punctuation\">,</span> duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"271_computeNotAvailableDuration_1106\"></a>2.7.1 computeNotAvailableDuration计算隔离时间</h3>\n<p>computeNotAvailableDuration方法根据本次发送消息的延迟时间currentLatency，会去计算出该broker的隔离时间duration，或者说不可以用时间段，据此即可以计算出该broker的下一个可用时间点。<br/> latencyMax延迟等级和notAvailableDuration隔离时间的对应关系如下：</p>\n<p>| <strong>latencyMax，</strong></p>\n<table><thead><tr><th><strong>Producer发送消息消耗时长</strong></th><th><strong>notAvailableDuration，Broker不可用时长</strong></th></tr></thead><tbody><tr><td><strong>50L</strong></td><td>0L</td></tr><tr><td><strong>100L</strong></td><td>0L</td></tr><tr><td><strong>550L</strong></td><td>30000L</td></tr><tr><td><strong>1000L</strong></td><td>60000L</td></tr><tr><td><strong>2000L</strong></td><td>120000L</td></tr><tr><td><strong>3000L</strong></td><td>180000L</td></tr><tr><td><strong>15000L</strong></td><td>600000L</td></tr></tbody></table>\n<p><strong>如果使用默认隔离时间30000，那个实际将会被隔离600000L，即10分钟。当抛出异常的时候，通常会设置isolation，即使用默认隔离时间。并且从这个表可以看出来，发送消息延迟越大，那么被设置的隔离时间也就越大。</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//延迟等级</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> latencyMax <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">50L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">550L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15000L</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//不可用时间等级</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> notAvailableDuration <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30000L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60000L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">120000L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180000L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">600000L</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * MQFaultStrategy的方法\n *\n * @param currentLatency 当前延迟\n * @return 故障延迟的时间\n */</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> <span class=\"token function\">computeNotAvailableDuration</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> currentLatency<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//倒叙遍历latencyMax</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> latencyMax<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//选择broker延迟时间对应的broker不可用时间，默认30000对应的故障延迟的时间为600000，即10分钟</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentLatency <span class=\"token operator\">&gt;=</span> latencyMax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>notAvailableDuration<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"272_updateFaultItem_1145\"></a>2.7.2 updateFaultItem更新故障表</h3>\n<p>该方法更新LatencyFaultToleranceImpl维护的faultItemTable集合属性中的异常broker的故障信息，将会设置发送消息的延迟时间currentLatency属性，以及下一个可用时间点LatencyFaultToleranceImpl属性。<br/> 下次可用时间LatencyFaultToleranceImpl属性= 现在的时间 + 隔离的时间，在selectOneMessageQueue方法选取消息队列的时候，如果开启了集群故障转移，那么会查找下一个可用时间点小于当前时间点的broker的队列来发送消息。</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * LatencyFaultToleranceImpl的方法\n *\n * @param name                 brokerName\n * @param currentLatency       当前延迟\n * @param notAvailableDuration 隔离时间（不可用时间）\n */</span>\n<span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updateFaultItem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> currentLatency<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> notAvailableDuration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//获取该broker此前的故障记录数据</span>\n    <span class=\"token class-name\">FaultItem</span> old <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>faultItemTable<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//如果此前没有数据，那么设置一个新对象肌凝乳</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> old<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">FaultItem</span> faultItem <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FaultItem</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//设置当前延迟</span>\n        faultItem<span class=\"token punctuation\">.</span><span class=\"token function\">setCurrentLatency</span><span class=\"token punctuation\">(</span>currentLatency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//设置下一次可用时间点</span>\n        faultItem<span class=\"token punctuation\">.</span><span class=\"token function\">setStartTimestamp</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> notAvailableDuration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//已有故障记录，更新</span>\n        old <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>faultItemTable<span class=\"token punctuation\">.</span><span class=\"token function\">putIfAbsent</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> faultItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>old <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            old<span class=\"token punctuation\">.</span><span class=\"token function\">setCurrentLatency</span><span class=\"token punctuation\">(</span>currentLatency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            old<span class=\"token punctuation\">.</span><span class=\"token function\">setStartTimestamp</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> notAvailableDuration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//已有故障记录，更新</span>\n        old<span class=\"token punctuation\">.</span><span class=\"token function\">setCurrentLatency</span><span class=\"token punctuation\">(</span>currentLatency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        old<span class=\"token punctuation\">.</span><span class=\"token function\">setStartTimestamp</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> notAvailableDuration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"3__1180\"></a>3 总结</h1>\n<p>本次我们学习了Producer的发送消息的源码总体流程，对于具体的发送消息的sendMessage方法源码将在下文讲解。<br/> 从这些源码中，我们得知了一些常见的却容易混淆的概念和知识，例如：</p>\n<ol><li>生产者消息重试：RocketMQ的消费者消息重试和生产者消息重投。</li><li>生产者故障转移。通过sendLatencyFaultEnable属性配置是否开启，默认未开启。故障转移机制，其目的就是为了保证每次发送消息尽量更快的成功，是一种保证高可用的手段。总的来说，包括两种故障转移： \n  <ol><li>一种是延迟时间的故障转移，这需要将sendLatencyFaultEnable属性中设置为true，默认false。对于请求响应较慢的broker，可以在一段时间内将其状态置为不可用，消息队列选择时，会过滤掉mq认为不可用的broker，以此来避免不断向宕机的broker发送消息，选取一个延迟较短的broker，实现消息发送高可用。</li><li>另一种是没有开启延迟时间的故障转移的时候，在轮询选择mq的时候，不会选择上次发送失败的broker，实现消息发送高可用。</li></ol> </li><li>Vip通道。VIP通道用于隔离读写操作。消费者拉取消息只能请求普通通道，但是生产者发送消息可以选择vip通道或者普通通道。 \n  <ol><li>在消息的API中，最重要的是发送消息，需要高RTT。如果普通端口的请求繁忙，会使得netty的IO线程阻塞，例如消息堆积的时候，消费消息的请求会填满IO线程池，导致写操作被阻塞。在这种情况下，我们可以向VIP频道发送消息，以保证发送消息的RTT。</li><li>但是，请注意，在rocketmq 4.5.1版本之后，客户端发送消息的请求选择VIP通道的配置被改为false，想要手动默认开启需要配置com.rocketmq.sendMessageWithVIPChannel属性。或者在创建producer的时候调用producer.setVipChannelEnabled()方法更改当前producer的配置。</li></ol> </li><li>故障转移表，RocketMQ的Producer生产者故障转移依赖于故障转移表实现，他是一个HasmMap。消息发送结束之后，会根据本次发送消息的延迟时间currentLatency，会去计算出该broker对应的的隔离时间duration，即可以计算出该broker的下一个可用时间点，然后更新故障记录表。故障转移表的key为brokerName，value为未来该broker可用时间。</li></ol>\n<hr class=\"footnotes-sep\"/>\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\"><li class=\"footnote-item\" id=\"fn1\"><p>%|a-zA-Z0-9_- <a class=\"footnote-backref\" href=\"#fnref1\">↩︎</a></p> </li></ol>\n</section>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-09-06 17:38:31", "summary": "基于，详细的介绍了发送消息的总体流程的源码，包括生产者重试机制、生产者故障转移机制、通道等知识都会一一介绍。文章目录源码入口同步消息单向消息异步消息发送消息实现确定生产者服务状态校验消息的合法性查找的"}