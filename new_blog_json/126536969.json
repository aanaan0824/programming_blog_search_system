{"blogid": "126536969", "writerAge": "码龄2年", "writerBlogNum": "161", "writerCollect": "1780", "writerComment": "2232", "writerFan": "6328", "writerGrade": "6级", "writerIntegral": "6450", "writerName": "海底烧烤店ai", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126536969.jpg", "writerRankTotal": "2402", "writerRankWeekly": "15", "writerThumb": "1716", "writerVisitNum": "407146", "blog_read_count": "5665", "blog_time": "于 2022-08-30 08:46:20 发布", "blog_title": "猿创征文｜一文带你深入掌握ES6 Proxy数据代理", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>🖥️ NodeJS专栏：<a href=\"https://blog.csdn.net/m0_51969330/category_11969342.html?spm=1001.2014.3001.5482\">Node.js从入门到精通</a><br/> 🖥️ 蓝桥杯真题解析：<a href=\"https://blog.csdn.net/m0_51969330/article/details/125360660?spm=1001.2014.3001.5502\">蓝桥杯Web国赛真题解析</a><br/> 🧧 加入社区领红包：<a href=\"https://bbs.csdn.net/forums/ailjx?typeId=120909\">海底烧烤店ai（从前端到全栈）</a><br/> 🧑‍💼个人简介：即将大三的学生，一个不甘平庸的平凡人🍬<br/> 👉 你的一键三连是我更新的最大动力❤️！</p>\n</blockquote>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0dbf0dd8e154466b92ba641d17c5c8fb.png\"/></p>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_14\">前言</a></li><li><a href=\"#_25\">一、为什么要使用代理？</a></li><li><a href=\"#Proxy_32\">二、Proxy是什么？</a></li><li><a href=\"#_48\">三、基础语法</a></li><li><a href=\"#handler_91\">四、handler处理函数</a></li><li><ul><li><a href=\"#_apply__95\">🎉 apply() 拦截函数的调用</a></li><li><a href=\"#_construct__new__145\">🎉 construct() 拦截 new 操作符</a></li><li><a href=\"#_get___186\">🎉 get() 拦截对象属性的读取操作</a></li><li><a href=\"#_set__230\">🎉 set() 拦截对象属性的修改/设置操作</a></li><li><a href=\"#_deleteProperty_288\">🎉 deleteProperty()拦截对象属性的删除操作</a></li><li><a href=\"#_has__in__329\">🎉 has() 拦截 in 操作符</a></li><li><a href=\"#__386\">🎉 更多处理函数</a></li></ul>\n</li><li><a href=\"#_397\">五、可撤销代理</a></li><li><a href=\"#_459\">结语</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_14\"></a>前言</h1>\n<p>在<code>ES6</code>之前，我们常使用<code>Object.defineProperty()</code><strong>方法</strong>来进行数据代理从而实现数据的劫持（如：<a href=\"https://ailjx.blog.csdn.net/article/details/124669787?spm=1001.2014.3001.5502\">Vue2的响应式原理</a>）</p>\n<p>而在<code>ES6</code>之后诞生了一个全新的<strong>对象</strong>（构造器）：<code>Proxy</code>，作为数据代理而言，它比<code>Object.defineProperty()</code>要强大许多，这也是为什么<code>Vue3</code>的响应式要使用<code>Proxy</code>来做的原因</p>\n<p>这篇文章将深入去研究<code>Proxy</code>代理，让我们开始吧！</p>\n<h1><a id=\"_25\"></a>一、为什么要使用代理？</h1>\n<p>之所以使用代理，就是不希望用户能够<strong>直接访问</strong>某个对象，<strong>直接操作</strong>对象的某个成员（因为这样是不可控的，我们不知道用户在访问操作哪一个对象）</p>\n<p>通过代理，我们可以<strong>拦截</strong>用户的访问（称为<strong>数据劫持</strong>），拦截住后我们就可以对数据进行一些处理，比如做一些数据的验证或者像Vue一样做一些视图更新的额外操作，之后再允许用户的访问操作（因为我们拦截了用户的每一次访问，这样用户操作对象就完全是在我们可控的范围内）</p>\n<p>简单来说，就是我们希望用户在访问对象时我们能够清除的知道用户在访问什么并且能够在中间做一些我们自己的操作</p>\n<h1><a id=\"Proxy_32\"></a>二、Proxy是什么？</h1>\n<p><code>Proxy</code> 对象用于<strong>创建</strong>一个<strong>对象的代理</strong>，从而实现基本操作的<strong>拦截和自定义</strong>（如属性查找、赋值、枚举、函数调用等）</p>\n<blockquote>\n<p><code>Proxy</code> 是 <code>ES6</code> 中新增的一个构造函数，也可以叫类，通过<code>new</code>操作符调用使用。<br/> 但在<code>JavaScript</code>中函数和类本质上也是对象，所以我们也能将<code>Proxy</code> 直接作为对象访问它的属性进行操作，如<code>Proxy.revocable()</code></p>\n</blockquote>\n<p>但需要注意的是，<code>Proxy</code><strong>并没有</strong><code>prototype</code>原型对象：</p>\n<pre><code class=\"prism language-javascript\"> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n</code></pre>\n<p><strong>ECMA 的官方说明：</strong> 因为 <code>Proxy</code> 构造出来的实例对象仅仅是对目标对象的一个<strong>代理</strong>，所以 <code>Proxy</code> 在构造过程中是不需要 <code>prototype</code> 进行初始化的</p>\n<blockquote>\n<p>其他构造函数之所以需要 <code>prototype</code>，是因为构造出来的对象需要一些初始化的成员，所以将这些成员定义到了 <code>protoype</code> 上</p>\n</blockquote>\n<h1><a id=\"_48\"></a>三、基础语法</h1>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> proxyTarget <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>👉 <strong>参数：</strong></p>\n<ul><li><code>target</code>：Proxy 会对 target 对象进行包装。它可以是<strong>任何类型的对象</strong>，包括内置的数组，函数甚至是另一个代理对象。</li><li><code>handler</code>：它是一个<strong>对象</strong>，它的<strong>属性</strong>提供了某些操作发生时所对应的<strong>处理函数</strong>。 \n  <blockquote>\n<p>一个空的 <code>handler</code> 参数将会创建一个与被代理对象行为几乎完全相同的代理对象。通过在 <code>handler</code> 对象上定义一组<strong>处理函数</strong>，你可以自定义被代理对象的一些特定行为。例如， 通过定义 <strong>get()</strong> 你就可以自定义被代理对象的 <strong>属性访问器</strong>。</p>\n</blockquote> </li></ul>\n<p>👉 <strong>返回值：</strong></p>\n<ul><li><code>proxyTarget </code>：经过Proxy包装后的target对象</li></ul>\n<p>👉 <strong>基础使用：</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Ailjx'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> proxyTarget <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>proxyTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a654ed9ed9fc4274908f46a8fcf4d03d.png\"/><br/> 需要注意的是，返回值<code>proxyTarget </code>并不是<code>target</code>的深拷贝，而只是浅引用：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Ailjx'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> newObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nobj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token number\">9</span> <span class=\"token comment\">// 修改obj，newObj也会改变</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newObj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 9</span>\n</code></pre>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Ailjx'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> newObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nnewObj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token number\">9</span> <span class=\"token comment\">// 修改newObj,obj也会改变</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 9</span>\n</code></pre>\n<h1><a id=\"handler_91\"></a>四、handler处理函数</h1>\n<p><code>Proxy</code>代理的灵魂就在于它的第二个参数：<code>handler</code>对象，在这个对象内我们可以定义一些<strong>处理函数</strong>来进行数据劫持，从而实现一些额外的操作</p>\n<h2><a id=\"_apply__95\"></a>🎉 apply() 拦截函数的调用</h2>\n<p><code>handler.apply()</code> 方法用于拦截函数的调用</p>\n<p>👉 <strong>语法：</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">var</span> ProxyTarget <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function-variable function\">apply</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">,</span> argumentsList</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 或</span>\n  <span class=\"token comment\">// apply(target, thisArg, argumentsList) {}</span>\n  <span class=\"token comment\">// 或</span>\n  <span class=\"token comment\">// apply: (target, thisArg, argumentsList) =&gt; {},</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>👉 <strong>参数：</strong></p>\n<blockquote>\n<p>下面的参数将会传递给 <code>apply()</code> 方法，<code>this</code> 绑定在 <code>handler</code> 上</p>\n</blockquote>\n<ul><li><code>target</code>：目标对象（函数）</li><li><code>thisArg</code>：被调用时的上下文对象</li><li><code>argumentsList</code>：被调用时的参数数组</li></ul>\n<p>👉 <strong>返回值：</strong></p>\n<p><code>apply</code>方法可以返回任何值</p>\n<p>👉 <strong>使用：</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// target:目标对象（函数）</span>\n    <span class=\"token comment\">// thisArg:被调用时的上下文对象</span>\n    <span class=\"token comment\">// argumentsList:被调用时的参数数组</span>\n    <span class=\"token function-variable function\">apply</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">,</span> argumentsList</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">你调用了函数！</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">target</span><span class=\"token punctuation\">(</span>argumentsList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> argumentsList<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 或者这样写</span>\n    <span class=\"token comment\">// apply(target, thisArg, argumentsList) {<!-- --></span>\n    <span class=\"token comment\">//     console.log(`你调用了函数！`);</span>\n    <span class=\"token comment\">//     return target(argumentsList[0], argumentsList[1]) * 10;</span>\n    <span class=\"token comment\">// },</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Proxy的第一个参数可以是任意类型的对象，此处为函数</span>\n<span class=\"token keyword\">const</span> newSum <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">newSum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 你调用了函数! 30</span>\n</code></pre>\n<h2><a id=\"_construct__new__145\"></a>🎉 construct() 拦截 new 操作符</h2>\n<p><code>handler.construct()</code> 方法用于拦截 <code>new</code> 操作符。为了使 <code>new</code> 操作符在生成的 <code>Proxy</code> 对象上生效，用于初始化代理的目标对象自身必须具有 <code>[[Construct]]</code> 内部方法（即 <code>new target</code> 必须是有效的）</p>\n<p>👉 <strong>语法：</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">var</span> ProxyTarget <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function-variable function\">construct</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> argumentsList<span class=\"token punctuation\">,</span> newTarget</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>👉 <strong>参数：</strong></p>\n<blockquote>\n<p>下面的参数将会传递给 <code>construct</code> 方法，<code>this</code> 绑定在 <code>handler</code> 上</p>\n</blockquote>\n<ul><li> <p><code>target</code>：目标对象。</p> </li><li> <p><code>argumentsList</code>：constructor 的参数列表。</p> </li><li> <p><code>newTarget</code>：<strong>最初被调用的构造函数</strong>，就上面的例子而言是 newTarget</p> </li></ul>\n<p>👉 <strong>返回值：</strong></p>\n<p><code>construct</code> 方法<strong>必须返回一个对象</strong></p>\n<p>👉 <strong>使用：</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">construct</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> newTarget</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">你使用了new操作符！</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> newTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">target</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> ProxyMyName <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>MyName<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ProxyMyName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ailjx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\599d971d466a47f3bef150ba8525b3ab.png\"/></p>\n<h2><a id=\"_get___186\"></a>🎉 get() 拦截对象属性的读取操作</h2>\n<p><code>handler.get()</code> 方法用于拦截对象的读取属性操作</p>\n<p>👉 <strong>语法：</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">var</span> proxyTarget <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> receiver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>👉 <strong>参数：</strong></p>\n<blockquote>\n<p>以下是传递给 <code>get</code> 方法的参数，<code>this</code> 上下文绑定在<code>handler</code> 对象上</p>\n</blockquote>\n<ul><li> <p><code>target</code>：目标对象。</p> </li><li> <p><code>property</code>：被获取的属性名。</p> </li><li> <p><code>receiver</code>：Proxy 或者继承 Proxy 的对象</p> </li></ul>\n<p>👉 <strong>返回值：</strong></p>\n<p><code>get</code> 方法可以返回任何值，这些返回值就是用户真正获取到的属性值</p>\n<p>👉 <strong>使用：</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Ailjx\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> receiver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你访问的属性为：\"</span><span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>receiver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"My name is \"</span> <span class=\"token operator\">+</span> target<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6a89d5b4ab0a4199b8245ceeb40e7767.png\"/></p>\n<h2><a id=\"_set__230\"></a>🎉 set() 拦截对象属性的修改/设置操作</h2>\n<p><code>handler.set()</code> 方法是设置属性值操作的捕获器</p>\n<p>👉 <strong>语法：</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> receiver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>👉 <strong>参数：</strong></p>\n<blockquote>\n<p>下面的参数将会传递给 <code>set()</code> 方法，<code>this</code> 绑定在 <code>handler</code> 上</p>\n</blockquote>\n<ul><li> <p><code>target</code>：目标对象</p> </li><li> <p><code>property</code>：将被设置的属性名或 Symbol。</p> </li><li> <p><code>value</code>：新属性值。</p> </li><li> <p><code>receiver</code>：最初被调用的对象。通常是 <code>proxy</code> 本身，但 <code>handler</code> 的 <code>set</code> 方法也有可能在原型链上，或以其他方式被间接地调用（因此不一定是 <code>proxy</code> 本身）</p>\n<blockquote>\n<p>假设有一段代码执行 <code>obj.name = \"Ailjx\"</code>， <code>obj</code> 不是一个 <code>proxy</code>，且自身不含 <code>name</code> 属性，但是它的原型链上有一个 <code>proxy</code>，那么，那个 <code>proxy</code> 的 <code>set()</code> 处理器会被调用，而此时，<code>obj</code> 会作为 <code>receiver</code> 参数传进来</p>\n</blockquote> </li></ul>\n<p>👉 <strong>返回值：</strong></p>\n<p><code>set()</code> 方法应当返回一个布尔值</p>\n<ul><li>返回 <code>true</code> 代表属性设置成功</li><li>在严格模式下，如果 <code>set()</code> 方法返回 <code>false</code>，那么会抛出一个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a> 异常</li></ul>\n<p>👉 <strong>使用：</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Ailjx\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>property <span class=\"token operator\">===</span> <span class=\"token string\">\"name\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> value <span class=\"token operator\">!==</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"姓名必须是字符串！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            target<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> proxy1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nproxy1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>proxy1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nproxy1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Chen\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>proxy1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8ad50cd719234fa2823eb4f13a0446dd.png\"/></p>\n<h2><a id=\"_deleteProperty_288\"></a>🎉 deleteProperty()拦截对象属性的删除操作</h2>\n<p><code>handler.deleteProperty()</code> 方法用于拦截对对象属性的删除操作</p>\n<p>👉 <strong>语法：</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function-variable function\">deleteProperty</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> property</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>👉 <strong>参数：</strong></p>\n<blockquote>\n<p><code>deleteProperty</code>方法将会接受以下参数。<code>this</code> 被绑定在 <code>handler</code> 上</p>\n</blockquote>\n<ul><li> <p><code>target</code>：目标对象</p> </li><li> <p><code>property</code>：待删除的属性名。</p> </li></ul>\n<p>👉 <strong>返回值：</strong></p>\n<p><code>deleteProperty</code> 必须返回一个 <code>Boolean</code> 值，表示了该属性是否被成功删除</p>\n<p>👉 <strong>使用：</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Ailjx\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function-variable function\">deleteProperty</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">delete</span> target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你删除了\"</span> <span class=\"token operator\">+</span> prop <span class=\"token operator\">+</span> <span class=\"token string\">\"属性\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ailjx</span>\n<span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 你删除了name属性</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9e7c7751199f4ac8a7ac02647df94f85.png\"/></p>\n<h2><a id=\"_has__in__329\"></a>🎉 has() 拦截 in 操作符</h2>\n<p><code>handler.has()</code> 方法是针对 <code>in</code> 操作符的代理方法</p>\n<p>👉 <strong>语法：</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function-variable function\">has</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>👉 <strong>参数：</strong></p>\n<blockquote>\n<p>下面的参数将会传递给 <code>has()</code> 方法，<code>this</code> 绑定在 <code>handler</code> 上</p>\n</blockquote>\n<ul><li> <p><code>target</code>：目标对象</p> </li><li> <p><code>prop</code>：需要检查是否存在的属性的名称</p> </li></ul>\n<p>👉 <strong>返回值：</strong></p>\n<p><code>has</code> 方法返回一个 <code>boolean</code> 值</p>\n<p>👉 <strong>使用：</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"_\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不允许判断_开头的属性\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prop <span class=\"token keyword\">in</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"✅你判断的属性存在！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"❌你判断的属性不存在！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">_name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"艾莉加薪\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Ailjx\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> proxyObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaa\"</span> <span class=\"token keyword\">in</span> proxyObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_name\"</span> <span class=\"token keyword\">in</span> proxyObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_name\"</span> <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span> <span class=\"token keyword\">in</span> proxyObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\afdd1d67dcae4a60a1c7d4f903cc96be.png\"/></p>\n<h2><a id=\"__386\"></a>🎉 更多处理函数</h2>\n<p><code>handler</code>对象内还有以下处理函数：</p>\n<ul><li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/defineProperty\">defineProperty()</a>：拦截对对象的 <code>Object.defineProperty()</code> 操作</li><li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/getOwnPropertyDescriptor\">getOwnPropertyDescriptor()</a>：<code>Object.getOwnPropertyDescriptor</code> 调用劫持</li><li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/getPrototypeOf\">getPrototypeOf() </a>：拦截对象<strong>原型</strong>的读取操作</li><li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/isExtensible\">isExtensible()</a>：拦截对对象的 <code>Object.isExtensible()</code></li><li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/ownKeys\">ownKeys()</a>：<code>Object.getOwnPropertyNames</code> 和<code>Object.getOwnPropertySymbols</code>的调用劫持</li><li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/preventExtensions\">preventExtensions()</a>：对<code>Object.preventExtensions()</code>的拦截</li><li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/setPrototypeOf\">setPrototypeOf()</a>：拦截 <code>Object.setPrototypeOf()</code></li></ul>\n<h1><a id=\"_397\"></a>五、可撤销代理</h1>\n<p>在前面说过：能将<code>Proxy</code> 直接作为对象访问它的属性进行操作，如<code>Proxy.revocable()</code></p>\n<p>这个<code>Proxy.revocable()</code> 方法可以用来创建一个<strong>可撤销</strong>的代理对象，先看下面这个例子：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 创建可撤销的代理</span>\n<span class=\"token keyword\">const</span> revocable <span class=\"token operator\">=</span> Proxy<span class=\"token punctuation\">.</span><span class=\"token function\">revocable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"[[\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"]]\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>revocable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\97e4f4bbc6884777b66febf182b86e30.png\"/><br/> <code>Proxy.revocable()</code> 方法具有和<code>Proxy</code>一样的两个参数：<code>target</code>目标对象和<code>handler</code>对象</p>\n<p>但它的<strong>返回值</strong>有点特殊，它返回一个包含了代理对象本身和它的撤销方法的可撤销 <code>Proxy</code> 对象，其结构为：</p>\n<pre><code class=\"prism language-javascript\"> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string-property property\">\"proxy\"</span><span class=\"token operator\">:</span> proxy<span class=\"token punctuation\">,</span> <span class=\"token string-property property\">\"revoke\"</span><span class=\"token operator\">:</span> revoke<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul><li> <p><code>proxy</code>：表示新生成的代理对象本身，和用一般方式 <code>new Proxy(target, handler)</code> 创建的代理对象没什么不同，只是它可以被撤销掉</p> </li><li> <p><code>revoke</code>：撤销方法，调用的时候不需要加任何参数，就可以撤销掉和它一起生成的那个代理对象</p>\n<blockquote>\n<p>一旦某个代理对象被撤销，它将变得几乎完全不可调用，在它身上执行任何的<strong>可代理操作</strong>都会抛出 <code>TypeError</code> 异常（可代理操作指的就是我们在<code>handler</code>对象函数属性上<strong>能拦截到的操作</strong>，一共有<strong>14种</strong>，执行这14种以外的情况不会报错）</p>\n</blockquote>\n<blockquote>\n<p>一旦被撤销，这个代理对象便不可能被直接恢复到原来的状态，同时和它关联的目标对象以及处理器对象都有可能被垃圾回收掉。再次调用撤销方法 <code>revoke()</code> 则不会有任何效果，但也不会报错</p>\n</blockquote> </li></ul>\n<p>👉 <strong>示例：</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 创建可撤销的代理</span>\n<span class=\"token keyword\">const</span> revocable <span class=\"token operator\">=</span> Proxy<span class=\"token punctuation\">.</span><span class=\"token function\">revocable</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"[[\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"]]\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// 获取创建的代理</span>\n<span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> revocable<span class=\"token punctuation\">.</span>proxy<span class=\"token punctuation\">;</span>\nproxy<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"[[foo]]\"</span>\n\n<span class=\"token comment\">// 撤销代理</span>\nrevocable<span class=\"token punctuation\">.</span><span class=\"token function\">revoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 代理撤销后，可代理操作将不能再被使用</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 抛出 TypeError</span>\nproxy<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 还是 TypeError</span>\n<span class=\"token keyword\">delete</span> proxy<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 又是 TypeError</span>\n\n<span class=\"token keyword\">typeof</span> proxy<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"object\"，因为 typeof 不属于可代理操作</span>\n</code></pre>\n<h1><a id=\"_459\"></a>结语</h1>\n<p>深入了解了<code>Proxy</code>之后，真的会被它强大的代理拦截功能所折服，在它的基础上我们可以创建几乎任何我们想要的响应式系统，它像是一个硕大的地基，至于地基之上需要建筑什么，全由我们自己掌握！</p>\n<p>看完本篇文章相信你已经对<code>Proxy</code>有了深入的理解，学习<code>Proxy</code>是我们学习像<code>Vue3</code>这种响应式原理的第一步，大家加油！</p>\n<p>如果本篇文章对你有所帮助，还请客官一件四连！❤️</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-08-30 08:46:20", "summary": "专栏：从入门到精通蓝桥杯真题解析：蓝桥杯国赛真题解析加入社区领红包：海底烧烤店从前端到全栈个人简介：即将大三的学生，一个不甘平庸的平凡人你的一键三连是我更新的最大动力！在这里插入图片描述文章目录前言一"}