{"blogid": "126583482", "writerAge": "码龄2年", "writerBlogNum": "90", "writerCollect": "373", "writerComment": "434", "writerFan": "171", "writerGrade": "5级", "writerIntegral": "1884", "writerName": "小新爱编程", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126583482.jpg", "writerRankTotal": "10757", "writerRankWeekly": "3335", "writerThumb": "378", "writerVisitNum": "53517", "blog_read_count": "128", "blog_time": "于 2022-08-29 13:59:39 发布", "blog_title": "MYSQL入门与进阶（完结）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><ul><li><a href=\"#1_4\">1、什么是事务</a></li><li><a href=\"#2_8\">2、事务的四大特性</a></li><li><a href=\"#3_15\">3、事务的开启提交回滚</a></li><li><a href=\"#4_35\">4、事务隔离级别不同引发的问题</a></li><li><ul><li><a href=\"#41_36\">4.1、脏读</a></li><li><a href=\"#42_39\">4.2、不可重复读</a></li><li><a href=\"#43_43\">4.3、幻读</a></li></ul>\n</li><li><a href=\"#5_46\">5、事务的四种隔离级别</a></li><li><ul><li><a href=\"#51read_uncommitted__47\">5.1、未提交读（read uncommitted) ：</a></li><li><a href=\"#52read_committed_49\">5.2、已提交读(read committed)：</a></li><li><a href=\"#53repeatable_read_51\">5.3、重复读(repeatable read):</a></li><li><a href=\"#54serializable_53\">5.4、串行化(serializable)：</a></li><li><a href=\"#55_56\">5.5、示例：模拟转账</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<hr/>\n<h2><a id=\"1_4\"></a>1、什么是事务</h2>\n<p>事务（transaction）：确保一系列的数据操作，可以作为整体（原子）执<br/> 行，要么都执行，要么都回滚（撤销）的一种机制。</p>\n<h2><a id=\"2_8\"></a>2、事务的四大特性</h2>\n<p>ACID<br/> 原子性（A)： 事务作为整体执行，要么成功，要么回滚。<br/> 一致性（C）：事务完成前后，数据处于一致性的状态，比如转账。<br/> 隔离性（I）：多个事务在并发执行时，事务之间是相互隔离的。<br/> 持久性（D）：事务完成后对数据表的影响是永久性的。</p>\n<h2><a id=\"3_15\"></a>3、事务的开启提交回滚</h2>\n<pre><code>#开启事务\nbegin;\nstart transaction;\n# 提交\ncommit;\n# 回滚\nrollback\n\n\nbegin;\nupdate bank set balance=balance-5000 where id=1;\n#自动提交事务\nupdate bank set balance=balance+5000 where id=2;\ncommit; #正常 （不报错） 提交\n#rollback; #报错 回滚\n</code></pre>\n<h2><a id=\"4_35\"></a>4、事务隔离级别不同引发的问题</h2>\n<h3><a id=\"41_36\"></a>4.1、脏读</h3>\n<p>在事务A修改数据之后提交数据之前，这时另一个事务B来读取数据，如果不加控制，事务B读取到A修改过数据，之后A又对数据做了修改再提交，则B读到的数据是脏数据，此过程称为脏读</p>\n<h3><a id=\"42_39\"></a>4.2、不可重复读</h3>\n<p>一个事务内在读取某些数据后的某个时间，再次读取以前读过的数据，却发现其读出的数据已经发生了变更、或者某些记录已经被删除了。</p>\n<h3><a id=\"43_43\"></a>4.3、幻读</h3>\n<p>事务A在按查询条件读取某个范围的记录时，事务B又在该范围内插入了新的满足条件的记录，当事务A再次按条件查询记录时，会产生新的满足条件的记录</p>\n<h2><a id=\"5_46\"></a>5、事务的四种隔离级别</h2>\n<h3><a id=\"51read_uncommitted__47\"></a>5.1、未提交读（read uncommitted) ：</h3>\n<p>会引发脏读</p>\n<h3><a id=\"52read_committed_49\"></a>5.2、已提交读(read committed)：</h3>\n<p>解决脏读问题，可能会引发不可重复读，幻读</p>\n<h3><a id=\"53repeatable_read_51\"></a>5.3、重复读(repeatable read):</h3>\n<p>mysql中事务的默认隔离级别 ，解决不可重复读问题，可能引发幻读</p>\n<h3><a id=\"54serializable_53\"></a>5.4、串行化(serializable)：</h3>\n<p>解决幻读问题，无法使用事务并发提高效率。</p>\n<h3><a id=\"55_56\"></a>5.5、示例：模拟转账</h3>\n<pre><code>select @@tx_isolation; 查看默认的事务隔离级别\n修改默认的配置文件中的（全部修改）\ntransaction-isolation = 隔离级别；\n#修改当前会话的隔离级别；\nset session transaction isolation level 隔离级别；\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ecb9991077a74d6f8bfcf76c2a23fa5a.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2022-08-29 13:59:39", "summary": "目录、什么是事务、事务的四大特性、事务的开启提交回滚、事务隔离级别不同引发的问题、脏读、不可重复读、幻读、事务的四种隔离级别、未提交读：、已提交读：、重复读、串行化：、示例：模拟转账、什么是事务事务："}