{"blogid": "125816667", "writerAge": "码龄6年", "writerBlogNum": "342", "writerCollect": "11992", "writerComment": "3087", "writerFan": "135851", "writerGrade": "7级", "writerIntegral": "19694", "writerName": "小目标青年", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125816667.jpg", "writerRankTotal": "366", "writerRankWeekly": "164", "writerThumb": "3986", "writerVisitNum": "2057974", "blog_read_count": "7127", "blog_time": "已于 2022-07-21 10:24:51 修改", "blog_title": "Mysql 我随手造200W条数据，给你们讲讲分页优化。", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>前言</h1>\n<p></p>\n<p>【问诊一】</p>\n<p><img alt=\"\" height=\"300\" src=\"..\\..\\static\\image\\c79df83b485e4e1183fb761e2c6a40e5.png\" width=\"649\"/></p>\n<p><a href=\"https://blog.csdn.net/qq_35387940/article/details/108618424\" title=\"MySql  索引失效、回表解析 【陈先生们，先看这篇】\">MySql 索引失效、回表解析 【陈先生们，先看这篇】</a></p>\n<p></p>\n<p>【问诊二】</p>\n<p></p>\n<p><img alt=\"\" height=\"463\" src=\"..\\..\\static\\image\\da1cea84b21b40b983b880a6eaa9b94f.png\" width=\"643\"/></p>\n<p></p>\n<h1>正文</h1>\n<p></p>\n<p></p>\n<p>话不多说，先当场整点货，搞个200w条数据：</p>\n<p></p>\n<p>准备一张表：<br/><img alt=\"\" height=\"176\" src=\"..\\..\\static\\image\\3451a3c4a4a64167bfb61c52b977212d.png\" width=\"614\"/></p>\n<p> 建个函数来造数据：<br/>  </p>\n<p><img alt=\"\" height=\"191\" src=\"..\\..\\static\\image\\6073e8ec36a1463986f114d204934f48.png\" width=\"246\"/></p>\n<p> 估计很多初学者可能很少写这些，没关系，可以一起动手试着玩玩：</p>\n<blockquote>\n<p></p>\n<p>CREATE DEFINER=`mytoor`@`%` FUNCTION `JcTestData`() RETURNS int(11)<br/> BEGIN                                <br/>     DECLARE num INT DEFAULT 2000000;         <br/>     DECLARE i INT DEFAULT 0; <br/>     <br/>     WHILE i &lt; num DO             <br/>     INSERT INTO test_order(`platform_sn`,`third_sn`,`type`,`create_time`) <br/>          VALUES(CONCAT('SN',i),UUID(),1,now());<br/>         SET i =  i + 1;<br/>     END WHILE;        <br/>     RETURN i;<br/> END</p>\n</blockquote>\n<p>简单说一嘴，看明白的可以无视这个（还是那句话学习，是先知后知而已）： </p>\n<p><img alt=\"\" height=\"237\" src=\"..\\..\\static\\image\\889536e0e89e4eefb575a6a323a5cba5.png\" width=\"680\"/></p>\n<p></p>\n<p> 点击运行：<br/><br/><img alt=\"\" height=\"128\" src=\"..\\..\\static\\image\\e260778800904000804744bb280b2f2c.png\" width=\"423\"/></p>\n<p>29秒造完，还可以。 </p>\n<p><img alt=\"\" height=\"119\" src=\"..\\..\\static\\image\\6b39581de724438f99c16195e25712a8.png\" width=\"404\"/></p>\n<p>货到齐了，准备开搞：</p>\n<p><img alt=\"\" height=\"139\" src=\"..\\..\\static\\image\\f6ff9fd00025454aaaefa851b733e8b3.png\" width=\"369\"/></p>\n<p><img alt=\"\" height=\"596\" src=\"..\\..\\static\\image\\de15b1b4ebaa4588a0164f214cb10450.png\" width=\"604\"/></p>\n<p></p>\n<p>开始演练：<br/><br/><br/> 先给type加个索引，模拟一下真实查询场景： </p>\n<p><img alt=\"\" height=\"255\" src=\"..\\..\\static\\image\\07283493de004d1e84e3839af59a94cd.png\" width=\"929\"/></p>\n<p></p>\n<p><img alt=\"\" height=\"123\" src=\"..\\..\\static\\image\\62e1873dcffc4dc2a45bd2661f7b76ef.png\" width=\"833\"/></p>\n<p></p>\n<p> 再把几条数据的type数据稍微改一下，：<br/><img alt=\"\" height=\"383\" src=\"..\\..\\static\\image\\ab96b5594b564b2baafcb8d89d02d6dc.png\" width=\"606\"/></p>\n<p></p>\n<p>先按照正常的场景分页查询 limit 0，50：<br/><br/>  </p>\n<p>sql：<br/>  </p>\n<blockquote>\n<p>select * FROM test_order  where type=1  limit 0,50;</p>\n</blockquote>\n<p>可以看到查询 limit 0,50  速度是很快的，0.022秒： </p>\n<p><img alt=\"\" height=\"586\" src=\"..\\..\\static\\image\\fe5133ea9a044f9ea152b89848b33db1.png\" width=\"1122\"/></p>\n<p></p>\n<p>我们接下来模拟成查询N页之后的数据 limit  1200000,50：</p>\n<p></p>\n<p>120W 条后，偏移 50条数据，roll出来</p>\n<p></p>\n<p>sql：</p>\n<blockquote>\n<p>select * FROM test_order  where type=1  limit 1200000,50;</p>\n</blockquote>\n<p></p>\n<p>看看效果，用了3.765秒：</p>\n<p><br/><img alt=\"\" height=\"582\" src=\"..\\..\\static\\image\\e100d400c06248618665a0d73a8fb830.png\" width=\"1136\"/></p>\n<p></p>\n<p>explain：</p>\n<p><img alt=\"\" height=\"175\" src=\"..\\..\\static\\image\\3a955c9082f24cc5976b1b55d758147b.png\" width=\"967\"/></p>\n<p> 可以看到已经命中了索引 index_type ，但是还是比较慢，为什么呢？</p>\n<p><strong>慢的原因 ① </strong></p>\n<blockquote>\n<p>① 索引 index_type 是非聚簇索引， 而我们查询的语句 是select * ,包含了其他字段。</p>\n<p>通过非聚簇索引 index_type  roll出来的数据列，只有type 和 id ，那么为了拿其他字段，</p>\n<p>就会通过先取聚簇索引 id ，再根据id 拿出所有列值，这也就是回表操作。 </p>\n</blockquote>\n<p><strong>慢的原因 ②</strong></p>\n<p></p>\n<p><span style=\"color:#fe2c24;\"><strong>limit 第一个数，第二个数</strong></span></p>\n<p></p>\n<blockquote>\n<p>limit 的roll数据规则是什么 ？ </p>\n<p>是确定sql的符合条件的数据，<br/> 根据 limit的 第一个数 + 第二个数，先计算出<span style=\"color:#4da8ee;\"><strong>总共需要扫描拿到的数据总量</strong></span>是多少，<br/> 再去从头开始遍历到第一个数的数据行，开始丢到返回集，<br/> 丢多少条呢？ 第二个数决定着丢多少条。</p>\n</blockquote>\n<p><span style=\"color:#fe2c24;\"><strong>limit </strong></span><strong>示例讲解</strong></p>\n<p>也就是limit 0，50 ：<br/><br/> 计算 0+ 50  =50 ， 拿出符合条件的50条 ， 从头开始匹对第一个数  0，OK，从0开始就可以把数据丢到返回集。</p>\n<p></p>\n<p>丢多少？  第二个数是 50，所以会一条条丢，丢50条 ，最后返回数据。</p>\n<p></p>\n<p><strong>那么如果是我们文章里面执行的  limit 1200000，50 ：</strong><br/><br/><br/> 120w+50  ....</p>\n<p>意味着为了拿50条数据，<strong>需要扫描出 1200050 条数据</strong>，然后开始迅速得检索第一个数是120W，开始丢掉前面120W条没有意义的数据，然后确定第二个数是50，开始整50条数据丢到返回集里面，最后返回数据。</p>\n<p></p>\n<h1>那么既然知道了这个情况， 我们可以开始玩优化操作。</h1>\n<p></p>\n<p></p>\n<h2>方案1 ：<br/><br/><strong>针对回表方面做优化</strong></h2>\n<p>如果我们能拿到我们知道返回数据的 id 集，作为条件，这样通过命中非聚簇索引type的时候，直接就能拿到id，这样通过id拿数据列，这样就方便了。<br/><br/> sql：<br/>  </p>\n<blockquote>\n<p>select * FROM test_order  where id in</p>\n<p>(</p>\n<p><br/> select id from (select id FROM test_order  where type=1 limit 1200000,50) child</p>\n<p><br/> ) </p>\n</blockquote>\n<p>看下效果：<br/>  </p>\n<p><img alt=\"\" height=\"587\" src=\"..\\..\\static\\image\\68cf8a4d8890409fb752ac6e2c92e746.png\" width=\"1137\"/></p>\n<p></p>\n<p><span style=\"color:#fe2c24;\"><strong>3.765秒 变成了 1.56秒 ！！！</strong></span></p>\n<p><span style=\"color:#fe2c24;\"><strong>3.765秒 变成了 1.56秒 ！！！</strong></span></p>\n<p><span style=\"color:#fe2c24;\"><strong>3.765秒 变成了 1.56秒 ！！！</strong></span></p>\n<p></p>\n<p>为啥？ </p>\n<p>explain看看：</p>\n<p><img alt=\"\" height=\"435\" src=\"..\\..\\static\\image\\611d64d5a9694d7aba6613158f9f318a.png\" width=\"1156\"/></p>\n<p></p>\n<p></p>\n<p><strong>这种情形已经是快了很多了， 但是还有没有操作空间？</strong></p>\n<p></p>\n<p><span style=\"color:#fe2c24;\"><strong>回答 ： 有。</strong></span></p>\n<p></p>\n<p>可以看到当前的优化sql ，其实 还是涉及到了 limit 1200000，50 ，这也就是主要耗费时间的地方。</p>\n<p></p>\n<h2><strong>方案2：使用最小条件值</strong></h2>\n<p></p>\n<p><strong>分页查询避免跳页查询， 我们把上一页的id，作为下一页的起始条件。</strong></p>\n<p></p>\n<p></p>\n<p>上面分析这个sql的规则 ：<br/><img alt=\"\" height=\"288\" src=\"..\\..\\static\\image\\5ee09c19f7df4711840436336968b829.png\" width=\"791\"/> 看一下这个limit 120W，50的数据情况：<img alt=\"\" height=\"360\" src=\"..\\..\\static\\image\\a8fb53e06ecf41f5b54eb8e399f929d6.png\" width=\"1183\"/></p>\n<p></p>\n<p> 如果我们加上 条件  id &gt;=1200008  , 是不是就非常nice了 。</p>\n<p></p>\n<p>sql：</p>\n<blockquote>\n<p>select * FROM test_order  where type=1 and id &gt;=1200008 limit 50;</p>\n</blockquote>\n<p>看看效果，0.022秒，就跟直接 limit 0，50 一样了效率了：</p>\n<p><br/><img alt=\"\" height=\"592\" src=\"..\\..\\static\\image\\df7aba9f6273404e935a2c0d76c97206.png\" width=\"1176\"/></p>\n<p> explain：</p>\n<p>都中了主键索引了，key：PRINARY<br/><img alt=\"\" height=\"167\" src=\"..\\..\\static\\image\\f87793aca8794081a0d065f24405d04d.png\" width=\"1011\"/></p>\n<p></p>\n<p></p>\n<p><strong>服务端使用方案2：</strong></p>\n<p>这种情况，如果是我们代码里面去使用，只需要在操作大批量数据的时候，将上一批数据的最后一条数据的id拿出来。</p>\n<p>给到下一批筛选数据，作为最小ID的 条件即可。</p>\n<p>其实也就是之前我写过一篇文章留下来的分页优化操作空间:</p>\n<p><br/><a href=\"https://blog.csdn.net/qq_35387940/article/details/125601945\" title=\"Springboot 手动分页查询，分批批量插入数据_小目标青年的博客-CSDN博客\">Springboot 手动分页查询，分批批量插入数据_小目标青年的博客-CSDN博客</a></p>\n<p>可以在这篇基础上，加上 上一批次的最小ID作为条件，效率翻倍！</p>\n<p></p>\n<p></p>\n<p></p>\n<p><strong>配合前端使用方案2：</strong></p>\n<p></p>\n<p>给大家看一个现成的大系统的一个触发机制调用图：<br/><br/><img alt=\"\" height=\"323\" src=\"..\\..\\static\\image\\cf25cc7d9522437290d66f72092784b3.png\" width=\"750\"/></p>\n<p> 随着滑动，自动加载下一页数据， 起始也就是把上一页的最小ID值（可以传其他条件值也可以）透传到下一页。这种其实我们产品体验上的滑动加载，瀑布流形式。</p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p>好了，该篇就到这，关注我，点赞，收藏（给我知道你们在，给我知道你们懂我）。</p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n</div>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2022-07-21 10:24:51", "summary": "前言问诊一索引失效、回表解析陈先生们，先看这篇索引失效、回表解析陈先生们，先看这篇问诊二正文话不多说，先当场整点货，搞个条数据：准备一张表：建个函数来造数据：估计很多初学者可能很少写这些，没关系，可以"}