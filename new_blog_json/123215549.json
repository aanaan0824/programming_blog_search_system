{"blogid": "123215549", "writerAge": "码龄4年", "writerBlogNum": "264", "writerCollect": "280", "writerComment": "80", "writerFan": "103", "writerGrade": "6级", "writerIntegral": "6683", "writerName": "潘广宇", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123215549.jpg", "writerRankTotal": "15389", "writerRankWeekly": "164985", "writerThumb": "141", "writerVisitNum": "512614", "blog_read_count": "2447", "blog_time": "已于 2022-04-26 16:49:59 修改", "blog_title": "PHP 快速解决跨域问题", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p><strong>跨域介绍</strong></p>\n<p>浏览器拥有同源策略限制确保安全，同源策略会阻止一个域的Javascript脚本和另外一个域的内容进行交互。</p>\n<p>当一个请求url的<strong>协议、域名（包括多级域名）、端口</strong>三者之间任意一个与当前页面url不同即为跨域。<br/>  </p>\n<p><strong>跨域限制</strong></p>\n<p>1）无法读取非同源网页的 Cookie、LocalStorage 和 IndexedDB</p>\n<p>2）无法接触非同源网页的 DOM 节点</p>\n<p>3）无法向非同源地址发送 AJAX 请求<br/>  </p>\n<p><strong>跨域解决方案</strong></p>\n<p><strong>1）JSONP（只支持GET请求）</strong></p>\n<p>Javascript：</p>\n<pre><code class=\"language-javascript\">&lt;script src=\"http://test.com/data.php?callback=dosomething\"&gt;&lt;/script&gt;\n// 向服务器test.com发出请求，该请求的查询字符串有一个callback参数，用来指定回调函数的名字\n \n// 处理服务器返回回调函数的数据\n&lt;script type=\"text/javascript\"&gt;\n    function dosomething(res){\n        // 处理获得的数据\n        console.log(res.data)\n    }\n&lt;/script&gt;</code></pre>\n<p>data.php：</p>\n<pre><code class=\"language-php\">header('Content-type: application/json');\n\n//获取回调函数名\n$jsoncallback = htmlspecialchars($_REQUEST ['callback']);\n\n//json数据\n$json_data = '[\"customername1\",\"customername2\"]';\n\n//输出jsonp格式的数据\necho $jsoncallback . \"(\" . $json_data . \")\";</code></pre>\n<p><strong>2）CORS 跨域资源分享（Cross-<a href=\"https://so.csdn.net/so/search?q=Origin&amp;spm=1001.2101.3001.7020\" title=\"Origin\">Origin</a> Resource Sharing）</strong></p>\n<p>1、普通跨域请求：只需服务器端设置 Access-Control-Allow-Origin</p>\n<p>2、带cookie跨域请求：前后端都需要进行设置</p>\n<p>PHP：</p>\n<pre><code class=\"language-php\">header(\"Access-Control-Allow-Origin:*\");</code></pre>\n<p>或者 Nginx：</p>\n<pre><code class=\"language-php\">location ~ .*\\.php$\n{\n    add_header 'Access-Control-Allow-Origin' '*';    # 就加这句就行\n    include fcgi.conf;\n    fastcgi_pass  127.0.0.1:10080;\n    fastcgi_index index.php;\n    expires off;\n}</code></pre>\n<p>Javascript：</p>\n<pre><code class=\"language-javascript\">$.ajax({\n   url: 'http://www.test.com:8080/login',\n   type: 'get',\n   data: {},\n   xhrFields: {\n       withCredentials: true    // 前端设置是否带cookie\n   },\n   crossDomain: true,           // 会让请求头中包含跨域的额外信息，但不会含cookie\n});\n\n</code></pre>\n<p><strong>3）WebSocket 浏览器与服务器的全双工通信，同时也是跨域的一种解决方案</strong></p>\n<p><strong>4）Nginx 反向代理</strong></p>\n<pre><code class=\"language-bash\">server {\n    # nginx监听所有 test.com:9000 端口收到的请求\n\n\tlisten       9000;\n\tserver_name  test.com;\n\n    # test.com:9000 会被转发到 192.168.25.20:9000\n\tlocation / {\n\t\tproxy_pass http://192.168.25.20:9000;\n\t}\n\n\t# test.com:9000/api/ 会被转发到 \"192.168.25.20:9000/api/\"\n\n\tlocation /api/ {\n\t\tproxy_pass http://192.168.25.20:9000;\n\t}\n}</code></pre>\n<p>摘自：<a href=\"https://blog.csdn.net/qq_38128179/article/details/84956552\" title=\"什么是跨域？跨域解决方法_越努力，越幸运！-CSDN博客_跨域\">什么是跨域？跨域解决方法_越努力，越幸运！-CSDN博客_跨域</a></p>\n</div>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 1, "time": "2022-04-26 16:49:59", "summary": "跨域介绍浏览器拥有同源策略限制确保安全，同源策略会阻止一个域的脚本和另外一个域的内容进行交互。当一个请求的协议、域名包括多级域名、端口三者之间任意一个与当前页面不同即为跨域。跨域限制无法读取非同源网页"}