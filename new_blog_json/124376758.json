{"blogid": "124376758", "writerAge": "码龄2年", "writerBlogNum": "144", "writerCollect": "10680", "writerComment": "10189", "writerFan": "34112", "writerGrade": "7级", "writerIntegral": "22404", "writerName": "Developer 小马", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124376758.jpg", "writerRankTotal": "321", "writerRankWeekly": "8", "writerThumb": "7519", "writerVisitNum": "5151507", "blog_read_count": "53064", "blog_time": "于 2022-04-25 09:18:10 发布", "blog_title": "Vue项目保持用户登录状态（localStorage + vuex 刷新页面后状态依然保持）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p class=\"img-center\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/4a43a79f0f3c4681940d1ef5ef4a8e13.gif\"/></p>\n<p>        在前端项目开发中，实现用户的登陆注册功能时常常会有一个问题，那就是我们设置的登录状态，在浏览器页面刷新后就消失了，这其实只是因为我们没有保存用户状态。</p>\n<p>这里小马演示使用的是 <strong><span style=\"color:#fe2c24;\">localStorage</span> </strong>+<strong> <span style=\"color:#fe2c24;\">vuex</span> </strong>方法（其他诸如 sessionStorage、cookie 等用法相同，只是功能有所区别）。 </p>\n<hr/>\n<h3 id=\"main-toc\"><strong>一、实现效果</strong></h3>\n<p>实现功能：用户登录成功后，刷新浏览器页面或者关闭浏览器再次打开网页后，登录状态依然保持，直到用户点击登出。</p>\n<p style=\"text-align:center;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/6497319587ec49709c82059fe26e0ca3.gif\"/></p>\n<h3 id=\"%E4%BA%8C%E3%80%81%20%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4%E5%8F%8A%E6%B6%89%E5%8F%8A%E8%A6%81%E7%82%B9\">二、实现步骤及涉及要点</h3>\n<p><strong>1. </strong>首先在 vuex 中的 state 属性中添加一个空对象 userInfo{ } 用于保存用户登录后的状态；</p>\n<blockquote>\n<p><span style=\"color:#1c7892;\"><em><strong>涉及要点：</strong></em></span></p>\n<ul><li><span style=\"color:#1c7892;\">state 属性(状态)用于添加多个组件共享的变量，作用类似于 vue 中的 data；</span></li></ul>\n</blockquote>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" height=\"435\" src=\"..\\..\\static\\image\\6150a8ee3ea8417cb3226d45f7d559f9.png\" width=\"801\"/></p>\n<p><strong>2. </strong>在登录页面中，判断登录成功后创建对象 userInfo{ }，并添加描述登录状态的各属性，然后将该对象分别存入 localStorage 和 vuex； </p>\n<blockquote>\n<p><span style=\"color:#1c7892;\"><em><strong>涉及要点：</strong></em></span></p>\n<ul><li><span style=\"color:#1c7892;\">localStorage 属性允许访问 Document 源的 Storage 对象，存储的数据保存在浏览器会话中；</span></li><li><span style=\"color:#1c7892;\">与 sessionStorage 的唯一区别就是 localStorage 属于永久性存储，除非我们手动清除，而 sessionStorage 属于临时存储，浏览器关闭后便会被清空。</span>\n<ul><li><span style=\"color:#1c7892;\">存：localStorage.setItem('myCat', 'Tom');</span></li><li><span style=\"color:#1c7892;\">取：var cat = localStorage.getItem(\"myCat\");</span></li><li><span style=\"color:#1c7892;\">删：localStorage.removeItem(\"myCat\"); 或 localStorage.clear(\"myCat\");</span></li></ul></li></ul>\n<ul><li><span style=\"color:#1c7892;\">JSON.stringify() 系列化对象，将返回的对象类型转为字符串类型；</span></li><li><span style=\"color:#1c7892;\">this.$store.state，取 vuex 中 state 中的属性，如：</span>\n<ul><li><span style=\"color:#1c7892;\">this.$store.state.userInfo = userInfo //取出 vuex 中的 userInfo 并赋值为新的 userInfo</span></li></ul></li></ul>\n</blockquote>\n<p class=\"img-center\"><img alt=\"\" height=\"443\" src=\"..\\..\\static\\image\\bcdc1c7411204292bfd07d914c4e98ba.png\" width=\"800\"/></p>\n<p>3. 在挂载阶段，判断登录状态 userInfo；设置相关属性之后，就可以正常保存登录状态了。</p>\n<p>因为 localStorage 为永久保存，所以即使关闭浏览器再次打开网页登录状态依然存在，除非手动清除 localStorage 数据；</p>\n<p class=\"img-center\"><img alt=\"\" height=\"413\" src=\"..\\..\\static\\image\\82430acfffba45c293b6580cbe486661.png\" width=\"800\"/></p>\n<p>4. 设置登出，清除 localStorage 中的数据；</p>\n<p class=\"img-center\"><img alt=\"\" height=\"451\" src=\"..\\..\\static\\image\\2c981a099e244103a3607a2c17d4b3ae.png\" width=\"800\"/></p>\n<p>5. 实现功能。</p>\n<h3 id=\"%E4%B8%89%E3%80%81%E6%B6%89%E5%8F%8A%E4%BB%A3%E7%A0%81\">三、涉及代码</h3>\n<p><strong><em>vuex（store/index.js）</em></strong></p>\n<pre><code class=\"language-javascript\">import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    userInfo:{}\n  },\n  mutations: {\n  },\n  actions: {\n  },\n  modules: {\n  }\n})\n</code></pre>\n<p><strong><em>设置登录的页面（部分代码，无法复制即用，仅作参考）</em></strong></p>\n<p><em>登录方法</em></p>\n<pre><code class=\"language-javascript\">//登录方法\nlogin() {\n  //验证码的验证\n  var randStr = this.rand.toString().replace(/,/g, \"\"); //随机生成的验证码为数组形式，此处将其转为字符串并去掉中间相隔的逗号\n  var codeStr = this.code; //用户输入的验证码\n  if (randStr.toLowerCase() == codeStr.toLowerCase()) { //比较用户输入的与随机生成的验证码,不区分大小写\n    //获取登录接口\n    axios.post(\"user/login\", {\n      name: this.name,\n      password: this.password,\n      administrator: this.usertyp\n    }).then(result =&gt; {\n      console.log(result.data);\n      const code = result.data.code;\n      this.token = code;\n      if (this.token == 1003) {\n        this.$message.error('用户名或密码未输入!');\n      } else if (this.token == 1001) {\n        this.$message.error('登录失败，请检查用户名或者密码是否正确。');\n      } else if (this.token == 1005) {\n        this.$message.error('您不是管理员，无管理员登录权限！');\n      } else if (this.token == 200) {\n        if (this.usertyp == \"2\") { //管理员登录\n          this.$message.success('登录成功！');\n          this.dialogFormVisible = false; //登录成功后登录插槽关闭\n          this.loginReg = false;//隐藏登录注册按钮，显示欢迎信息\n          this.manage = true;//显示管理员登录信息\n          let userInfo = {\n            isLogin: true,\n            manage: true,\n            name: this.name\n          };\n          localStorage.setItem(\"userInfo\", JSON.stringify(userInfo));\n          this.$store.state.userInfo = userInfo\n          console.log('this.$store.state.userInfo', this.$store.state.userInfo)\n          setTimeout(() =&gt; { //此处必须使用vue函数，否则this无法访vue实例\n            this.$message(`欢迎您，管理员 ${this.name}！`)\n          }, 2000);\n          console.log(this.usertyp)\n        } else if (this.usertyp == \"\") {  //普通用户\n          this.$message.success('登录成功！');\n          this.dialogFormVisible = false; //登录成功后插槽关闭\n          this.loginReg = false;//隐藏登录注册按钮，显示欢迎信息\n          this.user = true; //显示普通用户登录信息\n          let userInfo = {\n            isLogin: true,\n            manage: false,\n            name: this.name\n          }\n          localStorage.setItem(\"userInfo\", JSON.stringify(userInfo));\n          this.$store.state.userInfo = userInfo\n          setTimeout(() =&gt; { //此处必须使用vue函数，否则this无法访vue实例\n            this.$message(`欢迎您，尊贵的晋之魂用户 ${this.name}！`)\n          }, 2000);\n          console.log(this.usertyp)\n        }\n        this.Cookie.set(\"UserName\", this.name); //将用户名存到cookie\n        console.log('登录状态为：' + this.token);\n      }\n    })\n  } else {\n    this.$message.error('请输入正确的验证码');\n  }\n},</code></pre>\n<p><em>退出登录方法</em></p>\n<pre><code class=\"language-javascript\">//退出登录\nlogout() {\n  this.Cookie.remove(\"UserName\");\n  this.loginReg = true;\n  this.manage = false;\n  this.user = false;\n  this.log_out = false;\n  localStorage.clear();\n  setTimeout(() =&gt; {\n    this.$router.push({\n      path: '/'\n    }, () =&gt; {\n    }, () =&gt; {\n    });//退出登录后2秒后跳转至首页\n  }, 2000)\n  //加()=&gt;{},()=&gt;{} 可解决路由重复后台报错问题\n},</code></pre>\n<p><em>挂载阶段判断登录状态</em></p>\n<pre><code class=\"language-javascript\">mounted() {\n      // 判断登录状态\n      let userInfo = JSON.parse(localStorage.getItem('userInfo'));\n      if (null === userInfo) return;\n      console.log('userInfo', userInfo.isLogin);\n      if (userInfo.isLogin) {\n        this.dialogFormVisible = false; //登录成功后插槽关闭\n        this.loginReg = false;//隐藏登录注册按钮，显示欢迎信息\n        this.name = userInfo.name;\n        if (userInfo.manage) {\n          this.manage = true;//显示管理员登录信息\n        } else {\n          this.user = true;//显示普通用户登录信息\n        }\n      }\n    }</code></pre>\n<hr/>\n<p><em>提示：小马使用的是 vue + Element UI，使用其他技术代码可能不同，但思路是不变的。</em></p>\n</div>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-04-25 09:18:10", "summary": "在前端项目开发中，实现用户的登陆注册功能时常常会有一个问题，那就是我们设置的登录状态，在浏览器页面刷新后就消失了，这其实只是因为我们没有保存用户状态。这里小马演示使用的是方法其他诸如、等用法相同，只是"}