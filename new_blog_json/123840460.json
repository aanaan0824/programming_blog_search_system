{"blogid": "123840460", "writerAge": "码龄8年", "writerBlogNum": "341", "writerCollect": "2458", "writerComment": "322", "writerFan": "4465", "writerGrade": "6级", "writerIntegral": "5685", "writerName": "吨吨不打野", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123840460.jpg", "writerRankTotal": "2693", "writerRankWeekly": "2549", "writerThumb": "505", "writerVisitNum": "663733", "blog_read_count": "4605", "blog_time": "于 2022-03-31 21:28:30 发布", "blog_title": "C++中文件后缀的区别：cxx、cpp和txx，c、cc和cpp、hpp和h等", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#1_cxxcpptxxCUnixWindows_2\">1. cxx、cpp和txx（C++文件在Unix和Windows下的区分）</a></li><li><a href=\"#2_ccccpphpphCC_14\">2. c、cc和cpp、hpp和h（C和C++后缀的区分）</a></li><li><a href=\"#3_hhcpp_31\">3. .h文件的缺点（.h和.cpp文件的区别/设置两种文件的意义是什么）</a></li></ul>\n</div>\n<br/> 又开始接触C++了，接触我对代码一开始认识的内容咧，加油\n<p></p>\n<h1><a id=\"1_cxxcpptxxCUnixWindows_2\"></a>1. cxx、cpp和txx（C++文件在Unix和Windows下的区分）</h1>\n<p>根据 ITK官方论坛：<a href=\"https://itk.org/pipermail/insight-users/2006-January/016206.html\">[Insight-users] Difference between .cxx and .cpp, .txx and .h</a></p>\n<p><code>.cxx</code>和<code>.cpp</code>文件没有区别，都是C++实施文件（实际执行的文件），</p>\n<ul><li>一般Visual C++（即Windows平台下）会使用<code>.cpp</code>文件。</li><li>Unix程序通常更多使用<code>.cxx</code></li><li><code>.txx</code>文件是模板文件，通常不能被直接编译，必须被实例化。例如：ITK的库都很小，因为他们大部分都是模板文件。</li><li><code>.h</code>文件是头文件，一般存放类定义，具体实施会放在<code>.cxx</code>文件和<code>.cpp</code>文件中</li></ul>\n<hr/>\n<h1><a id=\"2_ccccpphpphCC_14\"></a>2. c、cc和cpp、hpp和h（C和C++后缀的区分）</h1>\n<ul><li> <p>从历史角度来看，第一批用于<code>C++</code>的扩展名是<code>.c</code>和<code>.h</code>，和<code>C</code>一样。这就导致编译时无法区分<code>C++</code>和<code>C</code>文件。</p> </li><li> <p>C++是在Unix上开发的，</p>\n<ul><li>Unix的文件系统是大小写敏感的。所以有些人使用<code>.C</code>作为<code>C++</code>文件，其他人使用<code>.c++, .cc, .cxx</code>表示<code>C++</code>文件。<code>.C</code>和<code>.c++</code>因为在其他文件系统不被承认（无法使用），所以使用率迅速下降。</li><li>注意：Unix是不以后缀名来作为文件区分的(linux可以自动识别文件类型，有很多类型都不用加后缀)，所以这些后缀也只是开发者自己方便理解加上去的，不理解的看<a href=\"https://blog.csdn.net/Castlehe/article/details/121224312\">这里</a></li><li>DOS和Windows的<code>C++</code>编译器一般使用<code>.cpp</code>，但是有些编译器无法配置导致选择变得困难。出于移植性的考虑，一般都会选择<code>.cpp</code>，即便是在非MS-Windows系统的情况下</li></ul> </li><li> <p>头文件可以使用<code>.H, .h++, .hh, .hxx和.hpp</code>作为C++的头文件（还是因为Unix区分大小写），以和<code>.h</code>的C的头文件区分。但是不同于主文件（<code>main</code>这些真实运行的函数所在的文件），<code>.h</code>这种后缀到现在都是<code>C++</code>里非常流行的格式，尽管<code>.h</code>文件具有一个非常明显的缺点——不允许明确头文件是否需要包含在C的上下文中。迄今为止，标准的头文件都没有扩展名。</p>\n<ul><li><code>.h</code>文件是否包含在C的上下文中，意思就是是否会检查这个C文件中使用了<code>.h</code>中的内容（类似python有时候也会import多余的包）</li><li>这部分解释详见下面的 <strong>3. .h文件的缺点（.h和.cpp文件的区别/设置两种文件的意义是什么）</strong></li></ul> </li><li> <p>另外，有些使用<code>.ii, .ixx, .ipp, inl</code>作为提供内联（<code>inline</code>）定义的头文件后缀，用<code>.txx, .tpp, .tpl</code>作为模板定义。这些要么包含在提供定义的头文件中，要么手动放在需要的上下文里。</p> </li><li> <p>编译器等工具通常不会关心使用了哪些扩展名，但是使用与C++相关的扩展，可以避免跟踪配置来正确识别其所使用的语言这一需求，</p> </li><li> <p><strong>补充</strong>：Visual Studio的试验模块支持<code>.ixx</code>作为模块接口的默认扩展名，clang++也将<code>.c++m, .cppm和.cxxm</code>作为模块接口的默认扩展名</p> </li></ul>\n<hr/>\n<h1><a id=\"3_hhcpp_31\"></a>3. .h文件的缺点（.h和.cpp文件的区别/设置两种文件的意义是什么）</h1>\n<p>根据 <strong>👍🏼👍🏼👍🏼美团技术文章：<a href=\"https://tech.meituan.com/2020/12/10/apache-kylin-practice-in-meituan.html\">C++服务编译耗时优化原理及实践</a></strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\41874ea8553b4306b8a3e8c60e0c2311.png\" width=\"900\"/><br/> <strong>解释一下</strong></p>\n<ul><li>对于<code>C/C++</code>，一个文件是一个编译单元</li><li>对于每个编译单元，要独立解析所有包含的头文件。也就是比如我有三个<code>cpp</code>文件在一个文件夹里，这三个文件都有<code>#include &lt;iostream&gt;</code>，则<code>iostream.h</code>会被解析3次。</li></ul>\n<hr/>\n<p>根据stack overflow：<a href=\"https://stackoverflow.com/questions/4145934/using-c-headers-h-vs-headers-plus-implementation-h-cpp-what-are-the\">Using C++ headers (.h) vs headers plus implementation (.h + .cpp), what are the disadvantages?</a><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0a48903cecf14d37aa179b2beb8a18f8.png\" width=\"700\"/><br/> 大致意思和美团的解释差不多，就是编译时候解析方式不一样。</p>\n<p>这个回答对应的问题是：</p>\n<ul><li>作为一个新手C++程序猿，我经常把类接口放在<code>.h</code>文件中，实现放在<code>.cpp</code>文件中。但是近来我尝试了<code>C#</code>，非常喜欢<code>C#</code>干净的语法和组织文件的方式，特别是头文件和实施之间没有区别，可以每个类都用一个<code>.cs</code>文件实现，不需要头文件。</li><li>我知道在<code>C++</code>中这也是可能的（可以在<code>.h</code>文件中通过<code>inline</code>某个函数实现），但是迄今为止我都不太清楚<code>.h</code>和<code>.cpp</code>文件在<code>C++</code>项目中的区别，这种划分方式的优缺点是什么？</li></ul>\n<hr/>\n<p>参考：</p>\n<ul><li>ITK官方论坛：<a href=\"https://itk.org/pipermail/insight-users/2006-January/016206.html\">[Insight-users] Difference between .cxx and .cpp, .txx and .h</a></li><li>OSCHINA开源中国：<a href=\"https://my.oschina.net/acmfly/blog/83873\">txx cxx cpp 的区别</a></li><li>github的issue：<a href=\"https://github.com/kiteco/issue-tracker/issues/539\">Recognize *.cxx, *.hxx, *.tpp, *txx, *.ipp, and *.ixx files as C++ #539</a></li><li>stack overflow：<a href=\"https://stackoverflow.com/questions/5171502/c-vs-cc-vs-cpp-vs-hpp-vs-h-vs-cxx\">.c vs .cc vs. .cpp vs .hpp vs .h vs .cxx [duplicate]</a></li><li>微软C++文档：<a href=\"https://docs.microsoft.com/en-us/cpp/cpp/header-files-cpp?view=msvc-170\">Header files (C++)</a></li><li>Stack Overflow：<a href=\"https://stackoverflow.com/questions/1545080/c-code-file-extension-what-is-the-difference-between-cc-and-cpp\">C++ code file extension? What is the difference between .cc and .cpp [closed]</a></li><li>Stack Overflow：<a href=\"https://stackoverflow.com/questions/152555/h-or-hpp-for-your-class-definitions\">*.h or *.hpp for your class definitions</a></li></ul>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "PHP", "cpp": 1, "csharp": 1, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 1, "time": "2022-03-31 21:28:30", "summary": "文章目录、和文件在和下的区分、和、和和后缀的区分文件的缺点和文件的区别设置两种文件的意义是什么又开始接触了，接触我对代码一开始认识的内容咧，加油、和文件在和下的区分根据官方论坛：和文件没有区别，都是实"}