{"blogid": "120073706", "writerAge": "码龄3年", "writerBlogNum": "71", "writerCollect": "87", "writerComment": "13", "writerFan": "9", "writerGrade": "3级", "writerIntegral": "711", "writerName": "suixinger_lmh", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_120073706.jpg", "writerRankTotal": "41602", "writerRankWeekly": "91109", "writerThumb": "14", "writerVisitNum": "61049", "blog_read_count": "3725", "blog_time": "于 2021-11-15 16:42:53 发布", "blog_title": "C#串口读取", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>串口SerialPort类</h3>\n<ul><li><a href=\"#using_SystemIOPorts_2\">using System.IO.Ports;</a></li><li><a href=\"#SerialPort_5\">SerialPort常用属性</a></li><li><a href=\"#SerialPort_25\">SerialPort的主要方法</a></li><li><a href=\"#_41\">串口使用</a></li><li><ul><li><a href=\"#_42\">串口使用需要一些相关设置：</a></li><li><a href=\"#_49\">打开和关闭串口</a></li><li><a href=\"#DataReceived_52\">DataReceived</a></li></ul>\n</li><li><a href=\"#_55\">使用过程中问题：</a></li><li><ul><li><a href=\"#DataReceived___56\">DataReceived 和 自己写线程监听</a></li></ul>\n</li><li><a href=\"#_59\">一个简单的串口解析模板：</a></li><li><a href=\"#_273\">问题：</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"using_SystemIOPorts_2\"></a>using System.IO.Ports;</h1>\n<p>此类位于System.IO.Ports命名空间下。用于控制串行端口文件资源，此类提供同步I/O和事件驱动的I/O、对管脚和中断状态的访问以及对串行驱动程序的访问。</p>\n<h1><a id=\"SerialPort_5\"></a>SerialPort常用属性</h1>\n<ul><li>BaudRate 获取或设置串行波特率</li><li>BreakState 获取或设置中断信号状态</li><li>BytesToRead 获取接收缓冲区中数据的字节数</li><li>BytesToWrite 获取发送缓冲区中数据的自己数</li><li>DataBits 获取或设置每个字节的标准数据位长度（默认为8）</li><li>DtrEnable 获取或设置一个值，该值指示Null字节在端口和接收缓冲区之间传输时是否被忽略</li><li>Encoding 获取或设置传输前后的文本转换的字节编码</li><li>IsOpen 获取一个值，该值指示SerialPort对象的打开或关闭状态</li><li>NewLine 获取或设置用于解释ReadLine和WriteLine方法调用结束的值</li><li>Parity 获取或设置奇偶校验检查协议</li><li>PortName 获取或设置通信端口，包括但不限于所有可用的COM端口</li><li>ReadBufferSize 获取或设置SerialPort输入缓冲区的大小</li><li>ReadTimeOut 获取或设置读取操作未完成时发生超时之前的毫秒数</li><li>ReceivedBytesThreshold 获取或设置DataReceived事件发生前内部输入缓冲区中的字节数</li><li>RtsEnable 获取或设置一个值，该值指示在串行通信中是否启用请求发送RTS信号</li><li>StopBits 获取或设置每个字节的标准停止位数</li><li>WriteBufferSize 获取或设置串行端口输出缓冲区的大小</li><li>WriteTimeout 获取或设置写入操作未完成时发生超时之前的毫秒数</li></ul>\n<h1><a id=\"SerialPort_25\"></a>SerialPort的主要方法</h1>\n<ul><li>Close 关闭端口连接，将IsOpen属性设置成为false，并释放内部Stream对象</li><li>Dispose 释放SerialPort对象使用的非托管资源</li><li>GetPortNames 获取当前计算机的串行端口名称数组</li><li>Open 打开一个新的串行端口连接</li><li>Read 从SerialPort输入缓冲区中读取</li><li>ReadByte 从SerialPort输入缓冲区中同步读取一个字节</li><li>ReadChar 从SerialPort输入缓冲区中同步读取一个字符</li><li>ReadExisting 在编码的基础上，读取SerialPort对象的流和输入缓冲区中所有立即可用的字节</li><li>ReadLine 一直读取到输入缓冲区中的NewLine值</li><li>ReadTo 一直读取到输入缓冲区中指定value的字符串</li><li>Write 将数据写入到串行端口输出缓冲区</li><li>WriteLine 将指定的字符串和NewLine值写入到输出缓冲区</li><li>DataReceived 表示将处理SerialPort对象的数据接收事件的方法</li><li>ErrorReceived 表示处理Serialport对象的错误事件的方法</li></ul>\n<h1><a id=\"_41\"></a>串口使用</h1>\n<h2><a id=\"_42\"></a>串口使用需要一些相关设置：</h2>\n<p>.PortName 串口名称，COM1, COM2等。<br/> .BaudRate 波特率，也就是串口通讯的速度，<mark>进行串口通讯的双方其波特率需要相同，如果用PC连接其他非PC系统，一般地，波特率由非PC系统决定。</mark><br/> .Parity 奇偶校验。可以选取枚举Parity中的值<br/> .DataBits 数据位<br/> .StopBits 停止位，可以选取枚举StopBits中的值<br/> .Handshake 握手方式，也就是数据流控制方式，可以选取枚举Handshake中的值</p>\n<h2><a id=\"_49\"></a>打开和关闭串口</h2>\n<p>在创建一个SerialPort 对象，设置串口属性后，可以通过 Open()方法打开串口。数据读写完成后，可以通过Close()方法关闭串口。<br/> 根据经验，对于有些系统，在打开串口后，还需要将RtsEnable设置为True，这样才能读写数据，否则不能正常读写数据。</p>\n<h2><a id=\"DataReceived_52\"></a>DataReceived</h2>\n<p>SerialPort 提供了DataReceived事件。当有数据进入时，该事件被触发。该事件的触发由操作系统决定，当有数据到达时，该事件在辅助线程中被触发。<mark>辅助线程的优先级比较低，因此并不能确保每个字节的数据到达时，该事件都被触发。</mark></p>\n<h1><a id=\"_55\"></a>使用过程中问题：</h1>\n<h2><a id=\"DataReceived___56\"></a>DataReceived 和 自己写线程监听</h2>\n<p>项目中遇到的是不调用DataReceived而是自己写线程监听事件；</p>\n<h1><a id=\"_59\"></a>一个简单的串口解析模板：</h1>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">Assets<span class=\"token punctuation\">.</span>Scripts<span class=\"token punctuation\">.</span>Configuration</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Assets<span class=\"token punctuation\">.</span>Scripts<span class=\"token punctuation\">.</span>EntityModel</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>Ports</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/// &lt;summary&gt;</span>\n<span class=\"token comment\">/// 转盘监听，</span>\n<span class=\"token comment\">/// 传输结果，监听线程，</span>\n<span class=\"token comment\">/// &lt;/summary&gt;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConnectTurntable</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//监听串口线程</span>\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">Thread</span> dataReceiveThread_1<span class=\"token punctuation\">,</span> dataReceiveThread_2<span class=\"token punctuation\">;</span>\n\n\n\n   <span class=\"token keyword\">static</span> <span class=\"token class-name\">SerialPort</span> serialPort <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SerialPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">StartSerialPortListen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//设定</span>\n        serialPort<span class=\"token punctuation\">.</span>PortName <span class=\"token operator\">=</span> <span class=\"token string\">\"COM1\"</span><span class=\"token punctuation\">;</span>\n        serialPort<span class=\"token punctuation\">.</span>BaudRate <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n        serialPort<span class=\"token punctuation\">.</span>ReadTimeout <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span>\n        serialPort<span class=\"token punctuation\">.</span>WriteTimeout <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span>\n        serialPort<span class=\"token punctuation\">.</span>DataReceived <span class=\"token operator\">+=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//不使用DataReceived，自己写线程监听</span>\n        <span class=\"token comment\">//开启线程监听串口</span>\n        <span class=\"token keyword\">try</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n        \t<span class=\"token comment\">//串口数据解析方法(忽视第二个参数，根据自己的解析方式自己写，这里放一个公司的串口解析)</span>\n            dataReceiveThread_1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">DataReceiveFunction</span><span class=\"token punctuation\">(</span>serialPort<span class=\"token punctuation\">,</span> xuanzhuan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dataReceiveThread_1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> dataReceiveThread_1<span class=\"token punctuation\">.</span>IsAlive<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                dataReceiveThread_1<span class=\"token punctuation\">.</span><span class=\"token function\">Abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            dataReceiveThread_1<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Debug<span class=\"token punctuation\">.</span><span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"监听事件打开失败！ex=\"</span> <span class=\"token operator\">+</span> ex<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    \n\n    \n\n    <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> 串口数据解析</span>\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DataReceiveFunction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SerialPort</span> serialPort<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SensorResult</span> sensorResult<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">try</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">/** **/</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> RxBuffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">byte</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">UInt16</span> usRxLength <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> bytes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> flag0 <span class=\"token operator\">=</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> flag1 <span class=\"token operator\">=</span> <span class=\"token number\">0xAA</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//用于记录此时的数据次序</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>serialPort <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> serialPort<span class=\"token punctuation\">.</span>IsOpen<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">try</span>\n                    <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> byteTemp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">byte</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n                        <span class=\"token keyword\">try</span>\n                        <span class=\"token punctuation\">{<!-- --></span>\n                            <span class=\"token class-name\">UInt16</span> usLength <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">try</span>\n                            <span class=\"token punctuation\">{<!-- --></span>\n                                usLength <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UInt16<span class=\"token punctuation\">)</span>serialPort<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>RxBuffer<span class=\"token punctuation\">,</span> usRxLength<span class=\"token punctuation\">,</span> <span class=\"token number\">700</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> err<span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">{<!-- --></span>\n                                <span class=\"token comment\">//MessageBox.Show(err.Message);</span>\n                                <span class=\"token comment\">//return;</span>\n                                Debug<span class=\"token punctuation\">.</span><span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spSerialPort.Read！！ ex=\"</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                            usRxLength <span class=\"token operator\">+=</span> usLength<span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>usRxLength <span class=\"token operator\">&gt;=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">{<!-- --></span>\n                                <span class=\"token comment\">//UpdateData Update = new UpdateData(DecodeData);</span>\n                                RxBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">CopyTo</span><span class=\"token punctuation\">(</span>byteTemp<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>byteTemp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0x55</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>byteTemp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0x50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">{<!-- --></span>\n                                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> usRxLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> RxBuffer<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> RxBuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                                    usRxLength<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span>\n                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>byteTemp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> byteTemp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> byteTemp<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> byteTemp<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> byteTemp<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> byteTemp<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> byteTemp<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> byteTemp<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> byteTemp<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> byteTemp<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> byteTemp<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">{<!-- --></span>\n                                    <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">XuanzhuanReceiveData</span><span class=\"token punctuation\">(</span>byteTemp<span class=\"token punctuation\">,</span> sensorResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                    t<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span>\n                                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> usRxLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> RxBuffer<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> RxBuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                                usRxLength <span class=\"token operator\">-=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n\n                            Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword\">finally</span>\n                        <span class=\"token punctuation\">{<!-- --></span>\n\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token comment\">// Debug.Log(ex.Message);</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n\n            <span class=\"token comment\">//log.Error(\"DataReceiveFunction！！ ex=\" + ex.Message);</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n\n\n\n   \n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">XuanzhuanReceiveData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> RxBuffer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SensorResult</span> sensorResult<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">try</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">DecodeData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> sensorResult<span class=\"token punctuation\">,</span> RxBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            Debug<span class=\"token punctuation\">.</span><span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" ComReceiveData ex={0}\"</span> <span class=\"token operator\">+</span> ex<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/// &lt;summary&gt;</span>\n    <span class=\"token comment\">/// 输入数据解析出来到sr里</span>\n    <span class=\"token comment\">/// &lt;/summary&gt;</span>\n    <span class=\"token comment\">/// &lt;param name=\"sr\"&gt;&lt;/param&gt;</span>\n    <span class=\"token comment\">/// &lt;param name=\"byteTemp\"&gt;&lt;/param&gt;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DecodeData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token class-name\">SensorResult</span> sr<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> byteTemp<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">DateTime</span> TimeStart <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">short</span></span> sRightPack <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">short</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> ChipTime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">short</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> Temperature<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> Pressure<span class=\"token punctuation\">,</span> Altitude<span class=\"token punctuation\">,</span> GroundVelocity<span class=\"token punctuation\">,</span> GPSYaw<span class=\"token punctuation\">,</span> GPSHeight<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">long</span></span> Longitude<span class=\"token punctuation\">,</span> Latitude<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> LastTime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">double</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\n\n        <span class=\"token class-name\"><span class=\"token keyword\">float</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> Data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">float</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> TimeElapse <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DateTime<span class=\"token punctuation\">.</span>Now <span class=\"token operator\">-</span> TimeStart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>TotalMilliseconds <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n\n        Data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> BitConverter<span class=\"token punctuation\">.</span><span class=\"token function\">ToInt16</span><span class=\"token punctuation\">(</span>byteTemp<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> BitConverter<span class=\"token punctuation\">.</span><span class=\"token function\">ToInt16</span><span class=\"token punctuation\">(</span>byteTemp<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Data<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> BitConverter<span class=\"token punctuation\">.</span><span class=\"token function\">ToInt16</span><span class=\"token punctuation\">(</span>byteTemp<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Data<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> BitConverter<span class=\"token punctuation\">.</span><span class=\"token function\">ToInt16</span><span class=\"token punctuation\">(</span>byteTemp<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sRightPack<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>byteTemp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">0x52</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\">//Data[3] = Data[3] / 32768 * double.Parse(textBox9.Text) + double.Parse(textBox8.Text);</span>\n                Temperature <span class=\"token operator\">=</span> Data<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> <span class=\"token number\">100.0</span><span class=\"token punctuation\">;</span>\n                Data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> <span class=\"token number\">32768.0f</span> <span class=\"token operator\">*</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">;</span>\n                Data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> <span class=\"token number\">32768.0f</span> <span class=\"token operator\">*</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">;</span>\n                Data<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Data<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> <span class=\"token number\">32768.0f</span> <span class=\"token operator\">*</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">;</span>\n                sr<span class=\"token punctuation\">.</span>WX <span class=\"token operator\">=</span> Data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                sr<span class=\"token punctuation\">.</span>WY <span class=\"token operator\">=</span> Data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                sr<span class=\"token punctuation\">.</span>WZ <span class=\"token operator\">=</span> Data<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                sr<span class=\"token punctuation\">.</span>WO <span class=\"token operator\">=</span> Data<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>TimeElapse <span class=\"token operator\">-</span> LastTime<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                LastTime<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> TimeElapse<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n       \n            <span class=\"token keyword\">case</span> <span class=\"token number\">0x55</span><span class=\"token punctuation\">:</span>\n                sr<span class=\"token punctuation\">.</span>D0 <span class=\"token operator\">=</span> Data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                sr<span class=\"token punctuation\">.</span>D1 <span class=\"token operator\">=</span> Data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                sr<span class=\"token punctuation\">.</span>D2 <span class=\"token operator\">=</span> Data<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                sr<span class=\"token punctuation\">.</span>D3 <span class=\"token operator\">=</span> Data<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      \n            <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n\n\n   \n\n    <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n\n\n\n\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h1><a id=\"_273\"></a>问题：</h1>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>use11byte<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> use11byte<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> use11byte<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> use11byte<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> use11byte<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> use11byte<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> use11byte<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> use11byte<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> use11byte<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> use11byte<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> use11byte<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>校验：前几个的和，&amp; 0xff, 取最后8位 和校验位校验</p>\n<p>BitConverter.ToInt16(byteTemp, 2);使用，<br/> 取byte[] 中 第2个byte和他的下一个（即第三个），然后组合成 【第三个 第二个】16位数。<mark>注意颠倒</mark></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-11-15 16:42:53", "summary": "串口类常用属性的主要方法串口使用串口使用需要一些相关设置：打开和关闭串口使用过程中问题：和自己写线程监听一个简单的串口解析模板：问题：此类位于命名空间下。用于控制串行端口文件资源，此类提供同步和事件驱"}