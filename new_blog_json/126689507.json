{"blogid": "126689507", "writerAge": "码龄6年", "writerBlogNum": "278", "writerCollect": "4261", "writerComment": "324", "writerFan": "7064", "writerGrade": "6级", "writerIntegral": "6283", "writerName": "微小冷", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126689507.jpg", "writerRankTotal": "2181", "writerRankWeekly": "10495", "writerThumb": "1273", "writerVisitNum": "499652", "blog_read_count": "701", "blog_time": "已于 2022-09-05 19:56:42 修改", "blog_title": "Python从入门到高手的80行代码", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><ul><li><ul><li><a href=\"#_1\">基础入门</a></li><li><a href=\"#_58\">菜鸟提升</a></li><li><a href=\"#_118\">基础晋级</a></li><li><a href=\"#_183\">高手之路</a></li><li><a href=\"#_310\">内置包库</a></li><li><a href=\"#_467\">奇技淫巧</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h3><a id=\"_1\"></a>基础入门</h3>\n<p><strong>1</strong> <code>python</code><br/> 即在命令行输入<code>python</code>，进入<code>Python</code>的开发环境。</p>\n<p><strong>2</strong> <code>x = 1+2*3-4/5+6**2</code><br/> 加减乘除四则混合运算，可当作计算器使用，其中<code>**</code>表示乘方。</p>\n<p><strong>3</strong> <code>print(x)</code><br/> 即输出<code>x</code>的值，如果感觉麻烦，可以直接输入<code>x</code>，然后回车，也能看到x的值。</p>\n<p><strong>4</strong> <code>if x&gt;5 : print(x)</code><br/> 简单的判断，如果<code>x&gt;5</code>，则打印<code>x</code>。</p>\n<p><strong>5</strong> <code>for i in range(10): print(i)</code><br/> 简单的循环，其中<code>range(10)</code>表示创建一个可迭代的自然序列，<code>range(10)</code>表示<code>0,1,2...9</code>。</p>\n<p><strong>6</strong> <code>'hello '+\"world\"</code><br/> python中可用单引号或双引号表示字符串，<code>+</code>可以拼接两个字符串。</p>\n<p><strong>7</strong> <code>def addOne(x):return x+1</code><br/> python中通过<code>def</code>来声明函数，函数名称和函数主体之间用<code>:</code>分隔，声明上式之后可以直接在命令行中调用。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">def</span> <span class=\"token function\">addOne</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> addOne<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">2</span>\n</code></pre>\n<p><strong>8</strong> <code>x = [1,2,'abc',3,2]</code><br/> <code>[]</code>可创建一个列表，列表中的成员可以为任意数据类型。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> x\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p><strong>9</strong> <code>x[0]</code><br/> 通过方括号和冒号可对列表进行索引，列表的索引值从0开始。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token number\">1</span>\n</code></pre>\n<p><strong>10</strong> <code>y = set(x)</code>\\</p>\n<p><code>set</code>为集合，集合中不允许存在相同的元素，所以将一个列表转成集合之后，会删除列表中的重复元素。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> y <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> y\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_58\"></a>菜鸟提升</h3>\n<p><strong>11</strong> <code>pip install numpy</code><br/> 在<strong>命令行</strong>中运行<code>pip</code>命令，可安装相应的模块。</p>\n<p><strong>12</strong> <code>import numpy as np</code><br/> 导入<code>numpy</code>包，并给与其<code>np</code>的标识，从而可用<code>np.</code>来调用<code>numpy</code>中的函数。</p>\n<p><strong>13</strong> <code>x = np.arange(10)</code><br/> 生成一个自然序列，与<code>range</code>，但是<code>np.arange</code>得到的可进行运算的<strong>数组</strong>(array)。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> x <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> x\narray<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>14</strong> <code> x**2</code><br/> 只是演示一下，array可以使用运算符。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> x<span class=\"token operator\">**</span><span class=\"token number\">2</span>\narray<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">49</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">81</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>int32<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>15</strong> <code>x.tolist()</code><br/> 将x从<code>array</code>转成<code>list</code>，由于列表(list)并不支持乘方运算，所以下面第二行代码报了错。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> x<span class=\"token punctuation\">.</span>tolist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> x<span class=\"token punctuation\">.</span>tolist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">**</span><span class=\"token number\">2</span>\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"&lt;stdin&gt;\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">&gt;</span>\nTypeError<span class=\"token punctuation\">:</span> unsupported operand <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> <span class=\"token operator\">**</span> <span class=\"token keyword\">or</span> <span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'list'</span> <span class=\"token keyword\">and</span> <span class=\"token string\">'int'</span>\n</code></pre>\n<p><strong>16-18</strong> if…elif…else</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">elif</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">10</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>tolist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">[</span> <span class=\"token number\">0</span>  <span class=\"token number\">2</span>  <span class=\"token number\">4</span>  <span class=\"token number\">6</span>  <span class=\"token number\">8</span> <span class=\"token number\">10</span> <span class=\"token number\">12</span> <span class=\"token number\">14</span> <span class=\"token number\">16</span> <span class=\"token number\">18</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p><code>len</code>表示获取<code>x</code>的长度，python中通过<code>==</code>来判断二者是否相等。上式表示，如果x的长度等于5，则打印x；或者x的长度为10，则打印<code>x.tolist()+x</code>；如果x的长度为其他值，则打印<code>x[0]</code>。</p>\n<p>由于x的长度是10，所以执行了第2行代码。而且python非常智能地按照<code>array</code>的规则计算了<code>x.tolist()+x</code>。这说明，当表达式中同时存在<code>array</code>和<code>list</code>的时候，python会自动将<code>list</code>转为<code>array</code>。</p>\n<p><strong>19-20</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> d <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> d<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token number\">1</span>\n</code></pre>\n<p>d即为字典，可通过键值对的形式进行索引。案例中，<code>\"a\",\"b\",\"c\"</code>为键(<code>key</code>)，<code>1,2,3</code>为值(<code>value</code>)，通过<code>key</code>来索引<code>value</code>，非常便利。</p>\n<h3><a id=\"_118\"></a>基础晋级</h3>\n<p><strong>21</strong> <code>a = 1,2,3</code><br/> 逗号分隔的变量会默认组成元组，元组会根据等号左边变量的个数来进行赋值。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> a\n<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>22</strong> <code>a,b = 1,2</code><br/> 元组可以通过元素对应的位置来进行一一赋值，由此而带来的便利就是可以更快速地交换两个变量的值。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> a<span class=\"token punctuation\">,</span>b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token number\">1</span> <span class=\"token number\">2</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> b<span class=\"token punctuation\">,</span>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">,</span>b\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token number\">2</span> <span class=\"token number\">1</span>\n</code></pre>\n<p><strong>23</strong> <code>print(f\"a={a}\")</code><br/> python字符串前面可有四种前缀，其中<code>f</code>代表字符串格式化，即format，在f字符串中，大括号内部会自动转换为变量。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"a=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>a<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\na<span class=\"token operator\">=</span><span class=\"token number\">2</span>\n</code></pre>\n<p><strong>24</strong> <code>a = False if a==2 else True</code></p>\n<p>在Python中，<code>False</code>和<code>True</code>为bool型的两个值。</p>\n<p>在python中，可通过<code>if...else</code>构成三元表达式，上式可等价为响应的C语言<code>a = a==2 ? 0 : 1</code>。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> a <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span> <span class=\"token keyword\">if</span> a<span class=\"token operator\">==</span><span class=\"token number\">2</span> <span class=\"token keyword\">else</span> <span class=\"token boolean\">True</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> a\n<span class=\"token boolean\">False</span>\n</code></pre>\n<p><strong>25</strong> <code>x = [i for i in range(10)]</code></p>\n<p>在python中，可通过<code>for</code>循环来创建元组、列表以及字典。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> x\n<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p><strong>26-30</strong> 函数封装</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">fac</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> n<span class=\"token operator\">*</span>fac<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> \n</code></pre>\n<p>这是一个阶乘函数。在pyhton中，代码块以空格的形式存在。</p>\n<h3><a id=\"_183\"></a>高手之路</h3>\n<p><strong>31</strong> <code>fac = lambda n : 1 if n==0 else n*fac(n-1)</code></p>\n<p>这同样是一个阶乘算法，与<strong>26-30</strong>表示的是同一个函数。此即<code>lambda</code>表达式，可以更加方便地创建函数。</p>\n<p><strong>32</strong> <code>op = {\"add\":lambda a,b:a+b, \"minus\":lambda a,b:a-b}</code></p>\n<p>Python中没有<code>switch..case</code>表达式，而字典+lambda表达式可以弥补这一点。上式中，<code>op[\"add\"]</code>表示调用函数<code>lambda a,b:a+b</code>，即加法；<code>op[\"minus\"]</code>表示调用函数<code>lambda a,b:a-b</code>，即减法。</p>\n<p>正因<code>lambda</code>表达式并不需要命名，所以也称匿名函数。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> op <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"add\"</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">:</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">,</span> <span class=\"token string\">\"minus\"</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">:</span>a<span class=\"token operator\">-</span>b<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> op<span class=\"token punctuation\">[</span><span class=\"token string\">\"add\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">7</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> op<span class=\"token punctuation\">[</span><span class=\"token string\">\"minus\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">-</span><span class=\"token number\">1</span>\n</code></pre>\n<p><strong>33-34</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">while</span> a<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span>a<span class=\"token operator\">+=</span><span class=\"token number\">1</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"a=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>a<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>while循环大家都十分了解，即当<code>a&lt;5</code>时执行<code>a+=1</code>的程序。<code>else</code>表示当<code>a&lt;5</code>不满足时执行的代码。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">while</span> a<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span>a<span class=\"token operator\">+=</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"a=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>a<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\na<span class=\"token operator\">=</span><span class=\"token number\">5</span>\n</code></pre>\n<p><strong>35-37</strong></p>\n<pre><code class=\"prism language-python\">xs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> xs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>和<code>while..else</code>相似，<code>for</code>也有和<code>else</code>的组合，其语义也很雷同，表示当执行完<code>for</code>循环之后执行<code>else</code>的语句。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> xs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> xs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p><strong>38-40</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> matplotlib <span class=\"token keyword\">import</span> pyplot <span class=\"token keyword\">as</span> plt\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><code>from...import</code>表示从<code>matplotlib</code>中导入<code>pyplot</code>。<code>matplotlib</code>是python中最常用的画图包，功能非常强大。</p>\n<p><code>plt.plot</code>是最常用的绘图函数。<code>python</code>在执行绘图函数之后，会将图片放入内存，当使用<code>plt.show()</code>之后，才会将其显示到屏幕上。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">from</span> matplotlib <span class=\"token keyword\">import</span> pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> plt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>matplotlib<span class=\"token punctuation\">.</span>lines<span class=\"token punctuation\">.</span>Line2D <span class=\"token builtin\">object</span> at <span class=\"token number\">0x00000232FA511B10</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>41-48</strong></p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">person</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token keyword\">def</span> <span class=\"token function\">selfIntro</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"my Name is </span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>尽管python主打函数式，但在python中，一切皆对象。而<code>class</code>则可以声明一个类。</p>\n<p>在类中，通过<code>self</code>来声明类成员，类似有些语言中的<code>this.</code>。</p>\n<p><code>__init__</code>为python内置的初始化函数，在类实例化之后，会首先运行这个函数。</p>\n<p><code>@staticmethod</code>为静态类标识，静态类可以不经实例而使用。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> person<span class=\"token punctuation\">.</span>say<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span>\nhello\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> person<span class=\"token punctuation\">.</span>selfIntro<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"&lt;stdin&gt;\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">&gt;</span>\nTypeError<span class=\"token punctuation\">:</span> person<span class=\"token punctuation\">.</span>selfIntro<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> missing <span class=\"token number\">1</span> required positional argument<span class=\"token punctuation\">:</span> <span class=\"token string\">'self'</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> Li <span class=\"token operator\">=</span> person<span class=\"token punctuation\">(</span><span class=\"token string\">\"Li\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> Li<span class=\"token punctuation\">.</span>selfIntro<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmy Name <span class=\"token keyword\">is</span> Li\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><strong>49</strong> <code>xs=[i for i in range(10) if i%2==0]</code></p>\n<p>通过推导式来快速通过筛选来创建列表。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> xs<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> i<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> xs\n<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p><strong>50</strong> <code>d = dict([[1,2],[4,5],[6,7]])</code></p>\n<p><code>dict</code>可将列表转为字典，前提是列表中的元素必须为二元组。</p>\n<pre><code>&gt;&gt;&gt; d = dict([[1,2],[4,5],[6,7]])\n&gt;&gt;&gt; d\n{1: 2, 4: 5, 6: 7}\n</code></pre>\n<h3><a id=\"_310\"></a>内置包库</h3>\n<p><strong>51</strong> <code>time.time()</code></p>\n<p>当然前提是要导入<code>import time</code>，这其实是个很常用的函数，以时间戳的形式返回当前的时间。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">import</span> time\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">1634558595.5172253</span>\n</code></pre>\n<p><strong>52</strong> <code>calendar.prmonth(2021,10)</code></p>\n<p>可打印日历。。。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">import</span> calendar\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> calendar<span class=\"token punctuation\">.</span>prmonth<span class=\"token punctuation\">(</span><span class=\"token number\">2021</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    October <span class=\"token number\">2021</span>\nMo Tu We Th Fr Sa Su\n             <span class=\"token number\">1</span>  <span class=\"token number\">2</span>  <span class=\"token number\">3</span>\n <span class=\"token number\">4</span>  <span class=\"token number\">5</span>  <span class=\"token number\">6</span>  <span class=\"token number\">7</span>  <span class=\"token number\">8</span>  <span class=\"token number\">9</span> <span class=\"token number\">10</span>\n<span class=\"token number\">11</span> <span class=\"token number\">12</span> <span class=\"token number\">13</span> <span class=\"token number\">14</span> <span class=\"token number\">15</span> <span class=\"token number\">16</span> <span class=\"token number\">17</span>\n<span class=\"token number\">18</span> <span class=\"token number\">19</span> <span class=\"token number\">20</span> <span class=\"token number\">21</span> <span class=\"token number\">22</span> <span class=\"token number\">23</span> <span class=\"token number\">24</span>\n<span class=\"token number\">25</span> <span class=\"token number\">26</span> <span class=\"token number\">27</span> <span class=\"token number\">28</span> <span class=\"token number\">29</span> <span class=\"token number\">30</span> <span class=\"token number\">31</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><strong>53</strong> <code>os.listdir(r\"c:\\Windows\")</code></p>\n<p>返回文件列表，其中<code>r</code>字符串中的<code>\\</code>不用于转义。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">import</span> os\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">r\"c:\\Windows\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'addins``appcompat``apppatch``AppReadiness``assembly``bcastdvr``bfsvc.exe'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n</code></pre>\n<p><strong>54</strong> <code>os.path.join(r\"C:\\Windows\", \"python.exe\")</code></p>\n<p>合并路径，自动处理<code>\\\\</code>。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">r\"C:\\Windows\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"python.exe\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'C:\\\\Windows\\\\python.exe'</span>\n</code></pre>\n<p><strong>55</strong> <code>glob.glob(r\"c:\\Windows\\*.ini\")</code></p>\n<p>可通过通配符返回文件列表。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">import</span> glob\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> glob<span class=\"token punctuation\">.</span>glob<span class=\"token punctuation\">(</span><span class=\"token string\">r\"c:\\Windows\\*.exe\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'c:\\\\Windows\\\\bfsvc.exe``c:\\\\Windows\\\\explorer.exe``c:\\\\Windows\\\\HelpPane.exe``c:\\\\Windows\\\\hh.exe``c:\\\\Windows\\\\notepad.exe``c:\\\\Windows\\\\py.exe``c:\\\\Windows\\\\pyw.exe``c:\\\\Windows\\\\regedit.exe``c:\\\\Windows\\\\splwow64.exe``c:\\\\Windows\\\\Wiainst64.exe``c:\\\\Windows\\\\winhlp32.exe``c:\\\\Windows\\\\write.exe'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><strong>56-57</strong> <code>urllib</code></p>\n<pre><code class=\"prism language-python\">response <span class=\"token operator\">=</span> urllib<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>urlopen<span class=\"token punctuation\">(</span><span class=\"token string\">'https://blog.csdn.net/'</span><span class=\"token punctuation\">)</span>\nhtml <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><code>urllib</code>是python内置的http解析请求库，是大多数爬虫学习者接触的第一个工具。</p>\n<p>其中，<code>read()</code>用于读取网页数据，当然，得到的网页数据是未解码数据。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> urllib<span class=\"token punctuation\">.</span>request\nresponse <span class=\"token operator\">=</span> urllib<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>urlopen<span class=\"token punctuation\">(</span><span class=\"token string\">'https://blog.csdn.net/'</span><span class=\"token punctuation\">)</span>\nhtml <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>58-59</strong> <strong>正则表达式re</strong></p>\n<pre><code class=\"prism language-python\">content <span class=\"token operator\">=</span> html<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\ncn <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">r\"[\\u4e00-\\u9fa5]+\"</span><span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>此为正则表达式的简单应用，<code>re.findall</code>表示从字符串<code>content</code>中筛选出符合<code>r\"[\\u4e00-\\u9fa5]+\"</code>要求的值。所以第一步，是通过<code>utf-8</code>对content进行解码。</p>\n<p>而在<code>utf-8</code>中，汉字的序号为<code>\\u4e00-\\u9fa5</code>；在正则表达式中，<code>[]</code>表示符合条件的集合，<code>+</code>表示出现任意多个符合条件的字符。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">import</span> re\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> content <span class=\"token operator\">=</span> html<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> cn <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">r\"[\\u4e00-\\u9fa5]+\"</span><span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> cn<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'博客``专业``技术发表平台``博客为中国软件开发者``从业人员``初学者打造交流的专业``技术发表平台``全心致力于帮助开发者通过互联网分享知识``让更多开发者从中受益``一同和``开发者用代码改变未来``头部``广告``频道首页右侧``打底``头部``广告``题目征集``你出我答``做'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><strong>60</strong> <code>Thread(target=print,args=[\"hello thread\"]).start()</code></p>\n<p>这是最简单的多线程程序，<code>target</code>是将要调用的函数，<code>args</code>为参数列表。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">from</span> threading <span class=\"token keyword\">import</span> Thread\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">,</span>args<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"hello thread\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nhello thread\n</code></pre>\n<p><strong>61-63</strong> 线程池</p>\n<p><code>concurrent.futures</code>中的<code>ThreadPoolExecutor</code>可快速创建线程池，其输入参数为线程池中可以容纳的最多线程数，</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> concurrent<span class=\"token punctuation\">.</span>futures <span class=\"token keyword\">import</span> ThreadPoolExecutor\n<span class=\"token keyword\">with</span> ThreadPoolExecutor<span class=\"token punctuation\">(</span>max_workers<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> ex<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        ex<span class=\"token punctuation\">.</span>submit<span class=\"token punctuation\">(</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">,</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>i<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>64-66</strong> 进程池</p>\n<p>创建单个进程的方法和创建多个线程的方法并无区别，只是把<code>threading</code>中的<code>Thread</code>换成<code>multiprocessing</code>中的<code>Process</code>而已，故不赘言了。</p>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Pool\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">over</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"完成\"</span><span class=\"token punctuation\">)</span>\n\np <span class=\"token operator\">=</span> Pool<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    p<span class=\"token punctuation\">.</span>apply_async<span class=\"token punctuation\">(</span>func<span class=\"token operator\">=</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">,</span>args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>i<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> callback<span class=\"token operator\">=</span>over<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>67-68</strong> 创建窗口程序<code>tkinter</code></p>\n<pre><code class=\"prism language-python\">frame <span class=\"token operator\">=</span> tkinter<span class=\"token punctuation\">.</span>Tk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nframe<span class=\"token punctuation\">.</span>mainloop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>其中<code>frame</code>即为tkinter创建的窗口，而<code>mainloop</code>表示进入窗口的消息循环。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">import</span> tkinter\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> frame <span class=\"token operator\">=</span> tkinter<span class=\"token punctuation\">.</span>Tk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> frame<span class=\"token punctuation\">.</span>mainloop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>69-70</strong> 通过<code>ctypes</code>调用C语言动态链接库</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">import</span> ctypes\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> libc <span class=\"token operator\">=</span> ctypes<span class=\"token punctuation\">.</span>CDLL<span class=\"token punctuation\">(</span><span class=\"token string\">\"msvcrt\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> libc<span class=\"token punctuation\">.</span>printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello ctypes\\n\"</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nHello ctypes\n<span class=\"token number\">13</span>      <span class=\"token comment\">#此为该函数的返回值</span>\n</code></pre>\n<h3><a id=\"_467\"></a>奇技淫巧</h3>\n<p><strong>71</strong> <code>judge = lambda a,b,f1,f2 : (f1 if a&gt;b else f2)(a,b)</code></p>\n<p>表示，如果<code>a&gt;b</code>则执行<code>f1(a,b)</code>，否则执行<code>f2(a,b)</code></p>\n<p><strong>72</strong> <code>eval('[a,b,c]')</code></p>\n<p><code>eval</code>函数会把字符串转为可执行的表达式。</p>\n<p><strong>73</strong> <code>list(zip(*lst))</code></p>\n<p><code>zip</code>可以像拉链一样将数组中对应的值缝合起来，以元组的形式重新存储。根据这个特性，可完成列表的\"转置\"。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> lst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p><strong>74</strong> <code>max(set(lst),key=lst.count)</code></p>\n<p>其中<code>lst</code>为列表，<code>count(i)</code>是列表的内置函数，表示统计<code>i</code>出现的个数。<code>set</code>表示将<code>lst</code>转为集合，从而剩排除重复值。</p>\n<p><code>max(set(lst),key=lst.count)</code>表示通过<code>lst.count</code>这个指标来得到<code>set(lst)</code>中出现次数最多的那个值——即求众数。</p>\n<p><strong>75</strong> <code>dict(zip(myDict.values(),myDict.keys()))</code></p>\n<p>通过<code>zip</code>实现字典的字符串互换操作。</p>\n<p><strong>76</strong> <code>[*a,*b]</code></p>\n<p>*可以取出列表中的元素，所以<code>[*a,*b]</code>可以起到合并列表的作用。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>b<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p>但星号索引的用途不止于此，在函数传参时也有意想不到的后果</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> addd <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c <span class=\"token punctuation\">:</span> a<span class=\"token operator\">+</span>b<span class=\"token operator\">+</span>c\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> addd<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token number\">6</span>\n</code></pre>\n<p><strong>77</strong> <code>{**a,**b}</code></p>\n<p>双星号可以取出字典中的元素，实现字典合并的功能。</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"e\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token operator\">**</span>a<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>b<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p>同样，双星号索引的用途也不止于此</p>\n<pre><code class=\"prism language-pyhton\">&gt;&gt;&gt; addd(3,**a)\n6\n</code></pre>\n<p><strong>78</strong> <code>s == s[::-1]</code></p>\n<p>在python中，对列表或者字符串采用<code>:</code>进行索引，例如<code>a:b</code>指的是从a到b的数据；当采用双引号<code>::</code>时，引号间的值的意义就发生了变化，例如<code>a:b:c</code>表示从a到b，间隔为c的数据。</p>\n<p>据此，可以得到<code>::-1</code>表示将字符串颠倒过来，据此可以判断一个字符串是否为回文结构。</p>\n<p><strong>79-80</strong> <code>sys.ps1, sys.ps2=\":\", \"-\"</code></p>\n<p><code>sys</code>中<code>ps1</code>和<code>ps2</code>分别表示，在交互模式下的两个提示符，这个不知道如何描述，但做一下示例就明白了</p>\n<pre><code class=\"prism language-python\"><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> sys<span class=\"token punctuation\">.</span>ps1 <span class=\"token operator\">=</span> <span class=\"token string\">\":\"</span>\n<span class=\"token punctuation\">:</span>sys<span class=\"token punctuation\">.</span>ps2 <span class=\"token operator\">=</span> <span class=\"token string\">\"-\"</span>\n<span class=\"token punctuation\">:</span><span class=\"token keyword\">def</span> test<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token operator\">-</span>  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">-</span>\n<span class=\"token punctuation\">:</span>test<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nHello\n</code></pre>\n<p>和68行代码版本相比，主要添加了多线程部分。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-05 19:56:42", "summary": "文章目录基础入门菜鸟提升基础晋级高手之路内置包库奇技淫巧基础入门即在命令行输入，进入的开发环境。加减乘除四则混合运算，可当作计算器使用，其中表示乘方。即输出的值，如果感觉麻烦，可以直接输入，然后回车，"}