{"blogid": "125706271", "writerAge": "码龄8年", "writerBlogNum": "125", "writerCollect": "8215", "writerComment": "2394", "writerFan": "15254", "writerGrade": "7级", "writerIntegral": "12348", "writerName": "牧小农", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125706271.jpg", "writerRankTotal": "1062", "writerRankWeekly": "5328", "writerThumb": "4745", "writerVisitNum": "641690", "blog_read_count": "2377", "blog_time": "于 2022-07-10 15:19:32 发布", "blog_title": "分布式事务(Seata)原理 详解篇，建议收藏", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"_0\"></a>前言</h2>\n<p>在之前的系列中，我们讲解了关于Seata基本介绍和实际应用，今天带来的这篇，就给大家分析一下Seata的源码是如何一步一步实现的。读源码的时候我们需要俯瞰起全貌，不要去扣一个一个的细节，这样我们学习起来会快捷而且有效率，我们学习源码需要掌握的是整体思路和核心点。</p>\n<p>首先 <code>Seata</code>客户端启动一般分为以下几个流程：</p>\n<ol><li>自动加载Bean属性和配置信息</li><li>初始化TM</li><li>初始化RM</li><li>初始化分布式事务客户端完成，完成代理数据库配置</li><li>连接TC(Seata服务端)，注册RM和TM</li><li>开启全局事务</li></ol>\n<p>在这篇源码的讲解中，我们主要以AT模式为主导，官网也是主推AT模式，我们在上篇的文章中也讲解过，感兴趣的小伙伴可以去看一看<a href=\"https://mp.weixin.qq.com/s?__biz=MzA4MjM0MTQ1Mg==&amp;mid=2458786001&amp;idx=1&amp;sn=98f3b3c5d211f60a803446913fbb12e3&amp;chksm=88fd83f2bf8a0ae4b2682af7b15f9493c33d7771a066d1eb1c73583cfc67da891cffa1c9f55c&amp;token=1008440856&amp;lang=zh_CN#rd\">分布式事务(Seata) 四大模式详解</a>，在官网中也提供了对应的流程地址：<a href=\"https://seata.io/zh-cn/docs/dev/mode/at-mode.html\">https://seata.io/zh-cn/docs/dev/mode/at-mode.html</a> ，在这里我们只是做一些简单的介绍，AT模式主要分为两个阶段：</p>\n<p><strong>一阶段：</strong></p>\n<ul><li>解析SQL，获取SQL类型（CRUD）、表信息、条件(where) 等相关信息</li><li>查询前镜像(改变之前的数据)，根据解析得到的条件信息，生成查询语句，定位数据</li><li>执行业务SQL，更新数据</li><li>查询后镜像（改变后的数据），根据前镜像的结果，通过主键都给你为数据</li><li>插入回滚日志，将前后镜像数据以及业务SQL等信息，组织成一条回滚日志记录，插入到undo Log表中</li><li>提交前，向TC注册分支，申请全局锁</li><li>本地事务提交，业务数据的更细腻和生成的undoLog一起提交</li><li>将本地事务提交的结果通知给TC</li></ul>\n<p><strong>二阶段：</strong></p>\n<p>如果TC收到的是回滚请求</p>\n<ul><li>开启本地事务，通过XID和BranchID查找到对应的undo Log记录</li><li>根据undoLog中的前镜像和业务SQL的相关信息生成并执行回滚语句</li><li>提交本地事务，将本地事务的执行结果（分支事务回滚的信息）通知给TC</li></ul>\n<p>如果没问题，执行提交操作</p>\n<ul><li>收到TC分支提交请求，将请求放入到一个异步任务的队列中，马上返回提交成功的结果给TC</li><li>异步任务阶段的分支提交请求删除undoLog中记录</li></ul>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\6b4a6708a964d51d954cec9fb660b72f.png\"/></p>\n<h2><a id=\"_43\"></a>源码入口</h2>\n<p>接下来，我们就需要从官网中去下载源码，下载地址：<a href=\"https://seata.io/zh-cn/blog/download.html\">https://seata.io/zh-cn/blog/download.html</a>，选择 <code>source</code> 即可，下载完成之后，通过IDEA打开项目。</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\bdca1226de54c44b76fbcb81ad5203ec.png\"/></p>\n<p>源码下载下来之后，我们应该如何去找入口呢？首先我们需要找到对应引入的 <code>Seata</code>包 <code>spring-alibaba-seata</code>，我们在回想一下，我们开启事务的时候，是不是添加过一个<code>@GlobalTransactional</code>的注解，这个注解就是我们入手的一个点，我们在 <code>spring.factories</code>中看到有一个 <code>GlobalTransactionAutoConfiguration</code>，这个就是我们需要关注的点，也就是我们源码的入口</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\23af43bca4492008ae3b80c10bd77c4f.png\"/></p>\n<p>在 <code>GlobalTransactionAutoConfiguration</code>中我们找到一个用Bean注入的方法 <code>globalTransactionScanner</code>，这个就是全局事务扫描器，这个类型主要负责加载配置，注入相关的Bean</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\0f9703310464018bedfecc661d4c4e91.png\"/></p>\n<p>这里给大家展示了当前GlobalTransactionScanner的类关系图，其中我们现在继承了Aop的AbstractAutoProxyCreator类型，在这其中有一个重点方法，这个方法就是判断Bean对象是否需要代理，是否需要增强。</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@EnableConfigurationProperties</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SeataProperties</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GlobalTransactionAutoConfiguration</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token comment\">//全局事务扫描器</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">GlobalTransactionScanner</span> <span class=\"token function\">globalTransactionScanner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n      <span class=\"token class-name\">String</span> applicationName <span class=\"token operator\">=</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spring.application.name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token class-name\">String</span> txServiceGroup <span class=\"token operator\">=</span> seataProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getTxServiceGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>txServiceGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        txServiceGroup <span class=\"token operator\">=</span> applicationName <span class=\"token operator\">+</span> <span class=\"token string\">\"-fescar-service-group\"</span><span class=\"token punctuation\">;</span>\n        seataProperties<span class=\"token punctuation\">.</span><span class=\"token function\">setTxServiceGroup</span><span class=\"token punctuation\">(</span>txServiceGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// 构建全局扫描器，传入参数：应用名、事务分组名，失败处理器</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GlobalTransactionScanner</span><span class=\"token punctuation\">(</span>applicationName<span class=\"token punctuation\">,</span> txServiceGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在这其中我们要关心的是 <code>GlobalTransactionScanner</code> 这个类型，这个类型扫描 <code>@GlobalTransactional</code> 注解，并对代理方法进行拦截增强事务的功能。我们就从源码中搜索这个<code>GlobalTransactionScanner</code>类，看看里面具体是做了什么</p>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">/**\n * The type Global transaction scanner.\n * 全局事务扫描器\n * @author slievrly\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GlobalTransactionScanner</span>\n        <span class=\"token comment\">//AbstractAutoProxyCreator AOP动态代理 增强Bean</span>\n        <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractAutoProxyCreator</span>\n        <span class=\"token comment\">/**\n         * ConfigurationChangeListener: 监听器基准接口\n         * InitializingBean： Bean初始化\n         * ApplicationContextAware： Spring容器\n         * DisposableBean： Spring 容器销毁\n         */</span>\n        <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ConfigurationChangeListener</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InitializingBean</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ApplicationContextAware</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">DisposableBean</span> <span class=\"token punctuation\">{<!-- --></span>\n        \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> applicationId<span class=\"token punctuation\">;</span><span class=\"token comment\">//服务名</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> txServiceGroup<span class=\"token punctuation\">;</span><span class=\"token comment\">//事务分组        </span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//启动日志</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">isInfoEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Initializing Global Transaction Clients ... \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//检查应用名以及事务分组名，为空抛出异常IllegalArgumentException</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>DEFAULT_TX_GROUP_OLD<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>txServiceGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the default value of seata.tx-service-group: {} has already changed to {} since Seata 1.5, \"</span> <span class=\"token operator\">+</span>\n                    <span class=\"token string\">\"please change your default configuration as soon as possible \"</span> <span class=\"token operator\">+</span>\n                    <span class=\"token string\">\"and we don't recommend you to use default tx-service-group's value provided by seata\"</span><span class=\"token punctuation\">,</span>\n                    DEFAULT_TX_GROUP_OLD<span class=\"token punctuation\">,</span> DEFAULT_TX_GROUP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNullOrEmpty</span><span class=\"token punctuation\">(</span>applicationId<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNullOrEmpty</span><span class=\"token punctuation\">(</span>txServiceGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicationId: %s, txServiceGroup: %s\"</span><span class=\"token punctuation\">,</span> applicationId<span class=\"token punctuation\">,</span> txServiceGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//init TM</span>\n        <span class=\"token comment\">//初始化TM</span>\n        <span class=\"token class-name\">TMClient</span><span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>applicationId<span class=\"token punctuation\">,</span> txServiceGroup<span class=\"token punctuation\">,</span> accessKey<span class=\"token punctuation\">,</span> secretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">isInfoEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Transaction Manager Client is initialized. applicationId[{}] txServiceGroup[{}]\"</span><span class=\"token punctuation\">,</span> applicationId<span class=\"token punctuation\">,</span> txServiceGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//init RM</span>\n        <span class=\"token comment\">//初始化RM</span>\n        <span class=\"token class-name\">RMClient</span><span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>applicationId<span class=\"token punctuation\">,</span> txServiceGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">isInfoEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Resource Manager is initialized. applicationId[{}] txServiceGroup[{}]\"</span><span class=\"token punctuation\">,</span> applicationId<span class=\"token punctuation\">,</span> txServiceGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">isInfoEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Global Transaction Clients are initialized. \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">registerSpringShutdownHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>disableGlobalTransaction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">isInfoEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Global transaction is disabled.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">ConfigurationCache</span><span class=\"token punctuation\">.</span><span class=\"token function\">addConfigListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationKeys</span><span class=\"token punctuation\">.</span>DISABLE_GLOBAL_TRANSACTION<span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationChangeListener</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initialized<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">initClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n   <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//启动日志</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">isInfoEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Initializing Global Transaction Clients ... \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//检查应用名以及事务分组名，为空抛出异常IllegalArgumentException</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>DEFAULT_TX_GROUP_OLD<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>txServiceGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the default value of seata.tx-service-group: {} has already changed to {} since Seata 1.5, \"</span> <span class=\"token operator\">+</span>\n                    <span class=\"token string\">\"please change your default configuration as soon as possible \"</span> <span class=\"token operator\">+</span>\n                    <span class=\"token string\">\"and we don't recommend you to use default tx-service-group's value provided by seata\"</span><span class=\"token punctuation\">,</span>\n                    DEFAULT_TX_GROUP_OLD<span class=\"token punctuation\">,</span> DEFAULT_TX_GROUP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">//检查应用名以及事务分组名，为空抛出异常IllegalArgumentException</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNullOrEmpty</span><span class=\"token punctuation\">(</span>applicationId<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNullOrEmpty</span><span class=\"token punctuation\">(</span>txServiceGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicationId: %s, txServiceGroup: %s\"</span><span class=\"token punctuation\">,</span> applicationId<span class=\"token punctuation\">,</span> txServiceGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//init TM</span>\n        <span class=\"token comment\">//初始化TM</span>\n        <span class=\"token class-name\">TMClient</span><span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>applicationId<span class=\"token punctuation\">,</span> txServiceGroup<span class=\"token punctuation\">,</span> accessKey<span class=\"token punctuation\">,</span> secretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">isInfoEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Transaction Manager Client is initialized. applicationId[{}] txServiceGroup[{}]\"</span><span class=\"token punctuation\">,</span> applicationId<span class=\"token punctuation\">,</span> txServiceGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//init RM</span>\n        <span class=\"token comment\">//初始化RM</span>\n        <span class=\"token class-name\">RMClient</span><span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>applicationId<span class=\"token punctuation\">,</span> txServiceGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">isInfoEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Resource Manager is initialized. applicationId[{}] txServiceGroup[{}]\"</span><span class=\"token punctuation\">,</span> applicationId<span class=\"token punctuation\">,</span> txServiceGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">isInfoEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Global Transaction Clients are initialized. \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">registerSpringShutdownHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//代理增强，Spring 所有的Bean都会经过这个方法</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">wrapIfNecessary</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> cacheKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// do checkers</span>\n        <span class=\"token comment\">//检查bean和beanName</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">doCheckers</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//加锁防止并发</span>\n            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>PROXYED_SET<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>PROXYED_SET<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                interceptor <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//check TCC proxy</span>\n                <span class=\"token comment\">//检查是否为TCC模式</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TCCBeanParserUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isTccAutoProxy</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">,</span> applicationContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">// init tcc fence clean task if enable useTccFence</span>\n                    <span class=\"token comment\">//如果启用useTccFence 失败 ，则初始化TCC清理任务</span>\n                    <span class=\"token class-name\">TCCBeanParserUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">initTccFenceCleanTask</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TCCBeanParserUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRemotingDesc</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> applicationContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">//TCC interceptor, proxy bean of sofa:reference/dubbo:reference, and LocalTCC</span>\n                    <span class=\"token comment\">//如果是，添加TCC拦截器</span>\n                    interceptor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TccActionInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TCCBeanParserUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRemotingDesc</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">ConfigurationCache</span><span class=\"token punctuation\">.</span><span class=\"token function\">addConfigListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationKeys</span><span class=\"token punctuation\">.</span>DISABLE_GLOBAL_TRANSACTION<span class=\"token punctuation\">,</span>\n                            <span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationChangeListener</span><span class=\"token punctuation\">)</span>interceptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">//不是TCC</span>\n                    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> serviceInterface <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringProxyUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">findTargetClass</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> interfacesIfJdk <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringProxyUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">findInterfaces</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token comment\">//判断是否有相关事务注解，如果没有不进行代理</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">existsAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span>serviceInterface<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">existsAnnotation</span><span class=\"token punctuation\">(</span>interfacesIfJdk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token comment\">//发现存在全局事务注解标注的Bean对象，添加拦截器</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>globalTransactionalInterceptor <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token comment\">//添加拦截器</span>\n                        globalTransactionalInterceptor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GlobalTransactionalInterceptor</span><span class=\"token punctuation\">(</span>failureHandlerHook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">ConfigurationCache</span><span class=\"token punctuation\">.</span><span class=\"token function\">addConfigListener</span><span class=\"token punctuation\">(</span>\n                                <span class=\"token class-name\">ConfigurationKeys</span><span class=\"token punctuation\">.</span>DISABLE_GLOBAL_TRANSACTION<span class=\"token punctuation\">,</span>\n                                <span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationChangeListener</span><span class=\"token punctuation\">)</span>globalTransactionalInterceptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    interceptor <span class=\"token operator\">=</span> globalTransactionalInterceptor<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bean[{}] with name [{}] would use interceptor [{}]\"</span><span class=\"token punctuation\">,</span> bean<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">,</span> interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//检查是否为代理对象</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">AopUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAopProxy</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">//不是代理对象，调用父级</span>\n                    bean <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">wrapIfNecessary</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">,</span> cacheKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">//是代理对象，反射获取代理类中已经存在的拦截器组合，然后添加到这个集合中</span>\n                    <span class=\"token class-name\">AdvisedSupport</span> advised <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringProxyUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAdvisedSupport</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">Advisor</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> advisor <span class=\"token operator\">=</span> <span class=\"token function\">buildAdvisors</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> <span class=\"token function\">getAdvicesAndAdvisorsForBean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Advisor</span> avr <span class=\"token operator\">:</span> advisor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token comment\">// Find the position based on the advisor's order, and add to advisors by pos</span>\n                        pos <span class=\"token operator\">=</span> <span class=\"token function\">findAddSeataAdvisorPosition</span><span class=\"token punctuation\">(</span>advised<span class=\"token punctuation\">,</span> avr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        advised<span class=\"token punctuation\">.</span><span class=\"token function\">addAdvisor</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> avr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                PROXYED_SET<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> exx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>exx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>InitializingBean</code>：中实现了一个 <code>afterPropertiesSet()</code>方法，在这个方法中，调用了<code>initClient()</code></p>\n<p><code>AbstractAutoProxyCreator</code>：APO动态代理，在之前的的Nacos和Sentiel中都有这个代理类，AOP在我们越往深入学习，在学习源码的会见到的越来越多，越来越重要，很多相关代理，都是通过AOP进行增强,在这个类中，我们需要关注有一个<code>wrapIfNecessary()</code>方法， 这个方法主要是判断被代理的bean或者类是否需要代理增强，在这个方法中会调用<code>GlobalTransactionalInterceptor.invoke()</code>进行带来增强。</p>\n<p>具体代码如下：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GlobalTransactionalInterceptor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ConfigurationChangeListener</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MethodInterceptor</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SeataInterceptor</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">GlobalTransactionalInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FailureHandler</span> failureHandler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>failureHandler <span class=\"token operator\">=</span> failureHandler <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> DEFAULT_FAIL_HANDLER <span class=\"token operator\">:</span> failureHandler<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>disable <span class=\"token operator\">=</span> <span class=\"token class-name\">ConfigurationFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBoolean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationKeys</span><span class=\"token punctuation\">.</span>DISABLE_GLOBAL_TRANSACTION<span class=\"token punctuation\">,</span>\n            DEFAULT_DISABLE_GLOBAL_TRANSACTION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>order <span class=\"token operator\">=</span>\n            <span class=\"token class-name\">ConfigurationFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationKeys</span><span class=\"token punctuation\">.</span>TM_INTERCEPTOR_ORDER<span class=\"token punctuation\">,</span> TM_INTERCEPTOR_ORDER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        degradeCheck <span class=\"token operator\">=</span> <span class=\"token class-name\">ConfigurationFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBoolean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationKeys</span><span class=\"token punctuation\">.</span>CLIENT_DEGRADE_CHECK<span class=\"token punctuation\">,</span>\n            DEFAULT_TM_DEGRADE_CHECK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>degradeCheck<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">ConfigurationCache</span><span class=\"token punctuation\">.</span><span class=\"token function\">addConfigListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationKeys</span><span class=\"token punctuation\">.</span>CLIENT_DEGRADE_CHECK<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            degradeCheckPeriod <span class=\"token operator\">=</span> <span class=\"token class-name\">ConfigurationFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationKeys</span><span class=\"token punctuation\">.</span>CLIENT_DEGRADE_CHECK_PERIOD<span class=\"token punctuation\">,</span> DEFAULT_TM_DEGRADE_CHECK_PERIOD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            degradeCheckAllowTimes <span class=\"token operator\">=</span> <span class=\"token class-name\">ConfigurationFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationKeys</span><span class=\"token punctuation\">.</span>CLIENT_DEGRADE_CHECK_ALLOW_TIMES<span class=\"token punctuation\">,</span> DEFAULT_TM_DEGRADE_CHECK_ALLOW_TIMES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            EVENT_BUS<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>degradeCheckPeriod <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> degradeCheckAllowTimes <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token function\">startDegradeCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">initDefaultGlobalTransactionTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">MethodInvocation</span> methodInvocation<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//获取执行的方法</span>\n        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> targetClass <span class=\"token operator\">=</span>\n            methodInvocation<span class=\"token punctuation\">.</span><span class=\"token function\">getThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token class-name\">AopUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTargetClass</span><span class=\"token punctuation\">(</span>methodInvocation<span class=\"token punctuation\">.</span><span class=\"token function\">getThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Method</span> specificMethod <span class=\"token operator\">=</span> <span class=\"token class-name\">ClassUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMostSpecificMethod</span><span class=\"token punctuation\">(</span>methodInvocation<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> targetClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>specificMethod <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>specificMethod<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaringClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">final</span> <span class=\"token class-name\">Method</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">BridgeMethodResolver</span><span class=\"token punctuation\">.</span><span class=\"token function\">findBridgedMethod</span><span class=\"token punctuation\">(</span>specificMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//获取GlobalTransactional（全局事务）、GlobalLock(全局锁)元数据</span>\n            <span class=\"token keyword\">final</span> <span class=\"token class-name\">GlobalTransactional</span> globalTransactionalAnnotation <span class=\"token operator\">=</span>\n                <span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> targetClass<span class=\"token punctuation\">,</span> <span class=\"token class-name\">GlobalTransactional</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//GlobalLock会将本地事务的执行纳入Seata分布式事务的管理，共同竞争全局锁</span>\n            <span class=\"token comment\">//保证全局事务在执行的时候，本地事务不可以操作全局事务的记录</span>\n            <span class=\"token keyword\">final</span> <span class=\"token class-name\">GlobalLock</span> globalLockAnnotation <span class=\"token operator\">=</span> <span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> targetClass<span class=\"token punctuation\">,</span> <span class=\"token class-name\">GlobalLock</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取全局锁</span>\n            <span class=\"token keyword\">boolean</span> localDisable <span class=\"token operator\">=</span> disable <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>degradeCheck <span class=\"token operator\">&amp;&amp;</span> degradeNum <span class=\"token operator\">&gt;=</span> degradeCheckAllowTimes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>localDisable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>globalTransactionalAnnotation <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>aspectTransactional <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token class-name\">AspectTransactional</span> transactional<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>globalTransactionalAnnotation <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        transactional <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AspectTransactional</span><span class=\"token punctuation\">(</span>globalTransactionalAnnotation<span class=\"token punctuation\">.</span><span class=\"token function\">timeoutMills</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                            globalTransactionalAnnotation<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> globalTransactionalAnnotation<span class=\"token punctuation\">.</span><span class=\"token function\">rollbackFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                            globalTransactionalAnnotation<span class=\"token punctuation\">.</span><span class=\"token function\">noRollbackForClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                            globalTransactionalAnnotation<span class=\"token punctuation\">.</span><span class=\"token function\">noRollbackFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                            globalTransactionalAnnotation<span class=\"token punctuation\">.</span><span class=\"token function\">noRollbackForClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                            globalTransactionalAnnotation<span class=\"token punctuation\">.</span><span class=\"token function\">propagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                            globalTransactionalAnnotation<span class=\"token punctuation\">.</span><span class=\"token function\">lockRetryInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                            globalTransactionalAnnotation<span class=\"token punctuation\">.</span><span class=\"token function\">lockRetryTimes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                        transactional <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>aspectTransactional<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token comment\">//执行全局事务</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token function\">handleGlobalTransaction</span><span class=\"token punctuation\">(</span>methodInvocation<span class=\"token punctuation\">,</span> transactional<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>globalLockAnnotation <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">//执行全局锁</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token function\">handleGlobalLock</span><span class=\"token punctuation\">(</span>methodInvocation<span class=\"token punctuation\">,</span> globalLockAnnotation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> methodInvocation<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>具体流程图如下所示：</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\45838801f4caeefec5623a955be68146.png\"/></p>\n<h2><a id=\"_353\"></a>核心源码</h2>\n<p>在上面我们讲解到 <code>GlobalTransactionalInterceptor</code> 作为全局事务拦截器，一旦执行拦截，就会进入invoke方法，其中，我们会做 <code>@GlobalTransactional</code> 注解的判断，如果有这个注解的存在，会执行全局事务和全局锁，再执行全局事务的时候会调用 <code>handleGlobalTransaction</code> 全局事务处理器，获取事务信息，那我们接下来就来看一下 <code>GlobalTransactionalInterceptor.handleGlobalTransaction</code> 到底是如何执行全局事务的</p>\n<pre><code class=\"prism language-java\"><span class=\"token class-name\">Object</span> <span class=\"token function\">handleGlobalTransaction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">MethodInvocation</span> methodInvocation<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">AspectTransactional</span> aspectTransactional<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">boolean</span> succeed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> transactionalTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TransactionalExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token annotation punctuation\">@Override</span>\n                <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">return</span> methodInvocation<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token comment\">//获取事务名称，默认获取方法名</span>\n                <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> aspectTransactional<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNullOrEmpty</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token function\">formatMethod</span><span class=\"token punctuation\">(</span>methodInvocation<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token comment\">/**\n                 * 解析GlobalTransation注解属性，封装对对象\n                 * @return\n                 */</span>\n                <span class=\"token annotation punctuation\">@Override</span>\n                <span class=\"token keyword\">public</span> <span class=\"token class-name\">TransactionInfo</span> <span class=\"token function\">getTransactionInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">// reset the value of timeout</span>\n                    <span class=\"token comment\">//获取超时时间，默认60秒</span>\n                    <span class=\"token keyword\">int</span> timeout <span class=\"token operator\">=</span> aspectTransactional<span class=\"token punctuation\">.</span><span class=\"token function\">getTimeoutMills</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timeout <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> timeout <span class=\"token operator\">==</span> DEFAULT_GLOBAL_TRANSACTION_TIMEOUT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        timeout <span class=\"token operator\">=</span> defaultGlobalTransactionTimeout<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token comment\">//构建事务信息对象</span>\n                    <span class=\"token class-name\">TransactionInfo</span> transactionInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TransactionInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    transactionInfo<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeOut</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//超时时间</span>\n                    transactionInfo<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//事务名称</span>\n                    transactionInfo<span class=\"token punctuation\">.</span><span class=\"token function\">setPropagation</span><span class=\"token punctuation\">(</span>aspectTransactional<span class=\"token punctuation\">.</span><span class=\"token function\">getPropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//事务传播</span>\n                    transactionInfo<span class=\"token punctuation\">.</span><span class=\"token function\">setLockRetryInterval</span><span class=\"token punctuation\">(</span>aspectTransactional<span class=\"token punctuation\">.</span><span class=\"token function\">getLockRetryInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//校验或占用全局锁重试间隔</span>\n                    transactionInfo<span class=\"token punctuation\">.</span><span class=\"token function\">setLockRetryTimes</span><span class=\"token punctuation\">(</span>aspectTransactional<span class=\"token punctuation\">.</span><span class=\"token function\">getLockRetryTimes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//校验或占用全局锁重试次数</span>\n                    <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RollbackRule</span><span class=\"token punctuation\">&gt;</span></span> rollbackRules <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">//其他构建信息</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> rbRule <span class=\"token operator\">:</span> aspectTransactional<span class=\"token punctuation\">.</span><span class=\"token function\">getRollbackFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        rollbackRules<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RollbackRule</span><span class=\"token punctuation\">(</span>rbRule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> rbRule <span class=\"token operator\">:</span> aspectTransactional<span class=\"token punctuation\">.</span><span class=\"token function\">getRollbackForClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        rollbackRules<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RollbackRule</span><span class=\"token punctuation\">(</span>rbRule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> rbRule <span class=\"token operator\">:</span> aspectTransactional<span class=\"token punctuation\">.</span><span class=\"token function\">getNoRollbackFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        rollbackRules<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">NoRollbackRule</span><span class=\"token punctuation\">(</span>rbRule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> rbRule <span class=\"token operator\">:</span> aspectTransactional<span class=\"token punctuation\">.</span><span class=\"token function\">getNoRollbackForClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        rollbackRules<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">NoRollbackRule</span><span class=\"token punctuation\">(</span>rbRule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    transactionInfo<span class=\"token punctuation\">.</span><span class=\"token function\">setRollbackRules</span><span class=\"token punctuation\">(</span>rollbackRules<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> transactionInfo<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionalExecutor<span class=\"token punctuation\">.</span>ExecutionException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//执行异常</span>\n            <span class=\"token class-name\">TransactionalExecutor<span class=\"token punctuation\">.</span>Code</span> code <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">case</span> <span class=\"token class-name\">RollbackDone</span><span class=\"token operator\">:</span>\n                    <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getOriginalException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token class-name\">BeginFailure</span><span class=\"token operator\">:</span>\n                    succeed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                    failureHandler<span class=\"token punctuation\">.</span><span class=\"token function\">onBeginFailure</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getCause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getCause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token class-name\">CommitFailure</span><span class=\"token operator\">:</span>\n                    succeed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                    failureHandler<span class=\"token punctuation\">.</span><span class=\"token function\">onCommitFailure</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getCause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getCause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token class-name\">RollbackFailure</span><span class=\"token operator\">:</span>\n                    failureHandler<span class=\"token punctuation\">.</span><span class=\"token function\">onRollbackFailure</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getOriginalException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getOriginalException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token class-name\">RollbackRetrying</span><span class=\"token operator\">:</span>\n                    failureHandler<span class=\"token punctuation\">.</span><span class=\"token function\">onRollbackRetrying</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getOriginalException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getOriginalException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ShouldNeverHappenException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown TransactionalExecutor.Code: %s\"</span><span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>degradeCheck<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                EVENT_BUS<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DegradeCheckEvent</span><span class=\"token punctuation\">(</span>succeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在这里我们，主要关注一个重点方法 <code>execute()</code>，这个方法主要用来执行事务的具体流程：</p>\n<ul><li>获取事务信息</li><li>执行全局事务</li><li>发生异常全局回滚，各个数据通过UndoLog进行事务补偿</li><li>全局事务提交</li><li>清除所有资源</li></ul>\n<p>这个位置也是一个非常核心的一个位置，因为我们所有的业务进来以后都会去走这个位置，具体源码如下所示：</p>\n<pre><code class=\"prism language-java\">    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionalExecutor</span> business<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 1. Get transactionInfo</span>\n        <span class=\"token comment\">//获取事务信息</span>\n        <span class=\"token class-name\">TransactionInfo</span> txInfo <span class=\"token operator\">=</span> business<span class=\"token punctuation\">.</span><span class=\"token function\">getTransactionInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>txInfo <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ShouldNeverHappenException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"transactionInfo does not exist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 1.1 Get current transaction, if not null, the tx role is 'GlobalTransactionRole.Participant'.</span>\n        <span class=\"token comment\">//获取当前事务，主要获取XID</span>\n        <span class=\"token class-name\">GlobalTransaction</span> tx <span class=\"token operator\">=</span> <span class=\"token class-name\">GlobalTransactionContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCurrent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 1.2 Handle the transaction propagation.</span>\n        <span class=\"token comment\">//根据配置的不同事务传播行为，执行不同的逻辑</span>\n        <span class=\"token class-name\">Propagation</span> propagation <span class=\"token operator\">=</span> txInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getPropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">SuspendedResourcesHolder</span> suspendedResourcesHolder <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>propagation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">case</span> NOT_SUPPORTED<span class=\"token operator\">:</span>\n                    <span class=\"token comment\">// If transaction is existing, suspend it.</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">existingTransaction</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        suspendedResourcesHolder <span class=\"token operator\">=</span> tx<span class=\"token punctuation\">.</span><span class=\"token function\">suspend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token comment\">// Execute without transaction and return.</span>\n                    <span class=\"token keyword\">return</span> business<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> REQUIRES_NEW<span class=\"token operator\">:</span>\n                    <span class=\"token comment\">// If transaction is existing, suspend it, and then begin new transaction.</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">existingTransaction</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        suspendedResourcesHolder <span class=\"token operator\">=</span> tx<span class=\"token punctuation\">.</span><span class=\"token function\">suspend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        tx <span class=\"token operator\">=</span> <span class=\"token class-name\">GlobalTransactionContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">createNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token comment\">// Continue and execute with new transaction</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> SUPPORTS<span class=\"token operator\">:</span>\n                    <span class=\"token comment\">// If transaction is not existing, execute without transaction.</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">notExistingTransaction</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">return</span> business<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token comment\">// Continue and execute with new transaction</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> REQUIRED<span class=\"token operator\">:</span>\n                    <span class=\"token comment\">// If current transaction is existing, execute with current transaction,</span>\n                    <span class=\"token comment\">// else continue and execute with new transaction.</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> NEVER<span class=\"token operator\">:</span>\n                    <span class=\"token comment\">// If transaction is existing, throw exception.</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">existingTransaction</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TransactionException</span><span class=\"token punctuation\">(</span>\n                            <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Existing transaction found for transaction marked with propagation 'never', xid = %s\"</span>\n                                    <span class=\"token punctuation\">,</span> tx<span class=\"token punctuation\">.</span><span class=\"token function\">getXid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token comment\">// Execute without transaction and return.</span>\n                        <span class=\"token keyword\">return</span> business<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">case</span> MANDATORY<span class=\"token operator\">:</span>\n                    <span class=\"token comment\">// If transaction is not existing, throw exception.</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">notExistingTransaction</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TransactionException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No existing transaction found for transaction marked with propagation 'mandatory'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token comment\">// Continue and execute with current transaction.</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TransactionException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not Supported Propagation:\"</span> <span class=\"token operator\">+</span> propagation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// 1.3 If null, create new transaction with role 'GlobalTransactionRole.Launcher'.</span>\n            <span class=\"token comment\">//如果当前事务为空，创建一个新的事务</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tx <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                tx <span class=\"token operator\">=</span> <span class=\"token class-name\">GlobalTransactionContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">createNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// set current tx config to holder</span>\n            <span class=\"token class-name\">GlobalLockConfig</span> previousConfig <span class=\"token operator\">=</span> <span class=\"token function\">replaceGlobalLockConfig</span><span class=\"token punctuation\">(</span>txInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">// 2. If the tx role is 'GlobalTransactionRole.Launcher', send the request of beginTransaction to TC,</span>\n                <span class=\"token comment\">//    else do nothing. Of course, the hooks will still be triggered.</span>\n                <span class=\"token comment\">//开始执行全局事务</span>\n                <span class=\"token function\">beginTransaction</span><span class=\"token punctuation\">(</span>txInfo<span class=\"token punctuation\">,</span> tx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token class-name\">Object</span> rs<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">// Do Your Business</span>\n                    <span class=\"token comment\">// 执行当前业务逻辑</span>\n                    <span class=\"token comment\">//1、在TC注册当前分支事务，TC会在branch_table中插入一条分支事务数据</span>\n                    <span class=\"token comment\">//2、执行本地update语句，并在执行前后查询数据状态，并把数据前后镜像存入到undo_log中</span>\n                    <span class=\"token comment\">//3、远程调用其他应用，远程应用接收到XID，也会注册分支事务，写入branch_table以及本地undo_log表</span>\n                    <span class=\"token comment\">//4、会在lock_table表中插入全局锁数据（一个分支一条）</span>\n                    rs <span class=\"token operator\">=</span> business<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">// 3. The needed business exception to rollback.</span>\n                    <span class=\"token comment\">//发生异常全局回滚，每个事务通过undo_log表进行事务补偿</span>\n                    <span class=\"token function\">completeTransactionAfterThrowing</span><span class=\"token punctuation\">(</span>txInfo<span class=\"token punctuation\">,</span> tx<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">throw</span> ex<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token comment\">// 4. everything is fine, commit.</span>\n                <span class=\"token comment\">//全局提交</span>\n                <span class=\"token function\">commitTransaction</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">return</span> rs<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//5. clear</span>\n                <span class=\"token comment\">//清理所有资源</span>\n                <span class=\"token function\">resumeGlobalLockConfig</span><span class=\"token punctuation\">(</span>previousConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">triggerAfterCompletion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">cleanUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// If the transaction is suspended, resume it.</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>suspendedResourcesHolder <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                tx<span class=\"token punctuation\">.</span><span class=\"token function\">resume</span><span class=\"token punctuation\">(</span>suspendedResourcesHolder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这其中的第三步和第四步其实在向 TC（Seata-Server）发起全局事务的提交或者回滚，在这里我们首先关注执行全局事务的 <code>beginTransaction()</code> 方法</p>\n<pre><code class=\"prism language-java\">    <span class=\"token comment\">// 向TC发起请求，采用模板模式</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beginTransaction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionInfo</span> txInfo<span class=\"token punctuation\">,</span> <span class=\"token class-name\">GlobalTransaction</span> tx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TransactionalExecutor<span class=\"token punctuation\">.</span>ExecutionException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">triggerBeforeBegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//对TC发起请求</span>\n            tx<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span>txInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getTimeOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> txInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">triggerAfterBegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionException</span> txe<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TransactionalExecutor<span class=\"token punctuation\">.</span>ExecutionException</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">,</span> txe<span class=\"token punctuation\">,</span>\n                <span class=\"token class-name\">TransactionalExecutor<span class=\"token punctuation\">.</span>Code<span class=\"token punctuation\">.</span>BeginFailure</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>在来关注其中，向TC发起请求的 <code>tx.begin()</code> 方法，而调用<code>begin()</code>方法的类为：<code>DefaultGlobalTransaction</code></p>\n<pre><code class=\"prism language-java\"> <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> timeout<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TransactionException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//判断调用者是否为TM</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>role <span class=\"token operator\">!=</span> <span class=\"token class-name\">GlobalTransactionRole<span class=\"token punctuation\">.</span>Launcher</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">assertXIDNotNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ignore Begin(): just involved in global transaction [{}]\"</span><span class=\"token punctuation\">,</span> xid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">assertXIDNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> currentXid <span class=\"token operator\">=</span> <span class=\"token class-name\">RootContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">getXID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentXid <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Global transaction already exists,\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\" can't begin a new global transaction, currentXid = \"</span> <span class=\"token operator\">+</span> currentXid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//获取XID</span>\n        xid <span class=\"token operator\">=</span> transactionManager<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        status <span class=\"token operator\">=</span> <span class=\"token class-name\">GlobalStatus<span class=\"token punctuation\">.</span>Begin</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//绑定XID</span>\n        <span class=\"token class-name\">RootContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>xid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">isInfoEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Begin new global transaction [{}]\"</span><span class=\"token punctuation\">,</span> xid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>再来看一下 <code>transactionManager.begin()</code> 方法，这个时候使用的是 <code>DefaultTransactionManager.begin</code> 默认的事务管理者，来获取XID，传入事务相关的信息 ，最好TC返回对应的全局事务XID，它调用的是<code>DefaultTransactionManager.begin()</code>方法</p>\n<pre><code class=\"prism language-java\">    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> applicationId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> transactionServiceGroup<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> timeout<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TransactionException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">GlobalBeginRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GlobalBeginRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        request<span class=\"token punctuation\">.</span><span class=\"token function\">setTransactionName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        request<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//发送请求得到响应</span>\n        <span class=\"token class-name\">GlobalBeginResponse</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">GlobalBeginResponse</span><span class=\"token punctuation\">)</span> <span class=\"token function\">syncCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">getResultCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">ResultCode<span class=\"token punctuation\">.</span>Failed</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TmTransactionException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionExceptionCode<span class=\"token punctuation\">.</span>BeginFailed</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getMsg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//返回XID</span>\n        <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getXid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在这里我们需要关注一个<code>syncCall</code>，在这里采用的是Netty通讯方式</p>\n<pre><code class=\"prism language-java\">    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AbstractTransactionResponse</span> <span class=\"token function\">syncCall</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractTransactionRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TransactionException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// 通过Netty发送请求</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractTransactionResponse</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">TmNettyRemotingClient</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sendSyncRequest</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TimeoutException</span> toe<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TmTransactionException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionExceptionCode</span><span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">,</span> <span class=\"token string\">\"RPC timeout\"</span><span class=\"token punctuation\">,</span> toe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>具体图解如下：</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\58f1038f3648c3d95be79c183eb151b6.png\"/></p>\n<p>在这里我们需要重点了解 <code>GlobalTransactionScanner</code> 这个类型，在这个类型中继承了一些接口和抽象类，这个类主要作用就是扫描有注解的Bean，并做AOP增强。</p>\n<ul><li> <p><code>ApplicationContextAware</code>：继承这个类型以后，需要实现其方法 <code>setApplicationContext()</code>，当Spring启动完成以后，会自动调用这个类型，将 <code>ApplicationContext</code> 给 <code>bean</code>，也就是说， <code>GlobalTransactionScanner</code> 能够很自然的使用Spring环境</p> </li><li> <p><code>InitializingBean</code>： 继承这个接口，需要实现 <code>afterPropertiesSet()</code> ，但凡是继承这个接口的类，在初始化的时候，当所有的 <code>properties</code> 设置完成以后，会执行这个方法</p> </li><li> <p><code>DisposableBean</code> ： 这个类，实现了一个 <code>destroy()</code> 这个方法是在销毁的时候去调用</p> </li><li> <p><code>AbstractAutoProxyCreator</code>： 这个类是Spring实现AOP的一种方式，本质上是一个 <code>BeanPostProcessor</code> ，在Bean初始化至去年，调用内部 <code>createProxy()</code> ，创建一个Bean的AOP代理Bean并返回，对Bean进行增强。</p> </li></ul>\n<h2><a id=\"Seata_667\"></a>Seata数据源代理</h2>\n<p>在上面的环节中，我们讲解了Seata AT模式2PC的执行流程，那么现在我们就来带大家了解一下关于AT数据源代理的信息，这也是AT模式中非常关键的一个重要知识点，大家可以拿起小本子，记下来。</p>\n<p>首先AT模式的核心主要分为一下两个</p>\n<ul><li>开启全局事务，获取全局锁。</li><li>解析SQL并写入undoLog中。</li></ul>\n<p>关于第一点我们已经分析清楚了，第二点就是关于AT模式如何解析SQL并写入undoLog中，但是在这之前，我们需要知道Seata是如何选择数据源，并进行数据源代理的。虽然全局事务拦截成功后最终还是执行了业务方法进行SQL提交和操作，但是由于Seata对数据源进行了代理，所以SQL的解析和undoLog的操作，是在数据源代理中进行完成的。</p>\n<p>数据源代理是Seata中一个非常重要的知识点，在分布式事务运行过程中，undoLog的记录、资源的锁定，用户都是无感知的，因为这些操作都是数据源的代理中完成了，恰恰是这样，我们才要去了解，这样不仅有利于我们了解Seata的核心操作，还能对以后源码阅读有所帮助，因为其实很多底层代码都会去使用这样用户无感知的方式(代理)去实现。</p>\n<p>同样，我们在之前的寻找源码入口的时候，通过我们项目中引入的jar找到一个 <code>SeataAutoConfiguration</code> 类，我们在里面找到一个<code>SeataDataSourceBeanPostProcessor()</code>，这个就是我们数据源代理的入口方法</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\78c4564099e2c372a310458314d545e9.png\"/></p>\n<p>我们进入<code>SeataDataSourceBeanPostProcessor</code>类里面，发现继承了一个 <code>BeanPostProcessor</code> ,这个接口我们应该很熟悉，这个是Sprng的拓展接口，所有的Bean对象，都有进入两个方法 <code>postProcessAfterInitialization()</code> 和 <code>postProcessBeforeInitialization()</code> 这两个方法都是由 <code>BeanPostProcessor</code>提供的，这两个方法，一个是初始化之前执行<code>Before</code>。一个是在初始化之后执行<code>After</code>，主要用来对比我们的的Bean是否为数据源代理对象。</p>\n<p>在这里我们需要关注到一个<code>postProcessAfterInitialization.proxyDataSource()</code> 方法，这个里面</p>\n<pre><code class=\"prism language-java\">    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">proxyDataSource</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> originBean<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">DataSourceProxy</span> dataSourceProxy <span class=\"token operator\">=</span> <span class=\"token class-name\">DataSourceProxyHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">putDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">)</span> originBean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>useJdkProxy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">.</span><span class=\"token function\">newProxyInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getContextClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SpringProxyUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAllInterfaces</span><span class=\"token punctuation\">(</span>originBean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token function\">handleMethodProxy</span><span class=\"token punctuation\">(</span>dataSourceProxy<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> originBean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Enhancer</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>originBean<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodInterceptor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> methodProxy<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token function\">handleMethodProxy</span><span class=\"token punctuation\">(</span>dataSourceProxy<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> originBean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这里有一个<code>DataSourceProxy</code>代理对象，我们需要看的就是这个类，这个就是我们数据库代理的对象，我们从我们下载的源码项目中，搜索这个代理对象，当我们打开这个类的目录时发现，除了这个，还有<code>ConnectionProxy</code> 连接对象、<code>StatementProxy</code>、<code>PreparedStatementProxy</code> SQL执行对象，这些都被Seata进行了代理，为什么要对这些都进行代理，代理的目的其实为了执行Seata的业务逻辑，生成undoLog，全局事务的开启，事务的提交回滚等操作</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\ef54a9c5142d96cf230b7938f60a9145.png\"/></p>\n<p><code>DataSourceProxy</code> 具体做了什么，主要功能有哪些，我们来看一下。他在源码中是如何体现的，我们需要关注的是<code>init()</code></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataSourceProxy</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractDataSourceProxy</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Resource</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> resourceGroupId<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> resourceGroupId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//资源组ID，默认是“default”这个默认值</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resourceGroupId <span class=\"token operator\">=</span> resourceGroupId<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//根据原始数据源得到JDBC连接和数据库类型</span>\n            jdbcUrl <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">getMetaData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getURL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            dbType <span class=\"token operator\">=</span> <span class=\"token class-name\">JdbcUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDbType</span><span class=\"token punctuation\">(</span>jdbcUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JdbcConstants</span><span class=\"token punctuation\">.</span>ORACLE<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>dbType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                userName <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">getMetaData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUserName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JdbcConstants</span><span class=\"token punctuation\">.</span>MARIADB<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>dbType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                dbType <span class=\"token operator\">=</span> <span class=\"token class-name\">JdbcConstants</span><span class=\"token punctuation\">.</span>MYSQL<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"can not init dataSource\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">initResourceId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">DefaultResourceManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerResource</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ENABLE_TABLE_META_CHECKER_ENABLE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//如果配置开关打开，会定时在线程池不断更新表的元数据缓存信息</span>\n            tableMetaExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">scheduleAtFixedRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token class-name\">TableMetaCacheFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTableMetaCache</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSourceProxy</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDbType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DataSourceProxy</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ignore<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> TABLE_META_CHECKER_INTERVAL<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>MILLISECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">//Set the default branch type to 'AT' in the RootContext.</span>\n        <span class=\"token class-name\">RootContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">setDefaultBranchType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBranchType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>从上面我们可以看出，他主要做了以下几点的增强：</p>\n<ol><li>给每个数据源标识资源组ID</li><li>如果打开配置，会有一个定时线程池定时更新表的元数据信息并缓存到本地</li><li>生成代理连接 <code>ConnectionProxy</code> 对象</li></ol>\n<p>在这三个增强功能里面，第三个是最重要的，在AT模式里面，会自动记录undoLog，资源锁定，都是通过<code>ConnectionProxy</code>完成的，除此之外 <code>DataSrouceProxy</code>重写了一个方法 <code>getConnection</code>，因为这里返回的是一个 <code>ConnectionProxy</code>，而不是原生的<code>Connection</code></p>\n<pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ConnectionProxy</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Connection</span> targetConnection <span class=\"token operator\">=</span> targetDataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionProxy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> targetConnection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ConnectionProxy</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Connection</span> targetConnection <span class=\"token operator\">=</span> targetDataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionProxy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> targetConnection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"ConnectionProxy_765\"></a>ConnectionProxy</h3>\n<p><code>ConnectionProxy</code> 继承 <code>AbstractConnectionProxy</code> ，在这个父类中有很多公用的方法，在这个父类有 <code>PreparedStatementProxy</code> 、<code>StatementProxy</code> 、<code>DataSourceProxy</code></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\f16ce360addfb4ffbc43b040f0493fc5.png\"/></p>\n<p>所以我们需要先来看一下<code>AbstractConnectionProxy</code>，因为这里封装了需要我们用到的通用方法和逻辑，在其中我们需要关注的主要在于 <code>PreparedStatementProxy</code> 和 <code>StatementProxy</code> ，在这里的逻辑主要是数据源连接的步骤，连接获取，创建执行对象等等</p>\n<pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Statement</span> <span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//调用真实连接对象获取Statement对象</span>\n        <span class=\"token class-name\">Statement</span> targetStatement <span class=\"token operator\">=</span> <span class=\"token function\">getTargetConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//创建Statement的代理</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StatementProxy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> targetStatement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PreparedStatement</span> <span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sql<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//获取数据库类型 mysql/oracle</span>\n        <span class=\"token class-name\">String</span> dbType <span class=\"token operator\">=</span> <span class=\"token function\">getDbType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// support oracle 10.2+</span>\n        <span class=\"token class-name\">PreparedStatement</span> targetPreparedStatement <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//如果是AT模式且开启全局事务</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BranchType</span><span class=\"token punctuation\">.</span>AT <span class=\"token operator\">==</span> <span class=\"token class-name\">RootContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBranchType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SQLRecognizer</span><span class=\"token punctuation\">&gt;</span></span> sqlRecognizers <span class=\"token operator\">=</span> <span class=\"token class-name\">SQLVisitorFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> dbType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sqlRecognizers <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> sqlRecognizers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">SQLRecognizer</span> sqlRecognizer <span class=\"token operator\">=</span> sqlRecognizers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sqlRecognizer <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> sqlRecognizer<span class=\"token punctuation\">.</span><span class=\"token function\">getSQLType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">SQLType</span><span class=\"token punctuation\">.</span>INSERT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">//获取表的元数据</span>\n                    <span class=\"token class-name\">TableMeta</span> tableMeta <span class=\"token operator\">=</span> <span class=\"token class-name\">TableMetaCacheFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTableMetaCache</span><span class=\"token punctuation\">(</span>dbType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTableMeta</span><span class=\"token punctuation\">(</span><span class=\"token function\">getTargetConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                            sqlRecognizer<span class=\"token punctuation\">.</span><span class=\"token function\">getTableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getDataSourceProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">//得到表的主键列名</span>\n                    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pkNameArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>tableMeta<span class=\"token punctuation\">.</span><span class=\"token function\">getPrimaryKeyOnlyName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    tableMeta<span class=\"token punctuation\">.</span><span class=\"token function\">getPrimaryKeyOnlyName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span>pkNameArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    targetPreparedStatement <span class=\"token operator\">=</span> <span class=\"token function\">getTargetConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span>pkNameArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>targetPreparedStatement <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            targetPreparedStatement <span class=\"token operator\">=</span> <span class=\"token function\">getTargetConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//创建PreparedStatementProxy代理</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PreparedStatementProxy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> targetPreparedStatement<span class=\"token punctuation\">,</span> sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>在这两个代理对象中，都用到了以下几个方法：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ResultSet</span> <span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sql<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>targetSQL <span class=\"token operator\">=</span> sql<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">ExecuteTemplate</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>statement<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> statement<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sql<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>targetSQL <span class=\"token operator\">=</span> sql<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">ExecuteTemplate</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>statement<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> statement<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sql<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>targetSQL <span class=\"token operator\">=</span> sql<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">ExecuteTemplate</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>statement<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> statement<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>在这些方法中都调用了 <code>ExecuteTemplate.execute()</code>，所以我们就看一下在 <code>ExecuteTemplate</code>类中具体是做了什么操作：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExecuteTemplate</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Statement</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SQLRecognizer</span><span class=\"token punctuation\">&gt;</span></span> sqlRecognizers<span class=\"token punctuation\">,</span>\n                                                     <span class=\"token class-name\">StatementProxy</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">S</span><span class=\"token punctuation\">&gt;</span></span> statementProxy<span class=\"token punctuation\">,</span>\n                                                     <span class=\"token class-name\">StatementCallback</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">S</span><span class=\"token punctuation\">&gt;</span></span> statementCallback<span class=\"token punctuation\">,</span>\n                                                     <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//如果没有全局锁，并且不是AT模式，直接执行SQL</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">RootContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireGlobalLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">BranchType</span><span class=\"token punctuation\">.</span>AT <span class=\"token operator\">!=</span> <span class=\"token class-name\">RootContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBranchType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// Just work as original statement</span>\n            <span class=\"token keyword\">return</span> statementCallback<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>statementProxy<span class=\"token punctuation\">.</span><span class=\"token function\">getTargetStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">//得到数据库类型- mysql/oracle</span>\n        <span class=\"token class-name\">String</span> dbType <span class=\"token operator\">=</span> statementProxy<span class=\"token punctuation\">.</span><span class=\"token function\">getConnectionProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDbType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CollectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>sqlRecognizers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//sqlRecognizers 为SQL语句的解析器，获取执行的SQL，通过它可以获得SQL语句表名、相关的列名、类型等信息，最后解析出对应的SQL表达式</span>\n            sqlRecognizers <span class=\"token operator\">=</span> <span class=\"token class-name\">SQLVisitorFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>\n                    statementProxy<span class=\"token punctuation\">.</span><span class=\"token function\">getTargetSQL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    dbType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Executor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> executor<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CollectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>sqlRecognizers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//如果seata没有找到合适的SQL语句解析器，那么便创建简单执行器PlainExecutor</span>\n            <span class=\"token comment\">//PlainExecutor直接使用原生的Statment对象执行SQL</span>\n            executor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PlainExecutor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>statementProxy<span class=\"token punctuation\">,</span> statementCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sqlRecognizers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">SQLRecognizer</span> sqlRecognizer <span class=\"token operator\">=</span> sqlRecognizers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>sqlRecognizer<span class=\"token punctuation\">.</span><span class=\"token function\">getSQLType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">//新增</span>\n                    <span class=\"token keyword\">case</span> INSERT<span class=\"token operator\">:</span>\n                        executor <span class=\"token operator\">=</span> <span class=\"token class-name\">EnhancedServiceLoader</span><span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InsertExecutor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> dbType<span class=\"token punctuation\">,</span>\n                                    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token class-name\">StatementProxy</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StatementCallback</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SQLRecognizer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                                    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span>statementProxy<span class=\"token punctuation\">,</span> statementCallback<span class=\"token punctuation\">,</span> sqlRecognizer<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">//修改</span>\n                    <span class=\"token keyword\">case</span> UPDATE<span class=\"token operator\">:</span>\n                        executor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UpdateExecutor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>statementProxy<span class=\"token punctuation\">,</span> statementCallback<span class=\"token punctuation\">,</span> sqlRecognizer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">//删除</span>\n                    <span class=\"token keyword\">case</span> DELETE<span class=\"token operator\">:</span>\n                        executor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeleteExecutor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>statementProxy<span class=\"token punctuation\">,</span> statementCallback<span class=\"token punctuation\">,</span> sqlRecognizer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">//加锁</span>\n                    <span class=\"token keyword\">case</span> SELECT_FOR_UPDATE<span class=\"token operator\">:</span>\n                        executor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SelectForUpdateExecutor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>statementProxy<span class=\"token punctuation\">,</span> statementCallback<span class=\"token punctuation\">,</span> sqlRecognizer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">//插入加锁</span>\n                    <span class=\"token keyword\">case</span> INSERT_ON_DUPLICATE_UPDATE<span class=\"token operator\">:</span>\n                        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>dbType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                            <span class=\"token keyword\">case</span> <span class=\"token class-name\">JdbcConstants</span><span class=\"token punctuation\">.</span>MYSQL<span class=\"token operator\">:</span>\n                            <span class=\"token keyword\">case</span> <span class=\"token class-name\">JdbcConstants</span><span class=\"token punctuation\">.</span>MARIADB<span class=\"token operator\">:</span>\n                                executor <span class=\"token operator\">=</span>\n                                    <span class=\"token keyword\">new</span> <span class=\"token class-name\">MySQLInsertOrUpdateExecutor</span><span class=\"token punctuation\">(</span>statementProxy<span class=\"token punctuation\">,</span> statementCallback<span class=\"token punctuation\">,</span> sqlRecognizer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NotSupportYetException</span><span class=\"token punctuation\">(</span>dbType <span class=\"token operator\">+</span> <span class=\"token string\">\" not support to INSERT_ON_DUPLICATE_UPDATE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">//原生</span>\n                    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                        executor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PlainExecutor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>statementProxy<span class=\"token punctuation\">,</span> statementCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//批量处理SQL语句</span>\n                executor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MultiExecutor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>statementProxy<span class=\"token punctuation\">,</span> statementCallback<span class=\"token punctuation\">,</span> sqlRecognizers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">T</span> rs<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//执行</span>\n            rs <span class=\"token operator\">=</span> executor<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>ex <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">// Turn other exception into SQLException</span>\n                ex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">)</span> ex<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> rs<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在 <code>ExecuteTemplate</code>就一个 <code>execute()</code>，Seata将SQL执行委托给不同的执行器(模板)，Seata提供了6种执行器也就是我们代码 case 中（<code>INSERT</code>，<code>UPDATE</code>，<code>DELETE</code>，<code>SELECT_FOR_UPDATE</code>,<code>INSERT_ON_DUPLICATE_UPDATE</code>），这些执行器的父类都是<code>AbstractDMLBaseExecutor</code></p>\n<ul><li><code>UpdateExecutor</code>: 执行update语句</li><li><code>InsertExecutor</code>: 执行insert语句</li><li><code>DeleteExecutor</code>: 执行delete语句</li><li><code>SelectForUpdateExecutor</code>: 执行select for update语句</li><li><code>PlainExecutor</code>: 执行普通查询语句</li><li><code>MultiExecutor</code>: 复合执行器，在一条SQL语句中执行多条语句</li></ul>\n<p>关系图如下：</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\f16af649be708d3642cf86a1c451fcf7.png\"/></p>\n<p>然后我们找到<code> rs = executor.execute(args);</code> 最终执行的方法，找到最顶级的父类<code>BaseTransactionalExecutor.execute()</code></p>\n<pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">String</span> xid <span class=\"token operator\">=</span> <span class=\"token class-name\">RootContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">getXID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xid <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//获取XID</span>\n            statementProxy<span class=\"token punctuation\">.</span><span class=\"token function\">getConnectionProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>xid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//设置全局锁</span>\n        statementProxy<span class=\"token punctuation\">.</span><span class=\"token function\">getConnectionProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setGlobalLockRequire</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RootContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireGlobalLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">doExecute</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>在根据<code>doExecute(args);</code>找到其中的重写方法 <code>AbstractDMLBaseExecutor.doExecute()</code></p>\n<pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">doExecute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">AbstractConnectionProxy</span> connectionProxy <span class=\"token operator\">=</span> statementProxy<span class=\"token punctuation\">.</span><span class=\"token function\">getConnectionProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//是否自动提交</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connectionProxy<span class=\"token punctuation\">.</span><span class=\"token function\">getAutoCommit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">executeAutoCommitTrue</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">executeAutoCommitFalse</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>对于数据库而言，本身都是自动提交的，所以我们进入<code>executeAutoCommitTrue()</code></p>\n<pre><code class=\"prism language-java\">    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">T</span> <span class=\"token function\">executeAutoCommitTrue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">ConnectionProxy</span> connectionProxy <span class=\"token operator\">=</span> statementProxy<span class=\"token punctuation\">.</span><span class=\"token function\">getConnectionProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//设置为手动提交</span>\n            connectionProxy<span class=\"token punctuation\">.</span><span class=\"token function\">changeAutoCommit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LockRetryPolicy</span><span class=\"token punctuation\">(</span>connectionProxy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//调用手动提交方法，得到分支执行的最终结果</span>\n                <span class=\"token class-name\">T</span> result <span class=\"token operator\">=</span> <span class=\"token function\">executeAutoCommitFalse</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//执行提交</span>\n                connectionProxy<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">// when exception occur in finally,this exception will lost, so just print it here</span>\n            LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execute executeAutoCommitTrue error:{}\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">LockRetryPolicy</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLockRetryPolicyBranchRollbackOnConflict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                connectionProxy<span class=\"token punctuation\">.</span><span class=\"token function\">getTargetConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n            connectionProxy<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            connectionProxy<span class=\"token punctuation\">.</span><span class=\"token function\">setAutoCommit</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>connectionProxy.changeAutoCommit()</code>方法，修改为手动提交后，我们看来最关键的代码<code>executeAutoCommitFalse()</code></p>\n<pre><code class=\"prism language-java\">    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">T</span> <span class=\"token function\">executeAutoCommitFalse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">JdbcConstants</span><span class=\"token punctuation\">.</span>MYSQL<span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span><span class=\"token function\">getDbType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isMultiPk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NotSupportYetException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"multi pk only support mysql!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//获取前镜像</span>\n        <span class=\"token class-name\">TableRecords</span> beforeImage <span class=\"token operator\">=</span> <span class=\"token function\">beforeImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//执行具体业务</span>\n        <span class=\"token class-name\">T</span> result <span class=\"token operator\">=</span> statementCallback<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>statementProxy<span class=\"token punctuation\">.</span><span class=\"token function\">getTargetStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//获取执行数量</span>\n        <span class=\"token keyword\">int</span> updateCount <span class=\"token operator\">=</span> statementProxy<span class=\"token punctuation\">.</span><span class=\"token function\">getUpdateCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//判断如果执行数量大于0</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>updateCount <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//获取后镜像</span>\n            <span class=\"token class-name\">TableRecords</span> afterImage <span class=\"token operator\">=</span> <span class=\"token function\">afterImage</span><span class=\"token punctuation\">(</span>beforeImage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//暂存到undolog中，在Commit的时候保存到数据库</span>\n            <span class=\"token function\">prepareUndoLog</span><span class=\"token punctuation\">(</span>beforeImage<span class=\"token punctuation\">,</span> afterImage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们再回到<code>executeAutoCommitTrue</code>中，去看看提交做了哪些操作<code>connectionProxy.commit();</code></p>\n<pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            lockRetryPolicy<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//具体执行</span>\n                <span class=\"token function\">doCommit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>targetConnection <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">getAutoCommit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAutoCommitChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>进入到<code>doCommit()</code>中</p>\n<pre><code class=\"prism language-java\">    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doCommit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//判断是否存在全局事务</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">inGlobalTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">processGlobalTransactionCommit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">isGlobalLockRequire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">processLocalCommitWithGlobalLocks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            targetConnection<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>作为分布式事务，一定是存在全局事务的，所以我们进入 <code>processGlobalTransactionCommit()</code></p>\n<pre><code class=\"prism language-java\">  <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">processGlobalTransactionCommit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//注册分支事务</span>\n            <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">recognizeLockKeyConflictException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">buildLockKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//写入数据库undolog</span>\n            <span class=\"token class-name\">UndoLogManagerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUndoLogManager</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDbType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flushUndoLogs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//执行原生提交 一阶段提交</span>\n            targetConnection<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"process connectionProxy commit error: {}\"</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IS_REPORT_SUCCESS_ENABLE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>其中<code>register()</code>方法就是注册分支事务的方法，同时还会将undoLog写入数据库和执行提交等操作</p>\n<pre><code class=\"prism language-java\">\n    <span class=\"token comment\">//注册分支事务，生成分支事务ID</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TransactionException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">hasUndoLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">hasLockKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//注册分支事务</span>\n        <span class=\"token class-name\">Long</span> branchId <span class=\"token operator\">=</span> <span class=\"token class-name\">DefaultResourceManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">branchRegister</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BranchType</span><span class=\"token punctuation\">.</span>AT<span class=\"token punctuation\">,</span> <span class=\"token function\">getDataSourceProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getXid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getApplicationData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">buildLockKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">setBranchId</span><span class=\"token punctuation\">(</span>branchId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>然后我们在回到<code>processGlobalTransactionCommit</code>中，看看写入数据库中的<code>flushUndoLogs()</code></p>\n<pre><code class=\"prism language-java\"> <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">flushUndoLogs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConnectionProxy</span> cp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">ConnectionContext</span> connectionContext <span class=\"token operator\">=</span> cp<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>connectionContext<span class=\"token punctuation\">.</span><span class=\"token function\">hasUndoLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//获取XID</span>\n        <span class=\"token class-name\">String</span> xid <span class=\"token operator\">=</span> connectionContext<span class=\"token punctuation\">.</span><span class=\"token function\">getXid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//获取分支ID</span>\n        <span class=\"token keyword\">long</span> branchId <span class=\"token operator\">=</span> connectionContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBranchId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">BranchUndoLog</span> branchUndoLog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BranchUndoLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        branchUndoLog<span class=\"token punctuation\">.</span><span class=\"token function\">setXid</span><span class=\"token punctuation\">(</span>xid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        branchUndoLog<span class=\"token punctuation\">.</span><span class=\"token function\">setBranchId</span><span class=\"token punctuation\">(</span>branchId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        branchUndoLog<span class=\"token punctuation\">.</span><span class=\"token function\">setSqlUndoLogs</span><span class=\"token punctuation\">(</span>connectionContext<span class=\"token punctuation\">.</span><span class=\"token function\">getUndoItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">UndoLogParser</span> parser <span class=\"token operator\">=</span> <span class=\"token class-name\">UndoLogParserFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> undoLogContent <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>branchUndoLog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Flushing UNDO LOG: {}\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>undoLogContent<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span>DEFAULT_CHARSET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">CompressorType</span> compressorType <span class=\"token operator\">=</span> <span class=\"token class-name\">CompressorType</span><span class=\"token punctuation\">.</span>NONE<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">needCompress</span><span class=\"token punctuation\">(</span>undoLogContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            compressorType <span class=\"token operator\">=</span> ROLLBACK_INFO_COMPRESS_TYPE<span class=\"token punctuation\">;</span>\n            undoLogContent <span class=\"token operator\">=</span> <span class=\"token class-name\">CompressorFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCompressor</span><span class=\"token punctuation\">(</span>compressorType<span class=\"token punctuation\">.</span><span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">compress</span><span class=\"token punctuation\">(</span>undoLogContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//写入数据库具体位置</span>\n        <span class=\"token function\">insertUndoLogWithNormal</span><span class=\"token punctuation\">(</span>xid<span class=\"token punctuation\">,</span> branchId<span class=\"token punctuation\">,</span> <span class=\"token function\">buildContext</span><span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> compressorType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> undoLogContent<span class=\"token punctuation\">,</span> cp<span class=\"token punctuation\">.</span><span class=\"token function\">getTargetConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>具体写入方法，此时我们使用的是MySql，所以执行的是MySql实现类<code>MySQLUndoLogManager.insertUndoLogWithNormal()</code></p>\n<pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertUndoLogWithNormal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> xid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> branchId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> rollbackCtx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> undoLogContent<span class=\"token punctuation\">,</span>\n                                           <span class=\"token class-name\">Connection</span> conn<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">insertUndoLog</span><span class=\"token punctuation\">(</span>xid<span class=\"token punctuation\">,</span> branchId<span class=\"token punctuation\">,</span> rollbackCtx<span class=\"token punctuation\">,</span> undoLogContent<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State<span class=\"token punctuation\">.</span>Normal</span><span class=\"token punctuation\">,</span> conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n        <span class=\"token comment\">//具体写入操作</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertUndoLog</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> xid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> branchId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> rollbackCtx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> undoLogContent<span class=\"token punctuation\">,</span>\n                               <span class=\"token class-name\">State</span> state<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Connection</span> conn<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PreparedStatement</span> pst <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>INSERT_UNDO_LOG_SQL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            pst<span class=\"token punctuation\">.</span><span class=\"token function\">setLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> branchId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pst<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> xid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pst<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> rollbackCtx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pst<span class=\"token punctuation\">.</span><span class=\"token function\">setBytes</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> undoLogContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pst<span class=\"token punctuation\">.</span><span class=\"token function\">setInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pst<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">)</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>具体流程如下所示：</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\cc94f7cbd5363484c839ed9e69b95c5d.png\"/></p>\n<h2><a id=\"Seata__1165\"></a>Seata 服务端</h2>\n<p>我们找到<code>Server.java</code> 这里就是启动入口，在这个入口中找到协调者，因为TC整体的操作就是协调整体的全局事务</p>\n<pre><code class=\"prism language-java\">  <span class=\"token comment\">//默认协调者</span>\n        <span class=\"token class-name\">DefaultCoordinator</span> coordinator <span class=\"token operator\">=</span> <span class=\"token class-name\">DefaultCoordinator</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>nettyRemotingServer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>在<code>DefaultCoordinator</code>类中我们找到 一个<code>doGlobalBegin</code> 这个就是处理全局事务开始的方法，以及全局提交 <code>doGlobalCommit</code> 和全局回滚 <code>doGlobalRollback</code></p>\n<pre><code class=\"prism language-java\">    <span class=\"token comment\">//处理全局事务</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGlobalBegin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GlobalBeginRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">GlobalBeginResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RpcContext</span> rpcContext<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TransactionException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//响应客户端xid</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">setXid</span><span class=\"token punctuation\">(</span>core<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span>rpcContext<span class=\"token punctuation\">.</span><span class=\"token function\">getApplicationId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rpcContext<span class=\"token punctuation\">.</span><span class=\"token function\">getTransactionServiceGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                request<span class=\"token punctuation\">.</span><span class=\"token function\">getTransactionName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">isInfoEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Begin new global transaction applicationId: {},transactionServiceGroup: {}, transactionName: {},timeout:{},xid:{}\"</span><span class=\"token punctuation\">,</span>\n                    rpcContext<span class=\"token punctuation\">.</span><span class=\"token function\">getApplicationId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rpcContext<span class=\"token punctuation\">.</span><span class=\"token function\">getTransactionServiceGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getTransactionName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getXid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n        <span class=\"token comment\">//处理全局提交</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGlobalCommit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GlobalCommitRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">GlobalCommitResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RpcContext</span> rpcContext<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TransactionException</span> <span class=\"token punctuation\">{<!-- --></span>\n        MDC<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RootContext</span><span class=\"token punctuation\">.</span>MDC_KEY_XID<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getXid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">setGlobalStatus</span><span class=\"token punctuation\">(</span>core<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getXid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//处理全局回滚</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGlobalRollback</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GlobalRollbackRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">GlobalRollbackResponse</span> response<span class=\"token punctuation\">,</span>\n                                    <span class=\"token class-name\">RpcContext</span> rpcContext<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TransactionException</span> <span class=\"token punctuation\">{<!-- --></span>\n        MDC<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RootContext</span><span class=\"token punctuation\">.</span>MDC_KEY_XID<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getXid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">setGlobalStatus</span><span class=\"token punctuation\">(</span>core<span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getXid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在这里我们首先关注 <code>doGlobalBegin</code> 中 <code>core.begin()</code></p>\n<pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> applicationId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> transactionServiceGroup<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> timeout<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TransactionException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//创建全局事务Session</span>\n        <span class=\"token class-name\">GlobalSession</span> session <span class=\"token operator\">=</span> <span class=\"token class-name\">GlobalSession</span><span class=\"token punctuation\">.</span><span class=\"token function\">createGlobalSession</span><span class=\"token punctuation\">(</span>applicationId<span class=\"token punctuation\">,</span> transactionServiceGroup<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span>\n            timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        MDC<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RootContext</span><span class=\"token punctuation\">.</span>MDC_KEY_XID<span class=\"token punctuation\">,</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getXid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//为Session重添加回调监听，SessionHolder.getRootSessionManager() 获取一个全局Session管理器DataBaseSessionManager</span>\n        <span class=\"token comment\">//观察者设计模式，创建DataBaseSessionManager</span>\n        session<span class=\"token punctuation\">.</span><span class=\"token function\">addSessionLifecycleListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SessionHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRootSessionManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//全局事务开始</span>\n        session<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// transaction start event</span>\n        <span class=\"token class-name\">MetricsPublisher</span><span class=\"token punctuation\">.</span><span class=\"token function\">postSessionDoingEvent</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getXid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>然后我们在来看一下<code>SessionHolder.getRootSessionManager()</code></p>\n<pre><code class=\"prism language-java\">    <span class=\"token comment\">/**\n     * Gets root session manager.\n     * 获取一个全局Session管理器\n     * @return the root session manager\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SessionManager</span> <span class=\"token function\">getRootSessionManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ROOT_SESSION_MANAGER <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ShouldNeverHappenException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SessionManager is NOT init!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ROOT_SESSION_MANAGER<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> mode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            mode <span class=\"token operator\">=</span> CONFIG<span class=\"token punctuation\">.</span><span class=\"token function\">getConfig</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationKeys</span><span class=\"token punctuation\">.</span>STORE_SESSION_MODE<span class=\"token punctuation\">,</span>\n                    CONFIG<span class=\"token punctuation\">.</span><span class=\"token function\">getConfig</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationKeys</span><span class=\"token punctuation\">.</span>STORE_MODE<span class=\"token punctuation\">,</span> SERVER_DEFAULT_STORE_MODE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">StoreMode</span> storeMode <span class=\"token operator\">=</span> <span class=\"token class-name\">StoreMode</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//判断Seata模式，当前为DB</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StoreMode</span><span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>storeMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//通过SPI机制读取SessionManager接口实现类，读取的META-INF.services目录，在通过反射机制创建对象DataBaseSessionManager</span>\n            ROOT_SESSION_MANAGER <span class=\"token operator\">=</span> <span class=\"token class-name\">EnhancedServiceLoader</span><span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SessionManager</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StoreMode</span><span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在这里他其实读取的是DB模式下 <code>io.seata.server.session.SessionManager</code>文件的内容</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\4dd908fc36e0128e646e3c8c0b03262a.png\"/></p>\n<p>我们在回到<code>begin</code>方法中，去查看<code>session.begin()</code></p>\n<pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TransactionException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//声明全局事务开始</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token class-name\">GlobalStatus<span class=\"token punctuation\">.</span>Begin</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//开始时间</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beginTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//激活全局事务</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>active <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//将SessionManager放入到集合中，调用onBegin方法</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SessionLifecycleListener</span> lifecycleListener <span class=\"token operator\">:</span> lifecycleListeners<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//调用父级抽象类的方法</span>\n            lifecycleListener<span class=\"token punctuation\">.</span><span class=\"token function\">onBegin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>这里我们来看一下 <code>onBegin()</code> 方法，调用的是父级的方法，在这其中我们要关注 <code>addGlobalSession()</code> 方法，但是要注意，这里我们用的是db模式所以调用的是db模式的 <code>DateBaseSessionManager</code></p>\n<pre><code class=\"prism language-java\">    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onBegin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GlobalSession</span> globalSession<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TransactionException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//这里调用的是DateBaseSessionManager</span>\n        <span class=\"token function\">addGlobalSession</span><span class=\"token punctuation\">(</span>globalSession<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n        <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addGlobalSession</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GlobalSession</span> session<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TransactionException</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>taskName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//写入session</span>\n            <span class=\"token keyword\">boolean</span> ret <span class=\"token operator\">=</span> transactionStoreManager<span class=\"token punctuation\">.</span><span class=\"token function\">writeSession</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LogOperation</span><span class=\"token punctuation\">.</span>GLOBAL_ADD<span class=\"token punctuation\">,</span> session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ret<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StoreException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"addGlobalSession failed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">boolean</span> ret <span class=\"token operator\">=</span> transactionStoreManager<span class=\"token punctuation\">.</span><span class=\"token function\">writeSession</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LogOperation</span><span class=\"token punctuation\">.</span>GLOBAL_UPDATE<span class=\"token punctuation\">,</span> session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ret<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StoreException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"addGlobalSession failed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>然后在看查询其中关键的方法<code>DataBaseTransactionStoreManager.writeSession()</code></p>\n<pre><code class=\"prism language-java\"> <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">writeSession</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LogOperation</span> logOperation<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SessionStorable</span> session<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//第一次进入是写入 会进入当前方法</span>\n        <span class=\"token comment\">//全局添加</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">LogOperation</span><span class=\"token punctuation\">.</span>GLOBAL_ADD<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>logOperation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> logStore<span class=\"token punctuation\">.</span><span class=\"token function\">insertGlobalTransactionDO</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SessionConverter</span><span class=\"token punctuation\">.</span><span class=\"token function\">convertGlobalTransactionDO</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//全局修改</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">LogOperation</span><span class=\"token punctuation\">.</span>GLOBAL_UPDATE<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>logOperation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> logStore<span class=\"token punctuation\">.</span><span class=\"token function\">updateGlobalTransactionDO</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SessionConverter</span><span class=\"token punctuation\">.</span><span class=\"token function\">convertGlobalTransactionDO</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//全局删除</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">LogOperation</span><span class=\"token punctuation\">.</span>GLOBAL_REMOVE<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>logOperation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> logStore<span class=\"token punctuation\">.</span><span class=\"token function\">deleteGlobalTransactionDO</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SessionConverter</span><span class=\"token punctuation\">.</span><span class=\"token function\">convertGlobalTransactionDO</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//分支添加</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">LogOperation</span><span class=\"token punctuation\">.</span>BRANCH_ADD<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>logOperation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> logStore<span class=\"token punctuation\">.</span><span class=\"token function\">insertBranchTransactionDO</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SessionConverter</span><span class=\"token punctuation\">.</span><span class=\"token function\">convertBranchTransactionDO</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//分支更新</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">LogOperation</span><span class=\"token punctuation\">.</span>BRANCH_UPDATE<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>logOperation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> logStore<span class=\"token punctuation\">.</span><span class=\"token function\">updateBranchTransactionDO</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SessionConverter</span><span class=\"token punctuation\">.</span><span class=\"token function\">convertBranchTransactionDO</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//分支移除</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">LogOperation</span><span class=\"token punctuation\">.</span>BRANCH_REMOVE<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>logOperation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> logStore<span class=\"token punctuation\">.</span><span class=\"token function\">deleteBranchTransactionDO</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SessionConverter</span><span class=\"token punctuation\">.</span><span class=\"token function\">convertBranchTransactionDO</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StoreException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown LogOperation:\"</span> <span class=\"token operator\">+</span> logOperation<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们就看第一次进去的方法<code>logStore.insertGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));</code></p>\n<pre><code class=\"prism language-java\">   <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">insertGlobalTransactionDO</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GlobalTransactionDO</span> globalTransactionDO<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token class-name\">LogStoreSqlsFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogStoreSqls</span><span class=\"token punctuation\">(</span>dbType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInsertGlobalTransactionSQL</span><span class=\"token punctuation\">(</span>globalTable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Connection</span> conn <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">PreparedStatement</span> ps <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            conn <span class=\"token operator\">=</span> logStoreDataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            conn<span class=\"token punctuation\">.</span><span class=\"token function\">setAutoCommit</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ps <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ps<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> globalTransactionDO<span class=\"token punctuation\">.</span><span class=\"token function\">getXid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ps<span class=\"token punctuation\">.</span><span class=\"token function\">setLong</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> globalTransactionDO<span class=\"token punctuation\">.</span><span class=\"token function\">getTransactionId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ps<span class=\"token punctuation\">.</span><span class=\"token function\">setInt</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> globalTransactionDO<span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ps<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> globalTransactionDO<span class=\"token punctuation\">.</span><span class=\"token function\">getApplicationId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ps<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> globalTransactionDO<span class=\"token punctuation\">.</span><span class=\"token function\">getTransactionServiceGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> transactionName <span class=\"token operator\">=</span> globalTransactionDO<span class=\"token punctuation\">.</span><span class=\"token function\">getTransactionName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            transactionName <span class=\"token operator\">=</span> transactionName<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> transactionNameColumnSize <span class=\"token operator\">?</span>\n                transactionName<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> transactionNameColumnSize<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n                transactionName<span class=\"token punctuation\">;</span>\n            ps<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> transactionName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ps<span class=\"token punctuation\">.</span><span class=\"token function\">setInt</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> globalTransactionDO<span class=\"token punctuation\">.</span><span class=\"token function\">getTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ps<span class=\"token punctuation\">.</span><span class=\"token function\">setLong</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> globalTransactionDO<span class=\"token punctuation\">.</span><span class=\"token function\">getBeginTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ps<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> globalTransactionDO<span class=\"token punctuation\">.</span><span class=\"token function\">getApplicationData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> ps<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StoreException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token class-name\">IOUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">,</span> conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在这里有一个 <code>GlobalTransactionDO </code>对象，里面有<code>xid、transactionId</code> 等等，到这里是不是就很熟悉了、</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\5649458fda2717fb7c87a5d8d0df2741.png\"/></p>\n<p>还记得我们第一次使用Seata的时候会创建三张表</p>\n<ol><li>branch_table 分支事务表</li><li>global_table 全局事务表</li><li>lock_table 全局锁表</li></ol>\n<p>而这里就是对应我们的<code>global_table</code>表，其他两个也是差不多，都是一样的操作</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\6ef22513cae0ad8f2861cf18ec4cde0c.png\"/><br/> 流程图如下：<br/> <img alt=\"\" src=\"..\\..\\static\\image\\c33801b28bbae2a960f6b14856d4e8cf.png\"/></p>\n<h2><a id=\"_1393\"></a>总结</h2>\n<p>完整流程图：</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\e615279306d5aaf9ad85b8e2f9905a35.png\"/></p>\n<p>对于Seata源码来说主要是了解从哪里入口以及核心点在哪里，遇到有疑问的，可以Debug，对于Seata AT模式，我们主要掌握的核心点是</p>\n<ul><li>如何获取全局锁、开启全局事务</li><li>解析SQL并写入undolog</li></ul>\n<p>围绕这两点去看的话，会有针对性一点，到这里我们的Seata源码就讲解完了，有疑问的小伙伴记得在下方留言。</p>\n<p>我是牧小农，怕什么真理无穷，进一步有进一步的欢喜，大家加油！</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-07-10 15:19:32", "summary": "前言在之前的系列中，我们讲解了关于基本介绍和实际应用，今天带来的这篇，就给大家分析一下的源码是如何一步一步实现的。读源码的时候我们需要俯瞰起全貌，不要去扣一个一个的细节，这样我们学习起来会快捷而且有效"}