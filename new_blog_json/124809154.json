{"blogid": "124809154", "writerAge": "码龄5年", "writerBlogNum": "109", "writerCollect": "246", "writerComment": "94", "writerFan": "36", "writerGrade": "5级", "writerIntegral": "2698", "writerName": "loli_kong", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124809154.jpg", "writerRankTotal": "24626", "writerRankWeekly": "47406", "writerThumb": "156", "writerVisitNum": "225486", "blog_read_count": "2028", "blog_time": "已于 2022-06-14 19:38:15 修改", "blog_title": "BeanFactory和ApplicationContext区别及详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"1_0\"></a>1.概述</h2>\n<p>​ Spring 框架带有两个 IOC 容器—— <em>BeanFactory</em>和<em>ApplicationContext</em>。<em>BeanFactory</em>是 IOC 容器的最基本版本，<em>ApplicationContext</em>扩展了<em>BeanFactory</em>的特性。</p>\n<p>​ Spring容器最基本的接口就是BeanFactory。BeanFactory负责配置、创建、管理Bean，它有一个子接口ApplicationContext，也被称为Spring上下文，容器同时还管理着Bean和Bean之间的依赖关系。</p>\n<p>​ spring Ioc容器的实现，从根源上是beanfactory，但真正可以作为一个可以独立使用的ioc容器还是DefaultListableBeanFactory，因此可以这么说，DefaultListableBeanFactory 是整个spring ioc的始祖。</p>\n<h2><a id=\"11BeanFactory_8\"></a>1.1<strong>BeanFactory</strong></h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4e1078b69ae04b9b84487cecda3139c8.png\"/></p>\n<h3><a id=\"_12\"></a>接口介绍</h3>\n<p><strong>1.BeanFactory接口：</strong><br/>  是Spring bean容器的根接口，提供获取bean，是否包含bean,是否单例与原型，获取bean类型，bean 别名的方法 。它最主要的方法就是getBean(String beanName)。<br/> <strong>2.BeanFactory的三个子接口：</strong></p>\n<ul><li>HierarchicalBeanFactory：提供父容器的访问功能</li><li>ListableBeanFactory：提供了批量获取Bean的方法</li><li>AutowireCapableBeanFactory：在BeanFactory基础上实现对已存在实例的管理<br/> <strong>3.ConfigurableBeanFactory：</strong><br/> 主要单例bean的注册，生成实例，以及统计单例bean<br/> <strong>4.ConfigurableListableBeanFactory：</strong><br/> 继承了上述的所有接口，增加了其他功能：比如类加载器,类型转化,属性编辑器,BeanPostProcessor,作用域,bean定义,处理bean依赖关系, bean如何销毁…<br/> <strong>5.实现类DefaultListableBeanFactory详细介绍：</strong><br/> 实现了ConfigurableListableBeanFactory，实现上述BeanFactory所有功能。它还可以注册BeanDefinition<br/> 接口详细介绍请参考:<a href=\"https://blog.csdn.net/u011179993/article/details/51636742\">揭秘BeanFactory</a></li></ul>\n<h3><a id=\"_29\"></a>接口具体说明</h3>\n<p>1、BeanFactory作为一个主接口不继承任何接口，暂且称为<strong>一级接口</strong>。<br/> 　　2、有3个子接口继承了它，进行功能上的增强。这3个子接口称为<strong>二级接口</strong>。<br/> 　　3、ConfigurableBeanFactory可以被称为<strong>三级接口</strong>，对二级接口HierarchicalBeanFactory进行了再次增强，它还继承了另一个外来的接口SingletonBeanRegistry<br/> 　　4、ConfigurableListableBeanFactory是一个更强大的接口，继承了上述的所有接口，无所不包，称为<strong>四级接口</strong>。（这4级接口是BeanFactory的基本接口体系。继续，下面是继承关系的2个抽象类和2个实现类）<br/> 　　5、AbstractBeanFactory作为一个抽象类，实现了三级接口ConfigurableBeanFactory大部分功能。<br/> 　　6、AbstractAutowireCapableBeanFactory同样是抽象类，继承自AbstractBeanFactory，并额外实现了二级接口AutowireCapableBeanFactory<br/> 　　7、DefaultListableBeanFactory继承自AbstractAutowireCapableBeanFactory，实现了最强大的四级接口ConfigurableListableBeanFactory，并实现了一个外来接口BeanDefinitionRegistry，它并非抽象类。<br/> 　　8、最后是最强大的XmlBeanFactory，继承自DefaultListableBeanFactory，重写了一些功能，使自己更强大。</p>\n<p>1、BeanFactory作为一个主接口不继承任何接口，暂且称为<strong>一级接口</strong>。<br/> 　　2、有3个子接口继承了它，进行功能上的增强。这3个子接口称为<strong>二级接口</strong>。<br/> 　　3、ConfigurableBeanFactory可以被称为<strong>三级接口</strong>，对二级接口HierarchicalBeanFactory进行了再次增强，它还继承了另一个外来的接口SingletonBeanRegistry<br/> 　　4、ConfigurableListableBeanFactory是一个更强大的接口，继承了上述的所有接口，无所不包，称为<strong>四级接口</strong>。<br/> 　　（这4级接口是BeanFactory的基本接口体系。继续，下面是继承关系的2个抽象类和2个实现类：）<br/> 　　5、AbstractBeanFactory作为一个抽象类，实现了三级接口ConfigurableBeanFactory大部分功能。<br/> 　　6、AbstractAutowireCapableBeanFactory同样是抽象类，继承自AbstractBeanFactory，并额外实现了二级接口AutowireCapableBeanFactory<br/> 　　7、DefaultListableBeanFactory继承自AbstractAutowireCapableBeanFactory，实现了最强大的四级接口ConfigurableListableBeanFactory，并实现了一个外来接口BeanDefinitionRegistry，它并非抽象类。<br/> 　　8、最后是最强大的XmlBeanFactory，继承自DefaultListableBeanFactory，重写了一些功能，使自己更强大。</p>\n<h3><a id=\"_51\"></a>源码说明</h3>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BeanFactory</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token comment\">/**\n     * 用来引用一个实例，或把它和工厂产生的Bean区分开，就是说，如果一个FactoryBean的名字为a，那么，&amp;a会得到那个Factory\n     */</span>\n    <span class=\"token class-name\">String</span> FACTORY_BEAN_PREFIX <span class=\"token operator\">=</span> <span class=\"token string\">\"&amp;\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*\n     * 四个不同形式的getBean方法，获取实例\n     */</span>\n    <span class=\"token class-name\">Object</span> <span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> requiredType<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> requiredType<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Object</span> <span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span><span class=\"token punctuation\">;</span>\n \t<span class=\"token comment\">// 根据名称判断bean是否存在</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">containsBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 是否为单实例Bean</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSingleton</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">NoSuchBeanDefinitionException</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 是否为原型（多实例）</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPrototype</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">NoSuchBeanDefinitionException</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 名称、类型是否匹配</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isTypeMatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> targetType<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">NoSuchBeanDefinitionException</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 获取类型</span>\n    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">NoSuchBeanDefinitionException</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 根据实例的名字获取实例的别名</span>\n    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getAliases</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"2_86\"></a>2.延迟加载与立即加载</h2>\n<p><strong>BeanFactory按需加载 bean，而ApplicationContext在启动时加载所有 bean</strong>。</p>\n<p>因此， <em>BeanFactory与</em> <em>ApplicationContext</em>相比是轻量级的。例子如下：</p>\n<h3><a id=\"21BeanFactory_92\"></a>2.1.使用BeanFactory延迟加载</h3>\n<p>假设我们有一个名为<em>Student</em>的单例 bean类，它有一个方法：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> isBeanInstantiated <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postConstruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">setBeanInstantiated</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//standard setters and getters</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们将 在<em>BeanFactory</em>配置文件<em>ioc-container-difference-example.xml</em>中将*postConstruct()*方法定义为<a href=\"https://www.baeldung.com/running-setup-logic-on-startup-in-spring#4-the-bean-initmethod-attribute\"><em>init-method</em></a>：</p>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>student<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.baeldung.ioccontainer.bean.Student<span class=\"token punctuation\">\"</span></span> \n      <span class=\"token attr-name\">init-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>postConstruct<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n</code></pre>\n<p>现在，让我们编写一个测试用例，创建一个<em>BeanFactory</em>来检查它是否加载了<em>Student</em> bean：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">whenBFInitialized_thenStudentNotInitialized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Resource</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ioc-container-difference-example.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">BeanFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XmlBeanFactory</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">assertFalse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBeanInstantiated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在这里，<strong>Student对象没有被初始化</strong>。换句话说，<strong>只有BeanFactory被初始化</strong>。<em>只有当我们显式调用getBean()<em>方法时，我们的</em>BeanFactory</em>中定义的 bean才会被加载*。*</p>\n<p>让我们检查一下我们手动调用<em>getBean()<em>方法的</em>Student</em> bean的初始化：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">whenBFInitialized_thenStudentInitialized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Resource</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ioc-container-difference-example.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">BeanFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XmlBeanFactory</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBeanInstantiated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在这里，<em>Student</em> bean 加载成功。因此，<em>BeanFactory</em>仅在需要时才加载 bean。</p>\n<h3><a id=\"22_ApplicationContext_142\"></a>2.2. 使用ApplicationContext预加载</h3>\n<p>现在，让我们使用<em>ApplicationContext</em>代替<em>BeanFactory</em>。</p>\n<p>我们将只定义*ApplicationContext，*它会通过使用立即加载策略立即加载所有 bean：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">whenAppContInitialized_thenStudentInitialized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">ApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ioc-container-difference-example.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBeanInstantiated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>在这里，即使我们没有调用getBean()方法，也会创建Student对象。</strong></p>\n<p><em>ApplicationContext</em>被认为是一个沉重的 IOC 容器，因为它的预先加载策略会在启动时加载所有 bean。<em>相比之下， BeanFactory</em>是轻量级的，可以在内存受限的系统中使用。尽管如此，<strong>我们最常用的仍是ApplicationContext</strong>。</p>\n<h2><a id=\"3ApplicationContext_161\"></a>3.ApplicationContext</h2>\n<p><em>ApplicationContext</em>以更加面向框架的风格增强了<em>BeanFactory</em>，并提供了一些适用于企业应用程序的特性。</p>\n<ul><li> <p>默认初始化所有的Singleton，也可以通过配置取消预初始化。</p> </li><li> <p>继承MessageSource，因此支持国际化。</p> </li><li> <p>资源访问，比如访问URL和文件。</p> </li><li> <p>事件传播特性，即支持aop特性。</p> </li><li> <p>同时加载多个配置文件。</p> </li><li> <p>以声明式方式启动并创建Spring容器。</p> </li></ul>\n<p>ApplicationContext：是IOC容器另一个重要接口， 它继承了BeanFactory的基本功能， 同时也继承了容器的高级功能，如：MessageSource（国际化资源接口）、ResourceLoader（资源加载接口）、ApplicationEventPublisher（应用事件发布接口）等。</p>\n<h2><a id=\"4_BeanFactoryPostProcessorBeanPostProcessor_179\"></a>4. BeanFactoryPostProcessor和BeanPostProcessor的自动注册</h2>\n<p><strong>ApplicationContext</strong>在启动时会**自动注册<strong><strong>BeanFactoryPostProcessor</strong></strong>和****BeanPostProcessor 。**另一方面，<em>BeanFactory</em>不会自动注册这些接口。</p>\n<h3><a id=\"41BeanFactory_183\"></a>4.1.在<em>BeanFactory中注册</em></h3>\n<p>为了理解，让我们编写两个类。</p>\n<p>首先，我们有<em>CustomBeanFactoryPostProcessor</em>类，它实现了<em>BeanFactoryPostProcessor</em>：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomBeanFactoryPostProcessor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BeanFactoryPostProcessor</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> isBeanFactoryPostProcessorRegistered <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">setBeanFactoryPostProcessorRegistered</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// standard setters and getters</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在这里，我们重写了<a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/config/BeanFactoryPostProcessor.html#postProcessBeanFactory-org.springframework.beans.factory.config.ConfigurableListableBeanFactory-\"><em>postProcessBeanFactory()</em></a> 方法来检查它的注册。</p>\n<p>其次，我们有另一个类<em>CustomBeanPostProcessor</em>，它实现了<em>BeanPostProcessor</em>：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomBeanPostProcessor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BeanPostProcessor</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> isBeanPostProcessorRegistered <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessBeforeInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">setBeanPostProcessorRegistered</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//standard setters and getters</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在这里，我们重写了<a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/config/BeanPostProcessor.html#postProcessBeforeInitialization-java.lang.Object-java.lang.String-\"><em>postProcessBeforeInitialization()</em></a>方法来检查它的注册。</p>\n<p>此外，我们在<em>ioc-container-difference-example.xml</em>配置文件中配置了这两个类：</p>\n<pre><code class=\"prism language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>customBeanPostProcessor<span class=\"token punctuation\">\"</span></span> \n  <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.baeldung.ioccontainer.bean.CustomBeanPostProcessor<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>customBeanFactoryPostProcessor<span class=\"token punctuation\">\"</span></span> \n  <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.baeldung.ioccontainer.bean.CustomBeanFactoryPostProcessor<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n</code></pre>\n<p>让我们看一个测试用例来检查这两个类是否在启动时自动注册：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">whenBFInitialized_thenBFPProcessorAndBPProcessorNotRegAutomatically</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Resource</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ioc-container-difference-example.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ConfigurableListableBeanFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XmlBeanFactory</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">assertFalse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CustomBeanFactoryPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBeanFactoryPostProcessorRegistered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertFalse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CustomBeanPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBeanPostProcessorRegistered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>从我们的测试中可以看出，<strong>自动注册没有发生</strong>。</p>\n<p><strong>现在，让我们看一个在BeanFactory中手动添加它们的测试用例：</strong></p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">whenBFPostProcessorAndBPProcessorRegisteredManually_thenReturnTrue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">Resource</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ioc-container-difference-example.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ConfigurableListableBeanFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XmlBeanFactory</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">CustomBeanFactoryPostProcessor</span> beanFactoryPostProcessor \n      <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomBeanFactoryPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    beanFactoryPostProcessor<span class=\"token punctuation\">.</span><span class=\"token function\">postProcessBeanFactory</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CustomBeanFactoryPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBeanFactoryPostProcessorRegistered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">CustomBeanPostProcessor</span> beanPostProcessor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    factory<span class=\"token punctuation\">.</span><span class=\"token function\">addBeanPostProcessor</span><span class=\"token punctuation\">(</span>beanPostProcessor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CustomBeanPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBeanPostProcessorRegistered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在这里，我们使用<a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/config/BeanFactoryPostProcessor.html#postProcessBeanFactory-org.springframework.beans.factory.config.ConfigurableListableBeanFactory-\"><em>postProcessBeanFactory()</em></a>方法注册<em>CustomBeanFactoryPostProcessor</em>和<a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/config/ConfigurableBeanFactory.html#addBeanPostProcessor-org.springframework.beans.factory.config.BeanPostProcessor-\"><em>addBeanPostProcessor()</em></a>方法注册<em>CustomBeanPostProcessor</em>。在这种情况下，他们俩都成功注册。</p>\n<h3><a id=\"42_ApplicationContext_268\"></a>4.2. 在<em>ApplicationContext中注册</em></h3>\n<p>正如我们前面提到的，<em>ApplicationContext</em>会自动注册这两个类，而无需编写额外的代码。</p>\n<p>让我们在单元测试中验证此行为：</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">whenAppContInitialized_thenBFPostProcessorAndBPostProcessorRegisteredAutomatically</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">ApplicationContext</span> context \n      <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ioc-container-difference-example.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CustomBeanFactoryPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBeanFactoryPostProcessorRegistered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CustomBeanPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBeanPostProcessorRegistered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>如我们所见，在这种情况下**，两个类的自动注册都是成功的。**</p>\n<p>因此，<strong>始终建议使用ApplicationContext</strong>，因为 Spring 2.0（及更高版本）大量使用<em>BeanPostProcessor。</em></p>\n<p>还值得注意的是，<strong>如果您使用的是普通的BeanFactory，那么事务和 AOP 等功能将不会生效</strong>（至少在不编写额外代码行的情况下不会生效）。这可能会导致混淆，因为配置看起来没有任何问题。</p>\n<h2><a id=\"5__291\"></a>5. 结论</h2>\n<ol><li> <p>BeanFactory负责读取bean配置文档，管理bean的加载，实例化，维护bean之间的依赖关系，负责bean的声明周期。</p> </li><li> <p>ApplicationContext除了提供上述BeanFactory所能提供的功能之外，还提供了更完整的框架功能：<br/> a. 国际化支持<br/> b. 资源访问：Resource rs = ctx. getResource(“classpath:config.properties”), “file:c:/config.properties”<br/> c. 事件传递：通过实现ApplicationContextAware接口。</p> </li><li> <p>常用的获取ApplicationContext</p> </li></ol>\n<p>FileSystemXmlApplicationContext：从文件系统或者url指定的xml配置文件创建，参数为配置文件名或文件名数组，有相对路径与绝对路径。</p>\n<pre><code>ApplicationContext factory=new FileSystemXmlApplicationContext(\"src/applicationContext.xml\");\nApplicationContext factory=new FileSystemXmlApplicationContext(\"E:/Workspaces/MyEclipse 8.5/Hello/src/applicationContext.xml\");\n</code></pre>\n<p>ClassPathXmlApplicationContext：从classpath的xml配置文件创建，可以从jar包中读取配置文件。ClassPathXmlApplicationContext 编译路径总有三种方式：</p>\n<pre><code>ApplicationContext factory = new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\nApplicationContext factory = new ClassPathXmlApplicationContext(\"applicationContext.xml\"); \nApplicationContext factory = new ClassPathXmlApplicationContext(\"file:E:/Workspaces/MyEclipse 8.5/Hello/src/applicationContext.xml\");\n</code></pre>\n<p>XmlWebApplicationContext：从web应用的根目录读取配置文件，需要先在web.xml中配置，可以配置监听器或者servlet来实现</p>\n<pre><code>&lt;listener&gt;\n&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;\n&lt;/listener&gt;\n</code></pre>\n<p>或</p>\n<pre><code>&lt;servlet&gt;\n&lt;servlet-name&gt;context&lt;/servlet-name&gt;\n&lt;servlet-class&gt;org.springframework.web.context.ContextLoaderServlet&lt;/servlet-class&gt;\n&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n&lt;/servlet&gt;\n</code></pre>\n<p>这两种方式都默认配置文件为web-inf/applicationContext.xml，也可使用context-param指定配置文件</p>\n<pre><code>&lt;context-param&gt;\n&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n&lt;param-value&gt;/WEB-INF/myApplicationContext.xml&lt;/param-value&gt;\n&lt;/context-param&gt;\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-06-14 19:38:15", "summary": "概述框架带有两个容器和。是容器的最基本版本，扩展了的特性。容器最基本的接口就是。负责配置、创建、管理，它有一个子接口，也被称为上下文，容器同时还管理着和之间的依赖关系。容器的实现，从根源上是，但真正可"}