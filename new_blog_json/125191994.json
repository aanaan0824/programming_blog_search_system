{"blogid": "125191994", "writerAge": "码龄7年", "writerBlogNum": "10", "writerCollect": "30", "writerComment": "7", "writerFan": "5", "writerGrade": "2级", "writerIntegral": "299", "writerName": "灵梦归希", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125191994.jpg", "writerRankTotal": "73857", "writerRankWeekly": "722723", "writerThumb": "11", "writerVisitNum": "21684", "blog_read_count": "2961", "blog_time": "于 2022-06-08 21:26:02 发布", "blog_title": "vue项目使用svg文件", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>在vue中使用 <a href=\"https://so.csdn.net/so/search?q=svg&amp;spm=1001.2101.3001.7020\" title=\"svg\">svg</a> 有<strong>两种</strong>方式：</p>\n<p>1、使用本地的svg</p>\n<p>2、把本地的 svg 上传到 iconfont中，统一生成 <a href=\"https://so.csdn.net/so/search?q=symbol&amp;spm=1001.2101.3001.7020\" title=\"symbol\">symbol</a> 格式的文件引入</p>\n<h1>本地svg导入</h1>\n<p><strong>一.建立模板组件</strong></p>\n<p>本质上就是构建自定义组件（这里取名:IconSvg）来代替svg标签，目的当然是封装，以便更简单使用。</p>\n<pre><code>&lt;template&gt;\n  &lt;div class=\"icon-wrapper\"&gt;\n    &lt;svg class=\"icon\" aria-hidden=\"true\"&gt;\n      &lt;use :xlink:href=\"iconName\"&gt;&lt;/use&gt;\n    &lt;/svg&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n// 引入从iconfont 下载的symbox文件\n// import '@/assets/icons/iconfont-svg.js'\n\n// 引入本地的svg文件\n// 定义一个加载目录的函数\nconst requireAll = requireContext =&gt; requireContext.keys().map(requireContext)\nconst req = require.context('@/assets/icons/svg', false, /\\.svg$/)\n// 加载目录下的所有的 svg 文件\nrequireAll(req)\n// console.log('I: 加载svg文件:', req.keys())\nexport default {\n  name: 'IconSvg',\n  props: {\n    name: String,\n    prefix: {\n      type: String,\n      default: 'icon-'\n    }\n  },\n  computed: {\n    iconName () {\n      let name = `#${this.prefix}${this.name}`\n      return name\n    }\n  }\n}\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n/*.icon-wrapper {\n  display: inline-block;\n}\n.icon {\n  width: 100%;\n  height: 100%;\n  vertical-align: -0.15em;\n  fill: currentColor;\n  overflow: hidden;\n}*/\n\n.icon-wrapper {\n  /* Using currentColor above lets\n  us use `color` for changing the color\n  of our icons: */\n  color: red;\n\n  /* The width and height of the SVG\n  was previously set to 1em.\n  This allows us to use `font-size`\n  to change the size of our icon: */\n  font-size: 48px;\n}\n\n.icon {\n  display: inline-block;\n  color: #444444;\n  width: 1em;\n  height: 1em;\n  fill: currentColor;\n}\n\n&lt;/style&gt;\n</code></pre>\n<p>svg文件通过requireAll函数加载目录下的svg文件进行全部加载。</p>\n<p>使用模板的方法为:</p>\n<p>&lt;IconSvg name=\"不包含后缀名的文件名\"/&gt;</p>\n<p>比如文件名: home.svg, 例子: &lt;IconSvg name=\"home\"/&gt;</p>\n<p>一般这个组件作为全局组件，通过以下方式进行全局添加：</p>\n<p>在main.js文件（入口文件）</p>\n<pre><code>Vue.component('IconSvg', require(组件路径名).default)</code></pre>\n<p></p>\n<p><strong>2.加载器配置</strong></p>\n<p>在1点中:xlink:href是根据id进行定位资源的。</p>\n<p>svg里面并没有包含symbolId，需要使用加载器进行加载，因此才会有本步骤。</p>\n<p>如果不采用本步骤，可以类似以下的代码：<a href=\"https://codepen.io/Keyamoon/pen/vEXLQX\" title=\"https://codepen.io/Keyamoon/pen/vEXLQX\">https://codepen.io/Keyamoon/pen/vEXLQX</a></p>\n<p>html文件：</p>\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n\t&lt;title&gt;IcoMoon - SVG Icons&lt;/title&gt;\n\t&lt;meta charset=\"utf-8\"&gt;\n\t&lt;meta name=\"viewport\" content=\"width=device-width\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"&gt;\n&lt;defs&gt;\n&lt;symbol id=\"icon-home\" viewBox=\"0 0 1024 1024\"&gt;\n\t&lt;title&gt;home&lt;/title&gt;\n\t&lt;path class=\"path1\" d=\"M512 96l-512 512 96 96 96-96v416h256v-192h128v192h256v-416l96 96 96-96-512-512zM512 512c-35.346 0-64-28.654-64-64s28.654-64 64-64c35.346 0 64 28.654 64 64s-28.654 64-64 64z\"&gt;&lt;/path&gt;\n&lt;/symbol&gt;\n&lt;/defs&gt;\n&lt;/svg&gt;\n\n&lt;svg class=\"icon icon-home\"&gt;&lt;use xlink:href=\"#icon-home\"&gt;&lt;/use&gt;&lt;/svg&gt;&lt;span&gt; icon-home&lt;/span&gt;\n  \n&lt;/body&gt;\n&lt;/html&gt;\n\n\n</code></pre>\n<pre><code>body {\n  font: 32px sans-serif; color: #444;\n  margin: 1em;\n}\n.icon {\n\tdisplay: inline-block;\n\tcolor: #444444;\n  width: 1em;\n\theight: 1em;\n\tfill: currentColor;\n}\n.icon-home {\n  /* Using currentColor above lets\n  us use `color` for changing the color\n  of our icons: */\n  color: red;\n  \n  /* The width and height of the SVG\n  was previously set to 1em.\n  This allows us to use `font-size`\n  to change the size of our icon: */\n  font-size: 48px;\n}</code></pre>\n<p>以上是额外扩展，回归主题:</p>\n<p>在module的rules中加入:</p>\n<p></p>\n<pre><code>      {\n        test: /(\\.svg)(\\?.*)?$/,\n        loader: 'svg-sprite-loader',\n        include: [resolve('src/assets/icons/svg')],\n        options: {\n          symbolId: 'icon-[name]'\n        }\n      }</code></pre>\n<p>同时test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/ 追加exclude: [resolve('src/assets/icons/svg')],</p>\n<p>如下：</p>\n<pre><code>      {\n        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n        loader: 'url-loader',\n        exclude: [resolve('src/assets/icons/svg')],\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('img/[name].[hash:7].[ext]')\n        }\n      }</code></pre>\n<p>src/assets/icons/svg：是存放svg文件的路径，需要根据实际路径进行替换。</p>\n<p><strong>3.安装加载器模块。</strong></p>\n<p>在第二点使用加载器：svg-sprite-loader，检测下自己的package.json有没有相关依赖，没有的话，在项目根目录cmd调用：</p>\n<pre><code>npm install svg-sprite-loader</code></pre>\n<h3>使用iconfont图标库</h3>\n<p>在做这个项目的时候，很遗憾，iconfont无法使用。它是阿里的图标库。</p>\n<p>地址：<a href=\"https://www.iconfont.cn/\" title=\"iconfont-阿里巴巴矢量图标库\">iconfont-阿里巴巴矢量图标库</a></p>\n<p><img alt=\"\" height=\"78\" src=\"..\\..\\static\\image\\cb6ade98d4104c2486d51a54ee5ae961.png\" width=\"511\"/></p>\n<p> 做法参考：<a href=\"https://www.cnblogs.com/hjvsdr/p/6639649.html\" title=\"iconfont字体图标的使用方法--超简单! - 全堆栈溢出攻城狮 - 博客园\">iconfont字体图标的使用方法--超简单! - 全堆栈溢出攻城狮 - 博客园</a></p>\n<h3>IcoMoon库</h3>\n<p>这是国外的图标库，访问速度还可以</p>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-06-08 21:26:02", "summary": "在中使用有两种方式：、使用本地的、把本地的上传到中，统一生成格式的文件引入本地导入一建立模板组件本质上就是构建自定义组件这里取名来代替标签，目的当然是封装，以便更简单使用。引入从下载的文件引入本地的文"}