{"blogid": "124038491", "writerAge": "码龄5年", "writerBlogNum": "5", "writerCollect": "3", "writerComment": "1", "writerFan": "2", "writerGrade": "1级", "writerIntegral": "60", "writerName": "qq_39858654", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124038491.jpg", "writerRankTotal": "123657", "writerRankWeekly": "1005919", "writerThumb": "2", "writerVisitNum": "4864", "blog_read_count": "3209", "blog_time": "已于 2022-06-23 09:47:06 修改", "blog_title": "魔方游戏（附游戏开源代码）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>这个魔方游戏的前期的实现参考了许多教程，但全部代码逻辑都是本人写的（借鉴了的都会给出原贴链接），只讲实现的思路。</p>\n<p>已完成：</p>\n<p>魔方的转动和魔方的动画效果，支持魔方的cfop全部公式，按按钮可转动魔方</p>\n<p>按键盘上的alt键可用移动鼠标360无死角观察魔方</p>\n<p>魔方中心块加了转动提示符，提示魔方是须时针转还是逆时针旋转，双击转动提示符可快速将其设为F面</p>\n<p>魔方默认为须时针转动，按键盘上的ctrl键，可切换魔方的转动类型和提示符类型为逆时针旋转</p>\n<p>一建打乱，魔方状态保存和复原、已支持了检测魔方的还原情况,分为魔方已还原、白色底部两层和黄色顶层翻色已完成（还有类似5种）、白色底部两层（类似5种）、白色底部十字架（类似5种）</p>\n<p>魔方cfop公式检测与还原算法已完成（原创的），没有时间写实现恩路写改天抽控写，可以去看源代码</p>\n<p>测试图：</p>\n<p><img alt=\"\" height=\"619\" src=\"..\\..\\static\\image\\a9dbcde5e3c14d7bb149c1bf83df277a.png\" width=\"1094\"/></p>\n<p></p>\n<p>魔方游戏转动思路最初来源于b站的一个视频：<a class=\"link-info\" href=\"https://www.bilibili.com/video/BV1uf4y1x7eP?spm_id_from=333.337.search-card.all.click\" title=\"萌新学unity可以做一个魔方玩吗?\">萌新学unity可以做一个魔方玩吗?</a></p>\n<p>给我提供了一个很好的思路，我要做的是一个三阶魔方，魔方的转动就是最大的问题，视频中大佬思路是：</p>\n<p>1.先摆放27个方块形成一个魔方，然后用6个较薄的正方体作为魔方的控制器，分别置于魔方的六个面，每一个魔方控制器都与9个方块进行触碰。</p>\n<p>2.当魔方某个面要进行旋转的时候，相当于选择了某个魔方控制器，然后被选中的魔方控制器去检测与自己产生触碰的物体,将其变成自己的子物体，控制器再去旋转，就完成对魔方某个面的旋转。</p>\n<p>3.若选择了某一个魔方控制器，那么剩余的5个魔方控制器都不能有子物体，若有则要将之前的子物体释放，从而避免所形成的魔方控制器得到的方块面不完整。</p>\n<p>虽然这种思路可行，但是有个很大缺点，只能对魔方的某个面进行旋转,当我想对魔方的中间进行（E、M、S）旋转时,它做不到,这个就涉及到unity触碰的判断机制:</p>\n<p>当A物体与B物体相互触碰,若C物体去触碰A物体,unity会认为C物体触碰到了A物体和B物体。</p>\n<p>打一个比较恰当的比喻，就是两个人触电了，你不管摸哪一个都会触电。</p>\n<p>如果我用上述的思路,对魔方进行E、M、S的任意一个中间旋转,旋转的都是整个魔方,而不是中间块！</p>\n<p></p>\n<p>所以想让27个小方块形成的魔方可以随意的转动，第一个要解决的问题是：如何生成控制器？</p>\n<p>我想出的方式是用三维坐标来判断,事实证明这种方法很有效果，感觉不但可以用于三阶，还可以用于4阶、5阶等魔方游戏的控制器判断。</p>\n<p>首先我让三阶魔方的轴心置于(0，0，0)，白色为底面，则会发现一个这样一个规律：</p>\n<p>（a，a，-1）F         （1，a，a）R        （a，1，a）U</p>\n<p>（a，a，1）B          （-1，a，a）L        （a，-1，a）D</p>\n<p>若要判断F面的方块，只需让27个方块分别一下判断三维坐标的z轴是否等于-1，得到是9个符合条件的方块。</p>\n<p>(a,0,a) E        (0,a,a) M        (a,0,a) S</p>\n<p>若要判断E面的方块，只需让27个方块分别一下判断三维坐标的y轴是否等于0，得到是9个符合条件的中间方块。</p>\n<p>f=S(条件)+ F(条件)        r=M(条件)+R(条件)       u=E(条件)+U(条件)</p>\n<p>b=S(条件)+ B(条件)       l=M(条件)+L(条件)        d=E(条件)+D(条件)</p>\n<p>若要判断f面的方块，只需让27个方块分别一下判断三维坐标的y轴是否等于0或z轴是否等于-1，得到是18个符合条件的方块。</p>\n<p>实现后发现了一个小问题，就是旋转后魔方的坐标会有一点小误差，不会是刚等于1或0,有可能是1.001或0.0082等，所以判断前要用Mathf.Round()进行误差的去除，才能得到正确的方块数量，不然转着转着，魔方就会出现方块丢失的情况。</p>\n<h2>魔方转动是整个游戏的最核心部分,实现步骤：</h2>\n<p>1、27个魔方方块的创建，主要参考的是：<a class=\"link-info\" href=\"https://blog.csdn.net/u013131744/article/details/70145571?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164939225116780274172763%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164939225116780274172763&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-70145571.142%5Ev7%5Earticle_score_rank,157%5Ev4%5Econtrol&amp;utm_term=unity+%E9%AD%94%E6%96%B9&amp;spm=1018.2226.3001.4187\" title=\"Unity教程 | 手把手教你拼一个3D“魔方”\">Unity教程 | 手把手教你拼一个3D“魔方”</a>,生成的只是一个模型并不能动。</p>\n<p>2、12个魔方控制器创建，有6个面控制器和6个中心块控制器，用于控制27个方块。</p>\n<p>3、定义了18个按钮，用一个脚本初始化了，主要参考的是：<a class=\"link-info\" href=\"https://blog.csdn.net/qq_34691688/article/details/84454683\" title=\"Unity：使用数组管理多个Button\">Unity：使用数组管理多个Button</a></p>\n<p>4、魔方旋转动画的实现：</p>\n<p>  1.用的是四元数插值实现的魔方动画，避免了万向锁问题，但四元数转动只转一次就没了，那就需要保存转动数值且要保持角度的连贯性，完美解决的方法是角度叠加法（我原创的）。</p>\n<p>角度叠加法：先定义一个旋转的初始方向，顺时针转则加90，逆时针转减90，角度限制在-360度至360度之间，可以这样理解这旋转原理，记录下了上一次的角度，顺时针转加上90就得到顺时针转的目标值，逆时针转减去90就得到逆时针转的目标值。</p>\n<p>2.魔方控制器的值不能相互影响，经过我的探索,12个魔方控制器刚好动画能互相不受影响。</p>\n<p>3.魔方旋转动画要按时完成且还要保证转到位，用协程能很好解决这问题。</p>\n<p>魔方动画效果代码是：</p>\n<pre><code class=\"language-cs\">private IEnumerator RotateOverTime(Transform transformToRotate, Quaternion targetRotation, float duration)\n    {\n        var timePassed = 0f;\n        while (timePassed &lt; duration)\n        {\n            var factor = timePassed / duration;\n\n            transformToRotate.rotation = Quaternion.Slerp(transformToRotate.rotation, targetRotation, factor);\n            // 增加自上一帧起经过的时间\n            timePassed += Time.deltaTime;\n\n            // 重要的这告诉Unity在这里中断，渲染这个帧\n            // 在下一帧中从这里继续\n            yield return null;\n        }\n        // 要确保以精确值结束，请在完成时设置目标旋转修复\n        transformToRotate.rotation = targetRotation;\n    }</code></pre>\n<p>调用动画协程的方法：</p>\n<p>StartCoroutine(RotateOverTime(mofanControlList[mofanConNum].transform,Quaternion.Euler(mofan_rotate * n1), 0.3f));</p>\n<p></p>\n<h2>自由观察魔方实现：</h2>\n<p>在主摄像机上绑了一个脚本，让摄像机绕着魔方转，实现一种可随意观察的效果，但这也导致了一个问题，用按钮操控魔方的各个面，但分不清哪面跟哪面，于是我在魔方的中心块上加了魔方转动标示符。</p>\n<h2>魔方状态保存和复原：</h2>\n<p>用结构体定义了两个Vector3，用来保存27个魔方块的坐标和欧拉角，将魔方的对应坐标和欧拉角保存好，就可以保存好魔方的状态，后面发现用魔方块的坐标和欧拉角可以反推魔方的颜色，具体看：<a href=\"https://blog.csdn.net/qq_39858654/article/details/124540885\" title=\"魔方状态检测2_qq_39858654的博客-CSDN博客\">魔方状态检测2_qq_39858654的博客-CSDN博客</a></p>\n<p>这个我列了480记录，用了一个星期左右的时间发现的。</p>\n<p></p>\n<h2><strong>魔方的还原情况检测：</strong></h2>\n<p>1、先判断27个魔方块是否被还原：</p>\n<p>当要检测某个魔方块是否被还原，也就是检测魔方块的坐标和旋转角度是否正确。</p>\n<p>棱块坐标还原检测：</p>\n<p>如：要检测红白棱块，可以将红色魔方块的中心块的坐标加上白色魔方块的中心块的坐标，得到红白棱块坐标。</p>\n<p>角块坐标还原检测：</p>\n<p>如：要检测红白绿棱块，可以将红色魔方块的中心块的坐标加上白色魔方块的中心块的坐标加上绿色魔方块的中心块的坐标，得到红白绿棱块坐标。</p>\n<p>棱块、角块旋转角度还原检测：</p>\n<p>只要棱块或角块的旋转角度跟魔方最中心的魔方块旋转角度一样即为已还原。</p>\n<p>当上述两个检测通过则表示某个魔方块成功被还原，那样能实时检测20个魔方块的实时还原情况。<br/>  </p>\n<p>2、然后判断魔方块的还原个数，分为4、8、12、20，对不同的还原阶段，黄色顶层是否翻色成功是用黄色中心块与其它块是否在同一面</p>\n<h2></h2>\n<p>游戏的完整的代码已经在gitee上传，地址为：</p>\n<p><a class=\"link-info\" href=\"https://gitee.com/caoctllo/intelligent-magic-cube\" title=\"智能魔方\">智能魔方</a></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-06-23 09:47:06", "summary": "这个魔方游戏的前期的实现参考了许多教程，但全部代码逻辑都是本人写的借鉴了的都会给出原贴链接，只讲实现的思路。已完成：魔方的转动和魔方的动画效果，支持魔方的全部公式，按按钮可转动魔方按键盘上的键可用移动"}