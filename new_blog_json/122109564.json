{"blogid": "122109564", "writerAge": "码龄2年", "writerBlogNum": "47", "writerCollect": "317", "writerComment": "89", "writerFan": "79", "writerGrade": "4级", "writerIntegral": "822", "writerName": "爱音乐的编程师", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122109564.jpg", "writerRankTotal": "51569", "writerRankWeekly": "59985", "writerThumb": "107", "writerVisitNum": "53963", "blog_read_count": "5070", "blog_time": "已于 2022-07-15 10:19:56 修改", "blog_title": "通俗易懂了解什么是docker?以及docker的各种安装环境", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#docker_4\">一、docker是什么？</a></li><li><a href=\"#dockerlinxu_25\">二、安装docker(linxu安装)</a></li><li><ul><li><a href=\"#1Docker_26\">1.清除系统残余项(如果你的服务器之前没有装过Docker，可以直接跳过)</a></li><li><a href=\"#2Docker_40\">2.安装下载Docker依赖的工具</a></li><li><a href=\"#3_45\">3、设置镜像仓库地址</a></li><li><a href=\"#4yumdocker_59\">4、更新yum缓存（为了保证能更新和下载需要的服务：如docker）</a></li><li><a href=\"#5DockerDockerCEEECE_64\">5、安装Docker（Docker版本分为CE（社区免费版）和EE（企业版，安全CE）</a></li><li><a href=\"#6docker_69\">6、启动docker</a></li><li><a href=\"#7docker_74\">7、查看docker是否启动成功</a></li><li><a href=\"#8docker_85\">8、docker常用命令</a></li></ul>\n</li><li><a href=\"#docker_138\">三、docker常用命令</a></li><li><a href=\"#dockercompose_202\">四、安装docker-compose命令脚本</a></li><li><a href=\"#dockermysql_244\">五、docker安装mysql</a></li><li><a href=\"#docker__Redis_333\">六、docker 安装 Redis</a></li><li><a href=\"#docker_elasticsearch_401\">七、docker 安装elasticsearch</a></li><li><a href=\"#dockerKibana_451\">八、docker安装Kibana</a></li><li><a href=\"#dockerRabbitMQ_488\">九、docker安装RabbitMQ</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"docker_4\"></a>一、docker是什么？</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\712bcae2b84e445784a33468448b1673.png\"/><br/> <strong>1.Docker的三个基本概念</strong>:</p>\n<p>Image(镜像)<br/> Container(容器)<br/> Repository(仓库)</p>\n<p>Docker的思想来自于集装箱，集装箱解决了什么问题？<br/> 在一艘大船上，可以把货物规整的摆放起来。并且各种各样的货物被集装箱标准化了，集装箱和集装箱之间不会互相影响。那么我就不需要专门运送水果的船和专门运送化学品的船了。只要这些货物在集装箱里封装的好好的，那我就可以用一艘大船把他们都运走。docker就是类似的理念。现在都流行云计算了，云计算就好比大货轮。docker就是集装箱.</p>\n<p>还不懂得话,在这么理解,docker你理解为快递车.<br/> 那么快递车是不是有一个个包裹,包裹可以理解为一个镜像,镜像可以理解为一个Java类，而容器可以理解为Java类的实例。<br/> 类只有一个，但可以new出千千万万个实例对象。所以，镜像只是一个可以生成容器的东西，而容器才能让程序运行起来。</p>\n<p>仓库的话,比如说,都应该用过git吧,完全可以理解为git,上传拉取操作</p>\n<p>那么docker有什么好处呢?<br/> 最简单的一个例子,比如说,你在刚开始的一台服务器部署项目,那么部署项目一定要配置mysql等环境是吧<br/> 那么现在你要吧这个项目迁移到另一台服务器上,又要重写在另一台服务器上重写配置mysql等环境.可能会出现版本错乱等错误,很麻烦<br/> 那么现在第一次部署项目的时候,把项目等环境直接放进docker里面,下次你要迁移项目到另一台服务器上,自己把docker镜像上传到docker仓库上,然后再另一台服务器拉取就直接O了,这只是好处之一</p>\n<h1><a id=\"dockerlinxu_25\"></a>二、安装docker(linxu安装)</h1>\n<h2><a id=\"1Docker_26\"></a>1.清除系统残余项(如果你的服务器之前没有装过Docker，可以直接跳过)</h2>\n<p>直接复制</p>\n<pre><code>      sudo yum remove docker \\\n              docker-client \\\n              docker-client-latest \\\n              docker-common \\\n              docker-latest \\\n              docker-latest-logrotate \\\n              docker-logrotate \\\n              docker-selinux \\\n              docker-engine-selinux \\\n              docker-engine\n</code></pre>\n<h2><a id=\"2Docker_40\"></a>2.安装下载Docker依赖的工具</h2>\n<p>输入命令：</p>\n<blockquote>\n<p>sudo yum install -y yum-utils device-mapper-persistent-data lvm2</p>\n</blockquote>\n<h2><a id=\"3_45\"></a>3、设置镜像仓库地址</h2>\n<p>docker默认的官方仓库地址</p>\n<blockquote>\n<p>yum-config-manager <br/> –add-repo <br/> https://download.docker.com/linux/centos/docker-ce.repo ##此地址为官方的仓库地址，在国内建议不要用</p>\n</blockquote>\n<p>阿里云的镜像仓库地址</p>\n<blockquote>\n<p>yum-config-manager \\ --add-repo \\<br/> http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</p>\n</blockquote>\n<p>还有很多其他的仓库地址，如：网友云、有道等</p>\n<h2><a id=\"4yumdocker_59\"></a>4、更新yum缓存（为了保证能更新和下载需要的服务：如docker）</h2>\n<p>命令：</p>\n<blockquote>\n<p>sudo yum makecache fast</p>\n</blockquote>\n<h2><a id=\"5DockerDockerCEEECE_64\"></a>5、安装Docker（Docker版本分为CE（社区免费版）和EE（企业版，安全CE）</h2>\n<p>命令：</p>\n<blockquote>\n<p>sudo yum -y install docker-ce</p>\n</blockquote>\n<h2><a id=\"6docker_69\"></a>6、启动docker</h2>\n<p>输入命令：</p>\n<blockquote>\n<p>sudo systemctl start docker</p>\n</blockquote>\n<h2><a id=\"7docker_74\"></a>7、查看docker是否启动成功</h2>\n<blockquote>\n<p>systemctl status docker</p>\n</blockquote>\n<p>代表启动成功</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\5ccdf11058124381ac8bb463b7681ea4.png\"/><br/> <strong>补充一下</strong><br/> 如果想设置开机自启可以(个人需求自选)<br/> 输入命令：</p>\n<blockquote>\n<p>sudo systemctl enable docker</p>\n</blockquote>\n<h2><a id=\"8docker_85\"></a>8、docker常用命令</h2>\n<p>启动docker</p>\n<blockquote>\n<p>systemctl start docker</p>\n</blockquote>\n<p>关闭docker</p>\n<blockquote>\n<p>systemctl stop docker</p>\n</blockquote>\n<p>重启docker</p>\n<blockquote>\n<p>systemctl restart docker</p>\n</blockquote>\n<p>docker设置随服务启动而自启动</p>\n<blockquote>\n<p>systemctl enable docker</p>\n</blockquote>\n<p>查看docker 运行状态 ------如果是在运行中 输入命令后 会看到绿色的active</p>\n<blockquote>\n<p>systemctl status docker</p>\n</blockquote>\n<p>查看docker 版本号信息</p>\n<blockquote>\n<p>docker version</p>\n</blockquote>\n<p>查看docker 详细信息 --------此命令可以查看到docker 中容器运行个数 以及镜像个数等等</p>\n<blockquote>\n<p>docker info</p>\n</blockquote>\n<p>查看运行中的容器</p>\n<blockquote>\n<p>docker ps</p>\n</blockquote>\n<p>查看全部容器</p>\n<blockquote>\n<p>docker ps -a</p>\n</blockquote>\n<p>查看镜像</p>\n<blockquote>\n<p>docker images</p>\n</blockquote>\n<p>所有镜像和容器都删除的命令</p>\n<blockquote>\n<p>docker system prune -a</p>\n</blockquote>\n<p>删除容器命令</p>\n<blockquote>\n<p>docker rm 容器id</p>\n</blockquote>\n<p>删除镜像</p>\n<blockquote>\n<p>docker rmi 镜像id</p>\n</blockquote>\n<h1><a id=\"docker_138\"></a>三、docker常用命令</h1>\n<p>启动docker</p>\n<blockquote>\n<p>systemctl start docker</p>\n</blockquote>\n<p>关闭docker</p>\n<blockquote>\n<p>systemctl stop docker</p>\n</blockquote>\n<p>重启docker</p>\n<blockquote>\n<p>systemctl restart docker</p>\n</blockquote>\n<p>docker设置随服务启动而自启动</p>\n<blockquote>\n<p>systemctl enable docker</p>\n</blockquote>\n<p>查看docker 运行状态------如果是在运行中 输入命令后 会看到绿色的active</p>\n<blockquote>\n<p>systemctl status docker</p>\n</blockquote>\n<p>查看docker 版本号信息</p>\n<blockquote>\n<p>docker version</p>\n<p>docker info</p>\n</blockquote>\n<p>查看自己服务器中docker 镜像列表</p>\n<blockquote>\n<p>docker images<br/> docker images -a 查看全部</p>\n</blockquote>\n<p>修改镜像名称</p>\n<blockquote>\n<p>​ docker tag 镜像ID 新镜像名称：版本</p>\n</blockquote>\n<p>删除一个或者多个镜像：</p>\n<blockquote>\n<p>​ docker rmi 镜像名称或ID</p>\n</blockquote>\n<p>启动容器</p>\n<blockquote>\n<p>docker start 容器ID</p>\n</blockquote>\n<p>停止容器</p>\n<blockquote>\n<p>docker stop 容器ID</p>\n</blockquote>\n<p>重启容器</p>\n<blockquote>\n<p>docker restart 容器ID</p>\n</blockquote>\n<p>杀死某个容器</p>\n<blockquote>\n<p>docker kill 容器ID</p>\n</blockquote>\n<p>删除容器,容器名字或者容器ID</p>\n<blockquote>\n<p>docker rm Name/ID<br/> docker rm -f Name/ID 强制删除某个容器</p>\n</blockquote>\n<h1><a id=\"dockercompose_202\"></a>四、安装docker-compose命令脚本</h1>\n<p><strong>1、Compose介绍</strong><br/> Docker Compose是一个用来定义和运行复杂应用的Docker工具。一个使用Docker容器的应用，通常由多个容器组成。使用Docker Compose不再需要使用shell脚本来启动容器。</p>\n<p>Compose 通过一个配置文件来管理多个Docker容器，在配置文件中，所有的容器通过services来定义，然后使用docker-compose脚本来启动，停止和重启应用，和应用中的服务以及所有依赖服务的容器，非常适合组合使用多个容器进行开发的场景。</p>\n<p><strong>2、从github上下载docker-compose二进<br/> 制文件安装</strong><br/> 下载最新版的docker-compose文件</p>\n<pre><code class=\"prism language-xml\">sudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\n</code></pre>\n<p>若是github访问太慢，可以用daocloud下载</p>\n<pre><code class=\"prism language-xml\">sudo curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\n</code></pre>\n<p><strong>3、添加可执行权限</strong></p>\n<blockquote>\n<p>sudo chmod +x /usr/local/bin/docker-compose</p>\n</blockquote>\n<p>4、创建软连（可跳过）</p>\n<blockquote>\n<p>ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</p>\n</blockquote>\n<p><strong>5、配置环境变量</strong></p>\n<blockquote>\n<p>vi /etc/profile</p>\n</blockquote>\n<p><strong>6、查看版本</strong></p>\n<blockquote>\n<p>docker-compose --version</p>\n</blockquote>\n<p>安装成功<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7f138db7200e411c8fa3b4bfbe58353c.png\"/></p>\n<h1><a id=\"dockermysql_244\"></a>五、docker安装mysql</h1>\n<p><strong>1、下载镜像</strong><br/> 在docker hub中搜索mysql,就可以找到该软件页面，上面有下载命令，直接复制粘贴即可<br/> 下载命令(我这边下载的是5.7版本)：</p>\n<blockquote>\n<p>docker pull mysql:5.7</p>\n</blockquote>\n<p>查看镜像命令(可以查看以下载的镜像)：</p>\n<blockquote>\n<p>docker images</p>\n</blockquote>\n<p><strong>2、根据docker hub页面示例，来配置并启动容器</strong><br/> 创建本地数据库目录、配置文件以及日志目录（方便进行容器数据卷挂载）<br/> 注：因为mysql容器一旦销毁，数据库也就随之销毁，为了解决这个问题，docker官方提出了容器数据卷技术，就是在宿主机上新建一些目录与容器内的目录映射，当容器销毁时，宿主机上的目录文件不会消失，依然存在.<br/> 新建目录命令：</p>\n<blockquote>\n<p>建立宿主机数据库目录<br/> mkdir /mydata/mysql/data<br/> 建立宿主机数据库配置文件<br/> mkdir /mydata/mysql/conf<br/> 建立宿主机数据库日志目录<br/> mkdir /mydata/mysql/log</p>\n</blockquote>\n<p><strong>注:目录可根据你自己修改,但是后面启动docker的时候目录也要改成你修改的</strong></p>\n<p><strong>3. 启动容器</strong><br/> 启动mysql容器命令</p>\n<blockquote>\n<p>docker run --name mysql -p 3306:3306 -v /mydata/mysql/data:/var/lib/mysql -v /mydata/mysql/conf:/etc/mysql/conf.d -v /mydata/mysql/logs:/var/log/mysql -e MYSQL_ROOT_PASSWORD=123456 -d a70d36bc331a</p>\n</blockquote>\n<p><strong>4.参数解释</strong></p>\n<p><strong>-p 3306:3306</strong><br/> 端口映射，将宿主机3306端口与容器3306端口做映射，这样就可以通过宿主机IP+端口访问容器的3306端口了</p>\n<p><strong>格式</strong>：-p 宿主机端口:容器端口</p>\n<p><strong>–name mysql</strong><br/> 指定容器名字为mysql，也可以不指定，不指定没有容器名字</p>\n<p>-v /root/mysql/datadir:/var/lib/mysql -v /root/mysql/conf:/etc/mysql/conf.d -v /root/mysql/logs:/var/log/mysql<br/> 数据容器卷挂载<br/> -v /root/mysql/datadir:/var/lib/mysql：对宿主机数据库目录与容器数据库目录进行映射挂载<br/> -v /root/mysql/conf:/etc/mysql/conf.d：对宿主机数据库配置文件与容器数据库配置文件进行映射挂载<br/> -v /root/mysql/logs:/var/log/mysql：对宿主机数据库日志与容器数据库日志进行映射挂载</p>\n<p><strong>-e MYSQL_ROOT_PASSWORD=123456</strong><br/> 配置mysql的root账号的密码为123456（可以根据需要自行修改密码）</p>\n<p><strong>-d:后台执行</strong><br/> a70d36bc331a ：镜像id，容器第一次启动要根据镜像来启动，也可以是镜像的名字。可以通过明林docker iamges查看镜像id</p>\n<p><strong>5.开启远程访问权限</strong><br/> 进入mysql容器命令</p>\n<blockquote>\n<p>docker exec -it mysql-test bash</p>\n</blockquote>\n<p>进入之后登陆</p>\n<blockquote>\n<p>mysql -uroot -p<br/> 输入密码我设置的是123456</p>\n</blockquote>\n<p>开启远程访问权限</p>\n<p>命令：</p>\n<blockquote>\n<p>use mysql;</p>\n</blockquote>\n<p>命令：</p>\n<blockquote>\n<p>select host,user from user;</p>\n</blockquote>\n<p>命令：</p>\n<blockquote>\n<p>ALTER USER ‘root’@‘%’ IDENTIFIED WITH mysql_native_password BY<br/> ‘123456’;</p>\n</blockquote>\n<p>命令：</p>\n<blockquote>\n<p>flush privileges;</p>\n</blockquote>\n<p><strong>6、测试是否成功</strong><br/> 打开一个mysql客户端如navicat进行连接测试，测试成功<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\25df17bf917e48fdb68ff086b99e0926.png\"/></p>\n<p><strong>7、注意</strong><br/> 如果远程连接不上的话<br/> 1.如果你是云服务器，在安全组中把3306端口开放了<br/> 2.如果你是虚拟机，把防火墙关了，或者让防火墙开放3306端口</p>\n<h1><a id=\"docker__Redis_333\"></a>六、docker 安装 Redis</h1>\n<p>1.下载Redis镜像</p>\n<table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>docker pull redis</td><td>下载最新版Redis镜像 (其实此命令就等同于 : docker pull</td></tr><tr><td>docker pull redis:xxx</td><td>下载指定版本的Redis镜像 (xxx指具体版本号)</td></tr><tr><td><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d3d7eeea84ef439abe894a1713f5e5a1.png\"/></td><td></td></tr><tr><td>我这里下载的是最新版本</td><td></td></tr></tbody></table>\n<blockquote>\n<p>docker pull redis:latest</p>\n</blockquote>\n<p>2、创建Redis配置文件</p>\n<blockquote>\n<p>启动前需要先创建Redis外部挂载的配置文件 （ /mydata/redis/conf/redis.conf ）<br/> 之所以要先创建 , 是因为Redis本身容器只存在 /etc/redis 目录 , 本身就不创建 redis.conf 文件<br/> 当服务器和容器都不存在 redis.conf 文件时, 执行启动命令的时候 docker 会将 redis.conf 作为目录创建 , 这并不是我们想要的结果</p>\n</blockquote>\n<blockquote>\n<p>创建目录 mkdir -p /mydata/redis/conf<br/> 创建文件 touch /mydata/redis/conf/redis.conf</p>\n</blockquote>\n<p>4、创建Redis容器并启动</p>\n<blockquote>\n<p>docker run <br/> -p 6379:6379 <br/> –name redis <br/> -v /mydata/redis/data:/data <br/> -v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf <br/> -d redis redis-server /etc/redis/redis.conf <br/> –appendonly yes</p>\n</blockquote>\n<p>5、查看Redis是否运行</p>\n<blockquote>\n<p>docker ps</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ef3e01482894424dac544039bceadf61.png\"/></p>\n<p><strong>6、进入Redis容器</strong><br/> 通过 Docker 命令进入 Redis 容器内部,下面两个命令都可以</p>\n<blockquote>\n<p>docker exec -it redis /bin/bash<br/> docker exec -it redis bash</p>\n</blockquote>\n<p>进入 Redis 控制台</p>\n<blockquote>\n<p>redis-cli</p>\n</blockquote>\n<p>添加一个变量为 key 为 name , value 为 bella 的内容</p>\n<blockquote>\n<p>set name bella</p>\n</blockquote>\n<p>查看 key 为 name 的 value 值</p>\n<blockquote>\n<p>get name</p>\n</blockquote>\n<p><strong>7、退出容器</strong></p>\n<blockquote>\n<p>exit</p>\n</blockquote>\n<p><strong>8、Redis 配置文件修改</strong></p>\n<blockquote>\n<p>vi /mydata/redis/conf/redis.conf</p>\n</blockquote>\n<blockquote>\n<p>appendonly yes<br/> protected-mode no <br/> bind 0.0.0.0 <br/> requirepass 123456</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0e10994f86df465a82e7f26f3a13495f.png\"/></p>\n<h1><a id=\"docker_elasticsearch_401\"></a>七、docker 安装elasticsearch</h1>\n<p><strong>1、下载镜像</strong></p>\n<blockquote>\n<p>docker pull elasticsearch:7.4.2</p>\n</blockquote>\n<p><strong>2、创建挂载目录</strong></p>\n<blockquote>\n<p>mkdir -p /mydata/elasticsearch/config<br/> mkdir -p /mydata/elasticsearch/data</p>\n</blockquote>\n<p><strong>3、写入文件,可被远程任何机器访问</strong></p>\n<blockquote>\n<p>echo “http.host: 0.0.0.0” &gt; /mydata/elasticsearch/config/elasticsearch.yml</p>\n</blockquote>\n<p><strong>4、运行，暴漏两个端口 9200 访问端口 9300 节点通信端口 单节点启动</strong></p>\n<blockquote>\n<p>docker run --name elasticsearch -p 9200:9200 -p 9300:9300<br/> –privileged=true \\</p>\n<p>-e ``“discovery.type=single-node”<code> </code>\\</p>\n<p>-e ES_JAVA_OPTS=``“-Xms64m -Xms128m”<code> </code>\\</p>\n<p>-<code>v` `/mydata/elasticsearch/config/elasticsearch</code>.yml:<code>/usr/share/elasticsearch/config/elasticsearch</code>.yml<br/> \\</p>\n<p>-<code>v` `/mydata/elasticsearch/data</code>:``/usr/share/elasticsearch/data<code> </code>\\</p>\n<p>-<code>v` `/mydata/elasticsearch/plugins</code>:``/usr/share/elasticsearch/plugins<code> </code>\\</p>\n<p>-d elasticsearch:7.4.2</p>\n</blockquote>\n<p><strong>5、需求给挂载文件夹授予权限</strong></p>\n<blockquote>\n<p>chmod -R 777 /mydata/elasticsearch</p>\n</blockquote>\n<p><strong>6、设置开启自启动</strong></p>\n<blockquote>\n<p>docker update Id号 --restart=always</p>\n</blockquote>\n<p><strong>7、如此就可以访问了，但是虚拟机需要设置网络端口 阿里云服务器需要设置 安全组 开发9200端口</strong></p>\n<blockquote>\n<p>访问: 虚拟机ip地址加上 9200<br/> http://192.168.56.1:9200/</p>\n</blockquote>\n<p><strong>8、访问效果</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20ff327d67264bb3901c17f4d2765525.png\"/></p>\n<h1><a id=\"dockerKibana_451\"></a>八、docker安装Kibana</h1>\n<p><strong>1、下载镜像</strong></p>\n<blockquote>\n<p>docker pull kibana:7.4.2</p>\n</blockquote>\n<p><strong>2、容器运行</strong><br/> 192.168.56.1 :是自己虚拟机地址</p>\n<blockquote>\n<p>docker run --name kibana -e ELASTICSEARCH_HOSTS=http://192.168.56.1:9200 -p 5601:5601 -d kibana:7.4.2</p>\n</blockquote>\n<p><strong>3、设置开启自启动</strong></p>\n<blockquote>\n<p>docker update Id号 --restart=always</p>\n</blockquote>\n<p><strong>4、访问 192.168.56.1:5601</strong></p>\n<p>需要等一会才能访问成功<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e304e0ca3b2e43ecba6f261e20a056a4.png\"/><br/> <strong>5、几个cat命令</strong></p>\n<blockquote>\n<p>GET /_cat/nodes: 查看所有节点<br/> GET /_cat/health: 查看es健康状况<br/> GET /_cat/master: 查看主节点<br/> GET /_cat/indices: 查看所有索引</p>\n</blockquote>\n<p><strong>6、分词器 Ik 支持中文分词</strong></p>\n<blockquote>\n<p>https://gitee.com/jowell-jiawei/elasticsearch-analysis-ik-7.4.2</p>\n</blockquote>\n<p>下载zip直接解压 放到挂载的plugins文件夹下面</p>\n<p>最后重启Electicsearch</p>\n<p>测试如下:<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d7dd1616177445aabaeeeebd7b6f3f72.png\"/></p>\n<h1><a id=\"dockerRabbitMQ_488\"></a>九、docker安装RabbitMQ</h1>\n<p><strong>1、下载并且启动</strong></p>\n<p>5672 ：这是rabbitMQ的端口号<br/> 15672 ：这是那个RabbitMQ的web页面的端口号<br/> 4369以及25672：这是集群需要做的端口号</p>\n<blockquote>\n<p>docker run -d --name rabbitmq -p 5672:5672 -p 4369:4369 -p 25672:25672 -p 15672:15672 rabbitmq:management</p>\n</blockquote>\n<p><strong>2、开机自启动</strong></p>\n<blockquote>\n<p>docker update rabbitmq --restart=always</p>\n</blockquote>\n<p><strong>3、访问rabbitmq</strong></p>\n<blockquote>\n<p>192.168.43.128:15672<br/> 默认账号：guest<br/> 默认密码: guest</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\72f593ea9ed6437cb04862703c7fda03.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d3547f2549f3498fa03aa0a4e360654d.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-07-15 10:19:56", "summary": "文章目录一、是什么？二、安装安装清除系统残余项如果你的服务器之前没有装过，可以直接跳过安装下载依赖的工具、设置镜像仓库地址、更新缓存为了保证能更新和下载需要的服务：如、安装版本分为社区免费版和企业版，"}