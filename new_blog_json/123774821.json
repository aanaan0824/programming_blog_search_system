{"blogid": "123774821", "writerAge": "码龄2年", "writerBlogNum": "9", "writerCollect": "106", "writerComment": "24", "writerFan": "887", "writerGrade": "2级", "writerIntegral": "152", "writerName": "fengprogrammer", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123774821.jpg", "writerRankTotal": "67460", "writerRankWeekly": "9929", "writerThumb": "27", "writerVisitNum": "16035", "blog_read_count": "6874", "blog_time": "已于 2022-06-15 20:27:34 修改", "blog_title": "【零基础】手把手教你使用Docker部署Springboot项目（详细版）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#1_1\">🍺1.前言</a></li><li><a href=\"#2_5\">🍻2.开源项目</a></li><li><a href=\"#3jar_9\">🍸3.如何打jar包？</a></li><li><a href=\"#4Docker_27\">🍹4.什么是Docker？</a></li><li><a href=\"#5Docker_29\">🍷5.Docker安装</a></li><li><a href=\"#6MySql_48\">🍦6.安装MySql数据库</a></li><li><ul><li><a href=\"#61_mysql_51\">6.1 搜索mysql镜像</a></li><li><a href=\"#62_mysql_57\">6.2 拉取mysql镜像</a></li><li><a href=\"#63__63\">6.3 创建容器，设置端口映射、目录映射</a></li><li><a href=\"#64_mysql_89\">6.4 进入容器，操作mysql</a></li><li><a href=\"#65_mysql_95\">6.5 使用本地管理数据库的软件机器连接服务器容器中的mysql</a></li></ul>\n</li><li><a href=\"#7_100\">🍨7.导入数据库及数据</a></li><li><a href=\"#8springboot_103\">🍧8.部署springboot项目</a></li><li><ul><li><a href=\"#81__108\">8.1 去云上安全组开放对应的端口</a></li><li><a href=\"#82__117\">8.2 服务器设置防火墙</a></li><li><a href=\"#83__123\">8.3 重启服务器防火墙</a></li><li><a href=\"#84_Dockerfile_128\">8.4 编写Dockerfile文件</a></li><li><a href=\"#85_Dockerfile_139\">8.5 Dockerfile构建镜像</a></li><li><a href=\"#86__145\">8.6 创建容器</a></li><li><a href=\"#87__151\">8.7 查看正在运行的容器</a></li></ul>\n</li><li><a href=\"#9__159\">🍫9. 测试</a></li><li><a href=\"#10__170\">🍬10. 总结</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"1_1\"></a>🍺1.前言</h1>\n<p>​  本篇文章适合刚学完Docker，想要部署Springboot项目的小白；当然，如果你还没有学习Docker，只要严格按照本篇文章的步骤执行，理论上也是可以完成部署的。<br/>   我接下来部署的项目都是以一台全新Liunx服务器视角来操作，该服务器上jdk，mysql和Docker都还没有安装。</p>\n<h1><a id=\"2_5\"></a>🍻2.开源项目</h1>\n<p>​   大家来看这篇文章，我估计大多数都是部署小白。因此我去github找到了一个完整的后端项目供大家实验操作。github项目地址：<a href=\"https://github.com/pbw123/nongjiyun-api\">https://github.com/pbw123/nongjiyun-api</a><br/>   为了防止大家进不去github的情况，我把该开源项目存到了百度网盘上，下面是百度网盘的地址。百度网盘地址： <a href=\"https://pan.baidu.com/s/14ikI5oB-aZ1PZbj411VtJg?pwd=zguj\">https://pan.baidu.com/s/14ikI5oB-aZ1PZbj411VtJg?pwd=zguj</a> ， 提取码: <strong>zguj</strong> 。</p>\n<h1><a id=\"3jar_9\"></a>🍸3.如何打jar包？</h1>\n<p>  下载好上面的开源项目后，我们第一步当然是把文件解压出来，放到开发工具上运行，我使用idea开发工具进行展示。<br/>   要把项目跑起来之前，首先要修改一些配置，找到application.properties文件，按照下图注释掉一些信息，当然数据库的username和password可以先填写你本地的；<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\af118e40094748e79451f10bd543d817.png\"/></p>\n<p>  接着，再找到Group5Application启动类，按照如下操作；<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fec82cd3790d42fcae4e85ccff857473.png\"/><br/>   下一步，为了本地可以正常测试，你需要把它的数据库文件，导入到本地的数据库中，该项目的sql文件放在/resources/SQL目录下，关于数据如何导入就不一一演示了，不过这里有个需要注意的点，如果你的mysql数据库的版本是5版本的，可能导入会出现异常，你需要把sql文件的<strong>utf8mb4_0900_ai_ci</strong>全部替换成<strong>utf8_general_ci</strong>，<strong>utf8mb4</strong>全部替换成<strong>utf8</strong>，这样子便可以正常导入本地数据库了。<br/>   往下，便可测试项目能否正常运行，把项目跑起来，在浏览器框上输入以下地址：</p>\n<pre><code class=\"prism language-html\">http://localhost:7777/swagger-ui.html\n</code></pre>\n<p>  成功的话，便会出现如下效果图：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3638d270065e4c0e8ab0cafeb8be0b49.png\"/><br/>   最后一步，把项目打成jar包，不过打成jar包之前还需要提前把数据库账号，密码，ip地址和端口号改成与服务器匹配的，当然，现在服务器上并还没有安装数据库，你可以预设你等等服务器数据库上的账号，密码，ip地址和端口号，等等服务器上设置mysql数据库时，就按照你打jar包时的配置。同时，你还要记住该项目的端口号是7777，这个值后面部署时需要用到。打包时出现下面截图，便打包完成。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\65dc9b4de8434010bc0ab40b729f848c.png\"/></p>\n<h1><a id=\"4Docker_27\"></a>🍹4.什么是Docker？</h1>\n<p>  点击进入这篇文章的小伙伴，大家估计对docker或多或少都了解了一些，这里我不妨在介绍以下，docker是一门容器技术，其作用是解决软件跨环境迁移的问题，这很重要，就是这一特点，极大简便了我们部署工作。</p>\n<h1><a id=\"5Docker_29\"></a>🍷5.Docker安装</h1>\n<p>  Linux服务器安装Docker，非常简单，只需要执行下面五条语句：<br/>   温馨提示：安装Docker需要10来分钟，请小伙伴耐心等待！</p>\n<pre><code class=\"prism language-shell\"><span class=\"token comment\"># 1、yum 包更新到最新 </span>\nyum update\n<span class=\"token comment\"># 2、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的 </span>\nyum <span class=\"token function\">install</span> -y yum-utils device-mapper-persistent-data lvm2\n<span class=\"token comment\"># 3、 设置yum源</span>\nyum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n<span class=\"token comment\"># 4、 安装docker，出现输入的界面都按 y </span>\nyum <span class=\"token function\">install</span> -y docker-ce\n<span class=\"token comment\"># 5、 查看docker版本，验证是否验证成功</span>\n<span class=\"token function\">docker</span> -v \n</code></pre>\n<p>  若出现下图，便是安装成功了。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e6145b5ee8194295bb725014afde4910.png\"/></p>\n<h1><a id=\"6MySql_48\"></a>🍦6.安装MySql数据库</h1>\n<p>  安装mysql数据库，也是照着如何步骤做即可。</p>\n<h2><a id=\"61_mysql_51\"></a>6.1 搜索mysql镜像</h2>\n<pre><code class=\"prism language-shell\"><span class=\"token function\">docker</span> search mysql\n</code></pre>\n<h2><a id=\"62_mysql_57\"></a>6.2 拉取mysql镜像</h2>\n<pre><code class=\"prism language-shell\"><span class=\"token function\">docker</span> pull mysql:5.6\n</code></pre>\n<h2><a id=\"63__63\"></a>6.3 创建容器，设置端口映射、目录映射</h2>\n<pre><code class=\"prism language-shell\"><span class=\"token comment\"># 在/root目录下创建mysql目录用于存储mysql数据信息</span>\n<span class=\"token function\">mkdir</span> ~/mysql\n<span class=\"token builtin class-name\">cd</span> ~/mysql\n</code></pre>\n<pre><code class=\"prism language-shell\"><span class=\"token function\">docker</span> run -id <span class=\"token punctuation\">\\</span>\n-p <span class=\"token number\">3307</span>:3306 <span class=\"token punctuation\">\\</span>\n--name<span class=\"token operator\">=</span>c_mysql <span class=\"token punctuation\">\\</span>\n-v <span class=\"token environment constant\">$PWD</span>/conf:/etc/mysql/conf.d <span class=\"token punctuation\">\\</span>\n-v <span class=\"token environment constant\">$PWD</span>/logs:/logs <span class=\"token punctuation\">\\</span>\n-v <span class=\"token environment constant\">$PWD</span>/data:/var/lib/mysql <span class=\"token punctuation\">\\</span>\n-e <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token number\">123456</span> <span class=\"token punctuation\">\\</span>\nmysql:5.6\n</code></pre>\n<ul><li>参数说明： \n  <ul><li><strong>-p 3307:3306</strong>：将容器的 3306 端口映射到宿主机的 3307 端口。</li><li><strong>-v $PWD/conf:/etc/mysql/conf.d</strong>：将主机当前目录下的 conf/my.cnf 挂载到容器的 /etc/mysql/my.cnf。配置目录</li><li><strong>-v $PWD/logs:/logs</strong>：将主机当前目录下的 logs 目录挂载到容器的 /logs。日志目录</li><li><strong>-v $PWD/data:/var/lib/mysql</strong> ：将主机当前目录下的data目录挂载到容器的 /var/lib/mysql 。数据目录</li><li>**-e MYSQL_ROOT_PASSWORD=123456：**初始化 root 用户的密码，这里设置的密码要与jar中的数据库密码password一致。</li></ul> </li></ul>\n<h2><a id=\"64_mysql_89\"></a>6.4 进入容器，操作mysql</h2>\n<pre><code class=\"prism language-shell\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> –it c_mysql /bin/bash\n</code></pre>\n<h2><a id=\"65_mysql_95\"></a>6.5 使用本地管理数据库的软件机器连接服务器容器中的mysql</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f1ed93daf72842e0bfa0cf4555b00f6f.png\"/></p>\n<h1><a id=\"7_100\"></a>🍨7.导入数据库及数据</h1>\n<p>  如果到了这一步，默认你本机上连上了服务器上的mysql数据库，这时需要把项目用到的sql文件导入数据库，这儿导入sql文件依然需要注意，前面本地导入数据库及数据提到的注意点，这里就不演示sql文件的导入了。</p>\n<h1><a id=\"8springboot_103\"></a>🍧8.部署springboot项目</h1>\n<p>  如果不清楚maven打包后的jar包放在哪儿，可以去/target目录下找，效果图如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2a5cc90d680c4a1881303d6d1ee42119.png\"/><br/>   把jar包使用xftp传输软件，传到服务器的某个目录。</p>\n<h2><a id=\"81__108\"></a>8.1 去云上安全组开放对应的端口</h2>\n<p>  完成上传后，这时你需要去你买的服务器的云上安全组开放项目对应的端口，下面我用华为云来操作演示给大家看。<br/>   找到本机的安全组，点击配置规则；<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\71a6a6a4d02344ff9cdd553273e54480.png\"/><br/>   点击入方向规则，再点击添加规则；<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0a351303d73343179666237dbcdbe6cd.png\"/><br/>   优先级一般设置为1，协议端口就是要开放我们项目所使用的端口号7777，之后点击确定便完成设置。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\01f7c6a7d4ff447db049a3cae654352c.png\"/></p>\n<h2><a id=\"82__117\"></a>8.2 服务器设置防火墙</h2>\n<pre><code class=\"prism language-shell\"><span class=\"token comment\"># firewall-cmd --zone=public --add-port=端口号/tcp --permanent</span>\nfirewall-cmd --zone<span class=\"token operator\">=</span>public --add-port<span class=\"token operator\">=</span><span class=\"token number\">7777</span>/tcp --permanent\n</code></pre>\n<h2><a id=\"83__123\"></a>8.3 重启服务器防火墙</h2>\n<pre><code class=\"prism language-shell\">firewall-cmd --reload\n</code></pre>\n<h2><a id=\"84_Dockerfile_128\"></a>8.4 编写Dockerfile文件</h2>\n<p>  找到刚刚上传jar包的目录，使用vim命令编写一个Dockerfile文件，按照下面模板便可简单编写出Dockerfile文件：</p>\n<pre><code class=\"prism language-Dockerfile\">FROM java:8  #定义父镜像\nMAINTAINER itfeng&lt;xxxxxx666@163.com&gt; #定义作者信息\n#ADD 文件名 app.jar （我到时打算把jar包和Dockerfile文件放在同一级目录文件）\nADD ./group5-0.0.1-SNAPSHOT.jar app.jar #将jar包添加到容器\nCMD java -jar app.jar  #定义容器启动执行的命令 app.jar的名字可自取\n</code></pre>\n<h2><a id=\"85_Dockerfile_139\"></a>8.5 Dockerfile构建镜像</h2>\n<p>  目录依然需要在jar包那个目录下执行如下语法。</p>\n<pre><code class=\"prism language-shell\"><span class=\"token comment\">#docker build –f （dockerfile文件路径） –t 镜像名称:版本  .</span>\n<span class=\"token function\">docker</span> build -f ./Dockerfile -t app <span class=\"token builtin class-name\">.</span>\n</code></pre>\n<h2><a id=\"86__145\"></a>8.6 创建容器</h2>\n<pre><code class=\"prism language-shell\"><span class=\"token comment\">#docker run -id -p 主机端口号：容器端口号 容器名字（app）</span>\n<span class=\"token function\">docker</span> run -id -p <span class=\"token number\">7777</span>:7777 app\n</code></pre>\n<h2><a id=\"87__151\"></a>8.7 查看正在运行的容器</h2>\n<pre><code class=\"prism language-shell\"><span class=\"token function\">docker</span> <span class=\"token function\">ps</span>\n</code></pre>\n<p>  若出现如下效果，则完成服务器上的部署工作。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a0cee1b9a37242f284d9bfe0c74fdf45.png\"/></p>\n<h1><a id=\"9__159\"></a>🍫9. 测试</h1>\n<p>  使用如下地址进行测试：</p>\n<pre><code class=\"prism language-http\">ip地址:7777//swagger-ui.html\n</code></pre>\n<p>  若出现如下效果图，则测试完成，整个部署工作大功告成。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f25c065a369a46c18aaf5b0de289218e.png\"/><br/>   为了测试数据库连接成功，我查询了一些数据，效果图如下。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\496e49b993a543d59e95c531ae540533.png\"/></p>\n<h1><a id=\"10__170\"></a>🍬10. 总结</h1>\n<p>  以上详细讲述了Docker部署springboot项目的全过程，相信大家看到这儿应该都学到了，本人也是Docker部署小白，写这篇主要是记录自己的学习过程，同时分享给<strong>志同道合</strong>的你，希望对你有所帮助。<br/>   若文中有错误，欢迎大家在评论区积极指出。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-06-15 20:27:34", "summary": "文章目录前言开源项目如何打包？什么是？安装安装数据库搜索镜像拉取镜像创建容器，设置端口映射、目录映射进入容器，操作使用本地管理数据库的软件机器连接服务器容器中的导入数据库及数据部署项目去云上安全组开放"}