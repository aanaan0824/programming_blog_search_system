{"blogid": "125465277", "writerAge": "码龄2年", "writerBlogNum": "108", "writerCollect": "44", "writerComment": "1", "writerFan": "60", "writerGrade": "4级", "writerIntegral": "1095", "writerName": "look-word", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125465277.jpg", "writerRankTotal": "18448", "writerRankWeekly": "7549", "writerThumb": "12", "writerVisitNum": "30919", "blog_read_count": "2162", "blog_time": "于 2022-06-25 23:10:04 发布", "blog_title": "vue 的常用事件", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"vue__2\"></a>vue 的常用事件</h1>\n<h2><a id=\"_4\"></a>事件处理</h2>\n<p>1.使用 v-on:xxx 或 @xxx 绑定事件，其中 xxx 是事件名； 2.事件的回调需要配置在 methods 对象中，最终会在 vm 上；<br/> 3.methods 中配置的函数，不要用箭头函数！否则 this 就不是 vm 了；<br/> 4.methods 中配置的函数，都是被 Vue 所管理的函数，this 的指向是 vm 或 组件实例对象；<br/> 5.@click=“demo” 和 @click=“demo($event)” 效果一致，但后者可以传参；</p>\n<p><img alt=\"image-20220624224348996\" src=\"..\\..\\static\\image\\2c473b6810ea658fafa9e8e7288d1298.png\"/></p>\n<h2><a id=\"_13\"></a>事件修饰符：</h2>\n<blockquote>\n<p>1.prevent：阻止默认事件（常用）；<br/> ​ 2.stop：阻止事件冒泡（常用）；<br/> ​ 3.once：事件只触发一次（常用）；<br/> ​ 4.capture：使用事件的捕获模式；<br/> ​ 5.self：只有 event.target 是当前操作的元素时才触发事件；<br/> ​ 6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕；</p>\n</blockquote>\n<h3><a id=\"1prevent_22\"></a>1.prevent：阻止浏览器默认事件（常用）</h3>\n<blockquote>\n<p>什么是浏览器的默认事件呢？</p>\n<ul><li>a 标签的跳转</li><li>form 表单的提交</li><li>网页中右键单机，会弹出一个菜单（你可以试一试）</li></ul>\n</blockquote>\n<p><strong>代码</strong></p>\n<blockquote>\n<p>正常来说 当我点击这个 a 标签之后 会跳转到百度 可是 他并不是我们想象的样子</p>\n</blockquote>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\4d16fbed45db9beb495e11a0a314c7e5.png\"/></p>\n<blockquote>\n<p>可以看到 是alert弹出框的提示 说明prevent修饰符 发生了作用 阻止了浏览器默认事件的调用</p>\n</blockquote>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\8c5c06ea58e74bf8389475a4bbb440fa.png\"/></p>\n<h3><a id=\"2stop_40\"></a>2.stop：阻止事件冒泡（常用）</h3>\n<p>直接上代码</p>\n<blockquote>\n<ul><li>可以看到 给div和 button和设置了点击事件 那么 stop：阻止事件冒泡到底是啥呢 ？下面解释</li><li>我们待会会点击里面的button 基础好的小伙伴肯定会知道 会触发两次弹出那么这是为啥呢</li><li>是因为 产生了冒泡事件</li></ul>\n</blockquote>\n<p><img alt=\"image-20220625212756610\" src=\"..\\..\\static\\image\\bdeb94762b7764d0b38a76876cb4c308.png\"/></p>\n<blockquote>\n<ul><li>可以看到 发生了 两次弹窗<br/> <img alt=\"img\" src=\"..\\..\\static\\image\\bc424dd0788c0706f9fcc3987ae11e1b.png\"/></li></ul>\n</blockquote>\n<blockquote>\n<ul><li>当我们点击了确认之后 第二次提示框出来了<br/> <img alt=\"img\" src=\"..\\..\\static\\image\\674f9a6f8150d86a7a1401ab09f1731a.png\"/></li></ul>\n</blockquote>\n<p>这个在有些场景中可能不适用 那么我们该如何只让它 发送一次弹窗呢？<br/> 毋庸置疑 那就是我们的<code>stop：阻止事件冒泡</code> 下面让我们看看 加上之后的执行效果吧！</p>\n<p><img alt=\"image-20220625213512386\" src=\"..\\..\\static\\image\\e19bd9a783f79ba1a0274c45ad3e60e3.png\"/></p>\n<p>执行效果</p>\n<p><img alt=\"image-20220625213535282\" src=\"..\\..\\static\\image\\20dd3ead690cec827cf79916f74b0daf.png\"/></p>\n<h3><a id=\"3once_65\"></a>3.once：事件只触发一次（常用）</h3>\n<blockquote>\n<p>字面意思 只触发一次</p>\n</blockquote>\n<p>代码<br/> <img alt=\"img\" src=\"..\\..\\static\\image\\a7e349d383ca34313f40ce1fb82a0971.png\"/></p>\n<blockquote>\n<p>这是我们已点击多次的结果<br/> <img alt=\"img\" src=\"..\\..\\static\\image\\c3f8665b490e05391cf95872eb8e9789.png\"/></p>\n</blockquote>\n<h3><a id=\"4capture_75\"></a>4.capture：使用事件的捕获模式</h3>\n<blockquote>\n<p>所有的操作 点击的都是 最里面的儿子</p>\n</blockquote>\n<p>先看代码<br/> <img alt=\"img\" src=\"..\\..\\static\\image\\56f8510eccbe22fd9265d83ed3f77dcb.png\"/></p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\38f989f388556e59d54c39f9be080aa4.png\"/></p>\n<p>现在给@click添加.capture修饰符</p>\n<blockquote>\n<p>给儿子 加</p>\n</blockquote>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\7b3d5578fd131868b635914bef097a01.png\"/></p>\n<p>结果</p>\n<p><img alt=\"img\" src=\"..\\..\\static\\image\\39a82221042a0fbecab339e206efb49d.png\"/></p>\n<blockquote>\n<p>给爸爸加</p>\n</blockquote>\n<p><img alt=\"image-20220625215706811\" src=\"..\\..\\static\\image\\2a80f64d1e7782ddc878ba694be08358.png\"/></p>\n<p>结果：</p>\n<p><img alt=\"image-20220625215740056\" src=\"..\\..\\static\\image\\11f53c344d1940d8faebddd71ee3b27f.png\"/></p>\n<p>总结：<br/> 1. 冒泡是从里往外冒，捕获是从外往里捕。<br/> 2. 当捕获存在时，先从外到里的捕获，剩下的从里到外的冒泡输出。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-06-25 23:10:04", "summary": "的常用事件事件处理使用或绑定事件，其中是事件名；事件的回调需要配置在对象中，最终会在上；中配置的函数，不要用箭头函数！否则就不是了；中配置的函数，都是被所管理的函数，的指向是或组件实例对象；和效果一致"}