{"blogid": "123490979", "writerAge": "码龄6年", "writerBlogNum": "166", "writerCollect": "266", "writerComment": "21", "writerFan": "58", "writerGrade": "5级", "writerIntegral": "2177", "writerName": "如来神掌十八式", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123490979.jpg", "writerRankTotal": "12170", "writerRankWeekly": "14964", "writerThumb": "47", "writerVisitNum": "146716", "blog_read_count": "16237", "blog_time": "于 2022-03-14 22:57:39 发布", "blog_title": "mysql的union和union all", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<div class=\"article_content clearfix\" id=\"article_content\">\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\"></path>\n</svg>\n<h1><a id=\"1_sql_union__union_all__0\"></a>1. sql中 <a class=\"hl hl-1\" href=\"https://so.csdn.net/so/search?q=union&amp;spm=1001.2101.3001.7020\" rel=\"noopener noreferrer\" target=\"_blank\">union</a> 和 union all 的用法</h1>\n<p>如果我们需要将两个 select 语句的结果作为一个整体显示出来，我们就需要用到 <strong>union</strong> 或者 <strong>union all</strong> 关键字。<strong>union</strong> (或称为联合)的作用是将多个结果合并在一起显示出来。</p>\n<p><strong>union</strong> 和 <strong>union all</strong> 的区别是，<strong>union</strong> 会自动压缩多个结果<a class=\"hl hl-1\" href=\"https://so.csdn.net/so/search?q=%E9%9B%86%E5%90%88&amp;spm=1001.2101.3001.7020\" rel=\"noopener noreferrer\" target=\"_blank\">集合</a>中的重复结果，而 <strong>union all</strong> 则将所有的结果全部显示出来，不管是不是重复。</p>\n<p><strong>union</strong>：对两个结果集进行<a class=\"hl hl-1\" href=\"https://so.csdn.net/so/search?q=%E5%B9%B6%E9%9B%86&amp;spm=1001.2101.3001.7020\" rel=\"noopener noreferrer\" target=\"_blank\">并集</a>操作，不包括重复行，同时进行默认规则的排序；<strong>union</strong> 在进行表链接后会筛选掉重复的记录，所以在表链接后会对所产生的结果集进行排序运算，删除重复的记录再返回结果。实际大部分应用中是不会产生重复的记录，最常见的是过程表与历史表 <strong>union</strong>。<br/> 如下sql：</p>\n</div>\n</div>\n<pre><code class=\"prism language-c\">SELECT create_time FROM `e_msku_sku` WHERE msku <span class=\"token operator\">=</span> <span class=\"token string\">'21-BQLEDNL120W-BK'</span>\nUNION\nSELECT create_time FROM `e_msku_sku` WHERE msku <span class=\"token operator\">=</span> <span class=\"token string\">'21-BQLEDNL120W-BK'</span>\n\n</code></pre>\n<p>结果：<br/> <img alt=\"001.png\" src=\"..\\..\\static\\image\\f2e1f5a979621ec5d1c63a2368b9b45a.png\"/></p>\n<p><strong>union all</strong>：对两个结果集进行并集操作，包括重复行，不进行排序； 如果返回的两个结果集中有重复的数据，那么返回的结果集就会包含重复的数据了。<br/> 如下sql：</p>\n<pre><code class=\"prism language-c\">SELECT create_time FROM `e_msku_sku` WHERE msku <span class=\"token operator\">=</span> <span class=\"token string\">'21-BQLEDNL120W-BK'</span>\nUNION ALL\nSELECT create_time FROM `e_msku_sku` WHERE msku <span class=\"token operator\">=</span> <span class=\"token string\">'21-BQLEDNL120W-BK'</span>\n\n</code></pre>\n<p>结果：<br/> <img alt=\"002.png\" src=\"..\\..\\static\\image\\960f67726a0d5324ddcdc1ea36ecf22b.png\"/></p>\n<h1><a id=\"2__26\"></a>2. 注意事项</h1>\n<h4><a id=\"21UNION__UNION_ALL__SELECT__27\"></a>2.1、UNION 和 UNION ALL 内部的 SELECT 语句必须拥有相同数量的列</h4>\n<p><img alt=\"image.png\" src=\"..\\..\\static\\image\\a7c3139a25e5336a9a24a15e2f4d3a8c.png\"/></p>\n<h4><a id=\"22_SELECT__29\"></a>2.2、每条 SELECT 语句中列的顺序必须相同</h4>\n<ul><li> <p>先来说下，如果顺序不同，会是什么结果？<br/> 答：结果字段的顺序以<strong>union all</strong> 前面的表字段顺序为准。<br/> <strong>union all</strong> 后面的表的数据会按照顺序依次附在后面。<strong>注意：按照字段顺序匹配，而不是按照字段名称匹配。</strong></p> </li><li> <p>sql如下：顺序对结果的影响</p> </li></ul>\n<pre><code class=\"prism language-c\">SELECT <span class=\"token operator\">*</span> \n<span class=\"token function\">FROM</span><span class=\"token punctuation\">(</span>\n\tSELECT msku<span class=\"token punctuation\">,</span>create_time FROM `e_msku_sku` WHERE msku <span class=\"token operator\">=</span> <span class=\"token string\">'21-BQLEDNL120W-BK'</span>\nUNION ALL\n\tSELECT create_time<span class=\"token punctuation\">,</span>msku FROM `e_msku_sku` WHERE msku <span class=\"token operator\">=</span> <span class=\"token string\">'21-BQLEDNL120W-BK'</span><span class=\"token punctuation\">)</span> t\n\n</code></pre>\n<p><img alt=\"image.png\" src=\"..\\..\\static\\image\\a6c4b5b8381193eb7c0d6cbb3c8eaf13.png\"/></p>\n<h4><a id=\"_45\"></a>综上：</h4>\n<p><strong>union all</strong> 结果字段的顺序以 <strong>union all</strong> 前面的表字段顺序为准。<strong>union all</strong> 后面的表的数据会按照字段顺序依次附在后面，而不是按照字段名称匹配。</p>\n<p>我们上面以*来表示顺序的不同，其实你写成不同顺序的字段结果一致。<br/> <img alt=\"image.png\" src=\"..\\..\\static\\image\\9cfda41c3c5082f810d986afe7e3e26c.png\"/></p>\n<h1><a id=\"3_union_all__51\"></a>3. union all 使用场景</h1>\n<ul><li> <h5><a id=\"sql_in_union_all__52\"></a>sql 中的组合in，可用 union all 来代替，提高查询效率</h5> </li></ul>\n<p><strong>修改前：组合in sql</strong></p>\n<pre><code class=\"prism language-c\">SELECT <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span>\nFROM e_rating_info \nWHERE rating_quantity <span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> AND <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> \nIN <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'***'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'***'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'***'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'***'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n<span class=\"token punctuation\">(</span><span class=\"token string\">'***'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'***'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'***'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'***'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n<span class=\"token punctuation\">(</span><span class=\"token string\">'***'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'***'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'***'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'***'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n<span class=\"token punctuation\">(</span><span class=\"token string\">'***'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'***'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'***'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'***'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n<span class=\"token punctuation\">(</span><span class=\"token string\">'***'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'***'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'***'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'***'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \nORDER BY <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> DESC\n\n</code></pre>\n<p><strong>修改后：UNION ALL sql</strong></p>\n<pre><code class=\"prism language-c\"><span class=\"token operator\">&lt;</span>select id<span class=\"token operator\">=</span><span class=\"token string\">\"queryRatingInfo\"</span> resultType<span class=\"token operator\">=</span><span class=\"token string\">\"***\"</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>foreach collection<span class=\"token operator\">=</span><span class=\"token string\">\"ratingList\"</span> item<span class=\"token operator\">=</span><span class=\"token string\">\"item\"</span> index<span class=\"token operator\">=</span><span class=\"token string\">\"index\"</span> open<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span> separator<span class=\"token operator\">=</span><span class=\"token string\">\"UNION ALL\"</span> close<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token operator\">&gt;</span>\n            SELECT <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span>\n            FROM e_rating_info\n            WHERE rating_quantity <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> <span class=\"token number\">0</span>\n            AND country_code <span class=\"token operator\">=</span> #<span class=\"token punctuation\">{<!-- --></span>item<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">}</span>\n            AND asin <span class=\"token operator\">=</span> #<span class=\"token punctuation\">{<!-- --></span>item<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>foreach<span class=\"token operator\">&gt;</span>\n        ORDER BY <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> DESC<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>select<span class=\"token operator\">&gt;</span>\n\n</code></pre>\n<p>另外，如果系统中进行了分表，一定要保证各个表的字段顺序一致。特别是修改的时候。否则，如果使用 *汇总查询结果，肯定是会有问题的…亲身踩坑。</p>\n<div>\n<div></div>\n</div>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2022-03-14 22:57:39", "summary": "中和的用法如果我们需要将两个语句的结果作为一个整体显示出来，我们就需要用到或者关键字。或称为联合的作用是将多个结果合并在一起显示出来。和的区别是，会自动压缩多个结果集合中的重复结果，而则将所有的结果全"}