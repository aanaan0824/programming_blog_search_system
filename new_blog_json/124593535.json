{"blogid": "124593535", "writerAge": "码龄3年", "writerBlogNum": "22", "writerCollect": "64", "writerComment": "7", "writerFan": "210", "writerGrade": "2级", "writerIntegral": "304", "writerName": "Xwzzz_", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124593535.jpg", "writerRankTotal": "57109", "writerRankWeekly": "359458", "writerThumb": "65", "writerVisitNum": "27984", "blog_read_count": "769", "blog_time": "已于 2022-05-05 19:35:09 修改", "blog_title": "c#继承的构造函数问题", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>一、什么是继承，有什么作用？</h1>\n<p>概念：<br/> ​ 继承就是在类之间建立一种相交关系，使得新定义的派生类（子类）的实例可以继承已有的基类（父类）的特征和能力，而且可以加入新的特性或者是修改已有的特性建立起类的新层次。</p>\n<p>作用：<br/> ​ 继承是面向对象的主要特征之一，它可以让你的代码重复使用，可以节省程序设计的时间，继承就是就是在类之间建立一种相交关系，使得新定义的派生类可以继承已有的基类的特征和能力，而且可以加入新的特性或者是修改已有的特性建立起类的新层次。</p>\n<p>说明：<br/> ​ 比如：你继承了你爸爸的一些特征，你爸爸是基类，你是派生类，你不仅有你爸爸的一些特征，同时你还有属于自己的一些习惯特征。也就是说你跟你爸爸共同拥有的一种特征，跟相同之处不同之处类似。</p>\n<h1>二、 继承中构造函数调用</h1>\n<p>        如果一个类继承自其他类，那么子类和父类的构造函数是先调用父类中的构造函数，然后再调用子类中的构造函数。这样子类中就包含了父类的属性和方法，如下图</p>\n<p>                                                            <img alt=\"\" height=\"300\" src=\"..\\..\\static\\image\\04193c884be342b2b307dd3f2162f02e.png\" width=\"163\"/></p>\n<p>        需要注意的是，如果一个类中没有定义构造函数，那么系统会自动为我们创建一个无参的构造函数，同理，如果该类是子类，且父类中也没有定义构造函数，那么在创建子类对象的时候，系统会默认的帮我们调用父类的无参构造函数。</p>\n<p>        在我们创建子类时会先执行父类的<a href=\"https://so.csdn.net/so/search?q=%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0&amp;spm=1001.2101.3001.7020\" title=\"构造函数\">构造函数</a>，再执行自己的构造函数子类实例化时，默认调用父类的无参构造函数，注意如果<a href=\"https://so.csdn.net/so/search?q=%E9%87%8D%E5%86%99&amp;spm=1001.2101.3001.7020\" title=\"重写\">重写</a>父类的构造函数，无参构造函数会被覆盖需要自己手动添加若不想使用父类的无参构造函数，可使用base关键字。</p>\n<h3>1）无参构造函数的继承调用问题</h3>\n<pre><code>class Animal\n    {\n      \n        public Animal()\n        {\n            Console.WriteLine(\"我是动物基类(父类)\");\n        }\n    }\n//基类的构造函数\nclass Dog : Animal\n    {\n        public Dog()\n        {\n             Console.WriteLine(\"我是小狗(子类)\");\n        }\n    }\n</code></pre>\n<p></p>\n<h3> 上边的代码等价于下边的代码</h3>\n<pre><code>class Animal\n    {\n      \n        public Animal()\n        {\n            Console.WriteLine(\"我是动物基类(父类)\");\n        }\n    }\n//基类的构造函数\nclass Dog : Animal\n    {\n        public Dog():base()//默认存在的base来调用父类的构造方法\n        {\n             Console.WriteLine(\"我是小狗(子类)\");\n        }\n    }\n</code></pre>\n<p>说明：<br/> ​ 1、基类的无参构造函数会被派生类无条件的直接继承和调用</p>\n<p>​ 2、在继承的时候是先调用父类的构造函数再调用子类的构造函数，意思就是说孩子有什么解决不了的问题找爸爸，爸爸解决不了的问题再找爸爸的爸爸，也就是孩子爷爷。就是这么个过程：先调用辈分大的构造函数，再调用辈分小的，一级一级往下调用，最终调用到本类中的构造函数。</p>\n<p>​ 3、其实在派生类无参构造函数中base是默认存在的，但是，因为是无参的，它的括号当中没有实际的参数，所以给省略，也就是上边的例子。</p>\n<p></p>\n<h3>2）有参构造函数的继承调用问题</h3>\n<pre><code>//基类\nclass Animal\n    {\n        public Animal(string name,string color,string eat)\n        {\n            Console.WriteLine(\"我是动物基类(父类)\");\n            this.Name = name;\n            this.Color = color;\n            this.Eat = eat;\n        }\n    }\n//派生类\n class Dog : Animal\n    {\n        public Dog(string name, string color, string eat) : base(name, color, eat)\n        {\n            Console.WriteLine(\"我是犬科,派生类（子类）\");\n        }\n    }\n//外部调用\n class Program\n    {\n        static void Main(string[] args)\n        {\n            Dog dog = new Dog(\"哈士奇\",\"白黑相间\",\"骨头\");//实例化Dog对象，并通过构造函数传值\n            Console.WriteLine(hsq.Name + \"颜色是\" + hsq.Color + \"喜欢吃\" +hsq.Eat);\n            Console.ReadLine();\n        }\n    }\n</code></pre>\n<p> 1、当父类的构造函数为有参的时候，那么它此时构造方法括号中的参数是形参，但是它必须要给定一个实参来接受，但是这个实参从何而来？</p>\n<p>​ 2、当父类构造函数为有参的时候，那么子类的构造函数也必须是有参数的，并且数据类型和个数要和父类的构造函数类型和个数相同，名称可以不同。</p>\n<p>​ 3、因为子类的形参它需要接收实参，那么我们就可以在实例化子类的时候给它实参，也就是下边的代码<br/>  </p>\n<pre><code> Dog dog = new Dog(\"哈士奇\",\"白黑相间\",\"骨头\");//实例化Dog对象，并通过构造函数给子类的构造函数传值\n</code></pre>\n<p> 4、值传给子类的构造函数，但是此时父类没有呀，我想要继承父类，父类也应该有参数吧。​ 所以，这个时候就要通过:base来获取子类的传过来参数——实际的值(实参)，并通过base把这个值传给父类的构造函数，此时父类构造函数的值就是子类获取到的值，因为是子类给父类传的实际参数。同时构造函数的作用就是初始化成员变量，那么子类传给父类的值就通过父类构造函数来初始化成员变量了。</p>\n<pre><code>public Dog(string name, string color, string eat) : base(name, color, eat)\n    \t//通过base来获取子类传过来的实际值，并给父类传过去，最后调用一下父类\n        {\n            Console.WriteLine(\"我是犬科,派生类（子类）\");\n        }\n</code></pre>\n<p><br/>  </p>\n</div>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-05-05 19:35:09", "summary": "一、什么是继承，有什么作用？概念：继承就是在类之间建立一种相交关系，使得新定义的派生类子类的实例可以继承已有的基类父类的特征和能力，而且可以加入新的特性或者是修改已有的特性建立起类的新层次。作用：继承"}