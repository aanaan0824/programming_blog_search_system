{"blogid": "121243792", "writerAge": "码龄5年", "writerBlogNum": "3", "writerCollect": "11", "writerComment": "4", "writerFan": "10", "writerGrade": "1级", "writerIntegral": "45", "writerName": "六面体", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_121243792.jpg", "writerRankTotal": "290479", "writerRankWeekly": "1081835", "writerThumb": "3", "writerVisitNum": "8822", "blog_read_count": "4565", "blog_time": "于 2021-11-10 10:51:07 发布", "blog_title": "如何使用docker部署自己的项目", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h3><a id=\"docker_0\"></a>如何使用docker部署自己的项目？</h3>\n<blockquote>\n<p>前一阵公司有一个将项目部署到私有化本地的需求，我对服务器没什么研究，搭建起来很费力，所以用docker做了一系列项目私有化部署的镜像，现在写个博客记录一下学习和搭建的过程。</p>\n</blockquote>\n<p>拿我现在的项目举例，分为前端(vue实现)，后端(PHP laravel框架), OnlineJudge(在线判题) 以及数据层和缓存(mysql, redis)。思路就是首先为各个项目创建镜像上传到dockerhub，然后使用docker-compose 一键部署</p>\n<h4><a id=\"Laravel_6\"></a>Laravel项目创建镜像</h4>\n<ol><li>进入项目目录，创建<code>dockerfile</code>文件, 内容如下</li></ol>\n<pre><code class=\"prism language-doc\">FROM php:7.4-fpm\n\nRUN  sed -i 's/deb.debian.org/mirrors.aliyun.com/' /etc/apt/sources.list &amp;&amp; \\\n    sed -i 's/security.debian.org/mirrors.aliyun.com/' /etc/apt/sources.list &amp;&amp; \\\n    sed -i 's/security-cdn.debian.org/mirrors.aliyun.com/' /etc/apt/sources.list\n\nRUN sed -i 's/9000/\\/run\\/php\\/php7.4-fpm.sock/' /usr/local/etc/php-fpm.d/zz-docker.conf\n\nRUN mkdir /run/php \\\n    &amp;&amp; touch /run/php/php7.4-fpm.sock \\\n    &amp;&amp; chmod 777 /run/php/php7.4-fpm.sock \\\n    &amp;&amp; chmod +s /run/php/php7.4-fpm.sock\n\n#### 安装PHP扩展 ######################\n\nRUN pecl install redis-5.1.1 &amp;&amp; \\\n     docker-php-ext-enable redis\n\nRUN docker-php-ext-install pdo &amp;&amp; \\\n     docker-php-ext-install pdo_mysql &amp;&amp; \\\n     docker-php-ext-enable pdo pdo_mysql\n\n#### 安装nginx和supervisor 扩展 ######################\n\nRUN apt-get update -yqq &amp;&amp; \\\n    apt-get install -yqq \\\n        nginx supervisor cron\n\nRUN echo \"* * * * * cd /var/www/kaoshi.web.server &amp;&amp; php artisan schedule:run &gt;&gt; /dev/null 2&gt;&amp;1\" &gt;&gt; /etc/crontab\n\n#### 复制配置文件到镜像 ######################\n\nCOPY ./ /var/www/kaoshi.web.server/\nCOPY ./php-fpm/www.conf /usr/local/etc/php-fpm.d/\nCOPY ./sites/default /etc/nginx/sites-enabled/\nCOPY ./supervisor.conf /etc/supervisor/conf.d/\n\n###### 修改laravel项目的各种配置 #########################\nRUN chown -R www-data:www-data /var/www/kaoshi.web.server \\\n    &amp;&amp; mv /var/www/kaoshi.web.server/.env.docker /var/www/kaoshi.web.server/.env\n\nENV MYSQL_HOST=127.0.0.1\nENV MYSQL_DATABASE=exam\nENV MYSQL_USER=root\nENV MYSQL_PASSWORD=root\nENV REDIS_HOST=127.0.0.1\nENV REDIS_PORT=6379\nENV JUDGE_SERVER_HOST=kaoshi_judge_server\nENV JUDGE_SERVER_PORT=8080\n\nWORKDIR /var/www/kaoshi.web.server\n\nADD ./startup.sh /opt/startup.sh\nRUN sed -i 's/\\r//g' /opt/startup.sh\nCMD [\"/bin/bash\", \"/opt/startup.sh\"]\n\nEXPOSE 80\n</code></pre>\n<p>这个文件比较长，大概的构建思路是 以<code>php7.4</code>镜像为基础，切换<code>apt-get</code>源 -&gt; 安装<code>php</code>扩展 -&gt; 安装nginx及其他需要的扩展 -&gt; 复制项目目录中的各种配置文件 -&gt; 设置启动脚本 -&gt; 设置暴露的端口号。</p>\n<blockquote>\n<p>这里要使用<code>ENV</code>命令设置<code>laravel</code>的各种配置，因为这些配置需要在后期的<code>docker-compose</code>创建容器时可以自由修改</p>\n</blockquote>\n<ol start=\"2\"><li>编写启动脚本文件，我这里额外启动了 <code>supervisord</code>, <code>crond</code> 因为需要用到队列服务,`</li></ol>\n<pre><code class=\"prism language-shell\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token function\">sed</span> -i <span class=\"token string\">\"s/MYSQL_HOST/<span class=\"token variable\">${MYSQL_HOST}</span>/\"</span> /var/www/kaoshi.web.server/.env <span class=\"token operator\">&amp;&amp;</span> \n    <span class=\"token function\">sed</span> -i <span class=\"token string\">\"s/MYSQL_DATABASE/<span class=\"token variable\">${MYSQL_DATABASE}</span>/\"</span> /var/www/kaoshi.web.server/.env <span class=\"token operator\">&amp;&amp;</span> \n    <span class=\"token function\">sed</span> -i <span class=\"token string\">\"s/MYSQL_USER/<span class=\"token variable\">${MYSQL_USER}</span>/\"</span> /var/www/kaoshi.web.server/.env <span class=\"token operator\">&amp;&amp;</span> \n    <span class=\"token function\">sed</span> -i <span class=\"token string\">\"s/MYSQL_PASSWORD/<span class=\"token variable\">${MYSQL_PASSWORD}</span>/\"</span> /var/www/kaoshi.web.server/.env <span class=\"token operator\">&amp;&amp;</span> \n    <span class=\"token function\">sed</span> -i <span class=\"token string\">\"s/MYSQL_USER/<span class=\"token variable\">${MYSQL_USER}</span>/\"</span> /var/www/kaoshi.web.server/.env <span class=\"token operator\">&amp;&amp;</span> \n    <span class=\"token function\">sed</span> -i <span class=\"token string\">\"s/MY_REDIS_HOST/<span class=\"token variable\">${REDIS_HOST}</span>/\"</span> /var/www/kaoshi.web.server/.env <span class=\"token operator\">&amp;&amp;</span> \n    <span class=\"token function\">sed</span> -i <span class=\"token string\">\"s/MY_REDIS_PORT/<span class=\"token variable\">${REDIS_PORT}</span>/\"</span> /var/www/kaoshi.web.server/.env\n\nsupervisord -c /etc/supervisor/supervisord.conf\n\nsupervisorctl start all\n\n<span class=\"token comment\"># Start php-fpm cron in background</span>\nphp-fpm -D\n\n/etc/init.d/cron start\n\n<span class=\"token comment\"># Start nginx in foreground</span>\nnginx -g <span class=\"token string\">\"daemon off;\"</span>\n\n</code></pre>\n<ol start=\"3\"><li>构建镜像并上传</li></ol>\n<p>准备工作：这里需要你拥有一个<code>docker</code>账号，认证通过后，构建好的镜像上传到自己的镜像库中。</p>\n<p>进入项目目录, 执行构建命令</p>\n<pre><code>&gt; docker build -t youdockerid:backend_server ./\n</code></pre>\n<p>上传有两种方式，直接使用<code>docker</code>面版登录后上传，或者<code>docker push</code>也可以 很简单。</p>\n<h4><a id=\"_113\"></a>前台项目构建镜像</h4>\n<p>构建过程和文件都基本类似，只是具体的配置等有所区别，同样是构建完毕后上传即可</p>\n<p>dockerfile:</p>\n<pre><code class=\"prism language-do\">FROM node:16.3\n\nRUN  sed -i 's/deb.debian.org/mirrors.aliyun.com/' /etc/apt/sources.list &amp;&amp; \\\n    sed -i 's/security.debian.org/mirrors.aliyun.com/' /etc/apt/sources.list &amp;&amp; \\\n    sed -i 's/security-cdn.debian.org/mirrors.aliyun.com/' /etc/apt/sources.list \n\nRUN npm config set registry https://registry.npm.taobao.org\n\n####### 复制项目文件 ###########################################\nCOPY ./ /var/www/kaoshi.frontend/\n\n####### 安装nginx ###########################################\nRUN apt-get update -yqq &amp;&amp; \\\n    apt-get install -yqq \\\n        nginx \n\nCOPY ./sites/default /etc/nginx/sites-enabled/\n\nRUN mv /var/www/kaoshi.frontend/nuxt.config.docker.js /var/www/kaoshi.frontend/nuxt.config.js \\\n    &amp;&amp; npm install -g pm2\n\n\nENV LISTEN_HOST=127.0.0.1\nENV LISTEN_PORT=3306\nENV PROXY_HOST=api.kaoshi.test\n\nWORKDIR /var/www/kaoshi.frontend\n\nADD ./startup.sh /opt/startup.sh\nRUN sed -i 's/\\r//g' /opt/startup.sh\nCMD [\"/bin/bash\", \"/opt/startup.sh\"]\n\nEXPOSE 80\n</code></pre>\n<p>startup.sh:</p>\n<pre><code class=\"prism language-she\">#!/bin/bash\n\nsed -i \"s/LISTEN_HOST/${LISTEN_HOST}/\" /var/www/kaoshi.frontend/nuxt.config.js &amp;&amp; \nsed -i \"s/LISTEN_PORT/${LISTEN_PORT}/\" /var/www/kaoshi.frontend/nuxt.config.js &amp;&amp;\nsed -i \"s/PROXY_HOST/${PROXY_HOST}/\" /var/www/kaoshi.frontend/nuxt.config.js &amp;&amp;\nsed -i \"s/LISTEN/http:\\/\\/${LISTEN_HOST}:${LISTEN_PORT}/\" /etc/nginx/sites-enabled/default\n\ncd /var/www/kaoshi.frontend &amp;&amp; pm2 start npm --name \"kaoshi\" -- start \n\n# Start nginx in foreground\nnginx -g \"daemon off;\"\n</code></pre>\n<p>构建:</p>\n<pre><code>&gt; docker build -t youdockerid:fronend_server ./\n</code></pre>\n<h4><a id=\"dockercompose_177\"></a>编写docker-compose一键部署</h4>\n<ol><li>首先创建一个新的目录作为部署目录，目录结构如下</li></ol>\n<pre><code>├── .env                                  //配置文件\n├── .env.example\n├── data\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//mysql或者redis或其他模块的数据存储在此\n│   ├── mysql\n│   └── redis\n│       └── appendonly.aof\n├── docker-compose.yml\t\t\t\t\t\t\t\t\t\t//部署文件\n└── initdb.d\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//数据库初始化文件\n    └── init.sql\t\t\t\n</code></pre>\n<p><code>docker-compose.yml</code>:</p>\n<pre><code>version: '3.5'\n\nnetworks:\n    backend:\n        driver: bridge\n      \nservices:\n### backend ##################################\n    backend_server:\n        container_name: backend_server\n        image: yourdockerid/backend_server:latest\n        restart: always\n        networks:\n            - backend\n        environment:\n            MYSQL_HOST: ${MYSQL_HOST}\n            MYSQL_USER: ${MYSQL_USER}\n            MYSQL_PASSWORD: ${MYSQL_PASSWORD}\n            MYSQL_DATABASE: ${MYSQL_DATABASE}\n            REDIS_HOST: ${REDIS_HOST}\n            REDIS_PORT: ${REDIS_PORT}\n            JUDGE_SERVER_HOST: ${JUDGE_SERVER_HOST}\n            JUDGE_SERVER_PORT: ${JUDGE_SERVER_PORT}\n\n### frontend ##################################\n    frontend_server:\n        container_name: frontend_server\n        image: yourdockerid/frontend_server:latest\n        restart: always\n        ports:\n            - \"0.0.0.0:80:80\"\n        networks:\n            - backend\n        environment:\n            LISTEN_HOST: ${FRONTEND_LISTEN_HOST}\n            LISTEN_PORT: ${FRONTEND_LISTEN_PORT}\n\n### mysql ##################################\n    mysql_server:\n        container_name: mysql_server\n        image: mysql:8.0\n        command: --default-authentication-plugin=mysql_native_password\n        restart: always\n        volumes:\n            - ./data/mysql:/data\n            - ./initdb.d:/docker-entrypoint-initdb.d\n        networks:\n            - backend\n        environment:\n            MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}\n            MYSQL_DATABASE: ${MYSQL_DATABASE}\n\n### redis ##################################\n    redis_server:\n        container_name: redis_server\n        image: redis:5.0-alpine\n        command: redis-server --appendonly yes\n        restart: always\n        networks:\n            - backend\n        volumes:\n            - ./data/redis:/data\n</code></pre>\n<p><code>.env</code>:</p>\n<pre><code>### MYSQL #################################################\n\nMYSQL_HOST=mysql_server\nMYSQL_USER=root\nMYSQL_PASSWORD=root\nMYSQL_DATABASE=example\n\n### REDIS #################################################\n\nREDIS_HOST=redis_server\nREDIS_PORT=6379\n\n### frontend #################################################\n\nFRONTEND_LISTEN_HOST=127.0.0.1\nFRONTEND_LISTEN_PORT=3306\n\n</code></pre>\n<p>都写完了之后就可以愉快地构建了:</p>\n<pre><code>&gt; docker-composer up -d\nStarting mysql_server              ... done\nStarting redis_server              ... done\nStarting frontend_server           ... done\nStarting backend_server            ... done\n</code></pre>\n<p>大功告成！</p>\n<h4><a id=\"_294\"></a>尾巴</h4>\n<p>因为是蛮久之前弄的，所以有些细节踩坑的地方可能忘记提示了，如果有哪些地方不清楚或者需要指正的，欢迎留言</p>\n<blockquote>\n<p>dockerhub: https://registry.hub.docker.com/</p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 1, "time": "2021-11-10 10:51:07", "summary": "如何使用部署自己的项目？前一阵公司有一个将项目部署到私有化本地的需求，我对服务器没什么研究，搭建起来很费力，所以用做了一系列项目私有化部署的镜像，现在写个博客记录一下学习和搭建的过程。拿我现在的项目举"}