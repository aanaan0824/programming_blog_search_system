{"blogid": "116531561", "writerAge": "码龄2年", "writerBlogNum": "373", "writerCollect": "46704", "writerComment": "49114", "writerFan": "114715", "writerGrade": "10级", "writerIntegral": "103428", "writerName": "呆呆敲代码的小Y", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_116531561.jpg", "writerRankTotal": "13", "writerRankWeekly": "238", "writerThumb": "18671", "writerVisitNum": "11979763", "blog_read_count": "3325", "blog_time": "于 2021-05-11 09:58:20 发布", "blog_title": "☀️ 学会编程入门必备 C# 最基础知识介绍——带你认识 C# 中的几种循环结构( for & while & do...while)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/20210508160617911.gif\"/><br/> </p>\n<div class=\"toc\">\n<h3> </h3>\n<ul><li><ul><li><ul><li><ul><li><a href=\"#_2\">前言👻</a></li></ul>\n</li></ul>\n</li><li><a href=\"#C_forforeach__16\">C# for/foreach 循环🎈</a></li><li><ul><li><a href=\"#for_20\">for</a></li><li><a href=\"#_37\">流程图</a></li><li><a href=\"#foreach_75\">foreach</a></li></ul>\n</li><li><a href=\"#C_while_150\">C# while循环🎉</a></li><li><ul><li><a href=\"#_154\">语法</a></li><li><a href=\"#_167\">流程图</a></li></ul>\n</li><li><a href=\"#C_dowhile__210\">C# do...while 循环🎄</a></li><li><ul><li><a href=\"#_215\">语法</a></li><li><a href=\"#_229\">流程图</a></li></ul>\n</li><li><a href=\"#C__275\">C# 嵌套循环👍</a></li><li><ul><li><a href=\"#_279\">语法</a></li></ul>\n</li><li><a href=\"#_384\">循环控制语句🎊</a></li><li><ul><li><a href=\"#C_break__393\">C# break 语句</a></li><li><ul><li><a href=\"#_401\">语法</a></li><li><a href=\"#_408\">流程图</a></li></ul>\n</li><li><a href=\"#C_continue__455\">C# continue 语句</a></li><li><ul><li><a href=\"#_462\">语法</a></li><li><a href=\"#_470\">流程图</a></li></ul>\n</li></ul>\n</li><li><a href=\"#_520\">无限循环💫</a></li><li><a href=\"#_546\">总结💬</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<h4><a id=\"_2\"></a>前言👻</h4>\n<p>本篇文章是介绍C#循环部分知识的扩展内容，来源于 <a href=\"https://blog.csdn.net/zhangay1998/article/details/116261185?spm=1001.2014.3001.5501\">☀️ 学会编程入门必备 C# 最基础知识介绍(三)——变量、常量、运算符、判断、循环</a>这块的内容<br/> 特此来详细介绍一下</p>\n<p>C# 提供了以下几种循环类型。本篇文章来详细介绍一下各种循环的含义和用法</p>\n<table><thead><tr><th align=\"left\">循环类型</th><th align=\"left\">描述</th></tr></thead><tbody><tr><td align=\"left\">for/foreach 循环</td><td align=\"left\">多次执行一个语句序列，简化管理循环变量的代码。</td></tr><tr><td align=\"left\">while 循环</td><td align=\"left\">当给定条件为真时，重复语句或语句组。它会在执行循环主体之前测试条件。</td></tr><tr><td align=\"left\">do…while 循环</td><td align=\"left\">除了它是在循环主体结尾测试条件外，其他与 while 语句类似。</td></tr><tr><td align=\"left\">嵌套循环</td><td align=\"left\">可以在 while、for 或 do…while 循环内使用一个或多个循环。</td></tr></tbody></table>\n<hr/>\n<h2><a id=\"C_forforeach__16\"></a>C# for/foreach 循环🎈</h2>\n<p>一个 <strong>for</strong> 循环是一个允许您编写一个执行特定次数的循环的重复控制结构。</p>\n<hr/>\n<h3><a id=\"for_20\"></a>for</h3>\n<p>C# 中 <strong>for</strong> 循环的语法：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> init<span class=\"token punctuation\">;</span> condition<span class=\"token punctuation\">;</span> increment <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>下面是 for 循环的控制流：</p>\n<ol><li><strong>init</strong> 会首先被执行，且只会执行一次。这一步允许您声明并初始化任何循环控制变量。您也可以不在这里写任何语句，只要有一个分号出现即可。</li><li>接下来，会判断 <strong>condition</strong>。如果为真，则执行循环主体。如果为假，则不执行循环主体，且控制流会跳转到紧接着 for循环的下一条语句。</li><li>在执行完 for 循环主体后，控制流会跳回上面的 <strong>increment</strong>语句。该语句允许您更新循环控制变量。该语句可以留空，只要在条件后有一个分号出现即可。</li><li>条件再次被判断。如果为真，则执行循环，这个过程会不断重复（循环主体，然后增加步值，再然后重新判断条件）。在条件变为假时，for 循环终止。</li></ol>\n<hr/>\n<h3><a id=\"_37\"></a>流程图</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210511092748669.png\"/></p>\n<p><strong>实例</strong></p>\n<pre><code class=\"prism language-csharp\">实例\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Loops</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   \n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">/* for 循环执行 */</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> a <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> a <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a 的值： {0}\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\n<blockquote>\n<p>a 的值： 10<br/> a 的值： 11<br/> a 的值： 12<br/> a 的值： 13<br/> a 的值： 14<br/> a 的值： 15<br/> a 的值： 16<br/> a 的值： 17<br/> a 的值： 18<br/> a 的值： 19</p>\n</blockquote>\n<hr/>\n<h3><a id=\"foreach_75\"></a>foreach</h3>\n<p>C# 也支持 foreach 循环，使用foreach可以迭代数组或者一个集合对象。</p>\n<p>以下实例有三个部分：</p>\n<ul><li>通过 foreach 循环输出整型数组中的元素。</li><li>通过 for 循环输出整型数组中的元素。</li><li>foreach 循环设置数组元素的计算器。</li></ul>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ForEachTest</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> fibarray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> element <span class=\"token keyword\">in</span> fibarray<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            System<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        System<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token comment\">// 类似 foreach 循环</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> fibarray<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            System<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>fibarray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        System<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token comment\">// 设置集合中元素的计算器</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> element <span class=\"token keyword\">in</span> fibarray<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Element #{0}: {1}\"</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        System<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number of elements in the array: {0}\"</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出结果为：</p>\n<blockquote>\n<p>0<br/> 1<br/> 1<br/> 2<br/> 3<br/> 5<br/> 8<br/> 13</p>\n<p>0<br/> 1<br/> 1<br/> 2<br/> 3<br/> 5<br/> 8<br/> 13</p>\n<p>Element #1: 0<br/> Element #2: 1<br/> Element #3: 1<br/> Element #4: 2<br/> Element #5: 3<br/> Element #6: 5<br/> Element #7: 8<br/> Element #8: 13<br/> Number of elements in the array: 8</p>\n</blockquote>\n<p>更多 foreach 内容可以参考：<a href=\"https://www.runoob.com/w3cnote/csharp-foreach.html\">C# 中 foreach 遍历的用法</a></p>\n<hr/>\n<h2><a id=\"C_while_150\"></a>C# while循环🎉</h2>\n<p>只要给定的条件为真，C# 中的 <strong>while</strong> 循环语句会重复执行一个目标语句。</p>\n<hr/>\n<h3><a id=\"_154\"></a>语法</h3>\n<p>C# 中 while 循环的语法：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在这里，<strong>statement(s)</strong> 可以是一个单独的语句，也可以是几个语句组成的代码块。<strong>condition</strong> 可以是任意的表达式，当为任意非零值时都为真。当条件为真时执行循环。</p>\n<p>当条件为假时，程序流将继续执行紧接着循环的下一条语句。</p>\n<hr/>\n<h3><a id=\"_167\"></a>流程图</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2021051109224498.png\"/><br/> 在这里，while 循环的关键点是<mark>循环可能一次都不会执行</mark>。当条件被测试且结果为假时，会跳过循环主体，直接执行紧接着 while 循环的下一条语句。</p>\n<p><strong>实例</strong></p>\n<pre><code class=\"prism language-csharp\">实例\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Loops</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   \n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">/* 局部变量定义 */</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">/* while 循环执行 */</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a 的值： {0}\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\n<blockquote>\n<p>a 的值： 10<br/> a 的值： 11<br/> a 的值： 12<br/> a 的值： 13<br/> a 的值： 14<br/> a 的值： 15<br/> a 的值： 16<br/> a 的值： 17<br/> a 的值： 18<br/> a 的值： 19</p>\n</blockquote>\n<hr/>\n<h2><a id=\"C_dowhile__210\"></a>C# do…while 循环🎄</h2>\n<p>不像 <strong>for</strong> 和 <strong>while</strong> 循环，它们是在循环头部测试循环条件。<strong>do…while</strong> 循环是在循环的尾部检查它的条件。<br/> <strong>do…while</strong> 循环与 <strong>while</strong> 循环类似，但是 <strong>do…while</strong> 循环会确保<mark>至少执行一次循环</mark></p>\n<hr/>\n<h3><a id=\"_215\"></a>语法</h3>\n<p>C# 中 do…while 循环的语法：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">do</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> condition <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>请注意，条件表达式出现在循环的尾部，所以循环中的 statement(s) 会在条件被测试之前至少执行一次。<br/> 如果条件为真，控制流会跳转回上面的 do，然后重新执行循环中的 statement(s)。这个过程会不断重复，直到给定条件变为假为止。</p>\n<hr/>\n<h3><a id=\"_229\"></a>流程图</h3>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210511093313628.png\"/><br/> <strong>实例</strong></p>\n<pre><code class=\"prism language-csharp\">实例\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Loops</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   \n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">/* 局部变量定义 */</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">/* do 循环执行 */</span>\n            <span class=\"token keyword\">do</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n               Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a 的值： {0}\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                a <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\n<blockquote>\n<p>a 的值： 10<br/> a 的值： 11<br/> a 的值： 12<br/> a 的值： 13<br/> a 的值： 14<br/> a 的值： 15<br/> a 的值： 16<br/> a 的值： 17<br/> a 的值： 18<br/> a 的值： 19</p>\n</blockquote>\n<hr/>\n<h2><a id=\"C__275\"></a>C# 嵌套循环👍</h2>\n<p>C# 允许在一个循环内使用另一个循环，下面演示几个实例来说明这个概念。</p>\n<hr/>\n<h3><a id=\"_279\"></a>语法</h3>\n<p>C# 中 <strong>嵌套 for 循环</strong> 语句的语法：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> init<span class=\"token punctuation\">;</span> condition<span class=\"token punctuation\">;</span> increment <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> init<span class=\"token punctuation\">;</span> condition<span class=\"token punctuation\">;</span> increment <span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>C# 中 <strong>嵌套 while 循环</strong> 语句的语法：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>C# 中 <strong>嵌套 do…while 循环</strong> 语句的语法：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">do</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">do</span>\n   <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> condition <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> condition <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>关于嵌套循环有一点值得注意，您可以在任何类型的循环内嵌套其他任何类型的循环。比如，一个 for 循环可以嵌套在一个 while 循环内，反之亦然。</p>\n<hr/>\n<p><strong>实例</strong><br/> 下面的程序使用了一个嵌套的 for 循环来查找 2 到 100 中的质数：</p>\n<pre><code class=\"prism language-csharp\">实例\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Loops</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   \n   <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n   <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{<!-- --></span>\n         <span class=\"token comment\">/* 局部变量定义 */</span>\n         <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span>\n\n         <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">/</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果找到，则不是质数</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">/</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n               Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0} 是质数\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n\n         Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\n<blockquote>\n<p>2 是质数<br/> 3 是质数<br/> 5 是质数<br/> 7 是质数<br/> 11 是质数<br/> 13 是质数<br/> 17 是质数<br/> 19 是质数<br/> 23 是质数<br/> 29 是质数<br/> 31是质数<br/> 37 是质数<br/> 41 是质数<br/> 43 是质数<br/> 47 是质数<br/> 53 是质数<br/> 59 是质数<br/> 61 是质数<br/> 67 是质数<br/> 71 是质数<br/> 73 是质数<br/> 79 是质数<br/> 83 是质数<br/> 89 是质数<br/> 97 是质数</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210511095639502.png\"/></p>\n<hr/>\n<h2><a id=\"_384\"></a>循环控制语句🎊</h2>\n<p>循环控制语句更改执行的正常序列。当执行离开一个范围时，所有在该范围中创建的自动对象都会被销毁。<br/> C# 提供了下列的控制语句。</p>\n<table><thead><tr><th align=\"left\">控制语句</th><th align=\"left\">描述</th></tr></thead><tbody><tr><td align=\"left\">break 语句</td><td align=\"left\">终止 loop 或 switch 语句，程序流将继续执行紧接着 loop 或 switch 的下一条语句。</td></tr><tr><td align=\"left\">continue 语句</td><td align=\"left\">引起循环跳过主体的剩余部分，立即重新开始测试条件。</td></tr></tbody></table>\n<hr/>\n<h3><a id=\"C_break__393\"></a>C# break 语句</h3>\n<p>C# 中 <strong>break</strong> 语句有以下两种用法：</p>\n<ol><li>当 <strong>break</strong> 语句出现在一个循环内时，循环会立即终止，且程序流将继续执行紧接着循环的下一条语句。</li><li>它可用于终止 <strong>switch</strong> 语句中的一个 case。</li></ol>\n<p>如果您使用的是嵌套循环（即一个循环内嵌套另一个循环），break 语句会停止执行最内层的循环，然后开始执行该块之后的下一行代码。</p>\n<hr/>\n<h4><a id=\"_401\"></a>语法</h4>\n<p>C# 中 <strong>break</strong> 语句的语法：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<hr/>\n<h4><a id=\"_408\"></a>流程图</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210511093830971.png\"/></p>\n<hr/>\n<p><strong>实例</strong></p>\n<pre><code class=\"prism language-csharp\">实例\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Loops</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   \n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">/* 局部变量定义 */</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">/* while 循环执行 */</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a 的值： {0}\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&gt;</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">/* 使用 break 语句终止 loop */</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\n<blockquote>\n<p>a 的值： 10<br/> a 的值： 11<br/> a 的值： 12<br/> a 的值： 13<br/> a 的值： 14<br/> a 的值： 15</p>\n</blockquote>\n<hr/>\n<h3><a id=\"C_continue__455\"></a>C# continue 语句</h3>\n<p>C# 中的 <strong>continue</strong> 语句有点像 <strong>break</strong> 语句。但它不是强迫终止，<strong>continue</strong> 会跳过当前循环中的代码，强迫开始下一次循环。</p>\n<p>对于 <strong>for</strong> 循环，<strong>continue</strong> 语句会导致执行条件测试和循环增量部分。对于 <strong>while</strong> 和 <strong>do…while</strong> 循环，<strong>continue</strong> 语句会导致程序控制回到条件测试上。</p>\n<hr/>\n<h4><a id=\"_462\"></a>语法</h4>\n<p>C# 中 <strong>continue</strong> 语句的语法：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<hr/>\n<h4><a id=\"_470\"></a>流程图</h4>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210511094109444.png\"/><br/> <strong>实例</strong></p>\n<pre><code class=\"prism language-csharp\">实例\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Loops</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   \n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">/* 局部变量定义 */</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">/* do 循环执行 */</span>\n            <span class=\"token keyword\">do</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">/* 跳过迭代 */</span>\n                    a <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a 的值： {0}\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\n<blockquote>\n<p>a 的值： 10<br/> a 的值： 11<br/> a 的值： 12<br/> a 的值： 13<br/> a 的值： 14<br/> a 的值： 16<br/> a 的值： 17<br/> a 的值： 18<br/> a 的值： 19</p>\n</blockquote>\n<hr/>\n<h2><a id=\"_520\"></a>无限循环💫</h2>\n<p>如果条件永远不为假，则循环将变成无限循环。for 循环在传统意义上可用于实现无限循环。由于构成循环的三个表达式中任何一个都不是必需的，您可以将某些条件表达式留空来构成一个无限循环。</p>\n<pre><code class=\"prism language-csharp\">实例\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Loops</span>\n<span class=\"token punctuation\">{<!-- --></span>\n   \n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hey! I am Trapped\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>当条件表达式不存在时，它被假设为真。您也可以设置一个初始值和增量表达式，但是一般情况下，程序员偏向于使用 for( ; ; ) 结构来表示一个无限循环。</p>\n<hr/>\n<h2><a id=\"_546\"></a>总结💬</h2>\n<p>本篇文章是介绍C#循环部分知识的扩展内容，来源于 <a href=\"https://blog.csdn.net/zhangay1998/article/details/116261185?spm=1001.2014.3001.5501\">☀️ 学会编程入门必备 C# 最基础知识介绍(三)——变量、常量、运算符、判断、循环</a>这块的内容</p>\n<p>主要介绍了C#中的循环部分，如果想看更多的C#基础知识学习，点击上面的最基础知识介绍就可以看全部的C#基础知识哦<br/> 继续努力🎅<br/> <img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/20210511095024334.gif\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-05-11 09:58:20", "summary": "在这里插入图片描述前言循环流程图循环语法流程图循环语法流程图嵌套循环语法循环控制语句语句语法流程图语句语法流程图无限循环总结前言本篇文章是介绍循环部分知识的扩展内容，来源于学会编程入门必备最基础知识介"}