{"blogid": "125106939", "writerAge": "码龄14年", "writerBlogNum": "218", "writerCollect": "1242", "writerComment": "524", "writerFan": "1734", "writerGrade": "7级", "writerIntegral": "17460", "writerName": "常城", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125106939.jpg", "writerRankTotal": "3927", "writerRankWeekly": "22988", "writerThumb": "685", "writerVisitNum": "4664692", "blog_read_count": "1383", "blog_time": "于 2022-06-02 21:37:10 发布", "blog_title": "Unity性能优化-降低功耗,发热量,耗电量之OnDemandRendering篇", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p>公司游戏项目，手机运行严重发烫，耗电量飞快。在暂时无法做其他美术性和技术性优化的情况下，我写了这个公司内部文档，并做了个实验，今天干脆公布出来，希望对大家有用。</p>\n<p><img alt=\"\" height=\"578\" src=\"..\\..\\static\\image\\ae37afaa8f7841379d3dd8d24a3ca606.png\" width=\"647\"/></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">--官方文档：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><a href=\"https://docs.unity3d.com/ScriptReference/Rendering.OnDemandRendering.html\" title=\"Unity - Scripting API: OnDemandRendering\">Unity - Scripting API: OnDemandRendering</a></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">--Youtube讲解：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><a href=\"https://www.youtube.com/watch?v=RYgWn6jbteY\" title=\"https://www.youtube.com/watch?v=RYgWn6jbteY\">https://www.youtube.com/watch?v=RYgWn6jbteY</a></p>\n<p style=\"margin-left:.0001pt;text-align:justify;\">youtube上的极端实验结果：</p>\n<p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"107\" src=\"..\\..\\static\\image\\2af966e482064e97a5b5f2868a6b09b5.png\" width=\"433\"/></p>\n<p> </p>\n<p>好，现在我们来做一下实验，看把渲染帧率从60，动态降低到12左右，手机耗电量会降低多少，温度是否能降低。</p>\n<h2>第一次测试：</h2>\n<p>我们把如下代码挂到场景中任意一个游戏体，设置渲染帧率60的情况下：</p>\n<pre><code class=\"language-cs\">using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.Rendering; \n\n\npublic class Change_Frame : MonoBehaviour\n{\n\n    // 目标帧率\n    public int FrameRate = 60;\n\n\n    // Start is called before the first frame update\n    void Start()\n    {\n        //QualitySettings.vSyncCount = 0;\n        Application.targetFrameRate = FrameRate;\n        // 降低帧率\n        // If there isn't any input then we can go back to 12 FPS (every 5 frames).\n        // OnDemandRendering.renderFrameInterval = 5;\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        \n    }\n}\n</code></pre>\n<p>开始测试，手机电量为78%，测试开始时间，8:27，如下：</p>\n<p><img alt=\"\" height=\"232\" src=\"..\\..\\static\\image\\27d2e2f115ba4bc09df7256f6c7aa6c1.png\" width=\"408\"/></p>\n<p> 结束测试，手机电量为72%，测试结束时间，8:42，如下：</p>\n<p><img alt=\"\" height=\"230\" src=\"..\\..\\static\\image\\9d67848a8b104d54afa6c688e83d0361.png\" width=\"407\"/></p>\n<p><span style=\"color:#4da8ee;\"><strong> 第一次测试结论：</strong></span></p>\n<p><span style=\"color:#fe2c24;\"><strong>测试时长：15分钟，耗电量6%，手机明显发热，略烫手，肯定是40度以上。</strong></span></p>\n<p></p>\n<h2>第二次测试：</h2>\n<p>我们把代码改一下，其实就是取消OnDemandRendering.renderFrameInterval = 5; 的注释，把渲染帧率设置为12：</p>\n<pre><code class=\"language-cs\">using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.Rendering; \n\n\npublic class Change_Frame : MonoBehaviour\n{\n\n    // 目标帧率\n    public int FrameRate = 60;\n\n\n    // Start is called before the first frame update\n    void Start()\n    {\n        //QualitySettings.vSyncCount = 0;\n        Application.targetFrameRate = FrameRate;\n        // 降低帧率\n        // If there isn't any input then we can go back to 12 FPS (every 5 frames).\n        OnDemandRendering.renderFrameInterval = 5;\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        \n    }\n}\n</code></pre>\n<p>开始测试，手机电量为71%，测试开始时间，9:00，如下：</p>\n<p><img alt=\"\" height=\"222\" src=\"..\\..\\static\\image\\84044f355a1747a6a20fc478b2cc43a1.png\" width=\"403\"/></p>\n<p>结束测试，手机电量为72%，测试结束时间，8:42，如下：</p>\n<p><img alt=\"\" height=\"228\" src=\"..\\..\\static\\image\\66c976cc1a5d44aa8f6f54a0358bbaef.png\" width=\"404\"/></p>\n<p><span style=\"color:#4da8ee;\"><strong> 第二次测试结论：</strong></span></p>\n<p><span style=\"color:#fe2c24;\"><strong>测试时长：15分钟，耗电量3%，手机不怎么发热，感觉在室温左右，总之肯定低于36度。</strong></span></p>\n<p> </p>\n<h2> 结论：</h2>\n<p><strong>使用OnDemandRendering可以动态调整渲染帧率。 渲染帧率的下降，无疑会对耗电量、功耗、发热量产生积极影响。</strong></p>\n<p>多说一句，其实Adaptive Performance方案，我个人理解，也是通过：感知硬件状况，比如温度、功耗等等，然后通过调节渲染帧率、调节LOD水平，去达到一个动态的功能和功耗的平衡。就是三星那个项目，有着非常可观的性能和较低的功耗。</p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-06-02 21:37:10", "summary": "公司游戏项目，手机运行严重发烫，耗电量飞快。在暂时无法做其他美术性和技术性优化的情况下，我写了这个公司内部文档，并做了个实验，今天干脆公布出来，希望对大家有用。官方文档：讲解：上的极端实验结果：好，现"}