{"blogid": "123029601", "writerAge": "码龄4年", "writerBlogNum": "336", "writerCollect": "9462", "writerComment": "583", "writerFan": "12803", "writerGrade": "7级", "writerIntegral": "9950", "writerName": "wendy_ya", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123029601.jpg", "writerRankTotal": "2010", "writerRankWeekly": "808", "writerThumb": "2092", "writerVisitNum": "1231189", "blog_read_count": "5332", "blog_time": "已于 2022-02-20 15:13:07 修改", "blog_title": "C++第三方日志库Glog的安装与使用超详解", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><ul><li><a href=\"#glog_2\">一、glog介绍</a></li><li><a href=\"#glog_7\">二、glog下载</a></li><li><a href=\"#_12\">三、环境介绍</a></li><li><a href=\"#glog_15\">三、glog的编译详解</a></li><li><ul><li><a href=\"#31_CMakeVS_16\">3.1 利用CMake进行编译，生成VS解决方案</a></li><li><a href=\"#32_VS_40\">3.2 利用VS对项目进行编译</a></li></ul>\n</li><li><a href=\"#glog_53\">四、glog的基本使用</a></li><li><ul><li><a href=\"#41_VS_54\">4.1 创建VS项目</a></li><li><a href=\"#42_glog_60\">4.2 将glog相关文件包含在项目中</a></li><li><a href=\"#43__65\">4.3 编写代码进行测试</a></li><li><a href=\"#44_2_93\">4.4 测试代码2</a></li></ul>\n</li><li><a href=\"#_129\">五、代码详解</a></li><li><ul><li><a href=\"#51_define_130\">5.1 define</a></li><li><a href=\"#52_include_134\">5.2 include</a></li><li><a href=\"#53_InitGoogleLogging_140\">5.3 InitGoogleLogging</a></li><li><a href=\"#54_ShutdownGoogleLogging_145\">5.4 ShutdownGoogleLogging</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"glog_2\"></a>一、glog介绍</h2>\n<p>Google Logging（glog）是一个实现应用程序级日志记录的C++98库。该库提供了基于C++风格流和各种辅助宏的日志API。</p>\n<h2><a id=\"glog_7\"></a>二、glog下载</h2>\n<p>Glog的地址已经从<a href=\"https://code.google.com/p/google-glog/\">https://code.google.com/p/google-glog/</a> 变为了<a href=\"https://github.com/google/glog\">https://github.com/google/glog</a>，请从该链接地址下载最新版。</p>\n<p>官方文档：<a href=\"http://google-glog.googlecode.com/svn/trunk/doc/glog.html\">http://google-glog.googlecode.com/svn/trunk/doc/glog.html</a>。</p>\n<h2><a id=\"_12\"></a>三、环境介绍</h2>\n<p>本文配置所采用的环境为Visual Studio2017。</p>\n<h2><a id=\"glog_15\"></a>三、glog的编译详解</h2>\n<h3><a id=\"31_CMakeVS_16\"></a>3.1 利用CMake进行编译，生成VS解决方案</h3>\n<p>首先需要下载并安装CMake，下载方法参考文章：<a href=\"https://blog.csdn.net/didi_ya/article/details/123029415\">Windows下CMake的下载与安装详解</a>。</p>\n<p>然后需要从github上下载glog的源码。我们这里将源码下载到文件夹E:\\3PartyLibrary下。<br/> 然后在glog-master文件夹内新建一个build文件夹，用于存放编译完成的文件。<br/> <strong>【注意】：如果建在该文件夹外部，会引发错误！！！</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0088061b65074e3e8fe3de9b6da5f50d.png\"/><br/> 然后使用cmake-gui生成VS解决方案。如下图所示。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dd2f2cdd09a144899b98f74c6add05df.png\"/><br/> 这里选择你使用的编译器（我这里使用的是Visual Studio2017），然后在下方输入x64：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\402ad9919c6041f493dd965e9f72c75c.png\"/><br/> 点击Finish完成。稍等几分钟CMake进行配置，配置完毕后如下图所示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ddb3c635890b4bbcb40a5ccec229bfa0.png\"/><br/> 这时需要进行如下设置：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\98b09d3cdbc34951b7afb98baf47b37d.png\"/><br/> ①是BUILD_SHARED_LIBS，这个选项我们要勾上，因为我们需要动态库。<br/> ②是CMAKE_INSTALL_PREFIX，这个路径是install后生成的头文件和库文件存放的路径，这里我们在源码同级目录下创建一个文件夹，命名为install。</p>\n<p>③和④分别是WITH_GFLAGS和WITH_UNWIND，这两个我也不是很清楚是做什么的，但是如果把这两个勾上的话，在cmake的过程中就会报warning，因此都不勾。</p>\n<p>之后分别点击Configure和Generate，生成完成后没有红色选项。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ad709ce98851418c864c8eaccadd68ed.png\"/></p>\n<h3><a id=\"32_VS_40\"></a>3.2 利用VS对项目进行编译</h3>\n<p>上述步骤生成完毕后，会在build目录下会生成sln解决方案，使用Visual Studio打开glog.sln解决方案，打开后目录如下：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\33831e47f03d48b0b0c6c8c1f1e2f714.png\"/><br/> 选择Release模式，分别对ALL_BUILD和INSTALL两个项目进行生成，如下图所示。<strong>（如果项目在debug模式下开发，就在debug模式下生成glog的DLL文件；如果项目在release模式下开发，就在release模式下生成glog的DLL文件；我这里选择的是Release模式）</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\86290406b7a44872b08c83a08d64c4cd.png\"/><br/> 生成过程应该不会有错误。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9be0a9d170214af7ba27405f3fccb0af.png\"/><br/> 生成成功后就在install目录下生成头文件和库文件。如下图所示。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8bf1c75841db4e80b927f944ae2e7f7c.png\"/></p>\n<p>ok！以上便是glog编译的全部内容了，接下来的小节介绍一下glog的基本使用。</p>\n<h2><a id=\"glog_53\"></a>四、glog的基本使用</h2>\n<h3><a id=\"41_VS_54\"></a>4.1 创建VS项目</h3>\n<p>新建一个Visual Studio项目，Release生成。</p>\n<p>这里，为了代码目录结构清晰，将上面生成的头文件放在了include文件夹中，将上面生成的.lib文件放在了lib文件夹中，将上面生成的.dll文件放在工程所在文件夹中，如下图所示。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\355dc27f09954b6cba293f9686bdcc00.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\333c887d2607440faa59b60897e4e1f4.png\"/></p>\n<h3><a id=\"42_glog_60\"></a>4.2 将glog相关文件包含在项目中</h3>\n<p>在使用vs新建项目后，需要将我们上面生成的头文件包含在项目的Include Directories中，将上面生成的库文件包含在项目的Library Directories中。如下图所示。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f1aed0f36917440a86991cd559f8444e.png\"/><br/> 【注意】：一定要选择x64和Release！！！<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0ade7c73fa1c4319b82b30f057e98573.png\"/></p>\n<h3><a id=\"43__65\"></a>4.3 编写代码进行测试</h3>\n<p>最简单的测试代码如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">GLOG_NO_ABBREVIATED_SEVERITIES</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">GLOG_NO_ABBREVIATED_SEVERITIES</span> <span class=\"token comment\">// 如果不加这个宏定义代码就会报错</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;glog/logging.h&gt;</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"glog.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tFLAGS_alsologtostderr <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//是否将日志输出到文件和stderr</span>\n\tgoogle<span class=\"token operator\">::</span><span class=\"token function\">InitGoogleLogging</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//使用glog之前必须先初始化库，仅需执行一次，括号内为程序名</span>\n\t<span class=\"token function\">LOG</span><span class=\"token punctuation\">(</span>INFO<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello,GLOG!\"</span><span class=\"token punctuation\">;</span>\n\tgoogle<span class=\"token operator\">::</span><span class=\"token function\">ShutdownGoogleLogging</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//当要结束glog时必须关闭库，否则会内存溢出</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>输出为：<br/> I20220220 14:27:55.136509 5080 test.cpp:9] Hello,GLOG!</p>\n<p>【注意】：GLog在整个项目周期中只允许生成一个日志文件，也就是说，glog从初始化到注销整个过程，不允许再次调用glog的初始化或者注销，另一种意思可以理解为只允许有一个实例化对象。</p>\n<h3><a id=\"44_2_93\"></a>4.4 测试代码2</h3>\n<p>测试代码如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">GLOG_NO_ABBREVIATED_SEVERITIES</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">GLOG_NO_ABBREVIATED_SEVERITIES</span> <span class=\"token comment\">// 如果不加这个宏定义代码就会报错</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;glog\\logging.h&gt;</span></span>\n\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"glog.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\tgoogle<span class=\"token operator\">::</span><span class=\"token function\">InitGoogleLogging</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//使用glog之前必须先初始化库，仅需执行一次，括号内为程序名</span>\n\tFLAGS_alsologtostderr <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//是否将日志输出到文件和stderr</span>\n\tFLAGS_colorlogtostderr <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//是否启用不同颜色显示</span>\n\n\tgoogle<span class=\"token operator\">::</span><span class=\"token function\">SetLogDestination</span><span class=\"token punctuation\">(</span>google<span class=\"token operator\">::</span>GLOG_INFO<span class=\"token punctuation\">,</span> <span class=\"token string\">\"E:\\\\logs\\\\INFO_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//INFO级别的日志都存放到logs目录下且前缀为INFO_</span>\n\tgoogle<span class=\"token operator\">::</span><span class=\"token function\">SetLogDestination</span><span class=\"token punctuation\">(</span>google<span class=\"token operator\">::</span>GLOG_WARNING<span class=\"token punctuation\">,</span> <span class=\"token string\">\"E:\\\\logs\\\\WARNING_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//WARNING级别的日志都存放到logs目录下且前缀为WARNING_</span>\n\tgoogle<span class=\"token operator\">::</span><span class=\"token function\">SetLogDestination</span><span class=\"token punctuation\">(</span>google<span class=\"token operator\">::</span>GLOG_ERROR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"E:\\\\logs\\\\ERROR_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//ERROR级别的日志都存放到logs目录下且前缀为ERROR_</span>\n\tgoogle<span class=\"token operator\">::</span><span class=\"token function\">SetLogDestination</span><span class=\"token punctuation\">(</span>google<span class=\"token operator\">::</span>GLOG_FATAL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"E:\\\\logs\\\\FATAL_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//FATAL级别的日志都存放到logs目录下且前缀为FATAL_</span>\n\n\n\t<span class=\"token function\">LOG</span><span class=\"token punctuation\">(</span>INFO<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"info\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">LOG</span><span class=\"token punctuation\">(</span>WARNING<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"warning\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">LOG</span><span class=\"token punctuation\">(</span>ERROR<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/*LOG(FATAL) &lt;&lt; \"fatal\";*/</span>\n\tgoogle<span class=\"token operator\">::</span><span class=\"token function\">ShutdownGoogleLogging</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//当要结束glog时必须关闭库，否则会内存溢出</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>代码执行后，会在E:\\logs文件夹下生成四个log文件，这里我没有将FATAL也打印出来是因为当glog检测到\"LOG(FATAL)&lt;&lt;\"代码时就会直接结束程序，不继续执行后面的代码。</p>\n<h2><a id=\"_129\"></a>五、代码详解</h2>\n<h3><a id=\"51_define_130\"></a>5.1 define</h3>\n<p>除了上述在前三行加入代码外，也可以选择<strong>添加预处理项</strong>。项目属性 ——&gt; c/c++ ——&gt; 预处理器。 添加GLOG_NO_ABBREVIATED_SEVERITIES。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f8c3c4476b0446799aaca54e770ad7c6.png\"/></p>\n<h3><a id=\"52_include_134\"></a>5.2 include</h3>\n<p>在需要使用glog打印日志的cpp文件中包含头文件，及加载glog库文件。注意：每个使用glog的cpp文件都要添加，代码如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"glog/logging.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span></span><span class=\"token string\">\"libglog.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n</code></pre>\n<h3><a id=\"53_InitGoogleLogging_140\"></a>5.3 InitGoogleLogging</h3>\n<p>用glog之前必须先初始化库，要生成日志文件只需在开始log之前调用一次：</p>\n<pre><code class=\"prism language-cpp\">google<span class=\"token operator\">::</span><span class=\"token function\">InitGoogleLogging</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//括号内是程序名</span>\n</code></pre>\n<h3><a id=\"54_ShutdownGoogleLogging_145\"></a>5.4 ShutdownGoogleLogging</h3>\n<p>当要结束glog时必须关闭库，否则会内存溢出：</p>\n<pre><code class=\"prism language-cpp\">google<span class=\"token operator\">::</span><span class=\"token function\">ShutdownGoogleLogging</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>下一篇文章（<a href=\"https://blog.csdn.net/didi_ya/article/details/123030706\">C++第三方日志库Glog基本语法介绍</a>）会对glog库的基本语法进行详细介绍，欢迎关注~</p>\n<p><strong>整理不易，如果对你有所帮助，记得点个赞哟~</strong></p>\n<hr/>\n<p>参考：</p>\n<ol><li><a href=\"https://blog.csdn.net/w_b_h/article/details/107070652\">https://blog.csdn.net/w_b_h/article/details/107070652</a></li><li><a href=\"https://blog.csdn.net/qq_27278957/article/details/84648912\">https://blog.csdn.net/qq_27278957/article/details/84648912</a></li><li><a href=\"https://blog.csdn.net/fx_odyssey/article/details/102815949\">https://blog.csdn.net/fx_odyssey/article/details/102815949</a></li><li><a href=\"https://blog.csdn.net/weixin_33929309/article/details/85541046\">https://blog.csdn.net/weixin_33929309/article/details/85541046</a></li><li><a href=\"https://www.cnblogs.com/tianyajuanke/archive/2013/02/22/2921850.html\">https://www.cnblogs.com/tianyajuanke/archive/2013/02/22/2921850.html</a></li><li><a href=\"https://my.oschina.net/u/4320185/blog/3755592\">https://my.oschina.net/u/4320185/blog/3755592</a></li></ol>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-02-20 15:13:07", "summary": "目录一、介绍二、下载三、环境介绍三、的编译详解利用进行编译，生成解决方案利用对项目进行编译四、的基本使用创建项目将相关文件包含在项目中编写代码进行测试测试代码五、代码详解一、介绍是一个实现应用程序级日"}