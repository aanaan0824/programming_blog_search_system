{"blogid": "120174196", "writerAge": "码龄3年", "writerBlogNum": "472", "writerCollect": "1608", "writerComment": "86", "writerFan": "344", "writerGrade": "6级", "writerIntegral": "6164", "writerName": "死磕的斯坦张", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_120174196.jpg", "writerRankTotal": "8252", "writerRankWeekly": "160497", "writerThumb": "285", "writerVisitNum": "422309", "blog_read_count": "1582", "blog_time": "于 2021-09-08 10:28:48 发布", "blog_title": "Solidity基本介绍", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"Solidity_0\"></a>Solidity是什么</h2>\n<p>• Solidity 是一门面向合约的、为实现智能合约而创建的高级编<br/> 程语言。这门语言受到了 C++，Python 和 Javascript 语言的<br/> 影响，设计的目的是能在以太坊虚拟机（EVM）上运行。</p>\n<p>• Solidity 是静态类型语言，支持继承、库和复杂的用户定义类<br/> 型等特性。</p>\n<p>• 内含的类型除了常见编程语言中的标准类型，还包括 address<br/> 等以太坊独有的类型，Solidity 源码文件通常以 .sol 作为扩展<br/> 名</p>\n<p>• 目前尝试 Solidity 编程的最好的方式是使用 Remix。Remix<br/> 是一个基于 Web 浏览器的 IDE，它可以让你编写 Solidity 智<br/> 能合约，然后部署并运行该智能合约。</p>\n<h2><a id=\"Solidity_16\"></a>Solidity语言特性</h2>\n<p>Solidity的语法接近于JavaScript，是一种面向对象的语言。但作为一<br/> 种真正意义上运行在网络上的去中心合约，它又有很多的不同：<br/> • 以太坊底层基于帐户，而不是 UTXO，所以增加了一个特殊的<br/> address 的数据类型用于定位用户和合约账户。</p>\n<p>• 语言内嵌框架支持支付。提供了 payable 等关键字，可以在语言层面<br/> 直接支持支付。</p>\n<p>• 使用区块链进行数据存储。数据的每一个状态都可以永久存储，所以<br/> 在使用时需要确定变量使用内存，还是区块链存储。</p>\n<p>• 运行环境是在去中心化的网络上，所以需要强调合约或函数执行的调<br/> 用的方式。</p>\n<p>• 不同的异常机制。一旦出现异常，所有的执行都将会被回撤，这主要<br/> 是为了保证合约执行的原子性，以避免中间状态出现的数据不一致。</p>\n<h2><a id=\"Solidity_34\"></a>Solidity源码和智能合约</h2>\n<p>• Solidity 源代码要成为可以运行在以太坊上的智能合约需要经历如下的<br/> 步骤：</p>\n<ol><li>用 Solidity 编写的智能合约源代码需要先使用编译器编译为字节码<br/> （Bytecode），编译过程中会同时产生智能合约的二进制接口规范<br/> （Application Binary Interface，简称为ABI）；</li><li>通过交易（Transaction）的方式将字节码部署到以太坊网络，每次<br/> 成功部署都会产生一个新的智能合约账户；</li><li>使用 Javascript 编写的 DApp 通常通过 web3.js + ABI去调用智能合<br/> 约中的函数来实现数据的读取和修改。</li></ol>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b54369cde0124361b62688bc80486962.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 1, "csharp": 0, "python": 1, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2021-09-08 10:28:48", "summary": "是什么是一门面向合约的、为实现智能合约而创建的高级编程语言。这门语言受到了，和语言的影响，设计的目的是能在以太坊虚拟机上运行。是静态类型语言，支持继承、库和复杂的用户定义类型等特性。内含的类型除了常见"}