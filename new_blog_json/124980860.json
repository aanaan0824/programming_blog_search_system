{"blogid": "124980860", "writerAge": "码龄4年", "writerBlogNum": "44", "writerCollect": "82", "writerComment": "18", "writerFan": "1119", "writerGrade": "3级", "writerIntegral": "534", "writerName": "BBQ__XB", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124980860.jpg", "writerRankTotal": "38003", "writerRankWeekly": "5939", "writerThumb": "59", "writerVisitNum": "24198", "blog_read_count": "2948", "blog_time": "已于 2022-05-30 21:37:43 修改", "blog_title": "Spring boot整合Redis实现发布订阅（超详细）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>Redis发布订阅</h3>\n<ul><li><a href=\"#_17\">基础知识</a></li><li><a href=\"#_34\">相关命令</a></li><li><ul><li><a href=\"#_36\">订阅者/等待接收消息</a></li><li><a href=\"#_48\">发布者/发送消息</a></li><li><a href=\"#_59\">订阅者/成功接收消息</a></li><li><a href=\"#_76\">常用命令汇总</a></li></ul>\n</li><li><a href=\"#_88\">原理</a></li><li><a href=\"#Spring_bootredis_101\">Spring boot整合redis</a></li><li><ul><li><a href=\"#_102\">导入依赖</a></li><li><a href=\"#Redis_111\">Redis配置</a></li><li><a href=\"#MessageDto_137\">消息封装类（MessageDto）</a></li><li><a href=\"#Redis_150\">Redis配置类</a></li><li><a href=\"#_261\">测试类</a></li><li><a href=\"#RedisMessageListener_311\">订阅方实现一：RedisMessageListener</a></li><li><a href=\"#PrintMessageReceiver_336\">订阅方实现二：PrintMessageReceiver</a></li><li><a href=\"#MessageListenerAdapter_360\">MessageListenerAdapter源码分析</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<hr/>\n<p>以下是Redis相关笔记总结，方便自己以后复习，同时也希望对大家有所帮助。</p>\n<table><thead><tr><th>内容</th><th>地址链接</th></tr></thead><tbody><tr><td>Redis在Linux环境下的详细安装教程</td><td><a href=\"https://blog.csdn.net/BBQ__ZXB/article/details/123905061\">https://blog.csdn.net/BBQ__ZXB/article/details/123905061</a></td></tr><tr><td>Redis中五大基本数据类型和三种特殊数据类型</td><td><a href=\"https://blog.csdn.net/BBQ__ZXB/article/details/124169168\">https://blog.csdn.net/BBQ__ZXB/article/details/124169168</a></td></tr><tr><td>Redis中基本事务操作及乐观锁的实现</td><td><a href=\"https://blog.csdn.net/BBQ__ZXB/article/details/124192251\">https://blog.csdn.net/BBQ__ZXB/article/details/124192251</a></td></tr><tr><td>Java中使用JedisAPI操作Redis中五大基本数据类型</td><td><a href=\"https://blog.csdn.net/BBQ__ZXB/article/details/124194220\">https://blog.csdn.net/BBQ__ZXB/article/details/124194220</a></td></tr><tr><td>Spring boot整合Redis（入门教程）</td><td><a href=\"https://blog.csdn.net/BBQ__ZXB/article/details/124301234\">https://blog.csdn.net/BBQ__ZXB/article/details/124301234</a></td></tr><tr><td>Redis主从复制详解（入门教程）</td><td><a href=\"https://blog.csdn.net/BBQ__ZXB/article/details/124802602\">https://blog.csdn.net/BBQ__ZXB/article/details/124802602</a></td></tr><tr><td>Spring boot整合Redis实现发布订阅（超详细）</td><td><a href=\"https://blog.csdn.net/BBQ__ZXB/article/details/124980860\">https://blog.csdn.net/BBQ__ZXB/article/details/124980860</a></td></tr><tr><td>Redis执行save命令时报错ERR</td><td><a href=\"https://blog.csdn.net/BBQ__ZXB/article/details/123995289\">https://blog.csdn.net/BBQ__ZXB/article/details/123995289</a></td></tr></tbody></table>\n<hr/>\n<h1><a id=\"_17\"></a>基础知识</h1>\n<p>Redis发布订阅（pub/sub）是一种消息通信模式：发送者（pub）发送消息，订阅者（sub）接收信息。微信，微博，关注系统<br/> Redis客户端可以订阅任意数量的频道</p>\n<p>订阅/发布消息图：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\60047df223d04285afea73d1cacfa688.png\"/><br/> 剖析：<br/> 1.消息发送者，2.频道，3.消息订阅者</p>\n<p>下图展示频道channel1，以及订阅这个频道的三个客户端–client2，client5和client1之间的关系<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ae3ee06fde0b4b81ad1278a920dbfcc2.png\"/><br/> 当有新消息通过PUBLISH命令发送给频道channel1时，这个消息就会被发送给订阅它的三个客户端<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ce1bfeef41514ea59745f713fc49d439.png\"/></p>\n<hr/>\n<h1><a id=\"_34\"></a>相关命令</h1>\n<h2><a id=\"_36\"></a>订阅者/等待接收消息</h2>\n<p>首先打开 Redis 客户端，然后订阅了一个名为“bbx”的 channel，使用如下命令:</p>\n<pre><code class=\"prism language-bash\"><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>&gt;</span> SUBSCRIBE bbx\nReading messages<span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">(</span>press Ctrl-C to quit<span class=\"token punctuation\">)</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"subscribe\"</span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"bbx\"</span>\n<span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span>\n</code></pre>\n<p>使用SUBSCRIBE命令订阅了名为 bbx 的 channel。命令执行后该客户端会出处于等待接收消息的阻塞状态。</p>\n<h2><a id=\"_48\"></a>发布者/发送消息</h2>\n<p>下面再启动一个 Redis 客户端，输入如下命令：</p>\n<pre><code class=\"prism language-bash\"><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>&gt;</span> PUBLISH bbx hello\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span>\n<span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>&gt;</span> PUBLISH bbx world\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span>\n<span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>&gt;</span> \n\n</code></pre>\n<h2><a id=\"_59\"></a>订阅者/成功接收消息</h2>\n<pre><code class=\"prism language-bash\"><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>&gt;</span> SUBSCRIBE bbx\nReading messages<span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">(</span>press Ctrl-C to quit<span class=\"token punctuation\">)</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"subscribe\"</span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"bbx\"</span>\n<span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span>\n<span class=\"token comment\">#等待读取推送消息</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message\"</span>\t<span class=\"token comment\">#消息</span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"bbx\"</span>\t\t<span class=\"token comment\">#频道</span>\n<span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"hello\"</span>\t\t<span class=\"token comment\">#消息具体内容</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message\"</span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"bbx\"</span>\n<span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"world\"</span>\n\n</code></pre>\n<h2><a id=\"_76\"></a>常用命令汇总</h2>\n<table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>PSUBSCRIBE pattern [pattern …]</td><td>订阅一个或多个符合指定模式的频道</td></tr><tr><td>PUBSUB subcommand [argument [argument …]]</td><td>查看发布/订阅系统状态，可选参数 <br/> 1) channel 返回在线状态的频道<br/>2) numpat 返回指定模式的订阅者数量<br/>3) numsub 返回指定频道的订阅者数量</td></tr><tr><td>PUBSUB subcommand [argument [argument …]]</td><td>将信息发送到指定的频道</td></tr><tr><td>PUNSUBSCRIBE [pattern [pattern …]]</td><td>退订所有指定模式的频道</td></tr><tr><td>SUBSCRIBE channel [channel …]</td><td>订阅一个或者多个频道的消息</td></tr><tr><td>UNSUBSCRIBE [channel [channel …]]</td><td>退订指定的频道</td></tr></tbody></table>\n<hr/>\n<h1><a id=\"_88\"></a>原理</h1>\n<p>Redis是使用C实现的，可以通过分析Redis源码里的pubsub.c文件，了解发布和订阅机制的底层实现</p>\n<p>Redis通过PUBLISH，SUBSCRIBE和PSUBSCRIBE等命令实现发布和订阅功能</p>\n<p>通过SUBSCRIBE命令订阅某频道后，redis-server里维护了一个字典，字典的键就是一个频道，字典的值则是一个链表，链表中保存了所有订阅这个频道的客户端。SUBSCRIBE命令的关键，就是将客户端添加到给定频道的订阅链表中。</p>\n<p>通过PUBLISH命令向订阅者发送消息，redis-server会使用给定频道作为键，在它维护的频道字典中查找记录了订阅这个频道的所有客户端的链表，将消息发布给所有订阅者</p>\n<p>Pub和Sub从字面上理解就是发布（Publish）和订阅（Subscribe），在redis中，可以设定对某一个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应的信息，这一功能最明显的用法就是实时消息系统，比如普通的即时聊天，群聊等功能。</p>\n<hr/>\n<h1><a id=\"Spring_bootredis_101\"></a>Spring boot整合redis</h1>\n<h2><a id=\"_102\"></a>导入依赖</h2>\n<pre><code class=\"prism language-bash\"> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--操作redis--<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>dependency<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>groupId<span class=\"token operator\">&gt;</span>org.springframework.boot<span class=\"token operator\">&lt;</span>/groupId<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>artifactId<span class=\"token operator\">&gt;</span>spring-boot-starter-data-redis<span class=\"token operator\">&lt;</span>/artifactId<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>/dependency<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h2><a id=\"Redis_111\"></a>Redis配置</h2>\n<pre><code class=\"prism language-bash\"><span class=\"token comment\">#SpringBoot 所有的配置类，都有一个自动配置类 RedisAutoConfiguration</span>\n<span class=\"token comment\">#自动配置类都每绑定一个properties配置文件  RedisProperties</span>\n\n<span class=\"token comment\">#配置redis</span>\nspring.redis.host<span class=\"token operator\">=</span>localhost\nspring.redis.port<span class=\"token operator\">=</span><span class=\"token number\">6379</span>\n<span class=\"token comment\"># Redis服务器连接密码（默认为空）</span>\nspring.redis.password<span class=\"token operator\">=</span>*****\n<span class=\"token comment\">#默认是数据库0</span>\nspring.redis.database<span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token comment\"># 连接池最大连接数（使用负值表示没有限制） 默认 8</span>\nspring.redis.lettuce.pool.max-active<span class=\"token operator\">=</span><span class=\"token number\">8</span>\n<span class=\"token comment\"># 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1</span>\nspring.redis.lettuce.pool.max-wait<span class=\"token operator\">=</span>-1\n<span class=\"token comment\"># 连接池中的最大空闲连接 默认 8</span>\nspring.redis.lettuce.pool.max-idle<span class=\"token operator\">=</span><span class=\"token number\">8</span>\n<span class=\"token comment\"># 连接池中的最小空闲连接 默认 0</span>\nspring.redis.lettuce.pool.min-idle<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n\n\n</code></pre>\n<h2><a id=\"MessageDto_137\"></a>消息封装类（MessageDto）</h2>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MessageDto</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> content<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"Redis_150\"></a>Redis配置类</h2>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisConfig</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//编写配置类，可模仿RedisAutoConfiguration配置类，该类在开发中可直接使用</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">redisTemplate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span> factory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//由于源码autoConfig中是&lt;Object, Object&gt;，开发中一般直接使用&lt;String,Object&gt;</span>\n        <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> template <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        template<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionFactory</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//Json序列化配置</span>\n        <span class=\"token class-name\">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jackson2JsonRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ObjectMapper</span> om <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        om<span class=\"token punctuation\">.</span><span class=\"token function\">setVisibility</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PropertyAccessor</span><span class=\"token punctuation\">.</span>ALL<span class=\"token punctuation\">,</span> <span class=\"token class-name\">JsonAutoDetect<span class=\"token punctuation\">.</span>Visibility</span><span class=\"token punctuation\">.</span>ANY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        om<span class=\"token punctuation\">.</span><span class=\"token function\">enableDefaultTyping</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectMapper<span class=\"token punctuation\">.</span>DefaultTyping</span><span class=\"token punctuation\">.</span>NON_FINAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        jackson2JsonRedisSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">setObjectMapper</span><span class=\"token punctuation\">(</span>om<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//String的序列化</span>\n        <span class=\"token class-name\">StringRedisSerializer</span> stringRedisSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//key采用string的序列化</span>\n        template<span class=\"token punctuation\">.</span><span class=\"token function\">setKeySerializer</span><span class=\"token punctuation\">(</span>stringRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//hash的key采用string的序列化</span>\n        template<span class=\"token punctuation\">.</span><span class=\"token function\">setKeySerializer</span><span class=\"token punctuation\">(</span>stringRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//value序列化采用jackson</span>\n        template<span class=\"token punctuation\">.</span><span class=\"token function\">setValueSerializer</span><span class=\"token punctuation\">(</span>jackson2JsonRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//hash的value序列化方式采用jackson</span>\n        template<span class=\"token punctuation\">.</span><span class=\"token function\">setValueSerializer</span><span class=\"token punctuation\">(</span>jackson2JsonRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        template<span class=\"token punctuation\">.</span><span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> template<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Redis消息监听器容器\n     * 这个容器加载了RedisConnectionFactory和消息监听器\n     * 可以添加多个监听不同话题的redis监听器，只需要把消息监听器和相应的消息订阅处理器绑定，该消息监听器\n     * 通过反射技术调用消息订阅处理器的相关方法进行一些业务处理\n     *\n     * @param redisConnectionFactory 连接工厂\n     * @param adapter                适配器\n     * @return redis消息监听容器\n     */</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RedisMessageListenerContainer</span> <span class=\"token function\">container</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span> redisConnectionFactory<span class=\"token punctuation\">,</span>\n                                                   <span class=\"token class-name\">RedisMessageListener</span> listener<span class=\"token punctuation\">,</span>\n                                                   <span class=\"token class-name\">MessageListenerAdapter</span> adapter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> TOPIC_NAME1 <span class=\"token operator\">=</span> <span class=\"token string\">\"TEST_TOPIC1\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 订阅主题</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> TOPIC_NAME2 <span class=\"token operator\">=</span> <span class=\"token string\">\"TEST_TOPIC2\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 订阅主题</span>\n        <span class=\"token class-name\">RedisMessageListenerContainer</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisMessageListenerContainer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 监听所有库的key过期事件</span>\n        container<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionFactory</span><span class=\"token punctuation\">(</span>redisConnectionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 所有的订阅消息，都需要在这里进行注册绑定,new PatternTopic(TOPIC_NAME1)表示发布的主题信息</span>\n        <span class=\"token comment\">// 可以添加多个 messageListener，配置不同的通道</span>\n        container<span class=\"token punctuation\">.</span><span class=\"token function\">addMessageListener</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PatternTopic</span><span class=\"token punctuation\">(</span>TOPIC_NAME1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        container<span class=\"token punctuation\">.</span><span class=\"token function\">addMessageListener</span><span class=\"token punctuation\">(</span>adapter<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PatternTopic</span><span class=\"token punctuation\">(</span>TOPIC_NAME2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/**\n         * 设置序列化对象\n         * 特别注意：1. 发布的时候需要设置序列化；订阅方也需要设置序列化\n         *         2. 设置序列化对象必须放在[加入消息监听器]这一步后面，否则会导致接收器接收不到消息\n         */</span>\n        <span class=\"token class-name\">Jackson2JsonRedisSerializer</span> seria <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jackson2JsonRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ObjectMapper</span> objectMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">setVisibility</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PropertyAccessor</span><span class=\"token punctuation\">.</span>ALL<span class=\"token punctuation\">,</span> <span class=\"token class-name\">JsonAutoDetect<span class=\"token punctuation\">.</span>Visibility</span><span class=\"token punctuation\">.</span>ANY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">enableDefaultTyping</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectMapper<span class=\"token punctuation\">.</span>DefaultTyping</span><span class=\"token punctuation\">.</span>NON_FINAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        seria<span class=\"token punctuation\">.</span><span class=\"token function\">setObjectMapper</span><span class=\"token punctuation\">(</span>objectMapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        container<span class=\"token punctuation\">.</span><span class=\"token function\">setTopicSerializer</span><span class=\"token punctuation\">(</span>seria<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> container<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 这个地方是给messageListenerAdapter 传入一个消息接受的处理器，利用反射的方法调用“receiveMessage”\n     * 也有好几个重载方法，这边默认调用处理器的方法 叫OnMessage\n     *\n     * @param printMessageReceiver\n     * @return\n     */</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MessageListenerAdapter</span> <span class=\"token function\">listenerAdapter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PrintMessageReceiver</span> printMessageReceiver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">MessageListenerAdapter</span> receiveMessage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageListenerAdapter</span><span class=\"token punctuation\">(</span>printMessageReceiver<span class=\"token punctuation\">,</span> <span class=\"token string\">\"receiveMessage\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Jackson2JsonRedisSerializer</span> seria <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jackson2JsonRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ObjectMapper</span> objectMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">setVisibility</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PropertyAccessor</span><span class=\"token punctuation\">.</span>ALL<span class=\"token punctuation\">,</span> <span class=\"token class-name\">JsonAutoDetect<span class=\"token punctuation\">.</span>Visibility</span><span class=\"token punctuation\">.</span>ANY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">enableDefaultTyping</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectMapper<span class=\"token punctuation\">.</span>DefaultTyping</span><span class=\"token punctuation\">.</span>NON_FINAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        seria<span class=\"token punctuation\">.</span><span class=\"token function\">setObjectMapper</span><span class=\"token punctuation\">(</span>objectMapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        receiveMessage<span class=\"token punctuation\">.</span><span class=\"token function\">setSerializer</span><span class=\"token punctuation\">(</span>seria<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> receiveMessage<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>该类中，可以通过调用消息接收容器（container）的 addMessageListener(MessageListener listener, Topic topic) 方法 订阅消息；相反地，也可以调用它的 removeMessageListener(MessageListener listener, Topic topic) 方法 取消订阅消息；在这里我们分别使用两种实现方式去订阅两个不通的频道（channel）。</p>\n<ol><li>RedisMessageListener 通过实现MessageListener接口，从而实现该接口中的onMessage(Message message, byte[] pattern)方法。</li><li>MessageListenerAdapter 通过适配器的方式，自定义一个消息接收类PrintMessageReceiver和接收消息的方法</li></ol>\n<pre><code class=\"prism language-java\">  container<span class=\"token punctuation\">.</span><span class=\"token function\">addMessageListener</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PatternTopic</span><span class=\"token punctuation\">(</span>TOPIC_NAME1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">addMessageListener</span><span class=\"token punctuation\">(</span>adapter<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PatternTopic</span><span class=\"token punctuation\">(</span>TOPIC_NAME2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>分别使用listener去订阅主题TOPIC_NAME1，adapter去订阅TOPIC_NAME2。<br/> 接下来分别探讨测试这两种方式。</p>\n<h2><a id=\"_261\"></a>测试类</h2>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisMessageTest</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RedisUtils</span> redisUtils<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> TOPIC_NAME1 <span class=\"token operator\">=</span> <span class=\"token string\">\"TEST_TOPIC1\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 订阅主题</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> TOPIC_NAME2 <span class=\"token operator\">=</span> <span class=\"token string\">\"TEST_TOPIC2\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 订阅主题</span>\n        <span class=\"token comment\">// 发布消息</span>\n        <span class=\"token class-name\">MessageDto</span> dto <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageDto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">LocalDateTime</span> now <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">DateTimeFormatter</span> timeFormatter <span class=\"token operator\">=</span> <span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss.SSS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dto<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>timeFormatter<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dto<span class=\"token punctuation\">.</span><span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"日常信息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dto<span class=\"token punctuation\">.</span><span class=\"token function\">setContent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        redisUtils<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span>TOPIC_NAME1<span class=\"token punctuation\">,</span> dto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>该类中的RedisUtils是之前自己封装的一个工具类，在该类中新增convertAndSend()方法。<br/> <a href=\"https://blog.csdn.net/BBQ__ZXB/article/details/124301234\">RedisUtils中其他方法可跳转此连接查看</a></p>\n<pre><code class=\"prism language-java\">\t<span class=\"token comment\">/**\n     * 向通道发布消息\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> channel<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasText</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送消息成功，channel：{}，message：{}\"</span><span class=\"token punctuation\">,</span> channel<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送消息失败，channel：{}，message：{}\"</span><span class=\"token punctuation\">,</span> channel<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"RedisMessageListener_311\"></a>订阅方实现一：RedisMessageListener</h2>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisMessageListener</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MessageListener</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RedisTemplate</span> redisTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Message</span> message<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pattern<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token comment\">// 接收的topic</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"channel:\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//序列化对象（特别注意：发布的时候需要设置序列化；订阅方也需要设置序列化）</span>\n        <span class=\"token class-name\">MessageDto</span> messageDto <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageDto</span><span class=\"token punctuation\">)</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getValueSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>messageDto<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\",\"</span><span class=\"token operator\">+</span>messageDto<span class=\"token punctuation\">.</span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>对使用RedisMessageListener 进行接收消息测试。<br/> 测试结果：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\722a162cc96549d994dfbdef6ba0ae41.png\"/></p>\n<h2><a id=\"PrintMessageReceiver_336\"></a>订阅方实现二：PrintMessageReceiver</h2>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrintMessageReceiver</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RedisTemplate</span> redisTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">receiveMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageDto</span> messageDto <span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> channel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token comment\">// 接收的topic</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"channel:\"</span> <span class=\"token operator\">+</span> channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message:\"</span> <span class=\"token operator\">+</span> messageDto<span class=\"token punctuation\">.</span><span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>注意：该方法的接收参数类型以及顺序，查阅源码得知，该方法的参数可以是一个（只有消息message），也可是两个（message，channel）并且顺序不能变。<br/> 在测试类中将 redisUtils.convertAndSend(TOPIC_NAME1, dto);中的TOPIC_NAME1改为TOPIC_NAME2，<br/> 测试结果：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\084f45010d0c44b7a1a855b331285705.png\"/></p>\n<h2><a id=\"MessageListenerAdapter_360\"></a>MessageListenerAdapter源码分析</h2>\n<ol><li>构造函数</li></ol>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">MessageListenerAdapter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> delegate<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> defaultListenerMethod<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>delegate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">setDefaultListenerMethod</span><span class=\"token punctuation\">(</span>defaultListenerMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>其中this()方法中，初始化了序列化方式，该适配器默认的序列化方式是UTF-8的字符串序列化。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d1937c5e17c1482f909a065c0af8f9b1.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bc45495a1bbc4e71b06c66a050ddb69d.png\"/><br/> 2.onMessage()</p>\n<pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Message</span> message<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pattern<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token comment\">// Check whether the delegate is a MessageListener impl itself.</span>\n\t\t\t<span class=\"token comment\">// In that case, the adapter will simply act as a pass-through.</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>delegate <span class=\"token operator\">!=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>delegate <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MessageListener</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageListener</span><span class=\"token punctuation\">)</span> delegate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token comment\">// Regular case: find a handler method reflectively.</span>\n\t\t\t<span class=\"token class-name\">Object</span> convertedMessage <span class=\"token operator\">=</span> <span class=\"token function\">extractMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">String</span> convertedChannel <span class=\"token operator\">=</span> stringSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// Invoke the handler method with appropriate arguments.</span>\n\t\t\t<span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> listenerArguments <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{<!-- --></span> convertedMessage<span class=\"token punctuation\">,</span> convertedChannel <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token function\">invokeListenerMethod</span><span class=\"token punctuation\">(</span>invoker<span class=\"token punctuation\">.</span><span class=\"token function\">getMethodName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> listenerArguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> th<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">handleListenerException</span><span class=\"token punctuation\">(</span>th<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>该方法当订阅频道有消息时默认执行，首先，if(delegate instanceof MessageListener)判断该对象的类是不是实现了MessageListener接口，如果是，就会执行它实现的onMessage()。很显然，我们是自定义的<br/> PrintMessageReceiver 对象，，所以接着往下看。<br/> Object convertedMessage = extractMessage(message);会将message反序列化，如未自定义序列化方式，就会用使用默认的字符串序列化，这就是为什么我们在RedisConfig类中注入listenerAdapter对象时，自定义了Jackson2JsonRedisSerializer 。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\07ad3aaa53c44b199359bc4047f2f596.png\"/><br/> 3. invokeListenerMethod(invoker.getMethodName(), listenerArguments);<br/> 通过反射查找定义对象中处理消息的方法。我们会看到如下的方法实现。</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">void</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arguments<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t\t\t<span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> message <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{<!-- --></span> arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> m <span class=\"token operator\">:</span> methods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n\t\t\t\t<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> types <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args <span class=\"token operator\">=</span> <span class=\"token comment\">//</span>\n\t\t\t\t\t\ttypes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token comment\">//</span>\n\t\t\t\t\t\t\t\t<span class=\"token operator\">&amp;&amp;</span> types<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInstance</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//</span>\n\t\t\t\t\t\t\t\t<span class=\"token operator\">&amp;&amp;</span> types<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInstance</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> arguments <span class=\"token operator\">:</span> message<span class=\"token punctuation\">;</span>\n\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>types<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t\tm<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>delegate<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ca829de5a3154d0e96079e5b50651e4e.png\"/><br/> 从而得知我们自定义方法中参数个数可以是一个也可以是两个，如两个参数时，第一个参数接收消息（message），第二个参数接收频道（channel），也可得知为什么自定义方法中，接收消息参数类型我们可以直接写MessageDto。</p>\n<hr/>\n<p>以上内容如有不对之处，还望不吝赐教。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-05-30 21:37:43", "summary": "发布订阅基础知识相关命令订阅者等待接收消息发布者发送消息订阅者成功接收消息常用命令汇总原理整合导入依赖配置消息封装类配置类测试类订阅方实现一：订阅方实现二：源码分析以下是相关笔记总结，方便自己以后复习"}