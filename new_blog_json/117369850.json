{"blogid": "117369850", "writerAge": "码龄4年", "writerBlogNum": "2", "writerCollect": "57", "writerComment": "2", "writerFan": "4", "writerGrade": "1级", "writerIntegral": "42", "writerName": "AD钙奶吖", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_117369850.jpg", "writerRankTotal": "1296197", "writerRankWeekly": "494968", "writerThumb": "15", "writerVisitNum": "9035", "blog_read_count": "7945", "blog_time": "已于 2022-07-24 11:15:15 修改", "blog_title": "C#正则表达式用法总结", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>最近学是C#的窗口应用开发编程，然后我在网站搜了一个早上，结果大多数是有一些基础的才看得懂，像对与我这个小白，看了半天都看不懂<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210528200844859.jpg\"/></p>\n<p>最后，还是请教了大神，把我教会了</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210528201039791.jpg\"/></p>\n<p>下面就我对C#的正则表达式的一些总结，第一次写博客，哈哈哈哈，写的不好请见谅,各位大佬们，爱你们。</p>\n<h2><a id=\"1_9\"></a>1.正则表达式的概念</h2>\n<p>什么是正则表达式?</p>\n<p>英文Regular Expression,是计算机科学的一一个 重要概念，她使用一种数学算法来解决计算机程序中的文本检索，匹配等问题，正则表达式语言是一种专门用于字符串处理的语言。在很多语言中都提供了对它的支持，C#也不例外，它可以帮我们解决下面的问题:例如账号、密码的验证等等、</p>\n<h4><a id=\"11_15\"></a>1.1正则表达式的组成</h4>\n<p>正则表达式就是由普通字符以及特殊字符(成为元字符)组成的文字模式。该模式描述在查找文字</p>\n<h5><a id=\"111_19\"></a>1.1.1元字符是什么</h5>\n<p>所谓元字符就是指那些在正则表达式中<strong>具有特殊意义</strong>的专用字符，可以用来规定其前导字符（即位于元字符前面的字符）在目标对象中的出现模式。</p>\n<h5><a id=\"112_23\"></a>1.1.2定位元字符</h5>\n<p>字符 说明</p>\n<ul><li> <p>\\b 匹配单词的开始或结束.</p> </li><li> <p>\\B 匹配非单词的开始或结束</p> </li><li> <p>^匹配必须出现在字符串的开头或行的开头</p> </li><li> <p>$匹配必须出现在以下位置: 字符串结尾、字符串结尾处的\\n之前或行的结尾。</p> </li><li> <p>\\A 指定匹配必须出 现在字符串的开头(忽略 Mutiline 选项)。</p> </li><li> <p>\\z指定匹配必 须出现在字符串的结尾(忽略 Multiline选项)。</p> </li><li> <p>\\z指定匹配必须出现在字符串的结尾或字符串结尾处的\\n之前(忽略Multilie选项)。</p> </li><li> <p>\\G 指定匹配必须出现在上- -个匹配结束的地方。与Match.NextMatch() -起使用时，此断言确保所有匹配都是连续的。</p> </li></ul>\n<h4><a id=\"12_44\"></a>1.2三个括号😳</h4>\n<p>在正则表达式中有3种类型的括号</p>\n<p>他们分别是:方括号、花括号、圆括号、(简称方花园)😁</p>\n<p>方括号“[“和花括号“{“●<br/> 方括号\"[“内是<strong>需要匹配的字符,</strong><br/> 花括号”{\"内是<strong>指定匹配字符的数量。</strong></p>\n<p>圆括号“(“ ：表示用来<strong>分组</strong>的。<br/> 插入符号“入”：表示正则式的<strong>开始</strong>。<br/> 美元符号“$” ：表示正则式的<strong>结束</strong>。</p>\n<h4><a id=\"13_58\"></a>1.3简化正则表达式</h4>\n<table><thead><tr><th>实际命令</th><th>快捷命令</th></tr></thead><tbody><tr><td>[0-9](数字)</td><td>d</td></tr><tr><td>[a-z][0-9][_](数字、字母、下划线)</td><td>W</td></tr><tr><td>0次或多次发生</td><td>*</td></tr><tr><td>至少一次发生</td><td>+</td></tr><tr><td>0次或1次发生</td><td>?</td></tr></tbody></table>\n<h4><a id=\"14_68\"></a>1.4@符号的作用</h4>\n<p>我们经常在正则表达式字符串上加@字符，目的就是为了，不让编译器去解析其中的转义字符，，而作为正则表达式语法(元字符)存在。</p>\n<pre><code class=\"prism language-csharp\">在这里插入代码片\n</code></pre>\n<h4><a id=\"15_78\"></a>1.5正则表达式可以实现四种功能:</h4>\n<p>因为我看到其他博客说C#有很多方法可以用正则表达式，然后下面的一些例子，都用的是我认为，比较简单的方法。大神勿喷，┗|｀O′|┛ 嗷~~</p>\n<p>温馨提示:要运用下面的一些语句的要引入</p>\n<p><strong>using System.Text.RegularExpressions</strong>的命名空间</p>\n<ul><li>1，获取:通过正则表达式，从字符串中获取我们想要的部分</li></ul>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\">Regex</span> reg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Regex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[0-9]*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这是搜索匹配0-9的数字</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">Match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"12asda\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//最后提取出了12成功，嘻嘻</span>\n</code></pre>\n<ul><li>2，匹配:判断给定的字符中是否符合正则表达式的过滤逻辑 你可以认为正则表达式表述了一个字符串的书写规则</li></ul>\n<pre><code class=\"prism language-csharp\">在这里的就得用从开头到结尾都为的数字为True，出现一个不为数字输出False\n<span class=\"token class-name\">Regex</span> reg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Regex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"^[0-9]*$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//判断整个字符串是否都为数字</span>\n\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">IsMatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"12asda\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//最后输出False</span>\n\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">IsMatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"124536346\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//最后输出True</span>\n</code></pre>\n<ul><li>3, 分割</li></ul>\n<pre><code class=\"prism language-csharp\"><span class=\"token number\">1</span>、用字符串分隔： \n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>RegularExpressions</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str<span class=\"token operator\">=</span><span class=\"token string\">\"aaajsbbbjsccc\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> sArray<span class=\"token operator\">=</span>Regex<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span><span class=\"token string\">\"js\"</span><span class=\"token punctuation\">,</span>RegexOptions<span class=\"token punctuation\">.</span>IgnoreCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> i <span class=\"token keyword\">in</span> sArray<span class=\"token punctuation\">)</span> Response<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n输出结果：\naaa\nbbb\nccc\n\n</code></pre>\n<pre><code class=\"prism language-csharp\"><span class=\"token number\">2</span>、用多个字符来分隔：\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str<span class=\"token operator\">=</span><span class=\"token string\">\"aaajbbbscccjdddseee\"</span><span class=\"token punctuation\">;</span> \n<span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> sArray<span class=\"token operator\">=</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">char</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token char\">'j'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'s'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> i <span class=\"token keyword\">in</span> sArray<span class=\"token punctuation\">)</span> Response<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n输出结果：\naaa\nbbb\nccc\nddd\neee\n\n</code></pre>\n<pre><code class=\"prism language-csharp\"><span class=\"token number\">3</span>、用单个字符来分隔：\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str<span class=\"token operator\">=</span><span class=\"token string\">\"aaajbbbjccc\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> sArray<span class=\"token operator\">=</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token char\">'j'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> i <span class=\"token keyword\">in</span> sArray<span class=\"token punctuation\">)</span> Response<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n输出结果：\naaa\nbbb\nccc\n</code></pre>\n<ul><li>4, 替换</li></ul>\n<pre><code class=\"prism language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"aaa12342525\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Regex</span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Regex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[0-9]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//正则表达式规则</span>\n\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这个输出为 [0-9] （我也不知道具体的原理）😭</span>\n\ns <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">\"9\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//第一个参数是字符串，第二个是正确匹配字符串的时候要替换的字符，第三个参数就是正确匹配正则表达式，然后替换的次数</span>\n\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//输出aaa92342525</span>\n</code></pre>\n<h2><a id=\"2_161\"></a>2.常用的正则表达式方法</h2>\n<h4><a id=\"21IsMath_162\"></a>2.1静态方法IsMath</h4>\n<p>1,静态方法IsMatch</p>\n<p>IsMath(返回值是一个布尔类型,用于判断指定的字符串是否与正则表达式字符中匹配，它有<strong>三个重载方法</strong>)</p>\n<p>bool IsMatch(string input, string pattern);</p>\n<p>参数:</p>\n<p>input: 要搜索匹配项的字符串。</p>\n<p>pattern:要匹配的正则表达式模式。</p>\n<p>返回结果:如果正则表达式找到匹配项，则为true;否则，为false。</p>\n<p>bool IsMatch(string inpdt, string pattern, RegexOptions options)；</p>\n<p>参数:</p>\n<p>input: 要搜索匹配项的字符串。</p>\n<p>pattern:要匹配的正则表达式模式。</p>\n<p>options:枚举值 的一一个按位组合， 这些枚举值提供匹配选项。</p>\n<p>返回结果:如果正则表达式找到匹配项，则为true;否则，为false。</p>\n<p>bool IsMatch(string input, string pattern, RegexOptions options, TimeSpan matchTimeout);<br/> 参数:<br/> input: 要搜索匹配项的字符串。</p>\n<p>pattern:要匹配的正则表达式模式。</p>\n<p>options:枚举值的一个按位组合，这些枚举值提供匹配选项。</p>\n<p>matchTimeout:超时间隔</p>\n<p>或</p>\n<p>System.Text.RegularExpressions.Regex.InfiniteMatchTimeout 指示该方法不应超时。<br/> 返回结果:如果正则表达式找到匹配项，则为true;否则，为false。</p>\n<h5><a id=\"211_RegexOptions_205\"></a>2.1.1 关于参数RegexOptions</h5>\n<pre><code class=\"prism language-csharp\">它是一个枚举类型，有以下枚举值\n\n\nRegexOptions枚举值          内联标志         简单说明\nExplicitCapture               n           只有定义了命名或编号的组才捕获\nIgnoreCase                    i           不区分大小写\nIgnorePatternWhitespace       x           消除模式中的非转义空白并启用由#标记的注释。\nMultiLine                     m           多行模式，其原理是修改了<span class=\"token operator\">^</span>和$的含义\nSingleLine                    s            单行模式，和Multiline相对 \n\n</code></pre>\n<h4><a id=\"22Match_220\"></a>2.2静态方法Match</h4>\n<p>Match的作用:使用指定的匹配选项在输入字符串中搜索指定的正则表达式的第一个匹配<br/> 项。返回一个包含有关匹配的信息的对象。同样有三个重载方法，参数和IsMatch方法相同。<br/> 此外，在Regex类中， 还有一个同名的非静态方法，适用于多个实例的情况下，效率更高- - 些。<br/> 下面的关于Match的三个重载方法</p>\n<ul><li>Match Match(string input, string pattern);</li><li>Match Match(string input,string pattern, RegexOptions options); input,</li><li>Match Match(string string pattern, RegexOptions options, TimeSpan matchTimeout);</li></ul>\n<h4><a id=\"23Matchs_230\"></a>2.3静态方法Matchs</h4>\n<p>静态方法Matches,在指定的输入字符串中搜索<strong>指定的正则表达式的所有匹配项</strong>。跟上面方法不同之处，就是这个方法返回的是<strong>所有匹配项</strong>，他同样有三个重载方法，并且参数和Match方法完全相同此外，在Regex类中，还有一个同名的非静态方法，适用于多个实例的情况下，效率更高- -些。</p>\n<h4><a id=\"24_Replaces_235\"></a>2.4 Replaces函数</h4>\n<p>我们知道正则表达式主要是实现验证，提取,分割,替换字符的功能.Replace函数是实现替换功能的.</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> input<span class=\"token punctuation\">,</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> pattern<span class=\"token punctuation\">,</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> replacement<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//input是源字 符串,pattern是匹配的条件,replacement是替换的内容,就是把符合匹配条件pattern的内容转换成它</span>\n\n比如<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> result <span class=\"token operator\">=</span> Regex<span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ab\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n➢<span class=\"token comment\">//结果是#c,就是把字符串abc中的ab替换成#</span>\n\n<span class=\"token number\">2</span> <span class=\"token punctuation\">)</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> input<span class=\"token punctuation\">,</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> pattern<span class=\"token punctuation\">,</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> replacement<span class=\"token punctuation\">,</span><span class=\"token class-name\">RegexOptions</span> options<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//RegexOptions是- 一个枚举类型,用来做- -些设定</span>\n\n<span class=\"token comment\">//前面用注释时 就用到了RegexOptions.IgnorePatternWhitespace.如果在匹配时忽略大小写就可以用</span>\n\nRegexOptions<span class=\"token punctuation\">.</span>lgnoreCase\n\n比如<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> result <span class=\"token operator\">=</span> Regex<span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ABc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ab\"</span><span class=\"token punctuation\">,</span> “#\" <span class=\"token punctuation\">,</span>RegexOptions<span class=\"token punctuation\">.</span>lgnoreCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-07-24 11:15:15", "summary": "最近学是的窗口应用开发编程，然后我在网站搜了一个早上，结果大多数是有一些基础的才看得懂，像对与我这个小白，看了半天都看不懂在这里插入图片描述最后，还是请教了大神，把我教会了在这里插入图片描述下面就我对"}