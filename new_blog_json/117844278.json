{"blogid": "117844278", "writerAge": "码龄6年", "writerBlogNum": "116", "writerCollect": "12469", "writerComment": "2744", "writerFan": "23423", "writerGrade": "7级", "writerIntegral": "13559", "writerName": "欧阳呀", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_117844278.jpg", "writerRankTotal": "694", "writerRankWeekly": "1681", "writerThumb": "5522", "writerVisitNum": "918722", "blog_read_count": "72323", "blog_time": "于 2021-06-15 08:02:45 发布", "blog_title": "JavaScript保姆级教程 ——— 重难点详细解析（万字长文，建议收藏）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>JavaScript保姆级教程 ——— 重难点详细解析（建议收藏）</h3>\n<ul><li><ul><li><a href=\"#1_JS_5\">1. JS函数</a></li><li><a href=\"#2_JS_140\">2. JS事件</a></li><li><a href=\"#3_JavaScript__189\">3. JavaScript 对象</a></li><li><a href=\"#4_JavaScript_prototype_251\">4. JavaScript prototype（原型对象）</a></li><li><a href=\"#5__callapplybind_324\">5. call和apply及bind三者的区别（面试重点）</a></li><li><a href=\"#6_Javascript_416\">6. Javascript的事件流模型（面试重点）</a></li><li><a href=\"#7__424\">7. 防抖与节流（面试精选）</a></li><li><a href=\"#8_JSDOM_477\">8. JS中的虚拟DOM是什么？（面试重点）</a></li><li><a href=\"#9_new_493\">9. 手写一个new，实现同等功能</a></li><li><a href=\"#10_url_514\">10. 获得页面url参数的值（常用）</a></li></ul>\n</li></ul>\n</div>\n<p></p>\n<ul><li>本文是整理了JS中的一些<strong>重点，难点，以及不好理解的知识点</strong></li><li><strong>本文非常详细</strong>，深入的讲解，<strong>包学包会</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2021060200443316.png\"/></li></ul>\n<h2><a id=\"1_JS_5\"></a>1. JS函数</h2>\n<blockquote>\n<p><strong>1.1 函数(Function)是什么？</strong></p>\n</blockquote>\n<ul><li>函数（方法）是由事件驱动的或者当它被调用时执行的可重复使用的代码块 —— 官方说明</li><li>向来觉得官方的文档是有些生硬的，举个例子：</li></ul>\n<p><strong>函数可以看做是功能（以一辆汽车为例，如下图）,这些都可以看做成是方法</strong></p>\n<ul><li>刹车</li><li>油门</li><li>鸣笛</li><li>档位</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210612130710428.png\"/></p>\n<ul><li>这些功能任何一个里面都有很多个零件的配合，共同完成某一个任务，我们只需要去调用（踩刹车，踩油门，按喇叭，挂挡），功能就会执行</li><li>函数也是一样的，<strong>它内部封装了一些操作，只有我们去调用的时候才会执行</strong></li></ul>\n<blockquote>\n<p><strong>1.2 一个最简单的函数及触发方法</strong></p>\n</blockquote>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>html<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>head<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">&gt;</span>我的第一个方法<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>body<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>button onclick<span class=\"token operator\">=</span><span class=\"token string\">\"myFunction()\"</span><span class=\"token operator\">&gt;</span>点击触发函数<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n            <span class=\"token comment\">// 必须有 function关键字，命名通常为驼峰命名，首字母小写</span>\n            <span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是我的函数\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">&gt;</span>\n</code></pre>\n<blockquote>\n<p><strong>1.3 带参数的函数（形参与实参）</strong></p>\n</blockquote>\n<ul><li>形参 : 函数中定义的变量（此时是没有值的，只是一个代称）</li><li>实参 : 在运行时的函数调用时传入的参数（实际的值）</li><li>js中，方法中即使定义了形参，<strong>调用时不传实参也不会报错</strong></li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>html<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>head<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">&gt;</span>形参与实参<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>body<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 这里的<span class=\"token number\">5</span>和<span class=\"token number\">2</span>是实参 <span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>button onclick<span class=\"token operator\">=</span><span class=\"token string\">\"addNum(5, 2)\"</span><span class=\"token operator\">&gt;</span>计算<span class=\"token number\">5</span><span class=\"token operator\">+</span><span class=\"token number\">2</span>的值<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n            <span class=\"token comment\">// 此处的num1，与num2便是形参</span>\n            <span class=\"token keyword\">function</span> <span class=\"token function\">addNum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num1<span class=\"token punctuation\">,</span> num2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">&gt;</span>\n</code></pre>\n<blockquote>\n<p><strong>1.4 带有返回值的函数 ———— return</strong></p>\n</blockquote>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> a<span class=\"token operator\">*</span>b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 调用并给num赋值</span>\n<span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 得到15</span>\n</code></pre>\n<blockquote>\n<p><strong>1.5 js函数内置对象 ———— arguments（重点，考点）</strong></p>\n</blockquote>\n<ul><li>它是函数一创建就有的</li><li><strong>是一个类数组（并不是真正的数组）</strong></li><li>方法调用时，可以得到所有传进来的参数</li><li>你传多少，我就能拿到多少</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210612132154839.png\"/><br/> <strong>经典应用 ———— 求一组参数的总和</strong></p>\n<pre><code class=\"prism language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        sum <span class=\"token operator\">+=</span> arguments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 返回 sum</span>\n    <span class=\"token keyword\">return</span> sum\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">let</span> allSum <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>allSum<span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 得到10</span>\n</code></pre>\n<blockquote>\n<p><strong>1.6 函数内的变量</strong></p>\n</blockquote>\n<ul><li>在函数内的定义的变量均为局部变量</li><li>函数运行完之后就会销毁（垃圾回收机制），所以外界无法访问</li><li>变量应尽量避免重名（<strong>局部与全局变量可能会混淆，导致一些意料之外的问题</strong>）</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 此为局部变量</span>\n    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 此处报错，无法访问</span>\n</code></pre>\n<blockquote>\n<p><strong>1.7 匿名函数（难点）</strong></p>\n</blockquote>\n<ul><li>顾名思义指的是没有名字的函数</li><li>必须采用下面的语法，否则会报错</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//由于没有执行该匿名函数，所以不会执行匿名函数体内的语句。</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"666\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>匿名自执行函数（类似于JS的单例模式）</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"666\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 此处会打印666</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"2_JS_140\"></a>2. JS事件</h2>\n<ul><li>HTML 事件是发生在 HTML 元素上的事情。</li><li>JavaScript 可以触发这些事件。</li><li><strong>可以看做是用户的某些操作，或者说业务需要监听的某些操作</strong></li></ul>\n<blockquote>\n<p><strong>2.1 HTML事件</strong></p>\n</blockquote>\n<ul><li>HTML 页面完成加载</li><li>HTML input 字段改变时</li><li>HTML 按钮被点击</li></ul>\n<p><strong>常用事件整理</strong></p>\n<table><thead><tr><th>事件名</th><th>说明</th></tr></thead><tbody><tr><td>onchange()</td><td>HTML 元素改变（一般用于表单元素）</td></tr><tr><td>onclick ()</td><td>用户点击 HTML 元素</td></tr><tr><td>onmouseover()</td><td>用户在一个HTML元素上移动鼠标</td></tr><tr><td>onmouseout()</td><td>用户从一个HTML元素上移开鼠标</td></tr><tr><td>onkeydown()</td><td>用户按下键盘按键</td></tr><tr><td>onkeyup()</td><td>键盘按键弹起</td></tr><tr><td>onload()</td><td>浏览器已完成页面的加载</td></tr></tbody></table>\n<blockquote>\n<p><strong>2.2 JavaScript 事件一般用于做什么？</strong></p>\n</blockquote>\n<ul><li>页面加载时触发事件</li><li>页面关闭时触发事件</li><li>用户点击按钮执行动作</li><li>验证用户输入内容的合法性</li><li>…（<strong>用户的一切操作都可以监听</strong>）</li></ul>\n<blockquote>\n<p><strong>2.3 事件实例</strong></p>\n</blockquote>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>input id<span class=\"token operator\">=</span><span class=\"token string\">\"test\"</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"提交\"</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n<span class=\"token comment\">// 页面加载完触发</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">let</span> test <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n    test<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span>myfun2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n    test<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span>myfun1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">myfun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>  \n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">myfun2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span> \n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre>\n<blockquote>\n<h2><a id=\"3_JavaScript__189\"></a>3. JavaScript 对象</h2>\n</blockquote>\n<p><strong>在JS里 —— 万物皆为对象</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210612134412509.png\"/></p>\n<ul><li>字符串也可以是一个对象</li><li>日期是一个对象</li><li>数学和正则表达式也是对象</li><li>数组是一个对象</li><li>函数也可以是对象</li><li>…</li></ul>\n<blockquote>\n<p><strong>3.1 对象定义</strong></p>\n</blockquote>\n<ul><li>对象是变量的容器</li><li>写法以键值对的方式（键名：键值）</li><li>键值对称之为对象的属性</li><li>循环对象一般用 <mark>for in</mark></li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 对象定义</span>\n<span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    firstName<span class=\"token operator\">:</span><span class=\"token string\">\"ouyang\"</span><span class=\"token punctuation\">,</span>\n    lastName<span class=\"token operator\">:</span><span class=\"token string\">\"xiu\"</span><span class=\"token punctuation\">,</span>\n    age<span class=\"token operator\">:</span><span class=\"token number\">18</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 循环对象</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 键名</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 键值</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><strong>3.2 大厂经典面试题分析</strong></p>\n</blockquote>\n<p><strong>let obj = Object.create(null) 与 let obj = {} 有什么区别？</strong></p>\n<ul><li>之前腾讯面试的时候，问了这个问题：<strong>对象字面量创建对象与 Object.create(null)创建对象有什么区别？</strong></li><li>一开始是有点懵的，不都是创建对象么，能有啥不同，后面我去试了一下，结果发现还蛮有意思：</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li>控制台打印<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210613205730326.png\"/></li><li>乍一看，好像没啥区别，都是一个花括号</li><li>然而，<strong>展开后，确实大有不同</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210613205815414.png\"/></li><li><strong>Object.create(null)创建的对象是非常纯净的，没有任何其它元素</strong></li><li>而另一个let创建的对象是带有_proto_的，下面有一些方法与属性，<strong>这便是js的原型链继承，它继承了Object的方法和属性</strong>。这便是区别。</li></ul>\n<blockquote>\n<p><strong>所以这种区别导致了使用场景不同</strong></p>\n</blockquote>\n<ul><li>如果需要对象的继承属性和方法，那就使用 <mark>let obj = {}</mark>;</li><li>如果只需要一个纯净的对象，那就使用 <mark>Object.create(null)</mark></li><li>比如说，我只需要用对象来保存一些数据，然后进行循环取用，提高循环效率。</li><li>这个时<strong>候如果对象有原型链，那便会在循环的时候去循环它的各个属性和方法</strong></li><li>然而这不是必要的，我们只是要他里面的元素而已，<strong>前者会影响循环效率</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210613210428217.png\"/></li></ul>\n<h2><a id=\"4_JavaScript_prototype_251\"></a>4. JavaScript prototype（原型对象）</h2>\n<ul><li>此属性是<strong>函数特有的</strong></li><li>每个函数都会默认添加一个</li><li>用于<strong>继承属性和方法</strong></li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 创建构造函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 创建实例</span>\n<span class=\"token keyword\">let</span> person1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> person2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小红\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 继承父级的方法</span>\nperson2<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>执行结果</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210613211935916.png\"/></p>\n<ul><li>要添加一个新的属性需要在在构造器函数中添加：</li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> sex</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token comment\">// sex为新属性</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sex <span class=\"token operator\">=</span> sex<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><strong>4.1 prototype 继承</strong></p>\n</blockquote>\n<p><strong>所有的 JavaScript 对象都会从一个 prototype（原型对象）中继承属性和方法：</strong></p>\n<ul><li>Date 对象从 Date.prototype 继承</li><li>Array 对象从 Array.prototype 继承</li><li>Person 对象从 Person.prototype 继承</li></ul>\n<p><strong>所有 JavaScript 中的对象都是位于原型链顶端的 Object 的实例</strong></p>\n<ul><li>JavaScript 对象有一个指向一个原型对象的链</li><li>当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾（<strong>逐级查找</strong>）</li><li>Date 对象, Array 对象, 以及 Person 对象从 Object.prototype 继承。</li></ul>\n<blockquote>\n<p><strong>4.2 添加属性和方法</strong></p>\n</blockquote>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> sex</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// sex为新属性</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sex <span class=\"token operator\">=</span> sex<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>newVal <span class=\"token operator\">=</span> <span class=\"token string\">\"我是新添加在原型上的值\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> person1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">)</span>\n</code></pre>\n<ul><li>一样可以通过继承拿到<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210613213041687.png\"/></li></ul>\n<h2><a id=\"5__callapplybind_324\"></a>5. call和apply及bind三者的区别（面试重点）</h2>\n<ul><li>this指向，apply，call，bind的区别是一个经典的面试问题</li><li>同时在项目中会经常使用到的原生的js方法。</li><li>也是<strong>ES5中的众多坑的一个</strong></li></ul>\n<blockquote>\n<p><strong>5.1 从this说起</strong></p>\n</blockquote>\n<ul><li>this指向 = 谁调用，指向谁（<strong>这是错误的！！！</strong>）</li><li>this永远指向最后一个调用它的那个对象（正解）</li></ul>\n<p><strong>如何解决this指向问题？</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210613214112779.png\"/></p>\n<ol><li> <p>使用ES6中箭头函数</p> </li><li> <p>函数内部使用_this = this</p> </li><li> <p>使用apply，call，bind方法</p> </li><li> <p>new实例化一个对象</p> </li></ol>\n<blockquote>\n<p><strong>5.2 谈谈apply，call，bind</strong></p>\n</blockquote>\n<ul><li><strong>apply()</strong></li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    name <span class=\"token operator\">:</span> <span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">func1</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">func2</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>            <span class=\"token comment\">// 小明</span>\n</code></pre>\n<ol><li> <p><mark>apply()</mark> 方法调用一个函数，其具有一个指定的this值，以及作为一个数组（或者类似数组的对象）提供的参数，<mark>fun.apply(thisArg, [argsArray])</mark></p> </li><li> <p>thisArg：在fun函数运行时指定的this值。<strong>指定this的值并不一定是函数执行时真正的this值，如果是原始值的this会指向该原始值的自动包装对象。</strong></p> </li><li> <p>argsArray：一个数组或者类数组对象，其中的数组元素将作为单独的参数传给fun函数。参数为null或者undefined，则表示不需要传入任何参数。</p> </li></ol>\n<ul><li><strong>call()</strong></li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    name <span class=\"token operator\">:</span> <span class=\"token string\">\"小红\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">func1</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">func2</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj2<span class=\"token punctuation\">.</span><span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>            <span class=\"token comment\">// 小红</span>\n</code></pre>\n<ol><li> <p><mark>call()</mark> 调用一个函数，其具有一个指定的this值，以及若干个参数列表，fun.call(thisArg, arg1, arg2, …)</p> </li><li> <p>thisArg：在fun函数运行时指定的this值。指定this的值并不一定是函数执行时真正的this值，如果是原始值的this会指向该原始值的自动包装对象。</p> </li><li> <p><strong>arg1, arg2, …：若干个参数列表</strong></p> </li></ol>\n<ul><li><strong>bind()</strong></li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> obj3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n    name <span class=\"token operator\">:</span> <span class=\"token string\">\"小猪\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">func1</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">func2</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj3<span class=\"token punctuation\">.</span><span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>            <span class=\"token comment\">// 小猪</span>\n</code></pre>\n<ol><li> <p><mark>bind()</mark> 创建一个新的函数，当被调用时，将其this的关键字设置为提供的值，在调用新函数时，在任何提供一个给定的参数序列。</p> </li><li> <p>bind创建了一个新函数，<strong>必须手动去调用</strong>。</p> </li></ol>\n<blockquote>\n<p><strong>5.3 区别</strong></p>\n</blockquote>\n<ul><li>apply和call基本类似，他们的区别只是传入的参数不同。</li><li>apply传入的参数是包含多个参数的数组</li><li>call传入的参数是若干个参数列表</li><li>bind方法会创建一个新的函数，当被调用的时候，将其this关键字设置为提供的值，我们必须手动去调用<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210613215301140.png\"/></li></ul>\n<h2><a id=\"6_Javascript_416\"></a>6. Javascript的事件流模型（面试重点）</h2>\n<ul><li> <p>事件冒泡：事件开始由最具体的元素接受，然后逐级向上传播<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210613215406873.png\"/></p> </li><li> <p>事件捕捉：事件由最不具体的节点先接收，然后逐级向下，一直到最具体的（<strong>与上面相反</strong>）</p> </li><li> <p>DOM事件流：三个阶段：事件捕捉，目标阶段，事件冒泡</p> </li></ul>\n<h2><a id=\"7__424\"></a>7. 防抖与节流（面试精选）</h2>\n<blockquote>\n<p><strong>7.1 函数防抖</strong></p>\n</blockquote>\n<ul><li>当持续触发事件时，一段时间内只能触发一次。将几次操作合并为一此操作进行。比如说有一条赛车通道，赛车通过的时间为5s，5s之后到达终点，执行领奖操作<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210613220026514.png\"/></li><li>这5s之内只允许一辆赛车在通道内，如果第一辆赛车还在通道内，<strong>此时第二辆赛车已经进来了，那么销毁第一辆赛车</strong>，从第二辆车入场重新计时5s执行领奖操作<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210613220105175.png\"/></li></ul>\n<p><strong>应用场景（数据抖动问题）</strong></p>\n<pre><code>let telInput = document.querySelector('input');\ntelInput.addEventListener('input', function(e) {\n        //如果直接每次发请求，会导致性能问题\n        //数据请求\n        let timeOut = null;\n        if(timeOut){\n\t\t\tclearTimeout(timeOut)\n\t\t}else{\n\t\t\ttimeOut = setTimeout(()=&gt;{\n\t\t\t  $.ajax({})\n\t\t\t  },2000)\n\t    }\n})\n</code></pre>\n<blockquote>\n<p><strong>7.2 函数节流</strong></p>\n</blockquote>\n<ul><li>当持续触发事件时，<strong>保证一定时间段内只调用一次事件处理函数</strong>。节流，顾名思义，节制流入或流出。</li><li>比如说水龙头放水，一旦打开开关，水流就会很快，我们要做的就是限制流出</li></ul>\n<p><strong>应用场景（客运站问题）</strong></p>\n<ul><li> <p>把整个事件处理器比喻成客运站，如果客运大巴到站就走，那么路上肯定会发生交通拥堵，而且车大部分是空的</p> </li><li> <p>因为没给时间上客，虚假繁忙的情况肯定是不好的，那么怎么处理呢？</p> </li><li> <p><strong>设置一个时间间隔，时间间隔内只允许执行一次</strong>，客运站大巴设定一个时间，到点才会走</p> </li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">throttle</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>            \n　　<span class=\"token keyword\">let</span> prev <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            \n　　<span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>                \n　　　　<span class=\"token keyword\">var</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>                \n　　　　<span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">;</span>                \n　　　　<span class=\"token keyword\">var</span> now <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                \n　　　　<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> prev <span class=\"token operator\">&gt;=</span> delay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>                    \n　　　　　　<span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    \n　　　　　　prev <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                \n　　　　<span class=\"token punctuation\">}</span>            \n　　<span class=\"token punctuation\">}</span>        \n<span class=\"token punctuation\">}</span>        \n<span class=\"token keyword\">function</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>            \n　　<span class=\"token comment\">//do something</span>\n    <span class=\"token comment\">//ajax({})</span>\n    <span class=\"token comment\">//...      </span>\n<span class=\"token punctuation\">}</span>        \nbox<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'touchmove'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"8_JSDOM_477\"></a>8. JS中的虚拟DOM是什么？（面试重点）</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2021061322101464.png\"/></p>\n<blockquote>\n<p><strong>8.1 为什么要有虚拟dom？</strong></p>\n</blockquote>\n<ul><li>文档对象模型或 DOM 定义了一个接口，该接口允许 JavaScript 之类的语言访问和操作 HTML 文档</li><li>但是此接口需要付出代价，<strong>大量非常频繁的 DOM 操作会使页面速度变慢</strong></li><li><strong>虚拟dom的出现就是为了解决操作dom的性能问题</strong></li></ul>\n<blockquote>\n<p><strong>8.2 虚拟dom是什么？好处是？</strong></p>\n</blockquote>\n<ul><li><strong>本质就是JS对象</strong></li><li>真实节点抽象成JS对象（文档结构树）</li><li>虚拟节点（VNode）表示 DOM 树中的节点。当需要操纵时，可以<strong>在虚拟 DOM的 内存中执行计算和操作，而不是在真实 DOM 上进行操纵</strong>。</li><li>相对于直接操作dom，这自然会更快</li></ul>\n<h2><a id=\"9_new_493\"></a>9. 手写一个new，实现同等功能</h2>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayName</span><span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">我是 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">myNew</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">that<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    obj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> that<span class=\"token punctuation\">.</span>prototype\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token function\">that</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span> <span class=\"token operator\">?</span> res <span class=\"token operator\">:</span> obj\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span> <span class=\"token function\">myNew</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">,</span> <span class=\"token string\">'小明'</span><span class=\"token punctuation\">)</span>\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">sayWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 我是小明</span>\n</code></pre>\n<h2><a id=\"10_url_514\"></a>10. 获得页面url参数的值（常用）</h2>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getQueryString</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n  <span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(^|&amp;)\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"=([^&amp;]*)(&amp;|$)\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token keyword\">var</span> r <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">unescape</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span> \n</code></pre>\n<blockquote>\n<p><strong>1. 希望本文能对大家有所帮助，如有错误，敬请指出</strong></p>\n<p><strong>2. 原创不易，还请各位客官动动发财的小手支持一波（关注、评论、点赞、收藏）</strong><br/> <strong>3. 拜谢各位！</strong></p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210602004040139.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2021-06-15 08:02:45", "summary": "保姆级教程重难点详细解析建议收藏函数事件对象原型对象和及三者的区别面试重点的事件流模型面试重点防抖与节流面试精选中的虚拟是什么？面试重点手写一个，实现同等功能获得页面参数的值常用本文是整理了中的一些重"}