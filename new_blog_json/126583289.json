{"blogid": "126583289", "writerAge": "码龄5年", "writerBlogNum": "345", "writerCollect": "752", "writerComment": "110", "writerFan": "199", "writerGrade": "7级", "writerIntegral": "10725", "writerName": "佛佛ง", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126583289.jpg", "writerRankTotal": "1440", "writerRankWeekly": "10093", "writerThumb": "164", "writerVisitNum": "791759", "blog_read_count": "218", "blog_time": "于 2022-08-29 13:56:12 发布", "blog_title": "uniapp页面通讯-uni.$emit、uni.$on、uni.$once、uni.$off", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\"><tbody><tr><td> <h3 id=\"emit\">uni.$emit(eventName,OBJECT)</h3> </td><td>触发全局的自定义事件。附加参数都会传给监听器回调。</td></tr><tr><td> <h3 id=\"on\">uni.$on(eventName,callback)</h3> </td><td>监听全局的自定义事件。事件可以由 uni.$emit 触发，回调函数会接收所有传入事件触发函数的额外参数。</td></tr><tr><td> <h3 id=\"once\">uni.$once(eventName,callback)</h3> </td><td>监听全局的自定义事件。事件可以由 uni.$emit 触发，但是只触发一次，在第一次触发之后移除监听器。</td></tr><tr><td> <h3 id=\"off\">uni.$off([eventName, callback])</h3> </td><td>移除全局自定义事件监听器。</td></tr></tbody></table>\n<p><span style=\"color:#fe2c24;\"><strong>注意事项</strong></span></p>\n<ul><li><span style=\"color:#fe2c24;\">uni.$emit、 uni.$on 、 uni.$once 、uni.$off 触发的事件都是 App 全局级别的，跨任意组件，页面，nvue，vue 等</span></li><li><span style=\"color:#fe2c24;\">使用时，注意及时销毁事件监听，比如，页面 onLoad 里边 uni.$on 注册监听，onUnload 里边 uni.$off 移除，或者一次性的事件，直接使用 uni.$once 监听</span></li></ul>\n<p> <strong>使用场景</strong></p>\n<p>进入app,是未登陆状态，需要在我的页面点击登陆，进入登陆页面进行登陆。登陆成功之后，返回到我的页面，实时显示登陆后的用户信息。</p>\n<h3>1、在我的页面，监听事件</h3>\n<pre><code class=\"hljs\">&lt;template&gt;\n\t&lt;view class=\"content\"&gt;\n\t\t&lt;text v-if=\"usnerinfo\"&gt;{<!-- -->{usnerinfo.userName}}&lt;/text&gt;\n\t\t&lt;button v-else @click=\"toLogin\"&gt;去登录&lt;/button&gt;\n\t&lt;/view&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n\texport default {\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tusnerinfo: null\n\t\t\t}\n\t\t},\n\t\t// 我的页面  \n\t\tonLoad() {\n\t\t\t// 监听事件,使用 uni.$emit 触发事件后，对应的 uni.$on 就会监听到事件触发，在回调中去执行相关的逻辑。\n\t\t\tuni.$on('login', (usnerinfo) =&gt; {\n\t\t\t\tthis.usnerinfo = usnerinfo;\n\t\t\t})\n\t\t},\n\t\tonUnload() {\n\t\t\t// 移除监听事件  \n\t\t\tuni.$off('login');\n\t\t},\n\t\tmethods: {\n\t\t\ttoLogin() {\n\t\t\t\tuni.navigateTo({\n\t\t\t\t\turl: '/pages/a/a'\n\t\t\t\t})\n\t\t\t},\n\t\t}\n\t}\n&lt;/script&gt;</code></pre>\n<p>因为事件监听是全局的，所以使用 <code>uni.$on</code> ，需要使用 <code>uni.$off</code> 移除全局的事件监听，避免重复监听。</p>\n<h3>2、在登录页，触发事件 </h3>\n<pre><code class=\"hljs\">&lt;template&gt;\n\t&lt;view class=\"content\"&gt;\n\t\t&lt;view class=\"data\" @click=\"doLogin\"&gt;触发方法，获取用户信息&lt;/view&gt;\n\t&lt;/view&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n\texport default {\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tusnerinfo: null\n\t\t\t}\n\t\t},\n\t\t// 我的页面  \n\t\tonLoad() {},\n\t\tmethods: {\n\t\t\tdoLogin() {\n\t\t\t\t// 登陆页面  \n\t\t\t\tuni.$emit('login', {\n\t\t\t\t\tuserName: 'lzzzzzzzzzzzzzzzzzzzzz',\n\t\t\t\t\tlogin: true\n\t\t\t\t});\n\t\t\t\tuni.navigateBack({})\n\t\t\t}\n\t\t}\n\t}\n&lt;/script&gt;\n\n</code></pre>\n<p>使用 <code>uni.$emit</code> 触发事件后，对应的 <code>uni.$on</code> 就会监听到事件触发，在回调中去执行相关的逻辑。</p>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-08-29 13:56:12", "summary": "触发全局的自定义事件。附加参数都会传给监听器回调。监听全局的自定义事件。事件可以由触发，回调函数会接收所有传入事件触发函数的额外参数。监听全局的自定义事件。事件可以由触发，但是只触发一次，在第一次触发"}