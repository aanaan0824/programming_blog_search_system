{"blogid": "126743310", "writerAge": "码龄5年", "writerBlogNum": "147", "writerCollect": "54", "writerComment": "9", "writerFan": "9", "writerGrade": "4级", "writerIntegral": "1582", "writerName": "PPPsych", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126743310.jpg", "writerRankTotal": "14362", "writerRankWeekly": "7161", "writerThumb": "9", "writerVisitNum": "12641", "blog_read_count": "12", "blog_time": "于 2022-09-07 12:43:56 发布", "blog_title": "Go语言学习笔记——访问权限控制框架casbin", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#Golangcasbin_5\">Golang访问权限控制框架casbin</a></li><li><ul><li><a href=\"#_7\">官方文档</a></li><li><a href=\"#casbin_11\">casbin简介</a></li><li><a href=\"#Casbin__15\">Casbin 是什么？</a></li><li><a href=\"#_30\">访问控制模型</a></li><li><a href=\"#_99\">简单使用</a></li><li><ul><li><a href=\"#_101\">安装</a></li><li><a href=\"#model_114\">创建model配置文件</a></li><li><a href=\"#policypolicycsv_153\">policy文件(policy.csv)</a></li><li><a href=\"#_161\">代码实现</a></li><li><a href=\"#_204\">超级管理员实现</a></li><li><a href=\"#g______211\">g = _, _的用法</a></li><li><a href=\"#g______236\">多个g _ , _</a></li><li><a href=\"#_274\">多层角色</a></li><li><a href=\"#domain_294\">domain领域</a></li><li><a href=\"#_351\">动态控制可读可写</a></li><li><ul><li><a href=\"#_353\">根据时间控制</a></li></ul>\n</li><li><a href=\"#_408\">模式存储</a></li><li><ul><li><a href=\"#modelmodel_410\">动态初始化model文件(代码内实现model)</a></li></ul>\n</li><li><a href=\"#policycsv_476\">策略储存policy.csv实际运用</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<hr/>\n<h1><a id=\"Golangcasbin_5\"></a>Golang访问权限控制框架casbin</h1>\n<h2><a id=\"_7\"></a>官方文档</h2>\n<p>https://casbin.org/docs/zh-CN/overview</p>\n<h2><a id=\"casbin_11\"></a>casbin简介</h2>\n<p>Casbin 是一个强大的、高效的开源访问控制框架，其权限管理机制支持多种访问控制模型。支持的语言也很多，例如：go、java、node.js、python等等.</p>\n<h2><a id=\"Casbin__15\"></a>Casbin 是什么？</h2>\n<p>Casbin 可以：</p>\n<ol><li>支持自定义请求的格式，默认的请求格式为<code>{subject, object, action}</code>。</li><li>具有访问控制模型model和策略policy两个核心概念。</li><li>支持RBAC中的多层角色继承，不止主体可以有角色，资源也可以具有角色。</li><li>支持内置的超级用户 例如：<code>root</code> 或 <code>administrator</code>。超级用户可以执行任何操作而无需显式的权限声明。</li><li>支持多种内置的操作符，如 <code>keyMatch</code>，方便对路径式的资源进行管理，如 <code>/foo/bar</code> 可以映射到 <code>/foo*</code></li></ol>\n<p>Casbin 不能：</p>\n<ol><li>身份认证 authentication（即验证用户的用户名和密码），Casbin 只负责访问控制。应该有其他专门的组件负责身份认证，然后由 Casbin 进行访问控制，二者是相互配合的关系。</li><li>管理用户列表或角色列表。 Casbin 认为由项目自身来管理用户、角色列表更为合适， 用户通常有他们的密码，但是 Casbin 的设计思想并不是把它作为一个存储密码的容器。 而是存储RBAC方案中用户和角色之间的映射关系。</li></ol>\n<h2><a id=\"_30\"></a>访问控制模型</h2>\n<p>控制访问模型有哪几种？我们需要先来了解下这个。</p>\n<ul><li> <p><strong>UGO(User, Group, Other)</strong></p> <p>这个是Linux中对于资源进行权限管理的访问模型。Linux中一切资源都是文件，每个文件都可以设置三种角色的访问权限（文件创建者，文件创建者所在组，其他人）。这种访问模型的缺点很明显，只能为一类用户设置权限，如果这类用户中有特殊的人，那么它无能为力了。</p> </li><li> <p><strong>ACL(访问控制列表)</strong></p> <p>它的原理是，每个资源都配置有一个列表，这个列表记录哪些用户可以对这项资源进行CRUD操作。当系统试图访问这项资源的时候，会首先检查这个列表中是否有关于当前用户的访问权限，从而确定这个用户是否有权限访问当前资源。linux在UGO之外，也增加了这个功能。</p> <pre><code>setfacl -m user:yejianfeng:rw- ./test\n</code></pre> <pre><code>[yejianfeng@ipd-itstool ~]$ getfacl test\n# file: test\n# owner: yejianfeng\n# group: yejianfeng\nuser::rw-\nuser:yejianfeng:rw-\ngroup::rw-\nmask::rw-\nother::r--\n</code></pre> <p>当我们使用getfacl和setfacl命令的时候我们就能对某个资源设置增加某个人，某个组的权限列表。操作系统会根据这个权限列表进行判断，当前用户是否有权限操作这个资源。</p> </li><li> <p><strong>RBAC(基于角色的权限访问控制)</strong></p> <p>这个是很多业务系统最通用的权限访问控制系统。它的特点是在用户和具体权限之间增加了一个角色。就是先设置一个角色，比如管理员，然后将用户关联某个角色中，再将角色设置某个权限。用户和角色是多对多关系，角色和权限是多对多关系。所以一个用户是否有某个权限，根据用户属于哪些角色，再根据角色是否拥有某个权限来判断这个用户是否有某个权限。</p> <p>RBAC的逻辑有更多的变种：</p>\n<ul><li> <p>变种一：角色引入继承</p> <p>角色引入了继承概念，那么继承的角色有了上下级或者等级关系。</p> </li><li> <p>变种二：角色引入了约束</p> <p>角色引入了约束概念。约束概念有两种，一种是<strong>静态职责</strong>分离：a、互斥角色：同一个用户在两个互斥角色中只能选择一个 b、基数约束：一个用户拥有的角色是有限的，一个角色拥有的许可也是有限的 c、先决条件约束：用户想要获得高级角色，首先必须拥有低级角色；一种是<strong>动态职责</strong>分离：可以动态的约束用户拥有的角色，如一个用户可以拥有两个角色，但是运行时只能激活一个角色。</p> </li><li> <p>变种三：既有角色约束，又有角色继承</p> <p>就是前面两种角色变种的集合。</p> </li></ul> </li><li> <p><strong>ABAC(基于属性的权限验证)</strong></p> <p>Attribute-based access control，这种权限验证模式是用属性来标记资源权限的。比如k8s中就用到这个权限验证方法。比如某个资源有pod属性，有命名空间属性，那么我设置的时候可以这样设置：</p> <pre><code class=\"prism language-go\">Bob 可以在命名空间 projectCaribou 中读取 pod：\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"apiVersion\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"abac.authorization.kubernetes.io/v1beta1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kind\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Policy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"spec\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"namespace\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"projectCaribou\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"resource\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pods\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"readonly\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n</code></pre> <p>这个权限验证模型的好处就是扩展性好，一旦要增加某种权限，就可以直接增加某种属性。</p> </li><li> <p><strong>DAC（自主访问控制）</strong></p> <p>在ACL的访问控制模式下，有个问题，能给资源增加访问控制的是谁，这里就有几种办法，比如增加一个super user，这个超级管理员来做统一的操作。还有一种办法，有某个权限的用户来负责给其他用户分配权限。这个就叫做自主访问控制。</p> <p>比如我们常用的windows就是用这么一种方法。</p> </li><li> <p><strong>MAC(强制访问控制)</strong></p> <p>强制访问控制和DAC相反，它不将某些权限下放给用户，而是在更高维度（比如操作系统）上将所有的用户设置某些策略，这些策略是需要所有用户强制执行的。这种访问控制也是基于某些安全因素考虑。</p> </li></ul>\n<h2><a id=\"_99\"></a>简单使用</h2>\n<h3><a id=\"_101\"></a>安装</h3>\n<pre><code class=\"prism language-go\"><span class=\"token keyword\">go</span> get github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>casbin<span class=\"token operator\">/</span>casbin\n<span class=\"token keyword\">go</span> get github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>casbin<span class=\"token operator\">/</span>casbin<span class=\"token operator\">/</span>v2 <span class=\"token comment\">// 可能兼容还有问题</span>\n\n<span class=\"token keyword\">go</span> get github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>casbin<span class=\"token operator\">/</span>gorm<span class=\"token operator\">-</span>adapter\n\n<span class=\"token keyword\">go</span> get github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span><span class=\"token keyword\">go</span><span class=\"token operator\">-</span>sql<span class=\"token operator\">-</span>driver<span class=\"token operator\">/</span>mysql\n\n<span class=\"token keyword\">go</span> get github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>jinzhu<span class=\"token operator\">/</span>gorm\n</code></pre>\n<h3><a id=\"model_114\"></a>创建model配置文件</h3>\n<p>model.conf</p>\n<pre><code class=\"prism language-go\"># 请求定义\n<span class=\"token punctuation\">[</span>request_definiation<span class=\"token punctuation\">]</span>\nr <span class=\"token operator\">=</span> sub<span class=\"token punctuation\">,</span>obj<span class=\"token punctuation\">,</span>act\n# sub ——<span class=\"token operator\">&gt;</span> 想要访问资源的用户角色<span class=\"token punctuation\">(</span>Subject<span class=\"token punctuation\">)</span>——请求实体\n# obj ——<span class=\"token operator\">&gt;</span> 访问的资源<span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">)</span>\n# act ——<span class=\"token operator\">&gt;</span> 访问的方法<span class=\"token punctuation\">(</span>Action<span class=\"token punctuation\">:</span> get、post<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n\n\n# 策略定义\n# 策略<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>csv文件p的格式，定义的每一行为policy rule<span class=\"token punctuation\">;</span>p<span class=\"token punctuation\">,</span>p2为policy rule的名字。<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>policy_definiation<span class=\"token punctuation\">]</span>\np <span class=\"token operator\">=</span> sub<span class=\"token punctuation\">,</span>obj<span class=\"token punctuation\">,</span>act\n# p2 <span class=\"token operator\">=</span> sub<span class=\"token punctuation\">,</span>act 表示sub对所有资源都能执行act\n\n\n# 组定义\n<span class=\"token punctuation\">[</span>role_definiation<span class=\"token punctuation\">]</span>\ng <span class=\"token operator\">=</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span>\n# g <span class=\"token operator\">=</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">_</span>定义了用户——角色，角色——角色的映射关系，前者是后者的成员，拥有后者的权限。\n# <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">_</span>表示用户，角色<span class=\"token operator\">/</span>用户组\n\n\n# 策略效果\n<span class=\"token punctuation\">[</span>policy_effect<span class=\"token punctuation\">]</span>\ne <span class=\"token operator\">=</span> <span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>eft <span class=\"token operator\">=</span> allow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n# 上面表示有任意一条 policy rule 满足<span class=\"token punctuation\">,</span> 则最终结果为 allow；p<span class=\"token punctuation\">.</span>eft它可以是allow或deny，它是可选的，默认是allow\n\n# 匹配器\n<span class=\"token punctuation\">[</span>matchers<span class=\"token punctuation\">]</span>\nm <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>sub <span class=\"token operator\">==</span> p<span class=\"token punctuation\">.</span>sub <span class=\"token operator\">&amp;&amp;</span> r<span class=\"token punctuation\">.</span>obj <span class=\"token operator\">==</span> p<span class=\"token punctuation\">.</span>obj <span class=\"token operator\">&amp;&amp;</span> r<span class=\"token punctuation\">.</span>act <span class=\"token operator\">==</span> p<span class=\"token punctuation\">.</span>act\n\n# 上面模型文件规定了权限由sub<span class=\"token punctuation\">,</span>obj<span class=\"token punctuation\">,</span>act三要素组成，只有在策略列表中有和它完全相同的策略时，该请求才能通过。\n</code></pre>\n<h3><a id=\"policypolicycsv_153\"></a>policy文件(policy.csv)</h3>\n<pre><code class=\"prism language-go\">p<span class=\"token punctuation\">,</span>zxp<span class=\"token punctuation\">,</span>data1<span class=\"token punctuation\">,</span>read\np<span class=\"token punctuation\">,</span>zhang<span class=\"token punctuation\">,</span>data2<span class=\"token punctuation\">,</span>write\n\n</code></pre>\n<h3><a id=\"_161\"></a>代码实现</h3>\n<pre><code class=\"prism language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"fmt\"</span>\n  <span class=\"token string\">\"log\"</span>\n\n  <span class=\"token string\">\"github.com/casbin/casbin/v2\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>casbin<span class=\"token punctuation\">.</span>Enforcer<span class=\"token punctuation\">,</span>sub<span class=\"token punctuation\">,</span>obj<span class=\"token punctuation\">,</span>act <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\tok<span class=\"token punctuation\">,</span><span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">Enforce</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">,</span>obj<span class=\"token punctuation\">,</span>act<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> ok <span class=\"token punctuation\">{<!-- --></span>\n    \tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s CAN %s %s\\n\"</span><span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">,</span> act<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span>\n  \t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n    \tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s CANNOT %s %s\\n\"</span><span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">,</span> act<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span>\n  \t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//首先创建一个casbin.Enforcer对象，加载模型文件model.conf和策略文件policy.csv，调用其\t\tEnforce方法来检查权限</span>\n  e<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> casbin<span class=\"token punctuation\">.</span><span class=\"token function\">NewEnforcer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./model.conf\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./policy.csv\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{<!-- --></span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatalf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NewEnforecer failed:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token string\">\"zxp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"data1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"read\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token string\">\"zhang\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"data2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"write\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token string\">\"zxp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"data1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"write\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token string\">\"zxp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"data2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"read\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>测试结果：</strong></p>\n<pre><code>zxp CAN read data1\nzhang CAN write data2\nzxp CANNOT write data1\nzxp CANNOT read data2\n</code></pre>\n<h3><a id=\"_204\"></a>超级管理员实现</h3>\n<pre><code class=\"prism language-go\"><span class=\"token punctuation\">[</span>matchers<span class=\"token punctuation\">]</span>\ne <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>sub <span class=\"token operator\">==</span> p<span class=\"token punctuation\">.</span>sub <span class=\"token operator\">&amp;&amp;</span> r<span class=\"token punctuation\">.</span>obj <span class=\"token operator\">==</span> p<span class=\"token punctuation\">.</span>obj <span class=\"token operator\">&amp;&amp;</span> r<span class=\"token punctuation\">.</span>act <span class=\"token operator\">==</span> p<span class=\"token punctuation\">.</span>act <span class=\"token operator\">||</span> r<span class=\"token punctuation\">.</span>sub <span class=\"token operator\">==</span> <span class=\"token string\">\"root\"</span>\n</code></pre>\n<h3><a id=\"g______211\"></a>g = _, _的用法</h3>\n<p>g = _,__定义了用户——角色或角色——角色的映射关系，前者是后者的成员，拥有后者的权限。</p>\n<p><strong>model文件配置为</strong></p>\n<pre><code class=\"prism language-go\"><span class=\"token punctuation\">[</span>matchers<span class=\"token punctuation\">]</span>\nm <span class=\"token operator\">=</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> r<span class=\"token punctuation\">.</span>obj <span class=\"token operator\">==</span> p<span class=\"token punctuation\">.</span>obj <span class=\"token operator\">&amp;&amp;</span> r<span class=\"token punctuation\">.</span>act <span class=\"token operator\">==</span> p<span class=\"token punctuation\">.</span>act\n</code></pre>\n<p><strong>policy文件配置为</strong></p>\n<pre><code>p, admin, data, read\np, admin, data, write\np, developer, data, read\ng, zxp, admin\ng, zhang, developer\n</code></pre>\n<p><code>admin</code>对数据<code>data</code>用<code>read</code>和<code>write</code>权限，而<code>developer</code>对数据<code>data</code>只有<code>read</code>权限。</p>\n<p><code>zxp</code>拥有admin的权限所以可读可写 <code>zhang</code>只能读</p>\n<h3><a id=\"g______236\"></a>多个g _ , _</h3>\n<p><strong>model文件配置改为：</strong></p>\n<pre><code class=\"prism language-go\"><span class=\"token punctuation\">[</span>role_definition<span class=\"token punctuation\">]</span>\ng<span class=\"token operator\">=</span><span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">_</span>\ng2<span class=\"token operator\">=</span><span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">_</span>\n\n<span class=\"token punctuation\">[</span>matchers<span class=\"token punctuation\">]</span>\nm <span class=\"token operator\">=</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">g2</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> r<span class=\"token punctuation\">.</span>act <span class=\"token operator\">==</span> p<span class=\"token punctuation\">.</span>act\n# 只改这两个，其他不变\n</code></pre>\n<p><strong>policy文件举例如下：</strong></p>\n<pre><code>p, admin, data1, read\np, admin, data1, write\np, admin, data2, read\np, admin, data2, write\np, developer, data2, read\np, developer, data2, write\np, developer, data1, read\ng, zxp, admin\ng, zhang, developer\ng2, data1.data, data1\ng2, data2.data, data2\n</code></pre>\n<p><code>zxp</code>属于<code>admin</code>所以对<code>data1</code>，<code>data2</code>可读可写</p>\n<p><code>zhang</code>属于<code>developer</code>所以对<code>data1</code>可读。对<code>data2</code>可读可写</p>\n<p><code>data1.data</code>属于<code>data1</code>,所以<code>zxp</code>可读可写,<code>zhang</code>对<code>data1.data</code>可读</p>\n<p><code>data2.data</code>属于<code>data2</code>,所以<code>zhang</code>可读可写</p>\n<h3><a id=\"_274\"></a>多层角色</h3>\n<p><strong>model文件不用修改</strong></p>\n<p><strong>policy文件举例如下：</strong></p>\n<pre><code>p, senior, data, write\np, developer, data, read\ng, zxp, senior\ng, senior, developer\ng, zhang, developer\n</code></pre>\n<p><code>senior</code>对<code>data</code>有<code>write</code>权限</p>\n<p><code>developer</code>只有<code>read</code>权限,同时<code>senior</code>也是<code>developer</code>(前者拥有后者的权限)，所以<code>senior</code>也继承其<code>read</code>权限。</p>\n<p><code>zxp</code>可读可写<code>data</code></p>\n<h3><a id=\"domain_294\"></a>domain领域</h3>\n<p><strong>model文件修改如下</strong></p>\n<pre><code class=\"prism language-go\"><span class=\"token punctuation\">[</span>request_definition<span class=\"token punctuation\">]</span>\nr <span class=\"token operator\">=</span> sub<span class=\"token punctuation\">,</span> dom<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> act\n\n<span class=\"token punctuation\">[</span>policy_definition<span class=\"token punctuation\">]</span>\np <span class=\"token operator\">=</span> sub<span class=\"token punctuation\">,</span> dom<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> act\n\n<span class=\"token punctuation\">[</span>role_definition<span class=\"token punctuation\">]</span>\ng <span class=\"token operator\">=</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">_</span>\n# g2 <span class=\"token operator\">=</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">_</span> 表示用户<span class=\"token punctuation\">,</span> 角色<span class=\"token operator\">/</span>用户组<span class=\"token punctuation\">,</span> 域<span class=\"token punctuation\">(</span>也就是租户<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token punctuation\">[</span>matchers<span class=\"token punctuation\">]</span>\nm <span class=\"token operator\">=</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>dom<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> r<span class=\"token punctuation\">.</span>dom <span class=\"token operator\">==</span> p<span class=\"token punctuation\">.</span>dom <span class=\"token operator\">&amp;&amp;</span> r<span class=\"token punctuation\">.</span>obj <span class=\"token operator\">==</span> p<span class=\"token punctuation\">.</span>obj <span class=\"token operator\">&amp;&amp;</span> r<span class=\"token punctuation\">.</span>act <span class=\"token operator\">==</span> p<span class=\"token punctuation\">.</span>act\n</code></pre>\n<p><strong>policy文件举例如下：</strong></p>\n<pre><code>p, admin, dom1, data1, read\np, admin, dom2, data2, read\ng, zxp, admin, dom1\n</code></pre>\n<p>在<code>dom1</code>中，只有<code>admin</code>可以读取数据<code>data1</code>。</p>\n<p>在<code>dom2</code>中，只有<code>admin</code>可以读取数据<code>data2</code>。</p>\n<p><code>zxp</code>在<code>data1</code>中是<code>admin</code>，但是在<code>data2</code>中不是。</p>\n<p><strong>代码实现</strong></p>\n<pre><code class=\"prism language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>casbin<span class=\"token punctuation\">.</span>Enforcer<span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">,</span> domain<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> act <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  ok<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">Enforce</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">,</span> domain<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> act<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> ok <span class=\"token punctuation\">{<!-- --></span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s CAN %s %s in %s\\n\"</span><span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">,</span> act<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> domain<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s CANNOT %s %s in %s\\n\"</span><span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">,</span> act<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> domain<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  e<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> casbin<span class=\"token punctuation\">.</span><span class=\"token function\">NewEnforcer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./model.conf\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./policy.csv\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{<!-- --></span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatalf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NewEnforecer failed:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dajun\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dom1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"data1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"read\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dajun\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dom2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"data2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"read\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_351\"></a>动态控制可读可写</h3>\n<h4><a id=\"_353\"></a>根据时间控制</h4>\n<p><strong>model文件修改如下</strong></p>\n<pre><code class=\"prism language-go\"><span class=\"token punctuation\">[</span>matchers<span class=\"token punctuation\">]</span>\nm <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">.</span>Hour <span class=\"token operator\">&gt;=</span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> r<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">.</span>Hour <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span> <span class=\"token operator\">||</span> r<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">==</span> r<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">.</span>Owner<span class=\"token operator\">&gt;</span> \n</code></pre>\n<blockquote>\n<p>注意：该模式下不需要policy文件配置</p>\n</blockquote>\n<p><strong>代码实现</strong></p>\n<pre><code class=\"prism language-go\"><span class=\"token keyword\">type</span> Object <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{<!-- --></span>\n  Name  <span class=\"token builtin\">string</span>\n  Owner <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Subject <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{<!-- --></span>\n  Name <span class=\"token builtin\">string</span>\n  Hour <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>casbin<span class=\"token punctuation\">.</span>Enforcer<span class=\"token punctuation\">,</span> sub Subject<span class=\"token punctuation\">,</span> obj Object<span class=\"token punctuation\">,</span> act <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  ok<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">Enforce</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> act<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> ok <span class=\"token punctuation\">{<!-- --></span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s CAN %s %s at %d:00\\n\"</span><span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> act<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">.</span>Hour<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s CANNOT %s %s at %d:00\\n\"</span><span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> act<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">.</span>Hour<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  e<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> casbin<span class=\"token punctuation\">.</span><span class=\"token function\">NewEnforcer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./model.conf\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./policy.csv\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{<!-- --></span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatalf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NewEnforecer failed:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//r.sub.Hour &lt; 18 || r.sub.Name == r.obj.Owner 这两个满足一个就可读</span>\n  o <span class=\"token operator\">:=</span> Object<span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"zxp\"</span><span class=\"token punctuation\">}</span>\n    \n    \n  s1 <span class=\"token operator\">:=</span> Subject<span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"zxp\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">,</span> <span class=\"token string\">\"read\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//可读</span>\n\n  s2 <span class=\"token operator\">:=</span> Subject<span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"zhang\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">,</span> <span class=\"token string\">\"read\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//可读</span>\n\n  s4 <span class=\"token operator\">:=</span> Subject<span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"zhang\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> s4<span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">,</span> <span class=\"token string\">\"read\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//不可读</span>\n    \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"_408\"></a>模式存储</h3>\n<h4><a id=\"modelmodel_410\"></a>动态初始化model文件(代码内实现model)</h4>\n<pre><code class=\"prism language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"log\"</span>\n\n\tfileadapter <span class=\"token string\">\"github.com/casbin/casbin/persist/file-adapter\"</span>\n\t<span class=\"token string\">\"github.com/casbin/casbin/v2\"</span>\n\t<span class=\"token string\">\"github.com/casbin/casbin/v2/model\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>casbin<span class=\"token punctuation\">.</span>Enforcer<span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> act <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tok<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">Enforce</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> act<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> ok <span class=\"token punctuation\">{<!-- --></span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s CAN %s %s\\n\"</span><span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">,</span> act<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s CANNOT %s %s\\n\"</span><span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">,</span> act<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//第一种写法</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tm <span class=\"token operator\">:=</span> model<span class=\"token punctuation\">.</span><span class=\"token function\">NewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tm<span class=\"token punctuation\">.</span><span class=\"token function\">AddDef</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sub, obj, act\"</span><span class=\"token punctuation\">)</span>\n\tm<span class=\"token punctuation\">.</span><span class=\"token function\">AddDef</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"p\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sub, obj, act\"</span><span class=\"token punctuation\">)</span>\n\tm<span class=\"token punctuation\">.</span><span class=\"token function\">AddDef</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"some(where (p.eft == allow))\"</span><span class=\"token punctuation\">)</span>\n\tm<span class=\"token punctuation\">.</span><span class=\"token function\">AddDef</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"m\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"m\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r.sub == g.sub &amp;&amp; r.obj == p.obj &amp;&amp; r.act == p.act\"</span><span class=\"token punctuation\">)</span>\n\n\ta <span class=\"token operator\">:=</span> fileadapter<span class=\"token punctuation\">.</span><span class=\"token function\">NewAdapter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./policy.csv\"</span><span class=\"token punctuation\">)</span>\n\te<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> casbin<span class=\"token punctuation\">.</span><span class=\"token function\">NewEnforcer</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatalf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NewEnforecer failed:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">check</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token string\">\"zxp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"data1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"read\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">check</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token string\">\"zhang\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"data2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"write\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">check</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token string\">\"zxp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"data1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"write\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">check</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token string\">\"zxp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"data2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"read\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//第二种写法</span>\n<span class=\"token comment\">// func main() {<!-- --></span>\n<span class=\"token comment\">// \ttext := `</span>\n<span class=\"token comment\">//   [request_definition]</span>\n<span class=\"token comment\">//   r = sub, obj, act</span>\n\n<span class=\"token comment\">//   [policy_definition]</span>\n<span class=\"token comment\">//   p = sub, obj, act</span>\n\n<span class=\"token comment\">//   [policy_effect]</span>\n<span class=\"token comment\">//   e = some(where (p.eft == allow))</span>\n\n<span class=\"token comment\">//   [matchers]</span>\n<span class=\"token comment\">//   m = r.sub == p.sub &amp;&amp; r.obj == p.obj &amp;&amp; r.act == p.act</span>\n<span class=\"token comment\">//   `</span>\n\n<span class=\"token comment\">// \tm, _ := model.NewModelFromString(text)</span>\n<span class=\"token comment\">// \ta := fileadapter.NewAdapter(\"./policy.csv\")</span>\n<span class=\"token comment\">// \te, _ := casbin.NewEnforcer(m, a)</span>\n<span class=\"token comment\">// }</span>\n\n</code></pre>\n<h3><a id=\"policycsv_476\"></a>策略储存policy.csv实际运用</h3>\n<p>使用<code>Gorm Adapter</code>。先连接到数据库，执行下面的<code>SQL</code>：</p>\n<pre><code>CREATE DATABASE IF NOT EXISTS casbin;\n\nUSE casbin;\n\nCREATE TABLE IF NOT EXISTS casbin_rule (\n  p_type VARCHAR(100) NOT NULL,\n  s0 VARCHAR(100),\n  s1 VARCHAR(100),\n  s2 VARCHAR(100)\n);\n\nINSERT INTO casbin_rule VALUES\n('p', zxp', 'data1', 'read', '', '', ''),\n('p', 'zhang', 'data2', 'write', '', '', ''); \n</code></pre>\n<p><strong>代码实现</strong></p>\n<pre><code class=\"prism language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\n\t<span class=\"token string\">\"github.com/casbin/casbin/v2\"</span>\n\tgormadapter <span class=\"token string\">\"github.com/casbin/gorm-adapter\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>casbin<span class=\"token punctuation\">.</span>Enforcer<span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> act <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tok<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">Enforce</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> act<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> ok <span class=\"token punctuation\">{<!-- --></span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s CAN %s %s\\n\"</span><span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">,</span> act<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s CANNOT %s %s\\n\"</span><span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">,</span> act<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\ta <span class=\"token operator\">:=</span> gormadapter<span class=\"token punctuation\">.</span><span class=\"token function\">NewAdapter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"root:12345@tcp(127.0.0.1:3306)/test_db\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\te<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> casbin<span class=\"token punctuation\">.</span><span class=\"token function\">NewEnforcer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./model.conf\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token function\">check</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token string\">\"zxp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"data1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"read\"</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">//可读</span>\n\t<span class=\"token function\">check</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token string\">\"zhang\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"data2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"write\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//可写</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-09-07 12:43:56", "summary": "文章目录访问权限控制框架官方文档简介是什么？访问控制模型简单使用安装创建配置文件文件代码实现超级管理员实现的用法多个多层角色领域动态控制可读可写根据时间控制模式存储动态初始化文件代码内实现策略储存实际"}