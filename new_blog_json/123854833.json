{"blogid": "123854833", "writerAge": "码龄4年", "writerBlogNum": "53", "writerCollect": "199", "writerComment": "59", "writerFan": "126", "writerGrade": "3级", "writerIntegral": "696", "writerName": "程序员李哈", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123854833.jpg", "writerRankTotal": "26443", "writerRankWeekly": "21312", "writerThumb": "114", "writerVisitNum": "44606", "blog_read_count": "18472", "blog_time": "已于 2022-03-30 22:52:38 修改", "blog_title": "Spring boot+Spring security+JWT实现前后端分离登录认证及权限控制", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p><strong> 借鉴文章：</strong></p>\n<p><a href=\"https://blog.csdn.net/I_am_Hutengfei/article/details/100561564\" title=\"Springboot  + Spring Security 实现前后端分离登录认证及权限控制_I_am_Rick_Hu的博客-CSDN博客_springsecurity前后端分离登录认证\">Springboot + Spring Security 实现前后端分离登录认证及权限控制_I_am_Rick_Hu的博客-CSDN博客_springsecurity前后端分离登录认证</a></p>\n<p>最近一段时间，公司给我安排了一个公司子系统的后台管理系统，让我实现权限管理。此时我就考虑到Spring全家桶的Spring security来权限管理。Spring security大致分为认证和授权两个功能，底层也是通过JavaWeb的Filter过滤器来实现，在Spring security中维护了一个过滤器链用来一层的一层的做过滤实现认证和授权，这里就不过多的介绍了，下面用案例来介绍。</p>\n<p></p>\n<h1><strong>项目前的准备：</strong></h1>\n<p><strong>整体架构为Spring boot+Spring security+Mybatis-plus+jwt。整体项目的结构如下：</strong></p>\n<p><img alt=\"\" height=\"1200\" src=\"..\\..\\static\\image\\261863bfc2e642ab97505ba6ff8180c0.png\" width=\"739\"/></p>\n<p><strong>整个项目依赖如下：</strong></p>\n<pre><code class=\"language-XML\"> &lt;parent&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;version&gt;2.2.1.RELEASE&lt;/version&gt;\n    &lt;/parent&gt;\n\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;3.0.5&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n            &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;1.1.13&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;!--JSON--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;\n            &lt;version&gt;1.2.76&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;\n            &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;\n            &lt;version&gt;3.8.1&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;\n            &lt;version&gt;3.4.1&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;\n            &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;\n            &lt;version&gt;2.1&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- JWT--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n            &lt;artifactId&gt;jjwt&lt;/artifactId&gt;\n            &lt;version&gt;0.9.0&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n\n    &lt;build&gt;\n        &lt;resources&gt;\n            &lt;resource&gt;\n                &lt;directory&gt;src/main/java&lt;/directory&gt;\n                &lt;includes&gt;\n                    &lt;include&gt;**/*.xml&lt;/include&gt;\n                &lt;/includes&gt;\n            &lt;/resource&gt;\n        &lt;/resources&gt;\n    &lt;/build&gt;</code></pre>\n<p><strong>数据库的脚本如下：</strong></p>\n<p><strong>大家可以去Mybatis-Plus官网copy到逆向生成的代码，链接如下</strong></p>\n<p><a href=\"https://baomidou.com/pages/779a6e/\" title=\"代码生成器（新） | MyBatis-Plus\">代码生成器（新） | MyBatis-Plus</a></p>\n<p><strong>记得要加上逆向生成的依赖哦，笔者提供的maven依赖中没有写。</strong></p>\n<p><img alt=\"\" height=\"748\" src=\"..\\..\\static\\image\\d1051e443d274bfca77e3938ebfd8c2f.png\" width=\"1200\"/></p>\n<pre><code class=\"language-sql\">SET NAMES utf8mb4;\nSET FOREIGN_KEY_CHECKS = 0;\n\n-- ----------------------------\n-- Table structure for sys_permission\n-- ----------------------------\nDROP TABLE IF EXISTS `sys_permission`;\nCREATE TABLE `sys_permission`  (\n  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键id',\n  `permission_code` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '权限code',\n  `permission_name` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '权限名',\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB AUTO_INCREMENT = 5 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '权限表' ROW_FORMAT = Compact;\n\n-- ----------------------------\n-- Records of sys_permission\n-- ----------------------------\nINSERT INTO `sys_permission` VALUES (1, 'create_user', '创建用户');\nINSERT INTO `sys_permission` VALUES (2, 'query_user', '查看用户');\nINSERT INTO `sys_permission` VALUES (3, 'delete_user', '删除用户');\nINSERT INTO `sys_permission` VALUES (4, 'modify_user', '修改用户');\n\n-- ----------------------------\n-- Table structure for sys_request_path\n-- ----------------------------\nDROP TABLE IF EXISTS `sys_request_path`;\nCREATE TABLE `sys_request_path`  (\n  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键id',\n  `url` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '请求路径',\n  `description` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '路径描述',\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '请求路径' ROW_FORMAT = Compact;\n\n-- ----------------------------\n-- Records of sys_request_path\n-- ----------------------------\nINSERT INTO `sys_request_path` VALUES (1, '/getUser', '查询用户');\nINSERT INTO `sys_request_path` VALUES (2, '/deleteUser', '删除用户');\n\n-- ----------------------------\n-- Table structure for sys_request_path_permission_relation\n-- ----------------------------\nDROP TABLE IF EXISTS `sys_request_path_permission_relation`;\nCREATE TABLE `sys_request_path_permission_relation`  (\n  `id` int(11) NULL DEFAULT NULL COMMENT '主键id',\n  `url_id` int(11) NULL DEFAULT NULL COMMENT '请求路径id',\n  `permission_id` int(11) NULL DEFAULT NULL COMMENT '权限id'\n) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '路径权限关联表' ROW_FORMAT = Compact;\n\n-- ----------------------------\n-- Records of sys_request_path_permission_relation\n-- ----------------------------\nINSERT INTO `sys_request_path_permission_relation` VALUES (1, 1, 2);\nINSERT INTO `sys_request_path_permission_relation` VALUES (2, 2, 3);\n\n-- ----------------------------\n-- Table structure for sys_role\n-- ----------------------------\nDROP TABLE IF EXISTS `sys_role`;\nCREATE TABLE `sys_role`  (\n  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键id',\n  `role_code` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '角色值',\n  `role_name` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '角色名',\n  `role_description` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '角色说明',\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '用户角色表' ROW_FORMAT = Compact;\n\n-- ----------------------------\n-- Records of sys_role\n-- ----------------------------\nINSERT INTO `sys_role` VALUES (1, 'admin', '管理员', '管理员，拥有所有权限');\nINSERT INTO `sys_role` VALUES (2, 'user', '普通用户', '普通用户，拥有部分权限');\n\n-- ----------------------------\n-- Table structure for sys_role_permission_relation\n-- ----------------------------\nDROP TABLE IF EXISTS `sys_role_permission_relation`;\nCREATE TABLE `sys_role_permission_relation`  (\n  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键id',\n  `role_id` int(11) NULL DEFAULT NULL COMMENT '角色id',\n  `permission_id` int(11) NULL DEFAULT NULL COMMENT '权限id',\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB AUTO_INCREMENT = 7 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '角色-权限关联关系表' ROW_FORMAT = Compact;\n\n-- ----------------------------\n-- Records of sys_role_permission_relation\n-- ----------------------------\nINSERT INTO `sys_role_permission_relation` VALUES (1, 1, 1);\nINSERT INTO `sys_role_permission_relation` VALUES (2, 1, 2);\nINSERT INTO `sys_role_permission_relation` VALUES (3, 1, 3);\nINSERT INTO `sys_role_permission_relation` VALUES (4, 1, 4);\nINSERT INTO `sys_role_permission_relation` VALUES (5, 2, 1);\nINSERT INTO `sys_role_permission_relation` VALUES (6, 2, 2);\n\n-- ----------------------------\n-- Table structure for sys_user\n-- ----------------------------\nDROP TABLE IF EXISTS `sys_user`;\nCREATE TABLE `sys_user`  (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `account` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '账号',\n  `user_name` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '用户名',\n  `password` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '用户密码',\n  `last_login_time` datetime NULL DEFAULT NULL COMMENT '上一次登录时间',\n  `enabled` tinyint(1) NULL DEFAULT 1 COMMENT '账号是否可用。默认为1（可用）',\n  `not_expired` tinyint(1) NULL DEFAULT 1 COMMENT '是否过期。默认为1（没有过期）',\n  `account_not_locked` tinyint(1) NULL DEFAULT 1 COMMENT '账号是否锁定。默认为1（没有锁定）',\n  `credentials_not_expired` tinyint(1) NULL DEFAULT 1 COMMENT '证书（密码）是否过期。默认为1（没有过期）',\n  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',\n  `update_time` datetime NULL DEFAULT NULL COMMENT '修改时间',\n  `create_user` int(11) NULL DEFAULT NULL COMMENT '创建人',\n  `update_user` int(11) NULL DEFAULT NULL COMMENT '修改人',\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '用户表' ROW_FORMAT = Compact;\n\n-- ----------------------------\n-- Records of sys_user\n-- ----------------------------\nINSERT INTO `sys_user` VALUES (1, 'admin', '李哈1', '$2a$10$/fs2JL/Dypng7pYZP8tZ6ufZZ9ZqtnhCSQAtCian2w5ND.kn/a4fK', '2022-03-30 16:10:17', 1, 1, 1, 1, '2019-08-29 06:29:24', '2022-03-30 16:10:17', 1, 1);\nINSERT INTO `sys_user` VALUES (2, 'liha', '李哈2', '$2a$10$YSaBhUZyXotbndbhzVM/Y.kZlTeLKZDkBI/Afe5oLQ7jHXfjSml3m', '2022-03-30 11:06:00', 1, 1, 1, 1, '2019-08-29 06:29:24', '2022-03-30 11:06:00', 1, 2);\n\n-- ----------------------------\n-- Table structure for sys_user_role_relation\n-- ----------------------------\nDROP TABLE IF EXISTS `sys_user_role_relation`;\nCREATE TABLE `sys_user_role_relation`  (\n  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键id',\n  `user_id` int(11) NULL DEFAULT NULL COMMENT '用户id',\n  `role_id` int(11) NULL DEFAULT NULL COMMENT '角色id',\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '用户角色关联关系表' ROW_FORMAT = Compact;\n\n-- ----------------------------\n-- Records of sys_user_role_relation\n-- ----------------------------\nINSERT INTO `sys_user_role_relation` VALUES (1, 1, 1);\nINSERT INTO `sys_user_role_relation` VALUES (2, 2, 2);\n\nSET FOREIGN_KEY_CHECKS = 1;\n</code></pre>\n<p><strong>返回结果的枚举：</strong></p>\n<pre><code class=\"language-java\">public enum ResultCode {\n    /* 成功 */\n    SUCCESS(200, \"请求成功\"),\n    SUCCESS_login(200, \"用户登录成功\"),\n    SUCCESS_logout(200, \"用户退出成功\"),\n\n    /* 默认失败 */\n    COMMON_FAIL(999, \"失败\"),\n\n    /* 参数错误：1000～1999 */\n    PARAM_NOT_VALID(1001, \"参数无效\"),\n    PARAM_IS_BLANK(1002, \"参数为空\"),\n    PARAM_TYPE_ERROR(1003, \"参数类型错误\"),\n    PARAM_NOT_COMPLETE(1004, \"参数缺失\"),\n\n    /* 用户错误 */\n    USER_NOT_LOGIN(2001, \"用户未登录\"),\n    USER_ACCOUNT_EXPIRED(2002, \"账号已过期\"),\n    USER_CREDENTIALS_ERROR(2003, \"密码错误\"),\n    USER_CREDENTIALS_EXPIRED(2004, \"密码过期\"),\n    USER_ACCOUNT_DISABLE(2005, \"账号不可用\"),\n    USER_ACCOUNT_LOCKED(2006, \"账号被锁定\"),\n    USER_ACCOUNT_NOT_EXIST(2007, \"账号不存在\"),\n    USER_ACCOUNT_ALREADY_EXIST(2008, \"账号已存在\"),\n    USER_ACCOUNT_USE_BY_OTHERS(2009, \"账号下线\"),\n\n    /* 业务错误 */\n    NO_PERMISSION(3001, \"当前账号没有此权限\");\n    private Integer code;\n    private String message;\n\n    ResultCode(Integer code, String message) {\n        this.code = code;\n        this.message = message;\n    }\n\n    public Integer getCode() {\n        return code;\n    }\n\n    public void setCode(Integer code) {\n        this.code = code;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n    /**\n     * 根据code获取message\n     *\n     * @param code\n     * @return\n     */\n    public static String getMessageByCode(Integer code) {\n        for (ResultCode ele : values()) {\n            if (ele.getCode().equals(code)) {\n                return ele.getMessage();\n            }\n        }\n        return null;\n    }\n}</code></pre>\n<p><strong>返回结果的实体类如下：</strong></p>\n<pre><code class=\"language-java\">@Data\npublic class JsonResult&lt;T&gt; implements Serializable {\n    private Boolean success;\n    private Integer errorCode;\n    private String errorMsg;\n    private T data;\n\n    public JsonResult() {\n    }\n\n    // 成功或者失败都能走这个\n    public JsonResult(boolean success) {\n        this.success = success;\n        this.errorMsg = success ? ResultCode.SUCCESS.getMessage() : ResultCode.COMMON_FAIL.getMessage();\n        this.errorCode = success ? ResultCode.SUCCESS.getCode() : ResultCode.COMMON_FAIL.getCode();\n    }\n\n    // 成功或者失败都能走这个，并且可以传一个枚举来改变默认枚举的值\n    public JsonResult(boolean success, ResultCode resultEnum) {\n        this.success = success;\n        // 传来的枚举为null就用默认的，不为null就用传来的枚举\n        this.errorCode = success ? (resultEnum==null?ResultCode.SUCCESS.getCode():resultEnum.getCode()) : (resultEnum == null ? ResultCode.COMMON_FAIL.getCode() : resultEnum.getCode());\n        this.errorMsg = success ? (resultEnum==null?ResultCode.SUCCESS.getMessage():resultEnum.getMessage()): (resultEnum == null ? ResultCode.COMMON_FAIL.getMessage() : resultEnum.getMessage());\n    }\n\n    // 成功或者失败都能用\n    // 用户可以传一个任意对象过来，用默认的成功或者失败的枚举\n    public JsonResult(boolean success, T data) {\n        this.success = success;\n        this.errorCode = success ? ResultCode.SUCCESS.getCode() : ResultCode.COMMON_FAIL.getCode();\n        this.errorMsg = success ? ResultCode.SUCCESS.getMessage() : ResultCode.COMMON_FAIL.getMessage();\n        this.data = data;\n    }\n\n    // 成功或者失败都能用\n    // 用户可以传一个任意对象和自定义枚举过来\n    public JsonResult(boolean success, ResultCode resultEnum, T data) {\n        this.success = success;\n        this.errorCode = success ? (resultEnum==null ? ResultCode.SUCCESS.getCode() : resultEnum.getCode()): (resultEnum == null ? ResultCode.COMMON_FAIL.getCode() : resultEnum.getCode());\n        this.errorMsg = success ? (resultEnum==null ? ResultCode.SUCCESS.getMessage() : resultEnum.getMessage()) : (resultEnum == null ? ResultCode.COMMON_FAIL.getMessage() : resultEnum.getMessage());\n        this.data = data;\n    }\n}</code></pre>\n<p><strong>返回结果的包装类：</strong></p>\n<pre><code class=\"language-java\">/**\n * @Author: liha\n * @Description:\n */\npublic class ResultTool {\n    public static JsonResult success() {\n        return new JsonResult(true);\n    }\n\n    public static JsonResult success(ResultCode resultEnum) {\n        return new JsonResult(true,resultEnum);\n    }\n\n    public static &lt;T&gt; JsonResult&lt;T&gt; success(T data) {\n        return new JsonResult(true, data);\n    }\n\n    public static &lt;T&gt; JsonResult&lt;T&gt; success(ResultCode resultEnum,T data){\n        return new JsonResult&lt;&gt;(true,resultEnum,data);\n    }\n\n    public static JsonResult fail() {\n        return new JsonResult(false);\n    }\n\n    public static JsonResult fail(ResultCode resultEnum) {\n        return new JsonResult(false, resultEnum);\n    }\n}</code></pre>\n<p><strong>JWT的工具类：</strong></p>\n<p><strong>过期时间和秘钥大家可以自行设置/需要加密的字段也可以根据自己需要做处理</strong></p>\n<pre><code>/**\n * @author liha\n * @since 2021/10/16\n */\npublic class JwtUtils {\n\n    public static final long EXPIRE = 1000 * 60 * 60 * 24;//token过期时间   24小时\n    public static final String APP_SECRET = \"ukc8BDbRigUDaY6pZFfWus2jZWLPHO\";//密钥\n\n\n    public static String getJwtToken(String id, String account){\n\n        String JwtToken = Jwts.builder()\n                .setHeaderParam(\"typ\", \"JWT\")\n                .setHeaderParam(\"alg\", \"HS256\")\n                .setSubject(\"jacob-user\")\n                .setIssuedAt(new Date())\n                .setExpiration(new Date(System.currentTimeMillis() + EXPIRE))\n                .claim(\"id\", id)\n                .claim(\"account\", account)\n                .signWith(SignatureAlgorithm.HS256, APP_SECRET)\n                .compact();\n\n        return JwtToken;\n    }\n\n    /**\n     * 根据token，判断token是否存在与有效\n     * @param jwtToken\n     * @return\n     */\n    public static boolean checkToken(String jwtToken) {\n        if(StringUtils.isEmpty(jwtToken)) return false;\n        try {\n            Jwts.parser().setSigningKey(APP_SECRET).parseClaimsJws(jwtToken);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * 根据request判断token是否存在与有效（也就是把token取出来罢了）\n     * @param request\n     * @return\n     */\n    public static boolean checkToken(HttpServletRequest request) {\n        try {\n            String jwtToken = request.getHeader(\"UserToken\");\n            if(StringUtils.isEmpty(jwtToken)) return false;\n            Jwts.parser().setSigningKey(APP_SECRET).parseClaimsJws(jwtToken);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * 根据token获取会员id\n     * @param request\n     * @return\n     */\n    public static String getMemberIdByJwtToken(HttpServletRequest request) {\n        String jwtToken = request.getHeader(\"UserToken\");\n        if(StringUtils.isEmpty(jwtToken)) return \"\";\n        try {\n            // 这里解析可能会抛异常，所以try catch来捕捉\n            Jws&lt;Claims&gt; claimsJws = Jwts.parser().setSigningKey(APP_SECRET).parseClaimsJws(jwtToken);\n            Claims claims = claimsJws.getBody();\n            return (String)claims.get(\"id\");\n        }catch (Exception e){\n            e.printStackTrace();\n            return \"\";\n        }\n    }\n\n\n    /**\n     * 根据token获取用户的account\n     * @param request\n     * @return\n     */\n    public static String getMemberAccountByJwtToken(HttpServletRequest request) {\n        String jwtToken = request.getHeader(\"UserToken\");\n        if(StringUtils.isEmpty(jwtToken)) return \"\";\n        try{\n            Jws&lt;Claims&gt; claimsJws = Jwts.parser().setSigningKey(APP_SECRET).parseClaimsJws(jwtToken);\n            Claims claims = claimsJws.getBody();\n            return (String)claims.get(\"account\");\n        }catch (Exception e){\n            e.printStackTrace();\n            return \"\";\n        }\n    }\n}</code></pre>\n<h1></h1>\n<h1>Spring Security层面：</h1>\n<p>首先，我们要明白，Spring security默认是帮你实现了一个登录页面的，我们要实现前后端分离肯定是要抛弃掉默认的登录页面，但是我们的登录判断还是交给Spring security来完成，所以需要实现UserDetailsService接口，这个接口来帮你完成登录的判断。并且我们知道用户的用户名和密码是要保存到DB中，所以这里需要注入Mapper的接口，来实现一个查询，并且把当前用户的权限和保存起来，其实这里也可以抽出一个User的实体类继承UserDetails接口，然后在下面的接口的loadUserByUsername实现方法中返回我们的User实体类。</p>\n<p><img alt=\"\" height=\"133\" src=\"..\\..\\static\\image\\5fd18db80e754d8eb084b6343dc7f092.png\" width=\"838\"/></p>\n<pre><code class=\"language-java\">@Service\npublic class SecurityUserServiceImpl implements SecurityUserService {\n\n    @Autowired\n    private SysUserMapper sysUserMapper;\n\n    @Autowired\n    private SysPermissionMapper sysPermissionMapper;\n    \n    /**\n     * 根据用户名查找数据库，判断是否存在这个用户\n     * */\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n\n        // 用户名必须是唯一的，不允许重复\n        SysUser sysUser = sysUserMapper.selectOne(new QueryWrapper&lt;SysUser&gt;().eq(\"account\",username));\n\n        if(StringUtils.isEmpty(sysUser)){\n            throw new UsernameNotFoundException(\"根据用户名找不到该用户的信息！\");\n        }\n\n        List&lt;SysPermission&gt; sysPermissions = sysPermissionMapper.getUserRolesByUserId(sysUser.getId());\n        List&lt;GrantedAuthority&gt; grantedAuthorities = new ArrayList&lt;&gt;();\n        sysPermissions.stream().forEach(sysPermission -&gt; {\n            GrantedAuthority grantedAuthority = new SimpleGrantedAuthority(sysPermission.getPermissionCode());\n            grantedAuthorities.add(grantedAuthority);\n        });\n\n        return new User(sysUser.getAccount(), sysUser.getPassword(), sysUser.getEnabled(), sysUser.getNotExpired(), sysUser.getCredentialsNotExpired(), sysUser.getAccountNotLocked(), grantedAuthorities);\n    }\n}</code></pre>\n<p><strong>Mybatis语句如下：</strong></p>\n<pre><code class=\"language-java\">&lt;select id=\"getUserRolesByUserId\" resultType=\"com.entontech.entiry.SysPermission\"&gt;\n    SELECT\n        p.*\n    FROM\n        sys_user AS u\n            LEFT JOIN sys_user_role_relation AS ur\n                      ON u.id = ur.user_id\n            LEFT JOIN sys_role AS r\n                      ON r.id = ur.role_id\n            LEFT JOIN sys_role_permission_relation AS rp\n                      ON r.id = rp.role_id\n            LEFT JOIN sys_permission AS p\n                      ON p.id = rp.permission_id\n    WHERE u.id = #{userId}\n&lt;/select&gt;</code></pre>\n<p>我们要明白，前后端分离的项目，只能返回Json数据给前段的拦截器来对JSON做处理，实现一些页面跳转的功能，而前后端不分离的项目可以实现内部的请求转发或者重定向之类的实现页面跳转，并且我们知道，对于一个系统来说有很多功能是需要登录了才能访问的，所以下面就是未登录的一个处理。</p>\n<pre><code class=\"language-java\">/**\n * @author liha\n * @version 1.0\n * @date 2022/3/28 15:31\n * @description 用户未登录\n */\n@Component\npublic class CustomizeAuthenticationEntryPoint implements AuthenticationEntryPoint {\n\n    // 返回的是Json数据\n    @Override\n    public void commence(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e) throws IOException, ServletException {\n        JsonResult result = ResultTool.fail(ResultCode.USER_NOT_LOGIN);\n        httpServletResponse.setContentType(\"text/json;charset=utf-8\");\n        httpServletResponse.getWriter().write(JSON.toJSONString(result));\n    }\n}</code></pre>\n<p>当用户登录以后，有一些接口是只能时管理员身份来访问的，有一些接口是对外开放的，所以前后端分离的项目中，对于一个权限的处理，也只能后端给前段返回JSON数据，前段拦截器来做出来，后端的权限控制如下：</p>\n<pre><code class=\"language-java\">/**\n * @author liha\n * @version 1.0\n * @date 2022/3/29 9:52\n * @description 没有权限\n */\n@Component\npublic class CustomizeAccessDeniedHandler implements AccessDeniedHandler {\n    @Override\n    public void handle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AccessDeniedException e) throws IOException, ServletException {\n        JsonResult noPermission = ResultTool.fail(ResultCode.NO_PERMISSION);\n        //处理编码方式，防止中文乱码的情况\n        httpServletResponse.setContentType(\"text/json;charset=utf-8\");\n        // 把Json数据放到HttpServletResponse中返回给前台\n        httpServletResponse.getWriter().write(JSON.toJSONString(noPermission));\n    }\n}</code></pre>\n<p>对于用户登录时候，可能会出现成功或者失败2中情况，所以2中情况也是需要处理的。2中情况也是只能返回Json数据，前段拦截器做处理。</p>\n<p>下面是失败的处理。</p>\n<pre><code class=\"language-java\">/**\n * @author liha\n * @version 1.0\n * @date 2022/3/28 15:37\n * @description 登录账户时失败的处理\n */\n@Component\npublic class CustomizeAuthenticationFailureHandler implements AuthenticationFailureHandler {\n\n    @Override\n    public void onAuthenticationFailure(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e) throws IOException, ServletException {\n        //返回json数据\n        JsonResult result = null;\n        if (e instanceof AccountExpiredException) {\n            //账号过期\n            result = ResultTool.fail(ResultCode.USER_ACCOUNT_EXPIRED);\n        } else if (e instanceof BadCredentialsException) {\n            //密码错误\n            result = ResultTool.fail(ResultCode.USER_CREDENTIALS_ERROR);\n        } else if (e instanceof CredentialsExpiredException) {\n            //密码过期\n            result = ResultTool.fail(ResultCode.USER_CREDENTIALS_EXPIRED);\n        } else if (e instanceof DisabledException) {\n            //账号不可用\n            result = ResultTool.fail(ResultCode.USER_ACCOUNT_DISABLE);\n        } else if (e instanceof LockedException) {\n            //账号锁定\n            result = ResultTool.fail(ResultCode.USER_ACCOUNT_LOCKED);\n        } else if (e instanceof InternalAuthenticationServiceException) {\n            //用户不存在\n            result = ResultTool.fail(ResultCode.USER_ACCOUNT_NOT_EXIST);\n        }else{\n            //其他错误\n            result = ResultTool.fail(ResultCode.COMMON_FAIL);\n        }\n        //处理编码方式，防止中文乱码的情况\n        httpServletResponse.setContentType(\"text/json;charset=utf-8\");\n        // 把Json数据放入到HttpServletResponse中返回给前台\n        httpServletResponse.getWriter().write(JSON.toJSONString(result));\n    }\n}</code></pre>\n<p>下面是成功的处理，而我们知道，整合JWT以后，登录成功后，肯定是需要根据某些字段生成Token给前段返回的，所以也就是这里来做处理，并且根据自己的业务可以在登录成功的处理中加上自己业务的逻辑。</p>\n<pre><code class=\"language-java\">/**\n * @author liha\n * @version 1.0\n * @date 2022/3/28 15:39\n * @description 登录成功\n */\n@Component\npublic class CustomizeAuthenticationSuccessHandler implements AuthenticationSuccessHandler {\n    @Autowired\n    SysUserMapper mapper;\n    \n    @Override\n    public void onAuthenticationSuccess(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication) throws IOException, ServletException {\n        //更新用户表上次登录时间、更新人、更新时间等字段\n        User userDetails = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n        SysUser sysUser = mapper.selectOne(new QueryWrapper&lt;SysUser&gt;().eq(\"account\",userDetails.getUsername()));\n        sysUser.setLastLoginTime(new Date());\n        sysUser.setUpdateTime(new Date());\n        sysUser.setUpdateUser(sysUser.getId());\n        mapper.update(sysUser,new QueryWrapper&lt;SysUser&gt;().eq(\"id\",sysUser.getId()));\n        \n        // 根据用户的id和account生成token并返回\n        String jwtToken = JwtUtils.getJwtToken(sysUser.getId().toString(), sysUser.getAccount());\n        Map&lt;String,String&gt; results = new HashMap&lt;&gt;();\n        results.put(\"token\",jwtToken);\n\n        //返回json数据\n        JsonResult result = ResultTool.success(ResultCode.SUCCESS_login,results);\n        //处理编码方式，防止中文乱码的情况\n        httpServletResponse.setContentType(\"text/json;charset=utf-8\");\n        // 把Json数据放入HttpServletResponse中返回给前台\n        httpServletResponse.getWriter().write(JSON.toJSONString(result));\n    }\n}</code></pre>\n<p>退出登录的处理，对于退出登录，也就是后端返回Json，前段删除Token。退出的大部分功能还是需要前段来处理。</p>\n<pre><code class=\"language-java\">/**\n * @author liha\n * @version 1.0\n * @date 2022/3/28 15:38\n * @description 退出登录\n */\n@Component\npublic class CustomizeLogoutSuccessHandler implements LogoutSuccessHandler {\n    @Override\n    public void onLogoutSuccess(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication) throws IOException, ServletException {\n        JsonResult result = ResultTool.success(ResultCode.SUCCESS_logout);\n        httpServletResponse.setContentType(\"text/json;charset=utf-8\");\n        httpServletResponse.getWriter().write(JSON.toJSONString(result));\n    }\n}</code></pre>\n<p>我们把这么多功能的处理写完了，但是我们项目毕竟是基于JWT的前后端分离，所以我们需要自己实现一个Filter接口，来实现自定义的JWT过滤器功能，来实现对Token的处理。所以我们定义一个JWT过滤器类实现<span style=\"background-color:#a2e043;\">OncePerRequestFilter</span>接口。</p>\n<p>下面也就是对Token的一个判断，并且通过Token获取到用户的信息，然后再通过用户的信息获取到权限添加到SecurityContext。我的理解就是这样就可以实现只需要判断一次获取到一个令牌，然后把用户的信息做一个存储。</p>\n<pre><code class=\"language-java\">/**\n * @author liha\n * @version 1.0\n * @date 2022/3/30 10:28\n * @description 这个过滤器用来判断JWT是否有效\n */\n@Component\npublic class JwtAuthenticationTokenFilter extends OncePerRequestFilter {\n    /**\n     * 直接将我们前面写好的service注入进来，通过service获取到当前用户的权限\n     * */\n    @Autowired\n    private SecurityUserService userDetailsService;\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, FilterChain filterChain) throws ServletException, IOException {\n        // 获取当请求头中的token，其实这里多余，完全可以使用HttpServletRequest来获取\n        String authToken = httpServletRequest.getHeader(\"UserToken\");\n\n        // 获取到当前用户的account\n        String account = JwtUtils.getMemberAccountByJwtToken(httpServletRequest);\n        \n        System.out.println(\"自定义JWT过滤器获得用户名为\"+account);\n\n        // 当token中的username不为空时进行验证token是否是有效的token\n        if (!account.equals(\"\") &amp;&amp; SecurityContextHolder.getContext().getAuthentication() == null) {\n            // token中username不为空，并且Context中的认证为空，进行token验证\n            \n            // 获取到用户的信息，也就是获取到用户的权限\n            UserDetails userDetails = this.userDetailsService.loadUserByUsername(account);\n            \n            if (JwtUtils.checkToken(authToken)) {   // 验证当前token是否有效\n\n                UsernamePasswordAuthenticationToken authentication =\n                        new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());\n\n                authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(httpServletRequest));\n                \n                //将authentication放入SecurityContextHolder中\n                SecurityContextHolder.getContext().setAuthentication(authentication);\n            }\n        }\n        // 放行给下个过滤器\n        filterChain.doFilter(httpServletRequest, httpServletResponse);\n    }\n}</code></pre>\n<p>此时，我们还需要根据不同的请求来做权限的判断，这里我们总不能把所有请求都写在配置文件中把，我们肯定是需要放在DB中，然后请求一过来获取到请求路径，然后根据请求路径查询数据库获取到具体的权限，然后根据权限再判断当前的角色是否有权利。</p>\n<p><strong>这里是获取到请求，然后查询数据库获取到权限。</strong></p>\n<pre><code class=\"language-java\">/**\n * @author liha\n * @version 1.0\n * @date 2022/3/28 16:48\n * @description 根据请求，查询数据库，看看这个请求是那些角色能访问\n */\n@Component\npublic class CustomizeFilterInvocationSecurityMetadataSource implements FilterInvocationSecurityMetadataSource {\n    AntPathMatcher antPathMatcher = new AntPathMatcher();\n\n    @Autowired\n    SysPermissionMapper sysPermissionMapper;\n\n    @Override\n    public Collection&lt;ConfigAttribute&gt; getAttributes(Object o) throws IllegalArgumentException {\n        // 获取请求地址\n        String requestUrl = ((FilterInvocation) o).getRequestUrl();\n        // 查询具体某个接口的权限\n        List&lt;SysPermission&gt; permissionList =  sysPermissionMapper.selectListByPath(requestUrl);\n        if(permissionList == null || permissionList.size() == 0){\n            // 请求路径没有配置权限，表明该请求接口可以任意访问\n            return null;\n        }\n        String[] attributes = new String[permissionList.size()];\n        for(int i = 0;i&lt;permissionList.size();i++){\n            attributes[i] = permissionList.get(i).getPermissionCode();\n        }\n        return SecurityConfig.createList(attributes);\n    }\n\n    @Override\n    public Collection&lt;ConfigAttribute&gt; getAllConfigAttributes() {\n        return null;\n    }\n\n    @Override\n    public boolean supports(Class&lt;?&gt; aClass) {\n        return true;\n    }\n}</code></pre>\n<p><strong>Mybatis语句如下：</strong></p>\n<pre><code class=\"language-XML\">&lt;select id=\"selectListByPath\" resultType=\"com.entontech.entiry.SysPermission\"&gt;\n    select p.*\n    from sys_permission as p\n    left join sys_request_path_permission_relation as srp\n        on p.id = srp.permission_id\n    left join sys_request_path as sr\n        on srp.url_id = sr.id\n    where sr.url = #{requestUrl}\n&lt;/select&gt;</code></pre>\n<p>上一步根据请求获取到当前请求的权限，所以我们还需要获取到之前UserDetailsService接口的实现方法loadUserByUsername存入的当前用户的权限做一个匹对。</p>\n<pre><code class=\"language-java\">/**\n * @author liha\n * @version 1.0\n * @date 2022/3/28 16:48\n * @description 匹对权限\n */\n@Component\npublic class CustomizeAccessDecisionManager implements AccessDecisionManager {\n    @Override\n    public void decide(Authentication authentication, Object o, Collection&lt;ConfigAttribute&gt; collection) throws AccessDeniedException, InsufficientAuthenticationException {\n        Iterator&lt;ConfigAttribute&gt; iterator = collection.iterator();\n        while (iterator.hasNext()) {\n            ConfigAttribute ca = iterator.next();\n            // 当前请求需要的权限\n            String needRole = ca.getAttribute();\n            // 当前用户所具有的权限\n            Collection&lt;? extends GrantedAuthority&gt; authorities = authentication.getAuthorities();\n            for (GrantedAuthority authority : authorities) {\n                if (authority.getAuthority().equals(needRole)) {\n                    return;\n                }\n            }\n        }\n        throw new AccessDeniedException(\"权限不足!\");\n    }\n\n    @Override\n    public boolean supports(ConfigAttribute configAttribute) {\n        return true;\n    }\n\n    @Override\n    public boolean supports(Class&lt;?&gt; aClass) {\n        return true;\n    }\n}</code></pre>\n<p>此时我们还需要一步，就是把前面2者的操作给串通起来，因为根据路径获取到权限，和登录时存的权限需要一个桥梁来判断。</p>\n<pre><code class=\"language-java\">**\n * @author liha\n * @version 1.0\n * @date 2022/3/28 16:47\n * @description  我的理解是这个过滤器能把前2步的操作给连接起来\n */\n@Service\npublic class CustomizeAbstractSecurityInterceptor extends AbstractSecurityInterceptor implements Filter {\n\n    @Autowired\n    private FilterInvocationSecurityMetadataSource securityMetadataSource;\n\n    @Autowired\n    public void setMyAccessDecisionManager(CustomizeAccessDecisionManager accessDecisionManager) {\n        super.setAccessDecisionManager(accessDecisionManager);\n    }\n\n    @Override\n    public Class&lt;?&gt; getSecureObjectClass() {\n        return FilterInvocation.class;\n    }\n\n    @Override\n    public SecurityMetadataSource obtainSecurityMetadataSource() {\n        return this.securityMetadataSource;\n    }\n\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        FilterInvocation fi = new FilterInvocation(servletRequest, servletResponse, filterChain);\n        invoke(fi);\n    }\n\n    public void invoke(FilterInvocation fi) throws IOException, ServletException {\n        //fi里面有一个被拦截的url\n        //里面调用MyInvocationSecurityMetadataSource的getAttributes(Object object)这个方法获取fi对应的所有权限\n        //再调用MyAccessDecisionManager的decide方法来校验用户的权限是否足够\n        InterceptorStatusToken token = super.beforeInvocation(fi);\n        try {\n            //执行下一个拦截器\n            fi.getChain().doFilter(fi.getRequest(), fi.getResponse());\n        } finally {\n            super.afterInvocation(token, null);\n        }\n    }\n}</code></pre>\n<blockquote>\n<p><strong>小科普：</strong></p>\n<p>如果@Autowirte注解写在方法上，就会把当前方法的参数从IoC容器中获取到，并且执行当前方法。</p>\n</blockquote>\n<p>我们最早是写的SpringSecurity的一些处理逻辑，后面是写的自定义的一些过滤逻辑。 此时我们还需要把这些处理逻辑和自定义的过滤逻辑通过配置的情况放入到SpringSecurity中。</p>\n<p>可以清楚的看到，也就是把我们写的处理逻辑可以自定义过滤器给注入，然后配置。</p>\n<p>可以说这个配置是一个整体的架子，把不同的内容给填充进来。</p>\n<pre><code class=\"language-java\">/**\n * @author com.liha\n * @version 1.0\n * @date 2022/3/25 10:27\n * @description  SpringSecurity的配置类\n */\n@Configuration\n@EnableWebSecurity\npublic class MyConfig extends WebSecurityConfigurerAdapter {\n\n    @Autowired\n    private SecurityUserService securityUserService;\n\n    @Autowired\n    private AuthenticationEntryPoint authenticationEntryPoint;\n\n    @Autowired\n    private AuthenticationFailureHandler authenticationFailureHandler;\n\n    @Autowired\n    private LogoutSuccessHandler logoutSuccessHandler;\n\n    @Autowired\n    private AuthenticationSuccessHandler authenticationSuccessHandler;\n\n    @Autowired\n    private SessionInformationExpiredStrategy sessionInformationExpiredStrategy;\n\n    @Autowired\n    private CustomizeAbstractSecurityInterceptor customizeAbstractSecurityInterceptor;\n\n    @Autowired\n    private CustomizeAccessDecisionManager customizeAccessDecisionManager;\n\n    @Autowired\n    private CustomizeFilterInvocationSecurityMetadataSource customizeFilterInvocationSecurityMetadataSource;\n\n    @Autowired\n    private CustomizeAccessDeniedHandler customizeAccessDeniedHandler;\n\n    @Autowired\n    private JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;\n\n    /**\n     * 对请求进行鉴权的配置\n     *\n     * @param http\n     * @throws Exception\n     */\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n\n        http.cors()\n                .and().csrf().disable();\n\n        http.authorizeRequests().\n                withObjectPostProcessor(new ObjectPostProcessor&lt;FilterSecurityInterceptor&gt;() {\n                    @Override\n                    public &lt;O extends FilterSecurityInterceptor&gt; O postProcess(O o) {\n                        o.setAccessDecisionManager(customizeAccessDecisionManager);//访问决策管理器\n                        o.setSecurityMetadataSource(customizeFilterInvocationSecurityMetadataSource);//安全元数据源\n                        return o;\n                    }\n                });\n\n        http.authorizeRequests()\n                .and()\n                    .exceptionHandling()\n                    .authenticationEntryPoint(authenticationEntryPoint)\n                    .accessDeniedHandler(customizeAccessDeniedHandler)\n                .and()\n                    .formLogin()  // 登录\n                    .permitAll()  //允许所有用户\n                    .successHandler(authenticationSuccessHandler)  //登录成功处理逻辑\n                    .failureHandler(authenticationFailureHandler)  //登录失败处理逻辑\n                .and()\n                    .logout()      // 退出\n                    .permitAll()   //允许所有用户\n                    .logoutSuccessHandler(logoutSuccessHandler)  //退出成功处理逻辑\n                    .deleteCookies(\"JSESSIONID\")   //登出之后删除cookie\n                .and()\n                    .sessionManagement()    //会话管理\n                    .maximumSessions(1)     //同一账号同时登录最大用户数\n                    .expiredSessionStrategy(sessionInformationExpiredStrategy);\n\n        http.addFilterBefore(customizeAbstractSecurityInterceptor, FilterSecurityInterceptor.class);\n        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);\n        http.headers().cacheControl();\n    }\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.userDetailsService(securityUserService);\n    }\n\n    /**\n     * 默认开启密码加密，前端传入的密码Security会在加密后和数据库中的密文进行比对，一致的话就登录成功\n     * 所以必须提供一个加密对象，供security加密前端明文密码使用\n     * @return\n     */\n    @Bean\n    PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n}\n</code></pre>\n<p>密码的处理，由于security是要加密的密码，以BCryptPasswordEncoder类型生成的密码，所以我们写一个测试类来生成我们的需要的密码。</p>\n<p><strong>这里有一点要注意，生成的密码放入数据库的时候，记得ctrl+A全选数据库字段，双击的话可能不等于全线（别问我怎么知道的，被这东西困扰几个小时）</strong></p>\n<p></p>\n<p><strong>跨域处理，也是一个标有@Configuration的配置类。</strong></p>\n<pre><code class=\"language-java\">/**\n * @author liha\n * @version 1.0\n * @date 2022/3/29 11:18\n * @description\n */\n@Configuration\npublic class CronConfig {\n\n    private CorsConfiguration buildConfig() {\n        CorsConfiguration corsConfiguration = new CorsConfiguration();\n        //  你需要跨域的地址  注意这里的 127.0.0.1 != localhost\n        // * 表示对所有的地址都可以访问\n        corsConfiguration.addAllowedOrigin(\"*\");  // 1\n        //  跨域的请求头\n        corsConfiguration.addAllowedHeader(\"*\"); // 2\n        //  跨域的请求方法\n        corsConfiguration.addAllowedMethod(\"*\"); // 3\n        //加上了这一句，大致意思是可以携带 cookie\n        //最终的结果是可以 在跨域请求的时候获取同一个 session\n        corsConfiguration.setAllowCredentials(true);\n        return corsConfiguration;\n    }\n    @Bean\n    public CorsFilter corsFilter() {\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        //配置 可以访问的地址\n        source.registerCorsConfiguration(\"/**\", buildConfig()); \n        return new CorsFilter(source);\n    }\n}</code></pre>\n<p>security大功告成，</p>\n<p><strong>接下来就是controller的接口。</strong></p>\n<pre><code class=\"language-java\">    @GetMapping(\"/deleteUser\")\n    public JsonResult deleteUser(){\n        return ResultTool.success();\n    }\n\n    @GetMapping(\"test\")\n    public JsonResult test(){\n        Map&lt;String,String&gt; map = new HashMap&lt;&gt;();\n        map.put(\"hell\",\"wolrd\");\n        return ResultTool.success(map);\n    }</code></pre>\n<p>接下来就是我们的测试阶段，测试的话直接使用ApiPost或者是PostMan来测试把。有前段的也可以用前段来测试。</p>\n<p><strong>未登录时</strong></p>\n<p><img alt=\"\" height=\"744\" src=\"..\\..\\static\\image\\b83e888675e64e7dbcc37e27a9376a20.png\" width=\"930\"/></p>\n<p><strong> 登录普通用户</strong></p>\n<p><img alt=\"\" height=\"854\" src=\"..\\..\\static\\image\\38e84d1ff847487fa6a601f3e3852f26.png\" width=\"952\"/></p>\n<p><strong> 普通用户访问没有权限等接口时</strong></p>\n<p><img alt=\"\" height=\"856\" src=\"..\\..\\static\\image\\6df793031d254f95923ef1ea0ace54b1.png\" width=\"952\"/></p>\n<p><strong>再登入管理员身份来测试deleteUser接口</strong></p>\n<p><img alt=\"\" height=\"930\" src=\"..\\..\\static\\image\\dd525e8357234ebfa8858a0d790b8aef.png\" width=\"955\"/></p>\n<p><img alt=\"\" height=\"874\" src=\"..\\..\\static\\image\\8aba6952f8b945a283ba4ad437a68075.png\" width=\"953\"/></p>\n<p><strong>退出功能</strong></p>\n<p><img alt=\"\" height=\"951\" src=\"..\\..\\static\\image\\a3879b8ba14c41cda3902653a150d29d.png\" width=\"980\"/></p>\n<p><strong> 退出后再访问就是需要重新登录了</strong></p>\n<p><img alt=\"\" height=\"887\" src=\"..\\..\\static\\image\\053f96379540477cb9a22413f681f98f.png\" width=\"954\"/></p>\n<p><strong>像个项目的Gitee地址如下：</strong></p>\n<p><a class=\"link-info has-card\" href=\"https://gitee.com/lihaJay/ssj\" title=\"整个项目Gitee地址\"><span class=\"link-card-box\"><span class=\"link-title\">整个项目Gitee地址</span><span class=\"link-link\"><img alt=\"\" class=\"link-link-icon\" src=\"..\\..\\static\\image\\icon-default.png\"/>https://gitee.com/lihaJay/ssj</span></span></a></p>\n<h1>总结</h1>\n<p>基本上没讲什么底层实现，这篇是使用篇，后续会出Spring Security的底层源码讲解，并且如果本帖有问题的有疑问的读者可以在评论区留言，本人会积极处理。</p>\n<p><strong>最后，如果本帖对您有帮助，希望能点赞+关注+收藏。您的支持是我最大的动力，本人一直在努力的更新各种框架的使用和框架的源码解读~！</strong></p>\n</div>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-03-30 22:52:38", "summary": "借鉴文章：实现前后端分离登录认证及权限控制的博客博客前后端分离登录认证实现前后端分离登录认证及权限控制的博客博客前后端分离登录认证最近一段时间，公司给我安排了一个公司子系统的后台管理系统，让我实现权限"}