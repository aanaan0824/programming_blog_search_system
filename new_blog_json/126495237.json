{"blogid": "126495237", "writerAge": "码龄4年", "writerBlogNum": "473", "writerCollect": "6887", "writerComment": "11736", "writerFan": "25045", "writerGrade": "7级", "writerIntegral": "23737", "writerName": "不渴望力量的哈士奇", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126495237.jpg", "writerRankTotal": "307", "writerRankWeekly": "33", "writerThumb": "7932", "writerVisitNum": "1030437", "blog_read_count": "820", "blog_time": "已于 2022-08-26 01:13:07 修改", "blog_title": "〖Python 数据库开发实战 - Python与MySQL交互篇③〗- MySQL Connector的事务控制与异常处理", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<div align=\"center\">\n<img src=\"https://img-blog.csdnimg.cn/32e9999525144885bd9b2dfd864c0419.gif#pic_center\" width=\"800\"/>\n</div>\n<table><thead><tr><th align=\"center\"><font color=\"red\">万叶集</font></th></tr></thead><tbody><tr><td align=\"center\"><font color=\"red\">🎉 隐约雷鸣，阴霾天空。 🎉</font></td></tr><tr><td align=\"center\"><font color=\"red\">🎉 但盼风雨来，能留你在此。 🎉</font></td></tr></tbody></table>\n<p><a href=\"https://bbs.csdn.net/topics/607171489\"><img src=\"..\\..\\static\\image\\d4cc2726108645c9811fee160b985fe9.png\"/></a></p>\n<hr/>\n<blockquote>\n<p><strong>前言</strong>：<br/> ✌ 作者简介：<a href=\"https://blog.csdn.net/weixin_42250835?type=blog\">渴望力量的哈士奇</a> ✌，大家可以叫我 🐶哈士奇🐶 ，一位致力于 <font color=\"red\">TFS - 全栈</font> 赋能的博主 ✌<br/> 🏆 <font color=\"red\" size=\"3\">CSDN博客专家认证、新星计划第三季全栈赛道 MVP 、华为云享专家、阿里云专家博主 🏆 </font><br/> 📫 如果文章知识点有错误的地方，请指正！和大家一起学习，一起进步👀<br/> 💬 人生格言：优于别人,并不高贵,真正的高贵应该是优于过去的自己。💬<br/> <font color=\"red\" size=\"3\">🔥 如果感觉博主的文章还不错的话，还请👍关注、点赞、收藏三连支持👍一下博主哦</font></p>\n<hr/>\n<table><tbody><tr align=\"center\"><th>专栏系列（点击解锁）</th><th>学习路线（点击解锁）</th><th>知识定位</th></tr><tr><td align=\"center\" rowspan=\"10\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11631906.html\"> <font color=\"red\" size=\"4.5\">🔥Python全栈白皮书🔥</font> </a> </td><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11631913.html\"> <font color=\"#ff6984\" size=\"3\"> 零基础入门篇 </font> </a> </td><td><font color=\"bule\">以浅显易懂的方式轻松入门，让你彻底爱上Python的魅力。</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11631928.html\"> <font color=\"#ff6984\" size=\"3\"> 语法进阶篇 </font> </a> </td><td><font color=\"bule\">主要围绕多线程编程、正则表达式学习、含贴近实战的项目练习 。 </font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11798104.html\"> <font color=\"#ff6984\" size=\"3\"> 自动化办公篇 </font> </a> </td><td><font color=\"bule\">实现日常办公软件的自动化操作，节省时间、提高办公效率。</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11834532.html\"> <font color=\"#ff6984\" size=\"3\"> 自动化测试实战篇 </font> </a> </td><td><font color=\"bule\">从实战的角度出发，先人一步，快速转型测试开发工程师。</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11840815.html\"> <font color=\"#ff6984\" size=\"3\"> 数据库开发实战篇</font> </a> </td><td><font color=\"bule\">掌握关系型与非关系数据库知识，提升数据库实战开发能力。</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11840958.html\"> <font color=\"#ff6984\" size=\"3\"> 爬虫入门与实战</font> </a> </td><td><font color=\"bule\">更新中</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11841010.html\"> <font color=\"#ff6984\" size=\"3\">数据分析篇</font> </a> </td><td><font color=\"bule\">更新中</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11841028.html\"> <font color=\"#ff6984\" size=\"3\">前端入门+flask 全栈篇</font> </a> </td><td><font color=\"bule\">更新中</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11841035.html\"> <font color=\"#ff6984\" size=\"3\">django+vue全栈篇</font> </a> </td><td><font color=\"bule\">更新中</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11841157.html\"> <font color=\"#ff6984\" size=\"3\">拓展-人工智能入门</font> </a> </td><td><font color=\"bule\">更新中</font></td></tr><tr><td align=\"center\" rowspan=\"6\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11123904.html\"> <font color=\"red\" size=\"4.5\">网络安全之路</font> </a> </td><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11170008.html\"> <font color=\"#ff6984\" size=\"3\"> 踩坑篇 </font> </a> </td><td>记录学习及演练过程中遇到的坑，便于后来居上者</td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11123907.html\"> <font color=\"#ff6984\" size=\"3\"> 网安知识扫盲篇 </font> </a> </td><td>三天打鱼，不深入了解原理，只会让你成为脚本小子。 </td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11366695.html\"> <font color=\"#ff6984\" size=\"3\"> vulhub靶场漏洞复现 </font> </a> </td><td>让漏洞复现变得简单，让安全研究者更加专注于漏洞原理本身。</td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11324653.html\"> <font color=\"#ff6984\" size=\"3\"> shell编程篇 </font> </a> </td><td>不涉及linux基础，最终案例会偏向于安全加固方向。 <font color=\"red\">[待完结]</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11134620.html\"> <font color=\"#ff6984\" size=\"3\"> WEB漏洞攻防篇</font> </a> </td><td><font color=\"red\">2021年9月3日停止更新，转战先知社区等安全社区及小密圈</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_10675569.html\"> <font color=\"#ff6984\" size=\"3\"> 渗透工具使用集锦</font> </a> </td><td><font color=\"red\">2021年9月3日停止更新，转战先知社区等安全社区及小密圈</font></td></tr><tr><td align=\"center\" rowspan=\"6\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11366983.html\"> <font color=\"red\" size=\"4.5\">点点点工程师</font> </a> </td><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11563688.html\"> <font color=\"#ff6984\" size=\"3\"> 测试神器 - Charles </font> </a> </td><td>软件测试数据包抓包分析神器</td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11393389.html\"> <font color=\"#ff6984\" size=\"3\"> 测试神器 - Fiddler </font> </a> </td><td>一文学会 fiddle ，学不会倒立吃翔，<font color=\"red\">稀得！</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11393395.html\"> <font color=\"#ff6984\" size=\"3\"> 测试神器 - Jmeter </font> </a> </td><td>不仅是性能测试神器，更可用于搭建轻量级接口自动化测试框架。</td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11462996.html\"> <font color=\"#ff6984\" size=\"3\"> RobotFrameWork</font> </a> </td><td><font color=\"blue\">Python实现的自动化测试利器，该篇章仅介绍UI自动化部分。</font></td></tr><tr><td align=\"center\"> <a href=\"https://blog.csdn.net/weixin_42250835/category_11411882.html\"> <font color=\"#ff6984\" size=\"3\"> Java实现UI自动化</font> </a> </td><td><font color=\"blue\">文档写于2016年，Java实现的UI自动化，仍有借鉴意义。</font></td></tr><tr><td align=\"center\"> <a href=\"#\"> <font color=\"#ff6984\" size=\"3\"> MonkeyRunner</font> </a> </td><td><font color=\"blue\">该工具目前的应用场景已不多，文档已删，为了排版好看才留着。</font></td></tr></tbody></table>\n</blockquote>\n<hr/>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/9855fc94edb54102af2ddbdbf685f6e3.gif#pic_center\"/></p>\n<hr/>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#__248\">🐳 事务控制</a></li><li><a href=\"#_MySQL_Connector___278\">🐳 MySQL Connector 模块的 \"异常处理\"</a></li><li><a href=\"#_Connector_____324\">🐳 Connector 模块的 \"异常处理\" - 演示案例</a></li></ul>\n</div>\n<p></p>\n<p>在上一章节，我们见识到了什么是 SQL 注入攻击，最后我们选择了 “预编译” 这种防 “SQL注入攻击” 的模式来抵挡 “SQL注入”。预编译除了这个好处之外，还可以提升 SQL 语句的执行速度，以后当我们执行 SQL语句 的时候，都要选择 “预编译” 这种形式。</p>\n<p>接下来我们将要学习的是 MySQL Connector 模块的 “事务控制” 与 “异常处理” 。</p>\n<br/>\n<br/>\n<h1><a id=\"__248\"></a>🐳 事务控制</h1>\n<br/>\n<blockquote>\n<ul><li>前面章节我们使用 Connector 模块执行的都是查询语句，并不需要使用事务。</li><li>但是当我们使用 Connector 模块执行 <code>\"插入、修改、删除\"</code> 这些操作的时候就必须要引入事务机制了。</li></ul>\n<hr/>\n<ul><li>Connector 模块为我们提供了非常简单的事务控制函数，所以事务的管理还是非常简单就能够实现的。</li><li>Connector 模块控制事务管理方法如下：<code>需要注意的是 \"事务的管理\" 都是通过 \"connect\" 对象来完成的，而不是 \"游标\" 对象。</code></li></ul>\n<pre><code class=\"prism language-python\">connect<span class=\"token punctuation\">.</span>start_transaction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>事务隔离级别<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\"># start_transaction(）：调用 \"start_transaction(）\" 方法开启事务。</span>\n\nconnect<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\"># commit()：调用 \"commit()\" 方法提交事务；Connector 模块不会主动提交事务，需要手动提交。</span>\n\nconnect<span class=\"token punctuation\">.</span>rollback<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\"># rollback()：调用 \"rollback()\" 回滚事务；实际情况下，什么时候回滚事务要根据异常的捕获去分别处理。</span>\n</code></pre>\n<ul><li>接下来我们看一下如何在程序中处理异常，<code>所以说呢 \"事务\" 必须要和 \"异常控制\" 结合在一起才行。</code></li></ul>\n</blockquote>\n<br/>\n<br/>\n<h1><a id=\"_MySQL_Connector___278\"></a>🐳 MySQL Connector 模块的 “异常处理”</h1>\n<br/>\n<blockquote>\n<ul><li>在程序中引入了 “异常处理” 之后，程序的结构就变成了如下面这个样子：</li></ul>\n<pre><code class=\"prism language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    connect <span class=\"token operator\">=</span> mysql<span class=\"token punctuation\">.</span>connector<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">[</span>connect <span class=\"token operator\">=</span> start_transaction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">[</span>connect<span class=\"token punctuation\">.</span>rollback<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token string\">\"connect\"</span> <span class=\"token keyword\">in</span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        connect<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<ul><li>1 - 4 行： \n    <ul><li>使用 try 语句捕获程序的异常</li><li>在 try 语句中可以创建数据库的连接，甚至还可以包括开启事务、创建游标、执行 SQL 语句、处理结果集等等</li><li>针对数据库的正常操作都可以写在 try 语句中，只要 try 语句中出现了异常（如 <code>\"连接信息错误、SQL语句错误、数据库没有启动导致无法连接\" 等等情况</code> ），接下来就由 <code>except</code> 语句来处理异常</li></ul> </li></ul>\n<hr/>\n<ul><li>5 - 7 行： \n    <ul><li>将异常保存在变量 <code>e</code> 里面。</li><li>如果开启了事务，在捕获异常的时候首先要回滚事务。</li><li>然后再打印 <code>异常的信息 。(将异常信息输出到日志文件也是可以的。)</code></li></ul> </li></ul>\n<hr/>\n<ul><li>8 - 10 行： \n    <ul><li>finally语句：必须执行的语句（无论异常有没有出现）。</li><li>判断 “connect” 这个变量是否存在，其实也就是判断当前数据库连接是否存在。</li><li>如果 “connect” 存在，则执行关闭数据库连接 。</li></ul> </li></ul>\n</blockquote>\n</blockquote>\n<br/>\n<br/>\n<h1><a id=\"_Connector_____324\"></a>🐳 Connector 模块的 “异常处理” - 演示案例</h1>\n<br/>\n<blockquote>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># coding:utf-8</span>\n\n\n<span class=\"token keyword\">import</span> mysql<span class=\"token punctuation\">.</span>connector\n\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>        <span class=\"token comment\"># 在 try 语句中创建数据库的连接、创建事务、游标、执行 SQL 语句、处理结果集等等</span>\n    connect<span class=\"token operator\">=</span>mysql<span class=\"token punctuation\">.</span>connector<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>\n        host<span class=\"token operator\">=</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span>\n        port<span class=\"token operator\">=</span><span class=\"token number\">3306</span><span class=\"token punctuation\">,</span>\n        user<span class=\"token operator\">=</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span>\n        password<span class=\"token operator\">=</span><span class=\"token string\">\"admin123\"</span><span class=\"token punctuation\">,</span>\n        database<span class=\"token operator\">=</span><span class=\"token string\">\"demo\"</span>\n    <span class=\"token punctuation\">)</span>\n    connect<span class=\"token punctuation\">.</span>start_transaction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    cursor<span class=\"token operator\">=</span>connect<span class=\"token punctuation\">.</span>cursor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sql<span class=\"token operator\">=</span><span class=\"token string\">\"INSERT INTO t_emp(empno,ename,job,mgr,hiredate,sal,comm,deptno) \"</span> \\\n        <span class=\"token string\">\"VALUES(%s,%s,%s,%s,%s,%s,%s,%s)\"</span>       <span class=\"token comment\"># 注意：这里是预编译的 \"INSERT\" 语句</span>\n    cursor<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">9097</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"赵四\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"SALESMAN\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1988-12-7\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2800</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 利用游标执行 \"SQL\" 语句</span>\n    connect<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token string\">\"con\"</span> <span class=\"token keyword\">in</span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 之所以在这里也要加上判断，是因为 \"connect\" 在参数填写错误的情况下是不会存在的;</span>\n                        <span class=\"token comment\"># 如此也就不会存在 \"connect.rollback() 方法\" ，所以这里也需要加上判断</span>\n        connect<span class=\"token punctuation\">.</span>rollback<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token string\">\"con\"</span> <span class=\"token keyword\">in</span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        connect<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<div align=\"center\">\n<img src=\"..\\..\\static\\image\\df3d48a178e547a68e09c6149ad1def1.png\" width=\"900\"/>\n</div>\n<hr/>\n<div align=\"center\">\n<img src=\"..\\..\\static\\image\\1ad7a7aa78ea4b1eb3698422bf920a46.png\" width=\"900\"/>\n</div>\n</blockquote>\n<hr/>\n<blockquote>\n<div align=\"center\">\n<img src=\"..\\..\\static\\image\\89368973e4a74e3da1874be56c121120.png\" width=\"900\"/>\n</div>\n</blockquote>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 1, "sql": 1, "php": 0, "time": "2022-08-26 01:13:07", "summary": "万叶集隐约雷鸣，阴霾天空。但盼风雨来，能留你在此。前言：作者简介：渴望力量的哈士奇，大家可以叫我哈士奇，一位致力于全栈赋能的博主博客专家认证、新星计划第三季全栈赛道、华为云享专家、阿里云专家博主如果文"}