{"blogid": "123752797", "writerAge": "码龄2年", "writerBlogNum": "88", "writerCollect": "1711", "writerComment": "2073", "writerFan": "5457", "writerGrade": "6级", "writerIntegral": "4884", "writerName": "卖寂寞的小男孩", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123752797.jpg", "writerRankTotal": "3322", "writerRankWeekly": "465", "writerThumb": "1772", "writerVisitNum": "76346", "blog_read_count": "2094", "blog_time": "已于 2022-03-31 21:29:51 修改", "blog_title": "STL详解---vector的使用", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_1\">前言</a></li><li><a href=\"#1vector_3\">1.vector是什么</a></li><li><a href=\"#2vector_7\">2.vector创建对象</a></li><li><a href=\"#3vector_19\">3.遍历vector</a></li><li><ul><li><a href=\"#1_29\">(1)下标遍历</a></li><li><a href=\"#2_39\">(2)迭代器遍历</a></li><li><a href=\"#3for_50\">(3)范围for遍历</a></li></ul>\n</li><li><a href=\"#3vector_59\">3.vector容量函数</a></li><li><a href=\"#4vector_71\">4.vector的扩容函数</a></li><li><a href=\"#5vector_92\">5.vector的插入删除</a></li><li><ul><li><a href=\"#1_93\">(1)尾插与尾删</a></li><li><a href=\"#2inserterase_113\">(2)insert与erase</a></li><li><a href=\"#3clear_134\">(3)clear</a></li><li><a href=\"#vector_136\">vector的特殊应用</a></li><li><ul><li><a href=\"#vectorvector_int_137\">vector</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>前言</h1>\n<p>当我们使用C语言的语法来实现数组的时候，增删查改都需要自己来定义函数，STL中给出了数组模板vector，其中包含函数可以帮助我们更便捷地处理数组。</p>\n<h1><a id=\"1vector_3\"></a>1.vector是什么</h1>\n<p>1.vector是一个表示可变大小数组的容器。<br/> 2.vector采用连续存储空间来进行元素的存储。<br/> 3.vector使用动态分配数组来存储它的元素。</p>\n<h1><a id=\"2vector_7\"></a>2.vector创建对象</h1>\n<p>以下为vector的四种拷贝构造函数。</p>\n<pre><code class=\"prism language-cpp\">    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> v1<span class=\"token punctuation\">;</span><span class=\"token comment\">//创建空对象v1</span>\n\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//创建有十个8的对象v2</span>\n\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>v2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">--</span>v2<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//通过迭代器进行拷贝构造，迭代器可以加减操作</span>\n\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">v4</span><span class=\"token punctuation\">(</span>v3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//拷贝构造</span>\n\tstring <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">v5</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>vector创建对象的过程也就是它调用其构造函数和拷贝构造的过程，我们也可以将s中字符串存入容器v5中。<br/> <font color=\"blue\">注意vector&lt;char&gt;不能取代string，这是因为使用vector&lt;char&gt;需要手动打印’\\0’，并且vector也不支持+=和比较大小等一系列的操作。</font></p>\n<h1><a id=\"3vector_19\"></a>3.遍历vector</h1>\n<p>为了更好地演示，我们先定义一个数组，并向其中传入数据。</p>\n<pre><code class=\"prism language-cpp\">vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> v<span class=\"token punctuation\">;</span>\n\tv<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tv<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tv<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tv<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tv<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"1_29\"></a>(1)下标遍历</h2>\n<p>下标遍历可读可写。</p>\n<pre><code class=\"prism language-cpp\">\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//可以修改，因为返回的值是引用</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\825ef29fe77b4d7995618bba1022f835.png\"/></p>\n<h2><a id=\"2_39\"></a>(2)迭代器遍历</h2>\n<pre><code class=\"prism language-cpp\">\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token operator\">*</span>it <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">++</span>it<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a8386544b2bd420f81be9a6fb52bab50.png\"/></p>\n<h2><a id=\"3for_50\"></a>(3)范围for遍历</h2>\n<pre><code class=\"prism language-cpp\">\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> e<span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6be25eda7f624aa59b3f00a0ee859de2.png\"/><br/> 原生指针就是天然的迭代器，数组支持范围for会被替换成指针。</p>\n<h1><a id=\"3vector_59\"></a>3.vector容量函数</h1>\n<p>表示vector容量的函数一共有三个。</p>\n<pre><code class=\"prism language-cpp\">\tcout <span class=\"token operator\">&lt;&lt;</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">max_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bf76dc19fff6428ab4d5cd6287ff1bb2.png\"/><br/> v2.size()表示的是目前元素个数。<br/> v2.capacity()表示的是最大容量。<br/> v2.max_xize()表示的是系统可以分配的给vector&lt;int&gt;的最大容量（还未分配）。<br/> 如果内存是一个图书馆的话，vector&lt;int&gt;表示的是一个书架，size()就表示书架上放了多少书，capacity()表示的就是书架的最大容量，max_size表示的是图书馆中最大能放一个容量为多大的书架。</p>\n<h1><a id=\"4vector_71\"></a>4.vector的扩容函数</h1>\n<p>我们使用vector的时候通常也是在堆上开辟空间的。这就需要用到两个函数，<strong>reseve</strong>和<strong>resize</strong>，其使用方法和string的一样，reserve只开空间不初始化，resize开空间而且还初始化，不传初始化内容默认为0。</p>\n<pre><code class=\"prism language-cpp\">\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//创建有十个8的对象v2</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tv2<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0fc91de7057a412982694b3425e996bf.png\"/><br/> resize需要借助调试来观察初始化的内容：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5f72ee84962a4f469751055a365d45d3.png\"/><br/> 通过调试我们可以看到新开辟的空间里都初始化成了0。<br/> 我们还可以通过assign函数来将之前的内容进行覆盖。</p>\n<pre><code class=\"prism language-cpp\">\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> v1<span class=\"token punctuation\">;</span><span class=\"token comment\">//创建空对象v1</span>\n\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//创建有十个8的对象v2</span>\n\tv2<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d89dc7fd929f4c07be0a2b251bbcba00.png\"/></p>\n<h1><a id=\"5vector_92\"></a>5.vector的插入删除</h1>\n<h2><a id=\"1_93\"></a>(1)尾插与尾删</h2>\n<p>插入删除主要使用四个函数：<br/> 尾插：push_back<br/> 尾删：pop_back<br/> 定点插入：insert<br/> 定点删除：erase<br/> 删除所有数据：clear</p>\n<pre><code class=\"prism language-cpp\">\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> v1<span class=\"token punctuation\">;</span><span class=\"token comment\">//创建空对象v1</span>\n\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> e<span class=\"token operator\">:</span> v1<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a2f7825dc3624024a21b22722c33878a.png\"/><br/> pop_back这里就不演示了，就是一个简单的尾删。</p>\n<h2><a id=\"2inserterase_113\"></a>(2)insert与erase</h2>\n<p>insert与erase是最容易引起迭代器失效的两个函数，关于迭代器失效的原理我会在下一节vector的模拟实现中详细解释。现在只需要记住string与vector迭代器失效的两种情况即可：</p>\n<blockquote>\n<p>1.如果空间被重新分配，则指向容器的迭代器、指针和引用都会失效。<br/> 2.如果空间没被重新分配，指向插入位置之前的元素的迭代器、指针和引用依然有效，但指向插入位置之后元素的带带器、指针和引用将会失效。</p>\n</blockquote>\n<p><font color=\"red\">注意，这里的迭代器指的是我们自己定义的迭代器。</font></p>\n<pre><code class=\"prism language-cpp\">\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span>iterator ret <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//在ret处插入0</span>\n</code></pre>\n<p>我们可以通过insert来进行插入元素。<br/> 但当我们进行删除的时候，如果这样写程序会报错的。</p>\n<pre><code class=\"prism language-cpp\">\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span>iterator ret <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5bfb4c7fb8ce4216bf0ea5b5e181c870.png\"/><br/> 这是因为我们对v1进行了插入数据，空间被重新分配了，原有的ret失效了。如果要删除首元素，需要使用v1.begin()来删除。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b5729913ef1044b297c03273bf8b23b0.png\"/><br/> <font color=\"green\">为了保险起见，使用插入或者删除的操作之后，一定要记得更新迭代器。</font></p>\n<h2><a id=\"3clear_134\"></a>(3)clear</h2>\n<p>clear会删除所有数据，注意一点，删除数据不会删除容量。</p>\n<h2><a id=\"vector_136\"></a>vector的特殊应用</h2>\n<h3><a id=\"vectorvector_int_137\"></a>vector&lt;vector &lt;int&gt;&gt;</h3>\n<p>表示一个二维数组，vector本身就是一个模板类型，里面也可以存放一个vector&lt;int&gt;的类型。<br/> 相当于vector本身是一个数组，它的每个数据又是一个int类型的数组。<br/> 我们需要注意它的初始化部分：<br/> 要初始化两次，第一次是将首元素所在列进行初始化（即最外层数组），然后再将最外层数组中的空间初始化。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\df28f516109845af835daf83b8147cb8.png\"/></p>\n<h2><a id=\"vectorstring_143\"></a>vector&lt;string&gt;</h2>\n<p>表示数组中每一个元素都是一个字符串。string的用法参考之前的文章<a href=\"https://blog.csdn.net/qq_51492202/article/details/123438919?spm=1001.2014.3001.5501\">string详解</a></p>\n<h1><a id=\"6_145\"></a>6.总结</h1>\n<p>vector的基本函数都介绍完了，这些已经足够我们使用了，如果知识在精不在多，如果还希望了解更过vector的成员函数的话，可以登录cplusplus.com来进行搜索。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-31 21:29:51", "summary": "文章目录前言是什么创建对象遍历下标遍历迭代器遍历范围遍历容量函数的扩容函数的插入删除尾插与尾删与的特殊应用前言当我们使用语言的语法来实现数组的时候，增删查改都需要自己来定义函数，中给出了数组模板，其中"}