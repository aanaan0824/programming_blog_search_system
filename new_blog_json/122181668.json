{"blogid": "122181668", "writerAge": "码龄1年", "writerBlogNum": "77", "writerCollect": "115", "writerComment": "18", "writerFan": "207", "writerGrade": "4级", "writerIntegral": "830", "writerName": "dzj2021", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122181668.jpg", "writerRankTotal": "23263", "writerRankWeekly": "17022", "writerThumb": "33", "writerVisitNum": "79208", "blog_read_count": "4144", "blog_time": "于 2021-12-27 23:04:00 发布", "blog_title": "Unity中的异步编程【1】—— Unity与async 、 await", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>新手在Unity里写东西，一个方法的内容如果写复杂了，容易把Uinty写死，就会卡帧，用流行的话来总结就是：在Update里面活生生把天聊死了。</p>\n<p>此外，如果新手才入门，不擅长使用消息、事件来进行异步的统筹，一门心思在Update里面实现各种有延时有顺序的步骤，于是自己把自己绕晕不说，程序又难调试，难修改，更甚——帧率低下…</p>\n<p>那么用协程来实现异步…聪明…</p>\n<p>但，还有比协程更好用的异步框架，那就是UniTask</p>\n<hr/>\n<h1><a id=\"asyncawait_11\"></a>一、什么是异步：async和await是啥</h1>\n<p>异步这个概念一言难尽，里面涉及到很多上古时候的知识：单核/多核，单线程/多线程，并发/并行，阻塞/非阻塞…</p>\n<p>举一个例子：<br/> 小赵夫妻响应祖国的号召，夫妻二人7年之内哗啦啦生了3个娃娃。对这对夫妻来说，他们生娃只能一胎一胎的生，所以小赵家生三娃这件事情就是单线程，而且是阻塞式的。<br/> 又过了几年，人们纷纷进城，村里的人越来越少，于是大家响应号召要多多生娃，特别是赵庄的赵太爷在县太爷面前拍了胸脯：2年之内，我们赵庄要增加100个新生儿。<br/> 于是赵太爷在村里做了动员，大伙儿也积极响应，纷纷备孕。于是赵庄生100个娃这件事情变成了多线程，而且是非阻塞的（大家一起生——这叫多线程，张家怀孕不会影响李家怀孕——这叫非阻塞）。</p>\n<h1><a id=\"CNet_19\"></a>二、C#（.Net）中的异步</h1>\n<p>.Net自C#5开始，大概2012年前后，开始引入了异步编程（async和await），有了异步之后，很少需要手动去开线程了，而且业务更好理解，代码更加清晰。</p>\n<h2><a id=\"_22\"></a>同步举例：解放前的辛家庄有十户人，他们共用一个灶做饭，于是只能轮着顺序做饭…</h2>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b3b3c0cfb70945f9b90e616ead7f3f1d.png\"/><br/> <mark>以上做饭的总耗时为10</mark></p>\n<p>代码清单</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//关键的包</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Cooking</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"第</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">i</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">户家庭开始做饭...\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n    Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"第</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">i</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">户家庭做饭结束\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">TestCooking</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">Cooking</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">TestCooking</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"_47\"></a>异步举例：现在他们富裕了，每家都有一个灶，于是做饭的时候全村炊烟袅袅，大家各做各的，这做饭就成了并发（并行）。</h2>\n<p>张家做饭和李家做饭和不干涉，互不阻碍。</p>\n<p>以下是他们十家一起做饭的壮观情景：<br/> 请注意红框中的【async】和【await】关键字<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f03eacd875c545d598e62292dd06c959.png\"/><br/> <mark>各家在各家做饭，虽然同一时间开始做，但总耗时为1</mark></p>\n<p>代码清单</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">Cooking</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"第</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">i</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">户家庭开始做饭...\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n    <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"第</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">i</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">户家庭做饭结束\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">TestCooking</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> allTasks <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Task<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        allTasks<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token function\">Cooking</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">WhenAll</span><span class=\"token punctuation\">(</span>allTasks<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">await</span> <span class=\"token function\">TestCooking</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h1><a id=\"_Unity_76\"></a>三、 Unity中的异步</h1>\n<ul><li>问题的提出：点了按钮，隔三秒启动发动机，发动机转4秒，然后停机。以上内容把它写在一个方法里面。<br/> 解决办法1：一般大家能够想到的就是协程，没问题，这是Unity标准玩法，但是协程没有返回值，也不能好好调试…</li></ul>\n<p>解决办法2：聪明的你肯定想到.NET的 async和await了，但是，不好意思，Unity不能完美支持，比如在WebGL里面，就不支持多线程，async和await背后是多线程。所以，此路不通。</p>\n<p>解决办法3：UniRX和UniTask<br/> UniRX是上世代的产物，响应式编程兴起的时候创建的项目，至今已经进入稳态，官网特别说明，如果你要搞异步编程，那么就用UniTask，因为异步功能已经从UniRX拆分到UniTask了。</p>\n<p>用UniTask完成以上业务：<br/> 点击【Button】后，启动发动机…停止发动机：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\89535274b5bb4fbc850353dfe13cd089.png\"/><br/> 代码清单：</p>\n<pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>UI</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Cysharp<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//关键包</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">mytest</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Button</span> myBtn<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Start is called before the first frame update</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n\n        myBtn<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">.</span><span class=\"token function\">AddListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span> \n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//隔三秒启动发动机，发动机转4秒，然后停机</span>\n            Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">Time<span class=\"token punctuation\">.</span>realtimeSinceStartup</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">: 预热三秒\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">await</span> UniTask<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token named-parameter punctuation\">ignoreTimeScale</span><span class=\"token punctuation\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">Time<span class=\"token punctuation\">.</span>realtimeSinceStartup</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">: 启动发动机，发动机开始运转\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">await</span> UniTask<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">ignoreTimeScale</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token expression language-csharp\">Time<span class=\"token punctuation\">.</span>realtimeSinceStartup</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">: 发动机停机\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"WebGLok_115\"></a>四、发布和测试：WebGL发布并测试ok</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fd0d04f5bc714af2a9b1960f8659d72c.png\"/></p>\n<h1><a id=\"_118\"></a>五、附录</h1>\n<p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/async/\">1、C#异步编程</a><br/> <a href=\"https://github.com/neuecc/UniRx\">2、UniRX —— Unity响应式编程</a><br/> <a href=\"https://github.com/Cysharp/UniTask\">3、UniTask—— Unity异步编程</a></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2021-12-27 23:04:00", "summary": "新手在里写东西，一个方法的内容如果写复杂了，容易把写死，就会卡帧，用流行的话来总结就是：在里面活生生把天聊死了。此外，如果新手才入门，不擅长使用消息、事件来进行异步的统筹，一门心思在里面实现各种有延时"}