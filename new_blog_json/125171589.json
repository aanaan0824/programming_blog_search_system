{"blogid": "125171589", "writerAge": "码龄159天", "writerBlogNum": "1", "writerCollect": "8", "writerComment": "3", "writerFan": "3", "writerGrade": "1级", "writerIntegral": "14", "writerName": "Zzq_zzq_", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125171589.jpg", "writerRankTotal": "214006", "writerRankWeekly": "1189034", "writerThumb": "2", "writerVisitNum": "2838", "blog_read_count": "2836", "blog_time": "于 2022-06-07 19:31:18 发布", "blog_title": "什么是序列化", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<blockquote>\n<p></p>\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E5%89%8D%E8%A8%80-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></p>\n<p id=\"%E4%B8%80%E3%80%81%20%E4%BB%80%E4%B9%88%E6%98%AF%E5%BA%8F%E5%88%97%E5%8C%96-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81%20%E4%BB%80%E4%B9%88%E6%98%AF%E5%BA%8F%E5%88%97%E5%8C%96\">一、 什么是序列化</a></p>\n<p id=\"%E4%BA%8C%E3%80%81java%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%BA%8F%E5%88%97%E5%8C%96-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81java%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%BA%8F%E5%88%97%E5%8C%96\">二、java如何进行序列化</a></p>\n<p id=\"1.-toc\" style=\"margin-left:40px;\"><a href=\"#1.\">1.</a></p>\n<p id=\"2.%E8%AF%BB%E5%85%A5%E6%95%B0%E6%8D%AE-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E8%AF%BB%E5%85%A5%E6%95%B0%E6%8D%AE\">2.读入数据</a></p>\n<p id=\"-toc\" style=\"margin-left:0px;\"></p>\n</blockquote>\n<p></p>\n<hr/>\n<h1 id=\"%E5%89%8D%E8%A8%80\"><a id=\"_7\"></a>前言</h1>\n<p>就是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化。可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间。序列化是为了解决在对对象流进行读写操作时所引发的问题。</p>\n<hr/>\n<p><code>提示：以下是本篇文章正文内容，下面案例可供参考</code></p>\n<h1 id=\"%E4%B8%80%E3%80%81%20%E4%BB%80%E4%B9%88%E6%98%AF%E5%BA%8F%E5%88%97%E5%8C%96\">一、 什么是序列化</h1>\n<p>就是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化。可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间。序列化是为了解决在对对象流进行读写操作时所引发的问题。</p>\n<p>我们将对象写入到本地文件的时候 报错：    java.io.NotSerializableException:com.aaa.day06.test.People<br/> 没有序列化异常<br/>     <br/> 序列化： 将 java对象信息 转换成 二进制数据流的过程<br/> 反序列化： 将 二进制数据流 转换成 java对象信息的过程<br/>     <br/> IO操作的时候 操作的就是数据流，也就是说：进行读写的内容 必须以流的形式进行读写。此时我们的People对象 不能进行序列化 就说明不能转换成数据流 ，就不能进行IO读写。</p>\n<h1 id=\"%E4%BA%8C%E3%80%81java%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%BA%8F%E5%88%97%E5%8C%96\"><a id=\"_19\"></a>二、java如何进行序列化</h1>\n<h2 id=\"1.\">1.</h2>\n<p>序列化操作是一个非常复杂的算法操作，所以 java 官方给我们写好了。<br/> 但是使用的方式很特殊， java底层写好了序列化操作，但是官方并不确定 你的对象 是否需要 序列化操作。<br/> 此时官方玩了一手 接口标记 操作：<br/>     如果你的对象 需要底层的序列化操作 你的对象 就实现一个接口<br/>     public class People implements Serializable {}<br/>     如果你的对象 不需要底层的序列化操作 就不需要实现这个接口<br/>         <br/>  此处就体现了接口的一个应用场景：  添加标记<br/> 我们查看源代码发现：<br/>     public interface Serializable {}</p>\n<p>序列化接口里面啥都没有，因为其存在的意义就是为了 添加标记</p>\n<h2 id=\"2.%E8%AF%BB%E5%85%A5%E6%95%B0%E6%8D%AE\"><a id=\"2_34\"></a>2.读入数据</h2>\n<p>代码如下（示例）：</p>\n<p>java.io.InvalidClassException: com.aaa.day06.test.People; local class incompatible: stream classdesc serialVersionUID = -6756687719523839819, local class serialVersionUID = 873305606511316975</p>\n<p>存的时候版本 和取的时候不一样 就会报错。   <br/> 所以 我们一开始就要给其设定版本</p>\n<pre><code>public class People implements Serializable {\n\n\n    private static final long serialVersionUID = 666L;\n\n      String   name;\n      int      level;\n      double   money;\n\n    public People(String name, int level, double money) {\n        this.name = name;\n        this.level = level;\n        this.money = money;\n    }\n\n}</code></pre>\n<p>  </p>\n<hr/>\n<h1></h1>\n</div>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-06-07 19:31:18", "summary": "目录前言一、什么是序列化二、如何进行序列化读入数据前言就是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化。可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间。序列化是为了"}