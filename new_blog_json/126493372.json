{"blogid": "126493372", "writerAge": "码龄11年", "writerBlogNum": "303", "writerCollect": "5408", "writerComment": "5694", "writerFan": "51958", "writerGrade": "7级", "writerIntegral": "24306", "writerName": "小虚竹", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126493372.jpg", "writerRankTotal": "291", "writerRankWeekly": "34", "writerThumb": "5528", "writerVisitNum": "7841123", "blog_read_count": "14265", "blog_time": "已于 2022-09-03 16:06:00 修改", "blog_title": "猿创征文｜对象比较“==”与“hashCode()”的孽缘（java 小虚竹）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<blockquote>\n<p>❤️作者主页：<a href=\"https://xiaoxuzhu.blog.csdn.net/\">小虚竹</a></p>\n<p>❤️作者简介：大家好,我是小虚竹。Java领域优质创作者🏆，CSDN博客专家🏆，华为云享专家🏆，掘金年度人气作者🏆，阿里云专家博主🏆</p>\n<p>❤️技术活，该赏</p>\n<p>❤️点赞 👍 收藏 ⭐再看，养成习惯</p>\n</blockquote>\n<p>PC端左侧加我微信，进社群，有送书等更多活动！</p>\n<h1><a id=\"_9\"></a>问题</h1>\n<p>有个粉丝问虚竹哥：为什么内存地址一样，但比较用“==”时，结果是false；<br/> 比较用equals()时，得到的结果是true。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\08a7c0d5cad4473eb2dff1bca7822987.png\"/></p>\n<h1><a id=\"_13\"></a>分析</h1>\n<p>虚竹哥刚开始也是一脸懵，使用<strong>clone方法</strong> 克隆出来的对象是新对象，（深入解析题目：<a href=\"https://xiaoxuzhu.blog.csdn.net/article/details/124240294\">【第33题】JAVA高级技术-对象克隆2（浅克隆）</a>）<br/> 内存地址怎么可能会一样？<br/> 但是粉丝就是截图出来了，有图有真相是吧<br/> 难道是我记错了？<br/> 我不信！<br/> 写个代码验证下：<br/> Address类</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xiaoxuzhu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Description: \n *\n * @author zenghw\n * @version 1.0\n *\n * &lt;pre&gt;\n * 修改记录:\n * 修改后版本\t        修改人\t\t修改日期\t\t\t修改内容\n * 2022/8/23.1\t    zenghw\t\t2022/8/23\t\t    Create\n * &lt;/pre&gt;\n * @date 2022/8/23\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Address</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> state<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 表示员工所在的国家</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> province<span class=\"token punctuation\">;</span><span class=\"token comment\">// 表示员工所在的省</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> city<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 表示员工所在的市</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Address</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> state<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> province<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> city<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">// 利用构造方法进行初始化</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>province <span class=\"token operator\">=</span> province<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>city <span class=\"token operator\">=</span> city<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getProvince</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> province<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setProvince</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> province<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>province <span class=\"token operator\">=</span> province<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getCity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> city<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCity</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> city<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>city <span class=\"token operator\">=</span> city<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">// 重写toString()方法</span>\n        <span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"国家：\"</span> <span class=\"token operator\">+</span> state <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"省：\"</span> <span class=\"token operator\">+</span> province <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"市：\"</span> <span class=\"token operator\">+</span> city<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n</code></pre>\n<p>Employee类：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xiaoxuzhu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Description: \n *\n * @author zenghw\n * @version 1.0\n *\n * &lt;pre&gt;\n * 修改记录:\n * 修改后版本\t        修改人\t\t修改日期\t\t\t修改内容\n * 2022/8/23.1\t    zenghw\t\t2022/8/23\t\t    Create\n * &lt;/pre&gt;\n * @date 2022/8/23\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Cloneable</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 表示员工的姓名</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 表示员工的年龄</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Address</span> address<span class=\"token punctuation\">;</span><span class=\"token comment\">// 表示员工的地址</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Address</span> address<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">// 利用构造方法进行初始化</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> address<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Address</span> <span class=\"token function\">getAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> address<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAddress</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Address</span> address<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> address<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Employee</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">// 实现浅克隆</span>\n        <span class=\"token class-name\">Employee</span> employee <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{<!-- --></span>\n            employee <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CloneNotSupportedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> employee<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n</code></pre>\n<p>再写个测试类：</p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xiaoxuzhu</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Description: \n *\n * @author zenghw\n * @version 1.0\n *\n * &lt;pre&gt;\n * 修改记录:\n * 修改后版本\t        修改人\t\t修改日期\t\t\t修改内容\n * 2022/8/23.1\t    zenghw\t\t2022/8/23\t\t    Create\n * &lt;/pre&gt;\n * @date 2022/8/23\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Address</span> address <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Address</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"中国\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"福建\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"厦门\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 创建address对象</span>\n        <span class=\"token class-name\">Employee</span> employee1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小虚竹\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 创建employee1对象</span>\n        <span class=\"token class-name\">Employee</span> employee2 <span class=\"token operator\">=</span> employee1<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>employee1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>employee2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>employee1 <span class=\"token operator\">==</span> employee2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\55375fa444924da294191bc2047da191.png\"/><br/> clone克隆后的对象，内存地址是不一样的。虚竹哥拍了拍胸膛，安心了。<br/> 但为什么粉丝得到了内存地址一样的对象呢？<br/> 经常虚竹哥跟粉丝的沟通，终于找到问题了<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2f4dd2c6a1f8467ca12894f0b4271d47.png\"/><br/> 问题出在重写了equals方法，也重写了hashCode方法。<br/> 在打印对象时，发生了什么？可以来分析下</p>\n<blockquote>\n<p>System.out.println(employee1);</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\38a3aad3ad4f4e16b220f51967cecefb.png\"/><br/> 首先是调用<strong>PrintStream.println</strong> 方法，方法里对要打印的对象进行转化成字符串。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e43771be565f473fafcea4f5e590bf51.png\"/><br/> <strong>String.valueOf</strong> 方法对入参对象进行判空处理，如果为null时，返回字符串“null”。如果不是null，则调用对象的<strong>toString()</strong> 方法。<br/> 一开始对<strong>Employee类</strong> 没有重写<strong>toString()</strong> 方法。 所以这里会进入<strong>Object对象</strong> 的<strong>toString()</strong> 方法。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b2cf85629b534528b584c9f7f44c5ce6.png\"/></p>\n<p>打印的是employee1对象所继承的Object类中的hashCode方法返回的值。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a408b2b99607419ba4e216526824cea0.png\"/><br/> 但我们发现这个对象已经是native了，至于Object 的hashCode方法是如何取值的，大家可自行去看下源码，<a href=\"https://xiaoxuzhu.blog.csdn.net/article/details/118658071\">如何看源码传送门</a>。</p>\n<p>可知：不同的对象产生的hashCode是不同的；默认情况下，对象的hashCode是通过将该对象的内部地址转换成一个整数来实现的。</p>\n<p>好了，分析了这么多，回到粉丝的问题上来：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2f4dd2c6a1f8467ca12894f0b4271d47.png\"/><br/> 问题出在重写了equals方法，也重写了hashCode方法。<br/> 因为粉丝把hashCode方法重写了，导致得到的hashCode值并不代表着内存地址了。</p>\n<blockquote>\n<p>System.out.println(employee1 == employee2);<br/> 这里是内存地址的比较</p>\n</blockquote>\n<p>才会让人有一种错觉！内存地址（输出）明明一样，用比较“==”得到了false。</p>\n<h1><a id=\"_215\"></a>四、推荐专栏</h1>\n<p><a href=\"https://blog.csdn.net/shi_hong_fei_hei/category_11632097.html\">《JAVA从零到壹》</a></p>\n<p><a href=\"https://blog.csdn.net/shi_hong_fei_hei/category_11671734.html\">《JAVA筑基100例》</a></p>\n<p>我是虚竹哥，我们下期见~~~</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-09-03 16:06:00", "summary": "作者主页：小虚竹作者简介：大家好我是小虚竹。领域优质创作者，博客专家，华为云享专家，掘金年度人气作者，阿里云专家博主技术活，该赏点赞收藏再看，养成习惯端左侧加我微信，进社群，有送书等更多活动！问题有个"}