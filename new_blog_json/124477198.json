{"blogid": "124477198", "writerAge": "码龄6年", "writerBlogNum": "17", "writerCollect": "12", "writerComment": "7", "writerFan": "5", "writerGrade": "2级", "writerIntegral": "346", "writerName": "枸杞当归羊肉汤", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124477198.jpg", "writerRankTotal": "89264", "writerRankWeekly": "161038", "writerThumb": "8", "writerVisitNum": "45409", "blog_read_count": "1186", "blog_time": "于 2022-04-28 16:58:05 发布", "blog_title": "AutoCAD C# 自动加载自定义RibbonUI界面", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E5%AE%9E%E7%8E%B0%E6%95%88%E6%9E%9C%3A-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%AE%9E%E7%8E%B0%E6%95%88%E6%9E%9C%3A\">实现效果:</a></p>\n<p id=\"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%9A\">开发环境：</a></p>\n<p id=\"%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%EF%BC%9A-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%EF%BC%9A\">开发流程：</a></p>\n<p id=\"%E6%89%93%E5%BC%80Visual%20Studio%20%EF%BC%8C%E5%88%9B%E5%BB%BA%20.NET%20FrameWork%20%E7%B1%BB%E5%BA%93%E9%A1%B9%E7%9B%AE-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%89%93%E5%BC%80Visual%20Studio%20%EF%BC%8C%E5%88%9B%E5%BB%BA%20.NET%20FrameWork%20%E7%B1%BB%E5%BA%93%E9%A1%B9%E7%9B%AE\">打开Visual Studio ，创建 .NET FrameWork 类库项目</a></p>\n<p id=\"%E5%A1%AB%E5%86%99%E9%A1%B9%E7%9B%AE%E5%90%8D%E7%A7%B0%20%E2%80%9CRibbonUI%E2%80%9D%EF%BC%8C%E9%80%89%E6%8B%A9.NET%20%E7%89%88%E6%9C%AC%E4%B8%BA%204.6%20%EF%BC%88AutoCAD%202017%20%E5%AF%B9%E5%BA%94%20.NET%204.6%20%EF%BC%89-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%A1%AB%E5%86%99%E9%A1%B9%E7%9B%AE%E5%90%8D%E7%A7%B0%20%E2%80%9CRibbonUI%E2%80%9D%EF%BC%8C%E9%80%89%E6%8B%A9.NET%20%E7%89%88%E6%9C%AC%E4%B8%BA%204.6%20%EF%BC%88AutoCAD%202017%20%E5%AF%B9%E5%BA%94%20.NET%204.6%20%EF%BC%89\">填写项目名称 “RibbonUI”，选择.NET 版本为 4.6 （AutoCAD 2017 对应 .NET 4.6 ）</a></p>\n<p id=\"%E5%9C%A8%E9%A1%B9%E7%9B%AE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E4%B8%AD%EF%BC%8C%E5%8F%B3%E9%94%AE%E7%82%B9%E5%87%BB%E2%80%9C%E5%BC%95%E7%94%A8%E2%80%9D%EF%BC%8C%E7%82%B9%E5%87%BB%20%E2%80%9C%20%E7%AE%A1%E7%90%86%20NuGet%20%E7%A8%8B%E5%BA%8F%E5%8C%85%20(N)%E2%80%9D%20%E9%80%89%E9%A1%B9-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%9C%A8%E9%A1%B9%E7%9B%AE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E4%B8%AD%EF%BC%8C%E5%8F%B3%E9%94%AE%E7%82%B9%E5%87%BB%E2%80%9C%E5%BC%95%E7%94%A8%E2%80%9D%EF%BC%8C%E7%82%B9%E5%87%BB%20%E2%80%9C%20%E7%AE%A1%E7%90%86%20NuGet%20%E7%A8%8B%E5%BA%8F%E5%8C%85%20%28N%29%E2%80%9D%20%E9%80%89%E9%A1%B9\">在项目解决方案中，右键点击“引用”，点击 “ 管理 NuGet 程序包 (N)” 选项</a></p>\n<p id=\"%E7%82%B9%E5%87%BB%E6%B5%8F%E8%A7%88%E9%80%89%E9%A1%B9%E5%8D%A1%EF%BC%8C%E5%9C%A8%E6%90%9C%E7%B4%A2%E6%A0%8F%E4%B8%AD%E5%A1%AB%E5%85%A5%20%E2%80%9CAutoCAD-2017%20%E2%80%9D%EF%BC%8C%E5%9C%A8%E7%BB%99%E5%87%BA%E7%9A%84%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E4%B8%AD%EF%BC%8C%E9%80%89%E4%B8%AD%20%E2%80%9CAutoCAD-2017.Net.Base%E2%80%9D%20%EF%BC%8C%E5%9C%A8%E5%8F%B3%E4%BE%A7%E9%9D%A2%E6%9D%BF%E4%B8%AD%E7%82%B9%E5%87%BB%20%E2%80%9C%E5%AE%89%E8%A3%85%E2%80%9D%E3%80%82-toc\" style=\"margin-left:80px;\"><a href=\"#%E7%82%B9%E5%87%BB%E6%B5%8F%E8%A7%88%E9%80%89%E9%A1%B9%E5%8D%A1%EF%BC%8C%E5%9C%A8%E6%90%9C%E7%B4%A2%E6%A0%8F%E4%B8%AD%E5%A1%AB%E5%85%A5%20%E2%80%9CAutoCAD-2017%20%E2%80%9D%EF%BC%8C%E5%9C%A8%E7%BB%99%E5%87%BA%E7%9A%84%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E4%B8%AD%EF%BC%8C%E9%80%89%E4%B8%AD%20%E2%80%9CAutoCAD-2017.Net.Base%E2%80%9D%20%EF%BC%8C%E5%9C%A8%E5%8F%B3%E4%BE%A7%E9%9D%A2%E6%9D%BF%E4%B8%AD%E7%82%B9%E5%87%BB%20%E2%80%9C%E5%AE%89%E8%A3%85%E2%80%9D%E3%80%82\">点击浏览选项卡，在搜索栏中填入 “AutoCAD-2017 ”，在给出的搜索结果中，选中 “AutoCAD-2017.Net.Base” ，在右侧面板中点击 “安装”。</a></p>\n<p id=\"%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90%E5%90%8E%EF%BC%8C%E5%8F%AF%E5%9C%A8%E8%BE%93%E5%87%BA%E7%95%8C%E9%9D%A2%E7%9C%8B%E5%88%B0%EF%BC%8C%E6%88%90%E5%8A%9F%E5%AE%89%E8%A3%85%EF%BC%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E5%BC%95%E7%94%A8%E4%B8%8B%E4%BC%9A%E5%87%BA%E7%8E%B0%E5%A4%9A%E4%B8%AA%E5%BC%95%E7%94%A8%E3%80%82-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90%E5%90%8E%EF%BC%8C%E5%8F%AF%E5%9C%A8%E8%BE%93%E5%87%BA%E7%95%8C%E9%9D%A2%E7%9C%8B%E5%88%B0%EF%BC%8C%E6%88%90%E5%8A%9F%E5%AE%89%E8%A3%85%EF%BC%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E5%BC%95%E7%94%A8%E4%B8%8B%E4%BC%9A%E5%87%BA%E7%8E%B0%E5%A4%9A%E4%B8%AA%E5%BC%95%E7%94%A8%E3%80%82\">安装完成后，可在输出界面看到，成功安装，解决方案引用下会出现多个引用。</a></p>\n<p id=\"%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95%E6%B5%8B%E8%AF%95-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95%E6%B5%8B%E8%AF%95\">如何调试测试</a></p>\n<p id=\"%E5%9C%A8Class1.class%20%E4%B8%AD%E7%94%A8%E4%BB%A5%E4%B8%8B%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%EF%BC%8C%E5%9C%A8%20TestEnv%20%E6%96%B9%E6%B3%95%E4%B8%AD%E6%B7%BB%E5%8A%A0%E6%96%AD%E7%82%B9%E3%80%82-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%9C%A8Class1.class%20%E4%B8%AD%E7%94%A8%E4%BB%A5%E4%B8%8B%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%EF%BC%8C%E5%9C%A8%20TestEnv%20%E6%96%B9%E6%B3%95%E4%B8%AD%E6%B7%BB%E5%8A%A0%E6%96%AD%E7%82%B9%E3%80%82\">在Class1.class 中用以下代码覆盖，在 TestEnv 方法中添加断点。</a></p>\n<p id=\"%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE%E5%B1%9E%E6%80%A7%EF%BC%8C%E5%9C%A8%E8%B0%83%E8%AF%95%E7%95%8C%E9%9D%A2%E9%80%89%E6%8B%A9%E5%90%AF%E5%8A%A8%E5%A4%96%E9%83%A8%E7%A8%8B%E5%BA%8F%20%EF%BC%8C%E5%8B%BE%E9%80%89%20%E2%80%9C%20%E5%90%AF%E5%8A%A8%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%20%E2%80%9D-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE%E5%B1%9E%E6%80%A7%EF%BC%8C%E5%9C%A8%E8%B0%83%E8%AF%95%E7%95%8C%E9%9D%A2%E9%80%89%E6%8B%A9%E5%90%AF%E5%8A%A8%E5%A4%96%E9%83%A8%E7%A8%8B%E5%BA%8F%20%EF%BC%8C%E5%8B%BE%E9%80%89%20%E2%80%9C%20%E5%90%AF%E5%8A%A8%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%20%E2%80%9D\">修改项目属性，在调试界面选择启动外部程序 ，勾选 “ 启动本地代码调试 ”</a></p>\n<p id=\"%C2%A0%E6%AD%A4%E6%97%B6%EF%BC%8C%E5%8F%AF%E7%82%B9%E5%87%BB%20%E2%80%9C%20%E5%90%AF%E5%8A%A8%20%E2%80%9D%20%E6%8C%89%E9%92%AE%EF%BC%8C%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%20CAD%20%E7%95%8C%E9%9D%A2-toc\" style=\"margin-left:80px;\"><a href=\"#%C2%A0%E6%AD%A4%E6%97%B6%EF%BC%8C%E5%8F%AF%E7%82%B9%E5%87%BB%20%E2%80%9C%20%E5%90%AF%E5%8A%A8%20%E2%80%9D%20%E6%8C%89%E9%92%AE%EF%BC%8C%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%20CAD%20%E7%95%8C%E9%9D%A2\"> 此时，可点击 “ 启动 ” 按钮，会自动打开 CAD 界面</a></p>\n<p id=\"%E5%9C%A8%E6%89%93%E5%BC%80%E7%9A%84%E7%95%8C%E9%9D%A2%E4%B8%AD%EF%BC%8C%E7%82%B9%E5%87%BB%20%E2%80%9C%20%2B%20%E2%80%9D%20%E6%8C%89%E9%92%AE%EF%BC%8C%E6%96%B0%E5%BB%BA%20DWG%C2%A0-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%9C%A8%E6%89%93%E5%BC%80%E7%9A%84%E7%95%8C%E9%9D%A2%E4%B8%AD%EF%BC%8C%E7%82%B9%E5%87%BB%20%E2%80%9C%20%2B%20%E2%80%9D%20%E6%8C%89%E9%92%AE%EF%BC%8C%E6%96%B0%E5%BB%BA%20DWG%C2%A0\">在打开的界面中，点击 “ + ” 按钮，新建 DWG </a></p>\n<p id=\"%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%AD%E8%BE%93%E5%85%A5%20%E2%80%9C%20netload%20%E2%80%9D%20%EF%BC%8C%E5%9C%A8%E5%BC%B9%E5%87%BA%E7%9A%84%E7%AA%97%E4%BD%93%E4%B8%AD%EF%BC%8C%E9%80%89%E4%B8%AD%E6%88%91%E4%BB%AC%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E7%9A%84dll%E6%96%87%E4%BB%B6%EF%BC%8C%E7%82%B9%E5%87%BB%20%E2%80%9C%20%E6%89%93%E5%BC%80%20%E2%80%9D%20%E6%8C%89%E9%92%AE%EF%BC%8C%E9%80%89%E6%8B%A9%20%E2%80%9C%20%E5%A7%8B%E7%BB%88%E5%8A%A0%E8%BD%BD%20%E2%80%9D%20%E9%80%89%E9%A1%B9%E3%80%82-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%AD%E8%BE%93%E5%85%A5%20%E2%80%9C%20netload%20%E2%80%9D%20%EF%BC%8C%E5%9C%A8%E5%BC%B9%E5%87%BA%E7%9A%84%E7%AA%97%E4%BD%93%E4%B8%AD%EF%BC%8C%E9%80%89%E4%B8%AD%E6%88%91%E4%BB%AC%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E7%9A%84dll%E6%96%87%E4%BB%B6%EF%BC%8C%E7%82%B9%E5%87%BB%20%E2%80%9C%20%E6%89%93%E5%BC%80%20%E2%80%9D%20%E6%8C%89%E9%92%AE%EF%BC%8C%E9%80%89%E6%8B%A9%20%E2%80%9C%20%E5%A7%8B%E7%BB%88%E5%8A%A0%E8%BD%BD%20%E2%80%9D%20%E9%80%89%E9%A1%B9%E3%80%82\">在命令行中输入 “ netload ” ，在弹出的窗体中，选中我们代码生成的dll文件，点击 “ 打开 ” 按钮，选择 “ 始终加载 ” 选项。</a></p>\n<p id=\"%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%AD%E8%BE%93%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E5%91%BD%E4%BB%A4%20%E2%80%9C%20TestEnv%20%E2%80%9D%EF%BC%8C%E5%9B%9E%E8%BD%A6%E5%90%8E%E5%B0%B1%E4%BC%9A%E8%BF%9B%E5%85%A5%E4%BB%A3%E7%A0%81%E7%9A%84%E6%96%AD%E7%82%B9%E5%A4%84-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%AD%E8%BE%93%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E5%91%BD%E4%BB%A4%20%E2%80%9C%20TestEnv%20%E2%80%9D%EF%BC%8C%E5%9B%9E%E8%BD%A6%E5%90%8E%E5%B0%B1%E4%BC%9A%E8%BF%9B%E5%85%A5%E4%BB%A3%E7%A0%81%E7%9A%84%E6%96%AD%E7%82%B9%E5%A4%84\">在命令行中输入自定义命令 “ TestEnv ”，回车后就会进入代码的断点处</a></p>\n<p id=\"%E6%9E%84%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%20Ribbon%20UI-toc\" style=\"margin-left:40px;\"><a href=\"#%E6%9E%84%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%20Ribbon%20UI\">构建自定义 Ribbon UI</a></p>\n<p id=\"%E6%8A%8A%E4%BB%A5%E4%B8%8B%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%E5%88%B0%20Class1.class-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%8A%8A%E4%BB%A5%E4%B8%8B%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%E5%88%B0%20Class1.class\">把以下代码覆盖到 Class1.class</a></p>\n<p id=\"%E6%B3%A8%E6%84%8F%E6%AD%A4%E6%97%B6%E5%BC%95%E7%94%A8%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%B3%A8%E6%84%8F%E6%AD%A4%E6%97%B6%E5%BC%95%E7%94%A8%EF%BC%9A\">注意此时引用：</a></p>\n<p id=\"%E5%9C%A8debug%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E6%96%B0%E5%BB%BAImages%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%8C%E5%AD%98%E5%85%A5%E4%BB%A5%E4%B8%8B%E5%9B%BE%E5%BD%A2%EF%BC%9A-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%9C%A8debug%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E6%96%B0%E5%BB%BAImages%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%8C%E5%AD%98%E5%85%A5%E4%BB%A5%E4%B8%8B%E5%9B%BE%E5%BD%A2%EF%BC%9A\">在debug文件夹下新建Images文件夹，存入以下图形：</a></p>\n<p id=\"%E5%A6%82%E4%BD%95%E5%B0%86%E8%87%AA%E5%AE%9A%E4%B9%89%20Ribbon%20UI%20%E5%9C%A8%E7%94%A8%E6%88%B7%E6%89%93%E5%BC%80%20CAD%20%E5%90%8E%E8%87%AA%E5%90%AF%E5%8A%A8%E3%80%82-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%A6%82%E4%BD%95%E5%B0%86%E8%87%AA%E5%AE%9A%E4%B9%89%20Ribbon%20UI%20%E5%9C%A8%E7%94%A8%E6%88%B7%E6%89%93%E5%BC%80%20CAD%20%E5%90%8E%E8%87%AA%E5%90%AF%E5%8A%A8%E3%80%82\">如何将自定义 Ribbon UI 在用户打开 CAD 后自启动。</a></p>\n<p id=\"%E5%9C%A8%E2%80%9CC%3A%5CProgram%20Files%5CAutodesk%5CApplicationPlugins%E2%80%9D%E7%9B%AE%E5%BD%95%E4%B8%8B%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9%20%E2%80%9C%20RibbonUI.bundle%20%E2%80%9D%EF%BC%8C%E5%B0%86%E7%94%9F%E6%88%90%E7%9A%84%20debug%20%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%88%E5%8C%85%E5%90%ABImage%EF%BC%89%E6%8B%B7%E8%B4%9D%E5%85%A5%20%E2%80%9C%20RibbonUI.bundle%20%E2%80%9D%20%EF%BC%8C%E5%9C%A8%E6%AD%A4%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%AD%EF%BC%8C%E6%96%B0%E5%BB%BAPackageContents.xml%EF%BC%8C%E5%A1%AB%E5%85%A5%E4%BB%A5%E4%B8%8B%E4%BB%A3%E7%A0%81-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%9C%A8%E2%80%9CC%3A%5CProgram%20Files%5CAutodesk%5CApplicationPlugins%E2%80%9D%E7%9B%AE%E5%BD%95%E4%B8%8B%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9%20%E2%80%9C%20RibbonUI.bundle%20%E2%80%9D%EF%BC%8C%E5%B0%86%E7%94%9F%E6%88%90%E7%9A%84%20debug%20%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%88%E5%8C%85%E5%90%ABImage%EF%BC%89%E6%8B%B7%E8%B4%9D%E5%85%A5%20%E2%80%9C%20RibbonUI.bundle%20%E2%80%9D%20%EF%BC%8C%E5%9C%A8%E6%AD%A4%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%AD%EF%BC%8C%E6%96%B0%E5%BB%BAPackageContents.xml%EF%BC%8C%E5%A1%AB%E5%85%A5%E4%BB%A5%E4%B8%8B%E4%BB%A3%E7%A0%81\">在“C:\\Program Files\\Autodesk\\ApplicationPlugins”目录下创建文件夹 “ RibbonUI.bundle ”，将生成的 debug 文件夹（包含Image）拷贝入 “ RibbonUI.bundle ” ，在此文件夹中，新建PackageContents.xml，填入以下代码</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h2 id=\"%E5%AE%9E%E7%8E%B0%E6%95%88%E6%9E%9C%3A\">实现效果:</h2>\n<p>        用户打开CAD，自动加载自定义RibbonUI界面（图 1），点击按钮，自动运行自定义命令（图 3）。</p>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\5b57f0f676494c133ba4599259f7a580.png\"/></p>\n<p style=\"text-align:center;\">图 1 自定义RibbonUI界面</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\79032a2f82d97d2d6a9ea815b794464d.png\"/></p>\n<p></p>\n<p style=\"text-align:center;\">图 2 AutoCAD 自带RibbonUI</p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\843675d2fbf0cdd7a9caa748663e75fd.png\"/></p>\n<p style=\"text-align:center;\">图 3 点击“TestEnv”按钮，执行“TestEnv”命令</p>\n<h2 id=\"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%9A\">开发环境：</h2>\n<table align=\"center\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:236px;\"><tbody><tr><td colspan=\"1\" rowspan=\"1\" style=\"width:146px;\"> <p>环境名称</p> </td><td colspan=\"1\" rowspan=\"1\" style=\"width:86px;\"> <p>版本</p> </td></tr><tr><td colspan=\"1\" rowspan=\"1\" style=\"width:146px;\"> <p>AutoCAD</p> </td><td colspan=\"1\" rowspan=\"1\" style=\"width:86px;\"> <p>2017</p> </td></tr><tr><td colspan=\"1\" rowspan=\"1\" style=\"width:146px;\"> <p>Visual Studio</p> </td><td colspan=\"1\" rowspan=\"1\" style=\"width:86px;\"> <p>2019</p> </td></tr><tr><td colspan=\"1\" rowspan=\"1\" style=\"width:146px;\"> <p>.Net</p> </td><td colspan=\"1\" rowspan=\"1\" style=\"width:86px;\"> <p>4.6</p> </td></tr></tbody></table>\n<p></p>\n<h2 id=\"%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%EF%BC%9A\">开发流程：</h2>\n<p></p>\n<h3 id=\"%E6%89%93%E5%BC%80Visual%20Studio%20%EF%BC%8C%E5%88%9B%E5%BB%BA%20.NET%20FrameWork%20%E7%B1%BB%E5%BA%93%E9%A1%B9%E7%9B%AE\">打开Visual Studio ，创建 .NET FrameWork 类库项目</h3>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\7bb78790ffce60f87ba091f9ce32effe.png\"/></p>\n<p></p>\n<h3 id=\"%E5%A1%AB%E5%86%99%E9%A1%B9%E7%9B%AE%E5%90%8D%E7%A7%B0%20%E2%80%9CRibbonUI%E2%80%9D%EF%BC%8C%E9%80%89%E6%8B%A9.NET%20%E7%89%88%E6%9C%AC%E4%B8%BA%204.6%20%EF%BC%88AutoCAD%202017%20%E5%AF%B9%E5%BA%94%20.NET%204.6%20%EF%BC%89\">填写项目名称 “RibbonUI”，选择.NET 版本为 4.6 （AutoCAD 2017 对应 .NET 4.6 ）</h3>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\e563eb52ea7f169be4cdfd6723715343.png\"/></p>\n<h3 id=\"%E5%9C%A8%E9%A1%B9%E7%9B%AE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E4%B8%AD%EF%BC%8C%E5%8F%B3%E9%94%AE%E7%82%B9%E5%87%BB%E2%80%9C%E5%BC%95%E7%94%A8%E2%80%9D%EF%BC%8C%E7%82%B9%E5%87%BB%20%E2%80%9C%20%E7%AE%A1%E7%90%86%20NuGet%20%E7%A8%8B%E5%BA%8F%E5%8C%85%20(N)%E2%80%9D%20%E9%80%89%E9%A1%B9\">在项目解决方案中，右键点击“引用”，点击 “ 管理 NuGet 程序包 (N)” 选项</h3>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\538900b163bf6657d98fbaba0032301d.png\"/></p>\n<h3 id=\"%E7%82%B9%E5%87%BB%E6%B5%8F%E8%A7%88%E9%80%89%E9%A1%B9%E5%8D%A1%EF%BC%8C%E5%9C%A8%E6%90%9C%E7%B4%A2%E6%A0%8F%E4%B8%AD%E5%A1%AB%E5%85%A5%20%E2%80%9CAutoCAD-2017%20%E2%80%9D%EF%BC%8C%E5%9C%A8%E7%BB%99%E5%87%BA%E7%9A%84%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E4%B8%AD%EF%BC%8C%E9%80%89%E4%B8%AD%20%E2%80%9CAutoCAD-2017.Net.Base%E2%80%9D%20%EF%BC%8C%E5%9C%A8%E5%8F%B3%E4%BE%A7%E9%9D%A2%E6%9D%BF%E4%B8%AD%E7%82%B9%E5%87%BB%20%E2%80%9C%E5%AE%89%E8%A3%85%E2%80%9D%E3%80%82\">点击浏览选项卡，在搜索栏中填入 “AutoCAD-2017 ”，在给出的搜索结果中，选中 “AutoCAD-2017.Net.Base” ，在右侧面板中点击 “安装”。</h3>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\0e72805de736ba78461e01e01cbb86ec.png\"/></p>\n<h3 id=\"%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90%E5%90%8E%EF%BC%8C%E5%8F%AF%E5%9C%A8%E8%BE%93%E5%87%BA%E7%95%8C%E9%9D%A2%E7%9C%8B%E5%88%B0%EF%BC%8C%E6%88%90%E5%8A%9F%E5%AE%89%E8%A3%85%EF%BC%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E5%BC%95%E7%94%A8%E4%B8%8B%E4%BC%9A%E5%87%BA%E7%8E%B0%E5%A4%9A%E4%B8%AA%E5%BC%95%E7%94%A8%E3%80%82\">安装完成后，可在输出界面看到，成功安装，解决方案引用下会出现多个引用。</h3>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\a9eebdc1bee3d9330781cfdb164c421d.png\"/></p>\n<h2 id=\"%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95%E6%B5%8B%E8%AF%95\">如何调试测试</h2>\n<h3 id=\"%E5%9C%A8Class1.class%20%E4%B8%AD%E7%94%A8%E4%BB%A5%E4%B8%8B%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%EF%BC%8C%E5%9C%A8%20TestEnv%20%E6%96%B9%E6%B3%95%E4%B8%AD%E6%B7%BB%E5%8A%A0%E6%96%AD%E7%82%B9%E3%80%82\">在Class1.class 中用以下代码覆盖，在 TestEnv 方法中添加断点。</h3>\n<pre><code>using Autodesk.AutoCAD.ApplicationServices;\nusing Autodesk.AutoCAD.EditorInput;\nusing Autodesk.AutoCAD.Runtime;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace RibbonUI\n{\n    public class Class1\n    {\n        [CommandMethod(\"TestEnv\")] // 添加命令标识符​\n        public void TestEnv()\n        {\n            // 声明命令行对象\n            Editor ed = Application.DocumentManager.MdiActiveDocument.Editor;\n            // 向命令行输出一段文字\n            ed.WriteMessage(\"智能数据笔记（1）：CAD二次开发环境测试！\");\n        }\n    }\n}\n\n</code></pre>\n<h3 id=\"%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE%E5%B1%9E%E6%80%A7%EF%BC%8C%E5%9C%A8%E8%B0%83%E8%AF%95%E7%95%8C%E9%9D%A2%E9%80%89%E6%8B%A9%E5%90%AF%E5%8A%A8%E5%A4%96%E9%83%A8%E7%A8%8B%E5%BA%8F%20%EF%BC%8C%E5%8B%BE%E9%80%89%20%E2%80%9C%20%E5%90%AF%E5%8A%A8%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%20%E2%80%9D\">修改项目属性，在调试界面选择启动外部程序 ，勾选 “ 启动本地代码调试 ”</h3>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\b0cd38886dd8f5a408b2ff07a1b7bd87.png\"/></p>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\392619d76f2036b866da183b7df6d817.png\"/></p>\n<h3 id=\"%C2%A0%E6%AD%A4%E6%97%B6%EF%BC%8C%E5%8F%AF%E7%82%B9%E5%87%BB%20%E2%80%9C%20%E5%90%AF%E5%8A%A8%20%E2%80%9D%20%E6%8C%89%E9%92%AE%EF%BC%8C%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%20CAD%20%E7%95%8C%E9%9D%A2\"> 此时，可点击 “ 启动 ” 按钮，会自动打开 CAD 界面</h3>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\332e9a64c37a44aab133a3dbae18581c.png\"/></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\0595de4c832e6f191a1394d1ac6a3207.png\"/></p>\n<h3 id=\"%E5%9C%A8%E6%89%93%E5%BC%80%E7%9A%84%E7%95%8C%E9%9D%A2%E4%B8%AD%EF%BC%8C%E7%82%B9%E5%87%BB%20%E2%80%9C%20%2B%20%E2%80%9D%20%E6%8C%89%E9%92%AE%EF%BC%8C%E6%96%B0%E5%BB%BA%20DWG%C2%A0\">在打开的界面中，点击 “ + ” 按钮，新建 DWG </h3>\n<p></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\a11aeedac074d432c1b4ec234cb623df.png\"/></p>\n<h3 id=\"%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%AD%E8%BE%93%E5%85%A5%20%E2%80%9C%20netload%20%E2%80%9D%20%EF%BC%8C%E5%9C%A8%E5%BC%B9%E5%87%BA%E7%9A%84%E7%AA%97%E4%BD%93%E4%B8%AD%EF%BC%8C%E9%80%89%E4%B8%AD%E6%88%91%E4%BB%AC%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E7%9A%84dll%E6%96%87%E4%BB%B6%EF%BC%8C%E7%82%B9%E5%87%BB%20%E2%80%9C%20%E6%89%93%E5%BC%80%20%E2%80%9D%20%E6%8C%89%E9%92%AE%EF%BC%8C%E9%80%89%E6%8B%A9%20%E2%80%9C%20%E5%A7%8B%E7%BB%88%E5%8A%A0%E8%BD%BD%20%E2%80%9D%20%E9%80%89%E9%A1%B9%E3%80%82\">在命令行中输入 “ netload ” ，在弹出的窗体中，选中我们代码生成的dll文件，点击 “ 打开 ” 按钮，选择 “ 始终加载 ” 选项。</h3>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\538d7e95d1c7618d83834964d98f97fd.png\"/></p>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\85498dfd22a4ceedb722aeb248d6b855.png\"/></p>\n<h3 id=\"%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%AD%E8%BE%93%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E5%91%BD%E4%BB%A4%20%E2%80%9C%20TestEnv%20%E2%80%9D%EF%BC%8C%E5%9B%9E%E8%BD%A6%E5%90%8E%E5%B0%B1%E4%BC%9A%E8%BF%9B%E5%85%A5%E4%BB%A3%E7%A0%81%E7%9A%84%E6%96%AD%E7%82%B9%E5%A4%84\">在命令行中输入自定义命令 “ TestEnv ”，回车后就会进入代码的断点处</h3>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\bd7b9d9ed9d6d8af9449f3b1ce4620a9.png\"/></p>\n<h2 id=\"%E6%9E%84%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%20Ribbon%20UI\">构建自定义 Ribbon UI</h2>\n<h3 id=\"%E6%8A%8A%E4%BB%A5%E4%B8%8B%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%E5%88%B0%20Class1.class\">把以下代码覆盖到 Class1.class</h3>\n<pre><code>using Autodesk.AutoCAD.ApplicationServices;\nusing Autodesk.AutoCAD.EditorInput;\nusing Autodesk.AutoCAD.Runtime;\nusing Autodesk.Windows;\nusing System;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Media.Imaging;\n\nnamespace RibbonUI\n{\n    public class Class1\n    {\n\n        [CommandMethod(\"RibbonDemo\")]\n        public void RibbonDemo()\n        {\n            // 获取程序集的加载路径\n            string currentDLLLocation = Path.GetDirectoryName(this.GetType().Assembly.Location) + \"\\\\\";\n\n            // 获取cad的Ribbon界面\n            RibbonControl ribbonCtrl = ComponentManager.Ribbon; \n\n            // 添加选项卡\n            RibbonTab tab = new RibbonTab();\n            tab.Title = \"我的测试选项卡\";\n            tab.Id = \"Acad.RibbonId1\";\n            tab.IsActive = true;\n            ribbonCtrl.Tabs.Add(tab);\n\n            // 给选项卡添加面板\n            RibbonPanelSource panelSource = new RibbonPanelSource();\n            panelSource.Title = \"绘图\";\n            RibbonPanel ribbonPanel = new RibbonPanel();\n            ribbonPanel.Source = panelSource;\n            tab.Panels.Add(ribbonPanel);\n\n            // 直线命令按钮\n\n            RibbonButton pLineBtn = new RibbonButton();\n\n            string imgFileNameLineBtn = string.Format(\"{0}\\\\{1}\\\\{2}.png\", currentDLLLocation, \"Images\", \"Line\");\n\n            Uri uriLineBtn = new Uri(imgFileNameLineBtn);\n            BitmapImage bitmapImgeLineBtn = new BitmapImage(uriLineBtn);\n            // 按钮图片 16 * 16\n            pLineBtn.Image = bitmapImgeLineBtn;\n            // 按钮图片 32 * 32\n            pLineBtn.LargeImage = bitmapImgeLineBtn; \n            pLineBtn.ShowImage = true;\n            pLineBtn.Size = RibbonItemSize.Large;\n            pLineBtn.Orientation = System.Windows.Controls.Orientation.Vertical;\n            pLineBtn.Text = \"直线\";\n            pLineBtn.ShowText = true;\n\n            //添加提示对象\n            RibbonToolTip toolTipLine = new RibbonToolTip();\n            toolTipLine.Title = \"直线\";\n            toolTipLine.Content = \"创建直线段\";\n            toolTipLine.Command = \"LINE\";\n            toolTipLine.ExpandedContent = \"是用LINE命令，可以创建一些列连续的直线段。每条线段都是可以单独进行编辑的直线对象。\";\n            string imgToolTipFileNameLineBtn = string.Format(\"{0}\\\\{1}\\\\{2}.png\", currentDLLLocation,\"Images\",\"LineTip\"); \n            Uri toolTipUriLineBtn = new Uri(imgToolTipFileNameLineBtn);\n            BitmapImage toolTipBitmapImgeLineBtn = new BitmapImage(toolTipUriLineBtn);\n            toolTipLine.ExpandedImage = toolTipBitmapImgeLineBtn;\n            pLineBtn.ToolTip = toolTipLine;\n\n            // 给按钮关联命令\n            pLineBtn.CommandHandler = new RibbonCommandHandler(); \n            pLineBtn.CommandParameter = \"Line\"+\" \";\n\n            // 添加直线命令按钮\n            panelSource.Items.Add(pLineBtn); \n\n            // 多段线命令按钮\n\n            RibbonButton pPLineBtn = new RibbonButton();\n\n            string imgFileNamePLineBtn = string.Format(\"{0}\\\\{1}\\\\{2}.png\", currentDLLLocation, \"Images\", \"PLine\");\n\n            Uri uriPLineBtn = new Uri(imgFileNamePLineBtn);\n            BitmapImage bitmapImgePLineBtn = new BitmapImage(uriPLineBtn);\n            // 按钮图片 16 * 16\n            pPLineBtn.Image = bitmapImgePLineBtn;\n            // 按钮图片 32 * 32\n            pPLineBtn.LargeImage = bitmapImgePLineBtn;\n            pPLineBtn.ShowImage = true;\n            pPLineBtn.Size = RibbonItemSize.Large;\n            pPLineBtn.Orientation = System.Windows.Controls.Orientation.Vertical;\n            pPLineBtn.Text = \"多段线\";\n            pPLineBtn.ShowText = true;\n\n            //添加提示对象\n            RibbonToolTip toolTipPLine = new RibbonToolTip();\n            toolTipPLine.Title = \"多段线\";\n            toolTipPLine.Content = \"创建二维多段线\";\n            toolTipPLine.Command = \"PLINE\";\n            toolTipPLine.ExpandedContent = \"二维多段线是作为单个平面对象创建的相互连接的线段序列。可以创建直线段、圆弧段或者两者的组合线段。\";\n\n            string imgToolTipFileNamePLineBtn = string.Format(\"{0}\\\\{1}\\\\{2}.png\", currentDLLLocation, \"Images\", \"PLineTip\");\n            Uri toolTipUriPLineBtn = new Uri(imgToolTipFileNamePLineBtn);\n            BitmapImage toolTipBitmapImgePLineBtn = new BitmapImage(toolTipUriPLineBtn);\n            toolTipPLine.ExpandedImage = toolTipBitmapImgePLineBtn;\n            pPLineBtn.ToolTip = toolTipPLine;\n\n            // 给按钮关联命令\n            pPLineBtn.CommandHandler = new RibbonCommandHandler();\n            pPLineBtn.CommandParameter = \"PLINE\" + \" \";\n\n            // 添加多段线命令按钮\n            panelSource.Items.Add(pPLineBtn); \n\n\n            RibbonButton btn3 = new RibbonButton();\n            string imgFileName = string.Format(\"{0}Images\\\\{1}.png\", currentDLLLocation, \"mobile-share-twitter\");\n            Bitmap bitmap = new Bitmap(imgFileName);\n\n            Uri uri = new Uri(imgFileName);\n            BitmapImage bitmapImge = new BitmapImage(uri);\n            btn3.Image = bitmapImge; //按钮图片// 16 * 16\n            btn3.LargeImage = bitmapImge; //按钮图片 // 32 * 32\n            btn3.ShowImage = true;\n            btn3.Size = RibbonItemSize.Large;\n            btn3.Orientation = System.Windows.Controls.Orientation.Vertical;\n            btn3.Text = \"TestEnv\";\n            btn3.ShowText = true;\n\n            btn3.CommandHandler = new RibbonCommandHandler(); //给按钮关联命令\n            btn3.CommandParameter = \"TestEnv \";\n\n            panelSource.Items.Add(btn3);\n\n            // checkBox\n            Autodesk.Windows.RibbonCheckBox ribbonCheckBox = new RibbonCheckBox();\n            ribbonCheckBox.Text = \"RibbonCheckBox\";\n            ribbonCheckBox.ShowText = true;\n            panelSource.Items.Add(ribbonCheckBox);\n\n            // RibbonMenuButton\n            Autodesk.Windows.RibbonMenuButton ribbonMenuButton = new RibbonMenuButton();\n            ribbonMenuButton.Text = \"ribbonMenuButton\";\n            ribbonMenuButton.ShowText = true;\n\n            RibbonMenuItem ribbonMenuItem = new RibbonMenuItem();\n            ribbonMenuItem.Text = \"ribbonMenuItem1\";\n            ribbonMenuButton.Items.Add(ribbonMenuItem);\n\n            RibbonSeparator rsP = new RibbonSeparator();\n            rsP.SeparatorStyle = RibbonSeparatorStyle.Invisible;\n            ribbonMenuButton.Items.Add(rsP);\n\n            RibbonMenuItem ribbonMenuItem2 = new RibbonMenuItem();\n            ribbonMenuItem2.Text = \"ribbonMenuItem2\";\n            ribbonMenuButton.Items.Add(ribbonMenuItem2);\n\n            //Attempting to add invalid object in RibbonMenuButton.Items collection. Valid objects are RibbonMenuItem and RibbonSeparator.”\n            //  ribbonListButton2.Items.Add(RibbonButtonInfos.PolylineBtn);\n\n            panelSource.Items.Add(ribbonMenuButton);\n\n            // RibbonCombo\n            RibbonCombo ribbonCombo = new RibbonCombo();\n            ribbonCombo.Name = \"mylist\";\n            ribbonCombo.Size = RibbonItemSize.Large;\n\n            //create text list in combobox\n            List&lt;string&gt; stringtext = new List&lt;string&gt; { \"A\", \"B\", \"C\" };\n            for (int i = 0; i &lt; stringtext.Count; i++)\n            {\n                var ribtext = new RibbonButton();\n                ribtext.Text = stringtext[i];\n                ribtext.ShowText = true;\n                ribbonCombo.Items.Add(ribtext);\n            }\n            panelSource.Items.Add(ribbonCombo);\n\n            // RibbonSplitButton\n            Autodesk.Windows.RibbonSplitButton ribbonSplitButton = new RibbonSplitButton();\n            ribbonSplitButton.Text = \"ribbonSplitButton\";\n            ribbonSplitButton.ShowText = true;\n            ribbonSplitButton.IsSplit = true;\n            ribbonSplitButton.Size = RibbonItemSize.Large;\n\n            stringtext = new List&lt;string&gt; { \"A\", \"B\", \"C\" };\n            for (int i = 0; i &lt; stringtext.Count; i++)\n            {\n                var ribtext = new RibbonButton();\n                ribtext.Text = stringtext[i];\n                ribtext.ShowText = true;\n                ribbonSplitButton.Items.Add(ribtext);\n            }\n\n            panelSource.Items.Add(ribbonSplitButton);\n\n        }\n\n        [CommandMethod(\"TestEnv\")] // 添加命令标识符​\n        public void TestEnv()\n        {\n            // 声明命令行对象\n            Editor ed = Application.DocumentManager.MdiActiveDocument.Editor;\n            // 向命令行输出一段文字\n            ed.WriteMessage(\"智能数据笔记（1）：CAD二次开发环境测试！\");\n        }\n    }\n}\n</code></pre>\n<p>新建RibbonCommandHandler.class文件，将以下代码写入：</p>\n<pre><code>using Autodesk.AutoCAD.ApplicationServices;\nusing Autodesk.Windows;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace RibbonUI\n{\n    public class RibbonCommandHandler : System.Windows.Input.ICommand\n    {\n        //定义用于确定此命令是否可以在其当前状态下执行的方法。\n        public bool CanExecute(object parameter)\n        {\n            return true;\n        }\n        public event EventHandler CanExecuteChanged;\n        // 定义在调用此命令时调用的方法。\n        public void Execute(object parameter)\n        {\n\n            if (parameter is RibbonButton)\n            {\n                RibbonButton btn = (RibbonButton)parameter;\n                if (btn.CommandParameter != null)\n                {\n                    Document doc = Application.DocumentManager.MdiActiveDocument;\n                    doc.SendStringToExecute(btn.CommandParameter.ToString(), true, false, false);\n                }\n            }\n        }\n    }\n}\n</code></pre>\n<h3 id=\"%E6%B3%A8%E6%84%8F%E6%AD%A4%E6%97%B6%E5%BC%95%E7%94%A8%EF%BC%9A\">注意此时引用：</h3>\n<p class=\"img-center\"><img alt=\"\" src=\"..\\..\\static\\image\\d47b2c6f76ccc137a5a7fd2b97f13661.png\"/></p>\n<h3 id=\"%E5%9C%A8debug%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E6%96%B0%E5%BB%BAImages%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%8C%E5%AD%98%E5%85%A5%E4%BB%A5%E4%B8%8B%E5%9B%BE%E5%BD%A2%EF%BC%9A\">在debug文件夹下新建Images文件夹，存入以下图形：</h3>\n<p><img alt=\"\" height=\"378\" src=\"..\\..\\static\\image\\c8d93f6d2d9a4bdc967e4b8f5d40790d.png\" width=\"1036\"/></p>\n<p> </p>\n<h2 id=\"%E5%A6%82%E4%BD%95%E5%B0%86%E8%87%AA%E5%AE%9A%E4%B9%89%20Ribbon%20UI%20%E5%9C%A8%E7%94%A8%E6%88%B7%E6%89%93%E5%BC%80%20CAD%20%E5%90%8E%E8%87%AA%E5%90%AF%E5%8A%A8%E3%80%82\">如何将自定义 Ribbon UI 在用户打开 CAD 后自启动。</h2>\n<h3 id=\"%E5%9C%A8%E2%80%9CC%3A%5CProgram%20Files%5CAutodesk%5CApplicationPlugins%E2%80%9D%E7%9B%AE%E5%BD%95%E4%B8%8B%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9%20%E2%80%9C%20RibbonUI.bundle%20%E2%80%9D%EF%BC%8C%E5%B0%86%E7%94%9F%E6%88%90%E7%9A%84%20debug%20%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%88%E5%8C%85%E5%90%ABImage%EF%BC%89%E6%8B%B7%E8%B4%9D%E5%85%A5%20%E2%80%9C%20RibbonUI.bundle%20%E2%80%9D%20%EF%BC%8C%E5%9C%A8%E6%AD%A4%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%AD%EF%BC%8C%E6%96%B0%E5%BB%BAPackageContents.xml%EF%BC%8C%E5%A1%AB%E5%85%A5%E4%BB%A5%E4%B8%8B%E4%BB%A3%E7%A0%81\">在“C:\\Program Files\\Autodesk\\ApplicationPlugins”目录下创建文件夹 “ RibbonUI.bundle ”，将生成的 debug 文件夹（包含Image）拷贝入 “ RibbonUI.bundle ” ，在此文件夹中，新建PackageContents.xml，填入以下代码</h3>\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n&lt;ApplicationPackage SchemaVersion=\"1.0\" AppVersion=\"1.0\"\n    ProductCode=\"{29D4EA99-A2B2-4C14-B105-55DC4C9B6736}\"\n    Name=\"ribbon测试插件\"\n&gt;\n  &lt;CompanyDetails\n    Name=\"****\"\n    Email=\"****\"\n  /&gt;\n  &lt;RuntimeRequirements OS=\"Win32|Win64\" Platform=\"AutoCAD*\" /&gt;\n  &lt;Components&gt;\n &lt;ComponentEntry ModuleName=\"./debug/RibbonUI.dll\"&gt;\n\t  &lt;Commands&gt;\n        &lt;Command Local=\"RibbonDemo\" Global=\"RibbonDemo\" StartupCommand=\"True\"/&gt;\n      &lt;/Commands&gt;\n\t&lt;/ComponentEntry&gt;\n  &lt;/Components&gt;\n\n&lt;/ApplicationPackage&gt;\n</code></pre>\n<p>学习来源：</p>\n<p><a href=\"https://blog.csdn.net/yzk1062913581/article/details/105539145\" title=\"C#之CAD二次开发(15) Ribbon交互界面实例_数据智能笔记的博客-CSDN博客\">C#之CAD二次开发(15) Ribbon交互界面实例_数据智能笔记的博客-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/birdfly2015/article/details/103402644\" title=\"cad二开之不通过netload加载命令（bundle文件的使用）_黑夜de骑士的博客-CSDN博客_cad netload\">cad二开之不通过netload加载命令（bundle文件的使用）_黑夜de骑士的博客-CSDN博客_cad netload</a></p>\n<p><a href=\"https://blog.csdn.net/birdfly2015/article/details/104005600?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.pc_relevant_default&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3\" title=\"CAD二开之打开时插件命令自动加载(RibbonUI自动显示)_黑夜de骑士的博客-CSDN博客_cadribbon命令\">CAD二开之打开时插件命令自动加载(RibbonUI自动显示)_黑夜de骑士的博客-CSDN博客_cadribbon命令</a></p>\n</div>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-04-28 16:58:05", "summary": "目录实现效果开发环境：开发流程：打开，创建类库项目填写项目名称，选择版本为对应在项目解决方案中，右键点击引用，点击管理程序包选项点击浏览选项卡，在搜索栏中填入，在给出的搜索结果中，选中，在右侧面板中点"}