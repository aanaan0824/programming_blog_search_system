{"blogid": "123441799", "writerAge": "码龄8年", "writerBlogNum": "25", "writerCollect": "69", "writerComment": "10", "writerFan": "30", "writerGrade": "2级", "writerIntegral": "328", "writerName": "Zjkai_", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123441799.jpg", "writerRankTotal": "90617", "writerRankWeekly": "491486", "writerThumb": "63", "writerVisitNum": "21545", "blog_read_count": "10759", "blog_time": "于 2022-03-12 12:38:03 发布", "blog_title": "C++Lambda表达式，超详细的讲解，保证一遍懂", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"1Lambda_1\"></a>1、Lambda表达式的概述</h1>\n<p>C++11引入了Lambda表达式，用于定义并创建匿名的函数对象，主要用于方便编程，避免全局变量的定义，并且变量安全。</p>\n<p>Lambda表达式的定义语法如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token punctuation\">[</span>函数对象参数<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>函数参数<span class=\"token punctuation\">)</span>修饰符<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>返回值类型<span class=\"token punctuation\">{<!-- --></span>函数体<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h1><a id=\"2Lambda_11\"></a>2、Lambda表达式语法分析</h1>\n<h2><a id=\"21__13\"></a>2.1 函数对象参数</h2>\n<p>[]标识一个Lambda表达式的开始，这一部分是不可以忽略的。函数对象参数只能使用到定义该Lambda表达式为止定义过的局部变量，包括Lambda表达式所在类的成员变量。函数参数有以下几种形式：</p>\n<ul><li>空：代表不捕获Lambda表达式外的变量；</li><li>&amp;：代表以引用传递的方式捕获Lambda表达式外的变量；</li><li>=：代表以值传递的方式捕获Lambda表达式外的变量，即以const引用的方式传值；</li><li>this：表示Lambda表达式可以使用Lambda表达式所在类的成员变量；</li><li>a或=a：表示以值引用的方式传递变量<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         a\n        \n       \n       \n        a\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span></span>，即const int a,在函数体内不可改变a的值；但是可以对Lambda表达式使用mutable修饰符修饰，使得函数对象参数可以进行赋值，但是该函数对象参数不是被修改为引用传递方式，下面进行细说；</li><li>&amp;a：表示以引用传递的方式传递变量<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         a\n        \n       \n       \n        a\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span></span>，在函数体内可以改变a的值；</li><li>x，&amp;y：x为值传递方式，y为引用传值方式；</li><li>=，&amp;x，&amp;y：除x，y为引用传递方式以外，其他参数都为值传递方式进行传递；</li><li>&amp;，x，y：除x，y为值传递方式以外，其他参数都为引用传递方式进行传递；</li></ul>\n<h2><a id=\"22__27\"></a>2.2 函数参数</h2>\n<p>这一部分可以被省略（如果函数无参数），我们可以使用下面方式定义Lambda表达式</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">auto</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>也可以使用下面的方式定义Lambda表达式</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">auto</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello \"</span> <span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a id=\"23__45\"></a>2.3 修饰符</h2>\n<p>这一部分是可以省略的，常见的修饰符有两个，一个是mutable，另一个是exception</p>\n<ul><li>mutable：当函数参数以值引用传递方式传递时，在函数体内是不可以修改该函数参数的值的，我们可以使用mutable修饰符，使得该函数参数可以<strong>在函数体内改变</strong>，下面我们实验一下</li></ul>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">auto</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这样会报错，参数x是值传递的方式，是一个只读变量，但是我们加入mutable后，就不会报错</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">auto</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">mutable</span> <span class=\"token punctuation\">{<!-- --></span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> cout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>cout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这样我们就过了编译，不妨猜猜输出结果，是2 2还是2 1呢？</p>\n<p>答案是2 1，注意上边加黑的字体：被mutable修饰的函数参数，该函数参数可以<strong>在函数体内改变</strong>，也就是说不会改变函数体外该变量的值，我们也可以理解为在函数体内拷贝了这个变量的同名变量。</p>\n<ul><li>exception：exception 声明用于指定函数抛出的异常，如抛出整数类型的异常，可以使用 throw(int)。</li></ul>\n<h2><a id=\"24__71\"></a>2.4 返回值类型</h2>\n<p>这一部分也是可以省略的，Lambda表达式会自动推断返回值类型，但是返回类型不统一会报错；</p>\n<h2><a id=\"25__75\"></a>2.5 函数体</h2>\n<p>标识函数的实现，这一部分可以为空，但是不能省略。</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-03-12 12:38:03", "summary": "、表达式的概述引入了表达式，用于定义并创建匿名的函数对象，主要用于方便编程，避免全局变量的定义，并且变量安全。表达式的定义语法如下：函数对象参数函数参数修饰符返回值类型函数体、表达式语法分析函数对象参"}