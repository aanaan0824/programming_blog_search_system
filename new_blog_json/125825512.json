{"blogid": "125825512", "writerAge": "码龄2年", "writerBlogNum": "74", "writerCollect": "2262", "writerComment": "1775", "writerFan": "4012", "writerGrade": "6级", "writerIntegral": "6012", "writerName": "不苒", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125825512.jpg", "writerRankTotal": "2728", "writerRankWeekly": "124", "writerThumb": "1988", "writerVisitNum": "89059", "blog_read_count": "4700", "blog_time": "于 2022-07-16 21:46:26 发布", "blog_title": "牛客网前端刷题（一）", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-tomorrow-night\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\9c9e31c54d7343aca5abc665a7495141.png\"/></p>\n<blockquote>\n<p><strong>还在担心面试不通过吗？给大家推荐一个超级好用的刷面试题神器：<a href=\"https://www.nowcoder.com/link/pc_csdncpt_br_qianduan\">牛客网</a>，里面涵盖了各个领域的面试题库，还有大厂真题哦！</strong></p>\n<p><strong>赶快悄悄的努力起来吧，不苒在这里衷心祝愿各位大佬都能顺利通过面试。</strong><br/> <strong>面试专栏分享，感觉有用的小伙伴可以点个订阅，不定时更新相关面试题：<a href=\"https://blog.csdn.net/qq_49002903/category_11753185.html?spm=1001.2014.3001.5482\">面试专栏</a> 。</strong><br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c34872323c65435888090476cd0a5dfb.png\"/></p>\n</blockquote>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_10\">🍉正文</a></li><li><ul><li><a href=\"#1_11\">1.数组去重</a></li><li><a href=\"#2_30\">2.快速排序</a></li><li><a href=\"#3_instanceof_61\">3. instanceof</a></li><li><ul><li><a href=\"#isPrototypeOf_73\">扩展：`isPrototypeOf()`</a></li></ul>\n</li><li><a href=\"#4__Vue__nextTick__95\">4. 说一说 Vue 中 $nextTick 作用与原理？</a></li><li><a href=\"#5_103\">5.说一说盒模型？</a></li><li><a href=\"#6cookie_sessionStorage_localStorage__112\">6.说一说cookie sessionStorage localStorage 区别</a></li><li><a href=\"#7computedwatch_127\">7.说一说computed和watch的区别？</a></li><li><a href=\"#8_VueKey_134\">8. Vue列表为什么加Key？</a></li><li><a href=\"#9_vif__vshow_138\">9.说一说 v-if 和 v-show区别？</a></li><li><a href=\"#10Event_loop_154\">10.说一说事件循环Event loop，宏任务与微任务？</a></li></ul>\n</li><li><a href=\"#_171\">🎃专栏分享：</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_10\"></a>🍉正文</h1>\n<h2><a id=\"1_11\"></a>1.数组去重</h2>\n<blockquote>\n<p>题目：请补全JavaScript代码，要求去除数组参数中的重复数字项并返回该数组。<br/> 注意：数组元素仅包含数字</p>\n</blockquote>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">deleteRepeat</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 使用ES6新增语法</span>\n    <span class=\"token keyword\">return</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">deleteRepeat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [-1,1,2]</span>\n</code></pre>\n<blockquote>\n<p>知识点补充：</p>\n<ul><li> <p><code>Array.from</code>将某个类似数组或可迭代对象转为数组</p> </li><li> <p>Set对象是值的集合，Set中的元素只会出现一次，即Set中的元素是唯一的</p> </li></ul>\n</blockquote>\n<h2><a id=\"2_30\"></a>2.快速排序</h2>\n<blockquote>\n<p>题目：请补全JavaScript代码，要求将数组参数中的数字从小到大进行排序并返回该数组。</p>\n<p>注意：</p>\n<ol><li>数组元素仅包含数字</li><li>请优先使用快速排序方法</li></ol>\n</blockquote>\n<p>示例代码如下：</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">_quickSort</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">array</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> right <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// pivot=&gt; 每次比较使用的中间值默认为当前数组的第一项，大于该值的放入右边right数组，小于该值的放入left数组，递归调用_quickSort方法</span>\n    <span class=\"token keyword\">let</span> pivot <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pivot <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            left<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n            right<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token function\">_quickSort</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pivot<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token function\">_quickSort</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token function\">_quickSort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">43</span><span class=\"token punctuation\">,</span> <span class=\"token number\">54</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token comment\">//[54,43,32,5,4,2,1]</span>\n</code></pre>\n<h2><a id=\"3_instanceof_61\"></a>3. instanceof</h2>\n<blockquote>\n<p>题目：要求以Boolean的形式返回第一个实例参数是否在第二个函数参数的原型链上。</p>\n</blockquote>\n<p>示例代码如下：</p>\n<pre><code class=\"prism language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">_instanceof</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> Fn</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Fn</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<h3><a id=\"isPrototypeOf_73\"></a>扩展：<code>isPrototypeOf()</code></h3>\n<p><strong><code>isPrototypeOf()</code> 方法用于测试一个对象是否存在于另一个对象的原型链上</strong>。</p>\n<p><strong>语法：</strong></p>\n<pre><code class=\"prism language-js\">prototypeObj<span class=\"token punctuation\">.</span><span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>参数：</strong></p>\n<ul><li><code>object</code>：在该对象的原型链上搜寻。</li></ul>\n<p><strong>返回值：</strong></p>\n<p>Boolean，表示调用对象是否在另一个对象的原型链上。</p>\n</blockquote>\n<hr/>\n<blockquote>\n<p><strong>写了上面三个感觉没有面试问到的一些还是问到的多，所以就给大家推荐一下以下几道常见的问答题（注：本人亲测面试有被问到‘🙇🏻‍♂️🙇🏿‍♂️）</strong></p>\n</blockquote>\n<h2><a id=\"4__Vue__nextTick__95\"></a>4. 说一说 Vue 中 $nextTick 作用与原理？</h2>\n<blockquote>\n<p>Vue 在更新 DOM 时是异步执行的，在修改数据后，视图不会立刻更新，而是等同一事件循环中的所有数据变化完成之后，再统一进行视图更新。所以修改完数据，立即在方法中获取DOM，获取的仍然是未修改的DOM。</p>\n<p><code>$nextTick</code>的作用是：该方法中的代码会在当前渲染完成后执行，就解决了异步渲染获取不到更新后DOM的问题了。 <code>$nextTick</code>的原理：<code>$nextTick</code>本质是返回一个Promise。</p>\n<p><strong>加分回答</strong> ：应用场景：在钩子函数created()里面想要获取操作Dom，把操作DOM的方法放在<code>$nextTick</code>中</p>\n</blockquote>\n<h2><a id=\"5_103\"></a>5.说一说盒模型？</h2>\n<blockquote>\n<p>CSS盒模型定义了盒的每个部分包含 margin, border, padding, content 。</p>\n<p>根据盒子大小的计算方式不同盒模型分成了两种，标准盒模型和怪异盒模型。</p>\n<p>**标准盒子模型：**给盒设置 <code>width</code> 和 <code>height</code>，实际设置的是 content box。<code>padding</code> 和 <code>border </code>再加上设置的宽高一起决定整个盒子的大小。<br/> **怪异盒模型：**给盒设置 <code>width</code> 和 <code>height</code>，包含了<code>padding</code>和<code>border </code>，设置的 <code>width</code> 和 <code>height</code>就是盒子实际的大小</p>\n</blockquote>\n<h2><a id=\"6cookie_sessionStorage_localStorage__112\"></a>6.说一说cookie sessionStorage localStorage 区别</h2>\n<blockquote>\n<p><strong>Cookie、SessionStorage、 LocalStorage都是浏览器的本地存储。</strong></p>\n<p>**共同点：**都是存储在浏览器本地的 。</p>\n<p><strong>区别：</strong></p>\n<ul><li> <p>cookie是由服务器端写入的，而SessionStorage、 LocalStorage都是由前端写入的</p> </li><li> <p>cookie的生命周期是由服务器端在写入的时候就设置好的，LocalStorage是写入就一直存在，除非手动清除，SessionStorage是页面关闭的时候就会自动清除。</p> </li><li> <p>cookie的存储空间比较小大概4KB，SessionStorage、 LocalStorage存储空间比较大，大概5M。</p> </li><li> <p>Cookie、SessionStorage、 LocalStorage数据共享都遵循同源原则，SessionStorage还限制必须是同一个页面。</p> </li><li> <p>在前端给后端发送请求的时候会自动携带Cookie中的数据，但是SessionStorage、 LocalStorage不会 。</p> </li></ul>\n</blockquote>\n<h2><a id=\"7computedwatch_127\"></a>7.说一说computed和watch的区别？</h2>\n<blockquote>\n<ul><li><strong>computed</strong>： 是计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed 的值；</li><li><strong>watch</strong>：更多的是观察的作用，支持异步，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；</li><li><strong>computed应用场景</strong>：需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；</li><li>**watch应用场景：**需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</li></ul>\n</blockquote>\n<h2><a id=\"8_VueKey_134\"></a>8. Vue列表为什么加Key？</h2>\n<blockquote>\n<p>为了性能优化 因为vue是虚拟DOM，更新DOM时用diff算法对节点进行一一比对，比如有很多li元素，要在某个位置插入一个<code>li</code>元素，但没有给<code>li</code>上加key，那么在进行运算的时候，就会将所有<code>li</code>元素重新渲染一遍，但是如果有key，那么它就会按照key一一比对<code>li</code>元素，只需要创建新的<code>li</code>元素，插入即可，不需要对其他元素进行修改和重新渲染。</p>\n</blockquote>\n<h2><a id=\"9_vif__vshow_138\"></a>9.说一说 v-if 和 v-show区别？</h2>\n<blockquote>\n<p><strong>作用:</strong> 都是控制元素隐藏和显示的指令</p>\n<p><strong>区别：</strong></p>\n<p>v-show: 控制的元素无论是true还是false，都被渲染出来了，通过<code>display：none</code>控制元素隐藏</p>\n<p>v-if: 控制的元素是true，进行渲染，如果是false不渲染，根本在dom树结构中不显示</p>\n<p><strong>应用：</strong></p>\n<p>v-show: 适合使用在切换频繁显示/隐藏的元素上</p>\n<p>v-if: 适合使用在切换不频繁，且元素内容很多，渲染一次性能消耗很大的元素上</p>\n</blockquote>\n<h2><a id=\"10Event_loop_154\"></a>10.说一说事件循环Event loop，宏任务与微任务？</h2>\n<blockquote>\n<p>浏览器的事件循环：执行js代码的时候，遇见同步任务，直接推入调用栈中执行，遇到异步任务，将该任务挂起，等到异步任务有返回之后推入到任务队列中，当调用栈中的所有同步任务全部执行完成，将任务队列中的任务按顺序一个一个的推入并执行，重复执行这一系列的行为。</p>\n<p>异步任务又分为宏任务和微任务。</p>\n<p>宏任务：任务队列中的任务称为宏任务，每个宏任务中都包含了一个微任务队列。</p>\n<p>微任务：等宏任务中的主要功能都完成后，渲染引擎不急着去执行下一个宏任务，而是执行当前宏任务中的微任务</p>\n<p>宏任务包含：执行script标签内部代码、setTimeout/setInterval、ajax请、postMessageMessageChannel、setImmediate，I/O（Node.js）</p>\n<p>微任务包含：Promise、MutonObserver、Object.observe、process.nextTick（Node.js）</p>\n</blockquote>\n<h1><a id=\"_171\"></a>🎃专栏分享：</h1>\n<blockquote>\n<p><code> JavaScript相关面试题就更新到这里啦，相关 Web前端面试题 可以订阅专栏哦</code>🥰<br/> <strong>专栏地址：</strong><a href=\"https://blog.csdn.net/qq_49002903/category_11753185.html\">《面试必看》</a></p>\n</blockquote>\n<hr/>\n<blockquote>\n<p>⏳ <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          名言警句：说能做的做说过的\n         \n        \n       \n       \n        \\textcolor{red} {名言警句：说能做的做说过的}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: red;\">名言警句：说能做的做说过的</span></span></span></span></span> <br/><br/> ✨ <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          原创不易，还希望各位大佬支持一下\n         \n        \n       \n       \n        \\textcolor{blue}{原创不易，还希望各位大佬支持一下}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: blue;\">原创不易，还希望各位大佬支持一下</span></span></span></span></span> <br/><br/> 👍 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          点赞，你的认可是我创作的动力！\n         \n        \n       \n       \n        \\textcolor{green}{点赞，你的认可是我创作的动力！}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: green;\">点赞，你的认可是我创作的动力！</span></span></span></span></span> <br/><br/> ⭐️ <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          收藏，你的青睐是我努力的方向！\n         \n        \n       \n       \n        \\textcolor{green}{收藏，你的青睐是我努力的方向！}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: green;\">收藏，你的青睐是我努力的方向！</span></span></span></span></span> <br/><br/> ✏️ <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\">\n     \n      \n       \n        \n         \n          评论，你的意见是我进步的财富！\n         \n        \n       \n       \n        \\textcolor{green}{评论，你的意见是我进步的财富！}\n       \n      \n     </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color: green;\">评论，你的意见是我进步的财富！</span></span></span></span></span> <br/></p>\n</blockquote>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-07-16 21:46:26", "summary": "在这里插入图片描述还在担心面试不通过吗？给大家推荐一个超级好用的刷面试题神器：牛客网，里面涵盖了各个领域的面试题库，还有大厂真题哦！赶快悄悄的努力起来吧，不苒在这里衷心祝愿各位大佬都能顺利通过面试。面"}