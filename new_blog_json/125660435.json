{"blogid": "125660435", "writerAge": "码龄2年", "writerBlogNum": "86", "writerCollect": "5246", "writerComment": "4819", "writerFan": "21133", "writerGrade": "7级", "writerIntegral": "11083", "writerName": "謓泽", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125660435.jpg", "writerRankTotal": "1040", "writerRankWeekly": "137", "writerThumb": "5706", "writerVisitNum": "241504", "blog_read_count": "1390", "blog_time": "已于 2022-07-17 23:12:17 修改", "blog_title": "『C语言』深度走入取整 & 4种函数", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><span style=\"color:#0d0016;\"><strong>Hello🥂謓泽👋多多指教😛</strong></span></p>\n<p class=\"img-center\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/39cf12509a2642ffb065a66b2fef26c5.gif\"/></p>\n<p id=\"%F0%9F%A5%82%E5%89%8D%E8%A8%80-toc\" style=\"margin-left:0px;\"><a href=\"#%F0%9F%A5%82%E5%89%8D%E8%A8%80\">🥂前言</a></p>\n<p id=\"%F0%9F%8D%BB%E5%8F%96%E6%95%B4-toc\" style=\"margin-left:40px;\"><a href=\"#%F0%9F%8D%BB%E5%8F%96%E6%95%B4\">🍻取整</a></p>\n<p id=\"%E2%92%88trunc%20%EF%BC%8D%200%E5%90%91%E5%8F%96%E6%95%B4-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%92%88trunc%20%EF%BC%8D%200%E5%90%91%E5%8F%96%E6%95%B4\">⒈trunc － 0向取整</a></p>\n<p id=\"%E2%92%89floor%C2%A0%EF%BC%8D%E5%9C%B0%E6%9D%BF%E5%8F%96%E6%95%B4-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%92%89floor%C2%A0%EF%BC%8D%E5%9C%B0%E6%9D%BF%E5%8F%96%E6%95%B4\">⒉floor －地板取整</a></p>\n<p id=\"%E2%92%8Aceil%EF%BC%8D%E6%97%A0%E7%A9%B7%E5%A4%A7%E5%8F%96%E6%95%B4-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%92%8Aceil%EF%BC%8D%E6%97%A0%E7%A9%B7%E5%A4%A7%E5%8F%96%E6%95%B4\">⒊ceil－无穷大取整</a></p>\n<p id=\"%E2%92%8Bround%EF%BC%8D%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5-toc\" style=\"margin-left:80px;\"><a href=\"#%E2%92%8Bround%EF%BC%8D%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5\">⒋round－四舍五入</a></p>\n<blockquote>\n<h1 id=\"%F0%9F%A5%82%E5%89%8D%E8%A8%80\"><span style=\"color:#0d0016;\">🥂前言</span></h1>\n<p><span style=\"color:#0d0016;\">这篇博客就带大家深度理解以下什么是取整。我提到的\"深度\"就可以看出来这篇文章对取整讲解的还是很详细的并且是肯定有些知识点内容在里面的，但是不要觉得深度就是设计到很多很困难的知识点。实际上都是一些相对且容易的一些知识点，那么废话不多说进入正题👋</span></p>\n<p class=\"img-center\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/f5053f1611074877b5df241537713263.gif\"/></p>\n<h2 id=\"%F0%9F%8D%BB%E5%8F%96%E6%95%B4\"><span style=\"color:#0d0016;\">🍻取整</span></h2>\n<p><span style=\"color:#0d0016;\">关于\"取整\"这个词似乎我们既熟悉又会感到陌生，熟悉是因为我们在编程的时候经常会用到取整。陌生是因为又没有好好深度理解过这取整，那么接下来就围绕取整作为一个探讨。</span></p>\n<p><span style=\"color:#0d0016;\">🍊<strong>取整⇢</strong>取整字面意思非常好理解无非就是对整数取整像2.5是一个浮点数我们对其进行取整的话就是2的整数。📝代码示例如下↓</span></p>\n<pre><code class=\"language-cpp\">#define _CRT_SECURE_NO_WARNINGS 1\n#include&lt;stdio.h&gt;\nint main(void)\n{\n\tint a = 2.99;\n\tint b = -2.99;\n\tprintf(\"a=%2d\\n\", a);\n\tprintf(\"b=%2d\\n\", b);\n\treturn 0;\n}</code></pre>\n<p><span style=\"color:#0d0016;\"><strong>运行结果🖊</strong></span></p>\n<p><span style=\"color:#0d0016;\">a =  2</span></p>\n<p><span style=\"color:#0d0016;\">b = -2</span></p>\n<p><span style=\"color:#0d0016;\">🍏<strong>说明⇢</strong>在上述代码当中我们可以知道并不是按照我们数学意义上的四舍五入而是不管你的小数位多大都的取整，这也是为什么我变量小数点取怎么大的原因也就是想让大家能非常直观的理解这个概念。<strong>一句话</strong>:直接把小数点后面的数字给省略了。</span></p>\n<p><span style=\"color:#0d0016;\">🍈<strong>总结⇢</strong>「C语言」取整默认采用的是<strong>\"0向取整\"</strong>。</span></p>\n<h3 id=\"%E2%92%88trunc%20%EF%BC%8D%200%E5%90%91%E5%8F%96%E6%95%B4\"><span style=\"color:#0d0016;\">⒈trunc － <strong>0向取整</strong></span></h3>\n<p><span style=\"color:#0d0016;\"><strong>trunc </strong>的头文件是 ⇢ #include&lt;math.h&gt;</span></p>\n<p><span style=\"color:#fe2c24;\">🍅<strong>拓展知识点⇢</strong></span><span style=\"color:#0d0016;\">对于「C语言」来说它实际上是有一个取整函数的相信很多小伙伴们是不知道「C语言」有这个<strong>trunc</strong>取整函数的。</span></p>\n<p><span style=\"color:#0d0016;\"><strong>trunc </strong>参数如下↓</span></p>\n<pre><code class=\"language-cpp\">     double trunc  (     double x);\n      float truncf (      float x);\nlong double truncl (long double x);</code></pre>\n<p><span style=\"color:#0d0016;\">📝代码示例如下↓</span></p>\n<pre><code class=\"language-cpp\">#include&lt;stdio.h&gt;\n#include&lt;math.h&gt;\nint main(void)\n{\n\tprintf(\"%2f\\n\", trunc(2.99));\n\tprintf(\"%2f\\n\", trunc(-2.99));\n\tprintf(\"%2d\\n\", (int)trunc(2.99));\n\tprintf(\"%2d\\n\", (int)trunc(-2.99));\n\treturn 0;\n}</code></pre>\n<p><span style=\"color:#0d0016;\"><strong>运行结果🖊</strong></span></p>\n<p><span style=\"color:#0d0016;\"> 2</span></p>\n<p><span style=\"color:#0d0016;\">-2</span></p>\n<p><span style=\"color:#0d0016;\"> 2</span></p>\n<p><span style=\"color:#0d0016;\">-2</span></p>\n<p><span style=\"color:#ff9900;\">🍊<strong>注⇢</strong></span><span style=\"color:#0d0016;\">这里我们需要注意函数的返回值都是浮点类型，如果你是用整形打印的话你需要把类型进行强转成<strong>(int)</strong></span></p>\n<p><span style=\"color:#0d0016;\"><strong>🍏</strong></span><span style=\"color:#1c7331;\"><strong>说明⇢</strong></span><span style=\"color:#0d0016;\">在C语言当中默认采用的是0向取整的方式来进行的。</span></p>\n<h3 id=\"%E2%92%89floor%C2%A0%EF%BC%8D%E5%9C%B0%E6%9D%BF%E5%8F%96%E6%95%B4\"><span style=\"color:#0d0016;\">⒉floor －地板取整</span></h3>\n<p><span style=\"color:#0d0016;\"><strong>floor </strong>的头文件是 ⇢ #include&lt;math.h&gt;</span></p>\n<p><span style=\"color:#0d0016;\"><strong>floor </strong>参数如下↓</span></p>\n<pre><code class=\"language-cpp\">double floor (double x);</code></pre>\n<p><span style=\"color:#0d0016;\">📝代码示例如下↓</span></p>\n<pre><code class=\"language-cpp\">#include&lt;stdio.h&gt;\n#include&lt;math.h&gt;\nint main(void)\n{\n\tprintf(\"%2d\\n\", (int)floor(2.99));\n\tprintf(\"%2d\\n\", (int)floor(-2.99));\n\tprintf(\"%2d\\n\", (int)floor(2.99));\n\tprintf(\"%2d\\n\", (int)floor(-2.99));\n\treturn 0;\n}</code></pre>\n<p><span style=\"color:#0d0016;\"><strong>运行结果🖊</strong></span></p>\n<p><span style=\"color:#0d0016;\"> 2</span></p>\n<p><span style=\"color:#0d0016;\">-3</span></p>\n<p><span style=\"color:#0d0016;\"> 2</span></p>\n<p><span style=\"color:#0d0016;\">-3</span></p>\n<p><span style=\"color:#ff9900;\">🍊<strong>注⇢</strong></span><span style=\"color:#0d0016;\">地板取整我们需要记住它是往<strong>-∞</strong>当中靠近的，从上述代码当中的运行结果相信你也可以看的出来都是往<strong>-∞</strong>当中靠近的。</span></p>\n<h3 id=\"%E2%92%8Aceil%EF%BC%8D%E6%97%A0%E7%A9%B7%E5%A4%A7%E5%8F%96%E6%95%B4\"><span style=\"color:#0d0016;\">⒊ceil－无穷大取整</span></h3>\n<p><span style=\"color:#0d0016;\">ceil 的头文件是 ⇢ #include&lt;math.h&gt;</span></p>\n<p><span style=\"color:#0d0016;\">ceil 参数如下↓</span></p>\n<pre><code class=\"language-cpp\">double ceil (double x);</code></pre>\n<p><span style=\"color:#0d0016;\">📝代码示例如下↓</span></p>\n<pre><code class=\"language-cpp\">#include&lt;stdio.h&gt;\n#include&lt;math.h&gt;\nint main(void)\n{\n\tprintf(\"%2d\\n\", (int)ceil(2.99));\n\tprintf(\"%2d\\n\", (int)ceil(-2.99));\n\tprintf(\"%2d\\n\", (int)ceil(2.99));\n\tprintf(\"%2d\\n\", (int)ceil(-2.99));\n\treturn 0;\n}</code></pre>\n<p><span style=\"color:#0d0016;\"><strong>运行结果🖊</strong></span></p>\n<p><span style=\"color:#0d0016;\"> 3</span></p>\n<p><span style=\"color:#0d0016;\">-2</span></p>\n<p><span style=\"color:#0d0016;\"> 3</span></p>\n<p><span style=\"color:#0d0016;\">-2</span></p>\n<p><span style=\"color:#ff9900;\">🍊<strong>注⇢</strong></span><span style=\"color:#0d0016;\">我们需要记住它是往<strong>+∞</strong>当中靠近的，从上述代码当中的运行结果相信你也可以看的出来都是往+<strong>∞</strong>当中靠近的。</span></p>\n<h3 id=\"%E2%92%8Bround%EF%BC%8D%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5\"><span style=\"color:#0d0016;\">⒋round－四舍五入</span></h3>\n<p><span style=\"color:#0d0016;\">round 的头文件是 ⇢ #include&lt;math.h&gt;</span></p>\n<p><span style=\"color:#0d0016;\">round 参数如下↓</span></p>\n<pre><code class=\"language-cpp\">     double round  (double x);\n      float roundf (float x);\nlong double roundl (long double x);</code></pre>\n<p><span style=\"color:#0d0016;\">📝代码示例如下↓</span></p>\n<pre><code class=\"language-cpp\">#include&lt;stdio.h&gt;\n#include&lt;math.h&gt;\nint main(void)\n{\n\tprintf(\"%2d\\n\", (int)round(2.99));\n\tprintf(\"%2d\\n\", (int)round(-2.01));\n\tprintf(\"%2d\\n\", (int)round(2.01));\n\tprintf(\"%2d\\n\", (int)round(-2.99));\n\treturn 0;\n}</code></pre>\n<p><span style=\"color:#0d0016;\"><strong>运行结果🖊</strong></span></p>\n<p><span style=\"color:#0d0016;\"> 3</span></p>\n<p><span style=\"color:#0d0016;\">-3</span></p>\n<p><span style=\"color:#0d0016;\"> 2</span></p>\n<p><span style=\"color:#0d0016;\">-3</span></p>\n<p><span style=\"color:#ff9900;\">🍊<strong>注⇢</strong></span><span style=\"color:#0d0016;\">这就是在我们数学当中的四舍五入的方式。</span></p>\n<hr/>\n<p><span style=\"color:#0d0016;\">👌<strong>总结</strong>－最终采用哪种取决方式是根据你的应用场景来进行使用的～</span></p>\n<p class=\"img-center\"><img alt=\"\" height=\"259\" src=\"..\\..\\static\\image\\10ff4e5a87a541fb8c33e6fcc2a956ce.jpeg\" width=\"259\"/></p>\n<p><span style=\"color:#0d0016;\"><strong>★最后★</strong></span><span style=\"color:#fe2c24;\"> ⇢</span> <span style=\"color:#ff9900;\"><strong>点赞</strong></span>👍 <strong><span style=\"color:#fe2c24;\">＋</span></strong><span style=\"color:#4da8ee;\"> <strong>关注</strong></span>👋 <span style=\"color:#fe2c24;\"><strong>＋</strong> </span><span style=\"color:#956fe7;\"><strong>收藏</strong></span>📑  <span style=\"color:#0d0016;\"><strong>＝＝</strong></span> <span style=\"color:#b95514;\"><strong>学会✔</strong></span></p>\n</blockquote>\n</div>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-07-17 23:12:17", "summary": "謓泽多多指教前言取整向取整地板取整无穷大取整四舍五入前言这篇博客就带大家深度理解以下什么是取整。我提到的深度就可以看出来这篇文章对取整讲解的还是很详细的并且是肯定有些知识点内容在里面的，但是不要觉得深"}