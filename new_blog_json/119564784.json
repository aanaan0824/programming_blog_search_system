{"blogid": "119564784", "writerAge": "码龄3年", "writerBlogNum": "78", "writerCollect": "868", "writerComment": "26", "writerFan": "74", "writerGrade": "4级", "writerIntegral": "997", "writerName": "老古懂", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_119564784.jpg", "writerRankTotal": "41896", "writerRankWeekly": "22337", "writerThumb": "88", "writerVisitNum": "100496", "blog_read_count": "36714", "blog_time": "已于 2022-08-09 16:57:42 修改", "blog_title": "vue面试题整理(2022-持续更新中...)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h2><a id=\"vueMVVM_0\"></a>vue中MVVM的理解</h2>\n<p><strong>M：模型（Model）</strong>：数据模型；负责数据存储。泛指后端进行的各种业务逻辑处理和数据操控，主要围绕数据库系统展开。<br/> <strong>V就是：View 视图：</strong> 负责页面展示，也就是用户界面。主要由 HTML 和 CSS 来构建<br/> <strong>VM就是：视图模型（View-Model）：</strong> 负责业务逻辑处理（比如Ajax请求等），对数据进行加工后交给视图展示<br/> 通过vue类创建的对象叫Vue实例化对象，这个对象就是MVVM模式中的VM层，模型通过它可以将数据绑定到页面上，视图可以通过它将数据映射到模型上<br/> <strong>优点</strong></p>\n<pre><code>1.低耦合。视图（View）可以独立于Model变化和修改，\n2.可重用性。你可以把一些视图逻辑放在一个ViewModel里面，让很多view重用这段视图逻辑\n3.前后端分离，开发人员可以专注于业务逻辑（ViewModel）和数据的开发，设计人员可以专注于页面设计\n</code></pre>\n<h2><a id=\"VUEjavascript__14\"></a>为什么说VUE是一个渐进式的javascript框架, 渐进式是什么意思？</h2>\n<p>VUE允许你将一个网页分割成可复用的组件，每个组件都包含属于自己的HTML、CSS、JAVASCRIPT以用来渲染网页中相应的地方。对于VUE的使用可大可小，它都会有相应的方式来整合到你的项目中。所以说它是一个渐进式的框架。VUE是响应式的（reactive）这是VUE最独特的特性，也就是说当我们的数据变更时，VUE会帮你更新所有网页中用到它的地方。</p>\n<h2><a id=\"vue_17\"></a>vue生命周期</h2>\n<pre><code class=\"prism language-javascript\">beforeCreate（创建前） ：组件实例被创建之初，组件的属性生效之前\n<span class=\"token comment\">//beforeCreate生命周期执行的时候，data和methods中的数据都还没有初始化。不能在这个阶段使用data中的数据和methods中的方法</span>\ncreated（创建后） ：组件实例已经完全创建，属性也绑定，但真实 dom 还没有生成，$el 还不可用\n<span class=\"token comment\">// data 和 methods都已经被初始化好了，如果要调用 methods 中的方法，或者操作 data 中的数据，最早可以在这个阶段中操作</span>\nbeforeMount（挂载前） ：在挂载开始之前被调用：相关的 render 函数首次被调用\n<span class=\"token comment\">//执行到这个钩子的时候，在内存中已经编译好了模板了，但是还没有挂载到页面中，此时，页面还是旧的</span>\nmounted（挂载后） ：在el 被新创建的 vm<span class=\"token punctuation\">.</span>$el 替换，并挂载到实例上去之后调用该钩子\n<span class=\"token comment\">//到mounted周期的时候，Vue实例已经初始化完成了。此时组件脱离了创建阶段，进入到了运行阶段。 如果我们想要通过插件操作页面上的DOM节点，最早可以在和这个阶段中进行</span>\nbeforeUpdate（更新前） ：组件数据更新之前调用，真实<span class=\"token constant\">DOM</span>还没被渲染\n<span class=\"token comment\">// 当执行这个钩子时，页面中的显示的数据还是旧的，data中的数据是更新后的，页面还没有和最新的数据保持同步</span>\nupdate（更新后） ：组件数据更新之后\n<span class=\"token comment\">//页面显示的数据和data中的数据已经保持同步了，都是最新的</span>\nactivated（激活前） ：keep<span class=\"token operator\">-</span>alive专属，组件被激活时调用\n<span class=\"token comment\">//当组件被切回来时，再去缓存里找这个组件、触发 activated钩子函数。</span>\ndeactivated（激活后） ：keep<span class=\"token operator\">-</span>alive专属，组件被销毁时调用\n<span class=\"token comment\">//当组件被换掉时，会被缓存到内存中、触发 deactivated 生命周期</span>\nbeforeDestory（销毁前） ：组件销毁前调用\n<span class=\"token comment\">//Vue实例从运行阶段进入到了销毁阶段，这个时候上所有的 data 和 methods ， 指令， 过滤器 ……都是处于可用状态。还没有真正被销毁</span>\ndestoryed（销毁后） ：组件销毁前调用\n<span class=\"token comment\">//这个时候上所有的 data 和 methods ， 指令， 过滤器 ……都是处于不可用状态。组件已经被销毁了。</span>\n</code></pre>\n<p>Vue 实例从创建到销毁的过程，就是生命周期。从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、销毁等一系列过程，称之为 Vue 的生命周期。</p>\n<p><strong>Vue子组件和父组件执行顺序</strong></p>\n<p>加载渲染过程：beforeCreate(父) —&gt; created(父)—&gt;beforeMount(父)—&gt;beforeCreate(子)—&gt;created(子)—&gt;beforeMount(子)—&gt;mounted(子)—&gt;mounted(父)<br/> 更新过程：beforeUpdate(父) —&gt; beforeUpdate(子) —&gt; update(子) —&gt; update(父)<br/> 父组件更新：beforeUpdate(父) —&gt; updated（父）<br/> 销毁过程：beforeDestory(父) —&gt; beforeDestory(子) —&gt; destoryed(子) —&gt; destoryed(父)</p>\n<h2><a id=\"vel__52\"></a>v-el 作用是什么</h2>\n<pre><code class=\"prism language-javascript\">提供一个在页面上已存在的 <span class=\"token constant\">DOM</span> 元素作为 Vue 实例的挂载目标。可以是 <span class=\"token constant\">CSS</span> 选择器，也可以是一个 HTMLElement 实例。\n</code></pre>\n<h2><a id=\"Vueelmount_58\"></a>Vue的el属性和$mount优先级？</h2>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n  router<span class=\"token punctuation\">,</span>\n  store<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">el</span><span class=\"token operator\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token parameter\">h</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#div'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/*当出现上面的情况就需要对el和$mount优先级进行判断，从下面的官方图片我们可以看出来，\nel的优先级是高于$mount的，因此以el挂载节点为准*/</span>\n</code></pre>\n<blockquote>\n<p><img alt=\"这里是引用\" src=\"..\\..\\static\\image\\9e200153c89d4302be6402db7957f4af.png\"/></p>\n</blockquote>\n<h2><a id=\"VueObjectdefineProperty_74\"></a>Vue实现数据双向绑定的原理：Object.defineProperty（）</h2>\n<p>vue实现数据双向绑定主要是：<strong>采用数据劫持结合发布者-订阅者模式的方式</strong>，通过Object.defineProperty（）来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应监听回调。<br/> vue的数据双向绑定 将MVVM作为数据绑定的入口，整合Observer，Compile和Watcher三者，通过Observer来监听自己的model的数据变化，通过Compile来解析编译模板指令（vue中是用来解析 {<!-- -->{}}），最终利用watcher搭起observer和Compile之间的通信桥梁，达到数据变化 —&gt;视图更新；视图交互变化（input）—&gt;数据model变更双向绑定效果。<br/> <strong>数据双向绑定示例：</strong></p>\n<pre><code>&lt;body&gt;\n    &lt;div id=\"app\"&gt;\n    &lt;input type=\"text\" id=\"txt\"&gt;\n    &lt;p id=\"show\"&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;script type=\"text/javascript\"&gt;\n    var obj = {}\n    Object.defineProperty(obj, 'txt', {\n        get: function () {\n            return obj\n        },\n        set: function (newValue) {\n            document.getElementById('txt').value = newValue\n            document.getElementById('show').innerHTML = newValue\n        }\n    })\n    document.addEventListener('keyup', function (e) {\n        obj.txt = e.target.value\n    })\n&lt;/script&gt;\n\n</code></pre>\n<p><strong>假如data里面的数据不想做响应式，该怎么做</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token number\">1</span>、数据放在vue实例外（vue template中访问不到数据）\n<span class=\"token number\">2</span>、created<span class=\"token punctuation\">,</span> <span class=\"token function\">mounted钩子函数中定义</span><span class=\"token punctuation\">(</span>注意data中不要声明该变量名<span class=\"token punctuation\">)</span>\n<span class=\"token number\">3</span>、自定义Options\n<span class=\"token number\">4</span>、Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>如何将获取data中某一个数据的初始状态？</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token literal-property property\">num</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">1000</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">countNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    \t<span class=\"token comment\">// 可以通过this.$options.data().keyname来获取初始值</span>\n        <span class=\"token comment\">// 计算出num增加了多少</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$options<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"vuedata_131\"></a>动态给vue的data添加一个新的属性时为什么不刷新？怎样解决？</h2>\n<p>**原因:**一开始data里面的obj的属性会被设成了响应式数据，而后面新增的属性，并没有通过Object.defineProperty设置成响应式数据，所以当我们动态添加的时候并不会刷新<br/> <strong>解决：</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token number\">1</span>、Vue<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/*参数\n\n{Object | Array} target\n{string | number} propertyName/index\n{any} value*/</span>\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'zhangsan'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'zhangsan'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//如果是在组件中使用，就不能直接使用Vue实例来调用，但是可以使用this</span>\n<span class=\"token number\">2</span>、Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//直接使用Object.assign()添加到对象的新属性不会触发更新应创建一个新的对象，合并原对象和混入对象的属性</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>someObject <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>someObject<span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token literal-property property\">newProperty1</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">newProperty2</span><span class=\"token operator\">:</span><span class=\"token number\">2</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">3</span>、$ <span class=\"token function\">forcecUpdated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//$forceUpdate迫使Vue 实例重新渲染,且仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件。</span>\n</code></pre>\n<p><strong>小结：</strong></p>\n<ul><li>如果为对象添加少量的新属性，可以直接采用Vue.set()</li><li>如果需要为新对象添加大量的新属性，则通过Object.assign()创建新对象</li><li>如果你实在不知道怎么操作时，可采取$forceUpdate()进行强制刷新 (不建议)<br/> <strong>PS：vue3是用过proxy实现数据响应式的，直接动态添加新属性仍可以实现数据响应式</strong></li></ul>\n<h2><a id=\"Vueobservable_158\"></a>Vue.observable</h2>\n<p><strong>Vue.observable，让一个对象变成响应式数据。Vue 内部会用它来处理 data 函数返回的对象</strong>返回的对象可以直接用于渲染函数和计算属性内，并且会在发生变更时触发相应的更新。也可以作为最小化的跨组件状态存储器<br/> <strong>使用场景：</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">/*在非父子组件通信时，可以使用通常的bus或者使用vuex，但是一些小项目上功能不是太复杂，\n而使用上面两个又有点繁琐。这时，observable就是一个很好的选择*/</span>\n\n<span class=\"token comment\">// 先新建一个js文件，引入vue</span>\n<span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> 'vue\n<span class=\"token comment\">// 创建state对象，使用observable让state对象可响应</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> state <span class=\"token operator\">=</span> Vue<span class=\"token punctuation\">.</span><span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 创建对应的方法</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> mutations <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function\">changeName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    state<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    state<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">//在需要使用的文件中获取</span>\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span>姓名：<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span> name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span>年龄：<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span> age <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"changeName('李四')\"</span><span class=\"token operator\">&gt;</span>改变姓名<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"setAge(20)\"</span><span class=\"token operator\">&gt;</span>改变年龄<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> state<span class=\"token punctuation\">,</span> mutations <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> '@<span class=\"token operator\">/</span>store\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 在计算属性中拿到值</span>\n  <span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>name\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">age</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>age\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 调用mutations里面的方法，更新数据</span>\n  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">changeName</span><span class=\"token operator\">:</span> mutations<span class=\"token punctuation\">.</span>changeName<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">setAge</span><span class=\"token operator\">:</span> mutations<span class=\"token punctuation\">.</span>setAge\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_212\"></a>简单实现数据响应（数据劫持）</h2>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">var</span> demo<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'张三'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//Object.defineProperty(obj,prop,descriptor)</span>\n<span class=\"token comment\">//obj:目标对象，prop:需要新增，或者修改的属性名，descriptor:定义的特性</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">,</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'重新设为：'</span><span class=\"token operator\">+</span>value<span class=\"token punctuation\">)</span>\n        name<span class=\"token operator\">=</span>value\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> name\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\ndemo<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">'李四'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token comment\">//李四</span>\n</code></pre>\n<h2><a id=\"_235\"></a>动态指令设置及动态传参</h2>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token operator\">&lt;</span>child @<span class=\"token punctuation\">[</span>someEvent<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"handleSomeEvent()\"</span> <span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>someProps<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"1000\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">...</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token operator\">...</span>\n      <span class=\"token literal-property property\">someEvent</span><span class=\"token operator\">:</span> type <span class=\"token operator\">?</span> <span class=\"token string\">\"click\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"dbclick\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">someProps</span><span class=\"token operator\">:</span> type <span class=\"token operator\">?</span> <span class=\"token string\">\"num\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"price\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">handleSomeEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token comment\">// do some</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>  \n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n<span class=\"token comment\">//应用场景：用于页面中根据不同的返回值进行事件的触发和值的传参</span>\n</code></pre>\n<h2><a id=\"Vue_260\"></a>Vue组件间的参数传递</h2>\n<p>1.父组件传给子组件：子组件通过props方法接受数据;</p>\n<p>2.子组件传给父组件：$emit方法传递参数</p>\n<p>3.非父子组件间的数据传递，兄弟组件传值借用eventBus，就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件。发送数据使用 $emi t方法，使用 $on 接收<br/> 更多详细内容可以查看我的另一篇文章<a href=\"https://blog.csdn.net/qq_45659769/article/details/123107977\">Vue父子组件间传值方法集</a></p>\n<h2><a id=\"provideinject_268\"></a>provide和inject使用（响应式）</h2>\n<p>provide和inject是用来实现父组件向深层的子组件传值和接收的语法，具体如下：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 祖先组件</span>\n<span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span>\n   \t  <span class=\"token comment\">// keyName: { name: this.name }, // value 是对象才能实现响应式，也就是引用类型</span>\n      <span class=\"token literal-property property\">keyName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>changeValue <span class=\"token comment\">// 通过函数的方式也可以[注意，这里是把函数作为value，而不是this.changeValue()]</span>\n     <span class=\"token comment\">// keyName: 'test' value 如果是基本类型，就无法实现响应式</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span><span class=\"token string\">'初始mesg'</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n  \t<span class=\"token function\">changeValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n  \t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg<span class=\"token operator\">=</span> <span class=\"token string\">'改变后的msg'</span>\n  \t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>  \n  \n<span class=\"token comment\">// 后代组件</span>\n<span class=\"token literal-property property\">inject</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">'keyName'</span><span class=\"token punctuation\">]</span>\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keyName<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 改变后的msg</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>详情参考我的这篇文章<br/> <a href=\"https://blog.csdn.net/qq_45659769/article/details/124146855?spm=1001.2014.3001.5502\">provide / Inject浅析</a></p>\n<h2><a id=\"Vuehash__history_301\"></a>Vue的路由实现：hash模式 和 history模式</h2>\n<p><strong>hash模式：</strong> 在浏览器中符号“#”，#以及#后面的字符称之为hash，用window.location.hash读取；</p>\n<p>特点：hash虽然在URL中，但不被包括在HTTP请求中；用来指导浏览器动作，对服务端安全无用，hash不会重加载页面。<br/> <strong>history模式</strong>： history 模式下，前端的 URL 必须和实际向后端发起请求的 URL 一致，history采用HTML5的新特性；且提供了两个新方法：pushState（），replaceState（）可以对浏览器历史记录栈进行修改，以及popState事件的监听到状态变更。</p>\n<h2><a id=\"nextTick_307\"></a>$nextTick原理及运用</h2>\n<p>1.nextTick是啥?</p>\n<pre><code class=\"prism language-javascript\">Vue<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span>callback<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>：在下次 <span class=\"token constant\">DOM</span> 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 <span class=\"token constant\">DOM</span>。\n</code></pre>\n<p>2.为什么需要它呢?</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token function\">Vue是异步执行dom更新的，一旦观察到数据变化，Vue就会开启一个队列，然后把在同一个事件循环</span> <span class=\"token punctuation\">(</span>event loop<span class=\"token punctuation\">)</span>\n当中观察到数据变化的 watcher 推送进这个队列。如果这个watcher被触发多次，只会被推送到队列一次。\n这种缓冲行为可以有效的去掉重复数据造成的不必要的计算和DOm操作。而在下一个事件循环时，Vue会清空队列，并进行必要的<span class=\"token constant\">DOM</span>更新。\n\n假使你设置 vm<span class=\"token punctuation\">.</span>someData <span class=\"token operator\">=</span> <span class=\"token string\">'new value'</span>，<span class=\"token constant\">DOM</span> 并不会马上更新，而是在异步队列被清除，也就是下一个事件循环\n开始时执行更新时才会进行必要的<span class=\"token constant\">DOM</span>更新。如果此时你想要根据更新的 <span class=\"token constant\">DOM</span> 状态去做某些事情，就会出现问题。\n为了在数据变化之后等待 Vue 完成更新 <span class=\"token constant\">DOM</span> ，可以在数据变化之后立即使用 Vue<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span> 。\n这样回调函数在 <span class=\"token constant\">DOM</span> 更新完成后就会调用。\n</code></pre>\n<p>3.我在什么地方用它呢?</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token number\">1</span><span class=\"token function\">、在Vue生命周期的created</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>钩子函数进行的<span class=\"token constant\">DOM</span>操作一定要放在Vue<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>的回调函数中。\n<span class=\"token function\">原因是在created</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>钩子函数执行的时候<span class=\"token constant\">DOM</span> 其实并未进行任何渲染，而此时进行<span class=\"token constant\">DOM</span>操作无异于徒劳，\n所以此处一定要将<span class=\"token constant\">DOM</span>操作的js代码放进Vue<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>的回调函数中。与之对应的就是mounted钩子函数，\n因为该钩子函数执行时所有的<span class=\"token constant\">DOM</span>挂载和渲染都已完成，此时在该钩子函数中进行任何<span class=\"token constant\">DOM</span>操作都不会有问题 。\n<span class=\"token number\">2</span>、在数据变化后要执行的某个操作，而这个操作需要使用随数据改变而改变的<span class=\"token constant\">DOM</span><span class=\"token function\">结构的时候</span>\n<span class=\"token punctuation\">(</span>譬如v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span><span class=\"token operator\">/</span>v<span class=\"token operator\">-</span>show根据字段变化显隐<span class=\"token punctuation\">)</span>，这个操作都应该放进Vue<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>的回调函数中。\n</code></pre>\n<h2><a id=\"Computewatch_337\"></a>Compute和watch区别和应用场景</h2>\n<p><strong>computed</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">//计算属性中的属性不需要在data中定义，而且必须有return</span>\n<span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">{<!-- --></span>\n    \t<span class=\"token literal-property property\">firstname</span><span class=\"token operator\">:</span><span class=\"token string\">\"张\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">lastname</span><span class=\"token operator\">:</span><span class=\"token string\">\"三\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">computehd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function\">fullname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    \t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstname<span class=\"token operator\">+</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastname\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*计算属性具有缓存，计算属性是基于它们的依赖进行缓存的，只有在它的相关依赖发生改变时才会重新求值。\n只要计算属性的依赖没有改变，那么调用它就会直接返回之前的缓存。 同时computed对于其中变量的依赖时多个\n的时候，只要其中一个发生了变化都会触发这个函数*/</span>\n\n<span class=\"token comment\">//应用场景：当一个变量的值受多个变量的值影响</span>\n</code></pre>\n<p><strong>watch</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">//监听器watch中的值需要在data中定义，且函数有参数，newval和oldval</span>\n<span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> <span class=\"token string\">'张'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> <span class=\"token string\">'三'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">fullName</span><span class=\"token operator\">:</span> <span class=\"token string\">'张三r'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">watch</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token function-variable function\">firstName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">oval，nval</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fullName <span class=\"token operator\">=</span> nval <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">lastName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">oval，nval</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fullName <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> nval\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">immediate</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 代表在wacth里声明了firstName之后立即先去执行其函数方法</span>\n  <span class=\"token literal-property property\">deep</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">//深度监听</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//watch的依赖是单个的，它每次只可以对一个变量进行监控，并且区别于computed属性，监听器watch可以是异步的而computed则不行</span>\n\n<span class=\"token comment\">//应用场景：当一个变量的值影响着多个变量的值</span>\n</code></pre>\n<h2><a id=\"filters_383\"></a>filters</h2>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">//过滤器分为全局过滤和局部过滤，当命名冲突时以局部过滤器权重高</span>\n<span class=\"token comment\">//插值中</span>\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span>msg<span class=\"token operator\">|</span>filterMsg<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//bind中</span>\n<span class=\"token operator\">&lt;</span>div v<span class=\"token operator\">-</span>bind<span class=\"token operator\">:</span><span class=\"token string\">\"id|filterId\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token comment\">//运用场景：</span>\n<span class=\"token comment\">//一般来说我们用过滤器来格式化一些数据或者渲染的文本对于格式展现的要求</span>\n</code></pre>\n<p><strong>全局：</strong></p>\n<pre><code class=\"prism language-javascript\">Vue<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'过滤器名'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token comment\">//do some</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>局部：</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token literal-property property\">filters</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token function-variable function\">过滤器名称</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//do some</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"vuex_411\"></a>vuex</h2>\n<p><strong>vuex是什么？怎么使用？哪种功能场景使用它？</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">//是什么</span>\nvue框架中状态管理。在main<span class=\"token punctuation\">.</span>js引入store注入。新建一个目录store 。场景有：单页应用中，组件之间的状态，\n音乐播放、登录状态、加入购物车等。\n<span class=\"token comment\">//属性：</span>\nState、 Getter、Mutation 、Action、 Module\n<span class=\"token comment\">//State</span>\nstate是数据源存放地，对应于一般Vue对象里面的data。state里面存放的数据是响应式的，\nVue组件从store中读取数据，若是store中的数据发生改变，依赖这个数据的组件也会发生更新\n需要通过mapState把全局 state 和 getters 映射到当前组件的 computed 计算属性中。\n<span class=\"token comment\">//Getter</span>\ngetters 可以对State进行计算操作，在多个组件间复用\n<span class=\"token comment\">//Mutation 、Action</span>\nAction 类似于 mutation，不同在于Action 提交的是 mutation，而不是直接变更状态；Action 可以包含任意异步操作。\n<span class=\"token comment\">//Module</span>\nVuex允许我们将store分隔成模块（module），每个模块拥有自己的state，mutation，action，getter，甚至是嵌套子模块\n<span class=\"token comment\">//使用场景</span>\n一句话，不要为了使用vuex而去使用vuex，推荐组件间数据复用，记录登录及其它状态值数据，一些需要缓存的数据使用vuex都能达到很好的管理\n</code></pre>\n<h2><a id=\"vshow__vif__434\"></a>v-show 与 v-if 的区别，两者的优先级</h2>\n<pre><code class=\"prism language-javascript\">v<span class=\"token operator\">-</span>show指令是通过修改元素的display的<span class=\"token constant\">CSS</span>属性让其显示或者隐藏；\n\nv<span class=\"token operator\">-</span><span class=\"token keyword\">if</span>指令是直接销毁和重建<span class=\"token constant\">DOM</span>达到让元素显示和隐藏的效果；\n\n使用v<span class=\"token operator\">-</span>show会更加节省性能上的开销；当只需要一次显示或隐藏时，使用v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span>更加合理。\n\n<span class=\"token comment\">//优先级</span>\nv<span class=\"token operator\">-</span><span class=\"token keyword\">for</span>优先级比v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span><span class=\"token function\">高</span><span class=\"token punctuation\">(</span>vue2<span class=\"token punctuation\">.</span>x中<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//注意事项</span>\n不要把 v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span> 和 v<span class=\"token operator\">-</span><span class=\"token keyword\">for</span> 同时用在同一个元素上，带来性能方面的浪费（每次渲染都会先循环再进行条件判断）\n正确的做法应该是再v<span class=\"token operator\">-</span><span class=\"token keyword\">for</span>的外面新增一个模板标签template，在template上使用v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span>也能结合filters或者是computed属性对数据进行加工，避免v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span>判断，更好的渲染\n</code></pre>\n<p><strong>注意：在vue2.x中，v-for的优先级会比v-if的优先高，但在vue3.x中这一判断优先级被换了过来，在3.x的环境下v-if优先级更高，除此之外v-for和v-if在同一标签中使用也会报错，解决办法可以在外面套一个template标签，或者使用computed来对数组进行过滤然后渲染</strong></p>\n<h2><a id=\"vuekey_450\"></a>vue中key的原理及其必要性</h2>\n<p><strong>vue中key作用</strong>：key是给每一个vnode的唯一id，也是diff的一种优化策略，可以根据key，更准确， 更快的找到对应的vnode节点<br/> key是每一个节点的唯一标识<br/> 必要性：当我们对数据进行更新的时候，譬如在数组中插入、移除数据时，设置的key值能让vue底层高效的对新旧vnode进行diff，然后将比对出的结果用来更新真实的DOM</p>\n<h2><a id=\"vue_454\"></a>vue路由传参</h2>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">//通过 params 传参</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'目标组件名'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n          <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> id\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//接收：</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>params\n\n<span class=\"token comment\">//通过 query 传参</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'目标组件路径'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">query</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> id\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//接收</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>query\n<span class=\"token comment\">//区别：query使用path来引入，params使用name来引入，接收方式是this.$route.query.name和this.$route.params.name，值得注意的是query传递的参数会显示在url后面以?id=？形式展示。</span>\n\n<span class=\"token comment\">//动态路由传参</span>\n<span class=\"token comment\">//直接调用$router.push 实现携带参数的跳转</span>\n     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n       <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/particulars/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//通过this.$route.params.id接收，可以看到，和上面传参不一样的是我们直接把动态参数加在路径后面实现动态路由</span>\n</code></pre>\n<h2><a id=\"vue_485\"></a>vue路由的钩子函数</h2>\n<p><strong>导航钩子种类</strong><br/> 全局导航钩子、组件内钩子、单独路由独享组件</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">//路由的钩子函数总结有6个</span>\n\n全局的路由钩子函数：beforeEach、afterEach\n\n单个的路由钩子函数：beforeEnter\n\n组件内的路由钩子函数：beforeRouteEnter、beforeRouteLeave、beforeRouteUpdate\n</code></pre>\n<p><strong>全局导航钩子</strong><br/> 全局前置守卫：beforeEach</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n     \t<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token literal-property property\">to</span><span class=\"token operator\">:</span> Route<span class=\"token operator\">:</span> 即将要进入的目标 路由对象\n<span class=\"token literal-property property\">from</span><span class=\"token operator\">:</span> Route<span class=\"token operator\">:</span> 当前导航正要离开的路由\n<span class=\"token literal-property property\">next</span><span class=\"token operator\">:</span> Function<span class=\"token operator\">:</span> 一定要调用该方法不然会阻塞路由。执行效果依赖 next 方法的调用参数。\nnext（）方法接收的参数：\n</code></pre>\n<p>全局后置钩子：afterEach</p>\n<pre><code class=\"prism language-javascript\">router<span class=\"token punctuation\">.</span><span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n     <span class=\"token comment\">// do someting</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//后置钩子并没有 next 函数</span>\n</code></pre>\n<p><strong>路由独享的钩子</strong><br/> 路由独享的导航钩子，它是在路由配置上直接进行定义的，参数的使用，和全局前置守卫是一样的<br/> 使用的钩子函数与全局路由守卫一致，为beforeEnter，不同的是，路由独享守卫是定义在路由记录中，全局路由守卫是定义在入口文件中，路由独享守卫只在路由进入时有效，全局路由守卫是所有路由跳转都会被拦截。</p>\n<p><strong>组件内的导航钩子</strong></p>\n<pre><code class=\"prism language-javascript\">beforeRouteEnter：在渲染该组件的对应路由前调用\nbeforeRouteUpdate：在当前路由改变，但是该组件被复用时调用\nbeforeRouteLeave：导航离开该组件的对应路由时调用\n<span class=\"token comment\">//注意：beforeRouteEnter 不能获取组件实例 this，因为当守卫执行前，组件实例被没有被创建出来，剩下两个钩子则可以正常获取组件实例 this</span>\n</code></pre>\n<h2><a id=\"_535\"></a>共享组件将不会重新渲染问题</h2>\n<p>我们有时候开发中会把多个路由解析为同一个Vue组件。问题是，Vue默认情况下共享组件将不会重新渲染，如果你尝试在使用相同组件的路由之间进行切换，则不会发生任何变化，此时我们需要传递key来区分，达到刷新的目的</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/a\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> MyComponent\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/b\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> MyComponent\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>router<span class=\"token operator\">-</span>view <span class=\"token operator\">:</span>key<span class=\"token operator\">=</span><span class=\"token string\">\"$route.path\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>router<span class=\"token operator\">-</span>view<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n\n</code></pre>\n<h2><a id=\"vslot_559\"></a>v-slot插槽</h2>\n<p>插槽就是子组件中用slot标签定义的预留位置，有name属性叫具名插槽，不设置name属性的叫不具名插槽，使用插槽主要是为了在父组件中使用子组件标签的时候可以往子组件内写入html代码。<br/> <strong>插槽使用：</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">//父组件：</span>\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>这是父组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>son<span class=\"token operator\">&gt;</span>slot内容<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>son<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n<span class=\"token comment\">//子组件</span>\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>这是子组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"请输入\"</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n<span class=\"token comment\">//一般情款下想在子组件内插入内容像上面直接在标签里书写时不显示的需要以slot为媒介</span>\n\n<span class=\"token comment\">//改写后：</span>\n<span class=\"token comment\">//子组件:</span>\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>这是子组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"请输入\"</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>slot<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>slot<span class=\"token operator\">&gt;</span> \n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n<span class=\"token comment\">//此时我们没有给插槽设置name，所以这是一个不具名插槽</span>\n\n<span class=\"token comment\">//具名插槽：</span>\n<span class=\"token comment\">//父组件：</span>\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>这是父组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>son<span class=\"token operator\">&gt;</span>\n        \t<span class=\"token operator\">&lt;</span>template slot<span class=\"token operator\">=</span><span class=\"token string\">\"myslot\"</span><span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n                    实践具名slot\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>son<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n<span class=\"token comment\">//子组件</span>\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>这是子组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"请输入\"</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>slot name<span class=\"token operator\">=</span><span class=\"token string\">\"myslot\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>slot<span class=\"token operator\">&gt;</span> \n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n<span class=\"token comment\">//此时设置name属性的插槽为具名插槽，与之相对应的用了slot的设置为相同属性名的内容则会被渲染在插槽中，此时如果有未设置slot插槽名的内容则会被渲染在不具名插槽中</span>\n</code></pre>\n<p><strong>插槽作用域：</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">//父组件:</span>\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>父组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>son<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>template slot<span class=\"token operator\">=</span><span class=\"token string\">\"myslot\"</span> slot<span class=\"token operator\">-</span>scope<span class=\"token operator\">=</span><span class=\"token string\">\"props\"</span><span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">&gt;</span>\n                    <span class=\"token operator\">&lt;</span>li v<span class=\"token operator\">-</span><span class=\"token keyword\">for</span><span class=\"token operator\">=</span><span class=\"token string\">\"item in props.data\"</span><span class=\"token operator\">&gt;</span>\n                        <span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">{<!-- --></span>item<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n                    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>son<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n<span class=\"token comment\">//子组件:</span>\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>子组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"请输入\"</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>slot name<span class=\"token operator\">=</span><span class=\"token string\">\"myslot\"</span> <span class=\"token operator\">:</span>data<span class=\"token operator\">=</span><span class=\"token string\">'list'</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>slot<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'Son'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token literal-property property\">list</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">{<!-- --></span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">{<!-- --></span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">{<!-- --></span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n\n</code></pre>\n<p>相关v-slot的详细文章大家可以看我这篇博文→<a href=\"https://blog.csdn.net/qq_45659769/article/details/124686499\">v-slot插槽浅析传送门</a></p>\n<h2><a id=\"mixins_658\"></a>mixins</h2>\n<p><strong>mixins是一种分发Vue组件中可复用功能的一种灵活方式。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项。</strong><br/> mixins是一个JavaScript对象，可以包含组件中的任意选项，比如Vue实例中生命周期的各个钩子函数，也可以是data、components、methods或directives等<br/> <strong>运用：</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">//mixin文件</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> myMixin<span class=\"token operator\">=</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span><span class=\"token number\">1</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">created</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myMixin'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myMixin'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//引入</span>\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">&gt;</span>\n\t<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>运用mixin的组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span>myMixin<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span><span class=\"token string\">'目标文件路径'</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token literal-property property\">mixins</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>myMixin<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><strong>特点：</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token number\">1</span>、在组件<span class=\"token constant\">A</span>对混入的数据做出更改后组件<span class=\"token constant\">B</span>获取到的仍是混入初始设置的数据，组件间操作互不污染。\n<span class=\"token number\">2</span>、值为对象的如methods<span class=\"token punctuation\">,</span>components等，选项会被合并，组件会覆盖混入对象的方法。\n比如混入对象里有个方法<span class=\"token constant\">A</span>，组件里也有方法<span class=\"token constant\">A</span>，这时候在组件里调用的话，执行的是组件里的<span class=\"token constant\">A</span>方法。\n<span class=\"token number\">3</span>、created<span class=\"token punctuation\">,</span>mounted等，就会被合并调用，混合对象里的钩子函数在组件里的钩子函数之前调用，\n同一个钩子函数里，会先执行混入对象的东西，再执行本组件的。\n<span class=\"token number\">4</span>、在mixins里面包含异步请求函数的时候，通过直接调用异步函数获取返回数据\n</code></pre>\n<p><strong>运用场景区别：</strong></p>\n<pre><code class=\"prism language-javascript\">vuex：用来做状态管理，可以看做全局变量，里面定义的变量在每个组件中均可以使用和修改，\n在任一组件中修改此变量的值之后，其他组件中此变量的值也会随之修改。\n\nmixins：可以定义共用的变量，在每个组件中使用，引入组件中之后，各个变量是相互独立的，\n值的修改在组件中不会相互影响。\n\n父子组件：父子组件相对来说比较独立，只是父组件将一部分使用子组件，而mixins更像是对于组件的拓展，并且\n组件可以对于混入的数据和方法进行多样化操作。\n</code></pre>\n<h2><a id=\"vue_715\"></a>vue自定义组件添加事件</h2>\n<p>使用修饰符.native 监听组件根元素的原生事件</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>my<span class=\"token operator\">-</span>button  @click<span class=\"token punctuation\">.</span>native<span class=\"token operator\">=</span><span class=\"token string\">\"alert()\"</span> names<span class=\"token operator\">=</span><span class=\"token string\">\"点击触发\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>my<span class=\"token operator\">-</span>button<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h2><a id=\"axios_722\"></a>axios</h2>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">//axios特点：</span>\n在浏览器中创建XMLHttpRequest请求\n在node<span class=\"token punctuation\">.</span>js中发送http请求\n支持Promise <span class=\"token constant\">API</span>\n拦截请求和响应\n转换请求和响应数据\n取消要求\n自动转换<span class=\"token constant\">JSON</span>数据\n客户端支持防止<span class=\"token constant\">CSRF</span><span class=\"token operator\">/</span><span class=\"token constant\">XSRF</span><span class=\"token punctuation\">(</span>跨域请求伪造<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//axios的请求方式：</span>\n<span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>config<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>url <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>data <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>config<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>url <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>data <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>config<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>url <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>config<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">patch</span><span class=\"token punctuation\">(</span>url <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>data <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>config<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">head</span><span class=\"token punctuation\">(</span>url <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>config<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>axios一般用法配置与请求</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">//引入axios</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"token comment\">//定义axios请求接口的baseURL</span>\naxios<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">.</span>baseURL <span class=\"token operator\">=</span> <span class=\"token string\">'http://localhost:8080/api/products'</span>\n\n<span class=\"token comment\">//执行GET请求</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user?ID=12345'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//返回的是一个Promise</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=&gt;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=&gt;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//可配置参数的方式</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token constant\">ID</span><span class=\"token operator\">:</span><span class=\"token number\">12345</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=&gt;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=&gt;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//发送post请求</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> <span class=\"token string\">'simon'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span><span class=\"token string\">'li'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=&gt;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=&gt;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token comment\">//发送post请求</span>\n<span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">//请求方式，默认是get请求</span>\n    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span><span class=\"token string\">'/user/12345'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//地址</span>\n    <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">//参数</span>\n        <span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> <span class=\"token string\">'simon'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> <span class=\"token string\">'li'</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p><strong>发送并发请求：</strong></p>\n<pre><code class=\"prism language-javascript\">\n<span class=\"token comment\">//发送多个请求(并发请求)，类似于promise.all，若一个请求出错，那就会停止请求</span>\n<span class=\"token keyword\">const</span> get1 <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/12345'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> get2 <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/12345/permission'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>get1<span class=\"token punctuation\">,</span>get2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">.</span><span class=\"token function\">spread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res1<span class=\"token punctuation\">,</span>res2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    \tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res1<span class=\"token punctuation\">,</span>res2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=&gt;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n<span class=\"token comment\">//函数返回的是一个数组axios.spread(callback)可用于将结果数组展开</span>\n</code></pre>\n<p><strong>请求配置：</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//服务器的地址，是必须的选项</span>\n    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'/user'</span><span class=\"token punctuation\">,</span>\n        \n    <span class=\"token comment\">//请求的方式，若没有则默认是get</span>\n    <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span>\n        \n    <span class=\"token comment\">//如果url不是绝对地址，则会加上baseURL</span>\n    <span class=\"token literal-property property\">baseURL</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://localhost:3000/'</span><span class=\"token punctuation\">,</span>\n       \n    <span class=\"token comment\">//transformRequest允许请求的数据在发送至服务器之前进行处理，这个属性只适用于put、post、patch方式</span>\n    <span class=\"token comment\">//数组的最后一个函数必须返回一个字符串或者一个'ArrayBuffer'或'Stream'或'Buffer' 实例或'ArrayBuffer'，'Formdata'，</span>\n    <span class=\"token comment\">//若函数中用到了headers，则需要设置headers属性    </span>\n    <span class=\"token literal-property property\">transformRequest</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span>headers</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//根据需求对数据进行处理</span>\n        <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>    \n    \n    <span class=\"token comment\">//transformResponse允许对返回的数据传入then/catch之前进行处理    </span>\n    <span class=\"token literal-property property\">transformResponse</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//依需要对数据进行处理</span>\n        <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>   \n    \n    <span class=\"token comment\">//headers是自定义的要被发送的信息头</span>\n    <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token string-property property\">'X-Requested-with'</span><span class=\"token operator\">:</span><span class=\"token string\">'XMLHttpRequest'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        \n    <span class=\"token comment\">//params是请求连接中的请求参数，必须是一个纯对象</span>\n    <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token constant\">ID</span><span class=\"token operator\">:</span><span class=\"token number\">12345</span>  \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>    \n    \n    <span class=\"token comment\">//paramsSerializer用于序列化参数</span>\n    <span class=\"token function-variable function\">paramsSerializer</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">params</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">return</span> Qs<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token literal-property property\">arrayFormat</span><span class=\"token operator\">:</span><span class=\"token string\">'brackets'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>     \n    \n    <span class=\"token comment\">//data是请求时作为请求体的数据——request.body</span>\n    <span class=\"token comment\">//只适用于put、post、patch请求方法</span>\n    <span class=\"token comment\">//浏览器:FormData，File，Blob;Node:stream</span>\n    <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> <span class=\"token string\">'simon'</span><span class=\"token punctuation\">,</span>  \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>    \n    \n    <span class=\"token comment\">//timeout定义请求的时间，单位是毫秒，如果请求时间超过设定时间，请求将停止</span>\n    <span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n        \n    <span class=\"token comment\">//withCredentials表明跨跨域请求书否需要证明。</span>\n    <span class=\"token literal-property property\">withCredentials</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//默认值</span>\n        \n    <span class=\"token comment\">//adapter适配器，允许自定义处理请求</span>\n    <span class=\"token comment\">//返回一个promise</span>\n    <span class=\"token function-variable function\">adapter</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">/*...*/</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>    \n     \n    <span class=\"token comment\">//auth表明HTTP基础的认证应该被使用，并提供证书</span>\n    <span class=\"token literal-property property\">auth</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span><span class=\"token string\">'simon'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span><span class=\"token string\">'123456'</span><span class=\"token punctuation\">,</span>    \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>    \n    \n    <span class=\"token comment\">//responseType表明服务器返回的数据类型，这些类型包括：json/blob/document/ \t\tarraybuffer/text/stream    </span>\n     <span class=\"token literal-property property\">responseType</span><span class=\"token operator\">:</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">,</span>   \n         \n     <span class=\"token comment\">//proxy定义服务器的主机名和端口号</span>\n     <span class=\"token comment\">//auth属性表明HTTP基本认证应该跟proxy相连接，并提供证书</span>\n     <span class=\"token comment\">//这将设置一个'Proxy-Authorization'头(header)，覆盖原来自定义的</span>\n     <span class=\"token literal-property property\">proxy</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span>\n         <span class=\"token literal-property property\">host</span><span class=\"token operator\">:</span><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token punctuation\">,</span>\n         <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span>\n         <span class=\"token literal-property property\">auth</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span>\n             <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span><span class=\"token string\">'simon'</span><span class=\"token punctuation\">,</span>\n             <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span><span class=\"token string\">'123456'</span>    \n         <span class=\"token punctuation\">}</span>    \n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>   \n     \n     <span class=\"token comment\">//取消请求</span>\n     <span class=\"token literal-property property\">cancelToken</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CancelToken</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cancel</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>    \n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2><a id=\"ajax_886\"></a>ajax</h2>\n<p>详情可以查看我之前写过的ajax封装文章，详细了说明封装过程<a href=\"https://blog.csdn.net/qq_45659769/article/details/119985260\">ajax优劣分析及封装<br/> </a></p>\n<h2><a id=\"keepalive_890\"></a>keep-alive</h2>\n<p><strong>活动组件实例在切换离开时将被卸载。这将导致它持有的任何更改状态丢失</strong><br/> 我们在开发过程中经常会有tab切换的这种需求，此时如果说有接口请求或者组件的刷新将会导致我们原来的数据重置，如果不想组件重置数据，我们可以用&lt; keep-alive &gt;标签包裹<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\f795912099244c2abf97549501d0e4a3.png\"/><br/> 上面是官网的一个例子，当从A切换到B组件再切回A时候，count计数将会重置，但是当用&lt; keep-alive &gt;包裹时候，再切换，我们会发现count能够得以保留了</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">//Inactive components will be cached!</span>\n<span class=\"token operator\">&lt;</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>component <span class=\"token operator\">:</span>is<span class=\"token operator\">=</span><span class=\"token string\">\"activeComponent\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><strong>includes和exclude：</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>keep<span class=\"token operator\">-</span>alive include<span class=\"token operator\">=</span><span class=\"token string\">\"a,b\"</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>component <span class=\"token operator\">:</span>is<span class=\"token operator\">=</span><span class=\"token string\">\"view\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>component<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">&gt;</span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> <span class=\"token function\">正则表达式</span> <span class=\"token punctuation\">(</span>使用 <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">v-bind</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>keep<span class=\"token operator\">-</span>alive <span class=\"token operator\">:</span>include<span class=\"token operator\">=</span><span class=\"token string\">\"/a|b/\"</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>component <span class=\"token operator\">:</span>is<span class=\"token operator\">=</span><span class=\"token string\">\"view\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>component<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">&gt;</span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> <span class=\"token function\">数组</span> <span class=\"token punctuation\">(</span>使用 <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">v-bind</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>keep<span class=\"token operator\">-</span>alive <span class=\"token operator\">:</span>include<span class=\"token operator\">=</span><span class=\"token string\">\"['a', 'b']\"</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>component <span class=\"token operator\">:</span>is<span class=\"token operator\">=</span><span class=\"token string\">\"view\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>component<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">&gt;</span>\n\n<span class=\"token comment\">/*匹配首先检查组件自身的 name 选项，如果 name 选项不可用，则匹配它的局部注册名称 \n(父组件 components 选项的键值)，匿名组件不能被匹配*/</span>\n</code></pre>\n<p>设置了 keep-alive 缓存的组件，会多出两个生命周期钩子（activated与deactivated）：</p>\n<ul><li>首次进入组件时：beforeRouteEnter &gt; beforeCreate &gt; created&gt; mounted &gt;<br/> activated &gt; … … &gt; beforeRouteLeave &gt; deactivated</li><li>再次进入组件时：beforeRouteEnter &gt;activated &gt; … … &gt; beforeRouteLeave &gt;<br/> deactivated</li></ul>\n<h2><a id=\"Vue_929\"></a>Vue常用的修饰符及其使用</h2>\n<p>修饰符是用于限定类型以及类型成员的声明的一种符号<br/> <strong>常见修饰符种类：</strong></p>\n<ul><li>表单修饰符</li><li>事件修饰符</li><li>鼠标按键修饰符</li><li>键值修饰符</li><li>v-bind修饰符<br/> <strong>1、表单修饰符</strong></li></ul>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">//lazy、trim、number</span>\n\n<span class=\"token comment\">//光标离开标签的时候，才会将值赋予给value</span>\n<span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> v<span class=\"token operator\">-</span>model<span class=\"token punctuation\">.</span>lazy<span class=\"token operator\">=</span><span class=\"token string\">\"value\"</span><span class=\"token operator\">&gt;</span>\n<span class=\"token comment\">//过滤用户输入的首尾空格字符，注意，如果是中间的空格则不会过滤</span>\n<span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> v<span class=\"token operator\">-</span>model<span class=\"token punctuation\">.</span>trim<span class=\"token operator\">=</span><span class=\"token string\">\"value\"</span><span class=\"token operator\">&gt;</span>\n<span class=\"token comment\">//自动将用户的输入值转为数值类型，但如果这个值无法被parseFloat解析，则会返回原来的值</span>\n<span class=\"token operator\">&lt;</span>input v<span class=\"token operator\">-</span>model<span class=\"token punctuation\">.</span>number<span class=\"token operator\">=</span><span class=\"token string\">\"age\"</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"number\"</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><strong>2、事件修饰符</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">//stop、prevent、self、once、capture、passive、native</span>\n\n<span class=\"token comment\">//阻止了事件冒泡</span>\n<span class=\"token operator\">&lt;</span>button @click<span class=\"token punctuation\">.</span>stop<span class=\"token operator\">=</span><span class=\"token string\">\"btn()\"</span><span class=\"token operator\">&gt;</span>ok<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n<span class=\"token comment\">//阻止了事件的默认行为</span>\n<span class=\"token operator\">&lt;</span>form v<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span>submit<span class=\"token punctuation\">.</span>prevent<span class=\"token operator\">=</span><span class=\"token string\">\"onSubmit\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">&gt;</span>\n<span class=\"token comment\">//只当在 event.target 是当前元素自身时触发处理函数</span>\n<span class=\"token operator\">&lt;</span>div v<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span>click<span class=\"token punctuation\">.</span>self<span class=\"token operator\">=</span><span class=\"token string\">\"doSome\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token comment\">//事件只能触发一次</span>\n<span class=\"token operator\">&lt;</span>button @click<span class=\"token punctuation\">.</span>once<span class=\"token operator\">=</span><span class=\"token string\">\"btn()\"</span><span class=\"token operator\">&gt;</span>ok<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n<span class=\"token comment\">//事件触发从包含这个元素的顶层开始往下触发 //输出结构: 1 2</span>\n<span class=\"token operator\">&lt;</span>div @click<span class=\"token punctuation\">.</span>capture<span class=\"token operator\">=</span><span class=\"token string\">\"btn(1)\"</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token number\">1</span>\n    <span class=\"token operator\">&lt;</span>div @click<span class=\"token punctuation\">.</span>capture<span class=\"token operator\">=</span><span class=\"token string\">\"btn(2)\"</span><span class=\"token operator\">&gt;</span>\n\t    <span class=\"token number\">2</span>\n\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token comment\">/* 在移动端，当我们在监听元素滚动事件的时候，会一直触发onscroll事件会让我们的网页变卡，\n因此我们使用这个修饰符的时候，相当于给onscroll事件整了一个.lazy修饰符*/</span>\n<span class=\"token operator\">&lt;</span>div v<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span>scroll<span class=\"token punctuation\">.</span>passive<span class=\"token operator\">=</span><span class=\"token string\">\"onScroll\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token comment\">/*让组件变成像html内置标签那样监听根元素的原生事件，否则组件上使用 v-on 只会监听自定义事件\n注意：使用.native修饰符来操作普通HTML标签是会令事件失效的*/</span>\n<span class=\"token operator\">&lt;</span>my<span class=\"token operator\">-</span>component v<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span>click<span class=\"token punctuation\">.</span>native<span class=\"token operator\">=</span><span class=\"token string\">\"doSomething\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>my<span class=\"token operator\">-</span>component<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><strong>3、鼠标按钮修饰符</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">//left 左键点击、right 右键点击、middle 中键点击</span>\n\n<span class=\"token operator\">&lt;</span>button @click<span class=\"token punctuation\">.</span>left<span class=\"token operator\">=</span><span class=\"token string\">\"btn('left')\"</span><span class=\"token operator\">&gt;</span>ok<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>button @click<span class=\"token punctuation\">.</span>right<span class=\"token operator\">=</span><span class=\"token string\">\"btn('right')\"</span><span class=\"token operator\">&gt;</span>ok<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>button @click<span class=\"token punctuation\">.</span>middle<span class=\"token operator\">=</span><span class=\"token string\">\"btn('middle')\"</span><span class=\"token operator\">&gt;</span>ok<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><strong>4、键盘修饰符</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">//onkeyup，onkeydown，后面需要跟keycode编码名或者按键编码</span>\n<span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> @keyup<span class=\"token punctuation\">.</span>keyCode<span class=\"token operator\">=</span><span class=\"token string\">\"btn()\"</span><span class=\"token operator\">&gt;</span>\n</code></pre>\n<p><strong>5、v-bind修饰符</strong></p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">//async、prop、camel</span>\n\n<span class=\"token comment\">//能对props进行一个双向绑定</span>\n<span class=\"token comment\">//父组件</span>\n<span class=\"token operator\">&lt;</span>comp <span class=\"token operator\">:</span>myMessage<span class=\"token punctuation\">.</span>sync<span class=\"token operator\">=</span><span class=\"token string\">\"bar\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>comp<span class=\"token operator\">&gt;</span> \n<span class=\"token comment\">//子组件</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'update:myMessage'</span><span class=\"token punctuation\">,</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//上面代码与以下代码是等同的,实际上就是实现了获取子组件信息处理并回传</span>\n<span class=\"token comment\">//父亲组件</span>\n<span class=\"token operator\">&lt;</span>comp <span class=\"token operator\">:</span>myMessage<span class=\"token operator\">=</span><span class=\"token string\">\"bar\"</span> @update<span class=\"token operator\">:</span>myMessage<span class=\"token operator\">=</span><span class=\"token string\">\"func\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>comp<span class=\"token operator\">&gt;</span>\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bar <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//子组件js</span>\n<span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'update:myMessage'</span><span class=\"token punctuation\">,</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n注意：\n<span class=\"token number\">1</span><span class=\"token literal-property property\">、使用sync的时候，子组件传递的事件名格式必须为update</span><span class=\"token operator\">:</span>value，其中value必须与子组件中props中\n声明的名称完全一致\n<span class=\"token number\">2</span>、注意带有 <span class=\"token punctuation\">.</span>sync 修饰符的 v<span class=\"token operator\">-</span>bind 不能和表达式一起使用\n<span class=\"token number\">3</span>、将 v<span class=\"token operator\">-</span>bind<span class=\"token punctuation\">.</span>sync 用在一个字面量的对象上，例如 v<span class=\"token operator\">-</span>bind<span class=\"token punctuation\">.</span>sync<span class=\"token operator\">=</span>”<span class=\"token punctuation\">{<!-- --></span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> doc<span class=\"token punctuation\">.</span>title <span class=\"token punctuation\">}</span>”，是无法正常工作的\n\n<span class=\"token comment\">//设置自定义标签属性，避免暴露数据，防止污染HTML结构</span>\n<span class=\"token operator\">&lt;</span>input id<span class=\"token operator\">=</span><span class=\"token string\">\"uid\"</span> title<span class=\"token operator\">=</span><span class=\"token string\">\"title1\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"1\"</span> <span class=\"token operator\">:</span>index<span class=\"token punctuation\">.</span>prop<span class=\"token operator\">=</span><span class=\"token string\">\"index\"</span><span class=\"token operator\">&gt;</span>\n\n<span class=\"token comment\">//将命名变为驼峰命名法，如将view-Box属性名转换为 viewBox</span>\n<span class=\"token operator\">&lt;</span>svg <span class=\"token operator\">:</span>view<span class=\"token operator\">-</span>Box<span class=\"token punctuation\">.</span>camel<span class=\"token operator\">=</span><span class=\"token string\">\"viewBox\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>svg<span class=\"token operator\">&gt;</span>\n</code></pre>\n<h2><a id=\"SSR_1024\"></a>SSR</h2>\n<p>什么是ssr：Server-Side Rendering 我们称其为SSR，意为服务端渲染，展开说就是通过服务侧完成页面的 HTML 结构拼接的页面处理技术，发送到浏览器，然后为其绑定状态与事件，成为完全可交互页面的过程<br/> ssr作用：</p>\n<ul><li>seo：搜索引擎优先爬取页面HTML结构，使用ssr时，服务端已经生成了和业务想关联的HTML，有利于seo</li><li>首屏呈现渲染：用户无需等待页面所有js加载完成就可以看到页面视图（压力来到了服务器，所以需要权衡哪些用服务端渲染，哪些交给客户端）</li></ul>\n<p>缺点：</p>\n<ol><li>项目复杂度高</li><li>需要库的支持性，代码兼容</li><li>服务器负载变大，相对于前后端分离务器只需要提供静态资源来说，服务器负载更大</li></ol>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-08-09 16:57:42", "summary": "中的理解：模型：数据模型；负责数据存储。泛指后端进行的各种业务逻辑处理和数据操控，主要围绕数据库系统展开。就是：视图：负责页面展示，也就是用户界面。主要由和来构建就是：视图模型：负责业务逻辑处理比如请"}