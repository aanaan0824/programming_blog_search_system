{"blogid": "126493214", "writerAge": "码龄6年", "writerBlogNum": "426", "writerCollect": "569", "writerComment": "346", "writerFan": "1086", "writerGrade": "6级", "writerIntegral": "6730", "writerName": "西魏陶渊明", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126493214.jpg", "writerRankTotal": "2456", "writerRankWeekly": "292", "writerThumb": "417", "writerVisitNum": "428089", "blog_read_count": "533", "blog_time": "于 2022-08-24 16:12:23 发布", "blog_title": "每年大促都要补习JVM调优，今年我都总结到这里了。", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atelier-sulphurpool-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\aa1d259419ff268edc2fe3088f940556.png\"/></p>\n<p><strong>作者</strong>: 西魏陶渊明<br/> <strong>博客</strong>: <a href=\"https://blog.springlearn.cn/\">https://blog.springlearn.cn/</a></p>\n<blockquote>\n<p>天下代码一大抄, 抄来抄去有提高, 看你会抄不会抄！</p>\n</blockquote>\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/10e3b1ba78ed2cd6afb33928df91a52f.gif\"/></p>\n<p><a href=\"https://github.com/lxchinesszz/learn-example/blob/master/learn-jvm/src/test/java/learn/jvm\">示例代码地址</a></p>\n<h2><a id=\"JVM_11\"></a>一、JVM内存介绍</h2>\n<p>我们在学习JVM的内存管理的时候,我们的思维要跳出Java的局限。我们要这么理解。我们写的Java代码，是运行在JVM上的。<br/> 如果让你来实现JVM那么。你会怎么处理呢?</p>\n<ul><li>公共部分(堆heap) \n  <ul><li><code>Class字节码</code>是公共的,是共享的,所有线程都要认识字节码。</li><li><code>new的对象</code>是公共的,也是共享的,所有线程要都能认识这些实例对象,能读取到实例的数据。</li></ul> </li><li>私有部分 (栈stock) \n  <ul><li>Java中每个线程的执行中的代码，及代码中的局部变量等信息是私有的。每个线程之间都要维护一份。</li><li>JVM虚拟栈和本地方法栈。</li><li>代码是怎么执行的,当然是一行一行执行。那么这一行一行的代码是放在哪里的呢? 是放在栈里面的。Java代码是在JVM来执行的。<br/> 所以这个栈，我们称为<code>JVM虚拟栈</code>。</li><li>JVM中有些方法是调用其他语言实现的, 会使用<code>本地方法栈</code>。</li><li>那么谁来读取栈里面的数据,来出栈执行呢? 这叫做<code>PC寄存区</code>。</li></ul> </li></ul>\n<h2><a id=\"11__27\"></a>1.1 堆空间</h2>\n<p><a href=\"/learn/project/jvm/JVM%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/\">JVM参数配置说明</a></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\08a7e1d180b72aff2eb276ac06e734a7.png\"/></p>\n<h3><a id=\"111__33\"></a>1.1.1 堆上信息</h3>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\4e8b014a46371034cd89eff50f23abff.png\"/></p>\n<p><code>new</code> 出来的对象都在堆上。当堆的内存不足，会触发gc。<a href=\"/\">GC策略</a>。</p>\n<h3><a id=\"112__39\"></a>1.1.2 堆的相关配置</h3>\n<table><thead><tr><th align=\"left\">配置参数</th><th align=\"left\">说明</th><th align=\"left\">示例</th></tr></thead><tbody><tr><td align=\"left\"><code>-Xmx</code></td><td align=\"left\">设置最大堆大小。</td><td align=\"left\"><code>-Xmx3550m</code>，设置JVM最大可用内存为3550 MB。</td></tr><tr><td align=\"left\"><code>-Xms</code></td><td align=\"left\">设置JVM初始内存。</td><td align=\"left\"><code>-Xms3550m</code>，设置JVM初始内存为3550 MB。此值建议与<code>-Xmx</code>相同，避免每次垃圾回收完成后JVM重新分配内存。</td></tr><tr><td align=\"left\"><code>-Xmn2g</code></td><td align=\"left\">设置年轻代大小。</td><td align=\"left\"><code>-Xmn2g</code>，设置年轻代大小为2 GB。整个JVM内存大小=年轻代大小+年老代大小+持久代大小。持久代一般固定大小为64 MB，所以增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。</td></tr><tr><td align=\"left\"><code>-XX:NewRatio=n</code></td><td align=\"left\">设置年轻代和年老代的比值。</td><td align=\"left\"><code>-XX:NewRatio=4</code>，设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。如果设置为4，那么年轻代与年老代所占比值为1:4，年轻代占整个堆栈的1/5。</td></tr><tr><td align=\"left\"><code>-XX:SurvivorRatio=n</code></td><td align=\"left\">年轻代中Eden区与两个Survivor区的比值。</td><td align=\"left\"><code>-XX:SurvivorRatio=4</code>，设置年轻代中Eden区与Survivor区的大小比值。如果设置为4，那么两个Survivor区与一个Eden区的比值为2:4，一个Survivor区占整个年轻代的1/6。</td></tr><tr><td align=\"left\"><code>-XX:MaxPermSize=n</code></td><td align=\"left\">设置持久代大小。(JDK8以移除)</td><td align=\"left\"><code>-XX:MaxPermSize=16m</code>，设置持久代大小为16 MB。</td></tr><tr><td align=\"left\"><code>-XX:MaxTenuringThreshold=n</code></td><td align=\"left\">设置垃圾最大年龄。</td><td align=\"left\"><code>-XX:MaxTenuringThreshold=0</code>，设置垃圾最大年龄。如果设置为0，那么年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，提高了效率。如果将此值设置为较大值，那么年轻代对象会在Survivor区进行多次复制，增加了对象在年轻代的存活时间，增加在年轻代即被回收的概率。</td></tr></tbody></table>\n<h3><a id=\"113__51\"></a>1.1.3 常见问题</h3>\n<ul><li>大对象，无法释放，导致内存移除。<br/> <strong>堆上的问题是比较容易排查的,可以通过工具把堆的信息给dump下来,然后就能直接定位到大对象,并通过调用链路定位到具体的代码,后面会介绍工具</strong></li></ul>\n<h2><a id=\"12__57\"></a>1.2 非堆空间</h2>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\2c162afc3b80bf7ccde5467e1da81908.png\"/></p>\n<h3><a id=\"121__61\"></a>1.2.1 非堆上的信息</h3>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\4e8b014a46371034cd89eff50f23abff.png\"/></p>\n<ul><li><code>Thread</code> 配置线程的栈大小，决定了你调用链的深度。</li><li><code>Metaspace</code> 可加载类的信息大小</li></ul>\n<h3><a id=\"122__68\"></a>1.2.2 相关配置</h3>\n<table><thead><tr><th align=\"left\">配置参数</th><th align=\"left\">说明</th><th align=\"left\">示例</th></tr></thead><tbody><tr><td align=\"left\"><code>-Xss</code></td><td align=\"left\">设置线程的栈大小。</td><td align=\"left\"><code>-Xss128k</code>，设置每个线程的栈大小为128 KB。<strong>说明</strong> JDK 5.0版本以后每个线程栈大小为1 MB，JDK 5.0以前版本每个线程栈大小为256 KB。请依据应用的线程所需内存大小进行调整。在相同物理内存下，减小该值可以生成更多的线程。但是操作系统对一个进程内的线程个数有一定的限制，无法无限生成，一般在3000个~5000个。</td></tr><tr><td align=\"left\"><code>-XX:MaxMetaspace=n</code></td><td align=\"left\">设置元空间大小。</td><td align=\"left\"><code>-XX:MaxMetaspace=16m</code>，设置元空间大小为16 MB。</td></tr></tbody></table>\n<h2><a id=\"_76\"></a>二、工具介绍</h2>\n<h2><a id=\"21__78\"></a>2.1 原生命令</h2>\n<h2><a id=\"22__80\"></a>2.2 二方可视化分析</h2>\n<h3><a id=\"221_idea_VisualGC_82\"></a>2.2.1 idea 插件VisualGC</h3>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\2510809acaa55a6634fee6de40ed4281.png\"/></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\5f46888b16d4ade1fd259c272cd98f06.png\"/></p>\n<h3><a id=\"222_JProfile_88\"></a>2.2.2 JProfile</h3>\n<p><a href=\"https://www.ej-technologies.com/products/jprofiler/overview.html\">JProfile</a></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\766ff6c71b62a83a068e7f01b15590bb.png\"/></p>\n<h3><a id=\"223_Arthas_94\"></a>2.2.3 Arthas</h3>\n<p><a href=\"https://arthas.aliyun.com/zh-cn/\">Arthas</a></p>\n<p><strong>Arthas功能是比较强大的,非常适合用于排查些疑难问题</strong></p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\0b1b4b268934e93663e1cf111c11224d.png\"/></p>\n<h2><a id=\"23_GC_102\"></a>2.3 GC日志学习</h2>\n<ul><li>开启GC日志参数 <code>-XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintGCDateStamps</code></li></ul>\n<h3><a id=\"231_GC_106\"></a>2.3.1 年轻代GC</h3>\n<ul><li>首先是年轻代GC</li></ul>\n<pre><code>2022-06-03T00:13:48.801-0800: \n0.369: \n[GC (Allocation Failure) \n[PSYoungGen: 7168K-&gt;1513K(8704K)] 7168K-&gt;4097K(49664K), 0.0183816 secs] \n[Times: user=0.02 sys=0.01, real=0.02 secs] \n</code></pre>\n<ul><li><code>2022-06-03T00:13:48.801-0800</code> -XX:+PrintGCDateStamps 打印日期</li><li><code>0.369</code> -XX:+PrintGCDateStamps JVM启动到当前日期的总时长的时间戳形式</li><li><code>[GC (Allocation Failure)</code> GC 原因(Allocation Failure) 分配失败 \n  <ul><li><mark>Allocation Failure</mark> 分配失败</li><li><mark>Metadata GC Threshold</mark> 元空间不足</li><li><mark>Last ditch collection</mark> 元空间GC后,仍然不足,即触发</li></ul> </li><li><code>PSYoungGen</code> 年轻代GC</li><li><code>Times</code> 耗时统计 \n  <ul><li><code>user</code> 表示GC线程执行所使用的CPU总时间</li><li><code>sys</code> 进程在内核态消耗的CPU时间</li><li><code>real</code> 程序从开始到结束所用的时钟时间,这个时间接近 sys + user</li></ul> </li></ul>\n<p><strong>由于多核的原因,一般的GC事件中, real time是小于sys + user time的,因为一般是多个线程并发的去做GC,所以real time是要小于systuser time的</strong></p>\n<h3><a id=\"232_GC_133\"></a>2.3.2 老年代GC</h3>\n<p>老年代执行的是 Full GC，Full GC执行的时候，不止回收老年代，还会回收新生代和元数据空间</p>\n<pre><code>2022-06-03T00:22:27.829-0800:\n0.798: \n[Full GC (Allocation Failure) \n[PSYoungGen: 0K-&gt;0K(8704K)] \n[ParOldGen: 36024K-&gt;36006K(40960K)] 36024K-&gt;36006K(49664K), \n[Metaspace: 3078K-&gt;3078K(1056768K)], 0.2006976 secs] \n[Times: user=1.11 sys=0.01, real=0.21 secs] \n</code></pre>\n<ul><li><code>2022-06-03T00:13:48.801-0800</code> -XX:+PrintGCDateStamps 打印日期</li><li><code>0.369</code> -XX:+PrintGCDateStamps JVM启动到当前日期的总时长的时间戳形式</li><li><code>[Full GC (Allocation Failure)</code> GC 原因(Allocation Failure) 分配失败 \n  <ul><li><mark>Allocation Failure</mark> 分配失败</li><li><mark>Metadata GC Threshold</mark> 元空间不足</li><li><mark>Last ditch collection</mark> 元空间GC后,仍然不足,即触发</li></ul> </li><li><code>PSYoungGen</code> 年轻代GC</li><li><code>ParOldGen</code> 老年代GC</li><li><code>Metaspace</code> 元空间或者叫方法区GC</li><li><code>Times</code> 耗时统计 \n  <ul><li><code>user</code> 表示GC线程执行所使用的CPU总时间</li><li><code>sys</code> 进程在内核态消耗的CPU时间</li><li><code>real</code> 程序从开始到结束所用的时钟时间,这个时间接近 sys + user</li></ul> </li></ul>\n<h2><a id=\"_163\"></a>三、场景分析</h2>\n<h2><a id=\"31_OOM_165\"></a>3.1 堆空间导致OOM</h2>\n<h3><a id=\"311__167\"></a>3.1.1 模拟堆栈</h3>\n<ul><li><code>HeapOverflowTest</code></li><li><code>StackOverflowTest</code></li></ul>\n<h3><a id=\"312__172\"></a>3.1.2 现象</h3>\n<ol><li>频繁进行fu gc</li><li>应用吞吐量下降</li><li>应用rt上升</li><li>方法调用报错<strong>OutOfMemoryError : Java heap space</strong></li></ol>\n<h3><a id=\"313__179\"></a>3.1.3 解决方案</h3>\n<ol><li><code>jps</code> 找到应用 <code>pid</code></li><li>把堆信息dump下来 <code>jmap -dump:format=b,file=heap.hprof ${pid}</code></li><li>打开JProfile 打开文件,直接看到大对象是哪个。</li></ol>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\4743cf88249315e90fa5b0f851499248.png\"/></p>\n<h2><a id=\"32_CPU_187\"></a>3.2 CPU飙升</h2>\n<p>CPU飙升,可能是有线程一直在占用CPU。发生了死锁，发生了死循环之类的。这些情况是有问题的。<br/> 但是当你的机器流量比较大时候,同样也会导致CPU飙升,此时可能就需要加机器来进行解决。或者仅限限流。下面<br/> 只说有问题的场景,如何查看线程状态。</p>\n<h3><a id=\"321__194\"></a>3.2.1 模拟异常</h3>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> CPU <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"322__211\"></a>3.2.2 现象</h3>\n<ul><li>系统卡顿,吞吐量下降</li><li>如果没有限制启动参数,可能会导致宿主机也非常卡段,引用占用了很大CPU</li></ul>\n<h3><a id=\"323__216\"></a>3.2.3 解决方案</h3>\n<ol><li>找到那些线程在阻塞 <code>jstack $PID</code></li><li>如下片段发现线程都是 <code>BLOCKED</code> 状态, 调用点都在 <code>CPU.java:18</code></li></ol>\n<pre><code>\"Thread-497\" #508 prio=5 os_prio=31 tid=0x00007f88f58a0000 nid=0x41903 waiting for monitor entry [0x0000000326ea5000]\n   java.lang.Thread.State: BLOCKED (on object monitor)\n\tat java.io.PrintStream.println(PrintStream.java:735)\n\t- waiting to lock &lt;0x00000007bce02720&gt; (a java.io.PrintStream)\n\tat learn.jvm.CPU.lambda$main$0(CPU.java:18)\n\tat learn.jvm.CPU$$Lambda$1/189568618.run(Unknown Source)\n\tat java.lang.Thread.run(Thread.java:748)\n\n\"Thread-496\" #507 prio=5 os_prio=31 tid=0x00007f88f589f800 nid=0x41a03 waiting for monitor entry [0x0000000326da2000]\n   java.lang.Thread.State: BLOCKED (on object monitor)\n\tat java.io.PrintStream.println(PrintStream.java:735)\n\t- waiting to lock &lt;0x00000007bce02720&gt; (a java.io.PrintStream)\n\tat learn.jvm.CPU.lambda$main$0(CPU.java:18)\n\tat learn.jvm.CPU$$Lambda$1/189568618.run(Unknown Source)\n\tat java.lang.Thread.run(Thread.java:748)\n\n\"Thread-495\" #506 prio=5 os_prio=31 tid=0x00007f8905034000 nid=0x41c03 waiting for monitor entry [0x0000000326c9f000]\n   java.lang.Thread.State: BLOCKED (on object monitor)\n\tat java.io.PrintStream.println(PrintStream.java:735)\n\t- waiting to lock &lt;0x00000007bce02720&gt; (a java.io.PrintStream)\n\tat learn.jvm.CPU.lambda$main$0(CPU.java:18)\n\tat learn.jvm.CPU$$Lambda$1/189568618.run(Unknown Source)\n\tat java.lang.Thread.run(Thread.java:748)\n</code></pre>\n<p>::: tip Arthas<br/> 当然如果你安装了 <code>Arthas</code></p>\n<p>你可以 <code>thread -n 3</code> 打印出最忙的三个线程 <a href=\"https://arthas.gitee.io/thread.html#cpu\">thread</a>.<br/> 直接输入cpu使用量</p>\n<p>thread -b, 找出当前阻塞其他线程的线程<br/> :::</p>\n<pre><code>\"Thread-8\" Id=19 cpuUsage=89.17% deltaTime=188ms time=17319ms RUNNABLE\n    at learn.jvm.CPU.lambda$main$0(CPU.java:13)\n    at learn.jvm.CPU$$Lambda$1/500977346.run(Unknown Source)\n    at java.lang.Thread.run(Thread.java:748)\n\n\n\"Thread-1\" Id=12 cpuUsage=85.62% deltaTime=180ms time=17296ms RUNNABLE\n    at learn.jvm.CPU.lambda$main$0(CPU.java:13)\n    at learn.jvm.CPU$$Lambda$1/500977346.run(Unknown Source)\n    at java.lang.Thread.run(Thread.java:748)\n\n\n\"Thread-3\" Id=14 cpuUsage=84.42% deltaTime=178ms time=17315ms RUNNABLE\n    at learn.jvm.CPU.lambda$main$0(CPU.java:13)\n    at learn.jvm.CPU$$Lambda$1/500977346.run(Unknown Source)\n    at java.lang.Thread.run(Thread.java:748)\n\n</code></pre>\n<h2><a id=\"33_OOM_276\"></a>3.3 非堆空间导致OOM</h2>\n<h3><a id=\"331__279\"></a>3.3.1 模拟异常</h3>\n<p>启动参数: <code>-XX:MetaspaceSize=120m -XX:MaxMetaspaceSize=120m -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:/Users/liuxin/Github/learn-example/logs/gc.log</code></p>\n<pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MetaspaceOverflowTest</span> <span class=\"token punctuation\">{<!-- --></span>\n\n    <span class=\"token comment\">/**\n     * 查看元空间配置\n     * java -XX:+PrintFlagsFinal -version | grep Metaspace\n     * 方法区是JVM规范。\n     * - 永久代和元空间是实现\n     * 元空间调优规则:\n     * 1. 最大最小设置成一样大\n     * 防止内存抖动\n     *\n     * @param args -XX:MetaspaceSize=20m\n     *             -XX:MaxMetaspaceSize=20m\n     *             java.lang.OutOfMemoryError--&gt;Metaspace\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token comment\">//        while (true) {<!-- --></span>\n            <span class=\"token class-name\">Sleeps</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token class-name\">Enhancer</span> enhancer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Enhancer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                enhancer<span class=\"token punctuation\">.</span><span class=\"token function\">setSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MetaspaceOverflowTest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                enhancer<span class=\"token punctuation\">.</span><span class=\"token function\">setUseCache</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                enhancer<span class=\"token punctuation\">.</span><span class=\"token function\">setCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MethodInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">intercept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> objects<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MethodProxy</span> methodProxy<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">return</span> methodProxy<span class=\"token punctuation\">.</span><span class=\"token function\">invokeSuper</span><span class=\"token punctuation\">(</span>objects<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"create InstanceKlass...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                enhancer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//        }</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//  java.lang.OutOfMemoryError--&gt;Metaspace</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"332__323\"></a>3.3.2 现象</h3>\n<p>当你收到运维告警,或者是明显感觉到系统吞吐量下降,甚至会有oom异常的时候,首先先去看下 GC日志，找到GC的原因。下面看下非堆空间溢出导致的GC日志,并配上前面的GC日志学习。来<br/> 排查下问题。</p>\n<pre><code>CommandLine flags: -XX:CompressedClassSpaceSize=12582912 -XX:InitialHeapSize=268435456 -XX:MaxHeapSize=4294967296 -XX:MaxMetaspaceSize=20971520 -XX:MetaspaceSize=20971520 -XX:+PrintGC -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseParallelGC \n2022-06-20T18:12:26.411-0800: 1.749: [GC (Allocation Failure) [PSYoungGen: 65536K-&gt;3006K(76288K)] 65536K-&gt;3006K(251392K), 0.0233877 secs] [Times: user=0.06 sys=0.02, real=0.02 secs] \n2022-06-20T18:12:26.960-0800: 2.298: [GC (Allocation Failure) [PSYoungGen: 68542K-&gt;3264K(141824K)] 68542K-&gt;3272K(316928K), 0.0194187 secs] [Times: user=0.08 sys=0.02, real=0.02 secs] \n2022-06-20T18:12:27.824-0800: 3.162: `[GC (Allocation Failure)` [PSYoungGen: 134336K-&gt;5264K(141824K)] 134344K-&gt;5280K(316928K), 0.0145565 secs] [Times: user=0.06 sys=0.02, real=0.01 secs] \n2022-06-20T18:12:28.526-0800: 3.864: [GC (Allocation Failure) [PSYoungGen: 136336K-&gt;6928K(272896K)] 136352K-&gt;6952K(448000K), 0.0198281 secs] [Times: user=0.09 sys=0.03, real=0.02 secs] \n2022-06-20T18:12:29.252-0800: 4.590: [GC (Metadata GC Threshold) [PSYoungGen: 187304K-&gt;8848K(272896K)] 187328K-&gt;8880K(448000K), 0.0217320 secs] [Times: user=0.10 sys=0.02, real=0.02 secs] \n2022-06-20T18:12:29.274-0800: 4.612: [Full GC (Metadata GC Threshold) [PSYoungGen: 8848K-&gt;0K(272896K)] [ParOldGen: 32K-&gt;8685K(86016K)] 8880K-&gt;8685K(358912K), [Metaspace: 20088K-&gt;20088K(1069056K)], 0.0245986 secs] [Times: user=0.10 sys=0.01, real=0.02 secs] \n2022-06-20T18:12:29.299-0800: 4.637: [GC (Last ditch collection) [PSYoungGen: 0K-&gt;0K(476160K)] 8685K-&gt;8685K(562176K), 0.0005319 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] \n2022-06-20T18:12:29.300-0800: 4.638: [Full GC (Last ditch collection) [PSYoungGen: 0K-&gt;0K(476160K)] [ParOldGen: 8685K-&gt;3731K(155648K)] 8685K-&gt;3731K(631808K), [Metaspace: 20088K-&gt;20088K(1069056K)], 0.0187273 secs] [Times: user=0.07 sys=0.01, real=0.01 secs] \n</code></pre>\n<p>从面的GC日志中我们能找到些GC原因,通过前面的学习。我们可以判断出来。</p>\n<p><img alt=\"\" src=\"..\\..\\static\\image\\1a84a00fa308f63c4233dc19536da721.png\"/></p>\n<p>属于非堆空间造成的OOM。</p>\n<h3><a id=\"333__346\"></a>3.3.3 解决方案</h3>\n<ol><li>排查看应用中是否有动态创建Class的地方</li><li>添加元空间大小(如果应用配置限制元空间大小,还出现了这样的问题,一般一定是程序中有bug导致)</li></ol>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Java", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 1, "sql": 0, "php": 0, "time": "2022-08-24 16:12:23", "summary": "作者西魏陶渊明博客天下代码一大抄抄来抄去有提高看你会抄不会抄！示例代码地址一、内存介绍我们在学习的内存管理的时候我们的思维要跳出的局限。我们要这么理解。我们写的代码，是运行在上的。如果让你来实现那么。"}