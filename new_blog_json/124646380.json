{"blogid": "124646380", "writerAge": "码龄1年", "writerBlogNum": "126", "writerCollect": "5826", "writerComment": "7325", "writerFan": "16749", "writerGrade": "7级", "writerIntegral": "15009", "writerName": "鹿九丸", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124646380.jpg", "writerRankTotal": "662", "writerRankWeekly": "1186", "writerThumb": "5702", "writerVisitNum": "235470", "blog_read_count": "1605", "blog_time": "于 2022-05-08 12:40:14 发布", "blog_title": "八大链表OJ笔试题带你手撕单链表", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/305388f6b3f6452d9dfedc496ce77911.gif\"/><br/> </p>\n<div class=\"toc\">\n<h3>八大链表OJ题带你手撕单链表</h3>\n<ul><li><a href=\"#1__2\">1. 移除链表元素</a></li><li><ul><li><a href=\"#_5\">方法一：（不带哨兵位的）</a></li><li><a href=\"#_59\">方法二：（带哨兵位的）</a></li></ul>\n</li><li><a href=\"#2__95\">2. 反转链表</a></li><li><ul><li><a href=\"#_101\">方法一：（三个指针反转方向）</a></li><li><a href=\"#_134\">方法二：（头插法）</a></li></ul>\n</li><li><a href=\"#3__161\">3. 链表的中间节点</a></li><li><a href=\"#4_k_191\">4. 链表中倒数第k个结点</a></li><li><a href=\"#5__229\">5. 合并两个有序链表</a></li><li><a href=\"#6__328\">6. 链表分割</a></li><li><ul><li><a href=\"#_334\">方法一：（带哨兵位的）</a></li><li><a href=\"#_373\">方法二：（不带哨兵位的）</a></li></ul>\n</li><li><a href=\"#7__454\">7. 链表的回文结构</a></li><li><a href=\"#8__513\">8. 相交链表</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"1__2\"></a>1. 移除链表元素</h1>\n<p><img alt=\"image-20220316211756510\" src=\"..\\..\\static\\image\\52f9ee8904b37dff798ea08a2f816967.png\"/></p>\n<h2><a id=\"_5\"></a>方法一：（不带哨兵位的）</h2>\n<p>代码：</p>\n<p>需要考虑的情况：</p>\n<blockquote>\n<ol><li>正常情况</li><li>链表连续几个节点存储的值都是val</li><li>链表最开始的节点存储的值是val</li></ol>\n</blockquote>\n<p>图示：</p>\n<p>正常情况：（经画图之后，正常情况能够处理链表中连续几个节点存储的值都是val的情况）</p>\n<p><img alt=\"image-20220316212452480\" src=\"..\\..\\static\\image\\7bfd33c8037d867a3dfe466ab25878e7.png\"/></p>\n<p>头节点存储值为val的情况：</p>\n<p><img alt=\"image-20220316213709353\" src=\"..\\..\\static\\image\\92756997f919ed9f18c441d4d953e539.png\"/></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> <span class=\"token function\">removeElements</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span>prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span>cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>val<span class=\"token operator\">==</span>val<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>prev<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                cur <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n                head <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                prev<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                cur <span class=\"token operator\">=</span> prev<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            \n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            prev <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_59\"></a>方法二：（带哨兵位的）</h2>\n<p>与前面一种方法进行相比，这种方法更为简单，操作起来难度较小并且代码更为简洁，不需要进行区分上面的三种情况。</p>\n<p><img alt=\"image-20220320160719091\" src=\"..\\..\\static\\image\\a2e1d7d6bf8766ac4685344ad09f9c9f.png\"/></p>\n<p>代码：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> <span class=\"token function\">removeElements</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span><span class=\"token comment\">//带哨兵位的</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span><span class=\"token keyword\">new</span> <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">new</span><span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span>prev <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span>cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>val<span class=\"token operator\">==</span>val<span class=\"token punctuation\">)</span><span class=\"token comment\">//需要删除的节点</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span>next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span><span class=\"token comment\">//next用来存放cur当前的地址，方便后面进行释放</span>\n            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n            prev<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span><span class=\"token comment\">//不需要删除的节点</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            prev <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span>tmp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span><span class=\"token comment\">//暂时存储需要返回的地址</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//把开辟的哨兵位的空间释放掉</span>\n    <span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"2__95\"></a>2. 反转链表</h1>\n<p><img alt=\"image-20220317222228625\" src=\"..\\..\\static\\image\\c792842b6e72f4e55bbd1a9edc075535.png\"/></p>\n<h2><a id=\"_101\"></a>方法一：（三个指针反转方向）</h2>\n<p>图示：</p>\n<p><strong>思路：逐个向后进行遍历，在遍历的同时将next指针的指向变为指向前一个指针，同时返回尾节点（反转后新链表的头节点）</strong></p>\n<p><img alt=\"image-20220318163943902\" src=\"..\\..\\static\\image\\4b4b3cbd3b90b13a67009d0e9bd94ac9.png\"/></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//当链表尾空时，返回的是空链表</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span>prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span>cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span>next <span class=\"token operator\">=</span> head<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            cur<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span>\n            prev <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n            cur <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span>\n                next <span class=\"token operator\">=</span> next<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> prev<span class=\"token punctuation\">;</span><span class=\"token comment\">//返回prev的原因是：当cur为空节点时，cur位于尾节点的下一个，而位于cur的前一个自然就是尾节点，即新的头节点</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_134\"></a>方法二：（头插法）</h2>\n<p><strong>思路：遍历上面的链表，把节点拿下来头插，但是不创建新的节点。</strong></p>\n<p>图示：</p>\n<p><img alt=\"image-20220318172028827\" src=\"..\\..\\static\\image\\23890f180ec7d44f75dc9f89a3a3464f.png\"/></p>\n<p><strong>注意：此处并没有创建新的节点，其实从本质上来说和上面没有大的区别，只是思想有所差别。</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span>newHead <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span>cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span>next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        cur<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> newHead<span class=\"token punctuation\">;</span>\n        newHead <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n        cur <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> newHead<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"3__161\"></a>3. 链表的中间节点</h1>\n<p><img alt=\"image-20220318172327618\" src=\"..\\..\\static\\image\\6a4b6df86d98b91e885bd1c58899cd78.png\"/></p>\n<p>思路：</p>\n<blockquote>\n<p>使用两个指针，然后使用两个指针进行遍历，快指针一次跳跃两个节点，慢指针一次跳跃一个节点，当快指针遍历完整个数组的时候，慢指针所处的位置就是中间节点所处的位置。</p>\n</blockquote>\n<p>图示：</p>\n<p><img alt=\"image-20220318203744017\" src=\"..\\..\\static\\image\\1e272566bd113117df3fe9a797f9f35e.png\"/></p>\n<p>代码：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> <span class=\"token function\">middleNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span>slow <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span><span class=\"token comment\">//慢节点</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span>fast <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span><span class=\"token comment\">//快节点</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>fast<span class=\"token operator\">&amp;&amp;</span>fast<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        fast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        slow <span class=\"token operator\">=</span> slow<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> slow<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>注意：fast和fast-&gt;next是不可以进行互换的，因为只有当fast为空的时候就不可能执行到fast-&gt;next，所以也就不会出现对空指针进行解引用的情况，一旦互换之后，就可能出现对空指针进行解引用的情况。</p>\n</blockquote>\n<h1><a id=\"4_k_191\"></a>4. 链表中倒数第k个结点</h1>\n<p><img alt=\"image-20220318204407618\" src=\"..\\..\\static\\image\\9148b10e7d73e4ba961dc3728fdf4e2c.png\"/></p>\n<blockquote>\n<p>思路：其实这个与前面的寻找链表的中间节点相类似，也是使用快慢指针的方法，使快指针先走k个节点，当快指针走到空指针的位置的时候，慢指针所停留的位置就是我们想要找到的节点。</p>\n</blockquote>\n<p>代码：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> <span class=\"token function\">FindKthToTail</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> pListHead<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k <span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span>fast <span class=\"token operator\">=</span> pListHead<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span>slow <span class=\"token operator\">=</span> pListHead<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fast<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//当k大于链表的长度时返回空指针NULL</span>\n        fast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n        \n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>fast<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        fast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        slow <span class=\"token operator\">=</span> slow<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> slow<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>注意：</p>\n<p>注意下面的两种情况：</p>\n<ol><li><strong>当k大于链表的长度的时候</strong></li><li><strong>当链表为空链表的时候</strong></li></ol>\n<p>上面的这两种情况，都是通过if判断来进行解决的。</p>\n<h1><a id=\"5__229\"></a>5. 合并两个有序链表</h1>\n<p><img alt=\"image-20220318221212797\" src=\"..\\..\\static\\image\\78ee134f540112cac1cbe239bd509205.png\"/></p>\n<p>思路：</p>\n<p><img alt=\"image-20220318221749843\" src=\"..\\..\\static\\image\\2b3f6939b951a2bced49a25e4fc75860.png\"/></p>\n<p>代码：（这是不带哨兵位的）</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> list1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> list2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list1<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> list2<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list2<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> list1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span>tail <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span>head <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>list1<span class=\"token operator\">&amp;&amp;</span>list2<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list1<span class=\"token operator\">-&gt;</span>val<span class=\"token operator\">&lt;</span>list2<span class=\"token operator\">-&gt;</span>val<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tail<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n                head <span class=\"token operator\">=</span> tail <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                tail<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">;</span>\n                tail <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            list1 <span class=\"token operator\">=</span> list1<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tail<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n                head <span class=\"token operator\">=</span> tail <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                tail<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">;</span>\n                tail <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            list2 <span class=\"token operator\">=</span> list2<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        tail<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        tail<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>（带哨兵位的）</p>\n<p>图示：</p>\n<p><img alt=\"image-20220318225717533\" src=\"..\\..\\static\\image\\21dd267daf3659d90e4aef2a60ca615f.png\"/></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> list1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> list2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span>tail <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span>head <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">;</span>\n    head<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>list1<span class=\"token operator\">&amp;&amp;</span>list2<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list1<span class=\"token operator\">-&gt;</span>val<span class=\"token operator\">&lt;</span>list2<span class=\"token operator\">-&gt;</span>val<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            tail<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">;</span>\n            tail <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">;</span>\n            list1 <span class=\"token operator\">=</span> list1<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            tail<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">;</span>\n            tail <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">;</span>\n            list2 <span class=\"token operator\">=</span> list2<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        tail<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        tail<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> head<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"6__328\"></a>6. 链表分割</h1>\n<p><img alt=\"image-20220318221836381\" src=\"..\\..\\static\\image\\65c6739c41326cf726b8fbaef82dc750.png\"/></p>\n<blockquote>\n<p>思路：对原链表进行遍历，然后将小于x的形成一个链表，大于x的形成一个链表，然后将两个链表连接起来就是我们要返回的新链表。</p>\n</blockquote>\n<h2><a id=\"_334\"></a>方法一：（带哨兵位的）</h2>\n<p>图示：</p>\n<p><img alt=\"image-20220319164223206\" src=\"..\\..\\static\\image\\2ddd227d55962baed824cc4c80e70477.png\"/></p>\n<p>代码：</p>\n<pre><code class=\"prism language-cpp\">ListNode<span class=\"token operator\">*</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> pHead<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> lessTail <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//作为结尾</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> lessHead <span class=\"token operator\">=</span> lessTail<span class=\"token punctuation\">;</span><span class=\"token comment\">//指向新的节点存储元素的值均比x小的链表</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> greaterTail <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//作为结尾</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> greaterHead <span class=\"token operator\">=</span> greaterTail<span class=\"token punctuation\">;</span><span class=\"token comment\">//指向新的节点存储元素的值均比x大或者等于的链表</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> pHead<span class=\"token punctuation\">;</span><span class=\"token comment\">//用来遍历所给链表的指针</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token comment\">//判断所给链表遍历是否终止</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>val <span class=\"token operator\">&lt;</span> x<span class=\"token punctuation\">)</span><span class=\"token comment\">//连接比x小的链表节点</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            lessTail<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n            lessTail <span class=\"token operator\">=</span> lessTail<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span><span class=\"token comment\">//连接大于或者等于x的链表节点</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            greaterTail<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n            greaterTail <span class=\"token operator\">=</span> greaterTail<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    lessTail<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> greaterHead<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span><span class=\"token comment\">//连接两个链表形成最后的结果链表</span>\n    greaterTail<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将最后一个节点的next置为空</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> list <span class=\"token operator\">=</span> lessHead<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span><span class=\"token comment\">//存储返回值，方便free掉开辟的空间</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>lessHead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>greaterHead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_373\"></a>方法二：（不带哨兵位的）</h2>\n<p>图示：</p>\n<p>1、正常情况：</p>\n<p><img alt=\"image-20220320220752401\" src=\"..\\..\\static\\image\\ba64a9c5ff93f764245186c9e9d35560.png\"/></p>\n<p>2、当存储比x小的链表为空时</p>\n<p><img alt=\"image-20220320221827905\" src=\"..\\..\\static\\image\\58e40d18c51a34bfd04f341071f9ccc2.png\"/></p>\n<p>3、当存储大于x的链表为空时</p>\n<p><img alt=\"image-20220320221958060\" src=\"..\\..\\static\\image\\65dfe85d1f91fd8b649c89670af0e0fa.png\"/></p>\n<p>代码：</p>\n<pre><code class=\"prism language-cpp\">ListNode<span class=\"token operator\">*</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> pHead<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> lessHead <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> lessTail <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> greaterHead <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> greaterTail <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> pHead<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-&gt;</span>val <span class=\"token operator\">&lt;</span> x<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lessHead <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tlessTail <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t\tlessHead <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tlessTail<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t\tlessTail <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>greaterHead <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tgreaterTail <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t\tgreaterHead <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\tgreaterTail<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t\tgreaterTail <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//应当有三种情况</span>\n\t<span class=\"token comment\">//1、存储小于x的链表为空，存储大于x的链表不为空</span>\n\t<span class=\"token comment\">//2、存储小于x的链表不为空，存储大于x的链表为空</span>\n\t<span class=\"token comment\">//3、存储小于x和存储小于x的链表均不为空</span>\n\t<span class=\"token comment\">//后面的两种方法是可以合并的，因为都要进行两个链表的连接，无论存储大于x的链表是否为空，都不影响最后的结果</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lessTail <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//判断是否是没有小于x的数据，如果是这种情况，那么就返回存储大于x数据的链表</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> greaterHead<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\tlessTail<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> greaterHead<span class=\"token punctuation\">;</span><span class=\"token comment\">//将两个链表进行连接</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>greaterHead <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tgreaterTail<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将存储大于x的数据的最后一个节点的next置为空指针</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//为什么要进行判定，因为如果直接执行greaterTail-&gt;next = NULL属于非法操作，因为当greaterHead等于NULL时，greaterTail也是空指针，执行这行代码就属于对空指针的解引用，属于非法操作</span>\n\t<span class=\"token keyword\">return</span> lessHead<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"7__454\"></a>7. 链表的回文结构</h1>\n<p><img alt=\"image-20220319172341247\" src=\"..\\..\\static\\image\\3d8a3e2c0bc88ebb3d4d66c3231102eb.png\"/></p>\n<p>思路：(偶数个节点一定不会出现问题，很容易就能想到)</p>\n<p><img alt=\"image-20220319175715082\" src=\"..\\..\\static\\image\\1c80b832ccca9fffd430f3dc605f8165.png\"/></p>\n<p>代码：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> <span class=\"token function\">middleNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span><span class=\"token comment\">//求中间节点</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> slow <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span><span class=\"token comment\">//慢节点</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> fast <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span><span class=\"token comment\">//快节点</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">&amp;&amp;</span> fast<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\tfast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t\tslow <span class=\"token operator\">=</span> slow<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> slow<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span><span class=\"token comment\">//反转链表</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//当链表尾空时，返回的是空链表</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> head<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t\tcur<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span>\n\t\t\tprev <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\t\t\tcur <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span>\n\t\t\t\tnext <span class=\"token operator\">=</span> next<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> prev<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">chkPalindrome</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> mid <span class=\"token operator\">=</span> <span class=\"token function\">middleNode</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//记录中间节点</span>\n\tmid <span class=\"token operator\">=</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将反转后的新的节点的起始位置赋值给mid</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span><span class=\"token comment\">//用来从头遍历链表</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">&amp;&amp;</span> mid<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head<span class=\"token operator\">-&gt;</span>val <span class=\"token operator\">!=</span> mid<span class=\"token operator\">-&gt;</span>val<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\thead <span class=\"token operator\">=</span> head<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t\tmid <span class=\"token operator\">=</span> mid<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token comment\">//此处是C++的，true代表1，false代表0</span>\n</code></pre>\n<h1><a id=\"8__513\"></a>8. 相交链表</h1>\n<p><img alt=\"image-20220319210014959\" src=\"..\\..\\static\\image\\dd0c2d794f334930882b14c9813c8f4b.png\"/></p>\n<p>思路：</p>\n<blockquote>\n<p>第一种方法（不推荐）：用listA的每一个节点和listB的每一个节点的地址进行遍历比较，既能判断出是否相交，同时也能找到相交的节点。</p>\n</blockquote>\n<blockquote>\n<p>第二种方法：先从头找到尾对两个节点同时进行遍历，同时记录两个链表各自的节点数，最后将尾节点进行比较，如果尾节点相同，说明有相交节点，如果不相同，就说明没有相交节点，同时计算出两个链表节点数目的差值，然后使用快慢指针的方法，让较长的链表先走差值步，然后再同时走，两个指针相同的那个点就是我们要求的两个链表相加的点。</p>\n</blockquote>\n<p>图示：</p>\n<p><img alt=\"image-20220319212923578\" src=\"..\\..\\static\\image\\7f5c9954452e81b8b393dcbe9f45c06f.png\"/></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span> <span class=\"token operator\">*</span><span class=\"token function\">getIntersectionNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span> <span class=\"token operator\">*</span>headA<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span> <span class=\"token operator\">*</span>headB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span>tailA <span class=\"token operator\">=</span> headA<span class=\"token punctuation\">;</span><span class=\"token comment\">//记录链表A的尾节点</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span>tailB <span class=\"token operator\">=</span> headB<span class=\"token punctuation\">;</span><span class=\"token comment\">//记录链表B的尾节点</span>\n    <span class=\"token keyword\">int</span> lenA <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//记录链表A的长度</span>\n    <span class=\"token keyword\">int</span> lenB <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//记录链表B的长度</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>tailA<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        tailA <span class=\"token operator\">=</span> tailA<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        lenA<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>tailB<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        tailB <span class=\"token operator\">=</span> tailB<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        lenB<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tailA<span class=\"token operator\">!=</span>tailB<span class=\"token punctuation\">)</span><span class=\"token comment\">//尾节点不等，所以直接返回NULL</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//相交，求节点，长的先走差距步，再同时走找交点</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span>shortList <span class=\"token operator\">=</span> headA<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>longList <span class=\"token operator\">=</span> headB<span class=\"token punctuation\">;</span><span class=\"token comment\">//默认B是较长节点的链表，A是较短的</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>lenA<span class=\"token operator\">&gt;</span>lenB<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        longList <span class=\"token operator\">=</span> headA<span class=\"token punctuation\">;</span>\n        shortList <span class=\"token operator\">=</span> headB<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> gap <span class=\"token operator\">=</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>lenA <span class=\"token operator\">-</span> lenB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//gap存储的是节点数的差值</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>gap<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        longList <span class=\"token operator\">=</span> longList<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span><span class=\"token comment\">//节点数多的先走gap步</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>longList<span class=\"token operator\">!=</span>shortList<span class=\"token punctuation\">)</span><span class=\"token comment\">//两者同时开始进行遍历，在交点处停下</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        longList <span class=\"token operator\">=</span> longList<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n        shortList <span class=\"token operator\">=</span> shortList<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> longList<span class=\"token punctuation\">;</span><span class=\"token comment\">//随便返回一个就行，因为两个都是交点</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-05-08 12:40:14", "summary": "在这里插入图片描述八大链表题带你手撕单链表移除链表元素方法一：不带哨兵位的方法二：带哨兵位的反转链表方法一：三个指针反转方向方法二：头插法链表的中间节点链表中倒数第个结点合并两个有序链表链表分割方法一"}