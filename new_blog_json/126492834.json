{"blogid": "126492834", "writerAge": "码龄1年", "writerBlogNum": "21", "writerCollect": "309", "writerComment": "380", "writerFan": "505", "writerGrade": "4级", "writerIntegral": "944", "writerName": "夜猫徐", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126492834.jpg", "writerRankTotal": "19744", "writerRankWeekly": "171", "writerThumb": "278", "writerVisitNum": "7230", "blog_read_count": "1018", "blog_time": "已于 2022-09-02 14:59:47 修改", "blog_title": "猿创征文 |【C++】C向C++知识的过度(下)", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul><li><a href=\"#_1\">前言</a></li><li><a href=\"#CC_3\">一、C与C++中的&amp;取址符</a></li><li><ul><li><a href=\"#11_C_4\">1.1 C中的&amp;取址符回顾与拓展</a></li><li><a href=\"#12_C_23\">1.2 C++中的&amp;取址符</a></li></ul>\n</li><li><a href=\"#CCconst_53\">二、C与C++中的const修饰符</a></li><li><ul><li><a href=\"#21_Cconst_54\">2.1 C中的const修饰符回顾与拓展</a></li><li><a href=\"#22_Cconst_102\">2.2 C++中const的用法</a></li></ul>\n</li><li><a href=\"#C_151\">三、C++中内联函数</a></li><li><ul><li><a href=\"#31_C_154\">3.1 C中宏函数</a></li><li><a href=\"#32_C_inline_167\">3.2 C++中的内联函数 inline</a></li><li><a href=\"#33_C_193\">3.3 C++中内联函数和带参宏有什么区别？</a></li></ul>\n</li><li><a href=\"#C_196\">四、C++中函数的默认参数</a></li><li><a href=\"#C_225\">五、C++中函数重载机制</a></li><li><a href=\"#_287\">六、哑元</a></li></ul>\n</div>\n<p></p>\n<h1><a id=\"_1\"></a>前言</h1>\n<p><em><strong>承接上文<a href=\"http://t.csdn.cn/qk6cd\">C向C++知识的过度(上)</a>感兴趣可以了解一下。</strong></em></p>\n<h1><a id=\"CC_3\"></a>一、C与C++中的&amp;取址符</h1>\n<h2><a id=\"11_C_4\"></a>1.1 C中的&amp;取址符回顾与拓展</h2>\n<p>普通用法：p指针变量保存了a变量的地址。</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>一维数组与指针的用法：</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> parr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>数组指针用法：如果是数组指针移动+1 移动整个数组的大小。</p>\n<pre><code class=\"prism language-c\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> parr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>函数指针用法：my_func前面的&amp;可有可无。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\dceb791bbd1d4e9abf21c6cd2f390f1e.png\"/></p>\n<h2><a id=\"12_C_23\"></a>1.2 C++中的&amp;取址符</h2>\n<p>在C++面向对象中，我们多一种函数，叫做<strong>成员函数</strong>。<br/> 成员函数指针的调用与成员函数的调用是一样，也是依赖于结构体对象（变量）的调用。</p>\n<p>使用成员函数指针，调用成员函数的方法如下：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stu</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    string name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">write_code</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"正在努力地写代码\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>Stu<span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">*</span>pfun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Stu<span class=\"token double-colon punctuation\">::</span>write_code<span class=\"token punctuation\">;</span>\n    Stu stu<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>pfun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&amp;在成员函数中，取址的方式的用法。指向此函数地址的函数指针。<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\4d3ef4bf1e74435694e62abf08cc61a6.png\"/></p>\n<h1><a id=\"CCconst_53\"></a>二、C与C++中的const修饰符</h1>\n<h2><a id=\"21_Cconst_54\"></a>2.1 C中的const修饰符回顾与拓展</h2>\n<p>const修饰的变量叫做<strong>只读变量</strong>。这个变量的值是不可以修改的。<br/> 但是它终究还是个变量。</p>\n<p>const在C的一些用法：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//a = 100;错误的，不能通过只读变量修改变量中的值。</span>\n\n\t<span class=\"token comment\">//在C中const修饰的这种只读变量，是可以通过指针的方式进行修改的。</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \\n\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//打印10000</span>\n    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//不能做为定义数组的长度使用。</span>\n    <span class=\"token comment\">//这种使用只读变量去定义数组的方式是错误的。</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>const关于指针用法回顾：</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span> \n    <span class=\"token comment\">//const修饰是谁? int* 这个指针的类型。</span>\n    <span class=\"token comment\">//指针有三种属性：读操作，写操作，移动</span>\n    <span class=\"token comment\">//*p = 1000;//*操作就没有写的属性，所以不可以通过*的方式向内存写数据。</span>\n    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span>\n    p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">;</span><span class=\"token comment\">//这种方法是可以实现的</span>\n    \n    <span class=\"token keyword\">int</span> <span class=\"token keyword\">const</span><span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">//修饰的int*,与上面的效果是一样的。</span>\n    <span class=\"token comment\">//*p1 = 1000;这是错误的。</span>\n    \n    <span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> p2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">;</span><span class=\"token comment\">//此时const修饰的是p2,p2是指针变量。</span>\n    <span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//p2中保存这个地址是不可以改变。</span>\n    <span class=\"token comment\">//p2 = &amp;a;//这是不对的。            </span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"22_Cconst_102\"></a>2.2 C++中const的用法</h2>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAX</span> <span class=\"token expression\"><span class=\"token number\">1024</span></span></span>\n</code></pre>\n<p>官方推荐 <strong>当定义宏时在C++中推荐const修饰的方式来替换宏定义。</strong></p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> my_max <span class=\"token operator\">=</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>使用这种方式更加安全可靠。<br/> 因为C++是面向大型程序的，所以要更严谨一些。</p>\n<p>C++中的const修饰符：</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span><span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\c620c31e6bfc4dbeac54718ebaaf1ac3.png\"/><br/> <mark>为什么在C++中a还是10，并没有被改变呢？</mark><br/> 这与我们的C++编译器优化有关。</p>\n<p>这个a的10，在再次使用的时候，编译器没有从这个地址中去取值。<br/> 当const修饰这个变量如果是一个<strong>立即数时</strong>，编译器会把这个值直接放在寄存器中，在程序中如果出现a这个变量时，编译器直接把a以一个立即数的方式直接替换。我们的编译器是直接从寄存器上取的值。</p>\n<p>我们把这个const修饰的变量承接是立即数的变量，也叫做符号常量。他在使用时，编译器是直接在寄存器中取这个值。</p>\n<p><strong>意义</strong>：程序的运行的高效性。</p>\n<p>如果想要获取a中的值的话，就让编译器老老实实去a的址中去取址，使用volatile进行修饰，或者以下面这种方式</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">//只读变量</span>\n</code></pre>\n<p>当const修饰的变量承接的立即数时，就可以完全视之为一个常量使用。</p>\n<h1><a id=\"C_151\"></a>三、C++中内联函数</h1>\n<p>C++内联函数就是用来提高代码运行效率的，主要用于<strong>继承C中宏函数的高效的特性，同时又避免宏函数所出现的莫名的Bug</strong>。<br/> 但也是有代价的，因为他是直接展开，所以最终会造成可执行程序的代码的膨胀。</p>\n<h2><a id=\"31_C_154\"></a>3.1 C中宏函数</h2>\n<p>以下MAX(a,b)就是一个宏函数</p>\n<pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">MAX</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span> a<span class=\"token operator\">&gt;</span>b<span class=\"token operator\">?</span>a<span class=\"token operator\">:</span>b</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> y<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"32_C_inline_167\"></a>3.2 C++中的内联函数 inline</h2>\n<p>函数定义前加<code>inline</code>，就是说建议编译器把这个函数进行内联。<br/> 内联函数既保障了代码运行的高效性，同时也避免了宏函数Bug的存在。<br/> 但是内联函数是有<strong>代价</strong>的：<br/> 只能使用代码简短的，且没有循环，没有耗时操作的函数才可以内联，内联函数不可以有递归。<br/> <strong>内联函数的代价：最终可执行代码的膨胀。</strong></p>\n<p>普通函数的调用过程：<br/> 调用完之后，就不存在了，所以最终的可执行程序的代码量不会膨胀。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> a<span class=\"token operator\">&gt;</span>b<span class=\"token operator\">?</span>a<span class=\"token operator\">:</span>b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"33_C_193\"></a>3.3 C++中内联函数和带参宏有什么区别？</h2>\n<ol><li>宏定义的替换是在预处理阶段完成的，内联函数是在编译阶段完成的；</li><li>内联函数也是函数，和函数的使用方式一样，也会做类型的检查，而宏定义只是能完成简单的替换。</li></ol>\n<h1><a id=\"C_196\"></a>四、C++中函数的默认参数</h1>\n<p>C++函数的参数是可以设定默认值，设定默认值的方式被认为是C++函数使用的一种灵活性的体现。</p>\n<ol><li>C语言中函数的形参的值必须由实参传递过来，而C++中可以给函数的形参一个默认值，<br/> 如果有默认值了，实参传了，就用实参的值。<br/> 实参没传，就用默认值。</li><li>因为函数传参遵循的靠左原则，所以给定默认参数时要遵循靠右原则，否则有歧义，会报错。<br/> 函数参数的入栈过程是依次从右往左进行的，所以函数的默认参数在设定时也要从右往左依次设定，不能跳跃。</li><li>默认参数只能写在函数声明处，不能写在定义处。因为函数调用时，优先看到的是声明。</li></ol>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token operator\">+</span>c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//输出40</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>结果展示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\2498406da5da4e7180d720c1a0646d3c.png\"/></p>\n<h1><a id=\"C_225\"></a>五、C++中函数重载机制</h1>\n<p><strong>第一种静态多态的机制</strong><br/> 多态：即同名函数实现的不同的形式（执行不同的逻辑）<br/> 在C中是没有函数重载，当函数逻辑类似，但参数不同时就得不断的去找一些合适的函数名去定义。<br/> 函数重载，支持定义重名的函数。</p>\n<p><strong>C++函数重载：是根制函数参数中的参数类型，参数顺序，参数个数的不同，调用与之匹配的函数。</strong><br/> <strong>与返回值是没有关系。</strong><br/> 重载函数的调用会根据类型的不同，自动推导该调用那个版本的函数。</p>\n<p>编译器在编译的过程中，其实已经根据类型不同生成了不同名字的函数，只不过在C++层面上看到的名字是相同的。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token operator\">+</span>c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//结果是30</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//结果是60</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>结果展示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\273775164d1c433fb02cd14c3c9a1b21.png\"/></p>\n<p><mark>注：</mark><br/> 一定要注意不要出现下面的用法，有歧义会报错</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token operator\">+</span>c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//cout &lt;&lt; add(a,b) &lt;&lt; endl;</span>\n    <span class=\"token comment\">//有歧义会报错</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1><a id=\"_287\"></a>六、哑元</h1>\n<p>在定义函数的时候，某个或某几个参数只有类型，没有参数名这个类型只起到一个占位的作用。<br/> 哑元一般在代码升级的过程中可能会用到。<br/> 如原本函数的实现需要3个参数，升级后发现只有两个就够了，此时只需要修改函数的定义，将不用的那个参数改成哑元就无须修改函数调用处了。<br/> <strong>注意：虽然支持，但是一般不这样使用。</strong><br/> 哑元的必须使用处：自增、自减运算符重载的时候，会用到哑元占位。</p>\n<pre><code class=\"prism language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//输出40</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>结果展示：<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\b2bb51fb913a416cb0d37290e5ef1ef1.png\"/></p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "C++", "cpp": 1, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-09-02 14:59:47", "summary": "文章目录前言一、与中的取址符中的取址符回顾与拓展中的取址符二、与中的修饰符中的修饰符回顾与拓展中的用法三、中内联函数中宏函数中的内联函数中内联函数和带参宏有什么区别？四、中函数的默认参数五、中函数重载"}