{"blogid": "126600003", "writerAge": "码龄2年", "writerBlogNum": "112", "writerCollect": "2413", "writerComment": "2963", "writerFan": "8286", "writerGrade": "6级", "writerIntegral": "6466", "writerName": "卡卡西最近怎么样", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126600003.jpg", "writerRankTotal": "2334", "writerRankWeekly": "170", "writerThumb": "3141", "writerVisitNum": "123367", "blog_read_count": "982", "blog_time": "于 2022-08-30 14:02:16 发布", "blog_title": "【JavaScript 进阶教程】函数的定义 调用 及 this指向问题", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p><img alt=\"\" height=\"289\" src=\"..\\..\\static\\image\\e4c52eff666348adacf4de43c45525a2.png\" width=\"1200\"/></p>\n<blockquote>\n<p><span style=\"color:#333333;\">这篇文章开始我们函数的进阶篇，和我们JavaScript基础学的函数有了很多拓展，这篇文章首先我们从函数的定义，调用，及其 this指向 来一个总结。</span> </p>\n<p><img alt=\"\" height=\"763\" src=\"..\\..\\static\\image\\1dce9d29e68544fc8e85f9530a96554f.png\" width=\"1125\"/></p>\n</blockquote>\n<h2 id=\"main-toc\"><span style=\"color:#333333;\">文章目录：</span></h2>\n<p id=\"%E4%B8%80%EF%BC%9A%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89%C2%A0-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%EF%BC%9A%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89%C2%A0\"><span style=\"color:#4da8ee;\">一：函数的定义 </span></a></p>\n<p id=\"1.1%20%E5%91%BD%E5%90%8D%E5%87%BD%E6%95%B0%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#1.1%20%E5%91%BD%E5%90%8D%E5%87%BD%E6%95%B0%C2%A0\"><span style=\"color:#4da8ee;\">1.1 命名函数 </span></a></p>\n<p id=\"1.2%C2%A0%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#1.2%C2%A0%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%C2%A0\"><span style=\"color:#4da8ee;\">1.2 匿名函数 </span></a></p>\n<p id=\"1.3%C2%A0%E5%88%A9%E7%94%A8%20new%20Function()%20%E5%A3%B0%E6%98%8E%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:40px;\"><a href=\"#1.3%C2%A0%E5%88%A9%E7%94%A8%20new%20Function%28%29%20%E5%A3%B0%E6%98%8E%E5%87%BD%E6%95%B0\"><span style=\"color:#4da8ee;\">1.3 利用 new Function() 声明函数</span></a></p>\n<p id=\"1.4%20%E9%87%8D%E8%A6%81%E7%BB%93%E8%AE%BA-toc\" style=\"margin-left:40px;\"><a href=\"#1.4%20%E9%87%8D%E8%A6%81%E7%BB%93%E8%AE%BA\"><span style=\"color:#4da8ee;\">1.4 重要结论</span></a></p>\n<p id=\"%C2%A0%E4%BA%8C%EF%BC%9A%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0%E4%BA%8C%EF%BC%9A%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8\"><span style=\"color:#4da8ee;\"> 二：函数的调用</span></a></p>\n<p id=\"2.1%C2%A0%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8-toc\" style=\"margin-left:40px;\"><a href=\"#2.1%C2%A0%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8\"><span style=\"color:#4da8ee;\">2.1 普通函数调用</span></a></p>\n<p id=\"2.2%C2%A0%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8-toc\" style=\"margin-left:40px;\"><a href=\"#2.2%C2%A0%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8\"><span style=\"color:#4da8ee;\">2.2 立即执行函数调用</span></a></p>\n<p id=\"2.3%C2%A0%E5%AF%B9%E8%B1%A1%E5%86%85%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8-toc\" style=\"margin-left:40px;\"><a href=\"#2.3%C2%A0%E5%AF%B9%E8%B1%A1%E5%86%85%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8\"><span style=\"color:#4da8ee;\">2.3 对象内方法调用</span></a></p>\n<p id=\"2.4%C2%A0%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8-toc\" style=\"margin-left:40px;\"><a href=\"#2.4%C2%A0%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8\"><span style=\"color:#4da8ee;\">2.4 构造函数调用</span></a></p>\n<p id=\"2.5%20%E4%BA%8B%E4%BB%B6%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8-toc\" style=\"margin-left:40px;\"><a href=\"#2.5%20%E4%BA%8B%E4%BB%B6%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8\"><span style=\"color:#4da8ee;\">2.5 事件函数的调用</span></a></p>\n<p id=\"2.6%C2%A0%E5%AE%9A%E6%97%B6%E5%99%A8%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8-toc\" style=\"margin-left:40px;\"><a href=\"#2.6%C2%A0%E5%AE%9A%E6%97%B6%E5%99%A8%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8\"><span style=\"color:#4da8ee;\">2.6 定时器函数的调用</span></a></p>\n<p id=\"%C2%A0%E4%B8%89%EF%BC%9A%E5%90%84%E4%B8%AA%E5%87%BD%E6%95%B0%E7%9A%84%E5%86%85%E9%83%A8this%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98-toc\" style=\"margin-left:0px;\"><a href=\"#%C2%A0%E4%B8%89%EF%BC%9A%E5%90%84%E4%B8%AA%E5%87%BD%E6%95%B0%E7%9A%84%E5%86%85%E9%83%A8this%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98\"><span style=\"color:#4da8ee;\"> 三：各个函数的内部this指向问题</span></a></p>\n<hr id=\"hr-toc\"/>\n<h1><span style=\"color:#4da8ee;\">一：函数的定义 </span></h1>\n<blockquote>\n<p>函数的定义共三种方式：1.命名函数，2.匿名函数，3.利用 new Function() 来创建。</p>\n</blockquote>\n<h2 id=\"1.1%20%E5%91%BD%E5%90%8D%E5%87%BD%E6%95%B0%C2%A0\"><span style=\"color:#b95514;\">1.1 命名函数 </span></h2>\n<blockquote>\n<p>命名函数就是我们最常见的声明函数的方式，也叫做自定义函数</p>\n</blockquote>\n<pre><code class=\"language-javascript\">    &lt;script&gt;\n        function fn(){\n            console.log('我是命名函数');\n        }\n        fn()\n    &lt;/script&gt;</code></pre>\n<p> <img alt=\"\" height=\"137\" src=\"..\\..\\static\\image\\6acc5e03ec1a4a04a89ea07ff8db7b4c.png\" width=\"517\"/></p>\n<hr/>\n<h2 id=\"1.2%C2%A0%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%C2%A0\"><span style=\"color:#b95514;\">1.2 匿名函数 </span></h2>\n<blockquote>\n<p>匿名函数即没有名字的函数，匿名函数的调用需要使用<strong>立即执行函数</strong>，绑定事件时使用的也是匿名函数</p>\n</blockquote>\n<pre><code class=\"language-javascript\">    &lt;script&gt;\n    //立即执行函数来调用匿名函数\n       (function(a,b){     \n           console.log(a+b);\n       })(1,2)\n\n    //绑定事件来使用匿名函数\n       var div1=document.querySelector('div')\n       div1.addEventListener('click',function(){\n         console.log('我是绑定事件使用的匿名函数');\n       })\n    &lt;/script&gt;\n</code></pre>\n<p><img alt=\"\" height=\"122\" src=\"..\\..\\static\\image\\6e61eca82763472dae1f89a57da83bae.png\" width=\"724\"/></p>\n<hr/>\n<h2 id=\"1.3%C2%A0%E5%88%A9%E7%94%A8%20new%20Function()%20%E5%A3%B0%E6%98%8E%E5%87%BD%E6%95%B0\"><span style=\"color:#b95514;\">1.3 利用 new Function() 声明函数</span></h2>\n<blockquote>\n<p>还有一种不常见的函数声明方法是 new Function()，这个办法我们知道是个构造函数。但是由于这种方式比较繁琐麻烦，并且如果执行函数还需要转化语言格式为可识别的脚本语言，因此不使用这种方式声明函数，只需要知道 <span style=\"color:#ad720d;\"><strong>所有的函数都是Function构造函数的实例化对象（后面结论会说）</strong></span></p>\n<hr/>\n<p><span style=\"color:#333333;\"><strong>参数格式为：</strong></span></p>\n<ul><li><span style=\"color:#1c7331;\"><strong>new Function(‘参数一’，‘参数二’，‘参数三’，...... ，‘函数体)</strong></span></li></ul>\n<p><strong><span style=\"color:#be191c;\">（注意参数全部为字符串形式）</span></strong></p>\n</blockquote>\n<pre><code class=\"language-javascript\">    &lt;script&gt;\n         var fn=new Function('a','b','console.log(a+b)')\n         fn(2,3)\n    &lt;/script&gt;</code></pre>\n<p><img alt=\"\" height=\"115\" src=\"..\\..\\static\\image\\6e225dbfe7e44fad92516d69f4987ff3.png\" width=\"731\"/></p>\n<hr/>\n<h2 id=\"1.4%20%E9%87%8D%E8%A6%81%E7%BB%93%E8%AE%BA\"><span style=\"color:#b95514;\">1.4 重要结论</span></h2>\n<blockquote>\n<p><span style=\"color:#333333;\">通过刚才的第三种函数的声明方法，是个构造函数，我们会想到什么，为什么函数也有构造函数，难道函数也是对象吗？是的那我们接下来验证一下</span></p>\n</blockquote>\n<pre><code class=\"language-javascript\">    &lt;script&gt;\n         var fn=new Function('a','b','console.log(a+b)')\n         fn(1,3)\n         console.dir(fn instanceof Object)\n    &lt;/script&gt;</code></pre>\n<p> <img alt=\"\" height=\"137\" src=\"..\\..\\static\\image\\113ce5eb9330416e9c14c2d5dd727ee4.png\" width=\"530\"/></p>\n<blockquote>\n<p><strong><span style=\"color:#b95514;\">结论：</span></strong></p>\n<p>      对此我们知道了函数也是对象就可以得到以下关系</p>\n<p><img alt=\"\" height=\"386\" src=\"..\\..\\static\\image\\99b5a3206c334c1d8ac1cc1465977005.png\" width=\"1019\"/></p>\n<ul><li><span style=\"color:#1c7331;\"><strong>函数属于对象</strong></span></li><li><span style=\"color:#1c7331;\"><strong>所有的函数都是Function构造函数的实例化对象</strong></span></li></ul>\n</blockquote>\n<hr/>\n<h1 id=\"%C2%A0%E4%BA%8C%EF%BC%9A%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8\"><span style=\"color:#4da8ee;\"> 二：函数的调用</span></h1>\n<blockquote>\n<p>函数的调用分为以下六种情况：</p>\n<ul><li><span style=\"color:#be191c;\"><strong>普通函数调用</strong></span></li><li><span style=\"color:#be191c;\"><strong>立即执行函数调用</strong></span></li><li><span style=\"color:#be191c;\"><strong>对象内方法调用</strong></span></li><li><span style=\"color:#be191c;\"><strong>构造函数调用</strong></span></li><li><span style=\"color:#be191c;\"><strong>事件函数调用</strong></span></li><li><span style=\"color:#be191c;\"><strong>定时器函数调用</strong></span></li></ul>\n</blockquote>\n<hr/>\n<h2 id=\"2.1%C2%A0%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8\"><span style=\"color:#b95514;\">2.1 <strong>普通函数调用</strong></span></h2>\n<blockquote>\n<p>普通函数调用可以直接写函数名调用，也可以使用 call() 方法调用</p>\n</blockquote>\n<pre><code class=\"language-javascript\">    &lt;script&gt;\n        function fn(){\n            console.log('我是一个普通函数的调用');\n        }\n        fn()\n        fn.call()\n    &lt;/script&gt;</code></pre>\n<p><img alt=\"\" height=\"141\" src=\"..\\..\\static\\image\\346aa409551b4182a4a96a6d31e8024e.png\" width=\"711\"/></p>\n<hr/>\n<h2 id=\"2.2%C2%A0%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8\"><span style=\"color:#b95514;\">2.2 <strong>立即执行函数调用</strong></span></h2>\n<blockquote>\n<p>立即执行函数通常用于匿名函数的调用，立即执行函数是自动调用的</p>\n</blockquote>\n<pre><code class=\"language-javascript\">    &lt;script&gt;\n        (function(){\n            console.log('立即执行函数调用了');\n        })()\n    &lt;/script&gt;</code></pre>\n<p><img alt=\"\" height=\"144\" src=\"..\\..\\static\\image\\b7a0ce95178843f2bd17836b40c745bd.png\" width=\"831\"/></p>\n<hr/>\n<h2 id=\"2.3%C2%A0%E5%AF%B9%E8%B1%A1%E5%86%85%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8\"><span style=\"color:#b95514;\">2.3 <strong>对象内方法调用</strong></span></h2>\n<blockquote>\n<p>对象内方法调用只需要  ：<strong>实例化对象名称.方法名称</strong></p>\n</blockquote>\n<pre><code class=\"language-javascript\">    &lt;script&gt;\n        var obj={\n            fn:function(){\n                console.log('对象内的方法调用了');\n            }\n        }\n        obj.fn()\n    &lt;/script&gt;</code></pre>\n<p><img alt=\"\" height=\"136\" src=\"..\\..\\static\\image\\aa09fc28e75247979b8af7f3a5bd6573.png\" width=\"789\"/></p>\n<hr/>\n<h2 id=\"2.4%C2%A0%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8\"><span style=\"color:#b95514;\">2.4 <strong>构造函数调用</strong></span></h2>\n<blockquote>\n<p>构造函数的调用只需要 new实例化对象就可调用</p>\n</blockquote>\n<pre><code class=\"language-javascript\">    &lt;script&gt;\n        function Animal(){}\n        new Animal()\n    &lt;/script&gt;</code></pre>\n<hr/>\n<h2 id=\"2.5%20%E4%BA%8B%E4%BB%B6%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8\"><span style=\"color:#b95514;\">2.5 事件函数的调用</span></h2>\n<blockquote>\n<p>事件对象调用需要触发事件就可以调用</p>\n</blockquote>\n<pre><code class=\"language-javascript\">    &lt;script&gt;\n       var div1=document.querySelector('div')\n       div1.addEventListener('click',function(){\n         console.log('事件对象调用了');\n       })\n    &lt;/script&gt;</code></pre>\n<hr/>\n<h2 id=\"2.6%C2%A0%E5%AE%9A%E6%97%B6%E5%99%A8%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8\"><span style=\"color:#b95514;\">2.6 定时器函数的调用</span></h2>\n<blockquote>\n<p>定时器内的函数为时间到后自动调用</p>\n</blockquote>\n<pre><code class=\"language-javascript\">    &lt;script&gt;\n      window.setInterval(function(){\n        console.log('定时器函数触发了');\n      },1000)\n    &lt;/script&gt;</code></pre>\n<p><img alt=\"\" height=\"194\" src=\"..\\..\\static\\image\\13fb70e0a6f54d5eae668468afb346f9.png\" width=\"869\"/></p>\n<hr/>\n<h1 id=\"%C2%A0%E4%B8%89%EF%BC%9A%E5%90%84%E4%B8%AA%E5%87%BD%E6%95%B0%E7%9A%84%E5%86%85%E9%83%A8this%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98\"><span style=\"color:#4da8ee;\"> 三：各类函数的内部this指向问题</span></h1>\n<blockquote>\n<p>函数内部的 this 指向谁，是由我们调用时才知道的，一般情况是指向函数的调用者，下面是上一板块出现的几类函数的this指向</p>\n</blockquote>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:600px;\"><tbody><tr><td style=\"text-align:center;width:164px;\"><span style=\"color:#333333;\"><strong>函数类型</strong></span></td><td style=\"text-align:center;width:434px;\"><span style=\"color:#333333;\"><strong>this 的指向</strong></span></td></tr><tr><td style=\"width:164px;\"> <p style=\"text-align:center;\"><strong><span style=\"color:#be191c;\">普通函数调用</span></strong></p> </td><td style=\"width:434px;\">window</td></tr><tr><td style=\"text-align:center;width:164px;\"> <p style=\"text-align:center;\"><strong><span style=\"color:#be191c;\">立即执行函数调用</span></strong></p> </td><td style=\"width:434px;\">window</td></tr><tr><td style=\"text-align:center;width:164px;\"> <p style=\"text-align:center;\"><strong><span style=\"color:#be191c;\">对象内方法调用</span></strong></p> </td><td style=\"width:434px;\">该方法的所属对象</td></tr><tr><td style=\"text-align:center;width:164px;\"> <p style=\"text-align:center;\"><strong><span style=\"color:#be191c;\">构造函数调用</span></strong></p> </td><td style=\"width:434px;\">通过构造函数创建的实例化对象</td></tr><tr><td style=\"text-align:center;width:164px;\"> <p style=\"text-align:center;\"><strong><span style=\"color:#be191c;\">事件函数调用</span></strong></p> </td><td style=\"width:434px;\">绑定事件的对象</td></tr><tr><td style=\"text-align:center;width:164px;\"> <p style=\"text-align:center;\"><strong><span style=\"color:#be191c;\">定时器函数调用</span></strong></p> </td><td style=\"width:434px;\">window</td></tr></tbody></table>\n<blockquote>\n<p> 以上就是函数进阶第一板块的内容，创作不易，支持下吧！！</p>\n</blockquote>\n</div>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-08-30 14:02:16", "summary": "这篇文章开始我们函数的进阶篇，和我们基础学的函数有了很多拓展，这篇文章首先我们从函数的定义，调用，及其指向来一个总结。文章目录：一：函数的定义命名函数匿名函数利用声明函数重要结论二：函数的调用普通函数"}