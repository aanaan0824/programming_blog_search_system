{"blogid": "125556678", "writerAge": "码龄7年", "writerBlogNum": "8", "writerCollect": "9", "writerComment": "2", "writerFan": "2", "writerGrade": "1级", "writerIntegral": "85", "writerName": "CAXCoder", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_125556678.jpg", "writerRankTotal": "115967", "writerRankWeekly": "1036646", "writerThumb": "2", "writerVisitNum": "3362", "blog_read_count": "920", "blog_time": "于 2022-07-04 23:00:00 发布", "blog_title": "【C#】每个程序员都必须知道的字符串方法和属性", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"1.String%E7%B1%BB%E7%9A%84%E6%89%80%E6%9C%89%E5%87%BD%E6%95%B0-toc\" style=\"margin-left:0px;\"><a href=\"#1.String%E7%B1%BB%E7%9A%84%E6%89%80%E6%9C%89%E5%87%BD%E6%95%B0\">1.String类的所有函数</a></p>\n<p id=\"1.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E7%89%B9%E7%82%B9-toc\" style=\"margin-left:0px;\"><a href=\"#1.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E7%89%B9%E7%82%B9\">2.字符串的特点</a></p>\n<p id=\"2.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%BA%94%E7%94%A8-toc\" style=\"margin-left:0px;\"><a href=\"#2.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%BA%94%E7%94%A8\">3.字符串应用</a></p>\n<p id=\"2.1StringBuilder%E5%BA%94%E7%94%A8-toc\" style=\"margin-left:40px;\"><a href=\"#2.1StringBuilder%E5%BA%94%E7%94%A8\">3.1StringBuilder应用</a></p>\n<p id=\"2.2%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD-toc\" style=\"margin-left:40px;\"><a href=\"#2.2%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD\">3.2字符串常用功能</a></p>\n<hr id=\"hr-toc\"/>\n<p>命名空间：using System;</p>\n<p>对字符串的操作是开发中非常常见的，每个程序员都要熟练掌握字符串的使用方法，包括字符串提供的属性、方法等，本文对字符串中常用的方法进行了归纳整理，对比分析，希望对其它程序员所有帮助。</p>\n<h1 id=\"1.String%E7%B1%BB%E7%9A%84%E6%89%80%E6%9C%89%E5%87%BD%E6%95%B0\">1.String类的所有函数</h1>\n<pre><code class=\"language-cs\">public static readonly String Empty;\npublic String(char[] value);\npublic String(sbyte* value);\npublic String(char* value);\npublic String(char c, int count);\npublic String(char[] value, int startIndex, int length);\npublic String(sbyte* value, int startIndex, int length);\npublic String(char* value, int startIndex, int length);\npublic String(sbyte* value, int startIndex, int length, Encoding enc);\npublic char this[int index] { get; }\npublic int Length { get; }\npublic static int Compare(String strA, String strB);\npublic static int Compare(String strA, int indexA, String strB, int indexB, int length, bool ignoreCase);\npublic static int Compare(String strA, int indexA, String strB, int indexB, int length);\npublic static int Compare(String strA, String strB, bool ignoreCase, CultureInfo culture);\npublic static int Compare(String strA, String strB, CultureInfo culture, CompareOptions options);\npublic static int Compare(String strA, String strB, StringComparison comparisonType);\npublic static int Compare(String strA, String strB, bool ignoreCase);\npublic static int Compare(String strA, int indexA, String strB, int indexB, int length, StringComparison comparisonType);\npublic static int Compare(String strA, int indexA, String strB, int indexB, int length, bool ignoreCase, CultureInfo culture);\npublic static int Compare(String strA, int indexA, String strB, int indexB, int length, CultureInfo culture, CompareOptions options);\npublic static int CompareOrdinal(String strA, String strB);\npublic static int CompareOrdinal(String strA, int indexA, String strB, int indexB, int length);\npublic static String Concat(String str0, String str1, String str2, String str3);\npublic static String Concat(params String[] values);\npublic static String Concat(object arg0, object arg1);\npublic static String Concat(object arg0, object arg1, object arg2);\npublic static String Concat(object arg0);\npublic static String Concat(params object[] args);\npublic static String Concat&lt;T&gt;(IEnumerable&lt;T&gt; values);\npublic static String Concat(IEnumerable&lt;String&gt; values);\npublic static String Concat(String str0, String str1);\npublic static String Concat(object arg0, object arg1, object arg2, object arg3);\npublic static String Concat(String str0, String str1, String str2);\npublic static String Copy(String str);\npublic static bool Equals(String a, String b, StringComparison comparisonType);\npublic static bool Equals(String a, String b);\npublic static String Format(IFormatProvider provider, String format, params object[] args);\npublic static String Format(String format, params object[] args);\npublic static String Format(String format, object arg0, object arg1, object arg2);\npublic static String Format(String format, object arg0);\npublic static String Format(String format, object arg0, object arg1);\npublic static String Intern(String str);\npublic static String IsInterned(String str);\npublic static bool IsNullOrEmpty(String value);\npublic static bool IsNullOrWhiteSpace(String value);\npublic static String Join&lt;T&gt;(String separator, IEnumerable&lt;T&gt; values);\npublic static String Join(String separator, params object[] values);\npublic static String Join(String separator, params String[] value);\npublic static String Join(String separator, String[] value, int startIndex, int count);\npublic static String Join(String separator, IEnumerable&lt;String&gt; values);\npublic object Clone();\npublic int CompareTo(object value);\npublic int CompareTo(String strB);\npublic bool Contains(String value);\npublic void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count);\npublic bool EndsWith(String value);\npublic bool EndsWith(String value, StringComparison comparisonType);\npublic bool EndsWith(String value, bool ignoreCase, CultureInfo culture);\npublic bool Equals(String value);\npublic bool Equals(String value, StringComparison comparisonType);\npublic override bool Equals(object obj);\npublic CharEnumerator GetEnumerator();\npublic override int GetHashCode();\npublic TypeCode GetTypeCode();\npublic int IndexOf(String value, int startIndex, int count, StringComparison comparisonType);\npublic int IndexOf(String value, int startIndex, StringComparison comparisonType);\npublic int IndexOf(String value, int startIndex, int count);\npublic int IndexOf(char value, int startIndex, int count);\npublic int IndexOf(String value);\npublic int IndexOf(char value, int startIndex);\npublic int IndexOf(char value);\npublic int IndexOf(String value, int startIndex);\npublic int IndexOf(String value, StringComparison comparisonType);\npublic int IndexOfAny(char[] anyOf, int startIndex);\npublic int IndexOfAny(char[] anyOf);\npublic int IndexOfAny(char[] anyOf, int startIndex, int count);\npublic String Insert(int startIndex, String value);\npublic bool IsNormalized();\npublic bool IsNormalized(NormalizationForm normalizationForm);\npublic int LastIndexOf(String value);\npublic int LastIndexOf(String value, int startIndex);\npublic int LastIndexOf(String value, int startIndex, int count);\npublic int LastIndexOf(String value, StringComparison comparisonType);\npublic int LastIndexOf(String value, int startIndex, StringComparison comparisonType);\npublic int LastIndexOf(String value, int startIndex, int count, StringComparison comparisonType);\npublic int LastIndexOf(char value);\npublic int LastIndexOf(char value, int startIndex, int count);\npublic int LastIndexOf(char value, int startIndex);\npublic int LastIndexOfAny(char[] anyOf);\npublic int LastIndexOfAny(char[] anyOf, int startIndex, int count);\npublic int LastIndexOfAny(char[] anyOf, int startIndex);\npublic String Normalize(NormalizationForm normalizationForm);\npublic String Normalize();\npublic String PadLeft(int totalWidth, char paddingChar);\npublic String PadLeft(int totalWidth);\npublic String PadRight(int totalWidth, char paddingChar);\npublic String PadRight(int totalWidth);\npublic String Remove(int startIndex, int count);\npublic String Remove(int startIndex);\npublic String Replace(char oldChar, char newChar);\npublic String Replace(String oldValue, String newValue);\npublic String[] Split(char[] separator, int count, StringSplitOptions options);\npublic String[] Split(String[] separator, StringSplitOptions options);\npublic String[] Split(String[] separator, int count, StringSplitOptions options);\npublic String[] Split(char[] separator, int count);\npublic String[] Split(params char[] separator);\npublic String[] Split(char[] separator, StringSplitOptions options);\npublic bool StartsWith(String value, StringComparison comparisonType);\npublic bool StartsWith(String value, bool ignoreCase, CultureInfo culture);\npublic bool StartsWith(String value);\npublic String Substring(int startIndex, int length);\npublic String Substring(int startIndex);\npublic char[] ToCharArray();\npublic char[] ToCharArray(int startIndex, int length);\npublic String ToLower();\npublic String ToLower(CultureInfo culture);\npublic String ToLowerInvariant();\npublic String ToString(IFormatProvider provider);\npublic override String ToString();\npublic String ToUpper(CultureInfo culture);\npublic String ToUpper();\npublic String ToUpperInvariant();\npublic String Trim();\npublic String Trim(params char[] trimChars);\npublic String TrimEnd(params char[] trimChars);\npublic String TrimStart(params char[] trimChars);\npublic static bool operator ==(String a, String b);\npublic static bool operator !=(String a, String b);\n</code></pre>\n<h1 id=\"1.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E7%89%B9%E7%82%B9\">2.字符串的特点</h1>\n<ul><li>字符串的存储。字符串是存储在内存中的堆空间，而字符串变量中存储的其实是字符串在堆中的内存地址。</li><li>字符串的不可变性。当给字符串重新赋值后，原有的字符串并没有销毁，而是在堆中重新开辟了内存空间，将原有的变量所存的地址重新指向新开辟的内存地址。</li><li>字符串的修改。字符串每次修改都要重新开辟空间，耗费时间，因此当存在大量字符串更改操作时可使用StringBuilder（不在内存中反复开辟空间，因此效率非常高）大大提升字符串的执行效率，最后再转换为字符串输出即可。</li><li>可以将字符串看做是char类型的一个只读数组。因此可以通过下标去访问字符串中的某一个元素。但不能通过下标为字符串中的元素赋值。若要改变数组中的某个元素，可以将字符串转化为字符数组，更改后再转换为字符串即可实现指定下标元素更改。</li><li>字符串的连接+，两边只要有一个是字符串类型，另一个会被自动转换成字符串类型。</li><li>一切类型都可以调用.ToString()方法转换成字符串类型。</li></ul>\n<h1 id=\"2.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%BA%94%E7%94%A8\">3.字符串应用</h1>\n<h2 id=\"2.1StringBuilder%E5%BA%94%E7%94%A8\">3.1StringBuilder应用</h2>\n<pre><code class=\"language-cs\">// StringBuilder与string效率对比，SB效率高1000倍多。\n// 不使用 StringBuilder，及计时器的使用。\n// 总时间：00:00:08.8524931\nstring s3 = null;\nStopwatch sw1 = new Stopwatch();\nsw1.Start();\nfor (int i = 0; i &lt; 100000; i++) { s3 += i; }\nsw1.Stop();\nConsole.WriteLine(sw1.Elapsed);\n\n// 使用 StringBuilder，及计时器的使用。\n// 总时间：00:00:00.0077188\nStringBuilder sb = new StringBuilder();\nStopwatch sw2 = new Stopwatch();\nsw2.Start();\nfor (int i = 0; i &lt; 100000; i++) { sb.Append(i); }\nsw2.Stop();\nConsole.WriteLine(sb.ToString());\nConsole.WriteLine(sw2.Elapsed);\n\n// StringBuilder常用方法\nStringBuilder sb1 = new StringBuilder();\nsb1.AppendLine(\"this is 1 line\");  // 向sb添加数据，末尾自动加换行符\nsb1.Append(\"this is 2 line\");  // 向sb添加数据，末尾不自动加换行符\nsb1.Insert(7, \" my\");  // 向sb插入数据。输出为：this is my 1 line\nsb1.Replace(\"this\", \"that\");  // 替换指定的子串。that is 1 line\nConsole.WriteLine(sb1.ToString());  // 将sb转化为字符串后才能输出。</code></pre>\n<h2 id=\"2.2%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD\">3.2字符串常用功能</h2>\n<pre><code class=\"language-cs\">// 可以将字符串看做是char类型的一个只读数组。\nstring s1 = \"abcdefg\";\nConsole.WriteLine(s1[0]);\n\n// 字符串转化为只读字符数组，再转换为字符串\nstring s2 = \"abcdefg\";\nchar[] chs = s2.ToCharArray();\nchs[0] = 'b';\ns2 = new string(chs);\nConsole.WriteLine(s2);\n\nstring s4 = \"This is english sentences to test\";\nstring s5 = \"这是中文测试字符串，你真厉害\";\n\n// 获得字符串的长度\nint s4len = s4.Length;\nConsole.WriteLine(s4len.ToString());  // 33\n\n// 将字符串全部转化为小写字母\nstring s4Lower = s4.ToLower();\nConsole.WriteLine(s4Lower);  // this is english sentences to test\n\n// 将字符串全部转化为大写字母\nstring s4Upper = s4.ToUpper();\nConsole.WriteLine(s4Upper);  // THIS IS ENGLISH SENTENCES TO TEST\n\n// 判断两个字符串是否相等，区分大小写的。\nbool s4b1 = s4.Equals(s5); \nConsole.WriteLine(s4b1);  //False\n\n// 判断两个字符串是否相等，忽略大小写的。\nbool s4b2 = s4.Equals(s5, StringComparison.OrdinalIgnoreCase);\nConsole.WriteLine(s4b1);  //False\n\n// 字符串输出占位符\n// 输出：2018年08月10日\nstring sData = \"2018-08-10\";\nchar[] chs1 = { '-' };\nstring[] date = sData.Split(chs1, StringSplitOptions.RemoveEmptyEntries);\nConsole.WriteLine(\"{0}年{1}月{2}日\", date[0], date[1], date[2]);\n\n// 分割字符串Split\n// 输出：str={\"a\",\"b\",\"dfd\",\"fdf\"}\nstring sSplit = \"a b   dfd _   +      =  ,,, fdf \";\nchar[] chs2 = { ' ', '_', '+', '=', ',' };\nstring[] str = sSplit.Split(chs2,StringSplitOptions.RemoveEmptyEntries);\n\n// 字符串基本操作\nstring str1= \"核心团队成员老孙\";\nConsole.WriteLine(str1.Replace(\"老孙\", \"***\"));  // 替换字符串内容。输出：核心团队成员***\nConsole.WriteLine(str1.Substring(2));  // 字符串切片。输出：团队成员老孙\nConsole.WriteLine(str1.Substring(2,4));  // 字符串切片。输出：团队成员\nConsole.WriteLine(str1.Contains(\"老孙\")); // 判断字符串是否含有子串。输出：True\nConsole.WriteLine(str1.StartsWith(\"老孙\"));  // 判断字符串是否以子串开始。输出：False\nConsole.WriteLine(str1.EndsWith(\"老孙\"));  // 判断字符串是否以子串结尾。输出：True\nConsole.WriteLine(str1.IndexOf(\"团队\"));  // 子串第一次出现的位置。输出：2\nConsole.WriteLine(str1.LastIndexOf(\"成员\"));  // 子串最后一次出现的位置。输出：4\nConsole.WriteLine(string.IsNullOrEmpty(str1));  // 判断字符串是否为空，\"\"和null都是空。输出：False  \n\n// 移除字符串中的空字符\nstring str2 = \"  this is a test.   \";\nConsole.WriteLine(str2.Trim());  // 移除开始和结尾的空格。输出：this is a test.\nConsole.WriteLine(str2.TrimEnd());  // 移除结尾的空格。输出：  this is a test.\nConsole.WriteLine(str2.TrimStart());  // 移除开始的空格。输出：this is a test.   \n\n// 连接字符串\nstring[] names = { \"张三\", \"李四\", \"王五\" };\nstring strNew = string.Join(\"|\", names);\nConsole.WriteLine(strNew);  // 连接字符串。输出：张三|李四|王五\n\n</code></pre>\n<p></p>\n</div>\n</div>", "first_tag": "C#", "cpp": 0, "csharp": 1, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-07-04 23:00:00", "summary": "目录类的所有函数字符串的特点字符串应用应用字符串常用功能命名空间：对字符串的操作是开发中非常常见的，每个程序员都要熟练掌握字符串的使用方法，包括字符串提供的属性、方法等，本文对字符串中常用的方法进行了"}