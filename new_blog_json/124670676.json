{"blogid": "124670676", "writerAge": "码龄5年", "writerBlogNum": "77", "writerCollect": "1302", "writerComment": "119", "writerFan": "712", "writerGrade": "5级", "writerIntegral": "1679", "writerName": "林林zonzon", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124670676.jpg", "writerRankTotal": "11508", "writerRankWeekly": "17400", "writerThumb": "287", "writerVisitNum": "116937", "blog_read_count": "21299", "blog_time": "已于 2022-05-11 15:12:20 修改", "blog_title": "桌面宠物 ① 通过python制作属于自己的桌面宠物", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>一、桌面宠物素材</h1>\n<h2>1.1 需要准备什么素材</h2>\n<p>        桌面宠物的各种动画效果，可以看作是由一个个GIF动图拼接而成，我们需要准备多组GIF动图来实现桌面宠物的动作切换。</p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"160\" src=\"https://img-blog.csdnimg.cn/49eeb01d875e4fa39e97a2986c8de724.gif\" width=\"198\"/></p>\n<p></p>\n<p>        最好选取是白底的GIF动图。</p>\n<h2>1.2 介绍几种获得GIF动图的方式</h2>\n<h3>1.2.1 通过pr实现视频转GIF</h3>\n<div>\n<p class=\"img-center\"><img alt=\"\" height=\"181\" src=\"..\\..\\static\\image\\75c7e220b2ab480f8f50c220ef4c372e.png\" width=\"344\"/></p>\n<p>​</p>\n</div>\n<p>        pr在导出的时候选择动画GIF可以直接导出GIF动图。</p>\n<p>        当然了想要白底就需要自已用“蒙版”和画笔工具自己抠图了。</p>\n<h3>1.2.2 通过ps实现图片组转GIF</h3>\n<p>        ps会高级一点，首先点击最上方的窗口，再点击时间轴，在下方显示出的时间轴的最右边的加号可以添加你想要添加的图片。图层右边可以选择删除背景。</p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"278\" src=\"..\\..\\static\\image\\19ffbdc617b849a39e9ee7bc652b5f98.png\" width=\"513\"/></p>\n<p></p>\n<p>        然后选择最上方的文件，选择导出，选择导出为web所用格式旧版，即可</p>\n<div>\n<p class=\"img-center\"><img alt=\"\" height=\"364\" src=\"..\\..\\static\\image\\e77d62823aa845869c403507383b0b64.png\" width=\"413\"/></p>\n<p>​</p>\n</div>\n<p></p>\n<p style=\"text-align:center;\"><img alt=\"\" height=\"204\" src=\"https://img-blog.csdnimg.cn/cab8e0b83f3b457496b8b434d85692da.gif\" width=\"204\"/></p>\n<p></p>\n<h3>1.2.3 百度一下，获取网上现成的GIF资源</h3>\n<p>① 百度：“制作GIF动图”</p>\n<p>② 百度    “GIF动图资源”</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/408992668\" title=\"你想要的角色人物素材都在这里！最实用的2d游戏素材！ - 知乎\">你想要的角色人物素材都在这里！最实用的2d游戏素材！ - 知乎</a></p>\n<h2></h2>\n<h1>二、python实现代码</h1>\n<div>\n<p class=\"img-center\"><img alt=\"\" height=\"325\" src=\"..\\..\\static\\image\\5f2456f3552c4249b48bdd28fd99b3bf.png\" width=\"440\"/></p>\n<p>​</p>\n</div>\n<p></p>\n<h2>2.1 目录结构</h2>\n<p>        项目的目录结构整体如下：main.py为主程序代码。</p>\n<div>\n<p class=\"img-center\"><img alt=\"\" height=\"357\" src=\"..\\..\\static\\image\\07dff88a11d149faa522fc9ff573c1b7.png\" width=\"400\"/></p>\n<p>​</p>\n</div>\n<p>        normal下的GIF图是宠物平常会随机切换的动作GIF图， click下面的GIF图是点击宠物之后的宠物动作的GIF图</p>\n<div>\n<p class=\"img-center\"><img alt=\"\" height=\"204\" src=\"..\\..\\static\\image\\6d8113c52920428c9a91e038a7b89efd.png\" width=\"391\"/></p>\n<p>​</p>\n</div>\n<p>        dialog.txt 记录了宠物的对话信息</p>\n<div>\n<p class=\"img-center\"><img alt=\"\" height=\"270\" src=\"..\\..\\static\\image\\aaa48580dbb8414dbdb81fbae97b8b40.png\" width=\"467\"/></p>\n<p>​</p>\n</div>\n<p>         tigerIcon.jpg是缩小到托盘后托盘图标的图片</p>\n<p></p>\n<div>\n<p class=\"img-center\"><img alt=\"\" height=\"250\" src=\"..\\..\\static\\image\\9d9a67b425cd4c279bfccc634b571af3.png\" width=\"471\"/></p>\n<p>​</p>\n</div>\n<h2></h2>\n<h2>2.2 实现代码</h2>\n<h3>2.2.1 引用包</h3>\n<p>        os包用于加载文件，sys包用于退出程序，random包用于程序中一些需要调用随机数的操作。其他的三个包则是用于实现桌面宠物的基础。</p>\n<div>\n<pre><code class=\"language-python\">import os\nimport sys\nimport random\nfrom PyQt5.QtGui import *\nfrom PyQt5.QtCore import *\nfrom PyQt5.QtWidgets import *</code></pre>\n</div>\n<h3>2.2.2 主代码部分</h3>\n<div>\n<pre><code class=\"language-python\">if __name__ == '__main__':\n    # 创建了一个QApplication对象，对象名为app，带两个参数argc,argv\n    # 所有的PyQt5应用必须创建一个应用（Application）对象。sys.argv参数是一个来自命令行的参数列表。\n    app = QApplication(sys.argv)\n    # 窗口组件初始化\n    pet = DesktopPet()\n    # 1. 进入时间循环；\n    # 2. wait，直到响应app可能的输入；\n    # 3. QT接收和处理用户及系统交代的事件（消息），并传递到各个窗口；\n    # 4. 程序遇到exit()退出时，机会返回exec()的值。\n    sys.exit(app.exec_())</code></pre>\n</div>\n<h3>2.2.3 代码运行流程</h3>\n<p>整个运行流程为：</p>\n<p>（1）通过self.init()：实现窗体的初始化，宠物的GIF图在这个窗体中播放。</p>\n<p>（2）通过self.initPall()：配置托盘化</p>\n<p>（3）通过self.initPetImage()：将宠物的静态GIF资源，包括对话和GIF动图进行加载</p>\n<p>（4）通过self.petNormalAction()：实现宠物随机切换动作和语句的功能</p>\n<div>\n<pre><code class=\"language-python\">class DesktopPet(QWidget):\n    def __init__(self, parent=None, **kwargs):\n        super(DesktopPet, self).__init__(parent)\n        # 窗体初始化\n        self.init()\n        # 托盘化初始\n        self.initPall()\n        # 宠物静态gif图加载\n        self.initPetImage()\n        # 宠物正常待机，实现随机切换动作\n        self.petNormalAction()</code></pre>\n</div>\n<p>① 加载显示GIF动图的窗体，通过函数init实现，其代码配置如下：</p>\n<p>        这几句的作用是对展示宠物的窗体进行一些初步的设置，使得白色GIF图能够去掉背景的白色，将GIF图透明的展示出来</p>\n<div>\n<pre><code class=\"language-python\">    # 窗体初始化\n    def init(self):\n        # 初始化\n        # 设置窗口属性:窗口无标题栏且固定在最前面\n        # FrameWindowHint:无边框窗口\n        # WindowStaysOnTopHint: 窗口总显示在最上面\n        # SubWindow: 新窗口部件是一个子窗口，而无论窗口部件是否有父窗口部件\n        # https://blog.csdn.net/kaida1234/article/details/79863146\n        self.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.SubWindow)\n        # setAutoFillBackground(True)表示的是自动填充背景,False为透明背景\n        self.setAutoFillBackground(False)\n        # 窗口透明，窗体空间不透明\n        self.setAttribute(Qt.WA_TranslucentBackground, True)\n        # 重绘组件、刷新\n        self.repaint()</code></pre>\n</div>\n<p>② 实现能托盘显示的功能，通过函数initPall实现，其代码配置如下：</p>\n<p>        主要有下面这几个操作：</p>\n<p>        （1）读取静态图片资源设置托盘化的图标</p>\n<div>\n<p class=\"img-center\"><img alt=\"\" height=\"216\" src=\"..\\..\\static\\image\\b002e971a3bb4536a7ec4edeb4c3a439.png\" width=\"328\"/></p>\n<p>​</p>\n</div>\n<p>         （2）设置托盘化图片点击右键显示的菜单，并对这些菜单的点击操作进行设置</p>\n<div>\n<p class=\"img-center\"><img alt=\"\" height=\"184\" src=\"..\\..\\static\\image\\f6e5a3239e164a46bfe0fb7791a8c077.png\" width=\"259\"/></p>\n<p>​</p>\n</div>\n<p>流程代码如下： </p>\n<div>\n<pre><code class=\"language-python\"> # 托盘化设置初始化\n    def initPall(self):\n        # 导入准备在托盘化显示上使用的图标\n        icons = os.path.join('tigerIcon.jpg')\n        # 设置右键显示最小化的菜单项\n        # 菜单项退出，点击后调用quit函数\n        quit_action = QAction('退出', self, triggered=self.quit)\n        # 设置这个点击选项的图片\n        quit_action.setIcon(QIcon(icons))\n        # 菜单项显示，点击后调用showing函数\n        showing = QAction(u'显示', self, triggered=self.showwin)\n        # 新建一个菜单项控件\n        self.tray_icon_menu = QMenu(self)\n        # 在菜单栏添加一个无子菜单的菜单项‘退出’\n        self.tray_icon_menu.addAction(quit_action)\n        # 在菜单栏添加一个无子菜单的菜单项‘显示’\n        self.tray_icon_menu.addAction(showing)\n        # QSystemTrayIcon类为应用程序在系统托盘中提供一个图标\n        self.tray_icon = QSystemTrayIcon(self)\n        # 设置托盘化图标\n        self.tray_icon.setIcon(QIcon(icons))\n        # 设置托盘化菜单项\n        self.tray_icon.setContextMenu(self.tray_icon_menu)\n        # 展示\n        self.tray_icon.show()</code></pre>\n</div>\n<p>其中‘退出’项涉及到的函数代码如下：</p>\n<div>\n<pre><code class=\"language-python\">    # 退出操作，关闭程序\n    def quit(self):\n        self.close()\n        sys.exit()</code></pre>\n</div>\n<p>其中‘显示’项涉及到的函数代码如下：</p>\n<div>\n<pre><code class=\"language-python\">    # 显示宠物\n    def showwin(self):\n        # setWindowOpacity（）设置窗体的透明度，通过调整窗体透明度实现宠物的展示和隐藏\n        self.setWindowOpacity(1)</code></pre>\n</div>\n<p>③ 宠物静态资源的加载，通过函数initPetImage实现，其代码配置如下：</p>\n<p>        静态资源的加载主要涉及两个部分，对话框内容的加载和图片内容的加载。</p>\n<div>\n<pre><code class=\"language-python\">    # 宠物静态gif图加载\n    def initPetImage(self):\n        # 对话框定义\n        self.talkLabel = QLabel(self)\n        # 对话框样式设计\n        self.talkLabel.setStyleSheet(\"font:15pt '楷体';border-width: 1px;color:blue;\") \n        # 定义显示图片部分\n        self.image = QLabel(self)\n        # QMovie是一个可以存放动态视频的类，一般是配合QLabel使用的,可以用来存放GIF动态图\n        self.movie = QMovie(\"normal/normal1.gif\")\n        # 设置标签大小\n        self.movie.setScaledSize(QSize(200, 200))\n        # 将Qmovie在定义的image中显示\n        self.image.setMovie(self.movie)\n        self.movie.start()\n        self.resize(1024, 1024)\n        # 调用自定义的randomPosition，会使得宠物出现位置随机\n        self.randomPosition()\n        # 展示\n        self.show()\n        # https://new.qq.com/rain/a/20211014a002rs00\n        # 将宠物正常待机状态的动图放入pet1中\n        self.pet1 = []\n        for i in os.listdir(\"normal\"):\n            self.pet1.append(\"normal/\" + i)\n        # 将宠物正常待机状态的对话放入pet2中\n        self.dialog = []\n        # 读取目录下dialog文件\n        with open(\"dialog.txt\", \"r\") as f:\n            text = f.read()\n            # 以\\n 即换行符为分隔符，分割放进dialog中\n            self.dialog = text.split(\"\\n\")</code></pre>\n</div>\n<p>        其中我们希望宠物出现的位置是随机的而不是固定的，那么便通过 randomPosition()实现宠物出现位置的随机。</p>\n<div>\n<pre><code class=\"language-python\">    # 宠物随机位置\n    def randomPosition(self):\n        # screenGeometry（）函数提供有关可用屏幕几何的信息\n        screen_geo = QDesktopWidget().screenGeometry()\n        # 获取窗口坐标系\n        pet_geo = self.geometry()\n        width = (screen_geo.width() - pet_geo.width()) * random.random()\n        height = (screen_geo.height() - pet_geo.height()) * random.random()\n        self.move(width, height)</code></pre>\n</div>\n<p>④ 宠物正常待机，实现随机切换动作，对话框通过函数petNormalAction实现，其代码配置如下</p>\n<p>        这里通过QTimer实现定时操作，到达设置的时间即调用相关的函数。其中condition为标识宠物状态的flag，0为平常状态，1为点击状态，这个状态可按照自己的喜好拓展。talk_condition同理，为标识宠物对话状态的flag。</p>\n<div>\n<pre><code class=\"language-python\"># 宠物正常待机动作\n    def petNormalAction(self):\n        # 每隔一段时间做个动作\n        # 定时器设置\n        self.timer = QTimer()\n        # 时间到了自动执行\n        self.timer.timeout.connect(self.randomAct)\n        # 动作时间切换设置\n        self.timer.start(3000)\n        # 宠物状态设置为正常\n        self.condition = 0\n        # 每隔一段时间切换对话\n        self.talkTimer = QTimer()\n        self.talkTimer.timeout.connect(self.talk)\n        self.talkTimer.start(3000)\n        # 对话状态设置为常态\n        self.talk_condition = 0\n        # 宠物对话框\n        self.talk()</code></pre>\n</div>\n<p>         其中，通过randomAct实现宠物动作的随机切换，通过talk实现对话框内容的切换，其代码如下：</p>\n<p>        self.pet1和self.dialog在初始化的时候即定义了。这里可以按照自己的喜好进行拓展，用多个if-else if实现多种状态的切换和定义，增加一些喂食，玩耍动作等。</p>\n<div>\n<pre><code class=\"language-python\"> # 随机动作切换\n    def randomAct(self):\n        # condition记录宠物状态，宠物状态为0时，代表正常待机\n        if not self.condition:\n            # 随机选择装载在pet1里面的gif图进行展示，实现随机切换\n            self.movie = QMovie(random.choice(self.pet1))\n            # 宠物大小\n            self.movie.setScaledSize(QSize(200, 200))\n            # 将动画添加到label中\n            self.image.setMovie(self.movie)\n            # 开始播放动画\n            self.movie.start()\n        # condition不为0，转为切换特有的动作，实现宠物的点击反馈\n        # 这里可以通过else-if语句往下拓展做更多的交互功能\n        else:\n            # 读取特殊状态图片路径\n            self.movie = QMovie(\"./click/click.gif\")\n            # 宠物大小\n            self.movie.setScaledSize(QSize(200, 200))\n            # 将动画添加到label中\n            self.image.setMovie(self.movie)\n            # 开始播放动画\n            self.movie.start()\n            # 宠物状态设置为正常待机\n            self.condition = 0\n            self.talk_condition = 0\n\n    # 宠物对话框行为处理\n    def talk(self):\n        if not self.talk_condition:\n            # talk_condition为0则选取加载在dialog中的语句\n            self.talkLabel.setText(random.choice(self.dialog))\n            # 设置样式\n            self.talkLabel.setStyleSheet(\n                \"font: bold;\"\n                \"font:25pt '楷体';\"\n                \"color:white;\"\n                \"background-color: white\"\n                \"url(:/)\"\n            )\n            # 根据内容自适应大小\n            self.talkLabel.adjustSize()\n        else:\n            # talk_condition为1显示为别点我，这里同样可以通过if-else-if来拓展对应的行为\n            self.talkLabel.setText(\"别点我\")\n            self.talkLabel.setStyleSheet(\n                \"font: bold;\"\n                \"font:25pt '楷体';\"\n                \"color:white;\"\n                \"background-color: white\"\n                \"url(:/)\"\n            )\n            self.talkLabel.adjustSize()\n            # 设置为正常状态\n            self.talk_condition = 0\n</code></pre>\n</div>\n<p>⑤ 实现能够拖动宠物，通过多个自带函数实现，其代码配置如下：</p>\n<p>        实现宠物的拖动主要通过三个函数实现，mouserPressEvent负责在鼠标点击判断其是否在宠物窗口上，如果在则将宠物和鼠标的位置绑定，并执行点击改变宠物GIF图和对话框的操作。</p>\n<p>        mouseMoveEvent实现按下后宠物跟着鼠标移动</p>\n<p>        mouseReleaseEvent将之前的锁定取消</p>\n<div>\n<pre><code class=\"language-python\"> # 鼠标左键按下时, 宠物将和鼠标位置绑定\n    def mousePressEvent(self, event):\n        # 更改宠物状态为点击\n        self.condition = 1\n        # 更改宠物对话状态\n        self.talk_condition = 1\n        # 即可调用对话状态改变\n        self.talk()\n        # 即刻加载宠物点击动画\n        self.randomAct()\n        if event.button() == Qt.LeftButton:\n            self.is_follow_mouse = True\n        # globalPos() 事件触发点相对于桌面的位置\n        # pos() 程序相对于桌面左上角的位置，实际是窗口的左上角坐标\n        self.mouse_drag_pos = event.globalPos() - self.pos()\n        event.accept()\n        # 拖动时鼠标图形的设置\n        self.setCursor(QCursor(Qt.OpenHandCursor))\n\n    # 鼠标移动时调用，实现宠物随鼠标移动\n    def mouseMoveEvent(self, event):\n        # 如果鼠标左键按下，且处于绑定状态\n        if Qt.LeftButton and self.is_follow_mouse:\n            # 宠物随鼠标进行移动\n            self.move(event.globalPos() - self.mouse_drag_pos)\n        event.accept()\n\n    # 鼠标释放调用，取消绑定\n    def mouseReleaseEvent(self, event):\n        self.is_follow_mouse = False\n        # 鼠标图形设置为箭头\n        self.setCursor(QCursor(Qt.ArrowCursor))\n</code></pre>\n</div>\n<p>⑥ 实现宠物右键点击具有交互功能，通过函数contextMenuEvent实现，其代码配置如下：</p>\n<p>        退出操作通过 qApp.quit()实现，直接退出相应的QT程序。</p>\n<p>        隐藏操作则通过self.setWindowOpacity(0)实现，这个可控制窗口的透明度。</p>\n<div>\n<pre><code class=\"language-python\"> # 宠物右键点击交互\n    def contextMenuEvent(self, event):\n        # 定义菜单\n        menu = QMenu(self)\n        # 定义菜单项\n        quitAction = menu.addAction(\"退出\")\n        hide = menu.addAction(\"隐藏\")\n        # 使用exec_()方法显示菜单。从鼠标右键事件对象中获得当前坐标。mapToGlobal()方法把当前组件的相对坐标转换为窗口（window）的绝对坐标。\n        action = menu.exec_(self.mapToGlobal(event.pos()))\n        # 点击事件为退出\n        if action == quitAction:\n            qApp.quit()\n        # 点击事件为隐藏\n        if action == hide:\n            # 通过设置透明度方式隐藏宠物\n            self.setWindowOpacity(0)\n</code></pre>\n</div>\n<div>\n<p class=\"img-center\"><img alt=\"\" height=\"245\" src=\"..\\..\\static\\image\\0da580dd315f4458b157af7e3264ebf2.png\" width=\"354\"/></p>\n<p>​</p>\n</div>\n<p>⑦ 鼠标移到宠物上的时候显示为闭合的手</p>\n<div>\n<pre><code class=\"language-python\">    # 鼠标移进时调用\n    def enterEvent(self, event):\n        # 设置鼠标形状 Qt.ClosedHandCursor   非指向手\n        self.setCursor(Qt.ClosedHandCursor)</code></pre>\n</div>\n<h2>2.3 完整源码</h2>\n<div>\n<pre><code class=\"language-python\">import os\nimport sys\nimport random\nfrom PyQt5.QtGui import *\nfrom PyQt5.QtCore import *\nfrom PyQt5.QtWidgets import *\n\n\nclass DesktopPet(QWidget):\n    def __init__(self, parent=None, **kwargs):\n        super(DesktopPet, self).__init__(parent)\n        # 窗体初始化\n        self.init()\n        # 托盘化初始\n        self.initPall()\n        # 宠物静态gif图加载\n        self.initPetImage()\n        # 宠物正常待机，实现随机切换动作\n        self.petNormalAction()\n\n\n    # 窗体初始化\n    def init(self):\n        # 初始化\n        # 设置窗口属性:窗口无标题栏且固定在最前面\n        # FrameWindowHint:无边框窗口\n        # WindowStaysOnTopHint: 窗口总显示在最上面\n        # SubWindow: 新窗口部件是一个子窗口，而无论窗口部件是否有父窗口部件\n        # https://blog.csdn.net/kaida1234/article/details/79863146\n        self.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.SubWindow)\n        # setAutoFillBackground(True)表示的是自动填充背景,False为透明背景\n        self.setAutoFillBackground(False)\n        # 窗口透明，窗体空间不透明\n        self.setAttribute(Qt.WA_TranslucentBackground, True)\n        # 重绘组件、刷新\n        self.repaint()\n\n    # 托盘化设置初始化\n    def initPall(self):\n        # 导入准备在托盘化显示上使用的图标\n        icons = os.path.join('tigerIcon.jpg')\n        # 设置右键显示最小化的菜单项\n        # 菜单项退出，点击后调用quit函数\n        quit_action = QAction('退出', self, triggered=self.quit)\n        # 设置这个点击选项的图片\n        quit_action.setIcon(QIcon(icons))\n        # 菜单项显示，点击后调用showing函数\n        showing = QAction(u'显示', self, triggered=self.showwin)\n        # 新建一个菜单项控件\n        self.tray_icon_menu = QMenu(self)\n        # 在菜单栏添加一个无子菜单的菜单项‘退出’\n        self.tray_icon_menu.addAction(quit_action)\n        # 在菜单栏添加一个无子菜单的菜单项‘显示’\n        self.tray_icon_menu.addAction(showing)\n        # QSystemTrayIcon类为应用程序在系统托盘中提供一个图标\n        self.tray_icon = QSystemTrayIcon(self)\n        # 设置托盘化图标\n        self.tray_icon.setIcon(QIcon(icons))\n        # 设置托盘化菜单项\n        self.tray_icon.setContextMenu(self.tray_icon_menu)\n        # 展示\n        self.tray_icon.show()\n\n    # 宠物静态gif图加载\n    def initPetImage(self):\n        # 对话框定义\n        self.talkLabel = QLabel(self)\n        # 对话框样式设计\n        self.talkLabel.setStyleSheet(\"font:15pt '楷体';border-width: 1px;color:blue;\")\n        # 定义显示图片部分\n        self.image = QLabel(self)\n        # QMovie是一个可以存放动态视频的类，一般是配合QLabel使用的,可以用来存放GIF动态图\n        self.movie = QMovie(\"normal/normal1.gif\")\n        # 设置标签大小\n        self.movie.setScaledSize(QSize(200, 200))\n        # 将Qmovie在定义的image中显示\n        self.image.setMovie(self.movie)\n        self.movie.start()\n        self.resize(1024, 1024)\n        # 调用自定义的randomPosition，会使得宠物出现位置随机\n        self.randomPosition()\n        # 展示\n        self.show()\n        # https://new.qq.com/rain/a/20211014a002rs00\n        # 将宠物正常待机状态的动图放入pet1中\n        self.pet1 = []\n        for i in os.listdir(\"normal\"):\n            self.pet1.append(\"normal/\" + i)\n        # 将宠物正常待机状态的对话放入pet2中\n        self.dialog = []\n        # 读取目录下dialog文件\n        with open(\"dialog.txt\", \"r\") as f:\n            text = f.read()\n            # 以\\n 即换行符为分隔符，分割放进dialog中\n            self.dialog = text.split(\"\\n\")\n\n    # 宠物正常待机动作\n    def petNormalAction(self):\n        # 每隔一段时间做个动作\n        # 定时器设置\n        self.timer = QTimer()\n        # 时间到了自动执行\n        self.timer.timeout.connect(self.randomAct)\n        # 动作时间切换设置\n        self.timer.start(3000)\n        # 宠物状态设置为正常\n        self.condition = 0\n        # 每隔一段时间切换对话\n        self.talkTimer = QTimer()\n        self.talkTimer.timeout.connect(self.talk)\n        self.talkTimer.start(3000)\n        # 对话状态设置为常态\n        self.talk_condition = 0\n        # 宠物对话框\n        self.talk()\n\n    # 随机动作切换\n    def randomAct(self):\n        # condition记录宠物状态，宠物状态为0时，代表正常待机\n        if not self.condition:\n            # 随机选择装载在pet1里面的gif图进行展示，实现随机切换\n            self.movie = QMovie(random.choice(self.pet1))\n            # 宠物大小\n            self.movie.setScaledSize(QSize(200, 200))\n            # 将动画添加到label中\n            self.image.setMovie(self.movie)\n            # 开始播放动画\n            self.movie.start()\n        # condition不为0，转为切换特有的动作，实现宠物的点击反馈\n        # 这里可以通过else-if语句往下拓展做更多的交互功能\n        else:\n            # 读取特殊状态图片路径\n            self.movie = QMovie(\"./click/click.gif\")\n            # 宠物大小\n            self.movie.setScaledSize(QSize(200, 200))\n            # 将动画添加到label中\n            self.image.setMovie(self.movie)\n            # 开始播放动画\n            self.movie.start()\n            # 宠物状态设置为正常待机\n            self.condition = 0\n            self.talk_condition = 0\n\n    # 宠物对话框行为处理\n    def talk(self):\n        if not self.talk_condition:\n            # talk_condition为0则选取加载在dialog中的语句\n            self.talkLabel.setText(random.choice(self.dialog))\n            # 设置样式\n            self.talkLabel.setStyleSheet(\n                \"font: bold;\"\n                \"font:25pt '楷体';\"\n                \"color:white;\"\n                \"background-color: white\"\n                \"url(:/)\"\n            )\n            # 根据内容自适应大小\n            self.talkLabel.adjustSize()\n        else:\n            # talk_condition为1显示为别点我，这里同样可以通过if-else-if来拓展对应的行为\n            self.talkLabel.setText(\"别点我\")\n            self.talkLabel.setStyleSheet(\n                \"font: bold;\"\n                \"font:25pt '楷体';\"\n                \"color:white;\"\n                \"background-color: white\"\n                \"url(:/)\"\n            )\n            self.talkLabel.adjustSize()\n            # 设置为正常状态\n            self.talk_condition = 0\n\n    # 退出操作，关闭程序\n    def quit(self):\n        self.close()\n        sys.exit()\n\n    # 显示宠物\n    def showwin(self):\n        # setWindowOpacity（）设置窗体的透明度，通过调整窗体透明度实现宠物的展示和隐藏\n        self.setWindowOpacity(1)\n\n    # 宠物随机位置\n    def randomPosition(self):\n        screen_geo = QDesktopWidget().screenGeometry()\n        pet_geo = self.geometry()\n        width = (screen_geo.width() - pet_geo.width()) * random.random()\n        height = (screen_geo.height() - pet_geo.height()) * random.random()\n        self.move(width, height)\n\n    # 鼠标左键按下时, 宠物将和鼠标位置绑定\n    def mousePressEvent(self, event):\n        # 更改宠物状态为点击\n        self.condition = 1\n        # 更改宠物对话状态\n        self.talk_condition = 1\n        # 即可调用对话状态改变\n        self.talk()\n        # 即刻加载宠物点击动画\n        self.randomAct()\n        if event.button() == Qt.LeftButton:\n            self.is_follow_mouse = True\n        # globalPos() 事件触发点相对于桌面的位置\n        # pos() 程序相对于桌面左上角的位置，实际是窗口的左上角坐标\n        self.mouse_drag_pos = event.globalPos() - self.pos()\n        event.accept()\n        # 拖动时鼠标图形的设置\n        self.setCursor(QCursor(Qt.OpenHandCursor))\n\n    # 鼠标移动时调用，实现宠物随鼠标移动\n    def mouseMoveEvent(self, event):\n        # 如果鼠标左键按下，且处于绑定状态\n        if Qt.LeftButton and self.is_follow_mouse:\n            # 宠物随鼠标进行移动\n            self.move(event.globalPos() - self.mouse_drag_pos)\n        event.accept()\n\n    # 鼠标释放调用，取消绑定\n    def mouseReleaseEvent(self, event):\n        self.is_follow_mouse = False\n        # 鼠标图形设置为箭头\n        self.setCursor(QCursor(Qt.ArrowCursor))\n\n\n    # 鼠标移进时调用\n    def enterEvent(self, event):\n        # 设置鼠标形状 Qt.ClosedHandCursor   非指向手\n        self.setCursor(Qt.ClosedHandCursor)\n\n    # 宠物右键点击交互\n    def contextMenuEvent(self, event):\n        # 定义菜单\n        menu = QMenu(self)\n        # 定义菜单项\n        quitAction = menu.addAction(\"退出\")\n        hide = menu.addAction(\"隐藏\")\n        # 使用exec_()方法显示菜单。从鼠标右键事件对象中获得当前坐标。mapToGlobal()方法把当前组件的相对坐标转换为窗口（window）的绝对坐标。\n        action = menu.exec_(self.mapToGlobal(event.pos()))\n        # 点击事件为退出\n        if action == quitAction:\n            qApp.quit()\n        # 点击事件为隐藏\n        if action == hide:\n            # 通过设置透明度方式隐藏宠物\n            self.setWindowOpacity(0)\n\n\nif __name__ == '__main__':\n    # 创建了一个QApplication对象，对象名为app，带两个参数argc,argv\n    # 所有的PyQt5应用必须创建一个应用（Application）对象。sys.argv参数是一个来自命令行的参数列表。\n    app = QApplication(sys.argv)\n    # 窗口组件初始化\n    pet = DesktopPet()\n    # 1. 进入时间循环；\n    # 2. wait，直到响应app可能的输入；\n    # 3. QT接收和处理用户及系统交代的事件（消息），并传递到各个窗口；\n    # 4. 程序遇到exit()退出时，机会返回exec()的值。\n    sys.exit(app.exec_())\n</code></pre>\n</div>\n<h1>三、程序打包</h1>\n<h2>3.1 安装pyinstaller</h2>\n<div>\n<pre><code class=\"language-python\">pip install pyinstaller \n</code></pre>\n</div>\n<p>如果提示黄色提示pip版本问题，照着上面的提示修改即可</p>\n<h2> 3.2 项目目录下完成打包</h2>\n<p>        进入打开cmd命令行，进入项目目录，输入命令</p>\n<div>\n<pre><code class=\"language-python\">pyinstaller -F -w main.py\n</code></pre>\n</div>\n<p><img alt=\"\" height=\"170\" src=\"..\\..\\static\\image\\aff4486b86fc45ddbebff9352eacbb95.png\" width=\"1095\"/></p>\n<p>         打包完成后，在生成的dist里面可以看到main.exe文件</p>\n<div>\n<p class=\"img-center\"><img alt=\"\" height=\"194\" src=\"..\\..\\static\\image\\75d443368b7143c983c0743600553458.png\" width=\"584\"/></p>\n<p>​</p>\n</div>\n<p>         </p>\n<p>        这里因为我自己的原因，需要将main.exe放到主目录下才可正常运行</p>\n<div>\n<p class=\"img-center\"><img alt=\"\" height=\"187\" src=\"..\\..\\static\\image\\bf982a14dba5493b998820a1f9f38ffc.png\" width=\"452\"/></p>\n<p>​</p>\n</div>\n<p></p>\n<h1>四、总结与参考资料</h1>\n<h1>4.1 项目百度网盘：</h1>\n<p>链接：https://pan.baidu.com/s/1YYXzGpmCJkz43tYuki1wFQ <br/> 提取码：3gkw</p>\n<p><img alt=\"\" height=\"617\" src=\"..\\..\\static\\image\\f8aebebc85604b92a6965aeeb3312795.png\" width=\"1200\"/></p>\n<p>DeskTopPetEXE为带打包好的文件。</p>\n<p>DeskTopPet是打包前的文件。</p>\n<p></p>\n<h1>4.2 总结</h1>\n<p>写之前挺开心的，写的时候也挺开心的，写完之后就有点索然无味了。用python做一个简单的桌面宠物，我看到的方法除了我参考的这种加载GIF图外：</p>\n<p><a href=\"https://blog.csdn.net/dQCFKyQDXYm3F8rB0/article/details/114957009?spm=1001.2101.3001.6650.16&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-16-114957009-blog-123293381.topblog&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-16-114957009-blog-123293381.topblog&amp;utm_relevant_index=26\" title=\"Python 玩出花儿，把罗小黑养在自己桌面_AI科技大本营的博客-CSDN博客\">Python 玩出花儿，把罗小黑养在自己桌面_AI科技大本营的博客-CSDN博客</a></p>\n<p>还有一种通过加载图片帧的方式实现</p>\n<p><a href=\"https://blog.csdn.net/hxxjxw/article/details/105923371?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165218719816782248520785%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165218719816782248520785&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-105923371-null-null.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&amp;utm_term=python%E6%A1%8C%E9%9D%A2%E5%AE%A0%E7%89%A9&amp;spm=1018.2226.3001.4187\" title=\"Python实现桌面宠物_hxxjxw的博客-CSDN博客_python桌面宠物\">Python实现桌面宠物_hxxjxw的博客-CSDN博客_python桌面宠物</a></p>\n<p>这种通过图片帧的加载实现，需要编写一个自定义配置类cfg.py,很多人也不把这个东西代码给出来：</p>\n<pre><code class=\"language-python\">'''配置文件'''\n\nROOT_DIR = 'resources'\nACTION_DISTRIBUTION = [['1', '2', '3'],\n                  ['4', '5', '6', '7', '8', '9', '10', '11'],\n                  ['12', '13', '14'],\n                  ['15', '16', '17', '18']]\n\n\nPET_ACTIONS_MAP = {'pet_1': ACTION_DISTRIBUTION}\nfor i in range(1, 4):\n   PET_ACTIONS_MAP.update({'pet_%s' % i: ACTION_DISTRIBUTION})</code></pre>\n<p>这种方式宠物动作的实现，是根据上面这个配置文件进行配置的，比如[1,2,3]就代表这个pet_1文件夹下对应1，2，3号图片组成一个动作。我看到有人直接把这个当作一个动作赋值给宠物，然后图片就会莫名鬼畜。</p>\n<p>纯粹是因为无聊写着玩的，下次再试试能不能弄个3D的🙂</p>\n<p></p>\n<p></p>\n</div>\n</div>", "first_tag": "Python", "cpp": 0, "csharp": 0, "python": 1, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-05-11 15:12:20", "summary": "一、桌面宠物素材需要准备什么素材桌面宠物的各种动画效果，可以看作是由一个个动图拼接而成，我们需要准备多组动图来实现桌面宠物的动作切换。最好选取是白底的动图。介绍几种获得动图的方式通过实现视频转在导出的"}