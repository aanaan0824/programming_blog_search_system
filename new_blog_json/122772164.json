{"blogid": "122772164", "writerAge": "码龄5年", "writerBlogNum": "429", "writerCollect": "83315", "writerComment": "10756", "writerFan": "263787", "writerGrade": "9级", "writerIntegral": "51328", "writerName": "哪 吒", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_122772164.jpg", "writerRankTotal": "47", "writerRankWeekly": "2", "writerThumb": "22462", "writerVisitNum": "3854099", "blog_read_count": "29915", "blog_time": "已于 2022-02-14 22:47:18 修改", "blog_title": "Vue为何弃用经典的Ajax，选择新技术Axios？", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-light\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p></p>\n<div class=\"toc\">\n<h3>目录</h3>\n<ul><li><ul><li><a href=\"#_1\">一、选择什么网络模块?</a></li><li><a href=\"#axios_19\">二、axios功能特点</a></li><li><a href=\"#axios_27\">三、axios支持多种请求方式</a></li><li><a href=\"#_38\">四、发送并发请求</a></li><li><a href=\"#_64\">五、全局配置</a></li><li><a href=\"#axios_87\">六、创建axios实例</a></li><li><a href=\"#_118\">七、常见的配置选项</a></li><li><a href=\"#axios_175\">八、axios的封装</a></li><li><a href=\"#request_197\">九、封装一个request函数</a></li><li><ul><li><a href=\"#1_198\">1、传入回调函数</a></li><li><a href=\"#2_231\">2、传入一个参数进行回调</a></li><li><a href=\"#3Promise_267\">3、Promise用法</a></li><li><a href=\"#4Promise_299\">4、简化Promise</a></li></ul>\n</li><li><a href=\"#axios_316\">十、axios中的拦截器</a></li><li><a href=\"#1024Java_354\">十一、关注公众号哪吒编程，回复1024，获取Java学习资料，还有不定期的送书活动</a></li><li><ul><li><a href=\"#80_365\">```为什么80%的码农做不了架构师？&gt;&gt;&gt;```</a></li><li><a href=\"#Java__httpsblogcsdnnetguorui_javaarticledetails120098618_366\">[Java专栏目录 | 点击这里](https://blog.csdn.net/guorui_java/article/details/120098618)</a></li></ul>\n</li></ul>\n</li></ul>\n</div>\n<p></p>\n<h2><a id=\"_1\"></a>一、选择什么网络模块?</h2>\n<p>发送网络请求的方式有很多，下面来简单介绍一下：</p>\n<p>1、传统的Ajax是基于XMLHttpRequest（XHR）</p>\n<p>2、jQuery - Ajax</p>\n<p>为什么不适用jQuery的Ajax？</p>\n<p>在vue开发中不需要使用jQuery，因为jQuery很重量级。</p>\n<p>3、vue官方在Vue1.x的时候，推出了Vue-resource。</p>\n<p>Vue-resource角jQuery轻便很多，但在vue2.x之后，尤雨溪对Vue-resource不维护了，简言之，就是弃用了。</p>\n<p>4、尤雨溪推荐使用axios。</p>\n<h2><a id=\"axios_19\"></a>二、axios功能特点</h2>\n<ol><li>在浏览器中发送XMLHttpRequest请求</li><li>在node.js中发送http请求</li><li>支持Promise API</li><li>支持拦截请求和响应</li><li>转换请求和响应数据</li></ol>\n<h2><a id=\"axios_27\"></a>三、axios支持多种请求方式</h2>\n<ol><li><code>axios(config)</code></li><li><code>axios.request(config)</code></li><li><code>axios.get(url,[,config])</code></li><li><code>axios.delete(url,[,config])</code></li><li><code>axios.head(url,[,config])</code></li><li><code>axios.post(url,[,data[, config]])</code></li><li><code>axios.put(url,[,data[, config]])</code></li><li><code>axios.patch(url,[,data[, config]])</code></li></ol>\n<h2><a id=\"_38\"></a>四、发送并发请求</h2>\n<p>有的时候，会同时发送多个请求。</p>\n<p>使用axios.all，可以放入多个请求的数组。</p>\n<p>axios.all([])返回的是一个数组，使用axios.spread可以将数组[res1,res2]展开为res1和res2。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n\tname<span class=\"token operator\">:</span> <span class=\"token string\">'app'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token function\">created</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\taxios<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://127.0.0.1:8080/getUserList'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\taxios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://127.0.0.1:8080/getUserPage'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\tparams<span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>pageNum<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> pageSize<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">.</span><span class=\"token function\">spread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res1<span class=\"token punctuation\">,</span>res2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res1<span class=\"token punctuation\">)</span>\n\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res2<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"_64\"></a>五、全局配置</h2>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{<!-- --></span>\n\tname<span class=\"token operator\">:</span> <span class=\"token string\">'app'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token function\">created</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">// 提取全局配置</span>\n\t\taxios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>baseURL <span class=\"token operator\">=</span> <span class=\"token string\">'http://127.0.0.1:8080'</span>\n\t\t\n\t\taxios<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/getUserList'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\taxios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/getUserPage'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\t\t\t\tparams<span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>pageNum<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> pageSize<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">.</span><span class=\"token function\">spread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res1<span class=\"token punctuation\">,</span>res2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res1<span class=\"token punctuation\">)</span>\n\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res2<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"axios_87\"></a>六、创建axios实例</h2>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> instance1 <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n  baseURL<span class=\"token operator\">:</span> <span class=\"token string\">'http://127.0.0.1:8080'</span><span class=\"token punctuation\">,</span>\n  timeout<span class=\"token operator\">:</span> <span class=\"token number\">5000</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">instance1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n  url<span class=\"token operator\">:</span> <span class=\"token string\">'/home/getUserList'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">instance1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n  url<span class=\"token operator\">:</span> <span class=\"token string\">'/home/getUserPage'</span><span class=\"token punctuation\">,</span>\n  params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'pop'</span><span class=\"token punctuation\">,</span>\n    page<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">const</span> instance2 <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n  baseURL<span class=\"token operator\">:</span> <span class=\"token string\">'http://127.0.0.1:8081'</span><span class=\"token punctuation\">,</span>\n  timeout<span class=\"token operator\">:</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// headers: {}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"_118\"></a>七、常见的配置选项</h2>\n<p>1、请求地址</p>\n<p><code>\\url:'http://127.0.0.1:8080/getUserList'</code></p>\n<p>2、请求类型</p>\n<p><code>method:'get'</code></p>\n<p>3、请求路径</p>\n<p><code>baseURL:'http://127.0.0.1:8080'</code></p>\n<p>4、请求前的数据处理</p>\n<p><code>transformRequest:[function(data){}],</code></p>\n<p>5、请求后的数据处理</p>\n<p><code>transformResponse: [function(data){}],</code></p>\n<p>6、自定义的请求头</p>\n<p><code>headers:{'x-Requested-With':'XMLHttpRequest'},</code></p>\n<p>7、URL查询对象</p>\n<p><code>params:{ id: 1 },</code></p>\n<p>8、查询对象序列化函数</p>\n<p><code>paramsSerializer: function(params){ }</code></p>\n<p>9、request body</p>\n<p><code>data: { key: 'aa'},</code></p>\n<p>10、超时设置s</p>\n<p><code>timeout: 5000,</code></p>\n<p>11、跨域是否带Token</p>\n<p><code>withCredentials: false,</code></p>\n<p>12、自定义请求处理</p>\n<p><code>adapter: function(resolve, reject, config){},</code></p>\n<p>13、身份验证信息</p>\n<p><code>auth: { uname: '', pwd: '12'},</code></p>\n<p>14、响应的数据格式 json / blob /document /arraybuffer / text / stream</p>\n<p><code>responseType: 'json',</code></p>\n<h2><a id=\"axios_175\"></a>八、axios的封装</h2>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">option</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t<span class=\"token comment\">//1.创建sxios实例</span>\n\t\t<span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n\t\t\turl<span class=\"token operator\">:</span> <span class=\"token string\">'api'</span><span class=\"token punctuation\">,</span>\n\t\t\ttimeout<span class=\"token operator\">:</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">,</span>\n\t\t\theaders<span class=\"token operator\">:</span> <span class=\"token string\">''</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token comment\">//2.传入对象进行网络请求</span>\n\t\t<span class=\"token function\">instance</span><span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n\t\t\t<span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"request_197\"></a>九、封装一个request函数</h2>\n<h3><a id=\"1_198\"></a>1、传入回调函数</h3>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config<span class=\"token punctuation\">,</span> success<span class=\"token punctuation\">,</span> failure</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 1.创建axios的实例</span>\n  <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n    baseURL<span class=\"token operator\">:</span> <span class=\"token string\">'http://127.0.0.1:8080'</span><span class=\"token punctuation\">,</span>\n    timeout<span class=\"token operator\">:</span> <span class=\"token number\">5000</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 发送真正的网络请求</span>\n  <span class=\"token function\">instance</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function\">success</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token function\">failure</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>调用封装好的request模块</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span>request<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./network/request\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n  url<span class=\"token operator\">:</span> <span class=\"token string\">'/home/multidata'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"2_231\"></a>2、传入一个参数进行回调</h3>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 1.创建axios的实例</span>\n  <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n    baseURL<span class=\"token operator\">:</span> <span class=\"token string\">'http://127.0.0.1:8080'</span><span class=\"token punctuation\">,</span>\n    timeout<span class=\"token operator\">:</span> <span class=\"token number\">5000</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 发送真正的网络请求</span>\n  <span class=\"token function\">instance</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>baseConfig<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n      config<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n      config<span class=\"token punctuation\">.</span><span class=\"token function\">failure</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span>request<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./network/request\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n  baseConfig<span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">failure</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"3Promise_267\"></a>3、Promise用法</h3>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 1.创建axios的实例</span>\n    <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n      baseURL<span class=\"token operator\">:</span> <span class=\"token string\">'http://127.0.0.1:8080'</span><span class=\"token punctuation\">,</span>\n      timeout<span class=\"token operator\">:</span> <span class=\"token number\">5000</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 发送真正的网络请求</span>\n    <span class=\"token function\">instance</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-javascript\"><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n  url<span class=\"token operator\">:</span> <span class=\"token string\">'/home/multidata'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// console.log(err);</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3><a id=\"4Promise_299\"></a>4、简化Promise</h3>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 1.创建axios的实例</span>\n    <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n      baseURL<span class=\"token operator\">:</span> <span class=\"token string\">'http://127.0.0.1:8080'</span><span class=\"token punctuation\">,</span>\n      timeout<span class=\"token operator\">:</span> <span class=\"token number\">5000</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 发送真正的网络请求</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">instance</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"axios_316\"></a>十、axios中的拦截器</h2>\n<p>请求拦截的作用是什么？</p>\n<ol><li>比如config中的一些信息不符合服务器的要求</li><li>比如每次发送网络请求时, 都希望在界面中显示一个请求的图标</li><li>某些网络请求(比如登录(token)), 必须携带一些特殊的信息</li></ol>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">// 1.创建axios的实例</span>\n  <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n    baseURL<span class=\"token operator\">:</span> <span class=\"token string\">'http://127.0.0.1:8080'</span><span class=\"token punctuation\">,</span>\n    timeout<span class=\"token operator\">:</span> <span class=\"token number\">5000</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 2.axios的拦截器</span>\n  <span class=\"token comment\">// 2.1.请求拦截的作用</span>\n  instance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// console.log(config);</span>\n    <span class=\"token keyword\">return</span> config\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// console.log(err);</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 2.2.响应拦截</span>\n  instance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// console.log(res);</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>data\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 3.发送真正的网络请求</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">instance</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a id=\"1024Java_354\"></a>十一、关注公众号哪吒编程，回复1024，获取Java学习资料，还有不定期的送书活动</h2>\n<ul><li>数据结构和算法基础</li><li>人工智能数据基础与Python机器学习实战</li><li>机器学习数学基础</li><li>node.js入门指南<br/> <img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\89663365e8f04dc9b43a7acf61c895f1.png\"/></li></ul>\n<br/>\n<h3><a id=\"80_365\"></a><code>为什么80%的码农做不了架构师？&gt;&gt;&gt;</code></h3>\n<h3><a id=\"Java__httpsblogcsdnnetguorui_javaarticledetails120098618_366\"></a><a href=\"https://blog.csdn.net/guorui_java/article/details/120098618\">Java专栏目录 | 点击这里</a></h3>\n<p><img alt=\"在这里插入图片描述\" src=\"https://img-blog.csdnimg.cn/75673f6242014aa58c1bb1b442cbac08.gif#pic_center\"/></p>\n<center>\n 关注公众号【哪吒编程】，回复1024，获取Java学习路线思维导图、大厂面试真题、加入万粉计划交流群、一起学习进步 \n</center>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 1, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-02-14 22:47:18", "summary": "目录一、选择什么网络模块二、功能特点三、支持多种请求方式四、发送并发请求五、全局配置六、创建实例七、常见的配置选项八、的封装九、封装一个函数、传入回调函数、传入一个参数进行回调、用法、简化十、中的拦截"}