{"blogid": "123770512", "writerAge": "码龄2年", "writerBlogNum": "48", "writerCollect": "2512", "writerComment": "4018", "writerFan": "8742", "writerGrade": "6级", "writerIntegral": "7335", "writerName": "小杰312", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123770512.jpg", "writerRankTotal": "3536", "writerRankWeekly": "8086", "writerThumb": "2664", "writerVisitNum": "112398", "blog_read_count": "2666", "blog_time": "已于 2022-04-25 12:16:26 修改", "blog_title": "MYSQL必知必会,详尽入门,一文帮你学会SQL必知必会", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<p id=\"main-toc\"><strong>目录</strong></p>\n<p id=\"%E5%89%8D%E8%A8%80-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></p>\n<p id=\"%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E6%9C%AF%E8%AF%AD-toc\" style=\"margin-left:0px;\"><a href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E6%9C%AF%E8%AF%AD\">数据库的概念和术语</a></p>\n<p id=\"SQL%E8%AF%AD%E8%A8%80%E5%92%8C%E7%BB%84%E6%88%90-toc\" style=\"margin-left:0px;\"><a href=\"#SQL%E8%AF%AD%E8%A8%80%E5%92%8C%E7%BB%84%E6%88%90\">SQL语言和组成</a></p>\n<p id=\"DDL-toc\" style=\"margin-left:40px;\"><a href=\"#DDL\">DDL</a></p>\n<p id=\"show%20%3A%C2%A0%20%E5%B1%95%E7%A4%BA%E5%BD%93%E5%89%8D%E5%B7%B2%E6%9C%89%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E6%88%96%E8%80%85%E8%A1%A8-toc\" style=\"margin-left:80px;\"><a href=\"#show%20%3A%C2%A0%20%E5%B1%95%E7%A4%BA%E5%BD%93%E5%89%8D%E5%B7%B2%E6%9C%89%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E6%88%96%E8%80%85%E8%A1%A8\">show :  展示当前已有的数据库或者表</a></p>\n<p id=\"create%20%EF%BC%9A%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E6%88%96%E8%80%85%E4%B8%80%E4%B8%AA%E8%A1%A8%C2%A0-toc\" style=\"margin-left:80px;\"><a href=\"#create%20%EF%BC%9A%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E6%88%96%E8%80%85%E4%B8%80%E4%B8%AA%E8%A1%A8%C2%A0\">create ：创建一个数据库或者一个表 </a></p>\n<p id=\"drop%20%EF%BC%9A%E5%88%A0%E9%99%A4%E8%A1%A8%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E8%B1%A1%E6%88%96%E8%80%85%E8%A7%86%E5%9B%BE-toc\" style=\"margin-left:80px;\"><a href=\"#drop%20%EF%BC%9A%E5%88%A0%E9%99%A4%E8%A1%A8%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E8%B1%A1%E6%88%96%E8%80%85%E8%A7%86%E5%9B%BE\">drop ：删除表、数据库对象或者视图</a></p>\n<p id=\"alter%20%EF%BC%9A%E4%BF%AE%E6%94%B9%E7%8E%B0%E6%9C%89%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E8%B1%A1%EF%BC%8C%E4%BE%8B%E5%A6%82%C2%A0%E4%BF%AE%E6%94%B9%E8%A1%A8%E7%9A%84%E5%B1%9E%E6%80%A7%E6%88%96%E8%80%85%E5%AD%97%E6%AE%B5%20(%E5%88%97)-toc\" style=\"margin-left:80px;\"><a href=\"#alter%20%EF%BC%9A%E4%BF%AE%E6%94%B9%E7%8E%B0%E6%9C%89%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E8%B1%A1%EF%BC%8C%E4%BE%8B%E5%A6%82%C2%A0%E4%BF%AE%E6%94%B9%E8%A1%A8%E7%9A%84%E5%B1%9E%E6%80%A7%E6%88%96%E8%80%85%E5%AD%97%E6%AE%B5%20%28%E5%88%97%29\">alter ：修改现有的数据库对象，例如 修改表的属性或者字段 (列)</a></p>\n<p id=\"DML%C2%A0-toc\" style=\"margin-left:40px;\"><a href=\"#DML%C2%A0\">DML </a></p>\n<p id=\"insert%20%EF%BC%9A%E6%8F%92%E5%85%A5%E8%AE%B0%E5%BD%95-toc\" style=\"margin-left:80px;\"><a href=\"#insert%20%EF%BC%9A%E6%8F%92%E5%85%A5%E8%AE%B0%E5%BD%95\">insert ：插入记录</a></p>\n<p id=\"update%20%EF%BC%9A%E6%9B%B4%E6%96%B0%E8%AE%B0%E5%BD%95-toc\" style=\"margin-left:80px;\"><a href=\"#update%20%EF%BC%9A%E6%9B%B4%E6%96%B0%E8%AE%B0%E5%BD%95\">update ：更新记录</a></p>\n<p id=\"delete%20%EF%BC%9A%E5%88%A0%E9%99%A4%E8%AE%B0%E5%BD%95-toc\" style=\"margin-left:80px;\"><a href=\"#delete%20%EF%BC%9A%E5%88%A0%E9%99%A4%E8%AE%B0%E5%BD%95\">delete ：删除记录</a></p>\n<p id=\"DQL-toc\" style=\"margin-left:40px;\"><a href=\"#DQL\">DQL</a></p>\n<p id=\"%C2%A0select%20%EF%BC%9A%E4%BB%8E%E4%B8%80%E4%B8%AA%E6%88%96%E8%80%85%E5%A4%9A%E4%B8%AA%E8%A1%A8%E4%B8%AD%E6%A3%80%E7%B4%A2%E7%89%B9%E5%AE%9A%E7%9A%84%E8%AE%B0%E5%BD%95-toc\" style=\"margin-left:40px;\"><a href=\"#%C2%A0select%20%EF%BC%9A%E4%BB%8E%E4%B8%80%E4%B8%AA%E6%88%96%E8%80%85%E5%A4%9A%E4%B8%AA%E8%A1%A8%E4%B8%AD%E6%A3%80%E7%B4%A2%E7%89%B9%E5%AE%9A%E7%9A%84%E8%AE%B0%E5%BD%95\">select ：从一个或者多个表中检索特定的记录</a></p>\n<p id=\"select%20%E6%8C%87%E5%AE%9A%E5%88%97%E6%9F%A5%E8%AF%A2-toc\" style=\"margin-left:80px;\"><a href=\"#select%20%E6%8C%87%E5%AE%9A%E5%88%97%E6%9F%A5%E8%AF%A2\">select 指定列查询</a></p>\n<p id=\"select%20%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2-toc\" style=\"margin-left:80px;\"><a href=\"#select%20%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2\">select 条件查询</a></p>\n<p id=\"select%20%E5%8E%BB%E9%87%8D%E6%9F%A5%E8%AF%A2-toc\" style=\"margin-left:80px;\"><a href=\"#select%20%E5%8E%BB%E9%87%8D%E6%9F%A5%E8%AF%A2\">select 去重查询</a></p>\n<p id=\"select%20%E6%8E%92%E5%BA%8F%E6%9F%A5%E8%AF%A2%20(%E6%9F%A5%E8%AF%A2%E5%90%8E%E6%8E%92%E5%BA%8F)-toc\" style=\"margin-left:80px;\"><a href=\"#select%20%E6%8E%92%E5%BA%8F%E6%9F%A5%E8%AF%A2%20%28%E6%9F%A5%E8%AF%A2%E5%90%8E%E6%8E%92%E5%BA%8F%29\">select 排序查询 (查询后排序)</a></p>\n<p id=\"select%20%E8%B5%B7%E5%88%AB%E5%90%8D-toc\" style=\"margin-left:80px;\"><a href=\"#select%20%E8%B5%B7%E5%88%AB%E5%90%8D\">select 起别名</a></p>\n<p id=\"select%20%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2-toc\" style=\"margin-left:80px;\"><a href=\"#select%20%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2\">select 聚合函数分组查询</a></p>\n<p id=\"select%20%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2-toc\" style=\"margin-left:80px;\"><a href=\"#select%20%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2\">select 分页查询</a></p>\n<p id=\"%E5%A4%9A%E8%A1%A8%E7%90%86%E8%A7%A3%E5%8A%A0%E5%9F%BA%E6%93%8D-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%A4%9A%E8%A1%A8%E7%90%86%E8%A7%A3%E5%8A%A0%E5%9F%BA%E6%93%8D\">多表理解加基操</a></p>\n<p id=\"%E5%A4%9A%E8%A1%A8%E5%88%86%E7%B1%BB%E5%92%8C%E7%90%86%E8%A7%A3-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%A4%9A%E8%A1%A8%E5%88%86%E7%B1%BB%E5%92%8C%E7%90%86%E8%A7%A3\">多表分类和理解</a></p>\n<p id=\"%E5%A4%9A%E8%A1%A8%E5%85%B3%E7%B3%BB%E5%88%86%E7%B1%BB-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%A4%9A%E8%A1%A8%E5%85%B3%E7%B3%BB%E5%88%86%E7%B1%BB\">多表关系分类</a></p>\n<p id=\"%E4%B8%80%E5%AF%B9%E4%B8%80%E5%85%B3%E7%B3%BB-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%B8%80%E5%AF%B9%E4%B8%80%E5%85%B3%E7%B3%BB\">一对一关系</a></p>\n<p id=\"%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB\">一对多关系    (一个班级多个学生, 一个学生对应一个班级)</a></p>\n<p id=\"%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB\">多对多关系</a></p>\n<p id=\"%E8%BF%9E%E8%A1%A8%E6%9F%A5%E8%AF%A2-toc\" style=\"margin-left:40px;\"><a href=\"#%E8%BF%9E%E8%A1%A8%E6%9F%A5%E8%AF%A2\">连表查询   (集合运算)</a></p>\n<p id=\"%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87-toc\" style=\"margin-left:80px;\"><a href=\"#%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87\">数据准备</a></p>\n<p id=\"%E7%AC%9B%E5%8D%A1%E5%B0%94%E7%A7%AF%C2%A0%20(A%20*%20B)%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%C2%A0-toc\" style=\"margin-left:80px;\"><a href=\"#%E7%AC%9B%E5%8D%A1%E5%B0%94%E7%A7%AF%C2%A0%20%28A%20*%20B%29%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%C2%A0\">笛卡尔积  (A * B)        </a></p>\n<p id=\"inner%20join%C2%A0%20on-toc\" style=\"margin-left:80px;\"><a href=\"#inner%20join%C2%A0%20on\">inner join  on</a></p>\n<p id=\"left%20outer%20join%C2%A0%20on-toc\" style=\"margin-left:80px;\"><a href=\"#left%20outer%20join%C2%A0%20on\">left outer join  on</a></p>\n<p id=\"right%20outer%20join%C2%A0%20on-toc\" style=\"margin-left:80px;\"><a href=\"#right%20outer%20join%C2%A0%20on\">right outer join  on</a></p>\n<p id=\"%E5%AD%90%E6%9F%A5%E8%AF%A2%20(%E5%B5%8C%E5%A5%97%E6%9F%A5%E8%AF%A2%2C%E5%90%88%E5%B9%B6%E6%9F%A5%E8%AF%A2)-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%AD%90%E6%9F%A5%E8%AF%A2%20%28%E5%B5%8C%E5%A5%97%E6%9F%A5%E8%AF%A2%2C%E5%90%88%E5%B9%B6%E6%9F%A5%E8%AF%A2%29\">子查询 (嵌套查询,合并查询)</a></p>\n<p id=\"%E6%80%BB%E7%BB%93-toc\" style=\"margin-left:0px;\"><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></p>\n<hr id=\"hr-toc\"/>\n<p></p>\n<h1 id=\"%E5%89%8D%E8%A8%80\">前言</h1>\n<blockquote>\n<ul><li><strong>各位友友们, 本文可能文章会很长，是小杰对于自己数据库入门基操所学的总结随笔, 是小杰学习数据库以来的一个总和吧, 学会这些数据库的基本的各种操作, 怎删改查基本上是没有什么问题了, 但是基本仅仅也只是适合像小杰一样的数据库入门选手，像<span style=\"color:#fe2c24;\">查询优化</span>,  <span style=\"color:#fe2c24;\">事务， 触发器, SQL语句执行过程等等性能优化方面的东西本文没有涉及, 后序如果小杰学到了也会总结出来跟大家做分享的，  </span></strong></li><li><strong><span style=\"color:#0d0016;\">文章很长，希望友友们可以耐心读下去, 感谢您的阅读，你们的阅读，探讨，分享一直是小杰创作的动力</span></strong></li></ul>\n</blockquote>\n<h1 id=\"%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E6%9C%AF%E8%AF%AD\">数据库的概念和术语</h1>\n<blockquote>\n<ul><li><strong>按照数据结构来组织、存储和管理数据的仓库；是一个长期存储在计算机内的、有组织的、可共享 的、统一管理的大量数据的集合</strong></li><li><strong><span style=\"color:#fe2c24;\">抓住   长期存储   +   方便管理大量数据   (支持并发访问)</span></strong>  <span style=\"color:#fe2c24;\"><strong>相比磁盘更加快速</strong></span></li><li><strong>数据库：数据库是一些关联表的集合;</strong></li><li><strong>数据表：表是数据的矩阵;</strong></li><li><strong>列：一列包含相同类型的数据;</strong></li><li><strong>行：或者称为记录是一组相关的数据;</strong></li><li><strong>主键：主键是唯一的；一个数据表只能包含一个主键;   <span style=\"color:#fe2c24;\">(primary key 非空去重唯一性) </span></strong></li><li><strong>外键：外键用来关联两个表，来保证参照完整性；MyISAM存储引擎本身并不支持外键，只起到注 释作用；而innodb完整支持外键;    <span style=\"color:#fe2c24;\">(foreign key 存储在从表, 从表和主表的关系列，关联列)</span></strong></li><li><strong>复合键：或称组合键；将多个列(字段) 指定为一个索引键;</strong></li><li><strong>索引：用于快速访问数据表的数据；索引是对表中的一列或者多列的值进行排序的一种结构;     <span style=\"color:#fe2c24;\">(抓住. 索引是为了方便排序的一列或多列数据)</span></strong></li></ul>\n</blockquote>\n<h1 id=\"SQL%E8%AF%AD%E8%A8%80%E5%92%8C%E7%BB%84%E6%88%90\">SQL语言和组成</h1>\n<blockquote>\n<ul><li><strong>用于存取数据以及查询、更新和管理关系数据库系统。SQL是关系数据 库系统的标准语言</strong></li><li><strong><span style=\"color:#fe2c24;\">抓住一点,  SQL就是用来操作数据库的一门语言就OK，关系型数据库标准语言</span></strong></li><li><strong><span style=\"color:#0d0016;\">SQL 命令包含:   </span>DQL、DML、DDL、DCL以及TCL </strong><span style=\"color:#fe2c24;\">  本文仅介绍实操部分</span></li></ul>\n<h2 id=\"DDL\">DDL</h2>\n<ul><li><strong>Data Define Languge - 数据定义语言, 用于定义  <span style=\"color:#fe2c24;\">数据库，数据表</span></strong></li><li> <h3 id=\"show%20%3A%C2%A0%20%E5%B1%95%E7%A4%BA%E5%BD%93%E5%89%8D%E5%B7%B2%E6%9C%89%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E6%88%96%E8%80%85%E8%A1%A8\"><span style=\"color:#0d0016;\">show :  展示当前已有的数据库或者表</span></h3> </li><li><span style=\"color:#fe2c24;\"><strong>show databases;     显示所有数据库</strong></span></li></ul>\n<pre><code class=\"language-sql\">show databases;\n# 显示所有数据库\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| hello              |\n| mysql              |\n| performance_schema |\n| sys                |\n| test               |\n| xiaojie            |\n+--------------------+\n7 rows in set (0.00 sec)</code></pre>\n<ul><li><strong><span style=\"color:#fe2c24;\">show tables;  显示当前选择数据库的所有数据表</span></strong></li></ul>\n<pre><code class=\"language-sql\">use tangyujie;\nDatabase changed\nshow tables;\nEmpty set (0.00 sec)\n</code></pre>\n<ul><li><span style=\"color:#fe2c24;\"><strong>use 数据库名称;   指定选择一个数据库, 选择具体的数据库操作</strong></span></li></ul>\n<pre><code class=\"language-sql\">use test;\n# 指定选择一个数据库\nDatabase changed</code></pre>\n<ul><li> <h3 id=\"create%20%EF%BC%9A%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E6%88%96%E8%80%85%E4%B8%80%E4%B8%AA%E8%A1%A8%C2%A0\"><strong>create ：<span style=\"color:#fe2c24;\">创建一个数据库或者一个表 </span></strong></h3> </li><li><strong><span style=\"color:#fe2c24;\">create database 数据库名;    不安全的创建一个数据库 </span>(<span style=\"color:#fe2c24;\">如果表已经存在会报错</span>)</strong></li><li><strong>加 if not exists 检测, 如果数据库已存在就不创建，否则创建 </strong><strong>(<span style=\"color:#fe2c24;\">不会报错, 只是提示</span>)</strong></li></ul>\n<pre><code class=\"language-sql\">create database if not exists tangyujie;\n# 创建tangyujie数据库如果不存在\nQuery OK, 1 row affected (0.00 sec)\n\nshow databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| hello              |\n| mysql              |\n| performance_schema |\n| sys                |\n| tangyujie          |\n| test               |\n| xiaojie            |\n+--------------------+\n8 rows in set (0.00 sec)</code></pre>\n<ul><li><strong><span style=\"color:#fe2c24;\">create table 表名;    不安全的创建一个表 </span>(<span style=\"color:#fe2c24;\">如果表已经存在会报错</span>)</strong></li><li><strong>加 if not exists 检测, 如果数据表已存在就不创建，否则创建  (<span style=\"color:#fe2c24;\">不会报错, 只是提示</span>)</strong></li></ul>\n<pre><code class=\"language-sql\">create table if not exists STU (\n\tid int,\n\tname varchar(10),\n\tage tinyint\n) engine = innodb default charset = utf8mb4;\n\nshow tables;\n+---------------------+\n| Tables_in_tangyujie |\n+---------------------+\n| stu                 |\n+---------------------+\n1 row in set (0.00 sec)</code></pre>\n<ul><li> <h3 id=\"drop%20%EF%BC%9A%E5%88%A0%E9%99%A4%E8%A1%A8%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E8%B1%A1%E6%88%96%E8%80%85%E8%A7%86%E5%9B%BE\">drop ：删除表、数据库对象或者视图</h3> </li><li><strong><span style=\"color:#fe2c24;\">drop table 表名;        不安全的删除一个表 </span>(<span style=\"color:#fe2c24;\">如果表不存在会报错</span>)</strong></li><li><strong><span style=\"color:#0d0016;\">加上if exists  检测,  如果表不存在不会报错 (会提示waring)</span></strong></li></ul>\n<pre><code class=\"language-sql\">drop table stu;\nQuery OK, 0 rows affected (0.01 sec)\n\nshow tables;\nEmpty set (0.00 sec)\n\ndrop table if exists stu;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)</code></pre>\n<ul><li><strong><span style=\"color:#fe2c24;\">drop database 数据库名;        不安全的删除一个库 </span>(<span style=\"color:#fe2c24;\">如果库不存在会报错</span>)</strong></li><li><strong><span style=\"color:#0d0016;\">加上if exists  检测,  如果表不存在不会报错 (会提示waring)</span></strong></li><li><strong><span style=\"color:#fe2c24;\">注意：删库跑路不是吹出来的，不要轻易使用drop </span></strong></li></ul>\n<pre><code class=\"language-sql\">drop database tangyujie;\nQuery OK, 0 rows affected (0.01 sec)\n\nshow databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| hello              |\n| mysql              |\n| performance_schema |\n| sys                |\n| test               |\n| xiaojie            |\n+--------------------+\n7 rows in set (0.00 sec)</code></pre>\n<ul><li> <h3 id=\"alter%20%EF%BC%9A%E4%BF%AE%E6%94%B9%E7%8E%B0%E6%9C%89%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E8%B1%A1%EF%BC%8C%E4%BE%8B%E5%A6%82%C2%A0%E4%BF%AE%E6%94%B9%E8%A1%A8%E7%9A%84%E5%B1%9E%E6%80%A7%E6%88%96%E8%80%85%E5%AD%97%E6%AE%B5%20(%E5%88%97)\"><strong>alter ：修改现有的数据库对象，例如 <span style=\"color:#fe2c24;\">修改表的属性或者字段 (列)</span></strong></h3> </li><li><strong><span style=\"color:#fe2c24;\">desc 数据表名;   展示数据表的表结构</span></strong></li></ul>\n<pre><code class=\"language-sql\"> desc stu;\n+-------+-------------+------+-----+---------+-------+\n| Field | Type        | Null | Key | Default | Extra |\n+-------+-------------+------+-----+---------+-------+\n| id    | int(11)     | YES  |     | NULL    |       |\n| name  | varchar(10) | YES  |     | NULL    |       |\n| age   | tinyint(4)  | YES  |     | NULL    |       |\n+-------+-------------+------+-----+---------+-------+\n3 rows in set (0.00 sec)\n</code></pre>\n<ul><li><span style=\"color:#fe2c24;\"><strong>alter  table  指定表名 add 新列名 列类型(类型长度); 添加一列字段\\</strong></span></li><li><strong><span style=\"color:#0d0016;\">新增一列grade varchar(5); 等级列, 成绩等级</span></strong></li></ul>\n<pre><code class=\"language-sql\">alter table stu add grade varchar(5);\nQuery OK, 0 rows affected (0.02 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\ndesc stu;\n+-------+-------------+------+-----+---------+-------+\n| Field | Type        | Null | Key | Default | Extra |\n+-------+-------------+------+-----+---------+-------+\n| id    | int(11)     | YES  |     | NULL    |       |\n| name  | varchar(10) | YES  |     | NULL    |       |\n| age   | tinyint(4)  | YES  |     | NULL    |       |\n| grade | varchar(5)  | YES  |     | NULL    |       |\n+-------+-------------+------+-----+---------+-------+\n4 rows in set (0.00 sec)\n</code></pre>\n<ul><li><strong><span style=\"color:#fe2c24;\">alter table  指定表名  modify  指定列名(字段)  新的类型(新的长度)    -- 修改类型</span></strong></li><li><span style=\"color:#0d0016;\"><strong>将  grade 改为 int 类型的 成绩</strong></span></li></ul>\n<pre><code class=\"language-sql\">alter table stu modify grade int(11);\nQuery OK, 0 rows affected (0.02 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\ndesc stu;\n+-------+-------------+------+-----+---------+-------+\n| Field | Type        | Null | Key | Default | Extra |\n+-------+-------------+------+-----+---------+-------+\n| id    | int(11)     | YES  |     | NULL    |       |\n| name  | varchar(10) | YES  |     | NULL    |       |\n| age   | tinyint(4)  | YES  |     | NULL    |       |\n| grade | int(11)     | YES  |     | NULL    |       |\n+-------+-------------+------+-----+---------+-------+\n4 rows in set (0.00 sec)</code></pre>\n<ul><li><strong><span style=\"color:#fe2c24;\">alter  table 指定表名  change  旧的列名  新的列名  新类型(类型长度)  --修改列名+类型</span></strong></li><li><strong><span style=\"color:#0d0016;\">将 grade 列改成  addr 列 类型改成  varchar(10);</span></strong></li></ul>\n<pre><code class=\"language-sql\">alter table stu change grade addr varchar(10);\nQuery OK, 0 rows affected (0.02 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\ndesc stu;\n+-------+-------------+------+-----+---------+-------+\n| Field | Type        | Null | Key | Default | Extra |\n+-------+-------------+------+-----+---------+-------+\n| id    | int(11)     | YES  |     | NULL    |       |\n| name  | varchar(10) | YES  |     | NULL    |       |\n| age   | tinyint(4)  | YES  |     | NULL    |       |\n| addr  | varchar(10) | YES  |     | NULL    |       |\n+-------+-------------+------+-----+---------+-------+\n4 rows in set (0.00 sec)</code></pre>\n<ul><li><strong><span style=\"color:#fe2c24;\">alter  table  指定表名  drop  指定列名;   -- 将指定列删除</span></strong></li></ul>\n<pre><code class=\"language-sql\">alter table stu drop addr;\nQuery OK, 0 rows affected (0.02 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\ndesc stu;\n+-------+-------------+------+-----+---------+-------+\n| Field | Type        | Null | Key | Default | Extra |\n+-------+-------------+------+-----+---------+-------+\n| id    | int(11)     | YES  |     | NULL    |       |\n| name  | varchar(10) | YES  |     | NULL    |       |\n| age   | tinyint(4)  | YES  |     | NULL    |       |\n+-------+-------------+------+-----+---------+-------+\n3 rows in set (0.00 sec)\n</code></pre>\n<h2 id=\"DML%C2%A0\">DML </h2>\n<ul><li><strong>Data Manipulate Language - 数据操作语言  (<span style=\"color:#fe2c24;\">记录的增删改查</span>)</strong></li><li> <h3 id=\"insert%20%EF%BC%9A%E6%8F%92%E5%85%A5%E8%AE%B0%E5%BD%95\"><strong>insert ：插入记录</strong></h3> </li><li><strong><span style=\"color:#fe2c24;\">insert  into  指定表(指定列)  values(指定值);</span></strong></li><li><span style=\"color:#0d0016;\"><strong>指定插入一条记录 id 1001 name = 孙悟空 age = 100</strong></span></li></ul>\n<pre><code class=\"language-sql\">insert into stu(id, name, age) values(1001, '孙悟空', 100);\nQuery OK, 1 row affected (0.01 sec)\n\nselect * from stu;\n+------+-----------+------+\n| id   | name      | age  |\n+------+-----------+------+\n| 1001 | 孙悟空    |  100 |\n+------+-----------+------+\n1 row in set (0.00 sec)\n</code></pre>\n<ul><li><strong>values  赋值顺序需要和指定列顺序保持一致</strong></li></ul>\n<pre><code class=\"language-sql\">insert into stu(name, id, age) values('沙和尚', 1002, 100);\nQuery OK, 1 row affected (0.00 sec)\n\nselect * from stu;\n+------+-----------+------+\n| id   | name      | age  |\n+------+-----------+------+\n| 1001 | 孙悟空    |  100 |\n| 1002 | 沙和尚    |  100 |\n+------+-----------+------+\n2 rows in set (0.00 sec)</code></pre>\n<ul><li><span style=\"color:#0d0016;\"><strong>不指定列, 默认按照所有列顺序插入 values</strong></span></li></ul>\n<pre><code class=\"language-sql\">insert into stu values(1003, '白龙马', 100);\nQuery OK, 1 row affected (0.00 sec)\n\nselect * from stu;\n+------+-----------+------+\n| id   | name      | age  |\n+------+-----------+------+\n| 1001 | 孙悟空    |  100 |\n| 1002 | 沙和尚    |  100 |\n| 1003 | 白龙马    |  100 |\n+------+-----------+------+\n3 rows in set (0.00 sec)</code></pre>\n<p></p>\n<ul><li> <h3 id=\"update%20%EF%BC%9A%E6%9B%B4%E6%96%B0%E8%AE%B0%E5%BD%95\"><strong>update ：更新记录</strong></h3> </li><li><strong><span style=\"color:#fe2c24;\">update  表名  set  字段1 = 值1 字段2 = 值2  where 条件指定记录;</span></strong><strong><span style=\"color:#fe2c24;\"> </span></strong></li><li><strong><span style=\"color:#0d0016;\">指定设置 id = 1003的 记录 name = 猪八戒  (跟新记录)</span></strong><strong><span style=\"color:#fe2c24;\"> </span></strong></li></ul>\n<pre><code class=\"language-sql\">update stu set name = '猪八戒' where id = 1003;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nselect * from stu;\n+------+-----------+------+\n| id   | name      | age  |\n+------+-----------+------+\n| 1001 | 孙悟空    |  100 |\n| 1002 | 沙和尚    |  100 |\n| 1003 | 猪八戒    |  100 |\n+------+-----------+------+\n3 rows in set (0.00 sec)\n</code></pre>\n<p></p>\n<ul><li> <h3 id=\"delete%20%EF%BC%9A%E5%88%A0%E9%99%A4%E8%AE%B0%E5%BD%95\"><strong>delete ：删除记录</strong></h3> </li><li><span style=\"color:#fe2c24;\"><strong>delete from 表名 where 条件指定记录;</strong></span></li><li><strong>指定删除id = 1003的记录</strong></li></ul>\n<pre><code class=\"language-sql\">delete from stu where id = 1003;\nQuery OK, 1 row affected (0.00 sec)\n\nselect * from stu;\n+------+-----------+------+\n| id   | name      | age  |\n+------+-----------+------+\n| 1001 | 孙悟空    |  100 |\n| 1002 | 沙和尚    |  100 |\n+------+-----------+------+\n2 rows in set (0.00 sec)\n</code></pre>\n<h2 id=\"DQL\">DQL</h2>\n<ul><li><strong>Data Query Language - 数据查询语言</strong></li><li> <h2 id=\"%C2%A0select%20%EF%BC%9A%E4%BB%8E%E4%B8%80%E4%B8%AA%E6%88%96%E8%80%85%E5%A4%9A%E4%B8%AA%E8%A1%A8%E4%B8%AD%E6%A3%80%E7%B4%A2%E7%89%B9%E5%AE%9A%E7%9A%84%E8%AE%B0%E5%BD%95\">select ：从一个或者多个表中检索特定的记录</h2> </li><li><strong>数据准备</strong></li></ul>\n<pre><code class=\"language-sql\">insert into stu values(1003, '猪八戒', 100);\ninsert into stu values(1004, '白龙马', 100);\ninsert into stu values(1009, '白骨精', 78);\ninsert into stu values(1006, '哪吒', 88);\ninsert into stu values(1004, '观音', 99);</code></pre>\n<pre><code class=\"language-sql\">select * from stu;\n+------+-----------+------+\n| id   | name      | age  |\n+------+-----------+------+\n| 1001 | 孙悟空    |  100 |\n| 1002 | 沙和尚    |  100 |\n| 1003 | 猪八戒    |  100 |\n| 1004 | 白龙马    |  100 |\n| 1006 | 哪吒      |   88 |\n| 1004 | 观音      |   99 |\n| 1009 | 白骨精    |   78 |\n+------+-----------+------+\n7 rows in set (0.00 sec)</code></pre>\n<ul><li> <h3 id=\"select%20%E6%8C%87%E5%AE%9A%E5%88%97%E6%9F%A5%E8%AF%A2\">select 指定列查询</h3> </li><li><strong><span style=\"color:#fe2c24;\">select 指定列1, 指定列2, 指定列3...  from 表名; </span></strong></li><li><span style=\"color:#0d0016;\"><strong>指定查询 stu 表中的name + age 列信息</strong></span></li></ul>\n<pre><code class=\"language-sql\">select name, age from stu;\n+-----------+------+\n| name      | age  |\n+-----------+------+\n| 孙悟空    |  100 |\n| 沙和尚    |  100 |\n| 猪八戒    |  100 |\n| 白龙马    |  100 |\n| 哪吒      |   88 |\n| 观音      |   99 |\n| 白骨精    |   78 |\n+-----------+------+\n7 rows in set (0.00 sec)</code></pre>\n<ul><li> <h3 id=\"select%20%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2\"><strong>select 条件查询</strong></h3> </li><li><strong><span style=\"color:#fe2c24;\">select   *   from  表名   where  条件指定查询记录</span></strong></li><li><span style=\"color:#0d0016;\"><strong>条件指定查询 id = 1003的记录</strong></span><strong><span style=\"color:#fe2c24;\"> </span></strong></li></ul>\n<pre><code class=\"language-sql\">select * from stu where id = 1003;\n+------+-----------+------+\n| id   | name      | age  |\n+------+-----------+------+\n| 1003 | 猪八戒    |  100 |\n+------+-----------+------+\n1 row in set (0.00 sec)</code></pre>\n<ul><li> <h3 id=\"select%20%E5%8E%BB%E9%87%8D%E6%9F%A5%E8%AF%A2\"><strong>select 去重查询</strong></h3> </li><li><span style=\"color:#fe2c24;\"><strong>select distinct 指定去重列 from 表名;</strong></span></li><li><strong> <span style=\"color:#0d0016;\">按照id号进行去重查询</span></strong></li></ul>\n<pre><code class=\"language-sql\">select id from stu;\n+------+\n| id   |\n+------+\n| 1001 |\n| 1002 |\n| 1003 |\n| 1004 |\n| 1006 |\n| 1004 |\n| 1009 |\n+------+\n7 rows in set (0.00 sec)\n\nselect distinct id from stu;\n+------+\n| id   |\n+------+\n| 1001 |\n| 1002 |\n| 1003 |\n| 1004 |\n| 1006 |\n| 1009 |\n+------+\n6 rows in set (0.00 sec)</code></pre>\n<ul><li> <h3 id=\"select%20%E6%8E%92%E5%BA%8F%E6%9F%A5%E8%AF%A2%20(%E6%9F%A5%E8%AF%A2%E5%90%8E%E6%8E%92%E5%BA%8F)\"><strong>select 排序查询 (查询后排序)</strong></h3> </li><li><strong><span style=\"color:#fe2c24;\">select   *  from  stu  order by    指定列1 排序规则, 指定列2 排序规则;</span></strong></li><li><strong><span style=\"color:#fe2c24;\">排序规则：默认升序, asc   指定升序   desc 指定降序</span></strong></li><li><strong><span style=\"color:#0d0016;\">先按照 id 升序排序, id  相同再按照 age 降序排序</span></strong><strong><span style=\"color:#fe2c24;\"> </span></strong></li></ul>\n<pre><code class=\"language-sql\">select * from stu order by id asc, age desc;\n+------+-----------+------+\n| id   | name      | age  |\n+------+-----------+------+\n| 1001 | 孙悟空    |  100 |\n| 1002 | 沙和尚    |  100 |\n| 1003 | 猪八戒    |  100 |\n| 1004 | 白龙马    |  100 |\n| 1004 | 观音      |   99 |\n| 1006 | 哪吒      |   88 |\n| 1009 | 白骨精    |   78 |\n+------+-----------+------+\n7 rows in set (0.00 sec)</code></pre>\n<ul><li> <h3 id=\"select%20%E8%B5%B7%E5%88%AB%E5%90%8D\">select 起别名</h3> </li><li><strong><span style=\"color:#fe2c24;\">select 指定列1  别名,  指定列2 别名... from stu;</span></strong></li><li><strong><span style=\"color:#0d0016;\">将 age 取个别名为年龄</span></strong><strong><span style=\"color:#fe2c24;\">   </span></strong></li></ul>\n<pre><code class=\"language-sql\">select age '年龄', name from stu;\n+--------+-----------+\n| 年龄   | name      |\n+--------+-----------+\n|    100 | 孙悟空    |\n|    100 | 沙和尚    |\n|    100 | 猪八戒    |\n|    100 | 白龙马    |\n|     88 | 哪吒      |\n|     99 | 观音      |\n|     78 | 白骨精    |\n+--------+-----------+\n7 rows in set (0.00 sec)</code></pre>\n<ul><li> <h3 id=\"select%20%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2\">select 聚合函数分组查询</h3> </li></ul>\n<p><img alt=\"\" height=\"453\" src=\"..\\..\\static\\image\\88b5d01fc62c4390a8e31719aa2ead4b.png\" width=\"795\"/></p>\n<ul><li><strong><span style=\"color:#fe2c24;\">select 聚合函数名(指定列) from 表名;  指定对于表每一列进行聚合函数</span></strong></li><li><strong>查询一下表中所有的  age 和  age 最大 最小值</strong></li></ul>\n<pre><code class=\"language-sql\">select sum(age) from stu;\n+----------+\n| sum(age) |\n+----------+\n|      665 |\n+----------+\n1 row in set (0.00 sec)\n\nselect min(age) from stu;\n+----------+\n| min(age) |\n+----------+\n|       78 |\n+----------+\n1 row in set (0.00 sec)\n\nselect max(age) from stu;\n+----------+\n| max(age) |\n+----------+\n|      100 |\n+----------+\n1 row in set (0.00 sec)</code></pre>\n<ul><li><strong><span style=\"color:#fe2c24;\">select    指定分组字段   聚合函数(指定字段)  from  表名  group by 指定分组字段</span></strong></li><li><span style=\"color:#fe2c24;\"><strong>注意：分组也就意味着去重，一旦分组之后, 就会按照分组列进行去重，</strong></span></li><li><strong><span style=\"color:#fe2c24;\">一旦去重之后意味着什么?  我们跟随着去重列一同显示出来的其他列也必须是聚合在一起的</span></strong></li><li><strong>上述这句话必须理解清楚，你想想，分组前是很多行，分组之后进行了去重，记录需要从多条记录压缩成一条记录，也就意味着，我们需要聚合多条记录.</strong></li><li><strong><span style=\"color:#0d0016;\">依照age 进行 分组, 将多条记录聚合压缩成分组记录， 名字同组的联在一起，并且统计同组人数</span></strong></li></ul>\n<pre><code class=\"language-sql\">select age, count(*), group_concat(`name`) from stu group by age;\n+------+----------+-----------------------------------------+\n| age  | count(*) | group_concat(`name`)                    |\n+------+----------+-----------------------------------------+\n|   78 |        1 | 白骨精                                  |\n|   88 |        1 | 哪吒                                    |\n|   99 |        1 | 观音                                    |\n|  100 |        4 | 孙悟空,沙和尚,猪八戒,白龙马             |\n+------+----------+-----------------------------------------+\n4 rows in set (0.00 sec)</code></pre>\n<ul><li> <h3 id=\"select%20%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2\">select 分页查询</h3> </li></ul>\n<p><img alt=\"\" height=\"91\" src=\"..\\..\\static\\image\\f0a3d5ec678544859977a469dd2f8280.png\" width=\"879\"/></p>\n<p><strong>何为分页    limit n, m;  从 n 条记录开始显示m条记录</strong></p>\n<ul><li><strong><span style=\"color:#fe2c24;\">select   *   from    limit    起始记录数, 每页的记录数 </span></strong></li><li><strong><span style=\"color:#fe2c24;\">起始记录数目如何计算, 是每一页的记录数的整数倍</span></strong></li><li><strong>eg： 查看第一页的记录，和查看第二页的记录  (每页记录数为3)</strong></li></ul>\n<pre><code class=\"language-sql\">select * from stu limit 0,3;\n+------+-----------+------+\n| id   | name      | age  |\n+------+-----------+------+\n| 1001 | 孙悟空    |  100 |\n| 1002 | 沙和尚    |  100 |\n| 1003 | 猪八戒    |  100 |\n+------+-----------+------+\n3 rows in set (0.00 sec)\n\nselect * from stu limit 3,3;\n+------+-----------+------+\n| id   | name      | age  |\n+------+-----------+------+\n| 1004 | 白龙马    |  100 |\n| 1006 | 哪吒      |   88 |\n| 1004 | 观音      |   99 |\n+------+-----------+------+\n3 rows in set (0.00 sec)\n\nselect * from stu limit 6,3;\n+------+-----------+------+\n| id   | name      | age  |\n+------+-----------+------+\n| 1009 | 白骨精    |   78 |\n+------+-----------+------+\n1 row in set (0.00 sec)</code></pre>\n<p><strong>如上分别是查看第一页 第二页，第三页的 记录</strong></p>\n</blockquote>\n<p id=\"\"></p>\n<h1 id=\"%E5%A4%9A%E8%A1%A8%E7%90%86%E8%A7%A3%E5%8A%A0%E5%9F%BA%E6%93%8D\">多表理解加基操</h1>\n<blockquote>\n<ul><li> <h2 id=\"%E5%A4%9A%E8%A1%A8%E5%88%86%E7%B1%BB%E5%92%8C%E7%90%86%E8%A7%A3\">多表分类和理解</h2> </li><li><strong>why:     项目开发中，在进行数据库表结构设计时，会根据业务需求及业务模块之间的关系，分析并设计表结构，由于业务之间相互关联，所以各个表结构之间也存在着各种联系</strong></li><li> <h3 id=\"%E5%A4%9A%E8%A1%A8%E5%85%B3%E7%B3%BB%E5%88%86%E7%B1%BB\">多表关系分类</h3> </li></ul>\n<ol><li> <h3 id=\"%E4%B8%80%E5%AF%B9%E4%B8%80%E5%85%B3%E7%B3%BB\"><strong>一对一关系</strong></h3> </li></ol>\n<ul><li> <p><strong>案例：用户与用户详细的关系  </strong></p> <p><strong>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率    (<span style=\"color:#fe2c24;\">为避免一张表记录过长的情况，字段太多了就可以进行单表拆分，此时拆分的两个表就是一对一的关系</span>)</strong></p> </li></ul>\n<p><img alt=\"\" height=\"173\" src=\"..\\..\\static\\image\\e2285cc3a42b42a98f6b60e89ecda8b0.png\" width=\"1200\"/></p>\n<p><strong> 实现：在任意一方加入一个外键，关联另一方的主键，并且设置外键为唯一约束</strong></p>\n<p><img alt=\"\" height=\"220\" src=\"..\\..\\static\\image\\7a2c52949fb34beead5a208f2da51b53.png\" width=\"1200\"/></p>\n<ol><li> <h3 id=\"%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB\"><strong>一对多关系    (一个班级多个学生, 一个学生对应一个班级)</strong></h3> </li></ol>\n<p><strong>案例：部门与员工的关系    </strong></p>\n<p><strong>关系：一个部门对应多个员工，一个员工对应一个部门</strong></p>\n<p><strong>实现：在多的一方建立外键，关联另一方的主键</strong></p>\n<p><strong>why ?  </strong><span style=\"color:#fe2c24;\"> 我们将部门信息放在员工表中，合并为一个表是不可行吗? 为啥要分开来使用，这样产生的一对多的关系也使得查询等等操作更加复杂.  </span></p>\n<p><strong><span style=\"color:#0d0016;\">不是合在一起不行，而是要分析分开的好处, 一旦分开之后我们会减少很多重复的存储部门信息， 因为存在多个员工对应同一个部门的情形，虽然是多个员工，但是对应的是同样的部门信息，记录，  </span><span style=\"color:#fe2c24;\">我们没有必要  重复存储这些部门信息呀,  所以才分表    </span><span style=\"color:#0d0016;\">(理解为什么分表)</span></strong></p>\n<p><img alt=\"\" height=\"415\" src=\"..\\..\\static\\image\\5f7b7b69012a414ba6fd10e1c2abf515.png\" width=\"1178\"/></p>\n<ol><li> <h3 id=\"%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB\"><strong>多对多关系</strong></h3> </li></ol>\n<p><strong>案例：学生与课程的关系</strong></p>\n<p><strong>关系：一个学生可以选修多门课程，一门课程也可以供多个学生选择</strong></p>\n<p><strong>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</strong></p>\n<p><img alt=\"\" height=\"324\" src=\"..\\..\\static\\image\\fddf0a2cd5e94d2d904118c6225e593f.png\" width=\"1157\"/></p>\n<p><strong> <span style=\"color:#fe2c24;\">why 使用中间表，还是降低存储压力，减去不必要的存储，我们可以仅仅使用两列来关联左右两张表，  这样可以避免重复的数据存储    ( </span><span style=\"color:#0d0016;\">保证数据唯一一份</span><span style=\"color:#fe2c24;\">  ) </span></strong></p>\n<p><span style=\"color:#0d0016;\"><strong>全部从避免数据冗余，重复存储相同数据的角度去考虑外键,  中间表  分表的原因</strong></span></p>\n<ul><li> <h2 id=\"%E8%BF%9E%E8%A1%A8%E6%9F%A5%E8%AF%A2\">连表查询   (集合运算)</h2> </li><li> <h3 id=\"%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87\"><strong>数据准备</strong></h3> </li></ul>\n<pre><code class=\"language-sql\"># 准备班级表\ncreate table \nif not exists class (\n\t`id` tinyint,\n\t`name` varchar(10)\n) engine = innodb default charset = utf8mb4;\n\ninsert into class\nvalues(1, '重点班');\n\ninsert into class\nvalues(2, '重点班');\n\ninsert into class \nvalues(3, '平行班');\n\ninsert into class\nvalues(4, '平行班');\n\n# 准备学生表\ncreate table \nif not exists student (\n\tstudent_id tinyint primary key,\n\tname varchar(10),\n\tage tinyint,\n\tclass_id tinyint\n) engine = innodb default charset = utf8mb4;\n\ninsert into student\nvalues(10, '张三', 19, 3);\n\ninsert into student\nvalues(11, '李四', 20, 2);\n\ninsert into student\nvalues(12, '王五', 22, 1);\n\ninsert into student\nvalues(13, '赵四', 27, 4);\n\ninsert into student\nvalues(14, '麻子', null, 3);\n\n</code></pre>\n<ul><li> <h3 id=\"%E7%AC%9B%E5%8D%A1%E5%B0%94%E7%A7%AF%C2%A0%20(A%20*%20B)%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%C2%A0\"><strong>笛卡尔积  (A * B)        </strong></h3> </li><li><strong>笛卡尔集合运算  A {1, 2, 3}    B  {4, 5, 6}    A✖B  {(1, 4), (1, 5), (1, 6), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6)};</strong></li><li><strong><span style=\"color:#fe2c24;\">select * from A, B;</span></strong></li><li><strong><span style=\"color:#fe2c24;\">select * from A inner join B;</span></strong></li><li><strong><span style=\"color:#0d0016;\">求取 class 表 和  student表的笛卡尔积</span>喔</strong></li></ul>\n<pre><code class=\"language-sql\">select * from class, student;\n+------+-----------+------------+--------+------+----------+\n| id   | name      | student_id | name   | age  | class_id |\n+------+-----------+------------+--------+------+----------+\n|    1 | 重点班    |         10 | 张三   |   19 |        3 |\n|    2 | 重点班    |         10 | 张三   |   19 |        3 |\n|    3 | 平行班    |         10 | 张三   |   19 |        3 |\n|    4 | 平行班    |         10 | 张三   |   19 |        3 |\n|    1 | 重点班    |         11 | 李四   |   20 |        2 |\n|    2 | 重点班    |         11 | 李四   |   20 |        2 |\n|    3 | 平行班    |         11 | 李四   |   20 |        2 |\n|    4 | 平行班    |         11 | 李四   |   20 |        2 |\n|    1 | 重点班    |         12 | 王五   |   22 |        1 |\n|    2 | 重点班    |         12 | 王五   |   22 |        1 |\n|    3 | 平行班    |         12 | 王五   |   22 |        1 |\n|    4 | 平行班    |         12 | 王五   |   22 |        1 |\n|    1 | 重点班    |         13 | 赵四   |   27 |        4 |\n|    2 | 重点班    |         13 | 赵四   |   27 |        4 |\n|    3 | 平行班    |         13 | 赵四   |   27 |        4 |\n|    4 | 平行班    |         13 | 赵四   |   27 |        4 |\n|    1 | 重点班    |         14 | 麻子   | NULL |        3 |\n|    2 | 重点班    |         14 | 麻子   | NULL |        3 |\n|    3 | 平行班    |         14 | 麻子   | NULL |        3 |\n|    4 | 平行班    |         14 | 麻子   | NULL |        3 |\n+------+-----------+------------+--------+------+----------+\n20 rows in set (0.00 sec)</code></pre>\n<ul><li><span style=\"color:#0d0016;\"><strong>上述存在问题，存在很多错误的记录数据  合并显示 ， 这些就是  id 和 class_id 不相等的部分，   </strong></span><span style=\"color:#fe2c24;\"><strong>class的   id   和  student的  class_id 无法对应起来的记录  </strong></span></li><li><span style=\"color:#fe2c24;\"><strong>条件约束，消除无效记录</strong></span></li></ul>\n<pre><code class=\"language-sql\">select * from class c, student s where c.id = s.class_id;\n+------+-----------+------------+--------+------+----------+\n| id   | name      | student_id | name   | age  | class_id |\n+------+-----------+------------+--------+------+----------+\n|    3 | 平行班    |         10 | 张三   |   19 |        3 |\n|    2 | 重点班    |         11 | 李四   |   20 |        2 |\n|    1 | 重点班    |         12 | 王五   |   22 |        1 |\n|    4 | 平行班    |         13 | 赵四   |   27 |        4 |\n|    3 | 平行班    |         14 | 麻子   | NULL |        3 |\n+------+-----------+------------+--------+------+----------+</code></pre>\n<ul><li> <h3 id=\"inner%20join%C2%A0%20on\">inner join  on</h3> </li></ul>\n<p><img alt=\"\" height=\"202\" src=\"..\\..\\static\\image\\89369d6c4ea74787aa0555d6b15d6851.png\" width=\"331\"/></p>\n<p><span style=\"color:#0d0016;\"><strong>只取两张表有对应关系的记录</strong></span><span style=\"color:#fe2c24;\"><strong> </strong></span></p>\n<ul><li><span style=\"color:#fe2c24;\"><strong>select * from A, B where 条件限制(两表关系部分)</strong></span></li></ul>\n<pre><code class=\"language-sql\">select * from class c, student s where c.id = s.class_id;\n</code></pre>\n<ul><li><strong><span style=\"color:#fe2c24;\">select * from A inner join B on 条件限制(两表关系部分)</span></strong></li></ul>\n<pre><code class=\"language-sql\">select * from class c inner join student s on c.id = s.class_id;\n+------+-----------+------------+--------+------+----------+\n| id   | name      | student_id | name   | age  | class_id |\n+------+-----------+------------+--------+------+----------+\n|    3 | 平行班    |         10 | 张三   |   19 |        3 |\n|    2 | 重点班    |         11 | 李四   |   20 |        2 |\n|    1 | 重点班    |         12 | 王五   |   22 |        1 |\n|    4 | 平行班    |         13 | 赵四   |   27 |        4 |\n|    3 | 平行班    |         14 | 麻子   | NULL |        3 |\n+------+-----------+------------+--------+------+----------+\n5 rows in set (0.00 sec)</code></pre>\n<ul><li> <h3 id=\"left%20outer%20join%C2%A0%20on\"><strong>left outer join  on</strong></h3> </li></ul>\n<p><img alt=\"\" height=\"206\" src=\"..\\..\\static\\image\\d2d3ed5b90f947f6a6977f771ff71bc7.png\" width=\"321\"/></p>\n<p><span style=\"color:#0d0016;\"><strong> 在内连接的基础上保留左表没有对应关系的记录</strong></span></p>\n<ul><li><strong><span style=\"color:#fe2c24;\">select * from A left outer join B on 条件限制(两表关系部分)</span></strong></li><li><strong><span style=\"color:#0d0016;\">为了方便测试: 我在左表中增添没有对应关系的两条记录：</span></strong></li><li><strong><span style=\"color:#0d0016;\">记录1： 5  平行班</span></strong></li><li><strong><span style=\"color:#0d0016;\">记录2:   6   平民班</span></strong></li></ul>\n<pre><code class=\"language-sql\">insert into class\nvalues(5, '平行班');\n\ninsert into class\nvalues(6, '平民班');</code></pre>\n<pre><code class=\"language-sql\">select * from class c left outer join student s on c.id = s.class_id;\n+------+-----------+------------+--------+------+----------+\n| id   | name      | student_id | name   | age  | class_id |\n+------+-----------+------------+--------+------+----------+\n|    3 | 平行班    |         10 | 张三   |   19 |        3 |\n|    2 | 重点班    |         11 | 李四   |   20 |        2 |\n|    1 | 重点班    |         12 | 王五   |   22 |        1 |\n|    4 | 平行班    |         13 | 赵四   |   27 |        4 |\n|    3 | 平行班    |         14 | 麻子   | NULL |        3 |\n|    5 | 平行班    |       NULL | NULL   | NULL |     NULL |\n|    6 | 平民班    |       NULL | NULL   | NULL |     NULL |\n+------+-----------+------------+--------+------+----------+\n7 rows in set (0.00 sec)\n\nselect * from class c inner join student s on c.id = s.class_id;\n+------+-----------+------------+--------+------+----------+\n| id   | name      | student_id | name   | age  | class_id |\n+------+-----------+------------+--------+------+----------+\n|    1 | 重点班    |         12 | 王五   |   22 |        1 |\n|    2 | 重点班    |         11 | 李四   |   20 |        2 |\n|    3 | 平行班    |         10 | 张三   |   19 |        3 |\n|    3 | 平行班    |         14 | 麻子   | NULL |        3 |\n|    4 | 平行班    |         13 | 赵四   |   27 |        4 |\n+------+-----------+------------+--------+------+----------+\n5 rows in set (0.00 sec)\n# 对比一下发现, 左外连接就是整个左表记录完全显示\n# 就算没有关联记录也显示</code></pre>\n<ul><li> <h3 id=\"right%20outer%20join%C2%A0%20on\">right outer join  on</h3> </li></ul>\n<p><img alt=\"\" height=\"216\" src=\"..\\..\\static\\image\\93cb6dda4fb04c5ea8528dccc93f3925.png\" width=\"323\"/></p>\n<p><span style=\"color:#0d0016;\"><strong>在内连接的基础上保留右表没有对应关系的记录 </strong></span></p>\n<ul><li><strong><span style=\"color:#fe2c24;\">select * from A right outer join B on 条件限制(两表关系部分)</span></strong></li><li><strong><span style=\"color:#0d0016;\">为了方便测试: 我在左表中增添没有对应关系的两条记录：</span></strong></li><li><strong><span style=\"color:#0d0016;\">记录1：15 王顺 25 null; 没有对应class_id</span></strong></li><li><strong><span style=\"color:#0d0016;\">记录2:  16 虹猫 30 null; 没有对应class_id</span></strong></li></ul>\n<pre><code class=\"language-sql\">insert into student\nvalues(15, '赵顺', 25, null);\n\ninsert into student\nvalues(16, '虹猫', 30, null);</code></pre>\n<pre><code class=\"language-sql\">select * from class c right outer join student s on c.id = s.class_id;\n+------+-----------+------------+--------+------+----------+\n| id   | name      | student_id | name   | age  | class_id |\n+------+-----------+------------+--------+------+----------+\n|    1 | 重点班    |         12 | 王五   |   22 |        1 |\n|    2 | 重点班    |         11 | 李四   |   20 |        2 |\n|    3 | 平行班    |         10 | 张三   |   19 |        3 |\n|    3 | 平行班    |         14 | 麻子   | NULL |        3 |\n|    4 | 平行班    |         13 | 赵四   |   27 |        4 |\n| NULL | NULL      |         15 | 赵顺   |   25 |     NULL |\n| NULL | NULL      |         16 | 虹猫   |   30 |     NULL |\n+------+-----------+------------+--------+------+----------+\n7 rows in set (0.00 sec)\n\nselect * from class c inner join student s on c.id = s.class_id;\n+------+-----------+------------+--------+------+----------+\n| id   | name      | student_id | name   | age  | class_id |\n+------+-----------+------------+--------+------+----------+\n|    3 | 平行班    |         10 | 张三   |   19 |        3 |\n|    2 | 重点班    |         11 | 李四   |   20 |        2 |\n|    1 | 重点班    |         12 | 王五   |   22 |        1 |\n|    4 | 平行班    |         13 | 赵四   |   27 |        4 |\n|    3 | 平行班    |         14 | 麻子   | NULL |        3 |\n+------+-----------+------------+--------+------+----------+\n5 rows in set (0.00 sec)\n# 对比之下right outer join 就是相关记录 \n# + 右表多余不相关记录全部显示右表\n</code></pre>\n<ul><li> <h2 id=\"%E5%AD%90%E6%9F%A5%E8%AF%A2%20(%E5%B5%8C%E5%A5%97%E6%9F%A5%E8%AF%A2%2C%E5%90%88%E5%B9%B6%E6%9F%A5%E8%AF%A2)\">子查询 (嵌套查询,合并查询)</h2> </li></ul>\n<p><strong>⼀条select语句结果作为另⼀条select语法⼀部分（查询条件，查询结果，表等）。</strong></p>\n<ul><li><span style=\"color:#fe2c24;\"><strong>select ....查询字段 ... from ... 表.. where ... 查询条件</strong></span></li><li><strong><span style=\"color:#0d0016;\">eg : 查询   class表中   张三所在班级的总人数.</span></strong></li></ul>\n<ol><li><span style=\"color:#fe2c24;\"><strong>分步1： 查询张三所在班级</strong></span></li><li><span style=\"color:#fe2c24;\"><strong>分布2:   根据第一步获得的班级查询这个班级的总人数</strong></span></li></ol>\n<pre><code class=\"language-sql\"># 第一步获取张三所在班级\nselect class_id from student where name = '张三';\n+----------+\n| class_id |\n+----------+\n|        3 |\n+----------+\n1 row in set (0.00 sec)\n\n# 第二步获取张三班级的总人数\nselect c.id '班级', count(*) '学生人数'\nfrom \n\tclass c, student s\nwhere \n\tc.id = s.class_id &amp;&amp; c.id = 3\ngroup by c.id;\n\n+--------+--------------+\n| 班级   | 学生人数     |\n+--------+--------------+\n|      3 |            2 |\n+--------+--------------+\n1 row in set (0.00 sec)\n\n</code></pre>\n<ul><li><span style=\"color:#fe2c24;\"><strong>合并上述查询方式:    </strong></span></li><li><span style=\"color:#0d0016;\"><strong>合并方式1：  将 select 查询班级的结果作为条件</strong></span></li><li><span style=\"color:#fe2c24;\"><strong>select ....查询字段 ... from ... 表.. where  条件1 &amp;&amp;  c.id = (select ...) group by...</strong></span></li></ul>\n<pre><code class=\"language-sql\">select c.id '班级', count(*) '学生人数'\nfrom \n\tclass c, student s\nwhere \n\tc.id = s.class_id &amp;&amp; \n    c.id = (select class_id from student s where s.name = '张三')\n    # select 查询结果当作条件进行子查询, 嵌套查询\ngroup by c.id;</code></pre>\n<ul><li><span style=\"color:#0d0016;\"><strong>合并方式2：将select 查询班级的结果作为一个新的表进行内连接组合查询</strong></span></li><li><span style=\"color:#fe2c24;\"><strong>select  查询字段  from 表1 (select ...)表2  where ...</strong></span></li><li><span style=\"color:#0d0016;\"><strong>从一次select 之后的结果当作表进行内联查询</strong></span></li></ul>\n<pre><code class=\"language-sql\">select c.id '班级', count(*) '学生人数'\nfrom \n\tclass c, \n\t(select * from student stu where stu.name = '张三') s\n\t# 对于select name = 张三的查询结果别名s 当作新表联合查询\nwhere \n\tc.id = s.class_id \ngroup by c.id;\n\n# 上述是一种子查询的方式，但是并不能获取张三班级人数\n# 仅作为一种查询方式而已</code></pre>\n<ul><li><span style=\"color:#fe2c24;\"><strong>总之，将来我们进入公司需要操作的表结构绝对是多表操作，多表查询的时候，多表需要联合查询</strong></span></li><li><strong><span style=\"color:#0d0016;\">内连接  inner join   left outer join  right outer join   都是不同的连接多表的方式</span></strong></li><li><strong><span style=\"color:#0d0016;\">子查询，  我们需要 思考的是  一条select查询的结果可以做另外一条select 查询的条件或者是  子表    (select ...) 作为一个where 条件   或者是一个新的 table 在做一次查询</span></strong></li><li><strong><span style=\"color:#0d0016;\">算是嵌套select 查询</span></strong><span style=\"color:#fe2c24;\"><strong>      </strong></span></li></ul>\n</blockquote>\n<h1 id=\"%E6%80%BB%E7%BB%93\">总结</h1>\n<blockquote>\n<ul><li><strong>小杰从最简单的SQL语法和表操作入手，从 DDL(表定义，表结构操作)    DQL (select表查询)    DML (记录的增删改查)着手，总结了近期所学，也算是sql入门的一个精简资料了...      </strong></li><li><strong><span style=\"color:#fe2c24;\">熟练的掌握理解了上述这些东西，就大致可以算是会操作数据表了</span></strong></li><li><strong><span style=\"color:#0d0016;\">多表查询    将两个表以不同的方式各种形式连接起来联合查询，我们需要不断地积累，根据不同地实际业务场景采取不同地多表查询连接方式    </span></strong></li><li><strong><span style=\"color:#0d0016;\">灵活地嵌套使用  select 语句，   一条select 查询结果可以做条件  还可以做 表进行内连接查询.</span></strong></li><li><strong><span style=\"color:#fe2c24;\">应老规矩：简要地总结上述关键字操作</span></strong></li></ul>\n<p><strong>DDL回忆</strong></p>\n<ul><li><strong><span style=\"color:#0d0016;\">use 数据库; 指定数据库操作</span></strong></li><li><strong>show databases;   显示所有数据库  show tables;  显示所有数据表</strong></li><li><strong>create table 表名;     create database 库名; 新建表 + 库 不安全  加上  if not exists 修饰可避免报错</strong></li><li><strong>drop  table  表名;      drop  database  库名;  删除表 +  库  不安全  加上 if exists 修饰可避免报错</strong></li><li><strong>alter table  表名  add/modify/change  列调整;   可以修改表结构</strong></li><li><strong>alter table 表名  drop 列名;  删除列</strong></li></ul>\n<p><strong>DML回忆</strong></p>\n<ul><li><strong><span style=\"color:#0d0016;\">insert into 表名(指定字段) values(指定值);                    增加记录</span></strong></li><li><strong><span style=\"color:#0d0016;\">delete from 表名  where 指定删除记录;                         删除记录</span></strong></li><li><strong><span style=\"color:#0d0016;\">update 表名  set 字段 = 值 where 指定跟新记录;           跟新记录</span></strong></li></ul>\n<p><strong>DQL回忆</strong></p>\n<ul><li><strong>select 指定列 from 表;  (指定列查询)</strong></li><li><strong>select  distinct 列 from 表; 去重查询列</strong></li><li><strong>select * from 表 order by 指定排序列 排序规则</strong></li><li><strong>select   指定分组字段  聚合函数   from 表   where ...   group by 分组字段</strong></li><li><strong><span style=\"color:#fe2c24;\">聚合函数是为了在分组去重之后压缩多条记录为一条.</span></strong></li><li><strong><span style=\"color:#0d0016;\">select * from 表 limit 起始记录数, 每页记录数; 分页查询</span></strong></li><li><strong><span style=\"color:#0d0016;\">inner join 内连接    left outer join   right outer join 外连接, 关系部分 + 其中一表独有部分</span></strong></li><li><strong><span style=\"color:#0d0016;\">select 查询结果可做条件  +  可以新表再  select 查询   (子查询)</span></strong></li></ul>\n</blockquote>\n</div>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2022-04-25 12:16:26", "summary": "目录前言数据库的概念和术语语言和组成展示当前已有的数据库或者表：创建一个数据库或者一个表：删除表、数据库对象或者视图：修改现有的数据库对象，例如修改表的属性或者字段列：插入记录：更新记录：删除记录：从"}