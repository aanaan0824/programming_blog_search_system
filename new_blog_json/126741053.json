{"blogid": "126741053", "writerAge": "码龄121天", "writerBlogNum": "125", "writerCollect": "14", "writerComment": "4", "writerFan": "80", "writerGrade": "4级", "writerIntegral": "1281", "writerName": "图图是个好孩纸~", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_126741053.jpg", "writerRankTotal": "17520", "writerRankWeekly": "4589", "writerThumb": "7", "writerVisitNum": "20212", "blog_read_count": "10", "blog_time": "于 2022-09-07 11:03:49 发布", "blog_title": "分布式ID是什么？有哪些解决方案？", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"htmledit_views\" id=\"content_views\">\n<h1>介绍：</h1>\n<div>\n<span style=\"color:#404040;\">在开发中，我们通常会需要⼀个<strong>唯⼀ID</strong>来<strong>标识数据</strong>，如果是单体架构，我们可以通过</span>\n<span style=\"color:#fe2c24;\"><strong>数据库的主键</strong></span>\n<span style=\"color:#404040;\">，或直接在</span>\n<span style=\"color:#fe2c24;\"><strong>内存中维护⼀个⾃增数字</strong></span>\n<span style=\"color:#404040;\">来作为ID都是可以的，</span>\n<span style=\"color:#ff9900;\"><strong>但对于⼀个分布式系统，就会有可能会出现ID冲突</strong></span>\n</div>\n<p></p>\n<h1>解决方案：</h1>\n<ol><li>\n<div>\n<span style=\"color:#fe2c24;\"><strong>uuid</strong></span>\n<span style=\"color:#404040;\">，<strong><span style=\"background-color:#fbd4d0;\">这种⽅案复杂度最低，但是会影响存储空间和性能</span></strong></span>\n</div> </li><li>\n<div>\n<div>\n<span style=\"color:#fe2c24;\"><strong>利⽤单机数据库的⾃增主键</strong></span>\n<span style=\"color:#404040;\">，作为分布式ID的⽣成器，复杂度适中，ID⻓度较之uuid更短，但是受到单机数据库性能的限制，并发量⼤的时候，此⽅案也不是最优⽅案</span>\n</div>\n</div> </li><li>\n<div>\n<div>\n<span style=\"color:#404040;\">利⽤</span>\n<span style=\"color:#fe2c24;\"><strong>redis、zookeeper的特性来⽣成id</strong></span>\n<span style=\"color:#404040;\">，⽐如<strong>redis的⾃增命令</strong>、<strong>zookeeper的顺序节点</strong>，这种⽅案和单机数据库(mysql)相⽐，<strong>性能有所提⾼</strong>，可以适当选⽤ </span>\n</div>\n</div> </li><li>\n<div>\n<div>\n<span style=\"color:#fe2c24;\"><strong>雪花算法</strong></span>\n<span style=\"color:#404040;\">，⼀切问题如果能直接⽤<strong>算法</strong>解决，那就是最合适的，利⽤雪花算法也可以⽣成分布式ID，底层原理就是<strong><span style=\"background-color:#e6b223;\">通过某台机器在某⼀毫秒内对某⼀个数字⾃增</span></strong>，这种⽅案也能保证分布式架构中的系统id唯⼀，但是只能保证趋势递增。业界存在</span>\n<span style=\"color:#ff9900;\"><strong>tinyid</strong></span>\n<span style=\"color:#404040;\">、</span>\n<span style=\"color:#ff9900;\"><strong>leaf</strong></span>\n<span style=\"color:#404040;\">等开源中间件实现了雪花算法。</span>\n</div>\n</div> </li></ol>\n<p></p>\n</div>\n</div>", "first_tag": "SQL", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 1, "php": 0, "time": "2022-09-07 11:03:49", "summary": "介绍：在开发中，我们通常会需要个唯来标识数据，如果是单体架构，我们可以通过数据库的主键，或直接在内存中维护个增数字来作为都是可以的，但对于个分布式系统，就会有可能会出现冲突解决方案：，这种案复杂度最低"}