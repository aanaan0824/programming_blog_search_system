{"blogid": "124699253", "writerAge": "码龄4年", "writerBlogNum": "11", "writerCollect": "20", "writerComment": "2", "writerFan": "0", "writerGrade": "2级", "writerIntegral": "122", "writerName": "飞翔的波斯猫", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_124699253.jpg", "writerRankTotal": "84378", "writerRankWeekly": "116252", "writerThumb": "6", "writerVisitNum": "10399", "blog_read_count": "4779", "blog_time": "于 2022-05-13 21:44:59 发布", "blog_title": "vue3项目中封装axios", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<p>目前前端最流行的网络请求库还是axios，所以对axios的封装很有必要，此次基于vue3+ts的环境下。</p>\n<h1><a id=\"axios_1\"></a>axios的基本使用</h1>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"token comment\">// console.log('adh')</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://XXX.xxx.xxx.xxx:8000/home'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>axios.get()会返回一个Promise对象,所以可以用.then获取返回的数据。</p>\n<h1><a id=\"axiosall_10\"></a>axios.all()方法</h1>\n<pre><code class=\"prism language-javascript\">axios<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://httpbin.org/get'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://httpbin.org/post'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h1><a id=\"axios_22\"></a>axios一些基本配置</h1>\n<p>在axios中，有一些默认配置，它们是存在于axios.defaults中的，比如我们经常会用到的baseURL、timeout属性</p>\n<pre><code class=\"prism language-javascript\">axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>baseURL <span class=\"token operator\">=</span> <span class=\"token string\">'http://httpbin.org'</span>\naxios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>timeout <span class=\"token operator\">=</span> <span class=\"token number\">10000</span>\n</code></pre>\n<h1><a id=\"axios_29\"></a>axios的拦截器</h1>\n<p>在平常的使用中，我们经常需要对axios请求进行拦截以处理一些特殊情况，如获取token、处理异常等，这时候我们就需要使用axios的拦截器（）。</p>\n<pre><code class=\"prism language-javascript\">axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> config\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> error\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\naxios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">return</span> error\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>如上，axios.interceptors.request是对请求的拦截，此时可以为请求添加headers，添加token等操作，二axios.interceptors.response则是对请求的返回进行拦截，在此处我们可以统一返回的数据结构以及对错误进行一些统一的处理</p>\n<h1><a id=\"axios_51\"></a>封装axios-封装基础属性</h1>\n<p>首先，我们先确认一下基本思路，我们把主要的逻辑封装成一个类，然后编写一个出口文件，将该类导出，需要注意的是，往这个类中传入哪些参数，诚然，我们可以直接在类中定义诸如BASE_URL、timeout、interceptors等axios的属性或方法，但是为了今后的可适配性更高，我们应该尽量的把可配置的属性作为变量传入我们欲封装的类中，下面先进行一个基本的封装：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 封装类</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> AxiosInstance<span class=\"token punctuation\">,</span> AxiosRequestConfig <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ZWRequest</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">instance</span><span class=\"token operator\">:</span> AxiosInstance\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">config</span><span class=\"token operator\">:</span> AxiosRequestConfig</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">request</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 此处能成功打印出结果代表成功</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ZWRequest\n<span class=\"token comment\">// 出口文件index.ts</span>\n<span class=\"token keyword\">import</span> ZWRequest <span class=\"token keyword\">from</span> <span class=\"token string\">'./request'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token constant\">BASE_URL</span><span class=\"token punctuation\">,</span> timeout <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./request/config'</span>\n\n<span class=\"token keyword\">const</span> zwRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ZWRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">baseURL</span><span class=\"token operator\">:</span> <span class=\"token constant\">BASE_URL</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 配置参数</span>\n  <span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span> timeout <span class=\"token comment\">// 配置参数</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> zwRequest\n<span class=\"token comment\">// 在main.ts中测试</span>\n<span class=\"token keyword\">import</span> ZWRequest <span class=\"token keyword\">from</span> <span class=\"token string\">'./service/index.ts'</span>\nZWRequest<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'/post'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"_87\"></a>封装拦截器</h2>\n<p>上面的封装可以传入BASE_URL、timeout等一些基础属性，但是对于拦截器interceptors还是不能实现配置，所以下一步我们改造一下使其可以传入拦截器：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 封装类</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> AxiosInstance<span class=\"token punctuation\">,</span> AxiosRequestConfig<span class=\"token punctuation\">,</span> AxiosResponse <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token comment\">// 自建一个用于匹配interceptors的类型</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ZWRequestInterceptors</span> <span class=\"token punctuation\">{<!-- --></span>\n  requestInterceptor<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">config</span><span class=\"token operator\">:</span> AxiosRequestConfig</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> AxiosRequestConfig <span class=\"token comment\">// 这是个函数类型</span>\n  requestErrorInterceptor<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> any\n  responseInterceptor<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">config</span><span class=\"token operator\">:</span> AxiosResponse</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> AxiosResponse\n  responseErrorInterceptor<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> any\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/** 再新建一个一个类型继承AxiosRequestConfig类型，并在其中设立一个属性，\n该属性对应上一步建立的类型，如此，我们就可以用这个类型来代替封装类\n的constructor()函数传入的参数类型了，在此基础上，完成对拦截器参数的传入。*/</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ZWRequestConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AxiosRequestConfig</span> <span class=\"token punctuation\">{<!-- --></span>\n  interceptors<span class=\"token operator\">?</span><span class=\"token operator\">:</span> ZWRequestInterceptors\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ZWRequest</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">instance</span><span class=\"token operator\">:</span> AxiosInstance\n  interceptors<span class=\"token operator\">?</span><span class=\"token operator\">:</span> ZWRequestInterceptors\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">config</span><span class=\"token operator\">:</span> ZWRequestConfig</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>interceptors\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token operator\">?.</span>requestInterceptor<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token operator\">?.</span>requestErrorInterceptor\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token operator\">?.</span>responseInterceptor<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token operator\">?.</span>responseErrorInterceptor\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">request</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> ZWRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ZWRequest\n<span class=\"token comment\">// 出口函数index.ts</span>\n<span class=\"token comment\">/** 我们可以在出口函数中同意规定拦截器的形式以及相应的处理，这样做的好处是如果我们想\n再生成一个可用的axios对象，如ZWRequest2，而且想实现与ZWRequest不一样的拦截方法，那么\n就只需要在该页面再新创建一个对象即可 */</span>\n<span class=\"token keyword\">import</span> ZWRequest <span class=\"token keyword\">from</span> <span class=\"token string\">'./request'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token constant\">BASE_URL</span><span class=\"token punctuation\">,</span> timeout <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./request/config'</span>\n\n<span class=\"token keyword\">const</span> zwRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ZWRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">baseURL</span><span class=\"token operator\">:</span> <span class=\"token constant\">BASE_URL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span> timeout<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">interceptors</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function-variable function\">requestInterceptor</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'发送请求成功11'</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> config\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">responseInterceptor</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'返回成功11'</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> res\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> zwRequest2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ZWRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">baseURL</span><span class=\"token operator\">:</span> <span class=\"token constant\">BASE_URL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span> timeout<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">interceptors</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function-variable function\">requestInterceptor</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'发送请求成功22'</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> config\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">responseInterceptor</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'返回成功22'</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> res\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> zwRequest\n<span class=\"token comment\">// main.ts中实验</span>\nZWRequest<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'/post'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nZWRequest2<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'/post'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"_177\"></a>封装公用的拦截器</h2>\n<p>上面的封装中，拦截器是由每个实例传入的，但是有时候我们就是想所有的实例都拥有共同的拦截器，那么我们就需要在axios封装类里面添加共有的拦截器了（实例传入的拦截器也并不会被取消），只需要在axios封装类中添加以下代码即可实现全局的拦截：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'共有的请求时成功拦截'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> config\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'共有的请求时失败拦截'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> error\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'共有的返回时成功的拦截'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'共有的返回时失败的拦截'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> error\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\n</code></pre>\n<h2><a id=\"_202\"></a>对单个请求传入拦截器</h2>\n<p>其实上面对拦截器的封装已经基本可以满足平时的开发需求了，但是如果你想更灵活些，比如每个请求都可以传入自己的拦截器，那么请往下看，如果我们需要再请求时传入拦截器，那么就需要看看我们是怎么调用的。目前，我们采用ZWRequest.request(config)的方式调用axios请求，很显然，在封装类中，config参数的类型是：AxiosRequestConfig，这个类型很显然不能传入拦截器参数。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{<!-- --></span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>所以为了能够往request方法中传入拦截器参数，我们需要将AxiosRequestConfig类型化成我们上面新建立的类型ZWRequestConfig，这样就可以从单个请求处传入各自的拦截器了。</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 改造axios封装类中的request方法</span>\n<span class=\"token function\">request</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> ZWRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 对单独请求传来的拦截器进行处理</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>interceptors<span class=\"token operator\">?.</span>requestInterceptor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      config <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>interceptors<span class=\"token operator\">?.</span><span class=\"token function\">requestInterceptor</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>interceptors<span class=\"token operator\">?.</span>responseInterceptor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        res <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>interceptors<span class=\"token operator\">?.</span><span class=\"token function\">responseInterceptor</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 在main.ts中进行测试</span>\nZWRequest<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'/post'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">interceptors</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function-variable function\">requestInterceptor</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'单独请求的请求成功拦截'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> config\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">responseInterceptor</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'单独请求的响应成功拦截'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> res\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>可以正常打印，成功！</p>\n<h2><a id=\"request_243\"></a>对request请求方法封装</h2>\n<p>上面其实已经对request请求进行了大部分的封装了，但是此时的各种返回还局限在类里面，我们在main.ts中是无法拿到的，那么想要拿到返回值，我们就需要进一步操作，其实就是利用promise将结果返回出来：</p>\n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 对request方法的改造</span>\nrequest<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> ZWRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">// 对单独请求传来的拦截器进行处理</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>interceptors<span class=\"token operator\">?.</span>requestInterceptor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      config <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>interceptors<span class=\"token operator\">?.</span><span class=\"token function\">requestInterceptor</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>showLoading <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n      <span class=\"token comment\">// 代表该请求不想显示加载动画</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>showLoading <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>showLoading\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance\n      <span class=\"token punctuation\">.</span>request<span class=\"token operator\">&lt;</span>any<span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">// 每次请求返回后将showLoading的值改为默认值，以免被这次请求穿的配置影响下一次请求的加载动画显示</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>showLoading <span class=\"token operator\">=</span> <span class=\"token constant\">DEFAULT_LOADING</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>interceptors<span class=\"token operator\">?.</span>responseInterceptor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n          res <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>interceptors<span class=\"token operator\">?.</span><span class=\"token function\">responseInterceptor</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>showLoading <span class=\"token operator\">=</span> <span class=\"token constant\">DEFAULT_LOADING</span>\n        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 在main.ts中实验</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">dataType</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> any\n  <span class=\"token literal-property property\">returnCode</span><span class=\"token operator\">:</span> string\n  <span class=\"token literal-property property\">success</span><span class=\"token operator\">:</span> boolean\n<span class=\"token punctuation\">}</span>\nZWRequest<span class=\"token punctuation\">.</span>request<span class=\"token operator\">&lt;</span>dataType<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'/home/multidata'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span>\n  <span class=\"token comment\">// showLoading: false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>returnCode<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>由上可见，其实操作很简单，那么接下来即使利用已经写好的request方法来些各种常用的请求调用方法了，就不多做赘述了，代码如下：</p>\n<pre><code class=\"prism language-javascript\">get<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> ZWRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>request<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token operator\">...</span>config<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\npost<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> ZWRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>request<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token operator\">...</span>config<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">delete</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> ZWRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>request<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span> <span class=\"token operator\">...</span>config<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'DELETE'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>以上就是本人对axios的全部封装，完毕！</p>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "JavaScript", "cpp": 0, "csharp": 0, "python": 0, "javascript": 1, "java": 0, "sql": 0, "php": 0, "time": "2022-05-13 21:44:59", "summary": "目前前端最流行的网络请求库还是，所以对的封装很有必要，此次基于的环境下。的基本使用会返回一个对象所以可以用获取返回的数据。方法一些基本配置在中，有一些默认配置，它们是存在于中的，比如我们经常会用到的、"}