{"blogid": "123139150", "writerAge": "码龄3年", "writerBlogNum": "31", "writerCollect": "251", "writerComment": "19", "writerFan": "60", "writerGrade": "2级", "writerIntegral": "393", "writerName": "窗外听轩雨", "writerProfileAdress": "..\\..\\static\\writer_image\\profile_123139150.jpg", "writerRankTotal": "43135", "writerRankWeekly": "485493", "writerThumb": "70", "writerVisitNum": "54972", "blog_read_count": "4479", "blog_time": "于 2022-02-25 18:53:49 发布", "blog_title": "PicoXR中的输入事件", "content": "<div class=\"article_content clearfix\" id=\"article_content\">\n<link href=\"../../static/bootstrap/css/csdnstyle.css\" rel=\"stylesheet\"/>\n<div class=\"markdown_views prism-atom-one-dark\" id=\"content_views\">\n<svg style=\"display: none;\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" stroke-linecap=\"round\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n</svg>\n<h1><a id=\"PicoXR_0\"></a>PicoXR中的输入事件</h1>\n<h3><a id=\"_2\"></a>前言</h3>\n<p>​ picoXR为Unity提供的Unity XR SDK是基于Unity XR实现的各个功能，针对手柄和头盔的各个按键摇杆事件的获取，均是采用的Unity XR提供的方法。目前UnityXR只提供了if判断的方式每帧监听的方式，还未提供事件接口等形式。</p>\n<h3><a id=\"_6\"></a>简介</h3>\n<p>为方便读者理解后续API，先粗略介绍一下Unity XR监听按键摇杆的步骤。首先是<strong>获取需要监听的设备</strong>，然后<strong>判断此设备的某种行为是否发生</strong>，UnityXR是无差别对待各种品牌的设备的，每种品牌的设备的按键等也都不尽相同。自然设备的行为也是多种多样的，UnityXR提供了一组普遍的行为特征(CommonsUsages),但要具体使用需要根据使用的设备<strong>查阅设备具体按键和UnityXR提供的普遍特征的对应关系</strong>。本文主要介绍Pico产品，这是pico官网提供的映射关系文档链接https://sdk.picovr.com/docs/XRPlatformSDK/Unity/cn/chapter_five.html#id5</p>\n<h3><a id=\"_10\"></a>设备的获取</h3>\n<p>​ 关于设备的获取和事件的监听UnityXR的官方文档有很好的解释和示例，更推荐大家去官网学习https://docs.unity3d.com/Manual/xr_input.html</p>\n<p>首先需要引入UnityEngine.XR的命名空间，设备的获取主要用到的API为InputDevice和InputDevices</p>\n<p>接下来介绍两种设备获取的方式</p>\n<ol><li> <p>获取全部的设备</p> <pre><code class=\"prism language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>XR</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span>InputDevice<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>InputDevice<span class=\"token punctuation\">&gt;</span></span> deviceList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>InputDevice<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//实际为传入list引用获取的InputDevice全部放在list中</span>\n    InputDevices<span class=\"token punctuation\">.</span><span class=\"token function\">GetDevices</span><span class=\"token punctuation\">(</span>deviceList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> deviceList<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>根据XRNode获取设备</p> <pre><code class=\"prism language-cs\"><span class=\"token comment\">//XRNode为枚举变量</span>\n<span class=\"token comment\">//常用的有 Head LeftHand RightHand</span>\n<span class=\"token comment\">//根据这些枚举可以轻松获得指定的头盔，左手柄，右手柄</span>\n<span class=\"token class-name\">InputDevice</span> headController <span class=\"token operator\">=</span> InputDevices<span class=\"token punctuation\">.</span><span class=\"token function\">GetDeviceAtXRNode</span><span class=\"token punctuation\">(</span>XRNode<span class=\"token punctuation\">.</span>Head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">InputDevice</span> leftHandController <span class=\"token operator\">=</span> InputDevices<span class=\"token punctuation\">.</span><span class=\"token function\">GetDeviceAtXRNode</span><span class=\"token punctuation\">(</span>XRNode<span class=\"token punctuation\">.</span>LeftHand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">InputDevice</span> rightHandController <span class=\"token operator\">=</span> InputDevices<span class=\"token punctuation\">.</span><span class=\"token function\">GetDeviceAtXRNode</span><span class=\"token punctuation\">(</span>XRNode<span class=\"token punctuation\">.</span>RightHand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> </li></ol>\n<h3><a id=\"_46\"></a>输入事件</h3>\n<p>​ 前面提到过，光获取到设备还需要知道设备上各个按键或摇杆的行为特征，注意行为特征一定要去官网查看其和设备各个按键的映射关系才能正确的开发。</p>\n<p>这里拿Pico neo3的手柄映射关系举例</p>\n<p><img alt=\"在这里插入图片描述\" src=\"..\\..\\static\\image\\62c83de06a78413c92dc74dc8012943c.png\"/></p>\n<p>主要用到的API是InputDevice.TryGetFeatureValue(InputFeatureUsage usage,T value);</p>\n<p>返回值为bool — 是否获取到行为特征值</p>\n<p>参数1 — 行为特征(根据不同行为有不同的参数，例如按键型就是bool value代表是否按下，摇杆型就是Vector2，value代表偏移量axis)</p>\n<ul><li> <p>判断是否按下了Trigger键</p> <pre><code class=\"prism language-cs\"><span class=\"token class-name\">InputDevice</span> device<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//省略device的获取 使用前要先获取</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isDown<span class=\"token punctuation\">;</span> <span class=\"token comment\">//记录是否按下</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetFeatureValue</span><span class=\"token punctuation\">(</span>CommonUsages<span class=\"token punctuation\">.</span>triggerButton<span class=\"token punctuation\">,</span><span class=\"token keyword\">out</span> isDown<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> isDown<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">//xxxxx 处理逻辑</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li><li> <p>判断是否移动了摇杆</p> <pre><code class=\"prism language-cs\"><span class=\"token class-name\">InputDevice</span> device<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{<!-- --></span>\n\t<span class=\"token class-name\">Vector2</span> axis<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetFeatureValue</span><span class=\"token punctuation\">(</span>usage<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> axis<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>axis<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>Vector2<span class=\"token punctuation\">.</span>zero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//xxxxx相关逻辑</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> </li></ul>\n<h3><a id=\"_94\"></a>优化</h3>\n<p>​ 对比Unity的其它组件提供的事件响应机制，大多靠event，委托和接口实现，而UnityXR提供的这个输入事件使用起来一般都是放在Update里每帧轮询检测，不足是显而易见的。</p>\n<ol><li>输入事件和处理逻辑耦合在一起</li><li>只有按下事件，没有提供开始，抬起等事件</li></ol>\n<p>​ 所以需要自行实现一组公开event事件，实现相应事件源，供其他观察者进行注册，即可解决上面提到的一些不足。</p>\n<p>笔者自行实现了一个简易的InputEvent单例类，提供了按键类的Enter，Down，Up事件和摇杆类的Move事件。</p>\n<p>InputEvent.cs</p>\n<pre><code class=\"prism language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>XR</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Common</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/// &lt;summary&gt;</span>\n<span class=\"token comment\">/// 提供各种输入事件</span>\n<span class=\"token comment\">/// &lt;/summary&gt;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InputEvent</span><span class=\"token punctuation\">:</span><span class=\"token type-list\"><span class=\"token class-name\">MonoSingleton<span class=\"token punctuation\">&lt;</span>InputEvent<span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">//*************输入设别**************************</span>\n    <span class=\"token class-name\">InputDevice</span> leftHandController<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">InputDevice</span> rightHandController<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">InputDevice</span> headController<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//**************对外提供公开事件******************</span>\n    <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> public event</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onLeftTriggerEnter<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onLeftTriggerDown<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onLeftTriggerUp<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onRightTriggerEnter<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onRightTriggerDown<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onRightTriggerUp<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onLeftGripEnter<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onLeftGripDown<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onLeftGripUp<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onRightGripEnter<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onRightGripDown<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onRightGripUp<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onLeftAppButtonEnter<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onLeftAppButtonDown<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onLeftAppButtonUp<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onRightAppButtonEnter<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onRightAppButtonDown<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onRightAppButtonUp<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onLeftJoyStickEnter<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onLeftJoyStickDown<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onLeftJoyStickUp<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onRightJoyStickEnter<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onRightJoyStickDown<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onRightJoyStickUp<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action<span class=\"token punctuation\">&lt;</span>Vector2<span class=\"token punctuation\">&gt;</span></span> onLeftJoyStickMove<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action<span class=\"token punctuation\">&lt;</span>Vector2<span class=\"token punctuation\">&gt;</span></span> onRightJoyStickMove<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onLeftAXButtonEnter<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onLeftAXButtonDown<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onLeftAXButtonUp<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onLeftBYButtonEnter<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onLeftBYButtonDown<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onLeftBYButonUp<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onRightAXButtonEnter<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onRightAXButtonDown<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onRightAXButtonUp<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onRightBYButtonEnter<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onRightBYButtonDown<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Action</span> onRightBYButtonUp<span class=\"token punctuation\">;</span>\n\n    <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n\n    <span class=\"token comment\">//提供状态字典独立记录各个feature的状态</span>\n    <span class=\"token class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">&gt;</span></span> stateDic<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//单例模式提供的初始化函数</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        leftHandController <span class=\"token operator\">=</span> InputDevices<span class=\"token punctuation\">.</span><span class=\"token function\">GetDeviceAtXRNode</span><span class=\"token punctuation\">(</span>XRNode<span class=\"token punctuation\">.</span>LeftHand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        rightHandController <span class=\"token operator\">=</span> InputDevices<span class=\"token punctuation\">.</span><span class=\"token function\">GetDeviceAtXRNode</span><span class=\"token punctuation\">(</span>XRNode<span class=\"token punctuation\">.</span>RightHand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        headController <span class=\"token operator\">=</span> InputDevices<span class=\"token punctuation\">.</span><span class=\"token function\">GetDeviceAtXRNode</span><span class=\"token punctuation\">(</span>XRNode<span class=\"token punctuation\">.</span>Head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stateDic <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//*******************事件源的触发**************************</span>\n\n    <span class=\"token comment\">/// &lt;summary&gt;</span>\n    <span class=\"token comment\">/// 按钮事件源触发模板</span>\n    <span class=\"token comment\">/// &lt;/summary&gt;</span>\n    <span class=\"token comment\">/// &lt;param name=\"device\"&gt;设备&lt;/param&gt;</span>\n    <span class=\"token comment\">/// &lt;param name=\"usage\"&gt;功能特征&lt;/param&gt;</span>\n    <span class=\"token comment\">/// &lt;param name=\"btnEnter\"&gt;开始按下按钮事件&lt;/param&gt;</span>\n    <span class=\"token comment\">/// &lt;param name=\"btnDown\"&gt;按下按钮事件&lt;/param&gt;</span>\n    <span class=\"token comment\">/// &lt;param name=\"btnUp\"&gt;抬起按钮事件&lt;/param&gt;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ButtonDispatchModel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InputDevice</span> device<span class=\"token punctuation\">,</span><span class=\"token class-name\">InputFeatureUsage<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">&gt;</span></span> usage<span class=\"token punctuation\">,</span><span class=\"token class-name\">Action</span> btnEnter<span class=\"token punctuation\">,</span><span class=\"token class-name\">Action</span> btnDown<span class=\"token punctuation\">,</span><span class=\"token class-name\">Action</span> btnUp<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"usage:\"</span> <span class=\"token operator\">+</span> usage<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//为首次执行的feature添加bool状态 -- 用以判断Enter和Up状态</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> featureKey <span class=\"token operator\">=</span> device<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> usage<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stateDic<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>featureKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            stateDic<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>featureKey<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isDown<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetFeatureValue</span><span class=\"token punctuation\">(</span>usage<span class=\"token punctuation\">,</span><span class=\"token keyword\">out</span> isDown<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> isDown<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stateDic<span class=\"token punctuation\">[</span>featureKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                stateDic<span class=\"token punctuation\">[</span>featureKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>btnEnter <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">btnEnter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>btnDown<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">btnDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>stateDic<span class=\"token punctuation\">[</span>featureKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>btnUp<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">btnUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                stateDic<span class=\"token punctuation\">[</span>featureKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// &lt;summary&gt;</span>\n    <span class=\"token comment\">/// 摇杆事件源触发模板</span>\n    <span class=\"token comment\">/// &lt;/summary&gt;</span>\n    <span class=\"token comment\">/// &lt;param name=\"device\"&gt;设备&lt;/param&gt;</span>\n    <span class=\"token comment\">/// &lt;param name=\"usage\"&gt;功能特征&lt;/param&gt;</span>\n    <span class=\"token comment\">/// &lt;param name=\"joyStickMove\"&gt;移动摇杆事件&lt;/param&gt;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">JoyStickDispatchModel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InputDevice</span> device<span class=\"token punctuation\">,</span><span class=\"token class-name\">InputFeatureUsage<span class=\"token punctuation\">&lt;</span>Vector2<span class=\"token punctuation\">&gt;</span></span> usage<span class=\"token punctuation\">,</span><span class=\"token class-name\">Action<span class=\"token punctuation\">&lt;</span>Vector2<span class=\"token punctuation\">&gt;</span></span> joyStickMove<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token class-name\">Vector2</span> axis<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetFeatureValue</span><span class=\"token punctuation\">(</span>usage<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> axis<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>axis<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>Vector2<span class=\"token punctuation\">.</span>zero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>joyStickMove<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">joyStickMove</span><span class=\"token punctuation\">(</span>axis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>    \n\n    <span class=\"token comment\">//******************每帧轮询监听事件***********************</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">ButtonDispatchModel</span><span class=\"token punctuation\">(</span>leftHandController<span class=\"token punctuation\">,</span> CommonUsages<span class=\"token punctuation\">.</span>triggerButton<span class=\"token punctuation\">,</span> onLeftTriggerEnter<span class=\"token punctuation\">,</span> onLeftTriggerDown<span class=\"token punctuation\">,</span> onLeftTriggerUp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ButtonDispatchModel</span><span class=\"token punctuation\">(</span>rightHandController<span class=\"token punctuation\">,</span> CommonUsages<span class=\"token punctuation\">.</span>triggerButton<span class=\"token punctuation\">,</span> onRightTriggerEnter<span class=\"token punctuation\">,</span> onRightTriggerDown<span class=\"token punctuation\">,</span> onRightTriggerUp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">ButtonDispatchModel</span><span class=\"token punctuation\">(</span>leftHandController<span class=\"token punctuation\">,</span> CommonUsages<span class=\"token punctuation\">.</span>gripButton<span class=\"token punctuation\">,</span> onLeftGripEnter<span class=\"token punctuation\">,</span> onLeftGripDown<span class=\"token punctuation\">,</span> onLeftGripUp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ButtonDispatchModel</span><span class=\"token punctuation\">(</span>rightHandController<span class=\"token punctuation\">,</span> CommonUsages<span class=\"token punctuation\">.</span>gripButton<span class=\"token punctuation\">,</span> onRightGripEnter<span class=\"token punctuation\">,</span> onRightGripDown<span class=\"token punctuation\">,</span> onRightGripUp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">ButtonDispatchModel</span><span class=\"token punctuation\">(</span>leftHandController<span class=\"token punctuation\">,</span> CommonUsages<span class=\"token punctuation\">.</span>primaryButton<span class=\"token punctuation\">,</span> onLeftAXButtonEnter<span class=\"token punctuation\">,</span> onLeftAXButtonDown<span class=\"token punctuation\">,</span> onLeftAXButtonUp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ButtonDispatchModel</span><span class=\"token punctuation\">(</span>rightHandController<span class=\"token punctuation\">,</span> CommonUsages<span class=\"token punctuation\">.</span>primaryButton<span class=\"token punctuation\">,</span> onRightAXButtonEnter<span class=\"token punctuation\">,</span> onRightAXButtonDown<span class=\"token punctuation\">,</span> onRightAXButtonUp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">ButtonDispatchModel</span><span class=\"token punctuation\">(</span>leftHandController<span class=\"token punctuation\">,</span> CommonUsages<span class=\"token punctuation\">.</span>secondaryButton<span class=\"token punctuation\">,</span> onLeftBYButtonEnter<span class=\"token punctuation\">,</span> onLeftBYButtonDown<span class=\"token punctuation\">,</span> onLeftBYButonUp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ButtonDispatchModel</span><span class=\"token punctuation\">(</span>rightHandController<span class=\"token punctuation\">,</span> CommonUsages<span class=\"token punctuation\">.</span>secondaryButton<span class=\"token punctuation\">,</span> onRightBYButtonEnter<span class=\"token punctuation\">,</span> onRightBYButtonDown<span class=\"token punctuation\">,</span> onRightBYButtonUp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">ButtonDispatchModel</span><span class=\"token punctuation\">(</span>leftHandController<span class=\"token punctuation\">,</span> CommonUsages<span class=\"token punctuation\">.</span>primary2DAxisClick<span class=\"token punctuation\">,</span> onLeftJoyStickEnter<span class=\"token punctuation\">,</span> onLeftJoyStickDown<span class=\"token punctuation\">,</span> onLeftJoyStickUp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ButtonDispatchModel</span><span class=\"token punctuation\">(</span>rightHandController<span class=\"token punctuation\">,</span> CommonUsages<span class=\"token punctuation\">.</span>primary2DAxisClick<span class=\"token punctuation\">,</span> onRightJoyStickEnter<span class=\"token punctuation\">,</span> onRightJoyStickDown<span class=\"token punctuation\">,</span> onRightJoyStickUp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">ButtonDispatchModel</span><span class=\"token punctuation\">(</span>leftHandController<span class=\"token punctuation\">,</span> CommonUsages<span class=\"token punctuation\">.</span>menuButton<span class=\"token punctuation\">,</span> onLeftAppButtonEnter<span class=\"token punctuation\">,</span> onLeftAppButtonDown<span class=\"token punctuation\">,</span> onLeftAppButtonUp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ButtonDispatchModel</span><span class=\"token punctuation\">(</span>rightHandController<span class=\"token punctuation\">,</span> CommonUsages<span class=\"token punctuation\">.</span>menuButton<span class=\"token punctuation\">,</span> onRightAppButtonEnter<span class=\"token punctuation\">,</span> onRightAppButtonDown<span class=\"token punctuation\">,</span>onRightAppButtonUp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">JoyStickDispatchModel</span><span class=\"token punctuation\">(</span>leftHandController<span class=\"token punctuation\">,</span> CommonUsages<span class=\"token punctuation\">.</span>primary2DAxis<span class=\"token punctuation\">,</span> onLeftJoyStickMove<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">JoyStickDispatchModel</span><span class=\"token punctuation\">(</span>rightHandController<span class=\"token punctuation\">,</span> CommonUsages<span class=\"token punctuation\">.</span>primary2DAxis<span class=\"token punctuation\">,</span> onRightJoyStickMove<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>单例模式采用的是脚本单例，更多具体的单例模式有兴趣的读者可以自行搜索一下。</p>\n<p>MonoSingleton.cs</p>\n<pre><code class=\"prism language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Common</span>\n<span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token comment\">///&lt;summary&gt;</span>\n    <span class=\"token comment\">///脚本单例类,负责为唯一脚本创建实例</span>\n    <span class=\"token comment\">///&lt;summary&gt;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MonoSingleton<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span> <span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoSingleton<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span></span> <span class=\"token comment\">//注意此约束为T必须为其本身或子类</span>\n    <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token comment\">/*\n        相较于直接在需要唯一创建的脚本中创建实例，Awake初始化的过程需要解决的问题\n        1.代码重复\n        2.在Awake里面初始化，其它脚本在Awake中调用其可能会为Null的异常情况\n         */</span>\n\n        <span class=\"token comment\">//解决1：使用泛型创建实例   解决2：使用按需加载（即有其它脚本调用时在get中加载）</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">T</span> instance<span class=\"token punctuation\">;</span> <span class=\"token comment\">//创建私有对象记录取值，可只赋值一次避免多次赋值</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">T</span> Instance\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//实现按需加载</span>\n            <span class=\"token keyword\">get</span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//当已经赋值，则直接返回即可</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n\n                instance <span class=\"token operator\">=</span> <span class=\"token generic-method\"><span class=\"token function\">FindObjectOfType</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">//为了防止脚本还未挂到物体上，找不到的异常情况，可以自行创建空物体挂上去</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">//如果创建对象，则会在创建时调用其身上脚本的Awake即调用T的Awake(T的Awake实际上是继承的父类的）</span>\n                    <span class=\"token comment\">//所以此时无需为instance赋值，其会在Awake中赋值，自然也会初始化所以无需init()</span>\n                    <span class=\"token comment\">/*instance = */</span>\n                    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GameObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Singleton of \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span> instance<span class=\"token punctuation\">.</span><span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//保证Init只执行一次</span>\n\n                <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Awake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//若无其它脚本在Awake中调用此实例，则可在Awake中自行初始化instance</span>\n            instance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//初始化</span>\n            <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">//子类对成员进行初始化如果放在Awake里仍会出现Null问题所以自行制作一个init函数解决（可用可不用）</span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{<!-- --></span>\n\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</div>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css\" rel=\"stylesheet\"/>\n<link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css\" rel=\"stylesheet\"/>\n</div>", "first_tag": "Others", "cpp": 0, "csharp": 0, "python": 0, "javascript": 0, "java": 0, "sql": 0, "php": 0, "time": "2022-02-25 18:53:49", "summary": "中的输入事件前言为提供的是基于实现的各个功能，针对手柄和头盔的各个按键摇杆事件的获取，均是采用的提供的方法。目前只提供了判断的方式每帧监听的方式，还未提供事件接口等形式。简介为方便读者理解后续，先粗略"}